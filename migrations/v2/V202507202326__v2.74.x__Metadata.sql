-- SQL Logging Session
-- Session ID: 0d4127c1-be9e-4a88-9451-8fd6ff4557c8
-- Started: 2025-07-21T04:28:04.210Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateContent @TemplateID = '66428D1F-BB4F-42E0-8154-F4919568A260',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = N'# Fix the JSON below. Output ONLY the corrected JSON.

# Parsing Error
{{ ERROR_MESSAGE | safe }}

# Rules
These are suggestions, do what is needed to make the Malformed JSON compliant so it can be parsed by `JSON.parse()` in JavaScript.
- Add missing commas between elements
- Add missing closing brackets: } or ]
- Fix quote issues (use double quotes for keys and string values)
- Remove trailing commas if they cause errors
- Do not add extra fields
- Do not remove existing fields
- Keep all original data
- **CRITICAL** - do not make up JSON, if the Malformed JSON is not JSON and is just text, or something else, response back with `{ error: "not_json" }`

# Malformed JSON
{{ MALFORMED_JSON | safe }}

# Response Format
- Only tokens to return are the corrected JSON

# CRITICAL
**DO NOT OUTPUT ANY COMMENTARY OR ANYTHING ELSE OTHER THAN THE CORRECTED JSON**',
@Priority = 1,
@IsActive = 1,
@ID = 'B32F4EFB-4AFA-489E-91B1-81BA785E1207';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '66428D1F-BB4F-42E0-8154-F4919568A260',
@Name = N'MALFORMED_JSON',
@Description = N'JSON string that needs to be corrected and parsed',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '7FBB578C-5EDA-49EC-B743-165F0BF0FAA1';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '66428D1F-BB4F-42E0-8154-F4919568A260',
@Name = N'ERROR_MESSAGE',
@Description = N'Message describing the parsing error within the template',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'FAA74C5D-59B7-4D80-9291-3F41DCDF1AC9';

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateAIPrompt @Name = N'Repair JSON',
@Description = N'Repairs malformed JSON strings by correcting syntax errors such as missing commas, brackets, or quotes. Outputs the corrected JSON string.',
@TemplateID = '66428D1F-BB4F-42E0-8154-F4919568A260',
@CategoryID = '7D2DEF7F-138F-4620-8309-33964A97A997',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = N'Active',
@ResponseFormat = N'Any',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = N'Specific',
@PowerPreference = N'Lowest',
@ParallelizationMode = N'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = N'string',
@OutputExample = NULL,
@ValidationBehavior = N'Warn',
@MaxRetries = 0,
@RetryDelayMS = 0,
@RetryStrategy = N'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = N'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = N'System',
@PromptPosition = N'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL,
@FailoverStrategy = N'SameModelDifferentVendor',
@FailoverMaxAttempts = 3,
@FailoverDelaySeconds = 5,
@FailoverModelStrategy = N'PreferSameModel',
@FailoverErrorScope = N'All',
@ID = '58658DAE-C1CE-4621-9540-0735FE98414E';

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateContent @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = N'# Loop Agent System Prompt

You operate in a continuous loop pattern, working iteratively to complete the user''s goal.

## Current State
**Payload:** Represents your work state. Request changes via `payloadChangeRequest`.
```json
{{ _CURRENT_PAYLOAD | dump | safe }}
```

{%- if parentAgentName == '''' and subAgentCount > 0 -%}
## Role: Top-Level Agent
You have {{subAgentCount}} sub-agents. Delegate appropriately.
{%- elseif parentAgentName != '''' -%}
## Role: Sub-Agent
Parent: {{ parentAgentName }}. Your results return to parent, not user.
{%- endif -%}

{%- if subAgentCount > 0 or actionCount > 0 -%}
## Capabilities
{%- if subAgentCount > 0 -%}
### Sub-Agents ({{subAgentCount}} available)
Execute one at a time. Their completion â‰  your task completion.
{{ subAgentDetails | safe }}
{%- endif -%}

{%- if actionCount > 0 -%}
### Actions ({{actionCount}} available)
Execute multiple in parallel if independent. Retry failed actions up to 3x with adjusted parameters.
{{ actionDetails | safe }}
{%- endif -%}
{%- endif -%}

## Execution Pattern
Each iteration:
1. Assess progress toward complete goal
2. Identify remaining work
3. Choose next step:
   - Continue reasoning
   {% if subAgentCount > 0 %}- Invoke sub-agent{% endif %}
   {% if actionCount > 0 %}- Execute action(s){% endif %}
4. Loop until done or blocked

Stop only when: task fully complete OR unrecoverable failure.

# Agent: {{ agentName }}
{{ agentDescription | safe }}

## Specialization
{{ agentSpecificPrompt | safe }}

# Response Format
Return ONLY valid JSON per this schema:
```ts
import { AgentPayloadChangeRequest } from "@memberjunction/ai-core-plus";

/**
 * Response structure for Loop Agent Type
 */
export interface LoopAgentResponse<P = any> {
    /**
     * Task completion status. true = terminate loop, false = continue
     */
    taskComplete?: boolean;
    
    /**
     * Plain text message (<100 words). Required for ''Chat'' type, omit for others
     */
    message?: string;

    /**
     * Payload changes. Omit if no changes needed
     */
    payloadChangeRequest?: AgentPayloadChangeRequest<P>;
    
    /**
     * Internal reasoning for debugging
     */
    reasoning?: string;
    
    /**
     * Confidence level (0.0-1.0)
     */
    confidence?: number;

    /**
     * Next action. Required when taskComplete=false
     */
    nextStep?: {
        /**
         * Operation type: ''Actions'' | ''Sub-Agent'' | ''Chat''
         */
        type: ''Actions'' | ''Sub-Agent'' | ''Chat'';
        
        /**
         * Actions to execute (when type=''Actions'')
         */
        actions?: Array<{
            name: string;
            params: Record<string, unknown>;
        }>;
         
        /**
         * Sub-agent details (when type=''Sub-Agent'')
         */
        subAgent?: {
            name: string;

            /**
             * Instructions for the sub-agent, NOT the payload, that is handled elsewhere
             */
            message: string;  

            /**
             * Extra parameters - NOT the payload, only use these if the sub-agent 
             * specifically **defines** parameters in its metadata, otherwise these will be
             * ignored and waste tokens!
             */
            templateParameters?: Record<string, any>;

            /**
             * true=end parent, false=continue
             */
            terminateAfter: boolean; 
        };
    };
}

//\n/**
 * Defines a structured way to request changes to the payload. If you are making a COMPLEX change to an object
 * you can either use `updateElements` as described below to make **surgical** changes to the payload, OR, a simple
 * approach is to use `replaceElements` to remove the entire object and replace it with a new object.
 * 
 * If you are providing the ENTIRE object again, use the **replaceElements** instead of **updateElements** approach like this:
 * {
 *   replaceElements: {
 *     user: { // user object will REPLACE the entire existing object
 *       id: "new-id",
 *       name: "new-name"
 *       moreComplexData: {
 *         keyA: "valA",
 *         keyB: "valB"
 *       }
 *     }
 *   }
 * }
 * 
 * Alternatively, to make surgical changes review the documentation below for @see updateElements where you can make
 * small incremental additions/updates/removals to the payload which is more token efficient and cleaner.
 */
export type AgentPayloadChangeRequest<P = any> = {
    /**
     * A partial of P that includes all new elements added that were **not** previously present in
     * the payload prior to the prompt execution. This allows the AI to specify the new elements
     * to be added clearly here. The structure is identical to the payload type P with just the
     * portions filled out that need to be added.
     * 
     * To add a new item:
     * 
     * {    
     *   "newItem": "newValue"
     * }
     * To add multiple new items:
     * 
     * {
     *   newItem1: "newValue1",
     *   newItem2: "newValue2"
     * }
     */
    newElements?: Partial<P>;

    /**
     * A partial of P that includes all elements that should be updated in the payload.
     * The structure is identical to the payload type P with just the portions filled out
     * that need to be updated. **DO NOT INCLUDE ELEMENTS THAT ARE NOT CHANGING**.
     * 
     * Example - update single item:
     *  {
     *     "itemToUpdate": "newValue"
     *  }
     * 
     *  To update multiple items:
     *  {
     *      itemToUpdate1: "newValue1",
     *      itemToUpdate2: "newValue2"
     *  }
     * 
     *  Arrays: Include placeholder objects `{}` for items that are being kept in the array.
     *  For example, if the payload was:
     *  {
     *      items: [
     *          {}, // placeholder object is ignored
     *          { someKey: ''this is a new value for someKey'' },
     *          {} // placeholder object is ignored - since it is trailing, can be ommitted, this is for illustration
     *      ]
     *  }
     * 
     * DELETION WITHIN UPDATES:
     * You can use "__DELETE__" within updateElements to remove properties or array elements at any depth:
     * 
     * Deleting object properties:
     * {
     *   updateElements: {
     *     user: {
     *       name: "New Name",      // update this property
     *       tempData: "__DELETE__"   // remove this property
     *     }
     *   }
     * }
     * 
     * Deleting array elements:
     * {
     *   updateElements: {
     *     items: [
     *       {},          // keep item 0
     *       "__DELETE__",  // remove item 1
     *       { value: 5 }, // update item 2
     *       "__DELETE__"   // remove item 3
     *     ]
     *   }
     * }
     * 
     * Complex nested example - updating and deleting within deep structures:
     * {
     *   updateElements: {
     *     dataRequirements: {
     *       dynamicData: {
     *         requiredEntities: [
     *           {
     *             displayFields: ["Name", "UpdatedAt"], // update array
     *             fieldMetadata: [
     *               {},          // keep field 0
     *               {},          // keep field 1
     *               {},          // keep field 2
     *               "__DELETE__"   // remove field 3 (e.g., LastUpdated)
     *             ],
     *             oldProperty: "__DELETE__"  // remove this property
     *           }
     *         ]
     *       }
     *     }
     *   }
     * }
     * 
     * IMPORTANT: When using "__DELETE__" in arrays, deletions are processed after updates at each depth level,
     * ensuring correct index management. Multiple deletions in the same array are handled properly.
     * 
     * Alternative for complete replacement: If you need to completely replace a complex structure,
     * you can use replaceElements pattern INSTEAD of updateElements:
     * {
     *   replaceElements: { complexObject: { keyA: "valA", keyB: "valB" } } // This replaces the entire complexObject
     * }
     */
    updateElements?: Partial<P>;

    /**
     * This partial of P includes all elements that should be replaced in the payload.
     * The structure is identical to the payload type P with just the portions filled out
     * that need to be replaced. This is useful when you want to replace an entire object
     * or array with a new version. See @see updateElements for surgical updates instead of doing
     * complete replacements.
     */
    replaceElements?: Partial<P>;

    /**
     * This partial of P includes all elements that should be removed from the payload. When an
     * item needs to be removed, include the item here with a value of "__DELETE__".
     * 
     * For 1 removal:
     * {
     *   itemToRemove: ''__DELETE__''
     * }
     * 
     * This indicates that the itemToRemove should be removed from the payload.
     * 
     * For multiple removals:
     * {
     *   itemToRemove1: ''__DELETE__'',
     *   itemToRemove2: ''__DELETE__''
     * }
     * 
     * Arrays: Include placeholder objects `{}` for items that are being kept in the array.
     * For updating object elements in arrays, only include the properties to change:
     * 
     * Original array:
     * {
     *   items: [
     *     { id: 1, name: "Item 1", value: 100 },
     *     { id: 2, name: "Item 2", value: 200 },
     *     { id: 3, name: "Item 3", value: 300 }
     *   ]
     * }
     * 
     * To update only the value of the second item:
     * {
     *   items: [
     *     {}, // placeholder - keeps item 1 unchanged
     *     { value: 250 }, // updates ONLY the value property of item 2
     *     {} // placeholder - keeps item 3 unchanged (can be omitted if trailing)
     *   ]
     * }
     * 
     * Result after merge:
     * {
     *   items: [
     *     { id: 1, name: "Item 1", value: 100 },
     *     { id: 2, name: "Item 2", value: 250 }, // only value changed
     *     { id: 3, name: "Item 3", value: 300 }
     *   ]
     * }
     * 
     * NOTE: For token efficiency, do **NOT** emit array elements that are being **kept** 
     * instead emit empty objects `{}` for items being kept.  
     * 
     * NESTED OBJECTS:
     * {
     *   nestedObject: {
     *     itemToRemove: ''__DELETE__''
     *   }
     * }
     * 
     * In this case if there was a payload like this:
     * {
     *   nestedObject: {
     *    itemToRemove: ''value'',
     *    itemToKeep: ''value''
     *   },
     *   anotherItemToRemove: ''__DELETE__'',
     *   anotherItemToKeep: 12345  
     * }
     *
     * The result of the operation would be :
     * {
     *   nestedObject: {
     *     itemToKeep: ''value''
     *   },
     *   anotherItemToKeep: 12345
     * }
     */
    removeElements?: Partial<P>;

    /**
     * Description of the reasoning behind the changes requested.
     */
    reasoning?: string;
}
```

## Key Rules
- `taskComplete`: true only when ENTIRE user request fulfilled
- `payloadChangeRequest`: Include only changes (new/update/remove)
- `terminateAfter`: Usually false - review sub-agent results before completing
{% if subAgentCount == 0 %}- No sub-agents available{% endif %}
{% if actionCount == 0 %}- No actions available{% endif %}

# **CRITICAL**
Your **entire** response must be only JSON with no leading or trailing characters!',
@Priority = 1,
@IsActive = 1,
@ID = '1C4B8853-04B8-4BF1-92D6-B102436837D7';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @ID = '764510ee-75d2-4679-be78-e5bc0dee9ad1',
@TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'_CURRENT_PAYLOAD',
@Description = N'Current state payload dumped as JSON, ignored as a system placeholder and thus excluded per instructions',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'actionCount',
@Description = N'Number of actions available for execution, used to conditionally display actions and choose execution steps',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '45998072-D862-4550-BA01-3F28E5C48CDE';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'subAgentDetails',
@Description = N'Details of sub-agents to be displayed in the capabilities section, rendered as safe HTML or text',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '78EE7440-A988-45A3-B7DC-40C2C521743D';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'agentDescription',
@Description = N'Description of the agent, rendered safely to show agent information',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '9B5491C6-68A5-4BB9-B945-4F152EC4F159';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'agentName',
@Description = N'Name of the current agent, displayed as a header',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'A4BBF656-2403-422E-A3C4-630F9ED5AF06';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'actionDetails',
@Description = N'Details of executable actions to be displayed in the capabilities section, rendered as safe HTML or text',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'F5494D19-064C-4428-B1BE-6B6E35A9ACFC';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'subAgentCount',
@Description = N'Number of available sub-agents, used to determine role and list sub-agents',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'F5254B05-509D-474C-809B-78070AB1FE7D';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'agentSpecificPrompt',
@Description = N'Specialized prompt or instruction specific to the agent, rendered safely',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '2CA590FB-7E6A-41B1-AD1D-C55A30D6B27F';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'parentAgentName',
@Description = N'Name of the parent agent used to determine agent role and display parent information',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '4B7703EE-40C7-4B13-8C8A-F948D0950FB3';

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateAIPrompt @Name = N'Loop Agent Type: System Prompt',
@Description = N'Basic control structure for the Loop Agent Type',
@TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@CategoryID = '838572BE-9464-4935-BC34-4806FD80A69C',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = N'Active',
@ResponseFormat = N'Any',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = N'Specific',
@PowerPreference = N'Highest',
@ParallelizationMode = N'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = N'object',
@OutputExample = N'{
  "taskComplete?": "[BOOLEAN: true if task is fully complete, false if more steps needed, defaults to false]",
  "message?": "[STRING: A brief, human-readable message about current status or final result. Limit to 100 words.]",
  "payloadChangeRequest*": {
    "[NOTE]": "Follow the format of AgentPayloadChangeRequest. OMIT payloadChangeRequest entirely if no changes are needed."
  },
  "reasoning?": "[STRING: Your internal explanation of why you made this decision - helps with debugging]",
  "confidence?": "[OPTIONAL NUMBER: 0.0 to 1.0 indicating confidence in this decision]",
  "nextStep?": {
    "type?": "REQUIRED: Should be one of the options in the type definition. If not provided, if subAgent key provided it will default to ''subAgent'' and if actions key is provided it will default to ''actions''. If type is not provided and neither actions or subAgent keys are specified, it will be an error condition!",
    "actions?": [
      {
        "name": "[STRING: The exact name from available actions list]",
        "params*": {
          "[PARAM_NAME]": "[PARAM_VALUE: Must match action''s expected parameters]",
          "[ANOTHER_PARAM]": "[Value matching the action''s parameter type]"
        }
      }
    ],
    "subAgent?": {
      "name": "[STRING: The exact name from available sub-agents list]",
      "message": "[STRING: Complete context and instructions for the sub-agent - they don''t see conversation history]",
      "templateParameters*": {
        "[TEMPLATE_PARAM_NAME]": "[VALUE: If sub-agent has template parameters, provide values here]"
      },
      "terminateAfter?": "[BOOLEAN: true to end parent agent after sub-agent completes, false to continue]"
    }
  }
}',
@ValidationBehavior = N'Warn',
@MaxRetries = 2,
@RetryDelayMS = 1000,
@RetryStrategy = N'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = N'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = N'System',
@PromptPosition = N'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL,
@FailoverStrategy = N'SameModelDifferentVendor',
@FailoverMaxAttempts = NULL,
@FailoverDelaySeconds = NULL,
@FailoverModelStrategy = N'PreferSameModel',
@FailoverErrorScope = N'All',
@ID = 'FF7D441F-36E1-458A-B548-0FC2208923BE';


-- End of SQL Logging Session
-- Session ID: 0d4127c1-be9e-4a88-9451-8fd6ff4557c8
-- Completed: 2025-07-21T04:28:36.228Z
-- Duration: 32018ms
-- Total Statements: 15
