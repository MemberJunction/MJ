-- Add UserID column to [__mj].[ConversationDetail] if it does not exist
IF NOT EXISTS (
    SELECT 1 FROM sys.columns WHERE Name = 'UserID' AND Object_ID = Object_ID('${flyway:defaultSchema}.[ConversationDetail]')
)
BEGIN
    ALTER TABLE ${flyway:defaultSchema}.[ConversationDetail] ADD UserID UNIQUEIDENTIFIER NULL;
    ALTER TABLE ${flyway:defaultSchema}.[ConversationDetail] ADD CONSTRAINT FK_ConversationDetail_User FOREIGN KEY (UserID) REFERENCES ${flyway:defaultSchema}.[User](ID);
END;

-- Add extended property for UserID
IF NOT EXISTS (
    SELECT 1 FROM sys.extended_properties 
    WHERE name = 'MS_Description' 
    AND major_id = OBJECT_ID('${flyway:defaultSchema}.[ConversationDetail]') 
    AND minor_id = (SELECT column_id FROM sys.columns WHERE Name = 'UserID' AND Object_ID = Object_ID('${flyway:defaultSchema}.[ConversationDetail]'))
)
BEGIN
    EXEC sp_addextendedproperty 
        @name = N'MS_Description', 
        @value = N'This field, when populated, overrides the UserID at the Conversation level to specify a different user created the message.', 
        @level0type = N'Schema', @level0name = '${flyway:defaultSchema}', 
        @level1type = N'Table', @level1name = 'ConversationDetail', 
        @level2type = N'Column', @level2name = 'UserID';
END;

/* SQL text to insert new entity field */

IF NOT EXISTS (
    SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
    WHERE ID = '68ea370b-0ab9-45af-a1ec-88a94329a3a2'  OR 
        (EntityID = '12248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'UserID')
    -- check to make sure we're not inserting a duplicate entity field metadata record
)
BEGIN
    INSERT INTO [${flyway:defaultSchema}].EntityField
    (
    ID,
    EntityID,
    Sequence,
    Name,
    DisplayName,
    Description,
    Type,
    Length,
    Precision,
    Scale,
    AllowsNull,
    DefaultValue,
    AutoIncrement,
    AllowUpdateAPI,
    IsVirtual,
    RelatedEntityID,
    RelatedEntityFieldName,
    IsNameField,
    IncludeInUserSearchAPI,
    IncludeRelatedEntityNameFieldInBaseView,
    DefaultInView,
    IsPrimaryKey,
    IsUnique,
    RelatedEntityDisplayType
    )
    VALUES
    (
    '68ea370b-0ab9-45af-a1ec-88a94329a3a2',
    '12248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Conversation Details
    14,
    'UserID',
    'User ID',
    'This field, when populated, overrides the UserID at the Conversation level to specify a different user created the message.',
    'uniqueidentifier',
    16,
    0,
    0,
    1,
    'null',
    0,
    1,
    0,
    'E1238F34-2837-EF11-86D4-6045BDEE16E6',
    'ID',
    0,
    0,
    1,
    0,
    0,
    0,
    'Search'
    )
END

/* SQL text to update entity field value sequence */
UPDATE [${flyway:defaultSchema}].EntityFieldValue SET Sequence=1 WHERE ID='C051302D-7236-EF11-86D4-6045BDEE16E6'

/* SQL text to update entity field value sequence */
UPDATE [${flyway:defaultSchema}].EntityFieldValue SET Sequence=3 WHERE ID='BE51302D-7236-EF11-86D4-6045BDEE16E6'

/* SQL text to create Entitiy Relationships */

IF NOT EXISTS (
    SELECT 1
    FROM [${flyway:defaultSchema}].EntityRelationship
    WHERE ID = 'a59ac0f7-7da7-468a-9409-9985f9d81251'
)
BEGIN
    INSERT INTO ${flyway:defaultSchema}.EntityRelationship (ID, EntityID, RelatedEntityID, RelatedEntityJoinField, Type, BundleInAPI, DisplayInForm, DisplayName, Sequence)
                            VALUES ('a59ac0f7-7da7-468a-9409-9985f9d81251', 'E1238F34-2837-EF11-86D4-6045BDEE16E6', '12248F34-2837-EF11-86D4-6045BDEE16E6', 'UserID', 'One To Many', 1, 1, 'Conversation Details', 2);
END
                              

/* Index for Foreign Keys for ConversationDetail */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ConversationID in table ConversationDetail
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ConversationDetail_ConversationID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ConversationDetail]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ConversationDetail_ConversationID ON [${flyway:defaultSchema}].[ConversationDetail] ([ConversationID]);

-- Index for foreign key UserID in table ConversationDetail
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ConversationDetail_UserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ConversationDetail]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ConversationDetail_UserID ON [${flyway:defaultSchema}].[ConversationDetail] ([UserID]);

/* SQL text to update entity field related entity name field map for entity field ID 68EA370B-0AB9-45AF-A1EC-88A94329A3A2 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='68EA370B-0AB9-45AF-A1EC-88A94329A3A2',
         @RelatedEntityNameFieldMap='User'

/* Base View SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: vwConversationDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Conversation Details
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ConversationDetail
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwConversationDetails]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwConversationDetails]
AS
SELECT
    c.*,
    Conversation_ConversationID.[Name] AS [Conversation],
    User_UserID.[Name] AS [User]
FROM
    [${flyway:defaultSchema}].[ConversationDetail] AS c
INNER JOIN
    [${flyway:defaultSchema}].[Conversation] AS Conversation_ConversationID
  ON
    [c].[ConversationID] = Conversation_ConversationID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [c].[UserID] = User_UserID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwConversationDetails] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* Base View Permissions SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: Permissions for vwConversationDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwConversationDetails] TO [cdp_Developer], [cdp_UI], [cdp_Integration]

/* spCreate SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: spCreateConversationDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ConversationDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateConversationDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateConversationDetail]
    @ConversationID uniqueidentifier,
    @ExternalID nvarchar(100),
    @Role nvarchar(20),
    @Message nvarchar(MAX),
    @Error nvarchar(MAX),
    @HiddenToUser bit,
    @UserRating int,
    @UserFeedback nvarchar(MAX),
    @ReflectionInsights nvarchar(MAX),
    @SummaryOfEarlierConversation nvarchar(MAX),
    @UserID uniqueidentifier = '00000000-0000-0000-0000-000000000000'
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ConversationDetail]
        (
            [ConversationID],
            [ExternalID],
            [Role],
            [Message],
            [Error],
            [HiddenToUser],
            [UserRating],
            [UserFeedback],
            [ReflectionInsights],
            [SummaryOfEarlierConversation],
            [UserID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @ConversationID,
            @ExternalID,
            @Role,
            @Message,
            @Error,
            @HiddenToUser,
            @UserRating,
            @UserFeedback,
            @ReflectionInsights,
            @SummaryOfEarlierConversation,
            CASE @UserID WHEN '00000000-0000-0000-0000-000000000000' THEN null ELSE @UserID END
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwConversationDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for Conversation Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spUpdate SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: spUpdateConversationDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ConversationDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateConversationDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateConversationDetail]
    @ID uniqueidentifier,
    @ConversationID uniqueidentifier,
    @ExternalID nvarchar(100),
    @Role nvarchar(20),
    @Message nvarchar(MAX),
    @Error nvarchar(MAX),
    @HiddenToUser bit,
    @UserRating int,
    @UserFeedback nvarchar(MAX),
    @ReflectionInsights nvarchar(MAX),
    @SummaryOfEarlierConversation nvarchar(MAX),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ConversationDetail]
    SET
        [ConversationID] = @ConversationID,
        [ExternalID] = @ExternalID,
        [Role] = @Role,
        [Message] = @Message,
        [Error] = @Error,
        [HiddenToUser] = @HiddenToUser,
        [UserRating] = @UserRating,
        [UserFeedback] = @UserFeedback,
        [ReflectionInsights] = @ReflectionInsights,
        [SummaryOfEarlierConversation] = @SummaryOfEarlierConversation,
        [UserID] = @UserID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwConversationDetails]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ConversationDetail table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateConversationDetail
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateConversationDetail
ON [${flyway:defaultSchema}].[ConversationDetail]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ConversationDetail]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ConversationDetail] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Conversation Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spDelete SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: spDeleteConversationDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ConversationDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteConversationDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteConversationDetail]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ConversationDetail]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spDelete Permissions for Conversation Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* SQL text to insert new entity field */

IF NOT EXISTS (
    SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
    WHERE ID = '50d773c6-6e9f-4c00-aae3-a284abe38676'  OR 
        (EntityID = '12248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'User')
    -- check to make sure we're not inserting a duplicate entity field metadata record
)
BEGIN
    INSERT INTO [${flyway:defaultSchema}].EntityField
    (
    ID,
    EntityID,
    Sequence,
    Name,
    DisplayName,
    Description,
    Type,
    Length,
    Precision,
    Scale,
    AllowsNull,
    DefaultValue,
    AutoIncrement,
    AllowUpdateAPI,
    IsVirtual,
    RelatedEntityID,
    RelatedEntityFieldName,
    IsNameField,
    IncludeInUserSearchAPI,
    IncludeRelatedEntityNameFieldInBaseView,
    DefaultInView,
    IsPrimaryKey,
    IsUnique,
    RelatedEntityDisplayType
    )
    VALUES
    (
    '50d773c6-6e9f-4c00-aae3-a284abe38676',
    '12248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Conversation Details
    16,
    'User',
    'User',
    NULL,
    'nvarchar',
    200,
    0,
    0,
    1,
    'null',
    0,
    0,
    1,
    NULL,
    NULL,
    0,
    0,
    0,
    0,
    0,
    0,
    'Search'
    )
END