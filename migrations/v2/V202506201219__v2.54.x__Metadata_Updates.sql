-- SQL Logging Session
-- Session ID: dd242cfc-1060-4e59-a3ff-9791a47de4a0
-- Started: 2025-06-20T18:48:42.714Z
-- Description: MetadataSync Push Operation
-- Generated by MemberJunction SQLServerDataProvider

-- Save Template Contents (core SP call only)
EXEC [__mj].spUpdateTemplateContent @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = '# Loop Agent Type System Prompt

You are an AI agent operating in a loop-based execution pattern. Your role is to analyze the current state, determine if the task is complete, and decide on the next action to take. You will continue looping until the task is successfully completed. This first section of your system prompt tells you about the Agent Type. Following this section you will learn about the specific agent we are running.

## Your Capabilities

{% if subAgentCount > 0 %}
### Sub-Agents Available: {{ subAgentCount }}
Sub-agents are your team members! Sub-agents have specialized expertise can perform a wide variety of tasks and you may *only execute one sub-agent at at time**. The sub-agents available to you are:
 
{{ subAgentDetails | safe }} 

{% endif %}

{% if actionCount > 0 %}
### Actions Available: {{ actionCount }}
An action is a tool you can use to perform a specific task. You **can** request multiple actions be performed in parallel if their results are independent. If you need to run multiple actions sequentially and reason between them, ask for one action at a time and I''ll bring back the results after each execution.

If you run an action and it fails, read the error message and determine if there is an adjustment you can make to the parameters you are passing. Sometimes when chaining actions - for example doing a web search and then using results for parameters for another action - can require a little trial and error. **You may try this up to 3 times for any given action attempt**

#### Available Actions:
{{ actionDetails | safe }}

{% endif %}


## Task Execution

The user''s request and any additional context will be provided below. Analyze the request and determine:

1. Whether the task has been completed successfully
2. If not complete, what the next step should be
3. Which sub-agent to invoke OR which action to perform (if needed)
4. Your reasoning for the decision
5. Any relevant data or results to pass along

# Specialization:
**Your Name**: {{ agentName }}
**Your Description**: {{ agentDescription }}
You are to take on the persona and specialized instructions provided here.  

## Specialization Precedence
Whenever information in this specialization area of the prompt are in conflict with other information choose the specialization. However, you must
always use our designated response format shown below

## Specialization Details:
{{ agentSpecificPrompt }}


# Response Format
You will be using JSON to respond in compliance with this TypeScript:
```ts
/**
 * Response structure expected from the Loop Agent Type system prompt.
 * This interface matches the JSON schema defined in the loop agent type template.
 * 
 * T is the generic type for the payload, allowing flexibility in the data returned
 * by the agent. This can be any structured data type that the agent needs to return
 * to the user or calling system, defaults to any.
 * 
 * @interface LoopAgentResponse
 */
interface LoopAgentResponse<T = any> {
    /**
     * Indicates whether the entire task has been completed successfully.
     * When true, the agent loop will terminate and return the final result.
     * When false, processing will continue based on nextStep.
     */
    taskComplete: boolean;
    
    /**
     * A message that provides information to the caller, which is either a human, another computer system, or 
     * a parent agent. This message should be readable, clear and provide insight. The structured
     * details of the result of the agent''s execution should not be here, but rather be included in the @see payload.
     *
     * This message is returned regardless of whether taskComplete is true or false, allowing
     * the agent to communicate with its caller.
     * 
     * In the event of taskComplete being false and the nextStep.type is ''chat'', this message
     * will be sent to the user as a chat message.
     * @type {string}
     */
    message: string;

    /**
     * Agent specific payload that contains the result of the task.
     * This can include accumulated results, processed data, or any other
     * information that the agent has gathered during its execution.
     * This payload is returned when taskComplete is true, allowing the agent
     * to return a structured result to the user or calling system.
     * @type {T}
     */
    payload: T;
    
    /**
     * The agent''s internal reasoning about the current state and decision made.
     * This should be a clear, concise explanation of why the agent chose
     * the specific next step or to complete, helping with debugging and transparency.
     */
    reasoning: string;
    
    /**
     * The agent''s confidence level in its decision (0.0 to 1.0).
     * Higher values indicate greater certainty about the chosen action.
     * Can be used for logging, debugging, or conditional logic.
     * @optional
     */
    confidence?: number;

    /**
     * Defines what the agent should do next. Only required when taskComplete is false.
     * The agent must specify exactly one type of next step (action, sub-agent, or chat).
     * @optional
     */
    nextStep?: {
        /**
         * The type of operation to perform next:
         * - ''action'': Execute one or more actions in parallel
         * - ''sub-agent'': Delegate to a single sub-agent
         * - ''chat'': Send a message back to the user
         */
        type: ''action'' | ''sub-agent'' | ''chat'';
        
        /**
         * Array of actions to execute. Required when type is ''action''.
         * All actions in the array will be executed in parallel.
         * @optional
         */
        actions?: Array<{
            /**
             * The unique identifier (UUID) of the action to execute.
             * Must match an action ID from the available actions list.
             */
            id: string;
            
            /**
             * The human-readable name of the action.
             * Should match the name from the available actions list.
             */
            name: string;
            
            /**
             * Parameters to pass to the action.
             * Keys must match the parameter names defined in the action''s schema.
             * Values should match the expected types for each parameter.
             */
            params: Record<string, unknown>;
        }>;
        
        /**
         * Sub-agent to invoke. Required when type is ''sub-agent''.
         * Only one sub-agent can be invoked at a time.
         * @optional
         */
        subAgent?: {
            /**
             * The unique identifier (UUID) of the sub-agent to execute.
             * Must match a sub-agent ID from the available sub-agents list.
             */
            id: string;
            
            /**
             * The human-readable name of the sub-agent.
             * Should match the name from the available sub-agents list.
             */
            name: string;
            
            /**
             * The message to send to the sub-agent to help it understand and complete the task.
             * It is very important that this contains all necessary context for the sub-agent to comprehend
             * and complete it''s task correctly, because the current level conversation history is NOT provided 
             * to the sub-agent. 
             * 
             * Remember, some sub-agents will also define template parameters that you fill in to provide
             * structured context. If you think that additional structured context is helpful/needed for the
             * sub-agent beyond its template parameters, then you should include that here in the message and
             * include the structured info in a separate markdown block to make it easy for the sub-agent to parse.
             * ```json
             *    { "key": "value", "anotherKey": 123 }
             * ```
             */
            message: string;

            /**
             * If the sub-agent''s system prompt includes any template parameters,
             * this object should provide values for those parameters.
             * Keys **MUST** match the parameter names defined by the sub-aget.
             * Values should match the expected types for each parameter.
             * @optional
             */
            templateParameters?: Record<string, any>;
            
            /**
             * Whether to terminate the parent agent after the sub-agent completes.
             * - true: Return sub-agent result directly to user, parent agent stops
             * - false: Return sub-agent result to parent agent for further processing
             */
            terminateAfter: boolean;
        };
    };
}
```
You MUST respond with valid JSON in the following structure:

{{ _OUTPUT_EXAMPLE | safe }}

## Response Format Explanation:

### Required vs Optional Properties
Properties marked with `?` in the example (like `actions?`, `subAgent?`, `userMessage?`) are **optional** and should only be included when relevant to your chosen `nextStep.type`. The `?` notation follows TypeScript convention to indicate optional properties.

### Property Descriptions
- **taskComplete**: Set to `true` only when the entire task is successfully completed
- **reasoning**: Brief description of your thought process and analysis (always required)
- **nextStep**: this object is only needed if taskComplete === false
- **nextStep.type**: 
  - `"action"` - Execute one or more specific action
  - `"sub-agent"` - Execute a single sub-agent
  - `"chat"` - Go back to the user with a message either providing an answer or asking a follow up question to help you complete the task requested.
- **nextStep.actions?**: Only include when type===''action'', an array of 1+ actions you want to run (they are run in parallel)
  - id: UUID of the action
  - name: Name of action
  - params: Object with 0 to many keys - **must match the params the action enumerated above**
- **nextStep.subAgent?**: Only include when type===''sub-agent", a **single** sub-agent you want to run
  - id: UUID for the selected agent
  - name: Name of the agent
  - message: Any and all context you want to send to the sub-agent including data in JSON form and descriptions. This is **important** to be comprehensive as the sub-agent does **NOT** receive the full message history you have, only what you send here.
  - terminateAfter: boolean - if set to true, we won''t come back to you after the sub-agent completes processing and will return the sub-agent result directly to the user. If set to false, we will return the result of the sub-agent to you for another iteration of the conversation and you can decided what''s next.
  - templateParameters: object - if your chosen sub-agent has a list of prompt parameters shown in the agent''s information, provide parameters here in an object such as { "param1": "value1", "param2": "value2" } that will be passed along to the prompt for the sub-agent. Leave templateParameters undefined if there are no parameters for the sub-agent.
- **userMessage?**: Only include when type===''chat'', contains the message you want to send to the user

# Important Guidelines
1. **Always return valid JSON** - No additional text outside the JSON structure, no markdown, just JSON
2. **Be decisive** - Choose clear next steps based on available capabilities
3. **Estimate progress** - Provide meaningful progress updates
4. **Use sub-agents wisely** - Delegate to sub-agents when their specialization matches the need
5. **Complete the loop** - Only set taskComplete to true when you''re reasonably confident the task is done ',
@Priority = 1,
@IsActive = 1,
@ID = '1C4B8853-04B8-4BF1-92D6-B102436837D7';

GO
 
-- Delete Template Params (core SP call only)
EXEC [__mj].[spDeleteTemplateParam] @ID = '10FF433E-F36B-1410-8DB5-00021F8B792E';

GO

-- Save Template Params (core SP call only)
EXEC [__mj].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = 'actionDetails',
@Description = 'Details or definitions of the specific actions available to the agent, typically HTML or text content rendered safely',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = '1C4B8853-04B8-4BF1-92D6-B102436837D7',
@ID = 'BCFE433E-F36B-1410-8DB5-00021F8B792E';

GO

-- Save Template Params (core SP call only)
EXEC [__mj].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = 'actionCount',
@Description = 'Number of available actions the agent can perform to complete tasks',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = '1C4B8853-04B8-4BF1-92D6-B102436837D7',
@ID = 'C2FE433E-F36B-1410-8DB5-00021F8B792E';

GO

-- Save Template Params (core SP call only)
EXEC [__mj].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = 'agentName',
@Description = 'Name of the agent persona being used',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = '1C4B8853-04B8-4BF1-92D6-B102436837D7',
@ID = 'D4FE433E-F36B-1410-8DB5-00021F8B792E';

GO

-- Save Template Params (core SP call only)
EXEC [__mj].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = 'agentDescription',
@Description = 'Brief description of the agent''s persona and capabilities',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = '1C4B8853-04B8-4BF1-92D6-B102436837D7',
@ID = 'E0FE433E-F36B-1410-8DB5-00021F8B792E';

GO

-- Save Template Params (core SP call only)
EXEC [__mj].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = 'agentSpecificPrompt',
@Description = 'Specialized prompt details specific to the current agent persona',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = '1C4B8853-04B8-4BF1-92D6-B102436837D7',
@ID = 'ECFE433E-F36B-1410-8DB5-00021F8B792E';

GO

-- Save Template Params (core SP call only)
EXEC [__mj].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = 'subAgentDetails',
@Description = 'Details or metadata of sub-agents available for delegation, typically safe HTML or text content',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = '1C4B8853-04B8-4BF1-92D6-B102436837D7',
@ID = 'F2FE433E-F36B-1410-8DB5-00021F8B792E';

GO

-- Save Template Params (core SP call only)
EXEC [__mj].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = 'subAgentCount',
@Description = 'Number of available sub-agents that the main agent can delegate tasks to',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = '1C4B8853-04B8-4BF1-92D6-B102436837D7',
@ID = '04FF433E-F36B-1410-8DB5-00021F8B792E';

GO
 

-- Save AI Prompts (core SP call only)
EXEC [__mj].spUpdateAIPrompt @Name = 'Loop Agent Type: System Prompt',
@Description = 'Basic control structure for the Loop Agent Type.',
@TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@CategoryID = 'A19D433E-F36B-1410-8DB1-00021F8B792E',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = 'Active',
@ResponseFormat = 'JSON',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = 'Specific',
@PowerPreference = 'Highest',
@ParallelizationMode = 'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = 'object',
@OutputExample = '{
  "taskComplete": "[BOOLEAN: true if task is fully complete, false if more steps needed]",
  "message": "[STRING: Human-readable message about current status or final result - this is what the user/caller sees]",
  "payload*": {
    "[KEY]": "[VALUE: Your agent-specific data structure goes here]",
    "[EXAMPLE_STRUCTURE]": {
      "resultsFound": "[NUMBER or other data]",
      "processedItems": "[Array of processed data]",
      "customField": "[Any structure your agent needs to return]"
    },
    "[NOTE]": "This payload structure is completely flexible based on your agent''s purpose"
  },
  "reasoning": "[STRING: Your internal explanation of why you made this decision - helps with debugging]",
  "confidence": "[OPTIONAL NUMBER: 0.0 to 1.0 indicating confidence in this decision]",
  "nextStep?": {
    "type": "[REQUIRED if taskComplete=false: Must be exactly one of: ''action'' | ''sub-agent'' | ''chat'']",
    "actions?": [
      {
        "id": "[UUID: The exact ID from available actions list]",
        "name": "[STRING: The exact name from available actions list]",
        "params*": {
          "[PARAM_NAME]": "[PARAM_VALUE: Must match action''s expected parameters]",
          "[ANOTHER_PARAM]": "[Value matching the action''s parameter type]"
        }
      }
    ],
    "subAgent?": {
      "id": "[UUID: The exact ID from available sub-agents list]",
      "name": "[STRING: The exact name from available sub-agents list]",
      "message": "[STRING: Complete context and instructions for the sub-agent - they don''t see conversation history]",
      "templateParameters*": {
        "[TEMPLATE_PARAM_NAME]": "[VALUE: If sub-agent has template parameters, provide values here]"
      },
      "terminateAfter": "[BOOLEAN: true to end parent agent after sub-agent completes, false to continue]"
    }
  }
}',
@ValidationBehavior = 'Strict',
@MaxRetries = 2,
@RetryDelayMS = 1000,
@RetryStrategy = 'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = 'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = 'System',
@PromptPosition = 'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL,
@ID = 'FF7D441F-36E1-458A-B548-0FC2208923BE';

GO