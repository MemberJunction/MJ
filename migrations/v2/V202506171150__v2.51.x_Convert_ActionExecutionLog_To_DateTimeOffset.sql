-- Convert ActionExecutionLog datetime columns to datetimeoffset to handle timezone issues
-- This prevents timezone mismatches between StartedAt and EndedAt columns

-- Drop existing default constraints on StartedAt column if they exist
DECLARE @StartedAtDefaultName NVARCHAR(128)
SELECT @StartedAtDefaultName = dc.name
FROM sys.default_constraints dc
INNER JOIN sys.columns c ON dc.parent_object_id = c.object_id AND dc.parent_column_id = c.column_id
WHERE dc.parent_object_id = OBJECT_ID('${flyway:defaultSchema}.ActionExecutionLog')
AND c.name = 'StartedAt'

IF @StartedAtDefaultName IS NOT NULL
BEGIN
    EXEC('ALTER TABLE ${flyway:defaultSchema}.ActionExecutionLog DROP CONSTRAINT ' + @StartedAtDefaultName)
END

-- Drop existing default constraints on EndedAt column if they exist
DECLARE @EndedAtDefaultName NVARCHAR(128)
SELECT @EndedAtDefaultName = dc.name
FROM sys.default_constraints dc
INNER JOIN sys.columns c ON dc.parent_object_id = c.object_id AND dc.parent_column_id = c.column_id
WHERE dc.parent_object_id = OBJECT_ID('${flyway:defaultSchema}.ActionExecutionLog')
AND c.name = 'EndedAt'

IF @EndedAtDefaultName IS NOT NULL
BEGIN
    EXEC('ALTER TABLE ${flyway:defaultSchema}.ActionExecutionLog DROP CONSTRAINT ' + @EndedAtDefaultName)
END

-- Convert StartedAt column
ALTER TABLE ${flyway:defaultSchema}.ActionExecutionLog
ALTER COLUMN StartedAt datetimeoffset NOT NULL;

-- Convert EndedAt column
ALTER TABLE ${flyway:defaultSchema}.ActionExecutionLog
ALTER COLUMN EndedAt datetimeoffset NULL;

-- Add default constraint for StartedAt
ALTER TABLE ${flyway:defaultSchema}.ActionExecutionLog
ADD CONSTRAINT DF_ActionExecutionLog_StartedAt DEFAULT SYSDATETIMEOFFSET() FOR StartedAt;

-- Update the view to handle the new column types
-- The view should automatically handle the conversion, but we'll regenerate it to be safe
-- Note: The CodeGen system will regenerate the view with proper handling for datetimeoffset

-- Drop existing extended properties if they exist before adding new ones
IF EXISTS (
    SELECT 1 
    FROM sys.extended_properties 
    WHERE major_id = OBJECT_ID('${flyway:defaultSchema}.ActionExecutionLog') 
    AND minor_id = COLUMNPROPERTY(OBJECT_ID('${flyway:defaultSchema}.ActionExecutionLog'), 'StartedAt', 'ColumnId')
    AND name = 'MS_Description'
)
BEGIN
    EXEC sp_dropextendedproperty 
        @name = N'MS_Description',
        @level0type = N'SCHEMA', @level0name = '${flyway:defaultSchema}',
        @level1type = N'TABLE',  @level1name = 'ActionExecutionLog',
        @level2type = N'COLUMN', @level2name = 'StartedAt';
END

IF EXISTS (
    SELECT 1 
    FROM sys.extended_properties 
    WHERE major_id = OBJECT_ID('${flyway:defaultSchema}.ActionExecutionLog') 
    AND minor_id = COLUMNPROPERTY(OBJECT_ID('${flyway:defaultSchema}.ActionExecutionLog'), 'EndedAt', 'ColumnId')
    AND name = 'MS_Description'
)
BEGIN
    EXEC sp_dropextendedproperty 
        @name = N'MS_Description',
        @level0type = N'SCHEMA', @level0name = '${flyway:defaultSchema}',
        @level1type = N'TABLE',  @level1name = 'ActionExecutionLog',
        @level2type = N'COLUMN', @level2name = 'EndedAt';
END

-- Add extended property to indicate these are timezone-aware columns
EXEC sp_addextendedproperty 
    @name = N'MS_Description',
    @value = N'Timestamp when the action execution started (timezone-aware)',
    @level0type = N'SCHEMA', @level0name = '${flyway:defaultSchema}',
    @level1type = N'TABLE',  @level1name = 'ActionExecutionLog',
    @level2type = N'COLUMN', @level2name = 'StartedAt';

EXEC sp_addextendedproperty 
    @name = N'MS_Description',
    @value = N'Timestamp when the action execution ended (timezone-aware)',
    @level0type = N'SCHEMA', @level0name = '${flyway:defaultSchema}',
    @level1type = N'TABLE',  @level1name = 'ActionExecutionLog',
    @level2type = N'COLUMN', @level2name = 'EndedAt';




/***** CODE GEN OUTPUT *****/

/* Index for Foreign Keys for ActionExecutionLog */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Execution Logs
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ActionID in table ActionExecutionLog
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ActionExecutionLog_ActionID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ActionExecutionLog]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ActionExecutionLog_ActionID ON [${flyway:defaultSchema}].[ActionExecutionLog] ([ActionID]);

-- Index for foreign key UserID in table ActionExecutionLog
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ActionExecutionLog_UserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ActionExecutionLog]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ActionExecutionLog_UserID ON [${flyway:defaultSchema}].[ActionExecutionLog] ([UserID]);

/* Base View SQL for Action Execution Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Execution Logs
-- Item: vwActionExecutionLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Action Execution Logs
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ActionExecutionLog
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwActionExecutionLogs]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwActionExecutionLogs]
AS
SELECT
    a.*,
    Action_ActionID.[Name] AS [Action],
    User_UserID.[Name] AS [User]
FROM
    [${flyway:defaultSchema}].[ActionExecutionLog] AS a
INNER JOIN
    [${flyway:defaultSchema}].[Action] AS Action_ActionID
  ON
    [a].[ActionID] = Action_ActionID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [a].[UserID] = User_UserID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwActionExecutionLogs] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for Action Execution Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Execution Logs
-- Item: Permissions for vwActionExecutionLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwActionExecutionLogs] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* spCreate SQL for Action Execution Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Execution Logs
-- Item: spCreateActionExecutionLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionExecutionLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionExecutionLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionExecutionLog]
    @ID uniqueidentifier = NULL,
    @ActionID uniqueidentifier,
    @StartedAt datetimeoffset,
    @EndedAt datetimeoffset,
    @Params nvarchar(MAX),
    @ResultCode nvarchar(255),
    @UserID uniqueidentifier,
    @RetentionPeriod int,
    @Message nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionExecutionLog]
            (
                [ID],
                [ActionID],
                [StartedAt],
                [EndedAt],
                [Params],
                [ResultCode],
                [UserID],
                [RetentionPeriod],
                [Message]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ActionID,
                @StartedAt,
                @EndedAt,
                @Params,
                @ResultCode,
                @UserID,
                @RetentionPeriod,
                @Message
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionExecutionLog]
            (
                [ActionID],
                [StartedAt],
                [EndedAt],
                [Params],
                [ResultCode],
                [UserID],
                [RetentionPeriod],
                [Message]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ActionID,
                @StartedAt,
                @EndedAt,
                @Params,
                @ResultCode,
                @UserID,
                @RetentionPeriod,
                @Message
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionExecutionLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionExecutionLog] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Execution Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionExecutionLog] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Action Execution Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Execution Logs
-- Item: spUpdateActionExecutionLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ActionExecutionLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateActionExecutionLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateActionExecutionLog]
    @ID uniqueidentifier,
    @ActionID uniqueidentifier,
    @StartedAt datetimeoffset,
    @EndedAt datetimeoffset,
    @Params nvarchar(MAX),
    @ResultCode nvarchar(255),
    @UserID uniqueidentifier,
    @RetentionPeriod int,
    @Message nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ActionExecutionLog]
    SET
        [ActionID] = @ActionID,
        [StartedAt] = @StartedAt,
        [EndedAt] = @EndedAt,
        [Params] = @Params,
        [ResultCode] = @ResultCode,
        [UserID] = @UserID,
        [RetentionPeriod] = @RetentionPeriod,
        [Message] = @Message
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwActionExecutionLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateActionExecutionLog] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the ActionExecutionLog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateActionExecutionLog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateActionExecutionLog
ON [${flyway:defaultSchema}].[ActionExecutionLog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ActionExecutionLog]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ActionExecutionLog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Action Execution Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateActionExecutionLog] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Action Execution Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Execution Logs
-- Item: spDeleteActionExecutionLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ActionExecutionLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteActionExecutionLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteActionExecutionLog]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ActionExecutionLog]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteActionExecutionLog] TO [cdp_Integration]
    

/* spDelete Permissions for Action Execution Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteActionExecutionLog] TO [cdp_Integration]



