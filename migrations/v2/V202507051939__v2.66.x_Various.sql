UPDATE ${flyway:defaultSchema}.Action SET CategoryID='15E03732-607E-4125-86F4-8C846EE88749' WHERE CategoryID='9AE3480B-41FF-4E4A-A5F0-EB009465B26A' -- update actions to the category we are keeping
DELETE FROM ${flyway:defaultSchema}.ActionCategory WHERE ID='9AE3480B-41FF-4E4A-A5F0-EB009465B26A' -- remove duplicate system category



-- SQL Logging Session
-- Session ID: 809454e2-6194-4992-a3fd-5e38973a11fd
-- Started: 2025-07-06T00:57:49.148Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save Action Categories (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateActionCategory @Name = N'System',
@Description = N'Core system actions and utilities',
@ParentID = NULL,
@Status = N'Active',
@ID = '15E03732-607E-4125-86F4-8C846EE88749';

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = 'dd7afb84-8381-482a-b6c7-88dde4d2ff17',
@CategoryID = '22285832-93AD-427E-81BA-E332F63FC5B9',
@Name = N'Create Conversation Record',
@Description = N'Creates a record in the Conversations entity.',
@Type = N'Generated',
@UserPrompt = N'Create a record in the Conversations entity using parameters from this action and maps to the parent Create Record action and its format for parameters',
@UserComments = NULL,
@Code = N'// 1. Extract and validate input parameters
const name = params.Params.find(p => p.Name.trim().toLowerCase() === ''name'')?.Value;
const userID = params.Params.find(p => p.Name.trim().toLowerCase() === ''userid'')?.Value;
const type = params.Params.find(p => p.Name.trim().toLowerCase() === ''type'')?.Value;
const status = params.Params.find(p => p.Name.trim().toLowerCase() === ''status'')?.Value;
const description = params.Params.find(p => p.Name.trim().toLowerCase() === ''description'')?.Value;
const externalID = params.Params.find(p => p.Name.trim().toLowerCase() === ''externalid'')?.Value;
const linkedEntityID = params.Params.find(p => p.Name.trim().toLowerCase() === ''linkedentityid'')?.Value;
const linkedRecordID = params.Params.find(p => p.Name.trim().toLowerCase() === ''linkedrecordid'')?.Value;
const dataContextID = params.Params.find(p => p.Name.trim().toLowerCase() === ''datacontextid'')?.Value;
const isArchived = params.Params.find(p => p.Name.trim().toLowerCase() === ''isarchived'')?.Value;

// Validate required fields for Conversations: UserID and Type
if (!userID || !type) {
    return {
        Success: false,
        ResultCode: ''ValidationError'',
        Message: ''UserID and Type are required fields to create a Conversation.''
    };
}

// 2. Pre-process: Map to parent Create Record action
const fields: any = {
    UserID: userID,
    Type: type
};

if (typeof name !== ''undefined'') fields.Name = name;
if (typeof status !== ''undefined'') fields.Status = status;
if (typeof description !== ''undefined'') fields.Description = description;
if (typeof externalID !== ''undefined'') fields.ExternalID = externalID;
if (typeof linkedEntityID !== ''undefined'') fields.LinkedEntityID = linkedEntityID;
if (typeof linkedRecordID !== ''undefined'') fields.LinkedRecordID = linkedRecordID;
if (typeof dataContextID !== ''undefined'') fields.DataContextID = dataContextID;
if (typeof isArchived !== ''undefined'') fields.IsArchived = isArchived;

const mappedParams: ActionParam[] = [
    {
        Name: ''EntityName'',
        Type: ''Input'',
        Value: ''Conversations''
    },
    {
        Name: ''Fields'',
        Type: ''Input'',
        Value: fields
    }
];

// 3. Invoke parent action, We always look up by ID for accuracy
const a = ActionEngineServer.Instance.Actions.find(a => a.ID.trim().toLowerCase() === ''2504e288-adf7-4913-a627-aa14276baa55'');
let parentResult;
try {
    parentResult = await ActionEngineServer.Instance.RunAction({
        Action: a,
        Params: mappedParams,
        ContextUser: params.ContextUser,
        Filters: []
    });
} catch (err: any) {
    return {
        Success: false,
        ResultCode: ''ParentActionError'',
        Message: ''Error invoking parent action: '' + (err?.message || err)
    };
}

// 4. Check parent result
if (!parentResult?.Success) {
    let resultCode = ''ParentActionFailed'';
    if (parentResult?.ResultCode) resultCode = parentResult.ResultCode;
    return {
        Success: false,
        ResultCode: resultCode,
        Message: ''Parent action failed: '' + (parentResult?.Message || ''Unknown error'')
    };
}

// 5. Post-process: extract and return new Conversation ID. For Conversations, primary key is ''ID''.
let conversationID = null;
if (parentResult.Params) {
    // Look for output param ''PrimaryKey'' and inside it, field ''ID''
    const primaryKeyObj = parentResult.Params.find(p => p.Name.trim().toLowerCase() === ''primarykey'')?.Value;
    if (primaryKeyObj && typeof primaryKeyObj === ''object'' && ''ID'' in primaryKeyObj) {
        conversationID = primaryKeyObj.ID;
    }
}
if (!conversationID) {
    return {
        Success: false,
        ResultCode: ''MissingOutput'',
        Message: ''Failed to retrieve created Conversation ID from parent action.''
    };
}
// Add output param
params.Params.push({
    Name: ''ConversationID'',
    Type: ''Output'',
    Value: conversationID
});

return {
    Success: true,
    ResultCode: ''Success'',
    Message: ''Conversation record created successfully.''
};',
@CodeComments = N'This child action creates a new record in the Conversations entity by collecting a set of user-provided parameters. It validates that required fields (UserID and Type) are present. It then constructs the parent action parameters in the format expected by the generic Create Record action, explicitly setting the EntityName to ''Conversations'' and mapping all supplied fields. It attempts to call the parent Create Record action. If that succeeds, it extracts the primary key (''ID'') from the parent output and adds it as the output parameter ''ConversationID''. Errors such as missing required fields, parent action errors, or missing output values are handled with specific result codes and messages. On success, it clearly signals completion and returns the new ConversationID.',
@CodeApprovalStatus = N'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = N'Active',
@DriverClass = NULL,
@ParentID = '2504E288-ADF7-4913-A627-AA14276BAA55',
@IconClass = NULL;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '68276724-1e89-49b7-88b0-a650196e0dca',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'Name',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'The name/title of the conversation (optional)',
@IsRequired = 0;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '1f264f70-d74d-4d45-b5c8-7f12751b22e1',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'UserID',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'The UserID who owns/created the conversation',
@IsRequired = 1;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '9bebaf77-6a24-4710-990c-9a2d260631c6',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'Type',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'The type of conversation (e.g., chat, thread, etc.)',
@IsRequired = 1;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'f1d7605e-c3fc-4ef1-b8ff-20b44db47520',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'Status',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'Conversation status (optional).',
@IsRequired = 0;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '74c9ebb9-5df6-471e-9c7c-f0c19b00adbb',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'Description',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'Description or summary of the conversation (optional).',
@IsRequired = 0;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'd8552288-a9d1-4bb6-9bdd-af822fac7728',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'ExternalID',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'External system reference ID (optional).',
@IsRequired = 0;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'a2009106-3202-4822-b1ce-6edc399918bf',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'LinkedEntityID',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'Optional: Linked entity type for contextual conversations.',
@IsRequired = 0;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '495dcd03-9d92-49c7-9cdb-77e6607c31e2',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'LinkedRecordID',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'Optional: Linked entity record ID for contextual conversations.',
@IsRequired = 0;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'ee99ffea-6dca-48ca-bf47-ded384f9b336',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'DataContextID',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'Optional: Data context for the conversation.',
@IsRequired = 0;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '008e055d-9792-47ca-b587-ed2f8ee7d967',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'IsArchived',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'True if conversation is archived, false otherwise (optional).',
@IsRequired = 0;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'a4f04ae3-beaf-487a-ad76-1997f5ffd929',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@Name = N'ConversationID',
@DefaultValue = NULL,
@Type = N'Output',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'The ID of the newly created Conversation record.',
@IsRequired = 0;

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = '5ba8b0f4-5346-4fa3-8974-41ab15cd37e9',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@ResultCode = N'Success',
@IsSuccess = 1,
@Description = N'Conversation record created successfully';

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = 'e9bdef10-1e0e-4fef-bb8d-53b3028e82ef',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@ResultCode = N'ValidationError',
@IsSuccess = 0,
@Description = N'Required fields are missing or invalid (UserID and Type are required).';

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = '1c616d13-6517-477a-b839-39112c3e73a1',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@ResultCode = N'ParentActionFailed',
@IsSuccess = 0,
@Description = N'The parent Create Record action failed';

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = '596aca62-de4d-41fc-a93a-c7146459f21f',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@ResultCode = N'ParentActionError',
@IsSuccess = 0,
@Description = N'A system error occurred while invoking the parent action';

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = 'aba5521e-bd72-472d-9463-56c971da8bdb',
@ActionID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17',
@ResultCode = N'MissingOutput',
@IsSuccess = 0,
@Description = N'The parent action did not return a Conversation ID as expected';

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = '6a699e09-87ed-45f1-b7d2-0c38286c2eff',
@CategoryID = '22285832-93AD-427E-81BA-E332F63FC5B9',
@Name = N'Get AI Model Cost',
@Description = N'Gets an AI Model Cost record from the database.',
@Type = N'Generated',
@UserPrompt = N'Get an AI Model Cost record from the database using parameters from this action and maps to the parent Get Record action and its format for parameters',
@UserComments = NULL,
@Code = N'// 1. Extract and validate input parameters
const id = params.Params.find(p => p.Name.trim().toLowerCase() === ''id'')?.Value;

// Validate required parameter
if (!id) {
  return {
    Success: false,
    ResultCode: ''ValidationError'',
    Message: ''The parameter "ID" is required to get an AI Model Cost record.''
  };
}

// 2. Pre-process: Map child params to parent Get Record format
const mappedParams: ActionParam[] = [
  {
    Name: ''PrimaryKey'',
    Type: ''Input'' as ''Input'' | ''Output'' | ''Both'',
    Value: { ID: id } // AI Model Cost entity uses single PK called ID
  },
  {
    Name: ''EntityName'',
    Type: ''Input'' as ''Input'' | ''Output'' | ''Both'',
    Value: ''MJ: AI Model Costs''
  }
];

try {
  // 3. Invoke parent action (Get Record)
  const a = ActionEngineServer.Instance.Actions.find(a => a.ID.trim().toLowerCase() === ''49e30665-1a90-45ca-9129-c33959a51b4f'');
  const parentResult = await ActionEngineServer.Instance.RunAction({
    Action: a,
    Params: mappedParams,
    ContextUser: params.ContextUser,
    Filters: []
  });

  // 4. Check parent result
  if (!parentResult.Success) {
    return {
      Success: false,
      ResultCode: ''ParentActionFailed'',
      Message: ''Failed to retrieve AI Model Cost record: '' + (parentResult.Message || ''Unknown error from parent action'')
    };
  }

  const modelCostRecord = parentResult.Params.find(p => p.Name === ''Record'')?.Value;

  if (!modelCostRecord) {
    return {
      Success: false,
      ResultCode: ''RecordNotFound'',
      Message: ''No AI Model Cost record found with ID: '' + id
    };
  }

  // 5. Push output parameter for downstream or workflow use
  params.Params.push({
    Name: ''ModelCostRecord'',
    Type: ''Output'' as ''Input'' | ''Output'' | ''Both'',
    Value: modelCostRecord
  });

  // 6. Return success
  return {
    Success: true,
    ResultCode: ''Success'',
    Message: ''AI Model Cost record retrieved successfully.''
  };

} catch (error: any) {
  // General error handler
  return {
    Success: false,
    ResultCode: ''Failed'',
    Message: ''Unhandled exception while retrieving AI Model Cost record: '' + (error?.message || error?.toString() || ''Unknown error'')
  };
}',
@CodeComments = N'This child action retrieves a single AI Model Cost record from the database by its ID.

- It expects a single input parameter: ''ID'' (the primary key of the AI Model Cost record).
- It validates that the ID is provided, and if missing, returns a ''ValidationError''.
- It then maps the simple child interface (just ''ID'') into the parameters expected by the parent ''Get Record'' action (specifying both the primary key and the entity name).
- The parent action (Get Record) is invoked using its specific ID for reliability.
- If the parent action fails, the code returns a ''ParentActionFailed'' result code and passes along the error message.
- If the parent action reports success but does not return a record (likely meaning not found), it returns a ''RecordNotFound'' result code.
- If a valid record is found, it adds the result as an output parameter named ''ModelCostRecord'' and returns success.
- All errors are handled gracefully, with clear and informative error messages.
',
@CodeApprovalStatus = N'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = N'Active',
@DriverClass = NULL,
@ParentID = '49E30665-1A90-45CA-9129-C33959A51B4F',
@IconClass = NULL;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '07772f4d-62f5-4226-bb60-8eb8d4f156fc',
@ActionID = '6A699E09-87ED-45F1-B7D2-0C38286C2EFF',
@Name = N'ID',
@DefaultValue = NULL,
@Type = N'Input',
@ValueType = N'Scalar',
@IsArray = 0,
@Description = N'The primary key ID of the AI Model Cost record to retrieve',
@IsRequired = 1;

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '6a1d7d5a-f3e5-47d1-99e2-4ed6f3035d75',
@ActionID = '6A699E09-87ED-45F1-B7D2-0C38286C2EFF',
@Name = N'ModelCostRecord',
@DefaultValue = NULL,
@Type = N'Output',
@ValueType = N'Simple Object',
@IsArray = 0,
@Description = N'The retrieved AI Model Cost record object, or null if not found',
@IsRequired = 0;

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = '42f3c49b-2bdc-4dc5-8c79-b2d778f90f1b',
@ActionID = '6A699E09-87ED-45F1-B7D2-0C38286C2EFF',
@ResultCode = N'Success',
@IsSuccess = 1,
@Description = N'AI Model Cost record retrieved successfully';

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = '3a0892ed-3327-422e-bf2a-44edfd5fc82e',
@ActionID = '6A699E09-87ED-45F1-B7D2-0C38286C2EFF',
@ResultCode = N'Failed',
@IsSuccess = 0,
@Description = N'Generic failure - an exception occurred during processing';

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = 'b73f79cd-e54a-4d53-a7ba-62c3ef6e0d9e',
@ActionID = '6A699E09-87ED-45F1-B7D2-0C38286C2EFF',
@ResultCode = N'ValidationError',
@IsSuccess = 0,
@Description = N'The required ID parameter was missing or invalid';

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = '9c3fa94f-fff0-4e87-868f-e5a068a916ea',
@ActionID = '6A699E09-87ED-45F1-B7D2-0C38286C2EFF',
@ResultCode = N'ParentActionFailed',
@IsSuccess = 0,
@Description = N'The parent ''Get Record'' action failed to retrieve a record due to a system error or bad request';

-- Save Action Result Codes (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionResultCode @ID = 'ae277945-7e99-487d-9ff3-21c40fc8ddf0',
@ActionID = '6A699E09-87ED-45F1-B7D2-0C38286C2EFF',
@ResultCode = N'RecordNotFound',
@IsSuccess = 0,
@Description = N'No AI Model Cost record was found with the provided ID';


-- End of SQL Logging Session
-- Session ID: 809454e2-6194-4992-a3fd-5e38973a11fd
-- Completed: 2025-07-06T00:58:46.091Z
-- Duration: 56943ms
-- Total Statements: 26














-- SQL Logging Session
-- Session ID: 3235acb1-505d-472f-aed4-256b39b2d81c
-- Started: 2025-07-06T00:59:31.694Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateAction @CategoryID = '22285832-93AD-427E-81BA-E332F63FC5B9',
@Name = N'Create Conversation Record',
@Description = N'Creates a record in the Conversations entity.',
@Type = N'Generated',
@UserPrompt = N'Create a record in the Conversations entity using parameters from this action and maps to the parent Create Record action and its format for parameters',
@UserComments = NULL,
@Code = N'// 1. Extract and validate input parameters
const name = params.Params.find(p => p.Name.trim().toLowerCase() === ''name'')?.Value;
const userID = params.Params.find(p => p.Name.trim().toLowerCase() === ''userid'')?.Value;
const type = params.Params.find(p => p.Name.trim().toLowerCase() === ''type'')?.Value;
const status = params.Params.find(p => p.Name.trim().toLowerCase() === ''status'')?.Value;
const description = params.Params.find(p => p.Name.trim().toLowerCase() === ''description'')?.Value;
const externalID = params.Params.find(p => p.Name.trim().toLowerCase() === ''externalid'')?.Value;
const linkedEntityID = params.Params.find(p => p.Name.trim().toLowerCase() === ''linkedentityid'')?.Value;
const linkedRecordID = params.Params.find(p => p.Name.trim().toLowerCase() === ''linkedrecordid'')?.Value;
const dataContextID = params.Params.find(p => p.Name.trim().toLowerCase() === ''datacontextid'')?.Value;
const isArchived = params.Params.find(p => p.Name.trim().toLowerCase() === ''isarchived'')?.Value;

// Validate required fields for Conversations: UserID and Type
if (!userID || !type) {
    return {
        Success: false,
        ResultCode: ''ValidationError'',
        Message: ''UserID and Type are required fields to create a Conversation.''
    };
}

// 2. Pre-process: Map to parent Create Record action
const fields: any = {
    UserID: userID,
    Type: type
};

if (typeof name !== ''undefined'') fields.Name = name;
if (typeof status !== ''undefined'') fields.Status = status;
if (typeof description !== ''undefined'') fields.Description = description;
if (typeof externalID !== ''undefined'') fields.ExternalID = externalID;
if (typeof linkedEntityID !== ''undefined'') fields.LinkedEntityID = linkedEntityID;
if (typeof linkedRecordID !== ''undefined'') fields.LinkedRecordID = linkedRecordID;
if (typeof dataContextID !== ''undefined'') fields.DataContextID = dataContextID;
if (typeof isArchived !== ''undefined'') fields.IsArchived = isArchived;

const mappedParams: ActionParam[] = [
    {
        Name: ''EntityName'',
        Type: ''Input'',
        Value: ''Conversations''
    },
    {
        Name: ''Fields'',
        Type: ''Input'',
        Value: fields
    }
];

// 3. Invoke parent action, We always look up by ID for accuracy
const a = ActionEngineServer.Instance.Actions.find(a => a.ID.trim().toLowerCase() === ''2504e288-adf7-4913-a627-aa14276baa55'');
let parentResult;
try {
    parentResult = await ActionEngineServer.Instance.RunAction({
        Action: a,
        Params: mappedParams,
        ContextUser: params.ContextUser,
        Filters: []
    });
} catch (err: any) {
    return {
        Success: false,
        ResultCode: ''ParentActionError'',
        Message: ''Error invoking parent action: '' + (err?.message || err)
    };
}

// 4. Check parent result
if (!parentResult?.Success) {
    let resultCode = ''ParentActionFailed'';
    if (parentResult?.ResultCode) resultCode = parentResult.ResultCode;
    return {
        Success: false,
        ResultCode: resultCode,
        Message: ''Parent action failed: '' + (parentResult?.Message || ''Unknown error'')
    };
}

// 5. Post-process: extract and return new Conversation ID. For Conversations, primary key is ''ID''.
let conversationID = null;
if (parentResult.Params) {
    // Look for output param ''PrimaryKey'' and inside it, field ''ID''
    const primaryKeyObj = parentResult.Params.find(p => p.Name.trim().toLowerCase() === ''primarykey'')?.Value;
    if (primaryKeyObj && typeof primaryKeyObj === ''object'' && ''ID'' in primaryKeyObj) {
        conversationID = primaryKeyObj.ID;
    }
}
if (!conversationID) {
    return {
        Success: false,
        ResultCode: ''MissingOutput'',
        Message: ''Failed to retrieve created Conversation ID from parent action.''
    };
}
// Add output param
params.Params.push({
    Name: ''ConversationID'',
    Type: ''Output'',
    Value: conversationID
});

return {
    Success: true,
    ResultCode: ''Success'',
    Message: ''Conversation record created successfully.''
};',
@CodeComments = N'This child action creates a new record in the Conversations entity by collecting a set of user-provided parameters. It validates that required fields (UserID and Type) are present. It then constructs the parent action parameters in the format expected by the generic Create Record action, explicitly setting the EntityName to ''Conversations'' and mapping all supplied fields. It attempts to call the parent Create Record action. If that succeeds, it extracts the primary key (''ID'') from the parent output and adds it as the output parameter ''ConversationID''. Errors such as missing required fields, parent action errors, or missing output values are handled with specific result codes and messages. On success, it clearly signals completion and returns the new ConversationID.',
@CodeApprovalStatus = N'Approved',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = N'Active',
@DriverClass = NULL,
@ParentID = '2504E288-ADF7-4913-A627-AA14276BAA55',
@IconClass = NULL,
@ID = 'DD7AFB84-8381-482A-B6C7-88DDE4D2FF17';

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateAction @CategoryID = '22285832-93AD-427E-81BA-E332F63FC5B9',
@Name = N'Get AI Model Cost',
@Description = N'Gets an AI Model Cost record from the database.',
@Type = N'Generated',
@UserPrompt = N'Get an AI Model Cost record from the database using parameters from this action and maps to the parent Get Record action and its format for parameters',
@UserComments = NULL,
@Code = N'// 1. Extract and validate input parameters
const id = params.Params.find(p => p.Name.trim().toLowerCase() === ''id'')?.Value;

// Validate required parameter
if (!id) {
  return {
    Success: false,
    ResultCode: ''ValidationError'',
    Message: ''The parameter "ID" is required to get an AI Model Cost record.''
  };
}

// 2. Pre-process: Map child params to parent Get Record format
const mappedParams: ActionParam[] = [
  {
    Name: ''PrimaryKey'',
    Type: ''Input'' as ''Input'' | ''Output'' | ''Both'',
    Value: { ID: id } // AI Model Cost entity uses single PK called ID
  },
  {
    Name: ''EntityName'',
    Type: ''Input'' as ''Input'' | ''Output'' | ''Both'',
    Value: ''MJ: AI Model Costs''
  }
];

try {
  // 3. Invoke parent action (Get Record)
  const a = ActionEngineServer.Instance.Actions.find(a => a.ID.trim().toLowerCase() === ''49e30665-1a90-45ca-9129-c33959a51b4f'');
  const parentResult = await ActionEngineServer.Instance.RunAction({
    Action: a,
    Params: mappedParams,
    ContextUser: params.ContextUser,
    Filters: []
  });

  // 4. Check parent result
  if (!parentResult.Success) {
    return {
      Success: false,
      ResultCode: ''ParentActionFailed'',
      Message: ''Failed to retrieve AI Model Cost record: '' + (parentResult.Message || ''Unknown error from parent action'')
    };
  }

  const modelCostRecord = parentResult.Params.find(p => p.Name === ''Record'')?.Value;

  if (!modelCostRecord) {
    return {
      Success: false,
      ResultCode: ''RecordNotFound'',
      Message: ''No AI Model Cost record found with ID: '' + id
    };
  }

  // 5. Push output parameter for downstream or workflow use
  params.Params.push({
    Name: ''ModelCostRecord'',
    Type: ''Output'' as ''Input'' | ''Output'' | ''Both'',
    Value: modelCostRecord
  });

  // 6. Return success
  return {
    Success: true,
    ResultCode: ''Success'',
    Message: ''AI Model Cost record retrieved successfully.''
  };

} catch (error: any) {
  // General error handler
  return {
    Success: false,
    ResultCode: ''Failed'',
    Message: ''Unhandled exception while retrieving AI Model Cost record: '' + (error?.message || error?.toString() || ''Unknown error'')
  };
}',
@CodeComments = N'This child action retrieves a single AI Model Cost record from the database by its ID.

- It expects a single input parameter: ''ID'' (the primary key of the AI Model Cost record).
- It validates that the ID is provided, and if missing, returns a ''ValidationError''.
- It then maps the simple child interface (just ''ID'') into the parameters expected by the parent ''Get Record'' action (specifying both the primary key and the entity name).
- The parent action (Get Record) is invoked using its specific ID for reliability.
- If the parent action fails, the code returns a ''ParentActionFailed'' result code and passes along the error message.
- If the parent action reports success but does not return a record (likely meaning not found), it returns a ''RecordNotFound'' result code.
- If a valid record is found, it adds the result as an output parameter named ''ModelCostRecord'' and returns success.
- All errors are handled gracefully, with clear and informative error messages.
',
@CodeApprovalStatus = N'Approved',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = N'Active',
@DriverClass = NULL,
@ParentID = '49E30665-1A90-45CA-9129-C33959A51B4F',
@IconClass = NULL,
@ID = '6A699E09-87ED-45F1-B7D2-0C38286C2EFF';


-- End of SQL Logging Session
-- Session ID: 3235acb1-505d-472f-aed4-256b39b2d81c
-- Completed: 2025-07-06T00:59:45.859Z
-- Duration: 14165ms
-- Total Statements: 2
