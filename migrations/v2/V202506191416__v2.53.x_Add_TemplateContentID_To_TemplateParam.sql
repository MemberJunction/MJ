-- ================================================================
-- V202506191416__v2.53.x_Add_TemplateContentID_To_TemplateParam.sql
-- ================================================================
-- Description: Adds TemplateContentID column to TemplateParam table to support
--              content-specific parameters. When NULL, the parameter applies to
--              all content items within a template (default behavior). When set,
--              the parameter applies only to the specified template content.
--
-- Author: System
-- Date: 2025-06-19
-- ================================================================

-- Add TemplateContentID column to TemplateParam table
ALTER TABLE ${flyway:defaultSchema}.TemplateParam
ADD TemplateContentID UNIQUEIDENTIFIER NULL;
GO

-- Add foreign key constraint to TemplateContent table
ALTER TABLE ${flyway:defaultSchema}.TemplateParam
ADD CONSTRAINT FK_TemplateParam_TemplateContent 
FOREIGN KEY (TemplateContentID) REFERENCES ${flyway:defaultSchema}.TemplateContent(ID);
GO

-- Update extended property for the new column
EXEC sp_addextendedproperty 
    @name = N'MS_Description',
    @value = N'Optional reference to a specific template content. When NULL, this parameter applies to all content items within the template. When set, this parameter applies only to the specified template content.',
    @level0type = N'SCHEMA', @level0name = '${flyway:defaultSchema}',
    @level1type = N'TABLE',  @level1name = 'TemplateParam',
    @level2type = N'COLUMN', @level2name = 'TemplateContentID';
GO
 

/****** CODE GEN RUN *****/
/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '58826477-0141-4692-a271-24918f5b9224'  OR 
               (EntityID = '4B248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'TemplateContentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '58826477-0141-4692-a271-24918f5b9224',
            '4B248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Template Params
            100016,
            'TemplateContentID',
            'Template Content ID',
            'Optional reference to a specific template content. When NULL, this parameter applies to all content items within the template. When set, this parameter applies only to the specified template content.',
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            1,
            0,
            '4A248F34-2837-EF11-86D4-6045BDEE16E6',
            'ID',
            0,
            0,
            1,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to create Entitiy Relationships */

   IF NOT EXISTS (
      SELECT 1
      FROM [${flyway:defaultSchema}].EntityRelationship
      WHERE ID = '7bfabb74-7ea0-48a6-b4b8-9c2f004f9768'
   )
   BEGIN
      INSERT INTO ${flyway:defaultSchema}.EntityRelationship (ID, EntityID, RelatedEntityID, RelatedEntityJoinField, Type, BundleInAPI, DisplayInForm, DisplayName, Sequence)
                              VALUES ('7bfabb74-7ea0-48a6-b4b8-9c2f004f9768', '4A248F34-2837-EF11-86D4-6045BDEE16E6', '4B248F34-2837-EF11-86D4-6045BDEE16E6', 'TemplateContentID', 'One To Many', 1, 1, 'Template Params', 1);
   END
                              

/* Index for Foreign Keys for TemplateParam */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key TemplateID in table TemplateParam
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_TemplateParam_TemplateID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[TemplateParam]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_TemplateParam_TemplateID ON [${flyway:defaultSchema}].[TemplateParam] ([TemplateID]);

-- Index for foreign key EntityID in table TemplateParam
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_TemplateParam_EntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[TemplateParam]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_TemplateParam_EntityID ON [${flyway:defaultSchema}].[TemplateParam] ([EntityID]);

-- Index for foreign key TemplateContentID in table TemplateParam
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_TemplateParam_TemplateContentID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[TemplateParam]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_TemplateParam_TemplateContentID ON [${flyway:defaultSchema}].[TemplateParam] ([TemplateContentID]);

/* Base View SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: vwTemplateParams
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Template Params
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  TemplateParam
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwTemplateParams]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwTemplateParams]
AS
SELECT
    t.*,
    Template_TemplateID.[Name] AS [Template],
    Entity_EntityID.[Name] AS [Entity]
FROM
    [${flyway:defaultSchema}].[TemplateParam] AS t
INNER JOIN
    [${flyway:defaultSchema}].[Template] AS Template_TemplateID
  ON
    [t].[TemplateID] = Template_TemplateID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [t].[EntityID] = Entity_EntityID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwTemplateParams] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: Permissions for vwTemplateParams
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwTemplateParams] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* spCreate SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: spCreateTemplateParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR TemplateParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateTemplateParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateTemplateParam]
    @ID uniqueidentifier = NULL,
    @TemplateID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Type nvarchar(20),
    @DefaultValue nvarchar(MAX),
    @IsRequired bit,
    @LinkedParameterName nvarchar(255),
    @LinkedParameterField nvarchar(500),
    @ExtraFilter nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(2000),
    @OrderBy nvarchar(MAX),
    @TemplateContentID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[TemplateParam]
            (
                [ID],
                [TemplateID],
                [Name],
                [Description],
                [Type],
                [DefaultValue],
                [IsRequired],
                [LinkedParameterName],
                [LinkedParameterField],
                [ExtraFilter],
                [EntityID],
                [RecordID],
                [OrderBy],
                [TemplateContentID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @TemplateID,
                @Name,
                @Description,
                @Type,
                @DefaultValue,
                @IsRequired,
                @LinkedParameterName,
                @LinkedParameterField,
                @ExtraFilter,
                @EntityID,
                @RecordID,
                @OrderBy,
                @TemplateContentID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[TemplateParam]
            (
                [TemplateID],
                [Name],
                [Description],
                [Type],
                [DefaultValue],
                [IsRequired],
                [LinkedParameterName],
                [LinkedParameterField],
                [ExtraFilter],
                [EntityID],
                [RecordID],
                [OrderBy],
                [TemplateContentID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @TemplateID,
                @Name,
                @Description,
                @Type,
                @DefaultValue,
                @IsRequired,
                @LinkedParameterName,
                @LinkedParameterField,
                @ExtraFilter,
                @EntityID,
                @RecordID,
                @OrderBy,
                @TemplateContentID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwTemplateParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateParam] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Template Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateParam] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: spUpdateTemplateParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR TemplateParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateTemplateParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateTemplateParam]
    @ID uniqueidentifier,
    @TemplateID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Type nvarchar(20),
    @DefaultValue nvarchar(MAX),
    @IsRequired bit,
    @LinkedParameterName nvarchar(255),
    @LinkedParameterField nvarchar(500),
    @ExtraFilter nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(2000),
    @OrderBy nvarchar(MAX),
    @TemplateContentID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[TemplateParam]
    SET
        [TemplateID] = @TemplateID,
        [Name] = @Name,
        [Description] = @Description,
        [Type] = @Type,
        [DefaultValue] = @DefaultValue,
        [IsRequired] = @IsRequired,
        [LinkedParameterName] = @LinkedParameterName,
        [LinkedParameterField] = @LinkedParameterField,
        [ExtraFilter] = @ExtraFilter,
        [EntityID] = @EntityID,
        [RecordID] = @RecordID,
        [OrderBy] = @OrderBy,
        [TemplateContentID] = @TemplateContentID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwTemplateParams]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateTemplateParam] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the TemplateParam table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateTemplateParam
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateTemplateParam
ON [${flyway:defaultSchema}].[TemplateParam]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[TemplateParam]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[TemplateParam] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Template Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateTemplateParam] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: spDeleteTemplateParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR TemplateParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteTemplateParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteTemplateParam]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[TemplateParam]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteTemplateParam] TO [cdp_Integration]
    

/* spDelete Permissions for Template Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteTemplateParam] TO [cdp_Integration]



