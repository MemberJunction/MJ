-- SQL Logging Session
-- Session ID: aef6aa16-4b9c-4bc0-a9d9-67f7db4ba051
-- Started: 2025-09-18T07:37:00.000Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_55eb3e04 NVARCHAR(MAX),
@Name_55eb3e04 NVARCHAR(500),
@Version_55eb3e04 NVARCHAR(50),
@VersionSequence_55eb3e04 INT,
@Title_55eb3e04 NVARCHAR(1000),
@Description_55eb3e04 NVARCHAR(MAX),
@Type_55eb3e04 NVARCHAR(255),
@Status_55eb3e04 NVARCHAR(50),
@DeveloperName_55eb3e04 NVARCHAR(255),
@DeveloperEmail_55eb3e04 NVARCHAR(255),
@DeveloperOrganization_55eb3e04 NVARCHAR(255),
@SourceRegistryID_55eb3e04 UNIQUEIDENTIFIER,
@ReplicatedAt_55eb3e04 DATETIMEOFFSET,
@LastSyncedAt_55eb3e04 DATETIMEOFFSET,
@Specification_55eb3e04 NVARCHAR(MAX),
@FunctionalRequirements_55eb3e04 NVARCHAR(MAX),
@TechnicalDesign_55eb3e04 NVARCHAR(MAX),
@FunctionalRequirementsVector_55eb3e04 NVARCHAR(MAX),
@TechnicalDesignVector_55eb3e04 NVARCHAR(MAX),
@HasCustomProps_55eb3e04 BIT,
@HasCustomEvents_55eb3e04 BIT,
@RequiresData_55eb3e04 BIT,
@DependencyCount_55eb3e04 INT,
@TechnicalDesignVectorEmbeddingModelID_55eb3e04 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_55eb3e04 NVARCHAR(MAX),
@HasRequiredCustomProps_55eb3e04 BIT,
@ID_55eb3e04 UNIQUEIDENTIFIER
SET
  @Namespace_55eb3e04 = N'Generic/UI/Chart'
SET
  @Name_55eb3e04 = N'SimpleChart'
SET
  @Version_55eb3e04 = N'1.0.0'
SET
  @VersionSequence_55eb3e04 = 1
SET
  @Title_55eb3e04 = N'Simple Chart'
SET
  @Description_55eb3e04 = N'A lightweight chart component that automatically creates common visualizations from entity data with minimal configuration'
SET
  @Type_55eb3e04 = N'Chart'
SET
  @Status_55eb3e04 = N'Published'
SET
  @Specification_55eb3e04 = N'{"name":"SimpleChart","title":"Simple Chart","description":"A lightweight chart component that automatically creates common visualizations from entity data with minimal configuration","type":"chart","location":"embedded","functionalRequirements":"Lightweight charting from entity data. Groups records by field, aggregates values (count/sum/avg), renders as bar/line/pie/area chart. Auto-selects chart type based on data. Supports click events for drill-down, data export, top-N filtering. Common uses: category distributions, time series trends, metric comparisons.","technicalDesign":"Uses Chart.js (canvas-based) for rendering. Pipeline: group data by field → aggregate (count/sum/avg) → sort/limit → render. Auto-selects chart type: bar for categories, line for dates, pie for distributions. Memoized calculations for performance. Click events return data point details and source records for drill-down.","dataRequirements":{"mode":"props","description":"Component receives entity data through props and performs client-side aggregation"},"properties":[{"name":"entityName","type":"string","description":"Name of the entity being visualized","required":true},{"name":"data","type":"Array<object>","description":"Array of entity objects to visualize","required":true},{"name":"groupBy","type":"string","description":"Field name to group data by","required":true},{"name":"valueField","type":"string","description":"Field to aggregate for values. If not specified, counts records","required":false},{"name":"aggregateMethod","type":"''count'' | ''sum'' | ''average'' | ''min'' | ''max''","description":"How to aggregate values","required":false,"defaultValue":"count","possibleValues":["count","sum","average","min","max"]},{"name":"chartType","type":"''auto'' | ''bar'' | ''line'' | ''pie'' | ''doughnut'' | ''area'' | ''scatter''","description":"Chart type to render. ''auto'' selects based on data","required":false,"defaultValue":"auto","possibleValues":["auto","bar","line","pie","doughnut","area","scatter"]},{"name":"title","type":"string","description":"Chart title. If not provided, generates from entity and groupBy field","required":false},{"name":"height","type":"number","description":"Chart height in pixels","required":false,"defaultValue":400},{"name":"sortBy","type":"''label'' | ''value'' | ''none''","description":"How to sort the chart data","required":false,"defaultValue":"value","possibleValues":["label","value","none"]},{"name":"sortOrder","type":"''asc'' | ''desc''","description":"Sort direction","required":false,"defaultValue":"desc","possibleValues":["asc","desc"]},{"name":"limit","type":"number","description":"Limit number of data points shown (e.g., top 10)","required":false},{"name":"colors","type":"Array<string>","description":"Custom color palette for the chart","required":false},{"name":"showLegend","type":"boolean","description":"Whether to show the legend","required":false,"defaultValue":true},{"name":"showDataLabels","type":"boolean","description":"Whether to show data labels on chart","required":false,"defaultValue":false},{"name":"enableExport","type":"boolean","description":"Show export button to download chart as image","required":false,"defaultValue":true}],"events":[{"name":"dataPointClick","description":"Fired when user clicks on a data point","parameters":[{"name":"clickData","type":"{ seriesName: string; value: number; label: string; records: Array<object>; chartType: string; percentage?: number }","description":"Object containing series name, data value, label, original records, and chart type"}]},{"name":"chartRendered","description":"Fired when chart has finished rendering","parameters":[{"name":"chartInfo","type":"{ chartType: string; dataPointCount: number; aggregationMethod: string; isEmpty: boolean }","description":"Information about the rendered chart including type, data point count, and aggregation method"}]}],"libraries":[{"name":"chart.js","version":"4.4.1","globalVariable":"Chart"}],"dependencies":[],"code":"function SimpleChart({\n  entityName,\n  data,\n  groupBy,\n  valueField,\n  aggregateMethod = ''count'',\n  chartType = ''auto'',\n  title,\n  height = 400,\n  sortBy = ''value'',\n  sortOrder = ''desc'',\n  limit,\n  colors,\n  showLegend = true,\n  showDataLabels = false,\n  enableExport = true,\n  onDataPointClick,\n  onChartRendered,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  // Always use the MJ unwrapLibraryComponents function to get components from global libraries\n  // This ensures that various library build/package formats are handled correctly and transparently\n  // Chart.js is available as a global ''Chart'' based on the spec''s globalVariable setting\n  // Since Chart.js exports a single constructor function, unwrapLibraryComponents returns it for the requested name\n  const { Chart: ChartJS } = unwrapLibraryComponents(Chart, ''Chart'');\n  \n  const canvasRef = React.useRef(null);\n  const chartInstanceRef = React.useRef(null);\n  const [error, setError] = React.useState(null);\n  const [entityInfo, setEntityInfo] = React.useState(null);\n\n  // Default color palette - accessible and visually distinct\n  const defaultColors = [\n    ''#1890ff'', // Blue\n    ''#52c41a'', // Green\n    ''#fa8c16'', // Orange\n    ''#f5222d'', // Red\n    ''#722ed1'', // Purple\n    ''#13c2c2'', // Cyan\n    ''#fa541c'', // Red-orange\n    ''#2f54eb'', // Deep blue\n    ''#a0d911'', // Lime\n    ''#eb2f96''  // Magenta\n  ];\n\n  // Load entity metadata\n  React.useEffect(() => {\n    if (!entityName || !utilities?.md?.Entities) {\n      if (!entityName) console.error(''Entity name not provided'');\n      if (!utilities?.md?.Entities) console.error(''Entity metadata not loaded.'');\n      return;\n    }\n    \n    const entity = utilities.md.Entities.find(e => e.Name === entityName);\n    if (entity) {\n      setEntityInfo(entity);\n    }\n  }, [entityName, utilities]);\n\n  // Helper function to format values based on type\n  const formatValue = (value, isDate = false, isCurrency = false) => {\n    if (value == null) return ''N/A'';\n    \n    if (isDate) {\n      try {\n        const date = new Date(value);\n        if (isNaN(date.getTime())) return value;\n        return date.toLocaleDateString(''en-US'', { \n          month: ''short'', \n          day: ''numeric'',\n          year: ''numeric''\n        });\n      } catch {\n        return value;\n      }\n    }\n    \n    if (isCurrency || (typeof value === ''number'' && valueField && valueField.toLowerCase().includes(''amount''))) {\n      if (typeof value === ''number'') {\n        return new Intl.NumberFormat(''en-US'', {\n          style: ''currency'',\n          currency: ''USD'',\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0\n        }).format(value);\n      }\n    }\n    \n    if (typeof value === ''number'') {\n      // Format large numbers with commas\n      return new Intl.NumberFormat(''en-US'').format(value);\n    }\n    \n    return value;\n  };\n\n  // Process and aggregate data\n  const processData = React.useMemo(() => {\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return { chartData: [], categories: [], values: [], isEmpty: true };\n    }\n\n    try {\n      // Validate that fields exist in the actual data, not just entity metadata\n      // This allows for calculated fields from queries that don''t exist in base entity\n      if (data.length > 0) {\n        // Check if fields exist in data\n        if (!(groupBy in data[0])) {\n          const error = `Field \"$' + '{groupBy}\" not found in data. Available fields: $' + '{Object.keys(data[0]).join('', '')}`;\n          console.error(error);\n          setError(error);\n          return { chartData: [], categories: [], values: [], isEmpty: true };\n        }\n\n        if (valueField && !(valueField in data[0])) {\n          const error = `Value field \"$' + '{valueField}\" not found in data. Available fields: $' + '{Object.keys(data[0]).join('', '')}`;\n          console.error(error);\n          setError(error);\n          return { chartData: [], categories: [], values: [], isEmpty: true };\n        }\n      }\n      \n      // Group data by the specified field\n      const grouped = {};\n      \n      // Check if groupBy field is a date field using entity metadata\n      let isDateField = false;\n      if (entityInfo && entityInfo.Fields) {\n        const fieldInfo = entityInfo.Fields.find(f => f.Name === groupBy);\n        isDateField = fieldInfo && (fieldInfo.Type === ''datetime'' || fieldInfo.Type === ''date'');\n      }\n      \n      // Fallback to value-based detection if no metadata available\n      if (!isDateField && data.length > 0) {\n        const sampleValue = data[0][groupBy];\n        isDateField = sampleValue && (\n          sampleValue instanceof Date ||\n          (typeof sampleValue === ''string'' && !isNaN(Date.parse(sampleValue)))\n        );\n      }\n      \n      data.forEach(record => {\n        let key = record[groupBy] || ''Unknown'';\n        \n        // Format date values for display\n        if (isDateField && key !== ''Unknown'') {\n          const date = new Date(key);\n          if (!isNaN(date.getTime())) {\n            // Format as YYYY-MM-DD for grouping\n            key = date.toISOString().split(''T'')[0];\n          }\n        }\n        \n        if (!grouped[key]) {\n          grouped[key] = {\n            label: key,\n            records: [],\n            value: 0\n          };\n        }\n        grouped[key].records.push(record);\n      });\n\n      // Aggregate based on method\n      Object.keys(grouped).forEach(key => {\n        const group = grouped[key];\n        \n        if (aggregateMethod === ''count'') {\n          group.value = group.records.length;\n        } else if (valueField) {\n          const values = group.records\n            .map(r => parseFloat(r[valueField]))\n            .filter(v => !isNaN(v));\n          \n          if (values.length > 0) {\n            switch (aggregateMethod) {\n              case ''sum'':\n                group.value = values.reduce((a, b) => a + b, 0);\n                break;\n              case ''average'':\n                group.value = values.reduce((a, b) => a + b, 0) / values.length;\n                break;\n              case ''min'':\n                group.value = Math.min(...values);\n                break;\n              case ''max'':\n                group.value = Math.max(...values);\n                break;\n              default:\n                group.value = values.length;\n            }\n          }\n        }\n      });\n\n      // Convert to array and sort\n      let dataArray = Object.values(grouped);\n      \n      if (sortBy === ''label'') {\n        dataArray.sort((a, b) => {\n          const comparison = String(a.label).localeCompare(String(b.label));\n          return sortOrder === ''asc'' ? comparison : -comparison;\n        });\n      } else if (sortBy === ''value'') {\n        dataArray.sort((a, b) => {\n          const comparison = a.value - b.value;\n          return sortOrder === ''asc'' ? comparison : -comparison;\n        });\n      }\n      \n      // Apply limit if specified\n      if (limit && limit > 0) {\n        dataArray = dataArray.slice(0, limit);\n      }\n\n      const categories = dataArray.map(d => String(d.label));\n      const values = dataArray.map(d => d.value);\n\n      return {\n        chartData: dataArray,\n        categories,\n        values,\n        isEmpty: false\n      };\n    } catch (err) {\n      console.error(''Error processing chart data:'', err);\n      setError(err.message);\n      return { chartData: [], categories: [], values: [], isEmpty: true };\n    }\n  }, [data, groupBy, valueField, aggregateMethod, sortBy, sortOrder, limit, entityInfo]);\n\n  // Determine chart type automatically\n  const determineChartType = () => {\n    if (chartType !== ''auto'') {\n      // Map ''donut'' to Chart.js ''doughnut'' \n      if (chartType === ''donut'') return ''doughnut'';\n      // Map ''column'' to Chart.js ''bar''\n      if (chartType === ''column'') return ''bar'';\n      return chartType;\n    }\n    \n    // Check if groupBy field is a date field using entity metadata\n    let isDateField = false;\n    if (entityInfo && entityInfo.Fields) {\n      const fieldInfo = entityInfo.Fields.find(f => f.Name === groupBy);\n      isDateField = fieldInfo && (fieldInfo.Type === ''datetime'' || fieldInfo.Type === ''date'');\n    }\n    \n    // Fallback to value-based detection if no metadata available\n    if (!isDateField && data && data.length > 0) {\n      const sampleValue = data[0][groupBy];\n      isDateField = sampleValue && (\n        sampleValue instanceof Date ||\n        (typeof sampleValue === ''string'' && !isNaN(Date.parse(sampleValue)))\n      );\n    }\n    \n    if (isDateField) {\n      return ''line'';\n    }\n    \n    // Use pie/doughnut for small number of categories\n    if (processData.categories && processData.categories.length <= 5) {\n      return ''doughnut'';\n    }\n    \n    // Default to bar chart\n    return ''bar'';\n  };\n\n  const actualChartType = determineChartType();\n\n  // Generate chart configuration for Chart.js\n  const getChartConfig = () => {\n    const isPieOrDoughnut = actualChartType === ''pie'' || actualChartType === ''doughnut'';\n    const isLineOrArea = actualChartType === ''line'' || actualChartType === ''area'';\n    \n    const config = {\n      type: actualChartType === ''area'' ? ''line'' : actualChartType,\n      data: {\n        labels: processData.categories,\n        datasets: [{\n          label: valueField || ''Count'',\n          data: processData.values,\n          backgroundColor: isPieOrDoughnut \n            ? (colors || defaultColors).slice(0, processData.values.length)\n            : isLineOrArea \n              ? ''rgba(24, 144, 255, 0.2)''\n              : (colors || defaultColors)[0],\n          borderColor: isPieOrDoughnut\n            ? undefined\n            : isLineOrArea\n              ? (colors || defaultColors)[0]\n              : (colors || defaultColors)[0],\n          borderWidth: isLineOrArea ? 2 : 1,\n          fill: actualChartType === ''area'',\n          tension: isLineOrArea ? 0.1 : undefined\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        onClick: (_event, elements) => {\n          if (elements && elements.length > 0 && onDataPointClick) {\n            const index = elements[0].index;\n            const clickedData = processData.chartData[index];\n            onDataPointClick({\n              chartType: actualChartType,\n              series: valueField || ''Count'',\n              label: clickedData.label,\n              value: clickedData.value,\n              records: clickedData.records,\n              percentage: (clickedData.value / processData.values.reduce((a, b) => a + b, 0)) * 100\n            });\n          }\n        },\n        plugins: {\n          title: {\n            display: !!title,\n            text: title || `$' + '{entityName} by $' + '{groupBy}`,\n            font: {\n              size: 16,\n              weight: 600\n            },\n            padding: {\n              bottom: 10\n            }\n          },\n          legend: {\n            display: showLegend && (isPieOrDoughnut || processData.categories.length <= 10),\n            position: isPieOrDoughnut ? ''bottom'' : ''top''\n          },\n          datalabels: showDataLabels ? {\n            display: true,\n            formatter: (value) => formatValue(value),\n            color: isPieOrDoughnut ? ''#fff'' : ''#666''\n          } : undefined,\n          tooltip: {\n            callbacks: {\n              label: (context) => {\n                const label = context.dataset.label || '''';\n                const value = formatValue(context.parsed.y !== undefined ? context.parsed.y : context.parsed);\n                return `$' + '{label}: $' + '{value}`;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    // Add scales for non-pie/doughnut charts\n    if (!isPieOrDoughnut) {\n      config.options.scales = {\n        y: {\n          beginAtZero: true,\n          ticks: {\n            callback: (value) => formatValue(value)\n          }\n        },\n        x: {\n          ticks: {\n            autoSkip: true,\n            maxRotation: 45,\n            minRotation: 0\n          }\n        }\n      };\n    }\n\n    // Add export functionality if enabled\n    if (enableExport && config.options.plugins) {\n      config.options.plugins.title = {\n        ...config.options.plugins.title,\n        display: true // Always show title when export is enabled\n      };\n    }\n\n    return config;\n  };\n\n  // Render chart\n  React.useEffect(() => {\n    if (processData.isEmpty || !canvasRef.current) {\n      return;\n    }\n\n    if (!ChartJS) {\n      console.error(''[SimpleChart] Chart.js library not loaded'');\n      setError(''Chart.js library not loaded. Please ensure it is included in the component libraries.'');\n      return;\n    }\n\n    try {\n      setError(null);\n\n      // Destroy existing chart\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n        chartInstanceRef.current = null;\n      }\n\n      const config = getChartConfig();\n      \n      // Create new chart instance\n      const ctx = canvasRef.current.getContext(''2d'');\n      chartInstanceRef.current = new ChartJS(ctx, config);\n\n      // Fire rendered event\n      if (onChartRendered) {\n        onChartRendered({\n          chartType: actualChartType,\n          dataPointCount: processData.chartData.length,\n          aggregateMethod: aggregateMethod,\n          totalValue: processData.values.reduce((a, b) => a + b, 0)\n        });\n      }\n\n    } catch (err) {\n      console.error(''[SimpleChart] Error rendering chart:'', err);\n      setError(`Failed to render chart: $' + '{err.message}`);\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n        chartInstanceRef.current = null;\n      }\n    };\n  }, [processData, actualChartType, title, height, colors, showLegend, showDataLabels, enableExport, ChartJS]);\n\n  // Download chart as image\n  React.useEffect(() => {\n    if (enableExport && chartInstanceRef.current && canvasRef.current) {\n      // Add a simple export button overlay\n      const exportHandler = () => {\n        const url = canvasRef.current.toDataURL(''image/png'');\n        const link = document.createElement(''a'');\n        link.download = `$' + '{title || ''chart''}.png`;\n        link.href = url;\n        link.click();\n      };\n      \n      // Store handler for cleanup\n      window.SimpleChartExport = exportHandler;\n    }\n    \n    return () => {\n      delete window.SimpleChartExport;\n    };\n  }, [enableExport, title]);\n\n  // Error state\n  if (error) {\n    return (\n      <div style={{ \n        display: ''flex'', \n        flexDirection: ''column'',\n        justifyContent: ''center'', \n        alignItems: ''center'', \n        height: height,\n        color: ''#ff4d4f'',\n        padding: ''20px''\n      }}>\n        <div>Error rendering chart</div>\n        <div style={{ fontSize: ''12px'', marginTop: ''8px'', color: ''#999'' }}>{error}</div>\n      </div>\n    );\n  }\n\n  // Empty state\n  if (!data || data.length === 0 || processData.isEmpty) {\n    return (\n      <div style={{ \n        display: ''flex'', \n        justifyContent: ''center'', \n        alignItems: ''center'', \n        height: height,\n        color: ''#999'',\n        backgroundColor: ''#f5f5f5'',\n        borderRadius: ''4px''\n      }}>\n        No data available to display\n      </div>\n    );\n  }\n\n  // Render chart container with canvas\n  return (\n    <div style={{ width: ''100%'', position: ''relative'' }}>\n      {enableExport && (\n        <button\n          onClick={() => window.SimpleChartExport && window.SimpleChartExport()}\n          style={{\n            position: ''absolute'',\n            top: 10,\n            right: 10,\n            padding: ''4px 8px'',\n            fontSize: ''12px'',\n            backgroundColor: ''#fff'',\n            border: ''1px solid #d9d9d9'',\n            borderRadius: ''4px'',\n            cursor: ''pointer'',\n            zIndex: 10,\n            display: ''flex'',\n            alignItems: ''center'',\n            gap: ''4px''\n          }}\n          title=\"Download as PNG\"\n        >\n          📥 Export\n        </button>\n      )}\n      <div style={{ width: ''100%'', height: `$' + '{height}px` }}>\n        <canvas ref={canvasRef} />\n      </div>\n    </div>\n  );\n}","exampleUsage":"<SimpleChart\n  entityName=\"Invoice Line Items\"\n  data={invoiceItems}\n  groupBy=\"ProductCategory\"\n  valueField=\"TotalAmount\"\n  aggregateMethod=\"sum\"\n  chartType=\"bar\"\n  title=\"Revenue by Product Category\"\n  limit={10}\n  onDataPointClick={handleDrillDown}\n/>"}'
SET
  @FunctionalRequirements_55eb3e04 = N'Zero-configuration charting automatically creates appropriate charts from entity data; Common chart types including bar line pie donut area charts with smart defaults; Group-by aggregation automatically aggregates data by specified field; Interactive exploration with click events enabling drill-down workflows; Responsive design adapts to container size automatically; Automatic data aggregation by any field with count sum or average; Smart chart type selection based on data characteristics; Built-in color schemes optimized for accessibility; Click events on data points for drill-down scenarios; Automatic formatting of values dates and currencies; Loading states and empty data handling; Export chart as image functionality; Configurable but works with minimal props; Quick dashboard widgets showing entity counts by category; Revenue charts grouped by time period or product; Status distribution pie charts; Trend lines over time; Top N items by any metric; Comparison charts between categories'
SET
  @TechnicalDesign_55eb3e04 = N'Convention over configuration with smart defaults for everything; Single-purpose component focused solely on charting; Data-agnostic works with any entity data structure; Event-driven integrates with parent components via events; Uses Chart.js for rendering canvas-based and lightweight; Automatic data aggregation using JavaScript reduce and group operations; Smart type detection for appropriate formatting; Memoized calculations prevent unnecessary re-renders; Dynamic color palette based on data point count; Data processing pipeline receives raw entity data groups by field aggregates using specified method sorts and applies limits formats for chart library and renders; Chart type selection with bar as default for categorical data line for date time fields pie doughnut for distribution percentages area for cumulative time series; Event system includes chart type series name data point value and label original records percentage of total enabling drill-down to detailed views'
SET
  @FunctionalRequirementsVector_55eb3e04 = N'[-0.08659332990646362,0.023071492090821266,-0.04644135758280754,-0.058883942663669586,0.0038956892676651478,-0.012597905471920967,0.019722647964954376,0.022754337638616562,-0.02129647508263588,0.020324014127254486,0.0006014143000356853,0.028852669522166252,0.04765009135007858,0.15790913999080658,0.015748025849461555,-0.058792538940906525,-0.042822182178497314,0.07126680016517639,0.01936570182442665,0.04160558432340622,0.028089016675949097,-0.004987628664821386,-0.02134871855378151,-0.007729643024504185,-0.027848759666085243,-0.003286890219897032,-0.06570342183113098,0.018778527155518532,-0.0023439323995262384,-0.11778443306684494,0.04197702556848526,0.0444166474044323,-0.025219887495040894,0.013982890173792839,0.0000025797107809921727,-0.029987188056111336,-0.05698593333363533,-0.026912067085504532,-0.008299574255943298,0.03149990737438202,-0.016614289954304695,-0.0772361233830452,0.011589757166802883,-0.01639055274426937,0.04417266324162483,-0.06243868172168732,0.0010739217977970839,0.04317699745297432,0.007906951941549778,-0.06128520518541336,-0.010755207389593124,-0.012474060989916325,-0.06733258813619614,-0.0174811203032732,-0.004579599946737289,-0.01082882285118103,-0.010773452930152416,0.012829157523810863,0.06967385113239288,-0.02661024034023285,-0.02411321923136711,-0.004055257420986891,-0.0002798826899379492,0.007791068404912949,0.01072009652853012,0.06836975365877151,0.06812771409749985,-0.07218284159898758,-0.0012471684021875262,0.04555821418762207,0.06620948016643524,-0.029961545020341873,0.02609500288963318,-0.04156035557389259,0.0007255439995788038,-0.019625283777713776,-0.040880147367715836,-0.020193370059132576,0.013874420896172523,-0.002663895022124052,-0.048137862235307693,0.0064249178394675255,-0.02663564495742321,-0.011323385871946812,0.0009643582161515951,-0.064365454018116,-0.006451391614973545,-0.011134391650557518,-0.02049434557557106,-0.011204817332327366,-0.00037569343112409115,-0.026699144393205643,-0.05211789906024933,0.005719475913792849,-0.0034353516530245543,-0.029958801344037056,0.020513372495770454,-0.008085161447525024,0.056612223386764526,-0.029980622231960297,0.025139544159173965,0.03011992760002613,-0.005578086711466312,0.05110689625144005,0.07515382021665573,-0.00868887547403574,-0.009756868705153465,-0.05802900716662407,0.032885998487472534,0.005331626161932945,0.002317367820069194,-0.008859745226800442,-0.0068241204135119915,-0.017286119982600212,-0.0014219979057088494,-0.0044394442811608315,0.004473960492759943,-0.015660690143704414,-0.032047469168901443,0.024667559191584587,0.06896363198757172,0.034201331436634064,0.0004980217199772596,0.01515014935284853,0.006218088790774345,0.0482148602604866,-0.05546307936310768,0.029268234968185425,-0.008059823885560036,-0.027781246230006218,-0.01583033613860607,-0.018351664766669273,0.06270314007997513,0.009327725507318974,0.0010131355375051498,0.015429956838488579,0.03583327308297157,0.030753733590245247,-0.0949137732386589,-0.013157899491488934,0.004898576065897942,0.01800639182329178,-0.04780757799744606,0.020414868369698524,0.030007993802428246,-0.02809775061905384,-0.008712763898074627,0.043003521859645844,0.006069609895348549,0.014776987954974174,-0.02401887997984886,-0.01948358491063118,-0.04442398250102997,0.006613818928599358,-0.02333713136613369,-0.03676934167742729,0.006730576977133751,0.02708251401782036,0.022021614015102386,-0.002593212528154254,-0.010017238557338715,-0.01436921302229166,0.01794530265033245,-0.002513212850317359,0.0161787997931242,0.00663748849183321,-0.03385049104690552,-0.010892975144088268,-0.11587943136692047,-0.042060527950525284,-0.008846372365951538,-0.06598908454179764,0.010026107542216778,-0.006942389998584986,0.04710448905825615,-0.02317717671394348,0.08352503180503845,-0.026729648932814598,-0.02635132148861885,0.01313403993844986,0.03979874029755592,-0.13527509570121765,0.004113242495805025,0.05802531540393829,0.05383684113621712,0.007164462469518185,-0.08564398437738419,-0.010071901604533195,-0.04004378616809845,-0.0069408356212079525,-0.014113913290202618,0.03917828947305679,-0.024030810222029686,0.00497000478208065,0.005456488113850355,0.005107522942125797,-0.017903074622154236,-0.014804241247475147,-0.02077459543943405,-0.00890518818050623,-0.010058535262942314,0.02912299335002899,0.04226090759038925,0.02412472851574421,0.008405046537518501,-0.04269060865044594,-0.04094759002327919,-0.023506129160523415,0.006085195578634739,0.0301959365606308,0.049658797681331635,0.00792238675057888,-0.00766567699611187,-0.005472967866808176,-0.030121220275759697,0.0027000419795513153,0.028675351291894913,0.018834860995411873,-0.032434213906526566,0.03296675905585289,-0.029018741101026535,-0.06785755604505539,0.06551306694746017,-0.0009363923454657197,0.1440914422273636,0.01751335710287094,0.01888708584010601,0.04280664026737213,0.010209750384092331,0.05090605095028877,-0.007641213480383158,0.003462204709649086,0.016707004979252815,0.007570216432213783,-0.0067257811315357685,0.03964649885892868,0.08820770680904388,0.05486273765563965,0.0027070760261267424,0.03230354189872742,0.045366209000349045,-0.022115299478173256,-0.031210344284772873,-0.026319380849599838,0.0018325785640627146,-0.03157920762896538,-0.013798494823276997,0.034517861902713776,-0.045964278280735016,-0.03609781712293625,0.013062258251011372,0.030827999114990234,0.03517685458064079,-0.024240147322416306,0.0006100856116972864,-0.0050107804127037525,0.0252775140106678,0.030695145949721336,0.0204357597976923,0.053501904010772705,0.014049973338842392,-0.001243729260750115,-0.023221289739012718,-0.016256729140877724,0.0025496419984847307,-0.04675745591521263,0.08139653503894806,-0.020177338272333145,0.003705544164404273,0.008657475933432579,0.006705094128847122,0.03102283552289009,0.0221897903829813,-0.02087346464395523,-0.009744709357619286,0.002555298851802945,-0.0016842023469507694,0.010799897834658623,0.00374770094640553,0.010995469056069851,-0.01223503053188324,0.008331814780831337,0.016441844403743744,0.01576283387839794,-0.007224843837320805,-0.03389953821897507,0.04397908225655556,0.016938965767621994,0.058443039655685425,-0.002148221479728818,-0.00892861932516098,-0.05721500515937805,0.04776150733232498,-0.0030354822520166636,-0.024915723130106926,0.003052659099921584,0.040130846202373505,-0.0025316807441413403,-0.03896037116646767,-0.00327274389564991,-0.04227001965045929,-0.028731001541018486,-0.024918919429183006,0.001236085081472993,-0.0010771945817396045,0.04481009393930435,0.05403388664126396,-0.013106503523886204,-0.003792506642639637,0.04980175942182541,0.004307168535888195,-0.008925273083150387,-0.026867683976888657,0.01026817224919796,0.0363021083176136,0.05831151828169823,-0.017067469656467438,0.07158065587282181,0.0009456495172344148,0.04396353289484978,-0.005674630869179964,-0.02880077436566353,-0.005983884911984205,0.007266530767083168,-0.037076182663440704,0.045185256749391556,-0.03443435579538345,-0.043714988976716995,-0.03538505733013153,-0.0121462382376194,-0.03209397569298744,-0.04783733934164047,0.005768609698861837,0.02122388780117035,0.04434652999043465,-0.011282357387244701,-0.029843220487236977,-0.02911892533302307,0.01005637552589178,-0.03327864408493042,-0.015072011388838291,0.03740612417459488,-0.017432134598493576,0.020008230581879616,0.011561422608792782,-0.03559146076440811,0.07605936378240585,0.022314270958304405,-0.006331100594252348,0.013034996576607227,0.02604166604578495,0.01818360760807991,0.04291290417313576,-0.019747352227568626,0.039905328303575516,0.0065384479239583015,-0.07155667245388031,0.0022241324186325073,-0.03687094897031784,-0.036146506667137146,0.004326693248003721,0.00045855980715714395,0.02126041054725647,-0.0014826263068243861,-0.02550814114511013,0.025339661166071892,-0.006900236941874027,0.05242198705673218,0.02507396787405014,-0.029557010158896446,-0.04250785708427429,0.03265794739127159,0.08444773405790329,0.014860741794109344,-0.01906302012503147,0.01508412603288889,0.00563958752900362,0.04339750111103058,0.025705289095640182,0.026739779859781265,-0.010777098126709461,-0.05963468551635742,0.07424592226743698,-0.019101321697235107,0.07585228979587555,-0.029291804879903793,-0.0726512223482132,-0.016847766935825348,-0.04551684483885765,0.00203744787722826,-0.009105036035180092,-0.046585265547037125,0.05683301016688347,-0.05213802680373192,0.024956664070487022,-0.045226529240608215,-0.053776245564222336,-0.01671280525624752,0.024673791602253914,0.01748022995889187,0.02898421138525009,-0.06007536128163338,-0.04439815506339073,-0.01197800226509571,0.03573284298181534,0.0023464744444936514,-0.017500560730695724,0.054610151797533035,-0.029491305351257324,0.017444200813770294,-0.07507715374231339,-0.008737330324947834,-0.04247945919632912,-0.0637245923280716,0.005886727012693882,0.022364675998687744,-0.024301497265696526,0.023087874054908752,0.040805354714393616,0.06818834692239761,0.05223064869642258,-0.003182793967425823,-0.0070120650343596935,-0.021239841356873512,-0.01025860384106636,-0.06133894994854927,-0.05325162410736084,-0.003122395370155573,-0.015920059755444527,0.03617391362786293,0.023309312760829926,-0.029185278341174126,-0.01643052138388157,-0.042510222643613815,-0.0708700567483902,0.02467537112534046,-0.021535279229283333,-0.00136867118999362,-0.0719996765255928,0.012912159785628319,-0.025839276611804962,0.009869595058262348,0.017959579825401306,-0.014149581082165241,-0.016489766538143158,-0.014075205661356449,0.008017085492610931,-0.009465377777814865,-0.04361460357904434,0.029652677476406097,0.04452315345406532,-0.02398090995848179,-0.0036272474098950624,0.037950754165649414,0.02237679250538349,-0.01833428628742695,0.016857938840985298,0.003914403263479471,0.0031892508268356323,-0.006404488813132048,0.020956596359610558,0.0072805495001375675,-0.0720931813120842,0.013238801620900631,0.06037698686122894,0.013055719435214996,0.05661623179912567,-0.0050286767072975636,-0.03828893229365349,-0.04973229020833969,0.089478999376297,-0.0028076020535081625,-0.0028267642483115196,-0.01526765525341034,0.041174355894327164,-0.00012576735753100365,0.03843022882938385,0.008365708403289318,0.023642174899578094,-0.025144195184111595,-0.001682292204350233,-0.025418754667043686,0.030529238283634186,-0.031266409903764725,0.03526929393410683,-0.00927258562296629,-0.00259394571185112,-0.021252937614917755,0.0029969799797981977,0.006178358104079962,0.004972722847014666,-0.02697369083762169,-0.027965795248746872,0.0823863297700882,0.04996137320995331,0.04068836197257042,-0.07407911121845245,0.03668397292494774,-0.0017984574660658836,-0.0402168333530426,-0.016266753897070885,0.0026535706128925085,-0.009660068899393082,-0.03859167918562889,-0.015354316681623459,0.055856138467788696,0.03710107132792473,-0.009368214756250381,0.00696156732738018,0.023048389703035355,-0.03178245946764946,-0.016062341630458832,0.02224184200167656,0.01098977867513895,0.06632104516029358,0.04095776379108429,-0.01963912695646286,-0.04055657982826233,0.029134077951312065,-0.014819539152085781,-0.021214142441749573,0.005693535786122084,0.007475953083485365,-0.006982741411775351,0.05299965292215347,-0.018876418471336365,0.007639352697879076,-0.014236362650990486,-0.02456662431359291,0.027124447748064995,0.026620887219905853,-0.0371599905192852,-0.039556313306093216,0.01770024746656418,-0.04980293661355972,0.09167078882455826,0.07166042923927307,0.02886980213224888,-0.0011293678544461727,0.019672468304634094,-0.11082305014133453,-0.004321159329265356,0.014924566261470318,-0.03267788514494896,0.00403163256123662,0.01492315623909235,-0.009169496595859528,-0.012353050522506237,0.012804471887648106,0.021302420645952225,0.02358677051961422,-0.012127949856221676,-0.07852999120950699,-0.008888171054422855,-0.01907494105398655,-7.28345630255899e-33,-0.018211139366030693,-0.022254928946495056,-0.006567929871380329,-0.008761387318372726,0.017570236697793007,-0.0135486526414752,0.007874617353081703,-0.03165183216333389,-0.015060282312333584,-0.006866777315735817,-0.030653145164251328,-0.0071307457983493805,0.004540647380053997,-0.022780301049351692,0.0597170852124691,0.015204595401883125,0.041471026837825775,-0.010184458456933498,-0.03663061559200287,-0.009368550032377243,-0.036074090749025345,0.027949655428528786,-0.023976333439350128,-0.05933080613613129,0.013221112079918385,0.008373986929655075,0.009103803895413876,-0.012007925659418106,0.04740012437105179,-0.011158881708979607,0.03246813639998436,-0.02254343405365944,-0.006158408243209124,0.0021116009447723627,-0.028034577146172523,0.022387485951185226,-0.05605902150273323,-0.03171751648187637,0.036079782992601395,-0.007287049200385809,0.06457869708538055,0.03260389715433121,0.03243756294250488,0.016627885401248932,0.025960078462958336,0.012691453099250793,-0.0025435371790081263,-0.007164347916841507,-0.023466479033231735,0.016367994248867035,0.03603649139404297,0.020315323024988174,-0.02833094634115696,0.025568624958395958,-0.012157047167420387,0.08101939409971237,0.028209174051880836,0.004371074493974447,-0.1092710942029953,0.0183483324944973,-0.05445214360952377,-0.09190783649682999,0.05565444007515907,0.017769401893019676,0.06031334027647972,0.0005904576391912997,-0.03228146582841873,0.050330787897109985,-0.0721026286482811,0.029412277042865753,0.01670907251536846,0.012684250250458717,0.003930139821022749,-0.05074059218168259,-0.0006541026523336768,-0.045324452221393585,0.006854700855910778,0.04698938503861427,-0.025037208572030067,-0.020335882902145386,-0.034612659364938736,0.0014369317796081305,-0.07095997780561447,-0.0027586217038333416,0.05526980385184288,0.020139450207352638,0.0015298717189580202,-0.01959853805601597,0.032004669308662415,0.04076320305466652,-0.06252793222665787,0.032922305166721344,-0.05983724445104599,0.006993906106799841,-0.05521225556731224,0.006260965019464493,0.06576775014400482,-0.000979829696007073,0.013753206469118595,-0.0744493156671524,-0.0024598611053079367,0.036169324070215225,-0.054623689502477646,0.04596510902047157,0.009329298511147499,-0.009473643265664577,-0.021475329995155334,0.000997034483589232,-0.07363961637020111,0.0016363688046112657,0.022127244621515274,-0.03237112611532211,-0.022976933047175407,-0.06144736707210541,0.00014627115160692483,-0.023854512721300125,0.016256267204880714,-0.050358884036540985,0.046867500990629196,-0.000015021836588857695,0.030205342918634415,0.0003369974729139358,-0.05816064402461052,-0.0012415716191753745,0.06313720345497131,-0.06387734413146973,-0.020738419145345688,-0.05641898885369301,0.03155027702450752,-0.004452961962670088,-0.024011582136154175,-0.027917761355638504,3.415511287130357e-7,0.01781320758163929,0.0036414945498108864,0.0038190505001693964,0.03412771597504616,0.014930635690689087,-0.0020866142585873604,-0.050140127539634705,0.004169967025518417,-0.034561146050691605,-0.025075800716876984,0.020958272740244865,0.003453596727922559,0.0003015597758349031,0.08598030358552933,-0.005035934969782829,-0.04764267057180405,0.06231134384870529,-0.049769409000873566,-0.031897470355033875,0.04635114595293999,0.07106436789035797,0.005759564694017172,0.06614323705434799,0.007095834705978632,0.017071204259991646,-0.03224686160683632,-0.03795420005917549,0.004559371154755354,0.06621570885181427,-0.020131146535277367,0.004833901766687632,0.09035103023052216,-0.032608721405267715,-0.039673253893852234,-0.015194752253592014,0.010827374644577503,-0.005597126204520464,-0.023530595004558563,-0.004844768438488245,0.06032005697488785,0.032535526901483536,-0.08100328594446182,-0.014913979917764664,-0.04613405838608742,0.0155366575345397,-0.046665214002132416,0.008425816893577576,0.06382221728563309,0.015290439128875732,0.032292261719703674,0.06365855038166046,0.011094565503299236,-0.025157494470477104,-0.06380470842123032,0.011021427810192108,-0.022124487906694412,0.016083108261227608,0.059640947729349136,0.02277633547782898,0.04227784648537636,-0.0016344262985512614,-0.016216350719332695,-0.016251830384135246,0.06429542601108551,0.0006044161273166537,0.04702938348054886,-0.02534574270248413,3.387824310237758e-34,0.015047244727611542,-0.05075235664844513,0.029566019773483276,0.005008672829717398,0.001826870022341609,-0.01283048652112484,0.05384485796093941,-0.023979734629392624,0.0014739501057192683,-0.03877582773566246,0.011544276028871536]'
SET
  @TechnicalDesignVector_55eb3e04 = N'[-0.049555860459804535,0.0549764558672905,-0.03683452308177948,-0.031797535717487335,-0.02166503295302391,0.009739972651004791,0.006085667293518782,0.0011565069435164332,-0.015240680426359177,0.02685358375310898,0.026486512273550034,0.03759180009365082,0.038962263613939285,0.16196231544017792,0.010570165701210499,-0.06663297116756439,-0.036740634590387344,0.07236319780349731,0.020217668265104294,0.010747618973255157,0.047365959733724594,-0.01276322454214096,-0.013994316570460796,0.010159437544643879,-0.06078408658504486,-0.010562097653746605,-0.02873123623430729,0.011850263923406601,0.02955445647239685,-0.09418419003486633,0.02532791532576084,0.021288612857460976,-0.03401390090584755,0.046066734939813614,0.0000024254854906757828,-0.03198700398206711,-0.034664515405893326,-0.004449786152690649,-0.00005861422687303275,0.025352708995342255,-0.019520064815878868,-0.05131551995873451,0.039843425154685974,-0.01752503216266632,0.014280809089541435,-0.05625336989760399,0.007444683462381363,-0.00967282522469759,0.04823502153158188,-0.06715362519025803,-0.002628797898069024,-0.014276938512921333,-0.05453404039144516,-0.002331018215045333,0.009646806865930557,0.01575424149632454,-0.010182717815041542,0.0026854374445974827,0.07829618453979492,-0.013811150565743446,-0.017332496121525764,0.0289209745824337,0.010293984785676003,-0.02437683939933777,0.05801650881767273,0.03640393167734146,0.0692349225282669,-0.08813696354627609,-0.00994835328310728,0.022536199539899826,0.1083630919456482,-0.03385386988520622,0.01660209894180298,0.019437715411186218,-0.04560999572277069,0.019605858251452446,-0.03728051111102104,-0.028218043968081474,-0.009865256026387215,-0.014471704140305519,-0.022964684292674065,0.039827607572078705,-0.04906987026333809,-0.03631361946463585,0.004371593240648508,0.003238305216655135,0.007099981419742107,0.024962343275547028,-0.063213050365448,-0.030487580224871635,0.016906041651964188,-0.05173017457127571,-0.036219172179698944,0.026890413835644722,-0.014133109711110592,-0.005056173074990511,0.02777085453271866,-0.03290268033742905,0.043413322418928146,-0.009292581118643284,0.06452424079179764,0.04799250140786171,0.008119102567434311,0.04359360411763191,0.0985889881849289,0.011092940345406532,0.012442539446055889,-0.0797831192612648,0.029051175341010094,0.02658361941576004,0.0044183447025716305,-0.013176609762012959,0.0006679526995867491,0.017575206235051155,0.008250477723777294,-0.0014883383410051465,-0.029049593955278397,0.010547959245741367,-0.004593756981194019,0.04621531814336777,0.1085795909166336,0.02409980446100235,0.02967986650764942,0.029816463589668274,-0.01787755824625492,0.04436078295111656,-0.05275924876332283,-0.01629793643951416,-0.006548949982970953,-0.048480402678251266,-0.016589557752013206,-0.005146198906004429,0.030106522142887115,0.0033985988702625036,-0.026200640946626663,0.033682681620121,0.03163972124457359,0.02901267446577549,-0.09637397527694702,-0.003763507818803191,0.0018181467894464731,0.009541979059576988,-0.05415324494242668,0.012552805244922638,0.003080094000324607,-0.011810613796114922,0.004363551270216703,0.05525745451450348,-0.0021804547868669033,-0.0024699713103473186,0.0017544000875204802,0.017582571133971214,-0.0521291047334671,0.020532965660095215,0.0028641335666179657,-0.008313607424497604,0.018226521089673042,0.00393486674875021,0.03962745517492294,-0.0367683470249176,0.014013372361660004,0.015829013660550117,0.019366495311260223,-0.0013376021524891257,-0.024527862668037415,0.010647807270288467,-0.022927982732653618,-0.014629433862864971,-0.11136463284492493,-0.034207768738269806,-0.010414758697152138,-0.03000676818192005,-0.003172539873048663,-0.01007042545825243,0.0665719136595726,-0.0354924239218235,0.06870011985301971,-0.06453252583742142,0.007305163890123367,0.05926793813705444,0.05883583053946495,-0.11271016299724579,-0.010154402814805508,0.041991788893938065,0.08467241376638412,-0.001346746925264597,-0.06573668867349625,0.004958599805831909,-0.01972186006605625,-0.015805261209607124,-0.009362345561385155,0.007040413562208414,-0.02280164510011673,0.011145561002194881,0.0083013279363513,0.011096356436610222,0.006458841264247894,-0.014555503614246845,0.02457302436232567,0.025769812986254692,0.0036404202692210674,0.02672579512000084,0.05427897721529007,0.01813093014061451,0.01383334118872881,-0.055543139576911926,-0.05071888491511345,-0.02845773845911026,-0.015544812195003033,0.022201769053936005,0.04339548200368881,0.0021802226547151804,-0.016223346814513206,0.008243439719080925,-0.028228135779500008,0.014955630525946617,0.02886120043694973,0.01263346429914236,-0.051396988332271576,0.041716527193784714,-0.06558439135551453,-0.05212066322565079,0.07413922250270844,-0.008707833476364613,0.08105131983757019,-0.00872648786753416,0.003329586237668991,0.030208241194486618,0.023103347048163414,0.044800106436014175,-0.023596005514264107,0.007947373203933239,0.023058615624904633,0.004654498305171728,0.02079853229224682,0.06560522317886353,0.017979448661208153,0.04908735677599907,0.009143956936895847,0.0027157319709658623,0.01586136780679226,-0.016457367688417435,-0.03676773980259895,-0.018398642539978027,0.01221952959895134,-0.049804430454969406,-0.04594110697507858,0.034310322254896164,-0.042418450117111206,-0.01975267194211483,0.020831668749451637,0.014341162517666817,0.011806781403720379,-0.028545964509248734,-0.0023571650963276625,-0.019045494496822357,0.05245682969689369,0.0338435135781765,0.01695195399224758,0.05784781649708748,-0.009753492660820484,0.00603027269244194,-0.03373128920793533,-0.026493174955248833,-0.0035718053113669157,-0.05754329264163971,0.07644239068031311,0.0007311158115044236,-0.04866206273436546,0.015861332416534424,0.018957993015646935,0.016877038404345512,0.013132584281265736,-0.019452564418315887,-0.007600509095937014,0.022578595206141472,-0.02110036090016365,-0.019805708900094032,-0.027919117361307144,0.03255469352006912,-0.0007233078358694911,-0.008974216878414154,-0.0021452689543366432,0.03796654939651489,-0.001555168884806335,0.004835690837353468,0.043861158192157745,0.001098355744034052,0.05767928808927536,-0.04114607721567154,-0.010393202304840088,-0.04393297806382179,0.030751606449484825,-0.011325419880449772,-0.02120228111743927,0.015338375233113766,0.029416313394904137,0.007740430533885956,-0.027195220813155174,-0.0007220680708996952,-0.06471360474824905,-0.05692170560359955,-0.005794395226985216,-0.004156436305493116,-0.020325500518083572,0.07940278202295303,0.032333459705114365,0.014656318351626396,-0.015102448873221874,0.061598703265190125,0.027814684435725212,-0.004861012101173401,-0.015360197052359581,0.0207897387444973,0.024960072711110115,0.07059787213802338,-0.025683516636490822,-0.0030397726222872734,-0.01690911129117012,0.04404963180422783,0.009249011054635048,-0.02290986478328705,-0.0033824103884398937,-0.005097765941172838,-0.024501347914338112,0.04152514412999153,-0.03026691824197769,-0.04727021977305412,-0.02762008272111416,-0.01759364642202854,-0.02213871292769909,-0.050364043563604355,0.0007005420629866421,-0.022058941423892975,0.056454990059137344,0.00861810427159071,-0.041534408926963806,-0.07726279646158218,0.004738685209304094,-0.04570350423455238,-0.021616004407405853,0.03239705413579941,-0.023019876331090927,0.050207432359457016,0.020338989794254303,-0.01861674338579178,0.03462554141879082,0.022208141162991524,-0.018481675535440445,0.020572572946548462,0.02303112857043743,0.024885723367333412,0.026083778589963913,-0.029995650053024292,0.019748810678720474,0.038790952414274216,-0.059658512473106384,-0.02668488398194313,-0.0127406045794487,0.005929520353674889,0.030089911073446274,0.024966295808553696,0.04206818342208862,0.01084822416305542,-0.020018700510263443,0.014953983016312122,-0.0013887156965211034,0.020213434472680092,0.010284253396093845,-0.028272956609725952,-0.02631891518831253,0.04290040209889412,0.07688169926404953,0.012085894122719765,-0.021107671782374382,0.0057092406786978245,0.009508420713245869,0.06067929416894913,0.025698410347104073,0.029327230527997017,-0.02109057642519474,-0.10479991883039474,0.09665748476982117,0.019021201878786087,0.07229836285114288,-0.04124606028199196,-0.0519181564450264,-0.01782951131463051,-0.0274228285998106,0.027838723734021187,-0.024266934022307396,-0.0354209840297699,0.032235175371170044,-0.06879286468029022,0.007903601974248886,-0.009545158594846725,-0.04671631008386612,-0.013602984137833118,0.022345395758748055,0.0177854523062706,0.012163383886218071,-0.061781145632267,-0.03338192403316498,-0.001998094841837883,0.030941570177674294,-0.03366941213607788,-0.0416378527879715,0.06541324406862259,-0.009237358346581459,0.004342161118984222,-0.08830604702234268,-0.04030737653374672,-0.03369959071278572,-0.05243464931845665,-0.03113739937543869,-0.003663728479295969,-0.03274333477020264,0.007747002877295017,0.06182381138205528,0.05557316169142723,0.04569988325238228,-0.015379957854747772,-0.006600820925086737,-0.03977569565176964,0.038193028420209885,-0.05854042246937752,-0.02332427352666855,0.016559068113565445,-0.006042226683348417,0.07661690562963486,0.01075782161206007,-0.033986929804086685,-0.016902098432183266,0.011425756849348545,-0.05709181725978851,-0.016026172786951065,0.00011737819295376539,0.01609835773706436,-0.04287562519311905,0.00705568166449666,0.002506853546947241,-0.039908651262521744,0.038136210292577744,-0.021818237379193306,-0.035024967044591904,-0.014606373384594917,-0.0078016226179897785,-0.003197569865733385,-0.018472928553819656,0.039621107280254364,0.03973019868135452,-0.030784526839852333,-0.03206891566514969,0.006563771981745958,0.024717027321457863,-0.060381338000297546,0.019945161417126656,-0.047995567321777344,0.013920473866164684,0.029747869819402695,0.03993544727563858,0.01928216591477394,-0.060733601450920105,0.003709680400788784,0.0503694973886013,0.05684668943285942,0.05096308887004852,-0.039034321904182434,-0.05595839023590088,-0.08523436635732651,0.07247696816921234,-0.029607152566313744,-0.015910640358924866,0.005887432489544153,0.06735517829656601,0.01794419437646866,0.004962617065757513,0.02196650020778179,0.020326441153883934,-0.01362104993313551,0.030370501801371574,0.01787959784269333,0.012228146195411682,-0.03491271287202835,0.028137803077697754,-0.0024207322858273983,-0.027952272444963455,-0.017225857824087143,-0.006776730064302683,-0.00885279756039381,-0.030437013134360313,-0.033785130828619,-0.022980650886893272,0.08675730973482132,0.08289982378482819,0.034632958471775055,-0.06538718938827515,0.05940099060535431,-0.013315617106854916,-0.031536221504211426,-0.020713772624731064,0.006919967941939831,0.017490329220891,-0.023220261558890343,-0.03343955799937248,0.03229513019323349,0.02911754697561264,-0.0209471695125103,-0.0018575872527435422,0.0018858594121411443,-0.0035304431803524494,-0.008942806161940098,-0.01679232157766819,-0.004417426884174347,0.04783650487661362,0.030960313975811005,-0.028895853087306023,-0.012791657820343971,0.039279647171497345,-0.035758618265390396,-0.011462250724434853,0.00462565990164876,-0.005170684307813644,0.010173297487199306,0.07665035128593445,0.008411478251218796,-0.0029772657435387373,-0.013418556191027164,-0.012599886395037174,0.03457454591989517,0.0037695004139095545,-0.057214781641960144,-0.04294607788324356,0.00043413511593826115,-0.05725407227873802,0.08073240518569946,0.03946027159690857,0.024609968066215515,-0.008687394671142101,-0.002145867794752121,-0.11652105301618576,-0.015511377714574337,0.037030357867479324,-0.017717260867357254,-0.002670814050361514,-0.007516319397836924,0.010785113088786602,-0.027385959401726723,0.04726986959576607,0.01709280163049698,0.0423160120844841,-0.005317044444382191,-0.024837464094161987,-0.02435370534658432,-0.003390710800886154,-7.420150867196267e-33,-0.017220912501215935,-0.003021887969225645,-0.011865939013659954,-0.015356247313320637,-0.007729092612862587,-0.012297488749027252,0.0191931314766407,-0.04985659569501877,-0.01990700513124466,-0.009883240796625614,-0.011749009601771832,-0.020353278145194054,0.0046937596052885056,-0.011212844401597977,0.044873859733343124,0.01606401428580284,0.02541728876531124,-0.030543027445673943,-0.044771432876586914,-0.011972618289291859,-0.011045792140066624,0.04071042314171791,-0.011180214583873749,-0.06923150271177292,0.011043662205338478,0.014924418181180954,-0.007734890561550856,0.002065564040094614,0.02835233137011528,0.03918107599020004,0.02812931314110756,-0.03039146214723587,-0.011461418122053146,-0.017421355471014977,-0.022949310019612312,0.010579022578895092,-0.0714874118566513,-0.03222385793924332,0.011084417812526226,-0.014719238504767418,0.039047516882419586,0.019274355843663216,0.04813310131430626,0.003611588617786765,-0.0034897448495030403,-0.041051771491765976,-0.008578409440815449,-0.013372538611292839,-0.007551004644483328,-0.04099753499031067,0.021534280851483345,0.03207341209053993,-0.039537519216537476,0.04306643083691597,-0.0178935918956995,0.06153220310807228,0.03886521980166435,0.05688026547431946,-0.08848623931407928,0.03220321610569954,-0.08199197053909302,-0.07107333838939667,0.010437819175422192,0.02248687669634819,0.07802564650774002,0.008275256492197514,-0.011171584948897362,0.0522247813642025,-0.07211606204509735,0.04243236407637596,0.0016863670898601413,0.009750790894031525,0.014328710734844208,-0.04911281168460846,-0.04167289659380913,-0.06524331122636795,-0.029817234724760056,0.03796008601784706,-0.01869262382388115,0.0031974026933312416,-0.04355628415942192,0.010341758839786053,-0.02494080364704132,0.009443438611924648,0.04000718891620636,0.016644243150949478,-0.015373975038528442,0.01676742359995842,0.016362210735678673,0.031825851649045944,-0.0011515594087541103,0.033649932593107224,-0.08509378880262375,0.013066810555756092,-0.02419009432196617,-0.005084763281047344,0.045452892780303955,0.019780917093157768,0.027693508192896843,-0.05064970999956131,0.03066672384738922,0.020143983885645866,-0.040689967572689056,0.01142721064388752,-0.007142651826143265,-0.012325943447649479,0.0037334293592721224,0.029410364106297493,-0.0785597413778305,0.019128847867250443,0.03083987347781658,-0.019122662022709846,0.0064661093056201935,-0.051784250885248184,0.005672987084835768,-0.04145360365509987,0.019398245960474014,-0.034017495810985565,0.05186794325709343,0.05452591925859451,0.05198000743985176,0.01129574328660965,-0.056470442563295364,0.01588817685842514,0.03957068547606468,-0.05535491555929184,-0.01155863143503666,-0.033768732100725174,-0.0010062858927994967,-0.007328451611101627,-0.0067695449106395245,-0.038613591343164444,3.183745889145939e-7,0.03681439161300659,0.023717667907476425,0.010844522155821323,0.053522393107414246,0.05459154397249222,-0.0311251450330019,-0.050360701978206635,-0.005007502622902393,-0.05739225074648857,-0.007870675064623356,0.030005814507603645,-0.0019995342008769512,0.020681753754615784,0.04456130787730217,0.006158243864774704,-0.050979021936655045,0.0011908919550478458,-0.05841890722513199,-0.04459385201334953,0.03578227013349533,0.06550820171833038,0.023597560822963715,0.057424671947956085,-0.004398964811116457,0.023825228214263916,-0.00815566722303629,-0.03622660040855408,-0.006265380885452032,0.011234170757234097,0.0001786797947715968,0.011582263745367527,0.02338140271604061,0.002281994093209505,-0.05842467024922371,-0.010491818189620972,-0.0010142899118363857,-0.03324339911341667,-0.017412658780813217,-0.002628908958286047,0.09924167394638062,0.02930256351828575,-0.06069409102201462,0.0008757625473663211,-0.07200746983289719,0.01169717125594616,-0.015219314955174923,-0.025838671252131462,0.03685762360692024,-0.02606889419257641,0.03762464225292206,0.050808243453502655,0.010631397366523743,-0.03146424889564514,-0.012348287738859653,0.005070272833108902,-0.03966204449534416,0.036029767245054245,0.028807220980525017,0.018561819568276405,0.03764640539884567,-0.027561567723751068,-0.016037389636039734,-0.010787717998027802,0.046756647527217865,-0.012497708201408386,0.04718005657196045,-0.027059394866228104,3.4744325299544363e-34,0.02732604369521141,-0.04599090665578842,0.0011318643810227513,-0.02959495596587658,0.0187362190335989,-0.04733193293213844,0.023484475910663605,-0.010073360055685043,0.006440754979848862,-0.03510700538754463,-0.01053486205637455]'
SET
  @HasCustomProps_55eb3e04 = 0
SET
  @HasCustomEvents_55eb3e04 = 0
SET
  @RequiresData_55eb3e04 = 0
SET
  @DependencyCount_55eb3e04 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_55eb3e04 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_55eb3e04 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_55eb3e04 = 0
SET
  @ID_55eb3e04 = '21A95BC1-2CCD-4949-A90F-4262F1DBDB62'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_55eb3e04,
  @Name = @Name_55eb3e04,
  @Version = @Version_55eb3e04,
  @VersionSequence = @VersionSequence_55eb3e04,
  @Title = @Title_55eb3e04,
  @Description = @Description_55eb3e04,
  @Type = @Type_55eb3e04,
  @Status = @Status_55eb3e04,
  @DeveloperName = @DeveloperName_55eb3e04,
  @DeveloperEmail = @DeveloperEmail_55eb3e04,
  @DeveloperOrganization = @DeveloperOrganization_55eb3e04,
  @SourceRegistryID = @SourceRegistryID_55eb3e04,
  @ReplicatedAt = @ReplicatedAt_55eb3e04,
  @LastSyncedAt = @LastSyncedAt_55eb3e04,
  @Specification = @Specification_55eb3e04,
  @FunctionalRequirements = @FunctionalRequirements_55eb3e04,
  @TechnicalDesign = @TechnicalDesign_55eb3e04,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_55eb3e04,
  @TechnicalDesignVector = @TechnicalDesignVector_55eb3e04,
  @HasCustomProps = @HasCustomProps_55eb3e04,
  @HasCustomEvents = @HasCustomEvents_55eb3e04,
  @RequiresData = @RequiresData_55eb3e04,
  @DependencyCount = @DependencyCount_55eb3e04,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_55eb3e04,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_55eb3e04,
  @HasRequiredCustomProps = @HasRequiredCustomProps_55eb3e04,
  @ID = @ID_55eb3e04;


-- End of SQL Logging Session
-- Session ID: aef6aa16-4b9c-4bc0-a9d9-67f7db4ba051
-- Completed: 2025-09-18T07:37:07.290Z
-- Duration: 7290ms
-- Total Statements: 1
