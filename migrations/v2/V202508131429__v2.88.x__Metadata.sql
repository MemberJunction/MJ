-- SQL Logging Session
-- Session ID: 5ce25232-85a4-4725-bd0e-00bb4cb3a78f
-- Started: 2025-08-14T14:41:15.963Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save MJ: Component Libraries (core SP call only)
DECLARE @ID_cdc109e2 UNIQUEIDENTIFIER,
@Name_cdc109e2 NVARCHAR(500),
@DisplayName_cdc109e2 NVARCHAR(500),
@Version_cdc109e2 NVARCHAR(100),
@GlobalVariable_cdc109e2 NVARCHAR(255),
@Category_cdc109e2 NVARCHAR(100),
@CDNUrl_cdc109e2 NVARCHAR(1000),
@CDNCssUrl_cdc109e2 NVARCHAR(1000),
@Description_cdc109e2 NVARCHAR(MAX)
SET
  @ID_cdc109e2 = '4436ee9f-d09e-4ed7-a3fb-76e021166d04'
SET
  @Name_cdc109e2 = N'dayjs'
SET
  @DisplayName_cdc109e2 = N'Day.js'
SET
  @Version_cdc109e2 = N'1.11.10'
SET
  @GlobalVariable_cdc109e2 = N'dayjs'
SET
  @Category_cdc109e2 = N'utility'
SET
  @CDNUrl_cdc109e2 = N'https://unpkg.com/dayjs@1.11.10/dayjs.min.js'
SET
  @Description_cdc109e2 = N'Fast 2KB alternative to Moment.js with the same modern API'
EXEC [${flyway:defaultSchema}].spCreateComponentLibrary @ID = @ID_cdc109e2,
  @Name = @Name_cdc109e2,
  @DisplayName = @DisplayName_cdc109e2,
  @Version = @Version_cdc109e2,
  @GlobalVariable = @GlobalVariable_cdc109e2,
  @Category = @Category_cdc109e2,
  @CDNUrl = @CDNUrl_cdc109e2,
  @CDNCssUrl = @CDNCssUrl_cdc109e2,
  @Description = @Description_cdc109e2;

-- Save MJ: Component Libraries (core SP call only)
DECLARE @ID_ee31071b UNIQUEIDENTIFIER,
@Name_ee31071b NVARCHAR(500),
@DisplayName_ee31071b NVARCHAR(500),
@Version_ee31071b NVARCHAR(100),
@GlobalVariable_ee31071b NVARCHAR(255),
@Category_ee31071b NVARCHAR(100),
@CDNUrl_ee31071b NVARCHAR(1000),
@CDNCssUrl_ee31071b NVARCHAR(1000),
@Description_ee31071b NVARCHAR(MAX)
SET
  @ID_ee31071b = '3ba7719e-7dc1-42dc-8f42-570dc7e8ffe6'
SET
  @Name_ee31071b = N'antd'
SET
  @DisplayName_ee31071b = N'Ant Design'
SET
  @Version_ee31071b = N'5.20.2'
SET
  @GlobalVariable_ee31071b = N'antd'
SET
  @Category_ee31071b = N'ui'
SET
  @CDNUrl_ee31071b = N'https://unpkg.com/antd@5.20.2/dist/antd.min.js'
SET
  @CDNCssUrl_ee31071b = N'https://unpkg.com/antd@5.20.2/dist/reset.css'
SET
  @Description_ee31071b = N'Enterprise-class UI design language and React components'
EXEC [${flyway:defaultSchema}].spCreateComponentLibrary @ID = @ID_ee31071b,
  @Name = @Name_ee31071b,
  @DisplayName = @DisplayName_ee31071b,
  @Version = @Version_ee31071b,
  @GlobalVariable = @GlobalVariable_ee31071b,
  @Category = @Category_ee31071b,
  @CDNUrl = @CDNUrl_ee31071b,
  @CDNCssUrl = @CDNCssUrl_ee31071b,
  @Description = @Description_ee31071b;

-- Save MJ: Component Libraries (core SP call only)
DECLARE @ID_a3b6d154 UNIQUEIDENTIFIER,
@Name_a3b6d154 NVARCHAR(500),
@DisplayName_a3b6d154 NVARCHAR(500),
@Version_a3b6d154 NVARCHAR(100),
@GlobalVariable_a3b6d154 NVARCHAR(255),
@Category_a3b6d154 NVARCHAR(100),
@CDNUrl_a3b6d154 NVARCHAR(1000),
@CDNCssUrl_a3b6d154 NVARCHAR(1000),
@Description_a3b6d154 NVARCHAR(MAX)
SET
  @ID_a3b6d154 = '1fc5e615-5bc3-46b1-b964-0545f9b9f868'
SET
  @Name_a3b6d154 = N'd3'
SET
  @DisplayName_a3b6d154 = N'D3.js'
SET
  @Version_a3b6d154 = N'7.8.5'
SET
  @GlobalVariable_a3b6d154 = N'd3'
SET
  @Category_a3b6d154 = N'charting'
SET
  @CDNUrl_a3b6d154 = N'https://unpkg.com/d3@7.8.5/dist/d3.min.js'
SET
  @Description_a3b6d154 = N'Data visualization library for creating custom charts'
EXEC [${flyway:defaultSchema}].spCreateComponentLibrary @ID = @ID_a3b6d154,
  @Name = @Name_a3b6d154,
  @DisplayName = @DisplayName_a3b6d154,
  @Version = @Version_a3b6d154,
  @GlobalVariable = @GlobalVariable_a3b6d154,
  @Category = @Category_a3b6d154,
  @CDNUrl = @CDNUrl_a3b6d154,
  @CDNCssUrl = @CDNCssUrl_a3b6d154,
  @Description = @Description_a3b6d154;

-- Save MJ: Component Libraries (core SP call only)
DECLARE @ID_e838a1b4 UNIQUEIDENTIFIER,
@Name_e838a1b4 NVARCHAR(500),
@DisplayName_e838a1b4 NVARCHAR(500),
@Version_e838a1b4 NVARCHAR(100),
@GlobalVariable_e838a1b4 NVARCHAR(255),
@Category_e838a1b4 NVARCHAR(100),
@CDNUrl_e838a1b4 NVARCHAR(1000),
@CDNCssUrl_e838a1b4 NVARCHAR(1000),
@Description_e838a1b4 NVARCHAR(MAX)
SET
  @ID_e838a1b4 = '4a6a90de-91e8-41ba-ad9e-a1db39368420'
SET
  @Name_e838a1b4 = N'chart.js'
SET
  @DisplayName_e838a1b4 = N'Chart.js'
SET
  @Version_e838a1b4 = N'4.4.1'
SET
  @GlobalVariable_e838a1b4 = N'Chart'
SET
  @Category_e838a1b4 = N'charting'
SET
  @CDNUrl_e838a1b4 = N'https://unpkg.com/chart.js@4.4.1/dist/chart.umd.js'
SET
  @Description_e838a1b4 = N'Simple yet flexible JavaScript charting library'
EXEC [${flyway:defaultSchema}].spCreateComponentLibrary @ID = @ID_e838a1b4,
  @Name = @Name_e838a1b4,
  @DisplayName = @DisplayName_e838a1b4,
  @Version = @Version_e838a1b4,
  @GlobalVariable = @GlobalVariable_e838a1b4,
  @Category = @Category_e838a1b4,
  @CDNUrl = @CDNUrl_e838a1b4,
  @CDNCssUrl = @CDNCssUrl_e838a1b4,
  @Description = @Description_e838a1b4;

-- Save MJ: Components (core SP call only)
DECLARE @ID_416a5f21 UNIQUEIDENTIFIER,
@Namespace_416a5f21 NVARCHAR(MAX),
@Name_416a5f21 NVARCHAR(500),
@Version_416a5f21 NVARCHAR(50),
@VersionSequence_416a5f21 INT,
@Title_416a5f21 NVARCHAR(1000),
@Description_416a5f21 NVARCHAR(MAX),
@Type_416a5f21 NVARCHAR(255),
@Status_416a5f21 NVARCHAR(50),
@DeveloperName_416a5f21 NVARCHAR(255),
@DeveloperEmail_416a5f21 NVARCHAR(255),
@DeveloperOrganization_416a5f21 NVARCHAR(255),
@SourceRegistryID_416a5f21 UNIQUEIDENTIFIER,
@ReplicatedAt_416a5f21 DATETIMEOFFSET,
@LastSyncedAt_416a5f21 DATETIMEOFFSET,
@Specification_416a5f21 NVARCHAR(MAX),
@FunctionalRequirements_416a5f21 NVARCHAR(MAX),
@TechnicalDesign_416a5f21 NVARCHAR(MAX),
@FunctionalRequirementsVector_416a5f21 NVARCHAR(MAX),
@TechnicalDesignVector_416a5f21 NVARCHAR(MAX),
@HasCustomProps_416a5f21 BIT,
@HasCustomEvents_416a5f21 BIT,
@RequiresData_416a5f21 BIT,
@DependencyCount_416a5f21 INT
SET
  @ID_416a5f21 = '78ef467a-08b4-4cdd-a964-b030304e8ec3'
SET
  @Namespace_416a5f21 = N'Admin/Entities'
SET
  @Name_416a5f21 = N'EntityBrowser'
SET
  @Version_416a5f21 = N'1.0.0'
SET
  @VersionSequence_416a5f21 = 1
SET
  @Title_416a5f21 = N'Entity Browser'
SET
  @Description_416a5f21 = N'A comprehensive multi-panel dashboard component for browsing and exploring entities in a data system. Features a three-panel layout with collapsible filters, main entity list (grid/card view), and sliding details panel.'
SET
  @Type_416a5f21 = N'Dashboard'
SET
  @Status_416a5f21 = N'Published'
SET
  @Specification_416a5f21 = N'{
  "name": "EntityBrowser",
  "title": "Entity Browser",
  "description": "A comprehensive entity browser with multi-panel display showing entities in a grid or card view with a sliding details panel, collapsible filters, sorting, and entity record opening capability",
  "type": "dashboard",
  "functionalRequirements": "## Entity Browser Requirements\n\n### Core Functionality\n- Display entities in a responsive grid or card layout based on user preference\n- Allow users to select view mode (grid vs card)\n- Click on an entity to slide in a details panel from the right\n- Show entity metadata including fields and relationships in the details panel\n- Provide a collapsible filter panel on the left side\n- Support sorting by multiple fields with visual indicators\n- Include a search bar for quick entity filtering\n- Provide an ''Open'' button to trigger the OpenEntityRecord callback\n- Remember user''s last selected entity and view preferences\n\n### UX Considerations\n- Smooth animations for panel transitions\n- Responsive design that works on different screen sizes\n- Loading states while fetching data\n- Empty states with helpful messages\n- Keyboard navigation support (arrow keys, tab, enter)\n- Visual feedback for hover and selection states\n- Maintain scroll position when switching between entities",
  "dataRequirements": {
    "mode": "views",
    "entities": [
      {
        "name": "Entities",
        "description": "Metadata about all entities in the system",
        "displayFields": [
          "ID",
          "Name",
          "DisplayName",
          "NameSuffix",
          "Description",
          "SchemaName",
          "BaseTable",
          "BaseView"
        ],
        "filterFields": [
          "SchemaName",
          "BaseTable"
        ],
        "sortFields": [
          "Name",
          "DisplayName"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": true,
            "description": "Unique identifier for the entity"
          },
          {
            "name": "Name",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "System name of the entity"
          },
          {
            "name": "DisplayName",
            "sequence": 3,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "User-friendly display name for the entity"
          },
          {
            "name": "NameSuffix",
            "sequence": 4,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Optional suffix appended to entity names for display purposes"
          },
          {
            "name": "Description",
            "sequence": 5,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Description of the entity"
          },
          {
            "name": "SchemaName",
            "sequence": 6,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Database schema name"
          },
          {
            "name": "BaseTable",
            "sequence": 7,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Base table in the database"
          },
          {
            "name": "BaseView",
            "sequence": 8,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Base view used for the entity"
          }
        ],
        "permissionLevelNeeded": [
          "read"
        ],
        "usageContext": "Main entity list display and filtering"
      },
      {
        "name": "Entity Fields",
        "description": "Fields belonging to each entity",
        "displayFields": [
          "Name",
          "DisplayName",
          "Type",
          "Length",
          "AllowsNull",
          "IsPrimaryKey",
          "IsUnique"
        ],
        "filterFields": [
          "EntityID"
        ],
        "sortFields": [
          "Sequence",
          "Name"
        ],
        "fieldMetadata": [
          {
            "name": "EntityID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Reference to parent entity"
          },
          {
            "name": "Name",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Field name"
          },
          {
            "name": "DisplayName",
            "sequence": 3,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "User-friendly field name"
          },
          {
            "name": "Type",
            "sequence": 4,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Data type of the field"
          },
          {
            "name": "Length",
            "sequence": 5,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Maximum length for string fields"
          },
          {
            "name": "AllowsNull",
            "sequence": 6,
            "defaultInView": true,
            "type": "bit",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Whether field allows null values"
          },
          {
            "name": "IsPrimaryKey",
            "sequence": 7,
            "defaultInView": true,
            "type": "bit",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Whether field is part of primary key"
          },
          {
            "name": "IsUnique",
            "sequence": 8,
            "defaultInView": true,
            "type": "bit",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Whether field must be unique"
          },
          {
            "name": "Sequence",
            "sequence": 9,
            "defaultInView": false,
            "type": "int",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Display order of the field"
          }
        ],
        "permissionLevelNeeded": [
          "read"
        ],
        "usageContext": "Details panel to show entity fields"
      },
      {
        "name": "Entity Relationships",
        "description": "Relationships between entities",
        "displayFields": [
          "RelatedEntity",
          "Type",
          "DisplayName",
          "RelatedEntityJoinField"
        ],
        "filterFields": [
          "EntityID"
        ],
        "sortFields": [
          "Sequence",
          "RelatedEntity"
        ],
        "fieldMetadata": [
          {
            "name": "EntityID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Reference to parent entity"
          },
          {
            "name": "RelatedEntity",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "The related entity in the relationship"
          },
          {
            "name": "Type",
            "sequence": 3,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Type of relationship (One to Many, Many to One, etc.)"
          },
          {
            "name": "DisplayName",
            "sequence": 4,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "User-friendly name for the relationship"
          },
          {
            "name": "RelatedEntityJoinField",
            "sequence": 5,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "The field in the related entity that joins to this entity"
          },
          {
            "name": "Sequence",
            "sequence": 6,
            "defaultInView": false,
            "type": "int",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Display order"
          }
        ],
        "permissionLevelNeeded": [
          "read"
        ],
        "usageContext": "Details panel to show entity relationships"
      }
    ],
    "queries": [],
    "description": "This component requires access to entity metadata including entities, their fields, and relationships to provide a comprehensive entity browsing experience"
  },
  "technicalDesign": "## Technical Architecture\n\n### Component Structure\n- **Root Component (EntityBrowser)**: Manages overall layout and state coordination\n- **EntityList (Child)**: Displays entities in grid/card view with sorting\n- **EntityDetails (Child)**: Sliding panel showing entity fields and relationships\n- **EntityFilter (Child)**: Collapsible filter panel with dynamic filters\n\n### State Management\n- Selected entity ID (persisted in savedUserSettings)\n- View mode (grid/card) (persisted)\n- Active filters (persisted)\n- Sort configuration (persisted)\n- Panel visibility states (details open, filters collapsed)\n- Search query\n- Loading states for async operations\n\n### Layout\n```\n+------------------+------------------------+------------------+\n|                  |                        |                  |\n|   Filter Panel   |    Entity Grid/Cards   |  Details Panel   |\n|   (Collapsible)  |    (Main Content)      |    (Sliding)     |\n|                  |                        |                  |\n|  [Schema Filter] |  +-----+  +-----+      |  Entity: Orders  |\n|  [Table Filter]  |  | Card |  | Card |     |                  |\n|  [Search Box]    |  +-----+  +-----+      |  Fields:         |\n|                  |                        |  - ID            |\n|  Sort By:        |  +-----+  +-----+      |  - CustomerID    |\n|  [Name \u2193]        |  | Card |  | Card |     |  - OrderDate     |\n|                  |  +-----+  +-----+      |                  |\n|                  |                        |  Relationships:  |\n|                  |                        |  \u2192 Customers     |\n|                  |                        |  \u2192 OrderItems    |\n|                  |                        |                  |\n|                  |                        |  [Open Record]   |\n+------------------+------------------------+------------------+\n```\n\n### Data Flow\n1. Root component loads entities on mount\n2. Passes entity data to EntityList\n3. EntityList handles selection and passes selectedId up\n4. Root loads fields/relationships for selected entity\n5. Passes detailed data to EntityDetails\n6. Filter changes trigger data reload\n7. All user preferences saved via onSaveUserSettings\n\n### Interaction Patterns\n- Click entity card \u2192 Select and open details\n- Click filter \u2192 Apply and reload data\n- Click sort \u2192 Update sort and reload\n- Click ''Open'' \u2192 Trigger OpenEntityRecord callback\n- Press Escape \u2192 Close details panel\n- Click outside \u2192 Close details panel",
  "properties": [],
  "events": [],
  "exampleUsage": "<EntityBrowser\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>",
  "dependencies": [
    {
      "name": "EntityList",
      "title": "Entity List",
      "description": "Displays entities in a grid or card layout with sorting capabilities",
      "type": "table",
      "functionalRequirements": "## Entity List Requirements\n\n- Display entities in grid or card view based on viewMode prop\n- Support sorting by multiple fields\n- Handle entity selection and notify parent\n- Show loading state while data loads\n- Display record count badges\n- Highlight selected entity\n- Support keyboard navigation",
      "dataRequirements": null,
      "technicalDesign": "## Technical Design\n\n### Props\n- entities: Array of entity objects\n- viewMode: ''grid'' | ''card''\n- selectedEntityId: Currently selected entity\n- onSelectEntity: Callback when entity selected\n- sortBy: Current sort field\n- sortDirection: ''asc'' | ''desc''\n- onSortChange: Callback for sort changes\n\n### Rendering\n- Grid mode: Compact table with columns\n- Card mode: Cards with entity info\n- Sort indicators in headers\n- Selection highlighting",
      "properties": [
        {
          "name": "entities",
          "description": "Array of entity objects to display",
          "type": "array",
          "required": true
        },
        {
          "name": "viewMode",
          "description": "Display mode - grid or card view",
          "type": "string",
          "required": true,
          "possibleValues": [
            "grid",
            "card"
          ]
        },
        {
          "name": "selectedEntityId",
          "description": "ID of the currently selected entity",
          "type": "string",
          "required": false
        },
        {
          "name": "onSelectEntity",
          "description": "Callback when an entity is selected",
          "type": "function",
          "required": true
        },
        {
          "name": "sortBy",
          "description": "Field to sort by",
          "type": "string",
          "required": false,
          "defaultValue": "Name"
        },
        {
          "name": "sortDirection",
          "description": "Sort direction",
          "type": "string",
          "required": false,
          "defaultValue": "asc",
          "possibleValues": [
            "asc",
            "desc"
          ]
        },
        {
          "name": "onSortChange",
          "description": "Callback when sort changes",
          "type": "function",
          "required": true
        }
      ],
      "events": [
        {
          "name": "onSelectEntity",
          "description": "Fired when an entity is selected",
          "parameters": [
            {
              "name": "entityId",
              "description": "ID of the selected entity",
              "type": "string"
            }
          ]
        },
        {
          "name": "onSortChange",
          "description": "Fired when sort configuration changes",
          "parameters": [
            {
              "name": "sortBy",
              "description": "Field to sort by",
              "type": "string"
            },
            {
              "name": "sortDirection",
              "description": "Sort direction",
              "type": "string"
            }
          ]
        }
      ],
      "exampleUsage": "<EntityList\n  entities={entities}\n  viewMode={viewMode}\n  selectedEntityId={selectedEntityId}\n  onSelectEntity={handleSelectEntity}\n  sortBy={sortBy}\n  sortDirection={sortDirection}\n  onSortChange={handleSortChange}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>",
      "code": "function EntityList({ \n  entities, \n  viewMode, \n  selectedEntityId, \n  onSelectEntity, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Handle sort column click\n  const handleSortClick = useCallback((field) => {\n    if (sortBy === field) {\n      // Toggle direction if same field\n      const newDirection = sortDirection === ''asc'' ? ''desc'' : ''asc'';\n      onSortChange?.(field, newDirection);\n    } else {\n      // New field, default to ascending\n      onSortChange?.(field, ''asc'');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Handle entity selection\n  const handleEntityClick = useCallback((entityId) => {\n    onSelectEntity?.(entityId);\n  }, [onSelectEntity]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{ marginLeft: styles.spacing.xs }}>\n        {sortDirection === ''asc'' ? ''\u2191'' : ''\u2193''}\n      </span>\n    );\n  };\n  \n  // Grid View\n  if (viewMode === ''grid'') {\n    return (\n      <div style={{\n        width: ''100%'',\n        overflowX: ''auto''\n      }}>\n        <table style={{\n          width: ''100%'',\n          borderCollapse: ''collapse'',\n          backgroundColor: styles.colors.surface\n        }}>\n          <thead>\n            <tr style={{\n              borderBottom: `2px solid $' + '{styles.colors.border}`\n            }}>\n              <th\n                onClick={() => handleSortClick(''Name'')}\n                style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''left'',\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text,\n                  cursor: ''pointer'',\n                  userSelect: ''none'',\n                  whiteSpace: ''nowrap''\n                }}\n              >\n                Name {renderSortIndicator(''Name'')}\n              </th>\n              <th\n                onClick={() => handleSortClick(''DisplayName'')}\n                style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''left'',\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text,\n                  cursor: ''pointer'',\n                  userSelect: ''none'',\n                  whiteSpace: ''nowrap''\n                }}\n              >\n                Display Name {renderSortIndicator(''DisplayName'')}\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Description\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Schema\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Table\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Base View\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {entities.map((entity) => (\n              <tr\n                key={entity.ID}\n                onClick={() => handleEntityClick(entity.ID)}\n                style={{\n                  backgroundColor: selectedEntityId === entity.ID \n                    ? styles.colors.primary + ''20'' \n                    : ''transparent'',\n                  borderBottom: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`,\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => {\n                  if (selectedEntityId !== entity.ID) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (selectedEntityId !== entity.ID) {\n                    e.currentTarget.style.backgroundColor = ''transparent'';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text,\n                  fontWeight: selectedEntityId === entity.ID \n                    ? (styles.typography.fontWeight?.semibold || ''600'')\n                    : (styles.typography.fontWeight?.regular || ''400'')\n                }}>\n                  {entity.Name}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {entity.DisplayName || entity.Name}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  maxWidth: ''300px'',\n                  overflow: ''hidden'',\n                  textOverflow: ''ellipsis'',\n                  whiteSpace: ''nowrap''\n                }}>\n                  {entity.Description || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.textSecondary\n                }}>\n                  {entity.SchemaName || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.textSecondary\n                }}>\n                  {entity.BaseTable || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.textSecondary\n                }}>\n                  {entity.BaseView || ''-''}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  \n  // Card View\n  return (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fill, minmax(300px, 1fr))'',\n      gap: styles.spacing.lg\n    }}>\n      {entities.map((entity) => (\n        <div\n          key={entity.ID}\n          onClick={() => handleEntityClick(entity.ID)}\n          style={{\n            padding: styles.spacing.lg,\n            backgroundColor: selectedEntityId === entity.ID \n              ? styles.colors.primary + ''20''\n              : styles.colors.surface,\n            border: selectedEntityId === entity.ID\n              ? `2px solid $' + '{styles.colors.primary}`\n              : `1px solid $' + '{styles.colors.border}`,\n            borderRadius: getBorderRadius(''md''),\n            cursor: ''pointer'',\n            transition: ''all 0.2s'',\n            position: ''relative''\n          }}\n          onMouseEnter={(e) => {\n            if (selectedEntityId !== entity.ID) {\n              e.currentTarget.style.transform = ''translateY(-2px)'';\n              e.currentTarget.style.boxShadow = `0 4px 12px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}`;\n            }\n          }}\n          onMouseLeave={(e) => {\n            if (selectedEntityId !== entity.ID) {\n              e.currentTarget.style.transform = ''translateY(0)'';\n              e.currentTarget.style.boxShadow = ''none'';\n            }\n          }}\n        >\n          {/* Card Header */}\n          <div style={{\n            marginBottom: styles.spacing.md,\n            paddingBottom: styles.spacing.md,\n            borderBottom: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <h3 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n              color: styles.colors.text,\n              marginBottom: styles.spacing.xs\n            }}>\n              {entity.DisplayName || entity.Name}\n            </h3>\n            {entity.DisplayName && entity.DisplayName !== entity.Name && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary\n              }}>\n                {entity.Name}\n              </div>\n            )}\n          </div>\n          \n          {/* Card Body */}\n          {entity.Description && (\n            <p style={{\n              margin: 0,\n              marginBottom: styles.spacing.md,\n              fontSize: styles.typography.fontSize.md,\n              color: styles.colors.textSecondary,\n              lineHeight: 1.5,\n              display: ''-webkit-box'',\n              WebkitLineClamp: 2,\n              WebkitBoxOrient: ''vertical'',\n              overflow: ''hidden''\n            }}>\n              {entity.Description}\n            </p>\n          )}\n          \n          {/* Card Footer */}\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center'',\n            fontSize: styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary\n          }}>\n            <div>\n              {entity.SchemaName && (\n                <span style={{ marginRight: styles.spacing.md }}>\n                  Schema: <strong>{entity.SchemaName}</strong>\n                </span>\n              )}\n              {entity.BaseTable && (\n                <span>\n                  Table: <strong>{entity.BaseTable}</strong>\n                </span>\n              )}\n            </div>\n            {entity.BaseView && (\n              <div style={{\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary\n              }}>\n                View: {entity.BaseView}\n              </div>\n            )}\n          </div>\n          \n          {/* Selection Indicator */}\n          {selectedEntityId === entity.ID && (\n            <div style={{\n              position: ''absolute'',\n              top: styles.spacing.sm,\n              right: styles.spacing.sm,\n              width: ''8px'',\n              height: ''8px'',\n              backgroundColor: styles.colors.primary,\n              borderRadius: ''50%''\n            }} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "EntityDetails",
      "title": "Entity Details Panel",
      "description": "Sliding panel that displays detailed information about a selected entity including fields and relationships",
      "type": "form",
      "functionalRequirements": "## Entity Details Requirements\n\n- Slide in from the right when an entity is selected\n- Display entity metadata at the top\n- Show fields in a formatted table\n- Display relationships with icons\n- Include ''Open Record'' button\n- Support closing via X button or Escape key\n- Smooth slide animation\n- Scrollable content area",
      "dataRequirements": null,
      "technicalDesign": "## Technical Design\n\n### Props\n- entity: Selected entity object\n- fields: Array of entity fields\n- relationships: Array of entity relationships\n- isOpen: Whether panel is visible\n- onClose: Callback to close panel\n- onOpenRecord: Callback to open entity record\n\n### Layout\n- Fixed position overlay\n- Slide animation using transform\n- Header with entity name and close button\n- Sections for metadata, fields, relationships\n- Sticky ''Open Record'' button at bottom",
      "properties": [
        {
          "name": "entity",
          "description": "The selected entity object",
          "type": "object",
          "required": false
        },
        {
          "name": "fields",
          "description": "Array of fields for the entity",
          "type": "array",
          "required": false,
          "defaultValue": []
        },
        {
          "name": "relationships",
          "description": "Array of relationships for the entity",
          "type": "array",
          "required": false,
          "defaultValue": []
        },
        {
          "name": "isOpen",
          "description": "Whether the panel is open",
          "type": "boolean",
          "required": true
        },
        {
          "name": "onClose",
          "description": "Callback to close the panel",
          "type": "function",
          "required": true
        },
        {
          "name": "onOpenRecord",
          "description": "Callback to open the entity record",
          "type": "function",
          "required": true
        }
      ],
      "events": [
        {
          "name": "onClose",
          "description": "Fired when the panel should close",
          "parameters": []
        },
        {
          "name": "onOpenRecord",
          "description": "Fired when the open record button is clicked",
          "parameters": [
            {
              "name": "entityName",
              "description": "Name of the entity to open",
              "type": "string"
            }
          ]
        }
      ],
      "exampleUsage": "<EntityDetails\n  entity={selectedEntity}\n  fields={entityFields}\n  relationships={entityRelationships}\n  isOpen={detailsPanelOpen}\n  onClose={handleCloseDetails}\n  onOpenRecord={handleOpenRecord}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>",
      "code": "function EntityDetails({ \n  entity, \n  fields, \n  relationships, \n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''EntityDetails handleOpenRecord called'', { entity, onOpenRecord });\n    if (entity?.Name) {\n      console.log(''Calling onOpenRecord with entity name:'', entity.Name);\n      if (onOpenRecord) {\n        onOpenRecord(entity.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No entity or entity name available'');\n    }\n  }, [entity, onOpenRecord]);\n  \n  // Render field type badge\n  const renderFieldType = (type) => {\n    const typeColors = {\n      ''nvarchar'': styles.colors.info || styles.colors.primary,\n      ''varchar'': styles.colors.info || styles.colors.primary,\n      ''int'': styles.colors.success || styles.colors.primary,\n      ''bigint'': styles.colors.success || styles.colors.primary,\n      ''decimal'': styles.colors.success || styles.colors.primary,\n      ''float'': styles.colors.success || styles.colors.primary,\n      ''bit'': styles.colors.warning || styles.colors.secondary,\n      ''datetime'': styles.colors.secondary,\n      ''uniqueidentifier'': styles.colors.primary,\n      ''text'': styles.colors.info || styles.colors.primary,\n      ''ntext'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = typeColors[type?.toLowerCase()] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {type}\n      </span>\n    );\n  };\n  \n  // Render relationship type icon\n  const renderRelationshipIcon = (type) => {\n    const icons = {\n      ''One to Many'': ''1:N'',\n      ''Many to One'': ''N:1'',\n      ''Many to Many'': ''N:N'',\n      ''One to One'': ''1:1''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: styles.colors.primary + ''15'',\n        color: styles.colors.primary,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.bold || ''700'',\n        fontFamily: ''monospace''\n      }}>\n        {icons[type] || type}\n      </span>\n    );\n  };\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        width: ''480px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 1000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {entity?.DisplayName || entity?.Name || ''No Entity Selected''}\n              </h2>\n              {entity?.DisplayName && entity?.Name && entity.DisplayName !== entity.Name && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {entity.Name}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              \u2715\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {entity ? (\n            <>\n              {/* Entity Metadata */}\n              {entity.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {entity.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Quick Info */}\n              <div style={{\n                display: ''grid'',\n                gridTemplateColumns: ''repeat(2, 1fr)'',\n                gap: styles.spacing.md,\n                marginBottom: styles.spacing.xl\n              }}>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Schema\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.SchemaName || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Base Table\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.BaseTable || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Base View\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.BaseView || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Field Count\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {fields?.length || 0}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Fields Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Fields ({fields?.length || 0})\n                </h3>\n                <div style={{\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  overflow: ''hidden''\n                }}>\n                  {fields && fields.length > 0 ? (\n                    <table style={{\n                      width: ''100%'',\n                      borderCollapse: ''collapse''\n                    }}>\n                      <thead>\n                        <tr style={{\n                          borderBottom: `1px solid $' + '{styles.colors.border}`\n                        }}>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''left'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Field\n                          </th>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''left'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Type\n                          </th>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''center'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Attributes\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {fields.map((field, index) => (\n                          <tr\n                            key={index}\n                            style={{\n                              borderBottom: index < fields.length - 1 \n                                ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                                : ''none''\n                            }}\n                          >\n                            <td style={{\n                              padding: styles.spacing.sm,\n                              fontSize: styles.typography.fontSize.sm,\n                              color: styles.colors.text\n                            }}>\n                              <div>\n                                <div style={{\n                                  fontWeight: field.IsPrimaryKey \n                                    ? (styles.typography.fontWeight?.semibold || ''600'')\n                                    : (styles.typography.fontWeight?.regular || ''400'')\n                                }}>\n                                  {field.DisplayName || field.Name}\n                                </div>\n                                {field.DisplayName && (\n                                  <div style={{\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    color: styles.colors.textSecondary,\n                                    fontFamily: ''monospace''\n                                  }}>\n                                    {field.Name}\n                                  </div>\n                                )}\n                              </div>\n                            </td>\n                            <td style={{\n                              padding: styles.spacing.sm\n                            }}>\n                              {renderFieldType(field.Type)}\n                              {field.Length && (\n                                <span style={{\n                                  marginLeft: styles.spacing.xs,\n                                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                  color: styles.colors.textSecondary\n                                }}>\n                                  ({field.Length})\n                                </span>\n                              )}\n                            </td>\n                            <td style={{\n                              padding: styles.spacing.sm,\n                              textAlign: ''center''\n                            }}>\n                              <div style={{\n                                display: ''flex'',\n                                gap: styles.spacing.xs,\n                                justifyContent: ''center'',\n                                flexWrap: ''wrap''\n                              }}>\n                                {field.IsPrimaryKey && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.warning || styles.colors.secondary) + ''15'',\n                                    color: styles.colors.warning || styles.colors.secondary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    PK\n                                  </span>\n                                )}\n                                {field.IsUnique && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.info || styles.colors.primary) + ''15'',\n                                    color: styles.colors.info || styles.colors.primary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    UQ\n                                  </span>\n                                )}\n                                {!field.AllowsNull && !field.IsPrimaryKey && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.error || styles.colors.secondary) + ''15'',\n                                    color: styles.colors.error || styles.colors.secondary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    NN\n                                  </span>\n                                )}\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  ) : (\n                    <div style={{\n                      padding: styles.spacing.lg,\n                      textAlign: ''center'',\n                      color: styles.colors.textSecondary,\n                      fontSize: styles.typography.fontSize.sm\n                    }}>\n                      No fields available\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              {/* Relationships Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Relationships ({relationships?.length || 0})\n                </h3>\n                <div style={{\n                  display: ''flex'',\n                  flexDirection: ''column'',\n                  gap: styles.spacing.sm\n                }}>\n                  {relationships && relationships.length > 0 ? (\n                    relationships.map((rel, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          display: ''flex'',\n                          alignItems: ''center'',\n                          gap: styles.spacing.md\n                        }}\n                      >\n                        {renderRelationshipIcon(rel.Type)}\n                        <div style={{ flex: 1 }}>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {rel.DisplayName || rel.RelatedEntity}\n                          </div>\n                          {rel.RelatedEntityJoinField && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              via {rel.RelatedEntityJoinField}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div style={{\n                      padding: styles.spacing.lg,\n                      backgroundColor: styles.colors.surface,\n                      borderRadius: getBorderRadius(''sm''),\n                      textAlign: ''center'',\n                      color: styles.colors.textSecondary,\n                      fontSize: styles.typography.fontSize.sm\n                    }}>\n                      No relationships defined\n                    </div>\n                  )}\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Entity Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select an entity from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {entity && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Entity Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "EntityFilter",
      "title": "Entity Filter Panel",
      "description": "Collapsible filter panel for filtering entities by various criteria",
      "type": "form",
      "functionalRequirements": "## Entity Filter Requirements\n\n- Collapsible panel on the left side\n- Filter by schema name (dropdown)\n- Filter by base table (dropdown)\n- Search box for text search\n- Clear all filters button\n- Show active filter count\n- Smooth collapse/expand animation\n- Remember collapsed state",
      "dataRequirements": null,
      "technicalDesign": "## Technical Design\n\n### Props\n- filters: Current filter values\n- onFilterChange: Callback when filters change\n- schemas: Available schema options\n- tables: Available table options\n- isCollapsed: Whether panel is collapsed\n- onToggleCollapse: Callback to toggle collapse\n\n### Components\n- Collapse toggle button\n- Schema dropdown\n- Table dropdown\n- Search input\n- Clear filters button\n- Active filter badges",
      "properties": [
        {
          "name": "filters",
          "description": "Current filter values",
          "type": "object",
          "required": true
        },
        {
          "name": "onFilterChange",
          "description": "Callback when filters change",
          "type": "function",
          "required": true
        },
        {
          "name": "schemas",
          "description": "Available schema options",
          "type": "array",
          "required": true
        },
        {
          "name": "tables",
          "description": "Available table options",
          "type": "array",
          "required": true
        },
        {
          "name": "isCollapsed",
          "description": "Whether the panel is collapsed",
          "type": "boolean",
          "required": true
        },
        {
          "name": "onToggleCollapse",
          "description": "Callback to toggle collapse state",
          "type": "function",
          "required": true
        }
      ],
      "events": [
        {
          "name": "onFilterChange",
          "description": "Fired when filter values change",
          "parameters": [
            {
              "name": "filters",
              "description": "Updated filter object",
              "type": "object"
            }
          ]
        },
        {
          "name": "onToggleCollapse",
          "description": "Fired when collapse state should toggle",
          "parameters": []
        }
      ],
      "exampleUsage": "<EntityFilter\n  filters={filters}\n  onFilterChange={handleFilterChange}\n  schemas={uniqueSchemas}\n  tables={uniqueTables}\n  isCollapsed={filterPanelCollapsed}\n  onToggleCollapse={handleToggleFilter}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>",
      "code": "function EntityFilter({ \n  filters, \n  onFilterChange, \n  schemas, \n  tables, \n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle schema filter change\n  const handleSchemaChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      schema: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle table filter change\n  const handleTableChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      table: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''\u2192'' : ''\u2190''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            \ud83d\udd0d\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Schema Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Schema\n            </label>\n            <select\n              value={filters?.schema || ''''}\n              onChange={handleSchemaChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Schemas</option>\n              {schemas.map((schema) => (\n                <option key={schema} value={schema}>\n                  {schema}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Table Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Base Table\n            </label>\n            <select\n              value={filters?.table || ''''}\n              onChange={handleTableChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Tables</option>\n              {tables.map((table) => (\n                <option key={table} value={table}>\n                  {table}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.schema && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Schema:\n                      </span>\n                      <strong>{filters.schema}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleSchemaChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.table && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Table:\n                      </span>\n                      <strong>{filters.table}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleTableChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    }
  ],
  "libraries": [],
  "code": "function EntityBrowser({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { EntityList, EntityDetails, EntityFilter } = components;\n  \n  // Initialize state from saved settings where appropriate\n  const [selectedEntityId, setSelectedEntityId] = useState(savedUserSettings?.selectedEntityId);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''grid'');\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [sortBy, setSortBy] = useState(savedUserSettings?.sortBy || ''Name'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''asc'');\n  const [filterPanelCollapsed, setFilterPanelCollapsed] = useState(savedUserSettings?.filterPanelCollapsed || false);\n  \n  // Runtime UI state (not persisted)\n  const [entities, setEntities] = useState([]);\n  const [entityFields, setEntityFields] = useState([]);\n  const [entityRelationships, setEntityRelationships] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [detailsPanelOpen, setDetailsPanelOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('''');\n  const [uniqueSchemas, setUniqueSchemas] = useState([]);\n  const [uniqueTables, setUniqueTables] = useState([]);\n  \n  // Load entities on mount and when filters/sort change\n  useEffect(() => {\n    const loadEntities = async () => {\n      setLoading(true);\n      try {\n        // Build filter string\n        let filterParts = [];\n        if (filters.schema) {\n          filterParts.push(`SchemaName = ''$' + '{filters.schema}''`);\n        }\n        if (filters.table) {\n          filterParts.push(`BaseTable = ''$' + '{filters.table}''`);\n        }\n        if (searchQuery) {\n          filterParts.push(`(Name LIKE ''%$' + '{searchQuery}%'' OR DisplayName LIKE ''%$' + '{searchQuery}%'' OR Description LIKE ''%$' + '{searchQuery}%'')`);\n        }\n        \n        const result = await utilities.rv.RunView({\n          EntityName: ''Entities'',\n          Fields: [''ID'', ''Name'', ''DisplayName'', ''NameSuffix'', ''Description'', ''SchemaName'', ''BaseTable'', ''BaseView''],\n          OrderBy: `$' + '{sortBy} $' + '{sortDirection.toUpperCase()}`,\n          ExtraFilter: filterParts.length > 0 ? filterParts.join('' AND '') : undefined\n        });\n        \n        if (result?.Success && result?.Results) {\n          setEntities(result.Results);\n          \n          // Extract unique schemas and tables for filter dropdowns\n          const schemas = [...new Set(result.Results.map(e => e.SchemaName).filter(Boolean))];\n          const tables = [...new Set(result.Results.map(e => e.BaseTable).filter(Boolean))];\n          setUniqueSchemas(schemas);\n          setUniqueTables(tables);\n        } else {\n          console.error(''Failed to load entities:'', result?.ErrorMessage);\n          setEntities([]);\n        }\n      } catch (error) {\n        console.error(''Error loading entities:'', error);\n        setEntities([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadEntities();\n  }, [filters, sortBy, sortDirection, searchQuery, utilities.rv]);\n  \n  // Load entity details when selection changes\n  useEffect(() => {\n    const loadEntityDetails = async () => {\n      if (!selectedEntityId) {\n        setEntityFields([]);\n        setEntityRelationships([]);\n        return;\n      }\n      \n      try {\n        // Load fields\n        const fieldsResult = await utilities.rv.RunView({\n          EntityName: ''Entity Fields'',\n          Fields: [''Name'', ''DisplayName'', ''Type'', ''Length'', ''AllowsNull'', ''IsPrimaryKey'', ''IsUnique'', ''Sequence''],\n          OrderBy: ''Sequence ASC, Name ASC'',\n          ExtraFilter: `EntityID = ''$' + '{selectedEntityId}''`\n        });\n        \n        if (fieldsResult?.Success && fieldsResult?.Results) {\n          setEntityFields(fieldsResult.Results);\n        } else {\n          setEntityFields([]);\n        }\n        \n        // Load relationships\n        const relationshipsResult = await utilities.rv.RunView({\n          EntityName: ''Entity Relationships'',\n          Fields: [''RelatedEntity'', ''Type'', ''DisplayName'', ''RelatedEntityJoinField'', ''Sequence''],\n          OrderBy: ''Sequence ASC, RelatedEntity ASC'',\n          ExtraFilter: `EntityID = ''$' + '{selectedEntityId}''`\n        });\n        \n        if (relationshipsResult?.Success && relationshipsResult?.Results) {\n          setEntityRelationships(relationshipsResult.Results);\n        } else {\n          setEntityRelationships([]);\n        }\n      } catch (error) {\n        console.error(''Error loading entity details:'', error);\n        setEntityFields([]);\n        setEntityRelationships([]);\n      }\n    };\n    \n    loadEntityDetails();\n  }, [selectedEntityId, utilities.rv]);\n  \n  // Handle entity selection\n  const handleSelectEntity = useCallback((entityId) => {\n    setSelectedEntityId(entityId);\n    setDetailsPanelOpen(true);\n    \n    // Save user preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedEntityId: entityId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode) => {\n    setViewMode(mode);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      viewMode: mode\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    \n    // Save filter preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle sort changes\n  const handleSortChange = useCallback((newSortBy, newSortDirection) => {\n    setSortBy(newSortBy);\n    setSortDirection(newSortDirection);\n    \n    // Save sort preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortBy: newSortBy,\n      sortDirection: newSortDirection\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter panel toggle\n  const handleToggleFilter = useCallback(() => {\n    const newCollapsed = !filterPanelCollapsed;\n    setFilterPanelCollapsed(newCollapsed);\n    \n    // Save collapsed state\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterPanelCollapsed: newCollapsed\n    });\n  }, [filterPanelCollapsed, savedUserSettings, onSaveUserSettings]);\n  \n  // Handle opening entity record\n  const handleOpenRecord = useCallback((entityName) => {\n    console.log(''Root handleOpenRecord called with entityName:'', entityName);\n    console.log(''Callbacks object:'', callbacks);\n    if (callbacks?.OpenEntityRecord && entityName) {\n      console.log(''Calling OpenEntityRecord callback with:'', ''Entities'', entityName);\n      // Open the Entities entity record for the selected entity\n      callbacks.OpenEntityRecord(''Entities'', [{ FieldName: ''Name'', Value: entityName }]);\n    } else {\n      console.error(''OpenEntityRecord callback not available or entityName missing'');\n    }\n  }, [callbacks]);\n  \n  // Handle closing details panel\n  const handleCloseDetails = useCallback(() => {\n    setDetailsPanelOpen(false);\n  }, []);\n  \n  // Handle search\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n  }, []);\n  \n  // Get selected entity object\n  const selectedEntity = entities.find(e => e.ID === selectedEntityId);\n  \n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Loading state\n  if (loading && entities.length === 0) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100vh'',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading entities...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      display: ''flex'',\n      height: ''100vh'',\n      backgroundColor: styles.colors.background,\n      overflow: ''hidden''\n    }}>\n      {/* Filter Panel */}\n      {EntityFilter && (\n        <EntityFilter\n          filters={filters}\n          onFilterChange={handleFilterChange}\n          schemas={uniqueSchemas}\n          tables={uniqueTables}\n          isCollapsed={filterPanelCollapsed}\n          onToggleCollapse={handleToggleFilter}\n          savedUserSettings={savedUserSettings?.filterPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            filterPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center'',\n            marginBottom: styles.spacing.md\n          }}>\n            <h1 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              Entity Browser\n            </h1>\n            \n            {/* View Mode Toggle */}\n            <div style={{\n              display: ''flex'',\n              gap: styles.spacing.sm,\n              alignItems: ''center''\n            }}>\n              <span style={{\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.textSecondary\n              }}>\n                View:\n              </span>\n              <button\n                onClick={() => handleViewModeChange(''grid'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''grid'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''grid'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Grid\n              </button>\n              <button\n                onClick={() => handleViewModeChange(''card'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''card'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''card'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Cards\n              </button>\n            </div>\n          </div>\n          \n          {/* Search Bar */}\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.md\n          }}>\n            <input\n              type=\"text\"\n              placeholder=\"Search entities...\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              style={{\n                flex: 1,\n                padding: styles.spacing.md,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background\n              }}\n            />\n            {searchQuery && (\n              <button\n                onClick={() => handleSearch('''')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: styles.colors.surfaceHover || styles.colors.surface,\n                  color: styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Entity List */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {EntityList && (\n            <EntityList\n              entities={entities}\n              viewMode={viewMode}\n              selectedEntityId={selectedEntityId}\n              onSelectEntity={handleSelectEntity}\n              sortBy={sortBy}\n              sortDirection={sortDirection}\n              onSortChange={handleSortChange}\n              savedUserSettings={savedUserSettings?.entityList}\n              onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                ...savedUserSettings,\n                entityList: settings\n              })}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n            />\n          )}\n          \n          {/* Empty State */}\n          {entities.length === 0 && !loading && (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              padding: styles.spacing.xxl || styles.spacing.xl,\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.xl,\n                marginBottom: styles.spacing.md\n              }}>\n                No entities found\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                {searchQuery || Object.keys(filters).length > 0\n                  ? ''Try adjusting your filters or search query''\n                  : ''No entities are available''}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Details Panel */}\n      {EntityDetails && (\n        <EntityDetails\n          entity={selectedEntity}\n          fields={entityFields}\n          relationships={entityRelationships}\n          isOpen={detailsPanelOpen}\n          onClose={handleCloseDetails}\n          onOpenRecord={() => handleOpenRecord(selectedEntity?.Name)}\n          savedUserSettings={savedUserSettings?.detailsPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            detailsPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n    </div>\n  );\n}"
}'
SET
  @FunctionalRequirements_416a5f21 = N'## Entity Browser Requirements

### Core Functionality
- Display entities in a responsive grid or card layout based on user preference
- Allow users to select view mode (grid vs card)
- Click on an entity to slide in a details panel from the right
- Show entity metadata including fields and relationships in the details panel
- Provide a collapsible filter panel on the left side
- Support sorting by multiple fields with visual indicators
- Include a search bar for quick entity filtering
- Provide an ''Open'' button to trigger the OpenEntityRecord callback
- Remember user''s last selected entity and view preferences

### UX Considerations
- Smooth animations for panel transitions
- Responsive design that works on different screen sizes
- Loading states while fetching data
- Empty states with helpful messages
- Keyboard navigation support (arrow keys, tab, enter)
- Visual feedback for hover and selection states
- Maintain scroll position when switching between entities'
SET
  @TechnicalDesign_416a5f21 = N'## Technical Architecture

### Component Structure
- **Root Component (EntityBrowser)**: Manages overall layout and state coordination
- **EntityList (Child)**: Displays entities in grid/card view with sorting
- **EntityDetails (Child)**: Sliding panel showing entity fields and relationships
- **EntityFilter (Child)**: Collapsible filter panel with dynamic filters

### State Management
- Selected entity ID (persisted in savedUserSettings)
- View mode (grid/card) (persisted)
- Active filters (persisted)
- Sort configuration (persisted)
- Panel visibility states (details open, filters collapsed)
- Search query
- Loading states for async operations

### Layout
```
+------------------+------------------------+------------------+
|                  |                        |                  |
|   Filter Panel   |    Entity Grid/Cards   |  Details Panel   |
|   (Collapsible)  |    (Main Content)      |    (Sliding)     |
|                  |                        |                  |
|  [Schema Filter] |  +-----+  +-----+      |  Entity: Orders  |
|  [Table Filter]  |  | Card |  | Card |     |                  |
|  [Search Box]    |  +-----+  +-----+      |  Fields:         |
|                  |                        |  - ID            |
|  Sort By:        |  +-----+  +-----+      |  - CustomerID    |
|  [Name ↓]        |  | Card |  | Card |     |  - OrderDate     |
|                  |  +-----+  +-----+      |                  |
|                  |                        |  Relationships:  |
|                  |                        |  → Customers     |
|                  |                        |  → OrderItems    |
|                  |                        |                  |
|                  |                        |  [Open Record]   |
+------------------+------------------------+------------------+
```

### Data Flow
1. Root component loads entities on mount
2. Passes entity data to EntityList
3. EntityList handles selection and passes selectedId up
4. Root loads fields/relationships for selected entity
5. Passes detailed data to EntityDetails
6. Filter changes trigger data reload
7. All user preferences saved via onSaveUserSettings

### Interaction Patterns
- Click entity card → Select and open details
- Click filter → Apply and reload data
- Click sort → Update sort and reload
- Click ''Open'' → Trigger OpenEntityRecord callback
- Press Escape → Close details panel
- Click outside → Close details panel'
SET
  @HasCustomProps_416a5f21 = 0
SET
  @HasCustomEvents_416a5f21 = 0
SET
  @RequiresData_416a5f21 = 1
SET
  @DependencyCount_416a5f21 = 3
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_416a5f21,
  @Namespace = @Namespace_416a5f21,
  @Name = @Name_416a5f21,
  @Version = @Version_416a5f21,
  @VersionSequence = @VersionSequence_416a5f21,
  @Title = @Title_416a5f21,
  @Description = @Description_416a5f21,
  @Type = @Type_416a5f21,
  @Status = @Status_416a5f21,
  @DeveloperName = @DeveloperName_416a5f21,
  @DeveloperEmail = @DeveloperEmail_416a5f21,
  @DeveloperOrganization = @DeveloperOrganization_416a5f21,
  @SourceRegistryID = @SourceRegistryID_416a5f21,
  @ReplicatedAt = @ReplicatedAt_416a5f21,
  @LastSyncedAt = @LastSyncedAt_416a5f21,
  @Specification = @Specification_416a5f21,
  @FunctionalRequirements = @FunctionalRequirements_416a5f21,
  @TechnicalDesign = @TechnicalDesign_416a5f21,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_416a5f21,
  @TechnicalDesignVector = @TechnicalDesignVector_416a5f21,
  @HasCustomProps = @HasCustomProps_416a5f21,
  @HasCustomEvents = @HasCustomEvents_416a5f21,
  @RequiresData = @RequiresData_416a5f21,
  @DependencyCount = @DependencyCount_416a5f21;

-- Save MJ: Components (core SP call only)
DECLARE @ID_64fbece6 UNIQUEIDENTIFIER,
@Namespace_64fbece6 NVARCHAR(MAX),
@Name_64fbece6 NVARCHAR(500),
@Version_64fbece6 NVARCHAR(50),
@VersionSequence_64fbece6 INT,
@Title_64fbece6 NVARCHAR(1000),
@Description_64fbece6 NVARCHAR(MAX),
@Type_64fbece6 NVARCHAR(255),
@Status_64fbece6 NVARCHAR(50),
@DeveloperName_64fbece6 NVARCHAR(255),
@DeveloperEmail_64fbece6 NVARCHAR(255),
@DeveloperOrganization_64fbece6 NVARCHAR(255),
@SourceRegistryID_64fbece6 UNIQUEIDENTIFIER,
@ReplicatedAt_64fbece6 DATETIMEOFFSET,
@LastSyncedAt_64fbece6 DATETIMEOFFSET,
@Specification_64fbece6 NVARCHAR(MAX),
@FunctionalRequirements_64fbece6 NVARCHAR(MAX),
@TechnicalDesign_64fbece6 NVARCHAR(MAX),
@FunctionalRequirementsVector_64fbece6 NVARCHAR(MAX),
@TechnicalDesignVector_64fbece6 NVARCHAR(MAX),
@HasCustomProps_64fbece6 BIT,
@HasCustomEvents_64fbece6 BIT,
@RequiresData_64fbece6 BIT,
@DependencyCount_64fbece6 INT
SET
  @ID_64fbece6 = 'cbf137ef-b9f6-4a13-8c73-40f25f52efa4'
SET
  @Namespace_64fbece6 = N'Admin/Entities'
SET
  @Name_64fbece6 = N'EntityDetails'
SET
  @Version_64fbece6 = N'1.0.0'
SET
  @VersionSequence_64fbece6 = 1
SET
  @Title_64fbece6 = N'Entity Details Panel'
SET
  @Description_64fbece6 = N'Sliding panel that displays detailed information about a selected entity including fields and relationships'
SET
  @Type_64fbece6 = N'Other'
SET
  @Status_64fbece6 = N'Published'
SET
  @Specification_64fbece6 = N'{
    "name": "EntityDetails",
    "title": "Entity Details Panel",
    "description": "Sliding panel that displays detailed information about a selected entity including fields and relationships",
    "type": "form",
    "functionalRequirements": "## Entity Details Requirements\n\n- Slide in from the right when an entity is selected\n- Display entity metadata at the top\n- Show fields in a formatted table\n- Display relationships with icons\n- Include ''Open Record'' button\n- Support closing via X button or Escape key\n- Smooth slide animation\n- Scrollable content area",
    "dataRequirements": null,
    "technicalDesign": "## Technical Design\n\n### Props\n- entity: Selected entity object\n- fields: Array of entity fields\n- relationships: Array of entity relationships\n- isOpen: Whether panel is visible\n- onClose: Callback to close panel\n- onOpenRecord: Callback to open entity record\n\n### Layout\n- Fixed position overlay\n- Slide animation using transform\n- Header with entity name and close button\n- Sections for metadata, fields, relationships\n- Sticky ''Open Record'' button at bottom",
    "properties": [
    {
        "name": "entity",
        "description": "The selected entity object",
        "type": "object",
        "required": false
    },
    {
        "name": "fields",
        "description": "Array of fields for the entity",
        "type": "array",
        "required": false,
        "defaultValue": []
    },
    {
        "name": "relationships",
        "description": "Array of relationships for the entity",
        "type": "array",
        "required": false,
        "defaultValue": []
    },
    {
        "name": "isOpen",
        "description": "Whether the panel is open",
        "type": "boolean",
        "required": true
    },
    {
        "name": "onClose",
        "description": "Callback to close the panel",
        "type": "function",
        "required": true
    },
    {
        "name": "onOpenRecord",
        "description": "Callback to open the entity record",
        "type": "function",
        "required": true
    }
    ],
    "events": [
    {
        "name": "onClose",
        "description": "Fired when the panel should close",
        "parameters": []
    },
    {
        "name": "onOpenRecord",
        "description": "Fired when the open record button is clicked",
        "parameters": [
        {
            "name": "entityName",
            "description": "Name of the entity to open",
            "type": "string"
        }
        ]
    }
    ],
    "exampleUsage": "<EntityDetails\n  entity={selectedEntity}\n  fields={entityFields}\n  relationships={entityRelationships}\n  isOpen={detailsPanelOpen}\n  onClose={handleCloseDetails}\n  onOpenRecord={handleOpenRecord}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>",
    "code": "function EntityDetails({ \n  entity, \n  fields, \n  relationships, \n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''EntityDetails handleOpenRecord called'', { entity, onOpenRecord });\n    if (entity?.Name) {\n      console.log(''Calling onOpenRecord with entity name:'', entity.Name);\n      if (onOpenRecord) {\n        onOpenRecord(entity.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No entity or entity name available'');\n    }\n  }, [entity, onOpenRecord]);\n  \n  // Render field type badge\n  const renderFieldType = (type) => {\n    const typeColors = {\n      ''nvarchar'': styles.colors.info || styles.colors.primary,\n      ''varchar'': styles.colors.info || styles.colors.primary,\n      ''int'': styles.colors.success || styles.colors.primary,\n      ''bigint'': styles.colors.success || styles.colors.primary,\n      ''decimal'': styles.colors.success || styles.colors.primary,\n      ''float'': styles.colors.success || styles.colors.primary,\n      ''bit'': styles.colors.warning || styles.colors.secondary,\n      ''datetime'': styles.colors.secondary,\n      ''uniqueidentifier'': styles.colors.primary,\n      ''text'': styles.colors.info || styles.colors.primary,\n      ''ntext'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = typeColors[type?.toLowerCase()] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {type}\n      </span>\n    );\n  };\n  \n  // Render relationship type icon\n  const renderRelationshipIcon = (type) => {\n    const icons = {\n      ''One to Many'': ''1:N'',\n      ''Many to One'': ''N:1'',\n      ''Many to Many'': ''N:N'',\n      ''One to One'': ''1:1''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: styles.colors.primary + ''15'',\n        color: styles.colors.primary,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.bold || ''700'',\n        fontFamily: ''monospace''\n      }}>\n        {icons[type] || type}\n      </span>\n    );\n  };\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        width: ''480px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 1000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {entity?.DisplayName || entity?.Name || ''No Entity Selected''}\n              </h2>\n              {entity?.DisplayName && entity?.Name && entity.DisplayName !== entity.Name && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {entity.Name}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              \u2715\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {entity ? (\n            <>\n              {/* Entity Metadata */}\n              {entity.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {entity.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Quick Info */}\n              <div style={{\n                display: ''grid'',\n                gridTemplateColumns: ''repeat(2, 1fr)'',\n                gap: styles.spacing.md,\n                marginBottom: styles.spacing.xl\n              }}>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Schema\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.SchemaName || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Base Table\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.BaseTable || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Base View\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.BaseView || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Field Count\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {fields?.length || 0}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Fields Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Fields ({fields?.length || 0})\n                </h3>\n                <div style={{\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  overflow: ''hidden''\n                }}>\n                  {fields && fields.length > 0 ? (\n                    <table style={{\n                      width: ''100%'',\n                      borderCollapse: ''collapse''\n                    }}>\n                      <thead>\n                        <tr style={{\n                          borderBottom: `1px solid $' + '{styles.colors.border}`\n                        }}>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''left'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Field\n                          </th>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''left'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Type\n                          </th>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''center'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Attributes\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {fields.map((field, index) => (\n                          <tr\n                            key={index}\n                            style={{\n                              borderBottom: index < fields.length - 1 \n                                ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                                : ''none''\n                            }}\n                          >\n                            <td style={{\n                              padding: styles.spacing.sm,\n                              fontSize: styles.typography.fontSize.sm,\n                              color: styles.colors.text\n                            }}>\n                              <div>\n                                <div style={{\n                                  fontWeight: field.IsPrimaryKey \n                                    ? (styles.typography.fontWeight?.semibold || ''600'')\n                                    : (styles.typography.fontWeight?.regular || ''400'')\n                                }}>\n                                  {field.DisplayName || field.Name}\n                                </div>\n                                {field.DisplayName && (\n                                  <div style={{\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    color: styles.colors.textSecondary,\n                                    fontFamily: ''monospace''\n                                  }}>\n                                    {field.Name}\n                                  </div>\n                                )}\n                              </div>\n                            </td>\n                            <td style={{\n                              padding: styles.spacing.sm\n                            }}>\n                              {renderFieldType(field.Type)}\n                              {field.Length && (\n                                <span style={{\n                                  marginLeft: styles.spacing.xs,\n                                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                  color: styles.colors.textSecondary\n                                }}>\n                                  ({field.Length})\n                                </span>\n                              )}\n                            </td>\n                            <td style={{\n                              padding: styles.spacing.sm,\n                              textAlign: ''center''\n                            }}>\n                              <div style={{\n                                display: ''flex'',\n                                gap: styles.spacing.xs,\n                                justifyContent: ''center'',\n                                flexWrap: ''wrap''\n                              }}>\n                                {field.IsPrimaryKey && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.warning || styles.colors.secondary) + ''15'',\n                                    color: styles.colors.warning || styles.colors.secondary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    PK\n                                  </span>\n                                )}\n                                {field.IsUnique && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.info || styles.colors.primary) + ''15'',\n                                    color: styles.colors.info || styles.colors.primary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    UQ\n                                  </span>\n                                )}\n                                {!field.AllowsNull && !field.IsPrimaryKey && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.error || styles.colors.secondary) + ''15'',\n                                    color: styles.colors.error || styles.colors.secondary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    NN\n                                  </span>\n                                )}\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  ) : (\n                    <div style={{\n                      padding: styles.spacing.lg,\n                      textAlign: ''center'',\n                      color: styles.colors.textSecondary,\n                      fontSize: styles.typography.fontSize.sm\n                    }}>\n                      No fields available\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              {/* Relationships Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Relationships ({relationships?.length || 0})\n                </h3>\n                <div style={{\n                  display: ''flex'',\n                  flexDirection: ''column'',\n                  gap: styles.spacing.sm\n                }}>\n                  {relationships && relationships.length > 0 ? (\n                    relationships.map((rel, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          display: ''flex'',\n                          alignItems: ''center'',\n                          gap: styles.spacing.md\n                        }}\n                      >\n                        {renderRelationshipIcon(rel.Type)}\n                        <div style={{ flex: 1 }}>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {rel.DisplayName || rel.RelatedEntity}\n                          </div>\n                          {rel.RelatedEntityJoinField && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              via {rel.RelatedEntityJoinField}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div style={{\n                      padding: styles.spacing.lg,\n                      backgroundColor: styles.colors.surface,\n                      borderRadius: getBorderRadius(''sm''),\n                      textAlign: ''center'',\n                      color: styles.colors.textSecondary,\n                      fontSize: styles.typography.fontSize.sm\n                    }}>\n                      No relationships defined\n                    </div>\n                  )}\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Entity Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select an entity from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {entity && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Entity Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}",
    "dependencies": [],
    "libraries": []
}'
SET
  @FunctionalRequirements_64fbece6 = N'## Entity Details Requirements

- Slide in from the right when an entity is selected
- Display entity metadata at the top
- Show fields in a formatted table
- Display relationships with icons
- Include ''Open Record'' button
- Support closing via X button or Escape key
- Smooth slide animation
- Scrollable content area'
SET
  @TechnicalDesign_64fbece6 = N'## Technical Design

### Props
- entity: Selected entity object
- fields: Array of entity fields
- relationships: Array of entity relationships
- isOpen: Whether panel is visible
- onClose: Callback to close panel
- onOpenRecord: Callback to open entity record

### Layout
- Fixed position overlay
- Slide animation using transform
- Header with entity name and close button
- Sections for metadata, fields, relationships
- Sticky ''Open Record'' button at bottom'
SET
  @HasCustomProps_64fbece6 = 1
SET
  @HasCustomEvents_64fbece6 = 1
SET
  @RequiresData_64fbece6 = 0
SET
  @DependencyCount_64fbece6 = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_64fbece6,
  @Namespace = @Namespace_64fbece6,
  @Name = @Name_64fbece6,
  @Version = @Version_64fbece6,
  @VersionSequence = @VersionSequence_64fbece6,
  @Title = @Title_64fbece6,
  @Description = @Description_64fbece6,
  @Type = @Type_64fbece6,
  @Status = @Status_64fbece6,
  @DeveloperName = @DeveloperName_64fbece6,
  @DeveloperEmail = @DeveloperEmail_64fbece6,
  @DeveloperOrganization = @DeveloperOrganization_64fbece6,
  @SourceRegistryID = @SourceRegistryID_64fbece6,
  @ReplicatedAt = @ReplicatedAt_64fbece6,
  @LastSyncedAt = @LastSyncedAt_64fbece6,
  @Specification = @Specification_64fbece6,
  @FunctionalRequirements = @FunctionalRequirements_64fbece6,
  @TechnicalDesign = @TechnicalDesign_64fbece6,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_64fbece6,
  @TechnicalDesignVector = @TechnicalDesignVector_64fbece6,
  @HasCustomProps = @HasCustomProps_64fbece6,
  @HasCustomEvents = @HasCustomEvents_64fbece6,
  @RequiresData = @RequiresData_64fbece6,
  @DependencyCount = @DependencyCount_64fbece6;

-- Save MJ: Components (core SP call only)
DECLARE @ID_17ba8fdd UNIQUEIDENTIFIER,
@Namespace_17ba8fdd NVARCHAR(MAX),
@Name_17ba8fdd NVARCHAR(500),
@Version_17ba8fdd NVARCHAR(50),
@VersionSequence_17ba8fdd INT,
@Title_17ba8fdd NVARCHAR(1000),
@Description_17ba8fdd NVARCHAR(MAX),
@Type_17ba8fdd NVARCHAR(255),
@Status_17ba8fdd NVARCHAR(50),
@DeveloperName_17ba8fdd NVARCHAR(255),
@DeveloperEmail_17ba8fdd NVARCHAR(255),
@DeveloperOrganization_17ba8fdd NVARCHAR(255),
@SourceRegistryID_17ba8fdd UNIQUEIDENTIFIER,
@ReplicatedAt_17ba8fdd DATETIMEOFFSET,
@LastSyncedAt_17ba8fdd DATETIMEOFFSET,
@Specification_17ba8fdd NVARCHAR(MAX),
@FunctionalRequirements_17ba8fdd NVARCHAR(MAX),
@TechnicalDesign_17ba8fdd NVARCHAR(MAX),
@FunctionalRequirementsVector_17ba8fdd NVARCHAR(MAX),
@TechnicalDesignVector_17ba8fdd NVARCHAR(MAX),
@HasCustomProps_17ba8fdd BIT,
@HasCustomEvents_17ba8fdd BIT,
@RequiresData_17ba8fdd BIT,
@DependencyCount_17ba8fdd INT
SET
  @ID_17ba8fdd = '64d1506a-e162-49cf-b99b-43c9b6e5a64c'
SET
  @Namespace_17ba8fdd = N'Admin/Entities'
SET
  @Name_17ba8fdd = N'EntityList'
SET
  @Version_17ba8fdd = N'1.0.0'
SET
  @VersionSequence_17ba8fdd = 1
SET
  @Title_17ba8fdd = N'Entity List'
SET
  @Description_17ba8fdd = N'Displays entities in a grid or card layout with sorting capabilities'
SET
  @Type_17ba8fdd = N'Table'
SET
  @Status_17ba8fdd = N'Published'
SET
  @Specification_17ba8fdd = N'{
    "name": "EntityList",
    "title": "Entity List",
    "description": "Displays entities in a grid or card layout with sorting capabilities",
    "type": "table",
    "functionalRequirements": "## Entity List Requirements\n\n- Display entities in grid or card view based on viewMode prop\n- Support sorting by multiple fields\n- Handle entity selection and notify parent\n- Show loading state while data loads\n- Display record count badges\n- Highlight selected entity\n- Support keyboard navigation",
    "dataRequirements": null,
    "technicalDesign": "## Technical Design\n\n### Props\n- entities: Array of entity objects\n- viewMode: ''grid'' | ''card''\n- selectedEntityId: Currently selected entity\n- onSelectEntity: Callback when entity selected\n- sortBy: Current sort field\n- sortDirection: ''asc'' | ''desc''\n- onSortChange: Callback for sort changes\n\n### Rendering\n- Grid mode: Compact table with columns\n- Card mode: Cards with entity info\n- Sort indicators in headers\n- Selection highlighting",
    "properties": [
    {
        "name": "entities",
        "description": "Array of entity objects to display",
        "type": "array",
        "required": true
    },
    {
        "name": "viewMode",
        "description": "Display mode - grid or card view",
        "type": "string",
        "required": true,
        "possibleValues": [
        "grid",
        "card"
        ]
    },
    {
        "name": "selectedEntityId",
        "description": "ID of the currently selected entity",
        "type": "string",
        "required": false
    },
    {
        "name": "onSelectEntity",
        "description": "Callback when an entity is selected",
        "type": "function",
        "required": true
    },
    {
        "name": "sortBy",
        "description": "Field to sort by",
        "type": "string",
        "required": false,
        "defaultValue": "Name"
    },
    {
        "name": "sortDirection",
        "description": "Sort direction",
        "type": "string",
        "required": false,
        "defaultValue": "asc",
        "possibleValues": [
        "asc",
        "desc"
        ]
    },
    {
        "name": "onSortChange",
        "description": "Callback when sort changes",
        "type": "function",
        "required": true
    }
    ],
    "events": [
    {
        "name": "onSelectEntity",
        "description": "Fired when an entity is selected",
        "parameters": [
        {
            "name": "entityId",
            "description": "ID of the selected entity",
            "type": "string"
        }
        ]
    },
    {
        "name": "onSortChange",
        "description": "Fired when sort configuration changes",
        "parameters": [
        {
            "name": "sortBy",
            "description": "Field to sort by",
            "type": "string"
        },
        {
            "name": "sortDirection",
            "description": "Sort direction",
            "type": "string"
        }
        ]
    }
    ],
    "exampleUsage": "<EntityList\n  entities={entities}\n  viewMode={viewMode}\n  selectedEntityId={selectedEntityId}\n  onSelectEntity={handleSelectEntity}\n  sortBy={sortBy}\n  sortDirection={sortDirection}\n  onSortChange={handleSortChange}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>",
    "code": "function EntityList({ \n  entities, \n  viewMode, \n  selectedEntityId, \n  onSelectEntity, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Handle sort column click\n  const handleSortClick = useCallback((field) => {\n    if (sortBy === field) {\n      // Toggle direction if same field\n      const newDirection = sortDirection === ''asc'' ? ''desc'' : ''asc'';\n      onSortChange?.(field, newDirection);\n    } else {\n      // New field, default to ascending\n      onSortChange?.(field, ''asc'');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Handle entity selection\n  const handleEntityClick = useCallback((entityId) => {\n    onSelectEntity?.(entityId);\n  }, [onSelectEntity]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{ marginLeft: styles.spacing.xs }}>\n        {sortDirection === ''asc'' ? ''\u2191'' : ''\u2193''}\n      </span>\n    );\n  };\n  \n  // Grid View\n  if (viewMode === ''grid'') {\n    return (\n      <div style={{\n        width: ''100%'',\n        overflowX: ''auto''\n      }}>\n        <table style={{\n          width: ''100%'',\n          borderCollapse: ''collapse'',\n          backgroundColor: styles.colors.surface\n        }}>\n          <thead>\n            <tr style={{\n              borderBottom: `2px solid $' + '{styles.colors.border}`\n            }}>\n              <th\n                onClick={() => handleSortClick(''Name'')}\n                style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''left'',\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text,\n                  cursor: ''pointer'',\n                  userSelect: ''none'',\n                  whiteSpace: ''nowrap''\n                }}\n              >\n                Name {renderSortIndicator(''Name'')}\n              </th>\n              <th\n                onClick={() => handleSortClick(''DisplayName'')}\n                style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''left'',\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text,\n                  cursor: ''pointer'',\n                  userSelect: ''none'',\n                  whiteSpace: ''nowrap''\n                }}\n              >\n                Display Name {renderSortIndicator(''DisplayName'')}\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Description\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Schema\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Table\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Base View\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {entities.map((entity) => (\n              <tr\n                key={entity.ID}\n                onClick={() => handleEntityClick(entity.ID)}\n                style={{\n                  backgroundColor: selectedEntityId === entity.ID \n                    ? styles.colors.primary + ''20'' \n                    : ''transparent'',\n                  borderBottom: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`,\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => {\n                  if (selectedEntityId !== entity.ID) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (selectedEntityId !== entity.ID) {\n                    e.currentTarget.style.backgroundColor = ''transparent'';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text,\n                  fontWeight: selectedEntityId === entity.ID \n                    ? (styles.typography.fontWeight?.semibold || ''600'')\n                    : (styles.typography.fontWeight?.regular || ''400'')\n                }}>\n                  {entity.Name}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {entity.DisplayName || entity.Name}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  maxWidth: ''300px'',\n                  overflow: ''hidden'',\n                  textOverflow: ''ellipsis'',\n                  whiteSpace: ''nowrap''\n                }}>\n                  {entity.Description || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.textSecondary\n                }}>\n                  {entity.SchemaName || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.textSecondary\n                }}>\n                  {entity.BaseTable || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.textSecondary\n                }}>\n                  {entity.BaseView || ''-''}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  \n  // Card View\n  return (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fill, minmax(300px, 1fr))'',\n      gap: styles.spacing.lg\n    }}>\n      {entities.map((entity) => (\n        <div\n          key={entity.ID}\n          onClick={() => handleEntityClick(entity.ID)}\n          style={{\n            padding: styles.spacing.lg,\n            backgroundColor: selectedEntityId === entity.ID \n              ? styles.colors.primary + ''20''\n              : styles.colors.surface,\n            border: selectedEntityId === entity.ID\n              ? `2px solid $' + '{styles.colors.primary}`\n              : `1px solid $' + '{styles.colors.border}`,\n            borderRadius: getBorderRadius(''md''),\n            cursor: ''pointer'',\n            transition: ''all 0.2s'',\n            position: ''relative''\n          }}\n          onMouseEnter={(e) => {\n            if (selectedEntityId !== entity.ID) {\n              e.currentTarget.style.transform = ''translateY(-2px)'';\n              e.currentTarget.style.boxShadow = `0 4px 12px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}`;\n            }\n          }}\n          onMouseLeave={(e) => {\n            if (selectedEntityId !== entity.ID) {\n              e.currentTarget.style.transform = ''translateY(0)'';\n              e.currentTarget.style.boxShadow = ''none'';\n            }\n          }}\n        >\n          {/* Card Header */}\n          <div style={{\n            marginBottom: styles.spacing.md,\n            paddingBottom: styles.spacing.md,\n            borderBottom: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <h3 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n              color: styles.colors.text,\n              marginBottom: styles.spacing.xs\n            }}>\n              {entity.DisplayName || entity.Name}\n            </h3>\n            {entity.DisplayName && entity.DisplayName !== entity.Name && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary\n              }}>\n                {entity.Name}\n              </div>\n            )}\n          </div>\n          \n          {/* Card Body */}\n          {entity.Description && (\n            <p style={{\n              margin: 0,\n              marginBottom: styles.spacing.md,\n              fontSize: styles.typography.fontSize.md,\n              color: styles.colors.textSecondary,\n              lineHeight: 1.5,\n              display: ''-webkit-box'',\n              WebkitLineClamp: 2,\n              WebkitBoxOrient: ''vertical'',\n              overflow: ''hidden''\n            }}>\n              {entity.Description}\n            </p>\n          )}\n          \n          {/* Card Footer */}\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center'',\n            fontSize: styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary\n          }}>\n            <div>\n              {entity.SchemaName && (\n                <span style={{ marginRight: styles.spacing.md }}>\n                  Schema: <strong>{entity.SchemaName}</strong>\n                </span>\n              )}\n              {entity.BaseTable && (\n                <span>\n                  Table: <strong>{entity.BaseTable}</strong>\n                </span>\n              )}\n            </div>\n            {entity.BaseView && (\n              <div style={{\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary\n              }}>\n                View: {entity.BaseView}\n              </div>\n            )}\n          </div>\n          \n          {/* Selection Indicator */}\n          {selectedEntityId === entity.ID && (\n            <div style={{\n              position: ''absolute'',\n              top: styles.spacing.sm,\n              right: styles.spacing.sm,\n              width: ''8px'',\n              height: ''8px'',\n              backgroundColor: styles.colors.primary,\n              borderRadius: ''50%''\n            }} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}",
    "dependencies": [],
    "libraries": []
}'
SET
  @FunctionalRequirements_17ba8fdd = N'## Entity List Requirements

- Display entities in grid or card view based on viewMode prop
- Support sorting by multiple fields
- Handle entity selection and notify parent
- Show loading state while data loads
- Display record count badges
- Highlight selected entity
- Support keyboard navigation'
SET
  @TechnicalDesign_17ba8fdd = N'## Technical Design

### Props
- entities: Array of entity objects
- viewMode: ''grid'' | ''card''
- selectedEntityId: Currently selected entity
- onSelectEntity: Callback when entity selected
- sortBy: Current sort field
- sortDirection: ''asc'' | ''desc''
- onSortChange: Callback for sort changes

### Rendering
- Grid mode: Compact table with columns
- Card mode: Cards with entity info
- Sort indicators in headers
- Selection highlighting'
SET
  @HasCustomProps_17ba8fdd = 1
SET
  @HasCustomEvents_17ba8fdd = 1
SET
  @RequiresData_17ba8fdd = 0
SET
  @DependencyCount_17ba8fdd = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_17ba8fdd,
  @Namespace = @Namespace_17ba8fdd,
  @Name = @Name_17ba8fdd,
  @Version = @Version_17ba8fdd,
  @VersionSequence = @VersionSequence_17ba8fdd,
  @Title = @Title_17ba8fdd,
  @Description = @Description_17ba8fdd,
  @Type = @Type_17ba8fdd,
  @Status = @Status_17ba8fdd,
  @DeveloperName = @DeveloperName_17ba8fdd,
  @DeveloperEmail = @DeveloperEmail_17ba8fdd,
  @DeveloperOrganization = @DeveloperOrganization_17ba8fdd,
  @SourceRegistryID = @SourceRegistryID_17ba8fdd,
  @ReplicatedAt = @ReplicatedAt_17ba8fdd,
  @LastSyncedAt = @LastSyncedAt_17ba8fdd,
  @Specification = @Specification_17ba8fdd,
  @FunctionalRequirements = @FunctionalRequirements_17ba8fdd,
  @TechnicalDesign = @TechnicalDesign_17ba8fdd,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_17ba8fdd,
  @TechnicalDesignVector = @TechnicalDesignVector_17ba8fdd,
  @HasCustomProps = @HasCustomProps_17ba8fdd,
  @HasCustomEvents = @HasCustomEvents_17ba8fdd,
  @RequiresData = @RequiresData_17ba8fdd,
  @DependencyCount = @DependencyCount_17ba8fdd;

-- Save MJ: Components (core SP call only)
DECLARE @ID_b25d374d UNIQUEIDENTIFIER,
@Namespace_b25d374d NVARCHAR(MAX),
@Name_b25d374d NVARCHAR(500),
@Version_b25d374d NVARCHAR(50),
@VersionSequence_b25d374d INT,
@Title_b25d374d NVARCHAR(1000),
@Description_b25d374d NVARCHAR(MAX),
@Type_b25d374d NVARCHAR(255),
@Status_b25d374d NVARCHAR(50),
@DeveloperName_b25d374d NVARCHAR(255),
@DeveloperEmail_b25d374d NVARCHAR(255),
@DeveloperOrganization_b25d374d NVARCHAR(255),
@SourceRegistryID_b25d374d UNIQUEIDENTIFIER,
@ReplicatedAt_b25d374d DATETIMEOFFSET,
@LastSyncedAt_b25d374d DATETIMEOFFSET,
@Specification_b25d374d NVARCHAR(MAX),
@FunctionalRequirements_b25d374d NVARCHAR(MAX),
@TechnicalDesign_b25d374d NVARCHAR(MAX),
@FunctionalRequirementsVector_b25d374d NVARCHAR(MAX),
@TechnicalDesignVector_b25d374d NVARCHAR(MAX),
@HasCustomProps_b25d374d BIT,
@HasCustomEvents_b25d374d BIT,
@RequiresData_b25d374d BIT,
@DependencyCount_b25d374d INT
SET
  @ID_b25d374d = '7255a434-03ba-4689-8699-da4930d7944a'
SET
  @Namespace_b25d374d = N'Admin/Entities'
SET
  @Name_b25d374d = N'EntityFilter'
SET
  @Version_b25d374d = N'1.0.0'
SET
  @VersionSequence_b25d374d = 1
SET
  @Title_b25d374d = N'Entity Filter'
SET
  @Description_b25d374d = N'Collapsible filter panel for filtering entities by various criteria'
SET
  @Type_b25d374d = N'Other'
SET
  @Status_b25d374d = N'Published'
SET
  @Specification_b25d374d = N'{
    "name": "EntityFilter",
    "title": "Entity Filter Panel",
    "description": "Collapsible filter panel for filtering entities by various criteria",
    "type": "form",
    "functionalRequirements": "## Entity Filter Requirements\n\n- Collapsible panel on the left side\n- Filter by schema name (dropdown)\n- Filter by base table (dropdown)\n- Search box for text search\n- Clear all filters button\n- Show active filter count\n- Smooth collapse/expand animation\n- Remember collapsed state",
    "dataRequirements": null,
    "technicalDesign": "## Technical Design\n\n### Props\n- filters: Current filter values\n- onFilterChange: Callback when filters change\n- schemas: Available schema options\n- tables: Available table options\n- isCollapsed: Whether panel is collapsed\n- onToggleCollapse: Callback to toggle collapse\n\n### Components\n- Collapse toggle button\n- Schema dropdown\n- Table dropdown\n- Search input\n- Clear filters button\n- Active filter badges",
    "properties": [
    {
        "name": "filters",
        "description": "Current filter values",
        "type": "object",
        "required": true
    },
    {
        "name": "onFilterChange",
        "description": "Callback when filters change",
        "type": "function",
        "required": true
    },
    {
        "name": "schemas",
        "description": "Available schema options",
        "type": "array",
        "required": true
    },
    {
        "name": "tables",
        "description": "Available table options",
        "type": "array",
        "required": true
    },
    {
        "name": "isCollapsed",
        "description": "Whether the panel is collapsed",
        "type": "boolean",
        "required": true
    },
    {
        "name": "onToggleCollapse",
        "description": "Callback to toggle collapse state",
        "type": "function",
        "required": true
    }
    ],
    "events": [
    {
        "name": "onFilterChange",
        "description": "Fired when filter values change",
        "parameters": [
        {
            "name": "filters",
            "description": "Updated filter object",
            "type": "object"
        }
        ]
    },
    {
        "name": "onToggleCollapse",
        "description": "Fired when collapse state should toggle",
        "parameters": []
    }
    ],
    "exampleUsage": "<EntityFilter\n  filters={filters}\n  onFilterChange={handleFilterChange}\n  schemas={uniqueSchemas}\n  tables={uniqueTables}\n  isCollapsed={filterPanelCollapsed}\n  onToggleCollapse={handleToggleFilter}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>",
    "code": "function EntityFilter({ \n  filters, \n  onFilterChange, \n  schemas, \n  tables, \n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle schema filter change\n  const handleSchemaChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      schema: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle table filter change\n  const handleTableChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      table: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''\u2192'' : ''\u2190''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            \ud83d\udd0d\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Schema Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Schema\n            </label>\n            <select\n              value={filters?.schema || ''''}\n              onChange={handleSchemaChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Schemas</option>\n              {schemas.map((schema) => (\n                <option key={schema} value={schema}>\n                  {schema}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Table Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Base Table\n            </label>\n            <select\n              value={filters?.table || ''''}\n              onChange={handleTableChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Tables</option>\n              {tables.map((table) => (\n                <option key={table} value={table}>\n                  {table}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.schema && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Schema:\n                      </span>\n                      <strong>{filters.schema}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleSchemaChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.table && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Table:\n                      </span>\n                      <strong>{filters.table}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleTableChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
    "dependencies": [],
    "libraries": []
}'
SET
  @FunctionalRequirements_b25d374d = N'## Entity Filter Requirements

- Collapsible panel on the left side
- Filter by schema name (dropdown)
- Filter by base table (dropdown)
- Search box for text search
- Clear all filters button
- Show active filter count
- Smooth collapse/expand animation
- Remember collapsed state'
SET
  @TechnicalDesign_b25d374d = N'## Technical Design

### Props
- filters: Current filter values
- onFilterChange: Callback when filters change
- schemas: Available schema options
- tables: Available table options
- isCollapsed: Whether panel is collapsed
- onToggleCollapse: Callback to toggle collapse

### Components
- Collapse toggle button
- Schema dropdown
- Table dropdown
- Search input
- Clear filters button
- Active filter badges'
SET
  @HasCustomProps_b25d374d = 1
SET
  @HasCustomEvents_b25d374d = 1
SET
  @RequiresData_b25d374d = 0
SET
  @DependencyCount_b25d374d = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_b25d374d,
  @Namespace = @Namespace_b25d374d,
  @Name = @Name_b25d374d,
  @Version = @Version_b25d374d,
  @VersionSequence = @VersionSequence_b25d374d,
  @Title = @Title_b25d374d,
  @Description = @Description_b25d374d,
  @Type = @Type_b25d374d,
  @Status = @Status_b25d374d,
  @DeveloperName = @DeveloperName_b25d374d,
  @DeveloperEmail = @DeveloperEmail_b25d374d,
  @DeveloperOrganization = @DeveloperOrganization_b25d374d,
  @SourceRegistryID = @SourceRegistryID_b25d374d,
  @ReplicatedAt = @ReplicatedAt_b25d374d,
  @LastSyncedAt = @LastSyncedAt_b25d374d,
  @Specification = @Specification_b25d374d,
  @FunctionalRequirements = @FunctionalRequirements_b25d374d,
  @TechnicalDesign = @TechnicalDesign_b25d374d,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_b25d374d,
  @TechnicalDesignVector = @TechnicalDesignVector_b25d374d,
  @HasCustomProps = @HasCustomProps_b25d374d,
  @HasCustomEvents = @HasCustomEvents_b25d374d,
  @RequiresData = @RequiresData_b25d374d,
  @DependencyCount = @DependencyCount_b25d374d;

-- Save MJ: Components (core SP call only)
DECLARE @ID_1c4d330e UNIQUEIDENTIFIER,
@Namespace_1c4d330e NVARCHAR(MAX),
@Name_1c4d330e NVARCHAR(500),
@Version_1c4d330e NVARCHAR(50),
@VersionSequence_1c4d330e INT,
@Title_1c4d330e NVARCHAR(1000),
@Description_1c4d330e NVARCHAR(MAX),
@Type_1c4d330e NVARCHAR(255),
@Status_1c4d330e NVARCHAR(50),
@DeveloperName_1c4d330e NVARCHAR(255),
@DeveloperEmail_1c4d330e NVARCHAR(255),
@DeveloperOrganization_1c4d330e NVARCHAR(255),
@SourceRegistryID_1c4d330e UNIQUEIDENTIFIER,
@ReplicatedAt_1c4d330e DATETIMEOFFSET,
@LastSyncedAt_1c4d330e DATETIMEOFFSET,
@Specification_1c4d330e NVARCHAR(MAX),
@FunctionalRequirements_1c4d330e NVARCHAR(MAX),
@TechnicalDesign_1c4d330e NVARCHAR(MAX),
@FunctionalRequirementsVector_1c4d330e NVARCHAR(MAX),
@TechnicalDesignVector_1c4d330e NVARCHAR(MAX),
@HasCustomProps_1c4d330e BIT,
@HasCustomEvents_1c4d330e BIT,
@RequiresData_1c4d330e BIT,
@DependencyCount_1c4d330e INT
SET
  @ID_1c4d330e = '965d9f07-ee7f-4af5-b1a9-968dec1e42a4'
SET
  @Namespace_1c4d330e = N'AI'
SET
  @Name_1c4d330e = N'AIModelBrowser'
SET
  @Version_1c4d330e = N'1.0.0'
SET
  @VersionSequence_1c4d330e = 1
SET
  @Title_1c4d330e = N'AI Model Browser'
SET
  @Description_1c4d330e = N'A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications'
SET
  @Type_1c4d330e = N'Other'
SET
  @Status_1c4d330e = N'Published'
SET
  @Specification_1c4d330e = N'{
  "name": "AIModelBrowser",
  "title": "AI Model Browser",
  "description": "A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications",
  "type": "dashboard",
  "functionalRequirements": "## AI Model Browser Requirements\n\n### Core Functionality\n- Display AI models in grid or list view with comprehensive information\n- Filter models by Model Type, Status, Model Developer, and Inference Provider\n- View detailed model specifications including context window, token limits, and cost ranking\n- Display all vendors associated with a model (model developers and inference providers)\n- Show prompt run history and usage statistics for selected models\n- Visualize prompt usage with pie charts showing distribution across different prompts\n- Display performance metrics with bar charts showing average execution times\n- Show time series data for model usage over time\n- Support sorting by multiple fields with visual indicators\n- Include search functionality for quick model filtering\n- Provide ''Open'' button to trigger OpenEntityRecord callback for detailed editing\n\n### Analytics Features\n- Pie chart visualization of prompt usage distribution\n- Performance bar charts showing average execution times per prompt\n- Time series chart showing model usage trends over last 7 days\n- Summary statistics including total runs, success rates, and token usage\n- Grouped vendor display by type (Model Developer vs Inference Provider)\n\n### UX Considerations\n- Collapsible filter panel with active filter count indicator\n- Sliding details panel for comprehensive model information\n- Inline analytics panel with tabbed views for different visualizations\n- Smooth animations for panel transitions and chart rendering\n- Responsive design adapting to different screen sizes\n- Loading states while fetching data\n- Empty states with helpful messages\n- Visual feedback for hover and selection states\n- Maintain user preferences for view mode and filter state",
  "dataRequirements": {
    "mode": "views",
    "entities": [
      {
        "name": "AI Models",
        "description": "Core AI model definitions and specifications",
        "displayFields": [
          "ID",
          "Name",
          "APIName",
          "Description",
          "AIModelTypeID",
          "InputTokenLimit",
          "PowerRank",
          "SpeedRank",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt",
          "__mj_UpdatedAt"
        ],
        "filterFields": [
          "AIModelTypeID",
          "IsActive"
        ],
        "sortFields": [
          "Name",
          "InputTokenLimit",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": true,
            "description": "Unique identifier for the AI model"
          },
          {
            "name": "Name",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "System name of the AI model"
          },
          {
            "name": "APIName",
            "sequence": 4,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "API identifier for the model"
          },
          {
            "name": "InputTokenLimit",
            "sequence": 5,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Maximum input token limit"
          },
          {
            "name": "CostRank",
            "sequence": 6,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Relative cost ranking (1-5)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Main list of AI models"
      },
      {
        "name": "MJ: AI Model Vendors",
        "description": "Vendor associations for AI models",
        "displayFields": [
          "ID",
          "ModelID",
          "VendorID",
          "TypeID",
          "Model",
          "Vendor",
          "Type",
          "Status",
          "Priority",
          "APIName",
          "MaxInputTokens",
          "MaxOutputTokens",
          "SupportsStreaming",
          "SupportsEffortLevel"
        ],
        "filterFields": [
          "ModelID",
          "Type",
          "Status"
        ],
        "sortFields": [
          "Vendor",
          "Priority",
          "Type"
        ],
        "fieldMetadata": [
          {
            "name": "ModelID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Reference to AI Model"
          },
          {
            "name": "Vendor",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor name"
          },
          {
            "name": "Type",
            "sequence": 3,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor type (Model Developer or Inference Provider)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Vendor associations for models"
      },
      {
        "name": "AI Model Types",
        "description": "Types/categories of AI models",
        "displayFields": [
          "ID",
          "Name",
          "Description"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Filter dropdown for model types"
      },
      {
        "name": "MJ: AI Prompt Runs",
        "description": "Execution history for AI prompts",
        "displayFields": [
          "ID",
          "PromptID",
          "ModelID",
          "StartTime",
          "EndTime",
          "TotalExecutionTime",
          "InputTokens",
          "OutputTokens",
          "TotalTokens",
          "Status",
          "Error"
        ],
        "filterFields": [
          "ModelID",
          "PromptID",
          "Status"
        ],
        "sortFields": [
          "StartTime",
          "TotalExecutionTime"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Analytics and usage history"
      },
      {
        "name": "AI Prompts",
        "description": "AI prompt definitions",
        "displayFields": [
          "ID",
          "Name",
          "Description",
          "CategoryID"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Enrich prompt runs with names"
      }
    ]
  },
  "technicalDesign": "## Component Architecture\n\n### Root Component (AIModelBrowser)\n- Manages overall state and data loading\n- Coordinates between filter, list, details, and analytics components\n- Handles user preferences and saved settings\n- Manages search and sort state\n\n### Child Components\n1. **AIModelList**: Displays models in grid or list view with vendor information\n2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors\n3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering\n4. **AIModelAnalytics**: Inline analytics panel with charts and statistics\n\n### Data Flow\n- Root component loads all models and vendor associations\n- Filters are applied at the root level and filtered data passed to list\n- Selection in list triggers detail loading and analytics calculation\n- Analytics component processes prompt runs to generate visualizations\n\n### Chart Implementation\n- Pie charts using SVG for prompt usage distribution\n- Bar charts for performance metrics\n- Time series charts for usage trends\n- All charts are responsive and interactive",
  "properties": [],
  "events": [],
  "exampleUsage": "<AIModelBrowser\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>",
  "dependencies": [
    {
      "name": "AIModelList",
      "title": "AI Model List",
      "description": "Displays AI models in grid or list view with vendor information and sorting",
      "type": "table",
      "functionalRequirements": "Display models with vendor counts, support grid and list views, handle sorting and selection",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [],
      "events": [],
      "exampleUsage": "<AIModelList ... />",
      "code": "function AIModelList({ \n  models, \n  modelVendors,\n  viewMode, \n  selectedModelId, \n  onSelectModel, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Get vendor info for a model\n  const getModelVendorInfo = useCallback((modelId) => {\n    const vendors = modelVendors.filter(v => v.ModelID === modelId);\n    const inferenceProviders = vendors.filter(v => v.Type === ''Inference Provider'');\n    const modelDeveloper = vendors.find(v => v.Type === ''Model Developer'');\n    \n    return {\n      inferenceProviders,\n      modelDeveloper,\n      vendorCount: vendors.length\n    };\n  }, [modelVendors]);\n  \n  // Handle sort column click\n  const handleSort = useCallback((field) => {\n    if (sortBy === field) {\n      onSortChange?.(field, sortDirection === ''asc'' ? ''desc'' : ''asc'');\n    } else {\n      onSortChange?.(field, ''asc'');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{\n        marginLeft: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {sortDirection === ''asc'' ? ''\u25b2'' : ''\u25bc''}\n      </span>\n    );\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render cost rank\n  const renderCostRank = (rank) => {\n    if (rank == null) return ''-'';\n    \n    const maxStars = 5;\n    const filledStars = Math.min(rank, maxStars);\n    \n    return (\n      <span style={{\n        color: styles.colors.warning || styles.colors.secondary,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {''$''.repeat(filledStars)}\n        <span style={{ opacity: 0.3 }}>\n          {''$''.repeat(maxStars - filledStars)}\n        </span>\n      </span>\n    );\n  };\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Grid view rendering\n  const renderGridView = () => (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fill, minmax(320px, 1fr))'',\n      gap: styles.spacing.lg\n    }}>\n      {models.map((model) => {\n        const vendorInfo = getModelVendorInfo(model.ID);\n        const isSelected = model.ID === selectedModelId;\n        \n        return (\n          <div\n            key={model.ID}\n            onClick={() => onSelectModel?.(model.ID)}\n            style={{\n              backgroundColor: styles.colors.surface,\n              borderRadius: getBorderRadius(''md''),\n              padding: styles.spacing.lg,\n              cursor: ''pointer'',\n              transition: ''all 0.2s'',\n              border: isSelected \n                ? `2px solid $' + '{styles.colors.primary}`\n                : `1px solid $' + '{styles.colors.border}`,\n              boxShadow: isSelected \n                ? `0 4px 12px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}`\n                : ''none''\n            }}\n            onMouseEnter={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.primary;\n                e.currentTarget.style.boxShadow = `0 2px 8px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.05)''}`;\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.border;\n                e.currentTarget.style.boxShadow = ''none'';\n              }\n            }}\n          >\n            {/* Model Header */}\n            <div style={{\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''flex-start'',\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{ flex: 1 }}>\n                <h3 style={{\n                  margin: 0,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {model.Name}\n                </h3>\n                {model.APIName && (\n                  <div style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    fontFamily: ''monospace''\n                  }}>\n                    {model.APIName}\n                  </div>\n                )}\n              </div>\n              {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n            </div>\n            \n            {/* Model Description */}\n            {model.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                marginBottom: styles.spacing.md,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                display: ''-webkit-box'',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: ''vertical''\n              }}>\n                {model.Description}\n              </div>\n            )}\n            \n            {/* Model Specs */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Input Token Limit\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Cost Rank\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </div>\n              </div>\n            </div>\n            \n            {/* Vendor Info */}\n            <div style={{\n              paddingTop: styles.spacing.md,\n              borderTop: `1px solid $' + '{styles.colors.border}`,\n              display: ''flex'',\n              gap: styles.spacing.md,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              {vendorInfo.modelDeveloper && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Dev:</span>\n                  <span style={{ \n                    color: styles.colors.text,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.modelDeveloper.Vendor}\n                  </span>\n                </div>\n              )}\n              {vendorInfo.inferenceProviders.length > 0 && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Providers:</span>\n                  <span style={{ \n                    color: styles.colors.primary,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.inferenceProviders.length}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n  \n  // List view rendering\n  const renderListView = () => (\n    <div style={{\n      backgroundColor: styles.colors.surface,\n      borderRadius: getBorderRadius(''md''),\n      overflow: ''hidden''\n    }}>\n      <table style={{\n        width: ''100%'',\n        borderCollapse: ''collapse''\n      }}>\n        <thead>\n          <tr style={{\n            borderBottom: `2px solid $' + '{styles.colors.border}`\n          }}>\n            <th\n              onClick={() => handleSort(''Name'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Model Name\n              {renderSortIndicator(''Name'')}\n            </th>\n            <th\n              onClick={() => handleSort(''Status'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Status\n              {renderSortIndicator(''Status'')}\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Developer\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Providers\n            </th>\n            <th\n              onClick={() => handleSort(''InputTokenLimit'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''right'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Input Limit\n              {renderSortIndicator(''InputTokenLimit'')}\n            </th>\n            <th\n              onClick={() => handleSort(''CostRank'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''center'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Cost\n              {renderSortIndicator(''CostRank'')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {models.map((model, index) => {\n            const vendorInfo = getModelVendorInfo(model.ID);\n            const isSelected = model.ID === selectedModelId;\n            \n            return (\n              <tr\n                key={model.ID}\n                onClick={() => onSelectModel?.(model.ID)}\n                style={{\n                  borderBottom: index < models.length - 1 \n                    ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                    : ''none'',\n                  backgroundColor: isSelected \n                    ? styles.colors.primaryLight || styles.colors.primary + ''10''\n                    : ''transparent'',\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = ''transparent'';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  <div>\n                    <div style={{\n                      fontWeight: isSelected \n                        ? (styles.typography.fontWeight?.semibold || ''600'')\n                        : (styles.typography.fontWeight?.regular || ''400''),\n                      color: styles.colors.text\n                    }}>\n                      {model.Name}\n                    </div>\n                    {model.APIName && (\n                      <div style={{\n                        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                        color: styles.colors.textSecondary,\n                        fontFamily: ''monospace''\n                      }}>\n                        {model.APIName}\n                      </div>\n                    )}\n                  </div>\n                </td>\n                <td style={{\n                  padding: styles.spacing.md\n                }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {vendorInfo.modelDeveloper?.Vendor || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {vendorInfo.inferenceProviders.length > 0 ? (\n                    <div style={{\n                      display: ''flex'',\n                      gap: styles.spacing.xs,\n                      flexWrap: ''wrap''\n                    }}>\n                      {vendorInfo.inferenceProviders.slice(0, 3).map((provider, idx) => (\n                        <span\n                          key={idx}\n                          style={{\n                            padding: `2px $' + '{styles.spacing.xs}`,\n                            backgroundColor: styles.colors.primary + ''15'',\n                            color: styles.colors.primary,\n                            borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                          }}\n                        >\n                          {provider.Vendor}\n                        </span>\n                      ))}\n                      {vendorInfo.inferenceProviders.length > 3 && (\n                        <span style={{\n                          color: styles.colors.textSecondary,\n                          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                        }}>\n                          +{vendorInfo.inferenceProviders.length - 3}\n                        </span>\n                      )}\n                    </div>\n                  ) : (\n                    <span style={{ color: styles.colors.textSecondary }}>-</span>\n                  )}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''right'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''center''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n  \n  return viewMode === ''grid'' ? renderGridView() : renderListView();\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelDetails",
      "title": "AI Model Details",
      "description": "Sliding details panel showing comprehensive model information, vendors, and usage statistics",
      "type": "detail",
      "functionalRequirements": "Show model specs, vendor associations grouped by type, usage statistics, and open record button",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [],
      "events": [],
      "exampleUsage": "<AIModelDetails ... />",
      "code": "function AIModelDetails({ \n  model, \n  vendors,\n  promptRuns,\n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''AIModelDetails handleOpenRecord called'', { model, onOpenRecord });\n    if (model?.Name) {\n      console.log(''Calling onOpenRecord with model name:'', model.Name);\n      if (onOpenRecord) {\n        onOpenRecord(model.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No model or model name available'');\n    }\n  }, [model, onOpenRecord]);\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render vendor type icon\n  const renderVendorTypeIcon = (type) => {\n    const icons = {\n      ''Model Developer'': ''\ud83c\udfe2'',\n      ''Inference Provider'': ''\ud83d\ude80''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        marginRight: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.md\n      }}>\n        {icons[type] || ''\ud83d\udce6''}\n      </span>\n    );\n  };\n  \n  // Calculate prompt statistics\n  const calculatePromptStats = useCallback(() => {\n    if (!promptRuns || promptRuns.length === 0) {\n      return {\n        totalRuns: 0,\n        successfulRuns: 0,\n        failedRuns: 0,\n        avgExecutionTime: 0,\n        totalTokens: 0,\n        uniquePrompts: 0\n      };\n    }\n    \n    const stats = {\n      totalRuns: promptRuns.length,\n      successfulRuns: promptRuns.filter(r => r.Status === ''Success'' || r.Status === ''Completed'').length,\n      failedRuns: promptRuns.filter(r => r.Status === ''Failed'' || r.Status === ''Error'').length,\n      avgExecutionTime: 0,\n      totalTokens: 0,\n      uniquePrompts: new Set(promptRuns.map(r => r.PromptID)).size\n    };\n    \n    const validTimes = promptRuns\n      .filter(r => r.TotalExecutionTime)\n      .map(r => r.TotalExecutionTime);\n    \n    if (validTimes.length > 0) {\n      stats.avgExecutionTime = validTimes.reduce((a, b) => a + b, 0) / validTimes.length;\n    }\n    \n    stats.totalTokens = promptRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return stats;\n  }, [promptRuns]);\n  \n  const stats = calculatePromptStats();\n  \n  // Group vendors by type\n  const vendorsByType = useMemo(() => {\n    const grouped = {\n      ''Model Developer'': [],\n      ''Inference Provider'': []\n    };\n    \n    vendors.forEach(v => {\n      if (grouped[v.Type]) {\n        grouped[v.Type].push(v);\n      }\n    });\n    \n    return grouped;\n  }, [vendors]);\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        width: ''520px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 1000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {model?.Name || ''No Model Selected''}\n              </h2>\n              {model?.APIName && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {model.APIName}\n                </div>\n              )}\n              {model?.IsActive !== undefined && (\n                <div style={{ marginTop: styles.spacing.sm }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              \u2715\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {model ? (\n            <>\n              {/* Model Description */}\n              {model.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {model.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Model Specifications */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Specifications\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Token Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Output Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.OutputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Cost Rank\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.warning || styles.colors.secondary\n                    }}>\n                      {''$''.repeat(Math.min(model.CostRank || 0, 5))}\n                      <span style={{ opacity: 0.3 }}>\n                        {''$''.repeat(Math.max(0, 5 - (model.CostRank || 0)))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vendors Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Vendors ({vendors.length})\n                </h3>\n                \n                {/* Model Developer */}\n                {vendorsByType[''Model Developer''].length > 0 && (\n                  <div style={{ marginBottom: styles.spacing.md }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Model Developer'')}\n                      Model Developer\n                    </div>\n                    {vendorsByType[''Model Developer''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm,\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''center''\n                        }}\n                      >\n                        <div>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {vendor.Vendor}\n                          </div>\n                          {vendor.APIName && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              API: {vendor.APIName}\n                            </div>\n                          )}\n                        </div>\n                        {renderStatusBadge(vendor.Status)}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Inference Providers */}\n                {vendorsByType[''Inference Provider''].length > 0 && (\n                  <div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Inference Provider'')}\n                      Inference Providers\n                    </div>\n                    {vendorsByType[''Inference Provider''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm\n                        }}\n                      >\n                        <div style={{\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''flex-start'',\n                          marginBottom: styles.spacing.sm\n                        }}>\n                          <div>\n                            <div style={{\n                              fontSize: styles.typography.fontSize.md,\n                              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                              color: styles.colors.text\n                            }}>\n                              {vendor.Vendor}\n                            </div>\n                            {vendor.APIName && (\n                              <div style={{\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                fontFamily: ''monospace''\n                              }}>\n                                API: {vendor.APIName}\n                              </div>\n                            )}\n                          </div>\n                          <div style={{\n                            display: ''flex'',\n                            gap: styles.spacing.xs,\n                            alignItems: ''center''\n                          }}>\n                            {vendor.Priority && (\n                              <span style={{\n                                padding: `2px $' + '{styles.spacing.xs}`,\n                                backgroundColor: styles.colors.info + ''15'',\n                                color: styles.colors.info || styles.colors.primary,\n                                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                              }}>\n                                Priority: {vendor.Priority}\n                              </span>\n                            )}\n                            {renderStatusBadge(vendor.Status)}\n                          </div>\n                        </div>\n                        \n                        {/* Vendor Capabilities */}\n                        <div style={{\n                          display: ''flex'',\n                          gap: styles.spacing.xs,\n                          flexWrap: ''wrap''\n                        }}>\n                          {vendor.SupportsStreaming && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Streaming\n                            </span>\n                          )}\n                          {vendor.SupportsEffortLevel && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Effort Level\n                            </span>\n                          )}\n                          {vendor.MaxInputTokens && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.background,\n                              color: styles.colors.textSecondary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              Max: {formatTokens(vendor.MaxInputTokens)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Usage Statistics */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Usage Statistics\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Runs\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.totalRuns.toLocaleString()}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Success Rate\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: stats.totalRuns > 0 \n                        ? (stats.successfulRuns / stats.totalRuns >= 0.9 ? styles.colors.success : styles.colors.warning)\n                        : styles.colors.text\n                    }}>\n                      {stats.totalRuns > 0 \n                        ? `$' + '{((stats.successfulRuns / stats.totalRuns) * 100).toFixed(1)}%`\n                        : ''-''}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Unique Prompts\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.uniquePrompts}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Tokens\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(stats.totalTokens)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Model Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select a model from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {model && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Model Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelFilter",
      "title": "AI Model Filter",
      "description": "Collapsible filter panel for filtering models by type, status, developer, and provider",
      "type": "form",
      "functionalRequirements": "Provide filters for model type, status, developer, and provider with active filter indicators",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [],
      "events": [],
      "exampleUsage": "<AIModelFilter ... />",
      "code": "function AIModelFilter({ \n  filters, \n  onFilterChange, \n  modelTypes,\n  vendors,\n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle model type filter change\n  const handleModelTypeChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      modelType: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle developer filter change\n  const handleDeveloperChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      developer: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle inference provider filter change\n  const handleProviderChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      provider: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle status filter change\n  const handleStatusChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      isActive: e.target.value === '''' ? undefined : e.target.value === ''true''\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  // Get unique developers and providers\n  const developers = useMemo(() => {\n    return vendors.filter(v => v.Name && v.Name.includes(''Developer'')).map(v => v.Name);\n  }, [vendors]);\n  \n  const providers = useMemo(() => {\n    return vendors.filter(v => v.Name && !v.Name.includes(''Developer'')).map(v => v.Name);\n  }, [vendors]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''\u2192'' : ''\u2190''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            \ud83d\udd0d\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Model Type Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Model Type\n            </label>\n            <select\n              value={filters?.modelType || ''''}\n              onChange={handleModelTypeChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Types</option>\n              {modelTypes.map((type) => (\n                <option key={type.ID} value={type.ID}>\n                  {type.Name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Status Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Status\n            </label>\n            <select\n              value={filters?.isActive || ''''}\n              onChange={handleStatusChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"Active\">Active</option>\n              <option value=\"Inactive\">Inactive</option>\n              <option value=\"Deprecated\">Deprecated</option>\n              <option value=\"Preview\">Preview</option>\n            </select>\n          </div>\n          \n          {/* Model Developer Filter */}\n          {developers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Model Developer\n              </label>\n              <select\n                value={filters?.developer || ''''}\n                onChange={handleDeveloperChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Developers</option>\n                {developers.map((dev) => (\n                  <option key={dev} value={dev}>\n                    {dev}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Inference Provider Filter */}\n          {providers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Inference Provider\n              </label>\n              <select\n                value={filters?.provider || ''''}\n                onChange={handleProviderChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Providers</option>\n                {providers.map((provider) => (\n                  <option key={provider} value={provider}>\n                    {provider}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.modelType && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Type:\n                      </span>\n                      <strong>{modelTypes.find(t => t.ID === filters.modelType)?.Name || filters.modelType}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleModelTypeChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.isActive && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Status:\n                      </span>\n                      <strong>{filters.isActive}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleStatusChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.developer && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Developer:\n                      </span>\n                      <strong>{filters.developer}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleDeveloperChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.provider && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Provider:\n                      </span>\n                      <strong>{filters.provider}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleProviderChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelAnalytics",
      "title": "AI Model Analytics",
      "description": "Analytics panel with charts showing prompt usage distribution, performance metrics, and time series",
      "type": "chart",
      "functionalRequirements": "Display pie chart for prompt usage, bar chart for performance, time series for usage trends",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [],
      "events": [],
      "exampleUsage": "<AIModelAnalytics ... />",
      "code": "function AIModelAnalytics({ \n  model,\n  promptRuns,\n  view,\n  onViewChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate prompt usage statistics\n  const promptStats = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    const stats = {};\n    promptRuns.forEach(run => {\n      const promptName = run.PromptName || ''Unknown'';\n      if (!stats[promptName]) {\n        stats[promptName] = {\n          name: promptName,\n          runs: 0,\n          successfulRuns: 0,\n          failedRuns: 0,\n          totalTokens: 0,\n          avgExecutionTime: 0,\n          executionTimes: []\n        };\n      }\n      \n      stats[promptName].runs++;\n      if (run.Status === ''Success'' || run.Status === ''Completed'') {\n        stats[promptName].successfulRuns++;\n      } else if (run.Status === ''Failed'' || run.Status === ''Error'') {\n        stats[promptName].failedRuns++;\n      }\n      \n      stats[promptName].totalTokens += run.TotalTokens || 0;\n      if (run.TotalExecutionTime) {\n        stats[promptName].executionTimes.push(run.TotalExecutionTime);\n      }\n    });\n    \n    // Calculate averages\n    Object.values(stats).forEach(stat => {\n      if (stat.executionTimes.length > 0) {\n        stat.avgExecutionTime = stat.executionTimes.reduce((a, b) => a + b, 0) / stat.executionTimes.length;\n      }\n    });\n    \n    return Object.values(stats).sort((a, b) => b.runs - a.runs);\n  }, [promptRuns]);\n  \n  // Calculate time series data\n  const timeSeriesData = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    // Group by day\n    const dailyStats = {};\n    promptRuns.forEach(run => {\n      if (run.StartTime) {\n        const date = new Date(run.StartTime).toLocaleDateString();\n        if (!dailyStats[date]) {\n          dailyStats[date] = {\n            date,\n            runs: 0,\n            tokens: 0,\n            errors: 0\n          };\n        }\n        dailyStats[date].runs++;\n        dailyStats[date].tokens += run.TotalTokens || 0;\n        if (run.Status === ''Failed'' || run.Status === ''Error'') {\n          dailyStats[date].errors++;\n        }\n      }\n    });\n    \n    return Object.values(dailyStats).sort((a, b) => new Date(a.date) - new Date(b.date));\n  }, [promptRuns]);\n  \n  // Render pie chart\n  const renderPieChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No prompt data available\n        </div>\n      );\n    }\n    \n    const total = promptStats.reduce((sum, stat) => sum + stat.runs, 0);\n    const colors = [\n      styles.colors.primary,\n      styles.colors.success || ''#4CAF50'',\n      styles.colors.warning || ''#FF9800'',\n      styles.colors.error || ''#F44336'',\n      styles.colors.info || ''#2196F3'',\n      ''#9C27B0'', ''#00BCD4'', ''#8BC34A'', ''#FFC107'', ''#795548''\n    ];\n    \n    // Create simple pie chart using SVG\n    let currentAngle = 0;\n    const segments = promptStats.slice(0, 5).map((stat, index) => {\n      const percentage = stat.runs / total;\n      const angle = percentage * 360;\n      const largeArcFlag = angle > 180 ? 1 : 0;\n      \n      const startX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      currentAngle += angle;\n      \n      const endX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const endY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      const pathData = [\n        `M 100 100`,\n        `L $' + '{startX} $' + '{startY}`,\n        `A 80 80 0 $' + '{largeArcFlag} 1 $' + '{endX} $' + '{endY}`,\n        ''Z''\n      ].join('' '');\n      \n      return {\n        path: pathData,\n        color: colors[index % colors.length],\n        percentage,\n        stat\n      };\n    });\n    \n    return (\n      <div>\n        <svg viewBox=\"0 0 200 200\" style={{ width: ''200px'', height: ''200px'', margin: ''0 auto'', display: ''block'' }}>\n          {segments.map((segment, index) => (\n            <g key={index}>\n              <path\n                d={segment.path}\n                fill={segment.color}\n                stroke={styles.colors.background}\n                strokeWidth=\"2\"\n                style={{ cursor: ''pointer'' }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.opacity = ''0.8'';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.opacity = ''1'';\n                }}\n              />\n            </g>\n          ))}\n        </svg>\n        \n        {/* Legend */}\n        <div style={{\n          marginTop: styles.spacing.md,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.xs\n        }}>\n          {segments.map((segment, index) => (\n            <div\n              key={index}\n              style={{\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              <div style={{\n                width: ''12px'',\n                height: ''12px'',\n                backgroundColor: segment.color,\n                borderRadius: ''2px''\n              }} />\n              <div style={{\n                flex: 1,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {segment.stat.name}\n              </div>\n              <div style={{\n                color: styles.colors.textSecondary,\n                fontWeight: styles.typography.fontWeight?.medium || ''500''\n              }}>\n                {(segment.percentage * 100).toFixed(1)}%\n              </div>\n            </div>\n          ))}\n          {promptStats.length > 5 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              fontStyle: ''italic''\n            }}>\n              +{promptStats.length - 5} more prompts\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render bar chart for performance\n  const renderPerformanceChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No performance data available\n        </div>\n      );\n    }\n    \n    const maxTime = Math.max(...promptStats.map(s => s.avgExecutionTime || 0));\n    const displayStats = promptStats.slice(0, 10);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.sm\n        }}>\n          {displayStats.map((stat, index) => (\n            <div key={index} style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.sm }}>\n              <div style={{\n                width: ''100px'',\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {stat.name}\n              </div>\n              <div style={{\n                flex: 1,\n                height: ''20px'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                overflow: ''hidden'',\n                position: ''relative''\n              }}>\n                <div style={{\n                  width: maxTime > 0 ? `$' + '{(stat.avgExecutionTime / maxTime) * 100}%` : ''0%'',\n                  height: ''100%'',\n                  backgroundColor: styles.colors.primary,\n                  transition: ''width 0.3s''\n                }} />\n                <div style={{\n                  position: ''absolute'',\n                  right: styles.spacing.xs,\n                  top: ''50%'',\n                  transform: ''translateY(-50%)'',\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary\n                }}>\n                  {stat.avgExecutionTime ? `$' + '{(stat.avgExecutionTime / 1000).toFixed(2)}s` : ''-''}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render time series chart\n  const renderTimeSeriesChart = () => {\n    if (timeSeriesData.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No time series data available\n        </div>\n      );\n    }\n    \n    const maxRuns = Math.max(...timeSeriesData.map(d => d.runs));\n    const recentData = timeSeriesData.slice(-7);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          alignItems: ''flex-end'',\n          height: ''150px'',\n          gap: styles.spacing.xs,\n          marginBottom: styles.spacing.sm\n        }}>\n          {recentData.map((data, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 1,\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                gap: styles.spacing.xs\n              }}\n            >\n              <div style={{\n                width: ''100%'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                position: ''relative'',\n                flex: 1,\n                display: ''flex'',\n                alignItems: ''flex-end''\n              }}>\n                <div style={{\n                  width: ''100%'',\n                  height: maxRuns > 0 ? `$' + '{(data.runs / maxRuns) * 100}%` : ''0%'',\n                  backgroundColor: data.errors > 0 \n                    ? styles.colors.error \n                    : styles.colors.primary,\n                  borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                  transition: ''height 0.3s''\n                }} />\n              </div>\n              <div style={{\n                fontSize: ''10px'',\n                color: styles.colors.textSecondary,\n                textAlign: ''center''\n              }}>\n                {new Date(data.date).toLocaleDateString(''en'', { month: ''short'', day: ''numeric'' })}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n          color: styles.colors.textSecondary\n        }}>\n          <span>Runs per day (last 7 days)</span>\n          <span>Max: {maxRuns}</span>\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      backgroundColor: styles.colors.surface\n    }}>\n      {/* Header with View Selector */}\n      <div style={{\n        padding: styles.spacing.lg,\n        borderBottom: `1px solid $' + '{styles.colors.border}`\n      }}>\n        <h3 style={{\n          margin: 0,\n          marginBottom: styles.spacing.md,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n          color: styles.colors.text\n        }}>\n          Analytics\n        </h3>\n        \n        {/* View Tabs */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.xs,\n          borderBottom: `1px solid $' + '{styles.colors.border}`\n        }}>\n          <button\n            onClick={() => onViewChange?.(''prompts'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''prompts'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''prompts'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Prompt Usage\n          </button>\n          <button\n            onClick={() => onViewChange?.(''performance'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''performance'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''performance'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Performance\n          </button>\n          <button\n            onClick={() => onViewChange?.(''timeline'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''timeline'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''timeline'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Timeline\n          </button>\n        </div>\n      </div>\n      \n      {/* Content Area */}\n      <div style={{\n        flex: 1,\n        padding: styles.spacing.lg,\n        overflow: ''auto''\n      }}>\n        {!model ? (\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            height: ''100%'',\n            color: styles.colors.textSecondary,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Select a model to view analytics\n          </div>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.lg\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Total Runs\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptRuns.length}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Unique Prompts\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptStats.length}\n                </div>\n              </div>\n            </div>\n            \n            {/* Chart Area */}\n            <div>\n              {view === ''prompts'' && renderPieChart()}\n              {view === ''performance'' && renderPerformanceChart()}\n              {view === ''timeline'' && renderTimeSeriesChart()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    }
  ],
  "libraries": [],
  "code": "function AIModelBrowser({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { AIModelList, AIModelDetails, AIModelFilter, AIModelAnalytics } = components;\n  \n  // Initialize state from saved settings where appropriate\n  const [selectedModelId, setSelectedModelId] = useState(savedUserSettings?.selectedModelId);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''grid'');\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [sortBy, setSortBy] = useState(savedUserSettings?.sortBy || ''Name'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''asc'');\n  const [filterPanelCollapsed, setFilterPanelCollapsed] = useState(savedUserSettings?.filterPanelCollapsed || false);\n  const [analyticsView, setAnalyticsView] = useState(savedUserSettings?.analyticsView || ''prompts'');\n  \n  // Runtime UI state (not persisted)\n  const [models, setModels] = useState([]);\n  const [modelVendors, setModelVendors] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [modelTypes, setModelTypes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [detailsPanelOpen, setDetailsPanelOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('''');\n  \n  // Load models on mount and when filters/sort change\n  useEffect(() => {\n    const loadModels = async () => {\n      setLoading(true);\n      try {\n        // Build filter string for models\n        let filterParts = [];\n        if (searchQuery) {\n          filterParts.push(`(Name LIKE ''%$' + '{searchQuery}%'' OR APIName LIKE ''%$' + '{searchQuery}%'' OR Description LIKE ''%$' + '{searchQuery}%'')`);\n        }\n        if (filters.modelType) {\n          filterParts.push(`AIModelTypeID = ''$' + '{filters.modelType}''`);\n        }\n        if (filters.isActive !== undefined) {\n          filterParts.push(`IsActive = $' + '{filters.isActive}`);\n        }\n        \n        // Load AI Models\n        const modelsResult = await utilities.rv.RunView({\n          EntityName: ''AI Models'',\n          Fields: [''ID'', ''Name'', ''APIName'', ''Description'', ''AIModelTypeID'', ''InputTokenLimit'', \n                   ''CostRank'', ''IsActive'', ''__mj_CreatedAt'', ''__mj_UpdatedAt''],\n          OrderBy: `$' + '{sortBy} $' + '{sortDirection.toUpperCase()}`,\n          ExtraFilter: filterParts.length > 0 ? filterParts.join('' AND '') : undefined\n        });\n        \n        if (modelsResult?.Success && modelsResult?.Results) {\n          setModels(modelsResult.Results);\n        } else {\n          console.error(''Failed to load models:'', modelsResult?.ErrorMessage);\n          setModels([]);\n        }\n        \n        // Load Model Types for filter\n        const typesResult = await utilities.rv.RunView({\n          EntityName: ''AI Model Types'',\n          Fields: [''ID'', ''Name'', ''Description''],\n          OrderBy: ''Name ASC''\n        });\n        \n        if (typesResult?.Success && typesResult?.Results) {\n          setModelTypes(typesResult.Results);\n        }\n        \n        // Load Vendors (from AI Model Vendors)\n        const vendorsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Model Vendors'',\n          Fields: [''ID'', ''ModelID'', ''VendorID'', ''TypeID'', ''Model'', ''Vendor'', ''Type'', ''Status'', ''Priority''],\n          OrderBy: ''Vendor ASC, Model ASC''\n        });\n        \n        if (vendorsResult?.Success && vendorsResult?.Results) {\n          const vendorData = vendorsResult.Results;\n          setModelVendors(vendorData);\n          \n          // Extract unique vendors\n          const uniqueVendors = [...new Set(vendorData.map(v => v.Vendor))].filter(Boolean);\n          setVendors(uniqueVendors.map(name => ({ Name: name })));\n        }\n      } catch (error) {\n        console.error(''Error loading models:'', error);\n        setModels([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadModels();\n  }, [filters, sortBy, sortDirection, searchQuery, utilities.rv]);\n  \n  // Load model details and analytics when selection changes\n  useEffect(() => {\n    const loadModelDetails = async () => {\n      if (!selectedModelId) {\n        setPromptRuns([]);\n        return;\n      }\n      \n      try {\n        // Load prompt runs for this model\n        const promptRunsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Prompt Runs'',\n          Fields: [''ID'', ''PromptID'', ''ModelID'', ''StartTime'', ''EndTime'', ''TotalExecutionTime'', \n                   ''InputTokens'', ''OutputTokens'', ''TotalTokens'', ''Status'', ''Error''],\n          OrderBy: ''StartTime DESC'',\n          ExtraFilter: `ModelID = ''$' + '{selectedModelId}''`,\n          MaxRows: 1000\n        });\n        \n        if (promptRunsResult?.Success && promptRunsResult?.Results) {\n          // Enrich with prompt names\n          const promptIds = [...new Set(promptRunsResult.Results.map(r => r.PromptID))].filter(Boolean);\n          \n          if (promptIds.length > 0) {\n            const promptsResult = await utilities.rv.RunView({\n              EntityName: ''AI Prompts'',\n              Fields: [''ID'', ''Name'', ''Description'', ''CategoryID''],\n              ExtraFilter: `ID IN (''$' + '{promptIds.join(\"'',''\")}'')`\n            });\n            \n            const promptMap = {};\n            if (promptsResult?.Success && promptsResult?.Results) {\n              promptsResult.Results.forEach(p => {\n                promptMap[p.ID] = p;\n              });\n            }\n            \n            // Enrich prompt runs with prompt names\n            const enrichedRuns = promptRunsResult.Results.map(run => ({\n              ...run,\n              PromptName: promptMap[run.PromptID]?.Name || ''Unknown Prompt'',\n              PromptDescription: promptMap[run.PromptID]?.Description\n            }));\n            \n            setPromptRuns(enrichedRuns);\n          } else {\n            setPromptRuns(promptRunsResult.Results);\n          }\n        } else {\n          setPromptRuns([]);\n        }\n      } catch (error) {\n        console.error(''Error loading model details:'', error);\n        setPromptRuns([]);\n      }\n    };\n    \n    loadModelDetails();\n  }, [selectedModelId, utilities.rv]);\n  \n  // Handle model selection\n  const handleSelectModel = useCallback((modelId) => {\n    setSelectedModelId(modelId);\n    setDetailsPanelOpen(true);\n    \n    // Save user preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedModelId: modelId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode) => {\n    setViewMode(mode);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      viewMode: mode\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    \n    // Save filter preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle sort changes\n  const handleSortChange = useCallback((newSortBy, newSortDirection) => {\n    setSortBy(newSortBy);\n    setSortDirection(newSortDirection);\n    \n    // Save sort preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortBy: newSortBy,\n      sortDirection: newSortDirection\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter panel toggle\n  const handleToggleFilter = useCallback(() => {\n    const newCollapsed = !filterPanelCollapsed;\n    setFilterPanelCollapsed(newCollapsed);\n    \n    // Save collapsed state\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterPanelCollapsed: newCollapsed\n    });\n  }, [filterPanelCollapsed, savedUserSettings, onSaveUserSettings]);\n  \n  // Handle analytics view change\n  const handleAnalyticsViewChange = useCallback((view) => {\n    setAnalyticsView(view);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      analyticsView: view\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle opening model record\n  const handleOpenRecord = useCallback((modelName) => {\n    console.log(''Opening AI Model record:'', modelName);\n    if (callbacks?.OpenEntityRecord && modelName) {\n      callbacks.OpenEntityRecord(''AI Models'', [{ FieldName: ''Name'', Value: modelName }]);\n    }\n  }, [callbacks]);\n  \n  // Handle closing details panel\n  const handleCloseDetails = useCallback(() => {\n    setDetailsPanelOpen(false);\n  }, []);\n  \n  // Handle search\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n  }, []);\n  \n  // Get selected model object\n  const selectedModel = models.find(m => m.ID === selectedModelId);\n  \n  // Get vendors for selected model\n  const selectedModelVendors = modelVendors.filter(v => v.ModelID === selectedModelId);\n  \n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Loading state\n  if (loading && models.length === 0) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100vh'',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading AI models...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      display: ''flex'',\n      height: ''100vh'',\n      backgroundColor: styles.colors.background,\n      overflow: ''hidden''\n    }}>\n      {/* Filter Panel */}\n      {AIModelFilter && (\n        <AIModelFilter\n          filters={filters}\n          onFilterChange={handleFilterChange}\n          modelTypes={modelTypes}\n          vendors={vendors}\n          isCollapsed={filterPanelCollapsed}\n          onToggleCollapse={handleToggleFilter}\n          savedUserSettings={savedUserSettings?.filterPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            filterPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center'',\n            marginBottom: styles.spacing.md\n          }}>\n            <h1 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              AI Model Browser\n            </h1>\n            \n            {/* View Mode Toggle */}\n            <div style={{\n              display: ''flex'',\n              gap: styles.spacing.sm,\n              alignItems: ''center''\n            }}>\n              <span style={{\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.textSecondary\n              }}>\n                View:\n              </span>\n              <button\n                onClick={() => handleViewModeChange(''grid'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''grid'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''grid'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Grid\n              </button>\n              <button\n                onClick={() => handleViewModeChange(''list'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''list'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''list'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                List\n              </button>\n            </div>\n          </div>\n          \n          {/* Search Bar */}\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.md\n          }}>\n            <input\n              type=\"text\"\n              placeholder=\"Search AI models...\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              style={{\n                flex: 1,\n                padding: styles.spacing.md,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background\n              }}\n            />\n            {searchQuery && (\n              <button\n                onClick={() => handleSearch('''')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: styles.colors.surfaceHover || styles.colors.surface,\n                  color: styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Model List and Analytics Split View */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          overflow: ''hidden''\n        }}>\n          {/* Model List */}\n          <div style={{\n            flex: 1,\n            overflow: ''auto'',\n            padding: styles.spacing.lg\n          }}>\n            {AIModelList && (\n              <AIModelList\n                models={models}\n                modelVendors={modelVendors}\n                viewMode={viewMode}\n                selectedModelId={selectedModelId}\n                onSelectModel={handleSelectModel}\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n                onSortChange={handleSortChange}\n                savedUserSettings={savedUserSettings?.modelList}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  modelList: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            )}\n            \n            {/* Empty State */}\n            {models.length === 0 && !loading && (\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                padding: styles.spacing.xxl || styles.spacing.xl,\n                color: styles.colors.textSecondary\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xl,\n                  marginBottom: styles.spacing.md\n                }}>\n                  No AI models found\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {searchQuery || Object.keys(filters).length > 0\n                    ? ''Try adjusting your filters or search query''\n                    : ''No AI models are available''}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Analytics Panel */}\n          {selectedModel && AIModelAnalytics && (\n            <div style={{\n              width: ''400px'',\n              borderLeft: `1px solid $' + '{styles.colors.border}`,\n              overflow: ''hidden'',\n              display: ''flex'',\n              flexDirection: ''column''\n            }}>\n              <AIModelAnalytics\n                model={selectedModel}\n                promptRuns={promptRuns}\n                view={analyticsView}\n                onViewChange={handleAnalyticsViewChange}\n                savedUserSettings={savedUserSettings?.analytics}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  analytics: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Details Panel */}\n      {AIModelDetails && (\n        <AIModelDetails\n          model={selectedModel}\n          vendors={selectedModelVendors}\n          promptRuns={promptRuns}\n          isOpen={detailsPanelOpen}\n          onClose={handleCloseDetails}\n          onOpenRecord={() => handleOpenRecord(selectedModel?.Name)}\n          savedUserSettings={savedUserSettings?.detailsPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            detailsPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n    </div>\n  );\n}"
}'
SET
  @FunctionalRequirements_1c4d330e = N'## AI Model Browser Requirements

### Core Functionality
- Display AI models in grid or list view with comprehensive information
- Filter models by Model Type, Status, Model Developer, and Inference Provider
- View detailed model specifications including context window, token limits, and cost ranking
- Display all vendors associated with a model (model developers and inference providers)
- Show prompt run history and usage statistics for selected models
- Visualize prompt usage with pie charts showing distribution across different prompts
- Display performance metrics with bar charts showing average execution times
- Show time series data for model usage over time
- Support sorting by multiple fields with visual indicators
- Include search functionality for quick model filtering
- Provide ''Open'' button to trigger OpenEntityRecord callback for detailed editing

### Analytics Features
- Pie chart visualization of prompt usage distribution
- Performance bar charts showing average execution times per prompt
- Time series chart showing model usage trends over last 7 days
- Summary statistics including total runs, success rates, and token usage
- Grouped vendor display by type (Model Developer vs Inference Provider)

### UX Considerations
- Collapsible filter panel with active filter count indicator
- Sliding details panel for comprehensive model information
- Inline analytics panel with tabbed views for different visualizations
- Smooth animations for panel transitions and chart rendering
- Responsive design adapting to different screen sizes
- Loading states while fetching data
- Empty states with helpful messages
- Visual feedback for hover and selection states
- Maintain user preferences for view mode and filter state'
SET
  @TechnicalDesign_1c4d330e = N'## Component Architecture

### Root Component (AIModelBrowser)
- Manages overall state and data loading
- Coordinates between filter, list, details, and analytics components
- Handles user preferences and saved settings
- Manages search and sort state

### Child Components
1. **AIModelList**: Displays models in grid or list view with vendor information
2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors
3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering
4. **AIModelAnalytics**: Inline analytics panel with charts and statistics

### Data Flow
- Root component loads all models and vendor associations
- Filters are applied at the root level and filtered data passed to list
- Selection in list triggers detail loading and analytics calculation
- Analytics component processes prompt runs to generate visualizations

### Chart Implementation
- Pie charts using SVG for prompt usage distribution
- Bar charts for performance metrics
- Time series charts for usage trends
- All charts are responsive and interactive'
SET
  @HasCustomProps_1c4d330e = 0
SET
  @HasCustomEvents_1c4d330e = 0
SET
  @RequiresData_1c4d330e = 1
SET
  @DependencyCount_1c4d330e = 4
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_1c4d330e,
  @Namespace = @Namespace_1c4d330e,
  @Name = @Name_1c4d330e,
  @Version = @Version_1c4d330e,
  @VersionSequence = @VersionSequence_1c4d330e,
  @Title = @Title_1c4d330e,
  @Description = @Description_1c4d330e,
  @Type = @Type_1c4d330e,
  @Status = @Status_1c4d330e,
  @DeveloperName = @DeveloperName_1c4d330e,
  @DeveloperEmail = @DeveloperEmail_1c4d330e,
  @DeveloperOrganization = @DeveloperOrganization_1c4d330e,
  @SourceRegistryID = @SourceRegistryID_1c4d330e,
  @ReplicatedAt = @ReplicatedAt_1c4d330e,
  @LastSyncedAt = @LastSyncedAt_1c4d330e,
  @Specification = @Specification_1c4d330e,
  @FunctionalRequirements = @FunctionalRequirements_1c4d330e,
  @TechnicalDesign = @TechnicalDesign_1c4d330e,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_1c4d330e,
  @TechnicalDesignVector = @TechnicalDesignVector_1c4d330e,
  @HasCustomProps = @HasCustomProps_1c4d330e,
  @HasCustomEvents = @HasCustomEvents_1c4d330e,
  @RequiresData = @RequiresData_1c4d330e,
  @DependencyCount = @DependencyCount_1c4d330e;

-- Save MJ: Components (core SP call only)
DECLARE @ID_af63a2bb UNIQUEIDENTIFIER,
@Namespace_af63a2bb NVARCHAR(MAX),
@Name_af63a2bb NVARCHAR(500),
@Version_af63a2bb NVARCHAR(50),
@VersionSequence_af63a2bb INT,
@Title_af63a2bb NVARCHAR(1000),
@Description_af63a2bb NVARCHAR(MAX),
@Type_af63a2bb NVARCHAR(255),
@Status_af63a2bb NVARCHAR(50),
@DeveloperName_af63a2bb NVARCHAR(255),
@DeveloperEmail_af63a2bb NVARCHAR(255),
@DeveloperOrganization_af63a2bb NVARCHAR(255),
@SourceRegistryID_af63a2bb UNIQUEIDENTIFIER,
@ReplicatedAt_af63a2bb DATETIMEOFFSET,
@LastSyncedAt_af63a2bb DATETIMEOFFSET,
@Specification_af63a2bb NVARCHAR(MAX),
@FunctionalRequirements_af63a2bb NVARCHAR(MAX),
@TechnicalDesign_af63a2bb NVARCHAR(MAX),
@FunctionalRequirementsVector_af63a2bb NVARCHAR(MAX),
@TechnicalDesignVector_af63a2bb NVARCHAR(MAX),
@HasCustomProps_af63a2bb BIT,
@HasCustomEvents_af63a2bb BIT,
@RequiresData_af63a2bb BIT,
@DependencyCount_af63a2bb INT
SET
  @ID_af63a2bb = 'e1ef6814-43cc-491d-94dc-aabebc946800'
SET
  @Namespace_af63a2bb = N'AI'
SET
  @Name_af63a2bb = N'AIModelList'
SET
  @Version_af63a2bb = N'1.0.0'
SET
  @VersionSequence_af63a2bb = 1
SET
  @Title_af63a2bb = N'AI Model List'
SET
  @Description_af63a2bb = N'Displays AI models in grid or list view with vendor information and sorting'
SET
  @Type_af63a2bb = N'Other'
SET
  @Status_af63a2bb = N'Published'
SET
  @Specification_af63a2bb = N'{
    "name": "AIModelList",
    "title": "AI Model List",
    "description": "Displays AI models in grid or list view with vendor information and sorting",
    "type": "table",
    "functionalRequirements": "Display models with vendor counts, support grid and list views, handle sorting and selection",
    "dataRequirements": null,
    "technicalDesign": "",
    "properties": [],
    "events": [],
    "exampleUsage": "<AIModelList ... />",
    "code": "function AIModelList({ \n  models, \n  modelVendors,\n  viewMode, \n  selectedModelId, \n  onSelectModel, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Get vendor info for a model\n  const getModelVendorInfo = useCallback((modelId) => {\n    const vendors = modelVendors.filter(v => v.ModelID === modelId);\n    const inferenceProviders = vendors.filter(v => v.Type === ''Inference Provider'');\n    const modelDeveloper = vendors.find(v => v.Type === ''Model Developer'');\n    \n    return {\n      inferenceProviders,\n      modelDeveloper,\n      vendorCount: vendors.length\n    };\n  }, [modelVendors]);\n  \n  // Handle sort column click\n  const handleSort = useCallback((field) => {\n    if (sortBy === field) {\n      onSortChange?.(field, sortDirection === ''asc'' ? ''desc'' : ''asc'');\n    } else {\n      onSortChange?.(field, ''asc'');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{\n        marginLeft: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {sortDirection === ''asc'' ? ''\u25b2'' : ''\u25bc''}\n      </span>\n    );\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render cost rank\n  const renderCostRank = (rank) => {\n    if (rank == null) return ''-'';\n    \n    const maxStars = 5;\n    const filledStars = Math.min(rank, maxStars);\n    \n    return (\n      <span style={{\n        color: styles.colors.warning || styles.colors.secondary,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {''$''.repeat(filledStars)}\n        <span style={{ opacity: 0.3 }}>\n          {''$''.repeat(maxStars - filledStars)}\n        </span>\n      </span>\n    );\n  };\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Grid view rendering\n  const renderGridView = () => (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fill, minmax(320px, 1fr))'',\n      gap: styles.spacing.lg\n    }}>\n      {models.map((model) => {\n        const vendorInfo = getModelVendorInfo(model.ID);\n        const isSelected = model.ID === selectedModelId;\n        \n        return (\n          <div\n            key={model.ID}\n            onClick={() => onSelectModel?.(model.ID)}\n            style={{\n              backgroundColor: styles.colors.surface,\n              borderRadius: getBorderRadius(''md''),\n              padding: styles.spacing.lg,\n              cursor: ''pointer'',\n              transition: ''all 0.2s'',\n              border: isSelected \n                ? `2px solid $' + '{styles.colors.primary}`\n                : `1px solid $' + '{styles.colors.border}`,\n              boxShadow: isSelected \n                ? `0 4px 12px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}`\n                : ''none''\n            }}\n            onMouseEnter={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.primary;\n                e.currentTarget.style.boxShadow = `0 2px 8px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.05)''}`;\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.border;\n                e.currentTarget.style.boxShadow = ''none'';\n              }\n            }}\n          >\n            {/* Model Header */}\n            <div style={{\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''flex-start'',\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{ flex: 1 }}>\n                <h3 style={{\n                  margin: 0,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {model.Name}\n                </h3>\n                {model.APIName && (\n                  <div style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    fontFamily: ''monospace''\n                  }}>\n                    {model.APIName}\n                  </div>\n                )}\n              </div>\n              {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n            </div>\n            \n            {/* Model Description */}\n            {model.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                marginBottom: styles.spacing.md,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                display: ''-webkit-box'',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: ''vertical''\n              }}>\n                {model.Description}\n              </div>\n            )}\n            \n            {/* Model Specs */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Input Token Limit\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Cost Rank\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </div>\n              </div>\n            </div>\n            \n            {/* Vendor Info */}\n            <div style={{\n              paddingTop: styles.spacing.md,\n              borderTop: `1px solid $' + '{styles.colors.border}`,\n              display: ''flex'',\n              gap: styles.spacing.md,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              {vendorInfo.modelDeveloper && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Dev:</span>\n                  <span style={{ \n                    color: styles.colors.text,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.modelDeveloper.Vendor}\n                  </span>\n                </div>\n              )}\n              {vendorInfo.inferenceProviders.length > 0 && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Providers:</span>\n                  <span style={{ \n                    color: styles.colors.primary,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.inferenceProviders.length}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n  \n  // List view rendering\n  const renderListView = () => (\n    <div style={{\n      backgroundColor: styles.colors.surface,\n      borderRadius: getBorderRadius(''md''),\n      overflow: ''hidden''\n    }}>\n      <table style={{\n        width: ''100%'',\n        borderCollapse: ''collapse''\n      }}>\n        <thead>\n          <tr style={{\n            borderBottom: `2px solid $' + '{styles.colors.border}`\n          }}>\n            <th\n              onClick={() => handleSort(''Name'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Model Name\n              {renderSortIndicator(''Name'')}\n            </th>\n            <th\n              onClick={() => handleSort(''Status'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Status\n              {renderSortIndicator(''Status'')}\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Developer\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Providers\n            </th>\n            <th\n              onClick={() => handleSort(''InputTokenLimit'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''right'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Input Limit\n              {renderSortIndicator(''InputTokenLimit'')}\n            </th>\n            <th\n              onClick={() => handleSort(''CostRank'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''center'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Cost\n              {renderSortIndicator(''CostRank'')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {models.map((model, index) => {\n            const vendorInfo = getModelVendorInfo(model.ID);\n            const isSelected = model.ID === selectedModelId;\n            \n            return (\n              <tr\n                key={model.ID}\n                onClick={() => onSelectModel?.(model.ID)}\n                style={{\n                  borderBottom: index < models.length - 1 \n                    ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                    : ''none'',\n                  backgroundColor: isSelected \n                    ? styles.colors.primaryLight || styles.colors.primary + ''10''\n                    : ''transparent'',\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = ''transparent'';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  <div>\n                    <div style={{\n                      fontWeight: isSelected \n                        ? (styles.typography.fontWeight?.semibold || ''600'')\n                        : (styles.typography.fontWeight?.regular || ''400''),\n                      color: styles.colors.text\n                    }}>\n                      {model.Name}\n                    </div>\n                    {model.APIName && (\n                      <div style={{\n                        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                        color: styles.colors.textSecondary,\n                        fontFamily: ''monospace''\n                      }}>\n                        {model.APIName}\n                      </div>\n                    )}\n                  </div>\n                </td>\n                <td style={{\n                  padding: styles.spacing.md\n                }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {vendorInfo.modelDeveloper?.Vendor || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {vendorInfo.inferenceProviders.length > 0 ? (\n                    <div style={{\n                      display: ''flex'',\n                      gap: styles.spacing.xs,\n                      flexWrap: ''wrap''\n                    }}>\n                      {vendorInfo.inferenceProviders.slice(0, 3).map((provider, idx) => (\n                        <span\n                          key={idx}\n                          style={{\n                            padding: `2px $' + '{styles.spacing.xs}`,\n                            backgroundColor: styles.colors.primary + ''15'',\n                            color: styles.colors.primary,\n                            borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                          }}\n                        >\n                          {provider.Vendor}\n                        </span>\n                      ))}\n                      {vendorInfo.inferenceProviders.length > 3 && (\n                        <span style={{\n                          color: styles.colors.textSecondary,\n                          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                        }}>\n                          +{vendorInfo.inferenceProviders.length - 3}\n                        </span>\n                      )}\n                    </div>\n                  ) : (\n                    <span style={{ color: styles.colors.textSecondary }}>-</span>\n                  )}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''right'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''center''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n  \n  return viewMode === ''grid'' ? renderGridView() : renderListView();\n}",
    "dependencies": [],
    "libraries": []
}'
SET
  @FunctionalRequirements_af63a2bb = N'Display models with vendor counts, support grid and list views, handle sorting and selection'
SET
  @TechnicalDesign_af63a2bb = N''
SET
  @HasCustomProps_af63a2bb = 0
SET
  @HasCustomEvents_af63a2bb = 0
SET
  @RequiresData_af63a2bb = 0
SET
  @DependencyCount_af63a2bb = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_af63a2bb,
  @Namespace = @Namespace_af63a2bb,
  @Name = @Name_af63a2bb,
  @Version = @Version_af63a2bb,
  @VersionSequence = @VersionSequence_af63a2bb,
  @Title = @Title_af63a2bb,
  @Description = @Description_af63a2bb,
  @Type = @Type_af63a2bb,
  @Status = @Status_af63a2bb,
  @DeveloperName = @DeveloperName_af63a2bb,
  @DeveloperEmail = @DeveloperEmail_af63a2bb,
  @DeveloperOrganization = @DeveloperOrganization_af63a2bb,
  @SourceRegistryID = @SourceRegistryID_af63a2bb,
  @ReplicatedAt = @ReplicatedAt_af63a2bb,
  @LastSyncedAt = @LastSyncedAt_af63a2bb,
  @Specification = @Specification_af63a2bb,
  @FunctionalRequirements = @FunctionalRequirements_af63a2bb,
  @TechnicalDesign = @TechnicalDesign_af63a2bb,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_af63a2bb,
  @TechnicalDesignVector = @TechnicalDesignVector_af63a2bb,
  @HasCustomProps = @HasCustomProps_af63a2bb,
  @HasCustomEvents = @HasCustomEvents_af63a2bb,
  @RequiresData = @RequiresData_af63a2bb,
  @DependencyCount = @DependencyCount_af63a2bb;

-- Save MJ: Components (core SP call only)
DECLARE @ID_f9695316 UNIQUEIDENTIFIER,
@Namespace_f9695316 NVARCHAR(MAX),
@Name_f9695316 NVARCHAR(500),
@Version_f9695316 NVARCHAR(50),
@VersionSequence_f9695316 INT,
@Title_f9695316 NVARCHAR(1000),
@Description_f9695316 NVARCHAR(MAX),
@Type_f9695316 NVARCHAR(255),
@Status_f9695316 NVARCHAR(50),
@DeveloperName_f9695316 NVARCHAR(255),
@DeveloperEmail_f9695316 NVARCHAR(255),
@DeveloperOrganization_f9695316 NVARCHAR(255),
@SourceRegistryID_f9695316 UNIQUEIDENTIFIER,
@ReplicatedAt_f9695316 DATETIMEOFFSET,
@LastSyncedAt_f9695316 DATETIMEOFFSET,
@Specification_f9695316 NVARCHAR(MAX),
@FunctionalRequirements_f9695316 NVARCHAR(MAX),
@TechnicalDesign_f9695316 NVARCHAR(MAX),
@FunctionalRequirementsVector_f9695316 NVARCHAR(MAX),
@TechnicalDesignVector_f9695316 NVARCHAR(MAX),
@HasCustomProps_f9695316 BIT,
@HasCustomEvents_f9695316 BIT,
@RequiresData_f9695316 BIT,
@DependencyCount_f9695316 INT
SET
  @ID_f9695316 = '36437a85-4421-44b9-b14b-ba8f4c0f7ff3'
SET
  @Namespace_f9695316 = N'AI'
SET
  @Name_f9695316 = N'AIModelDetails'
SET
  @Version_f9695316 = N'1.0.0'
SET
  @VersionSequence_f9695316 = 1
SET
  @Title_f9695316 = N'AI Model Details'
SET
  @Description_f9695316 = N'Sliding details panel showing comprehensive model information, vendors, and usage statistics'
SET
  @Type_f9695316 = N'Other'
SET
  @Status_f9695316 = N'Published'
SET
  @Specification_f9695316 = N'{
    "name": "AIModelDetails",
    "title": "AI Model Details",
    "description": "Sliding details panel showing comprehensive model information, vendors, and usage statistics",
    "type": "detail",
    "functionalRequirements": "Show model specs, vendor associations grouped by type, usage statistics, and open record button",
    "dataRequirements": null,
    "technicalDesign": "",
    "properties": [],
    "events": [],
    "exampleUsage": "<AIModelDetails ... />",
    "code": "function AIModelDetails({ \n  model, \n  vendors,\n  promptRuns,\n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''AIModelDetails handleOpenRecord called'', { model, onOpenRecord });\n    if (model?.Name) {\n      console.log(''Calling onOpenRecord with model name:'', model.Name);\n      if (onOpenRecord) {\n        onOpenRecord(model.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No model or model name available'');\n    }\n  }, [model, onOpenRecord]);\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render vendor type icon\n  const renderVendorTypeIcon = (type) => {\n    const icons = {\n      ''Model Developer'': ''\ud83c\udfe2'',\n      ''Inference Provider'': ''\ud83d\ude80''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        marginRight: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.md\n      }}>\n        {icons[type] || ''\ud83d\udce6''}\n      </span>\n    );\n  };\n  \n  // Calculate prompt statistics\n  const calculatePromptStats = useCallback(() => {\n    if (!promptRuns || promptRuns.length === 0) {\n      return {\n        totalRuns: 0,\n        successfulRuns: 0,\n        failedRuns: 0,\n        avgExecutionTime: 0,\n        totalTokens: 0,\n        uniquePrompts: 0\n      };\n    }\n    \n    const stats = {\n      totalRuns: promptRuns.length,\n      successfulRuns: promptRuns.filter(r => r.Status === ''Success'' || r.Status === ''Completed'').length,\n      failedRuns: promptRuns.filter(r => r.Status === ''Failed'' || r.Status === ''Error'').length,\n      avgExecutionTime: 0,\n      totalTokens: 0,\n      uniquePrompts: new Set(promptRuns.map(r => r.PromptID)).size\n    };\n    \n    const validTimes = promptRuns\n      .filter(r => r.TotalExecutionTime)\n      .map(r => r.TotalExecutionTime);\n    \n    if (validTimes.length > 0) {\n      stats.avgExecutionTime = validTimes.reduce((a, b) => a + b, 0) / validTimes.length;\n    }\n    \n    stats.totalTokens = promptRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return stats;\n  }, [promptRuns]);\n  \n  const stats = calculatePromptStats();\n  \n  // Group vendors by type\n  const vendorsByType = useMemo(() => {\n    const grouped = {\n      ''Model Developer'': [],\n      ''Inference Provider'': []\n    };\n    \n    vendors.forEach(v => {\n      if (grouped[v.Type]) {\n        grouped[v.Type].push(v);\n      }\n    });\n    \n    return grouped;\n  }, [vendors]);\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: 0,\n        right: 0,\n        bottom: 0,\n        width: ''520px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 1000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {model?.Name || ''No Model Selected''}\n              </h2>\n              {model?.APIName && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {model.APIName}\n                </div>\n              )}\n              {model?.IsActive !== undefined && (\n                <div style={{ marginTop: styles.spacing.sm }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              \u2715\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {model ? (\n            <>\n              {/* Model Description */}\n              {model.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {model.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Model Specifications */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Specifications\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Token Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Output Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.OutputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Cost Rank\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.warning || styles.colors.secondary\n                    }}>\n                      {''$''.repeat(Math.min(model.CostRank || 0, 5))}\n                      <span style={{ opacity: 0.3 }}>\n                        {''$''.repeat(Math.max(0, 5 - (model.CostRank || 0)))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vendors Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Vendors ({vendors.length})\n                </h3>\n                \n                {/* Model Developer */}\n                {vendorsByType[''Model Developer''].length > 0 && (\n                  <div style={{ marginBottom: styles.spacing.md }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Model Developer'')}\n                      Model Developer\n                    </div>\n                    {vendorsByType[''Model Developer''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm,\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''center''\n                        }}\n                      >\n                        <div>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {vendor.Vendor}\n                          </div>\n                          {vendor.APIName && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              API: {vendor.APIName}\n                            </div>\n                          )}\n                        </div>\n                        {renderStatusBadge(vendor.Status)}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Inference Providers */}\n                {vendorsByType[''Inference Provider''].length > 0 && (\n                  <div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Inference Provider'')}\n                      Inference Providers\n                    </div>\n                    {vendorsByType[''Inference Provider''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm\n                        }}\n                      >\n                        <div style={{\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''flex-start'',\n                          marginBottom: styles.spacing.sm\n                        }}>\n                          <div>\n                            <div style={{\n                              fontSize: styles.typography.fontSize.md,\n                              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                              color: styles.colors.text\n                            }}>\n                              {vendor.Vendor}\n                            </div>\n                            {vendor.APIName && (\n                              <div style={{\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                fontFamily: ''monospace''\n                              }}>\n                                API: {vendor.APIName}\n                              </div>\n                            )}\n                          </div>\n                          <div style={{\n                            display: ''flex'',\n                            gap: styles.spacing.xs,\n                            alignItems: ''center''\n                          }}>\n                            {vendor.Priority && (\n                              <span style={{\n                                padding: `2px $' + '{styles.spacing.xs}`,\n                                backgroundColor: styles.colors.info + ''15'',\n                                color: styles.colors.info || styles.colors.primary,\n                                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                              }}>\n                                Priority: {vendor.Priority}\n                              </span>\n                            )}\n                            {renderStatusBadge(vendor.Status)}\n                          </div>\n                        </div>\n                        \n                        {/* Vendor Capabilities */}\n                        <div style={{\n                          display: ''flex'',\n                          gap: styles.spacing.xs,\n                          flexWrap: ''wrap''\n                        }}>\n                          {vendor.SupportsStreaming && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Streaming\n                            </span>\n                          )}\n                          {vendor.SupportsEffortLevel && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Effort Level\n                            </span>\n                          )}\n                          {vendor.MaxInputTokens && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.background,\n                              color: styles.colors.textSecondary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              Max: {formatTokens(vendor.MaxInputTokens)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Usage Statistics */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Usage Statistics\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Runs\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.totalRuns.toLocaleString()}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Success Rate\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: stats.totalRuns > 0 \n                        ? (stats.successfulRuns / stats.totalRuns >= 0.9 ? styles.colors.success : styles.colors.warning)\n                        : styles.colors.text\n                    }}>\n                      {stats.totalRuns > 0 \n                        ? `$' + '{((stats.successfulRuns / stats.totalRuns) * 100).toFixed(1)}%`\n                        : ''-''}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Unique Prompts\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.uniquePrompts}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Tokens\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(stats.totalTokens)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Model Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select a model from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {model && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Model Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}",
    "dependencies": [],
    "libraries": []
}'
SET
  @FunctionalRequirements_f9695316 = N'Show model specs, vendor associations grouped by type, usage statistics, and open record button'
SET
  @TechnicalDesign_f9695316 = N''
SET
  @HasCustomProps_f9695316 = 0
SET
  @HasCustomEvents_f9695316 = 0
SET
  @RequiresData_f9695316 = 0
SET
  @DependencyCount_f9695316 = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_f9695316,
  @Namespace = @Namespace_f9695316,
  @Name = @Name_f9695316,
  @Version = @Version_f9695316,
  @VersionSequence = @VersionSequence_f9695316,
  @Title = @Title_f9695316,
  @Description = @Description_f9695316,
  @Type = @Type_f9695316,
  @Status = @Status_f9695316,
  @DeveloperName = @DeveloperName_f9695316,
  @DeveloperEmail = @DeveloperEmail_f9695316,
  @DeveloperOrganization = @DeveloperOrganization_f9695316,
  @SourceRegistryID = @SourceRegistryID_f9695316,
  @ReplicatedAt = @ReplicatedAt_f9695316,
  @LastSyncedAt = @LastSyncedAt_f9695316,
  @Specification = @Specification_f9695316,
  @FunctionalRequirements = @FunctionalRequirements_f9695316,
  @TechnicalDesign = @TechnicalDesign_f9695316,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_f9695316,
  @TechnicalDesignVector = @TechnicalDesignVector_f9695316,
  @HasCustomProps = @HasCustomProps_f9695316,
  @HasCustomEvents = @HasCustomEvents_f9695316,
  @RequiresData = @RequiresData_f9695316,
  @DependencyCount = @DependencyCount_f9695316;

-- Save MJ: Components (core SP call only)
DECLARE @ID_bc491fda UNIQUEIDENTIFIER,
@Namespace_bc491fda NVARCHAR(MAX),
@Name_bc491fda NVARCHAR(500),
@Version_bc491fda NVARCHAR(50),
@VersionSequence_bc491fda INT,
@Title_bc491fda NVARCHAR(1000),
@Description_bc491fda NVARCHAR(MAX),
@Type_bc491fda NVARCHAR(255),
@Status_bc491fda NVARCHAR(50),
@DeveloperName_bc491fda NVARCHAR(255),
@DeveloperEmail_bc491fda NVARCHAR(255),
@DeveloperOrganization_bc491fda NVARCHAR(255),
@SourceRegistryID_bc491fda UNIQUEIDENTIFIER,
@ReplicatedAt_bc491fda DATETIMEOFFSET,
@LastSyncedAt_bc491fda DATETIMEOFFSET,
@Specification_bc491fda NVARCHAR(MAX),
@FunctionalRequirements_bc491fda NVARCHAR(MAX),
@TechnicalDesign_bc491fda NVARCHAR(MAX),
@FunctionalRequirementsVector_bc491fda NVARCHAR(MAX),
@TechnicalDesignVector_bc491fda NVARCHAR(MAX),
@HasCustomProps_bc491fda BIT,
@HasCustomEvents_bc491fda BIT,
@RequiresData_bc491fda BIT,
@DependencyCount_bc491fda INT
SET
  @ID_bc491fda = '9eae9cf7-fa87-40cc-a9cd-a8e095a040f9'
SET
  @Namespace_bc491fda = N'AI'
SET
  @Name_bc491fda = N'AIModelFilter'
SET
  @Version_bc491fda = N'1.0.0'
SET
  @VersionSequence_bc491fda = 1
SET
  @Title_bc491fda = N'AI Model Filter'
SET
  @Description_bc491fda = N'Collapsible filter panel for filtering models by type, status, developer, and provider'
SET
  @Type_bc491fda = N'Other'
SET
  @Status_bc491fda = N'Published'
SET
  @Specification_bc491fda = N'{
    "name": "AIModelFilter",
    "title": "AI Model Filter",
    "description": "Collapsible filter panel for filtering models by type, status, developer, and provider",
    "type": "form",
    "functionalRequirements": "Provide filters for model type, status, developer, and provider with active filter indicators",
    "dataRequirements": null,
    "technicalDesign": "",
    "properties": [],
    "events": [],
    "exampleUsage": "<AIModelFilter ... />",
    "code": "function AIModelFilter({ \n  filters, \n  onFilterChange, \n  modelTypes,\n  vendors,\n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle model type filter change\n  const handleModelTypeChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      modelType: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle developer filter change\n  const handleDeveloperChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      developer: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle inference provider filter change\n  const handleProviderChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      provider: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle status filter change\n  const handleStatusChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      isActive: e.target.value === '''' ? undefined : e.target.value === ''true''\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  // Get unique developers and providers\n  const developers = useMemo(() => {\n    return vendors.filter(v => v.Name && v.Name.includes(''Developer'')).map(v => v.Name);\n  }, [vendors]);\n  \n  const providers = useMemo(() => {\n    return vendors.filter(v => v.Name && !v.Name.includes(''Developer'')).map(v => v.Name);\n  }, [vendors]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''\u2192'' : ''\u2190''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            \ud83d\udd0d\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Model Type Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Model Type\n            </label>\n            <select\n              value={filters?.modelType || ''''}\n              onChange={handleModelTypeChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Types</option>\n              {modelTypes.map((type) => (\n                <option key={type.ID} value={type.ID}>\n                  {type.Name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Status Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Status\n            </label>\n            <select\n              value={filters?.isActive || ''''}\n              onChange={handleStatusChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"Active\">Active</option>\n              <option value=\"Inactive\">Inactive</option>\n              <option value=\"Deprecated\">Deprecated</option>\n              <option value=\"Preview\">Preview</option>\n            </select>\n          </div>\n          \n          {/* Model Developer Filter */}\n          {developers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Model Developer\n              </label>\n              <select\n                value={filters?.developer || ''''}\n                onChange={handleDeveloperChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Developers</option>\n                {developers.map((dev) => (\n                  <option key={dev} value={dev}>\n                    {dev}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Inference Provider Filter */}\n          {providers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Inference Provider\n              </label>\n              <select\n                value={filters?.provider || ''''}\n                onChange={handleProviderChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Providers</option>\n                {providers.map((provider) => (\n                  <option key={provider} value={provider}>\n                    {provider}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.modelType && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Type:\n                      </span>\n                      <strong>{modelTypes.find(t => t.ID === filters.modelType)?.Name || filters.modelType}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleModelTypeChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.isActive && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Status:\n                      </span>\n                      <strong>{filters.isActive}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleStatusChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.developer && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Developer:\n                      </span>\n                      <strong>{filters.developer}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleDeveloperChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.provider && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Provider:\n                      </span>\n                      <strong>{filters.provider}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleProviderChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
    "dependencies": [],
    "libraries": []
}'
SET
  @FunctionalRequirements_bc491fda = N'Provide filters for model type, status, developer, and provider with active filter indicators'
SET
  @TechnicalDesign_bc491fda = N''
SET
  @HasCustomProps_bc491fda = 0
SET
  @HasCustomEvents_bc491fda = 0
SET
  @RequiresData_bc491fda = 0
SET
  @DependencyCount_bc491fda = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_bc491fda,
  @Namespace = @Namespace_bc491fda,
  @Name = @Name_bc491fda,
  @Version = @Version_bc491fda,
  @VersionSequence = @VersionSequence_bc491fda,
  @Title = @Title_bc491fda,
  @Description = @Description_bc491fda,
  @Type = @Type_bc491fda,
  @Status = @Status_bc491fda,
  @DeveloperName = @DeveloperName_bc491fda,
  @DeveloperEmail = @DeveloperEmail_bc491fda,
  @DeveloperOrganization = @DeveloperOrganization_bc491fda,
  @SourceRegistryID = @SourceRegistryID_bc491fda,
  @ReplicatedAt = @ReplicatedAt_bc491fda,
  @LastSyncedAt = @LastSyncedAt_bc491fda,
  @Specification = @Specification_bc491fda,
  @FunctionalRequirements = @FunctionalRequirements_bc491fda,
  @TechnicalDesign = @TechnicalDesign_bc491fda,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_bc491fda,
  @TechnicalDesignVector = @TechnicalDesignVector_bc491fda,
  @HasCustomProps = @HasCustomProps_bc491fda,
  @HasCustomEvents = @HasCustomEvents_bc491fda,
  @RequiresData = @RequiresData_bc491fda,
  @DependencyCount = @DependencyCount_bc491fda;

-- Save MJ: Components (core SP call only)
DECLARE @ID_941858eb UNIQUEIDENTIFIER,
@Namespace_941858eb NVARCHAR(MAX),
@Name_941858eb NVARCHAR(500),
@Version_941858eb NVARCHAR(50),
@VersionSequence_941858eb INT,
@Title_941858eb NVARCHAR(1000),
@Description_941858eb NVARCHAR(MAX),
@Type_941858eb NVARCHAR(255),
@Status_941858eb NVARCHAR(50),
@DeveloperName_941858eb NVARCHAR(255),
@DeveloperEmail_941858eb NVARCHAR(255),
@DeveloperOrganization_941858eb NVARCHAR(255),
@SourceRegistryID_941858eb UNIQUEIDENTIFIER,
@ReplicatedAt_941858eb DATETIMEOFFSET,
@LastSyncedAt_941858eb DATETIMEOFFSET,
@Specification_941858eb NVARCHAR(MAX),
@FunctionalRequirements_941858eb NVARCHAR(MAX),
@TechnicalDesign_941858eb NVARCHAR(MAX),
@FunctionalRequirementsVector_941858eb NVARCHAR(MAX),
@TechnicalDesignVector_941858eb NVARCHAR(MAX),
@HasCustomProps_941858eb BIT,
@HasCustomEvents_941858eb BIT,
@RequiresData_941858eb BIT,
@DependencyCount_941858eb INT
SET
  @ID_941858eb = '48819aba-2062-429c-abd5-a9fde8661ab2'
SET
  @Namespace_941858eb = N'AI'
SET
  @Name_941858eb = N'AIModelAnalytics'
SET
  @Version_941858eb = N'1.0.0'
SET
  @VersionSequence_941858eb = 1
SET
  @Title_941858eb = N'AI Model Analytics'
SET
  @Description_941858eb = N'Analytics panel with charts showing prompt usage distribution, performance metrics, and time series'
SET
  @Type_941858eb = N'Chart'
SET
  @Status_941858eb = N'Published'
SET
  @Specification_941858eb = N'{
    "name": "AIModelAnalytics",
    "title": "AI Model Analytics",
    "description": "Analytics panel with charts showing prompt usage distribution, performance metrics, and time series",
    "type": "chart",
    "functionalRequirements": "Display pie chart for prompt usage, bar chart for performance, time series for usage trends",
    "dataRequirements": null,
    "technicalDesign": "",
    "properties": [],
    "events": [],
    "exampleUsage": "<AIModelAnalytics ... />",
    "code": "function AIModelAnalytics({ \n  model,\n  promptRuns,\n  view,\n  onViewChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate prompt usage statistics\n  const promptStats = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    const stats = {};\n    promptRuns.forEach(run => {\n      const promptName = run.PromptName || ''Unknown'';\n      if (!stats[promptName]) {\n        stats[promptName] = {\n          name: promptName,\n          runs: 0,\n          successfulRuns: 0,\n          failedRuns: 0,\n          totalTokens: 0,\n          avgExecutionTime: 0,\n          executionTimes: []\n        };\n      }\n      \n      stats[promptName].runs++;\n      if (run.Status === ''Success'' || run.Status === ''Completed'') {\n        stats[promptName].successfulRuns++;\n      } else if (run.Status === ''Failed'' || run.Status === ''Error'') {\n        stats[promptName].failedRuns++;\n      }\n      \n      stats[promptName].totalTokens += run.TotalTokens || 0;\n      if (run.TotalExecutionTime) {\n        stats[promptName].executionTimes.push(run.TotalExecutionTime);\n      }\n    });\n    \n    // Calculate averages\n    Object.values(stats).forEach(stat => {\n      if (stat.executionTimes.length > 0) {\n        stat.avgExecutionTime = stat.executionTimes.reduce((a, b) => a + b, 0) / stat.executionTimes.length;\n      }\n    });\n    \n    return Object.values(stats).sort((a, b) => b.runs - a.runs);\n  }, [promptRuns]);\n  \n  // Calculate time series data\n  const timeSeriesData = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    // Group by day\n    const dailyStats = {};\n    promptRuns.forEach(run => {\n      if (run.StartTime) {\n        const date = new Date(run.StartTime).toLocaleDateString();\n        if (!dailyStats[date]) {\n          dailyStats[date] = {\n            date,\n            runs: 0,\n            tokens: 0,\n            errors: 0\n          };\n        }\n        dailyStats[date].runs++;\n        dailyStats[date].tokens += run.TotalTokens || 0;\n        if (run.Status === ''Failed'' || run.Status === ''Error'') {\n          dailyStats[date].errors++;\n        }\n      }\n    });\n    \n    return Object.values(dailyStats).sort((a, b) => new Date(a.date) - new Date(b.date));\n  }, [promptRuns]);\n  \n  // Render pie chart\n  const renderPieChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No prompt data available\n        </div>\n      );\n    }\n    \n    const total = promptStats.reduce((sum, stat) => sum + stat.runs, 0);\n    const colors = [\n      styles.colors.primary,\n      styles.colors.success || ''#4CAF50'',\n      styles.colors.warning || ''#FF9800'',\n      styles.colors.error || ''#F44336'',\n      styles.colors.info || ''#2196F3'',\n      ''#9C27B0'', ''#00BCD4'', ''#8BC34A'', ''#FFC107'', ''#795548''\n    ];\n    \n    // Create simple pie chart using SVG\n    let currentAngle = 0;\n    const segments = promptStats.slice(0, 5).map((stat, index) => {\n      const percentage = stat.runs / total;\n      const angle = percentage * 360;\n      const largeArcFlag = angle > 180 ? 1 : 0;\n      \n      const startX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      currentAngle += angle;\n      \n      const endX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const endY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      const pathData = [\n        `M 100 100`,\n        `L $' + '{startX} $' + '{startY}`,\n        `A 80 80 0 $' + '{largeArcFlag} 1 $' + '{endX} $' + '{endY}`,\n        ''Z''\n      ].join('' '');\n      \n      return {\n        path: pathData,\n        color: colors[index % colors.length],\n        percentage,\n        stat\n      };\n    });\n    \n    return (\n      <div>\n        <svg viewBox=\"0 0 200 200\" style={{ width: ''200px'', height: ''200px'', margin: ''0 auto'', display: ''block'' }}>\n          {segments.map((segment, index) => (\n            <g key={index}>\n              <path\n                d={segment.path}\n                fill={segment.color}\n                stroke={styles.colors.background}\n                strokeWidth=\"2\"\n                style={{ cursor: ''pointer'' }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.opacity = ''0.8'';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.opacity = ''1'';\n                }}\n              />\n            </g>\n          ))}\n        </svg>\n        \n        {/* Legend */}\n        <div style={{\n          marginTop: styles.spacing.md,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.xs\n        }}>\n          {segments.map((segment, index) => (\n            <div\n              key={index}\n              style={{\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              <div style={{\n                width: ''12px'',\n                height: ''12px'',\n                backgroundColor: segment.color,\n                borderRadius: ''2px''\n              }} />\n              <div style={{\n                flex: 1,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {segment.stat.name}\n              </div>\n              <div style={{\n                color: styles.colors.textSecondary,\n                fontWeight: styles.typography.fontWeight?.medium || ''500''\n              }}>\n                {(segment.percentage * 100).toFixed(1)}%\n              </div>\n            </div>\n          ))}\n          {promptStats.length > 5 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              fontStyle: ''italic''\n            }}>\n              +{promptStats.length - 5} more prompts\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render bar chart for performance\n  const renderPerformanceChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No performance data available\n        </div>\n      );\n    }\n    \n    const maxTime = Math.max(...promptStats.map(s => s.avgExecutionTime || 0));\n    const displayStats = promptStats.slice(0, 10);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.sm\n        }}>\n          {displayStats.map((stat, index) => (\n            <div key={index} style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.sm }}>\n              <div style={{\n                width: ''100px'',\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {stat.name}\n              </div>\n              <div style={{\n                flex: 1,\n                height: ''20px'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                overflow: ''hidden'',\n                position: ''relative''\n              }}>\n                <div style={{\n                  width: maxTime > 0 ? `$' + '{(stat.avgExecutionTime / maxTime) * 100}%` : ''0%'',\n                  height: ''100%'',\n                  backgroundColor: styles.colors.primary,\n                  transition: ''width 0.3s''\n                }} />\n                <div style={{\n                  position: ''absolute'',\n                  right: styles.spacing.xs,\n                  top: ''50%'',\n                  transform: ''translateY(-50%)'',\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary\n                }}>\n                  {stat.avgExecutionTime ? `$' + '{(stat.avgExecutionTime / 1000).toFixed(2)}s` : ''-''}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render time series chart\n  const renderTimeSeriesChart = () => {\n    if (timeSeriesData.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No time series data available\n        </div>\n      );\n    }\n    \n    const maxRuns = Math.max(...timeSeriesData.map(d => d.runs));\n    const recentData = timeSeriesData.slice(-7);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          alignItems: ''flex-end'',\n          height: ''150px'',\n          gap: styles.spacing.xs,\n          marginBottom: styles.spacing.sm\n        }}>\n          {recentData.map((data, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 1,\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                gap: styles.spacing.xs\n              }}\n            >\n              <div style={{\n                width: ''100%'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                position: ''relative'',\n                flex: 1,\n                display: ''flex'',\n                alignItems: ''flex-end''\n              }}>\n                <div style={{\n                  width: ''100%'',\n                  height: maxRuns > 0 ? `$' + '{(data.runs / maxRuns) * 100}%` : ''0%'',\n                  backgroundColor: data.errors > 0 \n                    ? styles.colors.error \n                    : styles.colors.primary,\n                  borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                  transition: ''height 0.3s''\n                }} />\n              </div>\n              <div style={{\n                fontSize: ''10px'',\n                color: styles.colors.textSecondary,\n                textAlign: ''center''\n              }}>\n                {new Date(data.date).toLocaleDateString(''en'', { month: ''short'', day: ''numeric'' })}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n          color: styles.colors.textSecondary\n        }}>\n          <span>Runs per day (last 7 days)</span>\n          <span>Max: {maxRuns}</span>\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      backgroundColor: styles.colors.surface\n    }}>\n      {/* Header with View Selector */}\n      <div style={{\n        padding: styles.spacing.lg,\n        borderBottom: `1px solid $' + '{styles.colors.border}`\n      }}>\n        <h3 style={{\n          margin: 0,\n          marginBottom: styles.spacing.md,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n          color: styles.colors.text\n        }}>\n          Analytics\n        </h3>\n        \n        {/* View Tabs */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.xs,\n          borderBottom: `1px solid $' + '{styles.colors.border}`\n        }}>\n          <button\n            onClick={() => onViewChange?.(''prompts'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''prompts'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''prompts'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Prompt Usage\n          </button>\n          <button\n            onClick={() => onViewChange?.(''performance'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''performance'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''performance'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Performance\n          </button>\n          <button\n            onClick={() => onViewChange?.(''timeline'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''timeline'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''timeline'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Timeline\n          </button>\n        </div>\n      </div>\n      \n      {/* Content Area */}\n      <div style={{\n        flex: 1,\n        padding: styles.spacing.lg,\n        overflow: ''auto''\n      }}>\n        {!model ? (\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            height: ''100%'',\n            color: styles.colors.textSecondary,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Select a model to view analytics\n          </div>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.lg\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Total Runs\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptRuns.length}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Unique Prompts\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptStats.length}\n                </div>\n              </div>\n            </div>\n            \n            {/* Chart Area */}\n            <div>\n              {view === ''prompts'' && renderPieChart()}\n              {view === ''performance'' && renderPerformanceChart()}\n              {view === ''timeline'' && renderTimeSeriesChart()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}",
    "dependencies": [],
    "libraries": []
}'
SET
  @FunctionalRequirements_941858eb = N'Display pie chart for prompt usage, bar chart for performance, time series for usage trends'
SET
  @TechnicalDesign_941858eb = N''
SET
  @HasCustomProps_941858eb = 0
SET
  @HasCustomEvents_941858eb = 0
SET
  @RequiresData_941858eb = 0
SET
  @DependencyCount_941858eb = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_941858eb,
  @Namespace = @Namespace_941858eb,
  @Name = @Name_941858eb,
  @Version = @Version_941858eb,
  @VersionSequence = @VersionSequence_941858eb,
  @Title = @Title_941858eb,
  @Description = @Description_941858eb,
  @Type = @Type_941858eb,
  @Status = @Status_941858eb,
  @DeveloperName = @DeveloperName_941858eb,
  @DeveloperEmail = @DeveloperEmail_941858eb,
  @DeveloperOrganization = @DeveloperOrganization_941858eb,
  @SourceRegistryID = @SourceRegistryID_941858eb,
  @ReplicatedAt = @ReplicatedAt_941858eb,
  @LastSyncedAt = @LastSyncedAt_941858eb,
  @Specification = @Specification_941858eb,
  @FunctionalRequirements = @FunctionalRequirements_941858eb,
  @TechnicalDesign = @TechnicalDesign_941858eb,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_941858eb,
  @TechnicalDesignVector = @TechnicalDesignVector_941858eb,
  @HasCustomProps = @HasCustomProps_941858eb,
  @HasCustomEvents = @HasCustomEvents_941858eb,
  @RequiresData = @RequiresData_941858eb,
  @DependencyCount = @DependencyCount_941858eb;


-- End of SQL Logging Session
-- Session ID: 5ce25232-85a4-4725-bd0e-00bb4cb3a78f
-- Completed: 2025-08-14T14:41:32.168Z
-- Duration: 16205ms
-- Total Statements: 13
