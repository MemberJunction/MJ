-- Add Dynamic Code Dashboard Type for Skip UI Components
-- This migration adds support for a new dashboard type that supports dynamically generated code from Skip
-- Unlike the existing 'Code' type which references compiled TypeScript classes and 'Config' type which uses metadata,
-- 'Dynamic Code' will allow for runtime execution of generated JavaScript/React components

-- First, let's check what dashboard types currently exist by looking at existing data
-- Note: The Type column already exists with a default of 'Config' and supports 'Code' type as well

-- Insert a system prompt that will help guide the usage of the new Dynamic Code dashboard type
INSERT INTO ${flyway:defaultSchema}.[__mj].[AIPrompt] 
    (ID, Name, UserPrompt, SystemPrompt, CategoryID, UserID, IsActive, ModelID, ProviderID, IsPublic)
SELECT
    NEWID(),
    'Dynamic Code Dashboard Guidelines',
    'Explain how to use the Dynamic Code dashboard type',
    'The Dynamic Code dashboard type is used for dashboards that contain JavaScript/React components generated at runtime by Skip AI. 
    
Key differences from other dashboard types:
- Config: Uses metadata-driven configuration to define dashboard layout and widgets
- Code: References pre-compiled TypeScript classes in the codebase (e.g., "HelloDemo", "EntityAdmin")  
- Dynamic Code: Contains JavaScript code generated by Skip that is executed at runtime

When creating a Dynamic Code dashboard:
1. The Type field should be set to "Dynamic Code"
2. The Code field should contain the generated JavaScript/React component code
3. The DriverClass field can be left NULL as it''s not used for dynamic code
4. The UIConfigDetails can contain additional configuration if needed

Dynamic Code dashboards are typically created when Skip generates a component of type "dashboard" and the user saves it.',
    (SELECT ID FROM ${flyway:defaultSchema}.[__mj].[AIPromptCategory] WHERE Name = 'System'),
    'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E', -- System user
    1, -- IsActive
    NULL, -- ModelID
    NULL, -- ProviderID  
    1 -- IsPublic
WHERE NOT EXISTS (
    SELECT 1 FROM ${flyway:defaultSchema}.[__mj].[AIPrompt] 
    WHERE Name = 'Dynamic Code Dashboard Guidelines'
);

-- Add extended metadata for the Dashboard entity to document the new type option
INSERT INTO ${flyway:defaultSchema}.[__mj].[EntityFieldValue]
    (EntityFieldID, EntityID, Value, Code)
SELECT 
    (SELECT ID FROM ${flyway:defaultSchema}.[__mj].[EntityField] WHERE EntityID = (SELECT ID FROM ${flyway:defaultSchema}.[__mj].[Entity] WHERE Name = 'Dashboards') AND Name = 'Type'),
    (SELECT ID FROM ${flyway:defaultSchema}.[__mj].[Entity] WHERE Name = 'Dashboards'),
    'Dynamic Code',
    'DYNAMIC_CODE'
WHERE NOT EXISTS (
    SELECT 1 FROM ${flyway:defaultSchema}.[__mj].[EntityFieldValue]
    WHERE EntityFieldID = (SELECT ID FROM ${flyway:defaultSchema}.[__mj].[EntityField] WHERE EntityID = (SELECT ID FROM ${flyway:defaultSchema}.[__mj].[Entity] WHERE Name = 'Dashboards') AND Name = 'Type')
    AND Value = 'Dynamic Code'
);

-- Update the field description to include the new type
UPDATE ${flyway:defaultSchema}.[__mj].[EntityField]
SET Description = 'Type of dashboard: Config (metadata-driven), Code (compiled TypeScript class), or Dynamic Code (runtime-generated JavaScript/React)'
WHERE EntityID = (SELECT ID FROM ${flyway:defaultSchema}.[__mj].[Entity] WHERE Name = 'Dashboards')
AND Name = 'Type'
AND Description NOT LIKE '%Dynamic Code%';

-- Add a comment to document the enhancement
EXEC sp_addextendedproperty 
    @name = N'MS_Description',
    @value = N'Dashboard type supporting Config (metadata), Code (compiled), and Dynamic Code (runtime-generated) options',
    @level0type = N'SCHEMA', @level0name = '${flyway:defaultSchema}',
    @level1type = N'TABLE', @level1name = 'Dashboard',
    @level2type = N'COLUMN', @level2name = 'Type';

-- Log the migration completion
PRINT 'Successfully added Dynamic Code dashboard type support';
PRINT 'Dashboards can now use Type = ''Dynamic Code'' for Skip-generated components';