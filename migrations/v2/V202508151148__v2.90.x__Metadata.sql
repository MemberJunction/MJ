-- SQL Logging Session
-- Session ID: d4e7b38a-1f25-406e-8093-cf44f7a5dd32
-- Started: 2025-08-15T16:44:56.548Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_f11e2656 NVARCHAR(MAX),
@Name_f11e2656 NVARCHAR(500),
@Version_f11e2656 NVARCHAR(50),
@VersionSequence_f11e2656 INT,
@Title_f11e2656 NVARCHAR(1000),
@Description_f11e2656 NVARCHAR(MAX),
@Type_f11e2656 NVARCHAR(255),
@Status_f11e2656 NVARCHAR(50),
@DeveloperName_f11e2656 NVARCHAR(255),
@DeveloperEmail_f11e2656 NVARCHAR(255),
@DeveloperOrganization_f11e2656 NVARCHAR(255),
@SourceRegistryID_f11e2656 UNIQUEIDENTIFIER,
@ReplicatedAt_f11e2656 DATETIMEOFFSET,
@LastSyncedAt_f11e2656 DATETIMEOFFSET,
@Specification_f11e2656 NVARCHAR(MAX),
@FunctionalRequirements_f11e2656 NVARCHAR(MAX),
@TechnicalDesign_f11e2656 NVARCHAR(MAX),
@FunctionalRequirementsVector_f11e2656 NVARCHAR(MAX),
@TechnicalDesignVector_f11e2656 NVARCHAR(MAX),
@HasCustomProps_f11e2656 BIT,
@HasCustomEvents_f11e2656 BIT,
@RequiresData_f11e2656 BIT,
@DependencyCount_f11e2656 INT,
@ID_f11e2656 UNIQUEIDENTIFIER
SET
  @Namespace_f11e2656 = N'AI'
SET
  @Name_f11e2656 = N'AIModelBrowser'
SET
  @Version_f11e2656 = N'1.0.0'
SET
  @VersionSequence_f11e2656 = 1
SET
  @Title_f11e2656 = N'AI Model Browser'
SET
  @Description_f11e2656 = N'A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications'
SET
  @Type_f11e2656 = N'Other'
SET
  @Status_f11e2656 = N'Published'
SET
  @Specification_f11e2656 = N'{
  "name": "AIModelBrowser",
  "title": "AI Model Browser",
  "description": "A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications",
  "type": "dashboard",
  "functionalRequirements": "## AI Model Browser Requirements\n\n### Core Functionality\n- Display AI models in grid or list view with comprehensive information\n- Filter models by Model Type, Status, Model Developer, and Inference Provider\n- View detailed model specifications including context window, token limits, and cost ranking\n- Display all vendors associated with a model (model developers and inference providers)\n- Show prompt run history and usage statistics for selected models\n- Visualize prompt usage with pie charts showing distribution across different prompts\n- Display performance metrics with bar charts showing average execution times\n- Show time series data for model usage over time\n- Support sorting by multiple fields with visual indicators\n- Include search functionality for quick model filtering\n- Provide ''Open'' button to trigger OpenEntityRecord callback for detailed editing\n\n### Analytics Features\n- Pie chart visualization of prompt usage distribution\n- Performance bar charts showing average execution times per prompt\n- Time series chart showing model usage trends over last 7 days\n- Summary statistics including total runs, success rates, and token usage\n- Grouped vendor display by type (Model Developer vs Inference Provider)\n\n### UX Considerations\n- Collapsible filter panel with active filter count indicator\n- Sliding details panel for comprehensive model information\n- Inline analytics panel with tabbed views for different visualizations\n- Smooth animations for panel transitions and chart rendering\n- Responsive design adapting to different screen sizes\n- Loading states while fetching data\n- Empty states with helpful messages\n- Visual feedback for hover and selection states\n- Maintain user preferences for view mode and filter state",
  "dataRequirements": {
    "mode": "views",
    "entities": [
      {
        "name": "AI Models",
        "description": "Core AI model definitions and specifications",
        "displayFields": [
          "ID",
          "Name", 
          "APIName",
          "Description",
          "AIModelTypeID",
          "InputTokenLimit",
          "PowerRank",
          "SpeedRank",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt",
          "__mj_UpdatedAt"
        ],
        "filterFields": [
          "AIModelTypeID",
          "IsActive"
        ],
        "sortFields": [
          "Name",
          "InputTokenLimit",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": true,
            "description": "Unique identifier for the AI model"
          },
          {
            "name": "Name",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "System name of the AI model"
          },
          {
            "name": "APIName",
            "sequence": 4,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "API identifier for the model"
          },
          {
            "name": "InputTokenLimit",
            "sequence": 5,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Maximum input token limit"
          },
          {
            "name": "CostRank",
            "sequence": 6,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Relative cost ranking (1-5)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Main list of AI models"
      },
      {
        "name": "MJ: AI Model Vendors",
        "description": "Vendor associations for AI models",
        "displayFields": [
          "ID",
          "ModelID",
          "VendorID",
          "TypeID",
          "Model",
          "Vendor",
          "Type",
          "Status",
          "Priority",
          "APIName",
          "MaxInputTokens",
          "MaxOutputTokens",
          "SupportsStreaming",
          "SupportsEffortLevel"
        ],
        "filterFields": [
          "ModelID",
          "Type",
          "Status"
        ],
        "sortFields": [
          "Vendor",
          "Priority",
          "Type"
        ],
        "fieldMetadata": [
          {
            "name": "ModelID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Reference to AI Model"
          },
          {
            "name": "Vendor",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor name"
          },
          {
            "name": "Type",
            "sequence": 3,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor type (Model Developer or Inference Provider)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Vendor associations for models"
      },
      {
        "name": "AI Model Types",
        "description": "Types/categories of AI models",
        "displayFields": [
          "ID",
          "Name",
          "Description"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Filter dropdown for model types"
      },
      {
        "name": "MJ: AI Prompt Runs",
        "description": "Execution history for AI prompts",
        "displayFields": [
          "ID",
          "PromptID",
          "ModelID",
          "StartTime",
          "EndTime",
          "TotalExecutionTime",
          "InputTokens",
          "OutputTokens",
          "TotalTokens",
          "Status",
          "Error"
        ],
        "filterFields": [
          "ModelID",
          "PromptID",
          "Status"
        ],
        "sortFields": [
          "StartTime",
          "TotalExecutionTime"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Analytics and usage history"
      },
      {
        "name": "AI Prompts",
        "description": "AI prompt definitions",
        "displayFields": [
          "ID",
          "Name",
          "Description",
          "CategoryID"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Enrich prompt runs with names"
      }
    ]
  },
  "technicalDesign": "## Component Architecture\n\n### Root Component (AIModelBrowser)\n- Manages overall state and data loading\n- Coordinates between filter, list, details, and analytics components\n- Handles user preferences and saved settings\n- Manages search and sort state\n\n### Child Components\n1. **AIModelList**: Displays models in grid or list view with vendor information\n2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors\n3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering\n4. **AIModelAnalytics**: Inline analytics panel with charts and statistics\n\n### Data Flow\n- Root component loads all models and vendor associations\n- Filters are applied at the root level and filtered data passed to list\n- Selection in list triggers detail loading and analytics calculation\n- Analytics component processes prompt runs to generate visualizations\n\n### Chart Implementation\n- Pie charts using SVG for prompt usage distribution\n- Bar charts for performance metrics\n- Time series charts for usage trends\n- All charts are responsive and interactive",
  "properties": [],
  "events": [],
  "exampleUsage": "<AIModelBrowser\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>",
  "dependencies": [
    {
      "name": "AIModelList",
      "title": "AI Model List",
      "description": "Displays AI models in grid or list view with vendor information and sorting",
      "type": "table",
      "functionalRequirements": "Display models with vendor counts, support grid and list views, handle sorting and selection",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "models", "type": "array", "required": true, "description": "Array of AI model objects to display"},
        {"name": "modelVendors", "type": "array", "required": true, "description": "Array of model vendor associations"},
        {"name": "viewMode", "type": "string", "required": true, "description": "Display mode - ''grid'' or ''list''"},
        {"name": "selectedModelId", "type": "string", "required": false, "description": "ID of the currently selected model"},
        {"name": "sortBy", "type": "string", "required": false, "description": "Field to sort by"},
        {"name": "sortDirection", "type": "string", "required": false, "description": "Sort direction - ''asc'' or ''desc''"}
      ],
      "events": [
        {"name": "onSelectModel", "description": "Fired when a model is selected", "parameters": [{"name": "modelId", "type": "string", "description": "ID of the selected model"}]},
        {"name": "onSortChange", "description": "Fired when sort criteria changes", "parameters": [{"name": "sortBy", "type": "string", "description": "Field to sort by"}, {"name": "sortDirection", "type": "string", "description": "Sort direction"}]}
      ],
      "exampleUsage": "<AIModelList ... />",
      "code": "function AIModelList({ \n  models, \n  modelVendors,\n  viewMode, \n  selectedModelId, \n  onSelectModel, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? ''50px'' : ''20px'';\n  };\n  \n  // Get vendor info for a model\n  const getModelVendorInfo = useCallback((modelId) => {\n    const vendors = modelVendors.filter(v => v.ModelID === modelId);\n    const inferenceProviders = vendors.filter(v => v.Type === ''Inference Provider'');\n    const modelDeveloper = vendors.find(v => v.Type === ''Model Developer'');\n    \n    return {\n      inferenceProviders,\n      modelDeveloper,\n      vendorCount: vendors.length\n    };\n  }, [modelVendors]);\n  \n  // Handle sort column click\n  const handleSort = useCallback((field) => {\n    if (sortBy === field) {\n      onSortChange?.(field, sortDirection === ''asc'' ? ''desc'' : ''asc'');\n    } else {\n      onSortChange?.(field, ''asc'');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{\n        marginLeft: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {sortDirection === ''asc'' ? ''\u25b2'' : ''\u25bc''}\n      </span>\n    );\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render cost rank\n  const renderCostRank = (rank) => {\n    if (rank == null) return ''-'';\n    \n    const maxStars = 5;\n    const filledStars = Math.min(rank, maxStars);\n    \n    return (\n      <span style={{\n        color: styles.colors.warning || styles.colors.secondary,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {''$''.repeat(filledStars)}\n        <span style={{ opacity: 0.3 }}>\n          {''$''.repeat(maxStars - filledStars)}\n        </span>\n      </span>\n    );\n  };\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Grid view rendering\n  const renderGridView = () => (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fill, minmax(320px, 1fr))'',\n      gap: styles.spacing.lg\n    }}>\n      {models.map((model) => {\n        const vendorInfo = getModelVendorInfo(model.ID);\n        const isSelected = model.ID === selectedModelId;\n        \n        return (\n          <div\n            key={model.ID}\n            onClick={() => onSelectModel?.(model.ID)}\n            style={{\n              backgroundColor: styles.colors.surface,\n              borderRadius: getBorderRadius(''md''),\n              padding: styles.spacing.lg,\n              cursor: ''pointer'',\n              transition: ''all 0.2s'',\n              border: isSelected \n                ? `2px solid $' + '{styles.colors.primary}`\n                : `1px solid $' + '{styles.colors.border}`,\n              boxShadow: isSelected \n                ? `0 4px 12px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}`\n                : ''none''\n            }}\n            onMouseEnter={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.primary;\n                e.currentTarget.style.boxShadow = `0 2px 8px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.05)''}`;\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.border;\n                e.currentTarget.style.boxShadow = ''none'';\n              }\n            }}\n          >\n            {/* Model Header */}\n            <div style={{\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''flex-start'',\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{ flex: 1 }}>\n                <h3 style={{\n                  margin: 0,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {model.Name}\n                </h3>\n                {model.APIName && (\n                  <div style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    fontFamily: ''monospace''\n                  }}>\n                    {model.APIName}\n                  </div>\n                )}\n              </div>\n              {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n            </div>\n            \n            {/* Model Description */}\n            {model.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                marginBottom: styles.spacing.md,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                display: ''-webkit-box'',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: ''vertical''\n              }}>\n                {model.Description}\n              </div>\n            )}\n            \n            {/* Model Specs */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Input Token Limit\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Cost Rank\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </div>\n              </div>\n            </div>\n            \n            {/* Vendor Info */}\n            <div style={{\n              paddingTop: styles.spacing.md,\n              borderTop: `1px solid $' + '{styles.colors.border}`,\n              display: ''flex'',\n              gap: styles.spacing.md,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              {vendorInfo.modelDeveloper && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Dev:</span>\n                  <span style={{ \n                    color: styles.colors.text,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.modelDeveloper.Vendor}\n                  </span>\n                </div>\n              )}\n              {vendorInfo.inferenceProviders.length > 0 && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Providers:</span>\n                  <span style={{ \n                    color: styles.colors.primary,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.inferenceProviders.length}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n  \n  // List view rendering\n  const renderListView = () => (\n    <div style={{\n      backgroundColor: styles.colors.surface,\n      borderRadius: getBorderRadius(''md''),\n      overflow: ''hidden''\n    }}>\n      <table style={{\n        width: ''100%'',\n        borderCollapse: ''collapse''\n      }}>\n        <thead>\n          <tr style={{\n            borderBottom: `2px solid $' + '{styles.colors.border}`\n          }}>\n            <th\n              onClick={() => handleSort(''Name'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Model Name\n              {renderSortIndicator(''Name'')}\n            </th>\n            <th\n              onClick={() => handleSort(''Status'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Status\n              {renderSortIndicator(''Status'')}\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Developer\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Providers\n            </th>\n            <th\n              onClick={() => handleSort(''InputTokenLimit'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''right'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Input Limit\n              {renderSortIndicator(''InputTokenLimit'')}\n            </th>\n            <th\n              onClick={() => handleSort(''CostRank'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''center'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Cost\n              {renderSortIndicator(''CostRank'')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {models.map((model, index) => {\n            const vendorInfo = getModelVendorInfo(model.ID);\n            const isSelected = model.ID === selectedModelId;\n            \n            return (\n              <tr\n                key={model.ID}\n                onClick={() => onSelectModel?.(model.ID)}\n                style={{\n                  borderBottom: index < models.length - 1 \n                    ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                    : ''none'',\n                  backgroundColor: isSelected \n                    ? styles.colors.primaryLight || styles.colors.primary + ''10''\n                    : ''transparent'',\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = ''transparent'';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  <div>\n                    <div style={{\n                      fontWeight: isSelected \n                        ? (styles.typography.fontWeight?.semibold || ''600'')\n                        : (styles.typography.fontWeight?.regular || ''400''),\n                      color: styles.colors.text\n                    }}>\n                      {model.Name}\n                    </div>\n                    {model.APIName && (\n                      <div style={{\n                        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                        color: styles.colors.textSecondary,\n                        fontFamily: ''monospace''\n                      }}>\n                        {model.APIName}\n                      </div>\n                    )}\n                  </div>\n                </td>\n                <td style={{\n                  padding: styles.spacing.md\n                }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {vendorInfo.modelDeveloper?.Vendor || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {vendorInfo.inferenceProviders.length > 0 ? (\n                    <div style={{\n                      display: ''flex'',\n                      gap: styles.spacing.xs,\n                      flexWrap: ''wrap''\n                    }}>\n                      {vendorInfo.inferenceProviders.slice(0, 3).map((provider, idx) => (\n                        <span\n                          key={idx}\n                          style={{\n                            padding: `2px $' + '{styles.spacing.xs}`,\n                            backgroundColor: styles.colors.primary + ''15'',\n                            color: styles.colors.primary,\n                            borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                          }}\n                        >\n                          {provider.Vendor}\n                        </span>\n                      ))}\n                      {vendorInfo.inferenceProviders.length > 3 && (\n                        <span style={{\n                          color: styles.colors.textSecondary,\n                          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                        }}>\n                          +{vendorInfo.inferenceProviders.length - 3}\n                        </span>\n                      )}\n                    </div>\n                  ) : (\n                    <span style={{ color: styles.colors.textSecondary }}>-</span>\n                  )}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''right'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''center''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n  \n  return viewMode === ''grid'' ? renderGridView() : renderListView();\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelDetails",
      "title": "AI Model Details",
      "description": "Sliding details panel showing comprehensive model information, vendors, and usage statistics",
      "type": "detail",
      "functionalRequirements": "Show model specs, vendor associations grouped by type, usage statistics, and open record button",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "model", "type": "object", "required": false, "description": "The selected AI model object"},
        {"name": "vendors", "type": "array", "required": true, "description": "Array of vendors associated with the model"},
        {"name": "promptRuns", "type": "array", "required": true, "description": "Array of prompt runs for this model"},
        {"name": "isOpen", "type": "boolean", "required": true, "description": "Whether the details panel is open"}
      ],
      "events": [
        {"name": "onClose", "description": "Fired when the details panel should close", "parameters": []},
        {"name": "onOpenRecord", "description": "Fired when the open record button is clicked", "parameters": [{"name": "modelName", "type": "string", "description": "Name of the model to open"}]}
      ],
      "exampleUsage": "<AIModelDetails ... />",
      "code": "function AIModelDetails({ \n  model, \n  vendors,\n  promptRuns,\n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''AIModelDetails handleOpenRecord called'', { model, onOpenRecord });\n    if (model?.Name) {\n      console.log(''Calling onOpenRecord with model name:'', model.Name);\n      if (onOpenRecord) {\n        onOpenRecord(model.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No model or model name available'');\n    }\n  }, [model, onOpenRecord]);\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render vendor type icon\n  const renderVendorTypeIcon = (type) => {\n    const icons = {\n      ''Model Developer'': ''\ud83c\udfe2'',\n      ''Inference Provider'': ''\ud83d\ude80''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        marginRight: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.md\n      }}>\n        {icons[type] || ''\ud83d\udce6''}\n      </span>\n    );\n  };\n  \n  // Calculate prompt statistics\n  const calculatePromptStats = useCallback(() => {\n    if (!promptRuns || promptRuns.length === 0) {\n      return {\n        totalRuns: 0,\n        successfulRuns: 0,\n        failedRuns: 0,\n        avgExecutionTime: 0,\n        totalTokens: 0,\n        uniquePrompts: 0\n      };\n    }\n    \n    const stats = {\n      totalRuns: promptRuns.length,\n      successfulRuns: promptRuns.filter(r => r.Status === ''Success'' || r.Status === ''Completed'').length,\n      failedRuns: promptRuns.filter(r => r.Status === ''Failed'' || r.Status === ''Error'').length,\n      avgExecutionTime: 0,\n      totalTokens: 0,\n      uniquePrompts: new Set(promptRuns.map(r => r.PromptID)).size\n    };\n    \n    const validTimes = promptRuns\n      .filter(r => r.TotalExecutionTime)\n      .map(r => r.TotalExecutionTime);\n    \n    if (validTimes.length > 0) {\n      stats.avgExecutionTime = validTimes.reduce((a, b) => a + b, 0) / validTimes.length;\n    }\n    \n    stats.totalTokens = promptRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return stats;\n  }, [promptRuns]);\n  \n  const stats = calculatePromptStats();\n  \n  // Group vendors by type\n  const vendorsByType = useMemo(() => {\n    const grouped = {\n      ''Model Developer'': [],\n      ''Inference Provider'': []\n    };\n    \n    vendors.forEach(v => {\n      if (grouped[v.Type]) {\n        grouped[v.Type].push(v);\n      }\n    });\n    \n    return grouped;\n  }, [vendors]);\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 99999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: ''75px'',\n        right: 0,\n        bottom: 0,\n        width: ''520px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 100000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {model?.Name || ''No Model Selected''}\n              </h2>\n              {model?.APIName && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {model.APIName}\n                </div>\n              )}\n              {model?.IsActive !== undefined && (\n                <div style={{ marginTop: styles.spacing.sm }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              \u2715\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {model ? (\n            <>\n              {/* Model Description */}\n              {model.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {model.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Model Specifications */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Specifications\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Token Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Output Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.OutputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Cost Rank\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.warning || styles.colors.secondary\n                    }}>\n                      {''$''.repeat(Math.min(model.CostRank || 0, 5))}\n                      <span style={{ opacity: 0.3 }}>\n                        {''$''.repeat(Math.max(0, 5 - (model.CostRank || 0)))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vendors Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Vendors ({vendors.length})\n                </h3>\n                \n                {/* Model Developer */}\n                {vendorsByType[''Model Developer''].length > 0 && (\n                  <div style={{ marginBottom: styles.spacing.md }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Model Developer'')}\n                      Model Developer\n                    </div>\n                    {vendorsByType[''Model Developer''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm,\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''center''\n                        }}\n                      >\n                        <div>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {vendor.Vendor}\n                          </div>\n                          {vendor.APIName && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              API: {vendor.APIName}\n                            </div>\n                          )}\n                        </div>\n                        {renderStatusBadge(vendor.Status)}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Inference Providers */}\n                {vendorsByType[''Inference Provider''].length > 0 && (\n                  <div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Inference Provider'')}\n                      Inference Providers\n                    </div>\n                    {vendorsByType[''Inference Provider''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm\n                        }}\n                      >\n                        <div style={{\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''flex-start'',\n                          marginBottom: styles.spacing.sm\n                        }}>\n                          <div>\n                            <div style={{\n                              fontSize: styles.typography.fontSize.md,\n                              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                              color: styles.colors.text\n                            }}>\n                              {vendor.Vendor}\n                            </div>\n                            {vendor.APIName && (\n                              <div style={{\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                fontFamily: ''monospace''\n                              }}>\n                                API: {vendor.APIName}\n                              </div>\n                            )}\n                          </div>\n                          <div style={{\n                            display: ''flex'',\n                            gap: styles.spacing.xs,\n                            alignItems: ''center''\n                          }}>\n                            {vendor.Priority && (\n                              <span style={{\n                                padding: `2px $' + '{styles.spacing.xs}`,\n                                backgroundColor: styles.colors.info + ''15'',\n                                color: styles.colors.info || styles.colors.primary,\n                                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                              }}>\n                                Priority: {vendor.Priority}\n                              </span>\n                            )}\n                            {renderStatusBadge(vendor.Status)}\n                          </div>\n                        </div>\n                        \n                        {/* Vendor Capabilities */}\n                        <div style={{\n                          display: ''flex'',\n                          gap: styles.spacing.xs,\n                          flexWrap: ''wrap''\n                        }}>\n                          {vendor.SupportsStreaming && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Streaming\n                            </span>\n                          )}\n                          {vendor.SupportsEffortLevel && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Effort Level\n                            </span>\n                          )}\n                          {vendor.MaxInputTokens && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.background,\n                              color: styles.colors.textSecondary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              Max: {formatTokens(vendor.MaxInputTokens)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Usage Statistics */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Usage Statistics\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Runs\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.totalRuns.toLocaleString()}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Success Rate\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: stats.totalRuns > 0 \n                        ? (stats.successfulRuns / stats.totalRuns >= 0.9 ? styles.colors.success : styles.colors.warning)\n                        : styles.colors.text\n                    }}>\n                      {stats.totalRuns > 0 \n                        ? `$' + '{((stats.successfulRuns / stats.totalRuns) * 100).toFixed(1)}%`\n                        : ''-''}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Unique Prompts\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.uniquePrompts}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Tokens\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(stats.totalTokens)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Model Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select a model from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {model && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Model Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelFilter",
      "title": "AI Model Filter",
      "description": "Collapsible filter panel for filtering models by type, status, developer, and provider",
      "type": "form",
      "functionalRequirements": "Provide filters for model type, status, developer, and provider with active filter indicators",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "filters", "type": "object", "required": true, "description": "Current filter state object"},
        {"name": "modelTypes", "type": "array", "required": true, "description": "Array of available model types for filtering"},
        {"name": "vendors", "type": "array", "required": true, "description": "Array of available vendors for filtering"},
        {"name": "isCollapsed", "type": "boolean", "required": true, "description": "Whether the filter panel is collapsed"}
      ],
      "events": [
        {"name": "onFilterChange", "description": "Fired when filters are changed", "parameters": [{"name": "filters", "type": "object", "description": "New filter state"}]},
        {"name": "onToggleCollapse", "description": "Fired when the collapse state should toggle", "parameters": []}
      ],
      "exampleUsage": "<AIModelFilter ... />",
      "code": "function AIModelFilter({ \n  filters, \n  onFilterChange, \n  modelTypes,\n  vendors,\n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle model type filter change\n  const handleModelTypeChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      modelType: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle developer filter change\n  const handleDeveloperChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      developer: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle inference provider filter change\n  const handleProviderChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      provider: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle status filter change\n  const handleStatusChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      isActive: e.target.value === '''' ? undefined : e.target.value === ''true''\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  // Get unique developers and providers\n  const developers = useMemo(() => {\n    return vendors.filter(v => v.Name && v.Name.includes(''Developer'')).map(v => v.Name);\n  }, [vendors]);\n  \n  const providers = useMemo(() => {\n    return vendors.filter(v => v.Name && !v.Name.includes(''Developer'')).map(v => v.Name);\n  }, [vendors]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''\u2192'' : ''\u2190''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            \ud83d\udd0d\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Model Type Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Model Type\n            </label>\n            <select\n              value={filters?.modelType || ''''}\n              onChange={handleModelTypeChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Types</option>\n              {modelTypes.map((type) => (\n                <option key={type.ID} value={type.ID}>\n                  {type.Name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Status Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Status\n            </label>\n            <select\n              value={filters?.isActive || ''''}\n              onChange={handleStatusChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"Active\">Active</option>\n              <option value=\"Inactive\">Inactive</option>\n              <option value=\"Deprecated\">Deprecated</option>\n              <option value=\"Preview\">Preview</option>\n            </select>\n          </div>\n          \n          {/* Model Developer Filter */}\n          {developers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Model Developer\n              </label>\n              <select\n                value={filters?.developer || ''''}\n                onChange={handleDeveloperChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Developers</option>\n                {developers.map((dev) => (\n                  <option key={dev} value={dev}>\n                    {dev}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Inference Provider Filter */}\n          {providers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Inference Provider\n              </label>\n              <select\n                value={filters?.provider || ''''}\n                onChange={handleProviderChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Providers</option>\n                {providers.map((provider) => (\n                  <option key={provider} value={provider}>\n                    {provider}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.modelType && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Type:\n                      </span>\n                      <strong>{modelTypes.find(t => t.ID === filters.modelType)?.Name || filters.modelType}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleModelTypeChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.isActive && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Status:\n                      </span>\n                      <strong>{filters.isActive}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleStatusChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.developer && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Developer:\n                      </span>\n                      <strong>{filters.developer}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleDeveloperChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.provider && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Provider:\n                      </span>\n                      <strong>{filters.provider}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleProviderChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelAnalytics",
      "title": "AI Model Analytics",
      "description": "Analytics panel with charts showing prompt usage distribution, performance metrics, and time series",
      "type": "chart",
      "functionalRequirements": "Display pie chart for prompt usage, bar chart for performance, time series for usage trends",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "model", "type": "object", "required": false, "description": "The selected AI model for analytics"},
        {"name": "promptRuns", "type": "array", "required": true, "description": "Array of prompt runs to analyze"},
        {"name": "view", "type": "string", "required": true, "description": "Current analytics view - ''prompts'', ''performance'', or ''timeline''"}
      ],
      "events": [
        {"name": "onViewChange", "description": "Fired when the analytics view changes", "parameters": [{"name": "view", "type": "string", "description": "New view name"}]}
      ],
      "exampleUsage": "<AIModelAnalytics ... />",
      "code": "function AIModelAnalytics({ \n  model,\n  promptRuns,\n  view,\n  onViewChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate prompt usage statistics\n  const promptStats = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    const stats = {};\n    promptRuns.forEach(run => {\n      const promptName = run.PromptName || ''Unknown'';\n      if (!stats[promptName]) {\n        stats[promptName] = {\n          name: promptName,\n          runs: 0,\n          successfulRuns: 0,\n          failedRuns: 0,\n          totalTokens: 0,\n          avgExecutionTime: 0,\n          executionTimes: []\n        };\n      }\n      \n      stats[promptName].runs++;\n      if (run.Status === ''Success'' || run.Status === ''Completed'') {\n        stats[promptName].successfulRuns++;\n      } else if (run.Status === ''Failed'' || run.Status === ''Error'') {\n        stats[promptName].failedRuns++;\n      }\n      \n      stats[promptName].totalTokens += run.TotalTokens || 0;\n      if (run.TotalExecutionTime) {\n        stats[promptName].executionTimes.push(run.TotalExecutionTime);\n      }\n    });\n    \n    // Calculate averages\n    Object.values(stats).forEach(stat => {\n      if (stat.executionTimes.length > 0) {\n        stat.avgExecutionTime = stat.executionTimes.reduce((a, b) => a + b, 0) / stat.executionTimes.length;\n      }\n    });\n    \n    return Object.values(stats).sort((a, b) => b.runs - a.runs);\n  }, [promptRuns]);\n  \n  // Calculate time series data\n  const timeSeriesData = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    // Group by day\n    const dailyStats = {};\n    promptRuns.forEach(run => {\n      if (run.StartTime) {\n        const date = new Date(run.StartTime).toLocaleDateString();\n        if (!dailyStats[date]) {\n          dailyStats[date] = {\n            date,\n            runs: 0,\n            tokens: 0,\n            errors: 0\n          };\n        }\n        dailyStats[date].runs++;\n        dailyStats[date].tokens += run.TotalTokens || 0;\n        if (run.Status === ''Failed'' || run.Status === ''Error'') {\n          dailyStats[date].errors++;\n        }\n      }\n    });\n    \n    return Object.values(dailyStats).sort((a, b) => new Date(a.date) - new Date(b.date));\n  }, [promptRuns]);\n  \n  // Render pie chart\n  const renderPieChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No prompt data available\n        </div>\n      );\n    }\n    \n    const total = promptStats.reduce((sum, stat) => sum + stat.runs, 0);\n    const colors = [\n      styles.colors.primary,\n      styles.colors.success || ''#4CAF50'',\n      styles.colors.warning || ''#FF9800'',\n      styles.colors.error || ''#F44336'',\n      styles.colors.info || ''#2196F3'',\n      ''#9C27B0'', ''#00BCD4'', ''#8BC34A'', ''#FFC107'', ''#795548''\n    ];\n    \n    // Create simple pie chart using SVG\n    let currentAngle = 0;\n    const segments = promptStats.slice(0, 5).map((stat, index) => {\n      const percentage = stat.runs / total;\n      const angle = percentage * 360;\n      const largeArcFlag = angle > 180 ? 1 : 0;\n      \n      const startX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      currentAngle += angle;\n      \n      const endX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const endY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      const pathData = [\n        `M 100 100`,\n        `L $' + '{startX} $' + '{startY}`,\n        `A 80 80 0 $' + '{largeArcFlag} 1 $' + '{endX} $' + '{endY}`,\n        ''Z''\n      ].join('' '');\n      \n      return {\n        path: pathData,\n        color: colors[index % colors.length],\n        percentage,\n        stat\n      };\n    });\n    \n    return (\n      <div>\n        <svg viewBox=\"0 0 200 200\" style={{ width: ''200px'', height: ''200px'', margin: ''0 auto'', display: ''block'' }}>\n          {segments.map((segment, index) => (\n            <g key={index}>\n              <path\n                d={segment.path}\n                fill={segment.color}\n                stroke={styles.colors.background}\n                strokeWidth=\"2\"\n                style={{ cursor: ''pointer'' }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.opacity = ''0.8'';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.opacity = ''1'';\n                }}\n              />\n            </g>\n          ))}\n        </svg>\n        \n        {/* Legend */}\n        <div style={{\n          marginTop: styles.spacing.md,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.xs\n        }}>\n          {segments.map((segment, index) => (\n            <div\n              key={index}\n              style={{\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              <div style={{\n                width: ''12px'',\n                height: ''12px'',\n                backgroundColor: segment.color,\n                borderRadius: ''2px''\n              }} />\n              <div style={{\n                flex: 1,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {segment.stat.name}\n              </div>\n              <div style={{\n                color: styles.colors.textSecondary,\n                fontWeight: styles.typography.fontWeight?.medium || ''500''\n              }}>\n                {(segment.percentage * 100).toFixed(1)}%\n              </div>\n            </div>\n          ))}\n          {promptStats.length > 5 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              fontStyle: ''italic''\n            }}>\n              +{promptStats.length - 5} more prompts\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render bar chart for performance\n  const renderPerformanceChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No performance data available\n        </div>\n      );\n    }\n    \n    const maxTime = Math.max(...promptStats.map(s => s.avgExecutionTime || 0));\n    const displayStats = promptStats.slice(0, 10);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.sm\n        }}>\n          {displayStats.map((stat, index) => (\n            <div key={index} style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.sm }}>\n              <div style={{\n                width: ''100px'',\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {stat.name}\n              </div>\n              <div style={{\n                flex: 1,\n                height: ''20px'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                overflow: ''hidden'',\n                position: ''relative''\n              }}>\n                <div style={{\n                  width: maxTime > 0 ? `$' + '{(stat.avgExecutionTime / maxTime) * 100}%` : ''0%'',\n                  height: ''100%'',\n                  backgroundColor: styles.colors.primary,\n                  transition: ''width 0.3s''\n                }} />\n                <div style={{\n                  position: ''absolute'',\n                  right: styles.spacing.xs,\n                  top: ''50%'',\n                  transform: ''translateY(-50%)'',\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary\n                }}>\n                  {stat.avgExecutionTime ? `$' + '{(stat.avgExecutionTime / 1000).toFixed(2)}s` : ''-''}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render time series chart\n  const renderTimeSeriesChart = () => {\n    if (timeSeriesData.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No time series data available\n        </div>\n      );\n    }\n    \n    const maxRuns = Math.max(...timeSeriesData.map(d => d.runs));\n    const recentData = timeSeriesData.slice(-7);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          alignItems: ''flex-end'',\n          height: ''150px'',\n          gap: styles.spacing.xs,\n          marginBottom: styles.spacing.sm\n        }}>\n          {recentData.map((data, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 1,\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                gap: styles.spacing.xs\n              }}\n            >\n              <div style={{\n                width: ''100%'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                position: ''relative'',\n                flex: 1,\n                display: ''flex'',\n                alignItems: ''flex-end''\n              }}>\n                <div style={{\n                  width: ''100%'',\n                  height: maxRuns > 0 ? `$' + '{(data.runs / maxRuns) * 100}%` : ''0%'',\n                  backgroundColor: data.errors > 0 \n                    ? styles.colors.error \n                    : styles.colors.primary,\n                  borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                  transition: ''height 0.3s''\n                }} />\n              </div>\n              <div style={{\n                fontSize: ''10px'',\n                color: styles.colors.textSecondary,\n                textAlign: ''center''\n              }}>\n                {new Date(data.date).toLocaleDateString(''en'', { month: ''short'', day: ''numeric'' })}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n          color: styles.colors.textSecondary\n        }}>\n          <span>Runs per day (last 7 days)</span>\n          <span>Max: {maxRuns}</span>\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      backgroundColor: styles.colors.surface\n    }}>\n      {/* Header with View Selector */}\n      <div style={{\n        padding: styles.spacing.lg,\n        borderBottom: `1px solid $' + '{styles.colors.border}`\n      }}>\n        <h3 style={{\n          margin: 0,\n          marginBottom: styles.spacing.md,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n          color: styles.colors.text\n        }}>\n          Analytics\n        </h3>\n        \n        {/* View Tabs */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.xs,\n          borderBottom: `1px solid $' + '{styles.colors.border}`\n        }}>\n          <button\n            onClick={() => onViewChange?.(''prompts'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''prompts'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''prompts'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Prompt Usage\n          </button>\n          <button\n            onClick={() => onViewChange?.(''performance'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''performance'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''performance'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Performance\n          </button>\n          <button\n            onClick={() => onViewChange?.(''timeline'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''timeline'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''timeline'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Timeline\n          </button>\n        </div>\n      </div>\n      \n      {/* Content Area */}\n      <div style={{\n        flex: 1,\n        padding: styles.spacing.lg,\n        overflow: ''auto''\n      }}>\n        {!model ? (\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            height: ''100%'',\n            color: styles.colors.textSecondary,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Select a model to view analytics\n          </div>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.lg\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Total Runs\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptRuns.length}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Unique Prompts\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptStats.length}\n                </div>\n              </div>\n            </div>\n            \n            {/* Chart Area */}\n            <div>\n              {view === ''prompts'' && renderPieChart()}\n              {view === ''performance'' && renderPerformanceChart()}\n              {view === ''timeline'' && renderTimeSeriesChart()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    }
  ],
  "libraries": [],
  "code": "function AIModelBrowser({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { AIModelList, AIModelDetails, AIModelFilter, AIModelAnalytics } = components;\n  console.log(''=== AIModelBrowser initialized with callbacks:'', callbacks);\n  \n  // Initialize state from saved settings where appropriate\n  const [selectedModelId, setSelectedModelId] = useState(savedUserSettings?.selectedModelId);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''grid'');\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [sortBy, setSortBy] = useState(savedUserSettings?.sortBy || ''Name'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''asc'');\n  const [filterPanelCollapsed, setFilterPanelCollapsed] = useState(savedUserSettings?.filterPanelCollapsed || false);\n  const [analyticsView, setAnalyticsView] = useState(savedUserSettings?.analyticsView || ''prompts'');\n  \n  // Runtime UI state (not persisted)\n  const [models, setModels] = useState([]);\n  const [modelVendors, setModelVendors] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [modelTypes, setModelTypes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [detailsPanelOpen, setDetailsPanelOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('''');\n  \n  // Load models on mount and when filters/sort change\n  useEffect(() => {\n    const loadModels = async () => {\n      console.log(''=== Loading models with filters:'', filters, ''search:'', searchQuery);\n      setLoading(true);\n      try {\n        // Build filter string for models\n        let filterParts = [];\n        if (searchQuery) {\n          filterParts.push(`(Name LIKE ''%$' + '{searchQuery}%'' OR APIName LIKE ''%$' + '{searchQuery}%'' OR Description LIKE ''%$' + '{searchQuery}%'')`);\n        }\n        if (filters.modelType) {\n          filterParts.push(`AIModelTypeID = ''$' + '{filters.modelType}''`);\n        }\n        if (filters.isActive !== undefined) {\n          filterParts.push(`IsActive = ''$' + '{filters.isActive}''`);\n        }\n        \n        // Load AI Models\n        const modelsResult = await utilities.rv.RunView({\n          EntityName: ''AI Models'',\n          Fields: [''ID'', ''Name'', ''APIName'', ''Description'', ''AIModelTypeID'', ''InputTokenLimit'', \n                   ''CostRank'', ''IsActive'', ''__mj_CreatedAt'', ''__mj_UpdatedAt''],\n          OrderBy: `$' + '{sortBy} $' + '{sortDirection.toUpperCase()}`,\n          ExtraFilter: filterParts.length > 0 ? filterParts.join('' AND '') : undefined\n        });\n        \n        if (modelsResult?.Success && modelsResult?.Results) {\n          console.log(`Loaded $' + '{modelsResult.Results.length} models`);\n          setModels(modelsResult.Results);\n        } else {\n          console.error(''Failed to load models:'', modelsResult?.ErrorMessage);\n          setModels([]);\n        }\n        \n        // Load Model Types for filter\n        const typesResult = await utilities.rv.RunView({\n          EntityName: ''AI Model Types'',\n          Fields: [''ID'', ''Name'', ''Description''],\n          OrderBy: ''Name ASC''\n        });\n        \n        if (typesResult?.Success && typesResult?.Results) {\n          setModelTypes(typesResult.Results);\n        }\n        \n        // Load Vendors (from AI Model Vendors)\n        const vendorsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Model Vendors'',\n          Fields: [''ID'', ''ModelID'', ''VendorID'', ''TypeID'', ''Model'', ''Vendor'', ''Type'', ''Status'', ''Priority''],\n          OrderBy: ''Vendor ASC, Model ASC''\n        });\n        \n        if (vendorsResult?.Success && vendorsResult?.Results) {\n          const vendorData = vendorsResult.Results;\n          console.log(`Loaded $' + '{vendorData.length} vendor associations`);\n          setModelVendors(vendorData);\n          \n          // Extract unique vendors\n          const uniqueVendors = [...new Set(vendorData.map(v => v.Vendor))].filter(Boolean);\n          setVendors(uniqueVendors.map(name => ({ Name: name })));\n          console.log(`Found $' + '{uniqueVendors.length} unique vendors`);\n          \n          // Apply vendor-based filters\n          if ((filters.developer || filters.provider) && modelsResult?.Results) {\n            console.log(''Applying vendor filters - developer:'', filters.developer, ''provider:'', filters.provider);\n            let vendorFilteredModels = modelsResult.Results;\n            \n            if (filters.developer) {\n              const developerModelIds = vendorData\n                .filter(v => v.Vendor === filters.developer && v.Type?.includes(''Developer''))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => developerModelIds.includes(m.ID));\n              console.log(`After developer filter: $' + '{vendorFilteredModels.length} models`);\n            }\n            \n            if (filters.provider) {\n              const providerModelIds = vendorData\n                .filter(v => v.Vendor === filters.provider && v.Type?.includes(''Provider''))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => providerModelIds.includes(m.ID));\n              console.log(`After provider filter: $' + '{vendorFilteredModels.length} models`);\n            }\n            \n            setModels(vendorFilteredModels);\n          }\n        }\n      } catch (error) {\n        console.error(''Error loading models:'', error);\n        setModels([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadModels();\n  }, [filters, sortBy, sortDirection, searchQuery, utilities.rv]);\n  \n  // Load model details and analytics when selection changes\n  useEffect(() => {\n    const loadModelDetails = async () => {\n      if (!selectedModelId) {\n        setPromptRuns([]);\n        return;\n      }\n      \n      console.log(''=== Loading prompt runs for model:'', selectedModelId);\n      \n      try {\n        // Use the correct entity name for prompt runs: MJ: AI Prompt Runs\n        console.log(''Loading prompt runs with entity: MJ: AI Prompt Runs'');\n        \n        const promptRunsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Prompt Runs'',\n          Fields: [''ID'', ''PromptID'', ''ModelID'', ''RunAt'', ''CompletedAt'', ''ExecutionTimeMS'', \n                   ''TokensPrompt'', ''TokensCompletion'', ''TokensUsed'', ''Success'', ''ErrorMessage''],\n          OrderBy: ''RunAt DESC'',\n            ExtraFilter: `ModelID = ''$' + '{selectedModelId}''`,\n            MaxRows: 1000\n        });\n        \n        if (promptRunsResult?.Success && promptRunsResult?.Results) {\n          console.log(`Found $' + '{promptRunsResult.Results.length} prompt runs`);\n          // Enrich with prompt names\n          const promptIds = [...new Set(promptRunsResult.Results.map(r => r.PromptID))].filter(Boolean);\n          \n          if (promptIds.length > 0) {\n            const promptsResult = await utilities.rv.RunView({\n              EntityName: ''AI Prompts'',\n              Fields: [''ID'', ''Name'', ''Description'', ''CategoryID''],\n              ExtraFilter: `ID IN (''$' + '{promptIds.join(\"'',''\")}'')`\n            });\n            \n            const promptMap = {};\n            if (promptsResult?.Success && promptsResult?.Results) {\n              promptsResult.Results.forEach(p => {\n                promptMap[p.ID] = p;\n              });\n            }\n            \n            // Enrich prompt runs with prompt names and convert fields for compatibility\n            const enrichedRuns = promptRunsResult.Results.map(run => ({\n              ...run,\n              PromptName: promptMap[run.PromptID]?.Name || ''Unknown Prompt'',\n              PromptDescription: promptMap[run.PromptID]?.Description,\n              // Map fields for analytics component compatibility\n              StartTime: run.RunAt,\n              EndTime: run.CompletedAt,\n              TotalExecutionTime: run.ExecutionTimeMS,\n              Status: run.Success ? ''Success'' : ''Failed'',\n              Error: run.ErrorMessage,\n              TotalTokens: run.TokensUsed\n            }));\n            \n            console.log(`Enriched $' + '{enrichedRuns.length} runs with prompt names`);\n            setPromptRuns(enrichedRuns);\n          } else {\n            setPromptRuns(promptRunsResult.Results);\n          }\n        } else {\n          console.log(''No prompt runs found:'', promptRunsResult?.ErrorMessage);\n          setPromptRuns([]);\n        }\n      } catch (error) {\n        console.error(''Error loading model details:'', error);\n        setPromptRuns([]);\n      }\n    };\n    \n    loadModelDetails();\n  }, [selectedModelId, utilities.rv]);\n  \n  // Handle model selection\n  const handleSelectModel = useCallback((modelId) => {\n    setSelectedModelId(modelId);\n    setDetailsPanelOpen(true);\n    \n    // Save user preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedModelId: modelId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode) => {\n    setViewMode(mode);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      viewMode: mode\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    \n    // Save filter preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle sort changes\n  const handleSortChange = useCallback((newSortBy, newSortDirection) => {\n    setSortBy(newSortBy);\n    setSortDirection(newSortDirection);\n    \n    // Save sort preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortBy: newSortBy,\n      sortDirection: newSortDirection\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter panel toggle\n  const handleToggleFilter = useCallback(() => {\n    const newCollapsed = !filterPanelCollapsed;\n    setFilterPanelCollapsed(newCollapsed);\n    \n    // Save collapsed state\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterPanelCollapsed: newCollapsed\n    });\n  }, [filterPanelCollapsed, savedUserSettings, onSaveUserSettings]);\n  \n  // Handle analytics view change\n  const handleAnalyticsViewChange = useCallback((view) => {\n    setAnalyticsView(view);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      analyticsView: view\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle opening model record\n  const handleOpenRecord = useCallback((modelName) => {\n    console.log(''Opening AI Model record:'', modelName);\n    if (callbacks?.OpenEntityRecord && modelName) {\n      callbacks.OpenEntityRecord(''AI Models'', [{ FieldName: ''Name'', Value: modelName }]);\n    }\n  }, [callbacks]);\n  \n  // Handle closing details panel\n  const handleCloseDetails = useCallback(() => {\n    setDetailsPanelOpen(false);\n  }, []);\n  \n  // Handle search\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n  }, []);\n  \n  // Get selected model object\n  const selectedModel = models.find(m => m.ID === selectedModelId);\n  \n  // Get vendors for selected model\n  const selectedModelVendors = modelVendors.filter(v => v.ModelID === selectedModelId);\n  \n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Loading state\n  if (loading && models.length === 0) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100vh'',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading AI models...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      display: ''flex'',\n      height: ''100vh'',\n      backgroundColor: styles.colors.background,\n      overflow: ''hidden''\n    }}>\n      {/* Filter Panel */}\n      {AIModelFilter && (\n        <AIModelFilter\n          filters={filters}\n          onFilterChange={handleFilterChange}\n          modelTypes={modelTypes}\n          vendors={vendors}\n          isCollapsed={filterPanelCollapsed}\n          onToggleCollapse={handleToggleFilter}\n          savedUserSettings={savedUserSettings?.filterPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            filterPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center'',\n            marginBottom: styles.spacing.md\n          }}>\n            <h1 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              AI Model Browser\n            </h1>\n            \n            {/* View Mode Toggle */}\n            <div style={{\n              display: ''flex'',\n              gap: styles.spacing.sm,\n              alignItems: ''center''\n            }}>\n              <span style={{\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.textSecondary\n              }}>\n                View:\n              </span>\n              <button\n                onClick={() => handleViewModeChange(''grid'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''grid'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''grid'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Grid\n              </button>\n              <button\n                onClick={() => handleViewModeChange(''list'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''list'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''list'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                List\n              </button>\n            </div>\n          </div>\n          \n          {/* Search Bar */}\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.md\n          }}>\n            <input\n              type=\"text\"\n              placeholder=\"Search AI models...\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              style={{\n                flex: 1,\n                padding: styles.spacing.md,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background\n              }}\n            />\n            {searchQuery && (\n              <button\n                onClick={() => handleSearch('''')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: styles.colors.surfaceHover || styles.colors.surface,\n                  color: styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Model List and Analytics Split View */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          overflow: ''hidden''\n        }}>\n          {/* Model List */}\n          <div style={{\n            flex: 1,\n            overflow: ''auto'',\n            padding: styles.spacing.lg\n          }}>\n            {AIModelList && (\n              <AIModelList\n                models={models}\n                modelVendors={modelVendors}\n                viewMode={viewMode}\n                selectedModelId={selectedModelId}\n                onSelectModel={handleSelectModel}\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n                onSortChange={handleSortChange}\n                savedUserSettings={savedUserSettings?.modelList}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  modelList: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            )}\n            \n            {/* Empty State */}\n            {models.length === 0 && !loading && (\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                padding: styles.spacing.xxl || styles.spacing.xl,\n                color: styles.colors.textSecondary\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xl,\n                  marginBottom: styles.spacing.md\n                }}>\n                  No AI models found\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {searchQuery || Object.keys(filters).length > 0\n                    ? ''Try adjusting your filters or search query''\n                    : ''No AI models are available''}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Analytics Panel */}\n          {selectedModel && AIModelAnalytics && (\n            <div style={{\n              width: ''400px'',\n              borderLeft: `1px solid $' + '{styles.colors.border}`,\n              overflow: ''hidden'',\n              display: ''flex'',\n              flexDirection: ''column''\n            }}>\n              <AIModelAnalytics\n                model={selectedModel}\n                promptRuns={promptRuns}\n                view={analyticsView}\n                onViewChange={handleAnalyticsViewChange}\n                savedUserSettings={savedUserSettings?.analytics}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  analytics: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Details Panel */}\n      {AIModelDetails && (\n        <AIModelDetails\n          model={selectedModel}\n          vendors={selectedModelVendors}\n          promptRuns={promptRuns}\n          isOpen={detailsPanelOpen}\n          onClose={handleCloseDetails}\n          onOpenRecord={() => handleOpenRecord(selectedModel?.Name)}\n          savedUserSettings={savedUserSettings?.detailsPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            detailsPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n    </div>\n  );\n}"
}'
SET
  @FunctionalRequirements_f11e2656 = N'## AI Model Browser Requirements

### Core Functionality
- Display AI models in grid or list view with comprehensive information
- Filter models by Model Type, Status, Model Developer, and Inference Provider
- View detailed model specifications including context window, token limits, and cost ranking
- Display all vendors associated with a model (model developers and inference providers)
- Show prompt run history and usage statistics for selected models
- Visualize prompt usage with pie charts showing distribution across different prompts
- Display performance metrics with bar charts showing average execution times
- Show time series data for model usage over time
- Support sorting by multiple fields with visual indicators
- Include search functionality for quick model filtering
- Provide ''Open'' button to trigger OpenEntityRecord callback for detailed editing

### Analytics Features
- Pie chart visualization of prompt usage distribution
- Performance bar charts showing average execution times per prompt
- Time series chart showing model usage trends over last 7 days
- Summary statistics including total runs, success rates, and token usage
- Grouped vendor display by type (Model Developer vs Inference Provider)

### UX Considerations
- Collapsible filter panel with active filter count indicator
- Sliding details panel for comprehensive model information
- Inline analytics panel with tabbed views for different visualizations
- Smooth animations for panel transitions and chart rendering
- Responsive design adapting to different screen sizes
- Loading states while fetching data
- Empty states with helpful messages
- Visual feedback for hover and selection states
- Maintain user preferences for view mode and filter state'
SET
  @TechnicalDesign_f11e2656 = N'## Component Architecture

### Root Component (AIModelBrowser)
- Manages overall state and data loading
- Coordinates between filter, list, details, and analytics components
- Handles user preferences and saved settings
- Manages search and sort state

### Child Components
1. **AIModelList**: Displays models in grid or list view with vendor information
2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors
3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering
4. **AIModelAnalytics**: Inline analytics panel with charts and statistics

### Data Flow
- Root component loads all models and vendor associations
- Filters are applied at the root level and filtered data passed to list
- Selection in list triggers detail loading and analytics calculation
- Analytics component processes prompt runs to generate visualizations

### Chart Implementation
- Pie charts using SVG for prompt usage distribution
- Bar charts for performance metrics
- Time series charts for usage trends
- All charts are responsive and interactive'
SET
  @HasCustomProps_f11e2656 = 0
SET
  @HasCustomEvents_f11e2656 = 0
SET
  @RequiresData_f11e2656 = 1
SET
  @DependencyCount_f11e2656 = 4
SET
  @ID_f11e2656 = 'E7A334EA-53FD-40E4-A255-1DDA891D86B7'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_f11e2656,
  @Name = @Name_f11e2656,
  @Version = @Version_f11e2656,
  @VersionSequence = @VersionSequence_f11e2656,
  @Title = @Title_f11e2656,
  @Description = @Description_f11e2656,
  @Type = @Type_f11e2656,
  @Status = @Status_f11e2656,
  @DeveloperName = @DeveloperName_f11e2656,
  @DeveloperEmail = @DeveloperEmail_f11e2656,
  @DeveloperOrganization = @DeveloperOrganization_f11e2656,
  @SourceRegistryID = @SourceRegistryID_f11e2656,
  @ReplicatedAt = @ReplicatedAt_f11e2656,
  @LastSyncedAt = @LastSyncedAt_f11e2656,
  @Specification = @Specification_f11e2656,
  @FunctionalRequirements = @FunctionalRequirements_f11e2656,
  @TechnicalDesign = @TechnicalDesign_f11e2656,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_f11e2656,
  @TechnicalDesignVector = @TechnicalDesignVector_f11e2656,
  @HasCustomProps = @HasCustomProps_f11e2656,
  @HasCustomEvents = @HasCustomEvents_f11e2656,
  @RequiresData = @RequiresData_f11e2656,
  @DependencyCount = @DependencyCount_f11e2656,
  @ID = @ID_f11e2656;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_a492a11f NVARCHAR(MAX),
@Name_a492a11f NVARCHAR(500),
@Version_a492a11f NVARCHAR(50),
@VersionSequence_a492a11f INT,
@Title_a492a11f NVARCHAR(1000),
@Description_a492a11f NVARCHAR(MAX),
@Type_a492a11f NVARCHAR(255),
@Status_a492a11f NVARCHAR(50),
@DeveloperName_a492a11f NVARCHAR(255),
@DeveloperEmail_a492a11f NVARCHAR(255),
@DeveloperOrganization_a492a11f NVARCHAR(255),
@SourceRegistryID_a492a11f UNIQUEIDENTIFIER,
@ReplicatedAt_a492a11f DATETIMEOFFSET,
@LastSyncedAt_a492a11f DATETIMEOFFSET,
@Specification_a492a11f NVARCHAR(MAX),
@FunctionalRequirements_a492a11f NVARCHAR(MAX),
@TechnicalDesign_a492a11f NVARCHAR(MAX),
@FunctionalRequirementsVector_a492a11f NVARCHAR(MAX),
@TechnicalDesignVector_a492a11f NVARCHAR(MAX),
@HasCustomProps_a492a11f BIT,
@HasCustomEvents_a492a11f BIT,
@RequiresData_a492a11f BIT,
@DependencyCount_a492a11f INT,
@ID_a492a11f UNIQUEIDENTIFIER
SET
  @Namespace_a492a11f = N'AI'
SET
  @Name_a492a11f = N'AIModelDetails'
SET
  @Version_a492a11f = N'1.0.0'
SET
  @VersionSequence_a492a11f = 1
SET
  @Title_a492a11f = N'AI Model Details'
SET
  @Description_a492a11f = N'Sliding details panel showing comprehensive model information, vendors, and usage statistics'
SET
  @Type_a492a11f = N'Other'
SET
  @Status_a492a11f = N'Published'
SET
  @Specification_a492a11f = N'{
  "name": "AIModelDetails",
  "title": "AI Model Details",
  "description": "Sliding details panel showing comprehensive model information, vendors, and usage statistics",
  "type": "detail",
  "functionalRequirements": "Show model specs, vendor associations grouped by type, usage statistics, and open record button",
  "dataRequirements": null,
  "technicalDesign": "",
  "properties": [
    {"name": "model", "type": "object", "required": false, "description": "The selected AI model object"},
    {"name": "vendors", "type": "array", "required": true, "description": "Array of vendors associated with the model"},
    {"name": "promptRuns", "type": "array", "required": true, "description": "Array of prompt runs for this model"},
    {"name": "isOpen", "type": "boolean", "required": true, "description": "Whether the details panel is open"}
  ],
  "events": [ 
    {"name": "onClose", "description": "Fired when the details panel should close", "parameters": []},
    {"name": "onOpenRecord", "description": "Fired when the open record button is clicked", "parameters": [{"name": "modelName", "type": "string", "description": "Name of the model to open"}]}
  ],
  "exampleUsage": "<AIModelDetails ... />",
  "code": "function AIModelDetails({ \n  model, \n  vendors,\n  promptRuns,\n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''AIModelDetails handleOpenRecord called'', { model, onOpenRecord });\n    if (model?.Name) {\n      console.log(''Calling onOpenRecord with model name:'', model.Name);\n      if (onOpenRecord) {\n        onOpenRecord(model.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No model or model name available'');\n    }\n  }, [model, onOpenRecord]);\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render vendor type icon\n  const renderVendorTypeIcon = (type) => {\n    const icons = {\n      ''Model Developer'': ''\ud83c\udfe2'',\n      ''Inference Provider'': ''\ud83d\ude80''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        marginRight: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.md\n      }}>\n        {icons[type] || ''\ud83d\udce6''}\n      </span>\n    );\n  };\n  \n  // Calculate prompt statistics\n  const calculatePromptStats = useCallback(() => {\n    if (!promptRuns || promptRuns.length === 0) {\n      return {\n        totalRuns: 0,\n        successfulRuns: 0,\n        failedRuns: 0,\n        avgExecutionTime: 0,\n        totalTokens: 0,\n        uniquePrompts: 0\n      };\n    }\n    \n    const stats = {\n      totalRuns: promptRuns.length,\n      successfulRuns: promptRuns.filter(r => r.Status === ''Success'' || r.Status === ''Completed'').length,\n      failedRuns: promptRuns.filter(r => r.Status === ''Failed'' || r.Status === ''Error'').length,\n      avgExecutionTime: 0,\n      totalTokens: 0,\n      uniquePrompts: new Set(promptRuns.map(r => r.PromptID)).size\n    };\n    \n    const validTimes = promptRuns\n      .filter(r => r.TotalExecutionTime)\n      .map(r => r.TotalExecutionTime);\n    \n    if (validTimes.length > 0) {\n      stats.avgExecutionTime = validTimes.reduce((a, b) => a + b, 0) / validTimes.length;\n    }\n    \n    stats.totalTokens = promptRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return stats;\n  }, [promptRuns]);\n  \n  const stats = calculatePromptStats();\n  \n  // Group vendors by type\n  const vendorsByType = useMemo(() => {\n    const grouped = {\n      ''Model Developer'': [],\n      ''Inference Provider'': []\n    };\n    \n    vendors.forEach(v => {\n      if (grouped[v.Type]) {\n        grouped[v.Type].push(v);\n      }\n    });\n    \n    return grouped;\n  }, [vendors]);\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 99999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: ''75px'',\n        right: 0,\n        bottom: 0,\n        width: ''520px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 100000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {model?.Name || ''No Model Selected''}\n              </h2>\n              {model?.APIName && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {model.APIName}\n                </div>\n              )}\n              {model?.IsActive !== undefined && (\n                <div style={{ marginTop: styles.spacing.sm }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              \u2715\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {model ? (\n            <>\n              {/* Model Description */}\n              {model.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {model.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Model Specifications */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Specifications\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Token Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Cost Rank\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.warning || styles.colors.secondary\n                    }}>\n                      {''$''.repeat(Math.min(model.CostRank || 0, 5))}\n                      <span style={{ opacity: 0.3 }}>\n                        {''$''.repeat(Math.max(0, 5 - (model.CostRank || 0)))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vendors Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Vendors ({vendors.length})\n                </h3>\n                \n                {/* Model Developer */}\n                {vendorsByType[''Model Developer''].length > 0 && (\n                  <div style={{ marginBottom: styles.spacing.md }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Model Developer'')}\n                      Model Developer\n                    </div>\n                    {vendorsByType[''Model Developer''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm,\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''center''\n                        }}\n                      >\n                        <div>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {vendor.Vendor}\n                          </div>\n                          {vendor.APIName && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              API: {vendor.APIName}\n                            </div>\n                          )}\n                        </div>\n                        {renderStatusBadge(vendor.Status)}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Inference Providers */}\n                {vendorsByType[''Inference Provider''].length > 0 && (\n                  <div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Inference Provider'')}\n                      Inference Providers\n                    </div>\n                    {vendorsByType[''Inference Provider''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm\n                        }}\n                      >\n                        <div style={{\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''flex-start'',\n                          marginBottom: styles.spacing.sm\n                        }}>\n                          <div>\n                            <div style={{\n                              fontSize: styles.typography.fontSize.md,\n                              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                              color: styles.colors.text\n                            }}>\n                              {vendor.Vendor}\n                            </div>\n                            {vendor.APIName && (\n                              <div style={{\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                fontFamily: ''monospace''\n                              }}>\n                                API: {vendor.APIName}\n                              </div>\n                            )}\n                          </div>\n                          <div style={{\n                            display: ''flex'',\n                            gap: styles.spacing.xs,\n                            alignItems: ''center''\n                          }}>\n                            {vendor.Priority && (\n                              <span style={{\n                                padding: `2px $' + '{styles.spacing.xs}`,\n                                backgroundColor: styles.colors.info + ''15'',\n                                color: styles.colors.info || styles.colors.primary,\n                                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                              }}>\n                                Priority: {vendor.Priority}\n                              </span>\n                            )}\n                            {renderStatusBadge(vendor.Status)}\n                          </div>\n                        </div>\n                        \n                        {/* Vendor Capabilities */}\n                        <div style={{\n                          display: ''flex'',\n                          gap: styles.spacing.xs,\n                          flexWrap: ''wrap''\n                        }}>\n                          {vendor.SupportsStreaming && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Streaming\n                            </span>\n                          )}\n                          {vendor.SupportsEffortLevel && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Effort Level\n                            </span>\n                          )}\n                          {vendor.MaxInputTokens && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.background,\n                              color: styles.colors.textSecondary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              Max: {formatTokens(vendor.MaxInputTokens)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Usage Statistics */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Usage Statistics\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Runs\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.totalRuns.toLocaleString()}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Success Rate\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: stats.totalRuns > 0 \n                        ? (stats.successfulRuns / stats.totalRuns >= 0.9 ? styles.colors.success : styles.colors.warning)\n                        : styles.colors.text\n                    }}>\n                      {stats.totalRuns > 0 \n                        ? `$' + '{((stats.successfulRuns / stats.totalRuns) * 100).toFixed(1)}%`\n                        : ''-''}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Unique Prompts\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.uniquePrompts}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Tokens\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(stats.totalTokens)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Model Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select a model from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {model && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Model Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_a492a11f = N'Show model specs, vendor associations grouped by type, usage statistics, and open record button'
SET
  @TechnicalDesign_a492a11f = N''
SET
  @HasCustomProps_a492a11f = 1
SET
  @HasCustomEvents_a492a11f = 1
SET
  @RequiresData_a492a11f = 0
SET
  @DependencyCount_a492a11f = 0
SET
  @ID_a492a11f = '7B36D078-5B69-47EC-BDFB-D119524116F6'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_a492a11f,
  @Name = @Name_a492a11f,
  @Version = @Version_a492a11f,
  @VersionSequence = @VersionSequence_a492a11f,
  @Title = @Title_a492a11f,
  @Description = @Description_a492a11f,
  @Type = @Type_a492a11f,
  @Status = @Status_a492a11f,
  @DeveloperName = @DeveloperName_a492a11f,
  @DeveloperEmail = @DeveloperEmail_a492a11f,
  @DeveloperOrganization = @DeveloperOrganization_a492a11f,
  @SourceRegistryID = @SourceRegistryID_a492a11f,
  @ReplicatedAt = @ReplicatedAt_a492a11f,
  @LastSyncedAt = @LastSyncedAt_a492a11f,
  @Specification = @Specification_a492a11f,
  @FunctionalRequirements = @FunctionalRequirements_a492a11f,
  @TechnicalDesign = @TechnicalDesign_a492a11f,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_a492a11f,
  @TechnicalDesignVector = @TechnicalDesignVector_a492a11f,
  @HasCustomProps = @HasCustomProps_a492a11f,
  @HasCustomEvents = @HasCustomEvents_a492a11f,
  @RequiresData = @RequiresData_a492a11f,
  @DependencyCount = @DependencyCount_a492a11f,
  @ID = @ID_a492a11f;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_5e2cc5d2 NVARCHAR(MAX),
@Name_5e2cc5d2 NVARCHAR(500),
@Version_5e2cc5d2 NVARCHAR(50),
@VersionSequence_5e2cc5d2 INT,
@Title_5e2cc5d2 NVARCHAR(1000),
@Description_5e2cc5d2 NVARCHAR(MAX),
@Type_5e2cc5d2 NVARCHAR(255),
@Status_5e2cc5d2 NVARCHAR(50),
@DeveloperName_5e2cc5d2 NVARCHAR(255),
@DeveloperEmail_5e2cc5d2 NVARCHAR(255),
@DeveloperOrganization_5e2cc5d2 NVARCHAR(255),
@SourceRegistryID_5e2cc5d2 UNIQUEIDENTIFIER,
@ReplicatedAt_5e2cc5d2 DATETIMEOFFSET,
@LastSyncedAt_5e2cc5d2 DATETIMEOFFSET,
@Specification_5e2cc5d2 NVARCHAR(MAX),
@FunctionalRequirements_5e2cc5d2 NVARCHAR(MAX),
@TechnicalDesign_5e2cc5d2 NVARCHAR(MAX),
@FunctionalRequirementsVector_5e2cc5d2 NVARCHAR(MAX),
@TechnicalDesignVector_5e2cc5d2 NVARCHAR(MAX),
@HasCustomProps_5e2cc5d2 BIT,
@HasCustomEvents_5e2cc5d2 BIT,
@RequiresData_5e2cc5d2 BIT,
@DependencyCount_5e2cc5d2 INT,
@ID_5e2cc5d2 UNIQUEIDENTIFIER
SET
  @Namespace_5e2cc5d2 = N'AI/Agents'
SET
  @Name_5e2cc5d2 = N'AIAgentAnalyticsDashboard'
SET
  @Version_5e2cc5d2 = N'1.0.0'
SET
  @VersionSequence_5e2cc5d2 = 1
SET
  @Title_5e2cc5d2 = N'AI Agent Analytics Dashboard'
SET
  @Description_5e2cc5d2 = N'A comprehensive analytics dashboard for monitoring AI agent executions, performance metrics, hierarchical relationships, and step-by-step analysis with real-time updates and interactive visualizations'
SET
  @Type_5e2cc5d2 = N'Dashboard'
SET
  @Status_5e2cc5d2 = N'Deprecated'
SET
  @Specification_5e2cc5d2 = N'{
  "name": "AIAgentAnalyticsDashboard",
  "title": "AI Agent Analytics Dashboard",
  "description": "A comprehensive analytics dashboard for monitoring AI agent executions, performance metrics, hierarchical relationships, and step-by-step analysis with real-time updates and interactive visualizations",
  "type": "dashboard",
  "functionalRequirements": "## AI Agent Analytics Dashboard Requirements\n\n### Core Functionality\n- Display real-time agent execution status with live updates\n- Show hierarchical agent relationships and sub-agent orchestration\n- Provide step-by-step execution analysis with timing and success metrics\n- Visualize performance metrics including execution time, token usage, and costs\n- Track agent learning cycles and improvement over time\n- Monitor conversation flows and context compression effectiveness\n- Display error patterns and anomaly detection\n- Support drill-down from high-level metrics to detailed execution logs\n\n### Analytics Features\n- Live execution monitor with WebSocket updates\n- Agent hierarchy tree visualization with execution flow\n- Step type distribution and execution waterfall charts\n- Performance distribution plots and token usage analytics\n- Learning cycle progress tracking\n- Conversation flow network graph\n- Sub-agent orchestration timeline\n- Real-time alerts and SLA monitoring\n\n### UX Considerations\n- Multi-panel layout with coordinated views\n- Interactive filtering across all visualizations\n- Time range selection with comparison capabilities\n- Drill-down navigation to execution details\n- Export functionality for reports and data\n- Responsive design for different screen sizes\n- Dark/light theme support\n- Smooth animations and transitions",
  "dataRequirements": {
    "mode": "dynamic",
    "entities": [
      {
        "name": "AI Agents",
        "description": "Agent definitions and configurations",
        "fields": ["ID", "Name", "Description", "AgentTypeID", "IsActive", "DefaultPromptEffortLevel", "ExposeAsAction", "ParentID"]
      },
      {
        "name": "MJ: AI Agent Runs",
        "description": "Agent execution instances with hierarchical tracking",
        "fields": ["ID", "AgentID", "ParentRunID", "Status", "StartedAt", "CompletedAt", "Success", "ErrorMessage", "ConversationID", "UserID", "Result", "AgentState", "ExecutionTimeMS", "TotalCost", "TotalTokens", "EffortLevel"]
      },
      {
        "name": "MJ: AI Agent Run Steps",
        "description": "Detailed step-by-step execution tracking",
        "fields": ["ID", "AgentRunID", "StepNumber", "StepType", "StepName", "TargetID", "Status", "StartedAt", "CompletedAt", "Success", "ErrorMessage", "Input", "Output", "ExecutionTimeMS", "TokensUsed", "Cost"]
      },
      {
        "name": "AI Agent Relationships",
        "description": "Parent-child agent relationships",
        "fields": ["ID", "AgentID", "SubAgentID", "RelationshipType", "ExecutionOrder", "IsActive"]
      },
      {
        "name": "MJ: AI Prompt Runs",
        "description": "Prompt executions linked to agent runs",
        "fields": ["ID", "AgentRunID", "PromptID", "ModelID", "RunAt", "CompletedAt", "Success", "TokensUsed", "Cost"]
      }
    ]
  },
  "technicalDesign": "## Component Architecture\n\n### Root Component (AIAgentAnalyticsDashboard)\n- Manages overall dashboard state and data loading\n- Coordinates between multiple visualization panels\n- Handles real-time WebSocket connections for live updates\n- Manages time range and filtering state\n\n### Child Components\n1. **AIAgentExecutionOverview**: Top panel with live monitors, success gauges, and velocity metrics\n2. **AIAgentHierarchyTree**: Interactive tree visualization of agent relationships\n3. **AIAgentStepAnalysis**: Step-by-step execution waterfall and distribution charts\n4. **AIAgentPerformanceMetrics**: Performance plots, token usage, and error analysis\n\n### Data Flow\n- Root component establishes WebSocket connection for real-time updates\n- Historical data loaded based on selected time range\n- Filter changes propagate to all child components\n- Selection in one component updates others (coordinated views)\n\n### State Management\n- Selected agent IDs (for filtering)\n- Time range (with comparison period)\n- Active view tab\n- Real-time data buffer\n- User preferences (saved via onSaveUserSettings)",
  "properties": [],
  "events": [],
  "childComponents": [
    {
      "name": "AIAgentExecutionOverview",
      "description": "Live execution monitors and high-level metrics",
      "required": true
    },
    {
      "name": "AIAgentHierarchyTree",
      "description": "Interactive agent relationship visualization",
      "required": true
    },
    {
      "name": "AIAgentStepAnalysis",
      "description": "Step-by-step execution analysis",
      "required": true
    },
    {
      "name": "AIAgentPerformanceMetrics",
      "description": "Performance and cost analytics",
      "required": true
    }
  ],
  "exampleUsage": "<AIAgentAnalyticsDashboard />",
  "code": "function AIAgentAnalyticsDashboard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { AIAgentExecutionOverview, AIAgentHierarchyTree, AIAgentStepAnalysis, AIAgentPerformanceMetrics } = components;\n  \n  // Initialize state from saved settings\n  const [selectedAgentId, setSelectedAgentId] = useState(savedUserSettings?.selectedAgentId);\n  const [timeRange, setTimeRange] = useState(savedUserSettings?.timeRange || ''24h'');\n  const [comparisonPeriod, setComparisonPeriod] = useState(savedUserSettings?.comparisonPeriod || null);\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [activeView, setActiveView] = useState(savedUserSettings?.activeView || ''overview'');\n  \n  // Runtime state\n  const [agents, setAgents] = useState([]);\n  const [agentRuns, setAgentRuns] = useState([]);\n  const [agentRunSteps, setAgentRunSteps] = useState([]);\n  const [agentRelationships, setAgentRelationships] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [realTimeData, setRealTimeData] = useState({});\n  const [wsConnection, setWsConnection] = useState(null);\n  \n  // Helper function to get border radius\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate time range dates\n  const getTimeRangeDates = useCallback((range) => {\n    const now = new Date();\n    const start = new Date();\n    \n    switch(range) {\n      case ''1h'':\n        start.setHours(now.getHours() - 1);\n        break;\n      case ''24h'':\n        start.setDate(now.getDate() - 1);\n        break;\n      case ''7d'':\n        start.setDate(now.getDate() - 7);\n        break;\n      case ''30d'':\n        start.setDate(now.getDate() - 30);\n        break;\n      default:\n        start.setDate(now.getDate() - 1);\n    }\n    \n    return { start, end: now };\n  }, []);\n  \n  // Load dashboard data\n  useEffect(() => {\n    const loadDashboardData = async () => {\n      setLoading(true);\n      const { start, end } = getTimeRangeDates(timeRange);\n      \n      try {\n        // Load agents\n        const agentsResult = await utilities.rv.RunView({\n          EntityName: ''AI Agents'',\n          Fields: [''ID'', ''Name'', ''Description'', ''AgentTypeID'', ''IsActive'', ''DefaultPromptEffortLevel'', ''ExposeAsAction'', ''ParentID''],\n          OrderBy: ''Name ASC''\n        });\n        \n        if (agentsResult?.Success) {\n          setAgents(agentsResult.Results || []);\n        }\n        \n        // Load agent runs for time period\n        const runsFilter = `StartedAt >= ''$' + '{start.toISOString()}'' AND StartedAt <= ''$' + '{end.toISOString()}''`;\n        const runsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Agent Runs'',\n          Fields: [''ID'', ''AgentID'', ''ParentRunID'', ''Status'', ''StartedAt'', ''CompletedAt'', ''Success'', \n                   ''ErrorMessage'', ''ConversationID'', ''UserID'', ''Result'', ''AgentState'', \n                   ''ExecutionTimeMS'', ''TotalCost'', ''TotalTokens'', ''EffortLevel''],\n          ExtraFilter: runsFilter,\n          OrderBy: ''StartedAt DESC'',\n          MaxRows: 5000\n        });\n        \n        if (runsResult?.Success) {\n          setAgentRuns(runsResult.Results || []);\n          \n          // Load steps for these runs\n          if (runsResult.Results?.length > 0) {\n            const runIds = runsResult.Results.map(r => r.ID);\n            const stepsFilter = `AgentRunID IN (''$' + '{runIds.join(\"'',''\")}'')`;\n            \n            const stepsResult = await utilities.rv.RunView({\n              EntityName: ''MJ: AI Agent Run Steps'',\n              Fields: [''ID'', ''AgentRunID'', ''StepNumber'', ''StepType'', ''StepName'', ''TargetID'', \n                       ''Status'', ''StartedAt'', ''CompletedAt'', ''Success'', ''ErrorMessage'', \n                       ''Input'', ''Output'', ''ExecutionTimeMS'', ''TokensUsed'', ''Cost''],\n              ExtraFilter: stepsFilter,\n              OrderBy: ''AgentRunID, StepNumber'',\n              MaxRows: 10000\n            });\n            \n            if (stepsResult?.Success) {\n              setAgentRunSteps(stepsResult.Results || []);\n            }\n          }\n        }\n        \n        // Load agent relationships\n        const relationshipsResult = await utilities.rv.RunView({\n          EntityName: ''AI Agent Relationships'',\n          Fields: [''ID'', ''AgentID'', ''SubAgentID'', ''RelationshipType'', ''ExecutionOrder'', ''IsActive''],\n          OrderBy: ''ExecutionOrder ASC''\n        });\n        \n        if (relationshipsResult?.Success) {\n          setAgentRelationships(relationshipsResult.Results || []);\n        }\n        \n        // Load prompt runs\n        const promptRunsFilter = `RunAt >= ''$' + '{start.toISOString()}'' AND RunAt <= ''$' + '{end.toISOString()}''`;\n        const promptRunsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Prompt Runs'',\n          Fields: [''ID'', ''AgentRunID'', ''PromptID'', ''ModelID'', ''RunAt'', ''CompletedAt'', \n                   ''Success'', ''TokensUsed'', ''Cost''],\n          ExtraFilter: promptRunsFilter,\n          OrderBy: ''RunAt DESC'',\n          MaxRows: 5000\n        });\n        \n        if (promptRunsResult?.Success) {\n          setPromptRuns(promptRunsResult.Results || []);\n        }\n      } catch (error) {\n        console.error(''Error loading dashboard data:'', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadDashboardData();\n  }, [timeRange, filters, utilities.rv, getTimeRangeDates]);\n  \n  // Set up WebSocket for real-time updates\n  useEffect(() => {\n    // This would connect to a real-time data source\n    // For now, we''ll simulate with periodic updates\n    const interval = setInterval(() => {\n      // Simulate real-time updates\n      setRealTimeData(prev => ({\n        ...prev,\n        lastUpdate: new Date(),\n        activeRuns: Math.floor(Math.random() * 20)\n      }));\n    }, 5000);\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  // Handle agent selection\n  const handleSelectAgent = useCallback((agentId) => {\n    setSelectedAgentId(agentId);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedAgentId: agentId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle time range change\n  const handleTimeRangeChange = useCallback((range) => {\n    setTimeRange(range);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      timeRange: range\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view change\n  const handleViewChange = useCallback((view) => {\n    setActiveView(view);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      activeView: view\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Calculate aggregate metrics\n  const metrics = useMemo(() => {\n    const totalRuns = agentRuns.length;\n    const successfulRuns = agentRuns.filter(r => r.Success).length;\n    const failedRuns = agentRuns.filter(r => r.Success === false).length;\n    const runningRuns = agentRuns.filter(r => r.Status === ''Running'').length;\n    const avgExecutionTime = agentRuns.reduce((sum, r) => sum + (r.ExecutionTimeMS || 0), 0) / (totalRuns || 1);\n    const totalCost = agentRuns.reduce((sum, r) => sum + (r.TotalCost || 0), 0);\n    const totalTokens = agentRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return {\n      totalRuns,\n      successfulRuns,\n      failedRuns,\n      runningRuns,\n      successRate: totalRuns > 0 ? (successfulRuns / totalRuns) * 100 : 0,\n      avgExecutionTime,\n      totalCost,\n      totalTokens\n    };\n  }, [agentRuns]);\n  \n  if (loading && agentRuns.length === 0) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100vh'',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading AI Agent Analytics...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      height: ''100vh'',\n      backgroundColor: styles.colors.background,\n      display: ''flex'',\n      flexDirection: ''column'',\n      overflow: ''hidden''\n    }}>\n      {/* Header */}\n      <div style={{\n        padding: styles.spacing.lg,\n        backgroundColor: styles.colors.surface,\n        borderBottom: `1px solid $' + '{styles.colors.border}`,\n        flexShrink: 0\n      }}>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''center'',\n          marginBottom: styles.spacing.md\n        }}>\n          <h1 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n            fontWeight: styles.typography.fontWeight?.bold || ''700'',\n            color: styles.colors.text\n          }}>\n            AI Agent Analytics Dashboard\n          </h1>\n          \n          {/* Time Range Selector */}\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.sm,\n            alignItems: ''center''\n          }}>\n            <span style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              Time Range:\n            </span>\n            {[''1h'', ''24h'', ''7d'', ''30d''].map(range => (\n              <button\n                key={range}\n                onClick={() => handleTimeRangeChange(range)}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: timeRange === range ? styles.colors.primary : styles.colors.background,\n                  color: timeRange === range ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.sm,\n                  transition: ''all 0.2s''\n                }}\n              >\n                {range === ''1h'' ? ''Last Hour'' : range === ''24h'' ? ''Last 24 Hours'' : range === ''7d'' ? ''Last 7 Days'' : ''Last 30 Days''}\n              </button>\n            ))}\n          </div>\n        </div>\n        \n        {/* Quick Stats */}\n        <div style={{\n          display: ''grid'',\n          gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'',\n          gap: styles.spacing.md\n        }}>\n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Total Runs\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              {metrics.totalRuns.toLocaleString()}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.success || styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Success Rate\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: metrics.successRate >= 90 ? styles.colors.success : metrics.successRate >= 70 ? styles.colors.warning : styles.colors.error\n            }}>\n              {metrics.successRate.toFixed(1)}%\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.info || styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Avg Time\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              {(metrics.avgExecutionTime / 1000).toFixed(2)}s\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.warning || styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Total Cost\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              $' + '{metrics.totalCost.toFixed(2)}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Active Now\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.primary,\n              display: ''flex'',\n              alignItems: ''center'',\n              gap: styles.spacing.xs\n            }}>\n              {realTimeData.activeRuns || metrics.runningRuns}\n              <span style={{\n                display: ''inline-block'',\n                width: ''8px'',\n                height: ''8px'',\n                backgroundColor: styles.colors.success || styles.colors.primary,\n                borderRadius: ''50%'',\n                animation: ''pulse 2s infinite''\n              }} />\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        overflow: ''hidden''\n      }}>\n        {/* Left Panel - Hierarchy Tree */}\n        <div style={{\n          width: ''300px'',\n          borderRight: `1px solid $' + '{styles.colors.border}`,\n          overflow: ''auto'',\n          backgroundColor: styles.colors.surface\n        }}>\n          {AIAgentHierarchyTree && (\n            <AIAgentHierarchyTree\n              agents={agents}\n              agentRuns={agentRuns}\n              agentRelationships={agentRelationships}\n              selectedAgentId={selectedAgentId}\n              onSelectAgent={handleSelectAgent}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings?.hierarchyTree}\n              onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                ...savedUserSettings,\n                hierarchyTree: settings\n              })}\n            />\n          )}\n        </div>\n        \n        {/* Center Panel - Main Visualizations */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          overflow: ''hidden''\n        }}>\n          {/* Execution Overview */}\n          <div style={{\n            height: ''200px'',\n            borderBottom: `1px solid $' + '{styles.colors.border}`,\n            overflow: ''hidden''\n          }}>\n            {AIAgentExecutionOverview && (\n              <AIAgentExecutionOverview\n                agentRuns={agentRuns}\n                agentRunSteps={agentRunSteps}\n                realTimeData={realTimeData}\n                selectedAgentId={selectedAgentId}\n                timeRange={timeRange}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.executionOverview}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  executionOverview: settings\n                })}\n              />\n            )}\n          </div>\n          \n          {/* Step Analysis */}\n          <div style={{\n            flex: 1,\n            overflow: ''auto''\n          }}>\n            {AIAgentStepAnalysis && (\n              <AIAgentStepAnalysis\n                agentRunSteps={agentRunSteps}\n                agentRuns={agentRuns}\n                selectedAgentId={selectedAgentId}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.stepAnalysis}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  stepAnalysis: settings\n                })}\n              />\n            )}\n          </div>\n        </div>\n        \n        {/* Right Panel - Performance Metrics */}\n        <div style={{\n          width: ''350px'',\n          borderLeft: `1px solid $' + '{styles.colors.border}`,\n          overflow: ''auto'',\n          backgroundColor: styles.colors.surface\n        }}>\n          {AIAgentPerformanceMetrics && (\n            <AIAgentPerformanceMetrics\n              agentRuns={agentRuns}\n              agentRunSteps={agentRunSteps}\n              promptRuns={promptRuns}\n              selectedAgentId={selectedAgentId}\n              timeRange={timeRange}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings?.performanceMetrics}\n              onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                ...savedUserSettings,\n                performanceMetrics: settings\n              })}\n            />\n          )}\n        </div>\n      </div>\n      \n      {/* CSS for pulse animation */}\n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_5e2cc5d2 = N'Display real-time agent execution status with live updates, show hierarchical agent relationships and sub-agent orchestration, provide step-by-step execution analysis with timing and success metrics, visualize performance metrics including execution time, token usage, and costs'
SET
  @TechnicalDesign_5e2cc5d2 = N'Multi-panel dashboard with WebSocket real-time updates, coordinated views across child components, time range filtering, and interactive agent selection'
SET
  @HasCustomProps_5e2cc5d2 = 0
SET
  @HasCustomEvents_5e2cc5d2 = 0
SET
  @RequiresData_5e2cc5d2 = 1
SET
  @DependencyCount_5e2cc5d2 = 0
SET
  @ID_5e2cc5d2 = 'EC9FC426-5C79-4C8C-AEB5-211268BCCB9C'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_5e2cc5d2,
  @Name = @Name_5e2cc5d2,
  @Version = @Version_5e2cc5d2,
  @VersionSequence = @VersionSequence_5e2cc5d2,
  @Title = @Title_5e2cc5d2,
  @Description = @Description_5e2cc5d2,
  @Type = @Type_5e2cc5d2,
  @Status = @Status_5e2cc5d2,
  @DeveloperName = @DeveloperName_5e2cc5d2,
  @DeveloperEmail = @DeveloperEmail_5e2cc5d2,
  @DeveloperOrganization = @DeveloperOrganization_5e2cc5d2,
  @SourceRegistryID = @SourceRegistryID_5e2cc5d2,
  @ReplicatedAt = @ReplicatedAt_5e2cc5d2,
  @LastSyncedAt = @LastSyncedAt_5e2cc5d2,
  @Specification = @Specification_5e2cc5d2,
  @FunctionalRequirements = @FunctionalRequirements_5e2cc5d2,
  @TechnicalDesign = @TechnicalDesign_5e2cc5d2,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_5e2cc5d2,
  @TechnicalDesignVector = @TechnicalDesignVector_5e2cc5d2,
  @HasCustomProps = @HasCustomProps_5e2cc5d2,
  @HasCustomEvents = @HasCustomEvents_5e2cc5d2,
  @RequiresData = @RequiresData_5e2cc5d2,
  @DependencyCount = @DependencyCount_5e2cc5d2,
  @ID = @ID_5e2cc5d2;

-- Save MJ: Components (core SP call only)
DECLARE @ID_bb11c9bf UNIQUEIDENTIFIER,
@Namespace_bb11c9bf NVARCHAR(MAX),
@Name_bb11c9bf NVARCHAR(500),
@Version_bb11c9bf NVARCHAR(50),
@VersionSequence_bb11c9bf INT,
@Title_bb11c9bf NVARCHAR(1000),
@Description_bb11c9bf NVARCHAR(MAX),
@Type_bb11c9bf NVARCHAR(255),
@Status_bb11c9bf NVARCHAR(50),
@DeveloperName_bb11c9bf NVARCHAR(255),
@DeveloperEmail_bb11c9bf NVARCHAR(255),
@DeveloperOrganization_bb11c9bf NVARCHAR(255),
@SourceRegistryID_bb11c9bf UNIQUEIDENTIFIER,
@ReplicatedAt_bb11c9bf DATETIMEOFFSET,
@LastSyncedAt_bb11c9bf DATETIMEOFFSET,
@Specification_bb11c9bf NVARCHAR(MAX),
@FunctionalRequirements_bb11c9bf NVARCHAR(MAX),
@TechnicalDesign_bb11c9bf NVARCHAR(MAX),
@FunctionalRequirementsVector_bb11c9bf NVARCHAR(MAX),
@TechnicalDesignVector_bb11c9bf NVARCHAR(MAX),
@HasCustomProps_bb11c9bf BIT,
@HasCustomEvents_bb11c9bf BIT,
@RequiresData_bb11c9bf BIT,
@DependencyCount_bb11c9bf INT
SET
  @ID_bb11c9bf = '313ed35b-462c-439f-8f56-91ad90ccb252'
SET
  @Namespace_bb11c9bf = N'AI/Analytics/Performance'
SET
  @Name_bb11c9bf = N'AIPerformanceDashboard'
SET
  @Version_bb11c9bf = N'1.0.0'
SET
  @VersionSequence_bb11c9bf = 1
SET
  @Title_bb11c9bf = N'AI Performance Dashboard'
SET
  @Description_bb11c9bf = N'Comprehensive dashboard for analyzing AI agent and prompt performance with time-series charts, cost analysis, and drill-down capabilities'
SET
  @Type_bb11c9bf = N'Dashboard'
SET
  @Status_bb11c9bf = N'Published'
SET
  @Specification_bb11c9bf = N'{
  "name": "AIPerformanceDashboard",
  "location": "embedded",
  "title": "AI Performance Dashboard",
  "description": "Comprehensive dashboard for analyzing AI agent and prompt performance with time-series charts, cost analysis, and drill-down capabilities",
  "type": "dashboard",
  "functionalRequirements": "## AI Performance Dashboard Requirements\n\n### Core Functionality\n- Display multi-line time series charts showing total runs, tokens, and costs over time\n- Support multiple time groupings: day, week, month, quarter\n- Dual Y-axis display (tokens on left, runs/costs on right)\n- Click-to-drill-down on any chart point to see details for that period\n- Show distribution charts (pie/bar) for selected time period\n- Separate tabs for Agent Runs and Prompt Runs analysis\n- Real-time data refresh capabilities\n- Export functionality for charts and data\n\n### Analytics Features\n- Time series trends with moving averages\n- Cost breakdown by agent/prompt\n- Token usage distribution\n- Success/failure rate analysis\n- Performance comparisons across periods\n- Top consumers identification\n- Anomaly detection and alerts\n\n### UX Considerations\n- Responsive layout adapting to container size\n- Interactive tooltips on hover\n- Smooth chart animations\n- Loading states during data fetch\n- Clear visual hierarchy\n- Consistent color coding across charts\n- Mobile-responsive design",
  "dataRequirements": {
    "mode": "views",
    "description": "Loads AI performance data including agent runs, prompt runs, and aggregated metrics",
    "entities": [
      {
        "name": "MJ: AI Agent Runs",
        "description": "Historical agent execution data for performance analysis",
        "displayFields": [
          "ID",
          "AgentID",
          "Agent",
          "StartedAt",
          "CompletedAt",
          "Success",
          "TotalTokensUsed",
          "TotalCost"
        ],
        "filterFields": [
          "StartedAt",
          "Success",
          "AgentID"
        ],
        "sortFields": [
          "StartedAt"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "type": "uniqueidentifier",
            "isPrimaryKey": true,
            "allowsNull": false,
            "description": "Unique run identifier"
          },
          {
            "name": "AgentID",
            "type": "uniqueidentifier",
            "allowsNull": false,
            "description": "Reference to AI Agent"
          },
          {
            "name": "Agent",
            "type": "nvarchar",
            "allowsNull": true,
            "description": "Agent name (denormalized)"
          },
          {
            "name": "StartedAt",
            "type": "datetime",
            "allowsNull": false,
            "description": "Execution start timestamp"
          },
          {
            "name": "TotalTokensUsed",
            "type": "int",
            "allowsNull": true,
            "description": "Total tokens consumed"
          },
          {
            "name": "TotalCost",
            "type": "decimal",
            "allowsNull": true,
            "description": "Total cost in USD"
          }
        ],
        "permissionLevelNeeded": ["read"]
      },
      {
        "name": "MJ: AI Prompt Runs",
        "description": "Historical prompt execution data for performance analysis",
        "displayFields": [
          "ID",
          "PromptID",
          "Prompt",
          "ModelID",
          "Model",
          "RunAt",
          "CompletedAt",
          "Success",
          "TokensUsed",
          "TotalCost"
        ],
        "filterFields": [
          "RunAt",
          "Success",
          "PromptID",
          "ModelID"
        ],
        "sortFields": [
          "RunAt"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "type": "uniqueidentifier",
            "isPrimaryKey": true,
            "allowsNull": false,
            "description": "Unique run identifier"
          },
          {
            "name": "PromptID",
            "type": "uniqueidentifier",
            "allowsNull": false,
            "description": "Reference to AI Prompt"
          },
          {
            "name": "Prompt",
            "type": "nvarchar",
            "allowsNull": true,
            "description": "Prompt name (denormalized)"
          },
          {
            "name": "RunAt",
            "type": "datetime",
            "allowsNull": false,
            "description": "Execution timestamp"
          },
          {
            "name": "TokensUsed",
            "type": "int",
            "allowsNull": true,
            "description": "Total tokens consumed"
          },
          {
            "name": "TotalCost",
            "type": "decimal",
            "allowsNull": true,
            "description": "Total cost in USD"
          }
        ],
        "permissionLevelNeeded": ["read"]
      }
    ],
    "queries": []
  },
  "technicalDesign": "## Component Architecture\n\n### Root Component (AIPerformanceDashboard)\n- Manages overall dashboard state and data loading\n- Handles time range selection and grouping\n- Coordinates drill-down state between components\n- Manages tab switching between Agent and Prompt views\n\n### Child Components\n1. **AITimeSeriesChart**: Multi-line chart with dual Y-axes for runs/tokens/costs\n2. **AIDistributionChart**: Pie/bar charts showing breakdown by agent or prompt\n3. **AIDetailTable**: Detailed table view for drill-down data\n4. **AIMetricsSummary**: Key metrics cards for selected period\n\n### Data Flow\n- Root component loads data based on selected time range\n- Aggregates data by selected grouping (day/week/month/quarter)\n- Passes aggregated data to chart components\n- Handles drill-down events and updates detail views\n- Manages state persistence through savedUserSettings\n\n### State Management\n- Selected time range and grouping\n- Active tab (agents vs prompts)\n- Drill-down selection (selected date/period)\n- Chart view preferences\n- Filter states",
  "properties": [],
  "events": [],
  "exampleUsage": "<AIPerformanceDashboard />",
  "code": "function AIPerformanceDashboard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIPerformanceDashboard] Initializing with settings:'', savedUserSettings);\n  console.log(''[AIPerformanceDashboard] Available components:'', components ? Object.keys(components) : ''none'');\n  \n  // Extract child components with fallbacks\n  const AITimeSeriesChart = components?.AITimeSeriesChart;\n  const AIDistributionChart = components?.AIDistributionChart;\n  const AIDetailTable = components?.AIDetailTable;\n  const AIMetricsSummary = components?.AIMetricsSummary;\n  \n  // Check if required components are available\n  if (!AITimeSeriesChart || !AIDistributionChart || !AIDetailTable || !AIMetricsSummary) {\n    return (\n      <div style={{\n        padding: styles?.spacing?.lg || ''20px'',\n        color: styles?.colors?.error || ''red'',\n        textAlign: ''center''\n      }}>\n        Error: Required child components are not available. Please ensure all dashboard components are loaded.\n        <br />\n        Missing: {[\n          !AITimeSeriesChart && ''AITimeSeriesChart'',\n          !AIDistributionChart && ''AIDistributionChart'',\n          !AIDetailTable && ''AIDetailTable'',\n          !AIMetricsSummary && ''AIMetricsSummary''\n        ].filter(Boolean).join('', '')}\n      </div>\n    );\n  }\n  \n  // Initialize state from saved settings\n  const [timeRange, setTimeRange] = useState(savedUserSettings?.timeRange || ''30d'');\n  const [groupBy, setGroupBy] = useState(savedUserSettings?.groupBy || ''day'');\n  const [activeTab, setActiveTab] = useState(savedUserSettings?.activeTab || ''agents'');\n  const [selectedPoint, setSelectedPoint] = useState(null);\n  \n  // Data state\n  const [agentRuns, setAgentRuns] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Calculate date range\n  const getDateRange = useCallback(() => {\n    const end = new Date();\n    const start = new Date();\n    \n    switch(timeRange) {\n      case ''7d'':\n        start.setDate(end.getDate() - 7);\n        break;\n      case ''30d'':\n        start.setDate(end.getDate() - 30);\n        break;\n      case ''90d'':\n        start.setDate(end.getDate() - 90);\n        break;\n      case ''1y'':\n        start.setFullYear(end.getFullYear() - 1);\n        break;\n      default:\n        start.setDate(end.getDate() - 30);\n    }\n    \n    return { start, end };\n  }, [timeRange]);\n  \n  // Load data\n  useEffect(() => {\n    const loadData = async () => {\n      console.log(''[AIPerformanceDashboard] Loading data for range:'', timeRange);\n      setLoading(true);\n      setError(null);\n      \n      const { start, end } = getDateRange();\n      \n      try {\n        // Load agent runs\n        const agentFilter = `StartedAt >= ''$' + '{start.toISOString()}'' AND StartedAt <= ''$' + '{end.toISOString()}''`;\n        console.log(''[AIPerformanceDashboard] Loading agent runs with filter:'', agentFilter);\n        \n        const agentResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Agent Runs'',\n          ExtraFilter: agentFilter,\n          OrderBy: ''StartedAt ASC'',\n          Fields: [''ID'', ''AgentID'', ''Agent'', ''StartedAt'', ''CompletedAt'', ''Success'', ''TotalTokensUsed'', ''TotalCost''],\n          MaxRows: 10000\n        });\n        \n        console.log(''[AIPerformanceDashboard] Agent runs loaded:'', {\n          success: agentResult?.Success,\n          count: agentResult?.Results?.length,\n          error: agentResult?.ErrorMessage\n        });\n        \n        if (agentResult?.Success) {\n          setAgentRuns(agentResult.Results || []);\n        } else {\n          console.error(''[AIPerformanceDashboard] Failed to load agent runs:'', agentResult?.ErrorMessage);\n        }\n        \n        // Load prompt runs\n        const promptFilter = `RunAt >= ''$' + '{start.toISOString()}'' AND RunAt <= ''$' + '{end.toISOString()}''`;\n        console.log(''[AIPerformanceDashboard] Loading prompt runs with filter:'', promptFilter);\n        \n        const promptResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Prompt Runs'',\n          ExtraFilter: promptFilter,\n          OrderBy: ''RunAt ASC'',\n          Fields: [''ID'', ''PromptID'', ''Prompt'', ''ModelID'', ''Model'', ''RunAt'', ''CompletedAt'', ''Success'', ''TokensUsed'', ''TotalCost''],\n          MaxRows: 10000\n        });\n        \n        console.log(''[AIPerformanceDashboard] Prompt runs loaded:'', {\n          success: promptResult?.Success,\n          count: promptResult?.Results?.length,\n          error: promptResult?.ErrorMessage\n        });\n        \n        if (promptResult?.Success) {\n          setPromptRuns(promptResult.Results || []);\n        } else {\n          console.error(''[AIPerformanceDashboard] Failed to load prompt runs:'', promptResult?.ErrorMessage);\n        }\n        \n      } catch (error) {\n        console.error(''[AIPerformanceDashboard] Error loading data:'', error);\n        setError(error.message || ''Failed to load data'');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadData();\n  }, [timeRange, utilities.rv, getDateRange]);\n  \n  // Aggregate data by time period\n  const aggregateData = useCallback((data, dateField, grouping) => {\n    console.log(`[AIPerformanceDashboard] Aggregating $' + '{data.length} records by $' + '{grouping}`);\n    \n    const grouped = {};\n    \n    data.forEach(item => {\n      const date = new Date(item[dateField]);\n      let key;\n      \n      switch(grouping) {\n        case ''day'':\n          key = date.toISOString().split(''T'')[0];\n          break;\n        case ''week'':\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          key = weekStart.toISOString().split(''T'')[0];\n          break;\n        case ''month'':\n          key = `$' + '{date.getFullYear()}-$' + '{String(date.getMonth() + 1).padStart(2, ''0'')}`;\n          break;\n        case ''quarter'':\n          const quarter = Math.floor(date.getMonth() / 3) + 1;\n          key = `$' + '{date.getFullYear()}-Q$' + '{quarter}`;\n          break;\n        default:\n          key = date.toISOString().split(''T'')[0];\n      }\n      \n      if (!grouped[key]) {\n        grouped[key] = {\n          date: key,\n          runs: 0,\n          tokens: 0,\n          cost: 0,\n          items: []\n        };\n      }\n      \n      grouped[key].runs++;\n      grouped[key].tokens += (item.TotalTokensUsed || item.TokensUsed || 0);\n      grouped[key].cost += (item.TotalCost || 0);\n      grouped[key].items.push(item);\n    });\n    \n    const result = Object.values(grouped).sort((a, b) => a.date.localeCompare(b.date));\n    console.log(`[AIPerformanceDashboard] Aggregated into $' + '{result.length} groups`);\n    return result;\n  }, []);\n  \n  // Get aggregated data for current view\n  const chartData = useMemo(() => {\n    const data = activeTab === ''agents'' ? agentRuns : promptRuns;\n    const dateField = activeTab === ''agents'' ? ''StartedAt'' : ''RunAt'';\n    return aggregateData(data, dateField, groupBy);\n  }, [activeTab, agentRuns, promptRuns, groupBy, aggregateData]);\n  \n  // Handle drill-down\n  const handleChartClick = useCallback((dataPoint) => {\n    console.log(''[AIPerformanceDashboard] Chart clicked:'', dataPoint);\n    setSelectedPoint(dataPoint);\n  }, []);\n  \n  // Handle time range change\n  const handleTimeRangeChange = useCallback((range) => {\n    console.log(''[AIPerformanceDashboard] Time range changed to:'', range);\n    setTimeRange(range);\n    setSelectedPoint(null);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      timeRange: range\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle grouping change\n  const handleGroupByChange = useCallback((grouping) => {\n    console.log(''[AIPerformanceDashboard] Grouping changed to:'', grouping);\n    setGroupBy(grouping);\n    setSelectedPoint(null);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      groupBy: grouping\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle tab change\n  const handleTabChange = useCallback((tab) => {\n    console.log(''[AIPerformanceDashboard] Tab changed to:'', tab);\n    setActiveTab(tab);\n    setSelectedPoint(null);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      activeTab: tab\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Calculate summary metrics\n  const metrics = useMemo(() => {\n    const data = activeTab === ''agents'' ? agentRuns : promptRuns;\n    return {\n      totalRuns: data.length,\n      totalTokens: data.reduce((sum, item) => sum + (item.TotalTokensUsed || item.TokensUsed || 0), 0),\n      totalCost: data.reduce((sum, item) => sum + (item.TotalCost || 0), 0),\n      avgTokensPerRun: data.length > 0 ? Math.round(data.reduce((sum, item) => sum + (item.TotalTokensUsed || item.TokensUsed || 0), 0) / data.length) : 0,\n      avgCostPerRun: data.length > 0 ? data.reduce((sum, item) => sum + (item.TotalCost || 0), 0) / data.length : 0\n    };\n  }, [activeTab, agentRuns, promptRuns]);\n  \n  console.log(''[AIPerformanceDashboard] Current state:'', {\n    timeRange,\n    groupBy,\n    activeTab,\n    agentRunsCount: agentRuns.length,\n    promptRunsCount: promptRuns.length,\n    chartDataPoints: chartData.length,\n    selectedPoint: selectedPoint?.date\n  });\n  \n  if (loading) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100%'',\n        color: styles.colors.textSecondary\n      }}>\n        Loading performance data...\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100%'',\n        color: styles.colors.error\n      }}>\n        Error: {error}\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      backgroundColor: styles.colors.background,\n      padding: styles.spacing.md\n    }}>\n      {/* Header Controls */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center'',\n        marginBottom: styles.spacing.lg,\n        flexWrap: ''wrap'',\n        gap: styles.spacing.md\n      }}>\n        {/* Tab Selector */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.xs,\n          backgroundColor: styles.colors.surface,\n          padding: styles.spacing.xs,\n          borderRadius: styles.borders?.radius || ''4px''\n        }}>\n          <button\n            onClick={() => handleTabChange(''agents'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: activeTab === ''agents'' ? styles.colors.primary : ''transparent'',\n              color: activeTab === ''agents'' ? ''white'' : styles.colors.text,\n              border: ''none'',\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: ''pointer'',\n              fontWeight: activeTab === ''agents'' ? ''600'' : ''400''\n            }}\n          >\n            Agent Runs\n          </button>\n          <button\n            onClick={() => handleTabChange(''prompts'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: activeTab === ''prompts'' ? styles.colors.primary : ''transparent'',\n              color: activeTab === ''prompts'' ? ''white'' : styles.colors.text,\n              border: ''none'',\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: ''pointer'',\n              fontWeight: activeTab === ''prompts'' ? ''600'' : ''400''\n            }}\n          >\n            Prompt Runs\n          </button>\n        </div>\n        \n        {/* Time Controls */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.md,\n          alignItems: ''center''\n        }}>\n          {/* Time Range */}\n          <select\n            value={timeRange}\n            onChange={(e) => handleTimeRangeChange(e.target.value)}\n            style={{\n              padding: styles.spacing.sm,\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              backgroundColor: styles.colors.surface,\n              color: styles.colors.text\n            }}\n          >\n            <option value=\"7d\">Last 7 Days</option>\n            <option value=\"30d\">Last 30 Days</option>\n            <option value=\"90d\">Last 90 Days</option>\n            <option value=\"1y\">Last Year</option>\n          </select>\n          \n          {/* Group By */}\n          <select\n            value={groupBy}\n            onChange={(e) => handleGroupByChange(e.target.value)}\n            style={{\n              padding: styles.spacing.sm,\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              backgroundColor: styles.colors.surface,\n              color: styles.colors.text\n            }}\n          >\n            <option value=\"day\">By Day</option>\n            <option value=\"week\">By Week</option>\n            <option value=\"month\">By Month</option>\n            <option value=\"quarter\">By Quarter</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Metrics Summary */}\n      <AIMetricsSummary\n        metrics={metrics}\n        styles={styles}\n        utilities={utilities}\n        components={components}\n        callbacks={callbacks}\n        savedUserSettings={savedUserSettings?.metricsSummary}\n        onSaveUserSettings={(settings) => onSaveUserSettings?.({\n          ...savedUserSettings,\n          metricsSummary: settings\n        })}\n      />\n      \n      {/* Main Chart Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column'',\n        gap: styles.spacing.lg,\n        minHeight: 0\n      }}>\n        {/* Time Series Chart */}\n        <div style={{\n          flex: selectedPoint ? ''0 0 400px'' : ''1'',\n          minHeight: ''300px''\n        }}>\n          <AITimeSeriesChart\n            data={chartData}\n            groupBy={groupBy}\n            activeTab={activeTab}\n            selectedPoint={selectedPoint}\n            onPointClick={handleChartClick}\n            styles={styles}\n            utilities={utilities}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings?.timeSeriesChart}\n            onSaveUserSettings={(settings) => onSaveUserSettings?.({\n              ...savedUserSettings,\n              timeSeriesChart: settings\n            })}\n          />\n        </div>\n        \n        {/* Drill-down Area */}\n        {selectedPoint && (\n          <div style={{\n            flex: 1,\n            display: ''flex'',\n            gap: styles.spacing.md,\n            minHeight: 0\n          }}>\n            {/* Distribution Chart */}\n            <div style={{ flex: ''0 0 400px'' }}>\n              <AIDistributionChart\n                data={selectedPoint.items}\n                activeTab={activeTab}\n                groupBy={groupBy}\n                styles={styles}\n                utilities={utilities}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.distributionChart}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  distributionChart: settings\n                })}\n              />\n            </div>\n            \n            {/* Detail Table */}\n            <div style={{ flex: 1, overflow: ''auto'' }}>\n              <AIDetailTable\n                data={selectedPoint.items}\n                activeTab={activeTab}\n                styles={styles}\n                utilities={utilities}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.detailTable}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  detailTable: settings\n                })}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
  "dependencies": [
    {
      "name": "AITimeSeriesChart",
      "location": "embedded",
      "title": "AI Time Series Chart",
      "description": "Multi-line time series chart with dual Y-axes showing AI runs, token usage, and costs over time",
      "type": "chart",
      "functionalRequirements": "## Time Series Chart Requirements\n\n### Core Functionality\n- Display three data series: total runs, total tokens, total cost\n- Dual Y-axis configuration (left: tokens, right: runs and cost)\n- Interactive tooltips showing all values on hover\n- Click on data points to trigger drill-down\n- Smooth line interpolation with data point markers\n- Legend with series toggle capability\n\n### Visual Features\n- Different colors for each series\n- Hover effects on data points\n- Animated transitions\n- Responsive sizing\n- Grid lines for readability",
      "dataRequirements": {
        "mode": "views",
        "description": "Receives aggregated data from parent component",
        "entities": [],
        "queries": []
      },
      "technicalDesign": "## Technical Design\n\n### Props\n- data: Array of aggregated data points\n- groupBy: Time grouping (day/week/month/quarter)\n- activeTab: Current view context (agents/prompts)\n- selectedPoint: Currently selected data point\n- onPointClick: Callback for drill-down\n\n### Chart Implementation\n- SVG-based rendering for performance\n- Custom scales for dual Y-axes\n- D3-style data binding\n- Synchronized tooltips across series",
      "properties": [
        {
          "name": "data",
          "type": "array",
          "required": true,
          "description": "Array of aggregated time series data"
        },
        {
          "name": "groupBy",
          "type": "string",
          "required": true,
          "description": "Time grouping: day, week, month, quarter"
        },
        {
          "name": "onPointClick",
          "type": "function",
          "required": false,
          "description": "Callback when data point is clicked"
        }
      ],
      "events": [
        {
          "name": "onPointClick",
          "description": "Fired when user clicks on a data point",
          "payload": "{ date: string, runs: number, tokens: number, cost: number, items: array }"
        }
      ],
      "exampleUsage": "<AITimeSeriesChart data={chartData} groupBy=\"day\" onPointClick={handleDrillDown} />",
      "code": "function AITimeSeriesChart({ data, groupBy, activeTab, selectedPoint, onPointClick, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AITimeSeriesChart] Rendering with'', data?.length || 0, ''data points'');\n  \n  const [hoveredPoint, setHoveredPoint] = useState(null);\n  const [showRuns, setShowRuns] = useState(savedUserSettings?.showRuns !== false);\n  const [showTokens, setShowTokens] = useState(savedUserSettings?.showTokens !== false);\n  const [showCost, setShowCost] = useState(savedUserSettings?.showCost !== false);\n  \n  const chartRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 800, height: 400 });\n  \n  // Update dimensions on resize\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (chartRef.current) {\n        const { width, height } = chartRef.current.getBoundingClientRect();\n        setDimensions({ width: Math.max(width, 400), height: Math.max(height, 300) });\n      }\n    };\n    \n    updateDimensions();\n    window.addEventListener(''resize'', updateDimensions);\n    return () => window.removeEventListener(''resize'', updateDimensions);\n  }, []);\n  \n  // Calculate chart dimensions\n  const margin = { top: 20, right: 60, bottom: 40, left: 70 };\n  const chartWidth = dimensions.width - margin.left - margin.right;\n  const chartHeight = dimensions.height - margin.top - margin.bottom;\n  \n  // Calculate scales\n  const { xScale, yLeftScale, yRightScale, maxTokens, maxRuns, maxCost } = useMemo(() => {\n    if (!data || data.length === 0) {\n      return {\n        xScale: () => 0,\n        yLeftScale: () => 0,\n        yRightScale: () => 0,\n        maxTokens: 0,\n        maxRuns: 0,\n        maxCost: 0\n      };\n    }\n    \n    const maxTokens = Math.max(...data.map(d => d.tokens || 0));\n    const maxRuns = Math.max(...data.map(d => d.runs || 0));\n    const maxCost = Math.max(...data.map(d => d.cost || 0));\n    \n    // X scale (time)\n    const xScale = (index) => (index / (data.length - 1 || 1)) * chartWidth;\n    \n    // Y scales\n    const yLeftScale = (value) => chartHeight - (value / (maxTokens || 1)) * chartHeight;\n    const yRightScale = (value, max) => chartHeight - (value / (max || 1)) * chartHeight;\n    \n    return { xScale, yLeftScale, yRightScale, maxTokens, maxRuns, maxCost };\n  }, [data, chartWidth, chartHeight]);\n  \n  // Generate line paths\n  const { runsPath, tokensPath, costPath } = useMemo(() => {\n    if (!data || data.length === 0) {\n      return { runsPath: '''', tokensPath: '''', costPath: '''' };\n    }\n    \n    const runsPoints = data.map((d, i) => `$' + '{xScale(i)},$' + '{yRightScale(d.runs, maxRuns)}`);\n    const tokensPoints = data.map((d, i) => `$' + '{xScale(i)},$' + '{yLeftScale(d.tokens)}`);\n    const costPoints = data.map((d, i) => `$' + '{xScale(i)},$' + '{yRightScale(d.cost, maxCost)}`);\n    \n    return {\n      runsPath: `M $' + '{runsPoints.join('' L '')}`,\n      tokensPath: `M $' + '{tokensPoints.join('' L '')}`,\n      costPath: `M $' + '{costPoints.join('' L '')}`\n    };\n  }, [data, xScale, yLeftScale, yRightScale, maxTokens, maxRuns, maxCost]);\n  \n  // Format numbers for display\n  const formatNumber = (num) => {\n    if (num >= 1000000) return `$' + '{(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `$' + '{(num / 1000).toFixed(1)}K`;\n    return num.toFixed(0);\n  };\n  \n  const formatCost = (cost) => {\n    if (cost >= 1000) return `$$' + '{(cost / 1000).toFixed(1)}K`;\n    if (cost >= 1) return `$$' + '{cost.toFixed(2)}`;\n    return `$$' + '{cost.toFixed(4)}`;\n  };\n  \n  // Handle series toggle\n  const toggleSeries = (series) => {\n    const updates = {\n      showRuns: showRuns,\n      showTokens: showTokens,\n      showCost: showCost\n    };\n    \n    switch(series) {\n      case ''runs'':\n        updates.showRuns = !showRuns;\n        setShowRuns(!showRuns);\n        break;\n      case ''tokens'':\n        updates.showTokens = !showTokens;\n        setShowTokens(!showTokens);\n        break;\n      case ''cost'':\n        updates.showCost = !showCost;\n        setShowCost(!showCost);\n        break;\n    }\n    \n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      ...updates\n    });\n  };\n  \n  if (!data || data.length === 0) {\n    return (\n      <div style={{\n        width: ''100%'',\n        height: ''100%'',\n        display: ''flex'',\n        alignItems: ''center'',\n        justifyContent: ''center'',\n        backgroundColor: styles.colors.surface,\n        borderRadius: styles.borders?.radius || ''4px'',\n        color: styles.colors.textSecondary\n      }}>\n        No data available for the selected time range\n      </div>\n    );\n  }\n  \n  return (\n    <div \n      ref={chartRef}\n      style={{\n        width: ''100%'',\n        height: ''100%'',\n        backgroundColor: styles.colors.surface,\n        borderRadius: styles.borders?.radius || ''4px'',\n        padding: styles.spacing.md\n      }}\n    >\n      {/* Legend */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        gap: styles.spacing.lg,\n        marginBottom: styles.spacing.md\n      }}>\n        <label \n          style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            gap: styles.spacing.xs,\n            cursor: ''pointer'',\n            opacity: showRuns ? 1 : 0.5\n          }}\n        >\n          <input\n            type=\"checkbox\"\n            checked={showRuns}\n            onChange={() => toggleSeries(''runs'')}\n            style={{ cursor: ''pointer'' }}\n          />\n          <span style={{\n            width: ''20px'',\n            height: ''3px'',\n            backgroundColor: styles.colors.primary\n          }} />\n          <span style={{ color: styles.colors.text, fontSize: styles.typography.fontSize.sm }}>Runs</span>\n        </label>\n        \n        <label \n          style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            gap: styles.spacing.xs,\n            cursor: ''pointer'',\n            opacity: showTokens ? 1 : 0.5\n          }}\n        >\n          <input\n            type=\"checkbox\"\n            checked={showTokens}\n            onChange={() => toggleSeries(''tokens'')}\n            style={{ cursor: ''pointer'' }}\n          />\n          <span style={{\n            width: ''20px'',\n            height: ''3px'',\n            backgroundColor: styles.colors.success\n          }} />\n          <span style={{ color: styles.colors.text, fontSize: styles.typography.fontSize.sm }}>Tokens</span>\n        </label>\n        \n        <label \n          style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            gap: styles.spacing.xs,\n            cursor: ''pointer'',\n            opacity: showCost ? 1 : 0.5\n          }}\n        >\n          <input\n            type=\"checkbox\"\n            checked={showCost}\n            onChange={() => toggleSeries(''cost'')}\n            style={{ cursor: ''pointer'' }}\n          />\n          <span style={{\n            width: ''20px'',\n            height: ''3px'',\n            backgroundColor: styles.colors.warning\n          }} />\n          <span style={{ color: styles.colors.text, fontSize: styles.typography.fontSize.sm }}>Cost</span>\n        </label>\n      </div>\n      \n      {/* Chart */}\n      <svg \n        width={dimensions.width} \n        height={dimensions.height - 50}\n        style={{ display: ''block'' }}\n      >\n        <g transform={`translate($' + '{margin.left},$' + '{margin.top})`}>\n          {/* Grid lines */}\n          {[0, 0.25, 0.5, 0.75, 1].map((val) => (\n            <line\n              key={val}\n              x1={0}\n              y1={chartHeight * (1 - val)}\n              x2={chartWidth}\n              y2={chartHeight * (1 - val)}\n              stroke={styles.colors.border}\n              strokeOpacity={0.3}\n              strokeDasharray=\"2,2\"\n            />\n          ))}\n          \n          {/* Lines */}\n          {showTokens && (\n            <path\n              d={tokensPath}\n              fill=\"none\"\n              stroke={styles.colors.success}\n              strokeWidth={2}\n            />\n          )}\n          {showRuns && (\n            <path\n              d={runsPath}\n              fill=\"none\"\n              stroke={styles.colors.primary}\n              strokeWidth={2}\n            />\n          )}\n          {showCost && (\n            <path\n              d={costPath}\n              fill=\"none\"\n              stroke={styles.colors.warning}\n              strokeWidth={2}\n            />\n          )}\n          \n          {/* Data points */}\n          {data.map((point, i) => (\n            <g key={i}>\n              {showRuns && (\n                <circle\n                  cx={xScale(i)}\n                  cy={yRightScale(point.runs, maxRuns)}\n                  r={selectedPoint?.date === point.date ? 6 : 4}\n                  fill={styles.colors.primary}\n                  stroke=\"white\"\n                  strokeWidth={2}\n                  style={{ cursor: ''pointer'' }}\n                  onClick={() => onPointClick?.(point)}\n                  onMouseEnter={() => setHoveredPoint({ ...point, index: i })}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                />\n              )}\n              {showTokens && (\n                <circle\n                  cx={xScale(i)}\n                  cy={yLeftScale(point.tokens)}\n                  r={selectedPoint?.date === point.date ? 6 : 4}\n                  fill={styles.colors.success}\n                  stroke=\"white\"\n                  strokeWidth={2}\n                  style={{ cursor: ''pointer'' }}\n                  onClick={() => onPointClick?.(point)}\n                  onMouseEnter={() => setHoveredPoint({ ...point, index: i })}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                />\n              )}\n              {showCost && (\n                <circle\n                  cx={xScale(i)}\n                  cy={yRightScale(point.cost, maxCost)}\n                  r={selectedPoint?.date === point.date ? 6 : 4}\n                  fill={styles.colors.warning}\n                  stroke=\"white\"\n                  strokeWidth={2}\n                  style={{ cursor: ''pointer'' }}\n                  onClick={() => onPointClick?.(point)}\n                  onMouseEnter={() => setHoveredPoint({ ...point, index: i })}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                />\n              )}\n            </g>\n          ))}\n          \n          {/* Axes */}\n          {/* X-axis */}\n          <line\n            x1={0}\n            y1={chartHeight}\n            x2={chartWidth}\n            y2={chartHeight}\n            stroke={styles.colors.border}\n          />\n          \n          {/* X-axis labels */}\n          {data.map((point, i) => {\n            if (data.length > 10 && i % Math.ceil(data.length / 10) !== 0) return null;\n            return (\n              <text\n                key={i}\n                x={xScale(i)}\n                y={chartHeight + 20}\n                textAnchor=\"middle\"\n                fontSize={10}\n                fill={styles.colors.textSecondary}\n              >\n                {point.date}\n              </text>\n            );\n          })}\n          \n          {/* Y-axis left (tokens) */}\n          <line\n            x1={0}\n            y1={0}\n            x2={0}\n            y2={chartHeight}\n            stroke={styles.colors.border}\n          />\n          \n          {/* Y-axis left labels */}\n          <text\n            x={-10}\n            y={chartHeight}\n            textAnchor=\"end\"\n            fontSize={10}\n            fill={styles.colors.textSecondary}\n          >\n            0\n          </text>\n          <text\n            x={-10}\n            y={5}\n            textAnchor=\"end\"\n            fontSize={10}\n            fill={styles.colors.textSecondary}\n          >\n            {formatNumber(maxTokens)}\n          </text>\n          \n          {/* Y-axis left title */}\n          <text\n            x={-40}\n            y={chartHeight / 2}\n            textAnchor=\"middle\"\n            fontSize={12}\n            fill={styles.colors.success}\n            transform={`rotate(-90, -40, $' + '{chartHeight / 2})`}\n          >\n            Tokens\n          </text>\n          \n          {/* Y-axis right (runs/cost) */}\n          <line\n            x1={chartWidth}\n            y1={0}\n            x2={chartWidth}\n            y2={chartHeight}\n            stroke={styles.colors.border}\n          />\n          \n          {/* Y-axis right labels */}\n          <text\n            x={chartWidth + 10}\n            y={chartHeight}\n            textAnchor=\"start\"\n            fontSize={10}\n            fill={styles.colors.textSecondary}\n          >\n            0\n          </text>\n          <text\n            x={chartWidth + 10}\n            y={5}\n            textAnchor=\"start\"\n            fontSize={10}\n            fill={styles.colors.textSecondary}\n          >\n            {formatNumber(Math.max(maxRuns, maxCost))}\n          </text>\n          \n          {/* Y-axis right title */}\n          <text\n            x={chartWidth + 40}\n            y={chartHeight / 2}\n            textAnchor=\"middle\"\n            fontSize={12}\n            fill={styles.colors.primary}\n            transform={`rotate(90, $' + '{chartWidth + 40}, $' + '{chartHeight / 2})`}\n          >\n            Runs / Cost\n          </text>\n        </g>\n        \n        {/* Tooltip */}\n        {hoveredPoint && (\n          <g transform={`translate($' + '{margin.left},$' + '{margin.top})`}>\n            <rect\n              x={Math.min(xScale(hoveredPoint.index) + 10, chartWidth - 180)}\n              y={10}\n              width={170}\n              height={80}\n              fill={styles.colors.surface}\n              stroke={styles.colors.border}\n              rx={4}\n            />\n            <text\n              x={Math.min(xScale(hoveredPoint.index) + 20, chartWidth - 170)}\n              y={30}\n              fontSize={12}\n              fontWeight=\"bold\"\n              fill={styles.colors.text}\n            >\n              {hoveredPoint.date}\n            </text>\n            <text\n              x={Math.min(xScale(hoveredPoint.index) + 20, chartWidth - 170)}\n              y={50}\n              fontSize={11}\n              fill={styles.colors.primary}\n            >\n              Runs: {hoveredPoint.runs.toLocaleString()}\n            </text>\n            <text\n              x={Math.min(xScale(hoveredPoint.index) + 20, chartWidth - 170)}\n              y={65}\n              fontSize={11}\n              fill={styles.colors.success}\n            >\n              Tokens: {formatNumber(hoveredPoint.tokens)}\n            </text>\n            <text\n              x={Math.min(xScale(hoveredPoint.index) + 20, chartWidth - 170)}\n              y={80}\n              fontSize={11}\n              fill={styles.colors.warning}\n            >\n              Cost: {formatCost(hoveredPoint.cost)}\n            </text>\n          </g>\n        )}\n      </svg>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIDistributionChart",
      "location": "embedded",
      "title": "AI Distribution Chart",
      "description": "Pie and bar charts showing distribution of runs, tokens, and costs by agent or prompt for drill-down analysis",
      "type": "chart",
      "functionalRequirements": "## Distribution Chart Requirements\n\n### Core Functionality\n- Display distribution breakdown for selected time period\n- Toggle between pie chart and bar chart views\n- Show top 10 items with ''Others'' grouping\n- Display runs, tokens, and cost metrics\n- Interactive tooltips with detailed values\n- Color-coded segments with legend\n\n### Visual Features\n- Smooth transitions between chart types\n- Hover effects on segments\n- Click to filter/highlight\n- Responsive sizing\n- Data labels for major segments",
      "dataRequirements": {
        "mode": "views",
        "description": "Receives drill-down data from parent component",
        "entities": [],
        "queries": []
      },
      "technicalDesign": "## Technical Design\n\n### Props\n- data: Array of individual run records\n- activeTab: Current view context (agents/prompts)\n- groupBy: Time grouping context\n\n### Chart Implementation\n- Aggregates data by agent/prompt\n- Calculates percentages\n- Sorts by total value\n- Groups small items into ''Others'' category",
      "properties": [
        {
          "name": "data",
          "type": "array",
          "required": true,
          "description": "Array of run records to analyze"
        },
        {
          "name": "activeTab",
          "type": "string",
          "required": true,
          "description": "Current tab: agents or prompts"
        }
      ],
      "events": [],
      "exampleUsage": "<AIDistributionChart data={selectedPoint.items} activeTab=\"agents\" />",
      "code": "function AIDistributionChart({ data, activeTab, groupBy, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIDistributionChart] Rendering with'', data?.length || 0, ''items'');\n  \n  const [chartType, setChartType] = useState(savedUserSettings?.chartType || ''pie'');\n  const [metric, setMetric] = useState(savedUserSettings?.metric || ''runs'');\n  \n  // Aggregate data by agent/prompt\n  const aggregatedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n    \n    const nameField = activeTab === ''agents'' ? ''Agent'' : ''Prompt'';\n    const idField = activeTab === ''agents'' ? ''AgentID'' : ''PromptID'';\n    const grouped = {};\n    \n    data.forEach(item => {\n      const key = item[nameField] || item[idField] || ''Unknown'';\n      \n      if (!grouped[key]) {\n        grouped[key] = {\n          name: key,\n          runs: 0,\n          tokens: 0,\n          cost: 0\n        };\n      }\n      \n      grouped[key].runs++;\n      grouped[key].tokens += (item.TotalTokensUsed || item.TokensUsed || 0);\n      grouped[key].cost += (item.TotalCost || 0);\n    });\n    \n    // Sort by selected metric and take top 10\n    const sorted = Object.values(grouped)\n      .sort((a, b) => b[metric] - a[metric])\n      .slice(0, 10);\n    \n    // Calculate totals for percentage\n    const total = sorted.reduce((sum, item) => sum + item[metric], 0);\n    \n    return sorted.map(item => ({\n      ...item,\n      percentage: total > 0 ? (item[metric] / total) * 100 : 0\n    }));\n  }, [data, activeTab, metric]);\n  \n  // Generate colors\n  const colors = [\n    styles.colors.primary,\n    styles.colors.success,\n    styles.colors.warning,\n    styles.colors.error,\n    ''#9b59b6'',\n    ''#3498db'',\n    ''#1abc9c'',\n    ''#f39c12'',\n    ''#95a5a6'',\n    ''#34495e''\n  ];\n  \n  const handleChartTypeChange = (type) => {\n    setChartType(type);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      chartType: type\n    });\n  };\n  \n  const handleMetricChange = (newMetric) => {\n    setMetric(newMetric);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      metric: newMetric\n    });\n  };\n  \n  const formatValue = (value) => {\n    if (metric === ''cost'') return `$$' + '{value.toFixed(2)}`;\n    if (metric === ''tokens'' && value > 1000) return `$' + '{(value / 1000).toFixed(1)}K`;\n    return value.toLocaleString();\n  };\n  \n  const renderPieChart = () => {\n    const size = 300;\n    const center = size / 2;\n    const radius = size / 2 - 20;\n    \n    let currentAngle = -Math.PI / 2;\n    \n    return (\n      <svg width={size} height={size}>\n        {aggregatedData.map((item, index) => {\n          const angle = (item.percentage / 100) * Math.PI * 2;\n          const startX = center + Math.cos(currentAngle) * radius;\n          const startY = center + Math.sin(currentAngle) * radius;\n          const endX = center + Math.cos(currentAngle + angle) * radius;\n          const endY = center + Math.sin(currentAngle + angle) * radius;\n          const largeArc = angle > Math.PI ? 1 : 0;\n          \n          const path = `\n            M $' + '{center} $' + '{center}\n            L $' + '{startX} $' + '{startY}\n            A $' + '{radius} $' + '{radius} 0 $' + '{largeArc} 1 $' + '{endX} $' + '{endY}\n            Z\n          `;\n          \n          // Calculate label position\n          const labelAngle = currentAngle + angle / 2;\n          const labelRadius = radius * 0.7;\n          const labelX = center + Math.cos(labelAngle) * labelRadius;\n          const labelY = center + Math.sin(labelAngle) * labelRadius;\n          \n          currentAngle += angle;\n          \n          return (\n            <g key={index}>\n              <path\n                d={path}\n                fill={colors[index]}\n                stroke=\"white\"\n                strokeWidth={2}\n                opacity={0.8}\n                style={{ cursor: ''pointer'' }}\n              >\n                <title>\n                  {item.name}: {formatValue(item[metric])} ({item.percentage.toFixed(1)}%)\n                </title>\n              </path>\n              {item.percentage > 5 && (\n                <text\n                  x={labelX}\n                  y={labelY}\n                  textAnchor=\"middle\"\n                  dominantBaseline=\"middle\"\n                  fontSize={12}\n                  fill=\"white\"\n                  fontWeight=\"bold\"\n                  pointerEvents=\"none\"\n                >\n                  {item.percentage.toFixed(0)}%\n                </text>\n              )}\n            </g>\n          );\n        })}\n      </svg>\n    );\n  };\n  \n  const renderBarChart = () => {\n    const maxValue = Math.max(...aggregatedData.map(d => d[metric]));\n    const barHeight = 30;\n    const chartWidth = 400;\n    const chartHeight = aggregatedData.length * (barHeight + 10);\n    \n    return (\n      <svg width={chartWidth} height={chartHeight}>\n        {aggregatedData.map((item, index) => {\n          const barWidth = (item[metric] / maxValue) * (chartWidth - 150);\n          const y = index * (barHeight + 10);\n          \n          return (\n            <g key={index}>\n              <rect\n                x={0}\n                y={y}\n                width={barWidth}\n                height={barHeight}\n                fill={colors[index]}\n                opacity={0.8}\n              />\n              <text\n                x={barWidth + 5}\n                y={y + barHeight / 2}\n                dominantBaseline=\"middle\"\n                fontSize={12}\n                fill={styles.colors.text}\n              >\n                {formatValue(item[metric])}\n              </text>\n              <text\n                x={chartWidth - 5}\n                y={y + barHeight / 2}\n                textAnchor=\"end\"\n                dominantBaseline=\"middle\"\n                fontSize={11}\n                fill={styles.colors.textSecondary}\n              >\n                {item.name.length > 20 ? item.name.substring(0, 20) + ''...'' : item.name}\n              </text>\n            </g>\n          );\n        })}\n      </svg>\n    );\n  };\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      padding: styles.spacing.md,\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      {/* Header */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center'',\n        marginBottom: styles.spacing.md\n      }}>\n        <h3 style={{\n          margin: 0,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.lg\n        }}>\n          Distribution Analysis\n        </h3>\n        \n        {/* Controls */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.sm\n        }}>\n          {/* Metric selector */}\n          <select\n            value={metric}\n            onChange={(e) => handleMetricChange(e.target.value)}\n            style={{\n              padding: styles.spacing.xs,\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              backgroundColor: styles.colors.background,\n              color: styles.colors.text,\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            <option value=\"runs\">Runs</option>\n            <option value=\"tokens\">Tokens</option>\n            <option value=\"cost\">Cost</option>\n          </select>\n          \n          {/* Chart type toggle */}\n          <div style={{\n            display: ''flex'',\n            gap: ''2px'',\n            backgroundColor: styles.colors.background,\n            padding: ''2px'',\n            borderRadius: styles.borders?.radius || ''4px''\n          }}>\n            <button\n              onClick={() => handleChartTypeChange(''pie'')}\n              style={{\n                padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n                backgroundColor: chartType === ''pie'' ? styles.colors.primary : ''transparent'',\n                color: chartType === ''pie'' ? ''white'' : styles.colors.text,\n                border: ''none'',\n                borderRadius: styles.borders?.radius || ''4px'',\n                cursor: ''pointer'',\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              Pie\n            </button>\n            <button\n              onClick={() => handleChartTypeChange(''bar'')}\n              style={{\n                padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n                backgroundColor: chartType === ''bar'' ? styles.colors.primary : ''transparent'',\n                color: chartType === ''bar'' ? ''white'' : styles.colors.text,\n                border: ''none'',\n                borderRadius: styles.borders?.radius || ''4px'',\n                cursor: ''pointer'',\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              Bar\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Chart */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        minHeight: 0\n      }}>\n        {aggregatedData.length === 0 ? (\n          <div style={{\n            textAlign: ''center'',\n            color: styles.colors.textSecondary\n          }}>\n            No data to display\n          </div>\n        ) : (\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.lg,\n            alignItems: ''center''\n          }}>\n            {/* Chart */}\n            <div>\n              {chartType === ''pie'' ? renderPieChart() : renderBarChart()}\n            </div>\n            \n            {/* Legend */}\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              gap: styles.spacing.xs,\n              maxHeight: ''300px'',\n              overflowY: ''auto''\n            }}>\n              {aggregatedData.map((item, index) => (\n                <div\n                  key={index}\n                  style={{\n                    display: ''flex'',\n                    alignItems: ''center'',\n                    gap: styles.spacing.xs\n                  }}\n                >\n                  <div\n                    style={{\n                      width: ''12px'',\n                      height: ''12px'',\n                      backgroundColor: colors[index],\n                      borderRadius: ''2px''\n                    }}\n                  />\n                  <span style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.text\n                  }}>\n                    {item.name.length > 25 ? item.name.substring(0, 25) + ''...'' : item.name}\n                  </span>\n                  <span style={{\n                    fontSize: styles.typography.fontSize.xs,\n                    color: styles.colors.textSecondary\n                  }}>\n                    ({item.percentage.toFixed(1)}%)\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Summary */}\n      {aggregatedData.length > 0 && (\n        <div style={{\n          marginTop: styles.spacing.md,\n          padding: styles.spacing.sm,\n          backgroundColor: styles.colors.background,\n          borderRadius: styles.borders?.radius || ''4px'',\n          display: ''flex'',\n          justifyContent: ''space-around'',\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          <div style={{ textAlign: ''center'' }}>\n            <div style={{ color: styles.colors.textSecondary }}>Total Runs</div>\n            <div style={{ color: styles.colors.text, fontWeight: ''bold'' }}>\n              {data.length.toLocaleString()}\n            </div>\n          </div>\n          <div style={{ textAlign: ''center'' }}>\n            <div style={{ color: styles.colors.textSecondary }}>Total Tokens</div>\n            <div style={{ color: styles.colors.text, fontWeight: ''bold'' }}>\n              {formatValue(aggregatedData.reduce((sum, item) => sum + item.tokens, 0))}\n            </div>\n          </div>\n          <div style={{ textAlign: ''center'' }}>\n            <div style={{ color: styles.colors.textSecondary }}>Total Cost</div>\n            <div style={{ color: styles.colors.text, fontWeight: ''bold'' }}>\n              {formatValue(aggregatedData.reduce((sum, item) => sum + item.cost, 0))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIDetailTable",
      "location": "embedded",
      "title": "AI Detail Table",
      "description": "Detailed table view showing individual runs for drill-down analysis with sorting and filtering",
      "type": "table",
      "functionalRequirements": "## Detail Table Requirements\n\n### Core Functionality\n- Display individual run records in a sortable table\n- Show key fields: timestamp, name, success status, tokens, cost, execution time\n- Color-coded success/failure indicators\n- Sortable columns with visual indicators\n- Paginated results for large datasets\n- Export to CSV functionality\n- Expandable rows for additional details\n\n### Table Features\n- Responsive column widths\n- Hover row highlighting\n- Sticky header during scroll\n- Loading state for data updates\n- Empty state message",
      "dataRequirements": {
        "mode": "views",
        "description": "Receives detailed run data from parent component",
        "entities": [],
        "queries": []
      },
      "technicalDesign": "## Technical Design\n\n### Props\n- data: Array of run records\n- activeTab: Current view context (agents/prompts)\n\n### Table Management\n- Client-side sorting\n- Pagination with 25 rows per page\n- Column sorting state management\n- Row expansion for details",
      "properties": [
        {
          "name": "data",
          "type": "array",
          "required": true,
          "description": "Array of run records to display"
        },
        {
          "name": "activeTab",
          "type": "string",
          "required": true,
          "description": "Current tab: agents or prompts"
        }
      ],
      "events": [],
      "exampleUsage": "<AIDetailTable data={selectedPoint.items} activeTab=\"agents\" />",
      "code": "function AIDetailTable({ data, activeTab, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIDetailTable] Rendering with'', data?.length || 0, ''items'');\n  \n  const [sortField, setSortField] = useState(savedUserSettings?.sortField || ''timestamp'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''desc'');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [expandedRows, setExpandedRows] = useState(new Set());\n  \n  const rowsPerPage = 25;\n  \n  // Get the correct timestamp field\n  const timestampField = activeTab === ''agents'' ? ''StartedAt'' : ''RunAt'';\n  const nameField = activeTab === ''agents'' ? ''Agent'' : ''Prompt'';\n  const idField = activeTab === ''agents'' ? ''AgentID'' : ''PromptID'';\n  \n  // Sort data\n  const sortedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n    \n    const sorted = [...data].sort((a, b) => {\n      let aVal = a[sortField];\n      let bVal = b[sortField];\n      \n      // Handle null/undefined\n      if (aVal == null) return sortDirection === ''asc'' ? 1 : -1;\n      if (bVal == null) return sortDirection === ''asc'' ? -1 : 1;\n      \n      // Compare values\n      if (typeof aVal === ''string'') {\n        aVal = aVal.toLowerCase();\n        bVal = bVal.toLowerCase();\n      }\n      \n      if (aVal < bVal) return sortDirection === ''asc'' ? -1 : 1;\n      if (aVal > bVal) return sortDirection === ''asc'' ? 1 : -1;\n      return 0;\n    });\n    \n    return sorted;\n  }, [data, sortField, sortDirection]);\n  \n  // Paginate data\n  const paginatedData = useMemo(() => {\n    const start = currentPage * rowsPerPage;\n    const end = start + rowsPerPage;\n    return sortedData.slice(start, end);\n  }, [sortedData, currentPage, rowsPerPage]);\n  \n  const totalPages = Math.ceil(sortedData.length / rowsPerPage);\n  \n  const handleSort = (field) => {\n    if (sortField === field) {\n      const newDirection = sortDirection === ''asc'' ? ''desc'' : ''asc'';\n      setSortDirection(newDirection);\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: newDirection\n      });\n    } else {\n      setSortField(field);\n      setSortDirection(''asc'');\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: ''asc''\n      });\n    }\n    setCurrentPage(0);\n  };\n  \n  const toggleRowExpansion = (id) => {\n    const newExpanded = new Set(expandedRows);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedRows(newExpanded);\n  };\n  \n  const formatTimestamp = (timestamp) => {\n    if (!timestamp) return ''-'';\n    const date = new Date(timestamp);\n    return date.toLocaleString(''en-US'', {\n      month: ''short'',\n      day: ''numeric'',\n      hour: ''2-digit'',\n      minute: ''2-digit''\n    });\n  };\n  \n  const formatDuration = (ms) => {\n    if (!ms) return ''-'';\n    if (ms < 1000) return `$' + '{ms}ms`;\n    if (ms < 60000) return `$' + '{(ms / 1000).toFixed(1)}s`;\n    return `$' + '{(ms / 60000).toFixed(1)}m`;\n  };\n  \n  const exportToCSV = () => {\n    console.log(''[AIDetailTable] Exporting to CSV'');\n    \n    const headers = [\n      ''Timestamp'',\n      activeTab === ''agents'' ? ''Agent'' : ''Prompt'',\n      ''Success'',\n      ''Tokens'',\n      ''Cost''\n    ];\n    \n    // Add Duration header only for prompts\n    if (activeTab === ''prompts'') {\n      headers.push(''Duration'');\n    }\n    \n    const rows = sortedData.map(item => {\n      const row = [\n        item[timestampField],\n        item[nameField] || item[idField],\n        item.Success ? ''Yes'' : ''No'',\n        (item.TotalTokensUsed || item.TokensUsed) || 0,\n        item.TotalCost || 0\n      ];\n      \n      // Add Duration value only for prompts\n      if (activeTab === ''prompts'') {\n        row.push(item.ExecutionTimeMS || 0);\n      }\n      \n      return row;\n    });\n    \n    const csv = [\n      headers.join('',''),\n      ...rows.map(row => row.join('',''))\n    ].join(''\\n'');\n    \n    const blob = new Blob([csv], { type: ''text/csv'' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(''a'');\n    a.href = url;\n    a.download = `ai-$' + '{activeTab}-details-$' + '{new Date().toISOString().split(''T'')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  const columns = [\n    { field: timestampField, label: ''Timestamp'', width: ''150px'' },\n    { field: nameField, label: activeTab === ''agents'' ? ''Agent'' : ''Prompt'', width: ''auto'' },\n    { field: ''Success'', label: ''Status'', width: ''80px'' },\n    { field: ''TotalTokens'', label: ''Tokens'', width: ''100px'' },\n    { field: ''TotalCost'', label: ''Cost'', width: ''100px'' }\n  ];\n  \n  // Add Duration column only for Prompt Runs (Agent Runs don''t have ExecutionTimeMS)\n  if (activeTab === ''prompts'') {\n    columns.push({ field: ''ExecutionTimeMS'', label: ''Duration'', width: ''100px'' });\n  }\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      {/* Header */}\n      <div style={{\n        padding: styles.spacing.md,\n        borderBottom: `1px solid $' + '{styles.colors.border}`,\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center''\n      }}>\n        <h3 style={{\n          margin: 0,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.lg\n        }}>\n          Detailed Records ({sortedData.length})\n        </h3>\n        \n        <button\n          onClick={exportToCSV}\n          style={{\n            padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n            backgroundColor: styles.colors.primary,\n            color: ''white'',\n            border: ''none'',\n            borderRadius: styles.borders?.radius || ''4px'',\n            cursor: ''pointer'',\n            fontSize: styles.typography.fontSize.sm\n          }}\n        >\n          Export CSV\n        </button>\n      </div>\n      \n      {/* Table */}\n      <div style={{ flex: 1, overflow: ''auto'' }}>\n        {paginatedData.length === 0 ? (\n          <div style={{\n            padding: styles.spacing.xl,\n            textAlign: ''center'',\n            color: styles.colors.textSecondary\n          }}>\n            No records to display\n          </div>\n        ) : (\n          <table style={{\n            width: ''100%'',\n            borderCollapse: ''collapse''\n          }}>\n            <thead style={{\n              position: ''sticky'',\n              top: 0,\n              backgroundColor: styles.colors.surface,\n              borderBottom: `2px solid $' + '{styles.colors.border}`\n            }}>\n              <tr>\n                <th style={{ width: ''30px'', padding: styles.spacing.sm }} />\n                {columns.map(col => (\n                  <th\n                    key={col.field}\n                    onClick={() => handleSort(col.field)}\n                    style={{\n                      padding: styles.spacing.sm,\n                      textAlign: ''left'',\n                      color: styles.colors.text,\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: ''600'',\n                      cursor: ''pointer'',\n                      userSelect: ''none'',\n                      width: col.width\n                    }}\n                  >\n                    <div style={{\n                      display: ''flex'',\n                      alignItems: ''center'',\n                      gap: styles.spacing.xs\n                    }}>\n                      {col.label}\n                      {sortField === col.field && (\n                        <span style={{ fontSize: ''10px'' }}>\n                          {sortDirection === ''asc'' ? ''▲'' : ''▼''}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {paginatedData.map((row, index) => {\n                const isExpanded = expandedRows.has(row.ID);\n                return (\n                  <React.Fragment key={row.ID || index}>\n                    <tr style={{\n                      borderBottom: `1px solid $' + '{styles.colors.border}`,\n                      transition: ''background-color 0.2s'',\n                      backgroundColor: index % 2 === 0 ? ''transparent'' : styles.colors.background\n                    }}>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        textAlign: ''center''\n                      }}>\n                        <button\n                          onClick={() => toggleRowExpansion(row.ID)}\n                          style={{\n                            background: ''none'',\n                            border: ''none'',\n                            cursor: ''pointer'',\n                            color: styles.colors.textSecondary,\n                            padding: 0,\n                            fontSize: ''12px''\n                          }}\n                        >\n                          {isExpanded ? ''▼'' : ''▶''}\n                        </button>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text\n                      }}>\n                        {formatTimestamp(row[timestampField])}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        overflow: ''hidden'',\n                        textOverflow: ''ellipsis'',\n                        whiteSpace: ''nowrap'',\n                        maxWidth: ''200px''\n                      }}>\n                        {row[nameField] || row[idField] || ''-''}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm\n                      }}>\n                        <span style={{\n                          display: ''inline-block'',\n                          padding: `2px 8px`,\n                          borderRadius: ''12px'',\n                          backgroundColor: row.Success ? styles.colors.success + ''20'' : styles.colors.error + ''20'',\n                          color: row.Success ? styles.colors.success : styles.colors.error,\n                          fontSize: ''11px'',\n                          fontWeight: ''600''\n                        }}>\n                          {row.Success ? ''Success'' : ''Failed''}\n                        </span>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: ''right''\n                      }}>\n                        {(row.TotalTokensUsed || row.TokensUsed) ? (row.TotalTokensUsed || row.TokensUsed).toLocaleString() : ''-''}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: ''right''\n                      }}>\n                        {row.TotalCost ? `$$' + '{row.TotalCost.toFixed(4)}` : ''-''}\n                      </td>\n                      {activeTab === ''prompts'' && (\n                        <td style={{\n                          padding: styles.spacing.sm,\n                          fontSize: styles.typography.fontSize.sm,\n                          color: styles.colors.text,\n                          textAlign: ''right''\n                        }}>\n                          {formatDuration(row.ExecutionTimeMS)}\n                        </td>\n                      )}\n                    </tr>\n                    {isExpanded && (\n                      <tr>\n                        <td colSpan={columns.length + 1} style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.background,\n                          borderBottom: `1px solid $' + '{styles.colors.border}`\n                        }}>\n                          <div style={{\n                            display: ''grid'',\n                            gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'',\n                            gap: styles.spacing.md,\n                            fontSize: styles.typography.fontSize.sm\n                          }}>\n                            <div>\n                              <strong style={{ color: styles.colors.textSecondary }}>ID:</strong>\n                              <div style={{ color: styles.colors.text, fontFamily: ''monospace'' }}>\n                                {row.ID}\n                              </div>\n                            </div>\n                            {row.ErrorMessage && (\n                              <div style={{ gridColumn: ''1 / -1'' }}>\n                                <strong style={{ color: styles.colors.textSecondary }}>Error:</strong>\n                                <div style={{ color: styles.colors.error }}>\n                                  {row.ErrorMessage}\n                                </div>\n                              </div>\n                            )}\n                            {row.Model && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Model:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {row.Model}\n                                </div>\n                              </div>\n                            )}\n                            {row.CompletedAt && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Completed:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {formatTimestamp(row.CompletedAt)}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n      </div>\n      \n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div style={{\n          padding: styles.spacing.md,\n          borderTop: `1px solid $' + '{styles.colors.border}`,\n          display: ''flex'',\n          justifyContent: ''center'',\n          alignItems: ''center'',\n          gap: styles.spacing.sm\n        }}>\n          <button\n            onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}\n            disabled={currentPage === 0}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              backgroundColor: currentPage === 0 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === 0 ? styles.colors.textSecondary : ''white'',\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: currentPage === 0 ? ''not-allowed'' : ''pointer'',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Previous\n          </button>\n          \n          <span style={{\n            color: styles.colors.text,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Page {currentPage + 1} of {totalPages}\n          </span>\n          \n          <button\n            onClick={() => setCurrentPage(Math.min(totalPages - 1, currentPage + 1))}\n            disabled={currentPage === totalPages - 1}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              backgroundColor: currentPage === totalPages - 1 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === totalPages - 1 ? styles.colors.textSecondary : ''white'',\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: currentPage === totalPages - 1 ? ''not-allowed'' : ''pointer'',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIMetricsSummary",
      "location": "embedded",
      "title": "AI Metrics Summary",
      "description": "Summary cards displaying key performance metrics for the selected time period",
      "type": "other",
      "functionalRequirements": "## Metrics Summary Requirements\n\n### Core Functionality\n- Display key metrics in card format\n- Show total runs, tokens, and costs\n- Calculate averages per run\n- Display success rate percentage\n- Show trend indicators\n- Responsive card layout\n\n### Visual Features\n- Icon for each metric\n- Color-coded values\n- Hover effects\n- Smooth animations\n- Responsive grid",
      "dataRequirements": {
        "mode": "views",
        "description": "Receives calculated metrics from parent component",
        "entities": [],
        "queries": []
      },
      "technicalDesign": "## Technical Design\n\n### Props\n- metrics: Object with calculated metric values\n\n### Display\n- Responsive grid of metric cards\n- Each card shows metric name, value, and icon\n- Consistent styling with theme",
      "properties": [
        {
          "name": "metrics",
          "type": "object",
          "required": true,
          "description": "Calculated metrics object"
        }
      ],
      "events": [],
      "exampleUsage": "<AIMetricsSummary metrics={calculatedMetrics} />",
      "code": "function AIMetricsSummary({ metrics, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIMetricsSummary] Rendering metrics:'', metrics);\n  \n  const formatNumber = (num) => {\n    if (num >= 1000000) return `$' + '{(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `$' + '{(num / 1000).toFixed(1)}K`;\n    return num.toFixed(0);\n  };\n  \n  const formatCost = (cost) => {\n    if (cost >= 1000) return `$$' + '{(cost / 1000).toFixed(1)}K`;\n    if (cost >= 1) return `$$' + '{cost.toFixed(2)}`;\n    return `$$' + '{cost.toFixed(4)}`;\n  };\n  \n  const cards = [\n    {\n      label: ''Total Runs'',\n      value: formatNumber(metrics?.totalRuns || 0),\n      icon: ''▶'',\n      color: styles.colors.primary\n    },\n    {\n      label: ''Total Tokens'',\n      value: formatNumber(metrics?.totalTokens || 0),\n      icon: ''◆'',\n      color: styles.colors.success\n    },\n    {\n      label: ''Total Cost'',\n      value: formatCost(metrics?.totalCost || 0),\n      icon: ''$'',\n      color: styles.colors.warning\n    },\n    {\n      label: ''Avg Tokens/Run'',\n      value: formatNumber(metrics?.avgTokensPerRun || 0),\n      icon: ''⟳'',\n      color: styles.colors.info || styles.colors.primary\n    },\n    {\n      label: ''Avg Cost/Run'',\n      value: formatCost(metrics?.avgCostPerRun || 0),\n      icon: ''¢'',\n      color: styles.colors.info || styles.colors.primary\n    }\n  ];\n  \n  return (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'',\n      gap: styles.spacing.md,\n      marginBottom: styles.spacing.lg\n    }}>\n      {cards.map((card, index) => (\n        <div\n          key={index}\n          style={{\n            backgroundColor: styles.colors.surface,\n            borderRadius: styles.borders?.radius || ''4px'',\n            padding: styles.spacing.md,\n            boxShadow: ''0 1px 3px rgba(0,0,0,0.1)'',\n            transition: ''transform 0.2s, box-shadow 0.2s'',\n            cursor: ''default''\n          }}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n            e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.15)'';\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateY(0)'';\n            e.currentTarget.style.boxShadow = ''0 1px 3px rgba(0,0,0,0.1)'';\n          }}\n        >\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''space-between'',\n            marginBottom: styles.spacing.sm\n          }}>\n            <span style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              fontWeight: ''500''\n            }}>\n              {card.label}\n            </span>\n            <span style={{\n              fontSize: ''20px'',\n              color: card.color,\n              opacity: 0.7\n            }}>\n              {card.icon}\n            </span>\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl || ''24px'',\n            fontWeight: ''bold'',\n            color: card.color\n          }}>\n            {card.value}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    }
  ],
  "libraries": []
}'
SET
  @FunctionalRequirements_bb11c9bf = N'Display multi-line time series charts showing total runs, tokens, and costs over time. Support multiple time groupings: day, week, month, quarter. Dual Y-axis display (tokens on left, runs/costs on right). Click-to-drill-down on any chart point to see details for that period. Show distribution charts (pie/bar) for selected time period. Separate tabs for Agent Runs and Prompt Runs analysis.'
SET
  @TechnicalDesign_bb11c9bf = N'Root component manages overall dashboard state and data loading. Handles time range selection and grouping. Coordinates drill-down state between components. Manages tab switching between Agent and Prompt views. Child components: AITimeSeriesChart for multi-line charts with dual Y-axes, AIDistributionChart for pie/bar charts showing breakdown, AIDetailTable for detailed table view, AIMetricsSummary for key metrics cards.'
SET
  @HasCustomProps_bb11c9bf = 0
SET
  @HasCustomEvents_bb11c9bf = 0
SET
  @RequiresData_bb11c9bf = 1
SET
  @DependencyCount_bb11c9bf = 4
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_bb11c9bf,
  @Namespace = @Namespace_bb11c9bf,
  @Name = @Name_bb11c9bf,
  @Version = @Version_bb11c9bf,
  @VersionSequence = @VersionSequence_bb11c9bf,
  @Title = @Title_bb11c9bf,
  @Description = @Description_bb11c9bf,
  @Type = @Type_bb11c9bf,
  @Status = @Status_bb11c9bf,
  @DeveloperName = @DeveloperName_bb11c9bf,
  @DeveloperEmail = @DeveloperEmail_bb11c9bf,
  @DeveloperOrganization = @DeveloperOrganization_bb11c9bf,
  @SourceRegistryID = @SourceRegistryID_bb11c9bf,
  @ReplicatedAt = @ReplicatedAt_bb11c9bf,
  @LastSyncedAt = @LastSyncedAt_bb11c9bf,
  @Specification = @Specification_bb11c9bf,
  @FunctionalRequirements = @FunctionalRequirements_bb11c9bf,
  @TechnicalDesign = @TechnicalDesign_bb11c9bf,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_bb11c9bf,
  @TechnicalDesignVector = @TechnicalDesignVector_bb11c9bf,
  @HasCustomProps = @HasCustomProps_bb11c9bf,
  @HasCustomEvents = @HasCustomEvents_bb11c9bf,
  @RequiresData = @RequiresData_bb11c9bf,
  @DependencyCount = @DependencyCount_bb11c9bf;

-- Save MJ: Components (core SP call only)
DECLARE @ID_6912f79a UNIQUEIDENTIFIER,
@Namespace_6912f79a NVARCHAR(MAX),
@Name_6912f79a NVARCHAR(500),
@Version_6912f79a NVARCHAR(50),
@VersionSequence_6912f79a INT,
@Title_6912f79a NVARCHAR(1000),
@Description_6912f79a NVARCHAR(MAX),
@Type_6912f79a NVARCHAR(255),
@Status_6912f79a NVARCHAR(50),
@DeveloperName_6912f79a NVARCHAR(255),
@DeveloperEmail_6912f79a NVARCHAR(255),
@DeveloperOrganization_6912f79a NVARCHAR(255),
@SourceRegistryID_6912f79a UNIQUEIDENTIFIER,
@ReplicatedAt_6912f79a DATETIMEOFFSET,
@LastSyncedAt_6912f79a DATETIMEOFFSET,
@Specification_6912f79a NVARCHAR(MAX),
@FunctionalRequirements_6912f79a NVARCHAR(MAX),
@TechnicalDesign_6912f79a NVARCHAR(MAX),
@FunctionalRequirementsVector_6912f79a NVARCHAR(MAX),
@TechnicalDesignVector_6912f79a NVARCHAR(MAX),
@HasCustomProps_6912f79a BIT,
@HasCustomEvents_6912f79a BIT,
@RequiresData_6912f79a BIT,
@DependencyCount_6912f79a INT
SET
  @ID_6912f79a = '12796365-7678-410f-867d-3ef0598e0beb'
SET
  @Namespace_6912f79a = N'AI/Analytics/Performance'
SET
  @Name_6912f79a = N'AITimeSeriesChart'
SET
  @Version_6912f79a = N'1.0.0'
SET
  @VersionSequence_6912f79a = 1
SET
  @Title_6912f79a = N'AI Time Series Chart'
SET
  @Description_6912f79a = N'Multi-line time series chart with dual Y-axes showing AI runs, token usage, and costs over time'
SET
  @Type_6912f79a = N'Chart'
SET
  @Status_6912f79a = N'Published'
SET
  @Specification_6912f79a = N'{
  "name": "AITimeSeriesChart",
  "location": "embedded",
  "title": "AI Time Series Chart",
  "description": "Multi-line time series chart with dual Y-axes showing AI runs, token usage, and costs over time",
  "type": "chart",
  "functionalRequirements": "## Time Series Chart Requirements\n\n### Core Functionality\n- Display three data series: total runs, total tokens, total cost\n- Dual Y-axis configuration (left: tokens, right: runs and cost)\n- Interactive tooltips showing all values on hover\n- Click on data points to trigger drill-down\n- Smooth line interpolation with data point markers\n- Legend with series toggle capability\n- Responsive to container size changes\n\n### Visual Features\n- Consistent color coding (runs: blue, tokens: green, cost: orange)\n- Grid lines for better readability\n- Axis labels with appropriate formatting\n- Highlighted selection state for clicked points\n- Animated transitions on data updates\n- Zero-baseline for better comparison",
  "dataRequirements": {
    "mode": "views",
    "description": "Receives aggregated time series data from parent component",
    "entities": [],
    "queries": []
  },
  "technicalDesign": "## Technical Design\n\n### Props\n- data: Array of aggregated data points with date, runs, tokens, cost\n- groupBy: Current grouping (day/week/month/quarter)\n- activeTab: Current view (agents/prompts)\n- selectedPoint: Currently selected data point\n- onPointClick: Callback when point is clicked\n\n### Chart Configuration\n- Uses recharts library for rendering\n- Dual Y-axis setup with synchronized tooltips\n- Custom tick formatters for large numbers\n- Responsive container with aspect ratio preservation",
  "properties": [
    {
      "name": "data",
      "type": "array",
      "required": true,
      "description": "Array of time series data points"
    },
    {
      "name": "groupBy",
      "type": "string",
      "required": true,
      "description": "Time grouping: day, week, month, or quarter"
    },
    {
      "name": "activeTab",
      "type": "string",
      "required": true,
      "description": "Current tab: agents or prompts"
    },
    {
      "name": "selectedPoint",
      "type": "object",
      "required": false,
      "description": "Currently selected data point"
    },
    {
      "name": "onPointClick",
      "type": "function",
      "required": true,
      "description": "Callback when a data point is clicked"
    }
  ],
  "events": [
    {
      "name": "onPointClick",
      "description": "Fired when user clicks on a data point",
      "payload": "Data point object with date and values"
    }
  ],
  "exampleUsage": "<AITimeSeriesChart data={chartData} groupBy=\"day\" activeTab=\"agents\" onPointClick={handleChartClick} />",
  "code": "function AITimeSeriesChart({ data, groupBy, activeTab, selectedPoint, onPointClick, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AITimeSeriesChart] Rendering with'', data.length, ''data points'');\n  \n  // Format large numbers\n  const formatNumber = (value) => {\n    if (value >= 1000000) {\n      return `$' + '{(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$' + '{(value / 1000).toFixed(1)}K`;\n    }\n    return value.toFixed(0);\n  };\n  \n  // Format currency\n  const formatCurrency = (value) => {\n    if (value >= 1000) {\n      return `$$' + '{(value / 1000).toFixed(1)}K`;\n    }\n    return `$$' + '{value.toFixed(2)}`;\n  };\n  \n  // Format date based on grouping\n  const formatDate = (date) => {\n    const d = new Date(date);\n    switch(groupBy) {\n      case ''day'':\n        return d.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'' });\n      case ''week'':\n        return `Week of $' + '{d.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'' })}`;\n      case ''month'':\n        return d.toLocaleDateString(''en-US'', { month: ''short'', year: ''numeric'' });\n      case ''quarter'':\n        return date; // Already formatted as YYYY-Q#\n      default:\n        return date;\n    }\n  };\n  \n  // Prepare chart data\n  const chartData = useMemo(() => {\n    return data.map(point => ({\n      ...point,\n      displayDate: formatDate(point.date),\n      isSelected: selectedPoint?.date === point.date\n    }));\n  }, [data, selectedPoint, groupBy]);\n  \n  // Calculate max values for axis domains\n  const maxTokens = useMemo(() => Math.max(...data.map(d => d.tokens || 0)), [data]);\n  const maxRuns = useMemo(() => Math.max(...data.map(d => d.runs || 0)), [data]);\n  const maxCost = useMemo(() => Math.max(...data.map(d => d.cost || 0)), [data]);\n  \n  // Use a simple SVG chart since we can''t use external libraries\n  const width = 800;\n  const height = 400;\n  const margin = { top: 20, right: 80, bottom: 60, left: 80 };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  \n  // Create scales\n  const xScale = (index) => (index / (chartData.length - 1)) * innerWidth;\n  const yScaleTokens = (value) => innerHeight - (value / maxTokens) * innerHeight;\n  const yScaleRight = (value, max) => innerHeight - (value / max) * innerHeight;\n  \n  // Create path data for lines\n  const createPath = (data, valueKey, scale, max) => {\n    return data.map((d, i) => {\n      const x = xScale(i);\n      const y = scale(d[valueKey] || 0, max);\n      return `$' + '{i === 0 ? ''M'' : ''L''} $' + '{x} $' + '{y}`;\n    }).join('' '');\n  };\n  \n  const handlePointClick = (point) => {\n    console.log(''[AITimeSeriesChart] Point clicked:'', point);\n    onPointClick(point);\n  };\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      padding: styles.spacing.md,\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      <h3 style={{\n        margin: `0 0 $' + '{styles.spacing.md} 0`,\n        color: styles.colors.text,\n        fontSize: styles.typography.fontSize.lg\n      }}>\n        Performance Trends - {activeTab === ''agents'' ? ''Agent Runs'' : ''Prompt Runs''}\n      </h3>\n      \n      {/* Chart Container */}\n      <div style={{ flex: 1, position: ''relative'', minHeight: ''300px'' }}>\n        {chartData.length === 0 ? (\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            height: ''100%'',\n            color: styles.colors.textSecondary\n          }}>\n            No data available for the selected period\n          </div>\n        ) : (\n          <svg\n            viewBox={`0 0 $' + '{width} $' + '{height}`}\n            style={{ width: ''100%'', height: ''100%'' }}\n            preserveAspectRatio=\"xMidYMid meet\"\n          >\n            <g transform={`translate($' + '{margin.left}, $' + '{margin.top})`}>\n              {/* Grid lines */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <line\n                  key={tick}\n                  x1={0}\n                  x2={innerWidth}\n                  y1={innerHeight * (1 - tick)}\n                  y2={innerHeight * (1 - tick)}\n                  stroke={styles.colors.border}\n                  strokeOpacity={0.3}\n                  strokeDasharray=\"2,2\"\n                />\n              ))}\n              \n              {/* X-axis labels */}\n              {chartData.map((point, i) => {\n                if (chartData.length > 20 && i % Math.ceil(chartData.length / 10) !== 0) {\n                  return null;\n                }\n                return (\n                  <text\n                    key={i}\n                    x={xScale(i)}\n                    y={innerHeight + 20}\n                    textAnchor=\"middle\"\n                    fill={styles.colors.textSecondary}\n                    fontSize=\"12\"\n                  >\n                    {point.displayDate}\n                  </text>\n                );\n              })}\n              \n              {/* Y-axis labels (left - tokens) */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <text\n                  key={tick}\n                  x={-10}\n                  y={innerHeight * (1 - tick) + 5}\n                  textAnchor=\"end\"\n                  fill={styles.colors.textSecondary}\n                  fontSize=\"12\"\n                >\n                  {formatNumber(maxTokens * tick)}\n                </text>\n              ))}\n              \n              {/* Y-axis labels (right - cost) */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <text\n                  key={tick}\n                  x={innerWidth + 10}\n                  y={innerHeight * (1 - tick) + 5}\n                  textAnchor=\"start\"\n                  fill={styles.colors.textSecondary}\n                  fontSize=\"12\"\n                >\n                  {formatCurrency(maxCost * tick)}\n                </text>\n              ))}\n              \n              {/* Lines */}\n              <path\n                d={createPath(chartData, ''tokens'', yScaleTokens, maxTokens)}\n                fill=\"none\"\n                stroke={styles.colors.success || ''#10b981''}\n                strokeWidth=\"2\"\n              />\n              <path\n                d={createPath(chartData, ''runs'', yScaleRight, maxRuns)}\n                fill=\"none\"\n                stroke={styles.colors.primary || ''#3b82f6''}\n                strokeWidth=\"2\"\n              />\n              <path\n                d={createPath(chartData, ''cost'', yScaleRight, maxCost)}\n                fill=\"none\"\n                stroke={styles.colors.warning || ''#f59e0b''}\n                strokeWidth=\"2\"\n              />\n              \n              {/* Data points */}\n              {chartData.map((point, i) => (\n                <g key={i}>\n                  {/* Tokens */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleTokens(point.tokens || 0)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.success || ''#10b981''}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: ''pointer'' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                  {/* Runs */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleRight(point.runs || 0, maxRuns)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.primary || ''#3b82f6''}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: ''pointer'' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                  {/* Cost */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleRight(point.cost || 0, maxCost)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.warning || ''#f59e0b''}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: ''pointer'' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                </g>\n              ))}\n            </g>\n            \n            {/* Axis labels */}\n            <text\n              x={margin.left - 40}\n              y={height / 2}\n              transform={`rotate(-90, $' + '{margin.left - 40}, $' + '{height / 2})`}\n              textAnchor=\"middle\"\n              fill={styles.colors.textSecondary}\n              fontSize=\"14\"\n            >\n              Tokens\n            </text>\n            <text\n              x={width - margin.right + 40}\n              y={height / 2}\n              transform={`rotate(90, $' + '{width - margin.right + 40}, $' + '{height / 2})`}\n              textAnchor=\"middle\"\n              fill={styles.colors.textSecondary}\n              fontSize=\"14\"\n            >\n              Runs / Cost ($)\n            </text>\n          </svg>\n        )}\n      </div>\n      \n      {/* Legend */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        gap: styles.spacing.lg,\n        marginTop: styles.spacing.md\n      }}>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''12px'',\n            height: ''12px'',\n            backgroundColor: styles.colors.primary || ''#3b82f6'',\n            borderRadius: ''2px''\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Runs</span>\n        </div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''12px'',\n            height: ''12px'',\n            backgroundColor: styles.colors.success || ''#10b981'',\n            borderRadius: ''2px''\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Tokens</span>\n        </div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''12px'',\n            height: ''12px'',\n            backgroundColor: styles.colors.warning || ''#f59e0b'',\n            borderRadius: ''2px''\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Cost</span>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_6912f79a = N'Display three data series: total runs, total tokens, total cost. Dual Y-axis configuration (left: tokens, right: runs and cost). Interactive tooltips showing all values on hover. Click on data points to trigger drill-down. Smooth line interpolation with data point markers. Legend with series toggle capability.'
SET
  @TechnicalDesign_6912f79a = N'Uses SVG for chart rendering with custom scales. Dual Y-axis setup with synchronized tooltips. Custom tick formatters for large numbers. Responsive container with aspect ratio preservation.'
SET
  @HasCustomProps_6912f79a = 1
SET
  @HasCustomEvents_6912f79a = 1
SET
  @RequiresData_6912f79a = 1
SET
  @DependencyCount_6912f79a = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_6912f79a,
  @Namespace = @Namespace_6912f79a,
  @Name = @Name_6912f79a,
  @Version = @Version_6912f79a,
  @VersionSequence = @VersionSequence_6912f79a,
  @Title = @Title_6912f79a,
  @Description = @Description_6912f79a,
  @Type = @Type_6912f79a,
  @Status = @Status_6912f79a,
  @DeveloperName = @DeveloperName_6912f79a,
  @DeveloperEmail = @DeveloperEmail_6912f79a,
  @DeveloperOrganization = @DeveloperOrganization_6912f79a,
  @SourceRegistryID = @SourceRegistryID_6912f79a,
  @ReplicatedAt = @ReplicatedAt_6912f79a,
  @LastSyncedAt = @LastSyncedAt_6912f79a,
  @Specification = @Specification_6912f79a,
  @FunctionalRequirements = @FunctionalRequirements_6912f79a,
  @TechnicalDesign = @TechnicalDesign_6912f79a,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_6912f79a,
  @TechnicalDesignVector = @TechnicalDesignVector_6912f79a,
  @HasCustomProps = @HasCustomProps_6912f79a,
  @HasCustomEvents = @HasCustomEvents_6912f79a,
  @RequiresData = @RequiresData_6912f79a,
  @DependencyCount = @DependencyCount_6912f79a;

-- Save MJ: Components (core SP call only)
DECLARE @ID_68247dfa UNIQUEIDENTIFIER,
@Namespace_68247dfa NVARCHAR(MAX),
@Name_68247dfa NVARCHAR(500),
@Version_68247dfa NVARCHAR(50),
@VersionSequence_68247dfa INT,
@Title_68247dfa NVARCHAR(1000),
@Description_68247dfa NVARCHAR(MAX),
@Type_68247dfa NVARCHAR(255),
@Status_68247dfa NVARCHAR(50),
@DeveloperName_68247dfa NVARCHAR(255),
@DeveloperEmail_68247dfa NVARCHAR(255),
@DeveloperOrganization_68247dfa NVARCHAR(255),
@SourceRegistryID_68247dfa UNIQUEIDENTIFIER,
@ReplicatedAt_68247dfa DATETIMEOFFSET,
@LastSyncedAt_68247dfa DATETIMEOFFSET,
@Specification_68247dfa NVARCHAR(MAX),
@FunctionalRequirements_68247dfa NVARCHAR(MAX),
@TechnicalDesign_68247dfa NVARCHAR(MAX),
@FunctionalRequirementsVector_68247dfa NVARCHAR(MAX),
@TechnicalDesignVector_68247dfa NVARCHAR(MAX),
@HasCustomProps_68247dfa BIT,
@HasCustomEvents_68247dfa BIT,
@RequiresData_68247dfa BIT,
@DependencyCount_68247dfa INT
SET
  @ID_68247dfa = '1ebd8365-41eb-41e4-b71f-418628db4eb5'
SET
  @Namespace_68247dfa = N'AI/Analytics/Performance'
SET
  @Name_68247dfa = N'AIDistributionChart'
SET
  @Version_68247dfa = N'1.0.0'
SET
  @VersionSequence_68247dfa = 1
SET
  @Title_68247dfa = N'AI Distribution Chart'
SET
  @Description_68247dfa = N'Pie and bar charts showing distribution of runs, tokens, and costs by agent or prompt for drill-down analysis'
SET
  @Type_68247dfa = N'Chart'
SET
  @Status_68247dfa = N'Published'
SET
  @Specification_68247dfa = N'{
  "name": "AIDistributionChart",
  "location": "embedded",
  "title": "AI Distribution Chart",
  "description": "Pie and bar charts showing distribution of runs, tokens, and costs by agent or prompt for drill-down analysis",
  "type": "chart",
  "functionalRequirements": "## Distribution Chart Requirements\n\n### Core Functionality\n- Display distribution breakdown for selected time period\n- Toggle between pie chart and bar chart views\n- Show top 10 items with ''Others'' grouping\n- Display runs, tokens, and cost metrics\n- Interactive tooltips with detailed values\n- Click on segments to filter detail table\n- Color-coded segments with legend\n\n### Visual Features\n- Smooth transitions between chart types\n- Percentage labels on pie segments\n- Value labels on bar chart\n- Responsive sizing\n- Hover effects for interactivity",
  "dataRequirements": {
    "mode": "views",
    "description": "Receives drill-down data from parent component",
    "entities": [],
    "queries": []
  },
  "technicalDesign": "## Technical Design\n\n### Props\n- data: Array of items for selected period\n- activeTab: Current view (agents/prompts)\n- groupBy: Time grouping context\n\n### Chart Features\n- Aggregates data by agent/prompt\n- Calculates percentages\n- Sorts by total value\n- Groups small items into ''Others''",
  "properties": [
    {
      "name": "data",
      "type": "array",
      "required": true,
      "description": "Array of run items for distribution analysis"
    },
    {
      "name": "activeTab",
      "type": "string",
      "required": true,
      "description": "Current tab: agents or prompts"
    },
    {
      "name": "groupBy",
      "type": "string",
      "required": false,
      "description": "Time grouping context"
    }
  ],
  "events": [],
  "exampleUsage": "<AIDistributionChart data={selectedPoint.items} activeTab=\"agents\" />",
  "code": "function AIDistributionChart({ data, activeTab, groupBy, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIDistributionChart] Rendering with'', data?.length || 0, ''items'');\n  \n  const [chartType, setChartType] = useState(savedUserSettings?.chartType || ''pie'');\n  const [metric, setMetric] = useState(savedUserSettings?.metric || ''cost'');\n  \n  // Aggregate data by agent or prompt\n  const aggregatedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n    \n    const grouped = {};\n    const groupField = activeTab === ''agents'' ? ''Agent'' : ''Prompt'';\n    const idField = activeTab === ''agents'' ? ''AgentID'' : ''PromptID'';\n    \n    data.forEach(item => {\n      const key = item[groupField] || item[idField] || ''Unknown'';\n      if (!grouped[key]) {\n        grouped[key] = {\n          name: key,\n          runs: 0,\n          tokens: 0,\n          cost: 0\n        };\n      }\n      grouped[key].runs++;\n      grouped[key].tokens += (item.TotalTokensUsed || item.TokensUsed || 0);\n      grouped[key].cost += (item.TotalCost || 0);\n    });\n    \n    // Sort by selected metric and take top 10\n    const sorted = Object.values(grouped)\n      .sort((a, b) => b[metric] - a[metric])\n      .slice(0, 10);\n    \n    // Calculate total for percentages\n    const total = sorted.reduce((sum, item) => sum + item[metric], 0);\n    \n    return sorted.map(item => ({\n      ...item,\n      percentage: total > 0 ? (item[metric] / total) * 100 : 0\n    }));\n  }, [data, activeTab, metric]);\n  \n  // Color palette\n  const colors = [\n    ''#3b82f6'', ''#10b981'', ''#f59e0b'', ''#ef4444'', ''#8b5cf6'',\n    ''#ec4899'', ''#14b8a6'', ''#f97316'', ''#06b6d4'', ''#84cc16''\n  ];\n  \n  const handleChartTypeChange = (type) => {\n    setChartType(type);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      chartType: type\n    });\n  };\n  \n  const handleMetricChange = (newMetric) => {\n    setMetric(newMetric);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      metric: newMetric\n    });\n  };\n  \n  const formatValue = (value) => {\n    if (metric === ''cost'') {\n      return `$$' + '{value.toFixed(2)}`;\n    } else if (metric === ''tokens'') {\n      return value >= 1000000 ? `$' + '{(value / 1000000).toFixed(1)}M` : value >= 1000 ? `$' + '{(value / 1000).toFixed(1)}K` : value.toString();\n    }\n    return value.toString();\n  };\n  \n  // Calculate pie chart segments\n  const calculatePieSegments = () => {\n    let startAngle = -90; // Start from top\n    return aggregatedData.map((item, index) => {\n      const angle = (item.percentage / 100) * 360;\n      const segment = {\n        ...item,\n        startAngle,\n        endAngle: startAngle + angle,\n        color: colors[index % colors.length]\n      };\n      startAngle += angle;\n      return segment;\n    });\n  };\n  \n  const pieSegments = chartType === ''pie'' ? calculatePieSegments() : [];\n  \n  // Create pie slice path\n  const createPieSlice = (startAngle, endAngle, outerRadius, innerRadius = 0) => {\n    const startAngleRad = (startAngle * Math.PI) / 180;\n    const endAngleRad = (endAngle * Math.PI) / 180;\n    \n    const x1 = Math.cos(startAngleRad) * outerRadius;\n    const y1 = Math.sin(startAngleRad) * outerRadius;\n    const x2 = Math.cos(endAngleRad) * outerRadius;\n    const y2 = Math.sin(endAngleRad) * outerRadius;\n    \n    const largeArc = endAngle - startAngle > 180 ? 1 : 0;\n    \n    if (innerRadius > 0) {\n      const ix1 = Math.cos(startAngleRad) * innerRadius;\n      const iy1 = Math.sin(startAngleRad) * innerRadius;\n      const ix2 = Math.cos(endAngleRad) * innerRadius;\n      const iy2 = Math.sin(endAngleRad) * innerRadius;\n      \n      return `M $' + '{ix1} $' + '{iy1} L $' + '{x1} $' + '{y1} A $' + '{outerRadius} $' + '{outerRadius} 0 $' + '{largeArc} 1 $' + '{x2} $' + '{y2} L $' + '{ix2} $' + '{iy2} A $' + '{innerRadius} $' + '{innerRadius} 0 $' + '{largeArc} 0 $' + '{ix1} $' + '{iy1}`;\n    }\n    \n    return `M 0 0 L $' + '{x1} $' + '{y1} A $' + '{outerRadius} $' + '{outerRadius} 0 $' + '{largeArc} 1 $' + '{x2} $' + '{y2} Z`;\n  };\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      padding: styles.spacing.md,\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      {/* Header */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center'',\n        marginBottom: styles.spacing.md\n      }}>\n        <h3 style={{\n          margin: 0,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.lg\n        }}>\n          Distribution by {activeTab === ''agents'' ? ''Agent'' : ''Prompt''}\n        </h3>\n        \n        {/* Controls */}\n        <div style={{ display: ''flex'', gap: styles.spacing.sm }}>\n          {/* Metric Selector */}\n          <select\n            value={metric}\n            onChange={(e) => handleMetricChange(e.target.value)}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              backgroundColor: styles.colors.background,\n              color: styles.colors.text,\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            <option value=\"cost\">Cost</option>\n            <option value=\"tokens\">Tokens</option>\n            <option value=\"runs\">Runs</option>\n          </select>\n          \n          {/* Chart Type Toggle */}\n          <div style={{\n            display: ''flex'',\n            backgroundColor: styles.colors.background,\n            borderRadius: styles.borders?.radius || ''4px'',\n            border: `1px solid $' + '{styles.colors.border}`\n          }}>\n            <button\n              onClick={() => handleChartTypeChange(''pie'')}\n              style={{\n                padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n                backgroundColor: chartType === ''pie'' ? styles.colors.primary : ''transparent'',\n                color: chartType === ''pie'' ? ''white'' : styles.colors.text,\n                border: ''none'',\n                borderRadius: styles.borders?.radius || ''4px'',\n                cursor: ''pointer''\n              }}\n            >\n              Pie\n            </button>\n            <button\n              onClick={() => handleChartTypeChange(''bar'')}\n              style={{\n                padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n                backgroundColor: chartType === ''bar'' ? styles.colors.primary : ''transparent'',\n                color: chartType === ''bar'' ? ''white'' : styles.colors.text,\n                border: ''none'',\n                borderRadius: styles.borders?.radius || ''4px'',\n                cursor: ''pointer''\n              }}\n            >\n              Bar\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Chart */}\n      <div style={{ flex: 1, display: ''flex'', alignItems: ''center'', justifyContent: ''center'' }}>\n        {aggregatedData.length === 0 ? (\n          <div style={{ color: styles.colors.textSecondary }}>\n            No data available\n          </div>\n        ) : chartType === ''pie'' ? (\n          /* Pie Chart */\n          <svg viewBox=\"-150 -150 300 300\" style={{ maxWidth: ''300px'', maxHeight: ''300px'' }}>\n            {pieSegments.map((segment, index) => (\n              <g key={index}>\n                <path\n                  d={createPieSlice(segment.startAngle, segment.endAngle, 100, 50)}\n                  fill={segment.color}\n                  stroke=\"white\"\n                  strokeWidth=\"2\"\n                  opacity=\"0.9\"\n                  style={{ cursor: ''pointer'' }}\n                >\n                  <title>{segment.name}: {formatValue(segment[metric])} ({segment.percentage.toFixed(1)}%)</title>\n                </path>\n                {/* Label for large segments */}\n                {segment.percentage > 5 && (\n                  <text\n                    x={Math.cos(((segment.startAngle + segment.endAngle) / 2) * Math.PI / 180) * 75}\n                    y={Math.sin(((segment.startAngle + segment.endAngle) / 2) * Math.PI / 180) * 75}\n                    textAnchor=\"middle\"\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    fontWeight=\"bold\"\n                  >\n                    {segment.percentage.toFixed(0)}%\n                  </text>\n                )}\n              </g>\n            ))}\n          </svg>\n        ) : (\n          /* Bar Chart */\n          <div style={{\n            width: ''100%'',\n            maxWidth: ''400px'',\n            display: ''flex'',\n            flexDirection: ''column'',\n            gap: styles.spacing.xs\n          }}>\n            {aggregatedData.map((item, index) => {\n              const maxValue = Math.max(...aggregatedData.map(d => d[metric]));\n              const width = (item[metric] / maxValue) * 100;\n              \n              return (\n                <div key={index} style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.sm }}>\n                  <div style={{\n                    width: ''120px'',\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.text,\n                    overflow: ''hidden'',\n                    textOverflow: ''ellipsis'',\n                    whiteSpace: ''nowrap''\n                  }}>\n                    {item.name}\n                  </div>\n                  <div style={{\n                    flex: 1,\n                    height: ''24px'',\n                    backgroundColor: styles.colors.background,\n                    borderRadius: styles.borders?.radius || ''4px'',\n                    position: ''relative'',\n                    overflow: ''hidden''\n                  }}>\n                    <div style={{\n                      width: `$' + '{width}%`,\n                      height: ''100%'',\n                      backgroundColor: colors[index % colors.length],\n                      transition: ''width 0.3s ease''\n                    }} />\n                    <div style={{\n                      position: ''absolute'',\n                      right: styles.spacing.sm,\n                      top: ''50%'',\n                      transform: ''translateY(-50%)'',\n                      fontSize: styles.typography.fontSize.xs,\n                      color: width > 50 ? ''white'' : styles.colors.text,\n                      fontWeight: ''500''\n                    }}>\n                      {formatValue(item[metric])}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n      \n      {/* Legend */}\n      {chartType === ''pie'' && aggregatedData.length > 0 && (\n        <div style={{\n          display: ''flex'',\n          flexWrap: ''wrap'',\n          gap: styles.spacing.sm,\n          justifyContent: ''center'',\n          marginTop: styles.spacing.md\n        }}>\n          {aggregatedData.slice(0, 5).map((item, index) => (\n            <div key={index} style={{\n              display: ''flex'',\n              alignItems: ''center'',\n              gap: styles.spacing.xs\n            }}>\n              <div style={{\n                width: ''12px'',\n                height: ''12px'',\n                backgroundColor: colors[index % colors.length],\n                borderRadius: ''2px''\n              }} />\n              <span style={{\n                fontSize: styles.typography.fontSize.xs,\n                color: styles.colors.text,\n                maxWidth: ''100px'',\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {item.name}\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_68247dfa = N'Display distribution breakdown for selected time period. Toggle between pie chart and bar chart views. Show top 10 items with ''Others'' grouping. Display runs, tokens, and cost metrics. Interactive tooltips with detailed values. Color-coded segments with legend.'
SET
  @TechnicalDesign_68247dfa = N'Aggregates data by agent/prompt. Calculates percentages. Sorts by total value. Groups small items into ''Others'' category. Smooth transitions between chart types.'
SET
  @HasCustomProps_68247dfa = 1
SET
  @HasCustomEvents_68247dfa = 0
SET
  @RequiresData_68247dfa = 1
SET
  @DependencyCount_68247dfa = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_68247dfa,
  @Namespace = @Namespace_68247dfa,
  @Name = @Name_68247dfa,
  @Version = @Version_68247dfa,
  @VersionSequence = @VersionSequence_68247dfa,
  @Title = @Title_68247dfa,
  @Description = @Description_68247dfa,
  @Type = @Type_68247dfa,
  @Status = @Status_68247dfa,
  @DeveloperName = @DeveloperName_68247dfa,
  @DeveloperEmail = @DeveloperEmail_68247dfa,
  @DeveloperOrganization = @DeveloperOrganization_68247dfa,
  @SourceRegistryID = @SourceRegistryID_68247dfa,
  @ReplicatedAt = @ReplicatedAt_68247dfa,
  @LastSyncedAt = @LastSyncedAt_68247dfa,
  @Specification = @Specification_68247dfa,
  @FunctionalRequirements = @FunctionalRequirements_68247dfa,
  @TechnicalDesign = @TechnicalDesign_68247dfa,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_68247dfa,
  @TechnicalDesignVector = @TechnicalDesignVector_68247dfa,
  @HasCustomProps = @HasCustomProps_68247dfa,
  @HasCustomEvents = @HasCustomEvents_68247dfa,
  @RequiresData = @RequiresData_68247dfa,
  @DependencyCount = @DependencyCount_68247dfa;

-- Save MJ: Components (core SP call only)
DECLARE @ID_a11d772a UNIQUEIDENTIFIER,
@Namespace_a11d772a NVARCHAR(MAX),
@Name_a11d772a NVARCHAR(500),
@Version_a11d772a NVARCHAR(50),
@VersionSequence_a11d772a INT,
@Title_a11d772a NVARCHAR(1000),
@Description_a11d772a NVARCHAR(MAX),
@Type_a11d772a NVARCHAR(255),
@Status_a11d772a NVARCHAR(50),
@DeveloperName_a11d772a NVARCHAR(255),
@DeveloperEmail_a11d772a NVARCHAR(255),
@DeveloperOrganization_a11d772a NVARCHAR(255),
@SourceRegistryID_a11d772a UNIQUEIDENTIFIER,
@ReplicatedAt_a11d772a DATETIMEOFFSET,
@LastSyncedAt_a11d772a DATETIMEOFFSET,
@Specification_a11d772a NVARCHAR(MAX),
@FunctionalRequirements_a11d772a NVARCHAR(MAX),
@TechnicalDesign_a11d772a NVARCHAR(MAX),
@FunctionalRequirementsVector_a11d772a NVARCHAR(MAX),
@TechnicalDesignVector_a11d772a NVARCHAR(MAX),
@HasCustomProps_a11d772a BIT,
@HasCustomEvents_a11d772a BIT,
@RequiresData_a11d772a BIT,
@DependencyCount_a11d772a INT
SET
  @ID_a11d772a = 'd1420ccb-4502-47d5-b18c-4e268c18d659'
SET
  @Namespace_a11d772a = N'AI/Analytics/Performance'
SET
  @Name_a11d772a = N'AIDetailTable'
SET
  @Version_a11d772a = N'1.0.0'
SET
  @VersionSequence_a11d772a = 1
SET
  @Title_a11d772a = N'AI Detail Table'
SET
  @Description_a11d772a = N'Detailed table view showing individual runs for drill-down analysis with sorting and filtering'
SET
  @Type_a11d772a = N'Table'
SET
  @Status_a11d772a = N'Published'
SET
  @Specification_a11d772a = N'{
  "name": "AIDetailTable",
  "location": "embedded",
  "title": "AI Detail Table",
  "description": "Detailed table view showing individual runs for drill-down analysis with sorting and filtering",
  "type": "table",
  "functionalRequirements": "## Detail Table Requirements\n\n### Core Functionality\n- Display individual run records in a sortable table\n- Show key fields: timestamp, name, success status, tokens, cost, execution time\n- Color-coded success/failure indicators\n- Sortable columns with visual indicators\n- Paginated results for large datasets\n- Export to CSV functionality\n- Expandable rows for additional details\n\n### Table Features\n- Responsive column widths\n- Hover row highlighting\n- Sticky header during scroll\n- Loading state for data updates\n- Empty state message",
  "dataRequirements": {
    "mode": "views",
    "description": "Receives detailed run data from parent component",
    "entities": [],
    "queries": []
  },
  "technicalDesign": "## Technical Design\n\n### Props\n- data: Array of run records\n- activeTab: Current view context (agents/prompts)\n\n### Table Management\n- Client-side sorting\n- Pagination with 25 rows per page\n- Column sorting state management\n- Row expansion for details",
  "properties": [
    {
      "name": "data",
      "type": "array",
      "required": true,
      "description": "Array of run records to display"
    },
    {
      "name": "activeTab",
      "type": "string",
      "required": true,
      "description": "Current tab: agents or prompts"
    }
  ],
  "events": [],
  "exampleUsage": "<AIDetailTable data={selectedPoint.items} activeTab=\"agents\" />",
  "code": "function AIDetailTable({ data, activeTab, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIDetailTable] Rendering with'', data?.length || 0, ''items'');\n  \n  const [sortField, setSortField] = useState(savedUserSettings?.sortField || ''timestamp'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''desc'');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [expandedRows, setExpandedRows] = useState(new Set());\n  \n  const rowsPerPage = 25;\n  \n  // Get the correct timestamp field\n  const timestampField = activeTab === ''agents'' ? ''StartedAt'' : ''RunAt'';\n  const nameField = activeTab === ''agents'' ? ''Agent'' : ''Prompt'';\n  const idField = activeTab === ''agents'' ? ''AgentID'' : ''PromptID'';\n  \n  // Sort data\n  const sortedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n    \n    const sorted = [...data].sort((a, b) => {\n      let aVal = a[sortField];\n      let bVal = b[sortField];\n      \n      // Handle null/undefined\n      if (aVal == null) return sortDirection === ''asc'' ? 1 : -1;\n      if (bVal == null) return sortDirection === ''asc'' ? -1 : 1;\n      \n      // Compare values\n      if (typeof aVal === ''string'') {\n        aVal = aVal.toLowerCase();\n        bVal = bVal.toLowerCase();\n      }\n      \n      if (aVal < bVal) return sortDirection === ''asc'' ? -1 : 1;\n      if (aVal > bVal) return sortDirection === ''asc'' ? 1 : -1;\n      return 0;\n    });\n    \n    return sorted;\n  }, [data, sortField, sortDirection]);\n  \n  // Paginate data\n  const paginatedData = useMemo(() => {\n    const start = currentPage * rowsPerPage;\n    const end = start + rowsPerPage;\n    return sortedData.slice(start, end);\n  }, [sortedData, currentPage, rowsPerPage]);\n  \n  const totalPages = Math.ceil(sortedData.length / rowsPerPage);\n  \n  const handleSort = (field) => {\n    if (sortField === field) {\n      const newDirection = sortDirection === ''asc'' ? ''desc'' : ''asc'';\n      setSortDirection(newDirection);\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: newDirection\n      });\n    } else {\n      setSortField(field);\n      setSortDirection(''asc'');\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: ''asc''\n      });\n    }\n    setCurrentPage(0);\n  };\n  \n  const toggleRowExpansion = (id) => {\n    const newExpanded = new Set(expandedRows);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedRows(newExpanded);\n  };\n  \n  const formatTimestamp = (timestamp) => {\n    if (!timestamp) return ''-'';\n    const date = new Date(timestamp);\n    return date.toLocaleString(''en-US'', {\n      month: ''short'',\n      day: ''numeric'',\n      hour: ''2-digit'',\n      minute: ''2-digit''\n    });\n  };\n  \n  const formatDuration = (ms) => {\n    if (!ms) return ''-'';\n    if (ms < 1000) return `$' + '{ms}ms`;\n    if (ms < 60000) return `$' + '{(ms / 1000).toFixed(1)}s`;\n    return `$' + '{(ms / 60000).toFixed(1)}m`;\n  };\n  \n  const exportToCSV = () => {\n    console.log(''[AIDetailTable] Exporting to CSV'');\n    \n    const headers = [\n      ''Timestamp'',\n      activeTab === ''agents'' ? ''Agent'' : ''Prompt'',\n      ''Success'',\n      ''Tokens'',\n      ''Cost''\n    ];\n    \n    // Add Duration header only for prompts\n    if (activeTab === ''prompts'') {\n      headers.push(''Duration'');\n    }\n    \n    const rows = sortedData.map(item => {\n      const row = [\n        item[timestampField],\n        item[nameField] || item[idField],\n        item.Success ? ''Yes'' : ''No'',\n        (item.TotalTokensUsed || item.TokensUsed) || 0,\n        item.TotalCost || 0\n      ];\n      \n      // Add Duration value only for prompts\n      if (activeTab === ''prompts'') {\n        row.push(item.ExecutionTimeMS || 0);\n      }\n      \n      return row;\n    });\n    \n    const csv = [\n      headers.join('',''),\n      ...rows.map(row => row.join('',''))\n    ].join(''\\n'');\n    \n    const blob = new Blob([csv], { type: ''text/csv'' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(''a'');\n    a.href = url;\n    a.download = `ai-$' + '{activeTab}-details-$' + '{new Date().toISOString().split(''T'')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  const columns = [\n    { field: timestampField, label: ''Timestamp'', width: ''150px'' },\n    { field: nameField, label: activeTab === ''agents'' ? ''Agent'' : ''Prompt'', width: ''auto'' },\n    { field: ''Success'', label: ''Status'', width: ''80px'' },\n    { field: ''TotalTokens'', label: ''Tokens'', width: ''100px'' },\n    { field: ''TotalCost'', label: ''Cost'', width: ''100px'' }\n  ];\n  \n  // Add Duration column only for Prompt Runs (Agent Runs don''t have ExecutionTimeMS)\n  if (activeTab === ''prompts'') {\n    columns.push({ field: ''ExecutionTimeMS'', label: ''Duration'', width: ''100px'' });\n  }\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      {/* Header */}\n      <div style={{\n        padding: styles.spacing.md,\n        borderBottom: `1px solid $' + '{styles.colors.border}`,\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center''\n      }}>\n        <h3 style={{\n          margin: 0,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.lg\n        }}>\n          Detailed Records ({sortedData.length})\n        </h3>\n        \n        <button\n          onClick={exportToCSV}\n          style={{\n            padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n            backgroundColor: styles.colors.primary,\n            color: ''white'',\n            border: ''none'',\n            borderRadius: styles.borders?.radius || ''4px'',\n            cursor: ''pointer'',\n            fontSize: styles.typography.fontSize.sm\n          }}\n        >\n          Export CSV\n        </button>\n      </div>\n      \n      {/* Table */}\n      <div style={{ flex: 1, overflow: ''auto'' }}>\n        {paginatedData.length === 0 ? (\n          <div style={{\n            padding: styles.spacing.xl,\n            textAlign: ''center'',\n            color: styles.colors.textSecondary\n          }}>\n            No records to display\n          </div>\n        ) : (\n          <table style={{\n            width: ''100%'',\n            borderCollapse: ''collapse''\n          }}>\n            <thead style={{\n              position: ''sticky'',\n              top: 0,\n              backgroundColor: styles.colors.surface,\n              borderBottom: `2px solid $' + '{styles.colors.border}`\n            }}>\n              <tr>\n                <th style={{ width: ''30px'', padding: styles.spacing.sm }} />\n                {columns.map(col => (\n                  <th\n                    key={col.field}\n                    onClick={() => handleSort(col.field)}\n                    style={{\n                      padding: styles.spacing.sm,\n                      textAlign: ''left'',\n                      color: styles.colors.text,\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: ''600'',\n                      cursor: ''pointer'',\n                      userSelect: ''none'',\n                      width: col.width\n                    }}\n                  >\n                    <div style={{\n                      display: ''flex'',\n                      alignItems: ''center'',\n                      gap: styles.spacing.xs\n                    }}>\n                      {col.label}\n                      {sortField === col.field && (\n                        <span style={{ fontSize: ''10px'' }}>\n                          {sortDirection === ''asc'' ? ''▲'' : ''▼''}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {paginatedData.map((row, index) => {\n                const isExpanded = expandedRows.has(row.ID);\n                return (\n                  <React.Fragment key={row.ID || index}>\n                    <tr style={{\n                      borderBottom: `1px solid $' + '{styles.colors.border}`,\n                      transition: ''background-color 0.2s'',\n                      backgroundColor: index % 2 === 0 ? ''transparent'' : styles.colors.background\n                    }}>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        textAlign: ''center''\n                      }}>\n                        <button\n                          onClick={() => toggleRowExpansion(row.ID)}\n                          style={{\n                            background: ''none'',\n                            border: ''none'',\n                            cursor: ''pointer'',\n                            color: styles.colors.textSecondary,\n                            padding: 0,\n                            fontSize: ''12px''\n                          }}\n                        >\n                          {isExpanded ? ''▼'' : ''▶''}\n                        </button>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text\n                      }}>\n                        {formatTimestamp(row[timestampField])}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        overflow: ''hidden'',\n                        textOverflow: ''ellipsis'',\n                        whiteSpace: ''nowrap'',\n                        maxWidth: ''200px''\n                      }}>\n                        {row[nameField] || row[idField] || ''-''}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm\n                      }}>\n                        <span style={{\n                          display: ''inline-block'',\n                          padding: `2px 8px`,\n                          borderRadius: ''12px'',\n                          backgroundColor: row.Success ? styles.colors.success + ''20'' : styles.colors.error + ''20'',\n                          color: row.Success ? styles.colors.success : styles.colors.error,\n                          fontSize: ''11px'',\n                          fontWeight: ''600''\n                        }}>\n                          {row.Success ? ''Success'' : ''Failed''}\n                        </span>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: ''right''\n                      }}>\n                        {(row.TotalTokensUsed || row.TokensUsed) ? (row.TotalTokensUsed || row.TokensUsed).toLocaleString() : ''-''}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: ''right''\n                      }}>\n                        {row.TotalCost ? `$$' + '{row.TotalCost.toFixed(4)}` : ''-''}\n                      </td>\n                      {activeTab === ''prompts'' && (\n                        <td style={{\n                          padding: styles.spacing.sm,\n                          fontSize: styles.typography.fontSize.sm,\n                          color: styles.colors.text,\n                          textAlign: ''right''\n                        }}>\n                          {formatDuration(row.ExecutionTimeMS)}\n                        </td>\n                      )}\n                    </tr>\n                    {isExpanded && (\n                      <tr>\n                        <td colSpan={columns.length + 1} style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.background,\n                          borderBottom: `1px solid $' + '{styles.colors.border}`\n                        }}>\n                          <div style={{\n                            display: ''grid'',\n                            gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'',\n                            gap: styles.spacing.md,\n                            fontSize: styles.typography.fontSize.sm\n                          }}>\n                            <div>\n                              <strong style={{ color: styles.colors.textSecondary }}>ID:</strong>\n                              <div style={{ color: styles.colors.text, fontFamily: ''monospace'' }}>\n                                {row.ID}\n                              </div>\n                            </div>\n                            {row.ErrorMessage && (\n                              <div style={{ gridColumn: ''1 / -1'' }}>\n                                <strong style={{ color: styles.colors.textSecondary }}>Error:</strong>\n                                <div style={{ color: styles.colors.error }}>\n                                  {row.ErrorMessage}\n                                </div>\n                              </div>\n                            )}\n                            {row.Model && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Model:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {row.Model}\n                                </div>\n                              </div>\n                            )}\n                            {row.CompletedAt && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Completed:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {formatTimestamp(row.CompletedAt)}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n      </div>\n      \n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div style={{\n          padding: styles.spacing.md,\n          borderTop: `1px solid $' + '{styles.colors.border}`,\n          display: ''flex'',\n          justifyContent: ''center'',\n          alignItems: ''center'',\n          gap: styles.spacing.sm\n        }}>\n          <button\n            onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}\n            disabled={currentPage === 0}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              backgroundColor: currentPage === 0 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === 0 ? styles.colors.textSecondary : ''white'',\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: currentPage === 0 ? ''not-allowed'' : ''pointer'',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Previous\n          </button>\n          \n          <span style={{\n            color: styles.colors.text,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Page {currentPage + 1} of {totalPages}\n          </span>\n          \n          <button\n            onClick={() => setCurrentPage(Math.min(totalPages - 1, currentPage + 1))}\n            disabled={currentPage === totalPages - 1}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              backgroundColor: currentPage === totalPages - 1 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === totalPages - 1 ? styles.colors.textSecondary : ''white'',\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: currentPage === totalPages - 1 ? ''not-allowed'' : ''pointer'',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_a11d772a = N'Display individual run records in a sortable table. Show key fields: timestamp, name, success status, tokens, cost, execution time. Color-coded success/failure indicators. Sortable columns with visual indicators. Paginated results for large datasets. Export to CSV functionality. Expandable rows for additional details.'
SET
  @TechnicalDesign_a11d772a = N'Client-side sorting and pagination with 25 rows per page. Column sorting state management. Row expansion for details. CSV export functionality.'
SET
  @HasCustomProps_a11d772a = 1
SET
  @HasCustomEvents_a11d772a = 0
SET
  @RequiresData_a11d772a = 1
SET
  @DependencyCount_a11d772a = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_a11d772a,
  @Namespace = @Namespace_a11d772a,
  @Name = @Name_a11d772a,
  @Version = @Version_a11d772a,
  @VersionSequence = @VersionSequence_a11d772a,
  @Title = @Title_a11d772a,
  @Description = @Description_a11d772a,
  @Type = @Type_a11d772a,
  @Status = @Status_a11d772a,
  @DeveloperName = @DeveloperName_a11d772a,
  @DeveloperEmail = @DeveloperEmail_a11d772a,
  @DeveloperOrganization = @DeveloperOrganization_a11d772a,
  @SourceRegistryID = @SourceRegistryID_a11d772a,
  @ReplicatedAt = @ReplicatedAt_a11d772a,
  @LastSyncedAt = @LastSyncedAt_a11d772a,
  @Specification = @Specification_a11d772a,
  @FunctionalRequirements = @FunctionalRequirements_a11d772a,
  @TechnicalDesign = @TechnicalDesign_a11d772a,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_a11d772a,
  @TechnicalDesignVector = @TechnicalDesignVector_a11d772a,
  @HasCustomProps = @HasCustomProps_a11d772a,
  @HasCustomEvents = @HasCustomEvents_a11d772a,
  @RequiresData = @RequiresData_a11d772a,
  @DependencyCount = @DependencyCount_a11d772a;

-- Save MJ: Components (core SP call only)
DECLARE @ID_28de83f1 UNIQUEIDENTIFIER,
@Namespace_28de83f1 NVARCHAR(MAX),
@Name_28de83f1 NVARCHAR(500),
@Version_28de83f1 NVARCHAR(50),
@VersionSequence_28de83f1 INT,
@Title_28de83f1 NVARCHAR(1000),
@Description_28de83f1 NVARCHAR(MAX),
@Type_28de83f1 NVARCHAR(255),
@Status_28de83f1 NVARCHAR(50),
@DeveloperName_28de83f1 NVARCHAR(255),
@DeveloperEmail_28de83f1 NVARCHAR(255),
@DeveloperOrganization_28de83f1 NVARCHAR(255),
@SourceRegistryID_28de83f1 UNIQUEIDENTIFIER,
@ReplicatedAt_28de83f1 DATETIMEOFFSET,
@LastSyncedAt_28de83f1 DATETIMEOFFSET,
@Specification_28de83f1 NVARCHAR(MAX),
@FunctionalRequirements_28de83f1 NVARCHAR(MAX),
@TechnicalDesign_28de83f1 NVARCHAR(MAX),
@FunctionalRequirementsVector_28de83f1 NVARCHAR(MAX),
@TechnicalDesignVector_28de83f1 NVARCHAR(MAX),
@HasCustomProps_28de83f1 BIT,
@HasCustomEvents_28de83f1 BIT,
@RequiresData_28de83f1 BIT,
@DependencyCount_28de83f1 INT
SET
  @ID_28de83f1 = '57548cb2-944c-443d-8345-0f2e5cd673d1'
SET
  @Namespace_28de83f1 = N'AI/Analytics/Performance'
SET
  @Name_28de83f1 = N'AIMetricsSummary'
SET
  @Version_28de83f1 = N'1.0.0'
SET
  @VersionSequence_28de83f1 = 1
SET
  @Title_28de83f1 = N'AI Metrics Summary'
SET
  @Description_28de83f1 = N'Summary cards displaying key performance metrics for the selected time period'
SET
  @Type_28de83f1 = N'Other'
SET
  @Status_28de83f1 = N'Published'
SET
  @Specification_28de83f1 = N'{
  "name": "AIMetricsSummary",
  "location": "embedded", 
  "title": "AI Metrics Summary",
  "description": "Summary cards displaying key performance metrics for the selected time period",
  "type": "other",
  "functionalRequirements": "## Metrics Summary Requirements\n\n### Core Functionality\n- Display key metrics in card format\n- Show total runs, tokens, and costs\n- Calculate averages per run\n- Display success rate percentage\n- Show trend indicators (up/down from previous period)\n- Responsive card layout\n\n### Visual Features\n- Color-coded metric cards\n- Icon indicators for each metric\n- Animated number transitions\n- Hover effects for additional info",
  "dataRequirements": {
    "mode": "views",
    "description": "Receives calculated metrics from parent component",
    "entities": [],
    "queries": []
  },
  "technicalDesign": "## Technical Design\n\n### Props\n- metrics: Object with calculated metric values\n\n### Card Layout\n- Responsive grid of metric cards\n- Each card shows metric name, value, and trend\n- Consistent styling with theme",
  "properties": [
    {
      "name": "metrics",
      "type": "object",
      "required": true,
      "description": "Calculated metrics object with totalRuns, totalTokens, totalCost, etc."
    }
  ],
  "events": [],
  "exampleUsage": "<AIMetricsSummary metrics={metrics} />",
  "code": "function AIMetricsSummary({ metrics, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIMetricsSummary] Rendering metrics:'', metrics);\n  \n  const formatNumber = (value) => {\n    if (value >= 1000000) {\n      return `$' + '{(value / 1000000).toFixed(2)}M`;\n    } else if (value >= 1000) {\n      return `$' + '{(value / 1000).toFixed(1)}K`;\n    }\n    return value.toLocaleString();\n  };\n  \n  const formatCurrency = (value) => {\n    if (value >= 1000) {\n      return `$$' + '{(value / 1000).toFixed(2)}K`;\n    }\n    return `$$' + '{value.toFixed(2)}`;\n  };\n  \n  const metricCards = [\n    {\n      label: ''Total Runs'',\n      value: formatNumber(metrics.totalRuns || 0),\n      color: styles.colors.primary,\n      icon: ''▶'',\n      description: ''Total execution count''\n    },\n    {\n      label: ''Total Tokens'',\n      value: formatNumber(metrics.totalTokens || 0),\n      color: styles.colors.success,\n      icon: ''◆'',\n      description: ''Tokens consumed''\n    },\n    {\n      label: ''Total Cost'',\n      value: formatCurrency(metrics.totalCost || 0),\n      color: styles.colors.warning,\n      icon: ''$'',\n      description: ''Total spend''\n    },\n    {\n      label: ''Avg Tokens/Run'',\n      value: formatNumber(metrics.avgTokensPerRun || 0),\n      color: styles.colors.info || styles.colors.primary,\n      icon: ''⊙'',\n      description: ''Average token usage''\n    },\n    {\n      label: ''Avg Cost/Run'',\n      value: formatCurrency(metrics.avgCostPerRun || 0),\n      color: styles.colors.secondary,\n      icon: ''¢'',\n      description: ''Average cost per execution''\n    }\n  ];\n  \n  return (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'',\n      gap: styles.spacing.md,\n      marginBottom: styles.spacing.lg\n    }}>\n      {metricCards.map((card, index) => (\n        <div\n          key={index}\n          style={{\n            backgroundColor: styles.colors.surface,\n            borderRadius: styles.borders?.radius || ''4px'',\n            padding: styles.spacing.md,\n            borderLeft: `3px solid $' + '{card.color}`,\n            transition: ''transform 0.2s, box-shadow 0.2s'',\n            cursor: ''default'',\n            position: ''relative''\n          }}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n            e.currentTarget.style.boxShadow = `0 4px 12px $' + '{styles.colors.border}40`;\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateY(0)'';\n            e.currentTarget.style.boxShadow = ''none'';\n          }}\n          title={card.description}\n        >\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''space-between'',\n            marginBottom: styles.spacing.xs\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs,\n              color: styles.colors.textSecondary,\n              fontWeight: ''500''\n            }}>\n              {card.label}\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              color: card.color,\n              opacity: 0.3\n            }}>\n              {card.icon}\n            </div>\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.text,\n            fontWeight: ''700''\n          }}>\n            {card.value}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_28de83f1 = N'Display key metrics in card format. Show total runs, tokens, and costs. Calculate averages per run. Display success rate percentage. Show trend indicators. Responsive card layout.'
SET
  @TechnicalDesign_28de83f1 = N'Responsive grid of metric cards. Each card shows metric name, value, and icon. Consistent styling with theme. Hover effects for additional information.'
SET
  @HasCustomProps_28de83f1 = 1
SET
  @HasCustomEvents_28de83f1 = 0
SET
  @RequiresData_28de83f1 = 1
SET
  @DependencyCount_28de83f1 = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_28de83f1,
  @Namespace = @Namespace_28de83f1,
  @Name = @Name_28de83f1,
  @Version = @Version_28de83f1,
  @VersionSequence = @VersionSequence_28de83f1,
  @Title = @Title_28de83f1,
  @Description = @Description_28de83f1,
  @Type = @Type_28de83f1,
  @Status = @Status_28de83f1,
  @DeveloperName = @DeveloperName_28de83f1,
  @DeveloperEmail = @DeveloperEmail_28de83f1,
  @DeveloperOrganization = @DeveloperOrganization_28de83f1,
  @SourceRegistryID = @SourceRegistryID_28de83f1,
  @ReplicatedAt = @ReplicatedAt_28de83f1,
  @LastSyncedAt = @LastSyncedAt_28de83f1,
  @Specification = @Specification_28de83f1,
  @FunctionalRequirements = @FunctionalRequirements_28de83f1,
  @TechnicalDesign = @TechnicalDesign_28de83f1,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_28de83f1,
  @TechnicalDesignVector = @TechnicalDesignVector_28de83f1,
  @HasCustomProps = @HasCustomProps_28de83f1,
  @HasCustomEvents = @HasCustomEvents_28de83f1,
  @RequiresData = @RequiresData_28de83f1,
  @DependencyCount = @DependencyCount_28de83f1;


-- End of SQL Logging Session
-- Session ID: d4e7b38a-1f25-406e-8093-cf44f7a5dd32
-- Completed: 2025-08-15T16:45:19.296Z
-- Duration: 22748ms
-- Total Statements: 8












