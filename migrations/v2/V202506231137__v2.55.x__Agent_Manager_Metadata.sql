-- SQL Logging Session
-- Session ID: d7cb26ff-b976-4063-a6fc-438d6569578b
-- Started: 2025-06-23T16:32:08.514Z
-- Description: MetadataSync Push Operation
-- Generated by MemberJunction SQLServerDataProvider

-- Save Action Categories (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionCategory @ID = '0ac137dd-7e2f-4a57-afe3-688d097b594f',
@Name = 'Agent Management',
@Description = 'Actions for creating, managing, and configuring AI agents. Restricted to Agent Manager agent only.',
@ParentID = '15E03732-607E-4125-86F4-8C846EE88749',
@Status = 'Active';

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = 'ad6c84e7-20ff-405d-bd61-24759b2c6700',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'Create Agent',
@Description = 'Creates a new AI agent with specified configuration. Supports creating both top-level agents and sub-agents. Optionally creates and associates a system prompt if PromptText is provided. Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = 'Create Agent',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'f4df50f1-b5b2-4f76-9787-02c01bab5b75',
@ActionID = 'AD6C84E7-20FF-405D-BD61-24759B2C6700',
@Name = 'Name',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Name of the new agent',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'de7ae66f-604e-4bc3-94f7-2107f2aa8cc7',
@ActionID = 'AD6C84E7-20FF-405D-BD61-24759B2C6700',
@Name = 'Description',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Detailed description of the agent''s purpose and capabilities',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'e44f54e6-69b3-4892-af6d-28373db52c7c',
@ActionID = 'AD6C84E7-20FF-405D-BD61-24759B2C6700',
@Name = 'TypeID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the AI Agent Type. Either Type or TypeID must be provided',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '56ba11f2-d42f-4528-8f97-9fac67ce8c28',
@ActionID = 'AD6C84E7-20FF-405D-BD61-24759B2C6700',
@Name = 'Type',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Name of the AI Agent Type (e.g., ''Loop''). Either Type or TypeID must be provided',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'b66cf581-7dad-4e97-b33c-543df167dcf3',
@ActionID = 'AD6C84E7-20FF-405D-BD61-24759B2C6700',
@Name = 'ParentID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the parent agent if this is a sub-agent',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '486e6a9c-94d1-4f2c-a20c-cc75a3630f49',
@ActionID = 'AD6C84E7-20FF-405D-BD61-24759B2C6700',
@Name = 'PromptText',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'System prompt text that defines the agent''s behavior. If provided, creates and associates a prompt with the agent',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'c5269575-d999-4eec-8cad-2339e0d9e82c',
@ActionID = 'AD6C84E7-20FF-405D-BD61-24759B2C6700',
@Name = 'AgentID',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the newly created agent',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '6c8d279e-c833-40f7-bb9c-12a52aa93f4c',
@ActionID = 'AD6C84E7-20FF-405D-BD61-24759B2C6700',
@Name = 'PromptID',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the created prompt (if PromptText was provided)',
@IsRequired = 0;

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = 'da51a9ca-f7fa-40dc-85d1-556a178e1e4e',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'Update Agent',
@Description = 'Updates an existing AI agent''s configuration. Optionally updates the agent''s prompt text if provided. Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = 'Update Agent',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'a0fa9de9-69b5-4f60-8e69-2a1cc3878c7f',
@ActionID = 'DA51A9CA-F7FA-40DC-85D1-556A178E1E4E',
@Name = 'AgentID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the agent to update',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'b96c7230-bfb6-48ed-a12d-905440316e5e',
@ActionID = 'DA51A9CA-F7FA-40DC-85D1-556A178E1E4E',
@Name = 'Name',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'New name for the agent',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '1889b665-b353-4a10-9176-60e43c059deb',
@ActionID = 'DA51A9CA-F7FA-40DC-85D1-556A178E1E4E',
@Name = 'Description',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'New description for the agent',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '087bc31f-e5bb-42c2-9237-4fd9cd139dcb',
@ActionID = 'DA51A9CA-F7FA-40DC-85D1-556A178E1E4E',
@Name = 'PromptText',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'New system prompt text for the agent. Updates existing prompt or creates new one if none exists',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '79688b70-44da-4d47-98fe-fea8a5212014',
@ActionID = 'DA51A9CA-F7FA-40DC-85D1-556A178E1E4E',
@Name = 'Status',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'New status (Active, Inactive, etc.)',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'e8c15eda-6a05-4acc-97f1-15e988e502b5',
@ActionID = 'DA51A9CA-F7FA-40DC-85D1-556A178E1E4E',
@Name = 'Success',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'True if update was successful',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '82fd8de7-781e-4028-9b3d-33d7eb717231',
@ActionID = 'DA51A9CA-F7FA-40DC-85D1-556A178E1E4E',
@Name = 'PromptID',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the updated or created prompt (if PromptText was provided)',
@IsRequired = 0;

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = '63498d60-8ea5-4c8e-8d82-3e190d6ce078',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'List Agents',
@Description = 'Lists AI agents with optional filtering. Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = 'List Agents',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '64ce0408-5008-4ea2-8a89-ef602f34ae1a',
@ActionID = '63498D60-8EA5-4C8E-8D82-3E190D6CE078',
@Name = 'IncludeInactive',
@DefaultValue = 'false',
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Include inactive agents in results',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '11dbbdb0-1498-409d-a2ff-8287e05d3a3b',
@ActionID = '63498D60-8EA5-4C8E-8D82-3E190D6CE078',
@Name = 'ParentID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Filter by parent agent ID',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '4cd96c75-4fd2-46e4-84fa-82be332ffab5',
@ActionID = '63498D60-8EA5-4C8E-8D82-3E190D6CE078',
@Name = 'TypeID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Filter by agent type ID',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'b17e08c3-db89-4e62-9e29-7903c2d630e6',
@ActionID = '63498D60-8EA5-4C8E-8D82-3E190D6CE078',
@Name = 'Agents',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Simple Object',
@IsArray = 1,
@Description = 'Array of agent objects',
@IsRequired = 0;

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = '14a913e6-d6d7-4a03-b7e6-55c782d1eca3',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'Deactivate Agent',
@Description = 'Marks an agent as inactive (soft delete). Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = '__DeactivateAgent',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'e28402b3-062c-4d2a-b333-403a2ca0377a',
@ActionID = '14A913E6-D6D7-4A03-B7E6-55C782D1ECA3',
@Name = 'AgentID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the agent to deactivate',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'f798cb41-240b-4ebb-b053-70ea55a42329',
@ActionID = '14A913E6-D6D7-4A03-B7E6-55C782D1ECA3',
@Name = 'Reason',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Reason for deactivation',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '165ba7f4-6c2d-4cd4-9680-e1a7724f9313',
@ActionID = '14A913E6-D6D7-4A03-B7E6-55C782D1ECA3',
@Name = 'Success',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'True if deactivation was successful',
@IsRequired = 0;

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = '9c4674a4-154d-455d-882f-5894b17b4bf8',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'Associate Action With Agent',
@Description = 'Associates an action with an agent. Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = 'Associate Action With Agent',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'b1f2eedd-9f30-4659-9323-0e806539bddc',
@ActionID = '9C4674A4-154D-455D-882F-5894B17B4BF8',
@Name = 'AgentID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the agent',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '3a6fc1bf-35c1-440e-a7d6-61d997ed5c79',
@ActionID = '9C4674A4-154D-455D-882F-5894B17B4BF8',
@Name = 'ActionID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the action to associate',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'd8c54ec8-8cf8-44aa-a2c3-72ea0f7e08b5',
@ActionID = '9C4674A4-154D-455D-882F-5894B17B4BF8',
@Name = 'Status',
@DefaultValue = 'Active',
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Status of the association (Active/Inactive)',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '30ebea68-f334-41e8-b7e8-c39b20837856',
@ActionID = '9C4674A4-154D-455D-882F-5894B17B4BF8',
@Name = 'AgentActionID',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the created agent-action association',
@IsRequired = 0;

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = 'bec27bd2-6008-46e8-9a8e-204772df2517',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'Create Sub Agent',
@Description = 'Creates a new agent as a child of another agent. Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = '__CreateSubAgent',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'a737c31c-f6fd-4537-8738-a8e40122ea48',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'ParentAgentID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the parent agent',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '50030f5a-8cfb-4a62-9c72-3aa9992f2fcc',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'Name',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Name of the sub-agent',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '078768fb-4d67-4773-b74b-f4c22af293c2',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'Description',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Description of the sub-agent',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '2d73c904-274c-49b2-89bf-f1b722bfe504',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'TypeID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the AI Agent Type',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'a428e722-6f2c-4b4b-aeae-03c46568a583',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'SystemPrompt',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'System prompt for the sub-agent',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '89356024-7ab0-4824-8162-de1d34acec27',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'ExecutionOrder',
@DefaultValue = '1',
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Execution order among sibling agents',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'dd56796f-8046-4db8-9009-ea9f4afbf0d4',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'SubAgentID',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the newly created sub-agent',
@IsRequired = 0;

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = '00a65017-2c4a-420d-9043-f7e4ac5a35c4',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'Set Agent Prompt',
@Description = 'Associates or updates a prompt for an agent. Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = '__SetAgentPrompt',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '8d212d4d-8bfa-4949-9016-07d888f11de0',
@ActionID = '00A65017-2C4A-420D-9043-F7E4AC5A35C4',
@Name = 'AgentID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the agent',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '0ebaec05-cb47-4fb7-b86f-c5d9c2e54f4d',
@ActionID = '00A65017-2C4A-420D-9043-F7E4AC5A35C4',
@Name = 'PromptID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the prompt to associate',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'be32a06b-8e29-4a88-a8ed-36acc56fc4c5',
@ActionID = '00A65017-2C4A-420D-9043-F7E4AC5A35C4',
@Name = 'ExecutionOrder',
@DefaultValue = '0',
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Order of prompt execution',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '4d6f3bda-75a2-4eda-9c7c-13efe2cd2cde',
@ActionID = '00A65017-2C4A-420D-9043-F7E4AC5A35C4',
@Name = 'Status',
@DefaultValue = 'Active',
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Status of the prompt association',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'cec2b281-54fb-4865-a004-4c6c5ef50abb',
@ActionID = '00A65017-2C4A-420D-9043-F7E4AC5A35C4',
@Name = 'AssociationID',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the prompt association',
@IsRequired = 0;

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = '5d2c0b7d-93a0-42a1-b0eb-cdc5e60f090e',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'Validate Agent Configuration',
@Description = 'Validates that an agent has all required prompts and actions configured. Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = '__ValidateAgentConfiguration',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '4b8a8de1-f1c9-481d-bbd3-aa923295069d',
@ActionID = '5D2C0B7D-93A0-42A1-B0EB-CDC5E60F090E',
@Name = 'AgentID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the agent to validate',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '646480e2-252d-4472-b2b7-1b0ec6c1d19f',
@ActionID = '5D2C0B7D-93A0-42A1-B0EB-CDC5E60F090E',
@Name = 'IsValid',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'True if agent configuration is valid',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'b969b439-8447-443a-b739-392eeb848533',
@ActionID = '5D2C0B7D-93A0-42A1-B0EB-CDC5E60F090E',
@Name = 'ValidationErrors',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 1,
@Description = 'Array of validation error messages',
@IsRequired = 0;

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = '85f25a20-b62c-4bf2-9767-287105ec299c',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'Export Agent Bundle',
@Description = 'Exports an agent with all sub-agents and configurations as metadata. Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = '__ExportAgentBundle',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '1d2c77f6-2e75-434d-baf4-c22648294cdf',
@ActionID = '85F25A20-B62C-4BF2-9767-287105EC299C',
@Name = 'AgentID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the agent to export',
@IsRequired = 1;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '0e68f9d4-c1dc-4abf-b24b-5a36d34f0af5',
@ActionID = '85F25A20-B62C-4BF2-9767-287105EC299C',
@Name = 'IncludeSubAgents',
@DefaultValue = 'true',
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Include all sub-agents in export',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '683b4b2c-bad5-4aa2-8883-fa05422cb90a',
@ActionID = '85F25A20-B62C-4BF2-9767-287105EC299C',
@Name = 'IncludePrompts',
@DefaultValue = 'true',
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Include associated prompts',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'd64f0a6b-e555-4654-aa0f-c665f8411981',
@ActionID = '85F25A20-B62C-4BF2-9767-287105EC299C',
@Name = 'IncludeActions',
@DefaultValue = 'true',
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Include associated actions',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '54c4928d-54a0-4ff6-8fd8-e49258c5f5c5',
@ActionID = '85F25A20-B62C-4BF2-9767-287105EC299C',
@Name = 'Bundle',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Simple Object',
@IsArray = 0,
@Description = 'Exported agent bundle as JSON',
@IsRequired = 0;

GO

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAction @ID = '05a12211-bdf9-420b-bc6f-0befff7654dd',
@CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'List Actions',
@Description = 'Lists available actions that can be associated with agents. Used by Planning Designer Agent.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = 'List Actions',
@ParentID = NULL;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'c198bd07-f389-4a9d-953a-73afcd0995b9',
@ActionID = '05A12211-BDF9-420B-BC6F-0BEFFF7654DD',
@Name = 'CategoryID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Filter by action category ID',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = 'c37342ed-f81f-467c-84a2-84ae8310824f',
@ActionID = '05A12211-BDF9-420B-BC6F-0BEFFF7654DD',
@Name = 'ExcludeAgentManagement',
@DefaultValue = 'true',
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Exclude agent management actions from results',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '82f6b523-09b7-45c3-8fac-00b8c429ac8d',
@ActionID = '05A12211-BDF9-420B-BC6F-0BEFFF7654DD',
@Name = 'Actions',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Simple Object',
@IsArray = 1,
@Description = 'Array of available actions',
@IsRequired = 0;

GO

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateContent @TemplateID = '33AF5671-077E-46A9-94AB-340783733024',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = 'You are an expert at parsing Nunjucks templates. Your task is to extract all variables and parameters used in the template and provide structured information about each one.

## Template to Analyze:
{{ templateText }}

## Instructions:
Identify ALL variables used in the template, including:
1. Simple variables: {% raw %}{{ variableName }}{% endraw %}
2. Object properties: {% raw %}{{ user.email }}{% endraw %}, {% raw %}{{ data.items[0].name }}{% endraw %}
3. Variables in conditionals: {% raw %}{% if isActive %}{% endraw %}, {% raw %}{% if user.role == "admin" %}{% endraw %}
4. Loop variables: {% raw %}{% for item in items %}{% endraw %}, {% raw %}{% for key, value in object %}{% endraw %}
5. Variables in filters: {% raw %}{{ name | default(userName) }}{% endraw %}
6. Variables in function calls: {% raw %}{{ formatDate(createdAt) }}{% endraw %}
7. Variables in assignments: {% raw %}{% set total = price * quantity %}{% endraw %}

## **IMPORTANT** 
Do NOT include variables that are shown within {% raw %}{% raw %}{% endraw %}{% endraw %} blocks, those are for illustrative purposes and part of an illustration of what another template might have. Only consider variables that are **NOT** part of raw blocks to be valid for the purpose of this request.

For nested object references (like user.email), extract only the TOP-LEVEL variable name (user).

## Output Format: 
Return a JSON array of parameter objects with this structure:

```json
{
  "parameters": [
    {
      "name": "variableName",
      "type": "Scalar|Array|Object",
      "isRequired": true|false,
      "description": "Brief description of what this parameter is used for based on context",
      "usage": ["List of locations where this variable is used in the template"],
      "defaultValue": "Default value if found in template (e.g., from default filter)"
    }
  ]
}
```

## Rules:
1. Only include each variable ONCE (deduplicate)
2. Ignore Nunjucks built-in variables (loop, super, etc.)
3. For type detection:
   - If used in {% raw %}{% for x in variable %}{% endraw %} → type is "Array"
   - If properties are accessed (variable.property) → type is "Object"
   - Otherwise → type is "Scalar"
4. A variable is required if it has no default and no conditional protection
5. Include meaningful descriptions based on usage context
6. Sort parameters alphabetically by name

## Example:
Template:
{% raw %}
Hello {{ userName | default("Guest") }},
{% if orders %}
You have {{ orders.length }} orders.
{% for order in orders %}
- Order #{{ order.id }}: {{ order.total }}
{% endfor %}
{% endif %}
{% endraw %}

Output:
```json
{
  "parameters": [
    {
      "name": "orders",
      "type": "Array",
      "isRequired": false,
      "description": "List of user orders with id and total properties",
      "usage": ["if condition line 2", "for loop line 4", "length property line 3"],
      "defaultValue": null
    },
    {
      "name": "userName",
      "type": "Scalar",
      "isRequired": false,
      "description": "Name of the user to greet",
      "usage": ["greeting line 1"],
      "defaultValue": "Guest"
    }
  ]
}
```',
@Priority = 1,
@IsActive = 1,
@ID = '87E7401E-1AB6-4A41-A257-20ED3AE2CDA5';

GO

-- Save AI Prompt Categories (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPromptCategory @ID = '5a9e8840-2813-4df6-9fb9-4793fcd36f28',
@Name = 'Agent Management',
@ParentID = NULL,
@Description = 'Prompts for Agent Management System';

GO

-- Save Templates (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplate @ID = 'ddcc7370-c226-48aa-8772-723db8a88853',
@Name = 'Agent Manager - Main Prompt',
@Description = 'Template for AI Prompt: Agent Manager - Main Prompt',
@CategoryID = 'B09D433E-F36B-1410-8DB1-00021F8B792E',
@UserPrompt = NULL,
@UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
@ActiveAt = NULL,
@DisabledAt = NULL,
@IsActive = 1;

GO

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateContent @ID = 'c256e795-8901-45bc-8852-a59c6bd10d92',
@TemplateID = 'DDCC7370-C226-48AA-8772-723DB8A88853',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = '# Agent Manager System Prompt

## Role
You are the Agent Manager, the top-level orchestrator responsible for creating, editing, and managing AI agents within the MemberJunction system. You operate as a loop agent, continuously working to fulfill agent management requests until completion.

## Context
- **Current Date/Time**: {{ _CURRENT_DATE_AND_TIME }}
- **User**: {{ _USER_NAME }}
- **Organization**: {{ _ORGANIZATION_NAME }}
- **Agent Manager Context**: {{ agentManagerContext }}

## Responsibilities
1. **Agent Lifecycle Management**
   - Create new agents with proper configuration
   - Edit existing agent properties and behaviors
   - Deactivate agents when no longer needed (soft delete)
   - Validate agent configurations

2. **Sub-Agent Orchestration**
   - Call Requirements Analyst to gather detailed requirements
   - Call Planning Designer to create agent architecture
   - Call Prompt Designer to craft effective prompts
   - Coordinate information flow between sub-agents

3. **Metadata Management**
   - Use specialized actions to manipulate agent metadata
   - Associate actions with agents appropriately
   - Configure agent prompts and parameters
   - Maintain agent hierarchies

## Process Flow
1. **Understand Request**: Analyze the user''s request for agent creation/modification
2. **Gather Requirements**: Call Requirements Analyst sub-agent for detailed requirements
3. **Design Architecture**: Call Planning Designer sub-agent to design agent structure
4. **Create Prompts**: Call Prompt Designer sub-agent for each agent/sub-agent
5. **Execute Configuration**: Use your actions to create/update agent metadata
6. **Validate**: Ensure all agents are properly configured
7. **Report**: Provide clear status of completed work

## Available Actions
Your specialized actions include:
- Create Agent
- Update Agent
- List Agents
- Deactivate Agent
- Associate Action With Agent
- Create Sub Agent
- Set Agent Prompt
- Validate Agent Configuration
- Export Agent Bundle

## Data Structure
Maintain the AgentManagerContext throughout the process:

```typescript
/**
 * Agent Definition Interface for MemberJunction Agent Manager
 * 
 * This interface defines the complete structure for AI agents at any level
 * of hierarchy. All text fields support markdown formatting for rich documentation.
 * 
 * @module @memberjunction/agent-manager-core
 */

/**
 * Complete agent definition that supports n-levels of sub-agent hierarchy
 * All text fields support markdown formatting for rich documentation
 */
export interface AIAgentDefinition {
  // Basic Information
  name: string;
  description: string;
  readonly type: ''Loop'' // ONLY LOOP FOR NOW | ''Sequential'' | ''Graph'';
  purpose: string;
  
  // Requirements & Specifications
  requirements: {
    businessGoal: string;
    functionalRequirements: string;
    technicalRequirements: string;
    dataRequirements: string;
    integrationRequirements: string;
    assumptions: string;
    risks: string;
    outOfScope: string;
  };
  
  successCriteria: string;
  
  // Design & Architecture
  design: {
    actions: [
      {
        id: string, // id of the action from the available actions in our system
        name: string, // name of the action
        reason: string // Why this action is needed
      }
    ];
    // Sub-Agents (recursive structure for n-level depth)
    subAgents?: AIAgentDefinition[];
  };
  
  // Prompt Configuration
  prompt: {
    systemPrompt: string;
    templateVariables: string;
    promptNotes: string;
  };
}

/**
 * Root context for the Agent Manager that tracks the entire creation process
 */
export interface AIAgentManagerContext {
  // The main agent being created/edited
  agent: AIAgentDefinition;
  
  // Process tracking
  processStage: ''requirements'' | ''design'' | ''prompting'' | ''implementation'' | ''validation'' | ''complete'';
  
  // Session information
  session: {
    id: string;
    startedAt: string;
    userId: string;
    userName: string;
    purpose: string;
    notes: string;
  };
  
  // Validation results
  validation?: {
    isValid: boolean;
    report: string;
  };
}
```

## Guidelines
- Always start with requirements gathering for new agents
- Ensure proper separation of concerns between sub-agents
- Validate all configurations before marking as complete
- Maintain clear audit trail of all changes
- Only the Agent Manager can create/modify agents
- Respect the hierarchical nature of agent relationships

## Output Format
Always return structured JSON responses following the expected output format.

{{ _AGENT_TYPE_SYSTEM_PROMPT }}',
@Priority = 1,
@IsActive = 1;

GO
 
-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'DDCC7370-C226-48AA-8772-723DB8A88853',
@Name = '_AGENT_TYPE_SYSTEM_PROMPT',
@Description = 'Injected system prompt related to the agent type for the Agent Manager',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'DDCC7370-C226-48AA-8772-723DB8A88853',
@Name = '_CURRENT_DATE_AND_TIME',
@Description = 'Current date and time when the Agent Manager is operating',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'DDCC7370-C226-48AA-8772-723DB8A88853',
@Name = '_ORGANIZATION_NAME',
@Description = 'Name of the organization to which the user belongs',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'DDCC7370-C226-48AA-8772-723DB8A88853',
@Name = '_USER_NAME',
@Description = 'Name of the user interacting with the Agent Manager',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'DDCC7370-C226-48AA-8772-723DB8A88853',
@Name = 'agentManagerContext',
@Description = 'Current state and context of the Agent Manager including agent definitions and process metadata',
@Type = 'Object',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPrompt @ID = '96bcae1c-b1f0-4fc4-9988-54b067bc962a',
@Name = 'Agent Manager - Main Prompt',
@Description = 'System prompt for the Agent Manager agent that orchestrates creation and management of other agents.',
@TemplateID = 'DDCC7370-C226-48AA-8772-723DB8A88853',
@CategoryID = '5A9E8840-2813-4DF6-9FB9-4793FCD36F28',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = 'Active',
@ResponseFormat = 'JSON',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = 'Specific',
@PowerPreference = 'Highest',
@ParallelizationMode = 'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = 'object',
@OutputExample = '{
  "action": "call_subagent",
  "subagent": "Requirements Analyst Agent",
  "input": {
    "userRequest": "Create an agent that can analyze customer feedback and generate weekly summary reports",
    "context": {
      "currentAgents": [],
      "availableDataSources": ["Customer Feedback Database", "Support Tickets", "Product Reviews"]
    }
  },
  "reasoning": "Starting with requirements gathering to fully understand the needs for the customer feedback analysis agent before proceeding with design.",
  "expectedNextSteps": "## Next Steps\n\n1. **Requirements Gathering** - Requirements Analyst will clarify:\n   - Business objectives and success criteria\n   - Technical requirements and constraints\n   - Stakeholder needs and expectations\n\n2. **Agent Design** - Planning Designer will create:\n   - Agent hierarchy and structure\n   - Action selection and configuration\n   - Data flow and execution strategy\n\n3. **Prompt Engineering** - Prompt Designer will craft:\n   - System prompts for each agent\n   - Template variables and examples\n   - Optimization recommendations\n\n4. **Implementation** - Agent Manager will:\n   - Create agents using metadata actions\n   - Configure prompts and associations\n   - Validate complete configuration",
  "agentManagerContext": {
    "agent": null,
    "processStage": "requirements",
    "session": {
      "id": "session-12345",
      "startedAt": "2024-01-15T10:00:00Z",
      "userId": "user-789",
      "userName": "admin@example.com",
      "purpose": "Create an agent that can analyze customer feedback and generate weekly summary reports",
      "notes": "## Session Notes\n\n- User requested customer feedback analysis capability\n- Weekly reporting cadence specified\n- Multiple data sources available for integration"
    }
  }
}',
@ValidationBehavior = 'Strict',
@MaxRetries = 2,
@RetryDelayMS = 1000,
@RetryStrategy = 'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = 'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = 'System',
@PromptPosition = 'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL;

GO

-- Save MJ: AI Prompt Models (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPromptModel @ID = '3bf5f393-10c4-4470-8783-2131f18e4196',
@PromptID = '96BCAE1C-B1F0-4FC4-9988-54B067BC962A',
@ModelID = '287E317F-BF26-F011-A770-AC1A3D21423D',
@VendorID = 'D8A5CCEC-6A37-EF11-86D4-000D3A4E707E',
@ConfigurationID = NULL,
@Priority = 10,
@ExecutionGroup = 0,
@ModelParameters = NULL,
@Status = 'Active',
@ParallelizationMode = 'None',
@ParallelCount = 1,
@ParallelConfigParam = NULL;

GO

-- Save Templates (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplate @ID = '51e36b83-176e-47de-9401-c7dd22980459',
@Name = 'Requirements Analyst Agent - Main Prompt',
@Description = 'Template for AI Prompt: Requirements Analyst Agent - Main Prompt',
@CategoryID = 'B09D433E-F36B-1410-8DB1-00021F8B792E',
@UserPrompt = NULL,
@UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
@ActiveAt = NULL,
@DisabledAt = NULL,
@IsActive = 1;

GO

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateContent @ID = 'a2fb1630-dd2b-4899-a588-9aadf28672d6',
@TemplateID = '51E36B83-176E-47DE-9401-C7DD22980459',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = '# Requirements Analyst Agent System Prompt

## Role
You are a Requirements Analyst Agent, an MBA-type business analyst with deep technical expertise. Your specialization is gathering and clarifying detailed requirements for AI agent creation through iterative conversations. You ensure complete understanding before any design or implementation begins.

## Context
- **Current Date/Time**: {{ _CURRENT_DATE_AND_TIME }}
- **User**: {{ _USER_NAME }}
- **Organization**: {{ _ORGANIZATION_NAME }}
- **Parent Agent**: Agent Manager
- **Current Requirements Context**: {{ requirementsContext }}

## Core Competencies
1. **Business Analysis**
   - Understand business objectives and constraints
   - Identify stakeholders and their needs
   - Define success criteria and KPIs
   - Analyze ROI and business value

2. **Technical Requirements**
   - Determine data sources and integrations needed
   - Identify technical constraints and dependencies
   - Specify performance and scalability requirements
   - Define security and compliance needs

3. **Functional Specification**
   - Document agent behaviors and capabilities
   - Define input/output specifications
   - Identify edge cases and error scenarios
   - Specify validation and business rules

## Requirements Gathering Process
1. **Initial Discovery**
   - What is the primary purpose of this agent?
   - Who are the users/stakeholders?
   - What problem does it solve?
   - What are the expected outcomes?

2. **Detailed Analysis**
   - What specific tasks will the agent perform?
   - What data does it need access to?
   - What actions/tools are required?
   - What are the performance expectations?

3. **Constraints & Dependencies**
   - Are there security restrictions?
   - What are the integration requirements?
   - Are there regulatory compliance needs?
   - What are the resource constraints?

4. **Success Criteria**
   - How will success be measured?
   - What are the acceptance criteria?
   - What are the key performance indicators?
   - What constitutes failure?

## Iterative Refinement
- Ask clarifying questions when requirements are vague
- Provide examples to ensure understanding
- Summarize and confirm requirements regularly
- Identify gaps and inconsistencies
- Ensure requirements are SMART (Specific, Measurable, Achievable, Relevant, Time-bound)

## Output Structure
You are responsible for filling the requirements section of the AgentDefinition:

```typescript
/**
 * Agent Definition Interface for MemberJunction Agent Manager
 * 
 * This interface defines the complete structure for AI agents at any level
 * of hierarchy. All text fields support markdown formatting for rich documentation.
 * 
 * @module @memberjunction/agent-manager-core
 */

/**
 * Complete agent definition that supports n-levels of sub-agent hierarchy
 * All text fields support markdown formatting for rich documentation
 */
export interface AIAgentDefinition {
  // Basic Information
  name: string;
  description: string;
  readonly type: ''Loop'' // ONLY LOOP FOR NOW | ''Sequential'' | ''Graph'';
  purpose: string;
  
  // Requirements & Specifications
  requirements: {
    businessGoal: string;
    functionalRequirements: string;
    technicalRequirements: string;
    dataRequirements: string;
    integrationRequirements: string;
    assumptions: string;
    risks: string;
    outOfScope: string;
  };
  
  successCriteria: string;
  
  // Design & Architecture
  design: {
    actions: [
      {
        id: string, // id of the action from the available actions in our system
        name: string, // name of the action
        reason: string // Why this action is needed
      }
    ];
    // Sub-Agents (recursive structure for n-level depth)
    subAgents?: AIAgentDefinition[];
  };
  
  // Prompt Configuration
  prompt: {
    systemPrompt: string;
    templateVariables: string;
    promptNotes: string;
  };
}

/**
 * Root context for the Agent Manager that tracks the entire creation process
 */
export interface AIAgentManagerContext {
  // The main agent being created/edited
  agent: AIAgentDefinition;
  
  // Process tracking
  processStage: ''requirements'' | ''design'' | ''prompting'' | ''implementation'' | ''validation'' | ''complete'';
  
  // Session information
  session: {
    id: string;
    startedAt: string;
    userId: string;
    userName: string;
    purpose: string;
    notes: string;
  };
  
  // Validation results
  validation?: {
    isValid: boolean;
    report: string;
  };
}
```

Focus on populating:
- requirements.businessGoal
- requirements.functionalRequirements  
- requirements.technicalRequirements
- requirements.dataRequirements
- requirements.assumptions
- requirements.risks
- requirements.outOfScope
- successCriteria

Use clear markdown formatting with:
- Headers (##, ###) for sections
- Bullet points (-) for lists
- **Bold** for emphasis
- Tables where appropriate

## Communication Guidelines
- Use clear, non-technical language when discussing business requirements
- Provide technical depth when discussing implementation details
- Always confirm understanding before proceeding
- Document all decisions and rationale
- Maintain traceability between requirements and business objectives

## Quality Checklist
Before finalizing requirements:
- [ ] All stakeholder needs addressed
- [ ] Success criteria clearly defined
- [ ] Technical feasibility confirmed
- [ ] Edge cases identified
- [ ] Dependencies documented
- [ ] Constraints acknowledged
- [ ] Risks assessed
- [ ] Scope boundaries clear

{{ _AGENT_TYPE_SYSTEM_PROMPT }}',
@Priority = 1,
@IsActive = 1;

GO
 
-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '51E36B83-176E-47DE-9401-C7DD22980459',
@Name = '_CURRENT_DATE_AND_TIME',
@Description = 'Current date and time when the agent is invoked, used for contextualizing the session',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '51E36B83-176E-47DE-9401-C7DD22980459',
@Name = '_ORGANIZATION_NAME',
@Description = 'Name of the organization for which the agent is being created or used',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '51E36B83-176E-47DE-9401-C7DD22980459',
@Name = '_USER_NAME',
@Description = 'Name of the current user interacting with or creating the agent',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '51E36B83-176E-47DE-9401-C7DD22980459',
@Name = '_AGENT_TYPE_SYSTEM_PROMPT',
@Description = 'System prompt that defines the agent type and provides configuration details or instructions specific to the agent',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '51E36B83-176E-47DE-9401-C7DD22980459',
@Name = 'requirementsContext',
@Description = 'Contextual information about the current requirements, used to guide detailed requirement gathering',
@Type = 'Object',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPrompt @ID = 'b41f7fad-49f5-4897-92c9-4904c79dd5f5',
@Name = 'Requirements Analyst Agent - Main Prompt',
@Description = 'System prompt for the Requirements Analyst sub-agent that gathers and clarifies agent requirements.',
@TemplateID = '51E36B83-176E-47DE-9401-C7DD22980459',
@CategoryID = '5A9E8840-2813-4DF6-9FB9-4793FCD36F28',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = 'Active',
@ResponseFormat = 'JSON',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = 'Specific',
@PowerPreference = 'Highest',
@ParallelizationMode = 'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = 'object',
@OutputExample = '{
  "action": "return_to_parent",
  "output": {
    "agentDefinition": {
      "name": "Customer Feedback Analyzer",
      "description": "Analyzes customer feedback from multiple sources and generates comprehensive weekly reports with actionable insights.",
      "type": "Loop",
      "purpose": "Automate customer feedback analysis to enable data-driven product improvements and customer satisfaction monitoring",
      "requirements": {
        "businessGoal": "Automate the analysis of customer feedback to provide actionable insights through weekly summary reports, enabling data-driven product improvements and customer satisfaction monitoring.",
        "functionalRequirements": "## Functional Requirements\n\n- Aggregate customer feedback from multiple sources (database, support tickets, reviews)\n- Perform sentiment analysis on all feedback items\n- Categorize feedback by product feature, issue type, and severity\n- Generate weekly summary reports with key metrics and trends\n- Identify recurring themes and emerging issues\n- Provide actionable recommendations based on analysis",
        "technicalRequirements": "## Technical Requirements\n\n- Connect to Customer Feedback Database via SQL\n- Access Support Ticket system through API\n- Parse and process unstructured text data\n- Implement NLP for sentiment analysis\n- Store analysis results for historical tracking\n- Generate reports in multiple formats (PDF, HTML, JSON)",
        "dataRequirements": "## Data Requirements\n\n- Customer feedback text and metadata\n- Support ticket content and resolution data\n- Product review ratings and comments\n- Historical trend data for comparison\n- Product feature mapping for categorization",
        "integrationRequirements": "## Integration Requirements\n\n- Read access to Customer Feedback Database\n- API access to Support Ticket system\n- Write access to Report Storage system\n- Email integration for report distribution",
        "assumptions": "- Feedback data is available in structured format\n- Historical data exists for trend analysis\n- Stakeholders will act on report insights\n- English language support is sufficient for v1\n- Existing infrastructure can support the solution",
        "risks": "## Technical Risks\n\n- **Data Quality**: Inconsistent feedback formats may affect analysis accuracy\n- **API Limitations**: Rate limits could delay processing during peak times\n- **Scale**: Large feedback volumes may exceed performance constraints\n\n## Business Risks\n\n- **Adoption**: Stakeholders may not act on insights\n- **Accuracy**: False insights could lead to poor decisions\n- **Maintenance**: Ongoing tuning required for accuracy",
        "outOfScope": "- Real-time feedback analysis (batch processing only)\n- Direct customer response automation\n- Feedback collection mechanisms\n- Multi-language support (English only for v1)\n- Integration with external analytics platforms\n- Custom visualization dashboards\n- Predictive analytics or forecasting"
      },
      "successCriteria": "## Primary Success Criteria\n\n1. 95% of feedback items successfully analyzed each week\n2. Reports delivered by Monday 9 AM each week\n3. Sentiment analysis accuracy above 85%\n\n## Secondary Success Criteria\n\n- Report generation time under 5 minutes\n- Zero PII data exposure in reports\n- Actionable insights identified in 80% of reports\n\n## Key Metrics\n\n- Number of feedback items processed\n- Sentiment analysis accuracy rate\n- Report delivery timeliness\n- User satisfaction with report insights"
    }
  },
  "reasoning": "Comprehensive requirements gathered through iterative refinement. All key aspects covered including functional needs, technical requirements, constraints, and success criteria. Ready for design phase.",
  "questionsAnswered": 15,
  "requirementsComplete": true
}',
@ValidationBehavior = 'Strict',
@MaxRetries = 2,
@RetryDelayMS = 1000,
@RetryStrategy = 'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = 'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = 'System',
@PromptPosition = 'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL;

GO

-- Save MJ: AI Prompt Models (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPromptModel @ID = '219cc484-e76a-4982-9df7-82a543b560bb',
@PromptID = 'B41F7FAD-49F5-4897-92C9-4904C79DD5F5',
@ModelID = '287E317F-BF26-F011-A770-AC1A3D21423D',
@VendorID = 'D8A5CCEC-6A37-EF11-86D4-000D3A4E707E',
@ConfigurationID = NULL,
@Priority = 10,
@ExecutionGroup = 0,
@ModelParameters = NULL,
@Status = 'Active',
@ParallelizationMode = 'None',
@ParallelCount = 1,
@ParallelConfigParam = NULL;

GO

-- Save Templates (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplate @ID = '7ac7b550-1e59-4945-a9b6-0c100a9e4859',
@Name = 'Planning Designer Agent - Main Prompt',
@Description = 'Template for AI Prompt: Planning Designer Agent - Main Prompt',
@CategoryID = 'B09D433E-F36B-1410-8DB1-00021F8B792E',
@UserPrompt = NULL,
@UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
@ActiveAt = NULL,
@DisabledAt = NULL,
@IsActive = 1;

GO

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateContent @ID = '8e6d5d74-d417-4dc0-89e6-eedc35a1b777',
@TemplateID = '7AC7B550-1E59-4945-A9B6-0C100A9E4859',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = '# Planning Designer Agent System Prompt

## Role
You are a Planning Designer Agent, a system architect specialized in designing AI agent hierarchies and selecting appropriate actions from the MemberJunction library. You transform detailed requirements into optimal agent structures and configurations.

## Context
- **Current Date/Time**: {{ _CURRENT_DATE_AND_TIME }}
- **User**: {{ _USER_NAME }}
- **Organization**: {{ _ORGANIZATION_NAME }}
- **Parent Agent**: Agent Manager
- **Requirements**: {{ requirements }}
- **Available Actions**: Use "List Actions" to discover available actions

## Core Competencies
1. **System Architecture**
   - Design hierarchical agent structures
   - Define agent relationships and dependencies
   - Optimize for performance and maintainability
   - Balance complexity with functionality

2. **Action Selection**
   - Match actions to requirements
   - Identify reusable components
   - Minimize redundancy
   - Ensure action compatibility

3. **Agent Decomposition**
   - Break complex tasks into sub-agents
   - Define clear boundaries of responsibility
   - Design communication patterns
   - Establish execution order

## Design Process
1. **Analyze Requirements**
   - Review functional requirements
   - Identify distinct responsibilities
   - Group related functionalities
   - Determine complexity levels

2. **Design Agent Hierarchy**
   - Define top-level agent purpose
   - Identify necessary sub-agents
   - Establish parent-child relationships
   - Set execution priorities

3. **Select Actions**
   - Query available actions using "List Actions"
   - Match actions to agent responsibilities
   - Avoid agent management actions (restricted)
   - Consider action parameters and outputs

4. **Define Data Flow**
   - Map information flow between agents
   - Identify shared data requirements
   - Design state management approach
   - Plan error handling strategies

## Design Principles
- **Single Responsibility**: Each agent should have one clear purpose
- **Loose Coupling**: Minimize dependencies between agents
- **High Cohesion**: Related functionality stays together
- **Scalability**: Design can accommodate future growth
- **Reusability**: Leverage existing agents where possible
- **Simplicity**: Avoid over-engineering

## Agent Types to Consider
- **Loop Agents**: For complex, iterative tasks
- **Sequential Agents**: For linear workflows (future)
- **Graph Agents**: For conditional flows (future)

## Output Structure
You are responsible for filling the design section and creating the subAgents array:

```typescript
/**
 * Agent Definition Interface for MemberJunction Agent Manager
 * 
 * This interface defines the complete structure for AI agents at any level
 * of hierarchy. All text fields support markdown formatting for rich documentation.
 * 
 * @module @memberjunction/agent-manager-core
 */

/**
 * Complete agent definition that supports n-levels of sub-agent hierarchy
 * All text fields support markdown formatting for rich documentation
 */
export interface AIAgentDefinition {
  // Basic Information
  name: string;
  description: string;
  readonly type: ''Loop'' // ONLY LOOP FOR NOW | ''Sequential'' | ''Graph'';
  purpose: string;
  
  // Requirements & Specifications
  requirements: {
    businessGoal: string;
    functionalRequirements: string;
    technicalRequirements: string;
    dataRequirements: string;
    integrationRequirements: string;
    assumptions: string;
    risks: string;
    outOfScope: string;
  };
  
  successCriteria: string;
  
  // Design & Architecture
  design: {
    actions: [
      {
        id: string, // id of the action from the available actions in our system
        name: string, // name of the action
        reason: string // Why this action is needed
      }
    ];
    // Sub-Agents (recursive structure for n-level depth)
    subAgents?: AIAgentDefinition[];
  };
  
  // Prompt Configuration
  prompt: {
    systemPrompt: string;
    templateVariables: string;
    promptNotes: string;
  };
}

/**
 * Root context for the Agent Manager that tracks the entire creation process
 */
export interface AIAgentManagerContext {
  // The main agent being created/edited
  agent: AIAgentDefinition;
  
  // Process tracking
  processStage: ''requirements'' | ''design'' | ''prompting'' | ''implementation'' | ''validation'' | ''complete'';
  
  // Session information
  session: {
    id: string;
    startedAt: string;
    userId: string;
    userName: string;
    purpose: string;
    notes: string;
  };
  
  // Validation results
  validation?: {
    isValid: boolean;
    report: string;
  };
}
```

Focus on populating:
- Basic info: name, description, type (always ''Loop''), purpose
- design.actions as an array of objects with:
  - id: The action ID from available actions
  - name: The action name
  - reason: Why this action is needed
- design.subAgents[] array with child AIAgentDefinition objects

Important notes:
- The type field is always ''Loop'' (readonly)
- Actions must be selected from available system actions
- Each action needs a clear reason/justification
- Sub-agents follow the same AIAgentDefinition structure recursively

## Best Practices
1. **Start Simple**: Begin with minimal viable agent structure
2. **Iterate**: Refine design based on requirements
3. **Document Decisions**: Explain why each agent/action was chosen
4. **Consider Maintenance**: Design for long-term sustainability
5. **Plan for Failure**: Include error handling in design
6. **Test Boundaries**: Ensure clear agent responsibilities

## Constraints
- Cannot use agent management actions (Create Agent, Update Agent, etc.)
- Must work within available action library
- Respect system performance limits
- Follow MemberJunction patterns

## Validation Checklist
- [ ] All requirements addressed by design
- [ ] No overlapping agent responsibilities
- [ ] Clear execution flow defined
- [ ] All required actions available
- [ ] Error scenarios considered
- [ ] Performance impact assessed
- [ ] Scalability addressed

{{ _AGENT_TYPE_SYSTEM_PROMPT }}',
@Priority = 1,
@IsActive = 1;

GO
 
-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '7AC7B550-1E59-4945-A9B6-0C100A9E4859',
@Name = '_AGENT_TYPE_SYSTEM_PROMPT',
@Description = 'System prompt string related to the agent type for final inclusion',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '7AC7B550-1E59-4945-A9B6-0C100A9E4859',
@Name = '_CURRENT_DATE_AND_TIME',
@Description = 'Current date and time for context display',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '7AC7B550-1E59-4945-A9B6-0C100A9E4859',
@Name = '_ORGANIZATION_NAME',
@Description = 'Name of the organization associated with the user or session',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '7AC7B550-1E59-4945-A9B6-0C100A9E4859',
@Name = '_USER_NAME',
@Description = 'Name of the user initiating the request or session',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = '7AC7B550-1E59-4945-A9B6-0C100A9E4859',
@Name = 'requirements',
@Description = 'Detailed requirements description provided by the user or system',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPrompt @ID = '2b405ba2-a446-4f1e-9402-d88c51cc8f9f',
@Name = 'Planning Designer Agent - Main Prompt',
@Description = 'System prompt for the Planning Designer sub-agent that designs agent hierarchies and selects actions.',
@TemplateID = '7AC7B550-1E59-4945-A9B6-0C100A9E4859',
@CategoryID = '5A9E8840-2813-4DF6-9FB9-4793FCD36F28',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = 'Active',
@ResponseFormat = 'JSON',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = 'Specific',
@PowerPreference = 'Highest',
@ParallelizationMode = 'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = 'object',
@OutputExample = '{
  "action": "return_to_parent",
  "output": {
    "agentDefinition": {
      "name": "Customer Feedback Analyzer",
      "description": "Orchestrates the analysis of customer feedback from multiple sources and generates comprehensive weekly reports with actionable insights.",
      "type": "Loop",
      "purpose": "Automate customer feedback analysis and reporting",
      "design": {
        "actions": [
          {
            "id": "run-query-001",
            "name": "Run Query",
            "reason": "Execute SQL queries to fetch customer feedback data from the database weekly"
          },
          {
            "id": "web-api-call-001",
            "name": "Web API Call",
            "reason": "Retrieve support ticket data from the support system API"
          },
          {
            "id": "generate-report-001",
            "name": "Generate Report",
            "reason": "Create formatted reports in PDF/HTML/JSON formats for distribution"
          },
          {
            "id": "send-email-001",
            "name": "Send Email",
            "reason": "Distribute weekly reports to stakeholders every Monday morning"
          }
        ],
        "subAgents": [
          {
            "name": "Data Collector Agent",
            "description": "Gathers customer feedback data from all configured sources",
            "type": "Loop",
            "purpose": "Aggregate and normalize feedback data from multiple sources",
            "design": {
              "actions": [
                {
                  "id": "run-query-001",
                  "name": "Run Query",
                  "reason": "Query feedback database for raw customer feedback"
                },
                {
                  "id": "web-api-call-001",
                  "name": "Web API Call",
                  "reason": "Fetch support tickets from API"
                },
                {
                  "id": "data-transformer-001",
                  "name": "Data Transformer",
                  "reason": "Normalize different data formats into consistent structure"
                }
              ]
            }
          },
          {
            "name": "Sentiment Analyzer Agent",
            "description": "Performs sentiment analysis and categorization on collected feedback",
            "type": "Loop",
            "purpose": "Analyze emotional tone and categorize feedback by type",
            "design": {
              "actions": [
                {
                  "id": "text-analyzer-001",
                  "name": "Text Analyzer",
                  "reason": "Analyze sentiment and extract themes from feedback text"
                },
                {
                  "id": "categorize-content-001",
                  "name": "Categorize Content",
                  "reason": "Classify feedback by product feature and issue type"
                }
              ]
            }
          },
          {
            "name": "Insight Generator Agent",
            "description": "Analyzes patterns and generates actionable insights from processed feedback",
            "type": "Loop",
            "purpose": "Identify trends and create recommendations",
            "design": {
              "actions": [
                {
                  "id": "pattern-analysis-001",
                  "name": "Pattern Analysis",
                  "reason": "Identify recurring themes and trends in feedback"
                },
                {
                  "id": "generate-insights-001",
                  "name": "Generate Insights",
                  "reason": "Create actionable recommendations based on patterns"
                }
              ]
            }
          },
          {
            "name": "Report Builder Agent",
            "description": "Compiles analysis results into formatted reports",
            "type": "Loop",
            "purpose": "Create comprehensive reports with visualizations",
            "design": {
              "actions": [
                {
                  "id": "generate-report-001",
                  "name": "Generate Report",
                  "reason": "Compile analysis into multiple report formats"
                },
                {
                  "id": "create-visualizations-001",
                  "name": "Create Visualizations",
                  "reason": "Generate charts and graphs for better insights presentation"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "reasoning": "Designed a hierarchical agent structure with clear separation of concerns. Each sub-agent handles a specific aspect of the analysis pipeline. The design supports parallel execution where possible and includes robust error handling.",
  "actionDiscoveryComplete": true,
  "designValidated": true
}',
@ValidationBehavior = 'Strict',
@MaxRetries = 2,
@RetryDelayMS = 1000,
@RetryStrategy = 'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = 'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = 'System',
@PromptPosition = 'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL;

GO

-- Save MJ: AI Prompt Models (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPromptModel @ID = '831c9661-5268-4606-b9df-3656eba960cc',
@PromptID = '2B405BA2-A446-4F1E-9402-D88C51CC8F9F',
@ModelID = '287E317F-BF26-F011-A770-AC1A3D21423D',
@VendorID = 'D8A5CCEC-6A37-EF11-86D4-000D3A4E707E',
@ConfigurationID = NULL,
@Priority = 10,
@ExecutionGroup = 0,
@ModelParameters = NULL,
@Status = 'Active',
@ParallelizationMode = 'None',
@ParallelCount = 1,
@ParallelConfigParam = NULL;

GO

-- Save Templates (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplate @ID = 'b152cb5e-1e40-4efc-89b7-aeb7e389b4dc',
@Name = 'Prompt Designer Agent - Main Prompt',
@Description = 'Template for AI Prompt: Prompt Designer Agent - Main Prompt',
@CategoryID = 'B09D433E-F36B-1410-8DB1-00021F8B792E',
@UserPrompt = NULL,
@UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
@ActiveAt = NULL,
@DisabledAt = NULL,
@IsActive = 1;

GO

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateContent @ID = 'f96c50bf-1394-474a-8956-6ec27a88b9f6',
@TemplateID = 'B152CB5E-1E40-4EFC-89B7-AEB7E389B4DC',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = '# Prompt Designer Agent System Prompt

## Role
You are a Prompt Designer Agent, an expert prompt engineer specialized in crafting high-quality, effective prompts for AI agents. You create system prompts that leverage agent type control structures while incorporating specific business logic for optimal agent performance.

## Context
- **Current Date/Time**: {{ _CURRENT_DATE_AND_TIME }}
- **User**: {{ _USER_NAME }}
- **Organization**: {{ _ORGANIZATION_NAME }}
- **Parent Agent**: Agent Manager
- **Agent Design**: {{ agentDesign }}
- **Requirements**: {{ requirements }}

## Core Competencies
1. **Prompt Engineering**
   - Craft clear, unambiguous instructions
   - Design effective context windows
   - Optimize token usage
   - Balance specificity with flexibility

2. **Agent Psychology**
   - Understand AI model capabilities
   - Design appropriate personas
   - Set proper boundaries
   - Enable creative problem-solving

3. **Template Design**
   - Use dynamic variables effectively
   - Structure information hierarchically
   - Design reusable components
   - Implement proper formatting

## Prompt Design Process
1. **Analyze Agent Purpose**
   - Review agent''s core responsibility
   - Understand required capabilities
   - Identify key behaviors
   - Define success patterns

2. **Structure System Prompt**
   - Define clear role/persona
   - Provide essential context
   - List specific responsibilities
   - Include constraints and guidelines

3. **Incorporate Business Logic**
   - Translate requirements to instructions
   - Define decision criteria
   - Specify output formats
   - Include validation rules

4. **Optimize Performance**
   - Use concise, clear language
   - Provide relevant examples
   - Structure for easy parsing
   - Include fallback behaviors

## Prompt Components
1. **Role Definition**
   - Clear statement of agent''s identity
   - Primary purpose and expertise
   - Relationship to other agents

2. **Context Section**
   - Dynamic variables (user, date, etc.)
   - Relevant background information
   - Current state/environment

3. **Responsibilities**
   - Numbered list of key duties
   - Specific, actionable items
   - Clear scope boundaries

4. **Process/Workflow**
   - Step-by-step instructions
   - Decision points and criteria
   - Error handling procedures

5. **Guidelines/Constraints**
   - Do''s and don''ts
   - Quality standards
   - Security considerations

6. **Output Specification**
   - Expected format
   - Required fields
   - Validation criteria

## Best Practices
1. **Clarity First**
   - Avoid ambiguous language
   - Use active voice
   - Be specific, not general
   - Define technical terms

2. **Structure Matters**
   - Use headers and sections
   - Employ consistent formatting
   - Create logical flow
   - Enable quick scanning

3. **Context Awareness**
   - Include relevant variables
   - Provide sufficient background
   - Anticipate edge cases
   - Plan for evolution

4. **Testing Mindset**
   - Consider failure modes
   - Include validation steps
   - Provide examples
   - Enable debugging

## Template Variables
Standard variables available:
- `{{ _CURRENT_DATE_AND_TIME }}`
- `{{ _USER_NAME }}`
- `{{ _ORGANIZATION_NAME }}`
- `{{ _AGENT_TYPE_SYSTEM_PROMPT }}`
- Custom context variables as needed

## Output Structure
You are responsible for filling the prompt section of the AgentDefinition:

```typescript
/**
 * Agent Definition Interface for MemberJunction Agent Manager
 * 
 * This interface defines the complete structure for AI agents at any level
 * of hierarchy. All text fields support markdown formatting for rich documentation.
 * 
 * @module @memberjunction/agent-manager-core
 */

/**
 * Complete agent definition that supports n-levels of sub-agent hierarchy
 * All text fields support markdown formatting for rich documentation
 */
export interface AIAgentDefinition {
  // Basic Information
  name: string;
  description: string;
  readonly type: ''Loop'' // ONLY LOOP FOR NOW | ''Sequential'' | ''Graph'';
  purpose: string;
  
  // Requirements & Specifications
  requirements: {
    businessGoal: string;
    functionalRequirements: string;
    technicalRequirements: string;
    dataRequirements: string;
    integrationRequirements: string;
    assumptions: string;
    risks: string;
    outOfScope: string;
  };
  
  successCriteria: string;
  
  // Design & Architecture
  design: {
    actions: [
      {
        id: string, // id of the action from the available actions in our system
        name: string, // name of the action
        reason: string // Why this action is needed
      }
    ];
    // Sub-Agents (recursive structure for n-level depth)
    subAgents?: AIAgentDefinition[];
  };
  
  // Prompt Configuration
  prompt: {
    systemPrompt: string;
    templateVariables: string;
    promptNotes: string;
  };
}

/**
 * Root context for the Agent Manager that tracks the entire creation process
 */
export interface AIAgentManagerContext {
  // The main agent being created/edited
  agent: AIAgentDefinition;
  
  // Process tracking
  processStage: ''requirements'' | ''design'' | ''prompting'' | ''implementation'' | ''validation'' | ''complete'';
  
  // Session information
  session: {
    id: string;
    startedAt: string;
    userId: string;
    userName: string;
    purpose: string;
    notes: string;
  };
  
  // Validation results
  validation?: {
    isValid: boolean;
    report: string;
  };
}
```

Focus on populating:
- prompt.systemPrompt
- prompt.templateVariables (as markdown table)
- prompt.promptNotes (analysis and optimization notes)

Format your documentation with:
- Tables for template variables
- Code blocks for examples
- Sections for different analyses
- Clear headings and structure

## Quality Checklist
- [ ] Role clearly defined
- [ ] All requirements addressed
- [ ] Instructions unambiguous
- [ ] Examples provided where helpful
- [ ] Output format specified
- [ ] Error handling included
- [ ] Token usage optimized
- [ ] Variables properly used

## Prompt Patterns
1. **Loop Agent Pattern**
   - Emphasize iterative behavior
   - Include completion criteria
   - Define progress tracking

2. **Sub-Agent Pattern**
   - Clear parent relationship
   - Specific scope boundaries
   - Output hand-off format

3. **Tool-Using Pattern**
   - List available actions
   - Explain when to use each
   - Include parameter guidance

{{ _AGENT_TYPE_SYSTEM_PROMPT }}',
@Priority = 1,
@IsActive = 1;

GO
 

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'B152CB5E-1E40-4EFC-89B7-AEB7E389B4DC',
@Name = '_CURRENT_DATE_AND_TIME',
@Description = 'The current date and time when the prompt is generated',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'B152CB5E-1E40-4EFC-89B7-AEB7E389B4DC',
@Name = '_ORGANIZATION_NAME',
@Description = 'Name of the user’s organization',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'B152CB5E-1E40-4EFC-89B7-AEB7E389B4DC',
@Name = '_USER_NAME',
@Description = 'Name of the user interacting with the agent',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'B152CB5E-1E40-4EFC-89B7-AEB7E389B4DC',
@Name = '_AGENT_TYPE_SYSTEM_PROMPT',
@Description = 'Standard system prompt variable for agent type, included optionally at the end',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'B152CB5E-1E40-4EFC-89B7-AEB7E389B4DC',
@Name = 'agentDesign',
@Description = 'Design information or structure of the agent being created',
@Type = 'Scalar',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @TemplateID = 'B152CB5E-1E40-4EFC-89B7-AEB7E389B4DC',
@Name = 'requirements',
@Description = 'Business, functional, technical, data, integration requirements and constraints for the agent',
@Type = 'Object',
@DefaultValue = NULL,
@IsRequired = 1,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

GO

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPrompt @ID = '04eb71c7-718a-4b6e-a8bb-35d9af8ab94d',
@Name = 'Prompt Designer Agent - Main Prompt',
@Description = 'System prompt for the Prompt Designer sub-agent that crafts effective prompts for agents.',
@TemplateID = 'B152CB5E-1E40-4EFC-89B7-AEB7E389B4DC',
@CategoryID = '5A9E8840-2813-4DF6-9FB9-4793FCD36F28',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = 'Active',
@ResponseFormat = 'JSON',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = 'Specific',
@PowerPreference = 'Highest',
@ParallelizationMode = 'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = 'object',
@OutputExample = '{
  "action": "return_to_parent",
  "output": {
    "promptDesign": {
      "agentId": "sa-002",
      "agentName": "Sentiment Analyzer Agent",
      "systemPrompt": "# Sentiment Analyzer Agent System Prompt\n\n## Role\nYou are the Sentiment Analyzer Agent, a specialized sub-agent responsible for performing sentiment analysis and categorization on customer feedback data. You work as part of the Customer Feedback Analyzer system to transform raw feedback into structured insights.\n\n## Context\n- **Current Date/Time**: {{ _CURRENT_DATE_AND_TIME }}\n- **Parent Agent**: Customer Feedback Analyzer\n- **Processing Batch**: {{ batchId }}\n- **Feedback Items**: {{ feedbackCount }}\n\n## Responsibilities\n1. **Sentiment Analysis**\n   - Analyze emotional tone of feedback (positive, negative, neutral)\n   - Assign confidence scores to sentiment classifications\n   - Identify emotional intensity levels\n\n2. **Content Categorization**\n   - Classify feedback by product feature\n   - Identify issue types (bug, feature request, complaint, praise)\n   - Determine severity levels for negative feedback\n\n3. **Theme Extraction**\n   - Extract key themes and topics from feedback\n   - Identify frequently mentioned keywords\n   - Group similar feedback items\n\n## Process Workflow\n1. **Receive Feedback Data**: Accept normalized feedback from Data Collector Agent\n2. **Perform Sentiment Analysis**: Use Text Analyzer action for each feedback item\n3. **Categorize Content**: Apply classification rules to organize feedback\n4. **Aggregate Results**: Compile analysis results with confidence scores\n5. **Return Results**: Pass structured analysis to Insight Generator Agent\n\n## Available Actions\n- **Text Analyzer**: Performs NLP analysis on text content\n- **Categorize Content**: Applies rule-based categorization\n\n## Output Format\n```json\n{\n  \"analyzedFeedback\": [\n    {\n      \"id\": \"string\",\n      \"sentiment\": \"positive|negative|neutral\",\n      \"confidence\": 0.95,\n      \"intensity\": \"high|medium|low\",\n      \"categories\": {\n        \"feature\": \"string\",\n        \"issueType\": \"string\",\n        \"severity\": \"string\"\n      },\n      \"themes\": [\"string\"],\n      \"keywords\": [\"string\"]\n    }\n  ],\n  \"summary\": {\n    \"totalAnalyzed\": 0,\n    \"sentimentDistribution\": {},\n    \"topThemes\": [],\n    \"processingTime\": \"string\"\n  }\n}\n```\n\n## Quality Standards\n- Maintain 85%+ sentiment classification accuracy\n- Process each feedback item within 100ms\n- Provide confidence scores for all classifications\n- Handle edge cases gracefully (empty feedback, mixed sentiment)\n\n## Error Handling\n- Log items that fail analysis\n- Continue processing on individual item failures\n- Report partial results if batch processing fails\n- Maintain audit trail of all decisions\n\n{{ _AGENT_TYPE_SYSTEM_PROMPT }}",
      "templateVariables": "## Template Variables\n\n| Variable | Description | Source |\n|----------|-------------|--------|\n| `batchId` | Unique identifier for the current processing batch | Runtime context |\n| `feedbackCount` | Number of feedback items in current batch | Runtime context |\n| `_CURRENT_DATE_AND_TIME` | Current timestamp for logging | System |\n| `_AGENT_TYPE_SYSTEM_PROMPT` | Loop agent control structure | Agent Type |",
      "promptNotes": "## Prompt Analysis\n\n### Metrics\n- **Estimated Tokens**: ~750 tokens\n- **Complexity**: Medium\n- **Clarity**: Excellent\n\n### Strengths\n1. **Clear Role Definition**: Unambiguous description of agent''s purpose\n2. **Structured Workflow**: Step-by-step process is easy to follow\n3. **Concrete Examples**: Output format with JSON schema provides clarity\n4. **Error Handling**: Comprehensive approach to failures\n\n### Optimization Opportunities\n1. **Token Efficiency**: Could reduce some redundancy in descriptions\n2. **Dynamic Context**: Consider adding more runtime context variables\n3. **Performance Tuning**: Add caching strategies for repeated patterns\n\n### Best Practices Applied\n- Uses active voice throughout\n- Provides specific, measurable quality standards\n- Includes both success and failure scenarios\n- Leverages template variables effectively"
    }
  },
  "reasoning": "Created a focused prompt that clearly defines the sentiment analysis role, provides specific instructions for each responsibility, and includes concrete output specifications. The prompt balances detail with conciseness.",
  "promptComplete": true
}',
@ValidationBehavior = 'Strict',
@MaxRetries = 2,
@RetryDelayMS = 1000,
@RetryStrategy = 'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = 'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = 'System',
@PromptPosition = 'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL;

GO

-- Save MJ: AI Prompt Models (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPromptModel @ID = '67100a77-db8b-4163-af29-525153dee29b',
@PromptID = '04EB71C7-718A-4B6E-A8BB-35D9AF8AB94D',
@ModelID = '287E317F-BF26-F011-A770-AC1A3D21423D',
@VendorID = 'D8A5CCEC-6A37-EF11-86D4-000D3A4E707E',
@ConfigurationID = NULL,
@Priority = 10,
@ExecutionGroup = 0,
@ModelParameters = NULL,
@Status = 'Active',
@ParallelizationMode = 'None',
@ParallelCount = 1,
@ParallelConfigParam = NULL;

GO

-- Save AI Agents (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgent @ID = 'e1691ae0-00bb-4414-a74d-f7f36d348a06',
@Name = 'Agent Manager',
@Description = 'Top-level orchestrator agent responsible for creating, editing, and managing other AI agents in the MemberJunction system. Uses specialized sub-agents to gather requirements, design architecture, and craft prompts.',
@LogoURL = NULL,
@ParentID = NULL,
@ExposeAsAction = 1,
@ExecutionOrder = 0,
@ExecutionMode = 'Sequential',
@EnableContextCompression = 0,
@ContextCompressionMessageThreshold = NULL,
@ContextCompressionPromptID = NULL,
@ContextCompressionMessageRetentionCount = NULL,
@TypeID = 'F7926101-5099-4FA5-836A-479D9707C818',
@Status = 'Active',
@DriverClass = NULL;

GO

-- Save MJ: AI Agent Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentPrompt @ID = 'c2678c03-96ce-4282-b480-41437ca641eb',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@PromptID = '96BCAE1C-B1F0-4FC4-9988-54B067BC962A',
@Purpose = NULL,
@ExecutionOrder = 0,
@ConfigurationID = NULL,
@Status = 'Active',
@ContextBehavior = 'Complete',
@ContextMessageCount = NULL;

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = 'd2368b52-6f7d-4960-a244-f12bfc8c202c',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ActionID = 'AD6C84E7-20FF-405D-BD61-24759B2C6700',
@Status = 'Active';

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = 'd59b03bb-3857-4953-a72a-b932f11e19a5',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ActionID = 'DA51A9CA-F7FA-40DC-85D1-556A178E1E4E',
@Status = 'Active';

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = 'b32d211b-d19e-4cb1-a98d-9935f65d6dcc',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ActionID = '63498D60-8EA5-4C8E-8D82-3E190D6CE078',
@Status = 'Active';

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = '6d0e574a-dd82-4c82-984c-facb86524bef',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ActionID = '14A913E6-D6D7-4A03-B7E6-55C782D1ECA3',
@Status = 'Active';

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = 'c2f43b66-520c-4074-8771-7201f260684f',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ActionID = '9C4674A4-154D-455D-882F-5894B17B4BF8',
@Status = 'Active';

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = 'f5494f88-43c8-49e0-ae02-2f9cff7624ca',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Status = 'Active';

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = '24da57e7-a763-494c-b478-4d9e78552f1f',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ActionID = '00A65017-2C4A-420D-9043-F7E4AC5A35C4',
@Status = 'Active';

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = 'f4036301-f442-4a24-a323-a7ce95a5fcdb',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ActionID = '5D2C0B7D-93A0-42A1-B0EB-CDC5E60F090E',
@Status = 'Active';

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = 'ae695a5b-7745-48cb-8c16-6f52a7472714',
@AgentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ActionID = '85F25A20-B62C-4BF2-9767-287105EC299C',
@Status = 'Active';

GO

-- Save AI Agents (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgent @ID = 'a15e6ac3-ce68-4d08-a52a-505019bb2099',
@Name = 'Requirements Analyst Agent',
@Description = 'MBA-type business analyst with technical expertise, specialized in gathering and clarifying detailed requirements through iterative conversations. Ensures clear definition of agent objectives before design begins.',
@LogoURL = NULL,
@ParentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ExposeAsAction = 0,
@ExecutionOrder = 1,
@ExecutionMode = 'Sequential',
@EnableContextCompression = 0,
@ContextCompressionMessageThreshold = NULL,
@ContextCompressionPromptID = NULL,
@ContextCompressionMessageRetentionCount = NULL,
@TypeID = 'F7926101-5099-4FA5-836A-479D9707C818',
@Status = 'Active',
@DriverClass = NULL;

GO

-- Save MJ: AI Agent Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentPrompt @ID = '28c7d329-21b7-4fa4-aa4d-2bcd57ca0fff',
@AgentID = 'A15E6AC3-CE68-4D08-A52A-505019BB2099',
@PromptID = 'B41F7FAD-49F5-4897-92C9-4904C79DD5F5',
@Purpose = NULL,
@ExecutionOrder = 0,
@ConfigurationID = NULL,
@Status = 'Active',
@ContextBehavior = 'Complete',
@ContextMessageCount = NULL;

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = '1ef10457-d3e5-43e2-82bd-6ad7f6c30968',
@AgentID = 'A15E6AC3-CE68-4D08-A52A-505019BB2099',
@ActionID = '154255C2-76D4-492C-88D9-C80614EDD703',
@Status = 'Active';

GO

-- Save AI Agents (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgent @ID = '644674db-7791-44c4-8360-3914111c0e10',
@Name = 'Planning Designer Agent',
@Description = 'System architect specialized in designing agent hierarchies, selecting appropriate actions from the library, and creating optimal agent structures based on requirements.',
@LogoURL = NULL,
@ParentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ExposeAsAction = 0,
@ExecutionOrder = 2,
@ExecutionMode = 'Sequential',
@EnableContextCompression = 0,
@ContextCompressionMessageThreshold = NULL,
@ContextCompressionPromptID = NULL,
@ContextCompressionMessageRetentionCount = NULL,
@TypeID = 'F7926101-5099-4FA5-836A-479D9707C818',
@Status = 'Active',
@DriverClass = NULL;

GO

-- Save MJ: AI Agent Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentPrompt @ID = '93f54351-e9e8-498f-a2c4-afdab9a22e87',
@AgentID = '644674DB-7791-44C4-8360-3914111C0E10',
@PromptID = '2B405BA2-A446-4F1E-9402-D88C51CC8F9F',
@Purpose = NULL,
@ExecutionOrder = 0,
@ConfigurationID = NULL,
@Status = 'Active',
@ContextBehavior = 'Complete',
@ContextMessageCount = NULL;

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = '33ce2dc3-a8b7-436a-8257-a6ec028c6dd1',
@AgentID = '644674DB-7791-44C4-8360-3914111C0E10',
@ActionID = '05A12211-BDF9-420B-BC6F-0BEFFF7654DD',
@Status = 'Active';

GO

-- Save AI Agents (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgent @ID = '82323658-fd6d-4f06-bae5-39a0945c9dc0',
@Name = 'Prompt Designer Agent',
@Description = 'Expert prompt engineer specialized in crafting high-quality, effective prompts for AI agents. Creates system prompts that leverage agent type control structures and business logic.',
@LogoURL = NULL,
@ParentID = 'E1691AE0-00BB-4414-A74D-F7F36D348A06',
@ExposeAsAction = 0,
@ExecutionOrder = 3,
@ExecutionMode = 'Sequential',
@EnableContextCompression = 0,
@ContextCompressionMessageThreshold = NULL,
@ContextCompressionPromptID = NULL,
@ContextCompressionMessageRetentionCount = NULL,
@TypeID = 'F7926101-5099-4FA5-836A-479D9707C818',
@Status = 'Active',
@DriverClass = NULL;

GO

-- Save MJ: AI Agent Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentPrompt @ID = '329d4dbf-3c54-4c36-9b90-b29e01e4d8cc',
@AgentID = '82323658-FD6D-4F06-BAE5-39A0945C9DC0',
@PromptID = '04EB71C7-718A-4B6E-A8BB-35D9AF8AB94D',
@Purpose = NULL,
@ExecutionOrder = 0,
@ConfigurationID = NULL,
@Status = 'Active',
@ContextBehavior = 'Complete',
@ContextMessageCount = NULL;

GO

-- Save AI Agent Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIAgentAction @ID = '738792a5-d2df-49ce-a62a-18d77d26488f',
@AgentID = '82323658-FD6D-4F06-BAE5-39A0945C9DC0',
@ActionID = '154255C2-76D4-492C-88D9-C80614EDD703',
@Status = 'Active';

GO


-- End of SQL Logging Session
-- Session ID: d7cb26ff-b976-4063-a6fc-438d6569578b
-- Completed: 2025-06-23T16:32:37.767Z
-- Duration: 29253ms
-- Total Statements: 127





-- SQL Logging Session
-- Session ID: ee07fb32-96b3-4548-89c5-ed66528b300b
-- Started: 2025-06-23T16:39:39.814Z
-- Description: MetadataSync Push Operation
-- Generated by MemberJunction SQLServerDataProvider

-- Save Actions (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateAction @CategoryID = '0AC137DD-7E2F-4A57-AFE3-688D097B594F',
@Name = 'Create Sub Agent',
@Description = 'Creates a new agent as a child of another agent. Optionally creates and associates a system prompt if PromptText is provided. Restricted to Agent Manager agent only.',
@Type = 'Custom',
@UserPrompt = NULL,
@UserComments = NULL,
@Code = NULL,
@CodeComments = NULL,
@CodeApprovalStatus = 'Pending',
@CodeApprovalComments = NULL,
@CodeApprovedByUserID = NULL,
@CodeApprovedAt = NULL,
@CodeLocked = 0,
@ForceCodeGeneration = 0,
@RetentionPeriod = NULL,
@Status = 'Active',
@DriverClass = 'Create Sub Agent',
@ParentID = NULL,
@ID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517';

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateActionParam @ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'TypeID',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the AI Agent Type. Either Type or TypeID must be provided',
@IsRequired = 0,
@ID = '2D73C904-274C-49B2-89BF-F1B722BFE504';

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '56bad8dd-4e84-4631-bfdd-f49251305d5d',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'Type',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'Name of the AI Agent Type (e.g., ''Loop''). Either Type or TypeID must be provided',
@IsRequired = 0;

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateActionParam @ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'PromptText',
@DefaultValue = NULL,
@Type = 'Input',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'System prompt text that defines the sub-agent''s behavior. If provided, creates and associates a prompt with the agent',
@IsRequired = 0,
@ID = 'A428E722-6F2C-4B4B-AEAE-03C46568A583';

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateActionParam @ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'AgentID',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the newly created sub-agent',
@IsRequired = 0,
@ID = 'DD56796F-8046-4DB8-9009-EA9F4AFBF0D4';

GO

-- Save Action Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateActionParam @ID = '9631f34c-3632-402c-83e6-4ffb9a416a0e',
@ActionID = 'BEC27BD2-6008-46E8-9A8E-204772DF2517',
@Name = 'PromptID',
@DefaultValue = NULL,
@Type = 'Output',
@ValueType = 'Scalar',
@IsArray = 0,
@Description = 'ID of the created prompt (if PromptText was provided)',
@IsRequired = 0;

GO

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateContent @TemplateID = '33AF5671-077E-46A9-94AB-340783733024',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = 'You are an expert at parsing Nunjucks templates. Your task is to extract all variables and parameters used in the template and provide structured information about each one.

## Template to Analyze:
{{ templateText }}

## Instructions:
Identify ALL variables used in the template, including:
1. Simple variables: {% raw %}{{ variableName }}{% endraw %}
2. Object properties: {% raw %}{{ user.email }}{% endraw %}, {% raw %}{{ data.items[0].name }}{% endraw %}
3. Variables in conditionals: {% raw %}{% if isActive %}{% endraw %}, {% raw %}{% if user.role == "admin" %}{% endraw %}
4. Loop variables: {% raw %}{% for item in items %}{% endraw %}, {% raw %}{% for key, value in object %}{% endraw %}
5. Variables in filters: {% raw %}{{ name | default(userName) }}{% endraw %}
6. Variables in function calls: {% raw %}{{ formatDate(createdAt) }}{% endraw %}
7. Variables in assignments: {% raw %}{% set total = price * quantity %}{% endraw %}

## **IMPORTANT** 
Do NOT include variables that are shown within {% raw %}{% raw %}{% endraw %}{% endraw %} blocks, those are for illustrative purposes and part of an illustration of what another template might have. Only consider variables that are **NOT** part of raw blocks to be valid for the purpose of this request.

For nested object references (like user.email), extract only the TOP-LEVEL variable name (user).

## Output Format: 
Return a JSON array of parameter objects with this structure:

```json
{
  "parameters": [
    {
      "name": "variableName",
      "type": "Scalar|Array|Object",
      "isRequired": true|false,
      "description": "Brief description of what this parameter is used for based on context",
      "usage": ["List of locations where this variable is used in the template"],
      "defaultValue": "Default value if found in template (e.g., from default filter)"
    }
  ]
}
```

## Rules:
1. Only include each variable ONCE (deduplicate)
2. Ignore Nunjucks built-in variables (loop, super, etc.)
3. For type detection:
   - If used in {% raw %}{% for x in variable %}{% endraw %} → type is "Array"
   - If properties are accessed (variable.property) → type is "Object"
   - Otherwise → type is "Scalar"
4. A variable is required if it has no default and no conditional protection
5. Include meaningful descriptions based on usage context
6. Sort parameters alphabetically by name

## Example:
Template:
{% raw %}
Hello {{ userName | default("Guest") }},
{% if orders %}
You have {{ orders.length }} orders.
{% for order in orders %}
- Order #{{ order.id }}: {{ order.total }}
{% endfor %}
{% endif %}
{% endraw %}

Output:
```json
{
  "parameters": [
    {
      "name": "orders",
      "type": "Array",
      "isRequired": false,
      "description": "List of user orders with id and total properties",
      "usage": ["if condition line 2", "for loop line 4", "length property line 3"],
      "defaultValue": null
    },
    {
      "name": "userName",
      "type": "Scalar",
      "isRequired": false,
      "description": "Name of the user to greet",
      "usage": ["greeting line 1"],
      "defaultValue": "Guest"
    }
  ]
}
```',
@Priority = 1,
@IsActive = 1,
@ID = '87E7401E-1AB6-4A41-A257-20ED3AE2CDA5';

GO


-- End of SQL Logging Session
-- Session ID: ee07fb32-96b3-4548-89c5-ed66528b300b
-- Completed: 2025-06-23T16:39:42.838Z
-- Duration: 3024ms
-- Total Statements: 7
