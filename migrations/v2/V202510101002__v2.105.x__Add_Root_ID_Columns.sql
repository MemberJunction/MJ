/* Base View SQL for Action Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Categories
-- Item: vwActionCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Action Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ActionCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwActionCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwActionCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[ActionCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[ActionCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    a.*,
    ActionCategory_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[ActionCategory] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ActionCategory] AS ActionCategory_ParentID
  ON
    [a].[ParentID] = ActionCategory_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [a].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwActionCategories] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for Action Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Categories
-- Item: Permissions for vwActionCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwActionCategories] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* Base View SQL for Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Actions
-- Item: vwActions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Actions
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  Action
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwActions]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwActions]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[Action]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[Action] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    a.*,
    ActionCategory_CategoryID.[Name] AS [Category],
    User_CodeApprovedByUserID.[Name] AS [CodeApprovedByUser],
    Action_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[Action] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ActionCategory] AS ActionCategory_CategoryID
  ON
    [a].[CategoryID] = ActionCategory_CategoryID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[User] AS User_CodeApprovedByUserID
  ON
    [a].[CodeApprovedByUserID] = User_CodeApprovedByUserID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Action] AS Action_ParentID
  ON
    [a].[ParentID] = Action_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [a].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwActions] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Actions
-- Item: Permissions for vwActions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwActions] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* Base View SQL for AI Agents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agents
-- Item: vwAIAgents
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      AI Agents
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIAgent
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIAgents]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIAgents]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[AIAgent]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[AIAgent] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    a.*,
    AIAgent_ParentID.[Name] AS [Parent],
    AIPrompt_ContextCompressionPromptID.[Name] AS [ContextCompressionPrompt],
    AIAgentType_TypeID.[Name] AS [Type],
    ArtifactType_DefaultArtifactTypeID.[Name] AS [DefaultArtifactType],
    User_OwnerUserID.[Name] AS [OwnerUser],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[AIAgent] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgent] AS AIAgent_ParentID
  ON
    [a].[ParentID] = AIAgent_ParentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIPrompt] AS AIPrompt_ContextCompressionPromptID
  ON
    [a].[ContextCompressionPromptID] = AIPrompt_ContextCompressionPromptID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgentType] AS AIAgentType_TypeID
  ON
    [a].[TypeID] = AIAgentType_TypeID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ArtifactType] AS ArtifactType_DefaultArtifactTypeID
  ON
    [a].[DefaultArtifactTypeID] = ArtifactType_DefaultArtifactTypeID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[User] AS User_OwnerUserID
  ON
    [a].[OwnerUserID] = User_OwnerUserID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [a].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgents] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for AI Agents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agents
-- Item: Permissions for vwAIAgents
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgents] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for AI Prompt Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Prompt Categories
-- Item: vwAIPromptCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      AI Prompt Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIPromptCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIPromptCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIPromptCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[AIPromptCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[AIPromptCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    a.*,
    AIPromptCategory_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[AIPromptCategory] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIPromptCategory] AS AIPromptCategory_ParentID
  ON
    [a].[ParentID] = AIPromptCategory_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [a].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIPromptCategories] TO [cdp_UI], [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for AI Prompt Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Prompt Categories
-- Item: Permissions for vwAIPromptCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIPromptCategories] TO [cdp_UI], [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for AI Prompts */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Prompts
-- Item: vwAIPrompts
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      AI Prompts
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIPrompt
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIPrompts]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIPrompts]
AS
WITH
    CTE_RootResultSelectorPromptID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootResultSelectorPromptID]
        FROM
            [${flyway:defaultSchema}].[AIPrompt]
        WHERE
            [ResultSelectorPromptID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootResultSelectorPromptID]
        FROM
            [${flyway:defaultSchema}].[AIPrompt] child
        INNER JOIN
            CTE_RootResultSelectorPromptID parent ON child.[ResultSelectorPromptID] = parent.[ID]
    )
SELECT
    a.*,
    Template_TemplateID.[Name] AS [Template],
    AIPromptCategory_CategoryID.[Name] AS [Category],
    AIPromptType_TypeID.[Name] AS [Type],
    AIModelType_AIModelTypeID.[Name] AS [AIModelType],
    AIPrompt_ResultSelectorPromptID.[Name] AS [ResultSelectorPrompt],
    CTE_RootResultSelectorPromptID.[RootResultSelectorPromptID]
FROM
    [${flyway:defaultSchema}].[AIPrompt] AS a
INNER JOIN
    [${flyway:defaultSchema}].[Template] AS Template_TemplateID
  ON
    [a].[TemplateID] = Template_TemplateID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIPromptCategory] AS AIPromptCategory_CategoryID
  ON
    [a].[CategoryID] = AIPromptCategory_CategoryID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[AIPromptType] AS AIPromptType_TypeID
  ON
    [a].[TypeID] = AIPromptType_TypeID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIModelType] AS AIModelType_AIModelTypeID
  ON
    [a].[AIModelTypeID] = AIModelType_AIModelTypeID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIPrompt] AS AIPrompt_ResultSelectorPromptID
  ON
    [a].[ResultSelectorPromptID] = AIPrompt_ResultSelectorPromptID.[ID]
LEFT OUTER JOIN
    CTE_RootResultSelectorPromptID
  ON
    [a].[ID] = CTE_RootResultSelectorPromptID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIPrompts] TO [cdp_UI], [cdp_Integration], [cdp_UI], [cdp_Developer]
    

/* Base View Permissions SQL for AI Prompts */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Prompts
-- Item: Permissions for vwAIPrompts
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIPrompts] TO [cdp_UI], [cdp_Integration], [cdp_UI], [cdp_Developer]

/* SQL text to update entity field related entity name field map for entity field ID C58C8778-B939-EF11-86D4-000D3A4E707E */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='C58C8778-B939-EF11-86D4-000D3A4E707E',
         @RelatedEntityNameFieldMap='Application'

/* Base View SQL for Audit Log Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Log Types
-- Item: vwAuditLogTypes
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Audit Log Types
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AuditLogType
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAuditLogTypes]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAuditLogTypes]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[AuditLogType]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[AuditLogType] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    a.*,
    AuditLogType_ParentID.[Name] AS [Parent],
    Authorization_AuthorizationID.[Name] AS [Authorization],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[AuditLogType] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AuditLogType] AS AuditLogType_ParentID
  ON
    [a].[ParentID] = AuditLogType_ParentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Authorization] AS Authorization_AuthorizationID
  ON
    [a].[AuthorizationID] = Authorization_AuthorizationID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [a].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAuditLogTypes] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* Base View Permissions SQL for Audit Log Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Log Types
-- Item: Permissions for vwAuditLogTypes
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAuditLogTypes] TO [cdp_Developer], [cdp_UI], [cdp_Integration]

/* Base View SQL for Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorizations
-- Item: vwAuthorizations
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Authorizations
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  Authorization
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAuthorizations]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAuthorizations]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[Authorization]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[Authorization] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    a.*,
    Authorization_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[Authorization] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Authorization] AS Authorization_ParentID
  ON
    [a].[ParentID] = Authorization_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [a].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAuthorizations] TO [cdp_Developer], [cdp_Integration], [cdp_UI]
    

/* Base View Permissions SQL for Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorizations
-- Item: Permissions for vwAuthorizations
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAuthorizations] TO [cdp_Developer], [cdp_Integration], [cdp_UI]

/* Base View SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: vwConversationDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Conversation Details
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ConversationDetail
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwConversationDetails]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwConversationDetails]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[ConversationDetail]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[ConversationDetail] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    c.*,
    Conversation_ConversationID.[Name] AS [Conversation],
    User_UserID.[Name] AS [User],
    ConversationArtifact_ArtifactID.[Name] AS [Artifact],
    AIAgent_AgentID.[Name] AS [Agent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[ConversationDetail] AS c
INNER JOIN
    [${flyway:defaultSchema}].[Conversation] AS Conversation_ConversationID
  ON
    [c].[ConversationID] = Conversation_ConversationID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [c].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ConversationArtifact] AS ConversationArtifact_ArtifactID
  ON
    [c].[ArtifactID] = ConversationArtifact_ArtifactID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgent] AS AIAgent_AgentID
  ON
    [c].[AgentID] = AIAgent_AgentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [c].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwConversationDetails] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* Base View Permissions SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: Permissions for vwConversationDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwConversationDetails] TO [cdp_Developer], [cdp_UI], [cdp_Integration]

/* Base View SQL for Dashboard Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dashboard Categories
-- Item: vwDashboardCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Dashboard Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  DashboardCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwDashboardCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwDashboardCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[DashboardCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[DashboardCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    d.*,
    DashboardCategory_ParentID.[Name] AS [Parent],
    User_UserID.[Name] AS [User],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[DashboardCategory] AS d
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[DashboardCategory] AS DashboardCategory_ParentID
  ON
    [d].[ParentID] = DashboardCategory_ParentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [d].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [d].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwDashboardCategories] TO [cdp_Developer], [cdp_Integration], [cdp_UI]
    

/* Base View Permissions SQL for Dashboard Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dashboard Categories
-- Item: Permissions for vwDashboardCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwDashboardCategories] TO [cdp_Developer], [cdp_Integration], [cdp_UI]

/* SQL text to update entity field related entity name field map for entity field ID A7BB74B4-7F36-EF11-86D4-6045BDEE16E6 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='A7BB74B4-7F36-EF11-86D4-6045BDEE16E6',
         @RelatedEntityNameFieldMap='EntityField'

/* SQL text to update entity field related entity name field map for entity field ID E0939AE7-A838-EF11-86D4-000D3A4E707E */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='E0939AE7-A838-EF11-86D4-000D3A4E707E',
         @RelatedEntityNameFieldMap='Role'

/* SQL text to update entity field related entity name field map for entity field ID 3E4E17F0-6F36-EF11-86D4-6045BDEE16E6 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='3E4E17F0-6F36-EF11-86D4-6045BDEE16E6',
         @RelatedEntityNameFieldMap='DisplayUserView'

/* SQL text to update entity field related entity name field map for entity field ID F15717F0-6F36-EF11-86D4-6045BDEE16E6 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='F15717F0-6F36-EF11-86D4-6045BDEE16E6',
         @RelatedEntityNameFieldMap='DisplayComponent'

/* Base View SQL for File Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: File Categories
-- Item: vwFileCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      File Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  FileCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwFileCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwFileCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[FileCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[FileCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    f.*,
    FileCategory_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[FileCategory] AS f
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[FileCategory] AS FileCategory_ParentID
  ON
    [f].[ParentID] = FileCategory_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [f].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwFileCategories] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for File Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: File Categories
-- Item: Permissions for vwFileCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwFileCategories] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* Base View SQL for Generated Code Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Generated Code Categories
-- Item: vwGeneratedCodeCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Generated Code Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  GeneratedCodeCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwGeneratedCodeCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwGeneratedCodeCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[GeneratedCodeCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[GeneratedCodeCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    g.*,
    GeneratedCodeCategory_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[GeneratedCodeCategory] AS g
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[GeneratedCodeCategory] AS GeneratedCodeCategory_ParentID
  ON
    [g].[ParentID] = GeneratedCodeCategory_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [g].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwGeneratedCodeCategories] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for Generated Code Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Generated Code Categories
-- Item: Permissions for vwGeneratedCodeCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwGeneratedCodeCategories] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for List Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Categories
-- Item: vwListCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      List Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ListCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwListCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwListCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[ListCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[ListCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    l.*,
    ListCategory_ParentID.[Name] AS [Parent],
    User_UserID.[Name] AS [User],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[ListCategory] AS l
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ListCategory] AS ListCategory_ParentID
  ON
    [l].[ParentID] = ListCategory_ParentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [l].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [l].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwListCategories] TO [cdp_Developer], [cdp_Integration], [cdp_UI]
    

/* Base View Permissions SQL for List Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Categories
-- Item: Permissions for vwListCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwListCategories] TO [cdp_Developer], [cdp_Integration], [cdp_UI]

/* Base View SQL for MJ: AI Agent Run Steps */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Agent Run Steps
-- Item: vwAIAgentRunSteps
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      MJ: AI Agent Run Steps
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIAgentRunStep
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIAgentRunSteps]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIAgentRunSteps]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[AIAgentRunStep]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[AIAgentRunStep] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    a.*,
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[AIAgentRunStep] AS a
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [a].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentRunSteps] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for MJ: AI Agent Run Steps */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Agent Run Steps
-- Item: Permissions for vwAIAgentRunSteps
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentRunSteps] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for MJ: AI Agent Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Agent Runs
-- Item: vwAIAgentRuns
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      MJ: AI Agent Runs
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIAgentRun
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIAgentRuns]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIAgentRuns]
AS
WITH
    CTE_RootParentRunID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentRunID]
        FROM
            [${flyway:defaultSchema}].[AIAgentRun]
        WHERE
            [ParentRunID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentRunID]
        FROM
            [${flyway:defaultSchema}].[AIAgentRun] child
        INNER JOIN
            CTE_RootParentRunID parent ON child.[ParentRunID] = parent.[ID]
    ),
    CTE_RootLastRunID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootLastRunID]
        FROM
            [${flyway:defaultSchema}].[AIAgentRun]
        WHERE
            [LastRunID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootLastRunID]
        FROM
            [${flyway:defaultSchema}].[AIAgentRun] child
        INNER JOIN
            CTE_RootLastRunID parent ON child.[LastRunID] = parent.[ID]
    )
SELECT
    a.*,
    AIAgent_AgentID.[Name] AS [Agent],
    Conversation_ConversationID.[Name] AS [Conversation],
    User_UserID.[Name] AS [User],
    AIConfiguration_ConfigurationID.[Name] AS [Configuration],
    AIModel_OverrideModelID.[Name] AS [OverrideModel],
    AIVendor_OverrideVendorID.[Name] AS [OverrideVendor],
    CTE_RootParentRunID.[RootParentRunID],
    CTE_RootLastRunID.[RootLastRunID]
FROM
    [${flyway:defaultSchema}].[AIAgentRun] AS a
INNER JOIN
    [${flyway:defaultSchema}].[AIAgent] AS AIAgent_AgentID
  ON
    [a].[AgentID] = AIAgent_AgentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Conversation] AS Conversation_ConversationID
  ON
    [a].[ConversationID] = Conversation_ConversationID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [a].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIConfiguration] AS AIConfiguration_ConfigurationID
  ON
    [a].[ConfigurationID] = AIConfiguration_ConfigurationID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIModel] AS AIModel_OverrideModelID
  ON
    [a].[OverrideModelID] = AIModel_OverrideModelID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIVendor] AS AIVendor_OverrideVendorID
  ON
    [a].[OverrideVendorID] = AIVendor_OverrideVendorID.[ID]
LEFT OUTER JOIN
    CTE_RootParentRunID
  ON
    [a].[ID] = CTE_RootParentRunID.[ID]
LEFT OUTER JOIN
    CTE_RootLastRunID
  ON
    [a].[ID] = CTE_RootLastRunID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentRuns] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for MJ: AI Agent Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Agent Runs
-- Item: Permissions for vwAIAgentRuns
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentRuns] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for MJ: AI Prompt Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Prompt Runs
-- Item: vwAIPromptRuns
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      MJ: AI Prompt Runs
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIPromptRun
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIPromptRuns]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIPromptRuns]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[AIPromptRun]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[AIPromptRun] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    ),
    CTE_RootRerunFromPromptRunID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootRerunFromPromptRunID]
        FROM
            [${flyway:defaultSchema}].[AIPromptRun]
        WHERE
            [RerunFromPromptRunID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootRerunFromPromptRunID]
        FROM
            [${flyway:defaultSchema}].[AIPromptRun] child
        INNER JOIN
            CTE_RootRerunFromPromptRunID parent ON child.[RerunFromPromptRunID] = parent.[ID]
    )
SELECT
    a.*,
    AIPrompt_PromptID.[Name] AS [Prompt],
    AIModel_ModelID.[Name] AS [Model],
    AIVendor_VendorID.[Name] AS [Vendor],
    AIAgent_AgentID.[Name] AS [Agent],
    AIConfiguration_ConfigurationID.[Name] AS [Configuration],
    AIModel_OriginalModelID.[Name] AS [OriginalModel],
    AIPrompt_JudgeID.[Name] AS [Judge],
    AIPrompt_ChildPromptID.[Name] AS [ChildPrompt],
    CTE_RootParentID.[RootParentID],
    CTE_RootRerunFromPromptRunID.[RootRerunFromPromptRunID]
FROM
    [${flyway:defaultSchema}].[AIPromptRun] AS a
INNER JOIN
    [${flyway:defaultSchema}].[AIPrompt] AS AIPrompt_PromptID
  ON
    [a].[PromptID] = AIPrompt_PromptID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[AIModel] AS AIModel_ModelID
  ON
    [a].[ModelID] = AIModel_ModelID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[AIVendor] AS AIVendor_VendorID
  ON
    [a].[VendorID] = AIVendor_VendorID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgent] AS AIAgent_AgentID
  ON
    [a].[AgentID] = AIAgent_AgentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIConfiguration] AS AIConfiguration_ConfigurationID
  ON
    [a].[ConfigurationID] = AIConfiguration_ConfigurationID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIModel] AS AIModel_OriginalModelID
  ON
    [a].[OriginalModelID] = AIModel_OriginalModelID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIPrompt] AS AIPrompt_JudgeID
  ON
    [a].[JudgeID] = AIPrompt_JudgeID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIPrompt] AS AIPrompt_ChildPromptID
  ON
    [a].[ChildPromptID] = AIPrompt_ChildPromptID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [a].[ID] = CTE_RootParentID.[ID]
LEFT OUTER JOIN
    CTE_RootRerunFromPromptRunID
  ON
    [a].[ID] = CTE_RootRerunFromPromptRunID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIPromptRuns] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for MJ: AI Prompt Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Prompt Runs
-- Item: Permissions for vwAIPromptRuns
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIPromptRuns] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for MJ: Artifact Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Artifact Types
-- Item: vwArtifactTypes
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      MJ: Artifact Types
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ArtifactType
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwArtifactTypes]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwArtifactTypes]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[ArtifactType]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[ArtifactType] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    a.*,
    ArtifactType_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[ArtifactType] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ArtifactType] AS ArtifactType_ParentID
  ON
    [a].[ParentID] = ArtifactType_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [a].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwArtifactTypes] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for MJ: Artifact Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Artifact Types
-- Item: Permissions for vwArtifactTypes
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwArtifactTypes] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for MJ: Collections */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Collections
-- Item: vwCollections
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      MJ: Collections
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  Collection
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwCollections]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwCollections]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[Collection]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[Collection] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    c.*,
    Environment_EnvironmentID.[Name] AS [Environment],
    Collection_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[Collection] AS c
INNER JOIN
    [${flyway:defaultSchema}].[Environment] AS Environment_EnvironmentID
  ON
    [c].[EnvironmentID] = Environment_EnvironmentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Collection] AS Collection_ParentID
  ON
    [c].[ParentID] = Collection_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [c].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwCollections] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for MJ: Collections */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Collections
-- Item: Permissions for vwCollections
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwCollections] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for MJ: Projects */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Projects
-- Item: vwProjects
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      MJ: Projects
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  Project
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwProjects]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwProjects]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[Project]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[Project] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    p.*,
    Environment_EnvironmentID.[Name] AS [Environment],
    Project_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[Project] AS p
INNER JOIN
    [${flyway:defaultSchema}].[Environment] AS Environment_EnvironmentID
  ON
    [p].[EnvironmentID] = Environment_EnvironmentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Project] AS Project_ParentID
  ON
    [p].[ParentID] = Project_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [p].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwProjects] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for MJ: Projects */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Projects
-- Item: Permissions for vwProjects
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwProjects] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for MJ: Tasks */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Tasks
-- Item: vwTasks
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      MJ: Tasks
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  Task
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwTasks]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwTasks]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[Task]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[Task] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    t.*,
    Task_ParentID.[Name] AS [Parent],
    TaskType_TypeID.[Name] AS [Type],
    Environment_EnvironmentID.[Name] AS [Environment],
    Project_ProjectID.[Name] AS [Project],
    User_UserID.[Name] AS [User],
    AIAgent_AgentID.[Name] AS [Agent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[Task] AS t
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Task] AS Task_ParentID
  ON
    [t].[ParentID] = Task_ParentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[TaskType] AS TaskType_TypeID
  ON
    [t].[TypeID] = TaskType_TypeID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Environment] AS Environment_EnvironmentID
  ON
    [t].[EnvironmentID] = Environment_EnvironmentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Project] AS Project_ProjectID
  ON
    [t].[ProjectID] = Project_ProjectID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [t].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgent] AS AIAgent_AgentID
  ON
    [t].[AgentID] = AIAgent_AgentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [t].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwTasks] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for MJ: Tasks */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Tasks
-- Item: Permissions for vwTasks
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwTasks] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for Query Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Categories
-- Item: vwQueryCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Query Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  QueryCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwQueryCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwQueryCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[QueryCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[QueryCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    q.*,
    QueryCategory_ParentID.[Name] AS [Parent],
    User_UserID.[Name] AS [User],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[QueryCategory] AS q
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[QueryCategory] AS QueryCategory_ParentID
  ON
    [q].[ParentID] = QueryCategory_ParentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [q].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [q].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwQueryCategories] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    

/* Base View Permissions SQL for Query Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Categories
-- Item: Permissions for vwQueryCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwQueryCategories] TO [cdp_Integration], [cdp_Developer], [cdp_UI]

/* Base View SQL for Report Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Report Categories
-- Item: vwReportCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Report Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ReportCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwReportCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwReportCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[ReportCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[ReportCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    r.*,
    ReportCategory_ParentID.[Name] AS [Parent],
    User_UserID.[Name] AS [User],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[ReportCategory] AS r
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ReportCategory] AS ReportCategory_ParentID
  ON
    [r].[ParentID] = ReportCategory_ParentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [r].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [r].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwReportCategories] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    

/* Base View Permissions SQL for Report Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Report Categories
-- Item: Permissions for vwReportCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwReportCategories] TO [cdp_Integration], [cdp_Developer], [cdp_UI]

/* Base View SQL for Skills */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Skills
-- Item: vwSkills
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Skills
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  Skill
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwSkills]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwSkills]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[Skill]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[Skill] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    s.*,
    Skill_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[Skill] AS s
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Skill] AS Skill_ParentID
  ON
    [s].[ParentID] = Skill_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [s].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwSkills] TO [cdp_Developer], [cdp_Integration], [cdp_UI]
    

/* Base View Permissions SQL for Skills */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Skills
-- Item: Permissions for vwSkills
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwSkills] TO [cdp_Developer], [cdp_Integration], [cdp_UI]

/* Base View SQL for Tags */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Tags
-- Item: vwTags
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Tags
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  Tag
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwTags]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwTags]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[Tag]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[Tag] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    t.*,
    Tag_ParentID.[Name] AS [Parent],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[Tag] AS t
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Tag] AS Tag_ParentID
  ON
    [t].[ParentID] = Tag_ParentID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [t].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwTags] TO [cdp_UI]
    

/* Base View Permissions SQL for Tags */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Tags
-- Item: Permissions for vwTags
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwTags] TO [cdp_UI]

/* Base View SQL for Template Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Categories
-- Item: vwTemplateCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Template Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  TemplateCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwTemplateCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwTemplateCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[TemplateCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[TemplateCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    t.*,
    TemplateCategory_ParentID.[Name] AS [Parent],
    User_UserID.[Name] AS [User],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[TemplateCategory] AS t
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[TemplateCategory] AS TemplateCategory_ParentID
  ON
    [t].[ParentID] = TemplateCategory_ParentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [t].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [t].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwTemplateCategories] TO [cdp_Integration], [cdp_UI], [cdp_Developer]
    

/* Base View Permissions SQL for Template Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Categories
-- Item: Permissions for vwTemplateCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwTemplateCategories] TO [cdp_Integration], [cdp_UI], [cdp_Developer]

/* SQL text to update entity field related entity name field map for entity field ID F64E17F0-6F36-EF11-86D4-6045BDEE16E6 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='F64E17F0-6F36-EF11-86D4-6045BDEE16E6',
         @RelatedEntityNameFieldMap='Category'

/* Base View SQL for User View Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Categories
-- Item: vwUserViewCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      User View Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  UserViewCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwUserViewCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwUserViewCategories]
AS
WITH
    CTE_RootParentID AS (
        -- Anchor: rows with no parent (root nodes)
        SELECT
            [ID],
            [ID] AS [RootParentID]
        FROM
            [${flyway:defaultSchema}].[UserViewCategory]
        WHERE
            [ParentID] IS NULL

        UNION ALL

        -- Recursive: traverse up the hierarchy
        SELECT
            child.[ID],
            parent.[RootParentID]
        FROM
            [${flyway:defaultSchema}].[UserViewCategory] child
        INNER JOIN
            CTE_RootParentID parent ON child.[ParentID] = parent.[ID]
    )
SELECT
    u.*,
    UserViewCategory_ParentID.[Name] AS [Parent],
    Entity_EntityID.[Name] AS [Entity],
    User_UserID.[Name] AS [User],
    CTE_RootParentID.[RootParentID]
FROM
    [${flyway:defaultSchema}].[UserViewCategory] AS u
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[UserViewCategory] AS UserViewCategory_ParentID
  ON
    [u].[ParentID] = UserViewCategory_ParentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [u].[EntityID] = Entity_EntityID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [u].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    CTE_RootParentID
  ON
    [u].[ID] = CTE_RootParentID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwUserViewCategories] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for User View Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Categories
-- Item: Permissions for vwUserViewCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwUserViewCategories] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* SQL text to update entity field related entity name field map for entity field ID 644F17F0-6F36-EF11-86D4-6045BDEE16E6 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='644F17F0-6F36-EF11-86D4-6045BDEE16E6',
         @RelatedEntityNameFieldMap='LinkedEntity'

/* SQL text to update entity field related entity name field map for entity field ID C68C8778-B939-EF11-86D4-000D3A4E707E */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='C68C8778-B939-EF11-86D4-000D3A4E707E',
         @RelatedEntityNameFieldMap='Workflow'

/* SQL text to update entity field related entity name field map for entity field ID C78C8778-B939-EF11-86D4-000D3A4E707E */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='C78C8778-B939-EF11-86D4-000D3A4E707E',
         @RelatedEntityNameFieldMap='WorkflowEngine'





































































































/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '94b14297-820e-46f1-9602-823686f0eed7'  OR 
               (EntityID = '49770E19-D6D0-485D-A03F-01C39FDFB6D1' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '94b14297-820e-46f1-9602-823686f0eed7',
            '49770E19-D6D0-485D-A03F-01C39FDFB6D1', -- Entity: Generated Code Categories
            100015,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'a860dae5-5aa8-4ebe-9c5f-914afdd0e3c6'  OR 
               (EntityID = '5190AF93-4C39-4429-BDAA-0AEB492A0256' AND Name = 'RootParentRunID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'a860dae5-5aa8-4ebe-9c5f-914afdd0e3c6',
            '5190AF93-4C39-4429-BDAA-0AEB492A0256', -- Entity: MJ: AI Agent Runs
            100091,
            'RootParentRunID',
            'Root Parent Run ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'd3b3bbe7-627b-4a67-bfc3-81c2f248b9ed'  OR 
               (EntityID = '5190AF93-4C39-4429-BDAA-0AEB492A0256' AND Name = 'RootLastRunID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'd3b3bbe7-627b-4a67-bfc3-81c2f248b9ed',
            '5190AF93-4C39-4429-BDAA-0AEB492A0256', -- Entity: MJ: AI Agent Runs
            100092,
            'RootLastRunID',
            'Root Last Run ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '644aa4b2-1044-430c-bcba-245644294e02'  OR 
               (EntityID = 'CDB135CC-6D3C-480B-90AE-25B7805F82C1' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '644aa4b2-1044-430c-bcba-245644294e02',
            'CDB135CC-6D3C-480B-90AE-25B7805F82C1', -- Entity: AI Agents
            100089,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '7a515be1-06f9-4a91-9012-f40101db591a'  OR 
               (EntityID = 'FA0D11D1-4E8D-44D6-8C2B-55EEB3208E3E' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '7a515be1-06f9-4a91-9012-f40101db591a',
            'FA0D11D1-4E8D-44D6-8C2B-55EEB3208E3E', -- Entity: MJ: Collections
            100025,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '4b2f08bc-1733-4447-b9f2-43a73026d68e'  OR 
               (EntityID = '73AD0238-8B56-EF11-991A-6045BDEBA539' AND Name = 'RootResultSelectorPromptID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '4b2f08bc-1733-4447-b9f2-43a73026d68e',
            '73AD0238-8B56-EF11-991A-6045BDEBA539', -- Entity: AI Prompts
            100113,
            'RootResultSelectorPromptID',
            'Root Result Selector Prompt ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'e3f03108-c7b4-4564-a3c7-1635b90296bf'  OR 
               (EntityID = '7DAD0238-8B56-EF11-991A-6045BDEBA539' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'e3f03108-c7b4-4564-a3c7-1635b90296bf',
            '7DAD0238-8B56-EF11-991A-6045BDEBA539', -- Entity: AI Prompt Categories
            100015,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '4f7cc368-4af7-430e-ad00-e966225e39a2'  OR 
               (EntityID = 'DB238F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '4f7cc368-4af7-430e-ad00-e966225e39a2',
            'DB238F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Skills
            100013,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'decaad66-3bb4-4187-8bbe-4644ac3ba7af'  OR 
               (EntityID = 'F9238F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'decaad66-3bb4-4187-8bbe-4644ac3ba7af',
            'F9238F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Authorizations
            100019,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'b9110560-033f-452c-ae48-385c0cce46cd'  OR 
               (EntityID = 'FB238F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'b9110560-033f-452c-ae48-385c0cce46cd',
            'FB238F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Audit Log Types
            100019,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '55c353f4-3f77-4be6-b931-aa23603cf3ca'  OR 
               (EntityID = '0C248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '55c353f4-3f77-4be6-b931-aa23603cf3ca',
            '0C248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Tags
            100017,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '4f2fe5b3-6ad4-485c-aeba-f7060064e62c'  OR 
               (EntityID = '12248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '4f2fe5b3-6ad4-485c-aeba-f7060064e62c',
            '12248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Conversation Details
            100051,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '0c30fa8b-9650-4f15-b3b9-9692b3186cb6'  OR 
               (EntityID = '1A248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '0c30fa8b-9650-4f15-b3b9-9692b3186cb6',
            '1A248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Query Categories
            100027,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '899f3edd-6028-4729-bcd0-7fd03544f181'  OR 
               (EntityID = '25248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '899f3edd-6028-4729-bcd0-7fd03544f181',
            '25248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: User View Categories
            100023,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '82b97766-a270-40a9-92e0-d76106891460'  OR 
               (EntityID = '26248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '82b97766-a270-40a9-92e0-d76106891460',
            '26248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Dashboard Categories
            100019,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '4273f6a6-4c18-49c8-8d06-0095906b236e'  OR 
               (EntityID = '27248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '4273f6a6-4c18-49c8-8d06-0095906b236e',
            '27248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Report Categories
            100019,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '5db88b07-0fa6-4f27-8f45-72214713db59'  OR 
               (EntityID = '2A248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '5db88b07-0fa6-4f27-8f45-72214713db59',
            '2A248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: File Categories
            100015,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'dba67ed0-6f0c-4cf4-9528-1656b1c9dd7c'  OR 
               (EntityID = '33248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'dba67ed0-6f0c-4cf4-9528-1656b1c9dd7c',
            '33248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Action Categories
            100017,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '24b12ab7-ae2d-43c3-85d3-917700c1d485'  OR 
               (EntityID = '38248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '24b12ab7-ae2d-43c3-85d3-917700c1d485',
            '38248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Actions
            100051,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'daa173e5-1889-4764-b826-5958ee07c6f1'  OR 
               (EntityID = '42248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'daa173e5-1889-4764-b826-5958ee07c6f1',
            '42248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: List Categories
            100019,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'bc3b0efb-e1c8-4396-9a11-2f20faa5a944'  OR 
               (EntityID = '49248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'bc3b0efb-e1c8-4396-9a11-2f20faa5a944',
            '49248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Template Categories
            100019,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '6c369578-b099-4e25-98b5-8218ce90a432'  OR 
               (EntityID = '91797885-7128-4B71-8C4B-81C5FEE24F38' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '6c369578-b099-4e25-98b5-8218ce90a432',
            '91797885-7128-4B71-8C4B-81C5FEE24F38', -- Entity: MJ: Artifact Types
            100021,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'f9f9ec70-b3c6-4619-9a43-0d8986a28a85'  OR 
               (EntityID = '7C1C98D0-3978-4CE8-8E3F-C90301E59767' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'f9f9ec70-b3c6-4619-9a43-0d8986a28a85',
            '7C1C98D0-3978-4CE8-8E3F-C90301E59767', -- Entity: MJ: AI Prompt Runs
            100183,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '55613dc7-0dda-43af-ae04-0f3d2bc709d0'  OR 
               (EntityID = '7C1C98D0-3978-4CE8-8E3F-C90301E59767' AND Name = 'RootRerunFromPromptRunID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '55613dc7-0dda-43af-ae04-0f3d2bc709d0',
            '7C1C98D0-3978-4CE8-8E3F-C90301E59767', -- Entity: MJ: AI Prompt Runs
            100184,
            'RootRerunFromPromptRunID',
            'Root Rerun From Prompt Run ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '5cb223a8-487a-4c9f-895d-490cda610571'  OR 
               (EntityID = '99273DAD-560E-4ABC-8332-C97AB58B7463' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '5cb223a8-487a-4c9f-895d-490cda610571',
            '99273DAD-560E-4ABC-8332-C97AB58B7463', -- Entity: MJ: AI Agent Run Steps
            100045,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'cb7692f5-554c-48a6-b88b-207dd35a3072'  OR 
               (EntityID = '16AB21D1-8047-41B9-8AEA-CD253DED9743' AND Name = 'ArtifactVersion')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'cb7692f5-554c-48a6-b88b-207dd35a3072',
            '16AB21D1-8047-41B9-8AEA-CD253DED9743', -- Entity: MJ: Conversation Detail Artifacts
            100013,
            'ArtifactVersion',
            'Artifact Version',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '18585df4-33d0-4cfc-95e4-6674186dcd9c'  OR 
               (EntityID = '64AD3C8D-0570-48AF-AF4C-D0A2B173FDE1' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '18585df4-33d0-4cfc-95e4-6674186dcd9c',
            '64AD3C8D-0570-48AF-AF4C-D0A2B173FDE1', -- Entity: MJ: Tasks
            100047,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '6b8b792f-9ccb-4748-8085-6b203bbfb949'  OR 
               (EntityID = 'B7E7DBA2-C9C1-4536-B71C-D50CDFE7673A' AND Name = 'RootParentID')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '6b8b792f-9ccb-4748-8085-6b203bbfb949',
            'B7E7DBA2-C9C1-4536-B71C-D50CDFE7673A', -- Entity: MJ: Projects
            100025,
            'RootParentID',
            'Root Parent ID',
            NULL,
            'uniqueidentifier',
            16,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

