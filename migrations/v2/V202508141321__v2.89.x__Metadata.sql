-- SQL Logging Session
-- Session ID: 52933a6b-7cd6-41cf-a5e6-3fdd7a9dad87
-- Started: 2025-08-14T18:17:35.749Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_985a33c8 NVARCHAR(MAX),
@Name_985a33c8 NVARCHAR(500),
@Version_985a33c8 NVARCHAR(50),
@VersionSequence_985a33c8 INT,
@Title_985a33c8 NVARCHAR(1000),
@Description_985a33c8 NVARCHAR(MAX),
@Type_985a33c8 NVARCHAR(255),
@Status_985a33c8 NVARCHAR(50),
@DeveloperName_985a33c8 NVARCHAR(255),
@DeveloperEmail_985a33c8 NVARCHAR(255),
@DeveloperOrganization_985a33c8 NVARCHAR(255),
@SourceRegistryID_985a33c8 UNIQUEIDENTIFIER,
@ReplicatedAt_985a33c8 DATETIMEOFFSET,
@LastSyncedAt_985a33c8 DATETIMEOFFSET,
@Specification_985a33c8 NVARCHAR(MAX),
@FunctionalRequirements_985a33c8 NVARCHAR(MAX),
@TechnicalDesign_985a33c8 NVARCHAR(MAX),
@FunctionalRequirementsVector_985a33c8 NVARCHAR(MAX),
@TechnicalDesignVector_985a33c8 NVARCHAR(MAX),
@HasCustomProps_985a33c8 BIT,
@HasCustomEvents_985a33c8 BIT,
@RequiresData_985a33c8 BIT,
@DependencyCount_985a33c8 INT,
@ID_985a33c8 UNIQUEIDENTIFIER
SET
  @Namespace_985a33c8 = N'AI'
SET
  @Name_985a33c8 = N'AIModelBrowser'
SET
  @Version_985a33c8 = N'1.0.0'
SET
  @VersionSequence_985a33c8 = 1
SET
  @Title_985a33c8 = N'AI Model Browser'
SET
  @Description_985a33c8 = N'A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications'
SET
  @Type_985a33c8 = N'Other'
SET
  @Status_985a33c8 = N'Published'
SET
  @Specification_985a33c8 = N'{
  "name": "AIModelBrowser",
  "title": "AI Model Browser",
  "description": "A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications",
  "type": "dashboard",
  "functionalRequirements": "## AI Model Browser Requirements\n\n### Core Functionality\n- Display AI models in grid or list view with comprehensive information\n- Filter models by Model Type, Status, Model Developer, and Inference Provider\n- View detailed model specifications including context window, token limits, and cost ranking\n- Display all vendors associated with a model (model developers and inference providers)\n- Show prompt run history and usage statistics for selected models\n- Visualize prompt usage with pie charts showing distribution across different prompts\n- Display performance metrics with bar charts showing average execution times\n- Show time series data for model usage over time\n- Support sorting by multiple fields with visual indicators\n- Include search functionality for quick model filtering\n- Provide ''Open'' button to trigger OpenEntityRecord callback for detailed editing\n\n### Analytics Features\n- Pie chart visualization of prompt usage distribution\n- Performance bar charts showing average execution times per prompt\n- Time series chart showing model usage trends over last 7 days\n- Summary statistics including total runs, success rates, and token usage\n- Grouped vendor display by type (Model Developer vs Inference Provider)\n\n### UX Considerations\n- Collapsible filter panel with active filter count indicator\n- Sliding details panel for comprehensive model information\n- Inline analytics panel with tabbed views for different visualizations\n- Smooth animations for panel transitions and chart rendering\n- Responsive design adapting to different screen sizes\n- Loading states while fetching data\n- Empty states with helpful messages\n- Visual feedback for hover and selection states\n- Maintain user preferences for view mode and filter state",
  "dataRequirements": {
    "mode": "views",
    "entities": [
      {
        "name": "AI Models",
        "description": "Core AI model definitions and specifications",
        "displayFields": [
          "ID",
          "Name",
          "APIName",
          "Description",
          "AIModelTypeID",
          "InputTokenLimit",
          "PowerRank",
          "SpeedRank",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt",
          "__mj_UpdatedAt"
        ],
        "filterFields": [
          "AIModelTypeID",
          "IsActive"
        ],
        "sortFields": [
          "Name",
          "InputTokenLimit",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": true,
            "description": "Unique identifier for the AI model"
          },
          {
            "name": "Name",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "System name of the AI model"
          },
          {
            "name": "APIName",
            "sequence": 4,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "API identifier for the model"
          },
          {
            "name": "InputTokenLimit",
            "sequence": 5,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Maximum input token limit"
          },
          {
            "name": "CostRank",
            "sequence": 6,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Relative cost ranking (1-5)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Main list of AI models"
      },
      {
        "name": "MJ: AI Model Vendors",
        "description": "Vendor associations for AI models",
        "displayFields": [
          "ID",
          "ModelID",
          "VendorID",
          "TypeID",
          "Model",
          "Vendor",
          "Type",
          "Status",
          "Priority",
          "APIName",
          "MaxInputTokens",
          "MaxOutputTokens",
          "SupportsStreaming",
          "SupportsEffortLevel"
        ],
        "filterFields": [
          "ModelID",
          "Type",
          "Status"
        ],
        "sortFields": [
          "Vendor",
          "Priority",
          "Type"
        ],
        "fieldMetadata": [
          {
            "name": "ModelID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Reference to AI Model"
          },
          {
            "name": "Vendor",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor name"
          },
          {
            "name": "Type",
            "sequence": 3,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor type (Model Developer or Inference Provider)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Vendor associations for models"
      },
      {
        "name": "AI Model Types",
        "description": "Types/categories of AI models",
        "displayFields": [
          "ID",
          "Name",
          "Description"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Filter dropdown for model types"
      },
      {
        "name": "MJ: AI Prompt Runs",
        "description": "Execution history for AI prompts",
        "displayFields": [
          "ID",
          "PromptID",
          "ModelID",
          "StartTime",
          "EndTime",
          "TotalExecutionTime",
          "InputTokens",
          "OutputTokens",
          "TotalTokens",
          "Status",
          "Error"
        ],
        "filterFields": [
          "ModelID",
          "PromptID",
          "Status"
        ],
        "sortFields": [
          "StartTime",
          "TotalExecutionTime"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Analytics and usage history"
      },
      {
        "name": "AI Prompts",
        "description": "AI prompt definitions",
        "displayFields": [
          "ID",
          "Name",
          "Description",
          "CategoryID"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Enrich prompt runs with names"
      }
    ]
  },
  "technicalDesign": "## Component Architecture\n\n### Root Component (AIModelBrowser)\n- Manages overall state and data loading\n- Coordinates between filter, list, details, and analytics components\n- Handles user preferences and saved settings\n- Manages search and sort state\n\n### Child Components\n1. **AIModelList**: Displays models in grid or list view with vendor information\n2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors\n3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering\n4. **AIModelAnalytics**: Inline analytics panel with charts and statistics\n\n### Data Flow\n- Root component loads all models and vendor associations\n- Filters are applied at the root level and filtered data passed to list\n- Selection in list triggers detail loading and analytics calculation\n- Analytics component processes prompt runs to generate visualizations\n\n### Chart Implementation\n- Pie charts using SVG for prompt usage distribution\n- Bar charts for performance metrics\n- Time series charts for usage trends\n- All charts are responsive and interactive",
  "properties": [],
  "events": [],
  "exampleUsage": "<AIModelBrowser\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>",
  "dependencies": [
    {
      "name": "AIModelList",
      "title": "AI Model List",
      "description": "Displays AI models in grid or list view with vendor information and sorting",
      "type": "table",
      "functionalRequirements": "Display models with vendor counts, support grid and list views, handle sorting and selection",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "models", "type": "array", "required": true, "description": "Array of AI model objects to display"},
        {"name": "modelVendors", "type": "array", "required": true, "description": "Array of model vendor associations"},
        {"name": "viewMode", "type": "string", "required": true, "description": "Display mode - ''grid'' or ''list''"},
        {"name": "selectedModelId", "type": "string", "required": false, "description": "ID of the currently selected model"},
        {"name": "sortBy", "type": "string", "required": false, "description": "Field to sort by"},
        {"name": "sortDirection", "type": "string", "required": false, "description": "Sort direction - ''asc'' or ''desc''"}
      ],
      "events": [
        {"name": "onSelectModel", "description": "Fired when a model is selected", "parameters": [{"name": "modelId", "type": "string", "description": "ID of the selected model"}]},
        {"name": "onSortChange", "description": "Fired when sort criteria changes", "parameters": [{"name": "sortBy", "type": "string", "description": "Field to sort by"}, {"name": "sortDirection", "type": "string", "description": "Sort direction"}]}
      ],
      "exampleUsage": "<AIModelList ... />",
      "code": "function AIModelList({ \n  models, \n  modelVendors,\n  viewMode, \n  selectedModelId, \n  onSelectModel, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? ''50px'' : ''20px'';\n  };\n  \n  // Get vendor info for a model\n  const getModelVendorInfo = useCallback((modelId) => {\n    const vendors = modelVendors.filter(v => v.ModelID === modelId);\n    const inferenceProviders = vendors.filter(v => v.Type === ''Inference Provider'');\n    const modelDeveloper = vendors.find(v => v.Type === ''Model Developer'');\n    \n    return {\n      inferenceProviders,\n      modelDeveloper,\n      vendorCount: vendors.length\n    };\n  }, [modelVendors]);\n  \n  // Handle sort column click\n  const handleSort = useCallback((field) => {\n    if (sortBy === field) {\n      onSortChange?.(field, sortDirection === ''asc'' ? ''desc'' : ''asc'');\n    } else {\n      onSortChange?.(field, ''asc'');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{\n        marginLeft: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {sortDirection === ''asc'' ? ''\u25b2'' : ''\u25bc''}\n      </span>\n    );\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render cost rank\n  const renderCostRank = (rank) => {\n    if (rank == null) return ''-'';\n    \n    const maxStars = 5;\n    const filledStars = Math.min(rank, maxStars);\n    \n    return (\n      <span style={{\n        color: styles.colors.warning || styles.colors.secondary,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {''$''.repeat(filledStars)}\n        <span style={{ opacity: 0.3 }}>\n          {''$''.repeat(maxStars - filledStars)}\n        </span>\n      </span>\n    );\n  };\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Grid view rendering\n  const renderGridView = () => (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fill, minmax(320px, 1fr))'',\n      gap: styles.spacing.lg\n    }}>\n      {models.map((model) => {\n        const vendorInfo = getModelVendorInfo(model.ID);\n        const isSelected = model.ID === selectedModelId;\n        \n        return (\n          <div\n            key={model.ID}\n            onClick={() => onSelectModel?.(model.ID)}\n            style={{\n              backgroundColor: styles.colors.surface,\n              borderRadius: getBorderRadius(''md''),\n              padding: styles.spacing.lg,\n              cursor: ''pointer'',\n              transition: ''all 0.2s'',\n              border: isSelected \n                ? `2px solid $' + '{styles.colors.primary}`\n                : `1px solid $' + '{styles.colors.border}`,\n              boxShadow: isSelected \n                ? `0 4px 12px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}`\n                : ''none''\n            }}\n            onMouseEnter={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.primary;\n                e.currentTarget.style.boxShadow = `0 2px 8px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.05)''}`;\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.border;\n                e.currentTarget.style.boxShadow = ''none'';\n              }\n            }}\n          >\n            {/* Model Header */}\n            <div style={{\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''flex-start'',\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{ flex: 1 }}>\n                <h3 style={{\n                  margin: 0,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {model.Name}\n                </h3>\n                {model.APIName && (\n                  <div style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    fontFamily: ''monospace''\n                  }}>\n                    {model.APIName}\n                  </div>\n                )}\n              </div>\n              {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n            </div>\n            \n            {/* Model Description */}\n            {model.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                marginBottom: styles.spacing.md,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                display: ''-webkit-box'',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: ''vertical''\n              }}>\n                {model.Description}\n              </div>\n            )}\n            \n            {/* Model Specs */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Input Token Limit\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Cost Rank\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </div>\n              </div>\n            </div>\n            \n            {/* Vendor Info */}\n            <div style={{\n              paddingTop: styles.spacing.md,\n              borderTop: `1px solid $' + '{styles.colors.border}`,\n              display: ''flex'',\n              gap: styles.spacing.md,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              {vendorInfo.modelDeveloper && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Dev:</span>\n                  <span style={{ \n                    color: styles.colors.text,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.modelDeveloper.Vendor}\n                  </span>\n                </div>\n              )}\n              {vendorInfo.inferenceProviders.length > 0 && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Providers:</span>\n                  <span style={{ \n                    color: styles.colors.primary,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.inferenceProviders.length}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n  \n  // List view rendering\n  const renderListView = () => (\n    <div style={{\n      backgroundColor: styles.colors.surface,\n      borderRadius: getBorderRadius(''md''),\n      overflow: ''hidden''\n    }}>\n      <table style={{\n        width: ''100%'',\n        borderCollapse: ''collapse''\n      }}>\n        <thead>\n          <tr style={{\n            borderBottom: `2px solid $' + '{styles.colors.border}`\n          }}>\n            <th\n              onClick={() => handleSort(''Name'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Model Name\n              {renderSortIndicator(''Name'')}\n            </th>\n            <th\n              onClick={() => handleSort(''Status'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Status\n              {renderSortIndicator(''Status'')}\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Developer\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Providers\n            </th>\n            <th\n              onClick={() => handleSort(''InputTokenLimit'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''right'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Input Limit\n              {renderSortIndicator(''InputTokenLimit'')}\n            </th>\n            <th\n              onClick={() => handleSort(''CostRank'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''center'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Cost\n              {renderSortIndicator(''CostRank'')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {models.map((model, index) => {\n            const vendorInfo = getModelVendorInfo(model.ID);\n            const isSelected = model.ID === selectedModelId;\n            \n            return (\n              <tr\n                key={model.ID}\n                onClick={() => onSelectModel?.(model.ID)}\n                style={{\n                  borderBottom: index < models.length - 1 \n                    ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                    : ''none'',\n                  backgroundColor: isSelected \n                    ? styles.colors.primaryLight || styles.colors.primary + ''10''\n                    : ''transparent'',\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = ''transparent'';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  <div>\n                    <div style={{\n                      fontWeight: isSelected \n                        ? (styles.typography.fontWeight?.semibold || ''600'')\n                        : (styles.typography.fontWeight?.regular || ''400''),\n                      color: styles.colors.text\n                    }}>\n                      {model.Name}\n                    </div>\n                    {model.APIName && (\n                      <div style={{\n                        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                        color: styles.colors.textSecondary,\n                        fontFamily: ''monospace''\n                      }}>\n                        {model.APIName}\n                      </div>\n                    )}\n                  </div>\n                </td>\n                <td style={{\n                  padding: styles.spacing.md\n                }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {vendorInfo.modelDeveloper?.Vendor || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {vendorInfo.inferenceProviders.length > 0 ? (\n                    <div style={{\n                      display: ''flex'',\n                      gap: styles.spacing.xs,\n                      flexWrap: ''wrap''\n                    }}>\n                      {vendorInfo.inferenceProviders.slice(0, 3).map((provider, idx) => (\n                        <span\n                          key={idx}\n                          style={{\n                            padding: `2px $' + '{styles.spacing.xs}`,\n                            backgroundColor: styles.colors.primary + ''15'',\n                            color: styles.colors.primary,\n                            borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                          }}\n                        >\n                          {provider.Vendor}\n                        </span>\n                      ))}\n                      {vendorInfo.inferenceProviders.length > 3 && (\n                        <span style={{\n                          color: styles.colors.textSecondary,\n                          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                        }}>\n                          +{vendorInfo.inferenceProviders.length - 3}\n                        </span>\n                      )}\n                    </div>\n                  ) : (\n                    <span style={{ color: styles.colors.textSecondary }}>-</span>\n                  )}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''right'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''center''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n  \n  return viewMode === ''grid'' ? renderGridView() : renderListView();\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelDetails",
      "title": "AI Model Details",
      "description": "Sliding details panel showing comprehensive model information, vendors, and usage statistics",
      "type": "detail",
      "functionalRequirements": "Show model specs, vendor associations grouped by type, usage statistics, and open record button",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "model", "type": "object", "required": false, "description": "The selected AI model object"},
        {"name": "vendors", "type": "array", "required": true, "description": "Array of vendors associated with the model"},
        {"name": "promptRuns", "type": "array", "required": true, "description": "Array of prompt runs for this model"},
        {"name": "isOpen", "type": "boolean", "required": true, "description": "Whether the details panel is open"}
      ],
      "events": [
        {"name": "onClose", "description": "Fired when the details panel should close", "parameters": []},
        {"name": "onOpenRecord", "description": "Fired when the open record button is clicked", "parameters": [{"name": "modelName", "type": "string", "description": "Name of the model to open"}]}
      ],
      "exampleUsage": "<AIModelDetails ... />",
      "code": "function AIModelDetails({ \n  model, \n  vendors,\n  promptRuns,\n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''AIModelDetails handleOpenRecord called'', { model, onOpenRecord });\n    if (model?.Name) {\n      console.log(''Calling onOpenRecord with model name:'', model.Name);\n      if (onOpenRecord) {\n        onOpenRecord(model.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No model or model name available'');\n    }\n  }, [model, onOpenRecord]);\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render vendor type icon\n  const renderVendorTypeIcon = (type) => {\n    const icons = {\n      ''Model Developer'': ''\ud83c\udfe2'',\n      ''Inference Provider'': ''\ud83d\ude80''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        marginRight: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.md\n      }}>\n        {icons[type] || ''\ud83d\udce6''}\n      </span>\n    );\n  };\n  \n  // Calculate prompt statistics\n  const calculatePromptStats = useCallback(() => {\n    if (!promptRuns || promptRuns.length === 0) {\n      return {\n        totalRuns: 0,\n        successfulRuns: 0,\n        failedRuns: 0,\n        avgExecutionTime: 0,\n        totalTokens: 0,\n        uniquePrompts: 0\n      };\n    }\n    \n    const stats = {\n      totalRuns: promptRuns.length,\n      successfulRuns: promptRuns.filter(r => r.Status === ''Success'' || r.Status === ''Completed'').length,\n      failedRuns: promptRuns.filter(r => r.Status === ''Failed'' || r.Status === ''Error'').length,\n      avgExecutionTime: 0,\n      totalTokens: 0,\n      uniquePrompts: new Set(promptRuns.map(r => r.PromptID)).size\n    };\n    \n    const validTimes = promptRuns\n      .filter(r => r.TotalExecutionTime)\n      .map(r => r.TotalExecutionTime);\n    \n    if (validTimes.length > 0) {\n      stats.avgExecutionTime = validTimes.reduce((a, b) => a + b, 0) / validTimes.length;\n    }\n    \n    stats.totalTokens = promptRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return stats;\n  }, [promptRuns]);\n  \n  const stats = calculatePromptStats();\n  \n  // Group vendors by type\n  const vendorsByType = useMemo(() => {\n    const grouped = {\n      ''Model Developer'': [],\n      ''Inference Provider'': []\n    };\n    \n    vendors.forEach(v => {\n      if (grouped[v.Type]) {\n        grouped[v.Type].push(v);\n      }\n    });\n    \n    return grouped;\n  }, [vendors]);\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 99999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: ''75px'',\n        right: 0,\n        bottom: 0,\n        width: ''520px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 100000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {model?.Name || ''No Model Selected''}\n              </h2>\n              {model?.APIName && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {model.APIName}\n                </div>\n              )}\n              {model?.IsActive !== undefined && (\n                <div style={{ marginTop: styles.spacing.sm }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              \u2715\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {model ? (\n            <>\n              {/* Model Description */}\n              {model.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {model.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Model Specifications */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Specifications\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Token Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Output Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.OutputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Cost Rank\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.warning || styles.colors.secondary\n                    }}>\n                      {''$''.repeat(Math.min(model.CostRank || 0, 5))}\n                      <span style={{ opacity: 0.3 }}>\n                        {''$''.repeat(Math.max(0, 5 - (model.CostRank || 0)))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vendors Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Vendors ({vendors.length})\n                </h3>\n                \n                {/* Model Developer */}\n                {vendorsByType[''Model Developer''].length > 0 && (\n                  <div style={{ marginBottom: styles.spacing.md }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Model Developer'')}\n                      Model Developer\n                    </div>\n                    {vendorsByType[''Model Developer''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm,\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''center''\n                        }}\n                      >\n                        <div>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {vendor.Vendor}\n                          </div>\n                          {vendor.APIName && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              API: {vendor.APIName}\n                            </div>\n                          )}\n                        </div>\n                        {renderStatusBadge(vendor.Status)}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Inference Providers */}\n                {vendorsByType[''Inference Provider''].length > 0 && (\n                  <div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Inference Provider'')}\n                      Inference Providers\n                    </div>\n                    {vendorsByType[''Inference Provider''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm\n                        }}\n                      >\n                        <div style={{\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''flex-start'',\n                          marginBottom: styles.spacing.sm\n                        }}>\n                          <div>\n                            <div style={{\n                              fontSize: styles.typography.fontSize.md,\n                              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                              color: styles.colors.text\n                            }}>\n                              {vendor.Vendor}\n                            </div>\n                            {vendor.APIName && (\n                              <div style={{\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                fontFamily: ''monospace''\n                              }}>\n                                API: {vendor.APIName}\n                              </div>\n                            )}\n                          </div>\n                          <div style={{\n                            display: ''flex'',\n                            gap: styles.spacing.xs,\n                            alignItems: ''center''\n                          }}>\n                            {vendor.Priority && (\n                              <span style={{\n                                padding: `2px $' + '{styles.spacing.xs}`,\n                                backgroundColor: styles.colors.info + ''15'',\n                                color: styles.colors.info || styles.colors.primary,\n                                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                              }}>\n                                Priority: {vendor.Priority}\n                              </span>\n                            )}\n                            {renderStatusBadge(vendor.Status)}\n                          </div>\n                        </div>\n                        \n                        {/* Vendor Capabilities */}\n                        <div style={{\n                          display: ''flex'',\n                          gap: styles.spacing.xs,\n                          flexWrap: ''wrap''\n                        }}>\n                          {vendor.SupportsStreaming && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Streaming\n                            </span>\n                          )}\n                          {vendor.SupportsEffortLevel && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Effort Level\n                            </span>\n                          )}\n                          {vendor.MaxInputTokens && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.background,\n                              color: styles.colors.textSecondary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              Max: {formatTokens(vendor.MaxInputTokens)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Usage Statistics */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Usage Statistics\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Runs\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.totalRuns.toLocaleString()}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Success Rate\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: stats.totalRuns > 0 \n                        ? (stats.successfulRuns / stats.totalRuns >= 0.9 ? styles.colors.success : styles.colors.warning)\n                        : styles.colors.text\n                    }}>\n                      {stats.totalRuns > 0 \n                        ? `$' + '{((stats.successfulRuns / stats.totalRuns) * 100).toFixed(1)}%`\n                        : ''-''}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Unique Prompts\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.uniquePrompts}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Tokens\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(stats.totalTokens)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Model Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select a model from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {model && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Model Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelFilter",
      "title": "AI Model Filter",
      "description": "Collapsible filter panel for filtering models by type, status, developer, and provider",
      "type": "form",
      "functionalRequirements": "Provide filters for model type, status, developer, and provider with active filter indicators",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "filters", "type": "object", "required": true, "description": "Current filter state object"},
        {"name": "modelTypes", "type": "array", "required": true, "description": "Array of available model types for filtering"},
        {"name": "vendors", "type": "array", "required": true, "description": "Array of available vendors for filtering"},
        {"name": "isCollapsed", "type": "boolean", "required": true, "description": "Whether the filter panel is collapsed"}
      ],
      "events": [
        {"name": "onFilterChange", "description": "Fired when filters are changed", "parameters": [{"name": "filters", "type": "object", "description": "New filter state"}]},
        {"name": "onToggleCollapse", "description": "Fired when the collapse state should toggle", "parameters": []}
      ],
      "exampleUsage": "<AIModelFilter ... />",
      "code": "function AIModelFilter({ \n  filters, \n  onFilterChange, \n  modelTypes,\n  vendors,\n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle model type filter change\n  const handleModelTypeChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      modelType: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle developer filter change\n  const handleDeveloperChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      developer: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle inference provider filter change\n  const handleProviderChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      provider: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle status filter change\n  const handleStatusChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      isActive: e.target.value === '''' ? undefined : e.target.value === ''true''\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  // Get unique developers and providers\n  const developers = useMemo(() => {\n    return vendors.filter(v => v.Name && v.Name.includes(''Developer'')).map(v => v.Name);\n  }, [vendors]);\n  \n  const providers = useMemo(() => {\n    return vendors.filter(v => v.Name && !v.Name.includes(''Developer'')).map(v => v.Name);\n  }, [vendors]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''\u2192'' : ''\u2190''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            \ud83d\udd0d\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Model Type Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Model Type\n            </label>\n            <select\n              value={filters?.modelType || ''''}\n              onChange={handleModelTypeChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Types</option>\n              {modelTypes.map((type) => (\n                <option key={type.ID} value={type.ID}>\n                  {type.Name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Status Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Status\n            </label>\n            <select\n              value={filters?.isActive || ''''}\n              onChange={handleStatusChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"Active\">Active</option>\n              <option value=\"Inactive\">Inactive</option>\n              <option value=\"Deprecated\">Deprecated</option>\n              <option value=\"Preview\">Preview</option>\n            </select>\n          </div>\n          \n          {/* Model Developer Filter */}\n          {developers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Model Developer\n              </label>\n              <select\n                value={filters?.developer || ''''}\n                onChange={handleDeveloperChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Developers</option>\n                {developers.map((dev) => (\n                  <option key={dev} value={dev}>\n                    {dev}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Inference Provider Filter */}\n          {providers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Inference Provider\n              </label>\n              <select\n                value={filters?.provider || ''''}\n                onChange={handleProviderChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Providers</option>\n                {providers.map((provider) => (\n                  <option key={provider} value={provider}>\n                    {provider}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.modelType && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Type:\n                      </span>\n                      <strong>{modelTypes.find(t => t.ID === filters.modelType)?.Name || filters.modelType}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleModelTypeChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.isActive && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Status:\n                      </span>\n                      <strong>{filters.isActive}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleStatusChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.developer && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Developer:\n                      </span>\n                      <strong>{filters.developer}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleDeveloperChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.provider && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Provider:\n                      </span>\n                      <strong>{filters.provider}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleProviderChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelAnalytics",
      "title": "AI Model Analytics",
      "description": "Analytics panel with charts showing prompt usage distribution, performance metrics, and time series",
      "type": "chart",
      "functionalRequirements": "Display pie chart for prompt usage, bar chart for performance, time series for usage trends",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "model", "type": "object", "required": false, "description": "The selected AI model for analytics"},
        {"name": "promptRuns", "type": "array", "required": true, "description": "Array of prompt runs to analyze"},
        {"name": "view", "type": "string", "required": true, "description": "Current analytics view - ''prompts'', ''performance'', or ''timeline''"}
      ],
      "events": [
        {"name": "onViewChange", "description": "Fired when the analytics view changes", "parameters": [{"name": "view", "type": "string", "description": "New view name"}]}
      ],
      "exampleUsage": "<AIModelAnalytics ... />",
      "code": "function AIModelAnalytics({ \n  model,\n  promptRuns,\n  view,\n  onViewChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate prompt usage statistics\n  const promptStats = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    const stats = {};\n    promptRuns.forEach(run => {\n      const promptName = run.PromptName || ''Unknown'';\n      if (!stats[promptName]) {\n        stats[promptName] = {\n          name: promptName,\n          runs: 0,\n          successfulRuns: 0,\n          failedRuns: 0,\n          totalTokens: 0,\n          avgExecutionTime: 0,\n          executionTimes: []\n        };\n      }\n      \n      stats[promptName].runs++;\n      if (run.Status === ''Success'' || run.Status === ''Completed'') {\n        stats[promptName].successfulRuns++;\n      } else if (run.Status === ''Failed'' || run.Status === ''Error'') {\n        stats[promptName].failedRuns++;\n      }\n      \n      stats[promptName].totalTokens += run.TotalTokens || 0;\n      if (run.TotalExecutionTime) {\n        stats[promptName].executionTimes.push(run.TotalExecutionTime);\n      }\n    });\n    \n    // Calculate averages\n    Object.values(stats).forEach(stat => {\n      if (stat.executionTimes.length > 0) {\n        stat.avgExecutionTime = stat.executionTimes.reduce((a, b) => a + b, 0) / stat.executionTimes.length;\n      }\n    });\n    \n    return Object.values(stats).sort((a, b) => b.runs - a.runs);\n  }, [promptRuns]);\n  \n  // Calculate time series data\n  const timeSeriesData = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    // Group by day\n    const dailyStats = {};\n    promptRuns.forEach(run => {\n      if (run.StartTime) {\n        const date = new Date(run.StartTime).toLocaleDateString();\n        if (!dailyStats[date]) {\n          dailyStats[date] = {\n            date,\n            runs: 0,\n            tokens: 0,\n            errors: 0\n          };\n        }\n        dailyStats[date].runs++;\n        dailyStats[date].tokens += run.TotalTokens || 0;\n        if (run.Status === ''Failed'' || run.Status === ''Error'') {\n          dailyStats[date].errors++;\n        }\n      }\n    });\n    \n    return Object.values(dailyStats).sort((a, b) => new Date(a.date) - new Date(b.date));\n  }, [promptRuns]);\n  \n  // Render pie chart\n  const renderPieChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No prompt data available\n        </div>\n      );\n    }\n    \n    const total = promptStats.reduce((sum, stat) => sum + stat.runs, 0);\n    const colors = [\n      styles.colors.primary,\n      styles.colors.success || ''#4CAF50'',\n      styles.colors.warning || ''#FF9800'',\n      styles.colors.error || ''#F44336'',\n      styles.colors.info || ''#2196F3'',\n      ''#9C27B0'', ''#00BCD4'', ''#8BC34A'', ''#FFC107'', ''#795548''\n    ];\n    \n    // Create simple pie chart using SVG\n    let currentAngle = 0;\n    const segments = promptStats.slice(0, 5).map((stat, index) => {\n      const percentage = stat.runs / total;\n      const angle = percentage * 360;\n      const largeArcFlag = angle > 180 ? 1 : 0;\n      \n      const startX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      currentAngle += angle;\n      \n      const endX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const endY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      const pathData = [\n        `M 100 100`,\n        `L $' + '{startX} $' + '{startY}`,\n        `A 80 80 0 $' + '{largeArcFlag} 1 $' + '{endX} $' + '{endY}`,\n        ''Z''\n      ].join('' '');\n      \n      return {\n        path: pathData,\n        color: colors[index % colors.length],\n        percentage,\n        stat\n      };\n    });\n    \n    return (\n      <div>\n        <svg viewBox=\"0 0 200 200\" style={{ width: ''200px'', height: ''200px'', margin: ''0 auto'', display: ''block'' }}>\n          {segments.map((segment, index) => (\n            <g key={index}>\n              <path\n                d={segment.path}\n                fill={segment.color}\n                stroke={styles.colors.background}\n                strokeWidth=\"2\"\n                style={{ cursor: ''pointer'' }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.opacity = ''0.8'';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.opacity = ''1'';\n                }}\n              />\n            </g>\n          ))}\n        </svg>\n        \n        {/* Legend */}\n        <div style={{\n          marginTop: styles.spacing.md,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.xs\n        }}>\n          {segments.map((segment, index) => (\n            <div\n              key={index}\n              style={{\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              <div style={{\n                width: ''12px'',\n                height: ''12px'',\n                backgroundColor: segment.color,\n                borderRadius: ''2px''\n              }} />\n              <div style={{\n                flex: 1,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {segment.stat.name}\n              </div>\n              <div style={{\n                color: styles.colors.textSecondary,\n                fontWeight: styles.typography.fontWeight?.medium || ''500''\n              }}>\n                {(segment.percentage * 100).toFixed(1)}%\n              </div>\n            </div>\n          ))}\n          {promptStats.length > 5 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              fontStyle: ''italic''\n            }}>\n              +{promptStats.length - 5} more prompts\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render bar chart for performance\n  const renderPerformanceChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No performance data available\n        </div>\n      );\n    }\n    \n    const maxTime = Math.max(...promptStats.map(s => s.avgExecutionTime || 0));\n    const displayStats = promptStats.slice(0, 10);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.sm\n        }}>\n          {displayStats.map((stat, index) => (\n            <div key={index} style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.sm }}>\n              <div style={{\n                width: ''100px'',\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {stat.name}\n              </div>\n              <div style={{\n                flex: 1,\n                height: ''20px'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                overflow: ''hidden'',\n                position: ''relative''\n              }}>\n                <div style={{\n                  width: maxTime > 0 ? `$' + '{(stat.avgExecutionTime / maxTime) * 100}%` : ''0%'',\n                  height: ''100%'',\n                  backgroundColor: styles.colors.primary,\n                  transition: ''width 0.3s''\n                }} />\n                <div style={{\n                  position: ''absolute'',\n                  right: styles.spacing.xs,\n                  top: ''50%'',\n                  transform: ''translateY(-50%)'',\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary\n                }}>\n                  {stat.avgExecutionTime ? `$' + '{(stat.avgExecutionTime / 1000).toFixed(2)}s` : ''-''}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render time series chart\n  const renderTimeSeriesChart = () => {\n    if (timeSeriesData.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No time series data available\n        </div>\n      );\n    }\n    \n    const maxRuns = Math.max(...timeSeriesData.map(d => d.runs));\n    const recentData = timeSeriesData.slice(-7);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          alignItems: ''flex-end'',\n          height: ''150px'',\n          gap: styles.spacing.xs,\n          marginBottom: styles.spacing.sm\n        }}>\n          {recentData.map((data, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 1,\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                gap: styles.spacing.xs\n              }}\n            >\n              <div style={{\n                width: ''100%'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                position: ''relative'',\n                flex: 1,\n                display: ''flex'',\n                alignItems: ''flex-end''\n              }}>\n                <div style={{\n                  width: ''100%'',\n                  height: maxRuns > 0 ? `$' + '{(data.runs / maxRuns) * 100}%` : ''0%'',\n                  backgroundColor: data.errors > 0 \n                    ? styles.colors.error \n                    : styles.colors.primary,\n                  borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                  transition: ''height 0.3s''\n                }} />\n              </div>\n              <div style={{\n                fontSize: ''10px'',\n                color: styles.colors.textSecondary,\n                textAlign: ''center''\n              }}>\n                {new Date(data.date).toLocaleDateString(''en'', { month: ''short'', day: ''numeric'' })}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n          color: styles.colors.textSecondary\n        }}>\n          <span>Runs per day (last 7 days)</span>\n          <span>Max: {maxRuns}</span>\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      backgroundColor: styles.colors.surface\n    }}>\n      {/* Header with View Selector */}\n      <div style={{\n        padding: styles.spacing.lg,\n        borderBottom: `1px solid $' + '{styles.colors.border}`\n      }}>\n        <h3 style={{\n          margin: 0,\n          marginBottom: styles.spacing.md,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n          color: styles.colors.text\n        }}>\n          Analytics\n        </h3>\n        \n        {/* View Tabs */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.xs,\n          borderBottom: `1px solid $' + '{styles.colors.border}`\n        }}>\n          <button\n            onClick={() => onViewChange?.(''prompts'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''prompts'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''prompts'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Prompt Usage\n          </button>\n          <button\n            onClick={() => onViewChange?.(''performance'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''performance'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''performance'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Performance\n          </button>\n          <button\n            onClick={() => onViewChange?.(''timeline'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''timeline'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''timeline'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Timeline\n          </button>\n        </div>\n      </div>\n      \n      {/* Content Area */}\n      <div style={{\n        flex: 1,\n        padding: styles.spacing.lg,\n        overflow: ''auto''\n      }}>\n        {!model ? (\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            height: ''100%'',\n            color: styles.colors.textSecondary,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Select a model to view analytics\n          </div>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.lg\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Total Runs\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptRuns.length}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Unique Prompts\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptStats.length}\n                </div>\n              </div>\n            </div>\n            \n            {/* Chart Area */}\n            <div>\n              {view === ''prompts'' && renderPieChart()}\n              {view === ''performance'' && renderPerformanceChart()}\n              {view === ''timeline'' && renderTimeSeriesChart()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    }
  ],
  "libraries": [],
  "code": "function AIModelBrowser({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { AIModelList, AIModelDetails, AIModelFilter, AIModelAnalytics } = components;\n  console.log(''=== AIModelBrowser initialized with callbacks:'', callbacks);\n  \n  // Initialize state from saved settings where appropriate\n  const [selectedModelId, setSelectedModelId] = useState(savedUserSettings?.selectedModelId);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''grid'');\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [sortBy, setSortBy] = useState(savedUserSettings?.sortBy || ''Name'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''asc'');\n  const [filterPanelCollapsed, setFilterPanelCollapsed] = useState(savedUserSettings?.filterPanelCollapsed || false);\n  const [analyticsView, setAnalyticsView] = useState(savedUserSettings?.analyticsView || ''prompts'');\n  \n  // Runtime UI state (not persisted)\n  const [models, setModels] = useState([]);\n  const [modelVendors, setModelVendors] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [modelTypes, setModelTypes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [detailsPanelOpen, setDetailsPanelOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('''');\n  \n  // Load models on mount and when filters/sort change\n  useEffect(() => {\n    const loadModels = async () => {\n      console.log(''=== Loading models with filters:'', filters, ''search:'', searchQuery);\n      setLoading(true);\n      try {\n        // Build filter string for models\n        let filterParts = [];\n        if (searchQuery) {\n          filterParts.push(`(Name LIKE ''%$' + '{searchQuery}%'' OR APIName LIKE ''%$' + '{searchQuery}%'' OR Description LIKE ''%$' + '{searchQuery}%'')`);\n        }\n        if (filters.modelType) {\n          filterParts.push(`AIModelTypeID = ''$' + '{filters.modelType}''`);\n        }\n        if (filters.isActive !== undefined) {\n          filterParts.push(`IsActive = ''$' + '{filters.isActive}''`);\n        }\n        \n        // Load AI Models\n        const modelsResult = await utilities.rv.RunView({\n          EntityName: ''AI Models'',\n          Fields: [''ID'', ''Name'', ''APIName'', ''Description'', ''AIModelTypeID'', ''InputTokenLimit'', \n                   ''CostRank'', ''IsActive'', ''__mj_CreatedAt'', ''__mj_UpdatedAt''],\n          OrderBy: `$' + '{sortBy} $' + '{sortDirection.toUpperCase()}`,\n          ExtraFilter: filterParts.length > 0 ? filterParts.join('' AND '') : undefined\n        });\n        \n        if (modelsResult?.Success && modelsResult?.Results) {\n          console.log(`Loaded $' + '{modelsResult.Results.length} models`);\n          setModels(modelsResult.Results);\n        } else {\n          console.error(''Failed to load models:'', modelsResult?.ErrorMessage);\n          setModels([]);\n        }\n        \n        // Load Model Types for filter\n        const typesResult = await utilities.rv.RunView({\n          EntityName: ''AI Model Types'',\n          Fields: [''ID'', ''Name'', ''Description''],\n          OrderBy: ''Name ASC''\n        });\n        \n        if (typesResult?.Success && typesResult?.Results) {\n          setModelTypes(typesResult.Results);\n        }\n        \n        // Load Vendors (from AI Model Vendors)\n        const vendorsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Model Vendors'',\n          Fields: [''ID'', ''ModelID'', ''VendorID'', ''TypeID'', ''Model'', ''Vendor'', ''Type'', ''Status'', ''Priority''],\n          OrderBy: ''Vendor ASC, Model ASC''\n        });\n        \n        if (vendorsResult?.Success && vendorsResult?.Results) {\n          const vendorData = vendorsResult.Results;\n          console.log(`Loaded $' + '{vendorData.length} vendor associations`);\n          setModelVendors(vendorData);\n          \n          // Extract unique vendors\n          const uniqueVendors = [...new Set(vendorData.map(v => v.Vendor))].filter(Boolean);\n          setVendors(uniqueVendors.map(name => ({ Name: name })));\n          console.log(`Found $' + '{uniqueVendors.length} unique vendors`);\n          \n          // Apply vendor-based filters\n          if ((filters.developer || filters.provider) && modelsResult?.Results) {\n            console.log(''Applying vendor filters - developer:'', filters.developer, ''provider:'', filters.provider);\n            let vendorFilteredModels = modelsResult.Results;\n            \n            if (filters.developer) {\n              const developerModelIds = vendorData\n                .filter(v => v.Vendor === filters.developer && v.Type?.includes(''Developer''))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => developerModelIds.includes(m.ID));\n              console.log(`After developer filter: $' + '{vendorFilteredModels.length} models`);\n            }\n            \n            if (filters.provider) {\n              const providerModelIds = vendorData\n                .filter(v => v.Vendor === filters.provider && v.Type?.includes(''Provider''))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => providerModelIds.includes(m.ID));\n              console.log(`After provider filter: $' + '{vendorFilteredModels.length} models`);\n            }\n            \n            setModels(vendorFilteredModels);\n          }\n        }\n      } catch (error) {\n        console.error(''Error loading models:'', error);\n        setModels([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadModels();\n  }, [filters, sortBy, sortDirection, searchQuery, utilities.rv]);\n  \n  // Load model details and analytics when selection changes\n  useEffect(() => {\n    const loadModelDetails = async () => {\n      if (!selectedModelId) {\n        setPromptRuns([]);\n        return;\n      }\n      \n      console.log(''=== Loading prompt runs for model:'', selectedModelId);\n      \n      try {\n        // Use the correct entity name for prompt runs: MJ: AI Prompt Runs\n        console.log(''Loading prompt runs with entity: MJ: AI Prompt Runs'');\n        \n        const promptRunsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Prompt Runs'',\n          Fields: [''ID'', ''PromptID'', ''ModelID'', ''RunAt'', ''CompletedAt'', ''ExecutionTimeMS'', \n                   ''TokensPrompt'', ''TokensCompletion'', ''TokensUsed'', ''Success'', ''ErrorMessage''],\n          OrderBy: ''RunAt DESC'',\n            ExtraFilter: `ModelID = ''$' + '{selectedModelId}''`,\n            MaxRows: 1000\n        });\n        \n        if (promptRunsResult?.Success && promptRunsResult?.Results) {\n          console.log(`Found $' + '{promptRunsResult.Results.length} prompt runs`);\n          // Enrich with prompt names\n          const promptIds = [...new Set(promptRunsResult.Results.map(r => r.PromptID))].filter(Boolean);\n          \n          if (promptIds.length > 0) {\n            const promptsResult = await utilities.rv.RunView({\n              EntityName: ''AI Prompts'',\n              Fields: [''ID'', ''Name'', ''Description'', ''CategoryID''],\n              ExtraFilter: `ID IN (''$' + '{promptIds.join(\"'',''\")}'')`\n            });\n            \n            const promptMap = {};\n            if (promptsResult?.Success && promptsResult?.Results) {\n              promptsResult.Results.forEach(p => {\n                promptMap[p.ID] = p;\n              });\n            }\n            \n            // Enrich prompt runs with prompt names and convert fields for compatibility\n            const enrichedRuns = promptRunsResult.Results.map(run => ({\n              ...run,\n              PromptName: promptMap[run.PromptID]?.Name || ''Unknown Prompt'',\n              PromptDescription: promptMap[run.PromptID]?.Description,\n              // Map fields for analytics component compatibility\n              StartTime: run.RunAt,\n              EndTime: run.CompletedAt,\n              TotalExecutionTime: run.ExecutionTimeMS,\n              Status: run.Success ? ''Success'' : ''Failed'',\n              Error: run.ErrorMessage,\n              TotalTokens: run.TokensUsed\n            }));\n            \n            console.log(`Enriched $' + '{enrichedRuns.length} runs with prompt names`);\n            setPromptRuns(enrichedRuns);\n          } else {\n            setPromptRuns(promptRunsResult.Results);\n          }\n        } else {\n          console.log(''No prompt runs found:'', promptRunsResult?.ErrorMessage);\n          setPromptRuns([]);\n        }\n      } catch (error) {\n        console.error(''Error loading model details:'', error);\n        setPromptRuns([]);\n      }\n    };\n    \n    loadModelDetails();\n  }, [selectedModelId, utilities.rv]);\n  \n  // Handle model selection\n  const handleSelectModel = useCallback((modelId) => {\n    setSelectedModelId(modelId);\n    setDetailsPanelOpen(true);\n    \n    // Save user preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedModelId: modelId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode) => {\n    setViewMode(mode);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      viewMode: mode\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    \n    // Save filter preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle sort changes\n  const handleSortChange = useCallback((newSortBy, newSortDirection) => {\n    setSortBy(newSortBy);\n    setSortDirection(newSortDirection);\n    \n    // Save sort preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortBy: newSortBy,\n      sortDirection: newSortDirection\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter panel toggle\n  const handleToggleFilter = useCallback(() => {\n    const newCollapsed = !filterPanelCollapsed;\n    setFilterPanelCollapsed(newCollapsed);\n    \n    // Save collapsed state\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterPanelCollapsed: newCollapsed\n    });\n  }, [filterPanelCollapsed, savedUserSettings, onSaveUserSettings]);\n  \n  // Handle analytics view change\n  const handleAnalyticsViewChange = useCallback((view) => {\n    setAnalyticsView(view);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      analyticsView: view\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle opening model record\n  const handleOpenRecord = useCallback((modelName) => {\n    console.log(''Opening AI Model record:'', modelName);\n    if (callbacks?.OpenEntityRecord && modelName) {\n      callbacks.OpenEntityRecord(''AI Models'', [{ FieldName: ''Name'', Value: modelName }]);\n    }\n  }, [callbacks]);\n  \n  // Handle closing details panel\n  const handleCloseDetails = useCallback(() => {\n    setDetailsPanelOpen(false);\n  }, []);\n  \n  // Handle search\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n  }, []);\n  \n  // Get selected model object\n  const selectedModel = models.find(m => m.ID === selectedModelId);\n  \n  // Get vendors for selected model\n  const selectedModelVendors = modelVendors.filter(v => v.ModelID === selectedModelId);\n  \n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Loading state\n  if (loading && models.length === 0) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100vh'',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading AI models...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      display: ''flex'',\n      height: ''100vh'',\n      backgroundColor: styles.colors.background,\n      overflow: ''hidden''\n    }}>\n      {/* Filter Panel */}\n      {AIModelFilter && (\n        <AIModelFilter\n          filters={filters}\n          onFilterChange={handleFilterChange}\n          modelTypes={modelTypes}\n          vendors={vendors}\n          isCollapsed={filterPanelCollapsed}\n          onToggleCollapse={handleToggleFilter}\n          savedUserSettings={savedUserSettings?.filterPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            filterPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center'',\n            marginBottom: styles.spacing.md\n          }}>\n            <h1 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              AI Model Browser\n            </h1>\n            \n            {/* View Mode Toggle */}\n            <div style={{\n              display: ''flex'',\n              gap: styles.spacing.sm,\n              alignItems: ''center''\n            }}>\n              <span style={{\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.textSecondary\n              }}>\n                View:\n              </span>\n              <button\n                onClick={() => handleViewModeChange(''grid'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''grid'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''grid'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Grid\n              </button>\n              <button\n                onClick={() => handleViewModeChange(''list'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''list'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''list'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                List\n              </button>\n            </div>\n          </div>\n          \n          {/* Search Bar */}\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.md\n          }}>\n            <input\n              type=\"text\"\n              placeholder=\"Search AI models...\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              style={{\n                flex: 1,\n                padding: styles.spacing.md,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background\n              }}\n            />\n            {searchQuery && (\n              <button\n                onClick={() => handleSearch('''')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: styles.colors.surfaceHover || styles.colors.surface,\n                  color: styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Model List and Analytics Split View */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          overflow: ''hidden''\n        }}>\n          {/* Model List */}\n          <div style={{\n            flex: 1,\n            overflow: ''auto'',\n            padding: styles.spacing.lg\n          }}>\n            {AIModelList && (\n              <AIModelList\n                models={models}\n                modelVendors={modelVendors}\n                viewMode={viewMode}\n                selectedModelId={selectedModelId}\n                onSelectModel={handleSelectModel}\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n                onSortChange={handleSortChange}\n                savedUserSettings={savedUserSettings?.modelList}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  modelList: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            )}\n            \n            {/* Empty State */}\n            {models.length === 0 && !loading && (\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                padding: styles.spacing.xxl || styles.spacing.xl,\n                color: styles.colors.textSecondary\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xl,\n                  marginBottom: styles.spacing.md\n                }}>\n                  No AI models found\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {searchQuery || Object.keys(filters).length > 0\n                    ? ''Try adjusting your filters or search query''\n                    : ''No AI models are available''}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Analytics Panel */}\n          {selectedModel && AIModelAnalytics && (\n            <div style={{\n              width: ''400px'',\n              borderLeft: `1px solid $' + '{styles.colors.border}`,\n              overflow: ''hidden'',\n              display: ''flex'',\n              flexDirection: ''column''\n            }}>\n              <AIModelAnalytics\n                model={selectedModel}\n                promptRuns={promptRuns}\n                view={analyticsView}\n                onViewChange={handleAnalyticsViewChange}\n                savedUserSettings={savedUserSettings?.analytics}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  analytics: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Details Panel */}\n      {AIModelDetails && (\n        <AIModelDetails\n          model={selectedModel}\n          vendors={selectedModelVendors}\n          promptRuns={promptRuns}\n          isOpen={detailsPanelOpen}\n          onClose={handleCloseDetails}\n          onOpenRecord={() => handleOpenRecord(selectedModel?.Name)}\n          savedUserSettings={savedUserSettings?.detailsPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            detailsPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n    </div>\n  );\n}"
}'
SET
  @FunctionalRequirements_985a33c8 = N'## AI Model Browser Requirements

### Core Functionality
- Display AI models in grid or list view with comprehensive information
- Filter models by Model Type, Status, Model Developer, and Inference Provider
- View detailed model specifications including context window, token limits, and cost ranking
- Display all vendors associated with a model (model developers and inference providers)
- Show prompt run history and usage statistics for selected models
- Visualize prompt usage with pie charts showing distribution across different prompts
- Display performance metrics with bar charts showing average execution times
- Show time series data for model usage over time
- Support sorting by multiple fields with visual indicators
- Include search functionality for quick model filtering
- Provide ''Open'' button to trigger OpenEntityRecord callback for detailed editing

### Analytics Features
- Pie chart visualization of prompt usage distribution
- Performance bar charts showing average execution times per prompt
- Time series chart showing model usage trends over last 7 days
- Summary statistics including total runs, success rates, and token usage
- Grouped vendor display by type (Model Developer vs Inference Provider)

### UX Considerations
- Collapsible filter panel with active filter count indicator
- Sliding details panel for comprehensive model information
- Inline analytics panel with tabbed views for different visualizations
- Smooth animations for panel transitions and chart rendering
- Responsive design adapting to different screen sizes
- Loading states while fetching data
- Empty states with helpful messages
- Visual feedback for hover and selection states
- Maintain user preferences for view mode and filter state'
SET
  @TechnicalDesign_985a33c8 = N'## Component Architecture

### Root Component (AIModelBrowser)
- Manages overall state and data loading
- Coordinates between filter, list, details, and analytics components
- Handles user preferences and saved settings
- Manages search and sort state

### Child Components
1. **AIModelList**: Displays models in grid or list view with vendor information
2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors
3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering
4. **AIModelAnalytics**: Inline analytics panel with charts and statistics

### Data Flow
- Root component loads all models and vendor associations
- Filters are applied at the root level and filtered data passed to list
- Selection in list triggers detail loading and analytics calculation
- Analytics component processes prompt runs to generate visualizations

### Chart Implementation
- Pie charts using SVG for prompt usage distribution
- Bar charts for performance metrics
- Time series charts for usage trends
- All charts are responsive and interactive'
SET
  @HasCustomProps_985a33c8 = 0
SET
  @HasCustomEvents_985a33c8 = 0
SET
  @RequiresData_985a33c8 = 1
SET
  @DependencyCount_985a33c8 = 4
SET
  @ID_985a33c8 = 'E7A334EA-53FD-40E4-A255-1DDA891D86B7'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_985a33c8,
  @Name = @Name_985a33c8,
  @Version = @Version_985a33c8,
  @VersionSequence = @VersionSequence_985a33c8,
  @Title = @Title_985a33c8,
  @Description = @Description_985a33c8,
  @Type = @Type_985a33c8,
  @Status = @Status_985a33c8,
  @DeveloperName = @DeveloperName_985a33c8,
  @DeveloperEmail = @DeveloperEmail_985a33c8,
  @DeveloperOrganization = @DeveloperOrganization_985a33c8,
  @SourceRegistryID = @SourceRegistryID_985a33c8,
  @ReplicatedAt = @ReplicatedAt_985a33c8,
  @LastSyncedAt = @LastSyncedAt_985a33c8,
  @Specification = @Specification_985a33c8,
  @FunctionalRequirements = @FunctionalRequirements_985a33c8,
  @TechnicalDesign = @TechnicalDesign_985a33c8,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_985a33c8,
  @TechnicalDesignVector = @TechnicalDesignVector_985a33c8,
  @HasCustomProps = @HasCustomProps_985a33c8,
  @HasCustomEvents = @HasCustomEvents_985a33c8,
  @RequiresData = @RequiresData_985a33c8,
  @DependencyCount = @DependencyCount_985a33c8,
  @ID = @ID_985a33c8;


-- End of SQL Logging Session
-- Session ID: 52933a6b-7cd6-41cf-a5e6-3fdd7a9dad87
-- Completed: 2025-08-14T18:17:52.651Z
-- Duration: 16902ms
-- Total Statements: 1










-- SQL Logging Session
-- Session ID: 327b8a75-ca6d-4320-a246-8ac72e46b0d8
-- Started: 2025-08-14T18:20:25.432Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save MJ: Components (core SP call only)
DECLARE @ID_bb352b62 UNIQUEIDENTIFIER,
@Namespace_bb352b62 NVARCHAR(MAX),
@Name_bb352b62 NVARCHAR(500),
@Version_bb352b62 NVARCHAR(50),
@VersionSequence_bb352b62 INT,
@Title_bb352b62 NVARCHAR(1000),
@Description_bb352b62 NVARCHAR(MAX),
@Type_bb352b62 NVARCHAR(255),
@Status_bb352b62 NVARCHAR(50),
@DeveloperName_bb352b62 NVARCHAR(255),
@DeveloperEmail_bb352b62 NVARCHAR(255),
@DeveloperOrganization_bb352b62 NVARCHAR(255),
@SourceRegistryID_bb352b62 UNIQUEIDENTIFIER,
@ReplicatedAt_bb352b62 DATETIMEOFFSET,
@LastSyncedAt_bb352b62 DATETIMEOFFSET,
@Specification_bb352b62 NVARCHAR(MAX),
@FunctionalRequirements_bb352b62 NVARCHAR(MAX),
@TechnicalDesign_bb352b62 NVARCHAR(MAX),
@FunctionalRequirementsVector_bb352b62 NVARCHAR(MAX),
@TechnicalDesignVector_bb352b62 NVARCHAR(MAX),
@HasCustomProps_bb352b62 BIT,
@HasCustomEvents_bb352b62 BIT,
@RequiresData_bb352b62 BIT,
@DependencyCount_bb352b62 INT
SET
  @ID_bb352b62 = 'ec9fc426-5c79-4c8c-aeb5-211268bccb9c'
SET
  @Namespace_bb352b62 = N'AI/Agents'
SET
  @Name_bb352b62 = N'AIAgentAnalyticsDashboard'
SET
  @Version_bb352b62 = N'1.0.0'
SET
  @VersionSequence_bb352b62 = 1
SET
  @Title_bb352b62 = N'AI Agent Analytics Dashboard'
SET
  @Description_bb352b62 = N'A comprehensive analytics dashboard for monitoring AI agent executions, performance metrics, hierarchical relationships, and step-by-step analysis with real-time updates and interactive visualizations'
SET
  @Type_bb352b62 = N'Dashboard'
SET
  @Status_bb352b62 = N'Published'
SET
  @Specification_bb352b62 = N'{
  "name": "AIAgentAnalyticsDashboard",
  "title": "AI Agent Analytics Dashboard",
  "description": "A comprehensive analytics dashboard for monitoring AI agent executions, performance metrics, hierarchical relationships, and step-by-step analysis with real-time updates and interactive visualizations",
  "type": "dashboard",
  "functionalRequirements": "## AI Agent Analytics Dashboard Requirements\n\n### Core Functionality\n- Display real-time agent execution status with live updates\n- Show hierarchical agent relationships and sub-agent orchestration\n- Provide step-by-step execution analysis with timing and success metrics\n- Visualize performance metrics including execution time, token usage, and costs\n- Track agent learning cycles and improvement over time\n- Monitor conversation flows and context compression effectiveness\n- Display error patterns and anomaly detection\n- Support drill-down from high-level metrics to detailed execution logs\n\n### Analytics Features\n- Live execution monitor with WebSocket updates\n- Agent hierarchy tree visualization with execution flow\n- Step type distribution and execution waterfall charts\n- Performance distribution plots and token usage analytics\n- Learning cycle progress tracking\n- Conversation flow network graph\n- Sub-agent orchestration timeline\n- Real-time alerts and SLA monitoring\n\n### UX Considerations\n- Multi-panel layout with coordinated views\n- Interactive filtering across all visualizations\n- Time range selection with comparison capabilities\n- Drill-down navigation to execution details\n- Export functionality for reports and data\n- Responsive design for different screen sizes\n- Dark/light theme support\n- Smooth animations and transitions",
  "dataRequirements": {
    "mode": "dynamic",
    "entities": [
      {
        "name": "AI Agents",
        "description": "Agent definitions and configurations",
        "fields": ["ID", "Name", "Description", "AgentTypeID", "IsActive", "DefaultPromptEffortLevel", "ExposeAsAction", "ParentID"]
      },
      {
        "name": "MJ: AI Agent Runs",
        "description": "Agent execution instances with hierarchical tracking",
        "fields": ["ID", "AgentID", "ParentRunID", "Status", "StartedAt", "CompletedAt", "Success", "ErrorMessage", "ConversationID", "UserID", "Result", "AgentState", "ExecutionTimeMS", "TotalCost", "TotalTokens", "EffortLevel"]
      },
      {
        "name": "MJ: AI Agent Run Steps",
        "description": "Detailed step-by-step execution tracking",
        "fields": ["ID", "AgentRunID", "StepNumber", "StepType", "StepName", "TargetID", "Status", "StartedAt", "CompletedAt", "Success", "ErrorMessage", "Input", "Output", "ExecutionTimeMS", "TokensUsed", "Cost"]
      },
      {
        "name": "AI Agent Relationships",
        "description": "Parent-child agent relationships",
        "fields": ["ID", "AgentID", "SubAgentID", "RelationshipType", "ExecutionOrder", "IsActive"]
      },
      {
        "name": "MJ: AI Prompt Runs",
        "description": "Prompt executions linked to agent runs",
        "fields": ["ID", "AgentRunID", "PromptID", "ModelID", "RunAt", "CompletedAt", "Success", "TokensUsed", "Cost"]
      }
    ]
  },
  "technicalDesign": "## Component Architecture\n\n### Root Component (AIAgentAnalyticsDashboard)\n- Manages overall dashboard state and data loading\n- Coordinates between multiple visualization panels\n- Handles real-time WebSocket connections for live updates\n- Manages time range and filtering state\n\n### Child Components\n1. **AIAgentExecutionOverview**: Top panel with live monitors, success gauges, and velocity metrics\n2. **AIAgentHierarchyTree**: Interactive tree visualization of agent relationships\n3. **AIAgentStepAnalysis**: Step-by-step execution waterfall and distribution charts\n4. **AIAgentPerformanceMetrics**: Performance plots, token usage, and error analysis\n\n### Data Flow\n- Root component establishes WebSocket connection for real-time updates\n- Historical data loaded based on selected time range\n- Filter changes propagate to all child components\n- Selection in one component updates others (coordinated views)\n\n### State Management\n- Selected agent IDs (for filtering)\n- Time range (with comparison period)\n- Active view tab\n- Real-time data buffer\n- User preferences (saved via onSaveUserSettings)",
  "properties": [],
  "events": [],
  "childComponents": [
    {
      "name": "AIAgentExecutionOverview",
      "description": "Live execution monitors and high-level metrics",
      "required": true
    },
    {
      "name": "AIAgentHierarchyTree",
      "description": "Interactive agent relationship visualization",
      "required": true
    },
    {
      "name": "AIAgentStepAnalysis",
      "description": "Step-by-step execution analysis",
      "required": true
    },
    {
      "name": "AIAgentPerformanceMetrics",
      "description": "Performance and cost analytics",
      "required": true
    }
  ],
  "exampleUsage": "<AIAgentAnalyticsDashboard />",
  "code": "function AIAgentAnalyticsDashboard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { AIAgentExecutionOverview, AIAgentHierarchyTree, AIAgentStepAnalysis, AIAgentPerformanceMetrics } = components;\n  \n  // Initialize state from saved settings\n  const [selectedAgentId, setSelectedAgentId] = useState(savedUserSettings?.selectedAgentId);\n  const [timeRange, setTimeRange] = useState(savedUserSettings?.timeRange || ''24h'');\n  const [comparisonPeriod, setComparisonPeriod] = useState(savedUserSettings?.comparisonPeriod || null);\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [activeView, setActiveView] = useState(savedUserSettings?.activeView || ''overview'');\n  \n  // Runtime state\n  const [agents, setAgents] = useState([]);\n  const [agentRuns, setAgentRuns] = useState([]);\n  const [agentRunSteps, setAgentRunSteps] = useState([]);\n  const [agentRelationships, setAgentRelationships] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [realTimeData, setRealTimeData] = useState({});\n  const [wsConnection, setWsConnection] = useState(null);\n  \n  // Helper function to get border radius\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate time range dates\n  const getTimeRangeDates = useCallback((range) => {\n    const now = new Date();\n    const start = new Date();\n    \n    switch(range) {\n      case ''1h'':\n        start.setHours(now.getHours() - 1);\n        break;\n      case ''24h'':\n        start.setDate(now.getDate() - 1);\n        break;\n      case ''7d'':\n        start.setDate(now.getDate() - 7);\n        break;\n      case ''30d'':\n        start.setDate(now.getDate() - 30);\n        break;\n      default:\n        start.setDate(now.getDate() - 1);\n    }\n    \n    return { start, end: now };\n  }, []);\n  \n  // Load dashboard data\n  useEffect(() => {\n    const loadDashboardData = async () => {\n      setLoading(true);\n      const { start, end } = getTimeRangeDates(timeRange);\n      \n      try {\n        // Load agents\n        const agentsResult = await utilities.rv.RunView({\n          EntityName: ''AI Agents'',\n          Fields: [''ID'', ''Name'', ''Description'', ''AgentTypeID'', ''IsActive'', ''DefaultPromptEffortLevel'', ''ExposeAsAction'', ''ParentID''],\n          OrderBy: ''Name ASC''\n        });\n        \n        if (agentsResult?.Success) {\n          setAgents(agentsResult.Results || []);\n        }\n        \n        // Load agent runs for time period\n        const runsFilter = `StartedAt >= ''$' + '{start.toISOString()}'' AND StartedAt <= ''$' + '{end.toISOString()}''`;\n        const runsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Agent Runs'',\n          Fields: [''ID'', ''AgentID'', ''ParentRunID'', ''Status'', ''StartedAt'', ''CompletedAt'', ''Success'', \n                   ''ErrorMessage'', ''ConversationID'', ''UserID'', ''Result'', ''AgentState'', \n                   ''ExecutionTimeMS'', ''TotalCost'', ''TotalTokens'', ''EffortLevel''],\n          ExtraFilter: runsFilter,\n          OrderBy: ''StartedAt DESC'',\n          MaxRows: 5000\n        });\n        \n        if (runsResult?.Success) {\n          setAgentRuns(runsResult.Results || []);\n          \n          // Load steps for these runs\n          if (runsResult.Results?.length > 0) {\n            const runIds = runsResult.Results.map(r => r.ID);\n            const stepsFilter = `AgentRunID IN (''$' + '{runIds.join(\"'',''\")}'')`;\n            \n            const stepsResult = await utilities.rv.RunView({\n              EntityName: ''MJ: AI Agent Run Steps'',\n              Fields: [''ID'', ''AgentRunID'', ''StepNumber'', ''StepType'', ''StepName'', ''TargetID'', \n                       ''Status'', ''StartedAt'', ''CompletedAt'', ''Success'', ''ErrorMessage'', \n                       ''Input'', ''Output'', ''ExecutionTimeMS'', ''TokensUsed'', ''Cost''],\n              ExtraFilter: stepsFilter,\n              OrderBy: ''AgentRunID, StepNumber'',\n              MaxRows: 10000\n            });\n            \n            if (stepsResult?.Success) {\n              setAgentRunSteps(stepsResult.Results || []);\n            }\n          }\n        }\n        \n        // Load agent relationships\n        const relationshipsResult = await utilities.rv.RunView({\n          EntityName: ''AI Agent Relationships'',\n          Fields: [''ID'', ''AgentID'', ''SubAgentID'', ''RelationshipType'', ''ExecutionOrder'', ''IsActive''],\n          OrderBy: ''ExecutionOrder ASC''\n        });\n        \n        if (relationshipsResult?.Success) {\n          setAgentRelationships(relationshipsResult.Results || []);\n        }\n        \n        // Load prompt runs\n        const promptRunsFilter = `RunAt >= ''$' + '{start.toISOString()}'' AND RunAt <= ''$' + '{end.toISOString()}''`;\n        const promptRunsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Prompt Runs'',\n          Fields: [''ID'', ''AgentRunID'', ''PromptID'', ''ModelID'', ''RunAt'', ''CompletedAt'', \n                   ''Success'', ''TokensUsed'', ''Cost''],\n          ExtraFilter: promptRunsFilter,\n          OrderBy: ''RunAt DESC'',\n          MaxRows: 5000\n        });\n        \n        if (promptRunsResult?.Success) {\n          setPromptRuns(promptRunsResult.Results || []);\n        }\n      } catch (error) {\n        console.error(''Error loading dashboard data:'', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadDashboardData();\n  }, [timeRange, filters, utilities.rv, getTimeRangeDates]);\n  \n  // Set up WebSocket for real-time updates\n  useEffect(() => {\n    // This would connect to a real-time data source\n    // For now, we''ll simulate with periodic updates\n    const interval = setInterval(() => {\n      // Simulate real-time updates\n      setRealTimeData(prev => ({\n        ...prev,\n        lastUpdate: new Date(),\n        activeRuns: Math.floor(Math.random() * 20)\n      }));\n    }, 5000);\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  // Handle agent selection\n  const handleSelectAgent = useCallback((agentId) => {\n    setSelectedAgentId(agentId);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedAgentId: agentId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle time range change\n  const handleTimeRangeChange = useCallback((range) => {\n    setTimeRange(range);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      timeRange: range\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view change\n  const handleViewChange = useCallback((view) => {\n    setActiveView(view);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      activeView: view\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Calculate aggregate metrics\n  const metrics = useMemo(() => {\n    const totalRuns = agentRuns.length;\n    const successfulRuns = agentRuns.filter(r => r.Success).length;\n    const failedRuns = agentRuns.filter(r => r.Success === false).length;\n    const runningRuns = agentRuns.filter(r => r.Status === ''Running'').length;\n    const avgExecutionTime = agentRuns.reduce((sum, r) => sum + (r.ExecutionTimeMS || 0), 0) / (totalRuns || 1);\n    const totalCost = agentRuns.reduce((sum, r) => sum + (r.TotalCost || 0), 0);\n    const totalTokens = agentRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return {\n      totalRuns,\n      successfulRuns,\n      failedRuns,\n      runningRuns,\n      successRate: totalRuns > 0 ? (successfulRuns / totalRuns) * 100 : 0,\n      avgExecutionTime,\n      totalCost,\n      totalTokens\n    };\n  }, [agentRuns]);\n  \n  if (loading && agentRuns.length === 0) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100vh'',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading AI Agent Analytics...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      height: ''100vh'',\n      backgroundColor: styles.colors.background,\n      display: ''flex'',\n      flexDirection: ''column'',\n      overflow: ''hidden''\n    }}>\n      {/* Header */}\n      <div style={{\n        padding: styles.spacing.lg,\n        backgroundColor: styles.colors.surface,\n        borderBottom: `1px solid $' + '{styles.colors.border}`,\n        flexShrink: 0\n      }}>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''center'',\n          marginBottom: styles.spacing.md\n        }}>\n          <h1 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n            fontWeight: styles.typography.fontWeight?.bold || ''700'',\n            color: styles.colors.text\n          }}>\n            AI Agent Analytics Dashboard\n          </h1>\n          \n          {/* Time Range Selector */}\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.sm,\n            alignItems: ''center''\n          }}>\n            <span style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              Time Range:\n            </span>\n            {[''1h'', ''24h'', ''7d'', ''30d''].map(range => (\n              <button\n                key={range}\n                onClick={() => handleTimeRangeChange(range)}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: timeRange === range ? styles.colors.primary : styles.colors.background,\n                  color: timeRange === range ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.sm,\n                  transition: ''all 0.2s''\n                }}\n              >\n                {range === ''1h'' ? ''Last Hour'' : range === ''24h'' ? ''Last 24 Hours'' : range === ''7d'' ? ''Last 7 Days'' : ''Last 30 Days''}\n              </button>\n            ))}\n          </div>\n        </div>\n        \n        {/* Quick Stats */}\n        <div style={{\n          display: ''grid'',\n          gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'',\n          gap: styles.spacing.md\n        }}>\n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Total Runs\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              {metrics.totalRuns.toLocaleString()}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.success || styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Success Rate\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: metrics.successRate >= 90 ? styles.colors.success : metrics.successRate >= 70 ? styles.colors.warning : styles.colors.error\n            }}>\n              {metrics.successRate.toFixed(1)}%\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.info || styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Avg Time\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              {(metrics.avgExecutionTime / 1000).toFixed(2)}s\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.warning || styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Total Cost\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              $' + '{metrics.totalCost.toFixed(2)}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Active Now\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.primary,\n              display: ''flex'',\n              alignItems: ''center'',\n              gap: styles.spacing.xs\n            }}>\n              {realTimeData.activeRuns || metrics.runningRuns}\n              <span style={{\n                display: ''inline-block'',\n                width: ''8px'',\n                height: ''8px'',\n                backgroundColor: styles.colors.success || styles.colors.primary,\n                borderRadius: ''50%'',\n                animation: ''pulse 2s infinite''\n              }} />\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        overflow: ''hidden''\n      }}>\n        {/* Left Panel - Hierarchy Tree */}\n        <div style={{\n          width: ''300px'',\n          borderRight: `1px solid $' + '{styles.colors.border}`,\n          overflow: ''auto'',\n          backgroundColor: styles.colors.surface\n        }}>\n          {AIAgentHierarchyTree && (\n            <AIAgentHierarchyTree\n              agents={agents}\n              agentRuns={agentRuns}\n              agentRelationships={agentRelationships}\n              selectedAgentId={selectedAgentId}\n              onSelectAgent={handleSelectAgent}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings?.hierarchyTree}\n              onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                ...savedUserSettings,\n                hierarchyTree: settings\n              })}\n            />\n          )}\n        </div>\n        \n        {/* Center Panel - Main Visualizations */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          overflow: ''hidden''\n        }}>\n          {/* Execution Overview */}\n          <div style={{\n            height: ''200px'',\n            borderBottom: `1px solid $' + '{styles.colors.border}`,\n            overflow: ''hidden''\n          }}>\n            {AIAgentExecutionOverview && (\n              <AIAgentExecutionOverview\n                agentRuns={agentRuns}\n                agentRunSteps={agentRunSteps}\n                realTimeData={realTimeData}\n                selectedAgentId={selectedAgentId}\n                timeRange={timeRange}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.executionOverview}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  executionOverview: settings\n                })}\n              />\n            )}\n          </div>\n          \n          {/* Step Analysis */}\n          <div style={{\n            flex: 1,\n            overflow: ''auto''\n          }}>\n            {AIAgentStepAnalysis && (\n              <AIAgentStepAnalysis\n                agentRunSteps={agentRunSteps}\n                agentRuns={agentRuns}\n                selectedAgentId={selectedAgentId}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.stepAnalysis}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  stepAnalysis: settings\n                })}\n              />\n            )}\n          </div>\n        </div>\n        \n        {/* Right Panel - Performance Metrics */}\n        <div style={{\n          width: ''350px'',\n          borderLeft: `1px solid $' + '{styles.colors.border}`,\n          overflow: ''auto'',\n          backgroundColor: styles.colors.surface\n        }}>\n          {AIAgentPerformanceMetrics && (\n            <AIAgentPerformanceMetrics\n              agentRuns={agentRuns}\n              agentRunSteps={agentRunSteps}\n              promptRuns={promptRuns}\n              selectedAgentId={selectedAgentId}\n              timeRange={timeRange}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings?.performanceMetrics}\n              onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                ...savedUserSettings,\n                performanceMetrics: settings\n              })}\n            />\n          )}\n        </div>\n      </div>\n      \n      {/* CSS for pulse animation */}\n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_bb352b62 = N'Display real-time agent execution status with live updates, show hierarchical agent relationships and sub-agent orchestration, provide step-by-step execution analysis with timing and success metrics, visualize performance metrics including execution time, token usage, and costs'
SET
  @TechnicalDesign_bb352b62 = N'Multi-panel dashboard with WebSocket real-time updates, coordinated views across child components, time range filtering, and interactive agent selection'
SET
  @HasCustomProps_bb352b62 = 0
SET
  @HasCustomEvents_bb352b62 = 0
SET
  @RequiresData_bb352b62 = 1
SET
  @DependencyCount_bb352b62 = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_bb352b62,
  @Namespace = @Namespace_bb352b62,
  @Name = @Name_bb352b62,
  @Version = @Version_bb352b62,
  @VersionSequence = @VersionSequence_bb352b62,
  @Title = @Title_bb352b62,
  @Description = @Description_bb352b62,
  @Type = @Type_bb352b62,
  @Status = @Status_bb352b62,
  @DeveloperName = @DeveloperName_bb352b62,
  @DeveloperEmail = @DeveloperEmail_bb352b62,
  @DeveloperOrganization = @DeveloperOrganization_bb352b62,
  @SourceRegistryID = @SourceRegistryID_bb352b62,
  @ReplicatedAt = @ReplicatedAt_bb352b62,
  @LastSyncedAt = @LastSyncedAt_bb352b62,
  @Specification = @Specification_bb352b62,
  @FunctionalRequirements = @FunctionalRequirements_bb352b62,
  @TechnicalDesign = @TechnicalDesign_bb352b62,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_bb352b62,
  @TechnicalDesignVector = @TechnicalDesignVector_bb352b62,
  @HasCustomProps = @HasCustomProps_bb352b62,
  @HasCustomEvents = @HasCustomEvents_bb352b62,
  @RequiresData = @RequiresData_bb352b62,
  @DependencyCount = @DependencyCount_bb352b62;

-- Save MJ: Components (core SP call only)
DECLARE @ID_05e59ae5 UNIQUEIDENTIFIER,
@Namespace_05e59ae5 NVARCHAR(MAX),
@Name_05e59ae5 NVARCHAR(500),
@Version_05e59ae5 NVARCHAR(50),
@VersionSequence_05e59ae5 INT,
@Title_05e59ae5 NVARCHAR(1000),
@Description_05e59ae5 NVARCHAR(MAX),
@Type_05e59ae5 NVARCHAR(255),
@Status_05e59ae5 NVARCHAR(50),
@DeveloperName_05e59ae5 NVARCHAR(255),
@DeveloperEmail_05e59ae5 NVARCHAR(255),
@DeveloperOrganization_05e59ae5 NVARCHAR(255),
@SourceRegistryID_05e59ae5 UNIQUEIDENTIFIER,
@ReplicatedAt_05e59ae5 DATETIMEOFFSET,
@LastSyncedAt_05e59ae5 DATETIMEOFFSET,
@Specification_05e59ae5 NVARCHAR(MAX),
@FunctionalRequirements_05e59ae5 NVARCHAR(MAX),
@TechnicalDesign_05e59ae5 NVARCHAR(MAX),
@FunctionalRequirementsVector_05e59ae5 NVARCHAR(MAX),
@TechnicalDesignVector_05e59ae5 NVARCHAR(MAX),
@HasCustomProps_05e59ae5 BIT,
@HasCustomEvents_05e59ae5 BIT,
@RequiresData_05e59ae5 BIT,
@DependencyCount_05e59ae5 INT
SET
  @ID_05e59ae5 = '8aeb2f97-986d-4a5b-b57e-9556f2ebf3b6'
SET
  @Namespace_05e59ae5 = N'AI/Agents'
SET
  @Name_05e59ae5 = N'AIAgentExecutionOverview'
SET
  @Version_05e59ae5 = N'1.0.0'
SET
  @VersionSequence_05e59ae5 = 1
SET
  @Title_05e59ae5 = N'AI Agent Execution Overview'
SET
  @Description_05e59ae5 = N'Real-time execution monitor with live status indicators, success rate gauges, and execution velocity metrics'
SET
  @Type_05e59ae5 = N'Chart'
SET
  @Status_05e59ae5 = N'Published'
SET
  @Specification_05e59ae5 = N'{
  "name": "AIAgentExecutionOverview",
  "title": "AI Agent Execution Overview",
  "description": "Real-time execution monitor with live status indicators, success rate gauges, and execution velocity metrics",
  "type": "chart",
  "functionalRequirements": "Display real-time agent execution status with animated indicators, success rate circular gauges, execution velocity sparklines, and throughput metrics",
  "dataRequirements": null,
  "technicalDesign": "Live monitoring panel with WebSocket updates, circular progress indicators, sparkline charts, and animated status badges",
  "properties": [
    {"name": "agentRuns", "type": "array", "required": true, "description": "Array of agent run objects"},
    {"name": "agentRunSteps", "type": "array", "required": true, "description": "Array of agent run step objects"},
    {"name": "realTimeData", "type": "object", "required": false, "description": "Real-time updates from WebSocket"},
    {"name": "selectedAgentId", "type": "string", "required": false, "description": "Currently selected agent ID for filtering"},
    {"name": "timeRange", "type": "string", "required": true, "description": "Selected time range for data"}
  ],
  "events": [],
  "exampleUsage": "<AIAgentExecutionOverview ... />",
  "code": "function AIAgentExecutionOverview({ \n  agentRuns,\n  agentRunSteps,\n  realTimeData,\n  selectedAgentId,\n  timeRange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Filter runs if agent selected\n  const filteredRuns = useMemo(() => {\n    if (!selectedAgentId) return agentRuns;\n    return agentRuns.filter(r => r.AgentID === selectedAgentId);\n  }, [agentRuns, selectedAgentId]);\n  \n  // Calculate metrics by status\n  const statusMetrics = useMemo(() => {\n    const running = filteredRuns.filter(r => r.Status === ''Running'').length;\n    const completed = filteredRuns.filter(r => r.Status === ''Completed'').length;\n    const failed = filteredRuns.filter(r => r.Status === ''Failed'').length;\n    const paused = filteredRuns.filter(r => r.Status === ''Paused'').length;\n    const cancelled = filteredRuns.filter(r => r.Status === ''Cancelled'').length;\n    \n    return { running, completed, failed, paused, cancelled };\n  }, [filteredRuns]);\n  \n  // Calculate success rates by agent\n  const agentSuccessRates = useMemo(() => {\n    const agentStats = {};\n    \n    filteredRuns.forEach(run => {\n      if (!agentStats[run.AgentID]) {\n        agentStats[run.AgentID] = { total: 0, successful: 0, name: run.Agent || ''Unknown'' };\n      }\n      agentStats[run.AgentID].total++;\n      if (run.Success) {\n        agentStats[run.AgentID].successful++;\n      }\n    });\n    \n    return Object.entries(agentStats).map(([agentId, stats]) => ({\n      agentId,\n      name: stats.name,\n      successRate: stats.total > 0 ? (stats.successful / stats.total) * 100 : 0,\n      total: stats.total\n    })).sort((a, b) => b.total - a.total).slice(0, 5);\n  }, [filteredRuns]);\n  \n  // Calculate velocity metrics (runs per hour)\n  const velocityData = useMemo(() => {\n    const now = new Date();\n    const hourlyBuckets = [];\n    \n    // Create 24 hour buckets\n    for (let i = 23; i >= 0; i--) {\n      const bucketStart = new Date(now);\n      bucketStart.setHours(now.getHours() - i);\n      bucketStart.setMinutes(0);\n      bucketStart.setSeconds(0);\n      \n      const bucketEnd = new Date(bucketStart);\n      bucketEnd.setHours(bucketStart.getHours() + 1);\n      \n      const runsInBucket = filteredRuns.filter(r => {\n        const runTime = new Date(r.StartedAt);\n        return runTime >= bucketStart && runTime < bucketEnd;\n      }).length;\n      \n      hourlyBuckets.push({\n        hour: bucketStart.getHours(),\n        count: runsInBucket\n      });\n    }\n    \n    return hourlyBuckets;\n  }, [filteredRuns]);\n  \n  // Render circular progress gauge\n  const renderGauge = (value, label, color) => {\n    const radius = 40;\n    const circumference = 2 * Math.PI * radius;\n    const strokeDashoffset = circumference - (value / 100) * circumference;\n    \n    return (\n      <div style={{\n        display: ''flex'',\n        flexDirection: ''column'',\n        alignItems: ''center'',\n        gap: styles.spacing.sm\n      }}>\n        <svg width=\"100\" height=\"100\" style={{ transform: ''rotate(-90deg)'' }}>\n          <circle\n            cx=\"50\"\n            cy=\"50\"\n            r={radius}\n            stroke={styles.colors.borderLight || styles.colors.border}\n            strokeWidth=\"8\"\n            fill=\"none\"\n          />\n          <circle\n            cx=\"50\"\n            cy=\"50\"\n            r={radius}\n            stroke={color}\n            strokeWidth=\"8\"\n            fill=\"none\"\n            strokeDasharray={circumference}\n            strokeDashoffset={strokeDashoffset}\n            style={{\n              transition: ''stroke-dashoffset 0.5s ease-in-out'',\n              strokeLinecap: ''round''\n            }}\n          />\n        </svg>\n        <div style={{\n          position: ''absolute'',\n          width: ''100px'',\n          height: ''100px'',\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            fontWeight: styles.typography.fontWeight?.bold || ''700'',\n            color: styles.colors.text\n          }}>\n            {value.toFixed(0)}%\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary\n          }}>\n            {label}\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  // Render sparkline\n  const renderSparkline = (data) => {\n    const max = Math.max(...data.map(d => d.count));\n    const width = 200;\n    const height = 40;\n    const barWidth = width / data.length;\n    \n    return (\n      <svg width={width} height={height}>\n        {data.map((d, i) => {\n          const barHeight = max > 0 ? (d.count / max) * height : 0;\n          return (\n            <rect\n              key={i}\n              x={i * barWidth}\n              y={height - barHeight}\n              width={barWidth - 1}\n              height={barHeight}\n              fill={styles.colors.primary}\n              opacity={0.3 + (i / data.length) * 0.7}\n            />\n          );\n        })}\n      </svg>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      padding: styles.spacing.lg,\n      backgroundColor: styles.colors.background,\n      display: ''flex'',\n      gap: styles.spacing.xl\n    }}>\n      {/* Live Status Monitor */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column'',\n        gap: styles.spacing.md\n      }}>\n        <h3 style={{\n          margin: 0,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n          color: styles.colors.text\n        }}>\n          Live Status\n        </h3>\n        \n        <div style={{\n          display: ''grid'',\n          gridTemplateColumns: ''repeat(auto-fit, minmax(100px, 1fr))'',\n          gap: styles.spacing.sm\n        }}>\n          <div style={{\n            padding: styles.spacing.sm,\n            backgroundColor: styles.colors.surface,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.success || styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Running\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.success || styles.colors.primary,\n              display: ''flex'',\n              alignItems: ''center'',\n              gap: styles.spacing.xs\n            }}>\n              {realTimeData?.activeRuns || statusMetrics.running}\n              {statusMetrics.running > 0 && (\n                <span style={{\n                  display: ''inline-block'',\n                  width: ''6px'',\n                  height: ''6px'',\n                  backgroundColor: styles.colors.success || styles.colors.primary,\n                  borderRadius: ''50%'',\n                  animation: ''pulse 1.5s infinite''\n                }} />\n              )}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.sm,\n            backgroundColor: styles.colors.surface,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Completed\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              {statusMetrics.completed}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.sm,\n            backgroundColor: styles.colors.surface,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.error || styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Failed\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.error || styles.colors.secondary\n            }}>\n              {statusMetrics.failed}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.sm,\n            backgroundColor: styles.colors.surface,\n            borderRadius: getBorderRadius(''sm''),\n            borderLeft: `3px solid $' + '{styles.colors.warning || styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Paused\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.warning || styles.colors.secondary\n            }}>\n              {statusMetrics.paused}\n            </div>\n          </div>\n        </div>\n        \n        {/* Velocity Sparkline */}\n        <div style={{\n          marginTop: ''auto''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.xs\n          }}>\n            Execution Velocity (24h)\n          </div>\n          {renderSparkline(velocityData)}\n        </div>\n      </div>\n      \n      {/* Success Rate Gauges */}\n      <div style={{\n        display: ''flex'',\n        gap: styles.spacing.lg,\n        alignItems: ''center''\n      }}>\n        {agentSuccessRates.slice(0, 3).map((agent, index) => (\n          <div key={agent.agentId} style={{ position: ''relative'' }}>\n            {renderGauge(\n              agent.successRate,\n              agent.name.length > 10 ? agent.name.substring(0, 10) + ''...'' : agent.name,\n              agent.successRate >= 90 ? styles.colors.success : \n              agent.successRate >= 70 ? styles.colors.warning : \n              styles.colors.error\n            )}\n          </div>\n        ))}\n      </div>\n      \n      {/* Current Step Indicators */}\n      <div style={{\n        minWidth: ''200px'',\n        display: ''flex'',\n        flexDirection: ''column'',\n        gap: styles.spacing.md\n      }}>\n        <h3 style={{\n          margin: 0,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n          color: styles.colors.text\n        }}>\n          Active Steps\n        </h3>\n        \n        <div style={{\n          flex: 1,\n          overflow: ''auto''\n        }}>\n          {agentRunSteps\n            .filter(step => step.Status === ''Running'')\n            .slice(0, 5)\n            .map((step, index) => (\n              <div\n                key={step.ID}\n                style={{\n                  padding: styles.spacing.sm,\n                  marginBottom: styles.spacing.xs,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm''),\n                  borderLeft: `2px solid $' + '{styles.colors.primary}`,\n                  fontSize: styles.typography.fontSize.sm\n                }}\n              >\n                <div style={{\n                  fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {step.StepName}\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  display: ''flex'',\n                  justifyContent: ''space-between''\n                }}>\n                  <span>{step.StepType}</span>\n                  <span>Step #{step.StepNumber}</span>\n                </div>\n              </div>\n            ))}\n          {agentRunSteps.filter(step => step.Status === ''Running'').length === 0 && (\n            <div style={{\n              padding: styles.spacing.md,\n              textAlign: ''center'',\n              color: styles.colors.textSecondary,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              No active steps\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_05e59ae5 = N'Display real-time agent execution status with animated indicators, success rate circular gauges, execution velocity sparklines, and throughput metrics'
SET
  @TechnicalDesign_05e59ae5 = N'Live monitoring panel with WebSocket updates, circular progress indicators, sparkline charts, and animated status badges'
SET
  @HasCustomProps_05e59ae5 = 1
SET
  @HasCustomEvents_05e59ae5 = 0
SET
  @RequiresData_05e59ae5 = 0
SET
  @DependencyCount_05e59ae5 = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_05e59ae5,
  @Namespace = @Namespace_05e59ae5,
  @Name = @Name_05e59ae5,
  @Version = @Version_05e59ae5,
  @VersionSequence = @VersionSequence_05e59ae5,
  @Title = @Title_05e59ae5,
  @Description = @Description_05e59ae5,
  @Type = @Type_05e59ae5,
  @Status = @Status_05e59ae5,
  @DeveloperName = @DeveloperName_05e59ae5,
  @DeveloperEmail = @DeveloperEmail_05e59ae5,
  @DeveloperOrganization = @DeveloperOrganization_05e59ae5,
  @SourceRegistryID = @SourceRegistryID_05e59ae5,
  @ReplicatedAt = @ReplicatedAt_05e59ae5,
  @LastSyncedAt = @LastSyncedAt_05e59ae5,
  @Specification = @Specification_05e59ae5,
  @FunctionalRequirements = @FunctionalRequirements_05e59ae5,
  @TechnicalDesign = @TechnicalDesign_05e59ae5,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_05e59ae5,
  @TechnicalDesignVector = @TechnicalDesignVector_05e59ae5,
  @HasCustomProps = @HasCustomProps_05e59ae5,
  @HasCustomEvents = @HasCustomEvents_05e59ae5,
  @RequiresData = @RequiresData_05e59ae5,
  @DependencyCount = @DependencyCount_05e59ae5;

-- Save MJ: Components (core SP call only)
DECLARE @ID_faad71fe UNIQUEIDENTIFIER,
@Namespace_faad71fe NVARCHAR(MAX),
@Name_faad71fe NVARCHAR(500),
@Version_faad71fe NVARCHAR(50),
@VersionSequence_faad71fe INT,
@Title_faad71fe NVARCHAR(1000),
@Description_faad71fe NVARCHAR(MAX),
@Type_faad71fe NVARCHAR(255),
@Status_faad71fe NVARCHAR(50),
@DeveloperName_faad71fe NVARCHAR(255),
@DeveloperEmail_faad71fe NVARCHAR(255),
@DeveloperOrganization_faad71fe NVARCHAR(255),
@SourceRegistryID_faad71fe UNIQUEIDENTIFIER,
@ReplicatedAt_faad71fe DATETIMEOFFSET,
@LastSyncedAt_faad71fe DATETIMEOFFSET,
@Specification_faad71fe NVARCHAR(MAX),
@FunctionalRequirements_faad71fe NVARCHAR(MAX),
@TechnicalDesign_faad71fe NVARCHAR(MAX),
@FunctionalRequirementsVector_faad71fe NVARCHAR(MAX),
@TechnicalDesignVector_faad71fe NVARCHAR(MAX),
@HasCustomProps_faad71fe BIT,
@HasCustomEvents_faad71fe BIT,
@RequiresData_faad71fe BIT,
@DependencyCount_faad71fe INT
SET
  @ID_faad71fe = 'f559fa95-4c9f-4102-b7b9-9e00592dc307'
SET
  @Namespace_faad71fe = N'AI/Agents'
SET
  @Name_faad71fe = N'AIAgentHierarchyTree'
SET
  @Version_faad71fe = N'1.0.0'
SET
  @VersionSequence_faad71fe = 1
SET
  @Title_faad71fe = N'AI Agent Hierarchy Tree'
SET
  @Description_faad71fe = N'Interactive tree visualization showing agent parent-child relationships, sub-agent orchestration patterns, and execution flow with real-time status indicators'
SET
  @Type_faad71fe = N'Chart'
SET
  @Status_faad71fe = N'Published'
SET
  @Specification_faad71fe = N'{
  "name": "AIAgentHierarchyTree",
  "title": "AI Agent Hierarchy Tree",
  "description": "Interactive tree visualization showing agent parent-child relationships, sub-agent orchestration patterns, and execution flow with real-time status indicators",
  "type": "chart",
  "functionalRequirements": "Display hierarchical agent relationships as an interactive tree with expandable nodes, execution counts, success rates per node, and real-time status indicators for active runs",
  "dataRequirements": null,
  "technicalDesign": "SVG-based tree visualization with D3-style layouts, interactive node expansion, color-coded status indicators, and drill-down navigation to agent details",
  "properties": [
    {"name": "agents", "type": "array", "required": true, "description": "Array of agent objects with ParentID relationships"},
    {"name": "agentRuns", "type": "array", "required": true, "description": "Array of agent run objects for status and metrics"},
    {"name": "agentRelationships", "type": "array", "required": false, "description": "Array of explicit agent relationships"},
    {"name": "selectedAgentId", "type": "string", "required": false, "description": "Currently selected agent for highlighting"},
    {"name": "onSelectAgent", "type": "function", "required": true, "description": "Callback when agent node is selected"}
  ],
  "events": [],
  "exampleUsage": "<AIAgentHierarchyTree ... />",
  "code": "function AIAgentHierarchyTree({ \n  agents,\n  agentRuns,\n  agentRelationships,\n  selectedAgentId,\n  onSelectAgent,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  const [expandedNodes, setExpandedNodes] = useState(savedUserSettings?.expandedNodes || new Set());\n  const [hoveredNode, setHoveredNode] = useState(null);\n  \n  // Helper function to get border radius\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Build tree structure from agents\n  const buildTree = useMemo(() => {\n    const agentMap = new Map();\n    const rootNodes = [];\n    \n    // Create map of agents\n    agents.forEach(agent => {\n      agentMap.set(agent.ID, {\n        ...agent,\n        children: [],\n        metrics: {\n          totalRuns: 0,\n          successfulRuns: 0,\n          activeRuns: 0,\n          avgExecutionTime: 0\n        }\n      });\n    });\n    \n    // Calculate metrics for each agent\n    agentRuns.forEach(run => {\n      const agent = agentMap.get(run.AgentID);\n      if (agent) {\n        agent.metrics.totalRuns++;\n        if (run.Success) agent.metrics.successfulRuns++;\n        if (run.Status === ''Running'') agent.metrics.activeRuns++;\n        agent.metrics.avgExecutionTime += (run.ExecutionTimeMS || 0);\n      }\n    });\n    \n    // Finalize average execution times\n    agentMap.forEach(agent => {\n      if (agent.metrics.totalRuns > 0) {\n        agent.metrics.avgExecutionTime = agent.metrics.avgExecutionTime / agent.metrics.totalRuns;\n      }\n    });\n    \n    // Build parent-child relationships\n    agents.forEach(agent => {\n      const node = agentMap.get(agent.ID);\n      if (agent.ParentID) {\n        const parent = agentMap.get(agent.ParentID);\n        if (parent) {\n          parent.children.push(node);\n        } else {\n          rootNodes.push(node);\n        }\n      } else {\n        rootNodes.push(node);\n      }\n    });\n    \n    // Add relationships from explicit table\n    if (agentRelationships) {\n      agentRelationships.forEach(rel => {\n        const parent = agentMap.get(rel.AgentID);\n        const child = agentMap.get(rel.SubAgentID);\n        if (parent && child && !parent.children.includes(child)) {\n          parent.children.push(child);\n        }\n      });\n    }\n    \n    // Sort children by execution order or name\n    agentMap.forEach(agent => {\n      agent.children.sort((a, b) => {\n        const relA = agentRelationships?.find(r => r.AgentID === agent.ID && r.SubAgentID === a.ID);\n        const relB = agentRelationships?.find(r => r.AgentID === agent.ID && r.SubAgentID === b.ID);\n        if (relA?.ExecutionOrder && relB?.ExecutionOrder) {\n          return relA.ExecutionOrder - relB.ExecutionOrder;\n        }\n        return (a.Name || '''').localeCompare(b.Name || '''');\n      });\n    });\n    \n    return rootNodes;\n  }, [agents, agentRuns, agentRelationships]);\n  \n  // Toggle node expansion\n  const toggleExpanded = useCallback((nodeId) => {\n    const newExpanded = new Set(expandedNodes);\n    if (newExpanded.has(nodeId)) {\n      newExpanded.delete(nodeId);\n    } else {\n      newExpanded.add(nodeId);\n    }\n    setExpandedNodes(newExpanded);\n    onSaveUserSettings?.({ ...savedUserSettings, expandedNodes: Array.from(newExpanded) });\n  }, [expandedNodes, savedUserSettings, onSaveUserSettings]);\n  \n  // Get node color based on metrics\n  const getNodeColor = (node) => {\n    if (node.metrics.activeRuns > 0) return styles.colors.success || styles.colors.primary;\n    if (node.metrics.totalRuns === 0) return styles.colors.textSecondary;\n    const successRate = node.metrics.successfulRuns / node.metrics.totalRuns;\n    if (successRate >= 0.9) return styles.colors.success || styles.colors.primary;\n    if (successRate >= 0.7) return styles.colors.warning || styles.colors.secondary;\n    return styles.colors.error || styles.colors.secondary;\n  };\n  \n  // Render tree node\n  const renderNode = (node, level = 0) => {\n    const isExpanded = expandedNodes.has(node.ID);\n    const isSelected = node.ID === selectedAgentId;\n    const isHovered = node.ID === hoveredNode;\n    const hasChildren = node.children && node.children.length > 0;\n    const nodeColor = getNodeColor(node);\n    const successRate = node.metrics.totalRuns > 0 \n      ? (node.metrics.successfulRuns / node.metrics.totalRuns * 100).toFixed(0)\n      : 0;\n    \n    return (\n      <div key={node.ID} style={{ marginLeft: level > 0 ? ''24px'' : 0 }}>\n        <div\n          onClick={() => onSelectAgent(node.ID)}\n          onMouseEnter={() => setHoveredNode(node.ID)}\n          onMouseLeave={() => setHoveredNode(null)}\n          style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n            marginBottom: styles.spacing.xs,\n            backgroundColor: isSelected ? styles.colors.primary + ''20'' : \n                           isHovered ? styles.colors.surface : ''transparent'',\n            borderRadius: getBorderRadius(''sm''),\n            cursor: ''pointer'',\n            transition: ''all 0.2s'',\n            border: isSelected ? `2px solid $' + '{styles.colors.primary}` : ''2px solid transparent''\n          }}\n        >\n          {/* Expand/Collapse Icon */}\n          {hasChildren && (\n            <div\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleExpanded(node.ID);\n              }}\n              style={{\n                marginRight: styles.spacing.sm,\n                cursor: ''pointer'',\n                width: ''16px'',\n                height: ''16px'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center''\n              }}\n            >\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\">\n                <path\n                  d={isExpanded ? ''M2 4l4 4 4-4'' : ''M4 2l4 4-4 4''}\n                  stroke={styles.colors.text}\n                  strokeWidth=\"2\"\n                  fill=\"none\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                />\n              </svg>\n            </div>\n          )}\n          \n          {/* Connection Line */}\n          {level > 0 && (\n            <div style={{\n              position: ''absolute'',\n              left: level * 24 - 12,\n              top: ''50%'',\n              width: ''12px'',\n              height: ''1px'',\n              backgroundColor: styles.colors.border\n            }} />\n          )}\n          \n          {/* Status Indicator */}\n          <div style={{\n            width: ''8px'',\n            height: ''8px'',\n            borderRadius: ''50%'',\n            backgroundColor: nodeColor,\n            marginRight: styles.spacing.sm,\n            flexShrink: 0,\n            animation: node.metrics.activeRuns > 0 ? ''pulse 2s infinite'' : ''none''\n          }} />\n          \n          {/* Agent Name */}\n          <div style={{ flex: 1, minWidth: 0 }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: isSelected ? styles.typography.fontWeight?.semibold : styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.text,\n              overflow: ''hidden'',\n              textOverflow: ''ellipsis'',\n              whiteSpace: ''nowrap''\n            }}>\n              {node.Name}\n            </div>\n            {node.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap'',\n                marginTop: ''2px''\n              }}>\n                {node.Description}\n              </div>\n            )}\n          </div>\n          \n          {/* Metrics Badge */}\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.xs,\n            alignItems: ''center'',\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n          }}>\n            {node.metrics.activeRuns > 0 && (\n              <div style={{\n                padding: `2px $' + '{styles.spacing.sm}`,\n                backgroundColor: styles.colors.success || styles.colors.primary,\n                color: ''white'',\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                fontWeight: styles.typography.fontWeight?.semibold || ''600''\n              }}>\n                {node.metrics.activeRuns} active\n              </div>\n            )}\n            \n            {node.metrics.totalRuns > 0 && (\n              <>\n                <div style={{\n                  padding: `2px $' + '{styles.spacing.sm}`,\n                  backgroundColor: styles.colors.surface,\n                  color: styles.colors.text,\n                  borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                  border: `1px solid $' + '{styles.colors.border}`\n                }}>\n                  {node.metrics.totalRuns} runs\n                </div>\n                \n                <div style={{\n                  padding: `2px $' + '{styles.spacing.sm}`,\n                  backgroundColor: successRate >= 90 ? styles.colors.success + ''20'' :\n                                 successRate >= 70 ? styles.colors.warning + ''20'' :\n                                 styles.colors.error + ''20'',\n                  color: successRate >= 90 ? styles.colors.success :\n                        successRate >= 70 ? styles.colors.warning :\n                        styles.colors.error,\n                  borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                  fontWeight: styles.typography.fontWeight?.medium || ''500''\n                }}>\n                  {successRate}%\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        \n        {/* Render Children */}\n        {hasChildren && isExpanded && (\n          <div style={{\n            borderLeft: `1px solid $' + '{styles.colors.border}`,\n            marginLeft: ''8px'',\n            paddingLeft: ''0''\n          }}>\n            {node.children.map(child => renderNode(child, level + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      padding: styles.spacing.lg,\n      backgroundColor: styles.colors.background,\n      overflow: ''auto''\n    }}>\n      <h3 style={{\n        margin: 0,\n        marginBottom: styles.spacing.md,\n        fontSize: styles.typography.fontSize.lg,\n        fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n        color: styles.colors.text\n      }}>\n        Agent Hierarchy\n      </h3>\n      \n      {/* Legend */}\n      <div style={{\n        display: ''flex'',\n        gap: styles.spacing.md,\n        marginBottom: styles.spacing.lg,\n        padding: styles.spacing.sm,\n        backgroundColor: styles.colors.surface,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        color: styles.colors.textSecondary\n      }}>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''8px'',\n            height: ''8px'',\n            borderRadius: ''50%'',\n            backgroundColor: styles.colors.success || styles.colors.primary\n          }} />\n          <span>Active/High Success</span>\n        </div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''8px'',\n            height: ''8px'',\n            borderRadius: ''50%'',\n            backgroundColor: styles.colors.warning || styles.colors.secondary\n          }} />\n          <span>Medium Success</span>\n        </div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''8px'',\n            height: ''8px'',\n            borderRadius: ''50%'',\n            backgroundColor: styles.colors.error || styles.colors.secondary\n          }} />\n          <span>Low Success</span>\n        </div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''8px'',\n            height: ''8px'',\n            borderRadius: ''50%'',\n            backgroundColor: styles.colors.textSecondary\n          }} />\n          <span>No Runs</span>\n        </div>\n      </div>\n      \n      {/* Tree */}\n      <div>\n        {buildTree.map(node => renderNode(node))}\n      </div>\n      \n      {buildTree.length === 0 && (\n        <div style={{\n          padding: styles.spacing.xl,\n          textAlign: ''center'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No agents found\n        </div>\n      )}\n      \n      {/* CSS for pulse animation */}\n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_faad71fe = N'Display hierarchical agent relationships as an interactive tree with expandable nodes, execution counts, success rates per node, and real-time status indicators for active runs'
SET
  @TechnicalDesign_faad71fe = N'SVG-based tree visualization with D3-style layouts, interactive node expansion, color-coded status indicators, and drill-down navigation to agent details'
SET
  @HasCustomProps_faad71fe = 1
SET
  @HasCustomEvents_faad71fe = 0
SET
  @RequiresData_faad71fe = 0
SET
  @DependencyCount_faad71fe = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_faad71fe,
  @Namespace = @Namespace_faad71fe,
  @Name = @Name_faad71fe,
  @Version = @Version_faad71fe,
  @VersionSequence = @VersionSequence_faad71fe,
  @Title = @Title_faad71fe,
  @Description = @Description_faad71fe,
  @Type = @Type_faad71fe,
  @Status = @Status_faad71fe,
  @DeveloperName = @DeveloperName_faad71fe,
  @DeveloperEmail = @DeveloperEmail_faad71fe,
  @DeveloperOrganization = @DeveloperOrganization_faad71fe,
  @SourceRegistryID = @SourceRegistryID_faad71fe,
  @ReplicatedAt = @ReplicatedAt_faad71fe,
  @LastSyncedAt = @LastSyncedAt_faad71fe,
  @Specification = @Specification_faad71fe,
  @FunctionalRequirements = @FunctionalRequirements_faad71fe,
  @TechnicalDesign = @TechnicalDesign_faad71fe,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_faad71fe,
  @TechnicalDesignVector = @TechnicalDesignVector_faad71fe,
  @HasCustomProps = @HasCustomProps_faad71fe,
  @HasCustomEvents = @HasCustomEvents_faad71fe,
  @RequiresData = @RequiresData_faad71fe,
  @DependencyCount = @DependencyCount_faad71fe;

-- Save MJ: Components (core SP call only)
DECLARE @ID_45e1188a UNIQUEIDENTIFIER,
@Namespace_45e1188a NVARCHAR(MAX),
@Name_45e1188a NVARCHAR(500),
@Version_45e1188a NVARCHAR(50),
@VersionSequence_45e1188a INT,
@Title_45e1188a NVARCHAR(1000),
@Description_45e1188a NVARCHAR(MAX),
@Type_45e1188a NVARCHAR(255),
@Status_45e1188a NVARCHAR(50),
@DeveloperName_45e1188a NVARCHAR(255),
@DeveloperEmail_45e1188a NVARCHAR(255),
@DeveloperOrganization_45e1188a NVARCHAR(255),
@SourceRegistryID_45e1188a UNIQUEIDENTIFIER,
@ReplicatedAt_45e1188a DATETIMEOFFSET,
@LastSyncedAt_45e1188a DATETIMEOFFSET,
@Specification_45e1188a NVARCHAR(MAX),
@FunctionalRequirements_45e1188a NVARCHAR(MAX),
@TechnicalDesign_45e1188a NVARCHAR(MAX),
@FunctionalRequirementsVector_45e1188a NVARCHAR(MAX),
@TechnicalDesignVector_45e1188a NVARCHAR(MAX),
@HasCustomProps_45e1188a BIT,
@HasCustomEvents_45e1188a BIT,
@RequiresData_45e1188a BIT,
@DependencyCount_45e1188a INT
SET
  @ID_45e1188a = '8f723813-b98c-458a-935c-6fce3440be57'
SET
  @Namespace_45e1188a = N'AI/Agents'
SET
  @Name_45e1188a = N'AIAgentStepAnalysis'
SET
  @Version_45e1188a = N'1.0.0'
SET
  @VersionSequence_45e1188a = 1
SET
  @Title_45e1188a = N'AI Agent Step Analysis'
SET
  @Description_45e1188a = N'Detailed step-by-step execution analysis with waterfall charts, step type distribution, execution timelines, and error pattern detection'
SET
  @Type_45e1188a = N'Chart'
SET
  @Status_45e1188a = N'Published'
SET
  @Specification_45e1188a = N'{
  "name": "AIAgentStepAnalysis",
  "title": "AI Agent Step Analysis",
  "description": "Detailed step-by-step execution analysis with waterfall charts, step type distribution, execution timelines, and error pattern detection",
  "type": "chart",
  "functionalRequirements": "Display execution waterfall showing step sequence and timing, visualize step type distribution with donut chart, show execution timeline with concurrent steps, identify error patterns and bottlenecks",
  "dataRequirements": null,
  "technicalDesign": "Multi-panel visualization with waterfall chart for execution flow, donut chart for step type distribution, timeline view for concurrent execution patterns, and error analysis section",
  "properties": [
    {"name": "agentRunSteps", "type": "array", "required": true, "description": "Array of agent run step objects"},
    {"name": "agentRuns", "type": "array", "required": true, "description": "Array of agent run objects for context"},
    {"name": "selectedAgentId", "type": "string", "required": false, "description": "Filter steps by agent ID"}
  ],
  "events": [],
  "exampleUsage": "<AIAgentStepAnalysis ... />",
  "code": "function AIAgentStepAnalysis({ \n  agentRunSteps,\n  agentRuns,\n  selectedAgentId,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  const [selectedRunId, setSelectedRunId] = useState(savedUserSettings?.selectedRunId);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''waterfall'');\n  \n  // Helper function to get border radius\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Filter steps based on selection\n  const filteredSteps = useMemo(() => {\n    let steps = agentRunSteps;\n    \n    if (selectedRunId) {\n      steps = steps.filter(s => s.AgentRunID === selectedRunId);\n    } else if (selectedAgentId) {\n      const agentRunIds = agentRuns\n        .filter(r => r.AgentID === selectedAgentId)\n        .map(r => r.ID);\n      steps = steps.filter(s => agentRunIds.includes(s.AgentRunID));\n    }\n    \n    return steps.sort((a, b) => {\n      if (a.AgentRunID === b.AgentRunID) {\n        return a.StepNumber - b.StepNumber;\n      }\n      return new Date(a.StartedAt) - new Date(b.StartedAt);\n    });\n  }, [agentRunSteps, agentRuns, selectedRunId, selectedAgentId]);\n  \n  // Calculate step type distribution\n  const stepTypeDistribution = useMemo(() => {\n    const distribution = {};\n    filteredSteps.forEach(step => {\n      const type = step.StepType || ''Unknown'';\n      if (!distribution[type]) {\n        distribution[type] = { count: 0, totalTime: 0, errors: 0 };\n      }\n      distribution[type].count++;\n      distribution[type].totalTime += step.ExecutionTimeMS || 0;\n      if (!step.Success) distribution[type].errors++;\n    });\n    \n    const total = filteredSteps.length;\n    return Object.entries(distribution).map(([type, data]) => ({\n      type,\n      count: data.count,\n      percentage: total > 0 ? (data.count / total) * 100 : 0,\n      avgTime: data.count > 0 ? data.totalTime / data.count : 0,\n      errorRate: data.count > 0 ? (data.errors / data.count) * 100 : 0\n    }));\n  }, [filteredSteps]);\n  \n  // Get color for step type\n  const getStepTypeColor = (type) => {\n    const colors = [\n      styles.colors.primary,\n      styles.colors.secondary,\n      styles.colors.success,\n      styles.colors.warning,\n      styles.colors.error,\n      styles.colors.info || styles.colors.primary\n    ];\n    const typeIndex = [''Prompt'', ''Actions'', ''Sub-Agent'', ''Decision'', ''Chat'', ''Validation''].indexOf(type);\n    return typeIndex >= 0 ? colors[typeIndex] : styles.colors.textSecondary;\n  };\n  \n  // Group steps by run for waterfall view\n  const runGroups = useMemo(() => {\n    const groups = {};\n    filteredSteps.forEach(step => {\n      if (!groups[step.AgentRunID]) {\n        const run = agentRuns.find(r => r.ID === step.AgentRunID);\n        groups[step.AgentRunID] = {\n          runId: step.AgentRunID,\n          agent: run?.Agent || ''Unknown'',\n          steps: [],\n          totalTime: 0,\n          startTime: null,\n          endTime: null\n        };\n      }\n      groups[step.AgentRunID].steps.push(step);\n    });\n    \n    // Calculate timings for each group\n    Object.values(groups).forEach(group => {\n      group.steps.sort((a, b) => a.StepNumber - b.StepNumber);\n      if (group.steps.length > 0) {\n        group.startTime = new Date(group.steps[0].StartedAt);\n        const lastStep = group.steps[group.steps.length - 1];\n        group.endTime = lastStep.CompletedAt ? new Date(lastStep.CompletedAt) : new Date();\n        group.totalTime = group.endTime - group.startTime;\n      }\n    });\n    \n    return Object.values(groups).slice(0, 10); // Limit to 10 most recent runs\n  }, [filteredSteps, agentRuns]);\n  \n  // Render donut chart for step type distribution\n  const renderDonutChart = () => {\n    const size = 200;\n    const radius = size / 2;\n    const innerRadius = radius * 0.6;\n    let cumulativeAngle = 0;\n    \n    return (\n      <svg width={size} height={size}>\n        {stepTypeDistribution.map((item, index) => {\n          const angle = (item.percentage / 100) * 360;\n          const startAngle = cumulativeAngle;\n          const endAngle = cumulativeAngle + angle;\n          cumulativeAngle += angle;\n          \n          const startAngleRad = (startAngle * Math.PI) / 180;\n          const endAngleRad = (endAngle * Math.PI) / 180;\n          \n          const x1 = radius + radius * Math.cos(startAngleRad);\n          const y1 = radius + radius * Math.sin(startAngleRad);\n          const x2 = radius + radius * Math.cos(endAngleRad);\n          const y2 = radius + radius * Math.sin(endAngleRad);\n          \n          const x1Inner = radius + innerRadius * Math.cos(startAngleRad);\n          const y1Inner = radius + innerRadius * Math.sin(startAngleRad);\n          const x2Inner = radius + innerRadius * Math.cos(endAngleRad);\n          const y2Inner = radius + innerRadius * Math.sin(endAngleRad);\n          \n          const largeArcFlag = angle > 180 ? 1 : 0;\n          \n          const path = `\n            M $' + '{x1Inner} $' + '{y1Inner}\n            L $' + '{x1} $' + '{y1}\n            A $' + '{radius} $' + '{radius} 0 $' + '{largeArcFlag} 1 $' + '{x2} $' + '{y2}\n            L $' + '{x2Inner} $' + '{y2Inner}\n            A $' + '{innerRadius} $' + '{innerRadius} 0 $' + '{largeArcFlag} 0 $' + '{x1Inner} $' + '{y1Inner}\n            Z\n          `;\n          \n          return (\n            <g key={item.type}>\n              <path\n                d={path}\n                fill={getStepTypeColor(item.type)}\n                opacity={0.8}\n                style={{ transition: ''opacity 0.2s'' }}\n                onMouseEnter={(e) => e.target.style.opacity = 1}\n                onMouseLeave={(e) => e.target.style.opacity = 0.8}\n              />\n            </g>\n          );\n        })}\n        \n        {/* Center text */}\n        <text\n          x={radius}\n          y={radius - 10}\n          textAnchor=\"middle\"\n          fontSize={styles.typography.fontSize.xl}\n          fontWeight={styles.typography.fontWeight?.bold || ''700''}\n          fill={styles.colors.text}\n        >\n          {filteredSteps.length}\n        </text>\n        <text\n          x={radius}\n          y={radius + 10}\n          textAnchor=\"middle\"\n          fontSize={styles.typography.fontSize.sm}\n          fill={styles.colors.textSecondary}\n        >\n          Total Steps\n        </text>\n      </svg>\n    );\n  };\n  \n  // Render waterfall chart\n  const renderWaterfall = () => {\n    return (\n      <div style={{\n        flex: 1,\n        overflow: ''auto'',\n        padding: styles.spacing.md\n      }}>\n        {runGroups.map((group, groupIndex) => (\n          <div\n            key={group.runId}\n            style={{\n              marginBottom: styles.spacing.lg,\n              backgroundColor: styles.colors.surface,\n              borderRadius: getBorderRadius(''sm''),\n              padding: styles.spacing.md,\n              border: selectedRunId === group.runId ? `2px solid $' + '{styles.colors.primary}` : `1px solid $' + '{styles.colors.border}`\n            }}\n            onClick={() => {\n              setSelectedRunId(group.runId);\n              onSaveUserSettings?.({ ...savedUserSettings, selectedRunId: group.runId });\n            }}\n          >\n            {/* Run Header */}\n            <div style={{\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''center'',\n              marginBottom: styles.spacing.sm\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.text\n              }}>\n                {group.agent}\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary\n              }}>\n                {(group.totalTime / 1000).toFixed(2)}s total\n              </div>\n            </div>\n            \n            {/* Steps Timeline */}\n            <div style={{\n              position: ''relative'',\n              height: ''40px'',\n              backgroundColor: styles.colors.background,\n              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n              overflow: ''hidden''\n            }}>\n              {group.steps.map((step, stepIndex) => {\n                const stepStart = new Date(step.StartedAt);\n                const stepEnd = step.CompletedAt ? new Date(step.CompletedAt) : new Date();\n                const startOffset = ((stepStart - group.startTime) / group.totalTime) * 100;\n                const duration = ((stepEnd - stepStart) / group.totalTime) * 100;\n                \n                return (\n                  <div\n                    key={step.ID}\n                    style={{\n                      position: ''absolute'',\n                      left: `$' + '{startOffset}%`,\n                      width: `$' + '{Math.max(duration, 1)}%`,\n                      height: ''100%'',\n                      backgroundColor: step.Success ? getStepTypeColor(step.StepType) : styles.colors.error,\n                      opacity: 0.7,\n                      display: ''flex'',\n                      alignItems: ''center'',\n                      justifyContent: ''center'',\n                      borderLeft: stepIndex > 0 ? `1px solid $' + '{styles.colors.background}` : ''none''\n                    }}\n                    title={`$' + '{step.StepName} ($' + '{step.StepType}) - $' + '{(step.ExecutionTimeMS / 1000).toFixed(2)}s`}\n                  >\n                    {duration > 10 && (\n                      <span style={{\n                        fontSize: ''10px'',\n                        color: ''white'',\n                        fontWeight: styles.typography.fontWeight?.medium || ''500''\n                      }}>\n                        {step.StepNumber}\n                      </span>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n            \n            {/* Step Details */}\n            {selectedRunId === group.runId && (\n              <div style={{\n                marginTop: styles.spacing.md,\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n              }}>\n                {group.steps.map(step => (\n                  <div\n                    key={step.ID}\n                    style={{\n                      display: ''flex'',\n                      alignItems: ''center'',\n                      padding: styles.spacing.xs,\n                      borderBottom: `1px solid $' + '{styles.colors.border}`\n                    }}\n                  >\n                    <div style={{\n                      width: ''20px'',\n                      textAlign: ''center'',\n                      color: styles.colors.textSecondary,\n                      marginRight: styles.spacing.sm\n                    }}>\n                      {step.StepNumber}\n                    </div>\n                    <div style={{\n                      width: ''8px'',\n                      height: ''8px'',\n                      borderRadius: ''50%'',\n                      backgroundColor: step.Success ? getStepTypeColor(step.StepType) : styles.colors.error,\n                      marginRight: styles.spacing.sm\n                    }} />\n                    <div style={{ flex: 1 }}>\n                      <div style={{ color: styles.colors.text }}>\n                        {step.StepName}\n                      </div>\n                      <div style={{ color: styles.colors.textSecondary }}>\n                        {step.StepType} • {(step.ExecutionTimeMS / 1000).toFixed(2)}s\n                        {step.TokensUsed && ` • $' + '{step.TokensUsed} tokens`}\n                      </div>\n                    </div>\n                    {!step.Success && (\n                      <div style={{\n                        color: styles.colors.error,\n                        fontSize: ''10px''\n                      }}>\n                        Failed\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      display: ''flex'',\n      backgroundColor: styles.colors.background\n    }}>\n      {/* Left Panel - Step Type Distribution */}\n      <div style={{\n        width: ''300px'',\n        padding: styles.spacing.lg,\n        borderRight: `1px solid $' + '{styles.colors.border}`,\n        backgroundColor: styles.colors.surface\n      }}>\n        <h3 style={{\n          margin: 0,\n          marginBottom: styles.spacing.md,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n          color: styles.colors.text\n        }}>\n          Step Analysis\n        </h3>\n        \n        {/* View Mode Selector */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.xs,\n          marginBottom: styles.spacing.lg\n        }}>\n          {[''waterfall'', ''distribution''].map(mode => (\n            <button\n              key={mode}\n              onClick={() => {\n                setViewMode(mode);\n                onSaveUserSettings?.({ ...savedUserSettings, viewMode: mode });\n              }}\n              style={{\n                flex: 1,\n                padding: styles.spacing.sm,\n                backgroundColor: viewMode === mode ? styles.colors.primary : styles.colors.background,\n                color: viewMode === mode ? ''white'' : styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                cursor: ''pointer'',\n                fontSize: styles.typography.fontSize.sm,\n                textTransform: ''capitalize''\n              }}\n            >\n              {mode}\n            </button>\n          ))}\n        </div>\n        \n        {/* Donut Chart */}\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''center'',\n          marginBottom: styles.spacing.lg\n        }}>\n          {renderDonutChart()}\n        </div>\n        \n        {/* Step Type Legend */}\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.xs\n        }}>\n          {stepTypeDistribution.map(item => (\n            <div\n              key={item.type}\n              style={{\n                display: ''flex'',\n                alignItems: ''center'',\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm'')\n              }}\n            >\n              <div style={{\n                width: ''12px'',\n                height: ''12px'',\n                borderRadius: ''2px'',\n                backgroundColor: getStepTypeColor(item.type),\n                marginRight: styles.spacing.sm\n              }} />\n              <div style={{ flex: 1 }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.text\n                }}>\n                  {item.type}\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary\n                }}>\n                  {item.count} steps • {item.percentage.toFixed(1)}%\n                </div>\n              </div>\n              {item.errorRate > 0 && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.error\n                }}>\n                  {item.errorRate.toFixed(0)}% failed\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Right Panel - Waterfall View */}\n      {renderWaterfall()}\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_45e1188a = N'Display execution waterfall showing step sequence and timing, visualize step type distribution with donut chart, show execution timeline with concurrent steps, identify error patterns and bottlenecks'
SET
  @TechnicalDesign_45e1188a = N'Multi-panel visualization with waterfall chart for execution flow, donut chart for step type distribution, timeline view for concurrent execution patterns, and error analysis section'
SET
  @HasCustomProps_45e1188a = 1
SET
  @HasCustomEvents_45e1188a = 0
SET
  @RequiresData_45e1188a = 0
SET
  @DependencyCount_45e1188a = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_45e1188a,
  @Namespace = @Namespace_45e1188a,
  @Name = @Name_45e1188a,
  @Version = @Version_45e1188a,
  @VersionSequence = @VersionSequence_45e1188a,
  @Title = @Title_45e1188a,
  @Description = @Description_45e1188a,
  @Type = @Type_45e1188a,
  @Status = @Status_45e1188a,
  @DeveloperName = @DeveloperName_45e1188a,
  @DeveloperEmail = @DeveloperEmail_45e1188a,
  @DeveloperOrganization = @DeveloperOrganization_45e1188a,
  @SourceRegistryID = @SourceRegistryID_45e1188a,
  @ReplicatedAt = @ReplicatedAt_45e1188a,
  @LastSyncedAt = @LastSyncedAt_45e1188a,
  @Specification = @Specification_45e1188a,
  @FunctionalRequirements = @FunctionalRequirements_45e1188a,
  @TechnicalDesign = @TechnicalDesign_45e1188a,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_45e1188a,
  @TechnicalDesignVector = @TechnicalDesignVector_45e1188a,
  @HasCustomProps = @HasCustomProps_45e1188a,
  @HasCustomEvents = @HasCustomEvents_45e1188a,
  @RequiresData = @RequiresData_45e1188a,
  @DependencyCount = @DependencyCount_45e1188a;

-- Save MJ: Components (core SP call only)
DECLARE @ID_9eefba6f UNIQUEIDENTIFIER,
@Namespace_9eefba6f NVARCHAR(MAX),
@Name_9eefba6f NVARCHAR(500),
@Version_9eefba6f NVARCHAR(50),
@VersionSequence_9eefba6f INT,
@Title_9eefba6f NVARCHAR(1000),
@Description_9eefba6f NVARCHAR(MAX),
@Type_9eefba6f NVARCHAR(255),
@Status_9eefba6f NVARCHAR(50),
@DeveloperName_9eefba6f NVARCHAR(255),
@DeveloperEmail_9eefba6f NVARCHAR(255),
@DeveloperOrganization_9eefba6f NVARCHAR(255),
@SourceRegistryID_9eefba6f UNIQUEIDENTIFIER,
@ReplicatedAt_9eefba6f DATETIMEOFFSET,
@LastSyncedAt_9eefba6f DATETIMEOFFSET,
@Specification_9eefba6f NVARCHAR(MAX),
@FunctionalRequirements_9eefba6f NVARCHAR(MAX),
@TechnicalDesign_9eefba6f NVARCHAR(MAX),
@FunctionalRequirementsVector_9eefba6f NVARCHAR(MAX),
@TechnicalDesignVector_9eefba6f NVARCHAR(MAX),
@HasCustomProps_9eefba6f BIT,
@HasCustomEvents_9eefba6f BIT,
@RequiresData_9eefba6f BIT,
@DependencyCount_9eefba6f INT
SET
  @ID_9eefba6f = 'b0edce8a-62e4-4dce-ac8b-48168ee5a4aa'
SET
  @Namespace_9eefba6f = N'AI/Agents'
SET
  @Name_9eefba6f = N'AIAgentPerformanceMetrics'
SET
  @Version_9eefba6f = N'1.0.0'
SET
  @VersionSequence_9eefba6f = 1
SET
  @Title_9eefba6f = N'AI Agent Performance Metrics'
SET
  @Description_9eefba6f = N'Comprehensive performance analytics panel showing execution time distributions, token usage analytics, cost breakdown by agent, error analysis, and trend charts'
SET
  @Type_9eefba6f = N'Chart'
SET
  @Status_9eefba6f = N'Published'
SET
  @Specification_9eefba6f = N'{
  "name": "AIAgentPerformanceMetrics",
  "title": "AI Agent Performance Metrics",
  "description": "Comprehensive performance analytics panel showing execution time distributions, token usage analytics, cost breakdown by agent, error analysis, and trend charts",
  "type": "chart",
  "functionalRequirements": "Display execution time histograms, token usage over time, cost breakdown pie chart, error pattern analysis, performance trend lines, and SLA compliance metrics",
  "dataRequirements": null,
  "technicalDesign": "Multi-section panel with histogram for execution times, line chart for token trends, pie chart for cost distribution, error heatmap, and metric cards for key performance indicators",
  "properties": [
    {"name": "agentRuns", "type": "array", "required": true, "description": "Array of agent run objects with performance data"},
    {"name": "agentRunSteps", "type": "array", "required": true, "description": "Array of agent run step objects"},
    {"name": "promptRuns", "type": "array", "required": false, "description": "Array of prompt run objects for token analysis"},
    {"name": "selectedAgentId", "type": "string", "required": false, "description": "Filter metrics by agent ID"},
    {"name": "timeRange", "type": "string", "required": true, "description": "Time range for metrics"}
  ],
  "events": [],
  "exampleUsage": "<AIAgentPerformanceMetrics ... />",
  "code": "function AIAgentPerformanceMetrics({ \n  agentRuns,\n  agentRunSteps,\n  promptRuns,\n  selectedAgentId,\n  timeRange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  const [selectedMetric, setSelectedMetric] = useState(savedUserSettings?.selectedMetric || ''execution'');\n  \n  // Helper function to get border radius\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Filter data based on selection\n  const filteredRuns = useMemo(() => {\n    if (!selectedAgentId) return agentRuns;\n    return agentRuns.filter(r => r.AgentID === selectedAgentId);\n  }, [agentRuns, selectedAgentId]);\n  \n  const filteredSteps = useMemo(() => {\n    const runIds = filteredRuns.map(r => r.ID);\n    return agentRunSteps.filter(s => runIds.includes(s.AgentRunID));\n  }, [agentRunSteps, filteredRuns]);\n  \n  const filteredPromptRuns = useMemo(() => {\n    if (!promptRuns) return [];\n    const runIds = filteredRuns.map(r => r.ID);\n    return promptRuns.filter(p => runIds.includes(p.AgentRunID));\n  }, [promptRuns, filteredRuns]);\n  \n  // Calculate performance metrics\n  const metrics = useMemo(() => {\n    const totalRuns = filteredRuns.length;\n    const successfulRuns = filteredRuns.filter(r => r.Success).length;\n    const failedRuns = filteredRuns.filter(r => !r.Success).length;\n    \n    // Execution time metrics\n    const executionTimes = filteredRuns.map(r => r.ExecutionTimeMS || 0).filter(t => t > 0);\n    const avgExecutionTime = executionTimes.length > 0 \n      ? executionTimes.reduce((a, b) => a + b, 0) / executionTimes.length : 0;\n    const medianExecutionTime = executionTimes.length > 0\n      ? executionTimes.sort((a, b) => a - b)[Math.floor(executionTimes.length / 2)] : 0;\n    const p95ExecutionTime = executionTimes.length > 0\n      ? executionTimes.sort((a, b) => a - b)[Math.floor(executionTimes.length * 0.95)] : 0;\n    \n    // Token metrics\n    const totalTokens = filteredRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    const avgTokensPerRun = totalRuns > 0 ? totalTokens / totalRuns : 0;\n    \n    // Cost metrics\n    const totalCost = filteredRuns.reduce((sum, r) => sum + (r.TotalCost || 0), 0);\n    const avgCostPerRun = totalRuns > 0 ? totalCost / totalRuns : 0;\n    \n    // Error analysis\n    const errorsByType = {};\n    filteredRuns.filter(r => !r.Success && r.ErrorMessage).forEach(r => {\n      const errorType = r.ErrorMessage.split('':'')[0].substring(0, 50);\n      errorsByType[errorType] = (errorsByType[errorType] || 0) + 1;\n    });\n    \n    return {\n      totalRuns,\n      successfulRuns,\n      failedRuns,\n      successRate: totalRuns > 0 ? (successfulRuns / totalRuns) * 100 : 0,\n      avgExecutionTime,\n      medianExecutionTime,\n      p95ExecutionTime,\n      totalTokens,\n      avgTokensPerRun,\n      totalCost,\n      avgCostPerRun,\n      errorsByType\n    };\n  }, [filteredRuns]);\n  \n  // Calculate execution time distribution for histogram\n  const executionTimeDistribution = useMemo(() => {\n    const times = filteredRuns.map(r => r.ExecutionTimeMS || 0).filter(t => t > 0);\n    if (times.length === 0) return [];\n    \n    const min = Math.min(...times);\n    const max = Math.max(...times);\n    const bucketCount = 10;\n    const bucketSize = (max - min) / bucketCount;\n    \n    const buckets = [];\n    for (let i = 0; i < bucketCount; i++) {\n      const rangeStart = min + (i * bucketSize);\n      const rangeEnd = min + ((i + 1) * bucketSize);\n      const count = times.filter(t => t >= rangeStart && t < rangeEnd).length;\n      \n      buckets.push({\n        range: `$' + '{(rangeStart / 1000).toFixed(1)}-$' + '{(rangeEnd / 1000).toFixed(1)}s`,\n        count,\n        percentage: (count / times.length) * 100\n      });\n    }\n    \n    return buckets;\n  }, [filteredRuns]);\n  \n  // Calculate cost breakdown by agent\n  const costByAgent = useMemo(() => {\n    const costs = {};\n    filteredRuns.forEach(run => {\n      const agent = run.Agent || ''Unknown'';\n      if (!costs[agent]) {\n        costs[agent] = { cost: 0, runs: 0, tokens: 0 };\n      }\n      costs[agent].cost += run.TotalCost || 0;\n      costs[agent].runs++;\n      costs[agent].tokens += run.TotalTokens || 0;\n    });\n    \n    return Object.entries(costs)\n      .map(([agent, data]) => ({\n        agent,\n        cost: data.cost,\n        runs: data.runs,\n        tokens: data.tokens,\n        avgCost: data.runs > 0 ? data.cost / data.runs : 0\n      }))\n      .sort((a, b) => b.cost - a.cost)\n      .slice(0, 10);\n  }, [filteredRuns]);\n  \n  // Calculate time series data\n  const timeSeriesData = useMemo(() => {\n    const now = new Date();\n    const points = [];\n    const hoursToShow = timeRange === ''1h'' ? 1 : timeRange === ''24h'' ? 24 : timeRange === ''7d'' ? 168 : 720;\n    const interval = hoursToShow <= 24 ? 1 : hoursToShow <= 168 ? 6 : 24; // 1h, 6h, or 24h intervals\n    \n    for (let i = 0; i < Math.min(hoursToShow / interval, 30); i++) {\n      const periodEnd = new Date(now);\n      periodEnd.setHours(now.getHours() - (i * interval));\n      const periodStart = new Date(periodEnd);\n      periodStart.setHours(periodEnd.getHours() - interval);\n      \n      const runsInPeriod = filteredRuns.filter(r => {\n        const runTime = new Date(r.StartedAt);\n        return runTime >= periodStart && runTime < periodEnd;\n      });\n      \n      points.unshift({\n        time: periodEnd.toLocaleTimeString([], { hour: ''2-digit'', minute: ''2-digit'' }),\n        runs: runsInPeriod.length,\n        tokens: runsInPeriod.reduce((sum, r) => sum + (r.TotalTokens || 0), 0),\n        cost: runsInPeriod.reduce((sum, r) => sum + (r.TotalCost || 0), 0),\n        errors: runsInPeriod.filter(r => !r.Success).length\n      });\n    }\n    \n    return points;\n  }, [filteredRuns, timeRange]);\n  \n  // Render histogram\n  const renderHistogram = () => {\n    const maxCount = Math.max(...executionTimeDistribution.map(d => d.count));\n    const barWidth = 100 / executionTimeDistribution.length;\n    \n    return (\n      <div style={{ height: ''150px'', position: ''relative'' }}>\n        <svg width=\"100%\" height=\"100%\">\n          {executionTimeDistribution.map((bucket, index) => {\n            const barHeight = maxCount > 0 ? (bucket.count / maxCount) * 130 : 0;\n            \n            return (\n              <g key={index}>\n                <rect\n                  x={`$' + '{index * barWidth}%`}\n                  y={130 - barHeight}\n                  width={`$' + '{barWidth - 2}%`}\n                  height={barHeight}\n                  fill={styles.colors.primary}\n                  opacity={0.7}\n                />\n                <text\n                  x={`$' + '{index * barWidth + barWidth / 2}%`}\n                  y={145}\n                  textAnchor=\"middle\"\n                  fontSize=\"9\"\n                  fill={styles.colors.textSecondary}\n                  transform={`rotate(-45 $' + '{index * barWidth + barWidth / 2} 145)`}\n                >\n                  {bucket.range}\n                </text>\n              </g>\n            );\n          })}\n        </svg>\n      </div>\n    );\n  };\n  \n  // Render pie chart for cost breakdown\n  const renderPieChart = () => {\n    const size = 150;\n    const radius = size / 2;\n    let cumulativeAngle = 0;\n    const totalCost = costByAgent.reduce((sum, a) => sum + a.cost, 0);\n    \n    return (\n      <svg width={size} height={size}>\n        {costByAgent.slice(0, 5).map((item, index) => {\n          const percentage = totalCost > 0 ? (item.cost / totalCost) * 100 : 0;\n          const angle = (percentage / 100) * 360;\n          const startAngle = cumulativeAngle;\n          const endAngle = cumulativeAngle + angle;\n          cumulativeAngle += angle;\n          \n          const startAngleRad = (startAngle * Math.PI) / 180;\n          const endAngleRad = (endAngle * Math.PI) / 180;\n          \n          const x1 = radius + radius * Math.cos(startAngleRad);\n          const y1 = radius + radius * Math.sin(startAngleRad);\n          const x2 = radius + radius * Math.cos(endAngleRad);\n          const y2 = radius + radius * Math.sin(endAngleRad);\n          \n          const largeArcFlag = angle > 180 ? 1 : 0;\n          \n          const colors = [\n            styles.colors.primary,\n            styles.colors.secondary,\n            styles.colors.success,\n            styles.colors.warning,\n            styles.colors.info || styles.colors.primary\n          ];\n          \n          return (\n            <path\n              key={item.agent}\n              d={`M $' + '{radius} $' + '{radius} L $' + '{x1} $' + '{y1} A $' + '{radius} $' + '{radius} 0 $' + '{largeArcFlag} 1 $' + '{x2} $' + '{y2} Z`}\n              fill={colors[index % colors.length]}\n              opacity={0.8}\n              title={`$' + '{item.agent}: $$' + '{item.cost.toFixed(2)}`}\n            />\n          );\n        })}\n      </svg>\n    );\n  };\n  \n  // Render time series chart\n  const renderTimeSeriesChart = () => {\n    if (timeSeriesData.length === 0) return null;\n    \n    const maxValue = Math.max(\n      ...timeSeriesData.map(d => \n        selectedMetric === ''runs'' ? d.runs :\n        selectedMetric === ''tokens'' ? d.tokens :\n        selectedMetric === ''cost'' ? d.cost :\n        d.errors\n      )\n    );\n    \n    const width = 300;\n    const height = 100;\n    const pointSpacing = width / (timeSeriesData.length - 1);\n    \n    return (\n      <svg width={width} height={height}>\n        {/* Grid lines */}\n        {[0, 25, 50, 75, 100].map(y => (\n          <line\n            key={y}\n            x1={0}\n            y1={y}\n            x2={width}\n            y2={y}\n            stroke={styles.colors.border}\n            strokeWidth={0.5}\n            opacity={0.3}\n          />\n        ))}\n        \n        {/* Data line */}\n        <polyline\n          points={timeSeriesData.map((d, i) => {\n            const value = selectedMetric === ''runs'' ? d.runs :\n                         selectedMetric === ''tokens'' ? d.tokens :\n                         selectedMetric === ''cost'' ? d.cost :\n                         d.errors;\n            const y = maxValue > 0 ? height - (value / maxValue) * height : height;\n            return `$' + '{i * pointSpacing},$' + '{y}`;\n          }).join('' '')}\n          fill=\"none\"\n          stroke={styles.colors.primary}\n          strokeWidth={2}\n        />\n        \n        {/* Data points */}\n        {timeSeriesData.map((d, i) => {\n          const value = selectedMetric === ''runs'' ? d.runs :\n                       selectedMetric === ''tokens'' ? d.tokens :\n                       selectedMetric === ''cost'' ? d.cost :\n                       d.errors;\n          const y = maxValue > 0 ? height - (value / maxValue) * height : height;\n          \n          return (\n            <circle\n              key={i}\n              cx={i * pointSpacing}\n              cy={y}\n              r={3}\n              fill={styles.colors.primary}\n              title={`$' + '{d.time}: $' + '{value}`}\n            />\n          );\n        })}\n      </svg>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      padding: styles.spacing.lg,\n      backgroundColor: styles.colors.background,\n      overflow: ''auto''\n    }}>\n      <h3 style={{\n        margin: 0,\n        marginBottom: styles.spacing.md,\n        fontSize: styles.typography.fontSize.lg,\n        fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n        color: styles.colors.text\n      }}>\n        Performance Metrics\n      </h3>\n      \n      {/* Key Metrics Cards */}\n      <div style={{\n        display: ''grid'',\n        gridTemplateColumns: ''repeat(2, 1fr)'',\n        gap: styles.spacing.sm,\n        marginBottom: styles.spacing.lg\n      }}>\n        <div style={{\n          padding: styles.spacing.sm,\n          backgroundColor: styles.colors.surface,\n          borderRadius: getBorderRadius(''sm''),\n          borderLeft: `3px solid $' + '{styles.colors.primary}`\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary\n          }}>\n            Success Rate\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.bold || ''700'',\n            color: metrics.successRate >= 90 ? styles.colors.success : \n                  metrics.successRate >= 70 ? styles.colors.warning : \n                  styles.colors.error\n          }}>\n            {metrics.successRate.toFixed(1)}%\n          </div>\n        </div>\n        \n        <div style={{\n          padding: styles.spacing.sm,\n          backgroundColor: styles.colors.surface,\n          borderRadius: getBorderRadius(''sm''),\n          borderLeft: `3px solid $' + '{styles.colors.secondary}`\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary\n          }}>\n            Avg Time\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.bold || ''700'',\n            color: styles.colors.text\n          }}>\n            {(metrics.avgExecutionTime / 1000).toFixed(2)}s\n          </div>\n        </div>\n        \n        <div style={{\n          padding: styles.spacing.sm,\n          backgroundColor: styles.colors.surface,\n          borderRadius: getBorderRadius(''sm''),\n          borderLeft: `3px solid $' + '{styles.colors.warning || styles.colors.secondary}`\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary\n          }}>\n            Total Cost\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.bold || ''700'',\n            color: styles.colors.text\n          }}>\n            $' + '{metrics.totalCost.toFixed(2)}\n          </div>\n        </div>\n        \n        <div style={{\n          padding: styles.spacing.sm,\n          backgroundColor: styles.colors.surface,\n          borderRadius: getBorderRadius(''sm''),\n          borderLeft: `3px solid $' + '{styles.colors.info || styles.colors.primary}`\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary\n          }}>\n            Total Tokens\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.bold || ''700'',\n            color: styles.colors.text\n          }}>\n            {metrics.totalTokens.toLocaleString()}\n          </div>\n        </div>\n      </div>\n      \n      {/* Execution Time Distribution */}\n      <div style={{\n        marginBottom: styles.spacing.lg,\n        padding: styles.spacing.md,\n        backgroundColor: styles.colors.surface,\n        borderRadius: getBorderRadius(''sm'')\n      }}>\n        <h4 style={{\n          margin: 0,\n          marginBottom: styles.spacing.sm,\n          fontSize: styles.typography.fontSize.md,\n          fontWeight: styles.typography.fontWeight?.medium || ''500'',\n          color: styles.colors.text\n        }}>\n          Execution Time Distribution\n        </h4>\n        {renderHistogram()}\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          marginTop: styles.spacing.sm,\n          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n          color: styles.colors.textSecondary\n        }}>\n          <span>Median: {(metrics.medianExecutionTime / 1000).toFixed(2)}s</span>\n          <span>P95: {(metrics.p95ExecutionTime / 1000).toFixed(2)}s</span>\n        </div>\n      </div>\n      \n      {/* Cost Breakdown */}\n      <div style={{\n        marginBottom: styles.spacing.lg,\n        padding: styles.spacing.md,\n        backgroundColor: styles.colors.surface,\n        borderRadius: getBorderRadius(''sm'')\n      }}>\n        <h4 style={{\n          margin: 0,\n          marginBottom: styles.spacing.sm,\n          fontSize: styles.typography.fontSize.md,\n          fontWeight: styles.typography.fontWeight?.medium || ''500'',\n          color: styles.colors.text\n        }}>\n          Cost by Agent\n        </h4>\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.md,\n          alignItems: ''center''\n        }}>\n          {renderPieChart()}\n          <div style={{\n            flex: 1,\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n          }}>\n            {costByAgent.slice(0, 5).map((item, index) => {\n              const colors = [\n                styles.colors.primary,\n                styles.colors.secondary,\n                styles.colors.success,\n                styles.colors.warning,\n                styles.colors.info || styles.colors.primary\n              ];\n              \n              return (\n                <div\n                  key={item.agent}\n                  style={{\n                    display: ''flex'',\n                    alignItems: ''center'',\n                    marginBottom: styles.spacing.xs\n                  }}\n                >\n                  <div style={{\n                    width: ''8px'',\n                    height: ''8px'',\n                    borderRadius: ''2px'',\n                    backgroundColor: colors[index % colors.length],\n                    marginRight: styles.spacing.xs\n                  }} />\n                  <div style={{ flex: 1, color: styles.colors.text }}>\n                    {item.agent}\n                  </div>\n                  <div style={{ color: styles.colors.textSecondary }}>\n                    $' + '{item.cost.toFixed(2)}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n      \n      {/* Time Series */}\n      <div style={{\n        padding: styles.spacing.md,\n        backgroundColor: styles.colors.surface,\n        borderRadius: getBorderRadius(''sm'')\n      }}>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''center'',\n          marginBottom: styles.spacing.sm\n        }}>\n          <h4 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.md,\n            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n            color: styles.colors.text\n          }}>\n            Trend Analysis\n          </h4>\n          \n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.xs\n          }}>\n            {[''runs'', ''tokens'', ''cost'', ''errors''].map(metric => (\n              <button\n                key={metric}\n                onClick={() => {\n                  setSelectedMetric(metric);\n                  onSaveUserSettings?.({ ...savedUserSettings, selectedMetric: metric });\n                }}\n                style={{\n                  padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n                  backgroundColor: selectedMetric === metric ? styles.colors.primary : styles.colors.background,\n                  color: selectedMetric === metric ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  textTransform: ''capitalize''\n                }}\n              >\n                {metric}\n              </button>\n            ))}\n          </div>\n        </div>\n        \n        {renderTimeSeriesChart()}\n      </div>\n      \n      {/* Error Analysis */}\n      {Object.keys(metrics.errorsByType).length > 0 && (\n        <div style={{\n          marginTop: styles.spacing.lg,\n          padding: styles.spacing.md,\n          backgroundColor: styles.colors.surface,\n          borderRadius: getBorderRadius(''sm''),\n          borderLeft: `3px solid $' + '{styles.colors.error}`\n        }}>\n          <h4 style={{\n            margin: 0,\n            marginBottom: styles.spacing.sm,\n            fontSize: styles.typography.fontSize.md,\n            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n            color: styles.colors.text\n          }}>\n            Error Patterns\n          </h4>\n          <div style={{\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n          }}>\n            {Object.entries(metrics.errorsByType)\n              .sort((a, b) => b[1] - a[1])\n              .slice(0, 5)\n              .map(([error, count]) => (\n                <div\n                  key={error}\n                  style={{\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    padding: styles.spacing.xs,\n                    borderBottom: `1px solid $' + '{styles.colors.border}`\n                  }}\n                >\n                  <span style={{ color: styles.colors.text }}>{error}</span>\n                  <span style={{ color: styles.colors.error }}>{count} occurrences</span>\n                </div>\n              ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}'
SET
  @FunctionalRequirements_9eefba6f = N'Display execution time histograms, token usage over time, cost breakdown pie chart, error pattern analysis, performance trend lines, and SLA compliance metrics'
SET
  @TechnicalDesign_9eefba6f = N'Multi-section panel with histogram for execution times, line chart for token trends, pie chart for cost distribution, error heatmap, and metric cards for key performance indicators'
SET
  @HasCustomProps_9eefba6f = 1
SET
  @HasCustomEvents_9eefba6f = 0
SET
  @RequiresData_9eefba6f = 0
SET
  @DependencyCount_9eefba6f = 0
EXEC [${flyway:defaultSchema}].spCreateComponent @ID = @ID_9eefba6f,
  @Namespace = @Namespace_9eefba6f,
  @Name = @Name_9eefba6f,
  @Version = @Version_9eefba6f,
  @VersionSequence = @VersionSequence_9eefba6f,
  @Title = @Title_9eefba6f,
  @Description = @Description_9eefba6f,
  @Type = @Type_9eefba6f,
  @Status = @Status_9eefba6f,
  @DeveloperName = @DeveloperName_9eefba6f,
  @DeveloperEmail = @DeveloperEmail_9eefba6f,
  @DeveloperOrganization = @DeveloperOrganization_9eefba6f,
  @SourceRegistryID = @SourceRegistryID_9eefba6f,
  @ReplicatedAt = @ReplicatedAt_9eefba6f,
  @LastSyncedAt = @LastSyncedAt_9eefba6f,
  @Specification = @Specification_9eefba6f,
  @FunctionalRequirements = @FunctionalRequirements_9eefba6f,
  @TechnicalDesign = @TechnicalDesign_9eefba6f,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_9eefba6f,
  @TechnicalDesignVector = @TechnicalDesignVector_9eefba6f,
  @HasCustomProps = @HasCustomProps_9eefba6f,
  @HasCustomEvents = @HasCustomEvents_9eefba6f,
  @RequiresData = @RequiresData_9eefba6f,
  @DependencyCount = @DependencyCount_9eefba6f;


-- End of SQL Logging Session
-- Session ID: 327b8a75-ca6d-4320-a246-8ac72e46b0d8
-- Completed: 2025-08-14T18:20:40.932Z
-- Duration: 15500ms
-- Total Statements: 5
