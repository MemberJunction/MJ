-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queries
-- Item: spDeleteQuery
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Query
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteQuery]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteQuery]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[Query]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteQuery] TO [cdp_Integration]


    
     

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '1a6898c4-092e-4e0d-be22-874dca524ff1'  OR 
               (EntityID = '785C70B0-A456-4844-AF74-03AB8B55F633' AND Name = 'Agent')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '1a6898c4-092e-4e0d-be22-874dca524ff1',
            '785C70B0-A456-4844-AF74-03AB8B55F633', -- Entity: AI Agent Models
            8,
            'Agent',
            'Agent',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'f65c297f-f63a-4adb-8694-387dcd330d5f'  OR 
               (EntityID = '785C70B0-A456-4844-AF74-03AB8B55F633' AND Name = 'Model')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'f65c297f-f63a-4adb-8694-387dcd330d5f',
            '785C70B0-A456-4844-AF74-03AB8B55F633', -- Entity: AI Agent Models
            9,
            'Model',
            'Model',
            NULL,
            'nvarchar',
            100,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '4eb4fd5f-749f-4a11-b5c4-8f70995dac3c'  OR 
               (EntityID = 'A24EF5EC-D32C-4A53-85A9-364E322451E6' AND Name = 'Agent')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '4eb4fd5f-749f-4a11-b5c4-8f70995dac3c',
            'A24EF5EC-D32C-4A53-85A9-364E322451E6', -- Entity: AI Agent Notes
            9,
            'Agent',
            'Agent',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '45946792-c4fa-4d0b-81c9-c1c764e185bc'  OR 
               (EntityID = 'A24EF5EC-D32C-4A53-85A9-364E322451E6' AND Name = 'AgentNoteType')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '45946792-c4fa-4d0b-81c9-c1c764e185bc',
            'A24EF5EC-D32C-4A53-85A9-364E322451E6', -- Entity: AI Agent Notes
            10,
            'AgentNoteType',
            'Agent Note Type',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'b0917206-7f6b-4f01-b6f6-34bc768938fd'  OR 
               (EntityID = '196B0316-6078-47A4-94B9-44A2FC5E8A55' AND Name = 'Agent')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'b0917206-7f6b-4f01-b6f6-34bc768938fd',
            '196B0316-6078-47A4-94B9-44A2FC5E8A55', -- Entity: AI Agent Actions
            7,
            'Agent',
            'Agent',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '285b3b5f-7081-4ae9-99e7-1038aeb061de'  OR 
               (EntityID = '196B0316-6078-47A4-94B9-44A2FC5E8A55' AND Name = 'Action')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '285b3b5f-7081-4ae9-99e7-1038aeb061de',
            '196B0316-6078-47A4-94B9-44A2FC5E8A55', -- Entity: AI Agent Actions
            8,
            'Action',
            'Action',
            NULL,
            'nvarchar',
            850,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END
 

/* SQL text to update entity field value sequence */
UPDATE [${flyway:defaultSchema}].EntityFieldValue SET Sequence=1 WHERE ID='C051302D-7236-EF11-86D4-6045BDEE16E6'

/* SQL text to update entity field value sequence */
UPDATE [${flyway:defaultSchema}].EntityFieldValue SET Sequence=3 WHERE ID='BE51302D-7236-EF11-86D4-6045BDEE16E6'

/* Index for Foreign Keys for ScheduledAction */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Actions
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key CreatedByUserID in table ScheduledAction
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ScheduledAction_CreatedByUserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ScheduledAction]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ScheduledAction_CreatedByUserID ON [${flyway:defaultSchema}].[ScheduledAction] ([CreatedByUserID]);

-- Index for foreign key ActionID in table ScheduledAction
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ScheduledAction_ActionID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ScheduledAction]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ScheduledAction_ActionID ON [${flyway:defaultSchema}].[ScheduledAction] ([ActionID]);

/* Index for Foreign Keys for ScheduledActionParam */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Action Params
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ScheduledActionID in table ScheduledActionParam
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ScheduledActionParam_ScheduledActionID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ScheduledActionParam]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ScheduledActionParam_ScheduledActionID ON [${flyway:defaultSchema}].[ScheduledActionParam] ([ScheduledActionID]);

-- Index for foreign key ActionParamID in table ScheduledActionParam
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ScheduledActionParam_ActionParamID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ScheduledActionParam]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ScheduledActionParam_ActionParamID ON [${flyway:defaultSchema}].[ScheduledActionParam] ([ActionParamID]);

/* Index for Foreign Keys for AIAgentModel */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Models
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key AgentID in table AIAgentModel
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgentModel_AgentID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgentModel]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgentModel_AgentID ON [${flyway:defaultSchema}].[AIAgentModel] ([AgentID]);

-- Index for foreign key ModelID in table AIAgentModel
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgentModel_ModelID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgentModel]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgentModel_ModelID ON [${flyway:defaultSchema}].[AIAgentModel] ([ModelID]);

/* Base View SQL for Scheduled Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Actions
-- Item: vwScheduledActions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Scheduled Actions
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ScheduledAction
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwScheduledActions]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwScheduledActions]
AS
SELECT
    s.*,
    User_CreatedByUserID.[Name] AS [CreatedByUser],
    Action_ActionID.[Name] AS [Action]
FROM
    [${flyway:defaultSchema}].[ScheduledAction] AS s
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_CreatedByUserID
  ON
    [s].[CreatedByUserID] = User_CreatedByUserID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Action] AS Action_ActionID
  ON
    [s].[ActionID] = Action_ActionID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwScheduledActions] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for Scheduled Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Actions
-- Item: Permissions for vwScheduledActions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwScheduledActions] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* spCreate SQL for Scheduled Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Actions
-- Item: spCreateScheduledAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ScheduledAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateScheduledAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateScheduledAction]
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @CreatedByUserID uniqueidentifier,
    @ActionID uniqueidentifier,
    @Type nvarchar(20),
    @CronExpression nvarchar(100),
    @Timezone nvarchar(100),
    @Status nvarchar(20),
    @IntervalDays int,
    @DayOfWeek nvarchar(20),
    @DayOfMonth int,
    @Month nvarchar(20),
    @CustomCronExpression nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ScheduledAction]
        (
            [Name],
            [Description],
            [CreatedByUserID],
            [ActionID],
            [Type],
            [CronExpression],
            [Timezone],
            [Status],
            [IntervalDays],
            [DayOfWeek],
            [DayOfMonth],
            [Month],
            [CustomCronExpression]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @Description,
            @CreatedByUserID,
            @ActionID,
            @Type,
            @CronExpression,
            @Timezone,
            @Status,
            @IntervalDays,
            @DayOfWeek,
            @DayOfMonth,
            @Month,
            @CustomCronExpression
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwScheduledActions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateScheduledAction] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Scheduled Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateScheduledAction] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Scheduled Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Actions
-- Item: spUpdateScheduledAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ScheduledAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateScheduledAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateScheduledAction]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @CreatedByUserID uniqueidentifier,
    @ActionID uniqueidentifier,
    @Type nvarchar(20),
    @CronExpression nvarchar(100),
    @Timezone nvarchar(100),
    @Status nvarchar(20),
    @IntervalDays int,
    @DayOfWeek nvarchar(20),
    @DayOfMonth int,
    @Month nvarchar(20),
    @CustomCronExpression nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ScheduledAction]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [CreatedByUserID] = @CreatedByUserID,
        [ActionID] = @ActionID,
        [Type] = @Type,
        [CronExpression] = @CronExpression,
        [Timezone] = @Timezone,
        [Status] = @Status,
        [IntervalDays] = @IntervalDays,
        [DayOfWeek] = @DayOfWeek,
        [DayOfMonth] = @DayOfMonth,
        [Month] = @Month,
        [CustomCronExpression] = @CustomCronExpression
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwScheduledActions]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateScheduledAction] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ScheduledAction table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateScheduledAction
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateScheduledAction
ON [${flyway:defaultSchema}].[ScheduledAction]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ScheduledAction]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ScheduledAction] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Scheduled Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateScheduledAction] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Scheduled Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Actions
-- Item: spDeleteScheduledAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ScheduledAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteScheduledAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteScheduledAction]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ScheduledAction]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteScheduledAction] TO [cdp_Integration]
    

/* spDelete Permissions for Scheduled Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteScheduledAction] TO [cdp_Integration]



/* Base View SQL for Scheduled Action Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Action Params
-- Item: vwScheduledActionParams
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Scheduled Action Params
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ScheduledActionParam
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwScheduledActionParams]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwScheduledActionParams]
AS
SELECT
    s.*,
    ScheduledAction_ScheduledActionID.[Name] AS [ScheduledAction],
    ActionParam_ActionParamID.[Name] AS [ActionParam]
FROM
    [${flyway:defaultSchema}].[ScheduledActionParam] AS s
INNER JOIN
    [${flyway:defaultSchema}].[ScheduledAction] AS ScheduledAction_ScheduledActionID
  ON
    [s].[ScheduledActionID] = ScheduledAction_ScheduledActionID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[ActionParam] AS ActionParam_ActionParamID
  ON
    [s].[ActionParamID] = ActionParam_ActionParamID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwScheduledActionParams] TO [cdp_Developer], [cdp_Integration], [cdp_UI]
    

/* Base View Permissions SQL for Scheduled Action Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Action Params
-- Item: Permissions for vwScheduledActionParams
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwScheduledActionParams] TO [cdp_Developer], [cdp_Integration], [cdp_UI]

/* spCreate SQL for Scheduled Action Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Action Params
-- Item: spCreateScheduledActionParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ScheduledActionParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateScheduledActionParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateScheduledActionParam]
    @ScheduledActionID uniqueidentifier,
    @ActionParamID uniqueidentifier,
    @ValueType nvarchar(20),
    @Value nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ScheduledActionParam]
        (
            [ScheduledActionID],
            [ActionParamID],
            [ValueType],
            [Value],
            [Comments]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @ScheduledActionID,
            @ActionParamID,
            @ValueType,
            @Value,
            @Comments
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwScheduledActionParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateScheduledActionParam] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Scheduled Action Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateScheduledActionParam] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Scheduled Action Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Action Params
-- Item: spUpdateScheduledActionParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ScheduledActionParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateScheduledActionParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateScheduledActionParam]
    @ID uniqueidentifier,
    @ScheduledActionID uniqueidentifier,
    @ActionParamID uniqueidentifier,
    @ValueType nvarchar(20),
    @Value nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ScheduledActionParam]
    SET
        [ScheduledActionID] = @ScheduledActionID,
        [ActionParamID] = @ActionParamID,
        [ValueType] = @ValueType,
        [Value] = @Value,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwScheduledActionParams]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateScheduledActionParam] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ScheduledActionParam table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateScheduledActionParam
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateScheduledActionParam
ON [${flyway:defaultSchema}].[ScheduledActionParam]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ScheduledActionParam]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ScheduledActionParam] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Scheduled Action Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateScheduledActionParam] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Scheduled Action Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Action Params
-- Item: spDeleteScheduledActionParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ScheduledActionParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteScheduledActionParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteScheduledActionParam]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ScheduledActionParam]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteScheduledActionParam] TO [cdp_Integration]
    

/* spDelete Permissions for Scheduled Action Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteScheduledActionParam] TO [cdp_Integration]



/* Base View SQL for AI Agent Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Models
-- Item: vwAIAgentModels
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      AI Agent Models
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIAgentModel
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIAgentModels]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIAgentModels]
AS
SELECT
    a.*,
    AIAgent_AgentID.[Name] AS [Agent],
    AIModel_ModelID.[Name] AS [Model]
FROM
    [${flyway:defaultSchema}].[AIAgentModel] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgent] AS AIAgent_AgentID
  ON
    [a].[AgentID] = AIAgent_AgentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIModel] AS AIModel_ModelID
  ON
    [a].[ModelID] = AIModel_ModelID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentModels] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for AI Agent Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Models
-- Item: Permissions for vwAIAgentModels
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentModels] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for AI Agent Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Models
-- Item: spCreateAIAgentModel
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentModel
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentModel]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentModel]
    @AgentID uniqueidentifier,
    @ModelID uniqueidentifier,
    @Active bit,
    @Priority int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[AIAgentModel]
        (
            [AgentID],
            [ModelID],
            [Active],
            [Priority]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @AgentID,
            @ModelID,
            @Active,
            @Priority
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentModels] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentModel] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agent Models */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentModel] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for AI Agent Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Models
-- Item: spUpdateAIAgentModel
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AIAgentModel
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAIAgentModel]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAIAgentModel]
    @ID uniqueidentifier,
    @AgentID uniqueidentifier,
    @ModelID uniqueidentifier,
    @Active bit,
    @Priority int
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIAgentModel]
    SET
        [AgentID] = @AgentID,
        [ModelID] = @ModelID,
        [Active] = @Active,
        [Priority] = @Priority
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAIAgentModels]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIAgentModel] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the AIAgentModel table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAIAgentModel
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAIAgentModel
ON [${flyway:defaultSchema}].[AIAgentModel]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIAgentModel]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[AIAgentModel] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for AI Agent Models */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIAgentModel] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for AI Agent Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Models
-- Item: spDeleteAIAgentModel
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AIAgentModel
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteAIAgentModel]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteAIAgentModel]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[AIAgentModel]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIAgentModel] TO [cdp_Integration]
    

/* spDelete Permissions for AI Agent Models */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIAgentModel] TO [cdp_Integration]



/* Index for Foreign Keys for AIAgentNote */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Notes
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key AgentID in table AIAgentNote
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgentNote_AgentID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgentNote]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgentNote_AgentID ON [${flyway:defaultSchema}].[AIAgentNote] ([AgentID]);

-- Index for foreign key AgentNoteTypeID in table AIAgentNote
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgentNote_AgentNoteTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgentNote]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgentNote_AgentNoteTypeID ON [${flyway:defaultSchema}].[AIAgentNote] ([AgentNoteTypeID]);

-- Index for foreign key UserID in table AIAgentNote
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgentNote_UserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgentNote]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgentNote_UserID ON [${flyway:defaultSchema}].[AIAgentNote] ([UserID]);

/* Index for Foreign Keys for AIAgentAction */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Actions
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key AgentID in table AIAgentAction
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgentAction_AgentID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgentAction]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgentAction_AgentID ON [${flyway:defaultSchema}].[AIAgentAction] ([AgentID]);

-- Index for foreign key ActionID in table AIAgentAction
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgentAction_ActionID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgentAction]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgentAction_ActionID ON [${flyway:defaultSchema}].[AIAgentAction] ([ActionID]);

/* Base View SQL for AI Agent Notes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Notes
-- Item: vwAIAgentNotes
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      AI Agent Notes
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIAgentNote
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIAgentNotes]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIAgentNotes]
AS
SELECT
    a.*,
    AIAgent_AgentID.[Name] AS [Agent],
    AIAgentNoteType_AgentNoteTypeID.[Name] AS [AgentNoteType],
    User_UserID.[Name] AS [User]
FROM
    [${flyway:defaultSchema}].[AIAgentNote] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgent] AS AIAgent_AgentID
  ON
    [a].[AgentID] = AIAgent_AgentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgentNoteType] AS AIAgentNoteType_AgentNoteTypeID
  ON
    [a].[AgentNoteTypeID] = AIAgentNoteType_AgentNoteTypeID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [a].[UserID] = User_UserID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentNotes] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for AI Agent Notes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Notes
-- Item: Permissions for vwAIAgentNotes
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentNotes] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for AI Agent Notes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Notes
-- Item: spCreateAIAgentNote
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentNote
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentNote]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentNote]
    @AgentID uniqueidentifier,
    @AgentNoteTypeID uniqueidentifier,
    @Note nvarchar(MAX),
    @Type nvarchar(20),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[AIAgentNote]
        (
            [AgentID],
            [AgentNoteTypeID],
            [Note],
            [Type],
            [UserID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @AgentID,
            @AgentNoteTypeID,
            @Note,
            @Type,
            @UserID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentNotes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentNote] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agent Notes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentNote] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for AI Agent Notes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Notes
-- Item: spUpdateAIAgentNote
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AIAgentNote
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAIAgentNote]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAIAgentNote]
    @ID uniqueidentifier,
    @AgentID uniqueidentifier,
    @AgentNoteTypeID uniqueidentifier,
    @Note nvarchar(MAX),
    @Type nvarchar(20),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIAgentNote]
    SET
        [AgentID] = @AgentID,
        [AgentNoteTypeID] = @AgentNoteTypeID,
        [Note] = @Note,
        [Type] = @Type,
        [UserID] = @UserID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAIAgentNotes]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIAgentNote] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the AIAgentNote table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAIAgentNote
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAIAgentNote
ON [${flyway:defaultSchema}].[AIAgentNote]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIAgentNote]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[AIAgentNote] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for AI Agent Notes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIAgentNote] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for AI Agent Notes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Notes
-- Item: spDeleteAIAgentNote
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AIAgentNote
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteAIAgentNote]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteAIAgentNote]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[AIAgentNote]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIAgentNote] TO [cdp_Integration]
    

/* spDelete Permissions for AI Agent Notes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIAgentNote] TO [cdp_Integration]



/* Base View SQL for AI Agent Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Actions
-- Item: vwAIAgentActions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      AI Agent Actions
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIAgentAction
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIAgentActions]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIAgentActions]
AS
SELECT
    a.*,
    AIAgent_AgentID.[Name] AS [Agent],
    Action_ActionID.[Name] AS [Action]
FROM
    [${flyway:defaultSchema}].[AIAgentAction] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgent] AS AIAgent_AgentID
  ON
    [a].[AgentID] = AIAgent_AgentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Action] AS Action_ActionID
  ON
    [a].[ActionID] = Action_ActionID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentActions] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for AI Agent Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Actions
-- Item: Permissions for vwAIAgentActions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgentActions] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for AI Agent Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Actions
-- Item: spCreateAIAgentAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentAction]
    @AgentID uniqueidentifier,
    @ActionID uniqueidentifier,
    @Status nvarchar(15)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[AIAgentAction]
        (
            [AgentID],
            [ActionID],
            [Status]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @AgentID,
            @ActionID,
            @Status
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentActions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentAction] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agent Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentAction] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for AI Agent Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Actions
-- Item: spUpdateAIAgentAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AIAgentAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAIAgentAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAIAgentAction]
    @ID uniqueidentifier,
    @AgentID uniqueidentifier,
    @ActionID uniqueidentifier,
    @Status nvarchar(15)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIAgentAction]
    SET
        [AgentID] = @AgentID,
        [ActionID] = @ActionID,
        [Status] = @Status
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAIAgentActions]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIAgentAction] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the AIAgentAction table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAIAgentAction
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAIAgentAction
ON [${flyway:defaultSchema}].[AIAgentAction]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIAgentAction]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[AIAgentAction] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for AI Agent Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIAgentAction] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for AI Agent Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Actions
-- Item: spDeleteAIAgentAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AIAgentAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteAIAgentAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteAIAgentAction]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[AIAgentAction]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIAgentAction] TO [cdp_Integration]
    

/* spDelete Permissions for AI Agent Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIAgentAction] TO [cdp_Integration]



/* Index for Foreign Keys for List */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Lists
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key EntityID in table List
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_List_EntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[List]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_List_EntityID ON [${flyway:defaultSchema}].[List] ([EntityID]);

-- Index for foreign key UserID in table List
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_List_UserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[List]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_List_UserID ON [${flyway:defaultSchema}].[List] ([UserID]);

-- Index for foreign key CategoryID in table List
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_List_CategoryID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[List]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_List_CategoryID ON [${flyway:defaultSchema}].[List] ([CategoryID]);

-- Index for foreign key CompanyIntegrationID in table List
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_List_CompanyIntegrationID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[List]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_List_CompanyIntegrationID ON [${flyway:defaultSchema}].[List] ([CompanyIntegrationID]);

/* Index for Foreign Keys for ListDetail */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Details
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ListID in table ListDetail
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ListDetail_ListID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ListDetail]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ListDetail_ListID ON [${flyway:defaultSchema}].[ListDetail] ([ListID]);

/* Base View SQL for Lists */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Lists
-- Item: vwLists
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Lists
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  List
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwLists]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwLists]
AS
SELECT
    l.*,
    Entity_EntityID.[Name] AS [Entity],
    User_UserID.[Name] AS [User],
    ListCategory_CategoryID.[Name] AS [Category]
FROM
    [${flyway:defaultSchema}].[List] AS l
INNER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [l].[EntityID] = Entity_EntityID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [l].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ListCategory] AS ListCategory_CategoryID
  ON
    [l].[CategoryID] = ListCategory_CategoryID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwLists] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    

/* Base View Permissions SQL for Lists */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Lists
-- Item: Permissions for vwLists
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwLists] TO [cdp_Integration], [cdp_Developer], [cdp_UI]

/* spCreate SQL for Lists */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Lists
-- Item: spCreateList
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR List
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateList]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateList]
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @EntityID uniqueidentifier,
    @UserID uniqueidentifier,
    @CategoryID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(100),
    @CompanyIntegrationID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[List]
        (
            [Name],
            [Description],
            [EntityID],
            [UserID],
            [CategoryID],
            [ExternalSystemRecordID],
            [CompanyIntegrationID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @Description,
            @EntityID,
            @UserID,
            @CategoryID,
            @ExternalSystemRecordID,
            @CompanyIntegrationID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwLists] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateList] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Lists */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateList] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Lists */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Lists
-- Item: spUpdateList
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR List
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateList]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateList]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @EntityID uniqueidentifier,
    @UserID uniqueidentifier,
    @CategoryID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(100),
    @CompanyIntegrationID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[List]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [EntityID] = @EntityID,
        [UserID] = @UserID,
        [CategoryID] = @CategoryID,
        [ExternalSystemRecordID] = @ExternalSystemRecordID,
        [CompanyIntegrationID] = @CompanyIntegrationID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwLists]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateList] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the List table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateList
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateList
ON [${flyway:defaultSchema}].[List]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[List]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[List] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Lists */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateList] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Lists */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Lists
-- Item: spDeleteList
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR List
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteList]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteList]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[List]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteList] TO [cdp_Integration], [cdp_Developer]
    

/* spDelete Permissions for Lists */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteList] TO [cdp_Integration], [cdp_Developer]



/* Base View SQL for List Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Details
-- Item: vwListDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      List Details
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ListDetail
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwListDetails]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwListDetails]
AS
SELECT
    l.*,
    List_ListID.[Name] AS [List]
FROM
    [${flyway:defaultSchema}].[ListDetail] AS l
INNER JOIN
    [${flyway:defaultSchema}].[List] AS List_ListID
  ON
    [l].[ListID] = List_ListID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwListDetails] TO [cdp_Integration], [cdp_UI], [cdp_Developer]
    

/* Base View Permissions SQL for List Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Details
-- Item: Permissions for vwListDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwListDetails] TO [cdp_Integration], [cdp_UI], [cdp_Developer]

/* spCreate SQL for List Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Details
-- Item: spCreateListDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ListDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateListDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateListDetail]
    @ListID uniqueidentifier,
    @RecordID nvarchar(445),
    @Sequence int,
    @Status nvarchar(30),
    @AdditionalData nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ListDetail]
        (
            [ListID],
            [RecordID],
            [Sequence],
            [Status],
            [AdditionalData]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @ListID,
            @RecordID,
            @Sequence,
            @Status,
            @AdditionalData
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwListDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateListDetail] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for List Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateListDetail] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for List Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Details
-- Item: spUpdateListDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ListDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateListDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateListDetail]
    @ID uniqueidentifier,
    @ListID uniqueidentifier,
    @RecordID nvarchar(445),
    @Sequence int,
    @Status nvarchar(30),
    @AdditionalData nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ListDetail]
    SET
        [ListID] = @ListID,
        [RecordID] = @RecordID,
        [Sequence] = @Sequence,
        [Status] = @Status,
        [AdditionalData] = @AdditionalData
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwListDetails]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateListDetail] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ListDetail table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateListDetail
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateListDetail
ON [${flyway:defaultSchema}].[ListDetail]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ListDetail]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ListDetail] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for List Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateListDetail] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for List Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Details
-- Item: spDeleteListDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ListDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteListDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteListDetail]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ListDetail]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteListDetail] TO [cdp_Integration], [cdp_Developer]
    

/* spDelete Permissions for List Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteListDetail] TO [cdp_Integration], [cdp_Developer]



/* Index for Foreign Keys for AuditLog */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Logs
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key UserID in table AuditLog
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AuditLog_UserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AuditLog]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AuditLog_UserID ON [${flyway:defaultSchema}].[AuditLog] ([UserID]);

-- Index for foreign key AuditLogTypeID in table AuditLog
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AuditLog_AuditLogTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AuditLog]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AuditLog_AuditLogTypeID ON [${flyway:defaultSchema}].[AuditLog] ([AuditLogTypeID]);

-- Index for foreign key AuthorizationID in table AuditLog
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AuditLog_AuthorizationID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AuditLog]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AuditLog_AuthorizationID ON [${flyway:defaultSchema}].[AuditLog] ([AuthorizationID]);

-- Index for foreign key EntityID in table AuditLog
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AuditLog_EntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AuditLog]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AuditLog_EntityID ON [${flyway:defaultSchema}].[AuditLog] ([EntityID]);

/* Base View SQL for Audit Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Logs
-- Item: vwAuditLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Audit Logs
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AuditLog
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAuditLogs]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAuditLogs]
AS
SELECT
    a.*,
    User_UserID.[Name] AS [User],
    AuditLogType_AuditLogTypeID.[Name] AS [AuditLogType],
    Authorization_AuthorizationID.[Name] AS [Authorization],
    Entity_EntityID.[Name] AS [Entity]
FROM
    [${flyway:defaultSchema}].[AuditLog] AS a
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [a].[UserID] = User_UserID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[AuditLogType] AS AuditLogType_AuditLogTypeID
  ON
    [a].[AuditLogTypeID] = AuditLogType_AuditLogTypeID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Authorization] AS Authorization_AuthorizationID
  ON
    [a].[AuthorizationID] = Authorization_AuthorizationID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [a].[EntityID] = Entity_EntityID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAuditLogs] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for Audit Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Logs
-- Item: Permissions for vwAuditLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAuditLogs] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for Audit Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Logs
-- Item: spCreateAuditLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AuditLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAuditLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAuditLog]
    @UserID uniqueidentifier,
    @AuditLogTypeID uniqueidentifier,
    @AuthorizationID uniqueidentifier,
    @Status nvarchar(50),
    @Description nvarchar(MAX),
    @Details nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[AuditLog]
        (
            [UserID],
            [AuditLogTypeID],
            [AuthorizationID],
            [Status],
            [Description],
            [Details],
            [EntityID],
            [RecordID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @UserID,
            @AuditLogTypeID,
            @AuthorizationID,
            @Status,
            @Description,
            @Details,
            @EntityID,
            @RecordID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAuditLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuditLog] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Audit Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuditLog] TO [cdp_UI], [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Audit Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Logs
-- Item: spUpdateAuditLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AuditLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAuditLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAuditLog]
    @ID uniqueidentifier,
    @UserID uniqueidentifier,
    @AuditLogTypeID uniqueidentifier,
    @AuthorizationID uniqueidentifier,
    @Status nvarchar(50),
    @Description nvarchar(MAX),
    @Details nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AuditLog]
    SET
        [UserID] = @UserID,
        [AuditLogTypeID] = @AuditLogTypeID,
        [AuthorizationID] = @AuthorizationID,
        [Status] = @Status,
        [Description] = @Description,
        [Details] = @Details,
        [EntityID] = @EntityID,
        [RecordID] = @RecordID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAuditLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuditLog] TO [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the AuditLog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAuditLog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAuditLog
ON [${flyway:defaultSchema}].[AuditLog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AuditLog]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[AuditLog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Audit Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuditLog] TO [cdp_Developer]



/* Index for Foreign Keys for AuthorizationRole */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorization Roles
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key AuthorizationID in table AuthorizationRole
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AuthorizationRole_AuthorizationID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AuthorizationRole]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AuthorizationRole_AuthorizationID ON [${flyway:defaultSchema}].[AuthorizationRole] ([AuthorizationID]);

-- Index for foreign key RoleID in table AuthorizationRole
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AuthorizationRole_RoleID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AuthorizationRole]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AuthorizationRole_RoleID ON [${flyway:defaultSchema}].[AuthorizationRole] ([RoleID]);

/* Index for Foreign Keys for AuditLogType */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Log Types
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ParentID in table AuditLogType
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AuditLogType_ParentID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AuditLogType]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AuditLogType_ParentID ON [${flyway:defaultSchema}].[AuditLogType] ([ParentID]);

-- Index for foreign key AuthorizationID in table AuditLogType
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AuditLogType_AuthorizationID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AuditLogType]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AuditLogType_AuthorizationID ON [${flyway:defaultSchema}].[AuditLogType] ([AuthorizationID]);

/* Index for Foreign Keys for AIModel */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Models
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key AIModelTypeID in table AIModel
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIModel_AIModelTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIModel]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIModel_AIModelTypeID ON [${flyway:defaultSchema}].[AIModel] ([AIModelTypeID]);

/* Base View SQL for Authorization Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorization Roles
-- Item: vwAuthorizationRoles
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Authorization Roles
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AuthorizationRole
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAuthorizationRoles]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAuthorizationRoles]
AS
SELECT
    a.*,
    Authorization_AuthorizationID.[Name] AS [Authorization],
    Role_RoleID.[Name] AS [Role]
FROM
    [${flyway:defaultSchema}].[AuthorizationRole] AS a
INNER JOIN
    [${flyway:defaultSchema}].[Authorization] AS Authorization_AuthorizationID
  ON
    [a].[AuthorizationID] = Authorization_AuthorizationID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Role] AS Role_RoleID
  ON
    [a].[RoleID] = Role_RoleID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAuthorizationRoles] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for Authorization Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorization Roles
-- Item: Permissions for vwAuthorizationRoles
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAuthorizationRoles] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* Base View SQL for Audit Log Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Log Types
-- Item: vwAuditLogTypes
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Audit Log Types
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AuditLogType
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAuditLogTypes]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAuditLogTypes]
AS
SELECT
    a.*,
    AuditLogType_ParentID.[Name] AS [Parent],
    Authorization_AuthorizationID.[Name] AS [Authorization]
FROM
    [${flyway:defaultSchema}].[AuditLogType] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AuditLogType] AS AuditLogType_ParentID
  ON
    [a].[ParentID] = AuditLogType_ParentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Authorization] AS Authorization_AuthorizationID
  ON
    [a].[AuthorizationID] = Authorization_AuthorizationID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAuditLogTypes] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* Base View Permissions SQL for Audit Log Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Log Types
-- Item: Permissions for vwAuditLogTypes
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAuditLogTypes] TO [cdp_Developer], [cdp_UI], [cdp_Integration]

/* Base View SQL for AI Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Models
-- Item: vwAIModels
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      AI Models
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIModel
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIModels]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIModels]
AS
SELECT
    a.*,
    AIModelType_AIModelTypeID.[Name] AS [AIModelType]
FROM
    [${flyway:defaultSchema}].[AIModel] AS a
INNER JOIN
    [${flyway:defaultSchema}].[AIModelType] AS AIModelType_AIModelTypeID
  ON
    [a].[AIModelTypeID] = AIModelType_AIModelTypeID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIModels] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for AI Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Models
-- Item: Permissions for vwAIModels
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIModels] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for AI Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Models
-- Item: spCreateAIModel
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIModel
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIModel]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIModel]
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @Vendor nvarchar(50),
    @AIModelTypeID uniqueidentifier,
    @PowerRank int,
    @IsActive bit,
    @DriverClass nvarchar(100),
    @DriverImportPath nvarchar(255),
    @APIName nvarchar(100),
    @SpeedRank int,
    @CostRank int,
    @ModelSelectionInsights nvarchar(MAX),
    @InputTokenLimit int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[AIModel]
        (
            [Name],
            [Description],
            [Vendor],
            [AIModelTypeID],
            [PowerRank],
            [IsActive],
            [DriverClass],
            [DriverImportPath],
            [APIName],
            [SpeedRank],
            [CostRank],
            [ModelSelectionInsights],
            [InputTokenLimit]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @Description,
            @Vendor,
            @AIModelTypeID,
            @PowerRank,
            @IsActive,
            @DriverClass,
            @DriverImportPath,
            @APIName,
            @SpeedRank,
            @CostRank,
            @ModelSelectionInsights,
            @InputTokenLimit
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIModels] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModel] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Models */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModel] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for AI Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Models
-- Item: spUpdateAIModel
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AIModel
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAIModel]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAIModel]
    @ID uniqueidentifier,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @Vendor nvarchar(50),
    @AIModelTypeID uniqueidentifier,
    @PowerRank int,
    @IsActive bit,
    @DriverClass nvarchar(100),
    @DriverImportPath nvarchar(255),
    @APIName nvarchar(100),
    @SpeedRank int,
    @CostRank int,
    @ModelSelectionInsights nvarchar(MAX),
    @InputTokenLimit int
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIModel]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [Vendor] = @Vendor,
        [AIModelTypeID] = @AIModelTypeID,
        [PowerRank] = @PowerRank,
        [IsActive] = @IsActive,
        [DriverClass] = @DriverClass,
        [DriverImportPath] = @DriverImportPath,
        [APIName] = @APIName,
        [SpeedRank] = @SpeedRank,
        [CostRank] = @CostRank,
        [ModelSelectionInsights] = @ModelSelectionInsights,
        [InputTokenLimit] = @InputTokenLimit
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAIModels]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIModel] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the AIModel table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAIModel
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAIModel
ON [${flyway:defaultSchema}].[AIModel]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIModel]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[AIModel] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for AI Models */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIModel] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for AI Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Models
-- Item: spDeleteAIModel
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AIModel
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteAIModel]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteAIModel]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[AIModel]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIModel] TO [cdp_Developer]
    

/* spDelete Permissions for AI Models */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIModel] TO [cdp_Developer]



/* Index for Foreign Keys for DatasetItem */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dataset Items
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key DatasetID in table DatasetItem
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_DatasetItem_DatasetID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[DatasetItem]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_DatasetItem_DatasetID ON [${flyway:defaultSchema}].[DatasetItem] ([DatasetID]);

-- Index for foreign key EntityID in table DatasetItem
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_DatasetItem_EntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[DatasetItem]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_DatasetItem_EntityID ON [${flyway:defaultSchema}].[DatasetItem] ([EntityID]);

/* Index for Foreign Keys for ConversationDetail */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ConversationID in table ConversationDetail
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ConversationDetail_ConversationID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ConversationDetail]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ConversationDetail_ConversationID ON [${flyway:defaultSchema}].[ConversationDetail] ([ConversationID]);

/* Base View SQL for Dataset Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dataset Items
-- Item: vwDatasetItems
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Dataset Items
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  DatasetItem
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwDatasetItems]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwDatasetItems]
AS
SELECT
    d.*,
    Dataset_DatasetID.[Name] AS [Dataset],
    Entity_EntityID.[Name] AS [Entity]
FROM
    [${flyway:defaultSchema}].[DatasetItem] AS d
INNER JOIN
    [${flyway:defaultSchema}].[Dataset] AS Dataset_DatasetID
  ON
    [d].[DatasetID] = Dataset_DatasetID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [d].[EntityID] = Entity_EntityID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwDatasetItems] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for Dataset Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dataset Items
-- Item: Permissions for vwDatasetItems
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwDatasetItems] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spDelete SQL for Dataset Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dataset Items
-- Item: spDeleteDatasetItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR DatasetItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteDatasetItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteDatasetItem]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[DatasetItem]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for Dataset Items */




/* Base View SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: vwConversationDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Conversation Details
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ConversationDetail
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwConversationDetails]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwConversationDetails]
AS
SELECT
    c.*,
    Conversation_ConversationID.[Name] AS [Conversation]
FROM
    [${flyway:defaultSchema}].[ConversationDetail] AS c
INNER JOIN
    [${flyway:defaultSchema}].[Conversation] AS Conversation_ConversationID
  ON
    [c].[ConversationID] = Conversation_ConversationID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwConversationDetails] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* Base View Permissions SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: Permissions for vwConversationDetails
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwConversationDetails] TO [cdp_Developer], [cdp_UI], [cdp_Integration]

/* spCreate SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: spCreateConversationDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ConversationDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateConversationDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateConversationDetail]
    @ConversationID uniqueidentifier,
    @ExternalID nvarchar(100),
    @Role nvarchar(20),
    @Message nvarchar(MAX),
    @Error nvarchar(MAX),
    @HiddenToUser bit,
    @UserRating int,
    @UserFeedback nvarchar(MAX),
    @ReflectionInsights nvarchar(MAX),
    @SummaryOfEarlierConversation nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ConversationDetail]
        (
            [ConversationID],
            [ExternalID],
            [Role],
            [Message],
            [Error],
            [HiddenToUser],
            [UserRating],
            [UserFeedback],
            [ReflectionInsights],
            [SummaryOfEarlierConversation]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @ConversationID,
            @ExternalID,
            @Role,
            @Message,
            @Error,
            @HiddenToUser,
            @UserRating,
            @UserFeedback,
            @ReflectionInsights,
            @SummaryOfEarlierConversation
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwConversationDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for Conversation Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spUpdate SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: spUpdateConversationDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ConversationDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateConversationDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateConversationDetail]
    @ID uniqueidentifier,
    @ConversationID uniqueidentifier,
    @ExternalID nvarchar(100),
    @Role nvarchar(20),
    @Message nvarchar(MAX),
    @Error nvarchar(MAX),
    @HiddenToUser bit,
    @UserRating int,
    @UserFeedback nvarchar(MAX),
    @ReflectionInsights nvarchar(MAX),
    @SummaryOfEarlierConversation nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ConversationDetail]
    SET
        [ConversationID] = @ConversationID,
        [ExternalID] = @ExternalID,
        [Role] = @Role,
        [Message] = @Message,
        [Error] = @Error,
        [HiddenToUser] = @HiddenToUser,
        [UserRating] = @UserRating,
        [UserFeedback] = @UserFeedback,
        [ReflectionInsights] = @ReflectionInsights,
        [SummaryOfEarlierConversation] = @SummaryOfEarlierConversation
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwConversationDetails]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ConversationDetail table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateConversationDetail
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateConversationDetail
ON [${flyway:defaultSchema}].[ConversationDetail]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ConversationDetail]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ConversationDetail] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Conversation Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spDelete SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: spDeleteConversationDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ConversationDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteConversationDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteConversationDetail]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ConversationDetail]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spDelete Permissions for Conversation Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* Index for Foreign Keys for Conversation */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversations
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key UserID in table Conversation
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_Conversation_UserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[Conversation]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_Conversation_UserID ON [${flyway:defaultSchema}].[Conversation] ([UserID]);

-- Index for foreign key LinkedEntityID in table Conversation
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_Conversation_LinkedEntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[Conversation]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_Conversation_LinkedEntityID ON [${flyway:defaultSchema}].[Conversation] ([LinkedEntityID]);

-- Index for foreign key DataContextID in table Conversation
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_Conversation_DataContextID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[Conversation]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_Conversation_DataContextID ON [${flyway:defaultSchema}].[Conversation] ([DataContextID]);

/* Index for Foreign Keys for UserNotification */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Notifications
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key UserID in table UserNotification
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_UserNotification_UserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[UserNotification]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_UserNotification_UserID ON [${flyway:defaultSchema}].[UserNotification] ([UserID]);

-- Index for foreign key ResourceTypeID in table UserNotification
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_UserNotification_ResourceTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[UserNotification]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_UserNotification_ResourceTypeID ON [${flyway:defaultSchema}].[UserNotification] ([ResourceTypeID]);

/* Index for Foreign Keys for RecordMergeLog */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Logs
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key EntityID in table RecordMergeLog
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_RecordMergeLog_EntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[RecordMergeLog]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_RecordMergeLog_EntityID ON [${flyway:defaultSchema}].[RecordMergeLog] ([EntityID]);

-- Index for foreign key InitiatedByUserID in table RecordMergeLog
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_RecordMergeLog_InitiatedByUserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[RecordMergeLog]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_RecordMergeLog_InitiatedByUserID ON [${flyway:defaultSchema}].[RecordMergeLog] ([InitiatedByUserID]);

-- Index for foreign key ApprovedByUserID in table RecordMergeLog
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_RecordMergeLog_ApprovedByUserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[RecordMergeLog]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_RecordMergeLog_ApprovedByUserID ON [${flyway:defaultSchema}].[RecordMergeLog] ([ApprovedByUserID]);

/* Base View SQL for Conversations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversations
-- Item: vwConversations
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Conversations
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  Conversation
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwConversations]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwConversations]
AS
SELECT
    c.*,
    User_UserID.[Name] AS [User],
    Entity_LinkedEntityID.[Name] AS [LinkedEntity],
    DataContext_DataContextID.[Name] AS [DataContext]
FROM
    [${flyway:defaultSchema}].[Conversation] AS c
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [c].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_LinkedEntityID
  ON
    [c].[LinkedEntityID] = Entity_LinkedEntityID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[DataContext] AS DataContext_DataContextID
  ON
    [c].[DataContextID] = DataContext_DataContextID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwConversations] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* Base View Permissions SQL for Conversations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversations
-- Item: Permissions for vwConversations
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwConversations] TO [cdp_Developer], [cdp_UI], [cdp_Integration]

/* spCreate SQL for Conversations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversations
-- Item: spCreateConversation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Conversation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateConversation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateConversation]
    @UserID uniqueidentifier,
    @ExternalID nvarchar(500),
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Type nvarchar(50),
    @IsArchived bit,
    @LinkedEntityID uniqueidentifier,
    @LinkedRecordID nvarchar(500),
    @DataContextID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[Conversation]
        (
            [UserID],
            [ExternalID],
            [Name],
            [Description],
            [Type],
            [IsArchived],
            [LinkedEntityID],
            [LinkedRecordID],
            [DataContextID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @UserID,
            @ExternalID,
            @Name,
            @Description,
            @Type,
            @IsArchived,
            @LinkedEntityID,
            @LinkedRecordID,
            @DataContextID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwConversations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversation] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for Conversations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversation] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spUpdate SQL for Conversations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversations
-- Item: spUpdateConversation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Conversation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateConversation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateConversation]
    @ID uniqueidentifier,
    @UserID uniqueidentifier,
    @ExternalID nvarchar(500),
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Type nvarchar(50),
    @IsArchived bit,
    @LinkedEntityID uniqueidentifier,
    @LinkedRecordID nvarchar(500),
    @DataContextID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Conversation]
    SET
        [UserID] = @UserID,
        [ExternalID] = @ExternalID,
        [Name] = @Name,
        [Description] = @Description,
        [Type] = @Type,
        [IsArchived] = @IsArchived,
        [LinkedEntityID] = @LinkedEntityID,
        [LinkedRecordID] = @LinkedRecordID,
        [DataContextID] = @DataContextID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwConversations]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateConversation] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the Conversation table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateConversation
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateConversation
ON [${flyway:defaultSchema}].[Conversation]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Conversation]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[Conversation] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Conversations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateConversation] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spDelete Permissions for Conversations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteConversation] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* Base View SQL for User Notifications */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Notifications
-- Item: vwUserNotifications
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      User Notifications
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  UserNotification
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwUserNotifications]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwUserNotifications]
AS
SELECT
    u.*,
    User_UserID.[Name] AS [User],
    ResourceType_ResourceTypeID.[Name] AS [ResourceType]
FROM
    [${flyway:defaultSchema}].[UserNotification] AS u
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [u].[UserID] = User_UserID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ResourceType] AS ResourceType_ResourceTypeID
  ON
    [u].[ResourceTypeID] = ResourceType_ResourceTypeID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwUserNotifications] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    

/* Base View Permissions SQL for User Notifications */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Notifications
-- Item: Permissions for vwUserNotifications
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwUserNotifications] TO [cdp_Integration], [cdp_Developer], [cdp_UI]

/* spCreate SQL for User Notifications */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Notifications
-- Item: spCreateUserNotification
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserNotification
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserNotification]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserNotification]
    @UserID uniqueidentifier,
    @Title nvarchar(255),
    @Message nvarchar(MAX),
    @ResourceTypeID uniqueidentifier,
    @ResourceConfiguration nvarchar(MAX),
    @Unread bit,
    @ReadAt datetime,
    @ResourceRecordID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[UserNotification]
        (
            [UserID],
            [Title],
            [Message],
            [ResourceTypeID],
            [ResourceConfiguration],
            [Unread],
            [ReadAt],
            [ResourceRecordID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @UserID,
            @Title,
            @Message,
            @ResourceTypeID,
            @ResourceConfiguration,
            @Unread,
            @ReadAt,
            @ResourceRecordID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserNotifications] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserNotification] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    

/* spCreate Permissions for User Notifications */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserNotification] TO [cdp_Integration], [cdp_Developer], [cdp_UI]



/* spUpdate SQL for User Notifications */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Notifications
-- Item: spUpdateUserNotification
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR UserNotification
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateUserNotification]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateUserNotification]
    @ID uniqueidentifier,
    @UserID uniqueidentifier,
    @Title nvarchar(255),
    @Message nvarchar(MAX),
    @ResourceTypeID uniqueidentifier,
    @ResourceConfiguration nvarchar(MAX),
    @Unread bit,
    @ReadAt datetime,
    @ResourceRecordID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserNotification]
    SET
        [UserID] = @UserID,
        [Title] = @Title,
        [Message] = @Message,
        [ResourceTypeID] = @ResourceTypeID,
        [ResourceConfiguration] = @ResourceConfiguration,
        [Unread] = @Unread,
        [ReadAt] = @ReadAt,
        [ResourceRecordID] = @ResourceRecordID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwUserNotifications]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserNotification] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the UserNotification table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateUserNotification
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateUserNotification
ON [${flyway:defaultSchema}].[UserNotification]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserNotification]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[UserNotification] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for User Notifications */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserNotification] TO [cdp_Integration], [cdp_Developer], [cdp_UI]



/* spDelete SQL for User Notifications */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Notifications
-- Item: spDeleteUserNotification
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR UserNotification
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteUserNotification]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteUserNotification]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[UserNotification]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for User Notifications */




/* Base View SQL for Record Merge Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Logs
-- Item: vwRecordMergeLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Record Merge Logs
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  RecordMergeLog
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwRecordMergeLogs]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwRecordMergeLogs]
AS
SELECT
    r.*,
    Entity_EntityID.[Name] AS [Entity],
    User_InitiatedByUserID.[Name] AS [InitiatedByUser],
    User_ApprovedByUserID.[Name] AS [ApprovedByUser]
FROM
    [${flyway:defaultSchema}].[RecordMergeLog] AS r
INNER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [r].[EntityID] = Entity_EntityID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_InitiatedByUserID
  ON
    [r].[InitiatedByUserID] = User_InitiatedByUserID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[User] AS User_ApprovedByUserID
  ON
    [r].[ApprovedByUserID] = User_ApprovedByUserID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwRecordMergeLogs] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    

/* Base View Permissions SQL for Record Merge Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Logs
-- Item: Permissions for vwRecordMergeLogs
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwRecordMergeLogs] TO [cdp_Integration], [cdp_Developer], [cdp_UI]

/* spCreate SQL for Record Merge Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Logs
-- Item: spCreateRecordMergeLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecordMergeLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecordMergeLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecordMergeLog]
    @EntityID uniqueidentifier,
    @SurvivingRecordID nvarchar(450),
    @InitiatedByUserID uniqueidentifier,
    @ApprovalStatus nvarchar(10),
    @ApprovedByUserID uniqueidentifier,
    @ProcessingStatus nvarchar(10),
    @ProcessingStartedAt datetime,
    @ProcessingEndedAt datetime,
    @ProcessingLog nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[RecordMergeLog]
        (
            [EntityID],
            [SurvivingRecordID],
            [InitiatedByUserID],
            [ApprovalStatus],
            [ApprovedByUserID],
            [ProcessingStatus],
            [ProcessingStartedAt],
            [ProcessingEndedAt],
            [ProcessingLog],
            [Comments]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @EntityID,
            @SurvivingRecordID,
            @InitiatedByUserID,
            @ApprovalStatus,
            @ApprovedByUserID,
            @ProcessingStatus,
            @ProcessingStartedAt,
            @ProcessingEndedAt,
            @ProcessingLog,
            @Comments
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecordMergeLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Record Merge Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Record Merge Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Logs
-- Item: spUpdateRecordMergeLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR RecordMergeLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateRecordMergeLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateRecordMergeLog]
    @ID uniqueidentifier,
    @EntityID uniqueidentifier,
    @SurvivingRecordID nvarchar(450),
    @InitiatedByUserID uniqueidentifier,
    @ApprovalStatus nvarchar(10),
    @ApprovedByUserID uniqueidentifier,
    @ProcessingStatus nvarchar(10),
    @ProcessingStartedAt datetime,
    @ProcessingEndedAt datetime,
    @ProcessingLog nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecordMergeLog]
    SET
        [EntityID] = @EntityID,
        [SurvivingRecordID] = @SurvivingRecordID,
        [InitiatedByUserID] = @InitiatedByUserID,
        [ApprovalStatus] = @ApprovalStatus,
        [ApprovedByUserID] = @ApprovedByUserID,
        [ProcessingStatus] = @ProcessingStatus,
        [ProcessingStartedAt] = @ProcessingStartedAt,
        [ProcessingEndedAt] = @ProcessingEndedAt,
        [ProcessingLog] = @ProcessingLog,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwRecordMergeLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the RecordMergeLog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateRecordMergeLog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateRecordMergeLog
ON [${flyway:defaultSchema}].[RecordMergeLog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecordMergeLog]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[RecordMergeLog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Record Merge Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]



/* Index for Foreign Keys for QueryPermission */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Permissions
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key QueryID in table QueryPermission
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_QueryPermission_QueryID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[QueryPermission]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_QueryPermission_QueryID ON [${flyway:defaultSchema}].[QueryPermission] ([QueryID]);

-- Index for foreign key RoleID in table QueryPermission
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_QueryPermission_RoleID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[QueryPermission]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_QueryPermission_RoleID ON [${flyway:defaultSchema}].[QueryPermission] ([RoleID]);

/* Base View SQL for Query Permissions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Permissions
-- Item: vwQueryPermissions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Query Permissions
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  QueryPermission
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwQueryPermissions]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwQueryPermissions]
AS
SELECT
    q.*,
    Query_QueryID.[Name] AS [Query],
    Role_RoleID.[Name] AS [Role]
FROM
    [${flyway:defaultSchema}].[QueryPermission] AS q
INNER JOIN
    [${flyway:defaultSchema}].[Query] AS Query_QueryID
  ON
    [q].[QueryID] = Query_QueryID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Role] AS Role_RoleID
  ON
    [q].[RoleID] = Role_RoleID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwQueryPermissions] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for Query Permissions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Permissions
-- Item: Permissions for vwQueryPermissions
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwQueryPermissions] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for Query Permissions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Permissions
-- Item: spCreateQueryPermission
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR QueryPermission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueryPermission]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueryPermission]
    @QueryID uniqueidentifier,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[QueryPermission]
        (
            [QueryID],
            [RoleID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @QueryID,
            @RoleID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueryPermissions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryPermission] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Query Permissions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryPermission] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Query Permissions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Permissions
-- Item: spUpdateQueryPermission
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR QueryPermission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateQueryPermission]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateQueryPermission]
    @ID uniqueidentifier,
    @QueryID uniqueidentifier,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[QueryPermission]
    SET
        [QueryID] = @QueryID,
        [RoleID] = @RoleID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwQueryPermissions]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateQueryPermission] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the QueryPermission table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateQueryPermission
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateQueryPermission
ON [${flyway:defaultSchema}].[QueryPermission]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[QueryPermission]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[QueryPermission] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Query Permissions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateQueryPermission] TO [cdp_Developer], [cdp_Integration]





/* spDelete SQL for Query Permissions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Permissions
-- Item: spDeleteQueryPermission
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR QueryPermission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteQueryPermission]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteQueryPermission]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[QueryPermission]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteQueryPermission] TO [cdp_Integration]
    

/* spDelete Permissions for Query Permissions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteQueryPermission] TO [cdp_Integration]



/* Index for Foreign Keys for EntityRecordDocument */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Record Documents
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key EntityID in table EntityRecordDocument
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_EntityRecordDocument_EntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[EntityRecordDocument]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_EntityRecordDocument_EntityID ON [${flyway:defaultSchema}].[EntityRecordDocument] ([EntityID]);

-- Index for foreign key EntityDocumentID in table EntityRecordDocument
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_EntityRecordDocument_EntityDocumentID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[EntityRecordDocument]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_EntityRecordDocument_EntityDocumentID ON [${flyway:defaultSchema}].[EntityRecordDocument] ([EntityDocumentID]);

-- Index for foreign key VectorIndexID in table EntityRecordDocument
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_EntityRecordDocument_VectorIndexID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[EntityRecordDocument]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_EntityRecordDocument_VectorIndexID ON [${flyway:defaultSchema}].[EntityRecordDocument] ([VectorIndexID]);

/* Base View SQL for Entity Record Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Record Documents
-- Item: vwEntityRecordDocuments
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Entity Record Documents
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  EntityRecordDocument
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwEntityRecordDocuments]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwEntityRecordDocuments]
AS
SELECT
    e.*,
    Entity_EntityID.[Name] AS [Entity],
    EntityDocument_EntityDocumentID.[Name] AS [EntityDocument],
    VectorIndex_VectorIndexID.[Name] AS [VectorIndex]
FROM
    [${flyway:defaultSchema}].[EntityRecordDocument] AS e
INNER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [e].[EntityID] = Entity_EntityID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[EntityDocument] AS EntityDocument_EntityDocumentID
  ON
    [e].[EntityDocumentID] = EntityDocument_EntityDocumentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[VectorIndex] AS VectorIndex_VectorIndexID
  ON
    [e].[VectorIndexID] = VectorIndex_VectorIndexID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwEntityRecordDocuments] TO [cdp_Developer], [cdp_Integration], [cdp_UI]
    

/* Base View Permissions SQL for Entity Record Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Record Documents
-- Item: Permissions for vwEntityRecordDocuments
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwEntityRecordDocuments] TO [cdp_Developer], [cdp_Integration], [cdp_UI]

/* spCreate SQL for Entity Record Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Record Documents
-- Item: spCreateEntityRecordDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityRecordDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityRecordDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityRecordDocument]
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @EntityDocumentID uniqueidentifier,
    @DocumentText nvarchar(MAX),
    @VectorIndexID uniqueidentifier,
    @VectorID nvarchar(50),
    @VectorJSON nvarchar(MAX),
    @EntityRecordUpdatedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[EntityRecordDocument]
        (
            [EntityID],
            [RecordID],
            [EntityDocumentID],
            [DocumentText],
            [VectorIndexID],
            [VectorID],
            [VectorJSON],
            [EntityRecordUpdatedAt]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @EntityID,
            @RecordID,
            @EntityDocumentID,
            @DocumentText,
            @VectorIndexID,
            @VectorID,
            @VectorJSON,
            @EntityRecordUpdatedAt
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityRecordDocuments] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Entity Record Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Entity Record Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Record Documents
-- Item: spUpdateEntityRecordDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EntityRecordDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEntityRecordDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEntityRecordDocument]
    @ID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @EntityDocumentID uniqueidentifier,
    @DocumentText nvarchar(MAX),
    @VectorIndexID uniqueidentifier,
    @VectorID nvarchar(50),
    @VectorJSON nvarchar(MAX),
    @EntityRecordUpdatedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityRecordDocument]
    SET
        [EntityID] = @EntityID,
        [RecordID] = @RecordID,
        [EntityDocumentID] = @EntityDocumentID,
        [DocumentText] = @DocumentText,
        [VectorIndexID] = @VectorIndexID,
        [VectorID] = @VectorID,
        [VectorJSON] = @VectorJSON,
        [EntityRecordUpdatedAt] = @EntityRecordUpdatedAt
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEntityRecordDocuments]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the EntityRecordDocument table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEntityRecordDocument
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEntityRecordDocument
ON [${flyway:defaultSchema}].[EntityRecordDocument]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityRecordDocument]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EntityRecordDocument] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Entity Record Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]



/* Index for Foreign Keys for EntityDocument */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Documents
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key TypeID in table EntityDocument
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_EntityDocument_TypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[EntityDocument]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_EntityDocument_TypeID ON [${flyway:defaultSchema}].[EntityDocument] ([TypeID]);

-- Index for foreign key EntityID in table EntityDocument
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_EntityDocument_EntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[EntityDocument]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_EntityDocument_EntityID ON [${flyway:defaultSchema}].[EntityDocument] ([EntityID]);

-- Index for foreign key VectorDatabaseID in table EntityDocument
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_EntityDocument_VectorDatabaseID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[EntityDocument]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_EntityDocument_VectorDatabaseID ON [${flyway:defaultSchema}].[EntityDocument] ([VectorDatabaseID]);

-- Index for foreign key TemplateID in table EntityDocument
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_EntityDocument_TemplateID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[EntityDocument]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_EntityDocument_TemplateID ON [${flyway:defaultSchema}].[EntityDocument] ([TemplateID]);

-- Index for foreign key AIModelID in table EntityDocument
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_EntityDocument_AIModelID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[EntityDocument]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_EntityDocument_AIModelID ON [${flyway:defaultSchema}].[EntityDocument] ([AIModelID]);

/* Index for Foreign Keys for UserViewCategory */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Categories
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ParentID in table UserViewCategory
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_UserViewCategory_ParentID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[UserViewCategory]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_UserViewCategory_ParentID ON [${flyway:defaultSchema}].[UserViewCategory] ([ParentID]);

-- Index for foreign key EntityID in table UserViewCategory
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_UserViewCategory_EntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[UserViewCategory]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_UserViewCategory_EntityID ON [${flyway:defaultSchema}].[UserViewCategory] ([EntityID]);

-- Index for foreign key UserID in table UserViewCategory
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_UserViewCategory_UserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[UserViewCategory]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_UserViewCategory_UserID ON [${flyway:defaultSchema}].[UserViewCategory] ([UserID]);

/* Base View SQL for Entity Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Documents
-- Item: vwEntityDocuments
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Entity Documents
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  EntityDocument
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwEntityDocuments]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwEntityDocuments]
AS
SELECT
    e.*,
    EntityDocumentType_TypeID.[Name] AS [Type],
    Entity_EntityID.[Name] AS [Entity],
    VectorDatabase_VectorDatabaseID.[Name] AS [VectorDatabase],
    Template_TemplateID.[Name] AS [Template],
    AIModel_AIModelID.[Name] AS [AIModel]
FROM
    [${flyway:defaultSchema}].[EntityDocument] AS e
INNER JOIN
    [${flyway:defaultSchema}].[EntityDocumentType] AS EntityDocumentType_TypeID
  ON
    [e].[TypeID] = EntityDocumentType_TypeID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [e].[EntityID] = Entity_EntityID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[VectorDatabase] AS VectorDatabase_VectorDatabaseID
  ON
    [e].[VectorDatabaseID] = VectorDatabase_VectorDatabaseID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Template] AS Template_TemplateID
  ON
    [e].[TemplateID] = Template_TemplateID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[AIModel] AS AIModel_AIModelID
  ON
    [e].[AIModelID] = AIModel_AIModelID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwEntityDocuments] TO [cdp_Integration], [cdp_UI], [cdp_Developer]
    

/* Base View Permissions SQL for Entity Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Documents
-- Item: Permissions for vwEntityDocuments
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwEntityDocuments] TO [cdp_Integration], [cdp_UI], [cdp_Developer]

/* spCreate SQL for Entity Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Documents
-- Item: spCreateEntityDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityDocument]
    @Name nvarchar(250),
    @TypeID uniqueidentifier,
    @EntityID uniqueidentifier,
    @VectorDatabaseID uniqueidentifier,
    @Status nvarchar(15),
    @TemplateID uniqueidentifier,
    @AIModelID uniqueidentifier,
    @PotentialMatchThreshold numeric(12, 11),
    @AbsoluteMatchThreshold numeric(12, 11)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[EntityDocument]
        (
            [Name],
            [TypeID],
            [EntityID],
            [VectorDatabaseID],
            [Status],
            [TemplateID],
            [AIModelID],
            [PotentialMatchThreshold],
            [AbsoluteMatchThreshold]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @TypeID,
            @EntityID,
            @VectorDatabaseID,
            @Status,
            @TemplateID,
            @AIModelID,
            @PotentialMatchThreshold,
            @AbsoluteMatchThreshold
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityDocuments] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocument] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocument] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Entity Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Documents
-- Item: spUpdateEntityDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EntityDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEntityDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEntityDocument]
    @ID uniqueidentifier,
    @Name nvarchar(250),
    @TypeID uniqueidentifier,
    @EntityID uniqueidentifier,
    @VectorDatabaseID uniqueidentifier,
    @Status nvarchar(15),
    @TemplateID uniqueidentifier,
    @AIModelID uniqueidentifier,
    @PotentialMatchThreshold numeric(12, 11),
    @AbsoluteMatchThreshold numeric(12, 11)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityDocument]
    SET
        [Name] = @Name,
        [TypeID] = @TypeID,
        [EntityID] = @EntityID,
        [VectorDatabaseID] = @VectorDatabaseID,
        [Status] = @Status,
        [TemplateID] = @TemplateID,
        [AIModelID] = @AIModelID,
        [PotentialMatchThreshold] = @PotentialMatchThreshold,
        [AbsoluteMatchThreshold] = @AbsoluteMatchThreshold
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEntityDocuments]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityDocument] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the EntityDocument table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEntityDocument
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEntityDocument
ON [${flyway:defaultSchema}].[EntityDocument]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityDocument]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EntityDocument] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Entity Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityDocument] TO [cdp_Integration], [cdp_Developer]



/* Base View SQL for User View Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Categories
-- Item: vwUserViewCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      User View Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  UserViewCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwUserViewCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwUserViewCategories]
AS
SELECT
    u.*,
    UserViewCategory_ParentID.[Name] AS [Parent],
    Entity_EntityID.[Name] AS [Entity],
    User_UserID.[Name] AS [User]
FROM
    [${flyway:defaultSchema}].[UserViewCategory] AS u
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[UserViewCategory] AS UserViewCategory_ParentID
  ON
    [u].[ParentID] = UserViewCategory_ParentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [u].[EntityID] = Entity_EntityID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [u].[UserID] = User_UserID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwUserViewCategories] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for User View Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Categories
-- Item: Permissions for vwUserViewCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwUserViewCategories] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for User View Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Categories
-- Item: spCreateUserViewCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserViewCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserViewCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserViewCategory]
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @EntityID uniqueidentifier,
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[UserViewCategory]
        (
            [Name],
            [Description],
            [ParentID],
            [EntityID],
            [UserID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @Description,
            @ParentID,
            @EntityID,
            @UserID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserViewCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewCategory] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for User View Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewCategory] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for User View Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Categories
-- Item: spUpdateUserViewCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR UserViewCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateUserViewCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateUserViewCategory]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @EntityID uniqueidentifier,
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserViewCategory]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [ParentID] = @ParentID,
        [EntityID] = @EntityID,
        [UserID] = @UserID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwUserViewCategories]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserViewCategory] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the UserViewCategory table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateUserViewCategory
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateUserViewCategory
ON [${flyway:defaultSchema}].[UserViewCategory]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserViewCategory]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[UserViewCategory] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for User View Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserViewCategory] TO [cdp_UI], [cdp_Developer], [cdp_Integration]



/* spDelete SQL for User View Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Categories
-- Item: spDeleteUserViewCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR UserViewCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteUserViewCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteUserViewCategory]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[UserViewCategory]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserViewCategory] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for User View Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserViewCategory] TO [cdp_UI], [cdp_Developer], [cdp_Integration]



/* Index for Foreign Keys for ApplicationSetting */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Application Settings
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ApplicationID in table ApplicationSetting
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ApplicationSetting_ApplicationID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ApplicationSetting]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ApplicationSetting_ApplicationID ON [${flyway:defaultSchema}].[ApplicationSetting] ([ApplicationID]);

/* Base View SQL for Application Settings */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Application Settings
-- Item: vwApplicationSettings
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Application Settings
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ApplicationSetting
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwApplicationSettings]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwApplicationSettings]
AS
SELECT
    a.*,
    Application_ApplicationID.[Name] AS [Application]
FROM
    [${flyway:defaultSchema}].[ApplicationSetting] AS a
INNER JOIN
    [${flyway:defaultSchema}].[Application] AS Application_ApplicationID
  ON
    [a].[ApplicationID] = Application_ApplicationID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwApplicationSettings] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for Application Settings */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Application Settings
-- Item: Permissions for vwApplicationSettings
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwApplicationSettings] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* spCreate SQL for Application Settings */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Application Settings
-- Item: spCreateApplicationSetting
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ApplicationSetting
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateApplicationSetting]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateApplicationSetting]
    @ApplicationID uniqueidentifier,
    @Name nvarchar(100),
    @Value nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ApplicationSetting]
        (
            [ApplicationID],
            [Name],
            [Value],
            [Comments]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @ApplicationID,
            @Name,
            @Value,
            @Comments
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwApplicationSettings] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateApplicationSetting] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Application Settings */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateApplicationSetting] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Application Settings */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Application Settings
-- Item: spUpdateApplicationSetting
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ApplicationSetting
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateApplicationSetting]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateApplicationSetting]
    @ID uniqueidentifier,
    @ApplicationID uniqueidentifier,
    @Name nvarchar(100),
    @Value nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ApplicationSetting]
    SET
        [ApplicationID] = @ApplicationID,
        [Name] = @Name,
        [Value] = @Value,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwApplicationSettings]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateApplicationSetting] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ApplicationSetting table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateApplicationSetting
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateApplicationSetting
ON [${flyway:defaultSchema}].[ApplicationSetting]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ApplicationSetting]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ApplicationSetting] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Application Settings */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateApplicationSetting] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Application Settings */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Application Settings
-- Item: spDeleteApplicationSetting
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ApplicationSetting
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteApplicationSetting]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteApplicationSetting]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ApplicationSetting]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteApplicationSetting] TO [cdp_Integration]
    

/* spDelete Permissions for Application Settings */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteApplicationSetting] TO [cdp_Integration]



/* Index for Foreign Keys for ActionAuthorization */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Authorizations
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ActionID in table ActionAuthorization
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ActionAuthorization_ActionID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ActionAuthorization]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ActionAuthorization_ActionID ON [${flyway:defaultSchema}].[ActionAuthorization] ([ActionID]);

-- Index for foreign key AuthorizationID in table ActionAuthorization
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ActionAuthorization_AuthorizationID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ActionAuthorization]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ActionAuthorization_AuthorizationID ON [${flyway:defaultSchema}].[ActionAuthorization] ([AuthorizationID]);

/* Base View SQL for Action Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Authorizations
-- Item: vwActionAuthorizations
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Action Authorizations
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ActionAuthorization
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwActionAuthorizations]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwActionAuthorizations]
AS
SELECT
    a.*,
    Action_ActionID.[Name] AS [Action],
    Authorization_AuthorizationID.[Name] AS [Authorization]
FROM
    [${flyway:defaultSchema}].[ActionAuthorization] AS a
INNER JOIN
    [${flyway:defaultSchema}].[Action] AS Action_ActionID
  ON
    [a].[ActionID] = Action_ActionID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[Authorization] AS Authorization_AuthorizationID
  ON
    [a].[AuthorizationID] = Authorization_AuthorizationID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwActionAuthorizations] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for Action Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Authorizations
-- Item: Permissions for vwActionAuthorizations
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwActionAuthorizations] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* spCreate SQL for Action Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Authorizations
-- Item: spCreateActionAuthorization
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionAuthorization
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionAuthorization]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionAuthorization]
    @ActionID uniqueidentifier,
    @AuthorizationID uniqueidentifier,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ActionAuthorization]
        (
            [ActionID],
            [AuthorizationID],
            [Comments]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @ActionID,
            @AuthorizationID,
            @Comments
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionAuthorizations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionAuthorization] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Authorizations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionAuthorization] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Action Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Authorizations
-- Item: spUpdateActionAuthorization
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ActionAuthorization
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateActionAuthorization]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateActionAuthorization]
    @ID uniqueidentifier,
    @ActionID uniqueidentifier,
    @AuthorizationID uniqueidentifier,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ActionAuthorization]
    SET
        [ActionID] = @ActionID,
        [AuthorizationID] = @AuthorizationID,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwActionAuthorizations]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateActionAuthorization] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ActionAuthorization table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateActionAuthorization
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateActionAuthorization
ON [${flyway:defaultSchema}].[ActionAuthorization]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ActionAuthorization]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ActionAuthorization] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Action Authorizations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateActionAuthorization] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Action Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Authorizations
-- Item: spDeleteActionAuthorization
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ActionAuthorization
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteActionAuthorization]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteActionAuthorization]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ActionAuthorization]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteActionAuthorization] TO [cdp_Integration]
    

/* spDelete Permissions for Action Authorizations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteActionAuthorization] TO [cdp_Integration]



/* Index for Foreign Keys for ListCategory */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Categories
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ParentID in table ListCategory
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ListCategory_ParentID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ListCategory]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ListCategory_ParentID ON [${flyway:defaultSchema}].[ListCategory] ([ParentID]);

-- Index for foreign key UserID in table ListCategory
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ListCategory_UserID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ListCategory]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ListCategory_UserID ON [${flyway:defaultSchema}].[ListCategory] ([UserID]);

/* Index for Foreign Keys for CommunicationProvider */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Providers
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------


/* Base View SQL for List Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Categories
-- Item: vwListCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      List Categories
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ListCategory
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwListCategories]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwListCategories]
AS
SELECT
    l.*,
    ListCategory_ParentID.[Name] AS [Parent],
    User_UserID.[Name] AS [User]
FROM
    [${flyway:defaultSchema}].[ListCategory] AS l
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[ListCategory] AS ListCategory_ParentID
  ON
    [l].[ParentID] = ListCategory_ParentID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[User] AS User_UserID
  ON
    [l].[UserID] = User_UserID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwListCategories] TO [cdp_Developer], [cdp_Integration], [cdp_UI]
    

/* Base View Permissions SQL for List Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Categories
-- Item: Permissions for vwListCategories
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwListCategories] TO [cdp_Developer], [cdp_Integration], [cdp_UI]

/* spCreate SQL for List Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Categories
-- Item: spCreateListCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ListCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateListCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateListCategory]
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ListCategory]
        (
            [Name],
            [Description],
            [ParentID],
            [UserID]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @Description,
            @ParentID,
            @UserID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwListCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateListCategory] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for List Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateListCategory] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for List Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Categories
-- Item: spUpdateListCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ListCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateListCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateListCategory]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ListCategory]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [ParentID] = @ParentID,
        [UserID] = @UserID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwListCategories]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateListCategory] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ListCategory table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateListCategory
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateListCategory
ON [${flyway:defaultSchema}].[ListCategory]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ListCategory]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ListCategory] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for List Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateListCategory] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for List Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Categories
-- Item: spDeleteListCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ListCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteListCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteListCategory]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ListCategory]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteListCategory] TO [cdp_Integration]
    

/* spDelete Permissions for List Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteListCategory] TO [cdp_Integration]



/* Base View SQL for Communication Providers */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Providers
-- Item: vwCommunicationProviders
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Communication Providers
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  CommunicationProvider
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwCommunicationProviders]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwCommunicationProviders]
AS
SELECT
    c.*
FROM
    [${flyway:defaultSchema}].[CommunicationProvider] AS c
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwCommunicationProviders] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for Communication Providers */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Providers
-- Item: Permissions for vwCommunicationProviders
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwCommunicationProviders] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* spCreate SQL for Communication Providers */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Providers
-- Item: spCreateCommunicationProvider
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CommunicationProvider
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCommunicationProvider]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCommunicationProvider]
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Status nvarchar(20),
    @SupportsSending bit,
    @SupportsReceiving bit,
    @SupportsScheduledSending bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[CommunicationProvider]
        (
            [Name],
            [Description],
            [Status],
            [SupportsSending],
            [SupportsReceiving],
            [SupportsScheduledSending]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @Description,
            @Status,
            @SupportsSending,
            @SupportsReceiving,
            @SupportsScheduledSending
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCommunicationProviders] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationProvider] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Communication Providers */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationProvider] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Communication Providers */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Providers
-- Item: spUpdateCommunicationProvider
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR CommunicationProvider
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateCommunicationProvider]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateCommunicationProvider]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Status nvarchar(20),
    @SupportsSending bit,
    @SupportsReceiving bit,
    @SupportsScheduledSending bit
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CommunicationProvider]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [Status] = @Status,
        [SupportsSending] = @SupportsSending,
        [SupportsReceiving] = @SupportsReceiving,
        [SupportsScheduledSending] = @SupportsScheduledSending
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwCommunicationProviders]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCommunicationProvider] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the CommunicationProvider table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateCommunicationProvider
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateCommunicationProvider
ON [${flyway:defaultSchema}].[CommunicationProvider]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CommunicationProvider]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[CommunicationProvider] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Communication Providers */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCommunicationProvider] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Communication Providers */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Providers
-- Item: spDeleteCommunicationProvider
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR CommunicationProvider
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteCommunicationProvider]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteCommunicationProvider]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[CommunicationProvider]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCommunicationProvider] TO [cdp_Integration]
    

/* spDelete Permissions for Communication Providers */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCommunicationProvider] TO [cdp_Integration]



/* Index for Foreign Keys for TemplateParam */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key TemplateID in table TemplateParam
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_TemplateParam_TemplateID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[TemplateParam]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_TemplateParam_TemplateID ON [${flyway:defaultSchema}].[TemplateParam] ([TemplateID]);

-- Index for foreign key EntityID in table TemplateParam
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_TemplateParam_EntityID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[TemplateParam]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_TemplateParam_EntityID ON [${flyway:defaultSchema}].[TemplateParam] ([EntityID]);

/* Base View SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: vwTemplateParams
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Template Params
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  TemplateParam
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwTemplateParams]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwTemplateParams]
AS
SELECT
    t.*,
    Template_TemplateID.[Name] AS [Template],
    Entity_EntityID.[Name] AS [Entity]
FROM
    [${flyway:defaultSchema}].[TemplateParam] AS t
INNER JOIN
    [${flyway:defaultSchema}].[Template] AS Template_TemplateID
  ON
    [t].[TemplateID] = Template_TemplateID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[Entity] AS Entity_EntityID
  ON
    [t].[EntityID] = Entity_EntityID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwTemplateParams] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* Base View Permissions SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: Permissions for vwTemplateParams
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwTemplateParams] TO [cdp_UI], [cdp_Integration], [cdp_Developer]

/* spCreate SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: spCreateTemplateParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR TemplateParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateTemplateParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateTemplateParam]
    @TemplateID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Type nvarchar(20),
    @DefaultValue nvarchar(MAX),
    @IsRequired bit,
    @LinkedParameterName nvarchar(255),
    @LinkedParameterField nvarchar(500),
    @ExtraFilter nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(2000),
    @OrderBy nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[TemplateParam]
        (
            [TemplateID],
            [Name],
            [Description],
            [Type],
            [DefaultValue],
            [IsRequired],
            [LinkedParameterName],
            [LinkedParameterField],
            [ExtraFilter],
            [EntityID],
            [RecordID],
            [OrderBy]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @TemplateID,
            @Name,
            @Description,
            @Type,
            @DefaultValue,
            @IsRequired,
            @LinkedParameterName,
            @LinkedParameterField,
            @ExtraFilter,
            @EntityID,
            @RecordID,
            @OrderBy
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwTemplateParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateParam] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Template Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateParam] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: spUpdateTemplateParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR TemplateParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateTemplateParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateTemplateParam]
    @ID uniqueidentifier,
    @TemplateID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Type nvarchar(20),
    @DefaultValue nvarchar(MAX),
    @IsRequired bit,
    @LinkedParameterName nvarchar(255),
    @LinkedParameterField nvarchar(500),
    @ExtraFilter nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(2000),
    @OrderBy nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[TemplateParam]
    SET
        [TemplateID] = @TemplateID,
        [Name] = @Name,
        [Description] = @Description,
        [Type] = @Type,
        [DefaultValue] = @DefaultValue,
        [IsRequired] = @IsRequired,
        [LinkedParameterName] = @LinkedParameterName,
        [LinkedParameterField] = @LinkedParameterField,
        [ExtraFilter] = @ExtraFilter,
        [EntityID] = @EntityID,
        [RecordID] = @RecordID,
        [OrderBy] = @OrderBy
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwTemplateParams]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateTemplateParam] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the TemplateParam table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateTemplateParam
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateTemplateParam
ON [${flyway:defaultSchema}].[TemplateParam]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[TemplateParam]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[TemplateParam] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Template Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateTemplateParam] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: spDeleteTemplateParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR TemplateParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteTemplateParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteTemplateParam]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[TemplateParam]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteTemplateParam] TO [cdp_Integration]
    

/* spDelete Permissions for Template Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteTemplateParam] TO [cdp_Integration]



/* SQL text to update entity field related entity name field map for entity field ID E57D89AA-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='E57D89AA-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ResourceType'

/* SQL text to update entity field related entity name field map for entity field ID 93D726C6-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='93D726C6-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='User'

/* SQL text to update entity field related entity name field map for entity field ID E97D89AA-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='E97D89AA-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='Role'

/* SQL text to update entity field related entity name field map for entity field ID 94D726C6-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='94D726C6-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ResourceType'

/* SQL text to update entity field related entity name field map for entity field ID EA7D89AA-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='EA7D89AA-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='User'
 


/* SQL text to update entity field related entity name field map for entity field ID 16FE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='16FE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='Source'

/* Index for Foreign Keys for ContentSource */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Sources
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ContentTypeID in table ContentSource
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ContentSource_ContentTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ContentSource]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ContentSource_ContentTypeID ON [${flyway:defaultSchema}].[ContentSource] ([ContentTypeID]);

-- Index for foreign key ContentSourceTypeID in table ContentSource
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ContentSource_ContentSourceTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ContentSource]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ContentSource_ContentSourceTypeID ON [${flyway:defaultSchema}].[ContentSource] ([ContentSourceTypeID]);

-- Index for foreign key ContentFileTypeID in table ContentSource
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ContentSource_ContentFileTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ContentSource]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ContentSource_ContentFileTypeID ON [${flyway:defaultSchema}].[ContentSource] ([ContentFileTypeID]);

/* SQL text to update entity field related entity name field map for entity field ID 1FFE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='1FFE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ContentType'
 



/* SQL text to update entity field related entity name field map for entity field ID 20FE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='20FE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ContentSourceType'

/* SQL text to update entity field related entity name field map for entity field ID 21FE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='21FE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ContentFileType'

/* Base View SQL for Content Sources */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Sources
-- Item: vwContentSources
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Content Sources
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ContentSource
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwContentSources]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwContentSources]
AS
SELECT
    c.*,
    ContentType_ContentTypeID.[Name] AS [ContentType],
    ContentSourceType_ContentSourceTypeID.[Name] AS [ContentSourceType],
    ContentFileType_ContentFileTypeID.[Name] AS [ContentFileType]
FROM
    [${flyway:defaultSchema}].[ContentSource] AS c
INNER JOIN
    [${flyway:defaultSchema}].[ContentType] AS ContentType_ContentTypeID
  ON
    [c].[ContentTypeID] = ContentType_ContentTypeID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[ContentSourceType] AS ContentSourceType_ContentSourceTypeID
  ON
    [c].[ContentSourceTypeID] = ContentSourceType_ContentSourceTypeID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[ContentFileType] AS ContentFileType_ContentFileTypeID
  ON
    [c].[ContentFileTypeID] = ContentFileType_ContentFileTypeID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwContentSources] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for Content Sources */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Sources
-- Item: Permissions for vwContentSources
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwContentSources] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for Content Sources */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Sources
-- Item: spCreateContentSource
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentSource
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentSource]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentSource]
    @Name nvarchar(255),
    @ContentTypeID uniqueidentifier,
    @ContentSourceTypeID uniqueidentifier,
    @ContentFileTypeID uniqueidentifier,
    @URL nvarchar(2000)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ContentSource]
        (
            [Name],
            [ContentTypeID],
            [ContentSourceTypeID],
            [ContentFileTypeID],
            [URL]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @Name,
            @ContentTypeID,
            @ContentSourceTypeID,
            @ContentFileTypeID,
            @URL
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentSources] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSource] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Sources */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSource] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Content Sources */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Sources
-- Item: spUpdateContentSource
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ContentSource
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateContentSource]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateContentSource]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @ContentTypeID uniqueidentifier,
    @ContentSourceTypeID uniqueidentifier,
    @ContentFileTypeID uniqueidentifier,
    @URL nvarchar(2000)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ContentSource]
    SET
        [Name] = @Name,
        [ContentTypeID] = @ContentTypeID,
        [ContentSourceTypeID] = @ContentSourceTypeID,
        [ContentFileTypeID] = @ContentFileTypeID,
        [URL] = @URL
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwContentSources]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateContentSource] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ContentSource table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateContentSource
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateContentSource
ON [${flyway:defaultSchema}].[ContentSource]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ContentSource]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ContentSource] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Content Sources */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateContentSource] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Content Sources */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Sources
-- Item: spDeleteContentSource
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ContentSource
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteContentSource]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteContentSource]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ContentSource]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteContentSource] TO [cdp_Integration]
    

/* spDelete Permissions for Content Sources */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteContentSource] TO [cdp_Integration]



/* SQL text to update entity field related entity name field map for entity field ID 26FE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='26FE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ContentSource'

/* SQL text to update entity field related entity name field map for entity field ID 3BFE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='3BFE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='AIModel'

/* Index for Foreign Keys for ContentItem */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Items
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ContentSourceID in table ContentItem
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ContentItem_ContentSourceID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ContentItem]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ContentItem_ContentSourceID ON [${flyway:defaultSchema}].[ContentItem] ([ContentSourceID]);

-- Index for foreign key ContentTypeID in table ContentItem
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ContentItem_ContentTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ContentItem]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ContentItem_ContentTypeID ON [${flyway:defaultSchema}].[ContentItem] ([ContentTypeID]);

-- Index for foreign key ContentSourceTypeID in table ContentItem
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ContentItem_ContentSourceTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ContentItem]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ContentItem_ContentSourceTypeID ON [${flyway:defaultSchema}].[ContentItem] ([ContentSourceTypeID]);

-- Index for foreign key ContentFileTypeID in table ContentItem
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_ContentItem_ContentFileTypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[ContentItem]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_ContentItem_ContentFileTypeID ON [${flyway:defaultSchema}].[ContentItem] ([ContentFileTypeID]);

/* SQL text to update entity field related entity name field map for entity field ID 4DFE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='4DFE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ContentSource'

/* SQL text to update entity field related entity name field map for entity field ID 59FE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='59FE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ContentItem'

/* SQL text to update entity field related entity name field map for entity field ID 5FFE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='5FFE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='Item'

/* SQL text to update entity field related entity name field map for entity field ID 50FE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='50FE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ContentType'

/* SQL text to update entity field related entity name field map for entity field ID 51FE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='51FE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ContentSourceType'

/* SQL text to update entity field related entity name field map for entity field ID 52FE0285-DFE3-EF11-B015-286B35C04427 */
EXEC [${flyway:defaultSchema}].spUpdateEntityFieldRelatedEntityNameFieldMap
         @EntityFieldID='52FE0285-DFE3-EF11-B015-286B35C04427',
         @RelatedEntityNameFieldMap='ContentFileType'

/* Base View SQL for Content Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Items
-- Item: vwContentItems
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Content Items
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  ContentItem
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwContentItems]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwContentItems]
AS
SELECT
    c.*,
    ContentSource_ContentSourceID.[Name] AS [ContentSource],
    ContentType_ContentTypeID.[Name] AS [ContentType],
    ContentSourceType_ContentSourceTypeID.[Name] AS [ContentSourceType],
    ContentFileType_ContentFileTypeID.[Name] AS [ContentFileType]
FROM
    [${flyway:defaultSchema}].[ContentItem] AS c
INNER JOIN
    [${flyway:defaultSchema}].[ContentSource] AS ContentSource_ContentSourceID
  ON
    [c].[ContentSourceID] = ContentSource_ContentSourceID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[ContentType] AS ContentType_ContentTypeID
  ON
    [c].[ContentTypeID] = ContentType_ContentTypeID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[ContentSourceType] AS ContentSourceType_ContentSourceTypeID
  ON
    [c].[ContentSourceTypeID] = ContentSourceType_ContentSourceTypeID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[ContentFileType] AS ContentFileType_ContentFileTypeID
  ON
    [c].[ContentFileTypeID] = ContentFileType_ContentFileTypeID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwContentItems] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for Content Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Items
-- Item: Permissions for vwContentItems
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwContentItems] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for Content Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Items
-- Item: spCreateContentItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentItem]
    @ContentSourceID uniqueidentifier,
    @Name nvarchar(250),
    @Description nvarchar(MAX),
    @ContentTypeID uniqueidentifier,
    @ContentSourceTypeID uniqueidentifier,
    @ContentFileTypeID uniqueidentifier,
    @Checksum nvarchar(100),
    @URL nvarchar(2000),
    @Text nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    INSERT INTO
    [${flyway:defaultSchema}].[ContentItem]
        (
            [ContentSourceID],
            [Name],
            [Description],
            [ContentTypeID],
            [ContentSourceTypeID],
            [ContentFileTypeID],
            [Checksum],
            [URL],
            [Text]
        )
    OUTPUT INSERTED.[ID] INTO @InsertedRow
    VALUES
        (
            @ContentSourceID,
            @Name,
            @Description,
            @ContentTypeID,
            @ContentSourceTypeID,
            @ContentFileTypeID,
            @Checksum,
            @URL,
            @Text
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentItem] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentItem] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Content Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Items
-- Item: spUpdateContentItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ContentItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateContentItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateContentItem]
    @ID uniqueidentifier,
    @ContentSourceID uniqueidentifier,
    @Name nvarchar(250),
    @Description nvarchar(MAX),
    @ContentTypeID uniqueidentifier,
    @ContentSourceTypeID uniqueidentifier,
    @ContentFileTypeID uniqueidentifier,
    @Checksum nvarchar(100),
    @URL nvarchar(2000),
    @Text nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ContentItem]
    SET
        [ContentSourceID] = @ContentSourceID,
        [Name] = @Name,
        [Description] = @Description,
        [ContentTypeID] = @ContentTypeID,
        [ContentSourceTypeID] = @ContentSourceTypeID,
        [ContentFileTypeID] = @ContentFileTypeID,
        [Checksum] = @Checksum,
        [URL] = @URL,
        [Text] = @Text
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwContentItems]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateContentItem] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR ${flyway:defaultSchema}_UpdatedAt field for the ContentItem table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateContentItem
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateContentItem
ON [${flyway:defaultSchema}].[ContentItem]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ContentItem]
    SET
        ${flyway:defaultSchema}_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ContentItem] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Content Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateContentItem] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Content Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Items
-- Item: spDeleteContentItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ContentItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteContentItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteContentItem]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ContentItem]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteContentItem] TO [cdp_Integration]
    

/* spDelete Permissions for Content Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteContentItem] TO [cdp_Integration]



/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '494f67c5-efd1-4c72-bfa2-3d6b4ea82bb6'  OR 
               (EntityID = '12CD5A5D-A83B-EF11-86D4-0022481D1B23' AND Name = 'CreatedByUser')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '494f67c5-efd1-4c72-bfa2-3d6b4ea82bb6',
            '12CD5A5D-A83B-EF11-86D4-0022481D1B23', -- Entity: Scheduled Actions
            17,
            'CreatedByUser',
            'Created By User',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '0c990bd4-1871-453a-866f-aef735413ded'  OR 
               (EntityID = '12CD5A5D-A83B-EF11-86D4-0022481D1B23' AND Name = 'Action')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '0c990bd4-1871-453a-866f-aef735413ded',
            '12CD5A5D-A83B-EF11-86D4-0022481D1B23', -- Entity: Scheduled Actions
            18,
            'Action',
            'Action',
            NULL,
            'nvarchar',
            850,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '5e09366e-e42c-4533-bf28-98a9f7e60872'  OR 
               (EntityID = '58E4EE77-0A3C-EF11-86D4-0022481D1B23' AND Name = 'ScheduledAction')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '5e09366e-e42c-4533-bf28-98a9f7e60872',
            '58E4EE77-0A3C-EF11-86D4-0022481D1B23', -- Entity: Scheduled Action Params
            9,
            'ScheduledAction',
            'Scheduled Action',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'ea507ea3-da56-4061-b416-02f9d0d5b567'  OR 
               (EntityID = '58E4EE77-0A3C-EF11-86D4-0022481D1B23' AND Name = 'ActionParam')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'ea507ea3-da56-4061-b416-02f9d0d5b567',
            '58E4EE77-0A3C-EF11-86D4-0022481D1B23', -- Entity: Scheduled Action Params
            10,
            'ActionParam',
            'Action Param',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'b94f55ba-d573-43ed-8df9-55904e21aed9'  OR 
               (EntityID = 'EE238F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Category')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'b94f55ba-d573-43ed-8df9-55904e21aed9',
            'EE238F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Lists
            13,
            'Category',
            'Category',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'a87beef0-83fb-4c6c-a052-e0d91a6062be'  OR 
               (EntityID = 'F8238F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'AuditLogType')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'a87beef0-83fb-4c6c-a052-e0d91a6062be',
            'F8238F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Audit Logs
            13,
            'AuditLogType',
            'Audit Log Type',
            NULL,
            'nvarchar',
            100,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '5953c069-ede5-4841-bc1b-d8fa0d6e54f4'  OR 
               (EntityID = 'F8238F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Authorization')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '5953c069-ede5-4841-bc1b-d8fa0d6e54f4',
            'F8238F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Audit Logs
            14,
            'Authorization',
            'Authorization',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'be404449-9711-42d3-b12a-4ee9b0c56efc'  OR 
               (EntityID = 'FA238F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Authorization')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'be404449-9711-42d3-b12a-4ee9b0c56efc',
            'FA238F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Authorization Roles
            7,
            'Authorization',
            'Authorization',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '2fa8fc9b-ecaf-4f63-8851-1f8d5dda9c29'  OR 
               (EntityID = 'FA238F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Role')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '2fa8fc9b-ecaf-4f63-8851-1f8d5dda9c29',
            'FA238F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Authorization Roles
            8,
            'Role',
            'Role',
            NULL,
            'nvarchar',
            100,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'a98ff815-354b-4338-a427-7c63ea88ace6'  OR 
               (EntityID = 'FB238F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Authorization')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'a98ff815-354b-4338-a427-7c63ea88ace6',
            'FB238F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Audit Log Types
            9,
            'Authorization',
            'Authorization',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '48fbae19-c0c3-4e0a-a028-1396cf6bb26e'  OR 
               (EntityID = '11248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Dataset')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '48fbae19-c0c3-4e0a-a028-1396cf6bb26e',
            '11248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Dataset Items
            12,
            'Dataset',
            'Dataset',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '6b216998-9c11-4b6b-95dd-a1774035f714'  OR 
               (EntityID = '17248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'ApprovedByUser')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '6b216998-9c11-4b6b-95dd-a1774035f714',
            '17248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Record Merge Logs
            16,
            'ApprovedByUser',
            'Approved By User',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '2d481b16-7786-4be5-922a-0c9ba0f73cd2'  OR 
               (EntityID = '1C248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Query')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '2d481b16-7786-4be5-922a-0c9ba0f73cd2',
            '1C248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Query Permissions
            6,
            'Query',
            'Query',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'da0e6716-367e-43c6-a060-bf2626f15704'  OR 
               (EntityID = '1C248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Role')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'da0e6716-367e-43c6-a060-bf2626f15704',
            '1C248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Query Permissions
            7,
            'Role',
            'Role',
            NULL,
            'nvarchar',
            100,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '799a4053-5331-4466-bf1f-cc0cbd919aa2'  OR 
               (EntityID = '21248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Entity')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '799a4053-5331-4466-bf1f-cc0cbd919aa2',
            '21248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Entity Record Documents
            12,
            'Entity',
            'Entity',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '7af02507-87f8-41dc-98a8-82d2e8165882'  OR 
               (EntityID = '21248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'EntityDocument')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '7af02507-87f8-41dc-98a8-82d2e8165882',
            '21248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Entity Record Documents
            13,
            'EntityDocument',
            'Entity Document',
            NULL,
            'nvarchar',
            500,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'bfacf8e8-7f84-48f5-9472-0dfd68871de8'  OR 
               (EntityID = '21248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'VectorIndex')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'bfacf8e8-7f84-48f5-9472-0dfd68871de8',
            '21248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Entity Record Documents
            14,
            'VectorIndex',
            'Vector Index',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'b5a2c8a5-cb9d-4dd0-993b-6b3591955cbc'  OR 
               (EntityID = '22248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'VectorDatabase')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'b5a2c8a5-cb9d-4dd0-993b-6b3591955cbc',
            '22248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Entity Documents
            15,
            'VectorDatabase',
            'Vector Database',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '87163aa2-6f4e-40f0-ac8d-0daa1402d4c2'  OR 
               (EntityID = '22248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Template')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '87163aa2-6f4e-40f0-ac8d-0daa1402d4c2',
            '22248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Entity Documents
            16,
            'Template',
            'Template',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '426216cc-bbc3-453c-a445-d5a5d4399bdc'  OR 
               (EntityID = '22248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'AIModel')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '426216cc-bbc3-453c-a445-d5a5d4399bdc',
            '22248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Entity Documents
            17,
            'AIModel',
            'AI Model',
            NULL,
            'nvarchar',
            100,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '89d622dc-9c22-4042-837d-a28f6d78209b'  OR 
               (EntityID = '25248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Entity')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '89d622dc-9c22-4042-837d-a28f6d78209b',
            '25248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: User View Categories
            10,
            'Entity',
            'Entity',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '4487912e-fd9a-4840-8fb7-adc7e5fecd21'  OR 
               (EntityID = '32248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Application')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '4487912e-fd9a-4840-8fb7-adc7e5fecd21',
            '32248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Application Settings
            8,
            'Application',
            'Application',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '29903eae-0c61-4fa0-8b2b-77734dcd5fc3'  OR 
               (EntityID = '36248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Authorization')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '29903eae-0c61-4fa0-8b2b-77734dcd5fc3',
            '36248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: Action Authorizations
            8,
            'Authorization',
            'Authorization',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '6487b73e-a4f7-40bf-b4a8-b0f1fe6cab59'  OR 
               (EntityID = '42248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'Parent')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '6487b73e-a4f7-40bf-b4a8-b0f1fe6cab59',
            '42248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: List Categories
            8,
            'Parent',
            'Parent',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'fdb17a51-518f-4729-8668-6407b1e7e64e'  OR 
               (EntityID = '42248F34-2837-EF11-86D4-6045BDEE16E6' AND Name = 'User')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'fdb17a51-518f-4729-8668-6407b1e7e64e',
            '42248F34-2837-EF11-86D4-6045BDEE16E6', -- Entity: List Categories
            9,
            'User',
            'User',
            NULL,
            'nvarchar',
            200,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Dropdown'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'e092130b-fbaf-43d6-acd3-1a2a0a67e309'  OR 
               (EntityID = 'B420FF22-0E66-EF11-A752-C0A5E8ACCB22' AND Name = 'ContentType')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'e092130b-fbaf-43d6-acd3-1a2a0a67e309',
            'B420FF22-0E66-EF11-A752-C0A5E8ACCB22', -- Entity: Content Sources
            9,
            'ContentType',
            'Content Type',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'a9fda47b-0219-4a70-b30d-2590077b443f'  OR 
               (EntityID = 'B420FF22-0E66-EF11-A752-C0A5E8ACCB22' AND Name = 'ContentSourceType')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'a9fda47b-0219-4a70-b30d-2590077b443f',
            'B420FF22-0E66-EF11-A752-C0A5E8ACCB22', -- Entity: Content Sources
            10,
            'ContentSourceType',
            'Content Source Type',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'd98b1f75-3e9c-465b-a3dd-9f5d341eebf2'  OR 
               (EntityID = 'B420FF22-0E66-EF11-A752-C0A5E8ACCB22' AND Name = 'ContentFileType')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'd98b1f75-3e9c-465b-a3dd-9f5d341eebf2',
            'B420FF22-0E66-EF11-A752-C0A5E8ACCB22', -- Entity: Content Sources
            11,
            'ContentFileType',
            'Content File Type',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '922fb119-588c-4690-8102-78eb4ae6115a'  OR 
               (EntityID = 'B693AD50-0E66-EF11-A752-C0A5E8ACCB22' AND Name = 'ContentSource')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '922fb119-588c-4690-8102-78eb4ae6115a',
            'B693AD50-0E66-EF11-A752-C0A5E8ACCB22', -- Entity: Content Items
            13,
            'ContentSource',
            'Content Source',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            1,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '3615df0d-3fca-44d3-9dd3-1001eb37a01c'  OR 
               (EntityID = 'B693AD50-0E66-EF11-A752-C0A5E8ACCB22' AND Name = 'ContentType')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '3615df0d-3fca-44d3-9dd3-1001eb37a01c',
            'B693AD50-0E66-EF11-A752-C0A5E8ACCB22', -- Entity: Content Items
            14,
            'ContentType',
            'Content Type',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = '997668d8-cc16-463f-a9fe-e14496cf865c'  OR 
               (EntityID = 'B693AD50-0E66-EF11-A752-C0A5E8ACCB22' AND Name = 'ContentSourceType')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            '997668d8-cc16-463f-a9fe-e14496cf865c',
            'B693AD50-0E66-EF11-A752-C0A5E8ACCB22', -- Entity: Content Items
            15,
            'ContentSourceType',
            'Content Source Type',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

/* SQL text to insert new entity field */

      IF NOT EXISTS (
         SELECT 1 FROM [${flyway:defaultSchema}].EntityField 
         WHERE ID = 'fd431822-d2a0-4f20-b505-fe5545a215bb'  OR 
               (EntityID = 'B693AD50-0E66-EF11-A752-C0A5E8ACCB22' AND Name = 'ContentFileType')
         -- check to make sure we're not inserting a duplicate entity field metadata record
      )
      BEGIN
         INSERT INTO [${flyway:defaultSchema}].EntityField
         (
            ID,
            EntityID,
            Sequence,
            Name,
            DisplayName,
            Description,
            Type,
            Length,
            Precision,
            Scale,
            AllowsNull,
            DefaultValue,
            AutoIncrement,
            AllowUpdateAPI,
            IsVirtual,
            RelatedEntityID,
            RelatedEntityFieldName,
            IsNameField,
            IncludeInUserSearchAPI,
            IncludeRelatedEntityNameFieldInBaseView,
            DefaultInView,
            IsPrimaryKey,
            IsUnique,
            RelatedEntityDisplayType
         )
         VALUES
         (
            'fd431822-d2a0-4f20-b505-fe5545a215bb',
            'B693AD50-0E66-EF11-A752-C0A5E8ACCB22', -- Entity: Content Items
            16,
            'ContentFileType',
            'Content File Type',
            NULL,
            'nvarchar',
            510,
            0,
            0,
            0,
            'null',
            0,
            0,
            1,
            NULL,
            NULL,
            0,
            0,
            0,
            0,
            0,
            0,
            'Search'
         )
      END

