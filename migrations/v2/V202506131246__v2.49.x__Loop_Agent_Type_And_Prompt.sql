-- SQL Logging Session
-- Session ID: a5f438a3-496a-402c-9226-c1b74bc5d3c7
-- Started: 2025-06-13T17:44:10.566Z
-- Description: MetadataSync Push Operation
-- Generated by MemberJunction SQLServerDataProvider

-- Save Templates
DECLARE @ResultTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [Name] NVARCHAR(255) NOT NULL,
  [Description] NVARCHAR(MAX) NULL,
  [CategoryID] uniqueidentifier NULL,
  [UserPrompt] NVARCHAR(MAX) NULL,
  [UserID] uniqueidentifier NOT NULL,
  [ActiveAt] datetime NULL,
  [DisabledAt] datetime NULL,
  [IsActive] BIT NOT NULL,
  [__mj_CreatedAt] DATETIMEOFFSET NOT NULL,
  [__mj_UpdatedAt] DATETIMEOFFSET NOT NULL,
  [Category] NVARCHAR(255) NULL,
  [User] NVARCHAR(100) NULL
);

INSERT INTO
  @ResultTable
EXEC [${flyway:defaultSchema}].spCreateTemplate @ID = '9c2900d5-dac7-411b-bb45-1b4197267a5d',
  @Name = 'Loop Agent Type: System Prompt',
  @Description = 'Template for AI Prompt: Loop Agent Type: System Prompt',
  @CategoryID = 'B09D433E-F36B-1410-8DB1-00021F8B792E',
  @UserPrompt = NULL,
  @UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
  @ActiveAt = NULL,
  @DisabledAt = NULL,
  @IsActive = 1;

DECLARE @ID NVARCHAR(MAX);

SELECT
  @ID = CONCAT('ID', '|', ID)
FROM
  @ResultTable;

IF @ID IS NOT NULL
BEGIN
DECLARE @ResultChangesTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [EntityID] uniqueidentifier NOT NULL,
  [RecordID] NVARCHAR(750) NOT NULL,
  [UserID] uniqueidentifier NOT NULL,
  [Type] NVARCHAR(20) NOT NULL,
  [Source] NVARCHAR(20) NOT NULL,
  [ChangedAt] DATETIMEOFFSET NOT NULL,
  [ChangesJSON] NVARCHAR(MAX) NOT NULL,
  [ChangesDescription] NVARCHAR(MAX) NOT NULL,
  [FullRecordJSON] NVARCHAR(MAX) NOT NULL,
  [Status] NVARCHAR(50) NOT NULL,
  [ErrorLog] NVARCHAR(MAX) NULL,
  [ReplayRunID] uniqueidentifier NULL,
  [IntegrationID] uniqueidentifier NULL,
  [Comments] NVARCHAR(MAX) NULL,
  [CreatedAt] DATETIMEOFFSET NOT NULL,
  [UpdatedAt] DATETIMEOFFSET NOT NULL,
  [Entity] NVARCHAR(255) NULL,
  [User] NVARCHAR(100) NULL,
  [Integration] NVARCHAR(100) NULL
);

INSERT INTO
  @ResultChangesTable
EXEC [${flyway:defaultSchema}].spCreateRecordChange_Internal @EntityName = 'Templates',
  @RecordID = @ID,
  @UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
  @Type = 'Create',
  @ChangesJSON = '',
  @ChangesDescription = 'Record Created',
  @FullRecordJSON = '{"ID":"9c2900d5-dac7-411b-bb45-1b4197267a5d","Name":"Loop Agent Type: System Prompt","Description":"Template for AI Prompt: Loop Agent Type: System Prompt","CategoryID":"B09D433E-F36B-1410-8DB1-00021F8B792E","UserPrompt":null,"UserID":"ECAFCCEC-6A37-EF11-86D4-000D3A4E707E","ActiveAt":null,"DisabledAt":null,"IsActive":true,"__mj_CreatedAt":null,"__mj_UpdatedAt":null,"Category":null,"User":null}',
  @Status = 'Complete',
  @Comments = NULL;
END;

SELECT
  *
FROM
  @ResultTable;;

GO

-- Save Template Contents
DECLARE @ResultTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [TemplateID] uniqueidentifier NOT NULL,
  [TypeID] uniqueidentifier NOT NULL,
  [TemplateText] NVARCHAR(MAX) NULL,
  [Priority] INT NOT NULL,
  [IsActive] BIT NOT NULL,
  [__mj_CreatedAt] DATETIMEOFFSET NOT NULL,
  [__mj_UpdatedAt] DATETIMEOFFSET NOT NULL,
  [Template] NVARCHAR(255) NULL,
  [Type] NVARCHAR(255) NULL
);

INSERT INTO
  @ResultTable
EXEC [${flyway:defaultSchema}].spCreateTemplateContent @ID = '248852bc-d0fb-4057-b0a7-eb29ac62f221',
  @TemplateID = '9C2900D5-DAC7-411B-BB45-1B4197267A5D',
  @TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
  @TemplateText = '# Loop Agent Type System Prompt

You are an AI agent operating in a loop-based execution pattern. Your role is to analyze the current state, determine if the task is complete, and decide on the next action to take. You will continue looping until the task is successfully completed. This first section of your system prompt tells you about the Agent Type. Following this section you will learn about the specific agent we are running.

## Your Capabilities

{% if subAgentCount > 0 %}
### Sub-Agents Available: {{ subAgentCount }}
Sub-agents represent your team members! Sub-agents have specialized expertise can perform a wide variety of tasks and you may only execute one sub-agent at at time. When you have a sub-agent available that''s the right fit for work you need to do, use the sub-agent. The sub-agents available to you are:

{{ subAgentDetails }}

{% endif %}

{% if actionCount > 0 %}
### Actions Available: {{ actionCount }}
An action is a tool you can use to perform a specific task. You are allowed to request multiple actions be performed in parallel if their results are independent. If you need to run multiple actions sequentially and reason between them, ask for one action at a time in each iteration of the conversation.

Available Actions:

{{ actionDetails }}
{% endif %}

## Your Current Context

**Agent Name**: {{ agentName }}
**Agent Description**: {{ agentDescription }}

## Task Execution

The user''s request and any additional context will be provided below. Analyze the request and determine:

1. Whether the task has been completed successfully
2. If not complete, what the next step should be
3. Which sub-agent to invoke OR which action to perform (if needed)
4. Your reasoning for the decision
5. Any relevant data or results to pass along

# Agent: {{ agentName }}
The following instructions are the specialized system prompt for this particular agent.
## Precedence
Whenever information in the specialized system prompt for this agent is in conflict with information above in the Agent Type prompt, use the information in the agent-specific prompt to control your behavior. 
## Agent Specific Prompt
{{ agentSpecificPrompt }}


## Response Format

You MUST respond with valid JSON in the following structure:

{{ _OUTPUT_EXAMPLE }}

### Field Explanations:

- **taskComplete**: Set to `true` only when the entire task is successfully completed
- **reasoning**: Your thought process and analysis (always required)
- **nextStep.type**: 
  - `"action"` - Execute a specific action
  - `"sub-agent"` - Delegate to a sub-agent
  - `"continue"` - Continue processing without specific action
  - `"none"` - No action needed (usually when task is complete)
- **nextStep.target**: The name or ID of the action/sub-agent (required for action/sub-agent types)
- **nextStep.parameters**: Parameters to pass to the action or sub-agent
- **result**: Accumulated results from the task execution
- **progress**: Current progress estimation
- **error**: Error tracking for graceful failure handling

## Important Guidelines

1. **Always return valid JSON** - No additional text outside the JSON structure
2. **Be decisive** - Choose clear next steps based on available capabilities
3. **Track progress** - Provide meaningful progress updates
4. **Handle errors gracefully** - If an error occurs, set error.occurred to true and provide details
5. **Use sub-agents wisely** - Delegate to sub-agents when their specialization matches the need
6. **Complete the loop** - Only set taskComplete to true when you''re certain the task is done
7. **Preserve context** - Include relevant information in the result field for future iterations',
  @Priority = 1,
  @IsActive = 1;

DECLARE @ID NVARCHAR(MAX);

SELECT
  @ID = CONCAT('ID', '|', ID)
FROM
  @ResultTable;

IF @ID IS NOT NULL
BEGIN
DECLARE @ResultChangesTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [EntityID] uniqueidentifier NOT NULL,
  [RecordID] NVARCHAR(750) NOT NULL,
  [UserID] uniqueidentifier NOT NULL,
  [Type] NVARCHAR(20) NOT NULL,
  [Source] NVARCHAR(20) NOT NULL,
  [ChangedAt] DATETIMEOFFSET NOT NULL,
  [ChangesJSON] NVARCHAR(MAX) NOT NULL,
  [ChangesDescription] NVARCHAR(MAX) NOT NULL,
  [FullRecordJSON] NVARCHAR(MAX) NOT NULL,
  [Status] NVARCHAR(50) NOT NULL,
  [ErrorLog] NVARCHAR(MAX) NULL,
  [ReplayRunID] uniqueidentifier NULL,
  [IntegrationID] uniqueidentifier NULL,
  [Comments] NVARCHAR(MAX) NULL,
  [CreatedAt] DATETIMEOFFSET NOT NULL,
  [UpdatedAt] DATETIMEOFFSET NOT NULL,
  [Entity] NVARCHAR(255) NULL,
  [User] NVARCHAR(100) NULL,
  [Integration] NVARCHAR(100) NULL
);

INSERT INTO
  @ResultChangesTable
EXEC [${flyway:defaultSchema}].spCreateRecordChange_Internal @EntityName = 'Template Contents',
  @RecordID = @ID,
  @UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
  @Type = 'Create',
  @ChangesJSON = '',
  @ChangesDescription = 'Record Created',
  @FullRecordJSON = '{"ID":"248852bc-d0fb-4057-b0a7-eb29ac62f221","TemplateID":"9C2900D5-DAC7-411B-BB45-1B4197267A5D","TypeID":"E7AFCCEC-6A37-EF11-86D4-000D3A4E707E","TemplateText":"# Loop Agent Type System Prompt\n\nYou are an AI agent operating in a loop-based execution pattern. Your role is to analyze the current state, determine if the task is complete, and decide on the next action to take. You will continue looping until the task is successfully completed. This first section of your system prompt tells you about the Agent Type. Following this section you will learn about the specific agent we are running.\n\n## Your Capabilities\n\n{% if subAgentCount > 0 %}\n### Sub-Agents Available: {{ subAgentCount }}\nSub-agents represent your team members! Sub-agents have specialized expertise can perform a wide variety of tasks and you may only execute one sub-agent at at time. When you have a sub-agent available that''s the right fit for work you need to do, use the sub-agent. The sub-agents available to you are:\n\n{{ subAgentDetails }}\n\n{% endif %}\n\n{% if actionCount > 0 %}\n### Actions Available: {{ actionCount }}\nAn action is a tool you can use to perform a specific task. You are allowed to request multiple actions be performed in parallel if their results are independent. If you need to run multiple actions sequentially and reason between them, ask for one action at a time in each iteration of the conversation.\n\nAvailable Actions:\n\n{{ actionDetails }}\n{% endif %}\n\n## Your Current Context\n\n**Agent Name**: {{ agentName }}\n**Agent Description**: {{ agentDescription }}\n\n## Task Execution\n\nThe user''s request and any additional context will be provided below. Analyze the request and determine:\n\n1. Whether the task has been completed successfully\n2. If not complete, what the next step should be\n3. Which sub-agent to invoke OR which action to perform (if needed)\n4. Your reasoning for the decision\n5. Any relevant data or results to pass along\n\n# Agent: {{ agentName }}\nThe following instructions are the specialized system prompt for this particular agent.\n## Precedence\nWhenever information in the specialized system prompt for this agent is in conflict with information above in the Agent Type prompt, use the information in the agent-specific prompt to control your behavior. \n## Agent Specific Prompt\n{{ agentSpecificPrompt }}\n\n\n## Response Format\n\nYou MUST respond with valid JSON in the following structure:\n\n{{ _OUTPUT_EXAMPLE }}\n\n### Field Explanations:\n\n- **taskComplete**: Set to `true` only when the entire task is successfully completed\n- **reasoning**: Your thought process and analysis (always required)\n- **nextStep.type**: \n  - `\"action\"` - Execute a specific action\n  - `\"sub-agent\"` - Delegate to a sub-agent\n  - `\"continue\"` - Continue processing without specific action\n  - `\"none\"` - No action needed (usually when task is complete)\n- **nextStep.target**: The name or ID of the action/sub-agent (required for action/sub-agent types)\n- **nextStep.parameters**: Parameters to pass to the action or sub-agent\n- **result**: Accumulated results from the task execution\n- **progress**: Current progress estimation\n- **error**: Error tracking for graceful failure handling\n\n## Important Guidelines\n\n1. **Always return valid JSON** - No additional text outside the JSON structure\n2. **Be decisive** - Choose clear next steps based on available capabilities\n3. **Track progress** - Provide meaningful progress updates\n4. **Handle errors gracefully** - If an error occurs, set error.occurred to true and provide details\n5. **Use sub-agents wisely** - Delegate to sub-agents when their specialization matches the need\n6. **Complete the loop** - Only set taskComplete to true when you''re certain the task is done\n7. **Preserve context** - Include relevant information in the result field for future iterations","Priority":1,"IsActive":true,"__mj_CreatedAt":null,"__mj_UpdatedAt":null,"Template":null,"Type":null}',
  @Status = 'Complete',
  @Comments = NULL;
END;

SELECT
  *
FROM
  @ResultTable;;

GO

-- Save AI Prompts
DECLARE @ResultTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [Name] NVARCHAR(255) NOT NULL,
  [Description] NVARCHAR(MAX) NULL,
  [TemplateID] uniqueidentifier NOT NULL,
  [CategoryID] uniqueidentifier NULL,
  [TypeID] uniqueidentifier NOT NULL,
  [Status] NVARCHAR(50) NOT NULL,
  [__mj_CreatedAt] DATETIMEOFFSET NOT NULL,
  [__mj_UpdatedAt] DATETIMEOFFSET NOT NULL,
  [ResponseFormat] NVARCHAR(20) NOT NULL,
  [ModelSpecificResponseFormat] NVARCHAR(MAX) NULL,
  [AIModelTypeID] uniqueidentifier NULL,
  [MinPowerRank] INT NULL,
  [SelectionStrategy] NVARCHAR(20) NOT NULL,
  [PowerPreference] NVARCHAR(20) NOT NULL,
  [ParallelizationMode] NVARCHAR(20) NOT NULL,
  [ParallelCount] INT NULL,
  [ParallelConfigParam] NVARCHAR(100) NULL,
  [OutputType] NVARCHAR(50) NOT NULL,
  [OutputExample] NVARCHAR(MAX) NULL,
  [ValidationBehavior] NVARCHAR(50) NOT NULL,
  [MaxRetries] INT NOT NULL,
  [RetryDelayMS] INT NOT NULL,
  [RetryStrategy] NVARCHAR(20) NOT NULL,
  [ResultSelectorPromptID] uniqueidentifier NULL,
  [EnableCaching] BIT NOT NULL,
  [CacheTTLSeconds] INT NULL,
  [CacheMatchType] NVARCHAR(20) NOT NULL,
  [CacheSimilarityThreshold] FLOAT(53) NULL,
  [CacheMustMatchModel] BIT NOT NULL,
  [CacheMustMatchVendor] BIT NOT NULL,
  [CacheMustMatchAgent] BIT NOT NULL,
  [CacheMustMatchConfig] BIT NOT NULL,
  [PromptRole] NVARCHAR(20) NOT NULL,
  [PromptPosition] NVARCHAR(20) NOT NULL,
  [Template] NVARCHAR(255) NULL,
  [Category] NVARCHAR(255) NULL,
  [Type] NVARCHAR(255) NULL,
  [AIModelType] NVARCHAR(50) NULL,
  [ResultSelectorPrompt] NVARCHAR(255) NULL
);

INSERT INTO
  @ResultTable
EXEC [${flyway:defaultSchema}].spCreateAIPrompt @ID = '29D65D89-9FA3-4674-82E9-EBFC939CF5EB',
  @Name = 'Loop Agent Type: System Prompt',
  @Description = 'Basic control structure for the Loop Agent Type',
  @TemplateID = '9C2900D5-DAC7-411B-BB45-1B4197267A5D',
  @CategoryID = 'A19D433E-F36B-1410-8DB1-00021F8B792E',
  @TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
  @Status = 'Active',
  @ResponseFormat = 'JSON',
  @ModelSpecificResponseFormat = NULL,
  @AIModelTypeID = NULL,
  @MinPowerRank = 0,
  @SelectionStrategy = 'Specific',
  @PowerPreference = 'Highest',
  @ParallelizationMode = 'None',
  @ParallelCount = NULL,
  @ParallelConfigParam = NULL,
  @OutputType = 'object',
  @OutputExample = '{
  "action": "continue",
  "subAgent": "",
  "subAgentInstructions": "",
  "actionInstructions": "",
  "continueInstructions": "The user is asking for help with product recommendations. I should gather more information about their preferences and budget before making specific suggestions.",
  "reasoning": "The conversation is still in the information gathering phase. The user has expressed interest in products but hasn''t provided enough details for me to make accurate recommendations yet.",
  "confidence": 0.95
}',
  @ValidationBehavior = 'Strict',
  @MaxRetries = 2,
  @RetryDelayMS = 1000,
  @RetryStrategy = 'Fixed',
  @ResultSelectorPromptID = NULL,
  @EnableCaching = 0,
  @CacheTTLSeconds = NULL,
  @CacheMatchType = 'Exact',
  @CacheSimilarityThreshold = NULL,
  @CacheMustMatchModel = 1,
  @CacheMustMatchVendor = 1,
  @CacheMustMatchAgent = 0,
  @CacheMustMatchConfig = 0,
  @PromptRole = 'System',
  @PromptPosition = 'First';

DECLARE @ID NVARCHAR(MAX);

SELECT
  @ID = CONCAT('ID', '|', ID)
FROM
  @ResultTable;

IF @ID IS NOT NULL
BEGIN
DECLARE @ResultChangesTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [EntityID] uniqueidentifier NOT NULL,
  [RecordID] NVARCHAR(750) NOT NULL,
  [UserID] uniqueidentifier NOT NULL,
  [Type] NVARCHAR(20) NOT NULL,
  [Source] NVARCHAR(20) NOT NULL,
  [ChangedAt] DATETIMEOFFSET NOT NULL,
  [ChangesJSON] NVARCHAR(MAX) NOT NULL,
  [ChangesDescription] NVARCHAR(MAX) NOT NULL,
  [FullRecordJSON] NVARCHAR(MAX) NOT NULL,
  [Status] NVARCHAR(50) NOT NULL,
  [ErrorLog] NVARCHAR(MAX) NULL,
  [ReplayRunID] uniqueidentifier NULL,
  [IntegrationID] uniqueidentifier NULL,
  [Comments] NVARCHAR(MAX) NULL,
  [CreatedAt] DATETIMEOFFSET NOT NULL,
  [UpdatedAt] DATETIMEOFFSET NOT NULL,
  [Entity] NVARCHAR(255) NULL,
  [User] NVARCHAR(100) NULL,
  [Integration] NVARCHAR(100) NULL
);

INSERT INTO
  @ResultChangesTable
EXEC [${flyway:defaultSchema}].spCreateRecordChange_Internal @EntityName = 'AI Prompts',
  @RecordID = @ID,
  @UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
  @Type = 'Create',
  @ChangesJSON = '',
  @ChangesDescription = 'Record Created',
  @FullRecordJSON = '{"ID":"29D65D89-9FA3-4674-82E9-EBFC939CF5EB","Name":"Loop Agent Type: System Prompt","Description":"Basic control structure for the Loop Agent Type","TemplateID":"9C2900D5-DAC7-411B-BB45-1B4197267A5D","CategoryID":"A19D433E-F36B-1410-8DB1-00021F8B792E","TypeID":"A6DA423E-F36B-1410-8DAC-00021F8B792E","Status":"Active","__mj_CreatedAt":null,"__mj_UpdatedAt":null,"ResponseFormat":"JSON","ModelSpecificResponseFormat":null,"AIModelTypeID":null,"MinPowerRank":0,"SelectionStrategy":"Specific","PowerPreference":"Highest","ParallelizationMode":"None","ParallelCount":null,"ParallelConfigParam":null,"OutputType":"object","OutputExample":"{\n  \"action\": \"continue\",\n  \"subAgent\": \"\",\n  \"subAgentInstructions\": \"\",\n  \"actionInstructions\": \"\",\n  \"continueInstructions\": \"The user is asking for help with product recommendations. I should gather more information about their preferences and budget before making specific suggestions.\",\n  \"reasoning\": \"The conversation is still in the information gathering phase. The user has expressed interest in products but hasn''t provided enough details for me to make accurate recommendations yet.\",\n  \"confidence\": 0.95\n}","ValidationBehavior":"Strict","MaxRetries":2,"RetryDelayMS":1000,"RetryStrategy":"Fixed","ResultSelectorPromptID":null,"EnableCaching":false,"CacheTTLSeconds":null,"CacheMatchType":"Exact","CacheSimilarityThreshold":null,"CacheMustMatchModel":true,"CacheMustMatchVendor":true,"CacheMustMatchAgent":false,"CacheMustMatchConfig":false,"PromptRole":"System","PromptPosition":"First","Template":null,"Category":null,"Type":null,"AIModelType":null,"ResultSelectorPrompt":null}',
  @Status = 'Complete',
  @Comments = NULL;
END;

SELECT
  *
FROM
  @ResultTable;;

GO

-- Save MJ: AI Prompt Models
DECLARE @ResultTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [PromptID] uniqueidentifier NOT NULL,
  [ModelID] uniqueidentifier NOT NULL,
  [VendorID] uniqueidentifier NULL,
  [ConfigurationID] uniqueidentifier NULL,
  [Priority] INT NOT NULL,
  [ExecutionGroup] INT NOT NULL,
  [ModelParameters] NVARCHAR(MAX) NULL,
  [Status] NVARCHAR(20) NOT NULL,
  [ParallelizationMode] NVARCHAR(20) NOT NULL,
  [ParallelCount] INT NOT NULL,
  [ParallelConfigParam] NVARCHAR(100) NULL,
  [__mj_CreatedAt] DATETIMEOFFSET NOT NULL,
  [__mj_UpdatedAt] DATETIMEOFFSET NOT NULL,
  [Prompt] NVARCHAR(255) NULL,
  [Model] NVARCHAR(50) NULL,
  [Vendor] NVARCHAR(50) NULL,
  [Configuration] NVARCHAR(100) NULL
);

INSERT INTO
  @ResultTable
EXEC [${flyway:defaultSchema}].spCreateAIPromptModel @ID = '0D13C545-5398-4623-A8AF-651971E270F3',
  @PromptID = '29D65D89-9FA3-4674-82E9-EBFC939CF5EB',
  @ModelID = '287E317F-BF26-F011-A770-AC1A3D21423D',
  @VendorID = 'D8A5CCEC-6A37-EF11-86D4-000D3A4E707E',
  @ConfigurationID = NULL,
  @Priority = 1,
  @ExecutionGroup = 0,
  @ModelParameters = NULL,
  @Status = 'Active',
  @ParallelizationMode = 'None',
  @ParallelCount = 1,
  @ParallelConfigParam = NULL;

DECLARE @ID NVARCHAR(MAX);

SELECT
  @ID = CONCAT('ID', '|', ID)
FROM
  @ResultTable;

IF @ID IS NOT NULL
BEGIN
DECLARE @ResultChangesTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [EntityID] uniqueidentifier NOT NULL,
  [RecordID] NVARCHAR(750) NOT NULL,
  [UserID] uniqueidentifier NOT NULL,
  [Type] NVARCHAR(20) NOT NULL,
  [Source] NVARCHAR(20) NOT NULL,
  [ChangedAt] DATETIMEOFFSET NOT NULL,
  [ChangesJSON] NVARCHAR(MAX) NOT NULL,
  [ChangesDescription] NVARCHAR(MAX) NOT NULL,
  [FullRecordJSON] NVARCHAR(MAX) NOT NULL,
  [Status] NVARCHAR(50) NOT NULL,
  [ErrorLog] NVARCHAR(MAX) NULL,
  [ReplayRunID] uniqueidentifier NULL,
  [IntegrationID] uniqueidentifier NULL,
  [Comments] NVARCHAR(MAX) NULL,
  [CreatedAt] DATETIMEOFFSET NOT NULL,
  [UpdatedAt] DATETIMEOFFSET NOT NULL,
  [Entity] NVARCHAR(255) NULL,
  [User] NVARCHAR(100) NULL,
  [Integration] NVARCHAR(100) NULL
);

INSERT INTO
  @ResultChangesTable
EXEC [${flyway:defaultSchema}].spCreateRecordChange_Internal @EntityName = 'MJ: AI Prompt Models',
  @RecordID = @ID,
  @UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
  @Type = 'Create',
  @ChangesJSON = '',
  @ChangesDescription = 'Record Created',
  @FullRecordJSON = '{"ID":"0D13C545-5398-4623-A8AF-651971E270F3","PromptID":"29D65D89-9FA3-4674-82E9-EBFC939CF5EB","ModelID":"287E317F-BF26-F011-A770-AC1A3D21423D","VendorID":"D8A5CCEC-6A37-EF11-86D4-000D3A4E707E","ConfigurationID":null,"Priority":1,"ExecutionGroup":0,"ModelParameters":null,"Status":"Active","ParallelizationMode":"None","ParallelCount":1,"ParallelConfigParam":null,"__mj_CreatedAt":null,"__mj_UpdatedAt":null,"Prompt":null,"Model":null,"Vendor":null,"Configuration":null}',
  @Status = 'Complete',
  @Comments = NULL;
END;

SELECT
  *
FROM
  @ResultTable;;

GO

-- Save MJ: AI Agent Types
DECLARE @ResultTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [Name] NVARCHAR(100) NOT NULL,
  [Description] NVARCHAR(MAX) NULL,
  [SystemPromptID] uniqueidentifier NULL,
  [IsActive] BIT NOT NULL,
  [__mj_CreatedAt] DATETIMEOFFSET NOT NULL,
  [__mj_UpdatedAt] DATETIMEOFFSET NOT NULL,
  [AgentPromptPlaceholder] NVARCHAR(255) NULL,
  [DriverClass] NVARCHAR(255) NULL,
  [SystemPrompt] NVARCHAR(255) NULL
);

INSERT INTO
  @ResultTable
EXEC [${flyway:defaultSchema}].spCreateAIAgentType @ID = '2A243235-D2C5-4EA9-8DE9-24E924616A13',
  @Name = 'Loop',
  @Description = 'Basic Agentic Loop',
  @SystemPromptID = '29D65D89-9FA3-4674-82E9-EBFC939CF5EB',
  @IsActive = 1,
  @AgentPromptPlaceholder = NULL,
  @DriverClass = NULL;

DECLARE @ID NVARCHAR(MAX);

SELECT
  @ID = CONCAT('ID', '|', ID)
FROM
  @ResultTable;

IF @ID IS NOT NULL
BEGIN
DECLARE @ResultChangesTable
TABLE (
  [ID] uniqueidentifier NOT NULL,
  [EntityID] uniqueidentifier NOT NULL,
  [RecordID] NVARCHAR(750) NOT NULL,
  [UserID] uniqueidentifier NOT NULL,
  [Type] NVARCHAR(20) NOT NULL,
  [Source] NVARCHAR(20) NOT NULL,
  [ChangedAt] DATETIMEOFFSET NOT NULL,
  [ChangesJSON] NVARCHAR(MAX) NOT NULL,
  [ChangesDescription] NVARCHAR(MAX) NOT NULL,
  [FullRecordJSON] NVARCHAR(MAX) NOT NULL,
  [Status] NVARCHAR(50) NOT NULL,
  [ErrorLog] NVARCHAR(MAX) NULL,
  [ReplayRunID] uniqueidentifier NULL,
  [IntegrationID] uniqueidentifier NULL,
  [Comments] NVARCHAR(MAX) NULL,
  [CreatedAt] DATETIMEOFFSET NOT NULL,
  [UpdatedAt] DATETIMEOFFSET NOT NULL,
  [Entity] NVARCHAR(255) NULL,
  [User] NVARCHAR(100) NULL,
  [Integration] NVARCHAR(100) NULL
);

INSERT INTO
  @ResultChangesTable
EXEC [${flyway:defaultSchema}].spCreateRecordChange_Internal @EntityName = 'MJ: AI Agent Types',
  @RecordID = @ID,
  @UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
  @Type = 'Create',
  @ChangesJSON = '',
  @ChangesDescription = 'Record Created',
  @FullRecordJSON = '{"ID":"2A243235-D2C5-4EA9-8DE9-24E924616A13","Name":"Loop","Description":"Basic Agentic Loop","SystemPromptID":"29D65D89-9FA3-4674-82E9-EBFC939CF5EB","IsActive":true,"__mj_CreatedAt":null,"__mj_UpdatedAt":null,"AgentPromptPlaceholder":null,"DriverClass":null,"SystemPrompt":null}',
  @Status = 'Complete',
  @Comments = NULL;
END;

SELECT
  *
FROM
  @ResultTable;;

GO


-- End of SQL Logging Session
-- Session ID: a5f438a3-496a-402c-9226-c1b74bc5d3c7
-- Completed: 2025-06-13T17:44:10.729Z
-- Duration: 163ms
-- Total Statements: 5
