-- Save MJ: Component Libraries (core SP call only)
DECLARE @Name_2e3ec85d NVARCHAR(500),
@DisplayName_2e3ec85d NVARCHAR(500),
@Version_2e3ec85d NVARCHAR(100),
@GlobalVariable_2e3ec85d NVARCHAR(255),
@Category_2e3ec85d NVARCHAR(100),
@CDNUrl_2e3ec85d NVARCHAR(1000),
@CDNCssUrl_2e3ec85d NVARCHAR(1000),
@Description_2e3ec85d NVARCHAR(MAX),
@Status_2e3ec85d NVARCHAR(20),
@LintRules_2e3ec85d NVARCHAR(MAX),
@Dependencies_2e3ec85d NVARCHAR(MAX),
@ID_2e3ec85d UNIQUEIDENTIFIER
SET
  @Name_2e3ec85d = N'ApexCharts'
SET
  @DisplayName_2e3ec85d = N'ApexCharts'
SET
  @Version_2e3ec85d = N'3.45.1'
SET
  @GlobalVariable_2e3ec85d = N'ApexCharts'
SET
  @Category_2e3ec85d = N'Charting'
SET
  @CDNUrl_2e3ec85d = N'https://cdn.jsdelivr.net/npm/apexcharts@3.45.1/dist/apexcharts.min.js'
SET
  @CDNCssUrl_2e3ec85d = N'https://cdn.jsdelivr.net/npm/apexcharts@3.45.1/dist/apexcharts.css'
SET
  @Description_2e3ec85d = N'Modern interactive JavaScript charts library'
SET
  @Status_2e3ec85d = N'Active'
SET
  @LintRules_2e3ec85d = N'{"initialization":{"constructorName":"ApexCharts","requiresNew":true,"elementType":"div","requiredConfig":["chart","series"]},"lifecycle":{"requiredMethods":[],"cleanupMethods":["destroy"],"updateMethods":["updateOptions","updateSeries","appendSeries"]},"validators":{"checkRenderCall":{"description":"Ensure ApexCharts instances call render() after creation","severity":"critical","validate":"/**\n * Ensure ApexCharts instances call render() after creation\n * @param {Object} ast - The full AST\n * @param {Object} path - Current node path being validated\n * @param {Object} t - Babel types\n * @param {Object} context - Additional context\n * @returns {Object|null} Violation object or null if valid\n */\n(ast, path, t, context) => {\n  if (t.isNewExpression(path.node) && \n      t.isIdentifier(path.node.callee) && \n      path.node.callee.name === ''ApexCharts'') {\n    \n    // Check if this is assigned to a variable\n    if (t.isVariableDeclarator(path.parent)) {\n      const varName = t.isIdentifier(path.parent.id) ? path.parent.id.name : null;\n      \n      if (varName) {\n        // Look for render call on this variable\n        let hasRender = false;\n        const parentScope = path.getFunctionParent();\n        \n        if (parentScope) {\n          parentScope.traverse({\n            CallExpression(callPath) {\n              if (t.isMemberExpression(callPath.node.callee) &&\n                  t.isIdentifier(callPath.node.callee.object) &&\n                  callPath.node.callee.object.name === varName &&\n                  t.isIdentifier(callPath.node.callee.property) &&\n                  callPath.node.callee.property.name === ''render'') {\n                hasRender = true;\n              }\n            }\n          });\n        }\n        \n        if (!hasRender) {\n          return {\n            rule: ''apexcharts-missing-render'',\n            severity: ''critical'',\n            message: ''ApexCharts instances must call .render() to display the chart'',\n            line: path.node.loc?.start.line || 0,\n            column: path.node.loc?.start.column || 0,\n            fix: `$' + '{varName}.render();`\n          };\n        }\n      }\n    }\n  }\n  return null;\n}"},"checkDestroyInCleanup":{"description":"Ensure ApexCharts instances are destroyed in cleanup","severity":"high","validate":"/**\n * Ensure ApexCharts instances are destroyed in cleanup\n * @param {Object} ast - The full AST\n * @param {Object} path - Current node path being validated\n * @param {Object} t - Babel types\n * @param {Object} context - Additional context\n * @returns {Object|null} Violation object or null if valid\n */\n(ast, path, t, context) => {\n  if (t.isNewExpression(path.node) && \n      t.isIdentifier(path.node.callee) && \n      path.node.callee.name === ''ApexCharts'') {\n    \n    // Check if we''re in a useEffect\n    let useEffectPath = path;\n    while (useEffectPath) {\n      if (t.isCallExpression(useEffectPath.node) && \n          t.isIdentifier(useEffectPath.node.callee) &&\n          useEffectPath.node.callee.name === ''useEffect'') {\n        \n        // Check for cleanup return\n        const effectFn = useEffectPath.node.arguments[0];\n        if (t.isArrowFunctionExpression(effectFn) || t.isFunctionExpression(effectFn)) {\n          const body = effectFn.body;\n          let hasCleanup = false;\n          \n          if (t.isBlockStatement(body)) {\n            for (const stmt of body.body) {\n              if (t.isReturnStatement(stmt) && stmt.argument) {\n                // Check if the return contains destroy call\n                const returnArg = stmt.argument;\n                if (t.isArrowFunctionExpression(returnArg) || t.isFunctionExpression(returnArg)) {\n                  hasCleanup = true;\n                }\n              }\n            }\n          }\n          \n          if (!hasCleanup) {\n            return {\n              rule: ''apexcharts-missing-cleanup'',\n              severity: ''high'',\n              message: ''ApexCharts instances must be destroyed in useEffect cleanup'',\n              line: path.node.loc?.start.line || 0,\n              column: path.node.loc?.start.column || 0,\n              fix: ''return () => { chart?.destroy(); }''\n            };\n          }\n        }\n        break;\n      }\n      useEffectPath = useEffectPath.parentPath;\n    }\n  }\n  return null;\n}"},"checkOptionsStructure":{"description":"Validate ApexCharts options structure","severity":"high","validate":"/**\n * Validate ApexCharts options structure\n * @param {Object} ast - The full AST\n * @param {Object} path - Current node path being validated\n * @param {Object} t - Babel types\n * @param {Object} context - Additional context\n * @returns {Object|null} Violation object or null if valid\n */\n(ast, path, t, context) => {\n  if (t.isNewExpression(path.node) && \n      t.isIdentifier(path.node.callee) && \n      path.node.callee.name === ''ApexCharts'' &&\n      path.node.arguments[1]) {\n    \n    const optionsArg = path.node.arguments[1];\n    \n    if (t.isObjectExpression(optionsArg)) {\n      const properties = optionsArg.properties;\n      \n      // Check for required properties\n      const hasChart = properties.some(prop => \n        t.isObjectProperty(prop) &&\n        t.isIdentifier(prop.key) &&\n        prop.key.name === ''chart''\n      );\n      \n      const hasSeries = properties.some(prop => \n        t.isObjectProperty(prop) &&\n        t.isIdentifier(prop.key) &&\n        prop.key.name === ''series''\n      );\n      \n      if (!hasChart) {\n        return {\n          rule: ''apexcharts-missing-chart-config'',\n          severity: ''high'',\n          message: ''ApexCharts options must include a \"chart\" property'',\n          line: optionsArg.loc?.start.line || 0,\n          column: optionsArg.loc?.start.column || 0,\n          fix: ''chart: { type: \"bar\", height: 350 }''\n        };\n      }\n      \n      if (!hasSeries) {\n        return {\n          rule: ''apexcharts-missing-series'',\n          severity: ''high'',\n          message: ''ApexCharts options must include a \"series\" property'',\n          line: optionsArg.loc?.start.line || 0,\n          column: optionsArg.loc?.start.column || 0,\n          fix: ''series: [{ name: \"Series 1\", data: [] }]''\n        };\n      }\n    }\n  }\n  return null;\n}"},"checkSeriesDataFormat":{"description":"Validate data is in correct ApexCharts series format","severity":"critical","validate":"// Validates that data passed to ApexCharts is in the correct series format\n(ast, path, t, context) => {\n  // Look for chart creation or series updates\n  if (t.isNewExpression(path.node) && path.node.callee.name === ''ApexCharts'') {\n    const configArg = path.node.arguments[1];\n    if (configArg && t.isObjectExpression(configArg)) {\n      const seriesProp = configArg.properties.find(p => \n        t.isObjectProperty(p) && \n        t.isIdentifier(p.key) && \n        p.key.name === ''series''\n      );\n      \n      if (seriesProp && t.isIdentifier(seriesProp.value)) {\n        // Track the variable name for later validation\n        context.apexSeriesVars = context.apexSeriesVars || new Set();\n        context.apexSeriesVars.add(seriesProp.value.name);\n      }\n    }\n  }\n  \n  // Check updateSeries calls\n  if (t.isMemberExpression(path.node) && \n      t.isIdentifier(path.node.property) && \n      path.node.property.name === ''updateSeries'') {\n    const parent = path.parent;\n    if (t.isCallExpression(parent)) {\n      const arg = parent.arguments[0];\n      if (arg && t.isIdentifier(arg)) {\n        // Flag for validation - series data should be array of objects with name and data\n        context.violations.push({\n          severity: ''medium'',\n          message: `Verify that ''$' + '{arg.name}'' is formatted as ApexCharts series: [{name: string, data: [{x, y}]}]`,\n          line: path.node.loc?.start.line,\n          column: path.node.loc?.start.column,\n          suggestion: ''Transform data to: selectedMetrics.map(metric => ({ name: metric, data: points.map(p => ({x: timestamp, y: value})) }))''\n        });\n      }\n    }\n  }\n  \n  // Look for common data format mistakes\n  if (t.isObjectExpression(path.node)) {\n    const hasDateProp = path.node.properties.some(p => \n      t.isObjectProperty(p) && t.isIdentifier(p.key) && p.key.name === ''date''\n    );\n    const hasDurationProp = path.node.properties.some(p => \n      t.isObjectProperty(p) && t.isIdentifier(p.key) && p.key.name === ''duration''\n    );\n    const hasCostProp = path.node.properties.some(p => \n      t.isObjectProperty(p) && t.isIdentifier(p.key) && p.key.name === ''cost''\n    );\n    \n    // This looks like processed data that needs transformation\n    if (hasDateProp && (hasDurationProp || hasCostProp)) {\n      // Check if this is being passed to chart\n      let parent = path.parent;\n      let depth = 0;\n      while (parent && depth < 5) {\n        if (t.isJSXAttribute(parent) && parent.name?.name === ''seriesData'') {\n          context.violations.push({\n            severity: ''critical'',\n            message: ''Data structure {date, duration, cost} needs transformation to ApexCharts series format'',\n            line: path.node.loc?.start.line,\n            column: path.node.loc?.start.column,\n            suggestion: ''Transform to: [{name: \"Duration\", data: [{x: timestamp, y: value}]}, ...]''\n          });\n          break;\n        }\n        parent = parent.parent;\n        depth++;\n      }\n    }\n  }\n}"},"checkChartRefManagement":{"description":"Ensure chart instances are properly stored in refs for exports","severity":"low","validate":"// Validates that chart instances are properly stored and exposed via refs\n(ast, path, t, context) => {\n  // Initialize tracking sets if not already done\n  context.apexChartVars = context.apexChartVars || new Set();\n  context.apexChartVarsWithRefWarning = context.apexChartVarsWithRefWarning || new Set();\n  \n  // Check for new ApexCharts creation\n  if (t.isNewExpression(path.node) && path.node.callee.name === ''ApexCharts'') {\n    const parent = path.parent;\n    \n    // Check if the chart instance is being stored\n    if (t.isVariableDeclarator(parent)) {\n      const varName = parent.id.name;\n      context.apexChartVars.add(varName);\n      \n      // Now check if this variable is attached to a ref\n      const scope = path.scope;\n      const binding = scope.getBinding(varName); \n      if (binding) {\n        let isAttachedToRef = false;\n        \n        for (const refPath of binding.referencePaths) {\n          // Check for patterns like: chartRef.current = chart\n          if (t.isAssignmentExpression(refPath.parent) &&\n              t.isMemberExpression(refPath.parent.left) && \n              refPath.parent.left.property?.name === ''current'') {\n            isAttachedToRef = true;\n            break;\n          }\n          // Check for: chartRef.current._chart = chart\n          if (t.isAssignmentExpression(refPath.parent) &&\n              t.isMemberExpression(refPath.parent.left) &&\n              refPath.parent.left.property?.name === ''_chart'') {\n            isAttachedToRef = true;\n            break;\n          }\n        }\n        \n        if (!isAttachedToRef) {\n          // Mark that we already warned about this chart variable\n          context.apexChartVarsWithRefWarning.add(varName);\n          context.violations.push({\n            severity: ''low'',  \n            message: `ApexCharts instance ''$' + '{varName}'' should be attached to a ref for export functionality`,\n            line: path.node.loc?.start.line,\n            column: path.node.loc?.start.column,\n            suggestion: ''After creating chart, store it: chartRef.current = chart;''\n          });\n        }\n      }\n    }\n  }\n  \n  // Check for dataURI usage without proper ref\n  if (t.isMemberExpression(path.node) && \n      t.isIdentifier(path.node.property) && \n      path.node.property.name === ''dataURI'') {\n    const object = path.node.object;\n    \n    // Check if it''s accessing through a ref\n    if (t.isMemberExpression(object)) {\n      if (!object.property || object.property.name !== ''current'') {\n        context.violations.push({\n          severity: ''low'',\n          message: ''dataURI() should be called on chart instance stored in ref.current'',\n          line: path.node.loc?.start.line,\n          column: path.node.loc?.start.column,\n          suggestion: ''Use: chartRef.current?.dataURI() or chart.dataURI()''\n        });\n      }\n    }\n  }\n  \n  // Check for chart.render() calls - but skip if we already warned about this chart variable\n  if (t.isCallExpression(path.node) && \n      t.isMemberExpression(path.node.callee) &&\n      path.node.callee.object?.name === ''chart'' &&\n      path.node.callee.property?.name === ''render'') {\n    \n    const chartVarName = path.node.callee.object.name;\n    \n    // Skip if we already warned about this chart variable not being in a ref\n    if (context.apexChartVarsWithRefWarning && context.apexChartVarsWithRefWarning.has(chartVarName)) {\n      return; // Don''t duplicate the warning\n    }\n    \n    // Also skip if this chart variable was properly created and tracked\n    if (context.apexChartVars && context.apexChartVars.has(chartVarName)) {\n      // We already checked this variable when it was created\n      return;\n    }\n    \n    // This is a render() call on a chart we haven''t seen created (might be from props/params)\n    // Check if it''s stored in a ref in the current scope\n    let foundChartStorage = false;\n    let currentPath = path;\n    \n    // Look up the tree for the containing function/block\n    while (currentPath && !t.isFunctionDeclaration(currentPath.node) && \n           !t.isFunctionExpression(currentPath.node) && \n           !t.isArrowFunctionExpression(currentPath.node)) {\n      currentPath = currentPath.parentPath;\n    }\n    \n    if (currentPath) {\n      // Check if chartRef.current = chart exists in this scope\n      currentPath.traverse({\n        AssignmentExpression(assignPath) {\n          if (t.isMemberExpression(assignPath.node.left) &&\n              assignPath.node.left.property?.name === ''current'' &&\n              t.isIdentifier(assignPath.node.right) &&\n              assignPath.node.right.name === chartVarName) {\n            foundChartStorage = true;\n          }\n        }\n      });\n    }\n    \n    if (!foundChartStorage) {\n      context.violations.push({\n        severity: ''low'',\n        message: `Chart instance ''$' + '{chartVarName}'' may not be stored in ref for export functionality`,\n        line: path.node.loc?.start.line,\n        column: path.node.loc?.start.column,\n        suggestion: ''Store chart in ref: chartRef.current = chart;''\n      });\n    }\n  }\n}"},"checkAnomalyFormat":{"description":"Validate anomaly data format for annotations","severity":"medium","validate":"// Validates that anomaly data for ApexCharts annotations is correctly formatted\n(ast, path, t, context) => {\n  // Look for annotations configuration in chart options\n  if (t.isObjectProperty(path.node) && \n      t.isIdentifier(path.node.key) && \n      path.node.key.name === ''annotations'') {\n     \n    const value = path.node.value;\n    if (t.isObjectExpression(value)) {\n      // Check for points property\n      const pointsProp = value.properties.find(p => \n        t.isObjectProperty(p) && \n        t.isIdentifier(p.key) && \n        p.key.name === ''points'' \n      );\n      \n      if (pointsProp) {\n        // Check if it''s mapping over anomalies\n        if (t.isCallExpression(pointsProp.value) && \n            t.isMemberExpression(pointsProp.value.callee) &&\n            pointsProp.value.callee.property?.name === ''map'') {\n          \n          const mapArg = pointsProp.value.arguments[0];\n          if (t.isArrowFunctionExpression(mapArg) || t.isFunctionExpression(mapArg)) {\n            const body = mapArg.body;\n            \n            // Check the structure being returned\n            if (t.isObjectExpression(body) || \n                (t.isBlockStatement(body) && body.body.length > 0)) {\n              \n              // Look for common mistakes\n              const checkForDateField = (obj) => {\n                if (t.isObjectExpression(obj)) {\n                  const hasDate = obj.properties.some(p => \n                    t.isObjectProperty(p) && \n                    t.isIdentifier(p.key) && \n                    p.key.name === ''date''\n                  );\n                  const hasX = obj.properties.some(p => \n                    t.isObjectProperty(p) && \n                    t.isIdentifier(p.key) && \n                    p.key.name === ''x''\n                  );\n                  \n                  if (hasDate && !hasX) {\n                    context.violations.push({\n                      severity: ''critical'',\n                      message: ''Anomaly annotations should use \"x\" property with timestamp, not \"date\"'',\n                      line: obj.loc?.start.line,\n                      column: obj.loc?.start.column,\n                      suggestion: ''Change to: { x: new Date(anomaly.date).getTime(), y: anomaly.value, ... }''\n                    });\n                  }\n                }\n              };\n              \n              if (t.isObjectExpression(body)) {\n                checkForDateField(body);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  // Check for anomaly data being set in state\n  if (t.isCallExpression(path.node) && \n      t.isIdentifier(path.node.callee) && \n      path.node.callee.name === ''setAnomalies'') {\n    \n    const arg = path.node.arguments[0];\n    if (t.isArrayExpression(arg) && arg.elements.length > 0) {\n      const firstElement = arg.elements[0];\n      \n      if (t.isObjectExpression(firstElement)) {\n        const hasDate = firstElement.properties.some(p => \n          t.isObjectProperty(p) && \n          t.isIdentifier(p.key) && \n          p.key.name === ''date''\n        );\n        const hasX = firstElement.properties.some(p => \n          t.isObjectProperty(p) && \n          t.isIdentifier(p.key) && \n          p.key.name === ''x''\n        );\n        \n        if (hasDate && !hasX) {\n          context.violations.push({\n            severity: ''medium'',\n            message: ''Anomaly data should include \"x\" property for ApexCharts compatibility'',\n            line: firstElement.loc?.start.line,\n            column: firstElement.loc?.start.column,\n            suggestion: ''Include: { x: new Date(point.date), y: value, metric: metricName }''\n          });\n        }\n      }\n    }\n  }\n}"}}}'
SET
  @ID_2e3ec85d = '91E9DB43-6688-4838-939E-C4FC1F15C6CE'
EXEC [${flyway:defaultSchema}].spUpdateComponentLibrary @Name = @Name_2e3ec85d,
  @DisplayName = @DisplayName_2e3ec85d,
  @Version = @Version_2e3ec85d,
  @GlobalVariable = @GlobalVariable_2e3ec85d,
  @Category = @Category_2e3ec85d,
  @CDNUrl = @CDNUrl_2e3ec85d,
  @CDNCssUrl = @CDNCssUrl_2e3ec85d,
  @Description = @Description_2e3ec85d,
  @Status = @Status_2e3ec85d,
  @LintRules = @LintRules_2e3ec85d,
  @Dependencies = @Dependencies_2e3ec85d,
  @ID = @ID_2e3ec85d;

  