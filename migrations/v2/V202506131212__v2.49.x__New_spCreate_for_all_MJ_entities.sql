/* spCreate SQL for Scheduled Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Actions
-- Item: spCreateScheduledAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ScheduledAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateScheduledAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateScheduledAction]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @CreatedByUserID uniqueidentifier,
    @ActionID uniqueidentifier,
    @Type nvarchar(20),
    @CronExpression nvarchar(100),
    @Timezone nvarchar(100),
    @Status nvarchar(20),
    @IntervalDays int,
    @DayOfWeek nvarchar(20),
    @DayOfMonth int,
    @Month nvarchar(20),
    @CustomCronExpression nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ScheduledAction]
            (
                [ID],
                [Name],
                [Description],
                [CreatedByUserID],
                [ActionID],
                [Type],
                [CronExpression],
                [Timezone],
                [Status],
                [IntervalDays],
                [DayOfWeek],
                [DayOfMonth],
                [Month],
                [CustomCronExpression]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @CreatedByUserID,
                @ActionID,
                @Type,
                @CronExpression,
                @Timezone,
                @Status,
                @IntervalDays,
                @DayOfWeek,
                @DayOfMonth,
                @Month,
                @CustomCronExpression
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ScheduledAction]
            (
                [Name],
                [Description],
                [CreatedByUserID],
                [ActionID],
                [Type],
                [CronExpression],
                [Timezone],
                [Status],
                [IntervalDays],
                [DayOfWeek],
                [DayOfMonth],
                [Month],
                [CustomCronExpression]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @CreatedByUserID,
                @ActionID,
                @Type,
                @CronExpression,
                @Timezone,
                @Status,
                @IntervalDays,
                @DayOfWeek,
                @DayOfMonth,
                @Month,
                @CustomCronExpression
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwScheduledActions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateScheduledAction] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Scheduled Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateScheduledAction] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Scheduled Action Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Scheduled Action Params
-- Item: spCreateScheduledActionParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ScheduledActionParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateScheduledActionParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateScheduledActionParam]
    @ID uniqueidentifier = NULL,
    @ScheduledActionID uniqueidentifier,
    @ActionParamID uniqueidentifier,
    @ValueType nvarchar(20),
    @Value nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ScheduledActionParam]
            (
                [ID],
                [ScheduledActionID],
                [ActionParamID],
                [ValueType],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ScheduledActionID,
                @ActionParamID,
                @ValueType,
                @Value,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ScheduledActionParam]
            (
                [ScheduledActionID],
                [ActionParamID],
                [ValueType],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ScheduledActionID,
                @ActionParamID,
                @ValueType,
                @Value,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwScheduledActionParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateScheduledActionParam] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Scheduled Action Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateScheduledActionParam] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Explorer Navigation Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Explorer Navigation Items
-- Item: spCreateExplorerNavigationItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ExplorerNavigationItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateExplorerNavigationItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateExplorerNavigationItem]
    @ID uniqueidentifier = NULL,
    @Sequence int,
    @Name nvarchar(100),
    @Route nvarchar(255),
    @IsActive bit,
    @ShowInHomeScreen bit,
    @ShowInNavigationDrawer bit,
    @IconCSSClass nvarchar(100),
    @Description nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ExplorerNavigationItem]
            (
                [ID],
                [Sequence],
                [Name],
                [Route],
                [IsActive],
                [ShowInHomeScreen],
                [ShowInNavigationDrawer],
                [IconCSSClass],
                [Description],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Sequence,
                @Name,
                @Route,
                @IsActive,
                @ShowInHomeScreen,
                @ShowInNavigationDrawer,
                @IconCSSClass,
                @Description,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ExplorerNavigationItem]
            (
                [Sequence],
                [Name],
                [Route],
                [IsActive],
                [ShowInHomeScreen],
                [ShowInNavigationDrawer],
                [IconCSSClass],
                [Description],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Sequence,
                @Name,
                @Route,
                @IsActive,
                @ShowInHomeScreen,
                @ShowInNavigationDrawer,
                @IconCSSClass,
                @Description,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwExplorerNavigationItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateExplorerNavigationItem] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Explorer Navigation Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateExplorerNavigationItem] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Generated Code Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Generated Code Categories
-- Item: spCreateGeneratedCodeCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR GeneratedCodeCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateGeneratedCodeCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateGeneratedCodeCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[GeneratedCodeCategory]
            (
                [ID],
                [Name],
                [Description],
                [ParentID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ParentID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[GeneratedCodeCategory]
            (
                [Name],
                [Description],
                [ParentID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ParentID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwGeneratedCodeCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateGeneratedCodeCategory] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Generated Code Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateGeneratedCodeCategory] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Agent Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Models
-- Item: spCreateAIAgentModel
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentModel
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentModel]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentModel]
    @ID uniqueidentifier = NULL,
    @AgentID uniqueidentifier,
    @ModelID uniqueidentifier,
    @Active bit,
    @Priority int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentModel]
            (
                [ID],
                [AgentID],
                [ModelID],
                [Active],
                [Priority]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AgentID,
                @ModelID,
                @Active,
                @Priority
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentModel]
            (
                [AgentID],
                [ModelID],
                [Active],
                [Priority]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AgentID,
                @ModelID,
                @Active,
                @Priority
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentModels] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentModel] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agent Models */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentModel] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Agent Note Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Note Types
-- Item: spCreateAIAgentNoteType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentNoteType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentNoteType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentNoteType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentNoteType]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentNoteType]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentNoteTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentNoteType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agent Note Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentNoteType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Agent Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Agent Runs
-- Item: spCreateAIAgentRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentRun]
    @ID uniqueidentifier = NULL,
    @AgentID uniqueidentifier,
    @ParentRunID uniqueidentifier,
    @Status nvarchar(50),
    @StartedAt datetimeoffset,
    @CompletedAt datetimeoffset,
    @Success bit,
    @ErrorMessage nvarchar(MAX),
    @ConversationID uniqueidentifier,
    @UserID uniqueidentifier,
    @Result nvarchar(MAX),
    @AgentState nvarchar(MAX),
    @TotalTokensUsed int,
    @TotalCost decimal(18, 6),
    @TotalPromptTokensUsed int,
    @TotalCompletionTokensUsed int,
    @TotalTokensUsedRollup int,
    @TotalPromptTokensUsedRollup int,
    @TotalCompletionTokensUsedRollup int,
    @TotalCostRollup decimal(19, 8)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentRun]
            (
                [ID],
                [AgentID],
                [ParentRunID],
                [Status],
                [StartedAt],
                [CompletedAt],
                [Success],
                [ErrorMessage],
                [ConversationID],
                [UserID],
                [Result],
                [AgentState],
                [TotalTokensUsed],
                [TotalCost],
                [TotalPromptTokensUsed],
                [TotalCompletionTokensUsed],
                [TotalTokensUsedRollup],
                [TotalPromptTokensUsedRollup],
                [TotalCompletionTokensUsedRollup],
                [TotalCostRollup]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AgentID,
                @ParentRunID,
                @Status,
                @StartedAt,
                @CompletedAt,
                @Success,
                @ErrorMessage,
                @ConversationID,
                @UserID,
                @Result,
                @AgentState,
                @TotalTokensUsed,
                @TotalCost,
                @TotalPromptTokensUsed,
                @TotalCompletionTokensUsed,
                @TotalTokensUsedRollup,
                @TotalPromptTokensUsedRollup,
                @TotalCompletionTokensUsedRollup,
                @TotalCostRollup
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentRun]
            (
                [AgentID],
                [ParentRunID],
                [Status],
                [StartedAt],
                [CompletedAt],
                [Success],
                [ErrorMessage],
                [ConversationID],
                [UserID],
                [Result],
                [AgentState],
                [TotalTokensUsed],
                [TotalCost],
                [TotalPromptTokensUsed],
                [TotalCompletionTokensUsed],
                [TotalTokensUsedRollup],
                [TotalPromptTokensUsedRollup],
                [TotalCompletionTokensUsedRollup],
                [TotalCostRollup]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AgentID,
                @ParentRunID,
                @Status,
                @StartedAt,
                @CompletedAt,
                @Success,
                @ErrorMessage,
                @ConversationID,
                @UserID,
                @Result,
                @AgentState,
                @TotalTokensUsed,
                @TotalCost,
                @TotalPromptTokensUsed,
                @TotalCompletionTokensUsed,
                @TotalTokensUsedRollup,
                @TotalPromptTokensUsedRollup,
                @TotalCompletionTokensUsedRollup,
                @TotalCostRollup
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Agent Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentRun] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Vendors */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Vendors
-- Item: spCreateAIVendor
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIVendor
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIVendor]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIVendor]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIVendor]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIVendor]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIVendors] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIVendor] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Vendors */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIVendor] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Configurations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Configurations
-- Item: spCreateAIConfiguration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIConfiguration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIConfiguration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIConfiguration]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @IsDefault bit,
    @Status nvarchar(20),
    @DefaultPromptForContextCompressionID uniqueidentifier,
    @DefaultPromptForContextSummarizationID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIConfiguration]
            (
                [ID],
                [Name],
                [Description],
                [IsDefault],
                [Status],
                [DefaultPromptForContextCompressionID],
                [DefaultPromptForContextSummarizationID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @IsDefault,
                @Status,
                @DefaultPromptForContextCompressionID,
                @DefaultPromptForContextSummarizationID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIConfiguration]
            (
                [Name],
                [Description],
                [IsDefault],
                [Status],
                [DefaultPromptForContextCompressionID],
                [DefaultPromptForContextSummarizationID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @IsDefault,
                @Status,
                @DefaultPromptForContextCompressionID,
                @DefaultPromptForContextSummarizationID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIConfigurations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIConfiguration] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Configurations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIConfiguration] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Agents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agents
-- Item: spCreateAIAgent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgent
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgent]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgent]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @LogoURL nvarchar(255),
    @ParentID uniqueidentifier,
    @ExposeAsAction bit,
    @ExecutionOrder int,
    @ExecutionMode nvarchar(20),
    @EnableContextCompression bit,
    @ContextCompressionMessageThreshold int,
    @ContextCompressionPromptID uniqueidentifier,
    @ContextCompressionMessageRetentionCount int,
    @TypeID uniqueidentifier,
    @Status nvarchar(20),
    @DriverClass nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgent]
            (
                [ID],
                [Name],
                [Description],
                [LogoURL],
                [ParentID],
                [ExposeAsAction],
                [ExecutionOrder],
                [ExecutionMode],
                [EnableContextCompression],
                [ContextCompressionMessageThreshold],
                [ContextCompressionPromptID],
                [ContextCompressionMessageRetentionCount],
                [TypeID],
                [Status],
                [DriverClass]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @LogoURL,
                @ParentID,
                @ExposeAsAction,
                @ExecutionOrder,
                @ExecutionMode,
                @EnableContextCompression,
                @ContextCompressionMessageThreshold,
                @ContextCompressionPromptID,
                @ContextCompressionMessageRetentionCount,
                @TypeID,
                @Status,
                @DriverClass
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgent]
            (
                [Name],
                [Description],
                [LogoURL],
                [ParentID],
                [ExposeAsAction],
                [ExecutionOrder],
                [ExecutionMode],
                [EnableContextCompression],
                [ContextCompressionMessageThreshold],
                [ContextCompressionPromptID],
                [ContextCompressionMessageRetentionCount],
                [TypeID],
                [Status],
                [DriverClass]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @LogoURL,
                @ParentID,
                @ExposeAsAction,
                @ExecutionOrder,
                @ExecutionMode,
                @EnableContextCompression,
                @ContextCompressionMessageThreshold,
                @ContextCompressionPromptID,
                @ContextCompressionMessageRetentionCount,
                @TypeID,
                @Status,
                @DriverClass
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgents] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgent] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgent] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Prompt Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Prompt Models
-- Item: spCreateAIPromptModel
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIPromptModel
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIPromptModel]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIPromptModel]
    @ID uniqueidentifier = NULL,
    @PromptID uniqueidentifier,
    @ModelID uniqueidentifier,
    @VendorID uniqueidentifier,
    @ConfigurationID uniqueidentifier,
    @Priority int,
    @ExecutionGroup int,
    @ModelParameters nvarchar(MAX),
    @Status nvarchar(20),
    @ParallelizationMode nvarchar(20),
    @ParallelCount int,
    @ParallelConfigParam nvarchar(100)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIPromptModel]
            (
                [ID],
                [PromptID],
                [ModelID],
                [VendorID],
                [ConfigurationID],
                [Priority],
                [ExecutionGroup],
                [ModelParameters],
                [Status],
                [ParallelizationMode],
                [ParallelCount],
                [ParallelConfigParam]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @PromptID,
                @ModelID,
                @VendorID,
                @ConfigurationID,
                @Priority,
                @ExecutionGroup,
                @ModelParameters,
                @Status,
                @ParallelizationMode,
                @ParallelCount,
                @ParallelConfigParam
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIPromptModel]
            (
                [PromptID],
                [ModelID],
                [VendorID],
                [ConfigurationID],
                [Priority],
                [ExecutionGroup],
                [ModelParameters],
                [Status],
                [ParallelizationMode],
                [ParallelCount],
                [ParallelConfigParam]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @PromptID,
                @ModelID,
                @VendorID,
                @ConfigurationID,
                @Priority,
                @ExecutionGroup,
                @ModelParameters,
                @Status,
                @ParallelizationMode,
                @ParallelCount,
                @ParallelConfigParam
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIPromptModels] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPromptModel] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Prompt Models */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPromptModel] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Agent Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Agent Types
-- Item: spCreateAIAgentType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @SystemPromptID uniqueidentifier,
    @IsActive bit,
    @AgentPromptPlaceholder nvarchar(255),
    @DriverClass nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentType]
            (
                [ID],
                [Name],
                [Description],
                [SystemPromptID],
                [IsActive],
                [AgentPromptPlaceholder],
                [DriverClass]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @SystemPromptID,
                @IsActive,
                @AgentPromptPlaceholder,
                @DriverClass
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentType]
            (
                [Name],
                [Description],
                [SystemPromptID],
                [IsActive],
                [AgentPromptPlaceholder],
                [DriverClass]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @SystemPromptID,
                @IsActive,
                @AgentPromptPlaceholder,
                @DriverClass
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Agent Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Agent Notes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Notes
-- Item: spCreateAIAgentNote
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentNote
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentNote]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentNote]
    @ID uniqueidentifier = NULL,
    @AgentID uniqueidentifier,
    @AgentNoteTypeID uniqueidentifier,
    @Note nvarchar(MAX),
    @Type nvarchar(20),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentNote]
            (
                [ID],
                [AgentID],
                [AgentNoteTypeID],
                [Note],
                [Type],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AgentID,
                @AgentNoteTypeID,
                @Note,
                @Type,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentNote]
            (
                [AgentID],
                [AgentNoteTypeID],
                [Note],
                [Type],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AgentID,
                @AgentNoteTypeID,
                @Note,
                @Type,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentNotes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentNote] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agent Notes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentNote] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Agent Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Actions
-- Item: spCreateAIAgentAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentAction]
    @ID uniqueidentifier = NULL,
    @AgentID uniqueidentifier,
    @ActionID uniqueidentifier,
    @Status nvarchar(15)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentAction]
            (
                [ID],
                [AgentID],
                [ActionID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AgentID,
                @ActionID,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentAction]
            (
                [AgentID],
                [ActionID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AgentID,
                @ActionID,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentActions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentAction] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agent Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentAction] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Prompts */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Prompts
-- Item: spCreateAIPrompt
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIPrompt
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIPrompt]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIPrompt]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @TemplateID uniqueidentifier,
    @CategoryID uniqueidentifier,
    @TypeID uniqueidentifier,
    @Status nvarchar(50),
    @ResponseFormat nvarchar(20),
    @ModelSpecificResponseFormat nvarchar(MAX),
    @AIModelTypeID uniqueidentifier,
    @MinPowerRank int,
    @SelectionStrategy nvarchar(20),
    @PowerPreference nvarchar(20),
    @ParallelizationMode nvarchar(20),
    @ParallelCount int,
    @ParallelConfigParam nvarchar(100),
    @OutputType nvarchar(50),
    @OutputExample nvarchar(MAX),
    @ValidationBehavior nvarchar(50),
    @MaxRetries int,
    @RetryDelayMS int,
    @RetryStrategy nvarchar(20),
    @ResultSelectorPromptID uniqueidentifier,
    @EnableCaching bit,
    @CacheTTLSeconds int,
    @CacheMatchType nvarchar(20),
    @CacheSimilarityThreshold float(53),
    @CacheMustMatchModel bit,
    @CacheMustMatchVendor bit,
    @CacheMustMatchAgent bit,
    @CacheMustMatchConfig bit,
    @PromptRole nvarchar(20),
    @PromptPosition nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIPrompt]
            (
                [ID],
                [Name],
                [Description],
                [TemplateID],
                [CategoryID],
                [TypeID],
                [Status],
                [ResponseFormat],
                [ModelSpecificResponseFormat],
                [AIModelTypeID],
                [MinPowerRank],
                [SelectionStrategy],
                [PowerPreference],
                [ParallelizationMode],
                [ParallelCount],
                [ParallelConfigParam],
                [OutputType],
                [OutputExample],
                [ValidationBehavior],
                [MaxRetries],
                [RetryDelayMS],
                [RetryStrategy],
                [ResultSelectorPromptID],
                [EnableCaching],
                [CacheTTLSeconds],
                [CacheMatchType],
                [CacheSimilarityThreshold],
                [CacheMustMatchModel],
                [CacheMustMatchVendor],
                [CacheMustMatchAgent],
                [CacheMustMatchConfig],
                [PromptRole],
                [PromptPosition]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @TemplateID,
                @CategoryID,
                @TypeID,
                @Status,
                @ResponseFormat,
                @ModelSpecificResponseFormat,
                @AIModelTypeID,
                @MinPowerRank,
                @SelectionStrategy,
                @PowerPreference,
                @ParallelizationMode,
                @ParallelCount,
                @ParallelConfigParam,
                @OutputType,
                @OutputExample,
                @ValidationBehavior,
                @MaxRetries,
                @RetryDelayMS,
                @RetryStrategy,
                @ResultSelectorPromptID,
                @EnableCaching,
                @CacheTTLSeconds,
                @CacheMatchType,
                @CacheSimilarityThreshold,
                @CacheMustMatchModel,
                @CacheMustMatchVendor,
                @CacheMustMatchAgent,
                @CacheMustMatchConfig,
                @PromptRole,
                @PromptPosition
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIPrompt]
            (
                [Name],
                [Description],
                [TemplateID],
                [CategoryID],
                [TypeID],
                [Status],
                [ResponseFormat],
                [ModelSpecificResponseFormat],
                [AIModelTypeID],
                [MinPowerRank],
                [SelectionStrategy],
                [PowerPreference],
                [ParallelizationMode],
                [ParallelCount],
                [ParallelConfigParam],
                [OutputType],
                [OutputExample],
                [ValidationBehavior],
                [MaxRetries],
                [RetryDelayMS],
                [RetryStrategy],
                [ResultSelectorPromptID],
                [EnableCaching],
                [CacheTTLSeconds],
                [CacheMatchType],
                [CacheSimilarityThreshold],
                [CacheMustMatchModel],
                [CacheMustMatchVendor],
                [CacheMustMatchAgent],
                [CacheMustMatchConfig],
                [PromptRole],
                [PromptPosition]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @TemplateID,
                @CategoryID,
                @TypeID,
                @Status,
                @ResponseFormat,
                @ModelSpecificResponseFormat,
                @AIModelTypeID,
                @MinPowerRank,
                @SelectionStrategy,
                @PowerPreference,
                @ParallelizationMode,
                @ParallelCount,
                @ParallelConfigParam,
                @OutputType,
                @OutputExample,
                @ValidationBehavior,
                @MaxRetries,
                @RetryDelayMS,
                @RetryStrategy,
                @ResultSelectorPromptID,
                @EnableCaching,
                @CacheTTLSeconds,
                @CacheMatchType,
                @CacheSimilarityThreshold,
                @CacheMustMatchModel,
                @CacheMustMatchVendor,
                @CacheMustMatchAgent,
                @CacheMustMatchConfig,
                @PromptRole,
                @PromptPosition
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIPrompts] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPrompt] TO [cdp_Developer]
    

/* spCreate Permissions for AI Prompts */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPrompt] TO [cdp_Developer]



/* spCreate SQL for Employees */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employees
-- Item: spCreateEmployee
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Employee
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEmployee]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEmployee]
    @ID uniqueidentifier = NULL,
    @FirstName nvarchar(30),
    @LastName nvarchar(50),
    @CompanyID uniqueidentifier,
    @SupervisorID uniqueidentifier,
    @Title nvarchar(50),
    @Email nvarchar(100),
    @Phone nvarchar(20),
    @Active bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Employee]
            (
                [ID],
                [FirstName],
                [LastName],
                [CompanyID],
                [SupervisorID],
                [Title],
                [Email],
                [Phone],
                [Active]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @FirstName,
                @LastName,
                @CompanyID,
                @SupervisorID,
                @Title,
                @Email,
                @Phone,
                @Active
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Employee]
            (
                [FirstName],
                [LastName],
                [CompanyID],
                [SupervisorID],
                [Title],
                [Email],
                [Phone],
                [Active]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @FirstName,
                @LastName,
                @CompanyID,
                @SupervisorID,
                @Title,
                @Email,
                @Phone,
                @Active
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEmployees] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEmployee] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Employees */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEmployee] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Result Cache */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Result Cache
-- Item: spCreateAIResultCache
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIResultCache
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIResultCache]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIResultCache]
    @ID uniqueidentifier = NULL,
    @AIPromptID uniqueidentifier,
    @AIModelID uniqueidentifier,
    @RunAt datetimeoffset,
    @PromptText nvarchar(MAX),
    @ResultText nvarchar(MAX),
    @Status nvarchar(50),
    @ExpiredOn datetimeoffset,
    @VendorID uniqueidentifier,
    @AgentID uniqueidentifier,
    @ConfigurationID uniqueidentifier,
    @PromptEmbedding varbinary,
    @PromptRunID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIResultCache]
            (
                [ID],
                [AIPromptID],
                [AIModelID],
                [RunAt],
                [PromptText],
                [ResultText],
                [Status],
                [ExpiredOn],
                [VendorID],
                [AgentID],
                [ConfigurationID],
                [PromptEmbedding],
                [PromptRunID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AIPromptID,
                @AIModelID,
                @RunAt,
                @PromptText,
                @ResultText,
                @Status,
                @ExpiredOn,
                @VendorID,
                @AgentID,
                @ConfigurationID,
                @PromptEmbedding,
                @PromptRunID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIResultCache]
            (
                [AIPromptID],
                [AIModelID],
                [RunAt],
                [PromptText],
                [ResultText],
                [Status],
                [ExpiredOn],
                [VendorID],
                [AgentID],
                [ConfigurationID],
                [PromptEmbedding],
                [PromptRunID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AIPromptID,
                @AIModelID,
                @RunAt,
                @PromptText,
                @ResultText,
                @Status,
                @ExpiredOn,
                @VendorID,
                @AgentID,
                @ConfigurationID,
                @PromptEmbedding,
                @PromptRunID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIResultCaches] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
    

/* spCreate Permissions for AI Result Cache */




/* spCreate SQL for AI Prompt Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Prompt Categories
-- Item: spCreateAIPromptCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIPromptCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIPromptCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIPromptCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @ParentID uniqueidentifier,
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIPromptCategory]
            (
                [ID],
                [Name],
                [ParentID],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @ParentID,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIPromptCategory]
            (
                [Name],
                [ParentID],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @ParentID,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIPromptCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPromptCategory] TO [cdp_Developer]
    

/* spCreate Permissions for AI Prompt Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPromptCategory] TO [cdp_Developer]



/* spCreate SQL for AI Prompt Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Prompt Types
-- Item: spCreateAIPromptType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIPromptType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIPromptType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIPromptType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIPromptType]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIPromptType]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIPromptTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPromptType] TO [cdp_Developer]
    

/* spCreate Permissions for AI Prompt Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPromptType] TO [cdp_Developer]



/* spCreate SQL for Companies */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Companies
-- Item: spCreateCompany
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Company
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompany]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompany]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(200),
    @Website nvarchar(100),
    @LogoURL nvarchar(500),
    @Domain nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Company]
            (
                [ID],
                [Name],
                [Description],
                [Website],
                [LogoURL],
                [Domain],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @Website,
                @LogoURL,
                @Domain,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Company]
            (
                [Name],
                [Description],
                [Website],
                [LogoURL],
                [Domain],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @Website,
                @LogoURL,
                @Domain,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanies] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompany] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Companies */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompany] TO [cdp_UI], [cdp_Integration], [cdp_Developer]



/* spCreate SQL for User Favorites */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Favorites
-- Item: spCreateUserFavorite
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserFavorite
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserFavorite]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserFavorite]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserFavorite]
            (
                [ID],
                [UserID],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @EntityID,
                @RecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserFavorite]
            (
                [UserID],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @EntityID,
                @RecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserFavorites] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserFavorite] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for User Favorites */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserFavorite] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spCreate SQL for Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Roles
-- Item: spCreateRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Role
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRole]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @DirectoryID nvarchar(250),
    @SQLName nvarchar(250)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Role]
            (
                [ID],
                [Name],
                [Description],
                [DirectoryID],
                [SQLName]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @DirectoryID,
                @SQLName
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Role]
            (
                [Name],
                [Description],
                [DirectoryID],
                [SQLName]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @DirectoryID,
                @SQLName
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRoles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRole] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRole] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Entity Fields */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Fields
-- Item: spCreateEntityField
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityField
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityField]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityField]
    @ID uniqueidentifier = NULL,
    @DisplayName nvarchar(255),
    @Description nvarchar(MAX),
    @AutoUpdateDescription bit,
    @IsPrimaryKey bit,
    @IsUnique bit,
    @Category nvarchar(255),
    @ValueListType nvarchar(20),
    @ExtendedType nvarchar(50),
    @CodeType nvarchar(50),
    @DefaultInView bit,
    @ViewCellTemplate nvarchar(MAX),
    @DefaultColumnWidth int,
    @AllowUpdateAPI bit,
    @AllowUpdateInView bit,
    @IncludeInUserSearchAPI bit,
    @FullTextSearchEnabled bit,
    @UserSearchParamFormatAPI nvarchar(500),
    @IncludeInGeneratedForm bit,
    @GeneratedFormSection nvarchar(10),
    @IsNameField bit,
    @RelatedEntityID uniqueidentifier,
    @RelatedEntityFieldName nvarchar(255),
    @IncludeRelatedEntityNameFieldInBaseView bit,
    @RelatedEntityNameFieldMap nvarchar(255),
    @RelatedEntityDisplayType nvarchar(20),
    @EntityIDFieldName nvarchar(100),
    @ScopeDefault nvarchar(100),
    @AutoUpdateRelatedEntityInfo bit,
    @ValuesToPackWithSchema nvarchar(10),
    @Status nvarchar(25)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityField]
            (
                [ID],
                [DisplayName],
                [Description],
                [AutoUpdateDescription],
                [IsPrimaryKey],
                [IsUnique],
                [Category],
                [ValueListType],
                [ExtendedType],
                [CodeType],
                [DefaultInView],
                [ViewCellTemplate],
                [DefaultColumnWidth],
                [AllowUpdateAPI],
                [AllowUpdateInView],
                [IncludeInUserSearchAPI],
                [FullTextSearchEnabled],
                [UserSearchParamFormatAPI],
                [IncludeInGeneratedForm],
                [GeneratedFormSection],
                [IsNameField],
                [RelatedEntityID],
                [RelatedEntityFieldName],
                [IncludeRelatedEntityNameFieldInBaseView],
                [RelatedEntityNameFieldMap],
                [RelatedEntityDisplayType],
                [EntityIDFieldName],
                [ScopeDefault],
                [AutoUpdateRelatedEntityInfo],
                [ValuesToPackWithSchema],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @DisplayName,
                @Description,
                @AutoUpdateDescription,
                @IsPrimaryKey,
                @IsUnique,
                @Category,
                @ValueListType,
                @ExtendedType,
                @CodeType,
                @DefaultInView,
                @ViewCellTemplate,
                @DefaultColumnWidth,
                @AllowUpdateAPI,
                @AllowUpdateInView,
                @IncludeInUserSearchAPI,
                @FullTextSearchEnabled,
                @UserSearchParamFormatAPI,
                @IncludeInGeneratedForm,
                @GeneratedFormSection,
                @IsNameField,
                @RelatedEntityID,
                @RelatedEntityFieldName,
                @IncludeRelatedEntityNameFieldInBaseView,
                @RelatedEntityNameFieldMap,
                @RelatedEntityDisplayType,
                @EntityIDFieldName,
                @ScopeDefault,
                @AutoUpdateRelatedEntityInfo,
                @ValuesToPackWithSchema,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityField]
            (
                [DisplayName],
                [Description],
                [AutoUpdateDescription],
                [IsPrimaryKey],
                [IsUnique],
                [Category],
                [ValueListType],
                [ExtendedType],
                [CodeType],
                [DefaultInView],
                [ViewCellTemplate],
                [DefaultColumnWidth],
                [AllowUpdateAPI],
                [AllowUpdateInView],
                [IncludeInUserSearchAPI],
                [FullTextSearchEnabled],
                [UserSearchParamFormatAPI],
                [IncludeInGeneratedForm],
                [GeneratedFormSection],
                [IsNameField],
                [RelatedEntityID],
                [RelatedEntityFieldName],
                [IncludeRelatedEntityNameFieldInBaseView],
                [RelatedEntityNameFieldMap],
                [RelatedEntityDisplayType],
                [EntityIDFieldName],
                [ScopeDefault],
                [AutoUpdateRelatedEntityInfo],
                [ValuesToPackWithSchema],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @DisplayName,
                @Description,
                @AutoUpdateDescription,
                @IsPrimaryKey,
                @IsUnique,
                @Category,
                @ValueListType,
                @ExtendedType,
                @CodeType,
                @DefaultInView,
                @ViewCellTemplate,
                @DefaultColumnWidth,
                @AllowUpdateAPI,
                @AllowUpdateInView,
                @IncludeInUserSearchAPI,
                @FullTextSearchEnabled,
                @UserSearchParamFormatAPI,
                @IncludeInGeneratedForm,
                @GeneratedFormSection,
                @IsNameField,
                @RelatedEntityID,
                @RelatedEntityFieldName,
                @IncludeRelatedEntityNameFieldInBaseView,
                @RelatedEntityNameFieldMap,
                @RelatedEntityDisplayType,
                @EntityIDFieldName,
                @ScopeDefault,
                @AutoUpdateRelatedEntityInfo,
                @ValuesToPackWithSchema,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityFields] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityField] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Fields */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityField] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entities */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entities
-- Item: spCreateEntity
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Entity
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntity]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntity]
    @ID uniqueidentifier = NULL,
    @ParentID uniqueidentifier,
    @Name nvarchar(255),
    @NameSuffix nvarchar(255),
    @Description nvarchar(MAX),
    @AutoUpdateDescription bit,
    @BaseView nvarchar(255),
    @BaseViewGenerated bit,
    @VirtualEntity bit,
    @TrackRecordChanges bit,
    @AuditRecordAccess bit,
    @AuditViewRuns bit,
    @IncludeInAPI bit,
    @AllowAllRowsAPI bit,
    @AllowUpdateAPI bit,
    @AllowCreateAPI bit,
    @AllowDeleteAPI bit,
    @CustomResolverAPI bit,
    @AllowUserSearchAPI bit,
    @FullTextSearchEnabled bit,
    @FullTextCatalog nvarchar(255),
    @FullTextCatalogGenerated bit,
    @FullTextIndex nvarchar(255),
    @FullTextIndexGenerated bit,
    @FullTextSearchFunction nvarchar(255),
    @FullTextSearchFunctionGenerated bit,
    @UserViewMaxRows int,
    @spCreate nvarchar(255),
    @spUpdate nvarchar(255),
    @spDelete nvarchar(255),
    @spCreateGenerated bit,
    @spUpdateGenerated bit,
    @spDeleteGenerated bit,
    @CascadeDeletes bit,
    @DeleteType nvarchar(10),
    @AllowRecordMerge bit,
    @spMatch nvarchar(255),
    @RelationshipDefaultDisplayType nvarchar(20),
    @UserFormGenerated bit,
    @EntityObjectSubclassName nvarchar(255),
    @EntityObjectSubclassImport nvarchar(255),
    @PreferredCommunicationField nvarchar(255),
    @Icon nvarchar(500),
    @ScopeDefault nvarchar(100),
    @RowsToPackWithSchema nvarchar(20),
    @RowsToPackSampleMethod nvarchar(20),
    @RowsToPackSampleCount int,
    @RowsToPackSampleOrder nvarchar(MAX),
    @AutoRowCountFrequency int,
    @RowCount bigint,
    @RowCountRunAt datetimeoffset,
    @Status nvarchar(25)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Entity]
            (
                [ID],
                [ParentID],
                [Name],
                [NameSuffix],
                [Description],
                [AutoUpdateDescription],
                [BaseView],
                [BaseViewGenerated],
                [VirtualEntity],
                [TrackRecordChanges],
                [AuditRecordAccess],
                [AuditViewRuns],
                [IncludeInAPI],
                [AllowAllRowsAPI],
                [AllowUpdateAPI],
                [AllowCreateAPI],
                [AllowDeleteAPI],
                [CustomResolverAPI],
                [AllowUserSearchAPI],
                [FullTextSearchEnabled],
                [FullTextCatalog],
                [FullTextCatalogGenerated],
                [FullTextIndex],
                [FullTextIndexGenerated],
                [FullTextSearchFunction],
                [FullTextSearchFunctionGenerated],
                [UserViewMaxRows],
                [spCreate],
                [spUpdate],
                [spDelete],
                [spCreateGenerated],
                [spUpdateGenerated],
                [spDeleteGenerated],
                [CascadeDeletes],
                [DeleteType],
                [AllowRecordMerge],
                [spMatch],
                [RelationshipDefaultDisplayType],
                [UserFormGenerated],
                [EntityObjectSubclassName],
                [EntityObjectSubclassImport],
                [PreferredCommunicationField],
                [Icon],
                [ScopeDefault],
                [RowsToPackWithSchema],
                [RowsToPackSampleMethod],
                [RowsToPackSampleCount],
                [RowsToPackSampleOrder],
                [AutoRowCountFrequency],
                [RowCount],
                [RowCountRunAt],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ParentID,
                @Name,
                @NameSuffix,
                @Description,
                @AutoUpdateDescription,
                @BaseView,
                @BaseViewGenerated,
                @VirtualEntity,
                @TrackRecordChanges,
                @AuditRecordAccess,
                @AuditViewRuns,
                @IncludeInAPI,
                @AllowAllRowsAPI,
                @AllowUpdateAPI,
                @AllowCreateAPI,
                @AllowDeleteAPI,
                @CustomResolverAPI,
                @AllowUserSearchAPI,
                @FullTextSearchEnabled,
                @FullTextCatalog,
                @FullTextCatalogGenerated,
                @FullTextIndex,
                @FullTextIndexGenerated,
                @FullTextSearchFunction,
                @FullTextSearchFunctionGenerated,
                @UserViewMaxRows,
                @spCreate,
                @spUpdate,
                @spDelete,
                @spCreateGenerated,
                @spUpdateGenerated,
                @spDeleteGenerated,
                @CascadeDeletes,
                @DeleteType,
                @AllowRecordMerge,
                @spMatch,
                @RelationshipDefaultDisplayType,
                @UserFormGenerated,
                @EntityObjectSubclassName,
                @EntityObjectSubclassImport,
                @PreferredCommunicationField,
                @Icon,
                @ScopeDefault,
                @RowsToPackWithSchema,
                @RowsToPackSampleMethod,
                @RowsToPackSampleCount,
                @RowsToPackSampleOrder,
                @AutoRowCountFrequency,
                @RowCount,
                @RowCountRunAt,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Entity]
            (
                [ParentID],
                [Name],
                [NameSuffix],
                [Description],
                [AutoUpdateDescription],
                [BaseView],
                [BaseViewGenerated],
                [VirtualEntity],
                [TrackRecordChanges],
                [AuditRecordAccess],
                [AuditViewRuns],
                [IncludeInAPI],
                [AllowAllRowsAPI],
                [AllowUpdateAPI],
                [AllowCreateAPI],
                [AllowDeleteAPI],
                [CustomResolverAPI],
                [AllowUserSearchAPI],
                [FullTextSearchEnabled],
                [FullTextCatalog],
                [FullTextCatalogGenerated],
                [FullTextIndex],
                [FullTextIndexGenerated],
                [FullTextSearchFunction],
                [FullTextSearchFunctionGenerated],
                [UserViewMaxRows],
                [spCreate],
                [spUpdate],
                [spDelete],
                [spCreateGenerated],
                [spUpdateGenerated],
                [spDeleteGenerated],
                [CascadeDeletes],
                [DeleteType],
                [AllowRecordMerge],
                [spMatch],
                [RelationshipDefaultDisplayType],
                [UserFormGenerated],
                [EntityObjectSubclassName],
                [EntityObjectSubclassImport],
                [PreferredCommunicationField],
                [Icon],
                [ScopeDefault],
                [RowsToPackWithSchema],
                [RowsToPackSampleMethod],
                [RowsToPackSampleCount],
                [RowsToPackSampleOrder],
                [AutoRowCountFrequency],
                [RowCount],
                [RowCountRunAt],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ParentID,
                @Name,
                @NameSuffix,
                @Description,
                @AutoUpdateDescription,
                @BaseView,
                @BaseViewGenerated,
                @VirtualEntity,
                @TrackRecordChanges,
                @AuditRecordAccess,
                @AuditViewRuns,
                @IncludeInAPI,
                @AllowAllRowsAPI,
                @AllowUpdateAPI,
                @AllowCreateAPI,
                @AllowDeleteAPI,
                @CustomResolverAPI,
                @AllowUserSearchAPI,
                @FullTextSearchEnabled,
                @FullTextCatalog,
                @FullTextCatalogGenerated,
                @FullTextIndex,
                @FullTextIndexGenerated,
                @FullTextSearchFunction,
                @FullTextSearchFunctionGenerated,
                @UserViewMaxRows,
                @spCreate,
                @spUpdate,
                @spDelete,
                @spCreateGenerated,
                @spUpdateGenerated,
                @spDeleteGenerated,
                @CascadeDeletes,
                @DeleteType,
                @AllowRecordMerge,
                @spMatch,
                @RelationshipDefaultDisplayType,
                @UserFormGenerated,
                @EntityObjectSubclassName,
                @EntityObjectSubclassImport,
                @PreferredCommunicationField,
                @Icon,
                @ScopeDefault,
                @RowsToPackWithSchema,
                @RowsToPackSampleMethod,
                @RowsToPackSampleCount,
                @RowsToPackSampleOrder,
                @AutoRowCountFrequency,
                @RowCount,
                @RowCountRunAt,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntities] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntity] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Entities */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntity] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Users */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Users
-- Item: spCreateUser
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR User
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUser]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUser]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @FirstName nvarchar(50),
    @LastName nvarchar(50),
    @Title nvarchar(50),
    @Email nvarchar(100),
    @Type nchar(15),
    @IsActive bit,
    @LinkedRecordType nchar(10),
    @LinkedEntityID uniqueidentifier,
    @LinkedEntityRecordID nvarchar(450),
    @EmployeeID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[User]
            (
                [ID],
                [Name],
                [FirstName],
                [LastName],
                [Title],
                [Email],
                [Type],
                [IsActive],
                [LinkedRecordType],
                [LinkedEntityID],
                [LinkedEntityRecordID],
                [EmployeeID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @FirstName,
                @LastName,
                @Title,
                @Email,
                @Type,
                @IsActive,
                @LinkedRecordType,
                @LinkedEntityID,
                @LinkedEntityRecordID,
                @EmployeeID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[User]
            (
                [Name],
                [FirstName],
                [LastName],
                [Title],
                [Email],
                [Type],
                [IsActive],
                [LinkedRecordType],
                [LinkedEntityID],
                [LinkedEntityRecordID],
                [EmployeeID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @FirstName,
                @LastName,
                @Title,
                @Email,
                @Type,
                @IsActive,
                @LinkedRecordType,
                @LinkedEntityID,
                @LinkedEntityRecordID,
                @EmployeeID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUsers] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUser] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Users */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUser] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Relationships */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Relationships
-- Item: spCreateEntityRelationship
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityRelationship
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityRelationship]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityRelationship]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @Sequence int,
    @RelatedEntityID uniqueidentifier,
    @BundleInAPI bit,
    @IncludeInParentAllQuery bit,
    @Type nchar(20),
    @EntityKeyField nvarchar(255),
    @RelatedEntityJoinField nvarchar(255),
    @JoinView nvarchar(255),
    @JoinEntityJoinField nvarchar(255),
    @JoinEntityInverseJoinField nvarchar(255),
    @DisplayInForm bit,
    @DisplayLocation nvarchar(50),
    @DisplayName nvarchar(255),
    @DisplayIconType nvarchar(50),
    @DisplayIcon nvarchar(255),
    @DisplayComponentID uniqueidentifier,
    @DisplayComponentConfiguration nvarchar(MAX),
    @AutoUpdateFromSchema bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityRelationship]
            (
                [ID],
                [EntityID],
                [Sequence],
                [RelatedEntityID],
                [BundleInAPI],
                [IncludeInParentAllQuery],
                [Type],
                [EntityKeyField],
                [RelatedEntityJoinField],
                [JoinView],
                [JoinEntityJoinField],
                [JoinEntityInverseJoinField],
                [DisplayInForm],
                [DisplayLocation],
                [DisplayName],
                [DisplayIconType],
                [DisplayIcon],
                [DisplayComponentID],
                [DisplayComponentConfiguration],
                [AutoUpdateFromSchema]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @Sequence,
                @RelatedEntityID,
                @BundleInAPI,
                @IncludeInParentAllQuery,
                @Type,
                @EntityKeyField,
                @RelatedEntityJoinField,
                @JoinView,
                @JoinEntityJoinField,
                @JoinEntityInverseJoinField,
                @DisplayInForm,
                @DisplayLocation,
                @DisplayName,
                @DisplayIconType,
                @DisplayIcon,
                @DisplayComponentID,
                @DisplayComponentConfiguration,
                @AutoUpdateFromSchema
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityRelationship]
            (
                [EntityID],
                [Sequence],
                [RelatedEntityID],
                [BundleInAPI],
                [IncludeInParentAllQuery],
                [Type],
                [EntityKeyField],
                [RelatedEntityJoinField],
                [JoinView],
                [JoinEntityJoinField],
                [JoinEntityInverseJoinField],
                [DisplayInForm],
                [DisplayLocation],
                [DisplayName],
                [DisplayIconType],
                [DisplayIcon],
                [DisplayComponentID],
                [DisplayComponentConfiguration],
                [AutoUpdateFromSchema]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @Sequence,
                @RelatedEntityID,
                @BundleInAPI,
                @IncludeInParentAllQuery,
                @Type,
                @EntityKeyField,
                @RelatedEntityJoinField,
                @JoinView,
                @JoinEntityJoinField,
                @JoinEntityInverseJoinField,
                @DisplayInForm,
                @DisplayLocation,
                @DisplayName,
                @DisplayIconType,
                @DisplayIcon,
                @DisplayComponentID,
                @DisplayComponentConfiguration,
                @AutoUpdateFromSchema
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityRelationships] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRelationship] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Relationships */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRelationship] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for User Views */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Views
-- Item: spCreateUserView
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserView
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserView]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserView]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @EntityID uniqueidentifier,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @CategoryID uniqueidentifier,
    @IsShared bit,
    @IsDefault bit,
    @GridState nvarchar(MAX),
    @FilterState nvarchar(MAX),
    @CustomFilterState bit,
    @SmartFilterEnabled bit,
    @SmartFilterPrompt nvarchar(MAX),
    @SmartFilterWhereClause nvarchar(MAX),
    @SmartFilterExplanation nvarchar(MAX),
    @WhereClause nvarchar(MAX),
    @CustomWhereClause bit,
    @SortState nvarchar(MAX),
    @Thumbnail nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserView]
            (
                [ID],
                [UserID],
                [EntityID],
                [Name],
                [Description],
                [CategoryID],
                [IsShared],
                [IsDefault],
                [GridState],
                [FilterState],
                [CustomFilterState],
                [SmartFilterEnabled],
                [SmartFilterPrompt],
                [SmartFilterWhereClause],
                [SmartFilterExplanation],
                [WhereClause],
                [CustomWhereClause],
                [SortState],
                [Thumbnail]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @EntityID,
                @Name,
                @Description,
                @CategoryID,
                @IsShared,
                @IsDefault,
                @GridState,
                @FilterState,
                @CustomFilterState,
                @SmartFilterEnabled,
                @SmartFilterPrompt,
                @SmartFilterWhereClause,
                @SmartFilterExplanation,
                @WhereClause,
                @CustomWhereClause,
                @SortState,
                @Thumbnail
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserView]
            (
                [UserID],
                [EntityID],
                [Name],
                [Description],
                [CategoryID],
                [IsShared],
                [IsDefault],
                [GridState],
                [FilterState],
                [CustomFilterState],
                [SmartFilterEnabled],
                [SmartFilterPrompt],
                [SmartFilterWhereClause],
                [SmartFilterExplanation],
                [WhereClause],
                [CustomWhereClause],
                [SortState],
                [Thumbnail]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @EntityID,
                @Name,
                @Description,
                @CategoryID,
                @IsShared,
                @IsDefault,
                @GridState,
                @FilterState,
                @CustomFilterState,
                @SmartFilterEnabled,
                @SmartFilterPrompt,
                @SmartFilterWhereClause,
                @SmartFilterExplanation,
                @WhereClause,
                @CustomWhereClause,
                @SortState,
                @Thumbnail
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserViews] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserView] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    

/* spCreate Permissions for User Views */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserView] TO [cdp_Integration], [cdp_Developer], [cdp_UI]



/* spCreate SQL for Company Integration Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Runs
-- Item: spCreateCompanyIntegrationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CompanyIntegrationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompanyIntegrationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompanyIntegrationRun]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationID uniqueidentifier,
    @RunByUserID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @TotalRecords int,
    @Comments nvarchar(MAX),
    @Status nvarchar(20),
    @ErrorLog nvarchar(MAX),
    @ConfigData nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRun]
            (
                [ID],
                [CompanyIntegrationID],
                [RunByUserID],
                [StartedAt],
                [EndedAt],
                [TotalRecords],
                [Comments],
                [Status],
                [ErrorLog],
                [ConfigData]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationID,
                @RunByUserID,
                @StartedAt,
                @EndedAt,
                @TotalRecords,
                @Comments,
                @Status,
                @ErrorLog,
                @ConfigData
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRun]
            (
                [CompanyIntegrationID],
                [RunByUserID],
                [StartedAt],
                [EndedAt],
                [TotalRecords],
                [Comments],
                [Status],
                [ErrorLog],
                [ConfigData]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationID,
                @RunByUserID,
                @StartedAt,
                @EndedAt,
                @TotalRecords,
                @Comments,
                @Status,
                @ErrorLog,
                @ConfigData
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanyIntegrationRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Company Integration Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRun] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Company Integration Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Run Details
-- Item: spCreateCompanyIntegrationRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CompanyIntegrationRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunDetail]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationRunID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @Action nchar(20),
    @ExecutedAt datetime,
    @IsSuccess bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRunDetail]
            (
                [ID],
                [CompanyIntegrationRunID],
                [EntityID],
                [RecordID],
                [Action],
                [ExecutedAt],
                [IsSuccess]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationRunID,
                @EntityID,
                @RecordID,
                @Action,
                @ExecutedAt,
                @IsSuccess
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRunDetail]
            (
                [CompanyIntegrationRunID],
                [EntityID],
                [RecordID],
                [Action],
                [ExecutedAt],
                [IsSuccess]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationRunID,
                @EntityID,
                @RecordID,
                @Action,
                @ExecutedAt,
                @IsSuccess
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanyIntegrationRunDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunDetail] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Company Integration Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Application Entities */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Application Entities
-- Item: spCreateApplicationEntity
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ApplicationEntity
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateApplicationEntity]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateApplicationEntity]
    @ID uniqueidentifier = NULL,
    @ApplicationID uniqueidentifier,
    @EntityID uniqueidentifier,
    @Sequence int,
    @DefaultForNewUser bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ApplicationEntity]
            (
                [ID],
                [ApplicationID],
                [EntityID],
                [Sequence],
                [DefaultForNewUser]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ApplicationID,
                @EntityID,
                @Sequence,
                @DefaultForNewUser
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ApplicationEntity]
            (
                [ApplicationID],
                [EntityID],
                [Sequence],
                [DefaultForNewUser]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ApplicationID,
                @EntityID,
                @Sequence,
                @DefaultForNewUser
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwApplicationEntities] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateApplicationEntity] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Application Entities */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateApplicationEntity] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Error Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Error Logs
-- Item: spCreateErrorLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ErrorLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateErrorLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateErrorLog]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationRunID uniqueidentifier,
    @CompanyIntegrationRunDetailID uniqueidentifier,
    @Code nchar(20),
    @Message nvarchar(MAX),
    @CreatedBy nvarchar(50),
    @Status nvarchar(10),
    @Category nvarchar(20),
    @Details nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ErrorLog]
            (
                [ID],
                [CompanyIntegrationRunID],
                [CompanyIntegrationRunDetailID],
                [Code],
                [Message],
                [CreatedBy],
                [Status],
                [Category],
                [Details]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationRunID,
                @CompanyIntegrationRunDetailID,
                @Code,
                @Message,
                @CreatedBy,
                @Status,
                @Category,
                @Details
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ErrorLog]
            (
                [CompanyIntegrationRunID],
                [CompanyIntegrationRunDetailID],
                [Code],
                [Message],
                [CreatedBy],
                [Status],
                [Category],
                [Details]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationRunID,
                @CompanyIntegrationRunDetailID,
                @Code,
                @Message,
                @CreatedBy,
                @Status,
                @Category,
                @Details
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwErrorLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateErrorLog] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Error Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateErrorLog] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Applications */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Applications
-- Item: spCreateApplication
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Application
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateApplication]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateApplication]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @Icon nvarchar(500),
    @DefaultForNewUser bit,
    @SchemaAutoAddNewEntities nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Application]
            (
                [ID],
                [Name],
                [Description],
                [Icon],
                [DefaultForNewUser],
                [__mj_CreatedAt],
                [__mj_UpdatedAt],
                [SchemaAutoAddNewEntities]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @Icon,
                @DefaultForNewUser,
                GETUTCDATE(),
                GETUTCDATE(),
                @SchemaAutoAddNewEntities
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Application]
            (
                [Name],
                [Description],
                [Icon],
                [DefaultForNewUser],
                [__mj_CreatedAt],
                [__mj_UpdatedAt],
                [SchemaAutoAddNewEntities]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @Icon,
                @DefaultForNewUser,
                GETUTCDATE(),
                GETUTCDATE(),
                @SchemaAutoAddNewEntities
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwApplications] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateApplication] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Applications */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateApplication] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Entity Permissions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Permissions
-- Item: spCreateEntityPermission
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityPermission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityPermission]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityPermission]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @RoleID uniqueidentifier,
    @CanCreate bit,
    @CanRead bit,
    @CanUpdate bit,
    @CanDelete bit,
    @ReadRLSFilterID uniqueidentifier,
    @CreateRLSFilterID uniqueidentifier,
    @UpdateRLSFilterID uniqueidentifier,
    @DeleteRLSFilterID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityPermission]
            (
                [ID],
                [EntityID],
                [RoleID],
                [CanCreate],
                [CanRead],
                [CanUpdate],
                [CanDelete],
                [ReadRLSFilterID],
                [CreateRLSFilterID],
                [UpdateRLSFilterID],
                [DeleteRLSFilterID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @RoleID,
                @CanCreate,
                @CanRead,
                @CanUpdate,
                @CanDelete,
                @ReadRLSFilterID,
                @CreateRLSFilterID,
                @UpdateRLSFilterID,
                @DeleteRLSFilterID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityPermission]
            (
                [EntityID],
                [RoleID],
                [CanCreate],
                [CanRead],
                [CanUpdate],
                [CanDelete],
                [ReadRLSFilterID],
                [CreateRLSFilterID],
                [UpdateRLSFilterID],
                [DeleteRLSFilterID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @RoleID,
                @CanCreate,
                @CanRead,
                @CanUpdate,
                @CanDelete,
                @ReadRLSFilterID,
                @CreateRLSFilterID,
                @UpdateRLSFilterID,
                @DeleteRLSFilterID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityPermissions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityPermission] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Entity Permissions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityPermission] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for User Application Entities */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Application Entities
-- Item: spCreateUserApplicationEntity
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserApplicationEntity
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserApplicationEntity]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserApplicationEntity]
    @ID uniqueidentifier = NULL,
    @UserApplicationID uniqueidentifier,
    @EntityID uniqueidentifier,
    @Sequence int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserApplicationEntity]
            (
                [ID],
                [UserApplicationID],
                [EntityID],
                [Sequence]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserApplicationID,
                @EntityID,
                @Sequence
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserApplicationEntity]
            (
                [UserApplicationID],
                [EntityID],
                [Sequence]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserApplicationID,
                @EntityID,
                @Sequence
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserApplicationEntities] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserApplicationEntity] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for User Application Entities */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserApplicationEntity] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for User Applications */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Applications
-- Item: spCreateUserApplication
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserApplication
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserApplication]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserApplication]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @ApplicationID uniqueidentifier,
    @Sequence int,
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserApplication]
            (
                [ID],
                [UserID],
                [ApplicationID],
                [Sequence],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @ApplicationID,
                @Sequence,
                @IsActive
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserApplication]
            (
                [UserID],
                [ApplicationID],
                [Sequence],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @ApplicationID,
                @Sequence,
                @IsActive
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserApplications] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserApplication] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for User Applications */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserApplication] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Company Integration Run API Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Run API Logs
-- Item: spCreateCompanyIntegrationRunAPILog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CompanyIntegrationRunAPILog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunAPILog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunAPILog]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationRunID uniqueidentifier,
    @ExecutedAt datetime,
    @IsSuccess bit,
    @RequestMethod nvarchar(12),
    @URL nvarchar(MAX),
    @Parameters nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRunAPILog]
            (
                [ID],
                [CompanyIntegrationRunID],
                [ExecutedAt],
                [IsSuccess],
                [RequestMethod],
                [URL],
                [Parameters]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationRunID,
                @ExecutedAt,
                @IsSuccess,
                @RequestMethod,
                @URL,
                @Parameters
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRunAPILog]
            (
                [CompanyIntegrationRunID],
                [ExecutedAt],
                [IsSuccess],
                [RequestMethod],
                [URL],
                [Parameters]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationRunID,
                @ExecutedAt,
                @IsSuccess,
                @RequestMethod,
                @URL,
                @Parameters
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanyIntegrationRunAPILogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunAPILog] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Company Integration Run API Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunAPILog] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Lists */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Lists
-- Item: spCreateList
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR List
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateList]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateList]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @EntityID uniqueidentifier,
    @UserID uniqueidentifier,
    @CategoryID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(100),
    @CompanyIntegrationID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[List]
            (
                [ID],
                [Name],
                [Description],
                [EntityID],
                [UserID],
                [CategoryID],
                [ExternalSystemRecordID],
                [CompanyIntegrationID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @EntityID,
                @UserID,
                @CategoryID,
                @ExternalSystemRecordID,
                @CompanyIntegrationID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[List]
            (
                [Name],
                [Description],
                [EntityID],
                [UserID],
                [CategoryID],
                [ExternalSystemRecordID],
                [CompanyIntegrationID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @EntityID,
                @UserID,
                @CategoryID,
                @ExternalSystemRecordID,
                @CompanyIntegrationID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwLists] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateList] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Lists */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateList] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for User View Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Run Details
-- Item: spCreateUserViewRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserViewRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserViewRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserViewRunDetail]
    @ID uniqueidentifier = NULL,
    @UserViewRunID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserViewRunDetail]
            (
                [ID],
                [UserViewRunID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserViewRunID,
                @RecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserViewRunDetail]
            (
                [UserViewRunID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserViewRunID,
                @RecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserViewRunDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewRunDetail] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for User View Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for List Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Details
-- Item: spCreateListDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ListDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateListDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateListDetail]
    @ID uniqueidentifier = NULL,
    @ListID uniqueidentifier,
    @RecordID nvarchar(445),
    @Sequence int,
    @Status nvarchar(30),
    @AdditionalData nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ListDetail]
            (
                [ID],
                [ListID],
                [RecordID],
                [Sequence],
                [Status],
                [AdditionalData]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ListID,
                @RecordID,
                @Sequence,
                @Status,
                @AdditionalData
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ListDetail]
            (
                [ListID],
                [RecordID],
                [Sequence],
                [Status],
                [AdditionalData]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ListID,
                @RecordID,
                @Sequence,
                @Status,
                @AdditionalData
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwListDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateListDetail] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for List Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateListDetail] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for User View Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Runs
-- Item: spCreateUserViewRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserViewRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserViewRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserViewRun]
    @ID uniqueidentifier = NULL,
    @UserViewID uniqueidentifier,
    @RunAt datetime,
    @RunByUserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserViewRun]
            (
                [ID],
                [UserViewID],
                [RunAt],
                [RunByUserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserViewID,
                @RunAt,
                @RunByUserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserViewRun]
            (
                [UserViewID],
                [RunAt],
                [RunByUserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserViewID,
                @RunAt,
                @RunByUserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserViewRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewRun] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for User View Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewRun] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spCreate SQL for Record Changes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Changes
-- Item: spCreateRecordChange
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecordChange
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecordChange]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecordChange]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(750),
    @UserID uniqueidentifier,
    @Type nvarchar(20),
    @Source nvarchar(20),
    @ChangedAt datetimeoffset,
    @ChangesJSON nvarchar(MAX),
    @ChangesDescription nvarchar(MAX),
    @FullRecordJSON nvarchar(MAX),
    @Status nvarchar(50),
    @ErrorLog nvarchar(MAX),
    @ReplayRunID uniqueidentifier,
    @IntegrationID uniqueidentifier,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecordChange]
            (
                [ID],
                [EntityID],
                [RecordID],
                [UserID],
                [Type],
                [Source],
                [ChangedAt],
                [ChangesJSON],
                [ChangesDescription],
                [FullRecordJSON],
                [Status],
                [ErrorLog],
                [ReplayRunID],
                [IntegrationID],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @RecordID,
                @UserID,
                @Type,
                @Source,
                @ChangedAt,
                @ChangesJSON,
                @ChangesDescription,
                @FullRecordJSON,
                @Status,
                @ErrorLog,
                @ReplayRunID,
                @IntegrationID,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecordChange]
            (
                [EntityID],
                [RecordID],
                [UserID],
                [Type],
                [Source],
                [ChangedAt],
                [ChangesJSON],
                [ChangesDescription],
                [FullRecordJSON],
                [Status],
                [ErrorLog],
                [ReplayRunID],
                [IntegrationID],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @RecordID,
                @UserID,
                @Type,
                @Source,
                @ChangedAt,
                @ChangesJSON,
                @ChangesDescription,
                @FullRecordJSON,
                @Status,
                @ErrorLog,
                @ReplayRunID,
                @IntegrationID,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecordChanges] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordChange] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for Record Changes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordChange] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spCreate SQL for User Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Roles
-- Item: spCreateUserRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserRole]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserRole]
            (
                [ID],
                [UserID],
                [RoleID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @RoleID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserRole]
            (
                [UserID],
                [RoleID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @RoleID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserRoles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserRole] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for User Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserRole] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Audit Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Logs
-- Item: spCreateAuditLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AuditLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAuditLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAuditLog]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @AuditLogTypeID uniqueidentifier,
    @AuthorizationID uniqueidentifier,
    @Status nvarchar(50),
    @Description nvarchar(MAX),
    @Details nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AuditLog]
            (
                [ID],
                [UserID],
                [AuditLogTypeID],
                [AuthorizationID],
                [Status],
                [Description],
                [Details],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @AuditLogTypeID,
                @AuthorizationID,
                @Status,
                @Description,
                @Details,
                @EntityID,
                @RecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AuditLog]
            (
                [UserID],
                [AuditLogTypeID],
                [AuthorizationID],
                [Status],
                [Description],
                [Details],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @AuditLogTypeID,
                @AuthorizationID,
                @Status,
                @Description,
                @Details,
                @EntityID,
                @RecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAuditLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuditLog] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Audit Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuditLog] TO [cdp_UI], [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Models */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Models
-- Item: spCreateAIModel
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIModel
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIModel]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIModel]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @AIModelTypeID uniqueidentifier,
    @PowerRank int,
    @IsActive bit,
    @SpeedRank int,
    @CostRank int,
    @ModelSelectionInsights nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIModel]
            (
                [ID],
                [Name],
                [Description],
                [AIModelTypeID],
                [PowerRank],
                [IsActive],
                [SpeedRank],
                [CostRank],
                [ModelSelectionInsights]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @AIModelTypeID,
                @PowerRank,
                @IsActive,
                @SpeedRank,
                @CostRank,
                @ModelSelectionInsights
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIModel]
            (
                [Name],
                [Description],
                [AIModelTypeID],
                [PowerRank],
                [IsActive],
                [SpeedRank],
                [CostRank],
                [ModelSelectionInsights]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @AIModelTypeID,
                @PowerRank,
                @IsActive,
                @SpeedRank,
                @CostRank,
                @ModelSelectionInsights
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIModels] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModel] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Models */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModel] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Actions
-- Item: spCreateAIAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAction]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @DefaultPrompt nvarchar(MAX),
    @DefaultModelID uniqueidentifier,
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAction]
            (
                [ID],
                [Name],
                [Description],
                [DefaultPrompt],
                [DefaultModelID],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @DefaultPrompt,
                @DefaultModelID,
                @IsActive
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAction]
            (
                [Name],
                [Description],
                [DefaultPrompt],
                [DefaultModelID],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @DefaultPrompt,
                @DefaultModelID,
                @IsActive
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIActions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAction] TO [cdp_Developer]
    

/* spCreate Permissions for AI Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAction] TO [cdp_Developer]



/* spCreate SQL for AI Model Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Model Actions
-- Item: spCreateAIModelAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIModelAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIModelAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIModelAction]
    @ID uniqueidentifier = NULL,
    @AIModelID uniqueidentifier,
    @AIActionID uniqueidentifier,
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIModelAction]
            (
                [ID],
                [AIModelID],
                [AIActionID],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AIModelID,
                @AIActionID,
                @IsActive
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIModelAction]
            (
                [AIModelID],
                [AIActionID],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AIModelID,
                @AIActionID,
                @IsActive
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIModelActions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModelAction] TO [cdp_Developer]
    

/* spCreate Permissions for AI Model Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModelAction] TO [cdp_Developer]



/* spCreate SQL for Entity AI Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity AI Actions
-- Item: spCreateEntityAIAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityAIAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityAIAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityAIAction]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @AIModelID uniqueidentifier,
    @AIActionID uniqueidentifier,
    @Name nvarchar(255),
    @Prompt nvarchar(MAX),
    @TriggerEvent nchar(15),
    @UserMessage nvarchar(MAX),
    @OutputType nchar(10),
    @OutputField nvarchar(50),
    @SkipIfOutputFieldNotEmpty bit,
    @OutputEntityID uniqueidentifier,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityAIAction]
            (
                [ID],
                [EntityID],
                [AIModelID],
                [AIActionID],
                [Name],
                [Prompt],
                [TriggerEvent],
                [UserMessage],
                [OutputType],
                [OutputField],
                [SkipIfOutputFieldNotEmpty],
                [OutputEntityID],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @AIModelID,
                @AIActionID,
                @Name,
                @Prompt,
                @TriggerEvent,
                @UserMessage,
                @OutputType,
                @OutputField,
                @SkipIfOutputFieldNotEmpty,
                @OutputEntityID,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityAIAction]
            (
                [EntityID],
                [AIModelID],
                [AIActionID],
                [Name],
                [Prompt],
                [TriggerEvent],
                [UserMessage],
                [OutputType],
                [OutputField],
                [SkipIfOutputFieldNotEmpty],
                [OutputEntityID],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @AIModelID,
                @AIActionID,
                @Name,
                @Prompt,
                @TriggerEvent,
                @UserMessage,
                @OutputType,
                @OutputField,
                @SkipIfOutputFieldNotEmpty,
                @OutputEntityID,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityAIActions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityAIAction] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity AI Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityAIAction] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for AI Model Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Model Types
-- Item: spCreateAIModelType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIModelType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIModelType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIModelType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIModelType]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIModelType]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIModelTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModelType] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for AI Model Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModelType] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Queues */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queues
-- Item: spCreateQueue
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Queue
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueue]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueue]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @QueueTypeID uniqueidentifier,
    @IsActive bit,
    @ProcessPID int,
    @ProcessPlatform nvarchar(30),
    @ProcessVersion nvarchar(15),
    @ProcessCwd nvarchar(100),
    @ProcessIPAddress nvarchar(50),
    @ProcessMacAddress nvarchar(50),
    @ProcessOSName nvarchar(25),
    @ProcessOSVersion nvarchar(10),
    @ProcessHostName nvarchar(50),
    @ProcessUserID nvarchar(25),
    @ProcessUserName nvarchar(50),
    @LastHeartbeat datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Queue]
            (
                [ID],
                [Name],
                [Description],
                [QueueTypeID],
                [IsActive],
                [ProcessPID],
                [ProcessPlatform],
                [ProcessVersion],
                [ProcessCwd],
                [ProcessIPAddress],
                [ProcessMacAddress],
                [ProcessOSName],
                [ProcessOSVersion],
                [ProcessHostName],
                [ProcessUserID],
                [ProcessUserName],
                [LastHeartbeat]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @QueueTypeID,
                @IsActive,
                @ProcessPID,
                @ProcessPlatform,
                @ProcessVersion,
                @ProcessCwd,
                @ProcessIPAddress,
                @ProcessMacAddress,
                @ProcessOSName,
                @ProcessOSVersion,
                @ProcessHostName,
                @ProcessUserID,
                @ProcessUserName,
                @LastHeartbeat
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Queue]
            (
                [Name],
                [Description],
                [QueueTypeID],
                [IsActive],
                [ProcessPID],
                [ProcessPlatform],
                [ProcessVersion],
                [ProcessCwd],
                [ProcessIPAddress],
                [ProcessMacAddress],
                [ProcessOSName],
                [ProcessOSVersion],
                [ProcessHostName],
                [ProcessUserID],
                [ProcessUserName],
                [LastHeartbeat]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @QueueTypeID,
                @IsActive,
                @ProcessPID,
                @ProcessPlatform,
                @ProcessVersion,
                @ProcessCwd,
                @ProcessIPAddress,
                @ProcessMacAddress,
                @ProcessOSName,
                @ProcessOSVersion,
                @ProcessHostName,
                @ProcessUserID,
                @ProcessUserName,
                @LastHeartbeat
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueues] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueue] TO [cdp_UI]
    

/* spCreate Permissions for Queues */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueue] TO [cdp_UI]



/* spCreate SQL for Queue Tasks */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queue Tasks
-- Item: spCreateQueueTask
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR QueueTask
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueueTask]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueueTask]
    @ID uniqueidentifier = NULL,
    @QueueID uniqueidentifier,
    @Status nchar(10),
    @StartedAt datetime,
    @EndedAt datetime,
    @Data nvarchar(MAX),
    @Options nvarchar(MAX),
    @Output nvarchar(MAX),
    @ErrorMessage nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[QueueTask]
            (
                [ID],
                [QueueID],
                [Status],
                [StartedAt],
                [EndedAt],
                [Data],
                [Options],
                [Output],
                [ErrorMessage],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @QueueID,
                @Status,
                @StartedAt,
                @EndedAt,
                @Data,
                @Options,
                @Output,
                @ErrorMessage,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[QueueTask]
            (
                [QueueID],
                [Status],
                [StartedAt],
                [EndedAt],
                [Data],
                [Options],
                [Output],
                [ErrorMessage],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @QueueID,
                @Status,
                @StartedAt,
                @EndedAt,
                @Data,
                @Options,
                @Output,
                @ErrorMessage,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueueTasks] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueueTask] TO [cdp_UI]
    

/* spCreate Permissions for Queue Tasks */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueueTask] TO [cdp_UI]



/* spCreate SQL for Dashboards */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dashboards
-- Item: spCreateDashboard
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Dashboard
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDashboard]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDashboard]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @UserID uniqueidentifier,
    @CategoryID uniqueidentifier,
    @UIConfigDetails nvarchar(MAX),
    @Type nvarchar(20),
    @Thumbnail nvarchar(MAX),
    @Scope nvarchar(20),
    @ApplicationID uniqueidentifier,
    @DriverClass nvarchar(255),
    @Code nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Dashboard]
            (
                [ID],
                [Name],
                [Description],
                [UserID],
                [CategoryID],
                [UIConfigDetails],
                [Type],
                [Thumbnail],
                [Scope],
                [ApplicationID],
                [DriverClass],
                [Code]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @UserID,
                @CategoryID,
                @UIConfigDetails,
                @Type,
                @Thumbnail,
                @Scope,
                @ApplicationID,
                @DriverClass,
                @Code
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Dashboard]
            (
                [Name],
                [Description],
                [UserID],
                [CategoryID],
                [UIConfigDetails],
                [Type],
                [Thumbnail],
                [Scope],
                [ApplicationID],
                [DriverClass],
                [Code]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @UserID,
                @CategoryID,
                @UIConfigDetails,
                @Type,
                @Thumbnail,
                @Scope,
                @ApplicationID,
                @DriverClass,
                @Code
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDashboards] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDashboard] TO [cdp_UI]
    

/* spCreate Permissions for Dashboards */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDashboard] TO [cdp_UI]



/* spCreate SQL for Reports */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Reports
-- Item: spCreateReport
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Report
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateReport]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateReport]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @CategoryID uniqueidentifier,
    @UserID uniqueidentifier,
    @SharingScope nvarchar(20),
    @ConversationID uniqueidentifier,
    @ConversationDetailID uniqueidentifier,
    @DataContextID uniqueidentifier,
    @Configuration nvarchar(MAX),
    @OutputTriggerTypeID uniqueidentifier,
    @OutputFormatTypeID uniqueidentifier,
    @OutputDeliveryTypeID uniqueidentifier,
    @OutputFrequency nvarchar(50),
    @OutputTargetEmail nvarchar(255),
    @OutputWorkflowID uniqueidentifier,
    @Thumbnail nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Report]
            (
                [ID],
                [Name],
                [Description],
                [CategoryID],
                [UserID],
                [SharingScope],
                [ConversationID],
                [ConversationDetailID],
                [DataContextID],
                [Configuration],
                [OutputTriggerTypeID],
                [OutputFormatTypeID],
                [OutputDeliveryTypeID],
                [OutputFrequency],
                [OutputTargetEmail],
                [OutputWorkflowID],
                [Thumbnail]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @CategoryID,
                @UserID,
                @SharingScope,
                @ConversationID,
                @ConversationDetailID,
                @DataContextID,
                @Configuration,
                @OutputTriggerTypeID,
                @OutputFormatTypeID,
                @OutputDeliveryTypeID,
                @OutputFrequency,
                @OutputTargetEmail,
                @OutputWorkflowID,
                @Thumbnail
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Report]
            (
                [Name],
                [Description],
                [CategoryID],
                [UserID],
                [SharingScope],
                [ConversationID],
                [ConversationDetailID],
                [DataContextID],
                [Configuration],
                [OutputTriggerTypeID],
                [OutputFormatTypeID],
                [OutputDeliveryTypeID],
                [OutputFrequency],
                [OutputTargetEmail],
                [OutputWorkflowID],
                [Thumbnail]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @CategoryID,
                @UserID,
                @SharingScope,
                @ConversationID,
                @ConversationDetailID,
                @DataContextID,
                @Configuration,
                @OutputTriggerTypeID,
                @OutputFormatTypeID,
                @OutputDeliveryTypeID,
                @OutputFrequency,
                @OutputTargetEmail,
                @OutputWorkflowID,
                @Thumbnail
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwReports] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReport] TO [cdp_UI]
    

/* spCreate Permissions for Reports */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReport] TO [cdp_UI]



/* spCreate SQL for Report Snapshots */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Report Snapshots
-- Item: spCreateReportSnapshot
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ReportSnapshot
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateReportSnapshot]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateReportSnapshot]
    @ID uniqueidentifier = NULL,
    @ReportID uniqueidentifier,
    @ResultSet nvarchar(MAX),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ReportSnapshot]
            (
                [ID],
                [ReportID],
                [ResultSet],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ReportID,
                @ResultSet,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ReportSnapshot]
            (
                [ReportID],
                [ResultSet],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ReportID,
                @ResultSet,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwReportSnapshots] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReportSnapshot] TO [cdp_UI]
    

/* spCreate Permissions for Report Snapshots */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReportSnapshot] TO [cdp_UI]



/* spCreate SQL for Workspaces */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workspaces
-- Item: spCreateWorkspace
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Workspace
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateWorkspace]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateWorkspace]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Workspace]
            (
                [ID],
                [Name],
                [Description],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Workspace]
            (
                [Name],
                [Description],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwWorkspaces] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkspace] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Workspaces */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkspace] TO [cdp_UI], [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Workspace Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workspace Items
-- Item: spCreateWorkspaceItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR WorkspaceItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateWorkspaceItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateWorkspaceItem]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @WorkspaceID uniqueidentifier,
    @ResourceTypeID uniqueidentifier,
    @ResourceRecordID nvarchar(2000),
    @Sequence int,
    @Configuration nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[WorkspaceItem]
            (
                [ID],
                [Name],
                [Description],
                [WorkspaceID],
                [ResourceTypeID],
                [ResourceRecordID],
                [Sequence],
                [Configuration]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @WorkspaceID,
                @ResourceTypeID,
                @ResourceRecordID,
                @Sequence,
                @Configuration
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[WorkspaceItem]
            (
                [Name],
                [Description],
                [WorkspaceID],
                [ResourceTypeID],
                [ResourceRecordID],
                [Sequence],
                [Configuration]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @WorkspaceID,
                @ResourceTypeID,
                @ResourceRecordID,
                @Sequence,
                @Configuration
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwWorkspaceItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkspaceItem] TO [cdp_UI]
    

/* spCreate Permissions for Workspace Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkspaceItem] TO [cdp_UI]



/* spCreate SQL for Conversation Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversation Details
-- Item: spCreateConversationDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ConversationDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateConversationDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateConversationDetail]
    @ID uniqueidentifier = NULL,
    @ConversationID uniqueidentifier,
    @ExternalID nvarchar(100),
    @Role nvarchar(20),
    @Message nvarchar(MAX),
    @Error nvarchar(MAX),
    @HiddenToUser bit,
    @UserRating int,
    @UserFeedback nvarchar(MAX),
    @ReflectionInsights nvarchar(MAX),
    @SummaryOfEarlierConversation nvarchar(MAX),
    @UserID uniqueidentifier,
    @ArtifactID uniqueidentifier,
    @ArtifactVersionID uniqueidentifier,
    @CompletionTime bigint
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ConversationDetail]
            (
                [ID],
                [ConversationID],
                [ExternalID],
                [Role],
                [Message],
                [Error],
                [HiddenToUser],
                [UserRating],
                [UserFeedback],
                [ReflectionInsights],
                [SummaryOfEarlierConversation],
                [UserID],
                [ArtifactID],
                [ArtifactVersionID],
                [CompletionTime]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ConversationID,
                @ExternalID,
                @Role,
                @Message,
                @Error,
                @HiddenToUser,
                @UserRating,
                @UserFeedback,
                @ReflectionInsights,
                @SummaryOfEarlierConversation,
                @UserID,
                @ArtifactID,
                @ArtifactVersionID,
                @CompletionTime
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ConversationDetail]
            (
                [ConversationID],
                [ExternalID],
                [Role],
                [Message],
                [Error],
                [HiddenToUser],
                [UserRating],
                [UserFeedback],
                [ReflectionInsights],
                [SummaryOfEarlierConversation],
                [UserID],
                [ArtifactID],
                [ArtifactVersionID],
                [CompletionTime]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ConversationID,
                @ExternalID,
                @Role,
                @Message,
                @Error,
                @HiddenToUser,
                @UserRating,
                @UserFeedback,
                @ReflectionInsights,
                @SummaryOfEarlierConversation,
                @UserID,
                @ArtifactID,
                @ArtifactVersionID,
                @CompletionTime
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwConversationDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for Conversation Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationDetail] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spCreate SQL for Conversations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Conversations
-- Item: spCreateConversation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Conversation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateConversation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateConversation]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @ExternalID nvarchar(500),
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Type nvarchar(50),
    @IsArchived bit,
    @LinkedEntityID uniqueidentifier,
    @LinkedRecordID nvarchar(500),
    @DataContextID uniqueidentifier,
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Conversation]
            (
                [ID],
                [UserID],
                [ExternalID],
                [Name],
                [Description],
                [Type],
                [IsArchived],
                [LinkedEntityID],
                [LinkedRecordID],
                [DataContextID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @ExternalID,
                @Name,
                @Description,
                @Type,
                @IsArchived,
                @LinkedEntityID,
                @LinkedRecordID,
                @DataContextID,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Conversation]
            (
                [UserID],
                [ExternalID],
                [Name],
                [Description],
                [Type],
                [IsArchived],
                [LinkedEntityID],
                [LinkedRecordID],
                [DataContextID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @ExternalID,
                @Name,
                @Description,
                @Type,
                @IsArchived,
                @LinkedEntityID,
                @LinkedRecordID,
                @DataContextID,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwConversations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversation] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for Conversations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversation] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spCreate SQL for User Notifications */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Notifications
-- Item: spCreateUserNotification
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserNotification
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserNotification]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserNotification]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @Title nvarchar(255),
    @Message nvarchar(MAX),
    @ResourceTypeID uniqueidentifier,
    @ResourceConfiguration nvarchar(MAX),
    @Unread bit,
    @ReadAt datetime,
    @ResourceRecordID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserNotification]
            (
                [ID],
                [UserID],
                [Title],
                [Message],
                [ResourceTypeID],
                [ResourceConfiguration],
                [Unread],
                [ReadAt],
                [ResourceRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @Title,
                @Message,
                @ResourceTypeID,
                @ResourceConfiguration,
                @Unread,
                @ReadAt,
                @ResourceRecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserNotification]
            (
                [UserID],
                [Title],
                [Message],
                [ResourceTypeID],
                [ResourceConfiguration],
                [Unread],
                [ReadAt],
                [ResourceRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @Title,
                @Message,
                @ResourceTypeID,
                @ResourceConfiguration,
                @Unread,
                @ReadAt,
                @ResourceRecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserNotifications] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserNotification] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    

/* spCreate Permissions for User Notifications */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserNotification] TO [cdp_Integration], [cdp_Developer], [cdp_UI]



/* spCreate SQL for Schema Info */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Schema Info
-- Item: spCreateSchemaInfo
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR SchemaInfo
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateSchemaInfo]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateSchemaInfo]
    @ID uniqueidentifier = NULL,
    @SchemaName nvarchar(50),
    @EntityIDMin int,
    @EntityIDMax int,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[SchemaInfo]
            (
                [ID],
                [SchemaName],
                [EntityIDMin],
                [EntityIDMax],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @SchemaName,
                @EntityIDMin,
                @EntityIDMax,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[SchemaInfo]
            (
                [SchemaName],
                [EntityIDMin],
                [EntityIDMax],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @SchemaName,
                @EntityIDMin,
                @EntityIDMax,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwSchemaInfos] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateSchemaInfo] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Schema Info */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateSchemaInfo] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Company Integration Record Maps */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Record Maps
-- Item: spCreateCompanyIntegrationRecordMap
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CompanyIntegrationRecordMap
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompanyIntegrationRecordMap]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompanyIntegrationRecordMap]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(750),
    @EntityID uniqueidentifier,
    @EntityRecordID nvarchar(750)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRecordMap]
            (
                [ID],
                [CompanyIntegrationID],
                [ExternalSystemRecordID],
                [EntityID],
                [EntityRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationID,
                @ExternalSystemRecordID,
                @EntityID,
                @EntityRecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRecordMap]
            (
                [CompanyIntegrationID],
                [ExternalSystemRecordID],
                [EntityID],
                [EntityRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationID,
                @ExternalSystemRecordID,
                @EntityID,
                @EntityRecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanyIntegrationRecordMaps] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRecordMap] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Company Integration Record Maps */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRecordMap] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Record Merge Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Logs
-- Item: spCreateRecordMergeLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecordMergeLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecordMergeLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecordMergeLog]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @SurvivingRecordID nvarchar(450),
    @InitiatedByUserID uniqueidentifier,
    @ApprovalStatus nvarchar(10),
    @ApprovedByUserID uniqueidentifier,
    @ProcessingStatus nvarchar(10),
    @ProcessingStartedAt datetime,
    @ProcessingEndedAt datetime,
    @ProcessingLog nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecordMergeLog]
            (
                [ID],
                [EntityID],
                [SurvivingRecordID],
                [InitiatedByUserID],
                [ApprovalStatus],
                [ApprovedByUserID],
                [ProcessingStatus],
                [ProcessingStartedAt],
                [ProcessingEndedAt],
                [ProcessingLog],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @SurvivingRecordID,
                @InitiatedByUserID,
                @ApprovalStatus,
                @ApprovedByUserID,
                @ProcessingStatus,
                @ProcessingStartedAt,
                @ProcessingEndedAt,
                @ProcessingLog,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecordMergeLog]
            (
                [EntityID],
                [SurvivingRecordID],
                [InitiatedByUserID],
                [ApprovalStatus],
                [ApprovedByUserID],
                [ProcessingStatus],
                [ProcessingStartedAt],
                [ProcessingEndedAt],
                [ProcessingLog],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @SurvivingRecordID,
                @InitiatedByUserID,
                @ApprovalStatus,
                @ApprovedByUserID,
                @ProcessingStatus,
                @ProcessingStartedAt,
                @ProcessingEndedAt,
                @ProcessingLog,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecordMergeLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Record Merge Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Record Merge Deletion Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Deletion Logs
-- Item: spCreateRecordMergeDeletionLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecordMergeDeletionLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecordMergeDeletionLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecordMergeDeletionLog]
    @ID uniqueidentifier = NULL,
    @RecordMergeLogID uniqueidentifier,
    @DeletedRecordID nvarchar(750),
    @Status nvarchar(10),
    @ProcessingLog nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecordMergeDeletionLog]
            (
                [ID],
                [RecordMergeLogID],
                [DeletedRecordID],
                [Status],
                [ProcessingLog]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @RecordMergeLogID,
                @DeletedRecordID,
                @Status,
                @ProcessingLog
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecordMergeDeletionLog]
            (
                [RecordMergeLogID],
                [DeletedRecordID],
                [Status],
                [ProcessingLog]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @RecordMergeLogID,
                @DeletedRecordID,
                @Status,
                @ProcessingLog
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecordMergeDeletionLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeDeletionLog] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Record Merge Deletion Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeDeletionLog] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Query Fields */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Fields
-- Item: spCreateQueryField
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR QueryField
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueryField]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueryField]
    @ID uniqueidentifier = NULL,
    @QueryID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Sequence int,
    @SQLBaseType nvarchar(50),
    @SQLFullType nvarchar(100),
    @SourceEntityID uniqueidentifier,
    @SourceFieldName nvarchar(255),
    @IsComputed bit,
    @ComputationDescription nvarchar(MAX),
    @IsSummary bit,
    @SummaryDescription nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[QueryField]
            (
                [ID],
                [QueryID],
                [Name],
                [Description],
                [Sequence],
                [SQLBaseType],
                [SQLFullType],
                [SourceEntityID],
                [SourceFieldName],
                [IsComputed],
                [ComputationDescription],
                [IsSummary],
                [SummaryDescription]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @QueryID,
                @Name,
                @Description,
                @Sequence,
                @SQLBaseType,
                @SQLFullType,
                @SourceEntityID,
                @SourceFieldName,
                @IsComputed,
                @ComputationDescription,
                @IsSummary,
                @SummaryDescription
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[QueryField]
            (
                [QueryID],
                [Name],
                [Description],
                [Sequence],
                [SQLBaseType],
                [SQLFullType],
                [SourceEntityID],
                [SourceFieldName],
                [IsComputed],
                [ComputationDescription],
                [IsSummary],
                [SummaryDescription]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @QueryID,
                @Name,
                @Description,
                @Sequence,
                @SQLBaseType,
                @SQLFullType,
                @SourceEntityID,
                @SourceFieldName,
                @IsComputed,
                @ComputationDescription,
                @IsSummary,
                @SummaryDescription
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueryFields] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryField] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Query Fields */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryField] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Query Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Categories
-- Item: spCreateQueryCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR QueryCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueryCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueryCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @ParentID uniqueidentifier,
    @Description nvarchar(MAX),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[QueryCategory]
            (
                [ID],
                [Name],
                [ParentID],
                [Description],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @ParentID,
                @Description,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[QueryCategory]
            (
                [Name],
                [ParentID],
                [Description],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @ParentID,
                @Description,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueryCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryCategory] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Query Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryCategory] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Queries */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queries
-- Item: spCreateQuery
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Query
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQuery]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQuery]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @CategoryID uniqueidentifier,
    @UserQuestion nvarchar(MAX),
    @Description nvarchar(MAX),
    @SQL nvarchar(MAX),
    @TechnicalDescription nvarchar(MAX),
    @OriginalSQL nvarchar(MAX),
    @Feedback nvarchar(MAX),
    @Status nvarchar(15),
    @QualityRank int,
    @ExecutionCostRank int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Query]
            (
                [ID],
                [Name],
                [CategoryID],
                [UserQuestion],
                [Description],
                [SQL],
                [TechnicalDescription],
                [OriginalSQL],
                [Feedback],
                [Status],
                [QualityRank],
                [ExecutionCostRank]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @CategoryID,
                @UserQuestion,
                @Description,
                @SQL,
                @TechnicalDescription,
                @OriginalSQL,
                @Feedback,
                @Status,
                @QualityRank,
                @ExecutionCostRank
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Query]
            (
                [Name],
                [CategoryID],
                [UserQuestion],
                [Description],
                [SQL],
                [TechnicalDescription],
                [OriginalSQL],
                [Feedback],
                [Status],
                [QualityRank],
                [ExecutionCostRank]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @CategoryID,
                @UserQuestion,
                @Description,
                @SQL,
                @TechnicalDescription,
                @OriginalSQL,
                @Feedback,
                @Status,
                @QualityRank,
                @ExecutionCostRank
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueries] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQuery] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Queries */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQuery] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Query Permissions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Permissions
-- Item: spCreateQueryPermission
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR QueryPermission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueryPermission]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueryPermission]
    @ID uniqueidentifier = NULL,
    @QueryID uniqueidentifier,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[QueryPermission]
            (
                [ID],
                [QueryID],
                [RoleID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @QueryID,
                @RoleID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[QueryPermission]
            (
                [QueryID],
                [RoleID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @QueryID,
                @RoleID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueryPermissions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryPermission] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Query Permissions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryPermission] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Vector Indexes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Vector Indexes
-- Item: spCreateVectorIndex
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR VectorIndex
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateVectorIndex]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateVectorIndex]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @VectorDatabaseID uniqueidentifier,
    @EmbeddingModelID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[VectorIndex]
            (
                [ID],
                [Name],
                [Description],
                [VectorDatabaseID],
                [EmbeddingModelID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @VectorDatabaseID,
                @EmbeddingModelID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[VectorIndex]
            (
                [Name],
                [Description],
                [VectorDatabaseID],
                [EmbeddingModelID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @VectorDatabaseID,
                @EmbeddingModelID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwVectorIndexes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateVectorIndex] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Vector Indexes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateVectorIndex] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Document Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Document Types
-- Item: spCreateEntityDocumentType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityDocumentType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityDocumentType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityDocumentType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityDocumentType]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityDocumentType]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityDocumentTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocumentType] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Document Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocumentType] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Document Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Document Runs
-- Item: spCreateEntityDocumentRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityDocumentRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityDocumentRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityDocumentRun]
    @ID uniqueidentifier = NULL,
    @EntityDocumentID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @Status nvarchar(15)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityDocumentRun]
            (
                [ID],
                [EntityDocumentID],
                [StartedAt],
                [EndedAt],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityDocumentID,
                @StartedAt,
                @EndedAt,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityDocumentRun]
            (
                [EntityDocumentID],
                [StartedAt],
                [EndedAt],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityDocumentID,
                @StartedAt,
                @EndedAt,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityDocumentRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocumentRun] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Document Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocumentRun] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Vector Databases */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Vector Databases
-- Item: spCreateVectorDatabase
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR VectorDatabase
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateVectorDatabase]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateVectorDatabase]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @DefaultURL nvarchar(255),
    @ClassKey nvarchar(100)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[VectorDatabase]
            (
                [ID],
                [Name],
                [Description],
                [DefaultURL],
                [ClassKey]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @DefaultURL,
                @ClassKey
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[VectorDatabase]
            (
                [Name],
                [Description],
                [DefaultURL],
                [ClassKey]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @DefaultURL,
                @ClassKey
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwVectorDatabases] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateVectorDatabase] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Vector Databases */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateVectorDatabase] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Record Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Record Documents
-- Item: spCreateEntityRecordDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityRecordDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityRecordDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityRecordDocument]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @EntityDocumentID uniqueidentifier,
    @DocumentText nvarchar(MAX),
    @VectorIndexID uniqueidentifier,
    @VectorID nvarchar(50),
    @VectorJSON nvarchar(MAX),
    @EntityRecordUpdatedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityRecordDocument]
            (
                [ID],
                [EntityID],
                [RecordID],
                [EntityDocumentID],
                [DocumentText],
                [VectorIndexID],
                [VectorID],
                [VectorJSON],
                [EntityRecordUpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @RecordID,
                @EntityDocumentID,
                @DocumentText,
                @VectorIndexID,
                @VectorID,
                @VectorJSON,
                @EntityRecordUpdatedAt
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityRecordDocument]
            (
                [EntityID],
                [RecordID],
                [EntityDocumentID],
                [DocumentText],
                [VectorIndexID],
                [VectorID],
                [VectorJSON],
                [EntityRecordUpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @RecordID,
                @EntityDocumentID,
                @DocumentText,
                @VectorIndexID,
                @VectorID,
                @VectorJSON,
                @EntityRecordUpdatedAt
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityRecordDocuments] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Entity Record Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Entity Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Documents
-- Item: spCreateEntityDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityDocument]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(250),
    @TypeID uniqueidentifier,
    @EntityID uniqueidentifier,
    @VectorDatabaseID uniqueidentifier,
    @Status nvarchar(15),
    @TemplateID uniqueidentifier,
    @AIModelID uniqueidentifier,
    @PotentialMatchThreshold numeric(12, 11),
    @AbsoluteMatchThreshold numeric(12, 11)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityDocument]
            (
                [ID],
                [Name],
                [TypeID],
                [EntityID],
                [VectorDatabaseID],
                [Status],
                [TemplateID],
                [AIModelID],
                [PotentialMatchThreshold],
                [AbsoluteMatchThreshold]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @TypeID,
                @EntityID,
                @VectorDatabaseID,
                @Status,
                @TemplateID,
                @AIModelID,
                @PotentialMatchThreshold,
                @AbsoluteMatchThreshold
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityDocument]
            (
                [Name],
                [TypeID],
                [EntityID],
                [VectorDatabaseID],
                [Status],
                [TemplateID],
                [AIModelID],
                [PotentialMatchThreshold],
                [AbsoluteMatchThreshold]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @TypeID,
                @EntityID,
                @VectorDatabaseID,
                @Status,
                @TemplateID,
                @AIModelID,
                @PotentialMatchThreshold,
                @AbsoluteMatchThreshold
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityDocuments] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocument] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocument] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Data Context Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Data Context Items
-- Item: spCreateDataContextItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DataContextItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDataContextItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDataContextItem]
    @ID uniqueidentifier = NULL,
    @DataContextID uniqueidentifier,
    @Type nvarchar(50),
    @ViewID uniqueidentifier,
    @QueryID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @SQL nvarchar(MAX),
    @DataJSON nvarchar(MAX),
    @LastRefreshedAt datetime,
    @Description nvarchar(MAX),
    @CodeName nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DataContextItem]
            (
                [ID],
                [DataContextID],
                [Type],
                [ViewID],
                [QueryID],
                [EntityID],
                [RecordID],
                [SQL],
                [DataJSON],
                [LastRefreshedAt],
                [Description],
                [CodeName]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @DataContextID,
                @Type,
                @ViewID,
                @QueryID,
                @EntityID,
                @RecordID,
                @SQL,
                @DataJSON,
                @LastRefreshedAt,
                @Description,
                @CodeName
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DataContextItem]
            (
                [DataContextID],
                [Type],
                [ViewID],
                [QueryID],
                [EntityID],
                [RecordID],
                [SQL],
                [DataJSON],
                [LastRefreshedAt],
                [Description],
                [CodeName]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @DataContextID,
                @Type,
                @ViewID,
                @QueryID,
                @EntityID,
                @RecordID,
                @SQL,
                @DataJSON,
                @LastRefreshedAt,
                @Description,
                @CodeName
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDataContextItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDataContextItem] TO [cdp_UI], [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Data Context Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDataContextItem] TO [cdp_UI], [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Data Contexts */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Data Contexts
-- Item: spCreateDataContext
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DataContext
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDataContext]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDataContext]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @UserID uniqueidentifier,
    @LastRefreshedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DataContext]
            (
                [ID],
                [Name],
                [Description],
                [UserID],
                [LastRefreshedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @UserID,
                @LastRefreshedAt
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DataContext]
            (
                [Name],
                [Description],
                [UserID],
                [LastRefreshedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @UserID,
                @LastRefreshedAt
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDataContexts] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDataContext] TO [cdp_Integration], [cdp_Developer], [cdp_UI]
    

/* spCreate Permissions for Data Contexts */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDataContext] TO [cdp_Integration], [cdp_Developer], [cdp_UI]



/* spCreate SQL for User View Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Categories
-- Item: spCreateUserViewCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserViewCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserViewCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserViewCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @EntityID uniqueidentifier,
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserViewCategory]
            (
                [ID],
                [Name],
                [Description],
                [ParentID],
                [EntityID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ParentID,
                @EntityID,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserViewCategory]
            (
                [Name],
                [Description],
                [ParentID],
                [EntityID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ParentID,
                @EntityID,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserViewCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewCategory] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for User View Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewCategory] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Dashboard Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dashboard Categories
-- Item: spCreateDashboardCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DashboardCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDashboardCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDashboardCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DashboardCategory]
            (
                [ID],
                [Name],
                [Description],
                [ParentID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ParentID,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DashboardCategory]
            (
                [Name],
                [Description],
                [ParentID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ParentID,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDashboardCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDashboardCategory] TO [cdp_Developer], [cdp_Integration], [cdp_UI]
    

/* spCreate Permissions for Dashboard Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDashboardCategory] TO [cdp_Developer], [cdp_Integration], [cdp_UI]



/* spCreate SQL for Report Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Report Categories
-- Item: spCreateReportCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ReportCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateReportCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateReportCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ReportCategory]
            (
                [ID],
                [Name],
                [Description],
                [ParentID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ParentID,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ReportCategory]
            (
                [Name],
                [Description],
                [ParentID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ParentID,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwReportCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReportCategory] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Report Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReportCategory] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for File Storage Providers */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: File Storage Providers
-- Item: spCreateFileStorageProvider
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR FileStorageProvider
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateFileStorageProvider]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateFileStorageProvider]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @ServerDriverKey nvarchar(100),
    @ClientDriverKey nvarchar(100),
    @Priority int,
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[FileStorageProvider]
            (
                [ID],
                [Name],
                [Description],
                [ServerDriverKey],
                [ClientDriverKey],
                [Priority],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ServerDriverKey,
                @ClientDriverKey,
                @Priority,
                @IsActive
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[FileStorageProvider]
            (
                [Name],
                [Description],
                [ServerDriverKey],
                [ClientDriverKey],
                [Priority],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ServerDriverKey,
                @ClientDriverKey,
                @Priority,
                @IsActive
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwFileStorageProviders] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFileStorageProvider] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for File Storage Providers */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFileStorageProvider] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Files */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Files
-- Item: spCreateFile
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR File
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateFile]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateFile]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(500),
    @Description nvarchar(MAX),
    @CategoryID uniqueidentifier,
    @ProviderID uniqueidentifier,
    @ContentType nvarchar(50),
    @ProviderKey nvarchar(500),
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[File]
            (
                [ID],
                [Name],
                [Description],
                [CategoryID],
                [ProviderID],
                [ContentType],
                [ProviderKey],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @CategoryID,
                @ProviderID,
                @ContentType,
                @ProviderKey,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[File]
            (
                [Name],
                [Description],
                [CategoryID],
                [ProviderID],
                [ContentType],
                [ProviderKey],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @CategoryID,
                @ProviderID,
                @ContentType,
                @ProviderKey,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwFiles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFile] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Files */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFile] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for File Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: File Categories
-- Item: spCreateFileCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR FileCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateFileCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateFileCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @ParentID uniqueidentifier,
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[FileCategory]
            (
                [ID],
                [Name],
                [ParentID],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @ParentID,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[FileCategory]
            (
                [Name],
                [ParentID],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @ParentID,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwFileCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFileCategory] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for File Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFileCategory] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Version Installations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Version Installations
-- Item: spCreateVersionInstallation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR VersionInstallation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateVersionInstallation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateVersionInstallation]
    @ID uniqueidentifier = NULL,
    @MajorVersion int,
    @MinorVersion int,
    @PatchVersion int,
    @Type nvarchar(20),
    @InstalledAt datetime,
    @Status nvarchar(20),
    @InstallLog nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[VersionInstallation]
            (
                [ID],
                [MajorVersion],
                [MinorVersion],
                [PatchVersion],
                [Type],
                [InstalledAt],
                [Status],
                [InstallLog],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @MajorVersion,
                @MinorVersion,
                @PatchVersion,
                @Type,
                @InstalledAt,
                @Status,
                @InstallLog,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[VersionInstallation]
            (
                [MajorVersion],
                [MinorVersion],
                [PatchVersion],
                [Type],
                [InstalledAt],
                [Status],
                [InstallLog],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @MajorVersion,
                @MinorVersion,
                @PatchVersion,
                @Type,
                @InstalledAt,
                @Status,
                @InstallLog,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwVersionInstallations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateVersionInstallation] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Version Installations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateVersionInstallation] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for File Entity Record Links */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: File Entity Record Links
-- Item: spCreateFileEntityRecordLink
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR FileEntityRecordLink
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateFileEntityRecordLink]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateFileEntityRecordLink]
    @ID uniqueidentifier = NULL,
    @FileID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(750)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[FileEntityRecordLink]
            (
                [ID],
                [FileID],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @FileID,
                @EntityID,
                @RecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[FileEntityRecordLink]
            (
                [FileID],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @FileID,
                @EntityID,
                @RecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwFileEntityRecordLinks] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFileEntityRecordLink] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for File Entity Record Links */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFileEntityRecordLink] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Duplicate Run Detail Matches */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Run Detail Matches
-- Item: spCreateDuplicateRunDetailMatch
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DuplicateRunDetailMatch
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDuplicateRunDetailMatch]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDuplicateRunDetailMatch]
    @ID uniqueidentifier = NULL,
    @DuplicateRunDetailID uniqueidentifier,
    @MatchSource nvarchar(20),
    @MatchRecordID nvarchar(500),
    @MatchProbability numeric(12, 11),
    @MatchedAt datetime,
    @Action nvarchar(20),
    @ApprovalStatus nvarchar(20),
    @RecordMergeLogID uniqueidentifier,
    @MergeStatus nvarchar(20),
    @MergedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRunDetailMatch]
            (
                [ID],
                [DuplicateRunDetailID],
                [MatchSource],
                [MatchRecordID],
                [MatchProbability],
                [MatchedAt],
                [Action],
                [ApprovalStatus],
                [RecordMergeLogID],
                [MergeStatus],
                [MergedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @DuplicateRunDetailID,
                @MatchSource,
                @MatchRecordID,
                @MatchProbability,
                @MatchedAt,
                @Action,
                @ApprovalStatus,
                @RecordMergeLogID,
                @MergeStatus,
                @MergedAt
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRunDetailMatch]
            (
                [DuplicateRunDetailID],
                [MatchSource],
                [MatchRecordID],
                [MatchProbability],
                [MatchedAt],
                [Action],
                [ApprovalStatus],
                [RecordMergeLogID],
                [MergeStatus],
                [MergedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @DuplicateRunDetailID,
                @MatchSource,
                @MatchRecordID,
                @MatchProbability,
                @MatchedAt,
                @Action,
                @ApprovalStatus,
                @RecordMergeLogID,
                @MergeStatus,
                @MergedAt
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDuplicateRunDetailMatches] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRunDetailMatch] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Duplicate Run Detail Matches */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRunDetailMatch] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Document Settings */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Document Settings
-- Item: spCreateEntityDocumentSetting
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityDocumentSetting
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityDocumentSetting]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityDocumentSetting]
    @ID uniqueidentifier = NULL,
    @EntityDocumentID uniqueidentifier,
    @Name nvarchar(100),
    @Value nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityDocumentSetting]
            (
                [ID],
                [EntityDocumentID],
                [Name],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityDocumentID,
                @Name,
                @Value,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityDocumentSetting]
            (
                [EntityDocumentID],
                [Name],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityDocumentID,
                @Name,
                @Value,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityDocumentSettings] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocumentSetting] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Entity Document Settings */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocumentSetting] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Entity Settings */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Settings
-- Item: spCreateEntitySetting
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntitySetting
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntitySetting]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntitySetting]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @Name nvarchar(100),
    @Value nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntitySetting]
            (
                [ID],
                [EntityID],
                [Name],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @Name,
                @Value,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntitySetting]
            (
                [EntityID],
                [Name],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @Name,
                @Value,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntitySettings] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntitySetting] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Settings */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntitySetting] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Duplicate Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Runs
-- Item: spCreateDuplicateRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DuplicateRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDuplicateRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDuplicateRun]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @StartedByUserID uniqueidentifier,
    @SourceListID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @ApprovalStatus nvarchar(20),
    @ApprovalComments nvarchar(MAX),
    @ApprovedByUserID uniqueidentifier,
    @ProcessingStatus nvarchar(20),
    @ProcessingErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRun]
            (
                [ID],
                [EntityID],
                [StartedByUserID],
                [SourceListID],
                [StartedAt],
                [EndedAt],
                [ApprovalStatus],
                [ApprovalComments],
                [ApprovedByUserID],
                [ProcessingStatus],
                [ProcessingErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @StartedByUserID,
                @SourceListID,
                @StartedAt,
                @EndedAt,
                @ApprovalStatus,
                @ApprovalComments,
                @ApprovedByUserID,
                @ProcessingStatus,
                @ProcessingErrorMessage
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRun]
            (
                [EntityID],
                [StartedByUserID],
                [SourceListID],
                [StartedAt],
                [EndedAt],
                [ApprovalStatus],
                [ApprovalComments],
                [ApprovedByUserID],
                [ProcessingStatus],
                [ProcessingErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @StartedByUserID,
                @SourceListID,
                @StartedAt,
                @EndedAt,
                @ApprovalStatus,
                @ApprovalComments,
                @ApprovedByUserID,
                @ProcessingStatus,
                @ProcessingErrorMessage
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDuplicateRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Duplicate Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRun] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Duplicate Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Run Details
-- Item: spCreateDuplicateRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DuplicateRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDuplicateRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDuplicateRunDetail]
    @ID uniqueidentifier = NULL,
    @DuplicateRunID uniqueidentifier,
    @RecordID nvarchar(500),
    @MatchStatus nvarchar(20),
    @SkippedReason nvarchar(MAX),
    @MatchErrorMessage nvarchar(MAX),
    @MergeStatus nvarchar(20),
    @MergeErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRunDetail]
            (
                [ID],
                [DuplicateRunID],
                [RecordID],
                [MatchStatus],
                [SkippedReason],
                [MatchErrorMessage],
                [MergeStatus],
                [MergeErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @DuplicateRunID,
                @RecordID,
                @MatchStatus,
                @SkippedReason,
                @MatchErrorMessage,
                @MergeStatus,
                @MergeErrorMessage
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRunDetail]
            (
                [DuplicateRunID],
                [RecordID],
                [MatchStatus],
                [SkippedReason],
                [MatchErrorMessage],
                [MergeStatus],
                [MergeErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @DuplicateRunID,
                @RecordID,
                @MatchStatus,
                @SkippedReason,
                @MatchErrorMessage,
                @MergeStatus,
                @MergeErrorMessage
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDuplicateRunDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRunDetail] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Duplicate Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Application Settings */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Application Settings
-- Item: spCreateApplicationSetting
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ApplicationSetting
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateApplicationSetting]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateApplicationSetting]
    @ID uniqueidentifier = NULL,
    @ApplicationID uniqueidentifier,
    @Name nvarchar(100),
    @Value nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ApplicationSetting]
            (
                [ID],
                [ApplicationID],
                [Name],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ApplicationID,
                @Name,
                @Value,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ApplicationSetting]
            (
                [ApplicationID],
                [Name],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ApplicationID,
                @Name,
                @Value,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwApplicationSettings] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateApplicationSetting] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Application Settings */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateApplicationSetting] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Action Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Categories
-- Item: spCreateActionCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionCategory]
            (
                [ID],
                [Name],
                [Description],
                [ParentID],
                [Status],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ParentID,
                @Status,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionCategory]
            (
                [Name],
                [Description],
                [ParentID],
                [Status],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ParentID,
                @Status,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionCategory] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionCategory] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Actions
-- Item: spCreateEntityAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityAction
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityAction]
    @EntityID uniqueidentifier,
    @ActionID uniqueidentifier,
    @Status nvarchar(20),
    @ID uniqueidentifier = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityAction]
            (
                [ID],
                [EntityID],
                [ActionID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @ActionID,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityAction]
            (
                [EntityID],
                [ActionID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @ActionID,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityActions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityAction] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityAction] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Action Invocations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Action Invocations
-- Item: spCreateEntityActionInvocation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityActionInvocation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityActionInvocation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityActionInvocation]
    @ID uniqueidentifier = NULL,
    @EntityActionID uniqueidentifier,
    @InvocationTypeID uniqueidentifier,
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityActionInvocation]
            (
                [ID],
                [EntityActionID],
                [InvocationTypeID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityActionID,
                @InvocationTypeID,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityActionInvocation]
            (
                [EntityActionID],
                [InvocationTypeID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityActionID,
                @InvocationTypeID,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityActionInvocations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityActionInvocation] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Action Invocations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityActionInvocation] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Action Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Authorizations
-- Item: spCreateActionAuthorization
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionAuthorization
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionAuthorization]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionAuthorization]
    @ID uniqueidentifier = NULL,
    @ActionID uniqueidentifier,
    @AuthorizationID uniqueidentifier,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionAuthorization]
            (
                [ID],
                [ActionID],
                [AuthorizationID],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ActionID,
                @AuthorizationID,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionAuthorization]
            (
                [ActionID],
                [AuthorizationID],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ActionID,
                @AuthorizationID,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionAuthorizations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionAuthorization] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Authorizations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionAuthorization] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Action Invocation Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Action Invocation Types
-- Item: spCreateEntityActionInvocationType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityActionInvocationType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityActionInvocationType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityActionInvocationType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @DisplaySequence int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityActionInvocationType]
            (
                [ID],
                [Name],
                [Description],
                [DisplaySequence]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @DisplaySequence
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityActionInvocationType]
            (
                [Name],
                [Description],
                [DisplaySequence]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @DisplaySequence
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityActionInvocationTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityActionInvocationType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Entity Action Invocation Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityActionInvocationType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Actions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Actions
-- Item: spCreateAction
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Action
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAction]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAction]
    @ID uniqueidentifier = NULL,
    @CategoryID uniqueidentifier,
    @Name nvarchar(425),
    @Description nvarchar(MAX),
    @Type nvarchar(20),
    @UserPrompt nvarchar(MAX),
    @UserComments nvarchar(MAX),
    @Code nvarchar(MAX),
    @CodeComments nvarchar(MAX),
    @CodeApprovalStatus nvarchar(20),
    @CodeApprovalComments nvarchar(MAX),
    @CodeApprovedByUserID uniqueidentifier,
    @CodeApprovedAt datetime,
    @CodeLocked bit,
    @ForceCodeGeneration bit,
    @RetentionPeriod int,
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Action]
            (
                [ID],
                [CategoryID],
                [Name],
                [Description],
                [Type],
                [UserPrompt],
                [UserComments],
                [Code],
                [CodeComments],
                [CodeApprovalStatus],
                [CodeApprovalComments],
                [CodeApprovedByUserID],
                [CodeApprovedAt],
                [CodeLocked],
                [ForceCodeGeneration],
                [RetentionPeriod],
                [Status],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CategoryID,
                @Name,
                @Description,
                @Type,
                @UserPrompt,
                @UserComments,
                @Code,
                @CodeComments,
                @CodeApprovalStatus,
                @CodeApprovalComments,
                @CodeApprovedByUserID,
                @CodeApprovedAt,
                @CodeLocked,
                @ForceCodeGeneration,
                @RetentionPeriod,
                @Status,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Action]
            (
                [CategoryID],
                [Name],
                [Description],
                [Type],
                [UserPrompt],
                [UserComments],
                [Code],
                [CodeComments],
                [CodeApprovalStatus],
                [CodeApprovalComments],
                [CodeApprovedByUserID],
                [CodeApprovedAt],
                [CodeLocked],
                [ForceCodeGeneration],
                [RetentionPeriod],
                [Status],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CategoryID,
                @Name,
                @Description,
                @Type,
                @UserPrompt,
                @UserComments,
                @Code,
                @CodeComments,
                @CodeApprovalStatus,
                @CodeApprovalComments,
                @CodeApprovedByUserID,
                @CodeApprovedAt,
                @CodeLocked,
                @ForceCodeGeneration,
                @RetentionPeriod,
                @Status,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAction] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Actions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAction] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Action Filters */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Action Filters
-- Item: spCreateEntityActionFilter
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityActionFilter
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityActionFilter]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityActionFilter]
    @ID uniqueidentifier = NULL,
    @EntityActionID uniqueidentifier,
    @ActionFilterID uniqueidentifier,
    @Sequence int,
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityActionFilter]
            (
                [ID],
                [EntityActionID],
                [ActionFilterID],
                [Sequence],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityActionID,
                @ActionFilterID,
                @Sequence,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityActionFilter]
            (
                [EntityActionID],
                [ActionFilterID],
                [Sequence],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityActionID,
                @ActionFilterID,
                @Sequence,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityActionFilters] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityActionFilter] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Action Filters */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityActionFilter] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Action Filters */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Filters
-- Item: spCreateActionFilter
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionFilter
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionFilter]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionFilter]
    @ID uniqueidentifier = NULL,
    @UserDescription nvarchar(MAX),
    @UserComments nvarchar(MAX),
    @Code nvarchar(MAX),
    @CodeExplanation nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionFilter]
            (
                [ID],
                [UserDescription],
                [UserComments],
                [Code],
                [CodeExplanation],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserDescription,
                @UserComments,
                @Code,
                @CodeExplanation,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionFilter]
            (
                [UserDescription],
                [UserComments],
                [Code],
                [CodeExplanation],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserDescription,
                @UserComments,
                @Code,
                @CodeExplanation,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionFilters] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionFilter] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Filters */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionFilter] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Action Context Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Context Types
-- Item: spCreateActionContextType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionContextType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionContextType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionContextType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionContextType]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionContextType]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionContextTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionContextType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Action Context Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionContextType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Action Result Codes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Result Codes
-- Item: spCreateActionResultCode
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionResultCode
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionResultCode]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionResultCode]
    @ID uniqueidentifier = NULL,
    @ActionID uniqueidentifier,
    @ResultCode nvarchar(255),
    @IsSuccess bit,
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionResultCode]
            (
                [ID],
                [ActionID],
                [ResultCode],
                [IsSuccess],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ActionID,
                @ResultCode,
                @IsSuccess,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionResultCode]
            (
                [ActionID],
                [ResultCode],
                [IsSuccess],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ActionID,
                @ResultCode,
                @IsSuccess,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionResultCodes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionResultCode] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Result Codes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionResultCode] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Action Contexts */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Contexts
-- Item: spCreateActionContext
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionContext
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionContext]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionContext]
    @ID uniqueidentifier = NULL,
    @ActionID uniqueidentifier,
    @ContextTypeID uniqueidentifier,
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionContext]
            (
                [ID],
                [ActionID],
                [ContextTypeID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ActionID,
                @ContextTypeID,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionContext]
            (
                [ActionID],
                [ContextTypeID],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ActionID,
                @ContextTypeID,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionContexts] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionContext] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Contexts */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionContext] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Action Execution Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Execution Logs
-- Item: spCreateActionExecutionLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionExecutionLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionExecutionLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionExecutionLog]
    @ID uniqueidentifier = NULL,
    @ActionID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @Params nvarchar(MAX),
    @ResultCode nvarchar(255),
    @UserID uniqueidentifier,
    @RetentionPeriod int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionExecutionLog]
            (
                [ID],
                [ActionID],
                [StartedAt],
                [EndedAt],
                [Params],
                [ResultCode],
                [UserID],
                [RetentionPeriod]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ActionID,
                @StartedAt,
                @EndedAt,
                @Params,
                @ResultCode,
                @UserID,
                @RetentionPeriod
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionExecutionLog]
            (
                [ActionID],
                [StartedAt],
                [EndedAt],
                [Params],
                [ResultCode],
                [UserID],
                [RetentionPeriod]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ActionID,
                @StartedAt,
                @EndedAt,
                @Params,
                @ResultCode,
                @UserID,
                @RetentionPeriod
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionExecutionLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionExecutionLog] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Execution Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionExecutionLog] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Action Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Params
-- Item: spCreateActionParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionParam]
    @ID uniqueidentifier = NULL,
    @ActionID uniqueidentifier,
    @Name nvarchar(255),
    @DefaultValue nvarchar(MAX),
    @Type nchar(10),
    @ValueType nvarchar(30),
    @IsArray bit,
    @Description nvarchar(MAX),
    @IsRequired bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionParam]
            (
                [ID],
                [ActionID],
                [Name],
                [DefaultValue],
                [Type],
                [ValueType],
                [IsArray],
                [Description],
                [IsRequired]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ActionID,
                @Name,
                @DefaultValue,
                @Type,
                @ValueType,
                @IsArray,
                @Description,
                @IsRequired
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionParam]
            (
                [ActionID],
                [Name],
                [DefaultValue],
                [Type],
                [ValueType],
                [IsArray],
                [Description],
                [IsRequired]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ActionID,
                @Name,
                @DefaultValue,
                @Type,
                @ValueType,
                @IsArray,
                @Description,
                @IsRequired
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionParam] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionParam] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Action Libraries */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Action Libraries
-- Item: spCreateActionLibrary
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ActionLibrary
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateActionLibrary]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateActionLibrary]
    @ID uniqueidentifier = NULL,
    @ActionID uniqueidentifier,
    @LibraryID uniqueidentifier,
    @ItemsUsed nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ActionLibrary]
            (
                [ID],
                [ActionID],
                [LibraryID],
                [ItemsUsed]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ActionID,
                @LibraryID,
                @ItemsUsed
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ActionLibrary]
            (
                [ActionID],
                [LibraryID],
                [ItemsUsed]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ActionID,
                @LibraryID,
                @ItemsUsed
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwActionLibraries] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionLibrary] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Action Libraries */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateActionLibrary] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Libraries */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Libraries
-- Item: spCreateLibrary
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Library
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateLibrary]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateLibrary]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Status nvarchar(20),
    @TypeDefinitions nvarchar(MAX),
    @SampleCode nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Library]
            (
                [ID],
                [Name],
                [Description],
                [Status],
                [TypeDefinitions],
                [SampleCode]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @Status,
                @TypeDefinitions,
                @SampleCode
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Library]
            (
                [Name],
                [Description],
                [Status],
                [TypeDefinitions],
                [SampleCode]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @Status,
                @TypeDefinitions,
                @SampleCode
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwLibraries] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateLibrary] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Libraries */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateLibrary] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for List Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: List Categories
-- Item: spCreateListCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ListCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateListCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateListCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ListCategory]
            (
                [ID],
                [Name],
                [Description],
                [ParentID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ParentID,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ListCategory]
            (
                [Name],
                [Description],
                [ParentID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ParentID,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwListCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateListCategory] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for List Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateListCategory] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Communication Providers */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Providers
-- Item: spCreateCommunicationProvider
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CommunicationProvider
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCommunicationProvider]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCommunicationProvider]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Status nvarchar(20),
    @SupportsSending bit,
    @SupportsReceiving bit,
    @SupportsScheduledSending bit,
    @SupportsForwarding bit,
    @SupportsReplying bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CommunicationProvider]
            (
                [ID],
                [Name],
                [Description],
                [Status],
                [SupportsSending],
                [SupportsReceiving],
                [SupportsScheduledSending],
                [SupportsForwarding],
                [SupportsReplying]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @Status,
                @SupportsSending,
                @SupportsReceiving,
                @SupportsScheduledSending,
                @SupportsForwarding,
                @SupportsReplying
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CommunicationProvider]
            (
                [Name],
                [Description],
                [Status],
                [SupportsSending],
                [SupportsReceiving],
                [SupportsScheduledSending],
                [SupportsForwarding],
                [SupportsReplying]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @Status,
                @SupportsSending,
                @SupportsReceiving,
                @SupportsScheduledSending,
                @SupportsForwarding,
                @SupportsReplying
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCommunicationProviders] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationProvider] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Communication Providers */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationProvider] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Communication Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Runs
-- Item: spCreateCommunicationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CommunicationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCommunicationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCommunicationRun]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @Direction nvarchar(20),
    @Status nvarchar(20),
    @StartedAt datetime,
    @EndedAt datetime,
    @Comments nvarchar(MAX),
    @ErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CommunicationRun]
            (
                [ID],
                [UserID],
                [Direction],
                [Status],
                [StartedAt],
                [EndedAt],
                [Comments],
                [ErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @Direction,
                @Status,
                @StartedAt,
                @EndedAt,
                @Comments,
                @ErrorMessage
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CommunicationRun]
            (
                [UserID],
                [Direction],
                [Status],
                [StartedAt],
                [EndedAt],
                [Comments],
                [ErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @Direction,
                @Status,
                @StartedAt,
                @EndedAt,
                @Comments,
                @ErrorMessage
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCommunicationRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Communication Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationRun] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Communication Provider Message Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Provider Message Types
-- Item: spCreateCommunicationProviderMessageType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CommunicationProviderMessageType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCommunicationProviderMessageType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCommunicationProviderMessageType]
    @ID uniqueidentifier = NULL,
    @CommunicationProviderID uniqueidentifier,
    @CommunicationBaseMessageTypeID uniqueidentifier,
    @Name nvarchar(255),
    @Status nvarchar(20),
    @AdditionalAttributes nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CommunicationProviderMessageType]
            (
                [ID],
                [CommunicationProviderID],
                [CommunicationBaseMessageTypeID],
                [Name],
                [Status],
                [AdditionalAttributes]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CommunicationProviderID,
                @CommunicationBaseMessageTypeID,
                @Name,
                @Status,
                @AdditionalAttributes
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CommunicationProviderMessageType]
            (
                [CommunicationProviderID],
                [CommunicationBaseMessageTypeID],
                [Name],
                [Status],
                [AdditionalAttributes]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CommunicationProviderID,
                @CommunicationBaseMessageTypeID,
                @Name,
                @Status,
                @AdditionalAttributes
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCommunicationProviderMessageTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationProviderMessageType] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Communication Provider Message Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationProviderMessageType] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Communication Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Logs
-- Item: spCreateCommunicationLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CommunicationLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCommunicationLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCommunicationLog]
    @ID uniqueidentifier = NULL,
    @CommunicationProviderID uniqueidentifier,
    @CommunicationProviderMessageTypeID uniqueidentifier,
    @CommunicationRunID uniqueidentifier,
    @Direction nvarchar(20),
    @MessageDate datetime,
    @Status nvarchar(20),
    @MessageContent nvarchar(MAX),
    @ErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CommunicationLog]
            (
                [ID],
                [CommunicationProviderID],
                [CommunicationProviderMessageTypeID],
                [CommunicationRunID],
                [Direction],
                [MessageDate],
                [Status],
                [MessageContent],
                [ErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CommunicationProviderID,
                @CommunicationProviderMessageTypeID,
                @CommunicationRunID,
                @Direction,
                @MessageDate,
                @Status,
                @MessageContent,
                @ErrorMessage
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CommunicationLog]
            (
                [CommunicationProviderID],
                [CommunicationProviderMessageTypeID],
                [CommunicationRunID],
                [Direction],
                [MessageDate],
                [Status],
                [MessageContent],
                [ErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CommunicationProviderID,
                @CommunicationProviderMessageTypeID,
                @CommunicationRunID,
                @Direction,
                @MessageDate,
                @Status,
                @MessageContent,
                @ErrorMessage
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCommunicationLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationLog] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Communication Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationLog] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Communication Base Message Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Base Message Types
-- Item: spCreateCommunicationBaseMessageType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CommunicationBaseMessageType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCommunicationBaseMessageType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCommunicationBaseMessageType]
    @ID uniqueidentifier = NULL,
    @Type nvarchar(100),
    @SupportsAttachments bit,
    @SupportsSubjectLine bit,
    @SupportsHtml bit,
    @MaxBytes int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CommunicationBaseMessageType]
            (
                [ID],
                [Type],
                [SupportsAttachments],
                [SupportsSubjectLine],
                [SupportsHtml],
                [MaxBytes]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Type,
                @SupportsAttachments,
                @SupportsSubjectLine,
                @SupportsHtml,
                @MaxBytes
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CommunicationBaseMessageType]
            (
                [Type],
                [SupportsAttachments],
                [SupportsSubjectLine],
                [SupportsHtml],
                [MaxBytes]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Type,
                @SupportsAttachments,
                @SupportsSubjectLine,
                @SupportsHtml,
                @MaxBytes
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCommunicationBaseMessageTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationBaseMessageType] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Communication Base Message Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationBaseMessageType] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Templates */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Templates
-- Item: spCreateTemplate
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Template
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateTemplate]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateTemplate]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @CategoryID uniqueidentifier,
    @UserPrompt nvarchar(MAX),
    @UserID uniqueidentifier,
    @ActiveAt datetime,
    @DisabledAt datetime,
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Template]
            (
                [ID],
                [Name],
                [Description],
                [CategoryID],
                [UserPrompt],
                [UserID],
                [ActiveAt],
                [DisabledAt],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @CategoryID,
                @UserPrompt,
                @UserID,
                @ActiveAt,
                @DisabledAt,
                @IsActive
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Template]
            (
                [Name],
                [Description],
                [CategoryID],
                [UserPrompt],
                [UserID],
                [ActiveAt],
                [DisabledAt],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @CategoryID,
                @UserPrompt,
                @UserID,
                @ActiveAt,
                @DisabledAt,
                @IsActive
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwTemplates] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplate] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Templates */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplate] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Template Categories */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Categories
-- Item: spCreateTemplateCategory
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR TemplateCategory
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateTemplateCategory]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateTemplateCategory]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[TemplateCategory]
            (
                [ID],
                [Name],
                [Description],
                [ParentID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ParentID,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[TemplateCategory]
            (
                [Name],
                [Description],
                [ParentID],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ParentID,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwTemplateCategories] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateCategory] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Template Categories */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateCategory] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Template Contents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Contents
-- Item: spCreateTemplateContent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR TemplateContent
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateTemplateContent]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateTemplateContent]
    @ID uniqueidentifier = NULL,
    @TemplateID uniqueidentifier,
    @TypeID uniqueidentifier,
    @TemplateText nvarchar(MAX),
    @Priority int,
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[TemplateContent]
            (
                [ID],
                [TemplateID],
                [TypeID],
                [TemplateText],
                [Priority],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @TemplateID,
                @TypeID,
                @TemplateText,
                @Priority,
                @IsActive
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[TemplateContent]
            (
                [TemplateID],
                [TypeID],
                [TemplateText],
                [Priority],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @TemplateID,
                @TypeID,
                @TemplateText,
                @Priority,
                @IsActive
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwTemplateContents] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateContent] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Template Contents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateContent] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Template Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Params
-- Item: spCreateTemplateParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR TemplateParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateTemplateParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateTemplateParam]
    @ID uniqueidentifier = NULL,
    @TemplateID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Type nvarchar(20),
    @DefaultValue nvarchar(MAX),
    @IsRequired bit,
    @LinkedParameterName nvarchar(255),
    @LinkedParameterField nvarchar(500),
    @ExtraFilter nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(2000),
    @OrderBy nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[TemplateParam]
            (
                [ID],
                [TemplateID],
                [Name],
                [Description],
                [Type],
                [DefaultValue],
                [IsRequired],
                [LinkedParameterName],
                [LinkedParameterField],
                [ExtraFilter],
                [EntityID],
                [RecordID],
                [OrderBy]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @TemplateID,
                @Name,
                @Description,
                @Type,
                @DefaultValue,
                @IsRequired,
                @LinkedParameterName,
                @LinkedParameterField,
                @ExtraFilter,
                @EntityID,
                @RecordID,
                @OrderBy
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[TemplateParam]
            (
                [TemplateID],
                [Name],
                [Description],
                [Type],
                [DefaultValue],
                [IsRequired],
                [LinkedParameterName],
                [LinkedParameterField],
                [ExtraFilter],
                [EntityID],
                [RecordID],
                [OrderBy]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @TemplateID,
                @Name,
                @Description,
                @Type,
                @DefaultValue,
                @IsRequired,
                @LinkedParameterName,
                @LinkedParameterField,
                @ExtraFilter,
                @EntityID,
                @RecordID,
                @OrderBy
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwTemplateParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateParam] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Template Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateParam] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Template Content Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Template Content Types
-- Item: spCreateTemplateContentType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR TemplateContentType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateTemplateContentType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateTemplateContentType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @CodeType nvarchar(25)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[TemplateContentType]
            (
                [ID],
                [Name],
                [Description],
                [CodeType]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @CodeType
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[TemplateContentType]
            (
                [Name],
                [Description],
                [CodeType]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @CodeType
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwTemplateContentTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateContentType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Template Content Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTemplateContentType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Recommendations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendations
-- Item: spCreateRecommendation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Recommendation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecommendation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecommendation]
    @ID uniqueidentifier = NULL,
    @RecommendationRunID uniqueidentifier,
    @SourceEntityID uniqueidentifier,
    @SourceEntityRecordID nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Recommendation]
            (
                [ID],
                [RecommendationRunID],
                [SourceEntityID],
                [SourceEntityRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @RecommendationRunID,
                @SourceEntityID,
                @SourceEntityRecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Recommendation]
            (
                [RecommendationRunID],
                [SourceEntityID],
                [SourceEntityRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @RecommendationRunID,
                @SourceEntityID,
                @SourceEntityRecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecommendations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendation] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Recommendations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendation] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Recommendation Providers */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendation Providers
-- Item: spCreateRecommendationProvider
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecommendationProvider
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecommendationProvider]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecommendationProvider]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecommendationProvider]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecommendationProvider]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecommendationProviders] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationProvider] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Recommendation Providers */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationProvider] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Recommendation Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendation Runs
-- Item: spCreateRecommendationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecommendationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecommendationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecommendationRun]
    @ID uniqueidentifier = NULL,
    @RecommendationProviderID uniqueidentifier,
    @StartDate datetime,
    @EndDate datetime,
    @Status nvarchar(50),
    @Description nvarchar(MAX),
    @RunByUserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecommendationRun]
            (
                [ID],
                [RecommendationProviderID],
                [StartDate],
                [EndDate],
                [Status],
                [Description],
                [RunByUserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @RecommendationProviderID,
                @StartDate,
                @EndDate,
                @Status,
                @Description,
                @RunByUserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecommendationRun]
            (
                [RecommendationProviderID],
                [StartDate],
                [EndDate],
                [Status],
                [Description],
                [RunByUserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @RecommendationProviderID,
                @StartDate,
                @EndDate,
                @Status,
                @Description,
                @RunByUserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecommendationRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationRun] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Recommendation Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationRun] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Recommendation Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendation Items
-- Item: spCreateRecommendationItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecommendationItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecommendationItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecommendationItem]
    @ID uniqueidentifier = NULL,
    @RecommendationID uniqueidentifier,
    @DestinationEntityID uniqueidentifier,
    @DestinationEntityRecordID nvarchar(450),
    @MatchProbability decimal(18, 15)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecommendationItem]
            (
                [ID],
                [RecommendationID],
                [DestinationEntityID],
                [DestinationEntityRecordID],
                [MatchProbability]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @RecommendationID,
                @DestinationEntityID,
                @DestinationEntityRecordID,
                @MatchProbability
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecommendationItem]
            (
                [RecommendationID],
                [DestinationEntityID],
                [DestinationEntityRecordID],
                [MatchProbability]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @RecommendationID,
                @DestinationEntityID,
                @DestinationEntityRecordID,
                @MatchProbability
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecommendationItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationItem] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Recommendation Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationItem] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Entity Communication Message Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Communication Message Types
-- Item: spCreateEntityCommunicationMessageType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityCommunicationMessageType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityCommunicationMessageType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityCommunicationMessageType]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @BaseMessageTypeID uniqueidentifier,
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityCommunicationMessageType]
            (
                [ID],
                [EntityID],
                [BaseMessageTypeID],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @BaseMessageTypeID,
                @IsActive
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityCommunicationMessageType]
            (
                [EntityID],
                [BaseMessageTypeID],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @BaseMessageTypeID,
                @IsActive
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityCommunicationMessageTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityCommunicationMessageType] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Communication Message Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityCommunicationMessageType] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Communication Fields */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Communication Fields
-- Item: spCreateEntityCommunicationField
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityCommunicationField
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityCommunicationField]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityCommunicationField]
    @ID uniqueidentifier = NULL,
    @EntityCommunicationMessageTypeID uniqueidentifier,
    @FieldName nvarchar(500),
    @Priority int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityCommunicationField]
            (
                [ID],
                [EntityCommunicationMessageTypeID],
                [FieldName],
                [Priority]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityCommunicationMessageTypeID,
                @FieldName,
                @Priority
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityCommunicationField]
            (
                [EntityCommunicationMessageTypeID],
                [FieldName],
                [Priority]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityCommunicationMessageTypeID,
                @FieldName,
                @Priority
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityCommunicationFields] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityCommunicationField] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Entity Communication Fields */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityCommunicationField] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Record Change Replay Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Change Replay Runs
-- Item: spCreateRecordChangeReplayRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecordChangeReplayRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecordChangeReplayRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecordChangeReplayRun]
    @ID uniqueidentifier = NULL,
    @StartedAt datetime,
    @EndedAt datetime,
    @Status nvarchar(50),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecordChangeReplayRun]
            (
                [ID],
                [StartedAt],
                [EndedAt],
                [Status],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @StartedAt,
                @EndedAt,
                @Status,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecordChangeReplayRun]
            (
                [StartedAt],
                [EndedAt],
                [Status],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @StartedAt,
                @EndedAt,
                @Status,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecordChangeReplayRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordChangeReplayRun] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Record Change Replay Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordChangeReplayRun] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Library Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Library Items
-- Item: spCreateLibraryItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR LibraryItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateLibraryItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateLibraryItem]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @LibraryID uniqueidentifier,
    @Type nvarchar(50)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[LibraryItem]
            (
                [ID],
                [Name],
                [LibraryID],
                [Type]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @LibraryID,
                @Type
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[LibraryItem]
            (
                [Name],
                [LibraryID],
                [Type]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @LibraryID,
                @Type
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwLibraryItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateLibraryItem] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Library Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateLibraryItem] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Entity Relationship Display Components */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Relationship Display Components
-- Item: spCreateEntityRelationshipDisplayComponent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityRelationshipDisplayComponent
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityRelationshipDisplayComponent]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityRelationshipDisplayComponent]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @RelationshipType nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityRelationshipDisplayComponent]
            (
                [ID],
                [Name],
                [Description],
                [RelationshipType]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @RelationshipType
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityRelationshipDisplayComponent]
            (
                [Name],
                [Description],
                [RelationshipType]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @RelationshipType
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityRelationshipDisplayComponents] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRelationshipDisplayComponent] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Relationship Display Components */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRelationshipDisplayComponent] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Action Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Action Params
-- Item: spCreateEntityActionParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityActionParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityActionParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityActionParam]
    @ID uniqueidentifier = NULL,
    @EntityActionID uniqueidentifier,
    @ActionParamID uniqueidentifier,
    @ValueType nvarchar(20),
    @Value nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityActionParam]
            (
                [ID],
                [EntityActionID],
                [ActionParamID],
                [ValueType],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityActionID,
                @ActionParamID,
                @ValueType,
                @Value,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityActionParam]
            (
                [EntityActionID],
                [ActionParamID],
                [ValueType],
                [Value],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityActionID,
                @ActionParamID,
                @ValueType,
                @Value,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityActionParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityActionParam] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Entity Action Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityActionParam] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Resource Permissions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Resource Permissions
-- Item: spCreateResourcePermission
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ResourcePermission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateResourcePermission]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateResourcePermission]
    @ID uniqueidentifier = NULL,
    @ResourceTypeID uniqueidentifier,
    @ResourceRecordID nvarchar(255),
    @Type nvarchar(10),
    @StartSharingAt datetimeoffset,
    @EndSharingAt datetimeoffset,
    @RoleID uniqueidentifier,
    @UserID uniqueidentifier,
    @PermissionLevel nvarchar(20),
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ResourcePermission]
            (
                [ID],
                [ResourceTypeID],
                [ResourceRecordID],
                [Type],
                [StartSharingAt],
                [EndSharingAt],
                [RoleID],
                [UserID],
                [PermissionLevel],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ResourceTypeID,
                @ResourceRecordID,
                @Type,
                @StartSharingAt,
                @EndSharingAt,
                @RoleID,
                @UserID,
                @PermissionLevel,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ResourcePermission]
            (
                [ResourceTypeID],
                [ResourceRecordID],
                [Type],
                [StartSharingAt],
                [EndSharingAt],
                [RoleID],
                [UserID],
                [PermissionLevel],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ResourceTypeID,
                @ResourceRecordID,
                @Type,
                @StartSharingAt,
                @EndSharingAt,
                @RoleID,
                @UserID,
                @PermissionLevel,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwResourcePermissions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateResourcePermission] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Resource Permissions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateResourcePermission] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Resource Links */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Resource Links
-- Item: spCreateResourceLink
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ResourceLink
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateResourceLink]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateResourceLink]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @ResourceTypeID uniqueidentifier,
    @ResourceRecordID nvarchar(255),
    @FolderID nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ResourceLink]
            (
                [ID],
                [UserID],
                [ResourceTypeID],
                [ResourceRecordID],
                [FolderID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @ResourceTypeID,
                @ResourceRecordID,
                @FolderID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ResourceLink]
            (
                [UserID],
                [ResourceTypeID],
                [ResourceRecordID],
                [FolderID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @ResourceTypeID,
                @ResourceRecordID,
                @FolderID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwResourceLinks] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateResourceLink] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Resource Links */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateResourceLink] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: Conversation Artifact Versions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Conversation Artifact Versions
-- Item: spCreateConversationArtifactVersion
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ConversationArtifactVersion
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateConversationArtifactVersion]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateConversationArtifactVersion]
    @ID uniqueidentifier = NULL,
    @ConversationArtifactID uniqueidentifier,
    @Version int,
    @Configuration nvarchar(MAX),
    @Content nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ConversationArtifactVersion]
            (
                [ID],
                [ConversationArtifactID],
                [Version],
                [Configuration],
                [Content],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ConversationArtifactID,
                @Version,
                @Configuration,
                @Content,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ConversationArtifactVersion]
            (
                [ConversationArtifactID],
                [Version],
                [Configuration],
                [Content],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ConversationArtifactID,
                @Version,
                @Configuration,
                @Content,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwConversationArtifactVersions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationArtifactVersion] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: Conversation Artifact Versions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationArtifactVersion] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Agent Requests */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Requests
-- Item: spCreateAIAgentRequest
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentRequest
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentRequest]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentRequest]
    @ID uniqueidentifier = NULL,
    @AgentID uniqueidentifier,
    @RequestedAt datetime,
    @RequestForUserID uniqueidentifier,
    @Status nvarchar(20),
    @Request nvarchar(MAX),
    @Response nvarchar(MAX),
    @ResponseByUserID uniqueidentifier,
    @RespondedAt datetime,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentRequest]
            (
                [ID],
                [AgentID],
                [RequestedAt],
                [RequestForUserID],
                [Status],
                [Request],
                [Response],
                [ResponseByUserID],
                [RespondedAt],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AgentID,
                @RequestedAt,
                @RequestForUserID,
                @Status,
                @Request,
                @Response,
                @ResponseByUserID,
                @RespondedAt,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentRequest]
            (
                [AgentID],
                [RequestedAt],
                [RequestForUserID],
                [Status],
                [Request],
                [Response],
                [ResponseByUserID],
                [RespondedAt],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AgentID,
                @RequestedAt,
                @RequestForUserID,
                @Status,
                @Request,
                @Response,
                @ResponseByUserID,
                @RespondedAt,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentRequests] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentRequest] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agent Requests */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentRequest] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Model Vendors */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Model Vendors
-- Item: spCreateAIModelVendor
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIModelVendor
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIModelVendor]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIModelVendor]
    @ID uniqueidentifier = NULL,
    @ModelID uniqueidentifier,
    @VendorID uniqueidentifier,
    @Priority int,
    @Status nvarchar(20),
    @DriverClass nvarchar(100),
    @DriverImportPath nvarchar(255),
    @APIName nvarchar(100),
    @MaxInputTokens int,
    @MaxOutputTokens int,
    @SupportedResponseFormats nvarchar(100),
    @SupportsEffortLevel bit,
    @SupportsStreaming bit,
    @TypeID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIModelVendor]
            (
                [ID],
                [ModelID],
                [VendorID],
                [Priority],
                [Status],
                [DriverClass],
                [DriverImportPath],
                [APIName],
                [MaxInputTokens],
                [MaxOutputTokens],
                [SupportedResponseFormats],
                [SupportsEffortLevel],
                [SupportsStreaming],
                [TypeID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ModelID,
                @VendorID,
                @Priority,
                @Status,
                @DriverClass,
                @DriverImportPath,
                @APIName,
                @MaxInputTokens,
                @MaxOutputTokens,
                @SupportedResponseFormats,
                @SupportsEffortLevel,
                @SupportsStreaming,
                @TypeID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIModelVendor]
            (
                [ModelID],
                [VendorID],
                [Priority],
                [Status],
                [DriverClass],
                [DriverImportPath],
                [APIName],
                [MaxInputTokens],
                [MaxOutputTokens],
                [SupportedResponseFormats],
                [SupportsEffortLevel],
                [SupportsStreaming],
                [TypeID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ModelID,
                @VendorID,
                @Priority,
                @Status,
                @DriverClass,
                @DriverImportPath,
                @APIName,
                @MaxInputTokens,
                @MaxOutputTokens,
                @SupportedResponseFormats,
                @SupportsEffortLevel,
                @SupportsStreaming,
                @TypeID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIModelVendors] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModelVendor] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Model Vendors */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIModelVendor] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Vendor Type Definitions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Vendor Type Definitions
-- Item: spCreateAIVendorTypeDefinition
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIVendorTypeDefinition
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIVendorTypeDefinition]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIVendorTypeDefinition]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @ActualID UNIQUEIDENTIFIER = ISNULL(@ID, NEWID())
    INSERT INTO
    [${flyway:defaultSchema}].[AIVendorTypeDefinition]
        (
            [Name],
                [Description],
                [ID]
        )
    VALUES
        (
            @Name,
                @Description,
                @ActualID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIVendorTypeDefinitions] WHERE [ID] = @ActualID
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIVendorTypeDefinition] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Vendor Type Definitions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIVendorTypeDefinition] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: Report User States */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Report User States
-- Item: spCreateReportUserState
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ReportUserState
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateReportUserState]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateReportUserState]
    @ID uniqueidentifier = NULL,
    @ReportID uniqueidentifier,
    @UserID uniqueidentifier,
    @ReportState nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ReportUserState]
            (
                [ID],
                [ReportID],
                [UserID],
                [ReportState]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ReportID,
                @UserID,
                @ReportState
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ReportUserState]
            (
                [ReportID],
                [UserID],
                [ReportState]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ReportID,
                @UserID,
                @ReportState
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwReportUserStates] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReportUserState] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: Report User States */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReportUserState] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Query Entities */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Query Entities
-- Item: spCreateQueryEntity
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR QueryEntity
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueryEntity]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueryEntity]
    @ID uniqueidentifier = NULL,
    @QueryID uniqueidentifier,
    @EntityID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[QueryEntity]
            (
                [ID],
                [QueryID],
                [EntityID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @QueryID,
                @EntityID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[QueryEntity]
            (
                [QueryID],
                [EntityID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @QueryID,
                @EntityID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueryEntities] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryEntity] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Query Entities */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueryEntity] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: Dashboard User States */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Dashboard User States
-- Item: spCreateDashboardUserState
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DashboardUserState
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDashboardUserState]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDashboardUserState]
    @ID uniqueidentifier = NULL,
    @DashboardID uniqueidentifier,
    @UserID uniqueidentifier,
    @UserState nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DashboardUserState]
            (
                [ID],
                [DashboardID],
                [UserID],
                [UserState]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @DashboardID,
                @UserID,
                @UserState
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DashboardUserState]
            (
                [DashboardID],
                [UserID],
                [UserState]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @DashboardID,
                @UserID,
                @UserState
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDashboardUserStates] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDashboardUserState] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: Dashboard User States */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDashboardUserState] TO [cdp_UI], [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: Artifact Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Artifact Types
-- Item: spCreateArtifactType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ArtifactType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateArtifactType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateArtifactType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @ContentType nvarchar(100),
    @IsEnabled bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @ActualID UNIQUEIDENTIFIER = ISNULL(@ID, NEWID())
    INSERT INTO
    [${flyway:defaultSchema}].[ArtifactType]
        (
            [Name],
                [Description],
                [ContentType],
                [IsEnabled],
                [ID]
        )
    VALUES
        (
            @Name,
                @Description,
                @ContentType,
                @IsEnabled,
                @ActualID
        )
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwArtifactTypes] WHERE [ID] = @ActualID
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateArtifactType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: Artifact Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateArtifactType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Vendor Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Vendor Types
-- Item: spCreateAIVendorType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIVendorType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIVendorType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIVendorType]
    @ID uniqueidentifier = NULL,
    @VendorID uniqueidentifier,
    @TypeID uniqueidentifier,
    @Rank int,
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIVendorType]
            (
                [ID],
                [VendorID],
                [TypeID],
                [Rank],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @VendorID,
                @TypeID,
                @Rank,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIVendorType]
            (
                [VendorID],
                [TypeID],
                [Rank],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @VendorID,
                @TypeID,
                @Rank,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIVendorTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIVendorType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Vendor Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIVendorType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: Conversation Artifacts */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Conversation Artifacts
-- Item: spCreateConversationArtifact
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ConversationArtifact
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateConversationArtifact]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateConversationArtifact]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @ConversationID uniqueidentifier,
    @ArtifactTypeID uniqueidentifier,
    @SharingScope nvarchar(50),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ConversationArtifact]
            (
                [ID],
                [Name],
                [Description],
                [ConversationID],
                [ArtifactTypeID],
                [SharingScope],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ConversationID,
                @ArtifactTypeID,
                @SharingScope,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ConversationArtifact]
            (
                [Name],
                [Description],
                [ConversationID],
                [ArtifactTypeID],
                [SharingScope],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ConversationID,
                @ArtifactTypeID,
                @SharingScope,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwConversationArtifacts] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationArtifact] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: Conversation Artifacts */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationArtifact] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Agent Prompts */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Agent Prompts
-- Item: spCreateAIAgentPrompt
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentPrompt
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentPrompt]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentPrompt]
    @ID uniqueidentifier = NULL,
    @AgentID uniqueidentifier,
    @PromptID uniqueidentifier,
    @Purpose nvarchar(MAX),
    @ExecutionOrder int,
    @ConfigurationID uniqueidentifier,
    @Status nvarchar(20),
    @ContextBehavior nvarchar(50),
    @ContextMessageCount int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentPrompt]
            (
                [ID],
                [AgentID],
                [PromptID],
                [Purpose],
                [ExecutionOrder],
                [ConfigurationID],
                [Status],
                [ContextBehavior],
                [ContextMessageCount]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AgentID,
                @PromptID,
                @Purpose,
                @ExecutionOrder,
                @ConfigurationID,
                @Status,
                @ContextBehavior,
                @ContextMessageCount
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentPrompt]
            (
                [AgentID],
                [PromptID],
                [Purpose],
                [ExecutionOrder],
                [ConfigurationID],
                [Status],
                [ContextBehavior],
                [ContextMessageCount]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AgentID,
                @PromptID,
                @Purpose,
                @ExecutionOrder,
                @ConfigurationID,
                @Status,
                @ContextBehavior,
                @ContextMessageCount
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentPrompts] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentPrompt] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Agent Prompts */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentPrompt] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: Dashboard User Preferences */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Dashboard User Preferences
-- Item: spCreateDashboardUserPreference
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DashboardUserPreference
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDashboardUserPreference]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDashboardUserPreference]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @DashboardID uniqueidentifier,
    @Scope nvarchar(20),
    @ApplicationID uniqueidentifier,
    @DisplayOrder int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DashboardUserPreference]
            (
                [ID],
                [UserID],
                [DashboardID],
                [Scope],
                [ApplicationID],
                [DisplayOrder]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @DashboardID,
                @Scope,
                @ApplicationID,
                @DisplayOrder
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DashboardUserPreference]
            (
                [UserID],
                [DashboardID],
                [Scope],
                [ApplicationID],
                [DisplayOrder]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @DashboardID,
                @Scope,
                @ApplicationID,
                @DisplayOrder
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDashboardUserPreferences] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDashboardUserPreference] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: Dashboard User Preferences */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDashboardUserPreference] TO [cdp_UI], [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Process Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Process Runs
-- Item: spCreateContentProcessRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentProcessRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentProcessRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentProcessRun]
    @ID uniqueidentifier = NULL,
    @SourceID uniqueidentifier,
    @StartTime datetime,
    @EndTime datetime,
    @Status nvarchar(100),
    @ProcessedItems int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentProcessRun]
            (
                [ID],
                [SourceID],
                [StartTime],
                [EndTime],
                [Status],
                [ProcessedItems]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @SourceID,
                @StartTime,
                @EndTime,
                @Status,
                @ProcessedItems
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentProcessRun]
            (
                [SourceID],
                [StartTime],
                [EndTime],
                [Status],
                [ProcessedItems]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @SourceID,
                @StartTime,
                @EndTime,
                @Status,
                @ProcessedItems
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentProcessRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentProcessRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Process Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentProcessRun] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Sources */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Sources
-- Item: spCreateContentSource
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentSource
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentSource]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentSource]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @ContentTypeID uniqueidentifier,
    @ContentSourceTypeID uniqueidentifier,
    @ContentFileTypeID uniqueidentifier,
    @URL nvarchar(2000)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentSource]
            (
                [ID],
                [Name],
                [ContentTypeID],
                [ContentSourceTypeID],
                [ContentFileTypeID],
                [URL]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @ContentTypeID,
                @ContentSourceTypeID,
                @ContentFileTypeID,
                @URL
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentSource]
            (
                [Name],
                [ContentTypeID],
                [ContentSourceTypeID],
                [ContentFileTypeID],
                [URL]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @ContentTypeID,
                @ContentSourceTypeID,
                @ContentFileTypeID,
                @URL
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentSources] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSource] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Sources */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSource] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Source Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Source Params
-- Item: spCreateContentSourceParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentSourceParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentSourceParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentSourceParam]
    @ID uniqueidentifier = NULL,
    @ContentSourceID uniqueidentifier,
    @ContentSourceTypeParamID uniqueidentifier,
    @Value nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentSourceParam]
            (
                [ID],
                [ContentSourceID],
                [ContentSourceTypeParamID],
                [Value]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ContentSourceID,
                @ContentSourceTypeParamID,
                @Value
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentSourceParam]
            (
                [ContentSourceID],
                [ContentSourceTypeParamID],
                [Value]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ContentSourceID,
                @ContentSourceTypeParamID,
                @Value
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentSourceParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSourceParam] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Source Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSourceParam] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Source Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Source Types
-- Item: spCreateContentSourceType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentSourceType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentSourceType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentSourceType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(1000)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentSourceType]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentSourceType]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentSourceTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSourceType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Source Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSourceType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Source Type Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Source Type Params
-- Item: spCreateContentSourceTypeParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentSourceTypeParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentSourceTypeParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentSourceTypeParam]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @Type nvarchar(50),
    @DefaultValue nvarchar(MAX),
    @IsRequired bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentSourceTypeParam]
            (
                [ID],
                [Name],
                [Description],
                [Type],
                [DefaultValue],
                [IsRequired]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @Type,
                @DefaultValue,
                @IsRequired
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentSourceTypeParam]
            (
                [Name],
                [Description],
                [Type],
                [DefaultValue],
                [IsRequired]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @Type,
                @DefaultValue,
                @IsRequired
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentSourceTypeParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSourceTypeParam] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Source Type Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentSourceTypeParam] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Types
-- Item: spCreateContentType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @AIModelID uniqueidentifier,
    @MinTags int,
    @MaxTags int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentType]
            (
                [ID],
                [Name],
                [Description],
                [AIModelID],
                [MinTags],
                [MaxTags]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @AIModelID,
                @MinTags,
                @MaxTags
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentType]
            (
                [Name],
                [Description],
                [AIModelID],
                [MinTags],
                [MaxTags]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @AIModelID,
                @MinTags,
                @MaxTags
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Type Attributes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Type Attributes
-- Item: spCreateContentTypeAttribute
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentTypeAttribute
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentTypeAttribute]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentTypeAttribute]
    @ID uniqueidentifier = NULL,
    @ContentTypeID uniqueidentifier,
    @Name nvarchar(100),
    @Prompt nvarchar(MAX),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentTypeAttribute]
            (
                [ID],
                [ContentTypeID],
                [Name],
                [Prompt],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ContentTypeID,
                @Name,
                @Prompt,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentTypeAttribute]
            (
                [ContentTypeID],
                [Name],
                [Prompt],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ContentTypeID,
                @Name,
                @Prompt,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentTypeAttributes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentTypeAttribute] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Type Attributes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentTypeAttribute] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content File Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content File Types
-- Item: spCreateContentFileType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentFileType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentFileType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentFileType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @FileExtension nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentFileType]
            (
                [ID],
                [Name],
                [FileExtension]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @FileExtension
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentFileType]
            (
                [Name],
                [FileExtension]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @FileExtension
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentFileTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentFileType] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content File Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentFileType] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Items
-- Item: spCreateContentItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentItem]
    @ID uniqueidentifier = NULL,
    @ContentSourceID uniqueidentifier,
    @Name nvarchar(250),
    @Description nvarchar(MAX),
    @ContentTypeID uniqueidentifier,
    @ContentSourceTypeID uniqueidentifier,
    @ContentFileTypeID uniqueidentifier,
    @Checksum nvarchar(100),
    @URL nvarchar(2000),
    @Text nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentItem]
            (
                [ID],
                [ContentSourceID],
                [Name],
                [Description],
                [ContentTypeID],
                [ContentSourceTypeID],
                [ContentFileTypeID],
                [Checksum],
                [URL],
                [Text]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ContentSourceID,
                @Name,
                @Description,
                @ContentTypeID,
                @ContentSourceTypeID,
                @ContentFileTypeID,
                @Checksum,
                @URL,
                @Text
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentItem]
            (
                [ContentSourceID],
                [Name],
                [Description],
                [ContentTypeID],
                [ContentSourceTypeID],
                [ContentFileTypeID],
                [Checksum],
                [URL],
                [Text]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ContentSourceID,
                @Name,
                @Description,
                @ContentTypeID,
                @ContentSourceTypeID,
                @ContentFileTypeID,
                @Checksum,
                @URL,
                @Text
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentItem] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentItem] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Item Attributes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Item Attributes
-- Item: spCreateContentItemAttribute
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentItemAttribute
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentItemAttribute]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentItemAttribute]
    @ID uniqueidentifier = NULL,
    @ContentItemID uniqueidentifier,
    @Name nvarchar(100),
    @Value nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentItemAttribute]
            (
                [ID],
                [ContentItemID],
                [Name],
                [Value]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ContentItemID,
                @Name,
                @Value
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentItemAttribute]
            (
                [ContentItemID],
                [Name],
                [Value]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ContentItemID,
                @Name,
                @Value
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentItemAttributes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentItemAttribute] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Item Attributes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentItemAttribute] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Content Item Tags */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Content Item Tags
-- Item: spCreateContentItemTag
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ContentItemTag
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateContentItemTag]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateContentItemTag]
    @ID uniqueidentifier = NULL,
    @ItemID uniqueidentifier,
    @Tag nvarchar(200)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ContentItemTag]
            (
                [ID],
                [ItemID],
                [Tag]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ItemID,
                @Tag
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ContentItemTag]
            (
                [ItemID],
                [Tag]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ItemID,
                @Tag
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwContentItemTags] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentItemTag] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Content Item Tags */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateContentItemTag] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Generated Codes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Generated Codes
-- Item: spCreateGeneratedCode
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR GeneratedCode
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateGeneratedCode]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateGeneratedCode]
    @ID uniqueidentifier = NULL,
    @GeneratedAt datetimeoffset,
    @CategoryID uniqueidentifier,
    @GeneratedByModelID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Code nvarchar(MAX),
    @Source nvarchar(MAX),
    @LinkedEntityID uniqueidentifier,
    @LinkedRecordPrimaryKey nvarchar(MAX),
    @Status nvarchar(20),
    @Language nvarchar(50)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[GeneratedCode]
            (
                [ID],
                [GeneratedAt],
                [CategoryID],
                [GeneratedByModelID],
                [Name],
                [Description],
                [Code],
                [Source],
                [LinkedEntityID],
                [LinkedRecordPrimaryKey],
                [Status],
                [Language]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @GeneratedAt,
                @CategoryID,
                @GeneratedByModelID,
                @Name,
                @Description,
                @Code,
                @Source,
                @LinkedEntityID,
                @LinkedRecordPrimaryKey,
                @Status,
                @Language
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[GeneratedCode]
            (
                [GeneratedAt],
                [CategoryID],
                [GeneratedByModelID],
                [Name],
                [Description],
                [Code],
                [Source],
                [LinkedEntityID],
                [LinkedRecordPrimaryKey],
                [Status],
                [Language]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @GeneratedAt,
                @CategoryID,
                @GeneratedByModelID,
                @Name,
                @Description,
                @Code,
                @Source,
                @LinkedEntityID,
                @LinkedRecordPrimaryKey,
                @Status,
                @Language
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwGeneratedCodes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateGeneratedCode] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Generated Codes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateGeneratedCode] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Prompt Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Prompt Runs
-- Item: spCreateAIPromptRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIPromptRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIPromptRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIPromptRun]
    @ID uniqueidentifier = NULL,
    @PromptID uniqueidentifier,
    @ModelID uniqueidentifier,
    @VendorID uniqueidentifier,
    @AgentID uniqueidentifier,
    @ConfigurationID uniqueidentifier,
    @RunAt datetimeoffset,
    @CompletedAt datetimeoffset,
    @ExecutionTimeMS int,
    @Messages nvarchar(MAX),
    @Result nvarchar(MAX),
    @TokensUsed int,
    @TokensPrompt int,
    @TokensCompletion int,
    @TotalCost decimal(18, 6),
    @Success bit,
    @ErrorMessage nvarchar(MAX),
    @ParentID uniqueidentifier,
    @RunType nvarchar(20),
    @ExecutionOrder int,
    @AgentRunID uniqueidentifier,
    @Cost decimal(19, 8),
    @CostCurrency nvarchar(10),
    @TokensUsedRollup int,
    @TokensPromptRollup int,
    @TokensCompletionRollup int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIPromptRun]
            (
                [ID],
                [PromptID],
                [ModelID],
                [VendorID],
                [AgentID],
                [ConfigurationID],
                [RunAt],
                [CompletedAt],
                [ExecutionTimeMS],
                [Messages],
                [Result],
                [TokensUsed],
                [TokensPrompt],
                [TokensCompletion],
                [TotalCost],
                [Success],
                [ErrorMessage],
                [ParentID],
                [RunType],
                [ExecutionOrder],
                [AgentRunID],
                [Cost],
                [CostCurrency],
                [TokensUsedRollup],
                [TokensPromptRollup],
                [TokensCompletionRollup]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @PromptID,
                @ModelID,
                @VendorID,
                @AgentID,
                @ConfigurationID,
                @RunAt,
                @CompletedAt,
                @ExecutionTimeMS,
                @Messages,
                @Result,
                @TokensUsed,
                @TokensPrompt,
                @TokensCompletion,
                @TotalCost,
                @Success,
                @ErrorMessage,
                @ParentID,
                @RunType,
                @ExecutionOrder,
                @AgentRunID,
                @Cost,
                @CostCurrency,
                @TokensUsedRollup,
                @TokensPromptRollup,
                @TokensCompletionRollup
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIPromptRun]
            (
                [PromptID],
                [ModelID],
                [VendorID],
                [AgentID],
                [ConfigurationID],
                [RunAt],
                [CompletedAt],
                [ExecutionTimeMS],
                [Messages],
                [Result],
                [TokensUsed],
                [TokensPrompt],
                [TokensCompletion],
                [TotalCost],
                [Success],
                [ErrorMessage],
                [ParentID],
                [RunType],
                [ExecutionOrder],
                [AgentRunID],
                [Cost],
                [CostCurrency],
                [TokensUsedRollup],
                [TokensPromptRollup],
                [TokensCompletionRollup]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @PromptID,
                @ModelID,
                @VendorID,
                @AgentID,
                @ConfigurationID,
                @RunAt,
                @CompletedAt,
                @ExecutionTimeMS,
                @Messages,
                @Result,
                @TokensUsed,
                @TokensPrompt,
                @TokensCompletion,
                @TotalCost,
                @Success,
                @ErrorMessage,
                @ParentID,
                @RunType,
                @ExecutionOrder,
                @AgentRunID,
                @Cost,
                @CostCurrency,
                @TokensUsedRollup,
                @TokensPromptRollup,
                @TokensCompletionRollup
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIPromptRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPromptRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Prompt Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIPromptRun] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Agent Run Steps */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Agent Run Steps
-- Item: spCreateAIAgentRunStep
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentRunStep
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentRunStep]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentRunStep]
    @ID uniqueidentifier = NULL,
    @AgentRunID uniqueidentifier,
    @StepNumber int,
    @StepType nvarchar(50),
    @StepName nvarchar(255),
    @TargetID uniqueidentifier,
    @Status nvarchar(50),
    @StartedAt datetimeoffset,
    @CompletedAt datetimeoffset,
    @Success bit,
    @ErrorMessage nvarchar(MAX),
    @InputData nvarchar(MAX),
    @OutputData nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentRunStep]
            (
                [ID],
                [AgentRunID],
                [StepNumber],
                [StepType],
                [StepName],
                [TargetID],
                [Status],
                [StartedAt],
                [CompletedAt],
                [Success],
                [ErrorMessage],
                [InputData],
                [OutputData]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AgentRunID,
                @StepNumber,
                @StepType,
                @StepName,
                @TargetID,
                @Status,
                @StartedAt,
                @CompletedAt,
                @Success,
                @ErrorMessage,
                @InputData,
                @OutputData
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentRunStep]
            (
                [AgentRunID],
                [StepNumber],
                [StepType],
                [StepName],
                [TargetID],
                [Status],
                [StartedAt],
                [CompletedAt],
                [Success],
                [ErrorMessage],
                [InputData],
                [OutputData]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AgentRunID,
                @StepNumber,
                @StepType,
                @StepName,
                @TargetID,
                @Status,
                @StartedAt,
                @CompletedAt,
                @Success,
                @ErrorMessage,
                @InputData,
                @OutputData
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentRunSteps] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentRunStep] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Agent Run Steps */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentRunStep] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: Conversation Artifact Permissions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Conversation Artifact Permissions
-- Item: spCreateConversationArtifactPermission
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ConversationArtifactPermission
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateConversationArtifactPermission]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateConversationArtifactPermission]
    @ID uniqueidentifier = NULL,
    @ConversationArtifactID uniqueidentifier,
    @UserID uniqueidentifier,
    @AccessLevel nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ConversationArtifactPermission]
            (
                [ID],
                [ConversationArtifactID],
                [UserID],
                [AccessLevel]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ConversationArtifactID,
                @UserID,
                @AccessLevel
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ConversationArtifactPermission]
            (
                [ConversationArtifactID],
                [UserID],
                [AccessLevel]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ConversationArtifactID,
                @UserID,
                @AccessLevel
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwConversationArtifactPermissions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationArtifactPermission] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: Conversation Artifact Permissions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateConversationArtifactPermission] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for AI Agent Learning Cycles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agent Learning Cycles
-- Item: spCreateAIAgentLearningCycle
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgentLearningCycle
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgentLearningCycle]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgentLearningCycle]
    @ID uniqueidentifier = NULL,
    @AgentID uniqueidentifier,
    @StartedAt datetimeoffset,
    @EndedAt datetimeoffset,
    @Status nvarchar(20),
    @AgentSummary nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgentLearningCycle]
            (
                [ID],
                [AgentID],
                [StartedAt],
                [EndedAt],
                [Status],
                [AgentSummary]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AgentID,
                @StartedAt,
                @EndedAt,
                @Status,
                @AgentSummary
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgentLearningCycle]
            (
                [AgentID],
                [StartedAt],
                [EndedAt],
                [Status],
                [AgentSummary]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AgentID,
                @StartedAt,
                @EndedAt,
                @Status,
                @AgentSummary
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgentLearningCycles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentLearningCycle] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agent Learning Cycles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgentLearningCycle] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: Report Versions */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: Report Versions
-- Item: spCreateReportVersion
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ReportVersion
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateReportVersion]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateReportVersion]
    @ID uniqueidentifier = NULL,
    @ReportID uniqueidentifier,
    @VersionNumber int,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @Configuration nvarchar(MAX),
    @DataContextUpdated bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ReportVersion]
            (
                [ID],
                [ReportID],
                [VersionNumber],
                [Name],
                [Description],
                [Configuration],
                [DataContextUpdated]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ReportID,
                @VersionNumber,
                @Name,
                @Description,
                @Configuration,
                @DataContextUpdated
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ReportVersion]
            (
                [ReportID],
                [VersionNumber],
                [Name],
                [Description],
                [Configuration],
                [DataContextUpdated]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ReportID,
                @VersionNumber,
                @Name,
                @Description,
                @Configuration,
                @DataContextUpdated
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwReportVersions] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReportVersion] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: Report Versions */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateReportVersion] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for MJ: AI Configuration Params */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: MJ: AI Configuration Params
-- Item: spCreateAIConfigurationParam
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIConfigurationParam
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIConfigurationParam]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIConfigurationParam]
    @ID uniqueidentifier = NULL,
    @ConfigurationID uniqueidentifier,
    @Name nvarchar(100),
    @Type nvarchar(20),
    @Value nvarchar(MAX),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIConfigurationParam]
            (
                [ID],
                [ConfigurationID],
                [Name],
                [Type],
                [Value],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ConfigurationID,
                @Name,
                @Type,
                @Value,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIConfigurationParam]
            (
                [ConfigurationID],
                [Name],
                [Type],
                [Value],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ConfigurationID,
                @Name,
                @Type,
                @Value,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIConfigurationParams] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIConfigurationParam] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for MJ: AI Configuration Params */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIConfigurationParam] TO [cdp_Developer], [cdp_Integration]



