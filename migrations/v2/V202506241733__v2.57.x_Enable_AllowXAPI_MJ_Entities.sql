/** Flip on AllowCreateAPI, AllowUpdateAPI, AllowDeleteAPI for MJ entities **/
update __mj.Entity SET AllowCreateAPI=1 WHERE SchemaName='__mj' AND AllowCreateAPI=0
update __mj.Entity SET AllowUpdateAPI=1 WHERE SchemaName='__mj' AND AllowUpdateAPI=0
update __mj.Entity SET AllowDeleteAPI=1 WHERE SchemaName='__mj' AND AllowDeleteAPI=0

/******************************************
*******************************************
*******************************************
*******************************************

    CodeGen Run --- used forceRegeneration since the above aren't actually schema changes
    and added a filter to the mj.config.cjs to get the output filtered down to only things
    that were changed 

    This was the section of mj.config.cjs for this code gen run:

    forceRegeneration: {
        enabled: true,  // Set to true to force regeneration even without schema changes
        entityWhereClause: '__mj_UpdatedAt>=\'2025-06-24 22:42:25.1766667 +00:00\'',  // Optional WHERE clause to filter entities for regeneration
        baseViews: true,
        spCreate: false,  // Set this to true to regenerate all spCreate procedures
        spUpdate: false,
        spDelete: false,
        allStoredProcedures: true,  // Overrides individual SP flags when true
        indexes: false,
        fullTextSearch: false,
    },
   
*******************************************
*******************************************
*******************************************
*******************************************/

/* Index for Foreign Keys for AIAgent */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agents
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key ParentID in table AIAgent
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgent_ParentID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgent]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgent_ParentID ON [${flyway:defaultSchema}].[AIAgent] ([ParentID]);

-- Index for foreign key ContextCompressionPromptID in table AIAgent
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgent_ContextCompressionPromptID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgent]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgent_ContextCompressionPromptID ON [${flyway:defaultSchema}].[AIAgent] ([ContextCompressionPromptID]);

-- Index for foreign key TypeID in table AIAgent
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_AIAgent_TypeID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[AIAgent]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_AIAgent_TypeID ON [${flyway:defaultSchema}].[AIAgent] ([TypeID]);

/* Base View SQL for AI Agents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agents
-- Item: vwAIAgents
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      AI Agents
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  AIAgent
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwAIAgents]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwAIAgents]
AS
SELECT
    a.*,
    AIAgent_ParentID.[Name] AS [Parent],
    AIPrompt_ContextCompressionPromptID.[Name] AS [ContextCompressionPrompt],
    AIAgentType_TypeID.[Name] AS [Type]
FROM
    [${flyway:defaultSchema}].[AIAgent] AS a
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgent] AS AIAgent_ParentID
  ON
    [a].[ParentID] = AIAgent_ParentID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIPrompt] AS AIPrompt_ContextCompressionPromptID
  ON
    [a].[ContextCompressionPromptID] = AIPrompt_ContextCompressionPromptID.[ID]
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[AIAgentType] AS AIAgentType_TypeID
  ON
    [a].[TypeID] = AIAgentType_TypeID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgents] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* Base View Permissions SQL for AI Agents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agents
-- Item: Permissions for vwAIAgents
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwAIAgents] TO [cdp_UI], [cdp_Developer], [cdp_Integration]

/* spCreate SQL for AI Agents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agents
-- Item: spCreateAIAgent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AIAgent
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAIAgent]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAIAgent]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @LogoURL nvarchar(255),
    @ParentID uniqueidentifier,
    @ExposeAsAction bit,
    @ExecutionOrder int,
    @ExecutionMode nvarchar(20),
    @EnableContextCompression bit,
    @ContextCompressionMessageThreshold int,
    @ContextCompressionPromptID uniqueidentifier,
    @ContextCompressionMessageRetentionCount int,
    @TypeID uniqueidentifier,
    @Status nvarchar(20),
    @DriverClass nvarchar(255),
    @IconClass nvarchar(100),
    @ModelSelectionMode nvarchar(50)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AIAgent]
            (
                [ID],
                [Name],
                [Description],
                [LogoURL],
                [ParentID],
                [ExposeAsAction],
                [ExecutionOrder],
                [ExecutionMode],
                [EnableContextCompression],
                [ContextCompressionMessageThreshold],
                [ContextCompressionPromptID],
                [ContextCompressionMessageRetentionCount],
                [TypeID],
                [Status],
                [DriverClass],
                [IconClass],
                [ModelSelectionMode]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @LogoURL,
                @ParentID,
                @ExposeAsAction,
                @ExecutionOrder,
                @ExecutionMode,
                @EnableContextCompression,
                @ContextCompressionMessageThreshold,
                @ContextCompressionPromptID,
                @ContextCompressionMessageRetentionCount,
                @TypeID,
                @Status,
                @DriverClass,
                @IconClass,
                @ModelSelectionMode
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AIAgent]
            (
                [Name],
                [Description],
                [LogoURL],
                [ParentID],
                [ExposeAsAction],
                [ExecutionOrder],
                [ExecutionMode],
                [EnableContextCompression],
                [ContextCompressionMessageThreshold],
                [ContextCompressionPromptID],
                [ContextCompressionMessageRetentionCount],
                [TypeID],
                [Status],
                [DriverClass],
                [IconClass],
                [ModelSelectionMode]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @LogoURL,
                @ParentID,
                @ExposeAsAction,
                @ExecutionOrder,
                @ExecutionMode,
                @EnableContextCompression,
                @ContextCompressionMessageThreshold,
                @ContextCompressionPromptID,
                @ContextCompressionMessageRetentionCount,
                @TypeID,
                @Status,
                @DriverClass,
                @IconClass,
                @ModelSelectionMode
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAIAgents] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgent] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for AI Agents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAIAgent] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for AI Agents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agents
-- Item: spUpdateAIAgent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AIAgent
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAIAgent]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAIAgent]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @LogoURL nvarchar(255),
    @ParentID uniqueidentifier,
    @ExposeAsAction bit,
    @ExecutionOrder int,
    @ExecutionMode nvarchar(20),
    @EnableContextCompression bit,
    @ContextCompressionMessageThreshold int,
    @ContextCompressionPromptID uniqueidentifier,
    @ContextCompressionMessageRetentionCount int,
    @TypeID uniqueidentifier,
    @Status nvarchar(20),
    @DriverClass nvarchar(255),
    @IconClass nvarchar(100),
    @ModelSelectionMode nvarchar(50)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIAgent]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [LogoURL] = @LogoURL,
        [ParentID] = @ParentID,
        [ExposeAsAction] = @ExposeAsAction,
        [ExecutionOrder] = @ExecutionOrder,
        [ExecutionMode] = @ExecutionMode,
        [EnableContextCompression] = @EnableContextCompression,
        [ContextCompressionMessageThreshold] = @ContextCompressionMessageThreshold,
        [ContextCompressionPromptID] = @ContextCompressionPromptID,
        [ContextCompressionMessageRetentionCount] = @ContextCompressionMessageRetentionCount,
        [TypeID] = @TypeID,
        [Status] = @Status,
        [DriverClass] = @DriverClass,
        [IconClass] = @IconClass,
        [ModelSelectionMode] = @ModelSelectionMode
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAIAgents]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIAgent] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the AIAgent table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAIAgent
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAIAgent
ON [${flyway:defaultSchema}].[AIAgent]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AIAgent]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[AIAgent] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for AI Agents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAIAgent] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for AI Agents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: AI Agents
-- Item: spDeleteAIAgent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AIAgent
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteAIAgent]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteAIAgent]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[AIAgent]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIAgent] TO [cdp_Integration]
    

/* spDelete Permissions for AI Agents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAIAgent] TO [cdp_Integration]



/* spCreate SQL for Employee Company Integrations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employee Company Integrations
-- Item: spCreateEmployeeCompanyIntegration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EmployeeCompanyIntegration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEmployeeCompanyIntegration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEmployeeCompanyIntegration]
    @ID uniqueidentifier = NULL,
    @EmployeeID uniqueidentifier,
    @CompanyIntegrationID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(750),
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EmployeeCompanyIntegration]
            (
                [ID],
                [EmployeeID],
                [CompanyIntegrationID],
                [ExternalSystemRecordID],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EmployeeID,
                @CompanyIntegrationID,
                @ExternalSystemRecordID,
                @IsActive
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EmployeeCompanyIntegration]
            (
                [EmployeeID],
                [CompanyIntegrationID],
                [ExternalSystemRecordID],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EmployeeID,
                @CompanyIntegrationID,
                @ExternalSystemRecordID,
                @IsActive
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEmployeeCompanyIntegrations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEmployeeCompanyIntegration] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Employee Company Integrations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEmployeeCompanyIntegration] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Employee Company Integrations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employee Company Integrations
-- Item: spUpdateEmployeeCompanyIntegration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EmployeeCompanyIntegration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEmployeeCompanyIntegration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEmployeeCompanyIntegration]
    @ID uniqueidentifier,
    @EmployeeID uniqueidentifier,
    @CompanyIntegrationID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(750),
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EmployeeCompanyIntegration]
    SET
        [EmployeeID] = @EmployeeID,
        [CompanyIntegrationID] = @CompanyIntegrationID,
        [ExternalSystemRecordID] = @ExternalSystemRecordID,
        [IsActive] = @IsActive
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEmployeeCompanyIntegrations]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEmployeeCompanyIntegration] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the EmployeeCompanyIntegration table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEmployeeCompanyIntegration
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEmployeeCompanyIntegration
ON [${flyway:defaultSchema}].[EmployeeCompanyIntegration]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EmployeeCompanyIntegration]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EmployeeCompanyIntegration] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Employee Company Integrations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEmployeeCompanyIntegration] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Employee Company Integrations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employee Company Integrations
-- Item: spDeleteEmployeeCompanyIntegration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR EmployeeCompanyIntegration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteEmployeeCompanyIntegration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteEmployeeCompanyIntegration]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[EmployeeCompanyIntegration]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEmployeeCompanyIntegration] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Employee Company Integrations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEmployeeCompanyIntegration] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Employee Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employee Roles
-- Item: spCreateEmployeeRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EmployeeRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEmployeeRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEmployeeRole]
    @ID uniqueidentifier = NULL,
    @EmployeeID uniqueidentifier,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EmployeeRole]
            (
                [ID],
                [EmployeeID],
                [RoleID],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EmployeeID,
                @RoleID,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EmployeeRole]
            (
                [EmployeeID],
                [RoleID],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EmployeeID,
                @RoleID,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEmployeeRoles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEmployeeRole] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Employee Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEmployeeRole] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Employee Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employee Roles
-- Item: spUpdateEmployeeRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EmployeeRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEmployeeRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEmployeeRole]
    @ID uniqueidentifier,
    @EmployeeID uniqueidentifier,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EmployeeRole]
    SET
        [EmployeeID] = @EmployeeID,
        [RoleID] = @RoleID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEmployeeRoles]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEmployeeRole] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the EmployeeRole table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEmployeeRole
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEmployeeRole
ON [${flyway:defaultSchema}].[EmployeeRole]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EmployeeRole]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EmployeeRole] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Employee Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEmployeeRole] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Employee Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employee Roles
-- Item: spDeleteEmployeeRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR EmployeeRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteEmployeeRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteEmployeeRole]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[EmployeeRole]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEmployeeRole] TO [cdp_Integration], [cdp_Developer]
    

/* spDelete Permissions for Employee Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEmployeeRole] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Integration URL Formats */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Integration URL Formats
-- Item: spCreateIntegrationURLFormat
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR IntegrationURLFormat
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateIntegrationURLFormat]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateIntegrationURLFormat]
    @ID uniqueidentifier = NULL,
    @IntegrationID uniqueidentifier,
    @EntityID uniqueidentifier,
    @URLFormat nvarchar(500),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[IntegrationURLFormat]
            (
                [ID],
                [IntegrationID],
                [EntityID],
                [URLFormat],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @IntegrationID,
                @EntityID,
                @URLFormat,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[IntegrationURLFormat]
            (
                [IntegrationID],
                [EntityID],
                [URLFormat],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @IntegrationID,
                @EntityID,
                @URLFormat,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwIntegrationURLFormats] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateIntegrationURLFormat] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Integration URL Formats */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateIntegrationURLFormat] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Integration URL Formats */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Integration URL Formats
-- Item: spUpdateIntegrationURLFormat
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR IntegrationURLFormat
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateIntegrationURLFormat]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateIntegrationURLFormat]
    @ID uniqueidentifier,
    @IntegrationID uniqueidentifier,
    @EntityID uniqueidentifier,
    @URLFormat nvarchar(500),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[IntegrationURLFormat]
    SET
        [IntegrationID] = @IntegrationID,
        [EntityID] = @EntityID,
        [URLFormat] = @URLFormat,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwIntegrationURLFormats]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateIntegrationURLFormat] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the IntegrationURLFormat table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateIntegrationURLFormat
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateIntegrationURLFormat
ON [${flyway:defaultSchema}].[IntegrationURLFormat]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[IntegrationURLFormat]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[IntegrationURLFormat] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Integration URL Formats */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateIntegrationURLFormat] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Integration URL Formats */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Integration URL Formats
-- Item: spDeleteIntegrationURLFormat
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR IntegrationURLFormat
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteIntegrationURLFormat]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteIntegrationURLFormat]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[IntegrationURLFormat]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteIntegrationURLFormat] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Integration URL Formats */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteIntegrationURLFormat] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Employee Skills */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employee Skills
-- Item: spCreateEmployeeSkill
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EmployeeSkill
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEmployeeSkill]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEmployeeSkill]
    @ID uniqueidentifier = NULL,
    @EmployeeID uniqueidentifier,
    @SkillID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EmployeeSkill]
            (
                [ID],
                [EmployeeID],
                [SkillID],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EmployeeID,
                @SkillID,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EmployeeSkill]
            (
                [EmployeeID],
                [SkillID],
                [__mj_CreatedAt],
                [__mj_UpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EmployeeID,
                @SkillID,
                GETUTCDATE(),
                GETUTCDATE()
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEmployeeSkills] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEmployeeSkill] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Employee Skills */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEmployeeSkill] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Employee Skills */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employee Skills
-- Item: spUpdateEmployeeSkill
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EmployeeSkill
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEmployeeSkill]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEmployeeSkill]
    @ID uniqueidentifier,
    @EmployeeID uniqueidentifier,
    @SkillID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EmployeeSkill]
    SET
        [EmployeeID] = @EmployeeID,
        [SkillID] = @SkillID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEmployeeSkills]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEmployeeSkill] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the EmployeeSkill table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEmployeeSkill
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEmployeeSkill
ON [${flyway:defaultSchema}].[EmployeeSkill]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EmployeeSkill]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EmployeeSkill] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Employee Skills */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEmployeeSkill] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Employee Skills */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Employee Skills
-- Item: spDeleteEmployeeSkill
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR EmployeeSkill
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteEmployeeSkill]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteEmployeeSkill]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[EmployeeSkill]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEmployeeSkill] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Employee Skills */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEmployeeSkill] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Skills */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Skills
-- Item: spCreateSkill
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Skill
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateSkill]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateSkill]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @ParentID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Skill]
            (
                [ID],
                [Name],
                [ParentID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @ParentID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Skill]
            (
                [Name],
                [ParentID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @ParentID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwSkills] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateSkill] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Skills */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateSkill] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Skills */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Skills
-- Item: spUpdateSkill
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Skill
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateSkill]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateSkill]
    @ID uniqueidentifier,
    @Name nvarchar(50),
    @ParentID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Skill]
    SET
        [Name] = @Name,
        [ParentID] = @ParentID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwSkills]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateSkill] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Skill table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateSkill
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateSkill
ON [${flyway:defaultSchema}].[Skill]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Skill]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[Skill] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Skills */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateSkill] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Skills */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Skills
-- Item: spDeleteSkill
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Skill
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteSkill]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteSkill]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[Skill]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteSkill] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Skills */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteSkill] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Integrations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Integrations
-- Item: spCreateIntegration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Integration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateIntegration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateIntegration]
    @Name nvarchar(100),
    @Description nvarchar(255),
    @NavigationBaseURL nvarchar(500),
    @ClassName nvarchar(100),
    @ImportPath nvarchar(100),
    @BatchMaxRequestCount int,
    @BatchRequestWaitTime int,
    @ID uniqueidentifier = NULL
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Integration]
            (
                [ID],
                [Name],
                [Description],
                [NavigationBaseURL],
                [ClassName],
                [ImportPath],
                [BatchMaxRequestCount],
                [BatchRequestWaitTime]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @NavigationBaseURL,
                @ClassName,
                @ImportPath,
                @BatchMaxRequestCount,
                @BatchRequestWaitTime
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Integration]
            (
                [Name],
                [Description],
                [NavigationBaseURL],
                [ClassName],
                [ImportPath],
                [BatchMaxRequestCount],
                [BatchRequestWaitTime]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @NavigationBaseURL,
                @ClassName,
                @ImportPath,
                @BatchMaxRequestCount,
                @BatchRequestWaitTime
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwIntegrations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateIntegration] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Integrations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateIntegration] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Integrations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Integrations
-- Item: spUpdateIntegration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Integration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateIntegration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateIntegration]
    @Name nvarchar(100),
    @Description nvarchar(255),
    @NavigationBaseURL nvarchar(500),
    @ClassName nvarchar(100),
    @ImportPath nvarchar(100),
    @BatchMaxRequestCount int,
    @BatchRequestWaitTime int,
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Integration]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [NavigationBaseURL] = @NavigationBaseURL,
        [ClassName] = @ClassName,
        [ImportPath] = @ImportPath,
        [BatchMaxRequestCount] = @BatchMaxRequestCount,
        [BatchRequestWaitTime] = @BatchRequestWaitTime
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwIntegrations]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateIntegration] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Integration table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateIntegration
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateIntegration
ON [${flyway:defaultSchema}].[Integration]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Integration]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[Integration] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Integrations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateIntegration] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Integrations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Integrations
-- Item: spDeleteIntegration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Integration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteIntegration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteIntegration]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[Integration]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteIntegration] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Integrations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteIntegration] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Company Integrations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integrations
-- Item: spCreateCompanyIntegration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CompanyIntegration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompanyIntegration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompanyIntegration]
    @ID uniqueidentifier = NULL,
    @CompanyID uniqueidentifier,
    @IntegrationID uniqueidentifier,
    @IsActive bit,
    @AccessToken nvarchar(255),
    @RefreshToken nvarchar(255),
    @TokenExpirationDate datetime,
    @APIKey nvarchar(255),
    @ExternalSystemID nvarchar(100),
    @IsExternalSystemReadOnly bit,
    @ClientID nvarchar(255),
    @ClientSecret nvarchar(255),
    @CustomAttribute1 nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegration]
            (
                [ID],
                [CompanyID],
                [IntegrationID],
                [IsActive],
                [AccessToken],
                [RefreshToken],
                [TokenExpirationDate],
                [APIKey],
                [ExternalSystemID],
                [IsExternalSystemReadOnly],
                [ClientID],
                [ClientSecret],
                [CustomAttribute1]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyID,
                @IntegrationID,
                @IsActive,
                @AccessToken,
                @RefreshToken,
                @TokenExpirationDate,
                @APIKey,
                @ExternalSystemID,
                @IsExternalSystemReadOnly,
                @ClientID,
                @ClientSecret,
                @CustomAttribute1
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegration]
            (
                [CompanyID],
                [IntegrationID],
                [IsActive],
                [AccessToken],
                [RefreshToken],
                [TokenExpirationDate],
                [APIKey],
                [ExternalSystemID],
                [IsExternalSystemReadOnly],
                [ClientID],
                [ClientSecret],
                [CustomAttribute1]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyID,
                @IntegrationID,
                @IsActive,
                @AccessToken,
                @RefreshToken,
                @TokenExpirationDate,
                @APIKey,
                @ExternalSystemID,
                @IsExternalSystemReadOnly,
                @ClientID,
                @ClientSecret,
                @CustomAttribute1
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanyIntegrations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegration] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Company Integrations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegration] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Company Integrations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integrations
-- Item: spUpdateCompanyIntegration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR CompanyIntegration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateCompanyIntegration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateCompanyIntegration]
    @ID uniqueidentifier,
    @CompanyID uniqueidentifier,
    @IntegrationID uniqueidentifier,
    @IsActive bit,
    @AccessToken nvarchar(255),
    @RefreshToken nvarchar(255),
    @TokenExpirationDate datetime,
    @APIKey nvarchar(255),
    @ExternalSystemID nvarchar(100),
    @IsExternalSystemReadOnly bit,
    @ClientID nvarchar(255),
    @ClientSecret nvarchar(255),
    @CustomAttribute1 nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegration]
    SET
        [CompanyID] = @CompanyID,
        [IntegrationID] = @IntegrationID,
        [IsActive] = @IsActive,
        [AccessToken] = @AccessToken,
        [RefreshToken] = @RefreshToken,
        [TokenExpirationDate] = @TokenExpirationDate,
        [APIKey] = @APIKey,
        [ExternalSystemID] = @ExternalSystemID,
        [IsExternalSystemReadOnly] = @IsExternalSystemReadOnly,
        [ClientID] = @ClientID,
        [ClientSecret] = @ClientSecret,
        [CustomAttribute1] = @CustomAttribute1
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwCompanyIntegrations]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegration] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the CompanyIntegration table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateCompanyIntegration
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateCompanyIntegration
ON [${flyway:defaultSchema}].[CompanyIntegration]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegration]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[CompanyIntegration] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Company Integrations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegration] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Company Integrations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integrations
-- Item: spDeleteCompanyIntegration
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR CompanyIntegration
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteCompanyIntegration]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteCompanyIntegration]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[CompanyIntegration]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegration] TO [cdp_Integration], [cdp_Developer]
    

/* spDelete Permissions for Company Integrations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegration] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for User Record Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Record Logs
-- Item: spCreateUserRecordLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserRecordLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserRecordLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserRecordLog]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @EarliestAt datetime,
    @LatestAt datetime,
    @TotalCount int
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserRecordLog]
            (
                [ID],
                [UserID],
                [EntityID],
                [RecordID],
                [EarliestAt],
                [LatestAt],
                [TotalCount]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @EntityID,
                @RecordID,
                @EarliestAt,
                @LatestAt,
                @TotalCount
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserRecordLog]
            (
                [UserID],
                [EntityID],
                [RecordID],
                [EarliestAt],
                [LatestAt],
                [TotalCount]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @EntityID,
                @RecordID,
                @EarliestAt,
                @LatestAt,
                @TotalCount
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserRecordLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserRecordLog] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for User Record Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserRecordLog] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for User Record Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Record Logs
-- Item: spUpdateUserRecordLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR UserRecordLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateUserRecordLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateUserRecordLog]
    @ID uniqueidentifier,
    @UserID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @EarliestAt datetime,
    @LatestAt datetime,
    @TotalCount int
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserRecordLog]
    SET
        [UserID] = @UserID,
        [EntityID] = @EntityID,
        [RecordID] = @RecordID,
        [EarliestAt] = @EarliestAt,
        [LatestAt] = @LatestAt,
        [TotalCount] = @TotalCount
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwUserRecordLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserRecordLog] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the UserRecordLog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateUserRecordLog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateUserRecordLog
ON [${flyway:defaultSchema}].[UserRecordLog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserRecordLog]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[UserRecordLog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for User Record Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserRecordLog] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for User Record Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Record Logs
-- Item: spDeleteUserRecordLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR UserRecordLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteUserRecordLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteUserRecordLog]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[UserRecordLog]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserRecordLog] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for User Record Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserRecordLog] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Company Integration Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Runs
-- Item: spCreateCompanyIntegrationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CompanyIntegrationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompanyIntegrationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompanyIntegrationRun]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationID uniqueidentifier,
    @RunByUserID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @TotalRecords int,
    @Comments nvarchar(MAX),
    @Status nvarchar(20),
    @ErrorLog nvarchar(MAX),
    @ConfigData nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRun]
            (
                [ID],
                [CompanyIntegrationID],
                [RunByUserID],
                [StartedAt],
                [EndedAt],
                [TotalRecords],
                [Comments],
                [Status],
                [ErrorLog],
                [ConfigData]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationID,
                @RunByUserID,
                @StartedAt,
                @EndedAt,
                @TotalRecords,
                @Comments,
                @Status,
                @ErrorLog,
                @ConfigData
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRun]
            (
                [CompanyIntegrationID],
                [RunByUserID],
                [StartedAt],
                [EndedAt],
                [TotalRecords],
                [Comments],
                [Status],
                [ErrorLog],
                [ConfigData]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationID,
                @RunByUserID,
                @StartedAt,
                @EndedAt,
                @TotalRecords,
                @Comments,
                @Status,
                @ErrorLog,
                @ConfigData
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanyIntegrationRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Company Integration Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRun] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Company Integration Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Runs
-- Item: spUpdateCompanyIntegrationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR CompanyIntegrationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRun]
    @ID uniqueidentifier,
    @CompanyIntegrationID uniqueidentifier,
    @RunByUserID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @TotalRecords int,
    @Comments nvarchar(MAX),
    @Status nvarchar(20),
    @ErrorLog nvarchar(MAX),
    @ConfigData nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegrationRun]
    SET
        [CompanyIntegrationID] = @CompanyIntegrationID,
        [RunByUserID] = @RunByUserID,
        [StartedAt] = @StartedAt,
        [EndedAt] = @EndedAt,
        [TotalRecords] = @TotalRecords,
        [Comments] = @Comments,
        [Status] = @Status,
        [ErrorLog] = @ErrorLog,
        [ConfigData] = @ConfigData
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwCompanyIntegrationRuns]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRun] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the CompanyIntegrationRun table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateCompanyIntegrationRun
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateCompanyIntegrationRun
ON [${flyway:defaultSchema}].[CompanyIntegrationRun]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegrationRun]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[CompanyIntegrationRun] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Company Integration Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRun] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Company Integration Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Runs
-- Item: spDeleteCompanyIntegrationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR CompanyIntegrationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRun]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[CompanyIntegrationRun]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRun] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Company Integration Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRun] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Company Integration Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Run Details
-- Item: spCreateCompanyIntegrationRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CompanyIntegrationRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunDetail]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationRunID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @Action nchar(20),
    @ExecutedAt datetime,
    @IsSuccess bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRunDetail]
            (
                [ID],
                [CompanyIntegrationRunID],
                [EntityID],
                [RecordID],
                [Action],
                [ExecutedAt],
                [IsSuccess]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationRunID,
                @EntityID,
                @RecordID,
                @Action,
                @ExecutedAt,
                @IsSuccess
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRunDetail]
            (
                [CompanyIntegrationRunID],
                [EntityID],
                [RecordID],
                [Action],
                [ExecutedAt],
                [IsSuccess]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationRunID,
                @EntityID,
                @RecordID,
                @Action,
                @ExecutedAt,
                @IsSuccess
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanyIntegrationRunDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunDetail] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Company Integration Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Company Integration Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Run Details
-- Item: spUpdateCompanyIntegrationRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR CompanyIntegrationRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRunDetail]
    @ID uniqueidentifier,
    @CompanyIntegrationRunID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @Action nchar(20),
    @ExecutedAt datetime,
    @IsSuccess bit
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegrationRunDetail]
    SET
        [CompanyIntegrationRunID] = @CompanyIntegrationRunID,
        [EntityID] = @EntityID,
        [RecordID] = @RecordID,
        [Action] = @Action,
        [ExecutedAt] = @ExecutedAt,
        [IsSuccess] = @IsSuccess
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwCompanyIntegrationRunDetails]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRunDetail] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the CompanyIntegrationRunDetail table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateCompanyIntegrationRunDetail
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateCompanyIntegrationRunDetail
ON [${flyway:defaultSchema}].[CompanyIntegrationRunDetail]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegrationRunDetail]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[CompanyIntegrationRunDetail] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Company Integration Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Company Integration Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Run Details
-- Item: spDeleteCompanyIntegrationRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR CompanyIntegrationRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRunDetail]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[CompanyIntegrationRunDetail]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRunDetail] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Company Integration Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Error Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Error Logs
-- Item: spCreateErrorLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ErrorLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateErrorLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateErrorLog]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationRunID uniqueidentifier,
    @CompanyIntegrationRunDetailID uniqueidentifier,
    @Code nchar(20),
    @Message nvarchar(MAX),
    @CreatedBy nvarchar(50),
    @Status nvarchar(10),
    @Category nvarchar(20),
    @Details nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ErrorLog]
            (
                [ID],
                [CompanyIntegrationRunID],
                [CompanyIntegrationRunDetailID],
                [Code],
                [Message],
                [CreatedBy],
                [Status],
                [Category],
                [Details]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationRunID,
                @CompanyIntegrationRunDetailID,
                @Code,
                @Message,
                @CreatedBy,
                @Status,
                @Category,
                @Details
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ErrorLog]
            (
                [CompanyIntegrationRunID],
                [CompanyIntegrationRunDetailID],
                [Code],
                [Message],
                [CreatedBy],
                [Status],
                [Category],
                [Details]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationRunID,
                @CompanyIntegrationRunDetailID,
                @Code,
                @Message,
                @CreatedBy,
                @Status,
                @Category,
                @Details
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwErrorLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateErrorLog] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Error Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateErrorLog] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Error Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Error Logs
-- Item: spUpdateErrorLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ErrorLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateErrorLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateErrorLog]
    @ID uniqueidentifier,
    @CompanyIntegrationRunID uniqueidentifier,
    @CompanyIntegrationRunDetailID uniqueidentifier,
    @Code nchar(20),
    @Message nvarchar(MAX),
    @CreatedBy nvarchar(50),
    @Status nvarchar(10),
    @Category nvarchar(20),
    @Details nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ErrorLog]
    SET
        [CompanyIntegrationRunID] = @CompanyIntegrationRunID,
        [CompanyIntegrationRunDetailID] = @CompanyIntegrationRunDetailID,
        [Code] = @Code,
        [Message] = @Message,
        [CreatedBy] = @CreatedBy,
        [Status] = @Status,
        [Category] = @Category,
        [Details] = @Details
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwErrorLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateErrorLog] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the ErrorLog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateErrorLog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateErrorLog
ON [${flyway:defaultSchema}].[ErrorLog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ErrorLog]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ErrorLog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Error Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateErrorLog] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Error Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Error Logs
-- Item: spDeleteErrorLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ErrorLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteErrorLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteErrorLog]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ErrorLog]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteErrorLog] TO [cdp_Integration], [cdp_Developer]
    

/* spDelete Permissions for Error Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteErrorLog] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for User View Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Run Details
-- Item: spCreateUserViewRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserViewRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserViewRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserViewRunDetail]
    @ID uniqueidentifier = NULL,
    @UserViewRunID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserViewRunDetail]
            (
                [ID],
                [UserViewRunID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserViewRunID,
                @RecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserViewRunDetail]
            (
                [UserViewRunID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserViewRunID,
                @RecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserViewRunDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewRunDetail] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for User View Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for User View Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Run Details
-- Item: spUpdateUserViewRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR UserViewRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateUserViewRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateUserViewRunDetail]
    @ID uniqueidentifier,
    @UserViewRunID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserViewRunDetail]
    SET
        [UserViewRunID] = @UserViewRunID,
        [RecordID] = @RecordID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwUserViewRunDetails]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserViewRunDetail] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the UserViewRunDetail table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateUserViewRunDetail
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateUserViewRunDetail
ON [${flyway:defaultSchema}].[UserViewRunDetail]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserViewRunDetail]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[UserViewRunDetail] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for User View Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserViewRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for User View Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Run Details
-- Item: spDeleteUserViewRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR UserViewRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteUserViewRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteUserViewRunDetail]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[UserViewRunDetail]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserViewRunDetail] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for User View Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserViewRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Company Integration Run API Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Run API Logs
-- Item: spCreateCompanyIntegrationRunAPILog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CompanyIntegrationRunAPILog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunAPILog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunAPILog]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationRunID uniqueidentifier,
    @ExecutedAt datetime,
    @IsSuccess bit,
    @RequestMethod nvarchar(12),
    @URL nvarchar(MAX),
    @Parameters nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRunAPILog]
            (
                [ID],
                [CompanyIntegrationRunID],
                [ExecutedAt],
                [IsSuccess],
                [RequestMethod],
                [URL],
                [Parameters]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationRunID,
                @ExecutedAt,
                @IsSuccess,
                @RequestMethod,
                @URL,
                @Parameters
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRunAPILog]
            (
                [CompanyIntegrationRunID],
                [ExecutedAt],
                [IsSuccess],
                [RequestMethod],
                [URL],
                [Parameters]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationRunID,
                @ExecutedAt,
                @IsSuccess,
                @RequestMethod,
                @URL,
                @Parameters
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanyIntegrationRunAPILogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunAPILog] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Company Integration Run API Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRunAPILog] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Company Integration Run API Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Run API Logs
-- Item: spUpdateCompanyIntegrationRunAPILog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR CompanyIntegrationRunAPILog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRunAPILog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRunAPILog]
    @ID uniqueidentifier,
    @CompanyIntegrationRunID uniqueidentifier,
    @ExecutedAt datetime,
    @IsSuccess bit,
    @RequestMethod nvarchar(12),
    @URL nvarchar(MAX),
    @Parameters nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegrationRunAPILog]
    SET
        [CompanyIntegrationRunID] = @CompanyIntegrationRunID,
        [ExecutedAt] = @ExecutedAt,
        [IsSuccess] = @IsSuccess,
        [RequestMethod] = @RequestMethod,
        [URL] = @URL,
        [Parameters] = @Parameters
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwCompanyIntegrationRunAPILogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRunAPILog] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the CompanyIntegrationRunAPILog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateCompanyIntegrationRunAPILog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateCompanyIntegrationRunAPILog
ON [${flyway:defaultSchema}].[CompanyIntegrationRunAPILog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegrationRunAPILog]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[CompanyIntegrationRunAPILog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Company Integration Run API Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRunAPILog] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Company Integration Run API Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Run API Logs
-- Item: spDeleteCompanyIntegrationRunAPILog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR CompanyIntegrationRunAPILog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRunAPILog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRunAPILog]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[CompanyIntegrationRunAPILog]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRunAPILog] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Company Integration Run API Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRunAPILog] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for User View Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Runs
-- Item: spCreateUserViewRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserViewRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserViewRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserViewRun]
    @ID uniqueidentifier = NULL,
    @UserViewID uniqueidentifier,
    @RunAt datetime,
    @RunByUserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserViewRun]
            (
                [ID],
                [UserViewID],
                [RunAt],
                [RunByUserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserViewID,
                @RunAt,
                @RunByUserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserViewRun]
            (
                [UserViewID],
                [RunAt],
                [RunByUserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserViewID,
                @RunAt,
                @RunByUserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserViewRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewRun] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for User View Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserViewRun] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spUpdate SQL for User View Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Runs
-- Item: spUpdateUserViewRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR UserViewRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateUserViewRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateUserViewRun]
    @ID uniqueidentifier,
    @UserViewID uniqueidentifier,
    @RunAt datetime,
    @RunByUserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserViewRun]
    SET
        [UserViewID] = @UserViewID,
        [RunAt] = @RunAt,
        [RunByUserID] = @RunByUserID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwUserViewRuns]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserViewRun] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the UserViewRun table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateUserViewRun
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateUserViewRun
ON [${flyway:defaultSchema}].[UserViewRun]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserViewRun]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[UserViewRun] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for User View Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserViewRun] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for User View Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User View Runs
-- Item: spDeleteUserViewRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR UserViewRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteUserViewRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteUserViewRun]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[UserViewRun]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserViewRun] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for User View Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserViewRun] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Workflow Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workflow Runs
-- Item: spCreateWorkflowRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR WorkflowRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateWorkflowRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateWorkflowRun]
    @ID uniqueidentifier = NULL,
    @WorkflowID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(500),
    @StartedAt datetime,
    @EndedAt datetime,
    @Status nchar(10),
    @Results nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[WorkflowRun]
            (
                [ID],
                [WorkflowID],
                [ExternalSystemRecordID],
                [StartedAt],
                [EndedAt],
                [Status],
                [Results]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @WorkflowID,
                @ExternalSystemRecordID,
                @StartedAt,
                @EndedAt,
                @Status,
                @Results
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[WorkflowRun]
            (
                [WorkflowID],
                [ExternalSystemRecordID],
                [StartedAt],
                [EndedAt],
                [Status],
                [Results]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @WorkflowID,
                @ExternalSystemRecordID,
                @StartedAt,
                @EndedAt,
                @Status,
                @Results
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwWorkflowRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkflowRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Workflow Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkflowRun] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Workflow Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workflow Runs
-- Item: spUpdateWorkflowRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR WorkflowRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateWorkflowRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateWorkflowRun]
    @ID uniqueidentifier,
    @WorkflowID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(500),
    @StartedAt datetime,
    @EndedAt datetime,
    @Status nchar(10),
    @Results nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[WorkflowRun]
    SET
        [WorkflowID] = @WorkflowID,
        [ExternalSystemRecordID] = @ExternalSystemRecordID,
        [StartedAt] = @StartedAt,
        [EndedAt] = @EndedAt,
        [Status] = @Status,
        [Results] = @Results
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwWorkflowRuns]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateWorkflowRun] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the WorkflowRun table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateWorkflowRun
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateWorkflowRun
ON [${flyway:defaultSchema}].[WorkflowRun]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[WorkflowRun]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[WorkflowRun] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Workflow Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateWorkflowRun] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Workflow Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workflow Runs
-- Item: spDeleteWorkflowRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR WorkflowRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteWorkflowRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteWorkflowRun]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[WorkflowRun]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteWorkflowRun] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Workflow Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteWorkflowRun] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Workflows */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workflows
-- Item: spCreateWorkflow
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Workflow
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateWorkflow]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateWorkflow]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @WorkflowEngineID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(100),
    @AutoRunEnabled bit,
    @AutoRunIntervalUnits nvarchar(20),
    @AutoRunInterval int,
    @SubclassName nvarchar(200)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Workflow]
            (
                [ID],
                [Name],
                [Description],
                [WorkflowEngineID],
                [ExternalSystemRecordID],
                [AutoRunEnabled],
                [AutoRunIntervalUnits],
                [AutoRunInterval],
                [SubclassName]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @WorkflowEngineID,
                @ExternalSystemRecordID,
                @AutoRunEnabled,
                @AutoRunIntervalUnits,
                @AutoRunInterval,
                @SubclassName
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Workflow]
            (
                [Name],
                [Description],
                [WorkflowEngineID],
                [ExternalSystemRecordID],
                [AutoRunEnabled],
                [AutoRunIntervalUnits],
                [AutoRunInterval],
                [SubclassName]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @WorkflowEngineID,
                @ExternalSystemRecordID,
                @AutoRunEnabled,
                @AutoRunIntervalUnits,
                @AutoRunInterval,
                @SubclassName
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwWorkflows] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkflow] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Workflows */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkflow] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Workflows */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workflows
-- Item: spUpdateWorkflow
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Workflow
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateWorkflow]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateWorkflow]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @WorkflowEngineID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(100),
    @AutoRunEnabled bit,
    @AutoRunIntervalUnits nvarchar(20),
    @AutoRunInterval int,
    @SubclassName nvarchar(200)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Workflow]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [WorkflowEngineID] = @WorkflowEngineID,
        [ExternalSystemRecordID] = @ExternalSystemRecordID,
        [AutoRunEnabled] = @AutoRunEnabled,
        [AutoRunIntervalUnits] = @AutoRunIntervalUnits,
        [AutoRunInterval] = @AutoRunInterval,
        [SubclassName] = @SubclassName
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwWorkflows]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateWorkflow] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Workflow table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateWorkflow
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateWorkflow
ON [${flyway:defaultSchema}].[Workflow]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Workflow]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[Workflow] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Workflows */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateWorkflow] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Workflows */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workflows
-- Item: spDeleteWorkflow
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Workflow
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteWorkflow]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteWorkflow]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[Workflow]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteWorkflow] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Workflows */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteWorkflow] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Workflow Engines */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workflow Engines
-- Item: spCreateWorkflowEngine
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR WorkflowEngine
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateWorkflowEngine]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateWorkflowEngine]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @DriverPath nvarchar(500),
    @DriverClass nvarchar(100)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[WorkflowEngine]
            (
                [ID],
                [Name],
                [Description],
                [DriverPath],
                [DriverClass]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @DriverPath,
                @DriverClass
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[WorkflowEngine]
            (
                [Name],
                [Description],
                [DriverPath],
                [DriverClass]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @DriverPath,
                @DriverClass
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwWorkflowEngines] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkflowEngine] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Workflow Engines */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateWorkflowEngine] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Workflow Engines */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workflow Engines
-- Item: spUpdateWorkflowEngine
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR WorkflowEngine
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateWorkflowEngine]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateWorkflowEngine]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @DriverPath nvarchar(500),
    @DriverClass nvarchar(100)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[WorkflowEngine]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [DriverPath] = @DriverPath,
        [DriverClass] = @DriverClass
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwWorkflowEngines]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateWorkflowEngine] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the WorkflowEngine table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateWorkflowEngine
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateWorkflowEngine
ON [${flyway:defaultSchema}].[WorkflowEngine]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[WorkflowEngine]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[WorkflowEngine] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Workflow Engines */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateWorkflowEngine] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Workflow Engines */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Workflow Engines
-- Item: spDeleteWorkflowEngine
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR WorkflowEngine
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteWorkflowEngine]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteWorkflowEngine]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[WorkflowEngine]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteWorkflowEngine] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Workflow Engines */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteWorkflowEngine] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Record Changes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Changes
-- Item: spCreateRecordChange
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecordChange
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecordChange]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecordChange]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(750),
    @UserID uniqueidentifier,
    @Type nvarchar(20),
    @Source nvarchar(20),
    @ChangedAt datetimeoffset,
    @ChangesJSON nvarchar(MAX),
    @ChangesDescription nvarchar(MAX),
    @FullRecordJSON nvarchar(MAX),
    @Status nvarchar(50),
    @ErrorLog nvarchar(MAX),
    @ReplayRunID uniqueidentifier,
    @IntegrationID uniqueidentifier,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecordChange]
            (
                [ID],
                [EntityID],
                [RecordID],
                [UserID],
                [Type],
                [Source],
                [ChangedAt],
                [ChangesJSON],
                [ChangesDescription],
                [FullRecordJSON],
                [Status],
                [ErrorLog],
                [ReplayRunID],
                [IntegrationID],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @RecordID,
                @UserID,
                @Type,
                @Source,
                @ChangedAt,
                @ChangesJSON,
                @ChangesDescription,
                @FullRecordJSON,
                @Status,
                @ErrorLog,
                @ReplayRunID,
                @IntegrationID,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecordChange]
            (
                [EntityID],
                [RecordID],
                [UserID],
                [Type],
                [Source],
                [ChangedAt],
                [ChangesJSON],
                [ChangesDescription],
                [FullRecordJSON],
                [Status],
                [ErrorLog],
                [ReplayRunID],
                [IntegrationID],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @RecordID,
                @UserID,
                @Type,
                @Source,
                @ChangedAt,
                @ChangesJSON,
                @ChangesDescription,
                @FullRecordJSON,
                @Status,
                @ErrorLog,
                @ReplayRunID,
                @IntegrationID,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecordChanges] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordChange] TO [cdp_Developer], [cdp_UI], [cdp_Integration]
    

/* spCreate Permissions for Record Changes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordChange] TO [cdp_Developer], [cdp_UI], [cdp_Integration]



/* spUpdate SQL for Record Changes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Changes
-- Item: spUpdateRecordChange
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR RecordChange
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateRecordChange]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateRecordChange]
    @ID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(750),
    @UserID uniqueidentifier,
    @Type nvarchar(20),
    @Source nvarchar(20),
    @ChangedAt datetimeoffset,
    @ChangesJSON nvarchar(MAX),
    @ChangesDescription nvarchar(MAX),
    @FullRecordJSON nvarchar(MAX),
    @Status nvarchar(50),
    @ErrorLog nvarchar(MAX),
    @ReplayRunID uniqueidentifier,
    @IntegrationID uniqueidentifier,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecordChange]
    SET
        [EntityID] = @EntityID,
        [RecordID] = @RecordID,
        [UserID] = @UserID,
        [Type] = @Type,
        [Source] = @Source,
        [ChangedAt] = @ChangedAt,
        [ChangesJSON] = @ChangesJSON,
        [ChangesDescription] = @ChangesDescription,
        [FullRecordJSON] = @FullRecordJSON,
        [Status] = @Status,
        [ErrorLog] = @ErrorLog,
        [ReplayRunID] = @ReplayRunID,
        [IntegrationID] = @IntegrationID,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwRecordChanges]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordChange] TO [cdp_Developer]
GO

        

/* spUpdate Permissions for Record Changes */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordChange] TO [cdp_Developer]



/* spDelete SQL for Record Changes */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Changes
-- Item: spDeleteRecordChange
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR RecordChange
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteRecordChange]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteRecordChange]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[RecordChange]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for Record Changes */




/* spCreate SQL for User Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Roles
-- Item: spCreateUserRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR UserRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateUserRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateUserRole]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[UserRole]
            (
                [ID],
                [UserID],
                [RoleID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @RoleID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[UserRole]
            (
                [UserID],
                [RoleID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @RoleID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwUserRoles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserRole] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for User Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateUserRole] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for User Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Roles
-- Item: spUpdateUserRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR UserRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateUserRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateUserRole]
    @ID uniqueidentifier,
    @UserID uniqueidentifier,
    @RoleID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserRole]
    SET
        [UserID] = @UserID,
        [RoleID] = @RoleID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwUserRoles]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserRole] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the UserRole table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateUserRole
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateUserRole
ON [${flyway:defaultSchema}].[UserRole]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[UserRole]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[UserRole] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for User Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateUserRole] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for User Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: User Roles
-- Item: spDeleteUserRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR UserRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteUserRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteUserRole]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[UserRole]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserRole] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for User Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteUserRole] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Row Level Security Filters */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Row Level Security Filters
-- Item: spCreateRowLevelSecurityFilter
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RowLevelSecurityFilter
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRowLevelSecurityFilter]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRowLevelSecurityFilter]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @FilterText nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RowLevelSecurityFilter]
            (
                [ID],
                [Name],
                [Description],
                [FilterText]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @FilterText
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RowLevelSecurityFilter]
            (
                [Name],
                [Description],
                [FilterText]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @FilterText
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRowLevelSecurityFilters] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
    

/* spCreate Permissions for Row Level Security Filters */




/* spUpdate SQL for Row Level Security Filters */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Row Level Security Filters
-- Item: spUpdateRowLevelSecurityFilter
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR RowLevelSecurityFilter
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateRowLevelSecurityFilter]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateRowLevelSecurityFilter]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @Description nvarchar(MAX),
    @FilterText nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RowLevelSecurityFilter]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [FilterText] = @FilterText
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwRowLevelSecurityFilters]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the RowLevelSecurityFilter table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateRowLevelSecurityFilter
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateRowLevelSecurityFilter
ON [${flyway:defaultSchema}].[RowLevelSecurityFilter]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RowLevelSecurityFilter]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[RowLevelSecurityFilter] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Row Level Security Filters */




/* spDelete SQL for Row Level Security Filters */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Row Level Security Filters
-- Item: spDeleteRowLevelSecurityFilter
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR RowLevelSecurityFilter
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteRowLevelSecurityFilter]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteRowLevelSecurityFilter]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[RowLevelSecurityFilter]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for Row Level Security Filters */




/* spCreate SQL for Audit Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Logs
-- Item: spCreateAuditLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AuditLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAuditLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAuditLog]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @AuditLogTypeID uniqueidentifier,
    @AuthorizationID uniqueidentifier,
    @Status nvarchar(50),
    @Description nvarchar(MAX),
    @Details nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AuditLog]
            (
                [ID],
                [UserID],
                [AuditLogTypeID],
                [AuthorizationID],
                [Status],
                [Description],
                [Details],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @AuditLogTypeID,
                @AuthorizationID,
                @Status,
                @Description,
                @Details,
                @EntityID,
                @RecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AuditLog]
            (
                [UserID],
                [AuditLogTypeID],
                [AuthorizationID],
                [Status],
                [Description],
                [Details],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @AuditLogTypeID,
                @AuthorizationID,
                @Status,
                @Description,
                @Details,
                @EntityID,
                @RecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAuditLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuditLog] TO [cdp_UI], [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Audit Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuditLog] TO [cdp_UI], [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Audit Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Logs
-- Item: spUpdateAuditLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AuditLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAuditLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAuditLog]
    @ID uniqueidentifier,
    @UserID uniqueidentifier,
    @AuditLogTypeID uniqueidentifier,
    @AuthorizationID uniqueidentifier,
    @Status nvarchar(50),
    @Description nvarchar(MAX),
    @Details nvarchar(MAX),
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AuditLog]
    SET
        [UserID] = @UserID,
        [AuditLogTypeID] = @AuditLogTypeID,
        [AuthorizationID] = @AuthorizationID,
        [Status] = @Status,
        [Description] = @Description,
        [Details] = @Details,
        [EntityID] = @EntityID,
        [RecordID] = @RecordID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAuditLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuditLog] TO [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the AuditLog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAuditLog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAuditLog
ON [${flyway:defaultSchema}].[AuditLog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AuditLog]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[AuditLog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Audit Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuditLog] TO [cdp_Developer]



/* spDelete SQL for Audit Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Logs
-- Item: spDeleteAuditLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AuditLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteAuditLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteAuditLog]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[AuditLog]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAuditLog] TO [cdp_Developer]
    

/* spDelete Permissions for Audit Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAuditLog] TO [cdp_Developer]



/* spCreate SQL for Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorizations
-- Item: spCreateAuthorization
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Authorization
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAuthorization]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAuthorization]
    @ID uniqueidentifier = NULL,
    @ParentID uniqueidentifier,
    @Name nvarchar(100),
    @IsActive bit,
    @UseAuditLog bit,
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Authorization]
            (
                [ID],
                [ParentID],
                [Name],
                [IsActive],
                [UseAuditLog],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @ParentID,
                @Name,
                @IsActive,
                @UseAuditLog,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Authorization]
            (
                [ParentID],
                [Name],
                [IsActive],
                [UseAuditLog],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ParentID,
                @Name,
                @IsActive,
                @UseAuditLog,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAuthorizations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuthorization] TO [cdp_Developer]
    

/* spCreate Permissions for Authorizations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuthorization] TO [cdp_Developer]



/* spUpdate SQL for Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorizations
-- Item: spUpdateAuthorization
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Authorization
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAuthorization]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAuthorization]
    @ID uniqueidentifier,
    @ParentID uniqueidentifier,
    @Name nvarchar(100),
    @IsActive bit,
    @UseAuditLog bit,
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Authorization]
    SET
        [ParentID] = @ParentID,
        [Name] = @Name,
        [IsActive] = @IsActive,
        [UseAuditLog] = @UseAuditLog,
        [Description] = @Description
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAuthorizations]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuthorization] TO [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Authorization table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAuthorization
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAuthorization
ON [${flyway:defaultSchema}].[Authorization]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Authorization]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[Authorization] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Authorizations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuthorization] TO [cdp_Developer]



/* spDelete SQL for Authorizations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorizations
-- Item: spDeleteAuthorization
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Authorization
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteAuthorization]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteAuthorization]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[Authorization]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for Authorizations */




/* spCreate SQL for Authorization Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorization Roles
-- Item: spCreateAuthorizationRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AuthorizationRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAuthorizationRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAuthorizationRole]
    @ID uniqueidentifier = NULL,
    @AuthorizationID uniqueidentifier,
    @RoleID uniqueidentifier,
    @Type nchar(10)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AuthorizationRole]
            (
                [ID],
                [AuthorizationID],
                [RoleID],
                [Type]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @AuthorizationID,
                @RoleID,
                @Type
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AuthorizationRole]
            (
                [AuthorizationID],
                [RoleID],
                [Type]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @AuthorizationID,
                @RoleID,
                @Type
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAuthorizationRoles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuthorizationRole] TO [cdp_Developer]
    

/* spCreate Permissions for Authorization Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuthorizationRole] TO [cdp_Developer]



/* spUpdate SQL for Authorization Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorization Roles
-- Item: spUpdateAuthorizationRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AuthorizationRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAuthorizationRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAuthorizationRole]
    @ID uniqueidentifier,
    @AuthorizationID uniqueidentifier,
    @RoleID uniqueidentifier,
    @Type nchar(10)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AuthorizationRole]
    SET
        [AuthorizationID] = @AuthorizationID,
        [RoleID] = @RoleID,
        [Type] = @Type
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAuthorizationRoles]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuthorizationRole] TO [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the AuthorizationRole table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAuthorizationRole
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAuthorizationRole
ON [${flyway:defaultSchema}].[AuthorizationRole]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AuthorizationRole]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[AuthorizationRole] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Authorization Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuthorizationRole] TO [cdp_Developer]



/* spDelete SQL for Authorization Roles */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Authorization Roles
-- Item: spDeleteAuthorizationRole
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AuthorizationRole
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteAuthorizationRole]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteAuthorizationRole]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[AuthorizationRole]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAuthorizationRole] TO [cdp_Developer]
    

/* spDelete Permissions for Authorization Roles */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAuthorizationRole] TO [cdp_Developer]



/* spCreate SQL for Audit Log Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Log Types
-- Item: spCreateAuditLogType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR AuditLogType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateAuditLogType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateAuditLogType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @AuthorizationID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[AuditLogType]
            (
                [ID],
                [Name],
                [Description],
                [ParentID],
                [AuthorizationID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @ParentID,
                @AuthorizationID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[AuditLogType]
            (
                [Name],
                [Description],
                [ParentID],
                [AuthorizationID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @ParentID,
                @AuthorizationID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwAuditLogTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuditLogType] TO [cdp_Developer]
    

/* spCreate Permissions for Audit Log Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateAuditLogType] TO [cdp_Developer]



/* spUpdate SQL for Audit Log Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Log Types
-- Item: spUpdateAuditLogType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR AuditLogType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateAuditLogType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateAuditLogType]
    @ID uniqueidentifier,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @ParentID uniqueidentifier,
    @AuthorizationID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AuditLogType]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [ParentID] = @ParentID,
        [AuthorizationID] = @AuthorizationID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwAuditLogTypes]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuditLogType] TO [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the AuditLogType table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateAuditLogType
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateAuditLogType
ON [${flyway:defaultSchema}].[AuditLogType]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[AuditLogType]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[AuditLogType] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Audit Log Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateAuditLogType] TO [cdp_Developer]



/* spDelete SQL for Audit Log Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Audit Log Types
-- Item: spDeleteAuditLogType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR AuditLogType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteAuditLogType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteAuditLogType]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[AuditLogType]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAuditLogType] TO [cdp_Developer]
    

/* spDelete Permissions for Audit Log Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteAuditLogType] TO [cdp_Developer]



/* spCreate SQL for Entity Field Values */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Field Values
-- Item: spCreateEntityFieldValue
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityFieldValue
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityFieldValue]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityFieldValue]
    @ID uniqueidentifier = NULL,
    @EntityFieldID uniqueidentifier,
    @Sequence int,
    @Value nvarchar(255),
    @Code nvarchar(50),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityFieldValue]
            (
                [ID],
                [EntityFieldID],
                [Sequence],
                [Value],
                [Code],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityFieldID,
                @Sequence,
                @Value,
                @Code,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityFieldValue]
            (
                [EntityFieldID],
                [Sequence],
                [Value],
                [Code],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityFieldID,
                @Sequence,
                @Value,
                @Code,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityFieldValues] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
    

/* spCreate Permissions for Entity Field Values */




/* spUpdate SQL for Entity Field Values */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Field Values
-- Item: spUpdateEntityFieldValue
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EntityFieldValue
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEntityFieldValue]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEntityFieldValue]
    @ID uniqueidentifier,
    @EntityFieldID uniqueidentifier,
    @Sequence int,
    @Value nvarchar(255),
    @Code nvarchar(50),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityFieldValue]
    SET
        [EntityFieldID] = @EntityFieldID,
        [Sequence] = @Sequence,
        [Value] = @Value,
        [Code] = @Code,
        [Description] = @Description
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEntityFieldValues]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the EntityFieldValue table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEntityFieldValue
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEntityFieldValue
ON [${flyway:defaultSchema}].[EntityFieldValue]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityFieldValue]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EntityFieldValue] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Entity Field Values */




/* spDelete SQL for Entity Field Values */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Field Values
-- Item: spDeleteEntityFieldValue
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR EntityFieldValue
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteEntityFieldValue]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteEntityFieldValue]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[EntityFieldValue]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for Entity Field Values */




/* spCreate SQL for Queue Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queue Types
-- Item: spCreateQueueType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR QueueType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueueType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueueType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @DriverClass nvarchar(100),
    @DriverImportPath nvarchar(200),
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[QueueType]
            (
                [ID],
                [Name],
                [Description],
                [DriverClass],
                [DriverImportPath],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @DriverClass,
                @DriverImportPath,
                @IsActive
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[QueueType]
            (
                [Name],
                [Description],
                [DriverClass],
                [DriverImportPath],
                [IsActive]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @DriverClass,
                @DriverImportPath,
                @IsActive
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueueTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueueType] TO [cdp_Developer]
    

/* spCreate Permissions for Queue Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueueType] TO [cdp_Developer]



/* spUpdate SQL for Queue Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queue Types
-- Item: spUpdateQueueType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR QueueType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateQueueType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateQueueType]
    @ID uniqueidentifier,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @DriverClass nvarchar(100),
    @DriverImportPath nvarchar(200),
    @IsActive bit
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[QueueType]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [DriverClass] = @DriverClass,
        [DriverImportPath] = @DriverImportPath,
        [IsActive] = @IsActive
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwQueueTypes]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateQueueType] TO [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the QueueType table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateQueueType
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateQueueType
ON [${flyway:defaultSchema}].[QueueType]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[QueueType]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[QueueType] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Queue Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateQueueType] TO [cdp_Developer]



/* spDelete SQL for Queue Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queue Types
-- Item: spDeleteQueueType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR QueueType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteQueueType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteQueueType]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[QueueType]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteQueueType] TO [cdp_Developer]
    

/* spDelete Permissions for Queue Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteQueueType] TO [cdp_Developer]



/* spCreate SQL for Queues */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queues
-- Item: spCreateQueue
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Queue
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueue]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueue]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @QueueTypeID uniqueidentifier,
    @IsActive bit,
    @ProcessPID int,
    @ProcessPlatform nvarchar(30),
    @ProcessVersion nvarchar(15),
    @ProcessCwd nvarchar(100),
    @ProcessIPAddress nvarchar(50),
    @ProcessMacAddress nvarchar(50),
    @ProcessOSName nvarchar(25),
    @ProcessOSVersion nvarchar(10),
    @ProcessHostName nvarchar(50),
    @ProcessUserID nvarchar(25),
    @ProcessUserName nvarchar(50),
    @LastHeartbeat datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Queue]
            (
                [ID],
                [Name],
                [Description],
                [QueueTypeID],
                [IsActive],
                [ProcessPID],
                [ProcessPlatform],
                [ProcessVersion],
                [ProcessCwd],
                [ProcessIPAddress],
                [ProcessMacAddress],
                [ProcessOSName],
                [ProcessOSVersion],
                [ProcessHostName],
                [ProcessUserID],
                [ProcessUserName],
                [LastHeartbeat]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @QueueTypeID,
                @IsActive,
                @ProcessPID,
                @ProcessPlatform,
                @ProcessVersion,
                @ProcessCwd,
                @ProcessIPAddress,
                @ProcessMacAddress,
                @ProcessOSName,
                @ProcessOSVersion,
                @ProcessHostName,
                @ProcessUserID,
                @ProcessUserName,
                @LastHeartbeat
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Queue]
            (
                [Name],
                [Description],
                [QueueTypeID],
                [IsActive],
                [ProcessPID],
                [ProcessPlatform],
                [ProcessVersion],
                [ProcessCwd],
                [ProcessIPAddress],
                [ProcessMacAddress],
                [ProcessOSName],
                [ProcessOSVersion],
                [ProcessHostName],
                [ProcessUserID],
                [ProcessUserName],
                [LastHeartbeat]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @QueueTypeID,
                @IsActive,
                @ProcessPID,
                @ProcessPlatform,
                @ProcessVersion,
                @ProcessCwd,
                @ProcessIPAddress,
                @ProcessMacAddress,
                @ProcessOSName,
                @ProcessOSVersion,
                @ProcessHostName,
                @ProcessUserID,
                @ProcessUserName,
                @LastHeartbeat
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueues] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueue] TO [cdp_UI]
    

/* spCreate Permissions for Queues */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueue] TO [cdp_UI]



/* spUpdate SQL for Queues */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queues
-- Item: spUpdateQueue
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Queue
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateQueue]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateQueue]
    @ID uniqueidentifier,
    @Name nvarchar(50),
    @Description nvarchar(MAX),
    @QueueTypeID uniqueidentifier,
    @IsActive bit,
    @ProcessPID int,
    @ProcessPlatform nvarchar(30),
    @ProcessVersion nvarchar(15),
    @ProcessCwd nvarchar(100),
    @ProcessIPAddress nvarchar(50),
    @ProcessMacAddress nvarchar(50),
    @ProcessOSName nvarchar(25),
    @ProcessOSVersion nvarchar(10),
    @ProcessHostName nvarchar(50),
    @ProcessUserID nvarchar(25),
    @ProcessUserName nvarchar(50),
    @LastHeartbeat datetime
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Queue]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [QueueTypeID] = @QueueTypeID,
        [IsActive] = @IsActive,
        [ProcessPID] = @ProcessPID,
        [ProcessPlatform] = @ProcessPlatform,
        [ProcessVersion] = @ProcessVersion,
        [ProcessCwd] = @ProcessCwd,
        [ProcessIPAddress] = @ProcessIPAddress,
        [ProcessMacAddress] = @ProcessMacAddress,
        [ProcessOSName] = @ProcessOSName,
        [ProcessOSVersion] = @ProcessOSVersion,
        [ProcessHostName] = @ProcessHostName,
        [ProcessUserID] = @ProcessUserID,
        [ProcessUserName] = @ProcessUserName,
        [LastHeartbeat] = @LastHeartbeat
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwQueues]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Queue table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateQueue
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateQueue
ON [${flyway:defaultSchema}].[Queue]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Queue]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[Queue] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Queues */




/* spDelete SQL for Queues */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queues
-- Item: spDeleteQueue
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Queue
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteQueue]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteQueue]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[Queue]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for Queues */




/* spCreate SQL for Queue Tasks */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queue Tasks
-- Item: spCreateQueueTask
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR QueueTask
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateQueueTask]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateQueueTask]
    @ID uniqueidentifier = NULL,
    @QueueID uniqueidentifier,
    @Status nchar(10),
    @StartedAt datetime,
    @EndedAt datetime,
    @Data nvarchar(MAX),
    @Options nvarchar(MAX),
    @Output nvarchar(MAX),
    @ErrorMessage nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[QueueTask]
            (
                [ID],
                [QueueID],
                [Status],
                [StartedAt],
                [EndedAt],
                [Data],
                [Options],
                [Output],
                [ErrorMessage],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @QueueID,
                @Status,
                @StartedAt,
                @EndedAt,
                @Data,
                @Options,
                @Output,
                @ErrorMessage,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[QueueTask]
            (
                [QueueID],
                [Status],
                [StartedAt],
                [EndedAt],
                [Data],
                [Options],
                [Output],
                [ErrorMessage],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @QueueID,
                @Status,
                @StartedAt,
                @EndedAt,
                @Data,
                @Options,
                @Output,
                @ErrorMessage,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwQueueTasks] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueueTask] TO [cdp_UI]
    

/* spCreate Permissions for Queue Tasks */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateQueueTask] TO [cdp_UI]



/* spUpdate SQL for Queue Tasks */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queue Tasks
-- Item: spUpdateQueueTask
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR QueueTask
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateQueueTask]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateQueueTask]
    @ID uniqueidentifier,
    @QueueID uniqueidentifier,
    @Status nchar(10),
    @StartedAt datetime,
    @EndedAt datetime,
    @Data nvarchar(MAX),
    @Options nvarchar(MAX),
    @Output nvarchar(MAX),
    @ErrorMessage nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[QueueTask]
    SET
        [QueueID] = @QueueID,
        [Status] = @Status,
        [StartedAt] = @StartedAt,
        [EndedAt] = @EndedAt,
        [Data] = @Data,
        [Options] = @Options,
        [Output] = @Output,
        [ErrorMessage] = @ErrorMessage,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwQueueTasks]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the QueueTask table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateQueueTask
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateQueueTask
ON [${flyway:defaultSchema}].[QueueTask]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[QueueTask]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[QueueTask] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Queue Tasks */




/* spDelete SQL for Queue Tasks */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Queue Tasks
-- Item: spDeleteQueueTask
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR QueueTask
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteQueueTask]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteQueueTask]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[QueueTask]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for Queue Tasks */




/* spCreate SQL for Output Trigger Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Output Trigger Types
-- Item: spCreateOutputTriggerType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR OutputTriggerType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateOutputTriggerType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateOutputTriggerType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[OutputTriggerType]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[OutputTriggerType]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwOutputTriggerTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateOutputTriggerType] TO [cdp_UI]
    

/* spCreate Permissions for Output Trigger Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateOutputTriggerType] TO [cdp_UI]



/* spUpdate SQL for Output Trigger Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Output Trigger Types
-- Item: spUpdateOutputTriggerType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR OutputTriggerType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateOutputTriggerType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateOutputTriggerType]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[OutputTriggerType]
    SET
        [Name] = @Name,
        [Description] = @Description
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwOutputTriggerTypes]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateOutputTriggerType] TO [cdp_UI]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the OutputTriggerType table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateOutputTriggerType
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateOutputTriggerType
ON [${flyway:defaultSchema}].[OutputTriggerType]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[OutputTriggerType]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[OutputTriggerType] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Output Trigger Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateOutputTriggerType] TO [cdp_UI]



/* spDelete SQL for Output Trigger Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Output Trigger Types
-- Item: spDeleteOutputTriggerType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR OutputTriggerType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteOutputTriggerType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteOutputTriggerType]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[OutputTriggerType]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteOutputTriggerType] TO [cdp_UI]
    

/* spDelete Permissions for Output Trigger Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteOutputTriggerType] TO [cdp_UI]



/* spCreate SQL for Output Format Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Output Format Types
-- Item: spCreateOutputFormatType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR OutputFormatType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateOutputFormatType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateOutputFormatType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @DisplayFormat nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[OutputFormatType]
            (
                [ID],
                [Name],
                [Description],
                [DisplayFormat]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @DisplayFormat
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[OutputFormatType]
            (
                [Name],
                [Description],
                [DisplayFormat]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @DisplayFormat
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwOutputFormatTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateOutputFormatType] TO [cdp_UI]
    

/* spCreate Permissions for Output Format Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateOutputFormatType] TO [cdp_UI]



/* spUpdate SQL for Output Format Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Output Format Types
-- Item: spUpdateOutputFormatType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR OutputFormatType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateOutputFormatType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateOutputFormatType]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @DisplayFormat nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[OutputFormatType]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [DisplayFormat] = @DisplayFormat
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwOutputFormatTypes]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateOutputFormatType] TO [cdp_UI]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the OutputFormatType table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateOutputFormatType
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateOutputFormatType
ON [${flyway:defaultSchema}].[OutputFormatType]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[OutputFormatType]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[OutputFormatType] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Output Format Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateOutputFormatType] TO [cdp_UI]



/* spDelete SQL for Output Format Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Output Format Types
-- Item: spDeleteOutputFormatType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR OutputFormatType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteOutputFormatType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteOutputFormatType]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[OutputFormatType]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteOutputFormatType] TO [cdp_UI]
    

/* spDelete Permissions for Output Format Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteOutputFormatType] TO [cdp_UI]



/* spCreate SQL for Output Delivery Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Output Delivery Types
-- Item: spCreateOutputDeliveryType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR OutputDeliveryType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateOutputDeliveryType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateOutputDeliveryType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[OutputDeliveryType]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[OutputDeliveryType]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwOutputDeliveryTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateOutputDeliveryType] TO [cdp_UI]
    

/* spCreate Permissions for Output Delivery Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateOutputDeliveryType] TO [cdp_UI]



/* spUpdate SQL for Output Delivery Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Output Delivery Types
-- Item: spUpdateOutputDeliveryType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR OutputDeliveryType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateOutputDeliveryType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateOutputDeliveryType]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[OutputDeliveryType]
    SET
        [Name] = @Name,
        [Description] = @Description
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwOutputDeliveryTypes]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateOutputDeliveryType] TO [cdp_UI]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the OutputDeliveryType table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateOutputDeliveryType
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateOutputDeliveryType
ON [${flyway:defaultSchema}].[OutputDeliveryType]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[OutputDeliveryType]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[OutputDeliveryType] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Output Delivery Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateOutputDeliveryType] TO [cdp_UI]



/* spDelete SQL for Output Delivery Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Output Delivery Types
-- Item: spDeleteOutputDeliveryType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR OutputDeliveryType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteOutputDeliveryType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteOutputDeliveryType]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[OutputDeliveryType]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteOutputDeliveryType] TO [cdp_UI]
    

/* spDelete Permissions for Output Delivery Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteOutputDeliveryType] TO [cdp_UI]



/* spCreate SQL for Resource Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Resource Types
-- Item: spCreateResourceType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR ResourceType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateResourceType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateResourceType]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @DisplayName nvarchar(255),
    @Description nvarchar(MAX),
    @Icon nvarchar(100),
    @EntityID uniqueidentifier,
    @CategoryEntityID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[ResourceType]
            (
                [ID],
                [Name],
                [DisplayName],
                [Description],
                [Icon],
                [EntityID],
                [CategoryEntityID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @DisplayName,
                @Description,
                @Icon,
                @EntityID,
                @CategoryEntityID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[ResourceType]
            (
                [Name],
                [DisplayName],
                [Description],
                [Icon],
                [EntityID],
                [CategoryEntityID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @DisplayName,
                @Description,
                @Icon,
                @EntityID,
                @CategoryEntityID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwResourceTypes] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateResourceType] TO [cdp_UI]
    

/* spCreate Permissions for Resource Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateResourceType] TO [cdp_UI]



/* spUpdate SQL for Resource Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Resource Types
-- Item: spUpdateResourceType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR ResourceType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateResourceType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateResourceType]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @DisplayName nvarchar(255),
    @Description nvarchar(MAX),
    @Icon nvarchar(100),
    @EntityID uniqueidentifier,
    @CategoryEntityID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ResourceType]
    SET
        [Name] = @Name,
        [DisplayName] = @DisplayName,
        [Description] = @Description,
        [Icon] = @Icon,
        [EntityID] = @EntityID,
        [CategoryEntityID] = @CategoryEntityID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwResourceTypes]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateResourceType] TO [cdp_UI]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the ResourceType table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateResourceType
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateResourceType
ON [${flyway:defaultSchema}].[ResourceType]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[ResourceType]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[ResourceType] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Resource Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateResourceType] TO [cdp_UI]



/* spDelete SQL for Resource Types */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Resource Types
-- Item: spDeleteResourceType
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR ResourceType
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteResourceType]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteResourceType]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[ResourceType]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteResourceType] TO [cdp_UI]
    

/* spDelete Permissions for Resource Types */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteResourceType] TO [cdp_UI]



/* spCreate SQL for Tags */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Tags
-- Item: spCreateTag
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Tag
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateTag]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateTag]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @ParentID uniqueidentifier,
    @DisplayName nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Tag]
            (
                [ID],
                [Name],
                [ParentID],
                [DisplayName],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @ParentID,
                @DisplayName,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Tag]
            (
                [Name],
                [ParentID],
                [DisplayName],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @ParentID,
                @DisplayName,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwTags] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTag] TO [cdp_UI]
    

/* spCreate Permissions for Tags */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTag] TO [cdp_UI]



/* spUpdate SQL for Tags */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Tags
-- Item: spUpdateTag
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Tag
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateTag]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateTag]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @ParentID uniqueidentifier,
    @DisplayName nvarchar(255),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Tag]
    SET
        [Name] = @Name,
        [ParentID] = @ParentID,
        [DisplayName] = @DisplayName,
        [Description] = @Description
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwTags]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateTag] TO [cdp_UI]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Tag table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateTag
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateTag
ON [${flyway:defaultSchema}].[Tag]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Tag]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[Tag] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Tags */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateTag] TO [cdp_UI]



/* spDelete SQL for Tags */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Tags
-- Item: spDeleteTag
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Tag
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteTag]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteTag]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[Tag]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteTag] TO [cdp_UI]
    

/* spDelete Permissions for Tags */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteTag] TO [cdp_UI]



/* spCreate SQL for Tagged Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Tagged Items
-- Item: spCreateTaggedItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR TaggedItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateTaggedItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateTaggedItem]
    @ID uniqueidentifier = NULL,
    @TagID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[TaggedItem]
            (
                [ID],
                [TagID],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @TagID,
                @EntityID,
                @RecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[TaggedItem]
            (
                [TagID],
                [EntityID],
                [RecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @TagID,
                @EntityID,
                @RecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwTaggedItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTaggedItem] TO [cdp_UI]
    

/* spCreate Permissions for Tagged Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateTaggedItem] TO [cdp_UI]



/* spUpdate SQL for Tagged Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Tagged Items
-- Item: spUpdateTaggedItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR TaggedItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateTaggedItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateTaggedItem]
    @ID uniqueidentifier,
    @TagID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[TaggedItem]
    SET
        [TagID] = @TagID,
        [EntityID] = @EntityID,
        [RecordID] = @RecordID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwTaggedItems]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateTaggedItem] TO [cdp_UI]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the TaggedItem table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateTaggedItem
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateTaggedItem
ON [${flyway:defaultSchema}].[TaggedItem]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[TaggedItem]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[TaggedItem] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Tagged Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateTaggedItem] TO [cdp_UI]



/* spDelete SQL for Tagged Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Tagged Items
-- Item: spDeleteTaggedItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR TaggedItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteTaggedItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteTaggedItem]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[TaggedItem]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteTaggedItem] TO [cdp_UI]
    

/* spDelete Permissions for Tagged Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteTaggedItem] TO [cdp_UI]



/* spCreate SQL for Datasets */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Datasets
-- Item: spCreateDataset
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Dataset
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDataset]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDataset]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(100),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Dataset]
            (
                [ID],
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Dataset]
            (
                [Name],
                [Description]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDatasets] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
    

/* spCreate Permissions for Datasets */




/* spUpdate SQL for Datasets */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Datasets
-- Item: spUpdateDataset
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Dataset
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateDataset]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateDataset]
    @ID uniqueidentifier,
    @Name nvarchar(100),
    @Description nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Dataset]
    SET
        [Name] = @Name,
        [Description] = @Description
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwDatasets]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Dataset table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateDataset
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateDataset
ON [${flyway:defaultSchema}].[Dataset]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Dataset]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[Dataset] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Datasets */




/* spDelete SQL for Datasets */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Datasets
-- Item: spDeleteDataset
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Dataset
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteDataset]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteDataset]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[Dataset]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for Datasets */




/* spCreate SQL for Dataset Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dataset Items
-- Item: spCreateDatasetItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DatasetItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDatasetItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDatasetItem]
    @ID uniqueidentifier = NULL,
    @Code nvarchar(50),
    @DatasetID uniqueidentifier,
    @Sequence int,
    @EntityID uniqueidentifier,
    @WhereClause nvarchar(MAX),
    @DateFieldToCheck nvarchar(100),
    @Description nvarchar(MAX),
    @Columns nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DatasetItem]
            (
                [ID],
                [Code],
                [DatasetID],
                [Sequence],
                [EntityID],
                [WhereClause],
                [DateFieldToCheck],
                [Description],
                [Columns]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Code,
                @DatasetID,
                @Sequence,
                @EntityID,
                @WhereClause,
                @DateFieldToCheck,
                @Description,
                @Columns
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DatasetItem]
            (
                [Code],
                [DatasetID],
                [Sequence],
                [EntityID],
                [WhereClause],
                [DateFieldToCheck],
                [Description],
                [Columns]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Code,
                @DatasetID,
                @Sequence,
                @EntityID,
                @WhereClause,
                @DateFieldToCheck,
                @Description,
                @Columns
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDatasetItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
    

/* spCreate Permissions for Dataset Items */




/* spUpdate SQL for Dataset Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dataset Items
-- Item: spUpdateDatasetItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR DatasetItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateDatasetItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateDatasetItem]
    @ID uniqueidentifier,
    @Code nvarchar(50),
    @DatasetID uniqueidentifier,
    @Sequence int,
    @EntityID uniqueidentifier,
    @WhereClause nvarchar(MAX),
    @DateFieldToCheck nvarchar(100),
    @Description nvarchar(MAX),
    @Columns nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[DatasetItem]
    SET
        [Code] = @Code,
        [DatasetID] = @DatasetID,
        [Sequence] = @Sequence,
        [EntityID] = @EntityID,
        [WhereClause] = @WhereClause,
        [DateFieldToCheck] = @DateFieldToCheck,
        [Description] = @Description,
        [Columns] = @Columns
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwDatasetItems]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the DatasetItem table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateDatasetItem
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateDatasetItem
ON [${flyway:defaultSchema}].[DatasetItem]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[DatasetItem]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[DatasetItem] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Dataset Items */




/* spDelete SQL for Dataset Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Dataset Items
-- Item: spDeleteDatasetItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR DatasetItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteDatasetItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteDatasetItem]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[DatasetItem]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
    

/* spDelete Permissions for Dataset Items */




/* spCreate SQL for Schema Info */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Schema Info
-- Item: spCreateSchemaInfo
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR SchemaInfo
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateSchemaInfo]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateSchemaInfo]
    @ID uniqueidentifier = NULL,
    @SchemaName nvarchar(50),
    @EntityIDMin int,
    @EntityIDMax int,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[SchemaInfo]
            (
                [ID],
                [SchemaName],
                [EntityIDMin],
                [EntityIDMax],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @SchemaName,
                @EntityIDMin,
                @EntityIDMax,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[SchemaInfo]
            (
                [SchemaName],
                [EntityIDMin],
                [EntityIDMax],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @SchemaName,
                @EntityIDMin,
                @EntityIDMax,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwSchemaInfos] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateSchemaInfo] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Schema Info */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateSchemaInfo] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Schema Info */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Schema Info
-- Item: spUpdateSchemaInfo
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR SchemaInfo
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateSchemaInfo]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateSchemaInfo]
    @ID uniqueidentifier,
    @SchemaName nvarchar(50),
    @EntityIDMin int,
    @EntityIDMax int,
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[SchemaInfo]
    SET
        [SchemaName] = @SchemaName,
        [EntityIDMin] = @EntityIDMin,
        [EntityIDMax] = @EntityIDMax,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwSchemaInfos]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateSchemaInfo] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the SchemaInfo table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateSchemaInfo
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateSchemaInfo
ON [${flyway:defaultSchema}].[SchemaInfo]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[SchemaInfo]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[SchemaInfo] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Schema Info */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateSchemaInfo] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Schema Info */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Schema Info
-- Item: spDeleteSchemaInfo
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR SchemaInfo
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteSchemaInfo]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteSchemaInfo]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[SchemaInfo]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteSchemaInfo] TO [cdp_Developer], [cdp_Integration]
    

/* spDelete Permissions for Schema Info */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteSchemaInfo] TO [cdp_Developer], [cdp_Integration]



/* spCreate SQL for Company Integration Record Maps */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Record Maps
-- Item: spCreateCompanyIntegrationRecordMap
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CompanyIntegrationRecordMap
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCompanyIntegrationRecordMap]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCompanyIntegrationRecordMap]
    @ID uniqueidentifier = NULL,
    @CompanyIntegrationID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(750),
    @EntityID uniqueidentifier,
    @EntityRecordID nvarchar(750)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRecordMap]
            (
                [ID],
                [CompanyIntegrationID],
                [ExternalSystemRecordID],
                [EntityID],
                [EntityRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CompanyIntegrationID,
                @ExternalSystemRecordID,
                @EntityID,
                @EntityRecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CompanyIntegrationRecordMap]
            (
                [CompanyIntegrationID],
                [ExternalSystemRecordID],
                [EntityID],
                [EntityRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CompanyIntegrationID,
                @ExternalSystemRecordID,
                @EntityID,
                @EntityRecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCompanyIntegrationRecordMaps] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRecordMap] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Company Integration Record Maps */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCompanyIntegrationRecordMap] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Company Integration Record Maps */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Record Maps
-- Item: spUpdateCompanyIntegrationRecordMap
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR CompanyIntegrationRecordMap
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRecordMap]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRecordMap]
    @ID uniqueidentifier,
    @CompanyIntegrationID uniqueidentifier,
    @ExternalSystemRecordID nvarchar(750),
    @EntityID uniqueidentifier,
    @EntityRecordID nvarchar(750)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegrationRecordMap]
    SET
        [CompanyIntegrationID] = @CompanyIntegrationID,
        [ExternalSystemRecordID] = @ExternalSystemRecordID,
        [EntityID] = @EntityID,
        [EntityRecordID] = @EntityRecordID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwCompanyIntegrationRecordMaps]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRecordMap] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the CompanyIntegrationRecordMap table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateCompanyIntegrationRecordMap
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateCompanyIntegrationRecordMap
ON [${flyway:defaultSchema}].[CompanyIntegrationRecordMap]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CompanyIntegrationRecordMap]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[CompanyIntegrationRecordMap] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Company Integration Record Maps */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCompanyIntegrationRecordMap] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Company Integration Record Maps */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Company Integration Record Maps
-- Item: spDeleteCompanyIntegrationRecordMap
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR CompanyIntegrationRecordMap
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRecordMap]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRecordMap]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[CompanyIntegrationRecordMap]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRecordMap] TO [cdp_Integration]
    

/* spDelete Permissions for Company Integration Record Maps */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCompanyIntegrationRecordMap] TO [cdp_Integration]



/* spCreate SQL for Record Merge Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Logs
-- Item: spCreateRecordMergeLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecordMergeLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecordMergeLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecordMergeLog]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @SurvivingRecordID nvarchar(450),
    @InitiatedByUserID uniqueidentifier,
    @ApprovalStatus nvarchar(10),
    @ApprovedByUserID uniqueidentifier,
    @ProcessingStatus nvarchar(10),
    @ProcessingStartedAt datetime,
    @ProcessingEndedAt datetime,
    @ProcessingLog nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecordMergeLog]
            (
                [ID],
                [EntityID],
                [SurvivingRecordID],
                [InitiatedByUserID],
                [ApprovalStatus],
                [ApprovedByUserID],
                [ProcessingStatus],
                [ProcessingStartedAt],
                [ProcessingEndedAt],
                [ProcessingLog],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @SurvivingRecordID,
                @InitiatedByUserID,
                @ApprovalStatus,
                @ApprovedByUserID,
                @ProcessingStatus,
                @ProcessingStartedAt,
                @ProcessingEndedAt,
                @ProcessingLog,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecordMergeLog]
            (
                [EntityID],
                [SurvivingRecordID],
                [InitiatedByUserID],
                [ApprovalStatus],
                [ApprovedByUserID],
                [ProcessingStatus],
                [ProcessingStartedAt],
                [ProcessingEndedAt],
                [ProcessingLog],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @SurvivingRecordID,
                @InitiatedByUserID,
                @ApprovalStatus,
                @ApprovedByUserID,
                @ProcessingStatus,
                @ProcessingStartedAt,
                @ProcessingEndedAt,
                @ProcessingLog,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecordMergeLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Record Merge Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Record Merge Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Logs
-- Item: spUpdateRecordMergeLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR RecordMergeLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateRecordMergeLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateRecordMergeLog]
    @ID uniqueidentifier,
    @EntityID uniqueidentifier,
    @SurvivingRecordID nvarchar(450),
    @InitiatedByUserID uniqueidentifier,
    @ApprovalStatus nvarchar(10),
    @ApprovedByUserID uniqueidentifier,
    @ProcessingStatus nvarchar(10),
    @ProcessingStartedAt datetime,
    @ProcessingEndedAt datetime,
    @ProcessingLog nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecordMergeLog]
    SET
        [EntityID] = @EntityID,
        [SurvivingRecordID] = @SurvivingRecordID,
        [InitiatedByUserID] = @InitiatedByUserID,
        [ApprovalStatus] = @ApprovalStatus,
        [ApprovedByUserID] = @ApprovedByUserID,
        [ProcessingStatus] = @ProcessingStatus,
        [ProcessingStartedAt] = @ProcessingStartedAt,
        [ProcessingEndedAt] = @ProcessingEndedAt,
        [ProcessingLog] = @ProcessingLog,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwRecordMergeLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the RecordMergeLog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateRecordMergeLog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateRecordMergeLog
ON [${flyway:defaultSchema}].[RecordMergeLog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecordMergeLog]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[RecordMergeLog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Record Merge Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordMergeLog] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Record Merge Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Logs
-- Item: spDeleteRecordMergeLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR RecordMergeLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteRecordMergeLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteRecordMergeLog]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[RecordMergeLog]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecordMergeLog] TO [cdp_Integration], [cdp_Developer]
    

/* spDelete Permissions for Record Merge Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecordMergeLog] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Record Merge Deletion Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Deletion Logs
-- Item: spCreateRecordMergeDeletionLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecordMergeDeletionLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecordMergeDeletionLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecordMergeDeletionLog]
    @ID uniqueidentifier = NULL,
    @RecordMergeLogID uniqueidentifier,
    @DeletedRecordID nvarchar(750),
    @Status nvarchar(10),
    @ProcessingLog nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecordMergeDeletionLog]
            (
                [ID],
                [RecordMergeLogID],
                [DeletedRecordID],
                [Status],
                [ProcessingLog]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @RecordMergeLogID,
                @DeletedRecordID,
                @Status,
                @ProcessingLog
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecordMergeDeletionLog]
            (
                [RecordMergeLogID],
                [DeletedRecordID],
                [Status],
                [ProcessingLog]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @RecordMergeLogID,
                @DeletedRecordID,
                @Status,
                @ProcessingLog
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecordMergeDeletionLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeDeletionLog] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Record Merge Deletion Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordMergeDeletionLog] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Record Merge Deletion Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Deletion Logs
-- Item: spUpdateRecordMergeDeletionLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR RecordMergeDeletionLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateRecordMergeDeletionLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateRecordMergeDeletionLog]
    @ID uniqueidentifier,
    @RecordMergeLogID uniqueidentifier,
    @DeletedRecordID nvarchar(750),
    @Status nvarchar(10),
    @ProcessingLog nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecordMergeDeletionLog]
    SET
        [RecordMergeLogID] = @RecordMergeLogID,
        [DeletedRecordID] = @DeletedRecordID,
        [Status] = @Status,
        [ProcessingLog] = @ProcessingLog
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwRecordMergeDeletionLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordMergeDeletionLog] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the RecordMergeDeletionLog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateRecordMergeDeletionLog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateRecordMergeDeletionLog
ON [${flyway:defaultSchema}].[RecordMergeDeletionLog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecordMergeDeletionLog]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[RecordMergeDeletionLog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Record Merge Deletion Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordMergeDeletionLog] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Record Merge Deletion Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Merge Deletion Logs
-- Item: spDeleteRecordMergeDeletionLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR RecordMergeDeletionLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteRecordMergeDeletionLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteRecordMergeDeletionLog]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[RecordMergeDeletionLog]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecordMergeDeletionLog] TO [cdp_Integration], [cdp_Developer]
    

/* spDelete Permissions for Record Merge Deletion Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecordMergeDeletionLog] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Entity Document Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Document Runs
-- Item: spCreateEntityDocumentRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityDocumentRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityDocumentRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityDocumentRun]
    @ID uniqueidentifier = NULL,
    @EntityDocumentID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @Status nvarchar(15)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityDocumentRun]
            (
                [ID],
                [EntityDocumentID],
                [StartedAt],
                [EndedAt],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityDocumentID,
                @StartedAt,
                @EndedAt,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityDocumentRun]
            (
                [EntityDocumentID],
                [StartedAt],
                [EndedAt],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityDocumentID,
                @StartedAt,
                @EndedAt,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityDocumentRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocumentRun] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Document Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocumentRun] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Entity Document Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Document Runs
-- Item: spUpdateEntityDocumentRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EntityDocumentRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEntityDocumentRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEntityDocumentRun]
    @ID uniqueidentifier,
    @EntityDocumentID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @Status nvarchar(15)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityDocumentRun]
    SET
        [EntityDocumentID] = @EntityDocumentID,
        [StartedAt] = @StartedAt,
        [EndedAt] = @EndedAt,
        [Status] = @Status
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEntityDocumentRuns]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityDocumentRun] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the EntityDocumentRun table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEntityDocumentRun
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEntityDocumentRun
ON [${flyway:defaultSchema}].[EntityDocumentRun]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityDocumentRun]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EntityDocumentRun] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Entity Document Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityDocumentRun] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Entity Document Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Document Runs
-- Item: spDeleteEntityDocumentRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR EntityDocumentRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteEntityDocumentRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteEntityDocumentRun]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[EntityDocumentRun]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEntityDocumentRun] TO [cdp_Integration]
    

/* spDelete Permissions for Entity Document Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEntityDocumentRun] TO [cdp_Integration]



/* spCreate SQL for Entity Record Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Record Documents
-- Item: spCreateEntityRecordDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityRecordDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityRecordDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityRecordDocument]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @EntityDocumentID uniqueidentifier,
    @DocumentText nvarchar(MAX),
    @VectorIndexID uniqueidentifier,
    @VectorID nvarchar(50),
    @VectorJSON nvarchar(MAX),
    @EntityRecordUpdatedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityRecordDocument]
            (
                [ID],
                [EntityID],
                [RecordID],
                [EntityDocumentID],
                [DocumentText],
                [VectorIndexID],
                [VectorID],
                [VectorJSON],
                [EntityRecordUpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @RecordID,
                @EntityDocumentID,
                @DocumentText,
                @VectorIndexID,
                @VectorID,
                @VectorJSON,
                @EntityRecordUpdatedAt
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityRecordDocument]
            (
                [EntityID],
                [RecordID],
                [EntityDocumentID],
                [DocumentText],
                [VectorIndexID],
                [VectorID],
                [VectorJSON],
                [EntityRecordUpdatedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @RecordID,
                @EntityDocumentID,
                @DocumentText,
                @VectorIndexID,
                @VectorID,
                @VectorJSON,
                @EntityRecordUpdatedAt
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityRecordDocuments] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Entity Record Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Entity Record Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Record Documents
-- Item: spUpdateEntityRecordDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EntityRecordDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEntityRecordDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEntityRecordDocument]
    @ID uniqueidentifier,
    @EntityID uniqueidentifier,
    @RecordID nvarchar(450),
    @EntityDocumentID uniqueidentifier,
    @DocumentText nvarchar(MAX),
    @VectorIndexID uniqueidentifier,
    @VectorID nvarchar(50),
    @VectorJSON nvarchar(MAX),
    @EntityRecordUpdatedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityRecordDocument]
    SET
        [EntityID] = @EntityID,
        [RecordID] = @RecordID,
        [EntityDocumentID] = @EntityDocumentID,
        [DocumentText] = @DocumentText,
        [VectorIndexID] = @VectorIndexID,
        [VectorID] = @VectorID,
        [VectorJSON] = @VectorJSON,
        [EntityRecordUpdatedAt] = @EntityRecordUpdatedAt
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEntityRecordDocuments]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the EntityRecordDocument table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEntityRecordDocument
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEntityRecordDocument
ON [${flyway:defaultSchema}].[EntityRecordDocument]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityRecordDocument]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EntityRecordDocument] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Entity Record Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityRecordDocument] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Entity Record Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Record Documents
-- Item: spDeleteEntityRecordDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR EntityRecordDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteEntityRecordDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteEntityRecordDocument]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[EntityRecordDocument]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEntityRecordDocument] TO [cdp_Integration]
    

/* spDelete Permissions for Entity Record Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEntityRecordDocument] TO [cdp_Integration]



/* spCreate SQL for Entity Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Documents
-- Item: spCreateEntityDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityDocument]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(250),
    @TypeID uniqueidentifier,
    @EntityID uniqueidentifier,
    @VectorDatabaseID uniqueidentifier,
    @Status nvarchar(15),
    @TemplateID uniqueidentifier,
    @AIModelID uniqueidentifier,
    @PotentialMatchThreshold numeric(12, 11),
    @AbsoluteMatchThreshold numeric(12, 11)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityDocument]
            (
                [ID],
                [Name],
                [TypeID],
                [EntityID],
                [VectorDatabaseID],
                [Status],
                [TemplateID],
                [AIModelID],
                [PotentialMatchThreshold],
                [AbsoluteMatchThreshold]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @TypeID,
                @EntityID,
                @VectorDatabaseID,
                @Status,
                @TemplateID,
                @AIModelID,
                @PotentialMatchThreshold,
                @AbsoluteMatchThreshold
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityDocument]
            (
                [Name],
                [TypeID],
                [EntityID],
                [VectorDatabaseID],
                [Status],
                [TemplateID],
                [AIModelID],
                [PotentialMatchThreshold],
                [AbsoluteMatchThreshold]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @TypeID,
                @EntityID,
                @VectorDatabaseID,
                @Status,
                @TemplateID,
                @AIModelID,
                @PotentialMatchThreshold,
                @AbsoluteMatchThreshold
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityDocuments] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocument] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityDocument] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Entity Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Documents
-- Item: spUpdateEntityDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EntityDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEntityDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEntityDocument]
    @ID uniqueidentifier,
    @Name nvarchar(250),
    @TypeID uniqueidentifier,
    @EntityID uniqueidentifier,
    @VectorDatabaseID uniqueidentifier,
    @Status nvarchar(15),
    @TemplateID uniqueidentifier,
    @AIModelID uniqueidentifier,
    @PotentialMatchThreshold numeric(12, 11),
    @AbsoluteMatchThreshold numeric(12, 11)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityDocument]
    SET
        [Name] = @Name,
        [TypeID] = @TypeID,
        [EntityID] = @EntityID,
        [VectorDatabaseID] = @VectorDatabaseID,
        [Status] = @Status,
        [TemplateID] = @TemplateID,
        [AIModelID] = @AIModelID,
        [PotentialMatchThreshold] = @PotentialMatchThreshold,
        [AbsoluteMatchThreshold] = @AbsoluteMatchThreshold
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEntityDocuments]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityDocument] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the EntityDocument table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEntityDocument
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEntityDocument
ON [${flyway:defaultSchema}].[EntityDocument]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityDocument]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EntityDocument] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Entity Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityDocument] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Entity Documents */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Documents
-- Item: spDeleteEntityDocument
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR EntityDocument
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteEntityDocument]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteEntityDocument]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[EntityDocument]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEntityDocument] TO [cdp_Integration]
    

/* spDelete Permissions for Entity Documents */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEntityDocument] TO [cdp_Integration]



/* Index for Foreign Keys for File */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Files
-- Item: Index for Foreign Keys
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------
-- Index for foreign key CategoryID in table File
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_File_CategoryID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[File]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_File_CategoryID ON [${flyway:defaultSchema}].[File] ([CategoryID]);

-- Index for foreign key ProviderID in table File
IF NOT EXISTS (
    SELECT 1
    FROM sys.indexes
    WHERE name = 'IDX_AUTO_MJ_FKEY_File_ProviderID' 
    AND object_id = OBJECT_ID('[${flyway:defaultSchema}].[File]')
)
CREATE INDEX IDX_AUTO_MJ_FKEY_File_ProviderID ON [${flyway:defaultSchema}].[File] ([ProviderID]);

/* spCreate SQL for Version Installations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Version Installations
-- Item: spCreateVersionInstallation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR VersionInstallation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateVersionInstallation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateVersionInstallation]
    @ID uniqueidentifier = NULL,
    @MajorVersion int,
    @MinorVersion int,
    @PatchVersion int,
    @Type nvarchar(20),
    @InstalledAt datetime,
    @Status nvarchar(20),
    @InstallLog nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[VersionInstallation]
            (
                [ID],
                [MajorVersion],
                [MinorVersion],
                [PatchVersion],
                [Type],
                [InstalledAt],
                [Status],
                [InstallLog],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @MajorVersion,
                @MinorVersion,
                @PatchVersion,
                @Type,
                @InstalledAt,
                @Status,
                @InstallLog,
                @Comments
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[VersionInstallation]
            (
                [MajorVersion],
                [MinorVersion],
                [PatchVersion],
                [Type],
                [InstalledAt],
                [Status],
                [InstallLog],
                [Comments]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @MajorVersion,
                @MinorVersion,
                @PatchVersion,
                @Type,
                @InstalledAt,
                @Status,
                @InstallLog,
                @Comments
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwVersionInstallations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateVersionInstallation] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Version Installations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateVersionInstallation] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Version Installations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Version Installations
-- Item: spUpdateVersionInstallation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR VersionInstallation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateVersionInstallation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateVersionInstallation]
    @ID uniqueidentifier,
    @MajorVersion int,
    @MinorVersion int,
    @PatchVersion int,
    @Type nvarchar(20),
    @InstalledAt datetime,
    @Status nvarchar(20),
    @InstallLog nvarchar(MAX),
    @Comments nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[VersionInstallation]
    SET
        [MajorVersion] = @MajorVersion,
        [MinorVersion] = @MinorVersion,
        [PatchVersion] = @PatchVersion,
        [Type] = @Type,
        [InstalledAt] = @InstalledAt,
        [Status] = @Status,
        [InstallLog] = @InstallLog,
        [Comments] = @Comments
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwVersionInstallations]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateVersionInstallation] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the VersionInstallation table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateVersionInstallation
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateVersionInstallation
ON [${flyway:defaultSchema}].[VersionInstallation]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[VersionInstallation]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[VersionInstallation] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Version Installations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateVersionInstallation] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Version Installations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Version Installations
-- Item: spDeleteVersionInstallation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR VersionInstallation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteVersionInstallation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteVersionInstallation]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[VersionInstallation]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteVersionInstallation] TO [cdp_Integration]
    

/* spDelete Permissions for Version Installations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteVersionInstallation] TO [cdp_Integration]



/* Base View SQL for Files */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Files
-- Item: vwFiles
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- BASE VIEW FOR ENTITY:      Files
-----               SCHEMA:      ${flyway:defaultSchema}
-----               BASE TABLE:  File
-----               PRIMARY KEY: ID
------------------------------------------------------------
DROP VIEW IF EXISTS [${flyway:defaultSchema}].[vwFiles]
GO

CREATE VIEW [${flyway:defaultSchema}].[vwFiles]
AS
SELECT
    f.*,
    FileCategory_CategoryID.[Name] AS [Category],
    FileStorageProvider_ProviderID.[Name] AS [Provider]
FROM
    [${flyway:defaultSchema}].[File] AS f
LEFT OUTER JOIN
    [${flyway:defaultSchema}].[FileCategory] AS FileCategory_CategoryID
  ON
    [f].[CategoryID] = FileCategory_CategoryID.[ID]
INNER JOIN
    [${flyway:defaultSchema}].[FileStorageProvider] AS FileStorageProvider_ProviderID
  ON
    [f].[ProviderID] = FileStorageProvider_ProviderID.[ID]
GO
GRANT SELECT ON [${flyway:defaultSchema}].[vwFiles] TO [cdp_Integration], [cdp_UI], [cdp_Developer]
    

/* Base View Permissions SQL for Files */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Files
-- Item: Permissions for vwFiles
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

GRANT SELECT ON [${flyway:defaultSchema}].[vwFiles] TO [cdp_Integration], [cdp_UI], [cdp_Developer]

/* spCreate SQL for Files */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Files
-- Item: spCreateFile
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR File
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateFile]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateFile]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(500),
    @Description nvarchar(MAX),
    @CategoryID uniqueidentifier,
    @ProviderID uniqueidentifier,
    @ContentType nvarchar(255),
    @ProviderKey nvarchar(500),
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[File]
            (
                [ID],
                [Name],
                [Description],
                [CategoryID],
                [ProviderID],
                [ContentType],
                [ProviderKey],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @CategoryID,
                @ProviderID,
                @ContentType,
                @ProviderKey,
                @Status
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[File]
            (
                [Name],
                [Description],
                [CategoryID],
                [ProviderID],
                [ContentType],
                [ProviderKey],
                [Status]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @CategoryID,
                @ProviderID,
                @ContentType,
                @ProviderKey,
                @Status
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwFiles] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFile] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Files */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateFile] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Files */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Files
-- Item: spUpdateFile
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR File
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateFile]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateFile]
    @ID uniqueidentifier,
    @Name nvarchar(500),
    @Description nvarchar(MAX),
    @CategoryID uniqueidentifier,
    @ProviderID uniqueidentifier,
    @ContentType nvarchar(255),
    @ProviderKey nvarchar(500),
    @Status nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[File]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [CategoryID] = @CategoryID,
        [ProviderID] = @ProviderID,
        [ContentType] = @ContentType,
        [ProviderKey] = @ProviderKey,
        [Status] = @Status
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwFiles]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateFile] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the File table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateFile
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateFile
ON [${flyway:defaultSchema}].[File]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[File]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[File] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Files */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateFile] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Files */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Files
-- Item: spDeleteFile
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR File
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteFile]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteFile]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[File]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteFile] TO [cdp_Integration], [cdp_Developer]
    

/* spDelete Permissions for Files */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteFile] TO [cdp_Integration], [cdp_Developer]



/* spCreate SQL for Duplicate Run Detail Matches */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Run Detail Matches
-- Item: spCreateDuplicateRunDetailMatch
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DuplicateRunDetailMatch
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDuplicateRunDetailMatch]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDuplicateRunDetailMatch]
    @ID uniqueidentifier = NULL,
    @DuplicateRunDetailID uniqueidentifier,
    @MatchSource nvarchar(20),
    @MatchRecordID nvarchar(500),
    @MatchProbability numeric(12, 11),
    @MatchedAt datetime,
    @Action nvarchar(20),
    @ApprovalStatus nvarchar(20),
    @RecordMergeLogID uniqueidentifier,
    @MergeStatus nvarchar(20),
    @MergedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRunDetailMatch]
            (
                [ID],
                [DuplicateRunDetailID],
                [MatchSource],
                [MatchRecordID],
                [MatchProbability],
                [MatchedAt],
                [Action],
                [ApprovalStatus],
                [RecordMergeLogID],
                [MergeStatus],
                [MergedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @DuplicateRunDetailID,
                @MatchSource,
                @MatchRecordID,
                @MatchProbability,
                @MatchedAt,
                @Action,
                @ApprovalStatus,
                @RecordMergeLogID,
                @MergeStatus,
                @MergedAt
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRunDetailMatch]
            (
                [DuplicateRunDetailID],
                [MatchSource],
                [MatchRecordID],
                [MatchProbability],
                [MatchedAt],
                [Action],
                [ApprovalStatus],
                [RecordMergeLogID],
                [MergeStatus],
                [MergedAt]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @DuplicateRunDetailID,
                @MatchSource,
                @MatchRecordID,
                @MatchProbability,
                @MatchedAt,
                @Action,
                @ApprovalStatus,
                @RecordMergeLogID,
                @MergeStatus,
                @MergedAt
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDuplicateRunDetailMatches] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRunDetailMatch] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Duplicate Run Detail Matches */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRunDetailMatch] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Duplicate Run Detail Matches */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Run Detail Matches
-- Item: spUpdateDuplicateRunDetailMatch
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR DuplicateRunDetailMatch
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateDuplicateRunDetailMatch]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateDuplicateRunDetailMatch]
    @ID uniqueidentifier,
    @DuplicateRunDetailID uniqueidentifier,
    @MatchSource nvarchar(20),
    @MatchRecordID nvarchar(500),
    @MatchProbability numeric(12, 11),
    @MatchedAt datetime,
    @Action nvarchar(20),
    @ApprovalStatus nvarchar(20),
    @RecordMergeLogID uniqueidentifier,
    @MergeStatus nvarchar(20),
    @MergedAt datetime
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[DuplicateRunDetailMatch]
    SET
        [DuplicateRunDetailID] = @DuplicateRunDetailID,
        [MatchSource] = @MatchSource,
        [MatchRecordID] = @MatchRecordID,
        [MatchProbability] = @MatchProbability,
        [MatchedAt] = @MatchedAt,
        [Action] = @Action,
        [ApprovalStatus] = @ApprovalStatus,
        [RecordMergeLogID] = @RecordMergeLogID,
        [MergeStatus] = @MergeStatus,
        [MergedAt] = @MergedAt
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwDuplicateRunDetailMatches]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateDuplicateRunDetailMatch] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the DuplicateRunDetailMatch table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateDuplicateRunDetailMatch
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateDuplicateRunDetailMatch
ON [${flyway:defaultSchema}].[DuplicateRunDetailMatch]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[DuplicateRunDetailMatch]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[DuplicateRunDetailMatch] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Duplicate Run Detail Matches */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateDuplicateRunDetailMatch] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Duplicate Run Detail Matches */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Run Detail Matches
-- Item: spDeleteDuplicateRunDetailMatch
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR DuplicateRunDetailMatch
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteDuplicateRunDetailMatch]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteDuplicateRunDetailMatch]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[DuplicateRunDetailMatch]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteDuplicateRunDetailMatch] TO [cdp_Integration]
    

/* spDelete Permissions for Duplicate Run Detail Matches */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteDuplicateRunDetailMatch] TO [cdp_Integration]



/* spCreate SQL for Duplicate Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Runs
-- Item: spCreateDuplicateRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DuplicateRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDuplicateRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDuplicateRun]
    @ID uniqueidentifier = NULL,
    @EntityID uniqueidentifier,
    @StartedByUserID uniqueidentifier,
    @SourceListID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @ApprovalStatus nvarchar(20),
    @ApprovalComments nvarchar(MAX),
    @ApprovedByUserID uniqueidentifier,
    @ProcessingStatus nvarchar(20),
    @ProcessingErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRun]
            (
                [ID],
                [EntityID],
                [StartedByUserID],
                [SourceListID],
                [StartedAt],
                [EndedAt],
                [ApprovalStatus],
                [ApprovalComments],
                [ApprovedByUserID],
                [ProcessingStatus],
                [ProcessingErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @EntityID,
                @StartedByUserID,
                @SourceListID,
                @StartedAt,
                @EndedAt,
                @ApprovalStatus,
                @ApprovalComments,
                @ApprovedByUserID,
                @ProcessingStatus,
                @ProcessingErrorMessage
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRun]
            (
                [EntityID],
                [StartedByUserID],
                [SourceListID],
                [StartedAt],
                [EndedAt],
                [ApprovalStatus],
                [ApprovalComments],
                [ApprovedByUserID],
                [ProcessingStatus],
                [ProcessingErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @EntityID,
                @StartedByUserID,
                @SourceListID,
                @StartedAt,
                @EndedAt,
                @ApprovalStatus,
                @ApprovalComments,
                @ApprovedByUserID,
                @ProcessingStatus,
                @ProcessingErrorMessage
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDuplicateRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Duplicate Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRun] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Duplicate Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Runs
-- Item: spUpdateDuplicateRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR DuplicateRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateDuplicateRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateDuplicateRun]
    @ID uniqueidentifier,
    @EntityID uniqueidentifier,
    @StartedByUserID uniqueidentifier,
    @SourceListID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @ApprovalStatus nvarchar(20),
    @ApprovalComments nvarchar(MAX),
    @ApprovedByUserID uniqueidentifier,
    @ProcessingStatus nvarchar(20),
    @ProcessingErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[DuplicateRun]
    SET
        [EntityID] = @EntityID,
        [StartedByUserID] = @StartedByUserID,
        [SourceListID] = @SourceListID,
        [StartedAt] = @StartedAt,
        [EndedAt] = @EndedAt,
        [ApprovalStatus] = @ApprovalStatus,
        [ApprovalComments] = @ApprovalComments,
        [ApprovedByUserID] = @ApprovedByUserID,
        [ProcessingStatus] = @ProcessingStatus,
        [ProcessingErrorMessage] = @ProcessingErrorMessage
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwDuplicateRuns]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateDuplicateRun] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the DuplicateRun table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateDuplicateRun
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateDuplicateRun
ON [${flyway:defaultSchema}].[DuplicateRun]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[DuplicateRun]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[DuplicateRun] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Duplicate Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateDuplicateRun] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Duplicate Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Runs
-- Item: spDeleteDuplicateRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR DuplicateRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteDuplicateRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteDuplicateRun]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[DuplicateRun]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteDuplicateRun] TO [cdp_Integration]
    

/* spDelete Permissions for Duplicate Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteDuplicateRun] TO [cdp_Integration]



/* spCreate SQL for Duplicate Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Run Details
-- Item: spCreateDuplicateRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR DuplicateRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateDuplicateRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateDuplicateRunDetail]
    @ID uniqueidentifier = NULL,
    @DuplicateRunID uniqueidentifier,
    @RecordID nvarchar(500),
    @MatchStatus nvarchar(20),
    @SkippedReason nvarchar(MAX),
    @MatchErrorMessage nvarchar(MAX),
    @MergeStatus nvarchar(20),
    @MergeErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRunDetail]
            (
                [ID],
                [DuplicateRunID],
                [RecordID],
                [MatchStatus],
                [SkippedReason],
                [MatchErrorMessage],
                [MergeStatus],
                [MergeErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @DuplicateRunID,
                @RecordID,
                @MatchStatus,
                @SkippedReason,
                @MatchErrorMessage,
                @MergeStatus,
                @MergeErrorMessage
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[DuplicateRunDetail]
            (
                [DuplicateRunID],
                [RecordID],
                [MatchStatus],
                [SkippedReason],
                [MatchErrorMessage],
                [MergeStatus],
                [MergeErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @DuplicateRunID,
                @RecordID,
                @MatchStatus,
                @SkippedReason,
                @MatchErrorMessage,
                @MergeStatus,
                @MergeErrorMessage
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwDuplicateRunDetails] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRunDetail] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Duplicate Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateDuplicateRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Duplicate Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Run Details
-- Item: spUpdateDuplicateRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR DuplicateRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateDuplicateRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateDuplicateRunDetail]
    @ID uniqueidentifier,
    @DuplicateRunID uniqueidentifier,
    @RecordID nvarchar(500),
    @MatchStatus nvarchar(20),
    @SkippedReason nvarchar(MAX),
    @MatchErrorMessage nvarchar(MAX),
    @MergeStatus nvarchar(20),
    @MergeErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[DuplicateRunDetail]
    SET
        [DuplicateRunID] = @DuplicateRunID,
        [RecordID] = @RecordID,
        [MatchStatus] = @MatchStatus,
        [SkippedReason] = @SkippedReason,
        [MatchErrorMessage] = @MatchErrorMessage,
        [MergeStatus] = @MergeStatus,
        [MergeErrorMessage] = @MergeErrorMessage
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwDuplicateRunDetails]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateDuplicateRunDetail] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the DuplicateRunDetail table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateDuplicateRunDetail
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateDuplicateRunDetail
ON [${flyway:defaultSchema}].[DuplicateRunDetail]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[DuplicateRunDetail]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[DuplicateRunDetail] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Duplicate Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateDuplicateRunDetail] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Duplicate Run Details */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Duplicate Run Details
-- Item: spDeleteDuplicateRunDetail
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR DuplicateRunDetail
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteDuplicateRunDetail]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteDuplicateRunDetail]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[DuplicateRunDetail]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteDuplicateRunDetail] TO [cdp_Integration]
    

/* spDelete Permissions for Duplicate Run Details */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteDuplicateRunDetail] TO [cdp_Integration]



/* spCreate SQL for Communication Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Runs
-- Item: spCreateCommunicationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CommunicationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCommunicationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCommunicationRun]
    @ID uniqueidentifier = NULL,
    @UserID uniqueidentifier,
    @Direction nvarchar(20),
    @Status nvarchar(20),
    @StartedAt datetime,
    @EndedAt datetime,
    @Comments nvarchar(MAX),
    @ErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CommunicationRun]
            (
                [ID],
                [UserID],
                [Direction],
                [Status],
                [StartedAt],
                [EndedAt],
                [Comments],
                [ErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @UserID,
                @Direction,
                @Status,
                @StartedAt,
                @EndedAt,
                @Comments,
                @ErrorMessage
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CommunicationRun]
            (
                [UserID],
                [Direction],
                [Status],
                [StartedAt],
                [EndedAt],
                [Comments],
                [ErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @UserID,
                @Direction,
                @Status,
                @StartedAt,
                @EndedAt,
                @Comments,
                @ErrorMessage
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCommunicationRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationRun] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Communication Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationRun] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Communication Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Runs
-- Item: spUpdateCommunicationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR CommunicationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateCommunicationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateCommunicationRun]
    @ID uniqueidentifier,
    @UserID uniqueidentifier,
    @Direction nvarchar(20),
    @Status nvarchar(20),
    @StartedAt datetime,
    @EndedAt datetime,
    @Comments nvarchar(MAX),
    @ErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CommunicationRun]
    SET
        [UserID] = @UserID,
        [Direction] = @Direction,
        [Status] = @Status,
        [StartedAt] = @StartedAt,
        [EndedAt] = @EndedAt,
        [Comments] = @Comments,
        [ErrorMessage] = @ErrorMessage
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwCommunicationRuns]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCommunicationRun] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the CommunicationRun table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateCommunicationRun
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateCommunicationRun
ON [${flyway:defaultSchema}].[CommunicationRun]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CommunicationRun]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[CommunicationRun] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Communication Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCommunicationRun] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Communication Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Runs
-- Item: spDeleteCommunicationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR CommunicationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteCommunicationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteCommunicationRun]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[CommunicationRun]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCommunicationRun] TO [cdp_Integration]
    

/* spDelete Permissions for Communication Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCommunicationRun] TO [cdp_Integration]



/* spCreate SQL for Communication Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Logs
-- Item: spCreateCommunicationLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR CommunicationLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateCommunicationLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateCommunicationLog]
    @ID uniqueidentifier = NULL,
    @CommunicationProviderID uniqueidentifier,
    @CommunicationProviderMessageTypeID uniqueidentifier,
    @CommunicationRunID uniqueidentifier,
    @Direction nvarchar(20),
    @MessageDate datetime,
    @Status nvarchar(20),
    @MessageContent nvarchar(MAX),
    @ErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[CommunicationLog]
            (
                [ID],
                [CommunicationProviderID],
                [CommunicationProviderMessageTypeID],
                [CommunicationRunID],
                [Direction],
                [MessageDate],
                [Status],
                [MessageContent],
                [ErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @CommunicationProviderID,
                @CommunicationProviderMessageTypeID,
                @CommunicationRunID,
                @Direction,
                @MessageDate,
                @Status,
                @MessageContent,
                @ErrorMessage
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[CommunicationLog]
            (
                [CommunicationProviderID],
                [CommunicationProviderMessageTypeID],
                [CommunicationRunID],
                [Direction],
                [MessageDate],
                [Status],
                [MessageContent],
                [ErrorMessage]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @CommunicationProviderID,
                @CommunicationProviderMessageTypeID,
                @CommunicationRunID,
                @Direction,
                @MessageDate,
                @Status,
                @MessageContent,
                @ErrorMessage
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwCommunicationLogs] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationLog] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Communication Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateCommunicationLog] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Communication Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Logs
-- Item: spUpdateCommunicationLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR CommunicationLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateCommunicationLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateCommunicationLog]
    @ID uniqueidentifier,
    @CommunicationProviderID uniqueidentifier,
    @CommunicationProviderMessageTypeID uniqueidentifier,
    @CommunicationRunID uniqueidentifier,
    @Direction nvarchar(20),
    @MessageDate datetime,
    @Status nvarchar(20),
    @MessageContent nvarchar(MAX),
    @ErrorMessage nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CommunicationLog]
    SET
        [CommunicationProviderID] = @CommunicationProviderID,
        [CommunicationProviderMessageTypeID] = @CommunicationProviderMessageTypeID,
        [CommunicationRunID] = @CommunicationRunID,
        [Direction] = @Direction,
        [MessageDate] = @MessageDate,
        [Status] = @Status,
        [MessageContent] = @MessageContent,
        [ErrorMessage] = @ErrorMessage
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwCommunicationLogs]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCommunicationLog] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the CommunicationLog table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateCommunicationLog
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateCommunicationLog
ON [${flyway:defaultSchema}].[CommunicationLog]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[CommunicationLog]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[CommunicationLog] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Communication Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateCommunicationLog] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Communication Logs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Communication Logs
-- Item: spDeleteCommunicationLog
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR CommunicationLog
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteCommunicationLog]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteCommunicationLog]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[CommunicationLog]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCommunicationLog] TO [cdp_Integration]
    

/* spDelete Permissions for Communication Logs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteCommunicationLog] TO [cdp_Integration]



/* spCreate SQL for Recommendations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendations
-- Item: spCreateRecommendation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR Recommendation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecommendation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecommendation]
    @ID uniqueidentifier = NULL,
    @RecommendationRunID uniqueidentifier,
    @SourceEntityID uniqueidentifier,
    @SourceEntityRecordID nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[Recommendation]
            (
                [ID],
                [RecommendationRunID],
                [SourceEntityID],
                [SourceEntityRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @RecommendationRunID,
                @SourceEntityID,
                @SourceEntityRecordID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[Recommendation]
            (
                [RecommendationRunID],
                [SourceEntityID],
                [SourceEntityRecordID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @RecommendationRunID,
                @SourceEntityID,
                @SourceEntityRecordID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecommendations] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendation] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Recommendations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendation] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Recommendations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendations
-- Item: spUpdateRecommendation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR Recommendation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateRecommendation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateRecommendation]
    @ID uniqueidentifier,
    @RecommendationRunID uniqueidentifier,
    @SourceEntityID uniqueidentifier,
    @SourceEntityRecordID nvarchar(MAX)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Recommendation]
    SET
        [RecommendationRunID] = @RecommendationRunID,
        [SourceEntityID] = @SourceEntityID,
        [SourceEntityRecordID] = @SourceEntityRecordID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwRecommendations]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecommendation] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the Recommendation table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateRecommendation
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateRecommendation
ON [${flyway:defaultSchema}].[Recommendation]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[Recommendation]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[Recommendation] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Recommendations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecommendation] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Recommendations */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendations
-- Item: spDeleteRecommendation
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR Recommendation
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteRecommendation]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteRecommendation]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[Recommendation]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecommendation] TO [cdp_Integration]
    

/* spDelete Permissions for Recommendations */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecommendation] TO [cdp_Integration]



/* spCreate SQL for Recommendation Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendation Runs
-- Item: spCreateRecommendationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecommendationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecommendationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecommendationRun]
    @ID uniqueidentifier = NULL,
    @RecommendationProviderID uniqueidentifier,
    @StartDate datetime,
    @EndDate datetime,
    @Status nvarchar(50),
    @Description nvarchar(MAX),
    @RunByUserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecommendationRun]
            (
                [ID],
                [RecommendationProviderID],
                [StartDate],
                [EndDate],
                [Status],
                [Description],
                [RunByUserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @RecommendationProviderID,
                @StartDate,
                @EndDate,
                @Status,
                @Description,
                @RunByUserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecommendationRun]
            (
                [RecommendationProviderID],
                [StartDate],
                [EndDate],
                [Status],
                [Description],
                [RunByUserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @RecommendationProviderID,
                @StartDate,
                @EndDate,
                @Status,
                @Description,
                @RunByUserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecommendationRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationRun] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Recommendation Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationRun] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Recommendation Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendation Runs
-- Item: spUpdateRecommendationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR RecommendationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateRecommendationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateRecommendationRun]
    @ID uniqueidentifier,
    @RecommendationProviderID uniqueidentifier,
    @StartDate datetime,
    @EndDate datetime,
    @Status nvarchar(50),
    @Description nvarchar(MAX),
    @RunByUserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecommendationRun]
    SET
        [RecommendationProviderID] = @RecommendationProviderID,
        [StartDate] = @StartDate,
        [EndDate] = @EndDate,
        [Status] = @Status,
        [Description] = @Description,
        [RunByUserID] = @RunByUserID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwRecommendationRuns]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecommendationRun] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the RecommendationRun table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateRecommendationRun
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateRecommendationRun
ON [${flyway:defaultSchema}].[RecommendationRun]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecommendationRun]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[RecommendationRun] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Recommendation Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecommendationRun] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Recommendation Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendation Runs
-- Item: spDeleteRecommendationRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR RecommendationRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteRecommendationRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteRecommendationRun]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[RecommendationRun]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecommendationRun] TO [cdp_Integration]
    

/* spDelete Permissions for Recommendation Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecommendationRun] TO [cdp_Integration]



/* spCreate SQL for Recommendation Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendation Items
-- Item: spCreateRecommendationItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecommendationItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecommendationItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecommendationItem]
    @ID uniqueidentifier = NULL,
    @RecommendationID uniqueidentifier,
    @DestinationEntityID uniqueidentifier,
    @DestinationEntityRecordID nvarchar(450),
    @MatchProbability decimal(18, 15)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecommendationItem]
            (
                [ID],
                [RecommendationID],
                [DestinationEntityID],
                [DestinationEntityRecordID],
                [MatchProbability]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @RecommendationID,
                @DestinationEntityID,
                @DestinationEntityRecordID,
                @MatchProbability
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecommendationItem]
            (
                [RecommendationID],
                [DestinationEntityID],
                [DestinationEntityRecordID],
                [MatchProbability]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @RecommendationID,
                @DestinationEntityID,
                @DestinationEntityRecordID,
                @MatchProbability
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecommendationItems] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationItem] TO [cdp_Developer], [cdp_Integration]
    

/* spCreate Permissions for Recommendation Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecommendationItem] TO [cdp_Developer], [cdp_Integration]



/* spUpdate SQL for Recommendation Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendation Items
-- Item: spUpdateRecommendationItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR RecommendationItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateRecommendationItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateRecommendationItem]
    @ID uniqueidentifier,
    @RecommendationID uniqueidentifier,
    @DestinationEntityID uniqueidentifier,
    @DestinationEntityRecordID nvarchar(450),
    @MatchProbability decimal(18, 15)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecommendationItem]
    SET
        [RecommendationID] = @RecommendationID,
        [DestinationEntityID] = @DestinationEntityID,
        [DestinationEntityRecordID] = @DestinationEntityRecordID,
        [MatchProbability] = @MatchProbability
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwRecommendationItems]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecommendationItem] TO [cdp_Developer], [cdp_Integration]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the RecommendationItem table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateRecommendationItem
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateRecommendationItem
ON [${flyway:defaultSchema}].[RecommendationItem]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecommendationItem]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[RecommendationItem] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Recommendation Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecommendationItem] TO [cdp_Developer], [cdp_Integration]



/* spDelete SQL for Recommendation Items */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Recommendation Items
-- Item: spDeleteRecommendationItem
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR RecommendationItem
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteRecommendationItem]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteRecommendationItem]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[RecommendationItem]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecommendationItem] TO [cdp_Integration]
    

/* spDelete Permissions for Recommendation Items */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecommendationItem] TO [cdp_Integration]



/* spCreate SQL for Record Change Replay Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Change Replay Runs
-- Item: spCreateRecordChangeReplayRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR RecordChangeReplayRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateRecordChangeReplayRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateRecordChangeReplayRun]
    @ID uniqueidentifier = NULL,
    @StartedAt datetime,
    @EndedAt datetime,
    @Status nvarchar(50),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[RecordChangeReplayRun]
            (
                [ID],
                [StartedAt],
                [EndedAt],
                [Status],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @StartedAt,
                @EndedAt,
                @Status,
                @UserID
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[RecordChangeReplayRun]
            (
                [StartedAt],
                [EndedAt],
                [Status],
                [UserID]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @StartedAt,
                @EndedAt,
                @Status,
                @UserID
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwRecordChangeReplayRuns] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordChangeReplayRun] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Record Change Replay Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateRecordChangeReplayRun] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Record Change Replay Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Change Replay Runs
-- Item: spUpdateRecordChangeReplayRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR RecordChangeReplayRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateRecordChangeReplayRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateRecordChangeReplayRun]
    @ID uniqueidentifier,
    @StartedAt datetime,
    @EndedAt datetime,
    @Status nvarchar(50),
    @UserID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecordChangeReplayRun]
    SET
        [StartedAt] = @StartedAt,
        [EndedAt] = @EndedAt,
        [Status] = @Status,
        [UserID] = @UserID
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwRecordChangeReplayRuns]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordChangeReplayRun] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the RecordChangeReplayRun table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateRecordChangeReplayRun
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateRecordChangeReplayRun
ON [${flyway:defaultSchema}].[RecordChangeReplayRun]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[RecordChangeReplayRun]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[RecordChangeReplayRun] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Record Change Replay Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateRecordChangeReplayRun] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Record Change Replay Runs */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Record Change Replay Runs
-- Item: spDeleteRecordChangeReplayRun
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR RecordChangeReplayRun
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteRecordChangeReplayRun]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteRecordChangeReplayRun]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[RecordChangeReplayRun]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecordChangeReplayRun] TO [cdp_Integration]
    

/* spDelete Permissions for Record Change Replay Runs */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteRecordChangeReplayRun] TO [cdp_Integration]



/* spCreate SQL for Entity Relationship Display Components */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Relationship Display Components
-- Item: spCreateEntityRelationshipDisplayComponent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- CREATE PROCEDURE FOR EntityRelationshipDisplayComponent
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spCreateEntityRelationshipDisplayComponent]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spCreateEntityRelationshipDisplayComponent]
    @ID uniqueidentifier = NULL,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @RelationshipType nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @InsertedRow TABLE ([ID] UNIQUEIDENTIFIER)
    
    IF @ID IS NOT NULL
    BEGIN
        -- User provided a value, use it
        INSERT INTO [${flyway:defaultSchema}].[EntityRelationshipDisplayComponent]
            (
                [ID],
                [Name],
                [Description],
                [RelationshipType]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @ID,
                @Name,
                @Description,
                @RelationshipType
            )
    END
    ELSE
    BEGIN
        -- No value provided, let database use its default (e.g., NEWSEQUENTIALID())
        INSERT INTO [${flyway:defaultSchema}].[EntityRelationshipDisplayComponent]
            (
                [Name],
                [Description],
                [RelationshipType]
            )
        OUTPUT INSERTED.[ID] INTO @InsertedRow
        VALUES
            (
                @Name,
                @Description,
                @RelationshipType
            )
    END
    -- return the new record from the base view, which might have some calculated fields
    SELECT * FROM [${flyway:defaultSchema}].[vwEntityRelationshipDisplayComponents] WHERE [ID] = (SELECT [ID] FROM @InsertedRow)
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRelationshipDisplayComponent] TO [cdp_Integration], [cdp_Developer]
    

/* spCreate Permissions for Entity Relationship Display Components */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spCreateEntityRelationshipDisplayComponent] TO [cdp_Integration], [cdp_Developer]



/* spUpdate SQL for Entity Relationship Display Components */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Relationship Display Components
-- Item: spUpdateEntityRelationshipDisplayComponent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- UPDATE PROCEDURE FOR EntityRelationshipDisplayComponent
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spUpdateEntityRelationshipDisplayComponent]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spUpdateEntityRelationshipDisplayComponent]
    @ID uniqueidentifier,
    @Name nvarchar(255),
    @Description nvarchar(MAX),
    @RelationshipType nvarchar(20)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityRelationshipDisplayComponent]
    SET
        [Name] = @Name,
        [Description] = @Description,
        [RelationshipType] = @RelationshipType
    WHERE
        [ID] = @ID

    -- return the updated record so the caller can see the updated values and any calculated fields
    SELECT
                                        *
                                    FROM
                                        [${flyway:defaultSchema}].[vwEntityRelationshipDisplayComponents]
                                    WHERE
                                        [ID] = @ID
                                    
END
GO

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityRelationshipDisplayComponent] TO [cdp_Integration], [cdp_Developer]
GO

------------------------------------------------------------
----- TRIGGER FOR __mj_UpdatedAt field for the EntityRelationshipDisplayComponent table
------------------------------------------------------------
DROP TRIGGER IF EXISTS [${flyway:defaultSchema}].trgUpdateEntityRelationshipDisplayComponent
GO
CREATE TRIGGER [${flyway:defaultSchema}].trgUpdateEntityRelationshipDisplayComponent
ON [${flyway:defaultSchema}].[EntityRelationshipDisplayComponent]
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE
        [${flyway:defaultSchema}].[EntityRelationshipDisplayComponent]
    SET
        __mj_UpdatedAt = GETUTCDATE()
    FROM
        [${flyway:defaultSchema}].[EntityRelationshipDisplayComponent] AS _organicTable
    INNER JOIN
        INSERTED AS I ON
        _organicTable.[ID] = I.[ID];
END;
GO
        

/* spUpdate Permissions for Entity Relationship Display Components */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spUpdateEntityRelationshipDisplayComponent] TO [cdp_Integration], [cdp_Developer]



/* spDelete SQL for Entity Relationship Display Components */
-----------------------------------------------------------------
-- SQL Code Generation
-- Entity: Entity Relationship Display Components
-- Item: spDeleteEntityRelationshipDisplayComponent
--
-- This was generated by the MemberJunction CodeGen tool.
-- This file should NOT be edited by hand.
-----------------------------------------------------------------

------------------------------------------------------------
----- DELETE PROCEDURE FOR EntityRelationshipDisplayComponent
------------------------------------------------------------
DROP PROCEDURE IF EXISTS [${flyway:defaultSchema}].[spDeleteEntityRelationshipDisplayComponent]
GO

CREATE PROCEDURE [${flyway:defaultSchema}].[spDeleteEntityRelationshipDisplayComponent]
    @ID uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM
        [${flyway:defaultSchema}].[EntityRelationshipDisplayComponent]
    WHERE
        [ID] = @ID


    SELECT @ID AS [ID] -- Return the primary key to indicate we successfully deleted the record
END
GO
GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEntityRelationshipDisplayComponent] TO [cdp_Integration]
    

/* spDelete Permissions for Entity Relationship Display Components */

GRANT EXECUTE ON [${flyway:defaultSchema}].[spDeleteEntityRelationshipDisplayComponent] TO [cdp_Integration]



