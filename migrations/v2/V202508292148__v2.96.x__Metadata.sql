-- SQL Logging Session
-- Session ID: d976bb3c-2837-465a-8ef9-1db8b1dd6498
-- Started: 2025-08-30T02:51:48.590Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save MJ: Component Libraries (core SP call only)
DECLARE @Name_b208f5c1 NVARCHAR(500),
@DisplayName_b208f5c1 NVARCHAR(500),
@Version_b208f5c1 NVARCHAR(100),
@GlobalVariable_b208f5c1 NVARCHAR(255),
@Category_b208f5c1 NVARCHAR(100),
@CDNUrl_b208f5c1 NVARCHAR(1000),
@CDNCssUrl_b208f5c1 NVARCHAR(1000),
@Description_b208f5c1 NVARCHAR(MAX),
@Status_b208f5c1 NVARCHAR(20),
@LintRules_b208f5c1 NVARCHAR(MAX),
@Dependencies_b208f5c1 NVARCHAR(MAX),
@ID_b208f5c1 UNIQUEIDENTIFIER
SET
  @Name_b208f5c1 = N'ApexCharts'
SET
  @DisplayName_b208f5c1 = N'ApexCharts'
SET
  @Version_b208f5c1 = N'3.45.1'
SET
  @GlobalVariable_b208f5c1 = N'ApexCharts'
SET
  @Category_b208f5c1 = N'Charting'
SET
  @CDNUrl_b208f5c1 = N'https://cdn.jsdelivr.net/npm/apexcharts@3.45.1/dist/apexcharts.min.js'
SET
  @CDNCssUrl_b208f5c1 = N'https://cdn.jsdelivr.net/npm/apexcharts@3.45.1/dist/apexcharts.css'
SET
  @Description_b208f5c1 = N'Modern interactive JavaScript charts library'
SET
  @Status_b208f5c1 = N'Active'
SET
  @LintRules_b208f5c1 = N'{"initialization":{"constructorName":"ApexCharts","requiresNew":true,"elementType":"div","requiredConfig":["chart","series"]},"lifecycle":{"requiredMethods":[],"cleanupMethods":["destroy"],"updateMethods":["updateOptions","updateSeries","appendSeries"]},"validators":{"checkRenderCall":{"description":"Ensure ApexCharts instances call render() after creation","severity":"critical","validate":"/**\n * Ensure ApexCharts instances call render() after creation\n * @param {Object} ast - The full AST\n * @param {Object} path - Current node path being validated\n * @param {Object} t - Babel types\n * @param {Object} context - Additional context\n * @returns {Object|null} Violation object or null if valid\n */\n(ast, path, t, context) => {\n  if (t.isNewExpression(path.node) && \n      t.isIdentifier(path.node.callee) && \n      path.node.callee.name === ''ApexCharts'') {\n    \n    // Check if this is assigned to a variable\n    if (t.isVariableDeclarator(path.parent)) {\n      const varName = t.isIdentifier(path.parent.id) ? path.parent.id.name : null;\n      \n      if (varName) {\n        // Look for render call on this variable\n        let hasRender = false;\n        const parentScope = path.getFunctionParent();\n        \n        if (parentScope) {\n          parentScope.traverse({\n            CallExpression(callPath) {\n              if (t.isMemberExpression(callPath.node.callee) &&\n                  t.isIdentifier(callPath.node.callee.object) &&\n                  callPath.node.callee.object.name === varName &&\n                  t.isIdentifier(callPath.node.callee.property) &&\n                  callPath.node.callee.property.name === ''render'') {\n                hasRender = true;\n              }\n            }\n          });\n        }\n        \n        if (!hasRender) {\n          return {\n            rule: ''apexcharts-missing-render'',\n            severity: ''critical'',\n            message: ''ApexCharts instances must call .render() to display the chart'',\n            line: path.node.loc?.start.line || 0,\n            column: path.node.loc?.start.column || 0,\n            fix: `$' + '{varName}.render();`\n          };\n        }\n      }\n    }\n  }\n  return null;\n}"},"checkDestroyInCleanup":{"description":"Ensure ApexCharts instances are destroyed in cleanup","severity":"high","validate":"/**\n * Ensure ApexCharts instances are destroyed in cleanup\n * @param {Object} ast - The full AST\n * @param {Object} path - Current node path being validated\n * @param {Object} t - Babel types\n * @param {Object} context - Additional context\n * @returns {Object|null} Violation object or null if valid\n */\n(ast, path, t, context) => {\n  if (t.isNewExpression(path.node) && \n      t.isIdentifier(path.node.callee) && \n      path.node.callee.name === ''ApexCharts'') {\n    \n    // Check if we''re in a useEffect\n    let useEffectPath = path;\n    while (useEffectPath) {\n      if (t.isCallExpression(useEffectPath.node) && \n          t.isIdentifier(useEffectPath.node.callee) &&\n          useEffectPath.node.callee.name === ''useEffect'') {\n        \n        // Check for cleanup return\n        const effectFn = useEffectPath.node.arguments[0];\n        if (t.isArrowFunctionExpression(effectFn) || t.isFunctionExpression(effectFn)) {\n          const body = effectFn.body;\n          let hasCleanup = false;\n          \n          if (t.isBlockStatement(body)) {\n            for (const stmt of body.body) {\n              if (t.isReturnStatement(stmt) && stmt.argument) {\n                // Check if the return contains destroy call\n                const returnArg = stmt.argument;\n                if (t.isArrowFunctionExpression(returnArg) || t.isFunctionExpression(returnArg)) {\n                  hasCleanup = true;\n                }\n              }\n            }\n          }\n          \n          if (!hasCleanup) {\n            return {\n              rule: ''apexcharts-missing-cleanup'',\n              severity: ''high'',\n              message: ''ApexCharts instances must be destroyed in useEffect cleanup'',\n              line: path.node.loc?.start.line || 0,\n              column: path.node.loc?.start.column || 0,\n              fix: ''return () => { chart?.destroy(); }''\n            };\n          }\n        }\n        break;\n      }\n      useEffectPath = useEffectPath.parentPath;\n    }\n  }\n  return null;\n}"},"checkOptionsStructure":{"description":"Validate ApexCharts options structure","severity":"high","validate":"/**\n * Validate ApexCharts options structure\n * @param {Object} ast - The full AST\n * @param {Object} path - Current node path being validated\n * @param {Object} t - Babel types\n * @param {Object} context - Additional context\n * @returns {Object|null} Violation object or null if valid\n */\n(ast, path, t, context) => {\n  if (t.isNewExpression(path.node) && \n      t.isIdentifier(path.node.callee) && \n      path.node.callee.name === ''ApexCharts'' &&\n      path.node.arguments[1]) {\n    \n    const optionsArg = path.node.arguments[1];\n    \n    if (t.isObjectExpression(optionsArg)) {\n      const properties = optionsArg.properties;\n      \n      // Check for required properties\n      const hasChart = properties.some(prop => \n        t.isObjectProperty(prop) &&\n        t.isIdentifier(prop.key) &&\n        prop.key.name === ''chart''\n      );\n      \n      const hasSeries = properties.some(prop => \n        t.isObjectProperty(prop) &&\n        t.isIdentifier(prop.key) &&\n        prop.key.name === ''series''\n      );\n      \n      if (!hasChart) {\n        return {\n          rule: ''apexcharts-missing-chart-config'',\n          severity: ''high'',\n          message: ''ApexCharts options must include a \"chart\" property'',\n          line: optionsArg.loc?.start.line || 0,\n          column: optionsArg.loc?.start.column || 0,\n          fix: ''chart: { type: \"bar\", height: 350 }''\n        };\n      }\n      \n      if (!hasSeries) {\n        return {\n          rule: ''apexcharts-missing-series'',\n          severity: ''high'',\n          message: ''ApexCharts options must include a \"series\" property'',\n          line: optionsArg.loc?.start.line || 0,\n          column: optionsArg.loc?.start.column || 0,\n          fix: ''series: [{ name: \"Series 1\", data: [] }]''\n        };\n      }\n    }\n  }\n  return null;\n}"},"checkSeriesDataFormat":{"description":"Validate data is in correct ApexCharts series format","severity":"critical","validate":"// Validates that data passed to ApexCharts is in the correct series format\n(ast, path, t, context) => {\n  // Look for chart creation or series updates\n  if (t.isNewExpression(path.node) && path.node.callee.name === ''ApexCharts'') {\n    const configArg = path.node.arguments[1];\n    if (configArg && t.isObjectExpression(configArg)) {\n      const seriesProp = configArg.properties.find(p => \n        t.isObjectProperty(p) && \n        t.isIdentifier(p.key) && \n        p.key.name === ''series''\n      );\n      \n      if (seriesProp && t.isIdentifier(seriesProp.value)) {\n        // Track the variable name for later validation\n        context.apexSeriesVars = context.apexSeriesVars || new Set();\n        context.apexSeriesVars.add(seriesProp.value.name);\n      }\n    }\n  }\n  \n  // Check updateSeries calls\n  if (t.isMemberExpression(path.node) && \n      t.isIdentifier(path.node.property) && \n      path.node.property.name === ''updateSeries'') {\n    const parent = path.parent;\n    if (t.isCallExpression(parent)) {\n      const arg = parent.arguments[0];\n      if (arg && t.isIdentifier(arg)) {\n        // Flag for validation - series data should be array of objects with name and data\n        context.violations.push({\n          severity: ''medium'',\n          message: `Verify that ''$' + '{arg.name}'' is formatted as ApexCharts series: [{name: string, data: [{x, y}]}]`,\n          line: path.node.loc?.start.line,\n          column: path.node.loc?.start.column,\n          suggestion: ''Transform data to: selectedMetrics.map(metric => ({ name: metric, data: points.map(p => ({x: timestamp, y: value})) }))''\n        });\n      }\n    }\n  }\n  \n  // Look for common data format mistakes\n  if (t.isObjectExpression(path.node)) {\n    const hasDateProp = path.node.properties.some(p => \n      t.isObjectProperty(p) && t.isIdentifier(p.key) && p.key.name === ''date''\n    );\n    const hasDurationProp = path.node.properties.some(p => \n      t.isObjectProperty(p) && t.isIdentifier(p.key) && p.key.name === ''duration''\n    );\n    const hasCostProp = path.node.properties.some(p => \n      t.isObjectProperty(p) && t.isIdentifier(p.key) && p.key.name === ''cost''\n    );\n    \n    // This looks like processed data that needs transformation\n    if (hasDateProp && (hasDurationProp || hasCostProp)) {\n      // Check if this is being passed to chart\n      let parent = path.parent;\n      let depth = 0;\n      while (parent && depth < 5) {\n        if (t.isJSXAttribute(parent) && parent.name?.name === ''seriesData'') {\n          context.violations.push({\n            severity: ''critical'',\n            message: ''Data structure {date, duration, cost} needs transformation to ApexCharts series format'',\n            line: path.node.loc?.start.line,\n            column: path.node.loc?.start.column,\n            suggestion: ''Transform to: [{name: \"Duration\", data: [{x: timestamp, y: value}]}, ...]''\n          });\n          break;\n        }\n        parent = parent.parent;\n        depth++;\n      }\n    }\n  }\n}"},"checkChartRefManagement":{"description":"Ensure chart instances are properly stored in refs for exports","severity":"low","validate":"// Validates that chart instances are properly stored and exposed via refs\n(ast, path, t, context) => {\n  // Initialize tracking sets if not already done\n  context.apexChartVars = context.apexChartVars || new Set();\n  context.apexChartVarsWithRefWarning = context.apexChartVarsWithRefWarning || new Set();\n  \n  // Check for new ApexCharts creation\n  if (t.isNewExpression(path.node) && path.node.callee.name === ''ApexCharts'') {\n    const parent = path.parent;\n    \n    // Check if the chart instance is being stored\n    if (t.isVariableDeclarator(parent)) {\n      const varName = parent.id.name;\n      context.apexChartVars.add(varName);\n      \n      // Now check if this variable is attached to a ref\n      const scope = path.scope;\n      const binding = scope.getBinding(varName); \n      if (binding) {\n        let isAttachedToRef = false;\n        \n        for (const refPath of binding.referencePaths) {\n          // Check for patterns like: chartRef.current = chart\n          if (t.isAssignmentExpression(refPath.parent) &&\n              t.isMemberExpression(refPath.parent.left) && \n              refPath.parent.left.property?.name === ''current'') {\n            isAttachedToRef = true;\n            break;\n          }\n          // Check for: chartRef.current._chart = chart\n          if (t.isAssignmentExpression(refPath.parent) &&\n              t.isMemberExpression(refPath.parent.left) &&\n              refPath.parent.left.property?.name === ''_chart'') {\n            isAttachedToRef = true;\n            break;\n          }\n        }\n        \n        if (!isAttachedToRef) {\n          // Mark that we already warned about this chart variable\n          context.apexChartVarsWithRefWarning.add(varName);\n          context.violations.push({\n            severity: ''low'',  \n            message: `ApexCharts instance ''$' + '{varName}'' should be attached to a ref for export functionality`,\n            line: path.node.loc?.start.line,\n            column: path.node.loc?.start.column,\n            suggestion: ''After creating chart, store it: chartRef.current = chart;''\n          });\n        }\n      }\n    }\n  }\n  \n  // Check for dataURI usage without proper ref\n  if (t.isMemberExpression(path.node) && \n      t.isIdentifier(path.node.property) && \n      path.node.property.name === ''dataURI'') {\n    const object = path.node.object;\n    \n    // Check if it''s accessing through a ref\n    if (t.isMemberExpression(object)) {\n      if (!object.property || object.property.name !== ''current'') {\n        context.violations.push({\n          severity: ''low'',\n          message: ''dataURI() should be called on chart instance stored in ref.current'',\n          line: path.node.loc?.start.line,\n          column: path.node.loc?.start.column,\n          suggestion: ''Use: chartRef.current?.dataURI() or chart.dataURI()''\n        });\n      }\n    }\n  }\n  \n  // Check for chart.render() calls - but skip if we already warned about this chart variable\n  if (t.isCallExpression(path.node) && \n      t.isMemberExpression(path.node.callee) &&\n      path.node.callee.object?.name === ''chart'' &&\n      path.node.callee.property?.name === ''render'') {\n    \n    const chartVarName = path.node.callee.object.name;\n    \n    // Skip if we already warned about this chart variable not being in a ref\n    if (context.apexChartVarsWithRefWarning && context.apexChartVarsWithRefWarning.has(chartVarName)) {\n      return; // Don''t duplicate the warning\n    }\n    \n    // Also skip if this chart variable was properly created and tracked\n    if (context.apexChartVars && context.apexChartVars.has(chartVarName)) {\n      // We already checked this variable when it was created\n      return;\n    }\n    \n    // This is a render() call on a chart we haven''t seen created (might be from props/params)\n    // Check if it''s stored in a ref in the current scope\n    let foundChartStorage = false;\n    let currentPath = path;\n    \n    // Look up the tree for the containing function/block\n    while (currentPath && !t.isFunctionDeclaration(currentPath.node) && \n           !t.isFunctionExpression(currentPath.node) && \n           !t.isArrowFunctionExpression(currentPath.node)) {\n      currentPath = currentPath.parentPath;\n    }\n    \n    if (currentPath) {\n      // Check if chartRef.current = chart exists in this scope\n      currentPath.traverse({\n        AssignmentExpression(assignPath) {\n          if (t.isMemberExpression(assignPath.node.left) &&\n              assignPath.node.left.property?.name === ''current'' &&\n              t.isIdentifier(assignPath.node.right) &&\n              assignPath.node.right.name === chartVarName) {\n            foundChartStorage = true;\n          }\n        }\n      });\n    }\n    \n    if (!foundChartStorage) {\n      context.violations.push({\n        severity: ''low'',\n        message: `Chart instance ''$' + '{chartVarName}'' may not be stored in ref for export functionality`,\n        line: path.node.loc?.start.line,\n        column: path.node.loc?.start.column,\n        suggestion: ''Store chart in ref: chartRef.current = chart;''\n      });\n    }\n  }\n}"},"checkAnomalyFormat":{"description":"Validate anomaly data format for annotations","severity":"medium","validate":"// Validates that anomaly data for ApexCharts annotations is correctly formatted\n(ast, path, t, context) => {\n  // Look for annotations configuration in chart options\n  if (t.isObjectProperty(path.node) && \n      t.isIdentifier(path.node.key) && \n      path.node.key.name === ''annotations'') {\n     \n    const value = path.node.value;\n    if (t.isObjectExpression(value)) {\n      // Check for points property\n      const pointsProp = value.properties.find(p => \n        t.isObjectProperty(p) && \n        t.isIdentifier(p.key) && \n        p.key.name === ''points'' \n      );\n      \n      if (pointsProp) {\n        // Check if it''s mapping over anomalies\n        if (t.isCallExpression(pointsProp.value) && \n            t.isMemberExpression(pointsProp.value.callee) &&\n            pointsProp.value.callee.property?.name === ''map'') {\n          \n          const mapArg = pointsProp.value.arguments[0];\n          if (t.isArrowFunctionExpression(mapArg) || t.isFunctionExpression(mapArg)) {\n            const body = mapArg.body;\n            \n            // Check the structure being returned\n            if (t.isObjectExpression(body) || \n                (t.isBlockStatement(body) && body.body.length > 0)) {\n              \n              // Look for common mistakes\n              const checkForDateField = (obj) => {\n                if (t.isObjectExpression(obj)) {\n                  const hasDate = obj.properties.some(p => \n                    t.isObjectProperty(p) && \n                    t.isIdentifier(p.key) && \n                    p.key.name === ''date''\n                  );\n                  const hasX = obj.properties.some(p => \n                    t.isObjectProperty(p) && \n                    t.isIdentifier(p.key) && \n                    p.key.name === ''x''\n                  );\n                  \n                  if (hasDate && !hasX) {\n                    context.violations.push({\n                      severity: ''critical'',\n                      message: ''Anomaly annotations should use \"x\" property with timestamp, not \"date\"'',\n                      line: obj.loc?.start.line,\n                      column: obj.loc?.start.column,\n                      suggestion: ''Change to: { x: new Date(anomaly.date).getTime(), y: anomaly.value, ... }''\n                    });\n                  }\n                }\n              };\n              \n              if (t.isObjectExpression(body)) {\n                checkForDateField(body);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  // Check for anomaly data being set in state\n  if (t.isCallExpression(path.node) && \n      t.isIdentifier(path.node.callee) && \n      path.node.callee.name === ''setAnomalies'') {\n    \n    const arg = path.node.arguments[0];\n    if (t.isArrayExpression(arg) && arg.elements.length > 0) {\n      const firstElement = arg.elements[0];\n      \n      if (t.isObjectExpression(firstElement)) {\n        const hasDate = firstElement.properties.some(p => \n          t.isObjectProperty(p) && \n          t.isIdentifier(p.key) && \n          p.key.name === ''date''\n        );\n        const hasX = firstElement.properties.some(p => \n          t.isObjectProperty(p) && \n          t.isIdentifier(p.key) && \n          p.key.name === ''x''\n        );\n        \n        if (hasDate && !hasX) {\n          context.violations.push({\n            severity: ''medium'',\n            message: ''Anomaly data should include \"x\" property for ApexCharts compatibility'',\n            line: firstElement.loc?.start.line,\n            column: firstElement.loc?.start.column,\n            suggestion: ''Include: { x: new Date(point.date), y: value, metric: metricName }''\n          });\n        }\n      }\n    }\n  }\n}"}}}'
SET
  @ID_b208f5c1 = '91E9DB43-6688-4838-939E-C4FC1F15C6CE'
EXEC [${flyway:defaultSchema}].spUpdateComponentLibrary @Name = @Name_b208f5c1,
  @DisplayName = @DisplayName_b208f5c1,
  @Version = @Version_b208f5c1,
  @GlobalVariable = @GlobalVariable_b208f5c1,
  @Category = @Category_b208f5c1,
  @CDNUrl = @CDNUrl_b208f5c1,
  @CDNCssUrl = @CDNCssUrl_b208f5c1,
  @Description = @Description_b208f5c1,
  @Status = @Status_b208f5c1,
  @LintRules = @LintRules_b208f5c1,
  @Dependencies = @Dependencies_b208f5c1,
  @ID = @ID_b208f5c1;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_96fe2070 NVARCHAR(MAX),
@Name_96fe2070 NVARCHAR(500),
@Version_96fe2070 NVARCHAR(50),
@VersionSequence_96fe2070 INT,
@Title_96fe2070 NVARCHAR(1000),
@Description_96fe2070 NVARCHAR(MAX),
@Type_96fe2070 NVARCHAR(255),
@Status_96fe2070 NVARCHAR(50),
@DeveloperName_96fe2070 NVARCHAR(255),
@DeveloperEmail_96fe2070 NVARCHAR(255),
@DeveloperOrganization_96fe2070 NVARCHAR(255),
@SourceRegistryID_96fe2070 UNIQUEIDENTIFIER,
@ReplicatedAt_96fe2070 DATETIMEOFFSET,
@LastSyncedAt_96fe2070 DATETIMEOFFSET,
@Specification_96fe2070 NVARCHAR(MAX),
@FunctionalRequirements_96fe2070 NVARCHAR(MAX),
@TechnicalDesign_96fe2070 NVARCHAR(MAX),
@FunctionalRequirementsVector_96fe2070 NVARCHAR(MAX),
@TechnicalDesignVector_96fe2070 NVARCHAR(MAX),
@HasCustomProps_96fe2070 BIT,
@HasCustomEvents_96fe2070 BIT,
@RequiresData_96fe2070 BIT,
@DependencyCount_96fe2070 INT,
@TechnicalDesignVectorEmbeddingModelID_96fe2070 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_96fe2070 NVARCHAR(MAX),
@HasRequiredCustomProps_96fe2070 BIT,
@ID_96fe2070 UNIQUEIDENTIFIER
SET
  @Namespace_96fe2070 = N'Admin/Entities'
SET
  @Name_96fe2070 = N'EntityBrowser'
SET
  @Version_96fe2070 = N'1.0.0'
SET
  @VersionSequence_96fe2070 = 1
SET
  @Title_96fe2070 = N'Entity Browser'
SET
  @Description_96fe2070 = N'A comprehensive multi-panel dashboard component for browsing and exploring entities in a data system. Features a three-panel layout with collapsible filters, main entity list (grid/card view), and sliding details panel.'
SET
  @Type_96fe2070 = N'Dashboard'
SET
  @Status_96fe2070 = N'Published'
SET
  @Specification_96fe2070 = N'{"name":"EntityBrowser","title":"Entity Browser","description":"A comprehensive entity browser with multi-panel display showing entities in a grid or card view with a sliding details panel, collapsible filters, sorting, and entity record opening capability.","type":"dashboard","functionalRequirements":"## Entity Browser Requirements\n\n### Core Functionality\n- Display entities in a responsive grid or card layout based on user preference\n- Allow users to select view mode (grid vs card)\n- Click on an entity to slide in a details panel from the right\n- Show entity metadata including fields and relationships in the details panel\n- Provide a collapsible filter panel on the left side\n- Support sorting by multiple fields with visual indicators\n- Include a search bar for quick entity filtering\n- Provide an ''Open'' button to trigger the OpenEntityRecord callback\n- Remember user''s last selected entity and view preferences\n\n### UX Considerations\n- Smooth animations for panel transitions\n- Responsive design that works on different screen sizes\n- Loading states while fetching data\n- Empty states with helpful messages\n- Keyboard navigation support (arrow keys, tab, enter)\n- Visual feedback for hover and selection states\n- Maintain scroll position when switching between entities","dataRequirements":{"mode":"views","entities":[{"name":"Entities","description":"Metadata about all entities in the system","displayFields":["ID","Name","DisplayName","NameSuffix","Description","SchemaName","BaseTable","BaseView"],"filterFields":["SchemaName","BaseTable"],"sortFields":["Name","DisplayName"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the entity"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the entity"},{"name":"DisplayName","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly display name for the entity"},{"name":"NameSuffix","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Optional suffix appended to entity names for display purposes"},{"name":"Description","sequence":5,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Description of the entity"},{"name":"SchemaName","sequence":6,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Database schema name"},{"name":"BaseTable","sequence":7,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Base table in the database"},{"name":"BaseView","sequence":8,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Base view used for the entity"}],"permissionLevelNeeded":["read"],"usageContext":"Main entity list display and filtering"},{"name":"Entity Fields","description":"Fields belonging to each entity","displayFields":["Name","DisplayName","Type","Length","AllowsNull","IsPrimaryKey","IsUnique"],"filterFields":["EntityID"],"sortFields":["Sequence","Name"],"fieldMetadata":[{"name":"EntityID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to parent entity"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Field name"},{"name":"DisplayName","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly field name"},{"name":"Type","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Data type of the field"},{"name":"Length","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum length for string fields"},{"name":"AllowsNull","sequence":6,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field allows null values"},{"name":"IsPrimaryKey","sequence":7,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field is part of primary key"},{"name":"IsUnique","sequence":8,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field must be unique"},{"name":"Sequence","sequence":9,"defaultInView":false,"type":"int","allowsNull":false,"isPrimaryKey":false,"description":"Display order of the field"}],"permissionLevelNeeded":["read"],"usageContext":"Details panel to show entity fields"},{"name":"Entity Relationships","description":"Relationships between entities","displayFields":["RelatedEntity","Type","DisplayName","RelatedEntityJoinField"],"filterFields":["EntityID"],"sortFields":["Sequence","RelatedEntity"],"fieldMetadata":[{"name":"EntityID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to parent entity"},{"name":"RelatedEntity","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"The related entity in the relationship"},{"name":"Type","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Type of relationship (One to Many, Many to One, etc.)"},{"name":"DisplayName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly name for the relationship"},{"name":"RelatedEntityJoinField","sequence":5,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"The field in the related entity that joins to this entity"},{"name":"Sequence","sequence":6,"defaultInView":false,"type":"int","allowsNull":false,"isPrimaryKey":false,"description":"Display order"}],"permissionLevelNeeded":["read"],"usageContext":"Details panel to show entity relationships"}],"queries":[],"description":"This component requires access to entity metadata including entities, their fields, and relationships to provide a comprehensive entity browsing experience"},"technicalDesign":"## Technical Architecture\n\n### Component Structure\n- **Root Component (EntityBrowser)**: Manages overall layout and state coordination\n- **EntityList (Child)**: Displays entities in grid/card view with sorting\n- **EntityDetails (Child)**: Sliding panel showing entity fields and relationships\n- **EntityFilter (Child)**: Collapsible filter panel with dynamic filters\n\n### State Management\n- Selected entity ID (persisted in savedUserSettings)\n- View mode (grid/card) (persisted)\n- Active filters (persisted)\n- Sort configuration (persisted)\n- Panel visibility states (details open, filters collapsed)\n- Search query\n- Loading states for async operations\n\n### Layout\n```\n+------------------+------------------------+------------------+\n|                  |                        |                  |\n|   Filter Panel   |    Entity Grid/Cards   |  Details Panel   |\n|   (Collapsible)  |    (Main Content)      |    (Sliding)     |\n|                  |                        |                  |\n|  [Schema Filter] |  +-----+  +-----+      |  Entity: Orders  |\n|  [Table Filter]  |  | Card |  | Card |     |                  |\n|  [Search Box]    |  +-----+  +-----+      |  Fields:         |\n|                  |                        |  - ID            |\n|  Sort By:        |  +-----+  +-----+      |  - CustomerID    |\n|  [Name ↓]        |  | Card |  | Card |     |  - OrderDate     |\n|                  |  +-----+  +-----+      |                  |\n|                  |                        |  Relationships:  |\n|                  |                        |  → Customers     |\n|                  |                        |  → OrderItems    |\n|                  |                        |                  |\n|                  |                        |  [Open Record]   |\n+------------------+------------------------+------------------+\n```\n\n### Data Flow\n1. Root component loads entities on mount\n2. Passes entity data to EntityList\n3. EntityList handles selection and passes selectedId up\n4. Root loads fields/relationships for selected entity\n5. Passes detailed data to EntityDetails\n6. Filter changes trigger data reload\n7. All user preferences saved via onSaveUserSettings\n\n### Interaction Patterns\n- Click entity card → Select and open details\n- Click filter → Apply and reload data\n- Click sort → Update sort and reload\n- Click ''Open'' → Trigger OpenEntityRecord callback\n- Press Escape → Close details panel\n- Click outside → Close details panel","properties":[],"events":[],"exampleUsage":"<EntityBrowser\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>","dependencies":[{"name":"EntityList","title":"Entity List","description":"Displays entities in a grid or card layout with sorting capabilities","type":"table","functionalRequirements":"## Entity List Requirements\n\n- Display entities in grid or card view based on viewMode prop\n- Support sorting by multiple fields\n- Handle entity selection and notify parent\n- Show loading state while data loads\n- Display record count badges\n- Highlight selected entity\n- Support keyboard navigation","dataRequirements":{"mode":"views","entities":[{"name":"Entities","description":"Metadata about all entities in the system","displayFields":["ID","Name","DisplayName","NameSuffix","Description","SchemaName","BaseTable","BaseView"],"filterFields":["SchemaName","BaseTable"],"sortFields":["Name","DisplayName"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the entity"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the entity"},{"name":"DisplayName","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly display name for the entity"},{"name":"NameSuffix","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Optional suffix appended to entity names for display purposes"},{"name":"Description","sequence":5,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Description of the entity"},{"name":"SchemaName","sequence":6,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Database schema name"},{"name":"BaseTable","sequence":7,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Base table in the database"},{"name":"BaseView","sequence":8,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Base view used for the entity"}],"permissionLevelNeeded":["read"],"usageContext":"Main entity list display and filtering"},{"name":"Entity Fields","description":"Fields belonging to each entity","displayFields":["Name","DisplayName","Type","Length","AllowsNull","IsPrimaryKey","IsUnique"],"filterFields":["EntityID"],"sortFields":["Sequence","Name"],"fieldMetadata":[{"name":"EntityID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to parent entity"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Field name"},{"name":"DisplayName","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly field name"},{"name":"Type","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Data type of the field"},{"name":"Length","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum length for string fields"},{"name":"AllowsNull","sequence":6,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field allows null values"},{"name":"IsPrimaryKey","sequence":7,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field is part of primary key"},{"name":"IsUnique","sequence":8,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field must be unique"},{"name":"Sequence","sequence":9,"defaultInView":false,"type":"int","allowsNull":false,"isPrimaryKey":false,"description":"Display order of the field"}],"permissionLevelNeeded":["read"],"usageContext":"Details panel to show entity fields"},{"name":"Entity Relationships","description":"Relationships between entities","displayFields":["RelatedEntity","Type","DisplayName","RelatedEntityJoinField"],"filterFields":["EntityID"],"sortFields":["Sequence","RelatedEntity"],"fieldMetadata":[{"name":"EntityID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to parent entity"},{"name":"RelatedEntity","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"The related entity in the relationship"},{"name":"Type","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Type of relationship (One to Many, Many to One, etc.)"},{"name":"DisplayName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly name for the relationship"},{"name":"RelatedEntityJoinField","sequence":5,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"The field in the related entity that joins to this entity"},{"name":"Sequence","sequence":6,"defaultInView":false,"type":"int","allowsNull":false,"isPrimaryKey":false,"description":"Display order"}],"permissionLevelNeeded":["read"],"usageContext":"Details panel to show entity relationships"}],"queries":[],"description":"This component requires access to entity metadata including entities, their fields, and relationships to provide a comprehensive entity browsing experience"},"technicalDesign":"## Technical Design\n\n### Props\n- entities: Array of entity objects\n- viewMode: ''grid'' | ''card''\n- selectedEntityId: Currently selected entity\n- onSelectEntity: Callback when entity selected\n- sortBy: Current sort field\n- sortDirection: ''asc'' | ''desc''\n- onSortChange: Callback for sort changes\n\n### Rendering\n- Grid mode: Compact table with columns\n- Card mode: Cards with entity info\n- Sort indicators in headers\n- Selection highlighting","properties":[{"name":"entities","description":"Array of entity objects to display","type":"array","required":true},{"name":"viewMode","description":"Display mode - grid or card view","type":"string","required":true,"possibleValues":["grid","card"]},{"name":"selectedEntityId","description":"ID of the currently selected entity","type":"string","required":true},{"name":"onSelectEntity","description":"Callback when an entity is selected","type":"function","required":true},{"name":"sortBy","description":"Field to sort by","type":"string","required":true,"defaultValue":"Name"},{"name":"sortDirection","description":"Sort direction","type":"string","required":true,"defaultValue":"asc","possibleValues":["asc","desc"]},{"name":"onSortChange","description":"Callback when sort changes","type":"function","required":true}],"events":[{"name":"onSelectEntity","description":"Fired when an entity is selected","parameters":[{"name":"entityId","description":"ID of the selected entity","type":"string"}]},{"name":"onSortChange","description":"Fired when sort configuration changes","parameters":[{"name":"sortBy","description":"Field to sort by","type":"string"},{"name":"sortDirection","description":"Sort direction","type":"string"}]}],"exampleUsage":"<EntityList\n  entities={entities}\n  viewMode={viewMode}\n  selectedEntityId={selectedEntityId}\n  onSelectEntity={handleSelectEntity}\n  sortBy={sortBy}\n  sortDirection={sortDirection}\n  onSortChange={handleSortChange}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>","code":"function EntityList({ \n  entities, \n  viewMode, \n  selectedEntityId, \n  onSelectEntity, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Handle sort column click\n  const handleSortClick = useCallback((field) => {\n    if (sortBy === field) {\n      // Toggle direction if same field\n      const newDirection = sortDirection === ''asc'' ? ''desc'' : ''asc'';\n      onSortChange?.(field, newDirection);\n    } else {\n      // New field, default to ascending\n      onSortChange?.(field, ''asc'');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Handle entity selection\n  const handleEntityClick = useCallback((entityId) => {\n    onSelectEntity?.(entityId);\n  }, [onSelectEntity]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{ marginLeft: styles.spacing.xs }}>\n        {sortDirection === ''asc'' ? ''↑'' : ''↓''}\n      </span>\n    );\n  };\n  \n  // Grid View\n  if (viewMode === ''grid'') {\n    return (\n      <div style={{\n        width: ''100%'',\n        overflowX: ''auto''\n      }}>\n        <table style={{\n          width: ''100%'',\n          borderCollapse: ''collapse'',\n          backgroundColor: styles.colors.surface\n        }}>\n          <thead>\n            <tr style={{\n              borderBottom: `2px solid $' + '{styles.colors.border}`\n            }}>\n              <th\n                onClick={() => handleSortClick(''Name'')}\n                style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''left'',\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text,\n                  cursor: ''pointer'',\n                  userSelect: ''none'',\n                  whiteSpace: ''nowrap''\n                }}\n              >\n                Name {renderSortIndicator(''Name'')}\n              </th>\n              <th\n                onClick={() => handleSortClick(''DisplayName'')}\n                style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''left'',\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text,\n                  cursor: ''pointer'',\n                  userSelect: ''none'',\n                  whiteSpace: ''nowrap''\n                }}\n              >\n                Display Name {renderSortIndicator(''DisplayName'')}\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Description\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Schema\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Table\n              </th>\n              <th style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.text\n              }}>\n                Base View\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {entities.map((entity) => (\n              <tr\n                key={entity.ID}\n                onClick={() => handleEntityClick(entity.ID)}\n                style={{\n                  backgroundColor: selectedEntityId === entity.ID \n                    ? styles.colors.primary + ''20'' \n                    : ''transparent'',\n                  borderBottom: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`,\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => {\n                  if (selectedEntityId !== entity.ID) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (selectedEntityId !== entity.ID) {\n                    e.currentTarget.style.backgroundColor = ''transparent'';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text,\n                  fontWeight: selectedEntityId === entity.ID \n                    ? (styles.typography.fontWeight?.semibold || ''600'')\n                    : (styles.typography.fontWeight?.regular || ''400'')\n                }}>\n                  {entity.Name}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {entity.DisplayName || entity.Name}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  maxWidth: ''300px'',\n                  overflow: ''hidden'',\n                  textOverflow: ''ellipsis'',\n                  whiteSpace: ''nowrap''\n                }}>\n                  {entity.Description || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.textSecondary\n                }}>\n                  {entity.SchemaName || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.textSecondary\n                }}>\n                  {entity.BaseTable || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.textSecondary\n                }}>\n                  {entity.BaseView || ''-''}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  \n  // Card View\n  return (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fill, minmax(300px, 1fr))'',\n      gap: styles.spacing.lg\n    }}>\n      {entities.map((entity) => (\n        <div\n          key={entity.ID}\n          onClick={() => handleEntityClick(entity.ID)}\n          style={{\n            padding: styles.spacing.lg,\n            backgroundColor: selectedEntityId === entity.ID \n              ? styles.colors.primary + ''20''\n              : styles.colors.surface,\n            border: selectedEntityId === entity.ID\n              ? `2px solid $' + '{styles.colors.primary}`\n              : `1px solid $' + '{styles.colors.border}`,\n            borderRadius: getBorderRadius(''md''),\n            cursor: ''pointer'',\n            transition: ''all 0.2s'',\n            position: ''relative''\n          }}\n          onMouseEnter={(e) => {\n            if (selectedEntityId !== entity.ID) {\n              e.currentTarget.style.transform = ''translateY(-2px)'';\n              e.currentTarget.style.boxShadow = `0 4px 12px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}`;\n            }\n          }}\n          onMouseLeave={(e) => {\n            if (selectedEntityId !== entity.ID) {\n              e.currentTarget.style.transform = ''translateY(0)'';\n              e.currentTarget.style.boxShadow = ''none'';\n            }\n          }}\n        >\n          {/* Card Header */}\n          <div style={{\n            marginBottom: styles.spacing.md,\n            paddingBottom: styles.spacing.md,\n            borderBottom: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <h3 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n              color: styles.colors.text,\n              marginBottom: styles.spacing.xs\n            }}>\n              {entity.DisplayName || entity.Name}\n            </h3>\n            {entity.DisplayName && entity.DisplayName !== entity.Name && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary\n              }}>\n                {entity.Name}\n              </div>\n            )}\n          </div>\n          \n          {/* Card Body */}\n          {entity.Description && (\n            <p style={{\n              margin: 0,\n              marginBottom: styles.spacing.md,\n              fontSize: styles.typography.fontSize.md,\n              color: styles.colors.textSecondary,\n              lineHeight: 1.5,\n              display: ''-webkit-box'',\n              WebkitLineClamp: 2,\n              WebkitBoxOrient: ''vertical'',\n              overflow: ''hidden''\n            }}>\n              {entity.Description}\n            </p>\n          )}\n          \n          {/* Card Footer */}\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center'',\n            fontSize: styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary\n          }}>\n            <div>\n              {entity.SchemaName && (\n                <span style={{ marginRight: styles.spacing.md }}>\n                  Schema: <strong>{entity.SchemaName}</strong>\n                </span>\n              )}\n              {entity.BaseTable && (\n                <span>\n                  Table: <strong>{entity.BaseTable}</strong>\n                </span>\n              )}\n            </div>\n            {entity.BaseView && (\n              <div style={{\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary\n              }}>\n                View: {entity.BaseView}\n              </div>\n            )}\n          </div>\n          \n          {/* Selection Indicator */}\n          {selectedEntityId === entity.ID && (\n            <div style={{\n              position: ''absolute'',\n              top: styles.spacing.sm,\n              right: styles.spacing.sm,\n              width: ''8px'',\n              height: ''8px'',\n              backgroundColor: styles.colors.primary,\n              borderRadius: ''50%''\n            }} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}","dependencies":[],"libraries":[]},{"name":"EntityDetails","title":"Entity Details Panel","description":"Sliding panel that displays detailed information about a selected entity including fields and relationships","type":"form","functionalRequirements":"## Entity Details Requirements\n\n- Slide in from the right when an entity is selected\n- Display entity metadata at the top\n- Show fields in a formatted table\n- Display relationships with icons\n- Include ''Open Record'' button\n- Support closing via X button or Escape key\n- Smooth slide animation\n- Scrollable content area","technicalDesign":"## Technical Design\n\n### Props\n- entity: Selected entity object\n- fields: Array of entity fields\n- relationships: Array of entity relationships\n- isOpen: Whether panel is visible\n- onClose: Callback to close panel\n- onOpenRecord: Callback to open entity record\n\n### Layout\n- Fixed position overlay\n- Slide animation using transform\n- Header with entity name and close button\n- Sections for metadata, fields, relationships\n- Sticky ''Open Record'' button at bottom","dataRequirements":{"mode":"views","entities":[{"name":"Entities","description":"Metadata about all entities in the system","displayFields":["ID","Name","DisplayName","NameSuffix","Description","SchemaName","BaseTable","BaseView"],"filterFields":["SchemaName","BaseTable"],"sortFields":["Name","DisplayName"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the entity"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the entity"},{"name":"DisplayName","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly display name for the entity"},{"name":"NameSuffix","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Optional suffix appended to entity names for display purposes"},{"name":"Description","sequence":5,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Description of the entity"},{"name":"SchemaName","sequence":6,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Database schema name"},{"name":"BaseTable","sequence":7,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Base table in the database"},{"name":"BaseView","sequence":8,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Base view used for the entity"}],"permissionLevelNeeded":["read"],"usageContext":"Main entity list display and filtering"},{"name":"Entity Fields","description":"Fields belonging to each entity","displayFields":["Name","DisplayName","Type","Length","AllowsNull","IsPrimaryKey","IsUnique"],"filterFields":["EntityID"],"sortFields":["Sequence","Name"],"fieldMetadata":[{"name":"EntityID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to parent entity"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Field name"},{"name":"DisplayName","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly field name"},{"name":"Type","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Data type of the field"},{"name":"Length","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum length for string fields"},{"name":"AllowsNull","sequence":6,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field allows null values"},{"name":"IsPrimaryKey","sequence":7,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field is part of primary key"},{"name":"IsUnique","sequence":8,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field must be unique"},{"name":"Sequence","sequence":9,"defaultInView":false,"type":"int","allowsNull":false,"isPrimaryKey":false,"description":"Display order of the field"}],"permissionLevelNeeded":["read"],"usageContext":"Details panel to show entity fields"},{"name":"Entity Relationships","description":"Relationships between entities","displayFields":["RelatedEntity","Type","DisplayName","RelatedEntityJoinField"],"filterFields":["EntityID"],"sortFields":["Sequence","RelatedEntity"],"fieldMetadata":[{"name":"EntityID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to parent entity"},{"name":"RelatedEntity","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"The related entity in the relationship"},{"name":"Type","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Type of relationship (One to Many, Many to One, etc.)"},{"name":"DisplayName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly name for the relationship"},{"name":"RelatedEntityJoinField","sequence":5,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"The field in the related entity that joins to this entity"},{"name":"Sequence","sequence":6,"defaultInView":false,"type":"int","allowsNull":false,"isPrimaryKey":false,"description":"Display order"}],"permissionLevelNeeded":["read"],"usageContext":"Details panel to show entity relationships"}],"queries":[],"description":"This component requires access to entity metadata including entities, their fields, and relationships to provide a comprehensive entity browsing experience"},"properties":[{"name":"entity","description":"The selected entity object","type":"object","required":true},{"name":"fields","description":"Array of fields for the entity","type":"array","required":true,"defaultValue":[]},{"name":"relationships","description":"Array of relationships for the entity","type":"array","required":true,"defaultValue":[]},{"name":"isOpen","description":"Whether the panel is open","type":"boolean","required":true},{"name":"onClose","description":"Callback to close the panel","type":"function","required":true},{"name":"onOpenRecord","description":"Callback to open the entity record","type":"function","required":true}],"events":[{"name":"onClose","description":"Fired when the panel should close","parameters":[]},{"name":"onOpenRecord","description":"Fired when the open record button is clicked","parameters":[{"name":"entityName","description":"Name of the entity to open","type":"string"}]}],"exampleUsage":"<EntityDetails\n  entity={selectedEntity}\n  fields={entityFields}\n  relationships={entityRelationships}\n  isOpen={detailsPanelOpen}\n  onClose={handleCloseDetails}\n  onOpenRecord={handleOpenRecord}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>","code":"function EntityDetails({ \n  entity, \n  fields, \n  relationships, \n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''EntityDetails handleOpenRecord called'', { entity, onOpenRecord });\n    if (entity?.Name) {\n      console.log(''Calling onOpenRecord with entity name:'', entity.Name);\n      if (onOpenRecord) {\n        onOpenRecord(entity.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No entity or entity name available'');\n    }\n  }, [entity, onOpenRecord]);\n  \n  // Render field type badge\n  const renderFieldType = (type) => {\n    const typeColors = {\n      ''nvarchar'': styles.colors.info || styles.colors.primary,\n      ''varchar'': styles.colors.info || styles.colors.primary,\n      ''int'': styles.colors.success || styles.colors.primary,\n      ''bigint'': styles.colors.success || styles.colors.primary,\n      ''decimal'': styles.colors.success || styles.colors.primary,\n      ''float'': styles.colors.success || styles.colors.primary,\n      ''bit'': styles.colors.warning || styles.colors.secondary,\n      ''datetime'': styles.colors.secondary,\n      ''uniqueidentifier'': styles.colors.primary,\n      ''text'': styles.colors.info || styles.colors.primary,\n      ''ntext'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = typeColors[type?.toLowerCase()] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {type}\n      </span>\n    );\n  };\n  \n  // Render relationship type icon\n  const renderRelationshipIcon = (type) => {\n    const icons = {\n      ''One to Many'': ''1:N'',\n      ''Many to One'': ''N:1'',\n      ''Many to Many'': ''N:N'',\n      ''One to One'': ''1:1''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: styles.colors.primary + ''15'',\n        color: styles.colors.primary,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.bold || ''700'',\n        fontFamily: ''monospace''\n      }}>\n        {icons[type] || type}\n      </span>\n    );\n  };\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 99999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: ''75px'',\n        right: 0,\n        bottom: 0,\n        width: ''480px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 100000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {entity?.DisplayName || entity?.Name || ''No Entity Selected''}\n              </h2>\n              {entity?.DisplayName && entity?.Name && entity.DisplayName !== entity.Name && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {entity.Name}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              ✕\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {entity ? (\n            <>\n              {/* Entity Metadata */}\n              {entity.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {entity.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Quick Info */}\n              <div style={{\n                display: ''grid'',\n                gridTemplateColumns: ''repeat(2, 1fr)'',\n                gap: styles.spacing.md,\n                marginBottom: styles.spacing.xl\n              }}>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Schema\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.SchemaName || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Base Table\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.BaseTable || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Base View\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.BaseView || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Field Count\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {fields?.length || 0}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Fields Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Fields ({fields?.length || 0})\n                </h3>\n                <div style={{\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  overflow: ''hidden''\n                }}>\n                  {fields && fields.length > 0 ? (\n                    <table style={{\n                      width: ''100%'',\n                      borderCollapse: ''collapse''\n                    }}>\n                      <thead>\n                        <tr style={{\n                          borderBottom: `1px solid $' + '{styles.colors.border}`\n                        }}>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''left'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Field\n                          </th>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''left'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Type\n                          </th>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''center'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Attributes\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {fields.map((field, index) => (\n                          <tr\n                            key={index}\n                            style={{\n                              borderBottom: index < fields.length - 1 \n                                ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                                : ''none''\n                            }}\n                          >\n                            <td style={{\n                              padding: styles.spacing.sm,\n                              fontSize: styles.typography.fontSize.sm,\n                              color: styles.colors.text\n                            }}>\n                              <div>\n                                <div style={{\n                                  fontWeight: field.IsPrimaryKey \n                                    ? (styles.typography.fontWeight?.semibold || ''600'')\n                                    : (styles.typography.fontWeight?.regular || ''400'')\n                                }}>\n                                  {field.DisplayName || field.Name}\n                                </div>\n                                {field.DisplayName && (\n                                  <div style={{\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    color: styles.colors.textSecondary,\n                                    fontFamily: ''monospace''\n                                  }}>\n                                    {field.Name}\n                                  </div>\n                                )}\n                              </div>\n                            </td>\n                            <td style={{\n                              padding: styles.spacing.sm\n                            }}>\n                              {renderFieldType(field.Type)}\n                              {field.Length && (\n                                <span style={{\n                                  marginLeft: styles.spacing.xs,\n                                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                  color: styles.colors.textSecondary\n                                }}>\n                                  ({field.Length})\n                                </span>\n                              )}\n                            </td>\n                            <td style={{\n                              padding: styles.spacing.sm,\n                              textAlign: ''center''\n                            }}>\n                              <div style={{\n                                display: ''flex'',\n                                gap: styles.spacing.xs,\n                                justifyContent: ''center'',\n                                flexWrap: ''wrap''\n                              }}>\n                                {field.IsPrimaryKey && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.warning || styles.colors.secondary) + ''15'',\n                                    color: styles.colors.warning || styles.colors.secondary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    PK\n                                  </span>\n                                )}\n                                {field.IsUnique && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.info || styles.colors.primary) + ''15'',\n                                    color: styles.colors.info || styles.colors.primary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    UQ\n                                  </span>\n                                )}\n                                {!field.AllowsNull && !field.IsPrimaryKey && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.error || styles.colors.secondary) + ''15'',\n                                    color: styles.colors.error || styles.colors.secondary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    NN\n                                  </span>\n                                )}\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  ) : (\n                    <div style={{\n                      padding: styles.spacing.lg,\n                      textAlign: ''center'',\n                      color: styles.colors.textSecondary,\n                      fontSize: styles.typography.fontSize.sm\n                    }}>\n                      No fields available\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              {/* Relationships Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Relationships ({relationships?.length || 0})\n                </h3>\n                <div style={{\n                  display: ''flex'',\n                  flexDirection: ''column'',\n                  gap: styles.spacing.sm\n                }}>\n                  {relationships && relationships.length > 0 ? (\n                    relationships.map((rel, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          display: ''flex'',\n                          alignItems: ''center'',\n                          gap: styles.spacing.md\n                        }}\n                      >\n                        {renderRelationshipIcon(rel.Type)}\n                        <div style={{ flex: 1 }}>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {rel.DisplayName || rel.RelatedEntity}\n                          </div>\n                          {rel.RelatedEntityJoinField && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              via {rel.RelatedEntityJoinField}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div style={{\n                      padding: styles.spacing.lg,\n                      backgroundColor: styles.colors.surface,\n                      borderRadius: getBorderRadius(''sm''),\n                      textAlign: ''center'',\n                      color: styles.colors.textSecondary,\n                      fontSize: styles.typography.fontSize.sm\n                    }}>\n                      No relationships defined\n                    </div>\n                  )}\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Entity Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select an entity from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {entity && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Entity Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}","dependencies":[],"libraries":[]},{"name":"EntityFilter","title":"Entity Filter Panel","description":"Collapsible filter panel for filtering entities by various criteria","type":"form","functionalRequirements":"## Entity Filter Requirements\n\n- Collapsible panel on the left side\n- Filter by schema name (dropdown)\n- Filter by base table (dropdown)\n- Search box for text search\n- Clear all filters button\n- Show active filter count\n- Smooth collapse/expand animation\n- Remember collapsed state","dataRequirements":{"mode":"views","description":"Receives filter options derived from Entities metadata","entities":[{"name":"Entities","description":"Source of schema and table filter options","displayFields":["SchemaName","BaseTable"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Extracts unique schema names and base tables for filter dropdowns"}],"queries":[]},"technicalDesign":"## Technical Design\n\n### Props\n- filters: Current filter values\n- onFilterChange: Callback when filters change\n- schemas: Available schema options\n- tables: Available table options\n- isCollapsed: Whether panel is collapsed\n- onToggleCollapse: Callback to toggle collapse\n\n### Components\n- Collapse toggle button\n- Schema dropdown\n- Table dropdown\n- Search input\n- Clear filters button\n- Active filter badges","properties":[{"name":"filters","description":"Current filter values","type":"{schema?: string, table?: string, search?: string}","required":true},{"name":"onFilterChange","description":"Callback when filters change","type":"(filters: {schema?: string, table?: string, search?: string}) => void","required":true},{"name":"schemas","description":"Available schema options","type":"Array<string>","required":true},{"name":"tables","description":"Available table options","type":"Array<string>","required":true},{"name":"isCollapsed","description":"Whether the panel is collapsed","type":"boolean","required":true},{"name":"onToggleCollapse","description":"Callback to toggle collapse state","type":"() => void","required":true}],"events":[{"name":"onFilterChange","description":"Fired when filter values change","parameters":[{"name":"filters","description":"Updated filter object","type":"object"}]},{"name":"onToggleCollapse","description":"Fired when collapse state should toggle","parameters":[]}],"exampleUsage":"<EntityFilter\n  filters={filters}\n  onFilterChange={handleFilterChange}\n  schemas={uniqueSchemas}\n  tables={uniqueTables}\n  isCollapsed={filterPanelCollapsed}\n  onToggleCollapse={handleToggleFilter}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>","code":"function EntityFilter({ \n  filters, \n  onFilterChange, \n  schemas, \n  tables, \n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle schema filter change\n  const handleSchemaChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      schema: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle table filter change\n  const handleTableChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      table: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''→'' : ''←''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            🔍\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Schema Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Schema\n            </label>\n            <select\n              value={filters?.schema || ''''}\n              onChange={handleSchemaChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Schemas</option>\n              {schemas.map((schema) => (\n                <option key={schema} value={schema}>\n                  {schema}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Table Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Base Table\n            </label>\n            <select\n              value={filters?.table || ''''}\n              onChange={handleTableChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Tables</option>\n              {tables.map((table) => (\n                <option key={table} value={table}>\n                  {table}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.schema && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Schema:\n                      </span>\n                      <strong>{filters.schema}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleSchemaChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n                {filters?.table && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Table:\n                      </span>\n                      <strong>{filters.table}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleTableChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","dependencies":[],"libraries":[]}],"libraries":[],"code":"function EntityBrowser({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { EntityList, EntityDetails, EntityFilter } = components;\n  \n  // Initialize state from saved settings where appropriate\n  const [selectedEntityId, setSelectedEntityId] = useState(savedUserSettings?.selectedEntityId);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''grid'');\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [sortBy, setSortBy] = useState(savedUserSettings?.sortBy || ''Name'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''asc'');\n  const [filterPanelCollapsed, setFilterPanelCollapsed] = useState(savedUserSettings?.filterPanelCollapsed || false);\n  \n  // Runtime UI state (not persisted)\n  const [entities, setEntities] = useState([]);\n  const [entityFields, setEntityFields] = useState([]);\n  const [entityRelationships, setEntityRelationships] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [detailsPanelOpen, setDetailsPanelOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('''');\n  const [uniqueSchemas, setUniqueSchemas] = useState([]);\n  const [uniqueTables, setUniqueTables] = useState([]);\n  \n  // Load entities on mount and when filters/sort change\n  useEffect(() => {\n    const loadEntities = async () => {\n      setLoading(true);\n      try {\n        // Build filter string\n        let filterParts = [];\n        if (filters.schema) {\n          filterParts.push(`SchemaName = ''$' + '{filters.schema}''`);\n        }\n        if (filters.table) {\n          filterParts.push(`BaseTable = ''$' + '{filters.table}''`);\n        }\n        if (searchQuery) {\n          filterParts.push(`(Name LIKE ''%$' + '{searchQuery}%'' OR DisplayName LIKE ''%$' + '{searchQuery}%'' OR Description LIKE ''%$' + '{searchQuery}%'')`);\n        }\n        \n        const result = await utilities.rv.RunView({\n          EntityName: ''Entities'',\n          Fields: [''ID'', ''Name'', ''DisplayName'', ''NameSuffix'', ''Description'', ''SchemaName'', ''BaseTable'', ''BaseView''],\n          OrderBy: `$' + '{sortBy} $' + '{sortDirection.toUpperCase()}`,\n          ExtraFilter: filterParts.length > 0 ? filterParts.join('' AND '') : undefined\n        });\n        \n        if (result?.Success && result?.Results) {\n          setEntities(result.Results);\n          \n          // Extract unique schemas and tables for filter dropdowns\n          const schemas = [...new Set(result.Results.map(e => e.SchemaName).filter(Boolean))];\n          const tables = [...new Set(result.Results.map(e => e.BaseTable).filter(Boolean))];\n          setUniqueSchemas(schemas);\n          setUniqueTables(tables);\n        } else {\n          console.error(''Failed to load entities:'', result?.ErrorMessage);\n          setEntities([]);\n        }\n      } catch (error) {\n        console.error(''Error loading entities:'', error);\n        setEntities([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadEntities();\n  }, [filters, sortBy, sortDirection, searchQuery, utilities.rv]);\n  \n  // Load entity details when selection changes\n  useEffect(() => {\n    const loadEntityDetails = async () => {\n      if (!selectedEntityId) {\n        setEntityFields([]);\n        setEntityRelationships([]);\n        return;\n      }\n      \n      try {\n        // Load fields\n        const fieldsResult = await utilities.rv.RunView({\n          EntityName: ''Entity Fields'',\n          Fields: [''Name'', ''DisplayName'', ''Type'', ''Length'', ''AllowsNull'', ''IsPrimaryKey'', ''IsUnique'', ''Sequence''],\n          OrderBy: ''Sequence ASC, Name ASC'',\n          ExtraFilter: `EntityID = ''$' + '{selectedEntityId}''`\n        });\n        \n        if (fieldsResult?.Success && fieldsResult?.Results) {\n          setEntityFields(fieldsResult.Results);\n        } else {\n          setEntityFields([]);\n        }\n        \n        // Load relationships\n        const relationshipsResult = await utilities.rv.RunView({\n          EntityName: ''Entity Relationships'',\n          Fields: [''RelatedEntity'', ''Type'', ''DisplayName'', ''RelatedEntityJoinField'', ''Sequence''],\n          OrderBy: ''Sequence ASC, RelatedEntity ASC'',\n          ExtraFilter: `EntityID = ''$' + '{selectedEntityId}''`\n        });\n        \n        if (relationshipsResult?.Success && relationshipsResult?.Results) {\n          setEntityRelationships(relationshipsResult.Results);\n        } else {\n          setEntityRelationships([]);\n        }\n      } catch (error) {\n        console.error(''Error loading entity details:'', error);\n        setEntityFields([]);\n        setEntityRelationships([]);\n      }\n    };\n    \n    loadEntityDetails();\n  }, [selectedEntityId, utilities.rv]);\n  \n  // Handle entity selection\n  const handleSelectEntity = useCallback((entityId) => {\n    setSelectedEntityId(entityId);\n    setDetailsPanelOpen(true);\n    \n    // Save user preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedEntityId: entityId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode) => {\n    setViewMode(mode);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      viewMode: mode\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    \n    // Save filter preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle sort changes\n  const handleSortChange = useCallback((newSortBy, newSortDirection) => {\n    setSortBy(newSortBy);\n    setSortDirection(newSortDirection);\n    \n    // Save sort preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortBy: newSortBy,\n      sortDirection: newSortDirection\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter panel toggle\n  const handleToggleFilter = useCallback(() => {\n    const newCollapsed = !filterPanelCollapsed;\n    setFilterPanelCollapsed(newCollapsed);\n    \n    // Save collapsed state\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterPanelCollapsed: newCollapsed\n    });\n  }, [filterPanelCollapsed, savedUserSettings, onSaveUserSettings]);\n  \n  // Handle opening entity record\n  const handleOpenRecord = useCallback((entityName) => {\n    console.log(''Root handleOpenRecord called with entityName:'', entityName);\n    console.log(''Callbacks object:'', callbacks);\n    if (callbacks?.OpenEntityRecord && entityName) {\n      console.log(''Calling OpenEntityRecord callback with:'', ''Entities'', entityName);\n      // Open the Entities entity record for the selected entity\n      callbacks.OpenEntityRecord(''Entities'', [{ FieldName: ''Name'', Value: entityName }]);\n    } else {\n      console.error(''OpenEntityRecord callback not available or entityName missing'');\n    }\n  }, [callbacks]);\n  \n  // Handle closing details panel\n  const handleCloseDetails = useCallback(() => {\n    setDetailsPanelOpen(false);\n  }, []);\n  \n  // Handle search\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n  }, []);\n  \n  // Get selected entity object\n  const selectedEntity = entities.find(e => e.ID === selectedEntityId);\n  \n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Loading state\n  if (loading && entities.length === 0) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100vh'',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading entities...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      display: ''flex'',\n      height: ''100vh'',\n      backgroundColor: styles.colors.background,\n      overflow: ''hidden''\n    }}>\n      {/* Filter Panel */}\n      {EntityFilter && (\n        <EntityFilter\n          filters={filters}\n          onFilterChange={handleFilterChange}\n          schemas={uniqueSchemas}\n          tables={uniqueTables}\n          isCollapsed={filterPanelCollapsed}\n          onToggleCollapse={handleToggleFilter}\n          savedUserSettings={savedUserSettings?.filterPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            filterPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center'',\n            marginBottom: styles.spacing.md\n          }}>\n            <h1 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              Entity Browser\n            </h1>\n            \n            {/* View Mode Toggle */}\n            <div style={{\n              display: ''flex'',\n              gap: styles.spacing.sm,\n              alignItems: ''center''\n            }}>\n              <span style={{\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.textSecondary\n              }}>\n                View:\n              </span>\n              <button\n                onClick={() => handleViewModeChange(''grid'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''grid'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''grid'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Grid\n              </button>\n              <button\n                onClick={() => handleViewModeChange(''card'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''card'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''card'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Cards\n              </button>\n            </div>\n          </div>\n          \n          {/* Search Bar */}\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.md\n          }}>\n            <input\n              type=\"text\"\n              placeholder=\"Search entities...\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              style={{\n                flex: 1,\n                padding: styles.spacing.md,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background\n              }}\n            />\n            {searchQuery && (\n              <button\n                onClick={() => handleSearch('''')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: styles.colors.surfaceHover || styles.colors.surface,\n                  color: styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Entity List */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {EntityList && (\n            <EntityList\n              entities={entities}\n              viewMode={viewMode}\n              selectedEntityId={selectedEntityId}\n              onSelectEntity={handleSelectEntity}\n              sortBy={sortBy}\n              sortDirection={sortDirection}\n              onSortChange={handleSortChange}\n              savedUserSettings={savedUserSettings?.entityList}\n              onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                ...savedUserSettings,\n                entityList: settings\n              })}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n            />\n          )}\n          \n          {/* Empty State */}\n          {entities.length === 0 && !loading && (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              padding: styles.spacing.xxl || styles.spacing.xl,\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.xl,\n                marginBottom: styles.spacing.md\n              }}>\n                No entities found\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                {searchQuery || Object.keys(filters).length > 0\n                  ? ''Try adjusting your filters or search query''\n                  : ''No entities are available''}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Details Panel */}\n      {EntityDetails && (\n        <EntityDetails\n          entity={selectedEntity}\n          fields={entityFields}\n          relationships={entityRelationships}\n          isOpen={detailsPanelOpen}\n          onClose={handleCloseDetails}\n          onOpenRecord={() => handleOpenRecord(selectedEntity?.Name)}\n          savedUserSettings={savedUserSettings?.detailsPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            detailsPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n    </div>\n  );\n}"}'
SET
  @FunctionalRequirements_96fe2070 = N'## Entity Browser

### Core Functionality
- Display entities in a responsive grid or card layout based on user preference
- Allow users to select view mode (grid vs card)
- Click on an entity to slide in a details panel from the right
- Show entity metadata including fields and relationships in the details panel
- Provide a collapsible filter panel on the left side
- Support sorting by multiple fields with visual indicators
- Include a search bar for quick entity filtering
- Provide an ''Open'' button to trigger the OpenEntityRecord callback
- Remember user''s last selected entity and view preferences

### UX Considerations
- Smooth animations for panel transitions
- Responsive design that works on different screen sizes
- Loading states while fetching data
- Empty states with helpful messages
- Keyboard navigation support (arrow keys, tab, enter)
- Visual feedback for hover and selection states
- Maintain scroll position when switching between entities'
SET
  @TechnicalDesign_96fe2070 = N'## Technical Design

### Component Structure
- **Root Component (EntityBrowser)**: Manages overall layout and state coordination
- **EntityList (Child)**: Displays entities in grid/card view with sorting
- **EntityDetails (Child)**: Sliding panel showing entity fields and relationships
- **EntityFilter (Child)**: Collapsible filter panel with dynamic filters

### State Management
- Selected entity ID (persisted in savedUserSettings)
- View mode (grid/card) (persisted)
- Active filters (persisted)
- Sort configuration (persisted)
- Panel visibility states (details open, filters collapsed)
- Search query
- Loading states for async operations

### Layout
```
+------------------+------------------------+------------------+
|                  |                        |                  |
|   Filter Panel   |    Entity Grid/Cards   |  Details Panel   |
|   (Collapsible)  |    (Main Content)      |    (Sliding)     |
|                  |                        |                  |
|  [Schema Filter] |  +-----+  +-----+      |  Entity: Orders  |
|  [Table Filter]  |  | Card |  | Card |     |                  |
|  [Search Box]    |  +-----+  +-----+      |  Fields:         |
|                  |                        |  - ID            |
|  Sort By:        |  +-----+  +-----+      |  - CustomerID    |
|  [Name ↓]        |  | Card |  | Card |     |  - OrderDate     |
|                  |  +-----+  +-----+      |                  |
|                  |                        |  Relationships:  |
|                  |                        |  → Customers     |
|                  |                        |  → OrderItems    |
|                  |                        |                  |
|                  |                        |  [Open Record]   |
+------------------+------------------------+------------------+
```

### Data Flow
1. Root component loads entities on mount
2. Passes entity data to EntityList
3. EntityList handles selection and passes selectedId up
4. Root loads fields/relationships for selected entity
5. Passes detailed data to EntityDetails
6. Filter changes trigger data reload
7. All user preferences saved via onSaveUserSettings

### Interaction Patterns
- Click entity card → Select and open details
- Click filter → Apply and reload data
- Click sort → Update sort and reload
- Click ''Open'' → Trigger OpenEntityRecord callback
- Press Escape → Close details panel
- Click outside → Close details panel'
SET
  @FunctionalRequirementsVector_96fe2070 = N'[0.010399672202765942,0.03898456320166588,0.0031065745279192924,-0.04359811916947365,0.023196784779429436,0.0022272225469350815,0.007008499000221491,0.05608177185058594,-0.013064481317996979,-0.04003686457872391,-0.010273541323840618,0.029687099158763885,0.016627568751573563,0.06836752593517303,0.024465834721922874,-0.08569731563329697,-0.036598868668079376,0.05451998859643936,-0.006759223993867636,-0.00007211563206510618,0.03493105247616768,-0.023384306579828262,-0.03443508222699165,0.006100410129874945,0.01422246266156435,0.008284099400043488,-0.07864219695329666,0.05377742648124695,0.012832329608500004,-0.07425346225500107,0.012844725511968136,0.05412127450108528,-0.046401239931583405,-0.02396952547132969,0.0000025645733785495395,-0.00276555004529655,-0.05796699598431587,0.002532001119107008,-0.042379699647426605,0.011148902587592602,-0.02573355846107006,0.03732384741306305,0.038165900856256485,-0.029492516070604324,0.020351603627204895,-0.04810800403356552,-0.02773316577076912,0.028702206909656525,0.017837567254900932,-0.023448055610060692,0.013159654103219509,-0.009726779535412788,-0.007924215868115425,-0.016290333122015,0.0018048669444397092,0.045587208122015,0.02159583941102028,-0.07739321887493134,0.05076661333441734,0.01482523512095213,-0.0021591470576822758,-0.02184262126684189,0.008339321240782738,-0.01659330353140831,0.060566265136003494,0.04278693348169327,0.06494858860969543,-0.0496649369597435,0.03997647389769554,0.03348543494939804,0.15494465827941895,0.011581211350858212,-0.000701707846019417,-0.031050313264131546,0.0051757399924099445,0.05128803104162216,0.023933907970786095,-0.0359402634203434,-0.011657549999654293,0.002028602408245206,-0.03052225336432457,-0.026098478585481644,-0.025612695142626762,-0.017312979325652122,-0.050224147737026215,0.02160145714879036,0.029966922476887703,-0.03953507915139198,-0.03857091814279556,-0.028552046045660973,0.06101163476705551,-0.024447062984108925,-0.005132048856467009,0.01808777265250683,-0.04985116794705391,-0.024111200124025345,0.03503953292965889,-0.06594490259885788,0.034844908863306046,0.033180419355630875,0.007057378068566322,0.02007991448044777,0.013947916217148304,0.012564988806843758,0.06090366467833519,0.01762058585882187,-0.019367745146155357,-0.02435099519789219,0.03230536729097366,0.013532663695514202,-0.0076223439536988735,0.012194284237921238,-0.013327275402843952,0.0637287050485611,-0.06040702015161514,0.04000544175505638,-0.03160833939909935,-0.008241785690188408,0.005361375864595175,0.026439672335982323,0.07041149586439133,0.020301366224884987,0.03178171068429947,0.0013165712589398026,-0.03811822086572647,0.014554220251739025,-0.044111333787441254,-0.07113770395517349,-0.005632716231048107,-0.008180026896297932,-0.0074714296497404575,-0.03539252653717995,0.00367412599734962,-0.021869728341698647,-0.014831911772489548,0.0213587898761034,0.051087863743305206,-0.02816380374133587,-0.08109444379806519,0.022831039503216743,-0.004910190589725971,-0.01173004787415266,-0.05145316198468208,0.024201493710279465,0.032708119601011276,0.013569021597504616,-0.022944210097193718,-0.04481993243098259,0.03186320886015892,0.016122978180646896,0.010654622688889503,-0.04535052925348282,-0.052391428500413895,0.004259629175066948,0.02192278578877449,0.028729664161801338,0.05787114426493645,0.010502006858587265,0.01812564954161644,-0.027410129085183144,0.017805960029363632,0.014787927269935608,-0.000017187887351610698,-0.003644616575911641,-0.012406500987708569,0.014600567519664764,-0.002230693120509386,0.008236025460064411,-0.04047468304634094,-0.013652734458446503,-0.04472304880619049,-0.02087966911494732,-0.03613915294408798,-0.008498255163431168,0.02852608449757099,0.016937630251049995,0.07793781161308289,0.0058380975387990475,-0.026462934911251068,0.02209681086242199,0.03420004993677139,-0.02929365076124668,-0.006279189605265856,0.037802983075380325,0.09538817405700684,-0.06287548691034317,0.03765435144305229,0.02460668981075287,-0.018605045974254608,-0.0022862148471176624,0.030586527660489082,-0.020743384957313538,-0.0730431005358696,-0.007137634325772524,0.01395630743354559,-0.014912398532032967,-0.007487328257411718,0.030041584745049477,0.0580364428460598,-0.014414873905479908,-0.03925754502415657,-0.004219763912260532,0.04746604338288307,0.08309047669172287,0.014567709527909756,0.020876983180642128,-0.033169738948345184,-0.01951703429222107,-0.019001487642526627,0.006526869256049395,0.020093826577067375,-0.0069078984670341015,-0.032786592841148376,0.03660152852535248,-0.04157617688179016,-0.004755842033773661,0.03565208986401558,0.03519288823008537,-0.021579593420028687,0.01664748787879944,-0.02318541705608368,-0.026392830535769463,0.0710616484284401,0.01057544257491827,0.07923772931098938,0.06361143290996552,0.016513219103217125,0.04213372617959976,0.0015577105805277824,0.024096626788377762,0.010401246137917042,-0.015941819176077843,0.007836933247745037,0.03970028832554817,0.009991110302507877,0.0073816245421767235,0.03690257668495178,0.13125111162662506,-0.02663608267903328,0.04249986261129379,0.06662946939468384,-0.051591213792562485,0.013960842974483967,-0.023197654634714127,-0.0622297003865242,-0.026077264919877052,-0.0174405574798584,0.010598999448120594,0.03680071607232094,-0.009235401637852192,0.0017385226674377918,0.006814471911638975,0.0489221066236496,-0.0019724909216165543,0.018874332308769226,0.02004796452820301,-0.0020148437470197678,0.008805358782410622,-0.040504470467567444,0.04032474383711815,0.00944923423230648,0.008311165496706963,-0.00861819926649332,-0.0280994214117527,0.00027612302801571786,-0.01748758554458618,0.044422704726457596,-0.07925693690776825,-0.008477145805954933,-0.005093075335025787,0.016879195347428322,0.03142248094081879,0.03341977298259735,-0.021985089406371117,-0.004542011767625809,0.021246347576379776,-0.010028429329395294,0.01987876556813717,-0.014755673706531525,-0.020642079412937164,0.024522650986909866,-0.027671433985233307,-0.01412900723516941,0.03516646474599838,-0.020615093410015106,0.028098683804273605,-0.003703400259837508,-0.06337764859199524,0.02703252248466015,-0.034101009368896484,0.035391952842473984,-0.001983240246772766,0.04340599849820137,0.032846130430698395,-0.008985663764178753,0.015483061783015728,-0.039546918123960495,0.054832328110933304,-0.020919958129525185,0.07428246736526489,-0.015291504561901093,-0.01573360711336136,-0.05979906767606735,0.014340310357511044,0.015109420754015446,0.06518121808767319,-0.0014076463412493467,0.014933520928025246,0.02327997237443924,0.06448157876729965,-0.04990266263484955,0.03573345020413399,0.022630205377936363,-0.021542390808463097,0.013031636364758015,0.028182515874505043,0.043907832354307175,0.04154534637928009,0.011189347133040428,0.057785261422395706,-0.03161966800689697,0.025395987555384636,0.016941774636507034,-0.005102953873574734,-0.01497552078217268,0.0335998497903347,0.018760712817311287,-0.006956056691706181,-0.019005974754691124,-0.02006240375339985,-0.007951268926262856,0.011147296987473965,-0.006439243908971548,-0.002815288957208395,0.06229009851813316,-0.004595787264406681,-0.02957875281572342,-0.014777645468711853,0.001745819579809904,-0.02405421994626522,-0.02964232675731182,-0.01751244254410267,-0.02233462780714035,0.036758001893758774,0.027282357215881348,-0.018710169941186905,0.02974563278257847,-0.010938247665762901,-0.07609176635742188,-0.0010358759900555015,0.010499561205506325,0.028428399935364723,-0.010760542936623096,-0.006544744595885277,0.04370734468102455,-0.010834799148142338,-0.049438800662755966,0.027620486915111542,-0.0415174625813961,-0.03664165362715721,0.04398975521326065,0.06508603692054749,-0.047658294439315796,-0.01956011727452278,0.03882747143507004,0.01028345711529255,0.03510546311736107,-0.02904699556529522,-0.01830991357564926,-0.020892487838864326,0.009624756872653961,-0.028384586796164513,0.004460845608264208,0.05436569079756737,0.009476745501160622,-0.024219578132033348,-0.020189665257930756,0.015154501423239708,0.03455453738570213,-0.0027398942038416862,0.04971201345324516,-0.043188199400901794,0.06907648593187332,-0.03932458162307739,0.07579681277275085,0.008359038271009922,-0.03884955868124962,0.042781565338373184,-0.011089826002717018,-0.005697593558579683,-0.043346162885427475,-0.0033585699275135994,0.00601580273360014,-0.06845331937074661,0.02011762745678425,-0.006897269282490015,-0.0439189113676548,0.04217711091041565,0.01633049175143242,0.009564151987433434,-0.029661908745765686,0.05973763391375542,-0.003934066742658615,-0.02016485296189785,0.005230137147009373,-0.01365652959793806,0.036193542182445526,0.049440156668424606,0.045009151101112366,-0.03262302279472351,-0.12219930440187454,-0.01980811171233654,-0.03898068517446518,-0.04694764316082001,0.015913017094135284,-0.042682524770498276,0.012835543602705002,-0.0458427295088768,0.025927085429430008,0.07709560543298721,0.007056726608425379,-0.012098761275410652,-0.028233613818883896,-0.02821081504225731,0.03706569969654083,-0.02726130001246929,-0.07785871624946594,-0.022486060857772827,-0.012651250697672367,0.03681563213467598,-0.07445081323385239,-0.022616427391767502,-0.014656801708042622,0.026180589571595192,-0.047462452203035355,0.01108042523264885,0.0371716246008873,-0.0029171141795814037,-0.019237319007515907,-0.016087396070361137,-0.014411425217986107,-0.01178333442658186,0.011837543919682503,0.05128980427980423,-0.026406029239296913,0.022897955030202866,-0.010371695272624493,0.02449868805706501,-0.043507687747478485,-0.0006037342827767134,-0.005130353849381208,-0.036281485110521317,-0.047369010746479034,0.046495694667100906,0.019046403467655182,-0.012939708307385445,-0.055711619555950165,0.02744893729686737,-0.03397110849618912,-0.016778284683823586,0.0061228396371006966,0.011656727641820908,-0.012859521433711052,-0.011783595196902752,0.002875189995393157,-0.061162546277046204,0.0020578433759510517,-0.12902642786502838,-0.04902217909693718,-0.03965763375163078,0.05277301371097565,-0.03855815902352333,-0.014067546464502811,-0.03965282067656517,-0.03204018250107765,-0.006890359800308943,0.006763033103197813,-0.00972821842879057,-0.07599017769098282,0.009810377843677998,-0.002904073800891638,0.01916615292429924,0.012511094100773335,-0.0757574588060379,0.013746405951678753,0.06375370174646378,-0.002756525995209813,-0.000992843764834106,0.0036345345433801413,0.012778295204043388,-0.0442686527967453,0.00690825330093503,0.01189878024160862,0.0762973353266716,0.04620802402496338,-0.0060218037106096745,-0.09117025882005692,0.07254214584827423,-0.09846463054418564,-0.05885323882102966,-0.004732050932943821,-0.0022021490149199963,0.012344090268015862,0.013011445291340351,0.027743689715862274,0.004395497962832451,-0.038632847368717194,0.058720845729112625,-0.0037965094670653343,-0.0041958545334637165,0.04112944379448891,-0.021885521709918976,0.0010618306696414948,0.02195890247821808,-0.010098123922944069,0.1095864400267601,-0.005956961773335934,0.02681756392121315,0.03126100078225136,-0.014345224015414715,0.011594104580581188,-0.0018843964207917452,-0.015607009641826153,0.0031170339789241552,0.038118429481983185,0.000740989635232836,0.016586730256676674,0.013547890819609165,0.01672445237636566,0.0213653314858675,-0.014887718483805656,-0.008027229458093643,0.02063075080513954,-0.004812363535165787,-0.028439469635486603,0.02304665371775627,0.030148029327392578,0.013431861065328121,-0.042809296399354935,-0.009459338150918484,-0.06515000760555267,0.04832272231578827,-0.001591341570019722,-0.03172910213470459,-0.04187654331326485,-0.018732434138655663,0.020925164222717285,-0.03605828434228897,0.04102494567632675,0.027225876227021217,-0.0002495362423360348,-0.06637067347764969,-0.03596113994717598,-0.008654632605612278,-0.0033854844514280558,-7.073766477471525e-33,-0.05666534975171089,-0.006179549265652895,-0.04253564402461052,-0.011154080741107464,0.03187583014369011,-0.0941513404250145,-0.004017732571810484,-0.008693709969520569,-0.022931363433599472,-0.022801382467150688,-0.001164026907645166,-0.04247891530394554,0.0009705126285552979,0.01344126183539629,-0.00803395640105009,0.021823059767484665,0.012871897779405117,0.00007065935642458498,0.004401656799018383,0.02515367604792118,-0.04744245484471321,0.04218774661421776,-0.0345751978456974,-0.09234067797660828,-0.012932232581079006,0.000938472687266767,0.04192686453461647,-0.0002579370338935405,-0.05280137434601784,0.04498947784304619,0.006048115435987711,-0.03979799523949623,-0.03365689888596535,-0.06684942543506622,0.016972029581665993,-0.013872221112251282,-0.10613337904214859,-0.011998985894024372,-0.006125171668827534,0.0475945882499218,0.04559025913476944,-0.02709123305976391,-0.002570186275988817,0.016094135120511055,0.014784201979637146,0.015738429501652718,0.033762723207473755,0.007162143941968679,-0.027063408866524696,-0.07154791802167892,0.03317108005285263,0.015134984627366066,-0.034613195806741714,0.02656404860317707,0.021932043135166168,-0.0018695007311180234,0.045034218579530716,-0.0162526722997427,-0.055508825927972794,-0.02961987815797329,0.0033863994758576155,-0.050378333777189255,-0.036295242607593536,0.00022505561355501413,0.03852122649550438,0.031113754957914352,0.021222276613116264,0.022730372846126556,-0.0995112806558609,0.022218007594347,0.005872884765267372,0.021383075043559074,0.01137477345764637,-0.07680012285709381,-0.028621919453144073,0.02067936584353447,-0.041500918567180634,0.025757895782589912,-0.09200840443372726,0.07491343468427658,0.01860654354095459,0.016710380092263222,-0.009523884393274784,-0.008959830738604069,0.017093965783715248,-0.03946634382009506,0.0005940819391980767,-0.028337553143501282,0.024722494184970856,-0.0018045210745185614,-0.030397823080420494,-0.03318570554256439,-0.07509484142065048,0.023038605228066444,-0.1033271923661232,0.014980364590883255,0.047579288482666016,-0.012032934464514256,-0.021601827815175056,-0.0224840696901083,0.03106050007045269,-0.017613140866160393,0.0014583338052034378,-0.013916351832449436,-0.022102804854512215,-0.010448994114995003,0.007357614114880562,-0.04881800338625908,-0.07308969646692276,0.020892616361379623,0.027509566396474838,-0.000693438109010458,-0.0005942309508100152,-0.03687888756394386,0.006219221279025078,-0.014764044433832169,-0.0016035803128033876,0.019845547154545784,0.025444116443395615,0.021292712539434433,-0.009639072231948376,0.006136213429272175,0.037675388157367706,0.02843867428600788,0.09661167114973068,-0.023492811247706413,-0.00021000522247049958,0.029927223920822144,0.017456840723752975,0.014788538217544556,-0.014262263663113117,0.0052611916325986385,3.25636790421413e-7,0.002277635969221592,0.00031712703639641404,0.01286312099546194,-0.006608620285987854,0.032825957983732224,-0.015676118433475494,-0.008599869906902313,-0.05293590575456619,-0.007275498937815428,-0.08858971297740936,0.02798156626522541,0.04023529216647148,0.03474494069814682,0.035097386687994,-0.05635989457368851,-0.06460103392601013,0.06393657624721527,-0.02098848856985569,-0.04666679725050926,0.0012480553705245256,0.04676336795091629,-0.012352611869573593,0.03494664281606674,0.026441920548677444,-0.00383680104278028,0.04786413535475731,0.0038528689183294773,-0.03518295660614967,0.07991433888673782,-0.005192310083657503,0.055143240839242935,0.030512124300003052,0.0015882505103945732,0.019581079483032227,0.024091137573122978,0.0016727992333471775,0.0030735828913748264,0.01946881413459778,0.01984868012368679,0.04007141292095184,0.07553129643201828,-0.04776844009757042,-0.02520037814974785,-0.03865398094058037,0.015318979509174824,-0.038061946630477905,-0.0012196764582768083,0.10929904878139496,-0.04932452365756035,0.02274111658334732,0.006967879366129637,0.011474977247416973,0.014258035458624363,-0.07377210259437561,0.017650814726948738,-0.02797706238925457,-0.02291141077876091,0.03282530605792999,0.01696290448307991,0.044676803052425385,0.01659543626010418,-0.00391817232593894,-0.008366109803318977,-0.014471558853983879,-0.004907290916889906,-0.024839099496603012,-0.02397405542433262,3.883545430836383e-34,-0.028813371434807777,0.022011414170265198,0.007568246219307184,0.08572226762771606,0.02217283472418785,-0.038598932325839996,0.006422638893127441,-0.06671557575464249,0.006614017300307751,-0.041951198130846024,-0.006814384832978249]'
SET
  @TechnicalDesignVector_96fe2070 = N'[0.00852501392364502,0.09333718568086624,-0.014715795405209064,0.006013380363583565,0.02282358705997467,-0.0062700677663087845,-0.0067566027864813805,0.06305945664644241,0.009306957013905048,-0.0072202482260763645,-0.055636290460824966,-0.0130293108522892,0.048341765999794006,0.01600467413663864,-0.029028240591287613,0.0036471725907176733,0.02460559643805027,0.0734144002199173,-0.04196210950613022,-0.06562729924917221,-0.01414837222546339,-0.041390713304281235,0.043763529509305954,-0.014411240816116333,0.06514855474233627,0.011289958842098713,-0.03213515505194664,0.01295675802975893,0.03204789012670517,-0.03956502303481102,-0.012155277654528618,0.01141073927283287,-0.0345996730029583,0.00811964925378561,0.000002154651838282007,-0.01077436376363039,-0.0745266005396843,-0.005433196667581797,-0.03940097987651825,-0.0009589421679265797,-0.07605976611375809,-0.019810844212770462,0.01604357920587063,-0.014417012222111225,-0.018932590261101723,-0.06585131585597992,-0.08090239763259888,0.06645094603300095,-0.011080218479037285,0.011003687046468258,0.0020317621529102325,-0.04174751788377762,-0.0298012662678957,0.004364851862192154,0.020555628463625908,0.03160779923200607,0.021944619715213776,-0.061979085206985474,0.07790160179138184,-0.041454289108514786,-0.04028566926717758,0.024928351864218712,0.018082065507769585,-0.04502156376838684,0.06362945586442947,-0.010056410916149616,0.08749359101057053,0.03845702111721039,0.02427174150943756,-0.04534410685300827,0.04339278116822243,0.002627431182190776,0.018513107672333717,0.002151667606085539,-0.05603494867682457,0.02372216247022152,0.008936992846429348,-0.005744993686676025,-0.020516715943813324,0.014987730421125889,0.014946932904422283,0.017035281285643578,-0.0056645856238901615,-0.005011698231101036,-0.02819000743329525,0.08658330887556076,-0.022573241963982582,-0.028209395706653595,-0.03780006989836693,-0.0486673004925251,0.042180098593235016,-0.05670208856463432,0.023753415793180466,0.05701376497745514,-0.049675021320581436,0.00043765571899712086,0.05218710005283356,-0.026494063436985016,0.026528313755989075,-0.025918127968907356,0.003740620566532016,0.045820578932762146,0.027725880965590477,-0.010100633837282658,0.05209659785032272,0.03692684322595596,-0.011111999861896038,-0.008492954075336456,-0.0020246990025043488,0.035050805658102036,-0.020799240097403526,-0.002424260601401329,0.03174682334065437,0.08165598660707474,-0.03175029158592224,0.012089080177247524,-0.0538567416369915,-0.04702078551054001,-0.028492843732237816,-0.0100509999319911,0.048005297780036926,-0.006161730736494064,0.05034342780709267,0.0244989562779665,0.026485586538910866,0.04408865049481392,0.024863863363862038,-0.07595343142747879,-0.018375277519226074,0.03580767661333084,-0.013868549838662148,-0.04414264112710953,0.0157777052372694,0.0237163994461298,-0.0069351838901638985,0.021167239174246788,0.03391677886247635,-0.00737327616661787,-0.06595347821712494,-0.009665248915553093,0.011594299226999283,-0.0024636632297188044,-0.000449036480858922,0.032167401164770126,-0.0008899644017219543,-0.004232058767229319,0.03695740923285484,-0.02127118408679962,-0.018092751502990723,-0.010381834581494331,0.03536997735500336,0.005152691155672073,0.032491154968738556,0.033592816442251205,0.04114346578717232,0.06336274743080139,0.0887540802359581,0.01740732230246067,0.09967551380395889,-0.06359267979860306,0.023401403799653053,0.06773412227630615,0.014114480465650558,-0.008327731862664223,-0.007276862394064665,0.01815740019083023,0.03594619035720825,-0.027316024526953697,-0.07211021333932877,-0.03952061012387276,-0.034489914774894714,-0.015154577791690826,-0.04090474173426628,0.08187202364206314,0.007402127608656883,-0.06631594151258469,0.026447530835866928,-0.023514386266469955,-0.0641804113984108,-0.03764702007174492,0.005397258326411247,0.0487055703997612,-0.00900226179510355,0.0013241274282336235,0.06307242810726166,-0.07216919958591461,0.03173281252384186,0.0114798154681921,0.020812323316931725,0.004637033678591251,0.04982226714491844,0.019331878051161766,-0.05814768373966217,-0.006104589439928532,-0.018813420087099075,0.04078807681798935,-0.0322694294154644,0.00424839835613966,0.015062063932418823,0.008827966637909412,0.032021958380937576,-0.042927466332912445,0.08950849622488022,0.0685739740729332,0.0031948620453476906,0.015244286507368088,-0.05602455139160156,0.06446582823991776,-0.0155238201841712,-0.06210524961352348,-0.04477255046367645,-0.008664618246257305,-0.017271097749471664,0.0458296462893486,-0.04339919984340668,0.05304870754480362,0.04389345645904541,0.007434455677866936,-0.012203802354633808,-0.019286558032035828,-0.002093429211527109,0.04157063364982605,0.030021894723176956,0.0018569689709693193,0.047308556735515594,0.05468222126364708,0.04096152260899544,0.016990631818771362,0.004159355536103249,-0.043293461203575134,0.01748478226363659,0.014380084350705147,-0.024830659851431847,0.004322557710111141,-0.00701585179194808,0.009160740301012993,-0.04180070385336876,0.028331607580184937,-0.024311859160661697,0.028985032811760902,0.04014287889003754,-0.07145910710096359,0.008138559758663177,-0.03911299630999565,-0.08580763638019562,-0.03065270557999611,-0.01847452111542225,0.054514989256858826,0.018115147948265076,-0.018165836110711098,-0.003532737959176302,0.001130610820837319,0.019990358501672745,-0.013341019861400127,-0.03752043843269348,0.004687543958425522,-0.021908994764089584,0.00841020978987217,-0.012007368728518486,0.01467263512313366,0.019120611250400543,0.0377337709069252,-0.0068246484734117985,-0.03567735478281975,0.04235050082206726,-0.017828062176704407,0.0420043021440506,-0.035778116434812546,0.026653969660401344,0.013009382411837578,0.0008016492938622832,0.019934451207518578,0.06000768393278122,0.00015721464296802878,0.03300650790333748,0.02686723880469799,0.0007544448599219322,0.07213959097862244,-0.02846369706094265,-0.049103520810604095,0.006382301449775696,-0.03409765288233757,-0.005780175793915987,0.03716612234711647,-0.03439987450838089,-0.001591708860360086,-0.007294162642210722,-0.039259184151887894,0.009386553429067135,-0.007112815976142883,0.0074060047045350075,0.004069473594427109,0.015590691938996315,-0.027125252410769463,-0.035284075886011124,0.006551964208483696,-0.01357296947389841,0.016298245638608932,-0.001984067726880312,-0.005959820933640003,-0.004386151675134897,-0.004584541544318199,-0.029635706916451454,-0.022082636132836342,-0.0008036373183131218,0.04237210750579834,0.008394481614232063,0.03823523968458176,0.027883578091859818,0.02504981867969036,-0.026107488200068474,0.043124377727508545,-0.007096361834555864,-0.04683791100978851,0.014898398891091347,0.029750274494290352,0.033682238310575485,-0.05593618378043175,0.013993649743497372,0.06858120113611221,-0.006917147431522608,-0.011637992225587368,0.0011779614724218845,0.04725676402449608,0.0028359328862279654,0.014215716160833836,0.009933103807270527,-0.01083021704107523,0.005293183960020542,0.02391435019671917,0.01644972339272499,-0.026377219706773758,-0.003755175042897463,-0.04870663210749626,0.021605242043733597,-0.042366836220026016,-0.0015988654922693968,0.061817821115255356,-0.019328905269503593,-0.017955128103494644,0.03052186407148838,-0.016410162672400475,-0.04992964118719101,0.054368630051612854,0.03721623867750168,0.004952030722051859,0.014209764078259468,-0.021986626088619232,-0.05815335363149643,-0.007216234691441059,-0.017345191910862923,0.05195885896682739,-0.010390091687440872,-0.022906560450792313,-0.011157779023051262,0.02922249771654606,-0.004727057181298733,0.038063712418079376,0.0321258082985878,-0.030442753806710243,0.053460970520973206,0.06364963203668594,0.05349409207701683,-0.019757332280278206,0.016856782138347626,0.0200027022510767,0.03213921934366226,-0.01017147395759821,-0.03381343185901642,-0.046952296048402786,-0.045721374452114105,-0.0029225689359009266,-0.027156325057148933,0.04586171731352806,0.011285850778222084,0.013475224375724792,0.014646480791270733,0.009123090654611588,-0.0002541042922530323,-0.009258308447897434,0.02817428670823574,-0.008589428849518299,0.09064068645238876,0.017825836315751076,0.06397468596696854,-0.026811596006155014,0.021684855222702026,-0.04866062104701996,-0.021171895787119865,-0.008077695965766907,-0.025145631283521652,-0.006099645048379898,-0.01915862411260605,-0.05891420692205429,-0.009615391492843628,0.01469123363494873,-0.026025913655757904,0.06313695013523102,0.03452082350850105,-0.006033126264810562,-0.05315778777003288,0.07975965738296509,0.02940097264945507,0.053379274904727936,-0.033754266798496246,-0.05491112545132637,0.011535098776221275,0.01647384651005268,0.061612553894519806,0.007379375398159027,-0.013413924723863602,-0.006904338952153921,-0.04903443902730942,-0.04786499962210655,-0.019971435889601707,-0.048442188650369644,-0.000156674170284532,-0.022809017449617386,-0.0059987944550812244,0.02907477505505085,-0.01817549392580986,0.030556373298168182,-0.03597595542669296,-0.028079820796847343,0.03241695463657379,-0.003363936673849821,0.013430025428533554,-0.014725652523338795,-0.011208035051822662,-0.005462310276925564,-0.032682597637176514,0.01718084327876568,0.05417345464229584,0.06847809255123138,0.035924967378377914,-0.023785080760717392,0.07147938758134842,0.0024581989273428917,0.06241809204220772,-0.024215539917349815,0.015607975423336029,-0.07184983789920807,0.054418351501226425,0.0809900239109993,0.0028576841577887535,-0.0066153742372989655,-0.03134440630674362,0.09481384605169296,-0.05187222361564636,-0.03124985098838806,0.01082997303456068,-0.03208456188440323,0.021486632525920868,-0.0244560819119215,-0.013729038648307323,-0.024975469335913658,-0.033478327095508575,0.04312177374958992,-0.02579597383737564,0.016942834481596947,0.009988208301365376,0.04269152134656906,-0.012626432813704014,0.0005119089037179947,0.010482209734618664,-0.0674089640378952,0.02347252517938614,-0.0567622035741806,-0.03821171447634697,-0.016007371246814728,0.011682181619107723,-0.03882225230336189,0.015134915709495544,0.02505839243531227,0.013964497484266758,-0.044135451316833496,0.002433749847114086,-0.021336430683732033,-0.062258362770080566,-0.02576306462287903,0.005152751691639423,0.012769117951393127,-0.043762482702732086,-0.04349559172987938,0.01633290760219097,0.03457011282444,-0.02186361700296402,-0.013161621056497097,0.005960426758974791,-0.03689279779791832,-0.021523544564843178,0.0718030333518982,-0.0218764990568161,0.0012219223426654935,0.014289266429841518,-0.010835439898073673,-0.02323865331709385,0.01981917954981327,-0.05596988648176193,-0.10262896120548248,-0.008379943668842316,-0.022027604281902313,0.04426085948944092,0.012999757193028927,0.07283195108175278,-0.04375739395618439,-0.047169994562864304,0.04400363191962242,-0.018904609605669975,-0.038736991584300995,-0.040012817829847336,-0.028955325484275818,-0.08649195730686188,0.018075913190841675,0.02132248505949974,0.05938936769962311,-0.03291354328393936,-0.05855770409107208,0.03614006191492081,-0.04343486204743385,0.036578308790922165,0.01802174746990204,-0.0014085696311667562,0.014679919928312302,0.013720359653234482,-0.023691102862358093,0.0012953259283676744,0.01945309527218342,0.06670672446489334,0.03257784992456436,-0.007768542971462011,-0.00164208491332829,-0.012607818469405174,0.01597435213625431,-0.027142534032464027,0.03765447810292244,0.029821135103702545,-0.02643747255206108,-0.03134562447667122,-0.05884725600481033,-0.07811801135540009,0.028610490262508392,0.03901314735412598,-0.016875581815838814,0.0098051642999053,-0.071775421500206,0.06931982934474945,-0.04607607424259186,-0.00600242568179965,0.030408987775444984,0.008856235072016716,-0.0654468983411789,-0.02233312837779522,-0.02537423186004162,0.0378434918820858,-6.096539085382587e-33,-0.02842452935874462,-0.057552121579647064,-0.01299373246729374,0.008784630335867405,0.029296541586518288,-0.000912439136300236,-0.018295768648386,-0.03226068615913391,-0.03274579718708992,-0.0647357776761055,-0.003116883337497711,-0.01635250262916088,0.006584887858480215,0.014522803947329521,-0.01876194402575493,-0.04228280112147331,0.012632441706955433,0.010799038223922253,-0.03201156482100487,0.006247378420084715,-0.01708981767296791,0.004502901807427406,-0.041395287960767746,-0.01704087108373642,-0.01990162581205368,0.025675293058156967,-0.02231053076684475,0.015943871811032295,-0.08667117357254028,0.04758692905306816,-0.04464219510555267,-0.021012060344219208,-0.024945441633462906,-0.0928494781255722,0.038460128009319305,-0.03396201133728027,-0.07781818509101868,0.015212505124509335,0.012344888411462307,0.0075194332748651505,0.04954735189676285,0.013735519722104073,0.011859264224767685,0.020110733807086945,0.002344849519431591,-0.02908337488770485,0.008783933706581593,0.0026922249235212803,0.01585538126528263,-0.06050288304686546,-0.027265746146440506,0.002340399194508791,-0.004304617177695036,0.024705586954951286,-0.016427427530288696,0.03158651664853096,0.058751024305820465,0.053460896015167236,-0.0779939666390419,-0.031486283987760544,0.02273351140320301,-0.030487025156617165,0.004204574041068554,0.0173799991607666,0.032272037118673325,0.020260944962501526,0.021600177511572838,0.029082389548420906,-0.04676438122987747,-0.045314423739910126,-0.004110196139663458,-0.0063648405484855175,-0.021323328837752342,-0.022701002657413483,0.030196573585271835,0.0013805640628561378,-0.09302760660648346,0.02050914615392685,-0.11336630582809448,0.047229692339897156,-0.012629001401364803,0.02701619826257229,0.025492720305919647,0.014466586522758007,0.009013391099870205,-0.033536914736032486,0.023655563592910767,0.01680668257176876,-0.036382634192705154,-0.0002058740210486576,0.017835957929491997,-0.06005902588367462,-0.07197093218564987,0.027850180864334106,-0.0970541387796402,-0.016175562515854836,0.04336177930235863,-0.01429116353392601,0.006643753033131361,0.030401451513171196,0.07179141044616699,-0.011194806545972824,-0.0024322408717125654,0.0006533875712193549,-0.03808164596557617,0.01825471967458725,0.05869317799806595,0.049083467572927475,-0.04432007670402527,0.010731713846325874,0.01615426316857338,-0.018677370622754097,-0.03676353394985199,0.04706481471657753,0.030025998130440712,0.034344445914030075,0.007155195809900761,-0.0868086963891983,0.03902013599872589,0.0477842278778553,0.023497341200709343,0.02976958081126213,-0.010900123976171017,0.05683176591992378,0.047338951379060745,0.029291773214936256,-0.012036706320941448,-0.003185631474480033,-0.03899673372507095,-0.05501009523868561,0.008627605624496937,-0.00043981653288938105,2.8278822128413594e-7,0.010812691412866116,-0.010782288387417793,-0.042324550449848175,-0.009277153760194778,-0.004784236662089825,-0.03955838829278946,-0.025659115985035896,-0.05142270401120186,-0.017599500715732574,-0.06568029522895813,0.028377613052725792,0.004305880982428789,0.05129069462418556,0.0017368439584970474,-0.048683371394872665,-0.04856683686375618,0.03937038406729698,-0.02709868736565113,-0.019822431728243828,-0.027969906106591225,0.011275558732450008,0.008801196701824665,0.03137911483645439,-0.01207016408443451,0.014615783467888832,0.07350064069032669,-0.007373501546680927,-0.0510229766368866,0.0371486097574234,-0.052152618765830994,0.023992042988538742,-0.005085778422653675,0.00039293066947720945,0.0036745984107255936,0.03540501743555069,0.033621154725551605,0.006292886100709438,0.00022742696455679834,0.06676360964775085,0.008625098504126072,0.03858589380979538,-0.007193740922957659,-0.047245319932699203,-0.09630773961544037,-0.00033834914211183786,-0.029255561530590057,-0.007338931318372488,0.05769439414143562,-0.007504807785153389,0.03301938623189926,0.005544420797377825,0.04200289398431778,-0.028351454064249992,-0.013336176984012127,0.034257203340530396,-0.03622470796108246,0.01773998886346817,0.02645636908710003,0.025064103305339813,0.01383147481828928,-0.024775629863142967,-0.008928501047194004,0.023421797901391983,0.004990122746676207,-0.014826334081590176,0.024427343159914017,-0.04971839115023613,3.424189100417659e-34,-0.030926009640097618,-0.03648584336042404,0.02917681261897087,0.017080433666706085,0.019987864419817924,-0.03771960735321045,-0.029647301882505417,-0.01995430514216423,0.044959016144275665,-0.018905360251665115,-0.03268422558903694]'
SET
  @HasCustomProps_96fe2070 = 0
SET
  @HasCustomEvents_96fe2070 = 0
SET
  @RequiresData_96fe2070 = 1
SET
  @DependencyCount_96fe2070 = 3
SET
  @TechnicalDesignVectorEmbeddingModelID_96fe2070 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_96fe2070 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_96fe2070 = 0
SET
  @ID_96fe2070 = '77571F8B-A4A2-4CD3-AC23-A59D6E989F5D'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_96fe2070,
  @Name = @Name_96fe2070,
  @Version = @Version_96fe2070,
  @VersionSequence = @VersionSequence_96fe2070,
  @Title = @Title_96fe2070,
  @Description = @Description_96fe2070,
  @Type = @Type_96fe2070,
  @Status = @Status_96fe2070,
  @DeveloperName = @DeveloperName_96fe2070,
  @DeveloperEmail = @DeveloperEmail_96fe2070,
  @DeveloperOrganization = @DeveloperOrganization_96fe2070,
  @SourceRegistryID = @SourceRegistryID_96fe2070,
  @ReplicatedAt = @ReplicatedAt_96fe2070,
  @LastSyncedAt = @LastSyncedAt_96fe2070,
  @Specification = @Specification_96fe2070,
  @FunctionalRequirements = @FunctionalRequirements_96fe2070,
  @TechnicalDesign = @TechnicalDesign_96fe2070,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_96fe2070,
  @TechnicalDesignVector = @TechnicalDesignVector_96fe2070,
  @HasCustomProps = @HasCustomProps_96fe2070,
  @HasCustomEvents = @HasCustomEvents_96fe2070,
  @RequiresData = @RequiresData_96fe2070,
  @DependencyCount = @DependencyCount_96fe2070,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_96fe2070,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_96fe2070,
  @HasRequiredCustomProps = @HasRequiredCustomProps_96fe2070,
  @ID = @ID_96fe2070;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_6a027de3 NVARCHAR(MAX),
@Name_6a027de3 NVARCHAR(500),
@Version_6a027de3 NVARCHAR(50),
@VersionSequence_6a027de3 INT,
@Title_6a027de3 NVARCHAR(1000),
@Description_6a027de3 NVARCHAR(MAX),
@Type_6a027de3 NVARCHAR(255),
@Status_6a027de3 NVARCHAR(50),
@DeveloperName_6a027de3 NVARCHAR(255),
@DeveloperEmail_6a027de3 NVARCHAR(255),
@DeveloperOrganization_6a027de3 NVARCHAR(255),
@SourceRegistryID_6a027de3 UNIQUEIDENTIFIER,
@ReplicatedAt_6a027de3 DATETIMEOFFSET,
@LastSyncedAt_6a027de3 DATETIMEOFFSET,
@Specification_6a027de3 NVARCHAR(MAX),
@FunctionalRequirements_6a027de3 NVARCHAR(MAX),
@TechnicalDesign_6a027de3 NVARCHAR(MAX),
@FunctionalRequirementsVector_6a027de3 NVARCHAR(MAX),
@TechnicalDesignVector_6a027de3 NVARCHAR(MAX),
@HasCustomProps_6a027de3 BIT,
@HasCustomEvents_6a027de3 BIT,
@RequiresData_6a027de3 BIT,
@DependencyCount_6a027de3 INT,
@TechnicalDesignVectorEmbeddingModelID_6a027de3 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_6a027de3 NVARCHAR(MAX),
@HasRequiredCustomProps_6a027de3 BIT,
@ID_6a027de3 UNIQUEIDENTIFIER
SET
  @Namespace_6a027de3 = N'Admin/Entities'
SET
  @Name_6a027de3 = N'EntityDetails'
SET
  @Version_6a027de3 = N'1.0.0'
SET
  @VersionSequence_6a027de3 = 1
SET
  @Title_6a027de3 = N'Entity Details Panel'
SET
  @Description_6a027de3 = N'Sliding panel that displays detailed information about a selected entity including fields and relationships'
SET
  @Type_6a027de3 = N'Other'
SET
  @Status_6a027de3 = N'Published'
SET
  @Specification_6a027de3 = N'{"name":"EntityDetails","title":"Entity Details Panel","description":"Sliding panel that displays detailed information about a selected entity including fields and relationships","type":"form","functionalRequirements":"## Entity Details Requirements\n\n- Slide in from the right when an entity is selected\n- Display entity metadata at the top\n- Show fields in a formatted table\n- Display relationships with icons\n- Include ''Open Record'' button\n- Support closing via X button or Escape key\n- Smooth slide animation\n- Scrollable content area","technicalDesign":"## Technical Design\n\n### Props\n- entity: Selected entity object\n- fields: Array of entity fields\n- relationships: Array of entity relationships\n- isOpen: Whether panel is visible\n- onClose: Callback to close panel\n- onOpenRecord: Callback to open entity record\n\n### Layout\n- Fixed position overlay\n- Slide animation using transform\n- Header with entity name and close button\n- Sections for metadata, fields, relationships\n- Sticky ''Open Record'' button at bottom","dataRequirements":{"mode":"views","entities":[{"name":"Entities","description":"Metadata about all entities in the system","displayFields":["ID","Name","DisplayName","NameSuffix","Description","SchemaName","BaseTable","BaseView"],"filterFields":["SchemaName","BaseTable"],"sortFields":["Name","DisplayName"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the entity"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the entity"},{"name":"DisplayName","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly display name for the entity"},{"name":"NameSuffix","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Optional suffix appended to entity names for display purposes"},{"name":"Description","sequence":5,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Description of the entity"},{"name":"SchemaName","sequence":6,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Database schema name"},{"name":"BaseTable","sequence":7,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"Base table in the database"},{"name":"BaseView","sequence":8,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Base view used for the entity"}],"permissionLevelNeeded":["read"],"usageContext":"Main entity list display and filtering"},{"name":"Entity Fields","description":"Fields belonging to each entity","displayFields":["Name","DisplayName","Type","Length","AllowsNull","IsPrimaryKey","IsUnique"],"filterFields":["EntityID"],"sortFields":["Sequence","Name"],"fieldMetadata":[{"name":"EntityID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to parent entity"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Field name"},{"name":"DisplayName","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly field name"},{"name":"Type","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Data type of the field"},{"name":"Length","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum length for string fields"},{"name":"AllowsNull","sequence":6,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field allows null values"},{"name":"IsPrimaryKey","sequence":7,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field is part of primary key"},{"name":"IsUnique","sequence":8,"defaultInView":true,"type":"bit","allowsNull":false,"isPrimaryKey":false,"description":"Whether field must be unique"},{"name":"Sequence","sequence":9,"defaultInView":false,"type":"int","allowsNull":false,"isPrimaryKey":false,"description":"Display order of the field"}],"permissionLevelNeeded":["read"],"usageContext":"Details panel to show entity fields"},{"name":"Entity Relationships","description":"Relationships between entities","displayFields":["RelatedEntity","Type","DisplayName","RelatedEntityJoinField"],"filterFields":["EntityID"],"sortFields":["Sequence","RelatedEntity"],"fieldMetadata":[{"name":"EntityID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to parent entity"},{"name":"RelatedEntity","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"The related entity in the relationship"},{"name":"Type","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Type of relationship (One to Many, Many to One, etc.)"},{"name":"DisplayName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"User-friendly name for the relationship"},{"name":"RelatedEntityJoinField","sequence":5,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"The field in the related entity that joins to this entity"},{"name":"Sequence","sequence":6,"defaultInView":false,"type":"int","allowsNull":false,"isPrimaryKey":false,"description":"Display order"}],"permissionLevelNeeded":["read"],"usageContext":"Details panel to show entity relationships"}],"queries":[],"description":"This component requires access to entity metadata including entities, their fields, and relationships to provide a comprehensive entity browsing experience"},"properties":[{"name":"entity","description":"The selected entity object","type":"object","required":true},{"name":"fields","description":"Array of fields for the entity","type":"array","required":true,"defaultValue":[]},{"name":"relationships","description":"Array of relationships for the entity","type":"array","required":true,"defaultValue":[]},{"name":"isOpen","description":"Whether the panel is open","type":"boolean","required":true},{"name":"onClose","description":"Callback to close the panel","type":"function","required":true},{"name":"onOpenRecord","description":"Callback to open the entity record","type":"function","required":true}],"events":[{"name":"onClose","description":"Fired when the panel should close","parameters":[]},{"name":"onOpenRecord","description":"Fired when the open record button is clicked","parameters":[{"name":"entityName","description":"Name of the entity to open","type":"string"}]}],"exampleUsage":"<EntityDetails\n  entity={selectedEntity}\n  fields={entityFields}\n  relationships={entityRelationships}\n  isOpen={detailsPanelOpen}\n  onClose={handleCloseDetails}\n  onOpenRecord={handleOpenRecord}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>","code":"function EntityDetails({ \n  entity, \n  fields, \n  relationships, \n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''EntityDetails handleOpenRecord called'', { entity, onOpenRecord });\n    if (entity?.Name) {\n      console.log(''Calling onOpenRecord with entity name:'', entity.Name);\n      if (onOpenRecord) {\n        onOpenRecord(entity.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No entity or entity name available'');\n    }\n  }, [entity, onOpenRecord]);\n  \n  // Render field type badge\n  const renderFieldType = (type) => {\n    const typeColors = {\n      ''nvarchar'': styles.colors.info || styles.colors.primary,\n      ''varchar'': styles.colors.info || styles.colors.primary,\n      ''int'': styles.colors.success || styles.colors.primary,\n      ''bigint'': styles.colors.success || styles.colors.primary,\n      ''decimal'': styles.colors.success || styles.colors.primary,\n      ''float'': styles.colors.success || styles.colors.primary,\n      ''bit'': styles.colors.warning || styles.colors.secondary,\n      ''datetime'': styles.colors.secondary,\n      ''uniqueidentifier'': styles.colors.primary,\n      ''text'': styles.colors.info || styles.colors.primary,\n      ''ntext'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = typeColors[type?.toLowerCase()] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {type}\n      </span>\n    );\n  };\n  \n  // Render relationship type icon\n  const renderRelationshipIcon = (type) => {\n    const icons = {\n      ''One to Many'': ''1:N'',\n      ''Many to One'': ''N:1'',\n      ''Many to Many'': ''N:N'',\n      ''One to One'': ''1:1''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: styles.colors.primary + ''15'',\n        color: styles.colors.primary,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.bold || ''700'',\n        fontFamily: ''monospace''\n      }}>\n        {icons[type] || type}\n      </span>\n    );\n  };\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 99999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: ''75px'',\n        right: 0,\n        bottom: 0,\n        width: ''480px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 100000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {entity?.DisplayName || entity?.Name || ''No Entity Selected''}\n              </h2>\n              {entity?.DisplayName && entity?.Name && entity.DisplayName !== entity.Name && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {entity.Name}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              ✕\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {entity ? (\n            <>\n              {/* Entity Metadata */}\n              {entity.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {entity.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Quick Info */}\n              <div style={{\n                display: ''grid'',\n                gridTemplateColumns: ''repeat(2, 1fr)'',\n                gap: styles.spacing.md,\n                marginBottom: styles.spacing.xl\n              }}>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Schema\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.SchemaName || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Base Table\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.BaseTable || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Base View\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {entity.BaseView || ''-''}\n                  </div>\n                </div>\n                <div style={{\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''sm'')\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    marginBottom: styles.spacing.xs\n                  }}>\n                    Field Count\n                  </div>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                    color: styles.colors.text\n                  }}>\n                    {fields?.length || 0}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Fields Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Fields ({fields?.length || 0})\n                </h3>\n                <div style={{\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  overflow: ''hidden''\n                }}>\n                  {fields && fields.length > 0 ? (\n                    <table style={{\n                      width: ''100%'',\n                      borderCollapse: ''collapse''\n                    }}>\n                      <thead>\n                        <tr style={{\n                          borderBottom: `1px solid $' + '{styles.colors.border}`\n                        }}>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''left'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Field\n                          </th>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''left'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Type\n                          </th>\n                          <th style={{\n                            padding: styles.spacing.sm,\n                            textAlign: ''center'',\n                            fontSize: styles.typography.fontSize.sm,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.textSecondary\n                          }}>\n                            Attributes\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {fields.map((field, index) => (\n                          <tr\n                            key={index}\n                            style={{\n                              borderBottom: index < fields.length - 1 \n                                ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                                : ''none''\n                            }}\n                          >\n                            <td style={{\n                              padding: styles.spacing.sm,\n                              fontSize: styles.typography.fontSize.sm,\n                              color: styles.colors.text\n                            }}>\n                              <div>\n                                <div style={{\n                                  fontWeight: field.IsPrimaryKey \n                                    ? (styles.typography.fontWeight?.semibold || ''600'')\n                                    : (styles.typography.fontWeight?.regular || ''400'')\n                                }}>\n                                  {field.DisplayName || field.Name}\n                                </div>\n                                {field.DisplayName && (\n                                  <div style={{\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    color: styles.colors.textSecondary,\n                                    fontFamily: ''monospace''\n                                  }}>\n                                    {field.Name}\n                                  </div>\n                                )}\n                              </div>\n                            </td>\n                            <td style={{\n                              padding: styles.spacing.sm\n                            }}>\n                              {renderFieldType(field.Type)}\n                              {field.Length && (\n                                <span style={{\n                                  marginLeft: styles.spacing.xs,\n                                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                  color: styles.colors.textSecondary\n                                }}>\n                                  ({field.Length})\n                                </span>\n                              )}\n                            </td>\n                            <td style={{\n                              padding: styles.spacing.sm,\n                              textAlign: ''center''\n                            }}>\n                              <div style={{\n                                display: ''flex'',\n                                gap: styles.spacing.xs,\n                                justifyContent: ''center'',\n                                flexWrap: ''wrap''\n                              }}>\n                                {field.IsPrimaryKey && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.warning || styles.colors.secondary) + ''15'',\n                                    color: styles.colors.warning || styles.colors.secondary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    PK\n                                  </span>\n                                )}\n                                {field.IsUnique && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.info || styles.colors.primary) + ''15'',\n                                    color: styles.colors.info || styles.colors.primary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    UQ\n                                  </span>\n                                )}\n                                {!field.AllowsNull && !field.IsPrimaryKey && (\n                                  <span style={{\n                                    padding: `2px $' + '{styles.spacing.xs}`,\n                                    backgroundColor: (styles.colors.error || styles.colors.secondary) + ''15'',\n                                    color: styles.colors.error || styles.colors.secondary,\n                                    borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                    fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                    fontWeight: styles.typography.fontWeight?.bold || ''700''\n                                  }}>\n                                    NN\n                                  </span>\n                                )}\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  ) : (\n                    <div style={{\n                      padding: styles.spacing.lg,\n                      textAlign: ''center'',\n                      color: styles.colors.textSecondary,\n                      fontSize: styles.typography.fontSize.sm\n                    }}>\n                      No fields available\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              {/* Relationships Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Relationships ({relationships?.length || 0})\n                </h3>\n                <div style={{\n                  display: ''flex'',\n                  flexDirection: ''column'',\n                  gap: styles.spacing.sm\n                }}>\n                  {relationships && relationships.length > 0 ? (\n                    relationships.map((rel, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          display: ''flex'',\n                          alignItems: ''center'',\n                          gap: styles.spacing.md\n                        }}\n                      >\n                        {renderRelationshipIcon(rel.Type)}\n                        <div style={{ flex: 1 }}>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {rel.DisplayName || rel.RelatedEntity}\n                          </div>\n                          {rel.RelatedEntityJoinField && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              via {rel.RelatedEntityJoinField}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div style={{\n                      padding: styles.spacing.lg,\n                      backgroundColor: styles.colors.surface,\n                      borderRadius: getBorderRadius(''sm''),\n                      textAlign: ''center'',\n                      color: styles.colors.textSecondary,\n                      fontSize: styles.typography.fontSize.sm\n                    }}>\n                      No relationships defined\n                    </div>\n                  )}\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Entity Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select an entity from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {entity && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Entity Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}","dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_6a027de3 = N'## Entity Details

- Slide in from the right when an entity is selected
- Display entity metadata at the top
- Show fields in a formatted table
- Display relationships with icons
- Include ''Open Record'' button
- Support closing via X button or Escape key
- Smooth slide animation
- Scrollable content area'
SET
  @TechnicalDesign_6a027de3 = N'## Design

### Props
- entity: Selected entity object
- fields: Array of entity fields
- relationships: Array of entity relationships
- isOpen: Whether panel is visible
- onClose: Callback to close panel
- onOpenRecord: Callback to open entity record

### Layout
- Fixed position overlay
- Slide animation using transform
- Header with entity name and close button
- Sections for metadata, fields, relationships
- Sticky ''Open Record'' button at bottom'
SET
  @FunctionalRequirementsVector_6a027de3 = N'[-0.002087970729917288,-0.009539744816720486,-0.00039501007995568216,-0.011082619428634644,-0.011342833749949932,0.02810012549161911,0.042209964245557785,0.05928429216146469,-0.054289963096380234,-0.013591830618679523,-0.013269752264022827,0.03306238725781441,0.01741080731153488,0.060327064245939255,-0.007865426130592823,-0.105472631752491,-0.04006217420101166,0.006005467846989632,0.014696863479912281,0.002543821930885315,0.015302017331123352,-0.016913890838623047,-0.035096172243356705,-0.018312234431505203,-0.0306647177785635,-0.007065486628562212,-0.07132260501384735,0.03651455417275429,0.003309678053483367,-0.0667063519358635,-0.036982614547014236,0.06564293801784515,-0.04760976508259773,-0.08207718282938004,0.000001908952299345401,-0.021419707685709,-0.03309643641114235,0.02114817127585411,-0.07007281482219696,0.04157669469714165,-0.012194724753499031,-0.02728511393070221,0.0596720390021801,-0.037662994116544724,0.022071313112974167,-0.04220366105437279,0.01080665085464716,0.0665203183889389,-0.005095264408737421,-0.008434548042714596,0.012532848864793777,0.007519469130784273,0.033470895141363144,-0.030304597690701485,0.07648076862096786,0.025389935821294785,0.0026916703209280968,0.014825938269495964,0.04886089265346527,0.02042194828391075,-0.016977505758404732,-0.03142620250582695,0.028202185407280922,-0.03484562411904335,0.04284137114882469,0.021901991218328476,0.037265386432409286,-0.023369567468762398,0.056169793009757996,0.037720322608947754,0.11560135334730148,0.027279168367385864,0.001824146369472146,-0.07302716374397278,0.012290040031075478,-0.02258688397705555,0.0009798515820875764,-0.012588872574269772,-0.007051564287394285,-0.035858433693647385,-0.025711804628372192,-0.020516997203230858,-0.03777320310473442,0.003975107334554195,-0.012344390153884888,-0.012615418061614037,0.008288735523819923,-0.03831500932574272,-0.010321766138076782,-0.03794465214014053,0.029027044773101807,0.001727821072563529,-0.00396881764754653,0.01701545901596546,-0.04768356680870056,-0.025316717103123665,0.02716737613081932,-0.02745676040649414,0.033816006034612656,0.008455741219222546,-0.003985085058957338,0.047054264694452286,0.023192664608359337,0.01848003827035427,0.06233777850866318,0.0614180862903595,-0.0310758538544178,-0.005811902228742838,-0.006440968718379736,0.030116647481918335,0.017294222488999367,0.022406989708542824,-0.03521832451224327,0.0525505356490612,-0.04429372027516365,0.017270321026444435,0.0043245889246463776,-0.008582829497754574,0.024305561557412148,0.039444953203201294,0.10777346044778824,0.0143172862008214,-0.005355246365070343,-0.029522838070988655,-0.015001919120550156,-0.03950412943959236,-0.03959447145462036,-0.05250558257102966,0.0015485192416235805,0.01930467039346695,-0.0189406368881464,-0.009013975039124489,0.008398899808526039,-0.0448090098798275,0.010537074878811836,-0.010212463326752186,0.03155592456459999,0.027245990931987762,-0.06367824226617813,0.022708814591169357,-0.013524842448532581,-0.007552722003310919,-0.04840194433927536,0.03848012164235115,0.007478736340999603,0.02931869588792324,-0.02266974188387394,-0.040447331964969635,0.03903913125395775,0.011635681614279747,-0.02356608770787716,-0.03434276208281517,-0.04282108694314957,0.021601920947432518,0.013583619147539139,0.027820585295557976,-0.006988997105509043,-0.02354479394853115,0.01412136945873499,-0.005618614610284567,-0.0013956114416942,0.014527157880365849,0.018725518137216568,-0.0013960041105747223,-0.026302337646484375,0.017039624974131584,-0.015383400954306126,0.008108336478471756,0.02522268518805504,0.0008535207016393542,0.00861668772995472,-0.014546643942594528,-0.015130767598748207,-0.035415247082710266,0.010977196507155895,-0.008665112778544426,0.010358397848904133,0.015688739717006683,-0.03970379754900932,0.025664199143648148,0.03595781326293945,-0.06697046011686325,-0.015417445451021194,0.03172600269317627,0.11594703048467636,-0.023846779018640518,-0.01741739735007286,0.016941387206315994,-0.03905387967824936,-0.014137751422822475,0.014837752096354961,0.011981138959527016,-0.01818699575960636,-0.004758735187351704,-0.005780482664704323,-0.006110764108598232,-0.0012634126469492912,0.03209615498781204,0.023145537823438644,0.030432865023612976,-0.03570649027824402,0.028636792674660683,-0.009945225901901722,0.05072648450732231,-0.01088434923440218,-0.0012175196316093206,-0.028079356998205185,-0.05279969424009323,0.0054387543350458145,0.050243183970451355,0.03509165719151497,-0.0010873874416574836,-0.033395297825336456,0.03532794117927551,-0.04766911268234253,0.005332222208380699,0.017413143068552017,0.03298671171069145,-0.05770181864500046,0.0324043408036232,0.0002598236605990678,-0.03578118607401848,0.0024998474400490522,0.009963051415979862,0.049197833985090256,0.03458040952682495,0.04049033671617508,-0.003149794414639473,0.008519580587744713,0.04779960587620735,0.015785781666636467,-0.013554543256759644,0.012792875990271568,0.014210808090865612,0.0306803397834301,0.05023489519953728,-0.00461959233507514,0.12370088696479797,-0.010580251924693584,0.04409686103463173,-0.0010499245254322886,-0.12166164815425873,0.0025075131561607122,0.0011310408590361476,-0.021193886175751686,-0.04396075755357742,-0.018283741548657417,0.008278408087790012,0.053206201642751694,-0.011541569605469704,-0.0009366524172946811,0.025383437052369118,0.06962735950946808,-0.012679502367973328,0.01814456284046173,0.07147369533777237,-0.05648178607225418,0.014700041152536869,-0.04037097468972206,0.03032507374882698,0.03560051694512367,-0.027544956654310226,-0.010546855628490448,-0.029215730726718903,-0.006036608945578337,-0.003339781193062663,0.052001290023326874,-0.04938366264104843,-0.012599999085068703,-0.0022470655385404825,0.030349692329764366,0.0009166270028799772,0.013724510557949543,-0.01655416004359722,0.00070585758658126,0.0010224462021142244,-0.05088900774717331,-0.0009128511883318424,0.012927494943141937,-0.019142616540193558,0.02214932255446911,-0.015403869561851025,0.0042670960538089275,0.03588728979229927,-0.007722318172454834,-0.0032656772527843714,-0.008355055004358292,-0.05054609477519989,0.03597171604633331,-0.037313565611839294,0.04628477990627289,-0.015043889172375202,0.03766871988773346,0.029405642300844193,-0.0074015469290316105,0.028287524357438087,-0.03338434547185898,0.04944130405783653,-0.050095800310373306,0.09709075838327408,-0.027879780158400536,0.015904201194643974,-0.02827315218746662,0.01659674383699894,0.004513027612119913,0.043754663318395615,0.022690536454319954,0.011401694267988205,-0.023444056510925293,0.039069052785634995,-0.002947608707472682,0.04689306020736694,0.017995202913880348,-0.11067736893892288,0.024642597883939743,0.01843813806772232,0.038120824843645096,0.02228405512869358,0.011200102977454662,0.03822153061628342,-0.02202567458152771,0.021100757643580437,-0.004856820218265057,-0.027110004797577858,-0.017933467403054237,0.0417163111269474,0.012343212030827999,0.01516648754477501,0.04122668877243996,0.029943404719233513,0.014216410927474499,0.07200616598129272,-0.035740867257118225,0.012052418664097786,0.04609524458646774,0.04746804013848305,-0.040399763733148575,-0.025517866015434265,-0.004893520846962929,-0.034056831151247025,-0.032080017030239105,-0.021395869553089142,-0.012449432164430618,-0.0063454569317400455,0.057547952979803085,0.0182858407497406,0.008966376073658466,0.0006576747982762754,-0.05418798327445984,0.0015731501625850797,0.01591229997575283,0.017446298152208328,-0.019705168902873993,0.008778120391070843,0.028193138539791107,-0.006169516127556562,-0.014678032137453556,0.007587462663650513,-0.04606429114937782,-0.07974467426538467,0.038573477417230606,0.00020481472893152386,-0.04840342700481415,0.021111469715833664,0.027234811335802078,0.026311105117201805,-0.037615805864334106,-0.03132518753409386,-0.032586026936769485,-0.016243550926446915,-0.0034525191877037287,-0.0016193523770198226,0.01777576468884945,0.06383176892995834,-0.013310909271240234,-0.010816878639161587,-0.004367974121123552,0.03323021158576012,-0.0022514339070767164,0.01922137849032879,0.03514064848423004,-0.041230298578739166,0.10454750806093216,-0.05851967632770538,0.04349590837955475,0.013291478157043457,-0.021035153418779373,0.025339540094137192,-0.008440197445452213,-0.02941061556339264,-0.046042028814554214,0.023067520931363106,-0.039169132709503174,-0.05263155326247215,-0.014006653800606728,-0.02629844658076763,-0.001886966871097684,0.005126208532601595,0.001553392969071865,-0.0013411467662081122,-0.012730957008898258,0.09726990759372711,0.01068610418587923,-0.003059873590245843,-0.005357680842280388,-0.04064544662833214,0.03093569353222847,0.026603007689118385,0.010222228243947029,-0.011881527490913868,-0.07906775176525116,0.0393095538020134,-0.03337384760379791,-0.02031228505074978,0.047208018600940704,-0.03650691360235214,0.013750718906521797,-0.03673719987273216,0.027209831401705742,0.09478142112493515,-0.014269798994064331,-0.027415277436375618,0.029564302414655685,-0.020695233717560768,0.008304772898554802,-0.014052500948309898,-0.06185271590948105,-0.0416889414191246,-0.003128421027213335,0.045734602957963943,-0.04991980642080307,0.004590304102748632,-0.027035964652895927,0.019550936296582222,0.02358170785009861,0.04227381572127342,0.01551943551748991,-0.00619332492351532,0.036254171282052994,0.005035359412431717,-0.03515762835741043,0.02192903310060501,0.017669349908828735,0.031854283064603806,0.008802956901490688,-0.003364027477800846,-0.029020873829722404,-0.04139290750026703,-0.01890934444963932,0.027611760422587395,-0.05812934786081314,-0.006245082709938288,-0.05270889401435852,0.02431412972509861,-0.009643938392400742,-0.007071631494909525,-0.0905829444527626,0.010378005914390087,-0.023196930065751076,-0.04392378032207489,-0.01698877662420273,0.02099868282675743,-0.022067245095968246,-0.002093186369165778,-0.007125888951122761,-0.057750310748815536,0.01927218586206436,-0.06496953964233398,-0.03520265594124794,-0.0155725022777915,0.035305824130773544,-0.01691320724785328,-0.0069046360440552235,-0.045788928866386414,-0.04295503348112106,0.01108573842793703,-0.017192533239722252,-0.009591172449290752,-0.055637259036302567,-0.027475446462631226,0.0014210655353963375,0.018405407667160034,0.041064612567424774,-0.12186693400144577,0.006690537091344595,0.0481734499335289,-0.010766392573714256,-0.012526468373835087,0.027937598526477814,0.04193059727549553,-0.03239656612277031,-0.03262821212410927,0.00000607124320595176,0.03401346504688263,0.02113228477537632,-0.011583343148231506,-0.07044346630573273,0.05231914669275284,-0.07407142221927643,-0.0813739225268364,-0.0426289327442646,-0.012783761136233807,-0.006487842183560133,0.006833138410001993,0.012057864107191563,0.01422934141010046,0.009203028865158558,0.0768524706363678,-0.026937758550047874,0.03321455791592598,0.07825444638729095,-0.026556098833680153,0.0116646196693182,-0.00776874553412199,-0.0219441968947649,0.08202247321605682,-0.024339886382222176,0.012159156613051891,0.0059133535251021385,-0.0014708897797390819,0.010959258303046227,-0.0018441140418872237,-0.007159761618822813,0.01419559121131897,-0.005060830619186163,0.01429160125553608,0.02361002191901207,0.006139575038105249,0.03231843560934067,-0.0009603479411453009,-0.017292959615588188,0.040148839354515076,0.04012176766991615,0.02782573364675045,-0.029326021671295166,0.02701963484287262,0.08033770322799683,-0.031240109354257584,-0.020167186856269836,-0.00032650583307258785,-0.03703392297029495,0.03944699838757515,0.0109041016548872,-0.03344287350773811,-0.02059444971382618,0.015110471285879612,-0.006728080101311207,-0.0778898075222969,0.0084571223706007,-0.004525255411863327,-0.0067222085781395435,-0.0749148279428482,-0.05686820298433304,-0.019305262714624405,-0.04200930520892143,-5.83253407444744e-33,-0.033559683710336685,-0.024128125980496407,-0.05325838550925255,0.030465973541140556,0.05415943264961243,-0.057208724319934845,-0.0265145655721426,0.0026910232845693827,-0.032531216740608215,0.009696269407868385,0.007582361809909344,-0.04030187055468559,0.014024081639945507,0.03685036674141884,-0.020469501614570618,-0.0030717947520315647,0.007319328840821981,-0.03088224306702614,0.024881785735487938,0.04021713510155678,-0.06025610864162445,-0.009639004245400429,0.01995101198554039,-0.06294525414705276,0.007468729745596647,0.040733128786087036,-0.0009551988332532346,0.006561942398548126,0.005147330928593874,0.05067068338394165,-0.029483163729310036,-0.07068997621536255,-0.009642833843827248,-0.06080307438969612,0.03202762454748154,-0.0223025344312191,-0.10507862269878387,0.015972044318914413,-0.01824495941400528,0.028642384335398674,0.08586016297340393,-0.04513585567474365,-0.014981016516685486,0.009963574819266796,-0.0039048802573233843,-0.025100642815232277,0.017426075413823128,-0.00937706045806408,-0.025950537994503975,-0.05502259358763695,0.006388355512171984,0.01146131195127964,-0.008028892800211906,0.01563289575278759,0.01711774617433548,-0.06861922889947891,0.033492349088191986,-0.053114812821149826,-0.0585104301571846,-0.03359626978635788,0.03318195044994354,-0.02543812245130539,-0.019642572849988937,-0.0010039574699476361,0.05505560711026192,0.01630115509033203,-0.03565799072384834,0.06325186043977737,-0.029335564002394676,0.039744745939970016,0.004040113650262356,0.044648997485637665,0.005336229223757982,-0.05755162611603737,-0.01676359958946705,0.06783131510019302,0.01570850796997547,0.02909010834991932,-0.11255474388599396,0.06903978437185287,0.036742113530635834,0.0004433932190295309,-0.03777270019054413,0.006916421931236982,-0.011121776886284351,-0.02907199040055275,-0.0012757985386997461,-0.027300124987959862,0.01261634100228548,-0.02662009559571743,0.010919410735368729,-0.01936386339366436,-0.04950805753469467,0.043576113879680634,-0.10884947329759598,0.03116697631776333,0.044709183275699615,0.021828187629580498,-0.02097911946475506,-0.030791863799095154,-0.008429327979683876,-0.036576155573129654,0.005062504205852747,-0.00016034675354603678,0.005796324461698532,0.032336704432964325,-0.0009446503827348351,-0.031155377626419067,-0.061443228274583817,0.018908703699707985,0.020354747772216797,0.004303777124732733,-0.021422123536467552,-0.0073561640456318855,-0.03171742334961891,-0.039321426302194595,-0.02841155230998993,0.04603240266442299,0.017319614067673683,-0.01115905400365591,-0.012444017454981804,0.002467065816745162,0.03662322089076042,0.017813103273510933,0.08371876180171967,-0.0006665730034001172,0.012354512698948383,-0.016320936381816864,0.020067228004336357,0.034033820033073425,0.004665560554713011,0.04090071842074394,2.649592829584435e-7,-0.009264055639505386,0.005998275242745876,0.052367936819791794,0.05697333440184593,0.02014428749680519,-0.043071698397397995,0.03128940239548683,-0.02896992303431034,-0.014182121492922306,-0.13505443930625916,0.06756077706813812,0.023348018527030945,0.049478646367788315,0.029558973386883736,0.037839148193597794,-0.025870639830827713,0.06159243732690811,-0.051441799849271774,-0.05990530550479889,-0.0008912291959859431,0.07047602534294128,0.011104293167591095,0.003166451118886471,0.04803084209561348,-0.005013981834053993,0.06636355072259903,0.0017060971586033702,-0.04591378569602966,0.09102930873632431,-0.025643328204751015,0.02573472633957863,0.007183990906924009,-0.006729924585670233,0.024167053401470184,0.010210123844444752,0.00415823794901371,-0.007006611209362745,0.038196317851543427,0.015523371286690235,0.028334759175777435,0.05782489478588104,-0.07554105669260025,-0.020739465951919556,-0.053068581968545914,0.011416492983698845,-0.014867594465613365,-0.015027038753032684,0.061596814543008804,-0.03845008835196495,0.037440527230501175,0.02848624438047409,0.018676649779081345,0.05440900847315788,-0.054741352796554565,0.023732908070087433,-0.017418785020709038,-0.026527758687734604,0.04733321815729141,-0.0059461030177772045,0.01707177609205246,0.009928912855684757,0.033075619488954544,-0.007844461128115654,0.011916020885109901,0.015804685652256012,-0.02962096594274044,-0.01906520500779152,3.362215293367881e-34,-0.03137058764696121,-0.03535160422325134,0.04984870180487633,0.08959416300058365,0.04703087732195854,0.01380355004221201,0.04039464145898819,-0.05657394230365753,-0.002058866200968623,-0.03794175013899803,-0.02428002469241619]'
SET
  @TechnicalDesignVector_6a027de3 = N'[0.022589782252907753,-0.003648285986855626,-0.0050565521232783794,-0.023614315316081047,0.01947898603975773,-0.027604524046182632,0.074955053627491,0.040549032390117645,0.0027865259908139706,-0.01402334962040186,-0.04140869528055191,0.029403643682599068,0.0558130256831646,0.04488137736916542,0.042091161012649536,-0.09814397245645523,-0.04268305376172066,0.04938887432217598,-0.020221438258886337,-0.015278154984116554,0.010707522742450237,0.002822432667016983,-0.019621850922703743,0.02258375659584999,0.0018980370368808508,-0.03799129277467728,-0.06242586672306061,0.00957746896892786,0.037699274718761444,-0.013901735655963421,-0.0007075838511809707,0.05766578018665314,-0.08500067889690399,-0.04292246699333191,0.0000018031897752734949,-0.015754837542772293,-0.002313398290425539,-0.0057953130453825,-0.05423654243350029,0.031048309057950974,-0.05883722007274628,-0.02112654410302639,0.016848374158143997,-0.029174095019698143,0.007152986712753773,-0.10028638690710068,-0.029147470369935036,0.06182406097650528,0.02034727670252323,0.00371413747780025,0.001057588728144765,-0.021839553490281105,0.09102410823106766,-0.015816425904631615,0.047275103628635406,0.017174556851387024,-0.004062993451952934,-0.04518147185444832,0.02106427773833275,-0.02327030710875988,-0.007011445704847574,-0.035941820591688156,0.030920641496777534,-0.03637228533625603,0.03457128256559372,0.017311420291662216,0.030861850827932358,-0.03607596084475517,0.0252293199300766,0.05371011793613434,0.18332158029079437,0.021674172952771187,-0.007952820509672165,-0.014478190802037716,0.0070932465605437756,0.005220012739300728,0.02017461694777012,-0.030656874179840088,-0.01585252210497856,-0.007738350424915552,0.005269552115350962,-0.005577524192631245,-0.0475827194750309,0.016482120379805565,0.04385335370898247,-0.014058554545044899,-0.012281376868486404,-0.017650438472628593,-0.030349642038345337,-0.03026379458606243,0.01667972281575203,-0.012813474982976913,0.003151222364977002,0.011807362549006939,-0.015459544956684113,0.009446961805224419,0.027406880632042885,-0.07945918291807175,0.014418087899684906,0.0012408063048496842,-0.05894404277205467,0.049368515610694885,0.02695109136402607,0.029521042481064796,0.04341207817196846,0.10236216336488724,-0.003160156076774001,0.015636524185538292,0.007970946840941906,0.03724260628223419,-0.028166035190224648,0.009270855225622654,-0.013750496320426464,0.04793921113014221,-0.01105385273694992,0.026621529832482338,-0.020049450919032097,-0.018891720101237297,0.03085196204483509,0.007526267785578966,0.09151683747768402,0.004502367228269577,-0.005006765015423298,-0.029113180935382843,0.03001583181321621,0.01762719266116619,-0.010100283659994602,-0.07861468195915222,-0.0011589180212467909,0.03822460025548935,-0.0027797038201242685,-0.0146305738016963,0.016411209478974342,-0.003540498437359929,-0.03881966322660446,0.03774406760931015,0.01300465501844883,-0.0071393270045518875,-0.02417718432843685,0.0342944897711277,-0.023821964859962463,-0.010994764044880867,-0.09216631203889847,0.03460400179028511,-0.019451778382062912,-0.003497217781841755,-0.015994509682059288,-0.07329656928777695,0.024933157488703728,0.02730250172317028,0.03512880578637123,-0.05110666900873184,-0.03210226073861122,0.033318039029836655,-0.02738678641617298,0.04424372315406799,-0.05312921106815338,-0.00839762482792139,0.04216112196445465,0.022154834121465683,0.0209836196154356,0.03818914294242859,0.03826696798205376,0.04051588848233223,-0.054389070719480515,0.028689149767160416,-0.018975302577018738,-0.03945669159293175,0.014757216908037663,-0.03110661543905735,-0.03867631405591965,-0.026890045031905174,-0.026668628677725792,0.00617891363799572,-0.02728348784148693,-0.06392509490251541,0.03832542896270752,0.00032671663211658597,-0.08107955753803253,0.0062811351381242275,-0.004819761961698532,-0.028110986575484276,-0.02208101376891136,0.021452296525239944,0.03639545291662216,-0.03654500097036362,-0.06323333084583282,0.037267256528139114,-0.0015592880081385374,-0.006999428384006023,-0.010609986260533333,0.022080114111304283,-0.09734941273927689,-0.016815531998872757,-0.0041936244815588,0.014533554203808308,-0.0363101027905941,0.0931757315993309,0.009279186837375164,0.06049603596329689,-0.018321992829442024,0.015714410692453384,0.04302984103560448,0.025008510798215866,-0.030665019527077675,0.011311485432088375,-0.07167156785726547,-0.009888027794659138,-0.016434645280241966,0.009547402150928974,-0.0037452192045748234,0.006218621972948313,-0.010293274186551571,0.02192390151321888,-0.0380886010825634,0.0028820300940424204,0.03071637451648712,0.007460727356374264,-0.06726362556219101,0.006363541819155216,-0.00899141002446413,-0.015736263245344162,0.05426464229822159,0.022616658359766006,0.03717438131570816,0.017580727115273476,-0.003214906668290496,0.014259305782616138,-0.00817131344228983,0.016352875158190727,-0.0015879023121669888,-0.02907402813434601,0.00041237816913053393,0.03075479343533516,0.032720182090997696,0.060646992176771164,-0.018743278458714485,0.021996088325977325,-0.02081712707877159,0.03153439238667488,-0.03772158920764923,-0.06486228853464127,-0.019576208665966988,0.0015886706532910466,-0.03870757669210434,-0.025680294260382652,0.012697338126599789,0.008969764225184917,0.005128173157572746,-0.02985944226384163,-0.012054067105054855,0.011640914715826511,0.03821391984820366,-0.032742176204919815,-0.006525300443172455,0.027679115533828735,0.031209338456392288,0.04396878182888031,0.00009906997729558498,0.0288681760430336,0.04068826511502266,-0.020726503804326057,0.008390925824642181,-0.0174839086830616,0.03176804631948471,-0.017819147557020187,0.028257688507437706,-0.06621790677309036,-0.009190904907882214,-0.008039147593080997,0.0128715168684721,0.007913860492408276,-0.013608668930828571,-0.03924814984202385,0.027986405417323112,0.05463728681206703,0.01684325374662876,0.046272050589323044,-0.030500628054142,-0.05562663450837135,0.011712037026882172,-0.033842116594314575,0.0022539664059877396,0.04627996310591698,-0.00983481202274561,0.025518007576465607,0.006506719160825014,-0.03152405843138695,0.003532333765178919,-0.023040927946567535,0.02662191167473793,-0.02416115812957287,0.037992723286151886,-0.016859132796525955,-0.0158954206854105,0.014219173230230808,0.037037502974271774,0.023441491648554802,-0.043716102838516235,0.07043972611427307,0.00393953500315547,0.012641875073313713,-0.02557429112493992,0.011010841466486454,0.02308281883597374,0.009615547023713589,-0.02280242368578911,0.037178948521614075,0.013855071738362312,0.03311591222882271,0.003148965770378709,0.03307335451245308,0.006378574296832085,-0.03896108269691467,0.0030629311222583055,0.02358958311378956,0.026936015114188194,0.005689886398613453,-0.01186977606266737,0.08167941868305206,-0.007569132838398218,0.00897975079715252,0.007696956396102905,-0.00430184043943882,-0.05838765949010849,0.03991664573550224,0.027662228792905807,-0.004590026568621397,0.09434732049703598,-0.014442706480622292,0.018943829461932182,0.05263633280992508,-0.01602168008685112,0.0005903813289478421,0.07265982776880264,-0.05023659020662308,-0.018070118501782417,-0.05925185978412628,-0.009094366803765297,-0.008852706290781498,-0.0009105862118303776,-0.01640992984175682,-0.02730063535273075,0.013543334789574146,-0.018261903896927834,-0.009759552776813507,-0.11841102689504623,0.01559923030436039,-0.09180167317390442,0.025599809363484383,-0.03813004121184349,0.006298142019659281,-0.004729393869638443,-0.00767061673104763,0.005679612047970295,0.05332624912261963,0.01261063851416111,0.02267281524837017,-0.014898826368153095,-0.05870423838496208,0.05102282762527466,0.0000035807863696390996,-0.011996093206107616,0.05947265401482582,0.03345246613025665,-0.012333772145211697,0.002219712594524026,-0.0027521904557943344,-0.018093161284923553,-0.056049447506666183,0.010739936493337154,0.012669379822909832,0.03195847570896149,0.038575123995542526,-0.042122725397348404,-0.019766513258218765,0.03242422640323639,0.02661767229437828,0.02016262710094452,0.010653010569512844,0.04340476542711258,0.01107329037040472,0.05275557190179825,-0.013692984357476234,0.04451127350330353,0.011018714867532253,0.005965345073491335,0.010471574030816555,0.0023585997987538576,-0.0095691978931427,-0.03762255236506462,-0.04291827231645584,-0.047621775418519974,-0.03650651499629021,0.006231042556464672,-0.02362678200006485,-0.0002139884018106386,0.007318198215216398,0.052021775394678116,-0.016450176015496254,-0.026701582595705986,0.15969334542751312,-0.017373042181134224,0.0219141636043787,0.020205166190862656,0.02150014601647854,-0.0059391213580966,0.027462145313620567,0.06319887936115265,-0.0055457004345953465,-0.07125234603881836,0.03559873625636101,-0.020878029987215996,-0.00896516628563404,-0.035787198692560196,0.0019530989229679108,-0.002617877908051014,-0.10162550956010818,0.0028902748599648476,0.04028637334704399,-0.01052322518080473,0.0216350257396698,0.005461305379867554,-0.002161904703825712,-0.02358357235789299,-0.021349545568227768,-0.018933091312646866,-0.028434820473194122,-0.018650420010089874,-0.006859315559267998,-0.055260252207517624,0.006894685793668032,-0.013634994626045227,0.057145703583955765,-0.01321355253458023,-0.02739606983959675,0.011513948440551758,-0.039257969707250595,0.0863892138004303,-0.01701953448355198,0.01935943402349949,-0.026438076049089432,0.03858240693807602,0.04655945301055908,-0.007067273836582899,-0.004691697657108307,-0.006605232134461403,0.07324612140655518,-0.02971057780086994,0.020248446613550186,-0.02145380526781082,-0.02073674649000168,-0.04738077148795128,0.05172092467546463,-0.004624044988304377,-0.04544348269701004,-0.03354557231068611,0.06651561707258224,-0.03063923493027687,0.00026441054069437087,-0.04740818589925766,0.019795425236225128,-0.01738819293677807,0.003830122994259,0.009165591560304165,-0.07214004546403885,0.00023802714713383466,-0.07314866036176682,-0.02299933321774006,-0.007081192918121815,0.014306852594017982,-0.01382462214678526,0.00863287691026926,-0.0069013601168990135,0.009060108102858067,-0.00750230997800827,-0.008748914115130901,-0.030617590993642807,-0.02658931352198124,-0.006338521372526884,0.01837121695280075,0.039162732660770416,-0.019759051501750946,-0.10073810070753098,0.01662382297217846,0.019797421991825104,0.043865423649549484,0.018613500520586967,0.015894154086709023,0.01246066577732563,-0.010548830032348633,-0.005355599336326122,0.014821731485426426,0.08501731604337692,0.06737025082111359,0.023661380633711815,-0.025562379509210587,0.02058136835694313,-0.08706766366958618,-0.03210916370153427,-0.029510734602808952,0.0007697597611695528,-0.00047914456808939576,0.0670107826590538,-0.008061390370130539,-0.036244962364435196,-0.0271315798163414,0.061072319746017456,-0.02480367012321949,-0.0220007486641407,0.025784600526094437,-0.061352964490652084,0.019680162891745567,0.01879763975739479,-0.009861218743026257,0.09389913082122803,-0.01850166544318199,-0.00283616641536355,0.026416907086968422,-0.021112916991114616,0.005658783484250307,0.026688916608691216,-0.015931494534015656,0.001164320739917457,0.019044682383537292,-0.00921370554715395,0.04299863427877426,0.03905791789293289,0.02882416732609272,-0.008532878942787647,0.012129239737987518,0.005362530238926411,0.03659772127866745,0.040825746953487396,0.014664728194475174,0.051795925945043564,0.03786464035511017,-0.057311464101076126,-0.004233014769852161,0.0036305466201156378,-0.053910717368125916,0.03952186927199364,-0.025417977944016457,-0.03871634975075722,0.02031422033905983,0.025812136009335518,0.006616469006985426,-0.05710853636264801,0.03254557400941849,0.012344129383563995,0.002615567995235324,-0.06754092127084732,-0.03204626590013504,-0.008802044205367565,0.019531749188899994,-6.052691676728977e-33,-0.011206959374248981,-0.045637328177690506,-0.05265611782670021,0.05024191364645958,-0.01684737764298916,-0.022940978407859802,-0.05577267333865166,0.007501608692109585,-0.033889465034008026,-0.022413084283471107,0.011282104067504406,-0.05242506042122841,-0.0027651037089526653,0.037782877683639526,-0.009760178625583649,0.014958670362830162,0.024407390505075455,0.002168778097257018,0.0030333776958286762,0.04121190309524536,-0.049605730921030045,0.0133065702393651,0.010562125593423843,-0.06205864995718002,-0.027793534100055695,-0.009833768010139465,0.006392179988324642,0.030136829242110252,-0.06110920011997223,0.031186452135443687,-0.03824011981487274,-0.02716589719057083,-0.03784763813018799,-0.09392084926366806,0.053008027374744415,0.009187990799546242,-0.06010333076119423,-0.007725060451775789,0.0071166446432471275,0.026325860992074013,0.06969552487134933,-0.01954655721783638,-0.01946660690009594,0.006159067153930664,0.030070606619119644,-0.046531956642866135,0.0009612871217541397,0.0013360590673983097,-0.0021174282301217318,0.017864180728793144,0.0028298378456383944,0.01728122867643833,-0.043693412095308304,0.009475670754909515,0.0002848069998435676,-0.014825776219367981,0.050016339868307114,0.01979285664856434,-0.10381142795085907,-0.023869946599006653,-0.011759010143578053,-0.053518906235694885,-0.007111130747944117,0.02019006945192814,0.04659424349665642,0.0386008694767952,-0.013708138838410378,0.05946560204029083,-0.10949327051639557,-0.002155451802536845,0.029757244512438774,0.024421850219368935,0.0008003838593140244,-0.03719018027186394,0.013061805628240108,-0.0010760290315374732,-0.0221851859241724,-0.026671938598155975,-0.04030722379684448,0.05700308084487915,0.012000137940049171,0.05171579122543335,0.007540889084339142,0.03424447774887085,-0.04053479805588722,-0.023782309144735336,0.032226692885160446,-0.04117868095636368,-0.011614170856773853,-0.006702627055346966,-0.021149789914488792,-0.057763222604990005,-0.060142505913972855,0.05766276642680168,-0.05067150294780731,0.004798462148755789,0.0667203888297081,0.03899899497628212,-0.01640976034104824,-0.0017185215838253498,0.020958850160241127,-0.016374686732888222,-0.018429581075906754,0.009574921801686287,-0.012377907522022724,0.006350446026772261,-0.016679275780916214,0.007797620724886656,-0.02679617330431938,0.021372171118855476,0.03304431959986687,-0.022270290181040764,-0.014658944681286812,-0.03954740986227989,-0.03798476979136467,-0.008943493478000164,-0.001204426633194089,0.0030966096092015505,0.025778893381357193,0.0655740275979042,-0.008610562421381474,0.04378833249211311,0.019116658717393875,0.008398126810789108,0.025718199089169502,0.005468212068080902,-0.022956639528274536,-0.03744369372725487,-0.022214330732822418,0.024646222591400146,0.012125162407755852,-0.013308080844581127,2.8182856226521835e-7,-0.03107602708041668,0.001007435261271894,-0.01634247973561287,-0.004592162556946278,0.029095761477947235,-0.019802259281277657,-0.024897010996937752,-0.04242357611656189,-0.027057472616434097,-0.13177911937236786,0.047676797956228256,-0.006858170963823795,0.035808153450489044,0.048683568835258484,-0.06341790407896042,0.0007681330316700041,0.039980098605155945,-0.045469995588064194,-0.05380559340119362,0.0016103301895782351,0.05694540590047836,0.0014084185240790248,0.060882508754730225,0.01013859361410141,-0.005877237301319838,0.11023922264575958,0.008970305323600769,0.012823117896914482,0.08150945603847504,-0.027935022488236427,0.030739858746528625,-0.007949890568852425,-0.01592034101486206,-0.029218055307865143,0.050497692078351974,0.003994197119027376,0.021188750863075256,0.02286655828356743,0.021038692444562912,0.04047383368015289,0.07006307691335678,0.013667434453964233,-0.03492346033453941,-0.06730511039495468,0.019918732345104218,-0.03970541059970856,-0.039041370153427124,0.054730840027332306,-0.042308613657951355,0.02177792228758335,0.011858095414936543,-0.004556076601147652,0.028868794441223145,-0.04170260950922966,-0.0004961544764228165,-0.06718327850103378,-0.017119789496064186,0.046155065298080444,0.0007918620831333101,0.0366717167198658,-0.02502676285803318,0.04083294793963432,0.022516369819641113,-0.036569107323884964,0.0004599553649313748,-0.0222811046987772,-0.009014480747282505,2.8667366184791133e-34,-0.02866499312222004,-0.02927442267537117,0.015117434784770012,0.06047919765114784,0.03841403126716614,-0.010969526134431362,0.05166463181376457,-0.021461429074406624,-0.009737272746860981,-0.033094171434640884,0.002916666679084301]'
SET
  @HasCustomProps_6a027de3 = 1
SET
  @HasCustomEvents_6a027de3 = 1
SET
  @RequiresData_6a027de3 = 0
SET
  @DependencyCount_6a027de3 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_6a027de3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_6a027de3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_6a027de3 = 1
SET
  @ID_6a027de3 = '894F252D-1ED3-4196-AB01-DCA71382D752'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_6a027de3,
  @Name = @Name_6a027de3,
  @Version = @Version_6a027de3,
  @VersionSequence = @VersionSequence_6a027de3,
  @Title = @Title_6a027de3,
  @Description = @Description_6a027de3,
  @Type = @Type_6a027de3,
  @Status = @Status_6a027de3,
  @DeveloperName = @DeveloperName_6a027de3,
  @DeveloperEmail = @DeveloperEmail_6a027de3,
  @DeveloperOrganization = @DeveloperOrganization_6a027de3,
  @SourceRegistryID = @SourceRegistryID_6a027de3,
  @ReplicatedAt = @ReplicatedAt_6a027de3,
  @LastSyncedAt = @LastSyncedAt_6a027de3,
  @Specification = @Specification_6a027de3,
  @FunctionalRequirements = @FunctionalRequirements_6a027de3,
  @TechnicalDesign = @TechnicalDesign_6a027de3,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_6a027de3,
  @TechnicalDesignVector = @TechnicalDesignVector_6a027de3,
  @HasCustomProps = @HasCustomProps_6a027de3,
  @HasCustomEvents = @HasCustomEvents_6a027de3,
  @RequiresData = @RequiresData_6a027de3,
  @DependencyCount = @DependencyCount_6a027de3,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_6a027de3,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_6a027de3,
  @HasRequiredCustomProps = @HasRequiredCustomProps_6a027de3,
  @ID = @ID_6a027de3;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_d8f71da2 NVARCHAR(MAX),
@Name_d8f71da2 NVARCHAR(500),
@Version_d8f71da2 NVARCHAR(50),
@VersionSequence_d8f71da2 INT,
@Title_d8f71da2 NVARCHAR(1000),
@Description_d8f71da2 NVARCHAR(MAX),
@Type_d8f71da2 NVARCHAR(255),
@Status_d8f71da2 NVARCHAR(50),
@DeveloperName_d8f71da2 NVARCHAR(255),
@DeveloperEmail_d8f71da2 NVARCHAR(255),
@DeveloperOrganization_d8f71da2 NVARCHAR(255),
@SourceRegistryID_d8f71da2 UNIQUEIDENTIFIER,
@ReplicatedAt_d8f71da2 DATETIMEOFFSET,
@LastSyncedAt_d8f71da2 DATETIMEOFFSET,
@Specification_d8f71da2 NVARCHAR(MAX),
@FunctionalRequirements_d8f71da2 NVARCHAR(MAX),
@TechnicalDesign_d8f71da2 NVARCHAR(MAX),
@FunctionalRequirementsVector_d8f71da2 NVARCHAR(MAX),
@TechnicalDesignVector_d8f71da2 NVARCHAR(MAX),
@HasCustomProps_d8f71da2 BIT,
@HasCustomEvents_d8f71da2 BIT,
@RequiresData_d8f71da2 BIT,
@DependencyCount_d8f71da2 INT,
@TechnicalDesignVectorEmbeddingModelID_d8f71da2 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_d8f71da2 NVARCHAR(MAX),
@HasRequiredCustomProps_d8f71da2 BIT,
@ID_d8f71da2 UNIQUEIDENTIFIER
SET
  @Namespace_d8f71da2 = N'Admin/Entities'
SET
  @Name_d8f71da2 = N'EntityFilter'
SET
  @Version_d8f71da2 = N'1.0.0'
SET
  @VersionSequence_d8f71da2 = 1
SET
  @Title_d8f71da2 = N'Entity Filter'
SET
  @Description_d8f71da2 = N'Collapsible filter panel for filtering entities by various criteria'
SET
  @Type_d8f71da2 = N'Other'
SET
  @Status_d8f71da2 = N'Published'
SET
  @Specification_d8f71da2 = N'{"name":"EntityFilter","title":"Entity Filter Panel","description":"Collapsible filter panel for filtering entities by various criteria","type":"form","functionalRequirements":"## Entity Filter Requirements\n\n- Collapsible panel on the left side\n- Filter by schema name (dropdown)\n- Filter by base table (dropdown)\n- Search box for text search\n- Clear all filters button\n- Show active filter count\n- Smooth collapse/expand animation\n- Remember collapsed state","dataRequirements":{"mode":"views","description":"Receives filter options derived from Entities metadata","entities":[{"name":"Entities","description":"Source of schema and table filter options","displayFields":["SchemaName","BaseTable"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Extracts unique schema names and base tables for filter dropdowns"}],"queries":[]},"technicalDesign":"## Technical Design\n\n### Props\n- filters: Current filter values\n- onFilterChange: Callback when filters change\n- schemas: Available schema options\n- tables: Available table options\n- isCollapsed: Whether panel is collapsed\n- onToggleCollapse: Callback to toggle collapse\n\n### Components\n- Collapse toggle button\n- Schema dropdown\n- Table dropdown\n- Search input\n- Clear filters button\n- Active filter badges","properties":[{"name":"filters","description":"Current filter values","type":"{schema?: string, table?: string, search?: string}","required":true},{"name":"onFilterChange","description":"Callback when filters change","type":"(filters: {schema?: string, table?: string, search?: string}) => void","required":true},{"name":"schemas","description":"Available schema options","type":"Array<string>","required":true},{"name":"tables","description":"Available table options","type":"Array<string>","required":true},{"name":"isCollapsed","description":"Whether the panel is collapsed","type":"boolean","required":true},{"name":"onToggleCollapse","description":"Callback to toggle collapse state","type":"() => void","required":true}],"events":[{"name":"onFilterChange","description":"Fired when filter values change","parameters":[{"name":"filters","description":"Updated filter object","type":"object"}]},{"name":"onToggleCollapse","description":"Fired when collapse state should toggle","parameters":[]}],"exampleUsage":"<EntityFilter\n  filters={filters}\n  onFilterChange={handleFilterChange}\n  schemas={uniqueSchemas}\n  tables={uniqueTables}\n  isCollapsed={filterPanelCollapsed}\n  onToggleCollapse={handleToggleFilter}\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n/>","code":"function EntityFilter({ \n  filters, \n  onFilterChange, \n  schemas, \n  tables, \n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders.radius === ''object'' ? styles.borders.radius[size] : styles.borders.radius;\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle schema filter change\n  const handleSchemaChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      schema: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle table filter change\n  const handleTableChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      table: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''→'' : ''←''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            🔍\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Schema Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Schema\n            </label>\n            <select\n              value={filters?.schema || ''''}\n              onChange={handleSchemaChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Schemas</option>\n              {schemas.map((schema) => (\n                <option key={schema} value={schema}>\n                  {schema}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Table Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Base Table\n            </label>\n            <select\n              value={filters?.table || ''''}\n              onChange={handleTableChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Tables</option>\n              {tables.map((table) => (\n                <option key={table} value={table}>\n                  {table}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.schema && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Schema:\n                      </span>\n                      <strong>{filters.schema}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleSchemaChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n                {filters?.table && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Table:\n                      </span>\n                      <strong>{filters.table}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleTableChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_d8f71da2 = N'## Entity Filter

- Collapsible panel on the left side
- Filter by schema name (dropdown)
- Filter by base table (dropdown)
- Search box for text search
- Clear all filters button
- Show active filter count
- Smooth collapse/expand animation
- Remember collapsed state'
SET
  @TechnicalDesign_d8f71da2 = N'## Design

### Props
- filters: Current filter values
- onFilterChange: Callback when filters change
- schemas: Available schema options
- tables: Available table options
- isCollapsed: Whether panel is collapsed
- onToggleCollapse: Callback to toggle collapse

### Components
- Collapse toggle button
- Schema dropdown
- Table dropdown
- Search input
- Clear filters button
- Active filter badges'
SET
  @FunctionalRequirementsVector_d8f71da2 = N'[-0.05202985554933548,0.04957040399312973,-0.030017420649528503,-0.024727223441004753,-0.01788698136806488,-0.026782630011439323,-0.009166572242975235,0.09901880472898483,-0.01911846362054348,0.013985728845000267,-0.014999715611338615,0.012902847491204739,-0.014069408178329468,0.0897999182343483,-0.01258549652993679,-0.022761385887861252,0.015254654921591282,0.0379212386906147,-0.01576949842274189,-0.014209519140422344,0.01310844998806715,-0.014015012420713902,-0.020758450031280518,0.021828705444931984,0.10473129153251648,0.0391184501349926,-0.017779018729925156,-0.021993502974510193,0.01943076401948929,-0.03140546381473541,-0.026446353644132614,0.023448288440704346,-0.0005638257134705782,-0.01860630512237549,0.0000017811396446631989,0.017509890720248222,-0.08682898432016373,-0.0014480247627943754,-0.02078034169971943,0.018607020378112793,-0.019382024183869362,0.0416523776948452,0.02569640427827835,0.001247010543011129,0.002208956517279148,-0.022341109812259674,-0.03947338089346886,0.04647548124194145,0.0025785183534026146,-0.034012582153081894,0.03132885694503784,-0.03323452174663544,-0.008984560146927834,-0.011566045694053173,-0.008254210464656353,-0.060905858874320984,-0.008693800307810307,-0.06500820815563202,0.047269683331251144,0.00638929707929492,-0.01942335069179535,0.03305138647556305,0.02517944760620594,-0.04813961684703827,0.015447511337697506,-0.023664571344852448,0.019868163391947746,-0.056034862995147705,0.08152026683092117,-0.00011197164712939411,0.12292730808258057,-0.04597901925444603,-0.021812796592712402,-0.051047854125499725,0.00025425959029234946,0.07646124809980392,0.02703912742435932,0.008958886377513409,0.024217426776885986,0.043966133147478104,-0.05181445926427841,-0.010693696327507496,-0.003228996880352497,-0.006253942381590605,-0.06583801656961441,0.06991018354892731,-0.022688573226332664,-0.01792772486805916,0.021440085023641586,-0.07170064747333527,0.08835642039775848,0.011499963700771332,0.0069521451368927956,0.03758919611573219,-0.0553240068256855,-0.03264771029353142,0.039903029799461365,-0.019729575142264366,0.012417880818247795,0.04533211141824722,-0.04012622311711311,0.052244000136852264,0.05982518568634987,0.01561837736517191,0.010249238461256027,0.051899343729019165,0.012856649234890938,-0.03904998302459717,0.008314990438520908,-0.01875944249331951,-0.048248548060655594,0.04377712681889534,-0.011704607866704464,0.03181394189596176,-0.047613080590963364,0.005528364796191454,-0.023616285994648933,-0.06407984346151352,-0.015513601712882519,-0.013766865245997906,0.027754420414566994,0.013682645745575428,0.026880284771323204,-0.028718164190649986,-0.02403566800057888,0.016350215300917625,0.014914707280695438,-0.07270326465368271,-0.027268342673778534,-0.022963356226682663,-0.04181705415248871,-0.04340103641152382,0.04417954012751579,-0.00016794500697869807,0.006500339601188898,-0.060521580278873444,0.0011792511213570833,-0.02250419743359089,-0.052020035684108734,0.0156495850533247,0.03854653611779213,-0.0057122171856462955,-0.040641382336616516,0.10437895357608795,-0.013432236388325691,-0.06307164579629898,0.0250909011811018,-0.06556723266839981,0.037163425236940384,0.025827517732977867,-0.006091782823204994,-0.005723418667912483,-0.019364120438694954,0.03328077122569084,-0.0067169261164963245,-0.026729896664619446,0.050853997468948364,0.05035445839166641,-0.009011507965624332,0.0025804738979786634,-0.03016703948378563,0.022084174677729607,0.023862099274992943,-0.00609660753980279,0.05135240778326988,0.044402074068784714,-0.152191624045372,-0.004966971464455128,-0.09176652878522873,-0.03663889691233635,-0.0025952858850359917,-0.0322139672935009,0.00897275935858488,0.03249030560255051,0.01675054244697094,-0.012195292860269547,0.10772731155157089,0.04784216359257698,-0.056328557431697845,0.010580304078757763,0.0258575938642025,-0.029558122158050537,0.017117934301495552,-0.05470404028892517,0.014324165880680084,-0.040939852595329285,-0.024579660966992378,-0.03064139187335968,-0.02282528392970562,0.016884006559848785,0.03347767889499664,0.054598644375801086,0.0059665204025805,0.040707871317863464,-0.003940919414162636,0.016653867438435555,0.0019368953071534634,0.030324894934892654,0.039983976632356644,-0.012487511150538921,-0.029670242220163345,-0.019624188542366028,0.06302452832460403,0.03204970806837082,0.022872664034366608,-0.02678101509809494,0.004410581663250923,0.014484073035418987,0.03124924562871456,0.018626293167471886,-0.06365487724542618,0.02208448201417923,-0.025437762960791588,0.03900563344359398,-0.01554851233959198,0.07921230047941208,0.03650432080030441,-0.004804064054042101,-0.047493841499090195,0.003999906126409769,-0.010187029838562012,0.01208187360316515,-0.01764504984021187,0.022238759323954582,0.05716225132346153,0.08000417053699493,0.029284803196787834,0.0009657499031163752,-0.000043338943214621395,-0.02215764857828617,-0.016289839521050453,-0.005539169535040855,-0.004259662702679634,0.02002866379916668,-0.0012060487642884254,-0.029870495200157166,0.06714127957820892,0.069534070789814,-0.03179137036204338,0.006264586001634598,0.056009192019701004,-0.011843104846775532,-0.0002881063846871257,0.002033418510109186,-0.0446506030857563,-0.07936888933181763,-0.01939193531870842,-0.004079689271748066,0.03439344838261604,-0.05799306184053421,-0.009939227253198624,-0.006322314031422138,0.030911888927221298,-0.039472710341215134,-0.020661791786551476,0.012446105480194092,-0.0364244282245636,0.008207500912249088,-0.008920593187212944,0.07982905954122543,0.06144983693957329,-0.010638657957315445,-0.048997145146131516,0.015429545193910599,0.025476522743701935,0.010471302084624767,0.0687670037150383,0.0033515836112201214,0.03539615496993065,-0.008369974792003632,0.008073452860116959,0.009435239247977734,-0.0035312986001372337,-0.017780466005206108,-0.006429123692214489,-0.009694796055555344,-0.00024195377773139626,0.043855879455804825,-0.0013420097529888153,-0.05970285087823868,-0.026222189888358116,-0.017274407669901848,-0.02953958511352539,0.03930045664310455,0.01557603757828474,0.006083634681999683,0.019529860466718674,-0.06793210655450821,0.0429186075925827,0.019529225304722786,0.03682081401348114,0.007229804992675781,0.057715125381946564,-0.007777780294418335,-0.009514939971268177,0.0242047980427742,-0.08662591874599457,0.058831874281167984,-0.00007645526784472167,0.08342809975147247,-0.015726054087281227,0.055814214050769806,-0.012798692099750042,0.032680243253707886,-0.014836110174655914,0.05788327008485794,0.005598954390734434,0.000983205158263445,0.02829541638493538,0.03409932553768158,-0.03886764869093895,0.011998312547802925,-0.021271707490086555,-0.0651271641254425,-0.026023991405963898,-0.013972098007798195,-0.006600065156817436,0.0037045537028461695,-0.0030406115110963583,0.055806443095207214,-0.014590068720281124,0.025675181299448013,-0.020250290632247925,0.02196452207863331,-0.019595399498939514,-0.001797927776351571,-0.0204663947224617,-0.019862068817019463,0.018808651715517044,0.005172830540686846,0.020265160128474236,0.025419149547815323,-0.011931986548006535,-0.012201065197587013,0.004795046988874674,-0.018098197877407074,-0.04763796553015709,0.07537595927715302,-0.0077821617014706135,-0.012858632951974869,-0.018847879022359848,-0.005320507101714611,-0.010508871637284756,-0.01718435063958168,-0.0017481512622907758,0.04142911732196808,0.06533785164356232,-0.017542045563459396,-0.11926702409982681,0.005582806654274464,0.025421852245926857,0.04490987956523895,-0.028507228940725327,-0.00280739669688046,0.014549847692251205,-0.024215472862124443,-0.0004042851796839386,0.043245378881692886,-0.03403540700674057,-0.032715316861867905,0.09348318725824356,0.013229474425315857,-0.005931261461228132,0.022557640448212624,0.044943176209926605,-0.02520902454853058,-0.006790912244468927,-0.00114275177475065,0.03195623680949211,-0.036842748522758484,-0.04563041031360626,0.002985358936712146,0.008195493370294571,0.06617704778909683,-0.007136191241443157,-0.0456300787627697,0.007406975608319044,-0.010106883943080902,0.011035818606615067,0.012586042284965515,0.009305622428655624,0.007129354402422905,0.02759888581931591,-0.012224925681948662,0.003763721324503422,0.0050179362297058105,-0.012669319286942482,0.012232689186930656,-0.003907695412635803,-0.020264631137251854,-0.024140262976288795,-0.0340624563395977,0.016680609434843063,-0.005146396346390247,0.0034939355682581663,-0.03361337631940842,-0.015478754416108131,0.04623730108141899,0.0033083909656852484,0.010229159146547318,-0.014934699982404709,0.1134023368358612,-0.04289375618100166,0.03370140492916107,-0.008693801239132881,-0.06605201959609985,-0.028614645823836327,0.06529128551483154,0.02083691395819187,-0.01888708397746086,-0.019707873463630676,-0.021213924512267113,0.01076924242079258,-0.02830340526998043,0.012431163340806961,-0.035769153386354446,-0.00710224499925971,-0.032937828451395035,-0.007464244030416012,0.046251438558101654,0.00022181640088092536,-0.0350930280983448,0.012071202509105206,-0.026369614526629448,0.022888464853167534,0.0012795457150787115,0.0023913460317999125,-0.06593086570501328,-0.0022024314384907484,0.0472857840359211,-0.040458738803863525,0.07345598191022873,0.018214954063296318,0.023800931870937347,0.008436780422925949,-0.061165910214185715,0.03935173898935318,-0.049184445291757584,-0.010174294002354145,0.016634803265333176,0.018105274066329002,0.016191823408007622,0.036314770579338074,0.02082749828696251,0.0328107550740242,0.06841681897640228,0.034834012389183044,0.06147179380059242,-0.002637819154188037,-0.04309730976819992,0.014721762388944626,0.014791944064199924,-0.04427444934844971,-0.014007752761244774,-0.002686224179342389,-0.014321265742182732,0.00808462779968977,0.03261786326766014,-0.02588462084531784,-0.007453883998095989,-0.09337998926639557,0.028511319309473038,-0.04683983325958252,-0.009044348262250423,-0.0398237444460392,-0.014547962695360184,-0.04503140598535538,-0.08248377591371536,0.0004355965356808156,-0.006123244762420654,-0.07314250618219376,0.01206955686211586,0.026163846254348755,0.006727761588990688,-0.0011103752767667174,-0.020944520831108093,-0.029755286872386932,-0.028781386092305183,0.018501823768019676,0.013750777579843998,-0.0231571476906538,-0.0026125432923436165,0.030829068273305893,-0.10247891396284103,-0.010264422744512558,0.0699743777513504,-0.02023272030055523,-0.009103920310735703,0.006605942267924547,0.06039387732744217,0.02881721779704094,-0.038754209876060486,0.003362639108672738,0.03097573108971119,0.022869857028126717,0.009620056487619877,0.027705777436494827,0.05365076661109924,-0.039422113448381424,-0.03555648401379585,0.030726658180356026,0.0042063710279762745,0.019317423924803734,-0.022251231595873833,0.0036893158685415983,-0.006067155860364437,0.022526511922478676,0.07406872510910034,-0.002992397639900446,0.006014707963913679,0.019995231181383133,-0.0031641710083931684,-0.05131363868713379,-0.004806078504770994,0.02377551794052124,-0.034928154200315475,-0.012564163655042648,0.002994018839672208,-0.009438619948923588,0.03314271196722984,0.013357100076973438,0.018790030851960182,-0.021097812801599503,-0.02556864731013775,0.041820723563432693,-0.031322747468948364,0.0037892358377575874,0.007867187261581421,0.054312046617269516,0.02883034385740757,0.05787491425871849,0.0051630823872983456,0.006421409547328949,0.0048264386132359505,0.0013737132539972663,-0.005296791438013315,0.022479532286524773,0.02226407080888748,-0.007959835231304169,-0.031218308955430984,-0.06370896100997925,0.03784704580903053,0.0021775183267891407,-0.015509207732975483,-0.027420928701758385,-0.054586101323366165,0.01800449565052986,0.0044096605852246284,0.0074722315184772015,0.009573005139827728,-0.03512625768780708,-0.03790844604372978,-0.03558036684989929,0.024448378011584282,-0.03786548227071762,-5.778171868825725e-33,-0.03220992535352707,-0.031932294368743896,-0.03440915048122406,-0.07695379108190536,0.01596762239933014,-0.061304379254579544,-0.018278829753398895,-0.003019273281097412,-0.02871794067323208,-0.004829494748264551,-0.028855595737695694,0.019644420593976974,-0.00629656296223402,0.018772335723042488,-0.03334236890077591,-0.02944176457822323,-0.0003677399654407054,-0.02831660769879818,0.03404823690652847,0.05899226665496826,-0.04190483316779137,0.03764791041612625,-0.041367270052433014,-0.022222034633159637,-0.057141393423080444,0.06286981701850891,-0.0032205265015363693,-0.0011784269008785486,-0.04792409762740135,0.01269935630261898,-0.028052853420376778,-0.044153843075037,0.00025230005849152803,-0.038228172808885574,0.025220191106200218,-0.06673495471477509,0.004121190868318081,-0.006727590225636959,-0.018250785768032074,0.010703641921281815,0.05103088542819023,-0.006525462493300438,0.0024878508411347866,0.013655095361173153,-0.030471840873360634,0.05220072343945503,0.007044771686196327,-0.018376123160123825,-0.032233018428087234,-0.022761017084121704,0.007047795690596104,0.030581604689359665,0.0020929682068526745,0.018833313137292862,-0.0027510218787938356,0.03834341838955879,0.005877689924091101,0.05399029701948166,0.03736581653356552,-0.05039801821112633,0.09531067311763763,0.013351835310459137,-0.038083042949438095,0.042883388698101044,0.026270151138305664,0.012354506179690361,-0.03634816035628319,0.040559981018304825,-0.07531462609767914,-0.03580772876739502,0.015067710541188717,0.04055257886648178,0.028863174840807915,-0.04458039999008179,0.018481288105249405,-0.0016124186804518104,-0.00910286046564579,-0.003549172542989254,-0.10901309549808502,0.07043659687042236,0.01208285242319107,0.026656370609998703,0.014994521625339985,0.03745923563838005,-0.009776439517736435,-0.032394908368587494,-0.009299898520112038,0.019890207797288895,0.007083363831043243,0.024292845278978348,-0.00716044008731842,-0.07227575033903122,-0.049426596611738205,0.0423717200756073,-0.03272425755858421,-0.014629493467509747,0.011296456679701805,-0.025997260585427284,-0.008504779078066349,-0.012531493790447712,0.025610120967030525,-0.0026521028485149145,-0.023081623017787933,-0.02685520425438881,-0.01946008764207363,0.008765047416090965,-0.013509288430213928,0.01284722238779068,-0.030806584283709526,0.00010926030518021435,0.0012080518063157797,-0.022621827200055122,0.0002763778902590275,0.005048444028943777,-0.020995236933231354,0.007703753188252449,0.009233075194060802,-0.0002652184630278498,0.027969172224402428,0.036553435027599335,0.01993311382830143,-0.03556547686457634,0.04595116898417473,0.061841931194067,0.07195328921079636,-0.042185138911008835,-0.0343690924346447,-0.051004618406295776,0.03359966725111008,-0.01889748126268387,0.004336244892328978,0.022157080471515656,2.5975211315198976e-7,0.00020912752370350063,-0.025872275233268738,-0.046196985989809036,0.0018739139195531607,0.05173035338521004,-0.06314510852098465,0.03710191324353218,-0.044264812022447586,-0.018621422350406647,-0.09471604973077774,0.03827852010726929,0.0019190413877367973,0.04060311242938042,-0.008132987655699253,-0.048435818403959274,-0.0725557804107666,-0.004443996585905552,-0.06668638437986374,-0.0433923676609993,-0.03900202736258507,0.021053433418273926,0.08666965365409851,0.013686709105968475,0.017968405038118362,-0.01337796077132225,0.011904227547347546,0.0037383362650871277,-0.027501914650201797,0.04066634178161621,-0.008306490257382393,0.06677119433879852,-0.02634953148663044,-0.04533591866493225,0.02955184318125248,0.02368975058197975,0.058450665324926376,-0.00131451606284827,0.006132820155471563,-0.0025631103198975325,0.025487251579761505,0.04374159872531891,-0.033557597547769547,-0.04940810427069664,-0.041371189057826996,0.07140309363603592,0.02261061780154705,0.014372908510267735,0.07639164477586746,0.009157707914710045,0.025305291637778282,0.04437645524740219,-0.0025419483426958323,0.004983825609087944,-0.025617625564336777,0.026973385363817215,0.004073879215866327,-0.004014100879430771,-0.008707759901881218,0.023160729557275772,-0.07823443412780762,-0.04419957473874092,0.01987350732088089,-0.021716823801398277,-0.04265978932380676,0.0090192761272192,0.013786707073450089,-0.01730635017156601,3.1884613866932595e-34,0.0010568437865003943,-0.005796699784696102,0.01891055516898632,0.06727493554353714,0.036450888961553574,0.003346808487549424,-0.053426388651132584,-0.012658270075917244,0.0031679493840783834,-0.09166194498538971,0.013779187574982643]'
SET
  @TechnicalDesignVector_d8f71da2 = N'[-0.054166171699762344,0.0021915712859481573,-0.022925058379769325,-0.03809015080332756,0.00803006999194622,-0.056045543402433395,0.0257845688611269,0.07828803360462189,0.0071576680056750774,-0.004283680580556393,-0.007080964278429747,0.04733036085963249,0.08264008164405823,0.11088848859071732,0.011892156675457954,-0.022773724049329758,0.034409649670124054,0.06370586901903152,-0.07275749742984772,-0.024100426584482193,-0.01481874193996191,0.002326763467863202,-0.01948036253452301,0.018299294635653496,0.07970906794071198,-0.02547159232199192,0.0004459522315301001,-0.03873100131750107,0.0012670934665948153,-0.01912854239344597,0.009109259583055973,0.04366788640618324,-0.04553243890404701,-0.025902902707457542,0.0000021031562482676236,0.003133566817268729,-0.001179745770059526,-0.03495316207408905,-0.03077325038611889,-0.006559071596711874,-0.037658609449863434,-0.03528449311852455,0.0459754653275013,0.019539855420589447,0.008911682292819023,-0.11478953063488007,-0.06499746441841125,0.07450997084379196,-0.007562481798231602,-0.04352550581097603,0.01020049024373293,-0.0288994237780571,0.007723324466496706,-0.008094054646790028,0.03223705664277077,-0.012514262460172176,-0.0030068359337747097,-0.06988982856273651,0.04932321608066559,-0.05147363618016243,0.015011993236839771,-0.0031068501994013786,-0.0010208925232291222,-0.037910692393779755,-0.004734447225928307,-0.035152409225702286,0.027281267568469048,-0.04632052034139633,0.03925022855401039,-0.010904069058597088,0.09143155068159103,-0.016531558707356453,-0.0035518479999154806,-0.009940051473677158,-0.016262199729681015,0.04612685367465019,0.009636184200644493,-0.02067609503865242,0.0007441763882525265,0.037091899663209915,0.007928992621600628,-0.014827664010226727,-0.023453686386346817,-0.01748238131403923,0.0294595155864954,0.06933823972940445,-0.03418583795428276,0.00417479919269681,-0.00822665449231863,-0.0500272773206234,0.09631893038749695,-0.022761065512895584,0.029504192993044853,-0.04067188501358032,-0.05318181589245796,-0.001807655324228108,0.027214616537094116,-0.08099990338087082,0.01897481083869934,0.007753221318125725,-0.011502864770591259,0.041649408638477325,0.011252849362790585,0.00997681263834238,0.012482648715376854,0.07499861717224121,0.004434170201420784,-0.003829725319519639,-0.018334323540329933,0.0019494043663144112,-0.035060904920101166,0.02367710880935192,0.044657446444034576,0.03217252343893051,-0.01797688938677311,0.0017742827767506242,-0.02598353661596775,-0.02636347897350788,0.0028366046026349068,-0.00562044745311141,0.05311590060591698,-0.02622351609170437,0.049345407634973526,-0.008406281471252441,0.015007191337645054,0.055988866835832596,0.06506059318780899,-0.06905344128608704,-0.017709873616695404,0.012009008787572384,0.0027247359976172447,-0.03527996689081192,0.030527539551258087,0.01129135675728321,-0.018349872902035713,-0.03995522856712341,-0.03163011744618416,-0.0039533269591629505,-0.00661538215354085,0.041516490280628204,0.04484005272388458,0.014854525215923786,-0.010740160010755062,0.06953753530979156,-0.02769746258854866,-0.013957345858216286,0.043253093957901,-0.08432776480913162,-0.01796598546206951,0.03451075404882431,0.022966578602790833,0.0047180852852761745,0.009245375171303749,0.030578898265957832,-0.022055907174944878,0.02141975425183773,-0.024851389229297638,0.014535505324602127,0.008220992051064968,0.02222120575606823,-0.0068566035479307175,0.010091838426887989,0.026324089616537094,-0.012713421136140823,-0.011001314967870712,0.036044687032699585,-0.10520883649587631,-0.0681399330496788,0.002800161950290203,-0.06264565140008926,-0.003791446564719081,-0.0329962857067585,-0.02968401461839676,0.053247563540935516,0.0059796725399792194,-0.06743953377008438,0.11260277777910233,0.03554854542016983,-0.0821218341588974,-0.02288626879453659,0.03578585758805275,-0.00918175932019949,-0.018797971308231354,-0.016050955280661583,-0.0660451278090477,-0.02010582946240902,-0.06805108487606049,-0.0072335135191679,0.022149929776787758,-0.022496506571769714,-0.03532195836305618,0.03662274032831192,-0.01207547727972269,-0.0042283483780920506,-0.0264462698251009,0.022984975948929787,-0.060379862785339355,0.03353703394532204,-0.0209883414208889,0.02411077730357647,0.021541066467761993,-0.03133559972047806,0.09956379979848862,0.06679131090641022,0.006843359675258398,-0.025086738169193268,-0.009214363060891628,0.03380056470632553,0.008268121629953384,-0.015509476885199547,-0.01845824532210827,0.017502689734101295,0.04444187134504318,0.04394889995455742,-0.03536549210548401,0.03422142192721367,0.04789157956838608,-0.029012518003582954,-0.04246694594621658,-0.02584470994770527,-0.022790193557739258,0.01633315533399582,0.015458231791853905,0.037822358310222626,0.11667490750551224,0.05603383854031563,0.01613418385386467,0.013149355538189411,0.010389639064669609,-0.042490217834711075,0.050459712743759155,-0.00024838754325173795,-0.0428873747587204,0.04019119590520859,0.007730088662356138,-0.016679270192980766,0.006471538916230202,-0.026253214105963707,0.010148594155907631,-0.0003850827633868903,0.004418220836669207,0.06855450570583344,-0.03338712081313133,0.029280608519911766,-0.018720099702477455,-0.06031852588057518,-0.04921247065067291,0.03665837645530701,-0.0028119131457060575,-0.028181077912449837,0.012517699040472507,0.042739469558000565,0.016498321667313576,-0.07621104270219803,-0.036305904388427734,-0.056815218180418015,-0.005477284546941519,0.030154449865221977,0.014538266696035862,0.047300826758146286,0.045515723526477814,-0.019472423940896988,-0.036222148686647415,-0.013091586530208588,0.04998927563428879,0.0067479233257472515,0.059568192809820175,0.038605887442827225,0.021467629820108414,0.005008968524634838,-0.002063738415017724,-0.00713562173768878,-0.00460791913792491,-0.013569229282438755,0.007335863076150417,0.007154402323067188,0.08142071217298508,0.053169019520282745,0.0024764426052570343,-0.025985537096858025,-0.01754075288772583,-0.03668353334069252,-0.04593183472752571,0.0005996373947709799,-0.004806586541235447,0.009624400176107883,-0.01686135306954384,0.0016438851598650217,0.03799379989504814,-0.031246155500411987,0.03585289046168327,0.012851533479988575,0.03414476290345192,-0.06255985051393509,-0.01203538291156292,-0.0024057000409811735,-0.01096329651772976,0.0371692031621933,0.014219135046005249,0.030652880668640137,-0.0003628330014180392,0.03825276717543602,-0.008724733255803585,-0.002177218208089471,-0.02063194289803505,0.031148066744208336,-0.0680663138628006,-0.013933098874986172,0.00958613958209753,0.033840764313936234,-0.007352878339588642,0.0452008917927742,-0.04835105687379837,-0.05548712611198425,0.002208173740655184,0.0033016144298017025,0.0037425775080919266,-0.024451175704598427,0.01509389840066433,0.07126377522945404,-0.00895120482891798,-0.016607847064733505,-0.02948712930083275,-0.0023371644783765078,-0.025888610631227493,-0.011474226601421833,-0.008017531596124172,-0.031231028959155083,0.10353245586156845,-0.020422853529453278,0.0010367652866989374,0.06823189556598663,0.01147376000881195,-0.020498288795351982,0.012780153192579746,-0.016024062409996986,-0.04169074445962906,0.04402049258351326,-0.0065216924995183945,-0.00030624758801423013,-0.015083547681570053,-0.015476022846996784,-0.028331181034445763,0.0013004724169149995,0.013830084353685379,0.0003533855779096484,0.0028786889743059874,-0.006939959712326527,-0.08728385716676712,-0.008599093183875084,0.016632115468382835,0.02709135226905346,0.035225383937358856,-0.012560422532260418,0.007869064807891846,0.00024191646662075073,0.0029963820707052946,0.022868145257234573,-0.007102093193680048,-0.007879056967794895,0.06251205503940582,-0.029441459104418755,0.041299425065517426,0.008275246247649193,-0.012422206811606884,0.014315989799797535,0.029552606865763664,0.006143228150904179,-0.0030181463807821274,-0.08649227023124695,-0.05646205693483353,-0.00010747052147053182,0.05308184400200844,0.0022195351775735617,-0.0450119748711586,-0.01589994691312313,0.041473645716905594,0.013545971363782883,-0.004406181164085865,0.018596626818180084,0.012419618666172028,-0.002951383590698242,0.026533160358667374,-0.018781743943691254,0.056312158703804016,-0.011958914808928967,0.04156117886304855,0.006178840529173613,0.020039407536387444,-0.01218384224921465,-0.03085850179195404,-0.08211733400821686,-0.0361449271440506,0.005837612319737673,-0.0006739668897353113,-0.036799024790525436,-0.018157586455345154,0.018460679799318314,0.004443368408828974,-0.0009769543539732695,-0.031405504792928696,0.14838548004627228,-0.01588113233447075,0.02265952341258526,0.05928577110171318,-0.03278530761599541,-0.053353458642959595,0.025307562202215195,0.06412091851234436,-0.008356064558029175,0.01271093264222145,-0.022487318143248558,0.008515539579093456,-0.019949836656451225,-0.08526156097650528,0.012908637523651123,0.004909144714474678,-0.059032171964645386,-0.011538534425199032,0.04137083515524864,-0.0312715582549572,-0.01123871374875307,0.006652175448834896,-0.010748469270765781,-0.03005005232989788,-0.025771791115403175,0.013201870024204254,-0.034175410866737366,-0.009997920133173466,0.027190780267119408,-0.004476428963243961,0.030515484511852264,0.04880550131201744,0.004609433002769947,-0.008889473974704742,-0.05206200107932091,0.03962068632245064,-0.007034596521407366,-0.017468422651290894,-0.025257011875510216,0.06414546817541122,-0.03877108171582222,0.001969981472939253,-0.0026951399631798267,0.037215057760477066,-0.049655601382255554,0.04187552258372307,0.07749166339635849,0.011646643280982971,-0.034429024904966354,-0.007952244952321053,0.026102157309651375,-0.037021901458501816,0.02039649523794651,-0.03897827863693237,-0.02128736488521099,0.021986378356814384,0.08473128825426102,-0.000908522866666317,0.028007181361317635,-0.04369192570447922,0.02727574110031128,-0.03331713378429413,0.0004476721223909408,-0.029941128566861153,-0.017158042639493942,0.05869273841381073,-0.03620752692222595,-0.016693195328116417,0.028525421395897865,-0.06334363669157028,0.024319257587194443,0.01350159477442503,0.012119277380406857,0.012740714475512505,-0.08157673478126526,-0.04169989004731178,-0.03806348890066147,-0.012823277153074741,0.017653102055191994,0.010778694413602352,-0.0031599111389368773,-0.02144961804151535,-0.045312896370887756,0.024787019938230515,0.01074486318975687,0.029784666374325752,0.003984411247074604,0.03769705817103386,0.030851606279611588,0.038443807512521744,-0.017704583704471588,0.010114037431776524,0.05832483246922493,0.0609043724834919,0.08210467547178268,0.00724976509809494,0.07108275592327118,-0.03381478786468506,-0.02358306385576725,0.03901992365717888,0.0005804457468912005,0.0050253733061254025,0.0253249853849411,-0.01629122905433178,-0.07376808673143387,-0.0174466110765934,0.05877087265253067,-0.03423384949564934,-0.03957144916057587,-0.05631565675139427,0.010749774053692818,-0.037419643253088,-0.0017059413949027658,0.03469833731651306,0.00053351407404989,-0.05200653150677681,0.005632344167679548,0.030095502734184265,-0.022315341979265213,0.029968298971652985,0.02763507328927517,-0.019836345687508583,-0.01820184662938118,0.03793938085436821,-0.0032992810010910034,0.0031410909723490477,0.027873298153281212,0.006334562785923481,0.03397195041179657,0.026020454242825508,-0.01084054633975029,-0.007278199307620525,0.020213348791003227,0.023489531129598618,0.01611301489174366,-0.027459556236863136,0.0775810033082962,-0.02317107655107975,-0.038814716041088104,-0.06511645019054413,0.0019027754897251725,0.007769034709781408,-0.011355491355061531,0.06774570047855377,-0.04575056582689285,0.023709053173661232,-0.018584007397294044,0.01801847107708454,0.029958907514810562,-0.010145066305994987,-0.03226545453071594,-0.022567814216017723,0.013830349780619144,0.03456353768706322,-6.456504842963142e-33,-0.0131300687789917,-0.005095269531011581,-0.012722352519631386,-0.0016473900759592652,-0.030103059485554695,-0.033064477145671844,-0.07659686356782913,-0.03321458771824837,-0.050592076033353806,-0.03015364706516266,-0.04664750397205353,0.0017718091839924455,-0.011118312366306782,-0.008359845727682114,0.014013531617820263,-0.0474172942340374,0.023244205862283707,-0.0036023384891450405,-0.014611311256885529,0.042813740670681,-0.022680455818772316,0.0001510715374024585,0.007287846878170967,-0.013717706315219402,-0.08348376303911209,0.009411907754838467,-0.0517500638961792,0.005437205545604229,-0.08016028255224228,0.01624811813235283,-0.04586160555481911,-0.008955310098826885,-0.015874924138188362,-0.07303289324045181,0.04267764091491699,0.025990258902311325,-0.02497418038547039,-0.000323840940836817,0.07329294085502625,0.013681143522262573,0.03529774397611618,-0.011345122009515762,0.022277390584349632,0.02678115852177143,0.0297042578458786,-0.02541566826403141,-0.010241064243018627,-0.00589809799566865,-0.010017437860369682,0.02810700796544552,0.007487169932574034,0.040362220257520676,-0.02194490283727646,-0.00952084083110094,-0.05347936227917671,0.046308599412441254,0.02219875156879425,0.06417851895093918,0.015062314458191395,-0.011612583883106709,-0.006255899090319872,-0.01605435274541378,0.004388906992971897,0.01671389490365982,0.025490496307611465,0.006476248148828745,-0.03202582150697708,0.05011550337076187,-0.06687279790639877,-0.06729362159967422,0.008068946190178394,0.013226312585175037,0.02430260367691517,0.02881728485226631,0.053822461515665054,-0.05728568881750107,-0.02614608407020569,-0.026914430782198906,-0.025393422693014145,0.05758862942457199,-0.024498354643583298,0.08078451454639435,0.06982409209012985,0.02644285559654236,-0.05163594335317612,-0.05196935683488846,0.03729470074176788,-0.004111660644412041,-0.032910123467445374,0.03625454753637314,-0.020343955606222153,-0.02567998506128788,-0.04680338501930237,0.044810254126787186,0.010832308791577816,-0.014084129594266415,0.04475576803088188,-0.0007693307125009596,-0.005757300183176994,-0.037135884165763855,0.030703669413924217,-0.019201461225748062,-0.03963508829474449,0.007108726073056459,0.00007857810851419345,0.03059029020369053,-0.037217482924461365,0.054174844175577164,0.011247314512729645,-0.0012855561217293143,-0.0018806476145982742,-0.06714560836553574,-0.026983430609107018,-0.010373645462095737,0.014988020062446594,0.02721194364130497,-0.00983367394655943,-0.08546231687068939,0.02140806056559086,0.06037747859954834,0.01142184343189001,-0.016687501221895218,0.007919768802821636,0.05989363417029381,0.0475313775241375,-0.03674228489398956,-0.07609603554010391,-0.0465279147028923,0.03471745178103447,-0.010384107939898968,0.029532762244343758,0.009166872128844261,3.052149111226754e-7,-0.009772933088243008,-0.009499209932982922,-0.047076884657144547,-0.02049991860985756,0.02682138793170452,-0.03707897290587425,-0.0011806837283074856,-0.06902649998664856,-0.05109262466430664,-0.06234373152256012,0.038013819605112076,-0.02032044343650341,0.029650993645191193,0.0311849657446146,-0.06210959702730179,-0.03543409705162048,0.02255365252494812,-0.06714457273483276,-0.06925921142101288,-0.012229254469275475,0.014657972380518913,0.03492196276783943,0.06807857006788254,-0.010703064501285553,-0.002854181220754981,0.07245230674743652,-0.011540076695382595,0.0009355982765555382,0.041753534227609634,-0.011640158481895924,0.034807126969099045,-0.014239045791327953,-0.014183840714395046,-0.01993538998067379,0.01801997981965542,0.0386420339345932,0.03312615305185318,-0.017935093492269516,0.02256678231060505,0.023832395672798157,0.026891037821769714,-0.026166222989559174,-0.06302084028720856,-0.07041288167238235,0.03678517043590546,0.002975820330902934,0.006276657339185476,0.04751502722501755,-0.02877994254231453,0.020277947187423706,0.03512635827064514,-0.004830315243452787,-0.0021000613924115896,-0.016498267650604248,-0.007188086397945881,-0.00478315819054842,-0.012373181991279125,0.0033716210164129734,0.03689482435584068,0.0076470570638775826,-0.04508977010846138,0.010707796551287174,-0.002266298048198223,-0.020092254504561424,0.022314297035336494,0.05111320689320564,-0.05530029907822609,2.864609478799354e-34,-0.018842196092009544,-0.04679013043642044,-0.000022684149371343665,-0.009145610965788364,0.029797466471791267,-0.030509229749441147,0.004338790662586689,0.006956461351364851,0.01835935190320015,-0.034067779779434204,0.019255323335528374]'
SET
  @HasCustomProps_d8f71da2 = 1
SET
  @HasCustomEvents_d8f71da2 = 1
SET
  @RequiresData_d8f71da2 = 0
SET
  @DependencyCount_d8f71da2 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_d8f71da2 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_d8f71da2 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_d8f71da2 = 1
SET
  @ID_d8f71da2 = '386543D8-C739-4C52-8FAC-E941C078AA8F'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_d8f71da2,
  @Name = @Name_d8f71da2,
  @Version = @Version_d8f71da2,
  @VersionSequence = @VersionSequence_d8f71da2,
  @Title = @Title_d8f71da2,
  @Description = @Description_d8f71da2,
  @Type = @Type_d8f71da2,
  @Status = @Status_d8f71da2,
  @DeveloperName = @DeveloperName_d8f71da2,
  @DeveloperEmail = @DeveloperEmail_d8f71da2,
  @DeveloperOrganization = @DeveloperOrganization_d8f71da2,
  @SourceRegistryID = @SourceRegistryID_d8f71da2,
  @ReplicatedAt = @ReplicatedAt_d8f71da2,
  @LastSyncedAt = @LastSyncedAt_d8f71da2,
  @Specification = @Specification_d8f71da2,
  @FunctionalRequirements = @FunctionalRequirements_d8f71da2,
  @TechnicalDesign = @TechnicalDesign_d8f71da2,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_d8f71da2,
  @TechnicalDesignVector = @TechnicalDesignVector_d8f71da2,
  @HasCustomProps = @HasCustomProps_d8f71da2,
  @HasCustomEvents = @HasCustomEvents_d8f71da2,
  @RequiresData = @RequiresData_d8f71da2,
  @DependencyCount = @DependencyCount_d8f71da2,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_d8f71da2,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_d8f71da2,
  @HasRequiredCustomProps = @HasRequiredCustomProps_d8f71da2,
  @ID = @ID_d8f71da2;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_b43a9998 NVARCHAR(MAX),
@Name_b43a9998 NVARCHAR(500),
@Version_b43a9998 NVARCHAR(50),
@VersionSequence_b43a9998 INT,
@Title_b43a9998 NVARCHAR(1000),
@Description_b43a9998 NVARCHAR(MAX),
@Type_b43a9998 NVARCHAR(255),
@Status_b43a9998 NVARCHAR(50),
@DeveloperName_b43a9998 NVARCHAR(255),
@DeveloperEmail_b43a9998 NVARCHAR(255),
@DeveloperOrganization_b43a9998 NVARCHAR(255),
@SourceRegistryID_b43a9998 UNIQUEIDENTIFIER,
@ReplicatedAt_b43a9998 DATETIMEOFFSET,
@LastSyncedAt_b43a9998 DATETIMEOFFSET,
@Specification_b43a9998 NVARCHAR(MAX),
@FunctionalRequirements_b43a9998 NVARCHAR(MAX),
@TechnicalDesign_b43a9998 NVARCHAR(MAX),
@FunctionalRequirementsVector_b43a9998 NVARCHAR(MAX),
@TechnicalDesignVector_b43a9998 NVARCHAR(MAX),
@HasCustomProps_b43a9998 BIT,
@HasCustomEvents_b43a9998 BIT,
@RequiresData_b43a9998 BIT,
@DependencyCount_b43a9998 INT,
@TechnicalDesignVectorEmbeddingModelID_b43a9998 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_b43a9998 NVARCHAR(MAX),
@HasRequiredCustomProps_b43a9998 BIT,
@ID_b43a9998 UNIQUEIDENTIFIER
SET
  @Namespace_b43a9998 = N'AI'
SET
  @Name_b43a9998 = N'AIModelBrowser'
SET
  @Version_b43a9998 = N'1.0.0'
SET
  @VersionSequence_b43a9998 = 1
SET
  @Title_b43a9998 = N'AI Model Browser'
SET
  @Description_b43a9998 = N'A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications'
SET
  @Type_b43a9998 = N'Other'
SET
  @Status_b43a9998 = N'Published'
SET
  @Specification_b43a9998 = N'{"name":"AIModelBrowser","title":"AI Model Browser","description":"A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications","type":"dashboard","functionalRequirements":"## AI Model Browser Requirements\n\n### Core Functionality\n- Display AI models in grid or list view with comprehensive information\n- Filter models by Model Type, Status, Model Developer, and Inference Provider\n- View detailed model specifications including context window, token limits, and cost ranking\n- Display all vendors associated with a model (model developers and inference providers)\n- Show prompt run history and usage statistics for selected models\n- Visualize prompt usage with pie charts showing distribution across different prompts\n- Display performance metrics with bar charts showing average execution times\n- Show time series data for model usage over time\n- Support sorting by multiple fields with visual indicators\n- Include search functionality for quick model filtering\n- Provide ''Open'' button to trigger OpenEntityRecord callback for detailed editing\n\n### Analytics Features\n- Pie chart visualization of prompt usage distribution\n- Performance bar charts showing average execution times per prompt\n- Time series chart showing model usage trends over last 7 days\n- Summary statistics including total runs, success rates, and token usage\n- Grouped vendor display by type (Model Developer vs Inference Provider)\n\n### UX Considerations\n- Collapsible filter panel with active filter count indicator\n- Sliding details panel for comprehensive model information\n- Inline analytics panel with tabbed views for different visualizations\n- Smooth animations for panel transitions and chart rendering\n- Responsive design adapting to different screen sizes\n- Loading states while fetching data\n- Empty states with helpful messages\n- Visual feedback for hover and selection states\n- Maintain user preferences for view mode and filter state","dataRequirements":{"mode":"views","entities":[{"name":"AI Models","description":"Core AI model definitions and specifications","displayFields":["ID","Name","APIName","Description","AIModelTypeID","InputTokenLimit","PowerRank","SpeedRank","CostRank","IsActive","__mj_CreatedAt","__mj_UpdatedAt"],"filterFields":["AIModelTypeID","IsActive"],"sortFields":["Name","InputTokenLimit","CostRank","IsActive","__mj_CreatedAt"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the AI model"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the AI model"},{"name":"APIName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"API identifier for the model"},{"name":"InputTokenLimit","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum input token limit"},{"name":"CostRank","sequence":6,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Relative cost ranking (1-5)"}],"usageContext":"Main list of AI models"},{"name":"MJ: AI Model Vendors","description":"Vendor associations for AI models","displayFields":["ID","ModelID","VendorID","TypeID","Model","Vendor","Type","Status","Priority","APIName","MaxInputTokens","MaxOutputTokens","SupportsStreaming","SupportsEffortLevel"],"filterFields":["ModelID","Type","Status"],"sortFields":["Vendor","Priority","Type"],"fieldMetadata":[{"name":"ModelID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to AI Model"},{"name":"Vendor","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor name"},{"name":"Type","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor type (Model Developer or Inference Provider)"}],"usageContext":"Vendor associations for models"},{"name":"AI Model Types","description":"Types/categories of AI models","displayFields":["ID","Name","Description"],"filterFields":[],"sortFields":["Name"],"usageContext":"Filter dropdown for model types"},{"name":"MJ: AI Prompt Runs","description":"Execution history for AI prompts","displayFields":["ID","PromptID","ModelID","StartTime","EndTime","TotalExecutionTime","InputTokens","OutputTokens","TotalTokens","Status","Error"],"filterFields":["ModelID","PromptID","Status"],"sortFields":["StartTime","TotalExecutionTime"],"usageContext":"Analytics and usage history"},{"name":"AI Prompts","description":"AI prompt definitions","displayFields":["ID","Name","Description","CategoryID"],"filterFields":[],"sortFields":["Name"],"usageContext":"Enrich prompt runs with names"}]},"technicalDesign":"## Component Architecture\n\n### Root Component (AIModelBrowser)\n- Manages overall state and data loading\n- Coordinates between filter, list, details, and analytics components\n- Handles user preferences and saved settings\n- Manages search and sort state\n\n### Child Components\n1. **AIModelList**: Displays models in grid or list view with vendor information\n2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors\n3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering\n4. **AIModelAnalytics**: Inline analytics panel with charts and statistics\n\n### Data Flow\n- Root component loads all models and vendor associations\n- Filters are applied at the root level and filtered data passed to list\n- Selection in list triggers detail loading and analytics calculation\n- Analytics component processes prompt runs to generate visualizations\n\n### Chart Implementation\n- Pie charts using SVG for prompt usage distribution\n- Bar charts for performance metrics\n- Time series charts for usage trends\n- All charts are responsive and interactive","properties":[],"events":[],"exampleUsage":"<AIModelBrowser\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>","dependencies":[{"name":"AIModelList","title":"AI Model List","description":"Displays AI models in grid or list view with vendor information and sorting","type":"table","functionalRequirements":"Display models with vendor counts, support grid and list views, handle sorting and selection","technicalDesign":"","dataRequirements":{"mode":"views","entities":[{"name":"AI Models","description":"Core AI model definitions and specifications","displayFields":["ID","Name","APIName","Description","AIModelTypeID","InputTokenLimit","PowerRank","SpeedRank","CostRank","IsActive","__mj_CreatedAt","__mj_UpdatedAt"],"filterFields":["AIModelTypeID","IsActive"],"sortFields":["Name","InputTokenLimit","CostRank","IsActive","__mj_CreatedAt"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the AI model"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the AI model"},{"name":"APIName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"API identifier for the model"},{"name":"InputTokenLimit","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum input token limit"},{"name":"CostRank","sequence":6,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Relative cost ranking (1-5)"}],"usageContext":"Main list of AI models"},{"name":"MJ: AI Model Vendors","description":"Vendor associations for AI models","displayFields":["ID","ModelID","VendorID","TypeID","Model","Vendor","Type","Status","Priority","APIName","MaxInputTokens","MaxOutputTokens","SupportsStreaming","SupportsEffortLevel"],"filterFields":["ModelID","Type","Status"],"sortFields":["Vendor","Priority","Type"],"fieldMetadata":[{"name":"ModelID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to AI Model"},{"name":"Vendor","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor name"},{"name":"Type","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor type (Model Developer or Inference Provider)"}],"usageContext":"Vendor associations for models"},{"name":"AI Model Types","description":"Types/categories of AI models","displayFields":["ID","Name","Description"],"filterFields":[],"sortFields":["Name"],"usageContext":"Filter dropdown for model types"},{"name":"MJ: AI Prompt Runs","description":"Execution history for AI prompts","displayFields":["ID","PromptID","ModelID","StartTime","EndTime","TotalExecutionTime","InputTokens","OutputTokens","TotalTokens","Status","Error"],"filterFields":["ModelID","PromptID","Status"],"sortFields":["StartTime","TotalExecutionTime"],"usageContext":"Analytics and usage history"},{"name":"AI Prompts","description":"AI prompt definitions","displayFields":["ID","Name","Description","CategoryID"],"filterFields":[],"sortFields":["Name"],"usageContext":"Enrich prompt runs with names"}]},"properties":[{"name":"models","type":"array","required":true,"description":"Array of AI model objects to display"},{"name":"modelVendors","type":"array","required":true,"description":"Array of model vendor associations"},{"name":"viewMode","type":"string","required":true,"description":"Display mode - ''grid'' or ''list''"},{"name":"selectedModelId","type":"string","required":true,"description":"ID of the currently selected model"},{"name":"sortBy","type":"string","required":true,"description":"Field to sort by"},{"name":"sortDirection","type":"string","required":true,"description":"Sort direction - ''asc'' or ''desc''"}],"events":[{"name":"onSelectModel","description":"Fired when a model is selected","parameters":[{"name":"modelId","type":"string","description":"ID of the selected model"}]},{"name":"onSortChange","description":"Fired when sort criteria changes","parameters":[{"name":"sortBy","type":"string","description":"Field to sort by"},{"name":"sortDirection","type":"string","description":"Sort direction"}]}],"exampleUsage":"<AIModelList ... />","code":"function AIModelList({ \n  models, \n  modelVendors,\n  viewMode, \n  selectedModelId, \n  onSelectModel, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Get vendor info for a model\n  const getModelVendorInfo = useCallback((modelId) => {\n    const vendors = modelVendors.filter(v => v.ModelID === modelId);\n    const inferenceProviders = vendors.filter(v => v.Type === ''Inference Provider'');\n    const modelDeveloper = vendors.find(v => v.Type === ''Model Developer'');\n    \n    return {\n      inferenceProviders,\n      modelDeveloper,\n      vendorCount: vendors.length\n    };\n  }, [modelVendors]);\n  \n  // Handle sort column click\n  const handleSort = useCallback((field) => {\n    if (sortBy === field) {\n      onSortChange?.(field, sortDirection === ''asc'' ? ''desc'' : ''asc'');\n    } else {\n      onSortChange?.(field, ''asc'');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{\n        marginLeft: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {sortDirection === ''asc'' ? ''▲'' : ''▼''}\n      </span>\n    );\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render cost rank\n  const renderCostRank = (rank) => {\n    if (rank == null) return ''-'';\n    \n    const maxStars = 5;\n    const filledStars = Math.min(rank, maxStars);\n    \n    return (\n      <span style={{\n        color: styles.colors.warning || styles.colors.secondary,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {''$''.repeat(filledStars)}\n        <span style={{ opacity: 0.3 }}>\n          {''$''.repeat(maxStars - filledStars)}\n        </span>\n      </span>\n    );\n  };\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Grid view rendering\n  const renderGridView = () => (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fill, minmax(320px, 1fr))'',\n      gap: styles.spacing.lg\n    }}>\n      {models.map((model) => {\n        const vendorInfo = getModelVendorInfo(model.ID);\n        const isSelected = model.ID === selectedModelId;\n        \n        return (\n          <div\n            key={model.ID}\n            onClick={() => onSelectModel?.(model.ID)}\n            style={{\n              backgroundColor: styles.colors.surface,\n              borderRadius: getBorderRadius(''md''),\n              padding: styles.spacing.lg,\n              cursor: ''pointer'',\n              transition: ''all 0.2s'',\n              border: isSelected \n                ? `2px solid $' + '{styles.colors.primary}`\n                : `1px solid $' + '{styles.colors.border}`,\n              boxShadow: isSelected \n                ? `0 4px 12px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}`\n                : ''none''\n            }}\n            onMouseEnter={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.primary;\n                e.currentTarget.style.boxShadow = `0 2px 8px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.05)''}`;\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.border;\n                e.currentTarget.style.boxShadow = ''none'';\n              }\n            }}\n          >\n            {/* Model Header */}\n            <div style={{\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''flex-start'',\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{ flex: 1 }}>\n                <h3 style={{\n                  margin: 0,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {model.Name}\n                </h3>\n                {model.APIName && (\n                  <div style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    fontFamily: ''monospace''\n                  }}>\n                    {model.APIName}\n                  </div>\n                )}\n              </div>\n              {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n            </div>\n            \n            {/* Model Description */}\n            {model.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                marginBottom: styles.spacing.md,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                display: ''-webkit-box'',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: ''vertical''\n              }}>\n                {model.Description}\n              </div>\n            )}\n            \n            {/* Model Specs */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Input Token Limit\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Cost Rank\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </div>\n              </div>\n            </div>\n            \n            {/* Vendor Info */}\n            <div style={{\n              paddingTop: styles.spacing.md,\n              borderTop: `1px solid $' + '{styles.colors.border}`,\n              display: ''flex'',\n              gap: styles.spacing.md,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              {vendorInfo.modelDeveloper && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Dev:</span>\n                  <span style={{ \n                    color: styles.colors.text,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.modelDeveloper.Vendor}\n                  </span>\n                </div>\n              )}\n              {vendorInfo.inferenceProviders.length > 0 && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Providers:</span>\n                  <span style={{ \n                    color: styles.colors.primary,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.inferenceProviders.length}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n  \n  // List view rendering\n  const renderListView = () => (\n    <div style={{\n      backgroundColor: styles.colors.surface,\n      borderRadius: getBorderRadius(''md''),\n      overflow: ''hidden''\n    }}>\n      <table style={{\n        width: ''100%'',\n        borderCollapse: ''collapse''\n      }}>\n        <thead>\n          <tr style={{\n            borderBottom: `2px solid $' + '{styles.colors.border}`\n          }}>\n            <th\n              onClick={() => handleSort(''Name'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Model Name\n              {renderSortIndicator(''Name'')}\n            </th>\n            <th\n              onClick={() => handleSort(''Status'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Status\n              {renderSortIndicator(''Status'')}\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Developer\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Providers\n            </th>\n            <th\n              onClick={() => handleSort(''InputTokenLimit'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''right'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Input Limit\n              {renderSortIndicator(''InputTokenLimit'')}\n            </th>\n            <th\n              onClick={() => handleSort(''CostRank'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''center'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Cost\n              {renderSortIndicator(''CostRank'')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {models.map((model, index) => {\n            const vendorInfo = getModelVendorInfo(model.ID);\n            const isSelected = model.ID === selectedModelId;\n            \n            return (\n              <tr\n                key={model.ID}\n                onClick={() => onSelectModel?.(model.ID)}\n                style={{\n                  borderBottom: index < models.length - 1 \n                    ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                    : ''none'',\n                  backgroundColor: isSelected \n                    ? styles.colors.primaryLight || styles.colors.primary + ''10''\n                    : ''transparent'',\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = ''transparent'';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  <div>\n                    <div style={{\n                      fontWeight: isSelected \n                        ? (styles.typography.fontWeight?.semibold || ''600'')\n                        : (styles.typography.fontWeight?.regular || ''400''),\n                      color: styles.colors.text\n                    }}>\n                      {model.Name}\n                    </div>\n                    {model.APIName && (\n                      <div style={{\n                        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                        color: styles.colors.textSecondary,\n                        fontFamily: ''monospace''\n                      }}>\n                        {model.APIName}\n                      </div>\n                    )}\n                  </div>\n                </td>\n                <td style={{\n                  padding: styles.spacing.md\n                }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {vendorInfo.modelDeveloper?.Vendor || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {vendorInfo.inferenceProviders.length > 0 ? (\n                    <div style={{\n                      display: ''flex'',\n                      gap: styles.spacing.xs,\n                      flexWrap: ''wrap''\n                    }}>\n                      {vendorInfo.inferenceProviders.slice(0, 3).map((provider, idx) => (\n                        <span\n                          key={idx}\n                          style={{\n                            padding: `2px $' + '{styles.spacing.xs}`,\n                            backgroundColor: styles.colors.primary + ''15'',\n                            color: styles.colors.primary,\n                            borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                          }}\n                        >\n                          {provider.Vendor}\n                        </span>\n                      ))}\n                      {vendorInfo.inferenceProviders.length > 3 && (\n                        <span style={{\n                          color: styles.colors.textSecondary,\n                          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                        }}>\n                          +{vendorInfo.inferenceProviders.length - 3}\n                        </span>\n                      )}\n                    </div>\n                  ) : (\n                    <span style={{ color: styles.colors.textSecondary }}>-</span>\n                  )}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''right'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''center''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n  \n  return viewMode === ''grid'' ? renderGridView() : renderListView();\n}","dependencies":[],"libraries":[]},{"name":"AIModelDetails","title":"AI Model Details","description":"Sliding details panel showing comprehensive model information, vendors, and usage statistics","type":"detail","functionalRequirements":"Show model specs, vendor associations grouped by type, usage statistics, and open record button","technicalDesign":"","dataRequirements":{"mode":"views","entities":[{"name":"AI Models","description":"Core AI model definitions and specifications","displayFields":["ID","Name","APIName","Description","AIModelTypeID","InputTokenLimit","PowerRank","SpeedRank","CostRank","IsActive","__mj_CreatedAt","__mj_UpdatedAt"],"filterFields":["AIModelTypeID","IsActive"],"sortFields":["Name","InputTokenLimit","CostRank","IsActive","__mj_CreatedAt"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the AI model"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the AI model"},{"name":"APIName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"API identifier for the model"},{"name":"InputTokenLimit","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum input token limit"},{"name":"CostRank","sequence":6,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Relative cost ranking (1-5)"}],"usageContext":"Main list of AI models"}]},"properties":[{"name":"model","type":"object","required":true,"description":"The selected AI model object"},{"name":"vendors","type":"array","required":true,"description":"Array of vendors associated with the model"},{"name":"promptRuns","type":"array","required":true,"description":"Array of prompt runs for this model"},{"name":"isOpen","type":"boolean","required":true,"description":"Whether the details panel is open"}],"events":[{"name":"onClose","description":"Fired when the details panel should close","parameters":[]},{"name":"onOpenRecord","description":"Fired when the open record button is clicked","parameters":[{"name":"modelName","type":"string","description":"Name of the model to open"}]}],"exampleUsage":"<AIModelDetails ... />","code":"function AIModelDetails({ \n  model, \n  vendors,\n  promptRuns,\n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''AIModelDetails handleOpenRecord called'', { model, onOpenRecord });\n    if (model?.Name) {\n      console.log(''Calling onOpenRecord with model name:'', model.Name);\n      if (onOpenRecord) {\n        onOpenRecord(model.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No model or model name available'');\n    }\n  }, [model, onOpenRecord]);\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render vendor type icon\n  const renderVendorTypeIcon = (type) => {\n    const icons = {\n      ''Model Developer'': ''🏢'',\n      ''Inference Provider'': ''🚀''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        marginRight: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.md\n      }}>\n        {icons[type] || ''📦''}\n      </span>\n    );\n  };\n  \n  // Calculate prompt statistics\n  const calculatePromptStats = useCallback(() => {\n    if (!promptRuns || promptRuns.length === 0) {\n      return {\n        totalRuns: 0,\n        successfulRuns: 0,\n        failedRuns: 0,\n        avgExecutionTime: 0,\n        totalTokens: 0,\n        uniquePrompts: 0\n      };\n    }\n    \n    const stats = {\n      totalRuns: promptRuns.length,\n      successfulRuns: promptRuns.filter(r => r.Status === ''Success'' || r.Status === ''Completed'').length,\n      failedRuns: promptRuns.filter(r => r.Status === ''Failed'' || r.Status === ''Error'').length,\n      avgExecutionTime: 0,\n      totalTokens: 0,\n      uniquePrompts: new Set(promptRuns.map(r => r.PromptID)).size\n    };\n    \n    const validTimes = promptRuns\n      .filter(r => r.TotalExecutionTime)\n      .map(r => r.TotalExecutionTime);\n    \n    if (validTimes.length > 0) {\n      stats.avgExecutionTime = validTimes.reduce((a, b) => a + b, 0) / validTimes.length;\n    }\n    \n    stats.totalTokens = promptRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return stats;\n  }, [promptRuns]);\n  \n  const stats = calculatePromptStats();\n  \n  // Group vendors by type\n  const vendorsByType = useMemo(() => {\n    const grouped = {\n      ''Model Developer'': [],\n      ''Inference Provider'': []\n    };\n    \n    vendors.forEach(v => {\n      if (grouped[v.Type]) {\n        grouped[v.Type].push(v);\n      }\n    });\n    \n    return grouped;\n  }, [vendors]);\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 99999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: ''75px'',\n        right: 0,\n        bottom: 0,\n        width: ''520px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 100000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {model?.Name || ''No Model Selected''}\n              </h2>\n              {model?.APIName && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {model.APIName}\n                </div>\n              )}\n              {model?.IsActive !== undefined && (\n                <div style={{ marginTop: styles.spacing.sm }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              ✕\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {model ? (\n            <>\n              {/* Model Description */}\n              {model.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {model.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Model Specifications */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Specifications\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Token Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Cost Rank\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.warning || styles.colors.secondary\n                    }}>\n                      {''$''.repeat(Math.min(model.CostRank || 0, 5))}\n                      <span style={{ opacity: 0.3 }}>\n                        {''$''.repeat(Math.max(0, 5 - (model.CostRank || 0)))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vendors Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Vendors ({vendors.length})\n                </h3>\n                \n                {/* Model Developer */}\n                {vendorsByType[''Model Developer''].length > 0 && (\n                  <div style={{ marginBottom: styles.spacing.md }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Model Developer'')}\n                      Model Developer\n                    </div>\n                    {vendorsByType[''Model Developer''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm,\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''center''\n                        }}\n                      >\n                        <div>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {vendor.Vendor}\n                          </div>\n                          {vendor.APIName && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              API: {vendor.APIName}\n                            </div>\n                          )}\n                        </div>\n                        {renderStatusBadge(vendor.Status)}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Inference Providers */}\n                {vendorsByType[''Inference Provider''].length > 0 && (\n                  <div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Inference Provider'')}\n                      Inference Providers\n                    </div>\n                    {vendorsByType[''Inference Provider''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm\n                        }}\n                      >\n                        <div style={{\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''flex-start'',\n                          marginBottom: styles.spacing.sm\n                        }}>\n                          <div>\n                            <div style={{\n                              fontSize: styles.typography.fontSize.md,\n                              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                              color: styles.colors.text\n                            }}>\n                              {vendor.Vendor}\n                            </div>\n                            {vendor.APIName && (\n                              <div style={{\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                fontFamily: ''monospace''\n                              }}>\n                                API: {vendor.APIName}\n                              </div>\n                            )}\n                          </div>\n                          <div style={{\n                            display: ''flex'',\n                            gap: styles.spacing.xs,\n                            alignItems: ''center''\n                          }}>\n                            {vendor.Priority && (\n                              <span style={{\n                                padding: `2px $' + '{styles.spacing.xs}`,\n                                backgroundColor: styles.colors.info + ''15'',\n                                color: styles.colors.info || styles.colors.primary,\n                                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                              }}>\n                                Priority: {vendor.Priority}\n                              </span>\n                            )}\n                            {renderStatusBadge(vendor.Status)}\n                          </div>\n                        </div>\n                        \n                        {/* Vendor Capabilities */}\n                        <div style={{\n                          display: ''flex'',\n                          gap: styles.spacing.xs,\n                          flexWrap: ''wrap''\n                        }}>\n                          {vendor.SupportsStreaming && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              ✓ Streaming\n                            </span>\n                          )}\n                          {vendor.SupportsEffortLevel && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              ✓ Effort Level\n                            </span>\n                          )}\n                          {vendor.MaxInputTokens && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.background,\n                              color: styles.colors.textSecondary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              Max: {formatTokens(vendor.MaxInputTokens)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Usage Statistics */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Usage Statistics\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Runs\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.totalRuns.toLocaleString()}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Success Rate\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: stats.totalRuns > 0 \n                        ? (stats.successfulRuns / stats.totalRuns >= 0.9 ? styles.colors.success : styles.colors.warning)\n                        : styles.colors.text\n                    }}>\n                      {stats.totalRuns > 0 \n                        ? `$' + '{((stats.successfulRuns / stats.totalRuns) * 100).toFixed(1)}%`\n                        : ''-''}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Unique Prompts\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.uniquePrompts}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Tokens\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(stats.totalTokens)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Model Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select a model from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {model && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Model Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}","dependencies":[],"libraries":[]},{"name":"AIModelFilter","title":"AI Model Filter","description":"Collapsible filter panel for filtering models by type, status, developer, and provider","type":"form","functionalRequirements":"Provide filters for model type, status, developer, and provider with active filter indicators","dataRequirements":{"mode":"views","description":"Receives filter options derived from AI model entities","entities":[{"name":"AI Model Types","description":"Model type options for filtering","displayFields":["ID","Name","Description"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Populates model type dropdown filter"},{"name":"AI Vendors","description":"Vendor options for filtering","displayFields":["ID","Name"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Populates vendor dropdown filters"}],"queries":[]},"technicalDesign":"","properties":[{"name":"filters","type":"{modelType?: string, status?: string, developer?: string, provider?: string}","required":true,"description":"Current filter state object"},{"name":"modelTypes","type":"Array<{ID: string, Name: string, Description?: string}>","required":true,"description":"Array of available model types for filtering"},{"name":"vendors","type":"Array<{ID: string, Name: string, Type?: string}>","required":true,"description":"Array of available vendors for filtering"},{"name":"isCollapsed","type":"boolean","required":true,"description":"Whether the filter panel is collapsed"}],"events":[{"name":"onFilterChange","description":"Fired when filters are changed","parameters":[{"name":"filters","type":"object","description":"New filter state"}]},{"name":"onToggleCollapse","description":"Fired when the collapse state should toggle","parameters":[]}],"exampleUsage":"<AIModelFilter ... />","code":"function AIModelFilter({ \n  filters, \n  onFilterChange, \n  modelTypes,\n  vendors,\n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle model type filter change\n  const handleModelTypeChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      modelType: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle developer filter change\n  const handleDeveloperChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      developer: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle inference provider filter change\n  const handleProviderChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      provider: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle status filter change\n  const handleStatusChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      isActive: e.target.value === '''' ? undefined : e.target.value === ''true''\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  // Get unique developers and providers\n  const developers = useMemo(() => {\n    // Use all vendors for now since we''ll filter properly in the parent\n    return vendors.map(v => v.Name).filter(Boolean);\n  }, [vendors]);\n  \n  const providers = useMemo(() => {\n    // Use all vendors for now since we''ll filter properly in the parent  \n    return vendors.map(v => v.Name).filter(Boolean);\n  }, [vendors]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''→'' : ''←''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            🔍\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Model Type Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Model Type\n            </label>\n            <select\n              value={filters?.modelType || ''''}\n              onChange={handleModelTypeChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Types</option>\n              {modelTypes.map((type) => (\n                <option key={type.ID} value={type.ID}>\n                  {type.Name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Status Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Status\n            </label>\n            <select\n              value={filters?.isActive === undefined ? '''' : filters.isActive.toString()}\n              onChange={handleStatusChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"true\">Active</option>\n              <option value=\"false\">Inactive</option>\n            </select>\n          </div>\n          \n          {/* Model Developer Filter */}\n          {developers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Model Developer\n              </label>\n              <select\n                value={filters?.developer || ''''}\n                onChange={handleDeveloperChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Developers</option>\n                {developers.map((dev) => (\n                  <option key={dev} value={dev}>\n                    {dev}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Inference Provider Filter */}\n          {providers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Inference Provider\n              </label>\n              <select\n                value={filters?.provider || ''''}\n                onChange={handleProviderChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Providers</option>\n                {providers.map((provider) => (\n                  <option key={provider} value={provider}>\n                    {provider}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.modelType && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Type:\n                      </span>\n                      <strong>{modelTypes.find(t => t.ID === filters.modelType)?.Name || filters.modelType}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleModelTypeChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n                {filters?.isActive !== undefined && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Status:\n                      </span>\n                      <strong>{filters.isActive ? ''Active'' : ''Inactive''}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleStatusChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n                {filters?.developer && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Developer:\n                      </span>\n                      <strong>{filters.developer}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleDeveloperChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n                {filters?.provider && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Provider:\n                      </span>\n                      <strong>{filters.provider}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleProviderChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","dependencies":[],"libraries":[]},{"name":"AIModelAnalytics","title":"AI Model Analytics","description":"Analytics panel with charts showing prompt usage distribution, performance metrics, and time series","type":"chart","functionalRequirements":"Display pie chart for prompt usage, bar chart for performance, time series for usage trends","technicalDesign":"","dataRequirements":{"mode":"views","entities":[{"name":"AI Models","description":"Core AI model definitions and specifications","displayFields":["ID","Name","APIName","Description","AIModelTypeID","InputTokenLimit","PowerRank","SpeedRank","CostRank","IsActive","__mj_CreatedAt","__mj_UpdatedAt"],"filterFields":["AIModelTypeID","IsActive"],"sortFields":["Name","InputTokenLimit","CostRank","IsActive","__mj_CreatedAt"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the AI model"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the AI model"},{"name":"APIName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"API identifier for the model"},{"name":"InputTokenLimit","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum input token limit"},{"name":"CostRank","sequence":6,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Relative cost ranking (1-5)"}],"usageContext":"Main list of AI models"},{"name":"MJ: AI Model Vendors","description":"Vendor associations for AI models","displayFields":["ID","ModelID","VendorID","TypeID","Model","Vendor","Type","Status","Priority","APIName","MaxInputTokens","MaxOutputTokens","SupportsStreaming","SupportsEffortLevel"],"filterFields":["ModelID","Type","Status"],"sortFields":["Vendor","Priority","Type"],"fieldMetadata":[{"name":"ModelID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to AI Model"},{"name":"Vendor","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor name"},{"name":"Type","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor type (Model Developer or Inference Provider)"}],"usageContext":"Vendor associations for models"},{"name":"AI Model Types","description":"Types/categories of AI models","displayFields":["ID","Name","Description"],"filterFields":[],"sortFields":["Name"],"usageContext":"Filter dropdown for model types"},{"name":"MJ: AI Prompt Runs","description":"Execution history for AI prompts","displayFields":["ID","PromptID","ModelID","StartTime","EndTime","TotalExecutionTime","InputTokens","OutputTokens","TotalTokens","Status","Error"],"filterFields":["ModelID","PromptID","Status"],"sortFields":["StartTime","TotalExecutionTime"],"usageContext":"Analytics and usage history"},{"name":"AI Prompts","description":"AI prompt definitions","displayFields":["ID","Name","Description","CategoryID"],"filterFields":[],"sortFields":["Name"],"usageContext":"Enrich prompt runs with names"}]},"properties":[{"name":"model","type":"object","required":true,"description":"The selected AI model for analytics"},{"name":"promptRuns","type":"array","required":true,"description":"Array of prompt runs to analyze"},{"name":"view","type":"string","required":true,"description":"Current analytics view - ''prompts'', ''performance'', or ''timeline''"}],"events":[{"name":"onViewChange","description":"Fired when the analytics view changes","parameters":[{"name":"view","type":"string","description":"New view name"}]}],"exampleUsage":"<AIModelAnalytics ... />","code":"function AIModelAnalytics({ \n  model,\n  promptRuns,\n  view,\n  onViewChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate prompt usage statistics\n  const promptStats = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    const stats = {};\n    promptRuns.forEach(run => {\n      const promptName = run.PromptName || ''Unknown'';\n      if (!stats[promptName]) {\n        stats[promptName] = {\n          name: promptName,\n          runs: 0,\n          successfulRuns: 0,\n          failedRuns: 0,\n          totalTokens: 0,\n          avgExecutionTime: 0,\n          executionTimes: []\n        };\n      }\n      \n      stats[promptName].runs++;\n      if (run.Status === ''Success'' || run.Status === ''Completed'') {\n        stats[promptName].successfulRuns++;\n      } else if (run.Status === ''Failed'' || run.Status === ''Error'') {\n        stats[promptName].failedRuns++;\n      }\n      \n      stats[promptName].totalTokens += run.TotalTokens || 0;\n      if (run.TotalExecutionTime) {\n        stats[promptName].executionTimes.push(run.TotalExecutionTime);\n      }\n    });\n    \n    // Calculate averages\n    Object.values(stats).forEach(stat => {\n      if (stat.executionTimes.length > 0) {\n        stat.avgExecutionTime = stat.executionTimes.reduce((a, b) => a + b, 0) / stat.executionTimes.length;\n      }\n    });\n    \n    return Object.values(stats).sort((a, b) => b.runs - a.runs);\n  }, [promptRuns]);\n  \n  // Calculate time series data\n  const timeSeriesData = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    // Group by day\n    const dailyStats = {};\n    promptRuns.forEach(run => {\n      if (run.StartTime) {\n        const date = new Date(run.StartTime).toLocaleDateString();\n        if (!dailyStats[date]) {\n          dailyStats[date] = {\n            date,\n            runs: 0,\n            tokens: 0,\n            errors: 0\n          };\n        }\n        dailyStats[date].runs++;\n        dailyStats[date].tokens += run.TotalTokens || 0;\n        if (run.Status === ''Failed'' || run.Status === ''Error'') {\n          dailyStats[date].errors++;\n        }\n      }\n    });\n    \n    return Object.values(dailyStats).sort((a, b) => new Date(a.date) - new Date(b.date));\n  }, [promptRuns]);\n  \n  // Render pie chart\n  const renderPieChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No prompt data available\n        </div>\n      );\n    }\n    \n    const total = promptStats.reduce((sum, stat) => sum + stat.runs, 0);\n    const colors = [\n      styles.colors.primary,\n      styles.colors.success || ''#4CAF50'',\n      styles.colors.warning || ''#FF9800'',\n      styles.colors.error || ''#F44336'',\n      styles.colors.info || ''#2196F3'',\n      ''#9C27B0'', ''#00BCD4'', ''#8BC34A'', ''#FFC107'', ''#795548''\n    ];\n    \n    // Create simple pie chart using SVG\n    let currentAngle = 0;\n    const segments = promptStats.slice(0, 5).map((stat, index) => {\n      const percentage = stat.runs / total;\n      const angle = percentage * 360;\n      const largeArcFlag = angle > 180 ? 1 : 0;\n      \n      const startX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      currentAngle += angle;\n      \n      const endX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const endY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      const pathData = [\n        `M 100 100`,\n        `L $' + '{startX} $' + '{startY}`,\n        `A 80 80 0 $' + '{largeArcFlag} 1 $' + '{endX} $' + '{endY}`,\n        ''Z''\n      ].join('' '');\n      \n      return {\n        path: pathData,\n        color: colors[index % colors.length],\n        percentage,\n        stat\n      };\n    });\n    \n    return (\n      <div>\n        <svg viewBox=\"0 0 200 200\" style={{ width: ''200px'', height: ''200px'', margin: ''0 auto'', display: ''block'' }}>\n          {segments.map((segment, index) => (\n            <g key={index}>\n              <path\n                d={segment.path}\n                fill={segment.color}\n                stroke={styles.colors.background}\n                strokeWidth=\"2\"\n                style={{ cursor: ''pointer'' }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.opacity = ''0.8'';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.opacity = ''1'';\n                }}\n              />\n            </g>\n          ))}\n        </svg>\n        \n        {/* Legend */}\n        <div style={{\n          marginTop: styles.spacing.md,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.xs\n        }}>\n          {segments.map((segment, index) => (\n            <div\n              key={index}\n              style={{\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              <div style={{\n                width: ''12px'',\n                height: ''12px'',\n                backgroundColor: segment.color,\n                borderRadius: ''2px''\n              }} />\n              <div style={{\n                flex: 1,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {segment.stat.name}\n              </div>\n              <div style={{\n                color: styles.colors.textSecondary,\n                fontWeight: styles.typography.fontWeight?.medium || ''500''\n              }}>\n                {(segment.percentage * 100).toFixed(1)}%\n              </div>\n            </div>\n          ))}\n          {promptStats.length > 5 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              fontStyle: ''italic''\n            }}>\n              +{promptStats.length - 5} more prompts\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render bar chart for performance\n  const renderPerformanceChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No performance data available\n        </div>\n      );\n    }\n    \n    const maxTime = Math.max(...promptStats.map(s => s.avgExecutionTime || 0));\n    const displayStats = promptStats.slice(0, 10);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.sm\n        }}>\n          {displayStats.map((stat, index) => (\n            <div key={index} style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.sm }}>\n              <div style={{\n                width: ''100px'',\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {stat.name}\n              </div>\n              <div style={{\n                flex: 1,\n                height: ''20px'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                overflow: ''hidden'',\n                position: ''relative''\n              }}>\n                <div style={{\n                  width: maxTime > 0 ? `$' + '{(stat.avgExecutionTime / maxTime) * 100}%` : ''0%'',\n                  height: ''100%'',\n                  backgroundColor: styles.colors.primary,\n                  transition: ''width 0.3s''\n                }} />\n                <div style={{\n                  position: ''absolute'',\n                  right: styles.spacing.xs,\n                  top: ''50%'',\n                  transform: ''translateY(-50%)'',\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary\n                }}>\n                  {stat.avgExecutionTime ? `$' + '{(stat.avgExecutionTime / 1000).toFixed(2)}s` : ''-''}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render time series chart\n  const renderTimeSeriesChart = () => {\n    if (timeSeriesData.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No time series data available\n        </div>\n      );\n    }\n    \n    const maxRuns = Math.max(...timeSeriesData.map(d => d.runs));\n    const recentData = timeSeriesData.slice(-7);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          alignItems: ''flex-end'',\n          height: ''150px'',\n          gap: styles.spacing.xs,\n          marginBottom: styles.spacing.sm\n        }}>\n          {recentData.map((data, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 1,\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                gap: styles.spacing.xs\n              }}\n            >\n              <div style={{\n                width: ''100%'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                position: ''relative'',\n                flex: 1,\n                display: ''flex'',\n                alignItems: ''flex-end''\n              }}>\n                <div style={{\n                  width: ''100%'',\n                  height: maxRuns > 0 ? `$' + '{(data.runs / maxRuns) * 100}%` : ''0%'',\n                  backgroundColor: data.errors > 0 \n                    ? styles.colors.error \n                    : styles.colors.primary,\n                  borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                  transition: ''height 0.3s''\n                }} />\n              </div>\n              <div style={{\n                fontSize: ''10px'',\n                color: styles.colors.textSecondary,\n                textAlign: ''center''\n              }}>\n                {new Date(data.date).toLocaleDateString(''en'', { month: ''short'', day: ''numeric'' })}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n          color: styles.colors.textSecondary\n        }}>\n          <span>Runs per day (last 7 days)</span>\n          <span>Max: {maxRuns}</span>\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      backgroundColor: styles.colors.surface\n    }}>\n      {/* Header with View Selector */}\n      <div style={{\n        padding: styles.spacing.lg,\n        borderBottom: `1px solid $' + '{styles.colors.border}`\n      }}>\n        <h3 style={{\n          margin: 0,\n          marginBottom: styles.spacing.md,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n          color: styles.colors.text\n        }}>\n          Analytics\n        </h3>\n        \n        {/* View Tabs */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.xs,\n          borderBottom: `1px solid $' + '{styles.colors.border}`\n        }}>\n          <button\n            onClick={() => onViewChange?.(''prompts'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''prompts'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''prompts'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Prompt Usage\n          </button>\n          <button\n            onClick={() => onViewChange?.(''performance'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''performance'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''performance'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Performance\n          </button>\n          <button\n            onClick={() => onViewChange?.(''timeline'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''timeline'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''timeline'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Timeline\n          </button>\n        </div>\n      </div>\n      \n      {/* Content Area */}\n      <div style={{\n        flex: 1,\n        padding: styles.spacing.lg,\n        overflow: ''auto''\n      }}>\n        {!model ? (\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            height: ''100%'',\n            color: styles.colors.textSecondary,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Select a model to view analytics\n          </div>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.lg\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Total Runs\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptRuns.length}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Unique Prompts\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptStats.length}\n                </div>\n              </div>\n            </div>\n            \n            {/* Chart Area */}\n            <div>\n              {view === ''prompts'' && renderPieChart()}\n              {view === ''performance'' && renderPerformanceChart()}\n              {view === ''timeline'' && renderTimeSeriesChart()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","dependencies":[],"libraries":[]}],"libraries":[],"code":"function AIModelBrowser({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { AIModelList, AIModelDetails, AIModelFilter, AIModelAnalytics } = components;\n  console.log(''=== AIModelBrowser initialized with callbacks:'', callbacks);\n  \n  // Initialize state from saved settings where appropriate\n  const [selectedModelId, setSelectedModelId] = useState(savedUserSettings?.selectedModelId);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''grid'');\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [sortBy, setSortBy] = useState(savedUserSettings?.sortBy || ''Name'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''asc'');\n  const [filterPanelCollapsed, setFilterPanelCollapsed] = useState(savedUserSettings?.filterPanelCollapsed || false);\n  const [analyticsView, setAnalyticsView] = useState(savedUserSettings?.analyticsView || ''prompts'');\n  \n  // Runtime UI state (not persisted)\n  const [models, setModels] = useState([]);\n  const [modelVendors, setModelVendors] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [modelTypes, setModelTypes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [detailsPanelOpen, setDetailsPanelOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('''');\n  \n  // Load models on mount and when filters/sort change\n  useEffect(() => {\n    const loadModels = async () => {\n      console.log(''=== Loading models with filters:'', filters, ''search:'', searchQuery);\n      setLoading(true);\n      try {\n        // Build filter string for models\n        let filterParts = [];\n        if (searchQuery) {\n          filterParts.push(`(Name LIKE ''%$' + '{searchQuery}%'' OR APIName LIKE ''%$' + '{searchQuery}%'' OR Description LIKE ''%$' + '{searchQuery}%'')`);\n        }\n        if (filters.modelType) {\n          filterParts.push(`AIModelTypeID = ''$' + '{filters.modelType}''`);\n        }\n        if (filters.isActive !== undefined) {\n          filterParts.push(`IsActive = ''$' + '{filters.isActive}''`);\n        }\n        \n        // Load AI Models\n        const modelsResult = await utilities.rv.RunView({\n          EntityName: ''AI Models'',\n          Fields: [''ID'', ''Name'', ''APIName'', ''Description'', ''AIModelTypeID'', ''InputTokenLimit'', \n                   ''CostRank'', ''IsActive'', ''__mj_CreatedAt'', ''__mj_UpdatedAt''],\n          OrderBy: `$' + '{sortBy} $' + '{sortDirection.toUpperCase()}`,\n          ExtraFilter: filterParts.length > 0 ? filterParts.join('' AND '') : undefined\n        });\n        \n        if (modelsResult?.Success && modelsResult?.Results) {\n          console.log(`Loaded $' + '{modelsResult.Results.length} models`);\n          setModels(modelsResult.Results);\n        } else {\n          console.error(''Failed to load models:'', modelsResult?.ErrorMessage);\n          setModels([]);\n        }\n        \n        // Load Model Types for filter\n        const typesResult = await utilities.rv.RunView({\n          EntityName: ''AI Model Types'',\n          Fields: [''ID'', ''Name'', ''Description''],\n          OrderBy: ''Name ASC''\n        });\n        \n        if (typesResult?.Success && typesResult?.Results) {\n          setModelTypes(typesResult.Results);\n        }\n        \n        // Load Vendors (from AI Model Vendors)\n        const vendorsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Model Vendors'',\n          Fields: [''ID'', ''ModelID'', ''VendorID'', ''TypeID'', ''Model'', ''Vendor'', ''Type'', ''Status'', ''Priority''],\n          OrderBy: ''Vendor ASC, Model ASC''\n        });\n        \n        if (vendorsResult?.Success && vendorsResult?.Results) {\n          const vendorData = vendorsResult.Results;\n          console.log(`Loaded $' + '{vendorData.length} vendor associations`);\n          setModelVendors(vendorData);\n          \n          // Extract unique vendors\n          const uniqueVendors = [...new Set(vendorData.map(v => v.Vendor))].filter(Boolean);\n          setVendors(uniqueVendors.map(name => ({ Name: name })));\n          console.log(`Found $' + '{uniqueVendors.length} unique vendors`);\n          \n          // Apply vendor-based filters\n          if ((filters.developer || filters.provider) && modelsResult?.Results) {\n            console.log(''Applying vendor filters - developer:'', filters.developer, ''provider:'', filters.provider);\n            let vendorFilteredModels = modelsResult.Results;\n            \n            if (filters.developer) {\n              const developerModelIds = vendorData\n                .filter(v => v.Vendor === filters.developer && v.Type?.includes(''Developer''))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => developerModelIds.includes(m.ID));\n              console.log(`After developer filter: $' + '{vendorFilteredModels.length} models`);\n            }\n            \n            if (filters.provider) {\n              const providerModelIds = vendorData\n                .filter(v => v.Vendor === filters.provider && v.Type?.includes(''Provider''))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => providerModelIds.includes(m.ID));\n              console.log(`After provider filter: $' + '{vendorFilteredModels.length} models`);\n            }\n            \n            setModels(vendorFilteredModels);\n          }\n        }\n      } catch (error) {\n        console.error(''Error loading models:'', error);\n        setModels([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadModels();\n  }, [filters, sortBy, sortDirection, searchQuery, utilities.rv]);\n  \n  // Load model details and analytics when selection changes\n  useEffect(() => {\n    const loadModelDetails = async () => {\n      if (!selectedModelId) {\n        setPromptRuns([]);\n        return;\n      }\n      \n      console.log(''=== Loading prompt runs for model:'', selectedModelId);\n      \n      try {\n        // Use the correct entity name for prompt runs: MJ: AI Prompt Runs\n        console.log(''Loading prompt runs with entity: MJ: AI Prompt Runs'');\n        \n        const promptRunsResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Prompt Runs'',\n          Fields: [''ID'', ''PromptID'', ''ModelID'', ''RunAt'', ''CompletedAt'', ''ExecutionTimeMS'', \n                   ''TokensPrompt'', ''TokensCompletion'', ''TokensUsed'', ''Success'', ''ErrorMessage''],\n          OrderBy: ''RunAt DESC'',\n            ExtraFilter: `ModelID = ''$' + '{selectedModelId}''`,\n            MaxRows: 1000\n        });\n        \n        if (promptRunsResult?.Success && promptRunsResult?.Results) {\n          console.log(`Found $' + '{promptRunsResult.Results.length} prompt runs`);\n          // Enrich with prompt names\n          const promptIds = [...new Set(promptRunsResult.Results.map(r => r.PromptID))].filter(Boolean);\n          \n          if (promptIds.length > 0) {\n            const promptsResult = await utilities.rv.RunView({\n              EntityName: ''AI Prompts'',\n              Fields: [''ID'', ''Name'', ''Description'', ''CategoryID''],\n              ExtraFilter: `ID IN (''$' + '{promptIds.join(\"'',''\")}'')`\n            });\n            \n            const promptMap = {};\n            if (promptsResult?.Success && promptsResult?.Results) {\n              promptsResult.Results.forEach(p => {\n                promptMap[p.ID] = p;\n              });\n            }\n            \n            // Enrich prompt runs with prompt names and convert fields for compatibility\n            const enrichedRuns = promptRunsResult.Results.map(run => ({\n              ...run,\n              PromptName: promptMap[run.PromptID]?.Name || ''Unknown Prompt'',\n              PromptDescription: promptMap[run.PromptID]?.Description,\n              // Map fields for analytics component compatibility\n              StartTime: run.RunAt,\n              EndTime: run.CompletedAt,\n              TotalExecutionTime: run.ExecutionTimeMS,\n              Status: run.Success ? ''Success'' : ''Failed'',\n              Error: run.ErrorMessage,\n              TotalTokens: run.TokensUsed\n            }));\n            \n            console.log(`Enriched $' + '{enrichedRuns.length} runs with prompt names`);\n            setPromptRuns(enrichedRuns);\n          } else {\n            setPromptRuns(promptRunsResult.Results);\n          }\n        } else {\n          console.log(''No prompt runs found:'', promptRunsResult?.ErrorMessage);\n          setPromptRuns([]);\n        }\n      } catch (error) {\n        console.error(''Error loading model details:'', error);\n        setPromptRuns([]);\n      }\n    };\n    \n    loadModelDetails();\n  }, [selectedModelId, utilities.rv]);\n  \n  // Handle model selection\n  const handleSelectModel = useCallback((modelId) => {\n    setSelectedModelId(modelId);\n    setDetailsPanelOpen(true);\n    \n    // Save user preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedModelId: modelId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode) => {\n    setViewMode(mode);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      viewMode: mode\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    \n    // Save filter preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle sort changes\n  const handleSortChange = useCallback((newSortBy, newSortDirection) => {\n    setSortBy(newSortBy);\n    setSortDirection(newSortDirection);\n    \n    // Save sort preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortBy: newSortBy,\n      sortDirection: newSortDirection\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter panel toggle\n  const handleToggleFilter = useCallback(() => {\n    const newCollapsed = !filterPanelCollapsed;\n    setFilterPanelCollapsed(newCollapsed);\n    \n    // Save collapsed state\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterPanelCollapsed: newCollapsed\n    });\n  }, [filterPanelCollapsed, savedUserSettings, onSaveUserSettings]);\n  \n  // Handle analytics view change\n  const handleAnalyticsViewChange = useCallback((view) => {\n    setAnalyticsView(view);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      analyticsView: view\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle opening model record\n  const handleOpenRecord = useCallback((modelName) => {\n    console.log(''Opening AI Model record:'', modelName);\n    if (callbacks?.OpenEntityRecord && modelName) {\n      callbacks.OpenEntityRecord(''AI Models'', [{ FieldName: ''Name'', Value: modelName }]);\n    }\n  }, [callbacks]);\n  \n  // Handle closing details panel\n  const handleCloseDetails = useCallback(() => {\n    setDetailsPanelOpen(false);\n  }, []);\n  \n  // Handle search\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n  }, []);\n  \n  // Get selected model object\n  const selectedModel = models.find(m => m.ID === selectedModelId);\n  \n  // Get vendors for selected model\n  const selectedModelVendors = modelVendors.filter(v => v.ModelID === selectedModelId);\n  \n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Loading state\n  if (loading && models.length === 0) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100vh'',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading AI models...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      display: ''flex'',\n      height: ''100vh'',\n      backgroundColor: styles.colors.background,\n      overflow: ''hidden''\n    }}>\n      {/* Filter Panel */}\n      {AIModelFilter && (\n        <AIModelFilter\n          filters={filters}\n          onFilterChange={handleFilterChange}\n          modelTypes={modelTypes}\n          vendors={vendors}\n          isCollapsed={filterPanelCollapsed}\n          onToggleCollapse={handleToggleFilter}\n          savedUserSettings={savedUserSettings?.filterPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            filterPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center'',\n            marginBottom: styles.spacing.md\n          }}>\n            <h1 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || ''700'',\n              color: styles.colors.text\n            }}>\n              AI Model Browser\n            </h1>\n            \n            {/* View Mode Toggle */}\n            <div style={{\n              display: ''flex'',\n              gap: styles.spacing.sm,\n              alignItems: ''center''\n            }}>\n              <span style={{\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.textSecondary\n              }}>\n                View:\n              </span>\n              <button\n                onClick={() => handleViewModeChange(''grid'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''grid'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''grid'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Grid\n              </button>\n              <button\n                onClick={() => handleViewModeChange(''list'')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: viewMode === ''list'' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === ''list'' ? ''white'' : styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                List\n              </button>\n            </div>\n          </div>\n          \n          {/* Search Bar */}\n          <div style={{\n            display: ''flex'',\n            gap: styles.spacing.md\n          }}>\n            <input\n              type=\"text\"\n              placeholder=\"Search AI models...\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              style={{\n                flex: 1,\n                padding: styles.spacing.md,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background\n              }}\n            />\n            {searchQuery && (\n              <button\n                onClick={() => handleSearch('''')}\n                style={{\n                  padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                  backgroundColor: styles.colors.surfaceHover || styles.colors.surface,\n                  color: styles.colors.text,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  cursor: ''pointer'',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Model List and Analytics Split View */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          overflow: ''hidden''\n        }}>\n          {/* Model List */}\n          <div style={{\n            flex: 1,\n            overflow: ''auto'',\n            padding: styles.spacing.lg\n          }}>\n            {AIModelList && (\n              <AIModelList\n                models={models}\n                modelVendors={modelVendors}\n                viewMode={viewMode}\n                selectedModelId={selectedModelId}\n                onSelectModel={handleSelectModel}\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n                onSortChange={handleSortChange}\n                savedUserSettings={savedUserSettings?.modelList}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  modelList: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            )}\n            \n            {/* Empty State */}\n            {models.length === 0 && !loading && (\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                padding: styles.spacing.xxl || styles.spacing.xl,\n                color: styles.colors.textSecondary\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xl,\n                  marginBottom: styles.spacing.md\n                }}>\n                  No AI models found\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {searchQuery || Object.keys(filters).length > 0\n                    ? ''Try adjusting your filters or search query''\n                    : ''No AI models are available''}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Analytics Panel */}\n          {selectedModel && AIModelAnalytics && (\n            <div style={{\n              width: ''400px'',\n              borderLeft: `1px solid $' + '{styles.colors.border}`,\n              overflow: ''hidden'',\n              display: ''flex'',\n              flexDirection: ''column''\n            }}>\n              <AIModelAnalytics\n                model={selectedModel}\n                promptRuns={promptRuns}\n                view={analyticsView}\n                onViewChange={handleAnalyticsViewChange}\n                savedUserSettings={savedUserSettings?.analytics}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  analytics: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Details Panel */}\n      {AIModelDetails && (\n        <AIModelDetails\n          model={selectedModel}\n          vendors={selectedModelVendors}\n          promptRuns={promptRuns}\n          isOpen={detailsPanelOpen}\n          onClose={handleCloseDetails}\n          onOpenRecord={() => handleOpenRecord(selectedModel?.Name)}\n          savedUserSettings={savedUserSettings?.detailsPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            detailsPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n    </div>\n  );\n}"}'
SET
  @FunctionalRequirements_b43a9998 = N'## AI Model Browser

### Core Functionality
- Display AI models in grid or list view with comprehensive information
- Filter models by Model Type, Status, Model Developer, and Inference Provider
- View detailed model specifications including context window, token limits, and cost ranking
- Display all vendors associated with a model (model developers and inference providers)
- Show prompt run history and usage statistics for selected models
- Visualize prompt usage with pie charts showing distribution across different prompts
- Display performance metrics with bar charts showing average execution times
- Show time series data for model usage over time
- Support sorting by multiple fields with visual indicators
- Include search functionality for quick model filtering
- Provide ''Open'' button to trigger OpenEntityRecord callback for detailed editing

### Analytics Features
- Pie chart visualization of prompt usage distribution
- Performance bar charts showing average execution times per prompt
- Time series chart showing model usage trends over last 7 days
- Summary statistics including total runs, success rates, and token usage
- Grouped vendor display by type (Model Developer vs Inference Provider)

### UX Considerations
- Collapsible filter panel with active filter count indicator
- Sliding details panel for comprehensive model information
- Inline analytics panel with tabbed views for different visualizations
- Smooth animations for panel transitions and chart rendering
- Responsive design adapting to different screen sizes
- Loading states while fetching data
- Empty states with helpful messages
- Visual feedback for hover and selection states
- Maintain user preferences for view mode and filter state'
SET
  @TechnicalDesign_b43a9998 = N'## Architecture

### Root Component (AIModelBrowser)
- Manages overall state and data loading
- Coordinates between filter, list, details, and analytics components
- Handles user preferences and saved settings
- Manages search and sort state

### Child Components
1. **AIModelList**: Displays models in grid or list view with vendor information
2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors
3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering
4. **AIModelAnalytics**: Inline analytics panel with charts and statistics

### Data Flow
- Root component loads all models and vendor associations
- Filters are applied at the root level and filtered data passed to list
- Selection in list triggers detail loading and analytics calculation
- Analytics component processes prompt runs to generate visualizations

### Chart Implementation
- Pie charts using SVG for prompt usage distribution
- Bar charts for performance metrics
- Time series charts for usage trends
- All charts are responsive and interactive'
SET
  @FunctionalRequirementsVector_b43a9998 = N'[-0.018954802304506302,0.09649690240621567,-0.024486785754561424,-0.041474826633930206,0.004181933589279652,0.00290582119487226,0.09871092438697815,-0.01124159898608923,-0.0005670316750183702,-0.01998923160135746,-0.012950634583830833,0.041514892131090164,0.008768998086452484,0.18495233356952667,-0.007924949750304222,-0.03069666214287281,0.020554978400468826,-0.004705705214291811,0.04407649487257004,0.010969441384077072,-0.0073686265386641026,-0.025929758325219154,0.0028177134227007627,0.032239481806755066,-0.009231056086719036,-0.04166416823863983,-0.04087425023317337,0.009326332248747349,-0.006149556487798691,-0.07734014093875885,0.01691114716231823,0.021212231367826462,-0.01826726272702217,0.06881257891654968,0.0000028977385682082968,-0.02654130943119526,-0.06930284947156906,0.03121425025165081,-0.06000618264079094,0.028107408434152603,0.05261973664164543,0.08556845784187317,0.040153905749320984,0.020960651338100433,-0.00404793955385685,0.023034578189253807,0.006849102210253477,0.027071133255958557,0.020621471107006073,-0.017654916271567345,0.011244138702750206,0.03384232148528099,-0.010643170215189457,-0.031210467219352722,-0.025484973564743996,-0.051188334822654724,-0.009866531938314438,-0.014233634807169437,0.030828120186924934,0.010146494023501873,0.008161010220646858,0.03281518816947937,0.019955044612288475,-0.031985241919755936,0.08970048278570175,0.061936382204294205,0.07178601622581482,-0.12165624648332596,-0.01529591903090477,-0.0071367379277944565,0.09148968011140823,-0.00603578332811594,-0.026081040501594543,-0.014260608702898026,-0.038586340844631195,0.005281538236886263,-0.04639536887407303,-0.0005500251427292824,-0.0023204716853797436,-0.0038778907619416714,-0.016673831269145012,-0.0009573762072250247,-0.035736143589019775,-0.010892250575125217,-0.03555911034345627,0.025775903835892677,0.008389401249587536,-0.005645557772368193,-0.006961803883314133,-0.019579347223043442,0.05318067595362663,-0.06649237871170044,0.010700362734496593,-0.018168386071920395,-0.06257052719593048,-0.042853351682424545,0.026777083054184914,-0.033560674637556076,0.020715879276394844,0.008194532245397568,0.0891493484377861,0.0057632108218967915,-0.0228923037648201,0.03462223336100578,0.0320785716176033,0.0530163049697876,-0.013030566275119781,-0.024995414540171623,0.03844990208745003,0.05497166886925697,-0.006774238310754299,-0.0063087595626711845,-0.02968887984752655,0.03365016728639603,-0.019104352220892906,-0.03994455188512802,0.01253308542072773,0.02320984937250614,-0.0028310439083725214,0.025740621611475945,0.03935406729578972,0.022661933675408363,0.01372178178280592,0.04247362166643143,-0.019660262390971184,0.011183840222656727,-0.0783284455537796,-0.0007694902596995234,0.023065613582730293,-0.05629643425345421,-0.02612469159066677,-0.020791491493582726,-0.003424345748499036,-0.02518051117658615,-0.0022230944596230984,0.034559063613414764,0.07163052260875702,-0.02605437859892845,-0.05702902376651764,-0.04647798463702202,0.02866644412279129,-0.03659806400537491,-0.07742869108915329,-0.002393980510532856,-0.006304134149104357,-0.015261432155966759,0.00506565859541297,-0.03259219974279404,-0.0063265967182815075,-0.021500594913959503,-0.002725290833041072,-0.021227283403277397,-0.04964274913072586,0.008901610039174557,0.002325261477380991,-0.011139853857457638,0.035738296806812286,0.014442448504269123,-0.011797990649938583,0.04602033272385597,0.03009677305817604,-0.005961091257631779,0.00880449265241623,-0.020993953570723534,0.0006040741573087871,0.026083016768097878,-0.028818832710385323,0.015293704345822334,-0.05466575548052788,-0.027090435847640038,-0.04825868085026741,-0.035413771867752075,0.013294167816638947,0.01462403405457735,0.05822852626442909,0.03097987174987793,0.05671190470457077,-0.013478550128638744,-0.01389402151107788,0.006454982794821262,0.045716408640146255,-0.09695862978696823,-0.01004109252244234,0.0461994931101799,-0.025941448286175728,-0.003931940067559481,-0.013682372868061066,0.07219726592302322,-0.01428181305527687,-0.04000644385814667,0.005343346390873194,-0.02861730009317398,-0.07280614972114563,0.017727166414260864,0.04609503597021103,0.006421761587262154,0.012060102075338364,-0.059529222548007965,0.018648482859134674,-0.04186786711215973,-0.07561910897493362,-0.08012180775403976,0.06875584274530411,0.053196072578430176,0.025106456130743027,-0.011544949375092983,-0.08077622205018997,-0.03366544842720032,-0.06257405877113342,0.009924638085067272,0.08434568345546722,0.00395268714055419,-0.03049072064459324,0.026442550122737885,-0.04867228493094444,-0.02228556200861931,0.03010735474526882,0.02681473270058632,-0.010646993294358253,0.030638795346021652,-0.041868340224027634,-0.030388308688998222,-0.02311289869248867,0.014140946790575981,0.020021280273795128,0.018613342195749283,0.018491407856345177,0.018184464424848557,0.03562408313155174,0.02469576708972454,0.0026375206653028727,0.018029317259788513,0.05178896710276604,0.03264151141047478,0.01614759862422943,0.019485680386424065,0.05490689352154732,0.11459845304489136,0.0022985755931586027,0.05611496418714523,0.06091584265232086,-0.010627573356032372,-0.0008141049765981734,0.001037220237776637,-0.018849307671189308,-0.029310425743460655,0.036686092615127563,0.03470619022846222,0.027871184051036835,-0.03658667206764221,0.01679273135960102,0.0002627461508382112,0.03931979835033417,0.01038247812539339,-0.03348053991794586,0.018976807594299316,-0.028687026351690292,-0.0189488735049963,-0.05264444276690483,0.06218123808503151,0.00952551793307066,-0.010225679725408554,-0.04198647290468216,-0.010493878275156021,0.0030830225441604853,-0.011592473834753036,0.08435589075088501,-0.09356031566858292,0.004021923523396254,0.016457408666610718,-0.006460277363657951,0.03998924046754837,0.06005031242966652,-0.026639927178621292,-0.01581558771431446,0.0484793521463871,-0.028241248801350594,0.020298585295677185,-0.035328108817338943,-0.03834500163793564,0.02174932137131691,-0.03697134926915169,-0.05790446698665619,0.029239105060696602,-0.028836023062467575,0.028709517791867256,0.07140611112117767,-0.044409964233636856,0.025165405124425888,-0.0022762627340853214,0.006975377909839153,-0.00048434591735713184,0.012225967831909657,0.019430682063102722,-0.014833456836640835,0.004009376745671034,-0.05896718055009842,0.07474584877490997,-0.032213348895311356,0.08174439519643784,0.004907906986773014,0.021392740309238434,-0.05348282679915428,0.02380741573870182,0.021061204373836517,0.041446685791015625,0.02312871254980564,0.02108907140791416,0.013896358199417591,0.06471143662929535,0.0033566667698323727,0.009189526550471783,0.036468926817178726,0.060669828206300735,0.02764977514743805,-0.020415177568793297,0.0015848423354327679,0.02018844522535801,0.0016830734675750136,0.08168540894985199,0.03474403917789459,-0.06512083113193512,0.018072927370667458,-0.04278511926531792,-0.000998981180600822,-0.019108280539512634,-0.07533925771713257,-0.0036283552180975676,-0.019567955285310745,-0.013534028083086014,0.005352125968784094,-0.028949592262506485,0.038768231868743896,0.037112001329660416,0.011923892423510551,-0.013673909939825535,-0.03149193897843361,-0.028584085404872894,-0.006897793151438236,-0.022866113111376762,-0.010117661207914352,0.03631521761417389,-0.01830219477415085,-0.02301204577088356,-0.03454216569662094,-0.018681105226278305,0.0035690355580300093,-0.04047558456659317,-0.03857393190264702,0.024814806878566742,0.05516981706023216,0.05243069306015968,-0.024262694641947746,-0.011555814184248447,0.04238467663526535,-0.06011936813592911,-0.01938866637647152,-0.04040831699967384,-0.007175082806497812,-0.027116719633340836,0.08855777233839035,0.01471111923456192,-0.00012059816799592227,0.020649470388889313,-0.07235688716173172,0.012799008749425411,0.013667400926351547,0.0007550251903012395,-0.01620279811322689,0.015378536656498909,-0.005973221268504858,-0.020447954535484314,0.009859822690486908,0.03414611518383026,0.021789442747831345,-0.02391641214489937,0.0019750292412936687,0.004492614418268204,0.03922755643725395,0.023624781519174576,0.02016986720263958,-0.022162366658449173,0.04777539521455765,0.0321376770734787,0.08525251597166061,-0.03366199880838394,-0.031382955610752106,0.00045957876136526465,-0.00990136619657278,0.02137664519250393,-0.017184222117066383,0.00047726984485052526,0.0069527155719697475,-0.10093379765748978,0.016549458727240562,-0.043373093008995056,-0.04989834874868393,0.022998908534646034,-0.0003674394974950701,0.03854705020785332,0.0064802998676896095,0.008601176552474499,-0.018320247530937195,-0.035862330347299576,0.007037774194031954,-0.01820949651300907,0.0797848105430603,0.04807399585843086,0.00633068336173892,-0.023192482069134712,-0.022044874727725983,0.059166304767131805,-0.0005246711662039161,-0.0544428788125515,0.0580848827958107,-0.012196440249681473,-0.008253447711467743,-0.017910035327076912,0.04468459263443947,0.05546688288450241,0.03583747148513794,0.019892888143658638,-0.020135872066020966,-0.060857806354761124,0.04719994589686394,-0.04727394878864288,-0.026920879259705544,-0.020746629685163498,0.036155156791210175,0.05405750870704651,-0.0299476757645607,0.000038338464946718886,-0.02653326466679573,0.021877935156226158,-0.021424612030386925,-0.007180305197834969,0.030730757862329483,-0.011623389087617397,-0.0817335918545723,-0.0045267860405147076,-0.005789459217339754,-0.002335812197998166,0.01914592646062374,0.012147094123065472,-0.02876986190676689,0.007546038832515478,0.03591062128543854,0.025651248171925545,-0.017804274335503578,0.020320827141404152,0.038589075207710266,-0.0665624737739563,-0.0032771534752100706,0.01197469886392355,-0.000306479400023818,-0.036426398903131485,-0.015672357752919197,-0.010075501166284084,-0.015526780858635902,0.009854908101260662,0.03656040132045746,0.0377989299595356,-0.03383766487240791,-0.00567470770329237,0.058540839701890945,-0.01855211704969406,-0.005448807030916214,-0.0523657500743866,-0.04079599305987358,-0.013363570906221867,0.03362364321947098,-0.009563210420310497,-0.02297947183251381,-0.028315816074609756,-0.01809997856616974,-0.02913537248969078,-0.0069295200519263744,-0.019174136221408844,-0.029365817084908485,0.01219293475151062,0.06672016531229019,0.025420019403100014,0.029672469943761826,-0.03947966918349266,-0.017537668347358704,0.023085376247763634,-0.021957390010356903,-0.0029447125270962715,-0.036256078630685806,0.01488696038722992,0.002109317108988762,0.00769411027431488,0.02301776222884655,0.03062024712562561,0.03404579684138298,-0.009476415812969208,-0.08109461516141891,0.05260533466935158,-0.04525219276547432,0.01518078800290823,0.006268100813031197,0.0019236725056543946,0.009890424087643623,-0.029630478471517563,0.005642062518745661,0.023485252633690834,-0.0184011347591877,0.013197144493460655,-0.04263893514871597,-0.01584741659462452,-0.0004836685839109123,0.011932620778679848,-0.03350156545639038,-0.11432621628046036,-0.0017264650668948889,0.10147058218717575,-0.04968990758061409,-0.0020486812572926283,0.002753700828179717,-0.0501810759305954,0.013947620987892151,-0.01255891378968954,-0.0019102237420156598,0.04798858240246773,0.0403592549264431,-0.034453798085451126,0.008494170382618904,-0.039466600865125656,-0.04319125413894653,0.059582389891147614,0.013883639127016068,0.0336739756166935,-0.04399159550666809,-0.03487744182348251,-0.04268079623579979,0.050828609615564346,0.03997531905770302,0.022443337365984917,-0.01250525750219822,0.003322844160720706,-0.04205458611249924,-0.018237363547086716,0.0027919637504965067,-0.031335022300481796,-0.02095641940832138,-0.023776495829224586,0.01167263463139534,0.022552821785211563,0.004079831298440695,-0.019160695374011993,0.028789367526769638,-0.055237267166376114,-0.033893831074237823,0.0007015564478933811,-0.042356353253126144,-8.028944534274915e-33,-0.04545973241329193,0.005639516748487949,-0.04634704813361168,-0.06305615603923798,-0.016254650428891182,-0.039148494601249695,0.004491452127695084,0.001215767697431147,-0.0354728028178215,-0.03131977841258049,-0.008145482279360294,-0.008265279233455658,0.012854316271841526,-0.013114635832607746,0.024588340893387794,0.05763532966375351,0.044755998998880386,0.008294458501040936,-0.007811286952346563,0.02864854410290718,-0.0150741683319211,0.03360583633184433,-0.0489666685461998,-0.06905904412269592,0.00013027821842115372,0.03627074509859085,0.02099306881427765,-0.018679974600672722,-0.0789954885840416,0.04711771011352539,0.025215553119778633,-0.01867259107530117,-0.034915126860141754,-0.02791137993335724,-0.02233739197254181,-0.000431785942055285,-0.018870627507567406,-0.01785440929234028,0.007307303138077259,-0.00819790456444025,0.018117539584636688,-0.03787064179778099,0.028362635523080826,0.012229799292981625,-0.0009510904201306403,0.005458631087094545,0.03327378258109093,-0.03578858822584152,0.0031328238546848297,0.011946897022426128,0.009930184110999107,-0.0036799556110054255,-0.05147581920027733,0.05950959026813507,0.03586815297603607,0.07284742593765259,0.013472942635416985,0.03789883106946945,-0.019397206604480743,-0.012815297581255436,0.027801642194390297,-0.023084990680217743,0.01996026746928692,0.012495698407292366,0.039149209856987,0.0001931523293023929,-0.01931687444448471,-0.036567285656929016,-0.03696085885167122,-0.02450362965464592,-0.0068682418204844,0.07620103657245636,0.003955370280891657,-0.07762831449508667,-0.04686693102121353,-0.032553840428590775,-0.017341740429401398,0.029177306219935417,-0.012249273248016834,0.08062098920345306,0.00819100346416235,-0.017765825614333153,-0.03193450719118118,0.026132049039006233,0.0370924212038517,-0.10261055827140808,-0.03825490549206734,-0.015484452247619629,0.05104149132966995,0.0005493339849635959,-0.03174334019422531,-0.018038982525467873,-0.05091583728790283,-0.043231867253780365,-0.0014338204637169838,0.006982119753956795,0.046303581446409225,0.003226182423532009,0.019406504929065704,-0.04630288854241371,0.018591107800602913,0.033943381160497665,-0.04235202446579933,0.025198308750987053,0.034316182136535645,-0.04659055545926094,0.01927606575191021,-0.015813380479812622,-0.06856587529182434,0.0075818742625415325,-0.0050312215462327,-0.0022749106865376234,0.03631509840488434,-0.013539007864892483,0.021853726357221603,-0.019020790234208107,-0.007189725525677204,0.04829658567905426,0.008524610660970211,0.018890781328082085,-0.033025577664375305,-0.022509006783366203,-0.019629420712590218,-0.015479324385523796,0.006795817520469427,-0.03555898740887642,-0.03250586986541748,0.00040155675378628075,0.042279575020074844,-0.020653625950217247,-0.027454866096377373,-0.011195426806807518,3.5701998513104627e-7,-0.01269929576665163,0.04402468353509903,0.008434053510427475,0.01471082866191864,0.002473041880875826,0.026985974982380867,-0.04278301075100899,-0.044117238372564316,0.006653557065874338,-0.0016874255379661918,0.03557971119880676,0.00305074080824852,0.021505272015929222,0.034175995737314224,0.01772443763911724,-0.05281420424580574,-0.030460914596915245,0.018022924661636353,-0.074491485953331,0.009150232188403606,0.05771986395120621,0.04770387336611748,0.05443751811981201,0.0011449833400547504,0.05494360253214836,-0.03799322247505188,-0.04405795782804489,-0.01759777031838894,0.020858224481344223,-0.031865302473306656,0.007209928706288338,0.052979692816734314,-0.013141436502337456,-0.013226332142949104,-0.008395279757678509,0.004207952413707972,-0.05071746185421944,0.03364500030875206,-0.0033062673173844814,0.028593502938747406,0.04362083971500397,-0.046850189566612244,0.014245236292481422,-0.08379878848791122,0.04296325147151947,0.03121146187186241,0.0020293344277888536,-0.022557230666279793,-0.021809997037053108,-0.013776857405900955,0.03759618103504181,0.01716436631977558,0.025669805705547333,-0.03792839124798775,0.0043458035215735435,-0.037322673946619034,-0.010730906389653683,0.054949935525655746,0.0158891212195158,0.03008137084543705,-0.02749747596681118,-0.04696225747466087,-0.038952820003032684,0.03961033746600151,0.024374045431613922,0.009167486801743507,-0.014163144864141941,4.257130392497168e-34,0.009845680557191372,0.005831483285874128,0.04061184823513031,0.04023654758930206,0.026840567588806152,-0.029227364808321,0.004944947548210621,-0.04258675128221512,0.016221629455685616,-0.08404307067394257,-0.02679458074271679]'
SET
  @TechnicalDesignVector_b43a9998 = N'[-0.04455028846859932,-0.023948704823851585,-0.04292631894350052,-0.07809945940971375,0.027811840176582336,-0.014077198691666126,0.029283683747053146,0.008394245058298111,-0.000669428613036871,-0.025235269218683243,-0.009922560304403305,0.014216303825378418,0.026506459340453148,0.11488807946443558,-0.023034662008285522,-0.03355199843645096,0.006409747060388327,0.01720452681183815,0.011229232884943485,0.026946865022182465,0.02824837528169155,-0.011614454910159111,0.02634485438466072,0.02844131551682949,0.006903723813593388,-0.01493024080991745,-0.022443905472755432,0.023990124464035034,0.029232461005449295,-0.1102200374007225,0.00989728607237339,0.013494309969246387,-0.030302025377750397,0.013200667686760426,0.0000023159507236414356,-0.00759019935503602,-0.03784604370594025,0.032010193914175034,-0.060548096895217896,0.012142972089350224,0.09797315299510956,-0.026376212015748024,0.03908391296863556,0.004092477262020111,0.023114576935768127,-0.01814170554280281,-0.027445504441857338,-0.012357832863926888,0.038666654378175735,-0.01765410043299198,0.028864655643701553,0.013481147587299347,-0.008846351876854897,-0.010058610700070858,-0.0012565933866426349,0.0038457431364804506,0.002688287990167737,0.017149033024907112,0.06620277464389801,0.03579626604914665,-0.023330820724368095,0.016907624900341034,0.02992302179336548,-0.013872364535927773,0.1012362465262413,0.018132973462343216,0.12246403098106384,-0.05781133472919464,0.02138485759496689,0.01712755486369133,0.1622018963098526,-0.019089380279183388,0.0054743001237511635,-0.03857982158660889,-0.039204634726047516,-0.009238183498382568,-0.017864353954792023,-0.009194456972181797,-0.015922753140330315,0.0038838305044919252,-0.0027900049462914467,0.01670726388692856,-0.039386823773384094,-0.0422971285879612,-0.05281096324324608,0.04264652356505394,-0.015363074839115143,-0.021217385306954384,-0.022199314087629318,-0.03128507360816002,0.0624406673014164,-0.04425749182701111,-0.004316197708249092,-0.023073380813002586,-0.0674435943365097,-0.006181145552545786,0.03505765274167061,-0.10687606781721115,0.01837458834052086,-0.012536793947219849,0.06054188311100006,0.03588392585515976,0.013046401552855968,0.03276928514242172,0.07438509911298752,0.04716812074184418,0.007551062386482954,-0.05172150954604149,-0.007146092597395182,0.016869666054844856,-0.0007531894370913506,-0.004263641778379679,0.026424113661050797,0.031449269503355026,-0.04844602197408676,0.010080411098897457,-0.05384843796491623,-0.008869948796927929,-0.021174881607294083,0.006844767834991217,0.06465157866477966,-0.011478266678750515,0.007454415783286095,0.033357031643390656,0.01299529243260622,0.015846362337470055,-0.0019173392793163657,-0.056125208735466,-0.007384409662336111,0.013878215104341507,-0.02172398567199707,-0.058899737894535065,0.012237608432769775,-0.0489361435174942,-0.023104775696992874,-0.013138886541128159,0.03196629509329796,0.005219508893787861,-0.010195479728281498,-0.018240945413708687,0.05374504625797272,0.007582738529890776,-0.046748869121074677,0.07430565357208252,0.015898261219263077,-0.013807713985443115,0.03167641907930374,-0.006845206022262573,0.007681483402848244,0.030239881947636604,-0.0057123457081615925,-0.012624073773622513,-0.006829674355685711,0.02654164470732212,-0.05510029196739197,-0.01431194320321083,0.05684148147702217,-0.010321584530174732,-0.023101452738046646,0.007279678247869015,-0.005371100269258022,-0.023540344089269638,0.040992435067892075,0.006211788393557072,-0.013566512614488602,0.0021408575121313334,-0.12923982739448547,-0.001414305530488491,-0.10830758512020111,-0.08137477934360504,-0.030324093997478485,-0.061370600014925,0.008314809761941433,0.04214867949485779,0.024433009326457977,-0.0003884966718032956,0.133650541305542,-0.03969601169228554,-0.04729596897959709,-0.009385192766785622,0.0026309953536838293,-0.1408897340297699,-0.0015886303735896945,0.042191360145807266,0.012732168659567833,-0.023268090561032295,-0.08273021131753922,0.08792512863874435,-0.0001994357444345951,-0.0036613130941987038,-0.03007526323199272,0.02193371020257473,-0.08920340240001678,-0.0009591034613549709,0.021183889359235764,0.028793875128030777,0.003888374427333474,-0.05300208926200867,0.05318114906549454,-0.011828904040157795,-0.03162844851613045,-0.02153807505965233,0.04444650933146477,0.05376626178622246,0.03284405916929245,-0.01580171100795269,-0.037561964243650436,-0.022295581176877022,-0.02902572974562645,-0.0035676180850714445,-0.015207327902317047,0.018828144297003746,-0.054195936769247055,0.03258365020155907,-0.030915511772036552,0.03648906573653221,0.02078508585691452,0.036699384450912476,-0.07973340153694153,-0.004077502992004156,-0.02482425794005394,-0.026905685663223267,-0.009242984466254711,0.005741008557379246,0.038269706070423126,0.06629671156406403,0.05444396287202835,-0.021948449313640594,0.02220521681010723,0.016788765788078308,-0.023232469335198402,-0.019393296912312508,0.015937156975269318,0.046379152685403824,0.03842424973845482,0.031100697815418243,0.04364509508013725,0.10633695125579834,-0.026553113013505936,0.05453689023852348,0.04321539029479027,-0.021326908841729164,-0.0008806390687823296,-0.014861874282360077,-0.013251306489109993,-0.03865713253617287,-0.03940424695611,0.032848626375198364,0.008487728424370289,-0.012651045806705952,0.054752081632614136,0.014031190425157547,0.04843008145689964,-0.0241868793964386,-0.036223869770765305,0.008904242888092995,-0.036388203501701355,-0.018157880753278732,-0.0024477823171764612,0.057596076279878616,0.0013454502914100885,-0.013057442381978035,-0.030912691727280617,-0.0017102460842579603,0.014977168291807175,0.005480992142111063,0.0639004185795784,-0.023542620241642,0.018023118376731873,0.030386829748749733,0.012704427354037762,0.03741521015763283,0.03409193456172943,-0.004990709945559502,0.013516027480363846,0.04842047393321991,-0.018606998026371002,0.04420432820916176,-0.024234004318714142,-0.04917605593800545,-0.01834530010819435,-0.041147731244564056,0.006367367226630449,0.031068293377757072,-0.023217124864459038,0.0003283626865595579,0.041576504707336426,-0.05675612762570381,0.021366694942116737,-0.02620188519358635,0.012156647630035877,-0.02088160067796707,0.0022934554144740105,-0.01542313490062952,-0.019847793504595757,0.017469914630055428,-0.01986098289489746,0.09026182442903519,-0.03808651491999626,0.08568383753299713,-0.017117129638791084,-0.004951957147568464,-0.03219417482614517,0.018727587535977364,0.00791346374899149,0.09850604832172394,0.010354449041187763,0.024190180003643036,0.03857327625155449,0.06060154363512993,-0.01196219865232706,0.011768760159611702,0.038674212992191315,0.00693676620721817,-0.0017713455017656088,0.014666534028947353,-0.000649469206109643,0.009323246777057648,-0.007738251239061356,0.060603588819503784,0.01622716523706913,-0.005254602525383234,-0.009921170771121979,0.001395310158841312,-0.0553676001727581,0.0016205321298912168,-0.07987640053033829,-0.00407227361574769,-0.06686916947364807,0.022692866623401642,0.011410270817577839,-0.011979401111602783,0.010264632292091846,0.033619124442338943,-0.01467965915799141,-0.025023361667990685,-0.040728237479925156,-0.029825937002897263,0.01677633821964264,-0.022112028673291206,0.004905051086097956,0.00024295650655403733,-0.015522944740951061,0.01809413731098175,0.01997128129005432,-0.023051608353853226,0.019293783232569695,-0.04199821501970291,-0.0463189072906971,0.026405105367302895,0.07194428890943527,0.02630261518061161,-0.0003135192673653364,-0.020545799285173416,0.001735521131195128,-0.007516446989029646,-0.01789797842502594,-0.02799351140856743,-0.010600167326629162,-0.02191777341067791,0.09005007147789001,0.006393626797944307,0.02730136550962925,0.021667921915650368,-0.02287299744784832,0.01766021177172661,0.010426126420497894,0.02429938316345215,0.006825991906225681,-0.020147031173110008,-0.013281634077429771,0.014609048143029213,0.02304137870669365,0.023346930742263794,-0.0012248901184648275,-0.03408277407288551,0.008886145427823067,0.04663757234811783,0.00888897106051445,0.024721505120396614,0.048999637365341187,-0.015209505334496498,0.09047111123800278,-0.00332660716958344,0.07008855789899826,-0.04053286463022232,0.0007775814738124609,0.005845966283231974,-0.005974391475319862,0.009380398318171501,0.011310077272355556,-0.03667760267853737,0.017240528017282486,-0.03060481883585453,-0.003945409785956144,-0.03699493780732155,-0.00988449901342392,-0.00039608890074305236,0.009431646205484867,0.01933692768216133,-0.0033824779093265533,-0.0009657922200858593,-0.03153638169169426,-0.014712031930685043,0.04216961935162544,0.00037479348247870803,0.019153567031025887,0.04832880571484566,-0.026977235451340675,0.03370143473148346,0.04447830468416214,-0.015181833878159523,-0.036197979003190994,-0.068693146109581,-0.04142789915204048,0.015893276780843735,-0.012871767394244671,-0.01718015782535076,0.016037624329328537,0.0637444257736206,0.00674561969935894,-0.0028155173640698195,0.025420457124710083,-0.008387339301407337,0.08710019290447235,-0.056151214987039566,-0.015486589632928371,-0.049119263887405396,-0.014199364930391312,0.002818306442350149,0.008277441374957561,0.023185579106211662,-0.041127003729343414,0.00874384306371212,-0.017325781285762787,-0.029969772323966026,0.03575965389609337,-0.046052347868680954,-0.01812392845749855,0.013085042126476765,0.013677861541509628,0.002631313866004348,0.06527315080165863,0.012126198038458824,-0.015131342224776745,0.009412387385964394,-0.01799771748483181,0.04775672405958176,-0.02743721753358841,-0.016045544296503067,0.05141324922442436,0.005377624649554491,-0.022042255848646164,0.02486812137067318,0.0070303394459187984,-0.06442975252866745,0.01986307092010975,0.02131487801671028,-0.03311773017048836,0.03315087780356407,0.010814188048243523,0.031823284924030304,-0.04755670949816704,-0.004531661048531532,0.01821928657591343,-0.03079507127404213,0.001125754090026021,-0.02812325395643711,-0.0151326609775424,-0.03360031545162201,0.013321652077138424,-0.008017201907932758,-0.0534847117960453,0.016434255987405777,0.008568789809942245,0.0033299557399004698,-0.03695651888847351,-0.014493012800812721,-0.03517209738492966,-0.011225050315260887,0.06700283288955688,0.00926138088107109,0.04900672659277916,-0.12132182717323303,0.0163051038980484,0.025187477469444275,-0.034369032829999924,0.004034675192087889,-0.03436044603586197,-0.006803987547755241,0.005201517604291439,-0.03804941475391388,-0.021446766331791878,0.0995061993598938,0.05056193843483925,-0.001674165134318173,-0.0548865869641304,0.010531401261687279,-0.06760742515325546,-0.0440233014523983,-0.02445739321410656,-0.009252984076738358,0.03394535928964615,-0.03176291286945343,0.05741465836763382,0.05940490961074829,0.010693580843508244,0.03182816132903099,-0.05123531073331833,0.00649381335824728,0.020116429775953293,0.0006948021473363042,-0.041522327810525894,0.01495356298983097,0.01224476844072342,0.03086257539689541,-0.04871564358472824,0.035799525678157806,0.03159967437386513,-0.030038371682167053,0.02737434022128582,-0.014316745102405548,0.004863587208092213,-0.03626521676778793,0.07510190457105637,-0.022413449361920357,0.0029693765100091696,-0.015833476558327675,-0.01973903179168701,0.04316592589020729,0.04079922288656235,0.012299460358917713,-0.02019224315881729,-0.0270554032176733,-0.026854833588004112,0.05120651796460152,0.05005963519215584,0.01730404421687126,0.004132906906306744,0.013547660782933235,-0.06768597662448883,0.001845486112870276,0.002168242819607258,-0.02509709820151329,-0.017722005024552345,-0.07594031095504761,-0.003172650234773755,-0.04123774170875549,-0.007033816073089838,0.02773883566260338,0.004943809472024441,-0.12120725214481354,-0.07688139379024506,0.01970861293375492,-0.012219546362757683,-7.420643105455674e-33,-0.051636792719364166,0.0027605504728853703,-0.037223003804683685,-0.05234409123659134,-0.033428966999053955,-0.062413688749074936,0.0249236561357975,-0.03762201592326164,-0.03485344722867012,-0.04531285911798477,-0.010872969403862953,0.010139530524611473,-0.005452901590615511,-0.01586800068616867,-0.009171315468847752,0.020455243065953255,0.027510758489370346,0.01622888818383217,0.010912328958511353,0.01887403428554535,-0.011195197701454163,0.02128453738987446,-0.040777720510959625,-0.04235934466123581,-0.043998006731271744,0.05612124875187874,0.016890471801161766,0.023008424788713455,-0.09242099523544312,0.03663534298539162,0.008559520356357098,-0.04144560918211937,-0.03450247272849083,0.01392500288784504,-0.03131973743438721,-0.023022882640361786,-0.015420669689774513,-0.028725218027830124,0.02090860903263092,-0.006414015777409077,0.0943257063627243,0.004012241959571838,0.02886531502008438,0.019407834857702255,-0.01856693997979164,-0.023990079760551453,0.028473131358623505,0.005818803329020739,-0.017908304929733276,0.0258930753916502,0.03665591776371002,0.0022780681028962135,-0.014733020216226578,0.04314712807536125,0.026006415486335754,0.05464676395058632,0.03160819411277771,0.03620447963476181,-0.017897365614771843,-0.013366665691137314,0.022753793746232986,-0.011116622015833855,0.019173095002770424,0.06255040317773819,0.05858254432678223,-0.02278580516576767,0.046590667217969894,0.0184792373329401,-0.0399891696870327,-0.023861682042479515,0.003202154068276286,0.028148384764790535,0.019324954599142075,-0.09456023573875427,-0.03595916926860809,-0.0006065730703994632,0.007266511209309101,0.002520332345739007,-0.0428883321583271,0.06444201618432999,-0.015330931171774864,-6.548929718519503e-7,0.000513405364472419,0.0009828299516811967,0.02965005673468113,-0.04624498263001442,-0.01345305796712637,-0.01630064845085144,-0.008429092355072498,0.012117567472159863,-0.02476164698600769,-0.0078032370656728745,-0.050463203340768814,-0.0010037767933681607,-0.039402883499860764,-0.030989112332463264,0.04219341650605202,-0.0003732030454557389,-0.0005016506765969098,-0.010403512977063656,0.016301486641168594,0.033060263842344284,-0.026782849803566933,0.03427496179938316,-0.004065601155161858,-0.00450741034001112,0.033050987869501114,-0.004869161639362574,-0.07135406881570816,0.01316092349588871,0.004178351256996393,0.03677970543503761,-0.037367258220911026,-0.009908599779009819,-0.0006525164935737848,0.010216282680630684,0.0035244531463831663,0.022919688373804092,0.011279664002358913,0.006782244425266981,-0.018250713124871254,-0.02905656397342682,-0.03010367415845394,0.005042563658207655,0.03256407007575035,-0.021064911037683487,-0.06599017232656479,0.004148231819272041,0.0662718117237091,0.006375946570187807,0.0008935617515817285,-0.010525934398174286,3.251105624713091e-7,-0.01646885648369789,0.023847274482250214,-0.056089285761117935,0.02398703061044216,0.019679434597492218,-0.0033457623794674873,-0.053782109171152115,-0.04876704886555672,0.0018299816874787211,-0.030873121693730354,0.01831953227519989,-0.02454419434070587,0.05609004199504852,0.035032693296670914,0.02110043168067932,-0.007853642106056213,-0.031301531940698624,-0.016370316967368126,-0.06330057978630066,0.0026617851108312607,0.0328231006860733,0.008970007300376892,0.029613172635436058,0.02782471291720867,0.03538059815764427,0.004203096032142639,-0.018619490787386894,-0.016893336549401283,0.00033872455242089927,-0.026417527347803116,0.03755531087517738,0.03226480260491371,-0.012755289673805237,-0.009248482063412666,-0.004469028674066067,0.009181918576359749,-0.056758813560009,-0.0016631638864055276,-0.0069347466342151165,0.053380995988845825,0.05506245419383049,-0.016490288078784943,-0.0462791807949543,-0.014866679906845093,0.030326049774885178,-0.034155867993831635,0.01187326293438673,0.005519705358892679,-0.01853923499584198,0.010025391355156898,-0.0006331689655780792,0.01423458568751812,0.01488331239670515,-0.03309979662299156,0.01796761527657509,-0.005396619439125061,-0.01635073497891426,0.07686322182416916,0.0034318622201681137,0.024422619491815567,0.0019200562965124846,-0.05881465971469879,-0.01687180995941162,0.07509221136569977,0.025913188233971596,0.00026270258240401745,-0.04635009542107582,4.892551669851329e-34,0.03333844617009163,-0.016410304233431816,0.02483636513352394,0.04601101949810982,0.03537432849407196,-0.02100287564098835,0.005034778267145157,0.005928983446210623,0.011912759393453598,-0.08319055289030075,-0.004226184915751219]'
SET
  @HasCustomProps_b43a9998 = 0
SET
  @HasCustomEvents_b43a9998 = 0
SET
  @RequiresData_b43a9998 = 1
SET
  @DependencyCount_b43a9998 = 4
SET
  @TechnicalDesignVectorEmbeddingModelID_b43a9998 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_b43a9998 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_b43a9998 = 0
SET
  @ID_b43a9998 = 'E7A334EA-53FD-40E4-A255-1DDA891D86B7'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_b43a9998,
  @Name = @Name_b43a9998,
  @Version = @Version_b43a9998,
  @VersionSequence = @VersionSequence_b43a9998,
  @Title = @Title_b43a9998,
  @Description = @Description_b43a9998,
  @Type = @Type_b43a9998,
  @Status = @Status_b43a9998,
  @DeveloperName = @DeveloperName_b43a9998,
  @DeveloperEmail = @DeveloperEmail_b43a9998,
  @DeveloperOrganization = @DeveloperOrganization_b43a9998,
  @SourceRegistryID = @SourceRegistryID_b43a9998,
  @ReplicatedAt = @ReplicatedAt_b43a9998,
  @LastSyncedAt = @LastSyncedAt_b43a9998,
  @Specification = @Specification_b43a9998,
  @FunctionalRequirements = @FunctionalRequirements_b43a9998,
  @TechnicalDesign = @TechnicalDesign_b43a9998,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_b43a9998,
  @TechnicalDesignVector = @TechnicalDesignVector_b43a9998,
  @HasCustomProps = @HasCustomProps_b43a9998,
  @HasCustomEvents = @HasCustomEvents_b43a9998,
  @RequiresData = @RequiresData_b43a9998,
  @DependencyCount = @DependencyCount_b43a9998,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_b43a9998,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_b43a9998,
  @HasRequiredCustomProps = @HasRequiredCustomProps_b43a9998,
  @ID = @ID_b43a9998;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_a244f22a NVARCHAR(MAX),
@Name_a244f22a NVARCHAR(500),
@Version_a244f22a NVARCHAR(50),
@VersionSequence_a244f22a INT,
@Title_a244f22a NVARCHAR(1000),
@Description_a244f22a NVARCHAR(MAX),
@Type_a244f22a NVARCHAR(255),
@Status_a244f22a NVARCHAR(50),
@DeveloperName_a244f22a NVARCHAR(255),
@DeveloperEmail_a244f22a NVARCHAR(255),
@DeveloperOrganization_a244f22a NVARCHAR(255),
@SourceRegistryID_a244f22a UNIQUEIDENTIFIER,
@ReplicatedAt_a244f22a DATETIMEOFFSET,
@LastSyncedAt_a244f22a DATETIMEOFFSET,
@Specification_a244f22a NVARCHAR(MAX),
@FunctionalRequirements_a244f22a NVARCHAR(MAX),
@TechnicalDesign_a244f22a NVARCHAR(MAX),
@FunctionalRequirementsVector_a244f22a NVARCHAR(MAX),
@TechnicalDesignVector_a244f22a NVARCHAR(MAX),
@HasCustomProps_a244f22a BIT,
@HasCustomEvents_a244f22a BIT,
@RequiresData_a244f22a BIT,
@DependencyCount_a244f22a INT,
@TechnicalDesignVectorEmbeddingModelID_a244f22a NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_a244f22a NVARCHAR(MAX),
@HasRequiredCustomProps_a244f22a BIT,
@ID_a244f22a UNIQUEIDENTIFIER
SET
  @Namespace_a244f22a = N'AI'
SET
  @Name_a244f22a = N'AIModelList'
SET
  @Version_a244f22a = N'1.0.0'
SET
  @VersionSequence_a244f22a = 1
SET
  @Title_a244f22a = N'AI Model List'
SET
  @Description_a244f22a = N'Displays AI models in grid or list view with vendor information and sorting'
SET
  @Type_a244f22a = N'Other'
SET
  @Status_a244f22a = N'Published'
SET
  @Specification_a244f22a = N'{"name":"AIModelList","title":"AI Model List","description":"Displays AI models in grid or list view with vendor information and sorting","type":"table","functionalRequirements":"Display models with vendor counts, support grid and list views, handle sorting and selection","technicalDesign":"","dataRequirements":{"mode":"views","entities":[{"name":"AI Models","description":"Core AI model definitions and specifications","displayFields":["ID","Name","APIName","Description","AIModelTypeID","InputTokenLimit","PowerRank","SpeedRank","CostRank","IsActive","__mj_CreatedAt","__mj_UpdatedAt"],"filterFields":["AIModelTypeID","IsActive"],"sortFields":["Name","InputTokenLimit","CostRank","IsActive","__mj_CreatedAt"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the AI model"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the AI model"},{"name":"APIName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"API identifier for the model"},{"name":"InputTokenLimit","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum input token limit"},{"name":"CostRank","sequence":6,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Relative cost ranking (1-5)"}],"usageContext":"Main list of AI models"},{"name":"MJ: AI Model Vendors","description":"Vendor associations for AI models","displayFields":["ID","ModelID","VendorID","TypeID","Model","Vendor","Type","Status","Priority","APIName","MaxInputTokens","MaxOutputTokens","SupportsStreaming","SupportsEffortLevel"],"filterFields":["ModelID","Type","Status"],"sortFields":["Vendor","Priority","Type"],"fieldMetadata":[{"name":"ModelID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to AI Model"},{"name":"Vendor","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor name"},{"name":"Type","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor type (Model Developer or Inference Provider)"}],"usageContext":"Vendor associations for models"},{"name":"AI Model Types","description":"Types/categories of AI models","displayFields":["ID","Name","Description"],"filterFields":[],"sortFields":["Name"],"usageContext":"Filter dropdown for model types"},{"name":"MJ: AI Prompt Runs","description":"Execution history for AI prompts","displayFields":["ID","PromptID","ModelID","StartTime","EndTime","TotalExecutionTime","InputTokens","OutputTokens","TotalTokens","Status","Error"],"filterFields":["ModelID","PromptID","Status"],"sortFields":["StartTime","TotalExecutionTime"],"usageContext":"Analytics and usage history"},{"name":"AI Prompts","description":"AI prompt definitions","displayFields":["ID","Name","Description","CategoryID"],"filterFields":[],"sortFields":["Name"],"usageContext":"Enrich prompt runs with names"}]},"properties":[{"name":"models","type":"array","required":true,"description":"Array of AI model objects to display"},{"name":"modelVendors","type":"array","required":true,"description":"Array of model vendor associations"},{"name":"viewMode","type":"string","required":true,"description":"Display mode - ''grid'' or ''list''"},{"name":"selectedModelId","type":"string","required":true,"description":"ID of the currently selected model"},{"name":"sortBy","type":"string","required":true,"description":"Field to sort by"},{"name":"sortDirection","type":"string","required":true,"description":"Sort direction - ''asc'' or ''desc''"}],"events":[{"name":"onSelectModel","description":"Fired when a model is selected","parameters":[{"name":"modelId","type":"string","description":"ID of the selected model"}]},{"name":"onSortChange","description":"Fired when sort criteria changes","parameters":[{"name":"sortBy","type":"string","description":"Field to sort by"},{"name":"sortDirection","type":"string","description":"Sort direction"}]}],"exampleUsage":"<AIModelList ... />","code":"function AIModelList({ \n  models, \n  modelVendors,\n  viewMode, \n  selectedModelId, \n  onSelectModel, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Get vendor info for a model\n  const getModelVendorInfo = useCallback((modelId) => {\n    const vendors = modelVendors.filter(v => v.ModelID === modelId);\n    const inferenceProviders = vendors.filter(v => v.Type === ''Inference Provider'');\n    const modelDeveloper = vendors.find(v => v.Type === ''Model Developer'');\n    \n    return {\n      inferenceProviders,\n      modelDeveloper,\n      vendorCount: vendors.length\n    };\n  }, [modelVendors]);\n  \n  // Handle sort column click\n  const handleSort = useCallback((field) => {\n    if (sortBy === field) {\n      onSortChange?.(field, sortDirection === ''asc'' ? ''desc'' : ''asc'');\n    } else {\n      onSortChange?.(field, ''asc'');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{\n        marginLeft: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {sortDirection === ''asc'' ? ''▲'' : ''▼''}\n      </span>\n    );\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render cost rank\n  const renderCostRank = (rank) => {\n    if (rank == null) return ''-'';\n    \n    const maxStars = 5;\n    const filledStars = Math.min(rank, maxStars);\n    \n    return (\n      <span style={{\n        color: styles.colors.warning || styles.colors.secondary,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {''$''.repeat(filledStars)}\n        <span style={{ opacity: 0.3 }}>\n          {''$''.repeat(maxStars - filledStars)}\n        </span>\n      </span>\n    );\n  };\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Grid view rendering\n  const renderGridView = () => (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fill, minmax(320px, 1fr))'',\n      gap: styles.spacing.lg\n    }}>\n      {models.map((model) => {\n        const vendorInfo = getModelVendorInfo(model.ID);\n        const isSelected = model.ID === selectedModelId;\n        \n        return (\n          <div\n            key={model.ID}\n            onClick={() => onSelectModel?.(model.ID)}\n            style={{\n              backgroundColor: styles.colors.surface,\n              borderRadius: getBorderRadius(''md''),\n              padding: styles.spacing.lg,\n              cursor: ''pointer'',\n              transition: ''all 0.2s'',\n              border: isSelected \n                ? `2px solid $' + '{styles.colors.primary}`\n                : `1px solid $' + '{styles.colors.border}`,\n              boxShadow: isSelected \n                ? `0 4px 12px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}`\n                : ''none''\n            }}\n            onMouseEnter={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.primary;\n                e.currentTarget.style.boxShadow = `0 2px 8px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.05)''}`;\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.border;\n                e.currentTarget.style.boxShadow = ''none'';\n              }\n            }}\n          >\n            {/* Model Header */}\n            <div style={{\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''flex-start'',\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{ flex: 1 }}>\n                <h3 style={{\n                  margin: 0,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {model.Name}\n                </h3>\n                {model.APIName && (\n                  <div style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    fontFamily: ''monospace''\n                  }}>\n                    {model.APIName}\n                  </div>\n                )}\n              </div>\n              {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n            </div>\n            \n            {/* Model Description */}\n            {model.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                marginBottom: styles.spacing.md,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                display: ''-webkit-box'',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: ''vertical''\n              }}>\n                {model.Description}\n              </div>\n            )}\n            \n            {/* Model Specs */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Input Token Limit\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Cost Rank\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || ''500''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </div>\n              </div>\n            </div>\n            \n            {/* Vendor Info */}\n            <div style={{\n              paddingTop: styles.spacing.md,\n              borderTop: `1px solid $' + '{styles.colors.border}`,\n              display: ''flex'',\n              gap: styles.spacing.md,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              {vendorInfo.modelDeveloper && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Dev:</span>\n                  <span style={{ \n                    color: styles.colors.text,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.modelDeveloper.Vendor}\n                  </span>\n                </div>\n              )}\n              {vendorInfo.inferenceProviders.length > 0 && (\n                <div style={{\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Providers:</span>\n                  <span style={{ \n                    color: styles.colors.primary,\n                    fontWeight: styles.typography.fontWeight?.medium || ''500''\n                  }}>\n                    {vendorInfo.inferenceProviders.length}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n  \n  // List view rendering\n  const renderListView = () => (\n    <div style={{\n      backgroundColor: styles.colors.surface,\n      borderRadius: getBorderRadius(''md''),\n      overflow: ''hidden''\n    }}>\n      <table style={{\n        width: ''100%'',\n        borderCollapse: ''collapse''\n      }}>\n        <thead>\n          <tr style={{\n            borderBottom: `2px solid $' + '{styles.colors.border}`\n          }}>\n            <th\n              onClick={() => handleSort(''Name'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Model Name\n              {renderSortIndicator(''Name'')}\n            </th>\n            <th\n              onClick={() => handleSort(''Status'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Status\n              {renderSortIndicator(''Status'')}\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Developer\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''left'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Providers\n            </th>\n            <th\n              onClick={() => handleSort(''InputTokenLimit'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''right'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Input Limit\n              {renderSortIndicator(''InputTokenLimit'')}\n            </th>\n            <th\n              onClick={() => handleSort(''CostRank'')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: ''center'',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                color: styles.colors.textSecondary,\n                cursor: ''pointer'',\n                userSelect: ''none''\n              }}\n            >\n              Cost\n              {renderSortIndicator(''CostRank'')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {models.map((model, index) => {\n            const vendorInfo = getModelVendorInfo(model.ID);\n            const isSelected = model.ID === selectedModelId;\n            \n            return (\n              <tr\n                key={model.ID}\n                onClick={() => onSelectModel?.(model.ID)}\n                style={{\n                  borderBottom: index < models.length - 1 \n                    ? `1px solid $' + '{styles.colors.borderLight || styles.colors.border}` \n                    : ''none'',\n                  backgroundColor: isSelected \n                    ? styles.colors.primaryLight || styles.colors.primary + ''10''\n                    : ''transparent'',\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = ''transparent'';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  <div>\n                    <div style={{\n                      fontWeight: isSelected \n                        ? (styles.typography.fontWeight?.semibold || ''600'')\n                        : (styles.typography.fontWeight?.regular || ''400''),\n                      color: styles.colors.text\n                    }}>\n                      {model.Name}\n                    </div>\n                    {model.APIName && (\n                      <div style={{\n                        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                        color: styles.colors.textSecondary,\n                        fontFamily: ''monospace''\n                      }}>\n                        {model.APIName}\n                      </div>\n                    )}\n                  </div>\n                </td>\n                <td style={{\n                  padding: styles.spacing.md\n                }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {vendorInfo.modelDeveloper?.Vendor || ''-''}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {vendorInfo.inferenceProviders.length > 0 ? (\n                    <div style={{\n                      display: ''flex'',\n                      gap: styles.spacing.xs,\n                      flexWrap: ''wrap''\n                    }}>\n                      {vendorInfo.inferenceProviders.slice(0, 3).map((provider, idx) => (\n                        <span\n                          key={idx}\n                          style={{\n                            padding: `2px $' + '{styles.spacing.xs}`,\n                            backgroundColor: styles.colors.primary + ''15'',\n                            color: styles.colors.primary,\n                            borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                          }}\n                        >\n                          {provider.Vendor}\n                        </span>\n                      ))}\n                      {vendorInfo.inferenceProviders.length > 3 && (\n                        <span style={{\n                          color: styles.colors.textSecondary,\n                          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                        }}>\n                          +{vendorInfo.inferenceProviders.length - 3}\n                        </span>\n                      )}\n                    </div>\n                  ) : (\n                    <span style={{ color: styles.colors.textSecondary }}>-</span>\n                  )}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''right'',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: ''center''\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n  \n  return viewMode === ''grid'' ? renderGridView() : renderListView();\n}","dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_a244f22a = N'Display models with vendor counts, support grid and list views, handle sorting and selection'
SET
  @TechnicalDesign_a244f22a = N''
SET
  @FunctionalRequirementsVector_a244f22a = N'[-0.025677412748336792,0.09018495678901672,-0.013501730747520924,-0.013573932461440563,0.04510435089468956,0.019654840230941772,0.05747755244374275,0.016570210456848145,0.04031169414520264,-0.03979209437966347,-0.06543534994125366,-0.03550177812576294,-0.011307062581181526,0.09018051624298096,0.0032516249921172857,-0.05892673134803772,-0.003576140385121107,0.006970769260078669,0.0034486434888094664,-0.012718499638140202,-0.006501779891550541,-0.0013671426568180323,0.013469909317791462,-0.026199808344244957,0.025855297222733498,-0.024401629343628883,-0.022677987813949585,0.029861444607377052,0.02419012226164341,-0.05111512914299965,-0.0489475280046463,0.036062970757484436,0.022577641531825066,-0.012249286286532879,0.0000014731649571331218,0.01010630838572979,-0.09251969307661057,0.04107081517577171,-0.042695362120866776,0.017657196149230003,0.08798445016145706,0.010833363980054855,0.034758925437927246,-0.018729202449321747,-0.04095704108476639,-0.00023801156203262508,-0.05849066749215126,0.08535393327474594,0.01907108537852764,-0.0015213963342830539,0.030759243294596672,-0.002301376312971115,0.01362659689038992,-0.02118426375091076,-0.05646464601159096,0.013520441018044949,-0.01799139566719532,0.016691580414772034,0.07628099620342255,0.00924668274819851,-0.02833596244454384,0.027598291635513306,-0.005730899050831795,-0.032726503908634186,0.02409556694328785,0.04173116013407707,0.0978267565369606,-0.024195173755288124,0.004077971447259188,-0.011700049042701721,0.013175200670957565,-0.01548090111464262,0.01283375546336174,-0.03644529730081558,-0.02225027047097683,0.019892357289791107,-0.028996696695685387,0.026323553174734116,0.01186279859393835,0.01564422994852066,0.009406335651874542,-0.027375971898436546,-0.015384531579911709,-0.013396472670137882,-0.018823811784386635,0.027167290449142456,0.02472502924501896,-0.04869840294122696,-0.07659298181533813,-0.03277333453297615,-0.0022169447038322687,-0.03259705379605293,0.025791402906179428,0.004096966702491045,-0.07941348850727081,-0.0050573041662573814,0.035174887627363205,-0.025351399555802345,0.03760657459497452,-0.004986728075891733,0.013243958353996277,0.010554984211921692,0.007861376740038395,-0.005395052023231983,0.03781895339488983,0.043194323778152466,-0.06309106200933456,0.03580294921994209,-0.05050037056207657,0.03858767822384834,-0.003392963670194149,0.0029498282819986343,0.026905912905931473,0.02457571215927601,-0.051566269248723984,0.001744647859595716,-0.025216734036803246,-0.013171297498047352,-0.015336437150835991,0.010959775187075138,0.06239776313304901,-0.007503146771341562,-0.009790074080228806,0.003724541747942567,0.029511883854866028,0.01081591285765171,-0.01921503059566021,-0.04371093958616257,-0.018175385892391205,0.005890164524316788,0.0015546994982287288,-0.028110072016716003,0.024614010006189346,-0.016331499442458153,-0.038837458938360214,0.007872113958001137,0.03067595325410366,0.04579644650220871,-0.01364307850599289,-0.012174217961728573,0.018896499648690224,0.0010493900626897812,0.0042716022580862045,0.03457791730761528,-0.014730965718626976,-0.013841498643159866,0.025787442922592163,-0.029461288824677467,-0.00718116108328104,-0.018590858206152916,0.015300113707780838,-0.011563683860003948,0.004781193099915981,0.00213434430770576,0.05272718146443367,0.007707870099693537,0.09301300346851349,-0.01109602302312851,0.04423103481531143,-0.005142388865351677,-0.007596573326736689,0.0064961472526192665,0.10193616151809692,-0.01554796751588583,-0.013258608058094978,0.00651781540364027,-0.0947452038526535,0.03002677671611309,-0.0014638068387284875,-0.009451082907617092,-0.0081058694049716,-0.00691207405179739,-0.03345314785838127,-0.0042916638776659966,0.03835871443152428,-0.01057678833603859,-0.01736711524426937,-0.001617324072867632,-0.038846664130687714,-0.03431126847863197,0.030691279098391533,0.0014324720250442624,0.03406628221273422,0.018079165369272232,0.0640118420124054,-0.07606880366802216,-0.05291692912578583,0.009582421742379665,-0.0132607975974679,0.006900199688971043,0.023129094392061234,-0.003885135520249605,-0.03554390370845795,0.018722038716077805,0.019186746329069138,0.02567402832210064,0.005690462421625853,-0.04543839022517204,0.016996271908283234,-0.042343467473983765,-0.06806210428476334,-0.015708552673459053,0.029690362513065338,0.011248784139752388,-0.008371949195861816,-0.01832270249724388,-0.08110839873552322,0.010056394152343273,-0.03205917403101921,0.015623435378074646,0.05391810089349747,-0.031964950263500214,-0.039555661380290985,0.024293886497616768,-0.013587305322289467,0.02609344571828842,-0.0022080978378653526,0.04996505007147789,-0.05548803508281708,-0.04895555600523949,-0.007115091662853956,-0.06377048790454865,-0.03793826326727867,0.011511343531310558,0.05018773302435875,0.06215589866042137,0.004600438289344311,-0.021141784265637398,0.021767020225524902,-0.012623735703527927,-0.0243009515106678,0.006280966103076935,0.07946812361478806,0.017164502292871475,0.042237672954797745,-0.031559400260448456,0.008110946044325829,0.029224473983049393,-0.025132235139608383,0.09713157266378403,0.01660054922103882,-0.00420380337163806,-0.011841831728816032,-0.02120758593082428,-0.026166534051299095,0.01547934114933014,-0.04298076033592224,0.00861765630543232,0.017249561846256256,-0.0022245394065976143,0.02698376215994358,-0.002923436462879181,0.09326302260160446,0.014224526472389698,-0.02155337482690811,-0.000454276567324996,-0.04679436609148979,-0.016346244141459465,-0.08417405188083649,0.0205934289842844,0.03408460319042206,0.005693952552974224,-0.0014041223330423236,-0.039328575134277344,-0.001102434704080224,0.001473578275181353,0.047833673655986786,-0.09743838012218475,-0.0008141599246300757,0.04103292524814606,-0.005772122181952,0.008269164711236954,-0.022442564368247986,-0.013620925135910511,-0.008147221989929676,0.012283390387892723,-0.021829912438988686,0.0540587492287159,-0.0005712224519811571,-0.0471368245780468,-0.0015106953214854002,-0.040118180215358734,0.0009713188046589494,0.026715204119682312,-0.018584616482257843,0.028239086270332336,0.05247906967997551,-0.013410326093435287,0.027508078143000603,-0.048687972128391266,-0.03444099798798561,0.014540295116603374,0.014655672013759613,0.033797357231378555,-0.021192412823438644,0.014166218228638172,-0.049117397516965866,0.09011000394821167,-0.006811355706304312,0.09703928232192993,0.013796927407383919,0.020967185497283936,-0.011913798749446869,0.010796753689646721,0.004828154109418392,-0.001605379511602223,0.037977010011672974,0.024320954456925392,-0.00585709884762764,0.017671208828687668,-0.019739791750907898,0.02363121509552002,0.06817768514156342,-0.015886466950178146,0.0178059209138155,0.013205642811954021,0.05082421377301216,0.015738854184746742,-0.004823184572160244,0.08646585047245026,-0.0021957193966954947,-0.004231219179928303,-0.0050626532174646854,-0.026776934042572975,-0.018082380294799805,0.004175076261162758,0.016397899016737938,0.01965382881462574,-0.05089368298649788,0.07005739212036133,0.01470474898815155,-0.08611341565847397,0.04343166947364807,-0.014961721375584602,-0.01727386936545372,-0.025944344699382782,-0.02157273143529892,0.01648222841322422,-0.04115099832415581,-0.017253290861845016,-0.01776079647243023,-0.03608385846018791,-0.05279520899057388,-0.022381961345672607,0.028842195868492126,0.009593099355697632,-0.004510475788265467,0.03720448166131973,-0.04736003279685974,-0.006529418285936117,0.045785725116729736,0.03268231451511383,0.012197944335639477,0.007635888177901506,0.004899820778518915,0.059012703597545624,-0.015259742736816406,0.010879529640078545,-0.014939271844923496,-0.039477307349443436,0.0003272825852036476,0.013455291278660297,0.03156290203332901,0.049462299793958664,0.0033130499068647623,0.02684285305440426,0.010190771892666817,-0.0074733407236635685,0.0037349725607782602,-0.023701561614871025,-0.04500134289264679,0.004981061909347773,0.022491946816444397,0.02190534956753254,-0.0063559021800756454,-0.04337507486343384,0.01584014482796192,0.0722576379776001,0.021205134689807892,0.01665169559419155,0.06477141380310059,0.05069646239280701,0.11551132053136826,0.01520868856459856,0.03513558581471443,-0.03123731166124344,0.002102662343531847,-0.011042139492928982,-0.032904185354709625,0.018413938581943512,-0.011859704740345478,-0.012689564377069473,0.05340386927127838,-0.04778270423412323,-0.002140400465577841,0.01800328865647316,-0.042114321142435074,0.05543011426925659,0.01059954334050417,0.015616221353411674,0.0010204220889136195,0.07496339082717896,0.016443537548184395,-0.038667820394039154,0.047878265380859375,-0.044805336743593216,0.05257900804281235,0.04810524359345436,-0.019141649827361107,-0.010147602297365665,-0.07272809743881226,0.05380115658044815,-0.07966788858175278,-0.05472945421934128,0.00809998158365488,-0.01565282791852951,-0.010783534497022629,0.012482255697250366,-0.04519525170326233,0.030196739360690117,0.015298033133149147,-0.01968805119395256,0.02081964537501335,0.0012179481564089656,0.018662648275494576,0.00024374175700359046,-0.05372444912791252,-0.012975133955478668,-0.033320970833301544,0.02433512546122074,0.029899829998612404,0.03877748176455498,-0.024766646325588226,0.005160489119589329,0.0572897344827652,-0.015155074186623096,0.004869190510362387,-0.058428917080163956,-0.02180963009595871,-0.020606504753232002,-0.003584505757316947,0.014287851750850677,0.07788895815610886,0.019296953454613686,-0.00530514121055603,-0.0032811968121677637,-0.02968338318169117,0.015444248914718628,-0.016741197556257248,0.006433289963752031,-0.0018298958893865347,-0.016713056713342667,-0.03568623214960098,0.009888246655464172,-0.06401535868644714,-0.03335551545023918,-0.10468914359807968,0.0527619943022728,-0.014389457181096077,-0.013644187711179256,0.05489969998598099,0.03167695552110672,-0.03614199534058571,0.006393600255250931,0.022485554218292236,-0.08857700973749161,-0.004884451162070036,-0.014742610044777393,0.01928301341831684,-0.04953864589333534,0.00517056230455637,-0.017015544697642326,0.00583034148439765,-0.027723131701350212,0.03511877357959747,0.016311855986714363,0.004623621702194214,-0.016128208488225937,0.028767015784978867,-0.02476353384554386,0.022674396634101868,0.03959226235747337,0.03339745104312897,-0.07427070289850235,-0.005223260726779699,0.013863694854080677,-0.06879868358373642,-0.04240211844444275,-0.05048494413495064,0.037163931876420975,0.005947019439190626,0.015526684001088142,-0.026766011491417885,0.028475254774093628,0.042012300342321396,0.05044162645936012,-0.05441635847091675,0.01621975190937519,-0.005166372284293175,-0.08921908587217331,-0.005655234679579735,0.0026793594006448984,-0.02822883613407612,-0.020234812051057816,0.03617778420448303,0.061675410717725754,0.02622651681303978,0.02544044516980648,-0.012586603872478008,-0.00046710908645763993,-0.02006714604794979,0.00330696115270257,-0.01981608383357525,-0.1218256950378418,-0.036253489553928375,0.07519247382879257,-0.06311730295419693,-0.014745301567018032,0.026391198858618736,-0.004867976065725088,0.019197789952158928,-0.0369681790471077,-0.000600219878833741,0.022061005234718323,0.05157908797264099,-0.04092221334576607,0.025254596024751663,-0.011430495418608189,-0.012577942572534084,0.04247625917196274,0.022164495661854744,-0.033949900418519974,0.007948257029056549,-0.042663510888814926,-0.008130469359457493,0.03996064141392708,0.02029663510620594,-0.04020221158862114,0.02975163608789444,0.030746914446353912,-0.06931907683610916,-0.01161637157201767,0.05941109359264374,-0.020961089059710503,-0.02775377221405506,-0.03997525945305824,-0.004801499657332897,0.003964044153690338,0.001069477992132306,0.09408539533615112,-0.027646483853459358,-0.04891787841916084,-0.05433071032166481,-0.025337208062410355,-0.0017011003801599145,-5.1972502748310276e-33,-0.06735266745090485,-0.06806983053684235,-0.02564181014895439,-0.07030140608549118,0.017764152958989143,-0.04756486043334007,0.03340926393866539,-0.03330071270465851,-0.025470959022641182,-0.013009363785386086,-0.004653355572372675,-0.003954362124204636,0.015170203521847725,-0.011229252442717552,-0.014937941916286945,0.02575356513261795,0.009374317713081837,-0.008913871832191944,-0.04141852632164955,0.001590605010278523,-0.03981510549783707,0.019788529723882675,-0.005025534890592098,-0.011538762599229813,-0.02082323655486107,0.017466740682721138,0.06319810450077057,-0.014286581426858902,-0.059080738574266434,0.0383722297847271,-0.01570512354373932,-0.011352612636983395,-0.0013400559546425939,0.011124711483716965,-0.006744151469320059,0.005469786003232002,-0.006256429478526115,0.030999941751360893,-0.00829243939369917,0.013023101724684238,0.0997663289308548,0.03411174938082695,-0.025175418704748154,0.016156954690814018,0.03387260437011719,0.008729508146643639,0.015801068395376205,-0.02501838281750679,-0.04629895091056824,0.016911333426833153,0.05169564113020897,0.012359573505818844,0.02781856805086136,0.02537546679377556,0.06968332082033157,0.007142036221921444,0.04163660854101181,0.052796803414821625,0.007298174314200878,-0.023077363148331642,0.04956325143575668,0.012653607875108719,0.028734760358929634,0.02844895049929619,0.01773158088326454,-0.030168095603585243,0.013353509828448296,0.014032005332410336,-0.015993593260645866,-0.084267258644104,-0.047677621245384216,0.02132653072476387,0.0037358568515628576,-0.055935654789209366,0.017304956912994385,0.04757136479020119,0.004936337471008301,-0.013094413094222546,-0.0889832004904747,0.012527989223599434,-0.011673717759549618,0.009908532723784447,0.036403097212314606,-0.000513910548761487,0.030127810314297676,-0.04634522646665573,-0.0004681734135374427,0.07770716398954391,0.010226850397884846,-0.009074261412024498,-0.05339102819561958,0.06032845377922058,-0.020391831174492836,0.02469847910106182,-0.12455733865499496,-0.02783997543156147,0.05004260689020157,-0.0009507446084171534,-0.008267583325505257,0.0439363457262516,0.06154022365808487,0.012645980343222618,-0.0266181081533432,0.015228250995278358,-0.04912587255239487,0.012795514427125454,0.02604004554450512,-0.031517378985881805,-0.004346620757132769,0.026055598631501198,0.016629930585622787,-0.04102340713143349,-0.00015939614968374372,0.06318562477827072,0.0076937382109463215,-0.00605153851211071,0.02175166644155979,-0.00608739722520113,0.013530329801142216,-0.06433932483196259,-0.011080073192715645,0.024840280413627625,-0.047031328082084656,-0.04446882754564285,0.025333192199468613,0.0004155671049375087,-0.01810469664633274,0.013142083771526814,0.02578292228281498,-0.005583513528108597,-0.013005215674638748,0.03710427135229111,2.1531461413815123e-7,0.032085854560136795,-0.044781643897295,-0.036880478262901306,-0.017414482310414314,0.021057777106761932,-0.0041832271963357925,-0.022411707788705826,0.01062839012593031,0.028607137501239777,-0.10025542974472046,0.0031981864012777805,0.002881671767681837,0.05897146835923195,0.03227771818637848,0.031376589089632034,-0.09671416133642197,0.029615705832839012,0.005142386071383953,-0.03992993012070656,-0.03361678123474121,0.013224512338638306,0.005219303071498871,0.0019751344807446003,0.04000028595328331,0.009938528761267662,0.035777438431978226,0.018192483112215996,-0.010485871694982052,0.08208944648504257,-0.025626083835959435,0.05162770673632622,-0.06714165955781937,-0.029338303953409195,0.015014945529401302,0.004038359969854355,0.002759820781648159,0.007608294486999512,0.0016365210758522153,0.012691441923379898,0.028707509860396385,0.04770546033978462,-0.025725677609443665,-0.018964778631925583,-0.025291791185736656,-0.017213376238942146,-0.058109577745199203,0.015080629847943783,0.06783556193113327,-0.05265557020902634,-0.011689743027091026,-0.006858494598418474,0.007014139089733362,0.005365344695746899,-0.013567028567194939,0.023861858993768692,-0.04249332472681999,0.013272973708808422,0.03717400133609772,-0.015582620166242123,-0.04362089931964874,-0.051761433482170105,-0.06542173773050308,-0.0024378877133131027,-0.022580252960324287,0.07059729844331741,0.03174695000052452,-0.03488156944513321,2.9426992674811573e-34,0.05265932157635689,0.01993422396481037,0.014108738861978054,0.12334857881069183,-0.001427435432560742,-0.025781545788049698,-0.02651325799524784,-0.045777443796396255,0.0012651131255552173,-0.06377459317445755,-0.015313447453081608]'
SET
  @HasCustomProps_a244f22a = 1
SET
  @HasCustomEvents_a244f22a = 1
SET
  @RequiresData_a244f22a = 0
SET
  @DependencyCount_a244f22a = 0
SET
  @FunctionalRequirementsVectorEmbeddingModelID_a244f22a = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_a244f22a = 1
SET
  @ID_a244f22a = '3E5B43DE-1F29-4268-8DBB-A5FA0CE56B70'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_a244f22a,
  @Name = @Name_a244f22a,
  @Version = @Version_a244f22a,
  @VersionSequence = @VersionSequence_a244f22a,
  @Title = @Title_a244f22a,
  @Description = @Description_a244f22a,
  @Type = @Type_a244f22a,
  @Status = @Status_a244f22a,
  @DeveloperName = @DeveloperName_a244f22a,
  @DeveloperEmail = @DeveloperEmail_a244f22a,
  @DeveloperOrganization = @DeveloperOrganization_a244f22a,
  @SourceRegistryID = @SourceRegistryID_a244f22a,
  @ReplicatedAt = @ReplicatedAt_a244f22a,
  @LastSyncedAt = @LastSyncedAt_a244f22a,
  @Specification = @Specification_a244f22a,
  @FunctionalRequirements = @FunctionalRequirements_a244f22a,
  @TechnicalDesign = @TechnicalDesign_a244f22a,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_a244f22a,
  @TechnicalDesignVector = @TechnicalDesignVector_a244f22a,
  @HasCustomProps = @HasCustomProps_a244f22a,
  @HasCustomEvents = @HasCustomEvents_a244f22a,
  @RequiresData = @RequiresData_a244f22a,
  @DependencyCount = @DependencyCount_a244f22a,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_a244f22a,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_a244f22a,
  @HasRequiredCustomProps = @HasRequiredCustomProps_a244f22a,
  @ID = @ID_a244f22a;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_c8635ab8 NVARCHAR(MAX),
@Name_c8635ab8 NVARCHAR(500),
@Version_c8635ab8 NVARCHAR(50),
@VersionSequence_c8635ab8 INT,
@Title_c8635ab8 NVARCHAR(1000),
@Description_c8635ab8 NVARCHAR(MAX),
@Type_c8635ab8 NVARCHAR(255),
@Status_c8635ab8 NVARCHAR(50),
@DeveloperName_c8635ab8 NVARCHAR(255),
@DeveloperEmail_c8635ab8 NVARCHAR(255),
@DeveloperOrganization_c8635ab8 NVARCHAR(255),
@SourceRegistryID_c8635ab8 UNIQUEIDENTIFIER,
@ReplicatedAt_c8635ab8 DATETIMEOFFSET,
@LastSyncedAt_c8635ab8 DATETIMEOFFSET,
@Specification_c8635ab8 NVARCHAR(MAX),
@FunctionalRequirements_c8635ab8 NVARCHAR(MAX),
@TechnicalDesign_c8635ab8 NVARCHAR(MAX),
@FunctionalRequirementsVector_c8635ab8 NVARCHAR(MAX),
@TechnicalDesignVector_c8635ab8 NVARCHAR(MAX),
@HasCustomProps_c8635ab8 BIT,
@HasCustomEvents_c8635ab8 BIT,
@RequiresData_c8635ab8 BIT,
@DependencyCount_c8635ab8 INT,
@TechnicalDesignVectorEmbeddingModelID_c8635ab8 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_c8635ab8 NVARCHAR(MAX),
@HasRequiredCustomProps_c8635ab8 BIT,
@ID_c8635ab8 UNIQUEIDENTIFIER
SET
  @Namespace_c8635ab8 = N'AI'
SET
  @Name_c8635ab8 = N'AIModelDetails'
SET
  @Version_c8635ab8 = N'1.0.0'
SET
  @VersionSequence_c8635ab8 = 1
SET
  @Title_c8635ab8 = N'AI Model Details'
SET
  @Description_c8635ab8 = N'Sliding details panel showing comprehensive model information, vendors, and usage statistics'
SET
  @Type_c8635ab8 = N'Other'
SET
  @Status_c8635ab8 = N'Published'
SET
  @Specification_c8635ab8 = N'{"name":"AIModelDetails","title":"AI Model Details","description":"Sliding details panel showing comprehensive model information, vendors, and usage statistics","type":"detail","functionalRequirements":"Show model specs, vendor associations grouped by type, usage statistics, and open record button","technicalDesign":"","dataRequirements":{"mode":"views","entities":[{"name":"AI Models","description":"Core AI model definitions and specifications","displayFields":["ID","Name","APIName","Description","AIModelTypeID","InputTokenLimit","PowerRank","SpeedRank","CostRank","IsActive","__mj_CreatedAt","__mj_UpdatedAt"],"filterFields":["AIModelTypeID","IsActive"],"sortFields":["Name","InputTokenLimit","CostRank","IsActive","__mj_CreatedAt"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the AI model"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the AI model"},{"name":"APIName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"API identifier for the model"},{"name":"InputTokenLimit","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum input token limit"},{"name":"CostRank","sequence":6,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Relative cost ranking (1-5)"}],"usageContext":"Main list of AI models"}]},"properties":[{"name":"model","type":"object","required":true,"description":"The selected AI model object"},{"name":"vendors","type":"array","required":true,"description":"Array of vendors associated with the model"},{"name":"promptRuns","type":"array","required":true,"description":"Array of prompt runs for this model"},{"name":"isOpen","type":"boolean","required":true,"description":"Whether the details panel is open"}],"events":[{"name":"onClose","description":"Fired when the details panel should close","parameters":[]},{"name":"onOpenRecord","description":"Fired when the open record button is clicked","parameters":[{"name":"modelName","type":"string","description":"Name of the model to open"}]}],"exampleUsage":"<AIModelDetails ... />","code":"function AIModelDetails({ \n  model, \n  vendors,\n  promptRuns,\n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === ''Escape'' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener(''keydown'', handleEscape);\n    return () => document.removeEventListener(''keydown'', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log(''AIModelDetails handleOpenRecord called'', { model, onOpenRecord });\n    if (model?.Name) {\n      console.log(''Calling onOpenRecord with model name:'', model.Name);\n      if (onOpenRecord) {\n        onOpenRecord(model.Name);\n      } else {\n        console.error(''onOpenRecord callback is not defined'');\n      }\n    } else {\n      console.error(''No model or model name available'');\n    }\n  }, [model, onOpenRecord]);\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return ''-'';\n    if (tokens >= 1000000) return `$' + '{(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `$' + '{(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      ''Active'': styles.colors.success || styles.colors.primary,\n      ''Inactive'': styles.colors.warning || styles.colors.secondary,\n      ''Deprecated'': styles.colors.error || styles.colors.secondary,\n      ''Preview'': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n        backgroundColor: color + ''15'',\n        color: color,\n        borderRadius: getBorderRadius(''sm''),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || ''500''\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render vendor type icon\n  const renderVendorTypeIcon = (type) => {\n    const icons = {\n      ''Model Developer'': ''🏢'',\n      ''Inference Provider'': ''🚀''\n    };\n    \n    return (\n      <span style={{\n        display: ''inline-block'',\n        marginRight: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.md\n      }}>\n        {icons[type] || ''📦''}\n      </span>\n    );\n  };\n  \n  // Calculate prompt statistics\n  const calculatePromptStats = useCallback(() => {\n    if (!promptRuns || promptRuns.length === 0) {\n      return {\n        totalRuns: 0,\n        successfulRuns: 0,\n        failedRuns: 0,\n        avgExecutionTime: 0,\n        totalTokens: 0,\n        uniquePrompts: 0\n      };\n    }\n    \n    const stats = {\n      totalRuns: promptRuns.length,\n      successfulRuns: promptRuns.filter(r => r.Status === ''Success'' || r.Status === ''Completed'').length,\n      failedRuns: promptRuns.filter(r => r.Status === ''Failed'' || r.Status === ''Error'').length,\n      avgExecutionTime: 0,\n      totalTokens: 0,\n      uniquePrompts: new Set(promptRuns.map(r => r.PromptID)).size\n    };\n    \n    const validTimes = promptRuns\n      .filter(r => r.TotalExecutionTime)\n      .map(r => r.TotalExecutionTime);\n    \n    if (validTimes.length > 0) {\n      stats.avgExecutionTime = validTimes.reduce((a, b) => a + b, 0) / validTimes.length;\n    }\n    \n    stats.totalTokens = promptRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return stats;\n  }, [promptRuns]);\n  \n  const stats = calculatePromptStats();\n  \n  // Group vendors by type\n  const vendorsByType = useMemo(() => {\n    const grouped = {\n      ''Model Developer'': [],\n      ''Inference Provider'': []\n    };\n    \n    vendors.forEach(v => {\n      if (grouped[v.Type]) {\n        grouped[v.Type].push(v);\n      }\n    });\n    \n    return grouped;\n  }, [vendors]);\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: ''fixed'',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n            zIndex: 99999,\n            opacity: isOpen ? 1 : 0,\n            transition: ''opacity 0.3s'',\n            pointerEvents: isOpen ? ''auto'' : ''none''\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: ''75px'',\n        right: 0,\n        bottom: 0,\n        width: ''520px'',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px $' + '{styles.colors.shadow || ''rgba(0, 0, 0, 0.1)''}` : ''none'',\n        transform: isOpen ? ''translateX(0)'' : ''translateX(100%)'',\n        transition: ''transform 0.3s ease-out'',\n        zIndex: 100000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        overflow: ''hidden''\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''flex-start''\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || ''700'',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {model?.Name || ''No Model Selected''}\n              </h2>\n              {model?.APIName && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: ''monospace''\n                }}>\n                  {model.APIName}\n                </div>\n              )}\n              {model?.IsActive !== undefined && (\n                <div style={{ marginTop: styles.spacing.sm }}>\n                  {renderStatusBadge(model.IsActive ? ''Active'' : ''Inactive'')}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: ''32px'',\n                height: ''32px'',\n                borderRadius: getBorderRadius(''sm''),\n                border: ''none'',\n                backgroundColor: ''transparent'',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                justifyContent: ''center'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              ✕\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: ''auto'',\n          padding: styles.spacing.lg\n        }}>\n          {model ? (\n            <>\n              {/* Model Description */}\n              {model.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius(''md''),\n                  borderLeft: `3px solid $' + '{styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {model.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Model Specifications */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Specifications\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Token Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Cost Rank\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.warning || styles.colors.secondary\n                    }}>\n                      {''$''.repeat(Math.min(model.CostRank || 0, 5))}\n                      <span style={{ opacity: 0.3 }}>\n                        {''$''.repeat(Math.max(0, 5 - (model.CostRank || 0)))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vendors Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Vendors ({vendors.length})\n                </h3>\n                \n                {/* Model Developer */}\n                {vendorsByType[''Model Developer''].length > 0 && (\n                  <div style={{ marginBottom: styles.spacing.md }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Model Developer'')}\n                      Model Developer\n                    </div>\n                    {vendorsByType[''Model Developer''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm,\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''center''\n                        }}\n                      >\n                        <div>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                            color: styles.colors.text\n                          }}>\n                            {vendor.Vendor}\n                          </div>\n                          {vendor.APIName && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: ''monospace''\n                            }}>\n                              API: {vendor.APIName}\n                            </div>\n                          )}\n                        </div>\n                        {renderStatusBadge(vendor.Status)}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Inference Providers */}\n                {vendorsByType[''Inference Provider''].length > 0 && (\n                  <div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon(''Inference Provider'')}\n                      Inference Providers\n                    </div>\n                    {vendorsByType[''Inference Provider''].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius(''sm''),\n                          marginBottom: styles.spacing.sm\n                        }}\n                      >\n                        <div style={{\n                          display: ''flex'',\n                          justifyContent: ''space-between'',\n                          alignItems: ''flex-start'',\n                          marginBottom: styles.spacing.sm\n                        }}>\n                          <div>\n                            <div style={{\n                              fontSize: styles.typography.fontSize.md,\n                              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                              color: styles.colors.text\n                            }}>\n                              {vendor.Vendor}\n                            </div>\n                            {vendor.APIName && (\n                              <div style={{\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                fontFamily: ''monospace''\n                              }}>\n                                API: {vendor.APIName}\n                              </div>\n                            )}\n                          </div>\n                          <div style={{\n                            display: ''flex'',\n                            gap: styles.spacing.xs,\n                            alignItems: ''center''\n                          }}>\n                            {vendor.Priority && (\n                              <span style={{\n                                padding: `2px $' + '{styles.spacing.xs}`,\n                                backgroundColor: styles.colors.info + ''15'',\n                                color: styles.colors.info || styles.colors.primary,\n                                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                              }}>\n                                Priority: {vendor.Priority}\n                              </span>\n                            )}\n                            {renderStatusBadge(vendor.Status)}\n                          </div>\n                        </div>\n                        \n                        {/* Vendor Capabilities */}\n                        <div style={{\n                          display: ''flex'',\n                          gap: styles.spacing.xs,\n                          flexWrap: ''wrap''\n                        }}>\n                          {vendor.SupportsStreaming && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              ✓ Streaming\n                            </span>\n                          )}\n                          {vendor.SupportsEffortLevel && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + ''15'',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              ✓ Effort Level\n                            </span>\n                          )}\n                          {vendor.MaxInputTokens && (\n                            <span style={{\n                              padding: `2px $' + '{styles.spacing.xs}`,\n                              backgroundColor: styles.colors.background,\n                              color: styles.colors.textSecondary,\n                              borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              Max: {formatTokens(vendor.MaxInputTokens)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Usage Statistics */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  Usage Statistics\n                </h3>\n                <div style={{\n                  display: ''grid'',\n                  gridTemplateColumns: ''repeat(2, 1fr)'',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Runs\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.totalRuns.toLocaleString()}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Success Rate\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: stats.totalRuns > 0 \n                        ? (stats.successfulRuns / stats.totalRuns >= 0.9 ? styles.colors.success : styles.colors.warning)\n                        : styles.colors.text\n                    }}>\n                      {stats.totalRuns > 0 \n                        ? `$' + '{((stats.successfulRuns / stats.totalRuns) * 100).toFixed(1)}%`\n                        : ''-''}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Unique Prompts\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {stats.uniquePrompts}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius(''sm'')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Tokens\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(stats.totalTokens)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: ''flex'',\n              flexDirection: ''column'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Model Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select a model from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {model && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Model Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}","dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_c8635ab8 = N'Show model specs, vendor associations grouped by type, usage statistics, and open record button'
SET
  @TechnicalDesign_c8635ab8 = N''
SET
  @FunctionalRequirementsVector_c8635ab8 = N'[-0.056755490601062775,0.08868589997291565,-0.009973113425076008,0.01854253001511097,0.03804602846503258,0.003977080341428518,0.07583199441432953,0.010749482549726963,-0.004247814416885376,-0.08052728325128555,-0.05620964989066124,-0.011022905819118023,0.012023265473544598,0.0892704501748085,0.03081449307501316,-0.0597689189016819,0.019616544246673584,0.00995687860995531,-0.005381172522902489,0.03673244267702103,0.01124795712530613,-0.019122201949357986,0.004794182721525431,0.007718497421592474,-0.013429327867925167,-0.023335622623562813,0.003430621698498726,-0.013009943999350071,0.015162286348640919,-0.05210903659462929,-0.00006045775080565363,0.05455945432186127,-0.029230298474431038,0.005358006805181503,0.000001418052988810814,-0.014770641922950745,-0.06863407790660858,0.059325192123651505,-0.017459355294704437,0.09739595651626587,0.041121307760477066,0.06381184607744217,0.04512101784348488,0.020305335521697998,-0.0051225717179477215,-0.0731533095240593,-0.04111365228891373,-0.006917479448020458,-0.04686707630753517,-0.030775710940361023,0.02629789710044861,0.019035186618566513,-0.026696283370256424,-0.04930393770337105,0.013775422237813473,0.03143678978085518,-0.04542149603366852,-0.022482765838503838,0.03517808020114899,-0.0004382114566396922,-0.02478097938001156,0.0027038336265832186,0.010137180797755718,0.020206285640597343,0.07422336935997009,0.040524229407310486,0.015425172634422779,0.016808366402983665,0.0290019940584898,0.06301282346248627,0.10104585438966751,0.03076448105275631,-0.0021072428207844496,-0.021871857345104218,-0.025520864874124527,-0.03968382999300957,-0.004231042228639126,-0.0057678548619151115,0.005548411048948765,0.0000445793048129417,0.0024571209214627743,0.004921405576169491,-0.03791937232017517,-0.005193009506911039,-0.06575413048267365,-0.04573257267475128,-0.005309474654495716,0.01181146502494812,-0.018013689666986465,-0.06660360097885132,0.01258888654410839,-0.0038345609791576862,-0.04413583502173424,-0.01944616809487343,-0.07023393362760544,0.0007394563290290534,0.05229432135820389,-0.0048079234547913074,0.06171407178044319,0.022601677104830742,0.012324768118560314,0.03475465998053551,-0.0382843017578125,0.011815047822892666,0.03570593520998955,0.03133711963891983,-0.01866058073937893,-0.007779261562973261,0.02457938715815544,0.04811824485659599,0.013904746621847153,0.027219630777835846,0.020390015095472336,0.003214431693777442,-0.05023167282342911,0.033528078347444534,-0.008969338610768318,-0.007025605067610741,-0.01754836179316044,-0.009444723837077618,0.0525512620806694,0.002949031535536051,-0.012367979623377323,-0.019292626529932022,0.0060396152548491955,-0.021107709035277367,-0.0035064523108303547,-0.016741232946515083,-0.020909816026687622,-0.017162881791591644,-0.026011401787400246,-0.03688029944896698,0.0035075549967586994,-0.004679905250668526,-0.006654829252511263,0.00940192211419344,0.020739486441016197,0.006309282034635544,-0.023348934948444366,-0.036249980330467224,0.03693009167909622,-0.026791544631123543,-0.04033620283007622,0.04195578768849373,0.038684308528900146,-0.013129361905157566,0.0011033647460862994,-0.021852420642971992,-0.014778087846934795,-0.027446281164884567,0.0033574362751096487,-0.007235594093799591,-0.02103469707071781,0.000566353730391711,-0.007474967278540134,-0.027982255443930626,-0.011804347857832909,-0.04015587270259857,0.008459235541522503,0.008818477392196655,-0.020890092477202415,0.014784037135541439,0.06805846095085144,-0.007535150740295649,-0.010124927386641502,0.006409155670553446,-0.07696758210659027,0.010496006347239017,-0.022081919014453888,-0.054534509778022766,-0.039574164897203445,-0.022939365357160568,-0.0029650735668838024,0.002682595979422331,-0.011257067322731018,-0.019881708547472954,0.06895485520362854,0.0033710303250700235,-0.019315341487526894,0.008330273441970348,0.07710698246955872,-0.07658614963293076,0.004504322074353695,-0.00569016532972455,0.0006740046082995832,0.016350477933883667,-0.026976145803928375,0.0720570981502533,-0.007834474556148052,-0.009446169249713421,-0.02249358594417572,0.009188195690512657,-0.018523747101426125,0.011228878051042557,0.01976027712225914,0.028361644595861435,0.011819303035736084,-0.030466211959719658,0.06111776456236839,0.04030527547001839,-0.049791835248470306,-0.030801882967352867,0.06139064207673073,0.002276384038850665,0.025286855176091194,-0.01565977931022644,-0.025413503870368004,-0.02139337733387947,-0.04707246273756027,0.02555527165532112,0.049357932060956955,-0.020010029897093773,0.006573912221938372,0.029871772974729538,-0.031138597056269646,0.008510229177772999,0.02072525955736637,0.0384565144777298,-0.07514192909002304,-0.0260865930467844,0.015168569050729275,-0.09006524085998535,0.006708890665322542,0.0002715312584768981,0.05690152943134308,0.033683497458696365,0.058883171528577805,-0.001164463348686695,0.021083131432533264,0.014338322915136814,-0.011359969154000282,0.030895842239260674,0.026098813861608505,0.021401960402727127,0.039208296686410904,0.007891974411904812,0.03968602791428566,0.040935713797807693,-0.05282394587993622,0.030233297497034073,0.015357187949120998,-0.10089515894651413,-0.017923276871442795,-0.008347887545824051,-0.034296706318855286,-0.013779290951788425,0.058859799057245255,0.01044522412121296,0.024656759575009346,-0.0056435721926391125,0.0036272848956286907,0.011874663643538952,0.09758684039115906,0.018220461905002594,-0.04312920197844505,0.05512014403939247,-0.054081130772829056,-0.0071706692688167095,-0.03375830128788948,0.052128326147794724,0.010009306482970715,-0.017475705593824387,0.005498948507010937,0.0020287514198571444,-0.019146014004945755,-0.009764976799488068,0.027222340926527977,-0.11724234372377396,0.020152537152171135,0.014192835427820683,0.0038438423071056604,-0.00015943575999699533,0.02815060503780842,-0.03998353332281113,0.010355045087635517,0.03342830017209053,-0.032738834619522095,-0.007443611044436693,0.027575412765145302,-0.02242322266101837,0.0072166407480835915,-0.035705436021089554,-0.01815057173371315,0.04033809155225754,-0.03833736851811409,0.008764664642512798,0.011162882670760155,-0.014703837223351002,0.023658370599150658,-0.022575879469513893,0.015980303287506104,-0.027659591287374496,0.004405444487929344,0.011577820405364037,0.0002568583295214921,0.039536286145448685,0.015122768469154835,0.0944683775305748,0.0006590603734366596,0.12235405296087265,0.013354343362152576,0.056607432663440704,-0.030588282272219658,0.026805629953742027,-0.0026446899864822626,0.04534430801868439,0.03853790834546089,-0.0047634015791118145,0.016034550964832306,0.03551638126373291,0.022656230255961418,0.023335963487625122,0.051239755004644394,-0.0440768338739872,0.022796913981437683,-0.01155204139649868,0.011928766034543514,-0.009872718714177608,0.02738414704799652,0.05510295182466507,0.007721433416008949,-0.009612854570150375,-0.04543670639395714,0.01750926859676838,0.006592580582946539,0.014919792301952839,0.011543144471943378,-0.020449476316571236,-0.006349353585392237,0.025467973202466965,0.036884695291519165,-0.016540076583623886,-0.0004981594393029809,0.003032815409824252,-0.01772509701550007,0.005275762639939785,-0.03165610507130623,0.041912056505680084,-0.002707224804908037,-0.01911158487200737,0.020393675193190575,-0.001573146553710103,-0.021677667275071144,-0.033421698957681656,0.04176986217498779,-0.02431849204003811,-0.0181764867156744,-0.0160903949290514,-0.06982778757810593,-0.004612648859620094,0.04482453688979149,0.029687009751796722,0.0076003666035830975,-0.02690453641116619,0.018548915162682533,0.02361791953444481,0.011605488136410713,-0.0750032365322113,-0.004953608848154545,-0.05511568486690521,-0.005132094491273165,0.024589214473962784,0.03910483047366142,0.07989347726106644,-0.03733242675662041,-0.03335069864988327,-0.06450205296278,0.016534700989723206,0.010050502605736256,-0.017529752105474472,-0.03939446434378624,0.034472350031137466,0.06628914177417755,0.042664457112550735,0.000918016245122999,-0.05790677294135094,-0.0007114912732504308,0.08731995522975922,0.0395842008292675,0.0016615013591945171,0.04735628142952919,0.014803681522607803,0.07618215680122375,-0.04442039877176285,0.040650948882102966,-0.0013756412081420422,0.027972305193543434,-0.008230762556195259,0.046733491122722626,-0.035754673182964325,0.011977274902164936,-0.04380431026220322,0.02691914699971676,-0.02888326533138752,0.0075924936681985855,-0.06497428566217422,-0.032591547816991806,-0.009549640119075775,-0.006398926954716444,-0.009760246612131596,0.015541045926511288,0.03361191228032112,-0.024230947718024254,-0.006263392977416515,0.035764195024967194,0.022548429667949677,-0.008002927526831627,0.025684280321002007,0.018015634268522263,0.00671723997220397,-0.005878820549696684,0.04983753338456154,-0.013107173144817352,-0.0050543686375021935,0.047006625682115555,-0.02991991676390171,0.03904062509536743,0.003951618913561106,0.004210613202303648,0.043962880969047546,0.030609888955950737,-0.029768580570816994,0.022786349058151245,0.00814040470868349,0.027789406478405,-0.07714543491601944,-0.05535276234149933,-0.03206523135304451,-0.03242587298154831,0.006439141929149628,0.03154239431023598,0.06811007112264633,-0.014965257607400417,-0.022821743041276932,0.06934118270874023,0.0416533388197422,0.006890696007758379,-0.07885415852069855,-0.03643287718296051,0.050156671553850174,-0.002503547817468643,0.037207238376140594,0.04052485525608063,-0.03595810756087303,-0.0034367884509265423,0.04349318891763687,0.00262927426956594,-0.01542434561997652,0.06244594603776932,-0.0013173009501770139,-0.0008958354010246694,-0.018643511459231377,-0.0479961559176445,0.047619227319955826,-0.039902087301015854,-0.031352587044239044,-0.04567260295152664,-0.01092915516346693,-0.05852619186043739,-0.015706727281212807,-0.06210046634078026,0.03278309479355812,0.001162989647127688,-0.016497068107128143,0.009439894929528236,-0.03881143406033516,-0.00234628701582551,-0.03726626932621002,0.025656577199697495,-0.056761499494314194,-0.017985690385103226,-0.0442502424120903,-0.008872391656041145,-0.0010578206274658442,-0.0019343494204804301,-0.00942044984549284,-0.059902749955654144,-0.038180477917194366,-0.03495730087161064,-0.015228292904794216,-0.02103566937148571,0.026166308671236038,0.05430849269032478,-0.07788027822971344,-0.039773330092430115,-0.02212030254304409,-0.017660649493336678,0.01654270477592945,0.0023858395870774984,0.03832158073782921,-0.01519545167684555,-0.06563091278076172,-0.035905513912439346,-0.012744216248393059,0.011735508218407631,0.036884330213069916,-0.031127383932471275,0.0002649695670697838,-0.052606359124183655,-0.13504934310913086,0.015331445261836052,-0.028134355321526527,0.004559356719255447,0.006194633431732655,-0.0015302262036129832,0.047860678285360336,0.022412031888961792,0.01469639502465725,-0.03177618980407715,0.031478941440582275,0.0048478757962584496,0.012543600983917713,-0.017169279977679253,-0.04445773363113403,0.01097823679447174,0.035026464611291885,-0.10735511034727097,0.001577791408635676,0.0002662781625986099,0.005238091107457876,0.015159367583692074,0.011904404498636723,0.02086208574473858,-0.023059291765093803,0.06008431315422058,-0.005294981878250837,0.034826040267944336,0.004040404688566923,0.0185098797082901,0.012990385293960571,0.014864436350762844,0.009293635375797749,-0.0026586493477225304,-0.035853419452905655,-0.013721894472837448,0.06012679636478424,0.05307673662900925,-0.039880696684122086,-0.01698588952422142,0.034327637404203415,-0.08118357509374619,0.015536575578153133,0.032897330820560455,-0.04749506339430809,-0.04534229263663292,-0.006082622800022364,-0.03798489272594452,0.029651343822479248,0.004979082848876715,0.006972969975322485,0.0016062904614955187,-0.07705613225698471,-0.06689339876174927,-0.015185571275651455,0.006630270276218653,-5.3510850164712326e-33,-0.005233765579760075,-0.03752637654542923,-0.060743894428014755,-0.11066584289073944,0.01995551772415638,0.010368280112743378,0.045985832810401917,-0.018530450761318207,-0.04815243184566498,-0.019789498299360275,-0.036521416157484055,-0.00587638933211565,-0.005396045278757811,0.0004097794881090522,-0.0023864470422267914,0.03647381439805031,0.00937991589307785,-0.003368005156517029,-0.0053007095120847225,0.033185917884111404,-0.04460657387971878,-0.008849291130900383,0.00005781918662250973,-0.07118359953165054,-0.018664691597223282,0.035327885299921036,0.01934622973203659,0.015856100246310234,-0.028029100969433784,0.04677753522992134,-0.03736511617898941,-0.029974423348903656,-0.004515207372605801,0.06141899898648262,-0.02864912711083889,-0.022729724645614624,0.018887639045715332,0.017499137669801712,0.0028401354793459177,-0.032884955406188965,0.0991591289639473,0.016881383955478668,-0.04411139339208603,0.020119663327932358,0.026385677978396416,-0.07396270334720612,0.016839267686009407,0.020822832360863686,-0.01532069779932499,0.013950763270258904,0.022332653403282166,0.01457125786691904,0.0015450335340574384,0.04901041090488434,-0.033985935151576996,0.01236990187317133,0.016327226534485817,0.009468410164117813,0.012937736697494984,0.0024829155299812555,0.0725603923201561,-0.031013449653983116,0.018188992515206337,0.007511646021157503,0.05521869659423828,-0.03000546246767044,-0.005055020097643137,0.0537954606115818,-0.022820545360445976,-0.09410405904054642,-0.018246110528707504,0.05098075419664383,-0.057685717940330505,-0.07031324505805969,0.019195936620235443,0.014872292056679726,0.05409788712859154,0.010260755196213722,-0.004042021930217743,-0.0006443038582801819,0.008134906180202961,0.016073087230324745,-0.08573516458272934,0.013797956518828869,0.0045806365087628365,0.01636812649667263,-0.019709020853042603,0.015195484273135662,0.02082168310880661,-0.00722573371604085,-0.029401665553450584,-0.034832753241062164,-0.03381207957863808,0.027352239936590195,-0.05150691419839859,0.036370642483234406,0.07556335628032684,0.03216135874390602,-0.02706729806959629,-0.02003888227045536,-0.0038173343054950237,0.028973335400223732,0.029650144279003143,0.06411749869585037,-0.029541263356804848,-0.001153291086666286,0.0010991786839440465,-0.009008304215967655,-0.03230603411793709,0.011473877355456352,-0.005733191501349211,-0.05550587177276611,0.0007864817162044346,-0.030455701053142548,0.012172412127256393,0.039121951907873154,-0.00355585478246212,0.05337153375148773,-0.022336293011903763,-0.01610545441508293,-0.01961825229227543,-0.012225843966007233,-0.03114178031682968,0.010644977912306786,0.05744335800409317,-0.044758379459381104,-0.03507965803146362,-0.06066453456878662,0.09219616651535034,0.03828679397702217,-0.016548002138733864,-0.009015478193759918,2.2420378797960439e-7,0.01436480600386858,-0.03867954760789871,-0.02452298440039158,0.013249711133539677,0.025211315602064133,0.012693030759692192,0.05737605690956116,0.008510801941156387,0.02981150895357132,-0.08747470378875732,0.031734444200992584,0.04731721803545952,0.026793742552399635,0.06433816999197006,0.04496388882398605,-0.055531181395053864,0.06053352728486061,-0.029098721221089363,-0.08862043917179108,-0.006798533257097006,0.03153357282280922,0.013649076223373413,0.007588013540953398,0.021646015346050262,0.01460715290158987,0.003837479976937175,-0.008857057429850101,-0.028002390637993813,-0.02793509140610695,0.03505232185125351,0.06131304055452347,0.00036725011887028813,-0.027462897822260857,0.03644761070609093,0.020211083814501762,0.0033287988044321537,-0.05314486101269722,-0.03835632652044296,0.0010268493788316846,0.009906723164021969,0.0640597864985466,-0.03586906939744949,-0.03903806954622269,0.018238414078950882,0.0060480739921331406,0.0016788281500339508,0.017444327473640442,0.04051227122545242,0.011116528883576393,0.008021576330065727,0.012267817743122578,0.0023380820639431477,0.04594666510820389,-0.019410118460655212,-0.010392269119620323,-0.05395610257983208,-0.022218966856598854,0.02321707084774971,-0.013488157652318478,-0.033655133098363876,-0.020141353830695152,-0.021006537601351738,0.025658564642071724,0.0669090747833252,0.08894321322441101,-0.029102107509970665,-0.059826720505952835,3.130208065181582e-34,0.0016775932163000107,0.008043915033340454,0.02897854521870613,0.09955894947052002,0.06977624446153641,-0.00609467551112175,-0.03270183503627777,-0.017901960760354996,-0.0013376526767387986,-0.10482659190893173,-0.02720801532268524]'
SET
  @HasCustomProps_c8635ab8 = 1
SET
  @HasCustomEvents_c8635ab8 = 1
SET
  @RequiresData_c8635ab8 = 0
SET
  @DependencyCount_c8635ab8 = 0
SET
  @FunctionalRequirementsVectorEmbeddingModelID_c8635ab8 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_c8635ab8 = 1
SET
  @ID_c8635ab8 = '7B36D078-5B69-47EC-BDFB-D119524116F6'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_c8635ab8,
  @Name = @Name_c8635ab8,
  @Version = @Version_c8635ab8,
  @VersionSequence = @VersionSequence_c8635ab8,
  @Title = @Title_c8635ab8,
  @Description = @Description_c8635ab8,
  @Type = @Type_c8635ab8,
  @Status = @Status_c8635ab8,
  @DeveloperName = @DeveloperName_c8635ab8,
  @DeveloperEmail = @DeveloperEmail_c8635ab8,
  @DeveloperOrganization = @DeveloperOrganization_c8635ab8,
  @SourceRegistryID = @SourceRegistryID_c8635ab8,
  @ReplicatedAt = @ReplicatedAt_c8635ab8,
  @LastSyncedAt = @LastSyncedAt_c8635ab8,
  @Specification = @Specification_c8635ab8,
  @FunctionalRequirements = @FunctionalRequirements_c8635ab8,
  @TechnicalDesign = @TechnicalDesign_c8635ab8,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_c8635ab8,
  @TechnicalDesignVector = @TechnicalDesignVector_c8635ab8,
  @HasCustomProps = @HasCustomProps_c8635ab8,
  @HasCustomEvents = @HasCustomEvents_c8635ab8,
  @RequiresData = @RequiresData_c8635ab8,
  @DependencyCount = @DependencyCount_c8635ab8,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_c8635ab8,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_c8635ab8,
  @HasRequiredCustomProps = @HasRequiredCustomProps_c8635ab8,
  @ID = @ID_c8635ab8;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_9c15e277 NVARCHAR(MAX),
@Name_9c15e277 NVARCHAR(500),
@Version_9c15e277 NVARCHAR(50),
@VersionSequence_9c15e277 INT,
@Title_9c15e277 NVARCHAR(1000),
@Description_9c15e277 NVARCHAR(MAX),
@Type_9c15e277 NVARCHAR(255),
@Status_9c15e277 NVARCHAR(50),
@DeveloperName_9c15e277 NVARCHAR(255),
@DeveloperEmail_9c15e277 NVARCHAR(255),
@DeveloperOrganization_9c15e277 NVARCHAR(255),
@SourceRegistryID_9c15e277 UNIQUEIDENTIFIER,
@ReplicatedAt_9c15e277 DATETIMEOFFSET,
@LastSyncedAt_9c15e277 DATETIMEOFFSET,
@Specification_9c15e277 NVARCHAR(MAX),
@FunctionalRequirements_9c15e277 NVARCHAR(MAX),
@TechnicalDesign_9c15e277 NVARCHAR(MAX),
@FunctionalRequirementsVector_9c15e277 NVARCHAR(MAX),
@TechnicalDesignVector_9c15e277 NVARCHAR(MAX),
@HasCustomProps_9c15e277 BIT,
@HasCustomEvents_9c15e277 BIT,
@RequiresData_9c15e277 BIT,
@DependencyCount_9c15e277 INT,
@TechnicalDesignVectorEmbeddingModelID_9c15e277 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_9c15e277 NVARCHAR(MAX),
@HasRequiredCustomProps_9c15e277 BIT,
@ID_9c15e277 UNIQUEIDENTIFIER
SET
  @Namespace_9c15e277 = N'AI'
SET
  @Name_9c15e277 = N'AIModelFilter'
SET
  @Version_9c15e277 = N'1.0.0'
SET
  @VersionSequence_9c15e277 = 1
SET
  @Title_9c15e277 = N'AI Model Filter'
SET
  @Description_9c15e277 = N'Collapsible filter panel for filtering models by type, status, developer, and provider'
SET
  @Type_9c15e277 = N'Other'
SET
  @Status_9c15e277 = N'Published'
SET
  @Specification_9c15e277 = N'{"name":"AIModelFilter","title":"AI Model Filter","description":"Collapsible filter panel for filtering models by type, status, developer, and provider","type":"form","functionalRequirements":"Provide filters for model type, status, developer, and provider with active filter indicators","dataRequirements":{"mode":"views","description":"Receives filter options derived from AI model entities","entities":[{"name":"AI Model Types","description":"Model type options for filtering","displayFields":["ID","Name","Description"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Populates model type dropdown filter"},{"name":"AI Vendors","description":"Vendor options for filtering","displayFields":["ID","Name"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Populates vendor dropdown filters"}],"queries":[]},"technicalDesign":"","properties":[{"name":"filters","type":"{modelType?: string, status?: string, developer?: string, provider?: string}","required":true,"description":"Current filter state object"},{"name":"modelTypes","type":"Array<{ID: string, Name: string, Description?: string}>","required":true,"description":"Array of available model types for filtering"},{"name":"vendors","type":"Array<{ID: string, Name: string, Type?: string}>","required":true,"description":"Array of available vendors for filtering"},{"name":"isCollapsed","type":"boolean","required":true,"description":"Whether the filter panel is collapsed"}],"events":[{"name":"onFilterChange","description":"Fired when filters are changed","parameters":[{"name":"filters","type":"object","description":"New filter state"}]},{"name":"onToggleCollapse","description":"Fired when the collapse state should toggle","parameters":[]}],"exampleUsage":"<AIModelFilter ... />","code":"function AIModelFilter({ \n  filters, \n  onFilterChange, \n  modelTypes,\n  vendors,\n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle model type filter change\n  const handleModelTypeChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      modelType: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle developer filter change\n  const handleDeveloperChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      developer: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle inference provider filter change\n  const handleProviderChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      provider: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle status filter change\n  const handleStatusChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      isActive: e.target.value === '''' ? undefined : e.target.value === ''true''\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  // Get unique developers and providers\n  const developers = useMemo(() => {\n    // Use all vendors for now since we''ll filter properly in the parent\n    return vendors.map(v => v.Name).filter(Boolean);\n  }, [vendors]);\n  \n  const providers = useMemo(() => {\n    // Use all vendors for now since we''ll filter properly in the parent  \n    return vendors.map(v => v.Name).filter(Boolean);\n  }, [vendors]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? ''48px'' : ''280px'',\n      minWidth: isCollapsed ? ''48px'' : ''280px'',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid $' + '{styles.colors.border}`,\n      transition: ''width 0.3s ease-out'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      position: ''relative'',\n      overflow: ''hidden''\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: ''absolute'',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: ''32px'',\n          height: ''32px'',\n          borderRadius: getBorderRadius(''sm''),\n          border: `1px solid $' + '{styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: ''pointer'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1,\n          transition: ''all 0.2s''\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? ''→'' : ''←''}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          flex: 1,\n          opacity: 1,\n          transition: ''opacity 0.3s''\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            🔍\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: ''24px'',\n              height: ''24px'',\n              borderRadius: ''50%'',\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || ''700''\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: ''opacity 0.3s'',\n        pointerEvents: isCollapsed ? ''none'' : ''auto'',\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column''\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: ''40px''\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? ''s'' : ''''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.lg\n        }}>\n          {/* Model Type Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Model Type\n            </label>\n            <select\n              value={filters?.modelType || ''''}\n              onChange={handleModelTypeChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Types</option>\n              {modelTypes.map((type) => (\n                <option key={type.ID} value={type.ID}>\n                  {type.Name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Status Filter */}\n          <div>\n            <label style={{\n              display: ''block'',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              color: styles.colors.textSecondary\n            }}>\n              Status\n            </label>\n            <select\n              value={filters?.isActive === undefined ? '''' : filters.isActive.toString()}\n              onChange={handleStatusChange}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''sm''),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: ''pointer''\n              }}\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"true\">Active</option>\n              <option value=\"false\">Inactive</option>\n            </select>\n          </div>\n          \n          {/* Model Developer Filter */}\n          {developers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Model Developer\n              </label>\n              <select\n                value={filters?.developer || ''''}\n                onChange={handleDeveloperChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Developers</option>\n                {developers.map((dev) => (\n                  <option key={dev} value={dev}>\n                    {dev}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Inference Provider Filter */}\n          {providers.length > 0 && (\n            <div>\n              <label style={{\n                display: ''block'',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Inference Provider\n              </label>\n              <select\n                value={filters?.provider || ''''}\n                onChange={handleProviderChange}\n                style={{\n                  width: ''100%'',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid $' + '{styles.colors.border}`,\n                  borderRadius: getBorderRadius(''sm''),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: ''pointer''\n                }}\n              >\n                <option value=\"\">All Providers</option>\n                {providers.map((provider) => (\n                  <option key={provider} value={provider}>\n                    {provider}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: ''flex'',\n                flexDirection: ''column'',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.modelType && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Type:\n                      </span>\n                      <strong>{modelTypes.find(t => t.ID === filters.modelType)?.Name || filters.modelType}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleModelTypeChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n                {filters?.isActive !== undefined && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Status:\n                      </span>\n                      <strong>{filters.isActive ? ''Active'' : ''Inactive''}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleStatusChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n                {filters?.developer && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Developer:\n                      </span>\n                      <strong>{filters.developer}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleDeveloperChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n                {filters?.provider && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + ''15'',\n                    borderRadius: getBorderRadius(''sm''),\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Provider:\n                      </span>\n                      <strong>{filters.provider}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleProviderChange({ target: { value: '''' } })}\n                      style={{\n                        width: ''20px'',\n                        height: ''20px'',\n                        borderRadius: ''50%'',\n                        border: ''none'',\n                        backgroundColor: ''transparent'',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: ''pointer'',\n                        display: ''flex'',\n                        alignItems: ''center'',\n                        justifyContent: ''center'',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = ''transparent'';\n                      }}\n                    >\n                      ✕\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid $' + '{styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: ''100%'',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid $' + '{styles.colors.border}`,\n                borderRadius: getBorderRadius(''md''),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || ''500'',\n                cursor: ''pointer'',\n                transition: ''background-color 0.2s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + ''15'';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_9c15e277 = N'Provide filters for model type, status, developer, and provider with active filter indicators'
SET
  @TechnicalDesign_9c15e277 = N''
SET
  @FunctionalRequirementsVector_9c15e277 = N'[-0.04799670726060867,0.09996108710765839,-0.03684770688414574,-0.04227365180850029,0.032397348433732986,-0.049987901002168655,0.008518588729202747,0.04885478317737579,-0.011669870465993881,-0.06251391023397446,0.03376098349690437,0.027255041524767876,-0.04933059215545654,0.13779431581497192,-0.025186559185385704,0.010906469076871872,0.02441941760480404,0.019751334562897682,0.044396720826625824,0.00016665461589582264,-0.017435526475310326,0.02468448132276535,0.037212103605270386,0.02026313915848732,0.022713027894496918,-0.014221754856407642,0.04679882898926735,0.030689693987369537,0.00344363646581769,-0.033912599086761475,-0.0011423976393416524,0.01885511726140976,-0.038627542555332184,-0.027348143979907036,0.000001345218606729759,0.015067647211253643,-0.07989005744457245,-0.002062635961920023,-0.009888816624879837,-0.0007040551863610744,-0.01057771872729063,-0.0016078988555818796,0.04321678727865219,0.01243514847010374,-0.06044456735253334,-0.03590238839387894,-0.06109130382537842,0.025771543383598328,0.023030094802379608,-0.005045497789978981,-0.003198410850018263,0.08250503242015839,-0.03756515681743622,-0.022831693291664124,-0.11367490142583847,0.029094461351633072,0.01202431134879589,-0.058056898415088654,0.04496004432439804,0.038910627365112305,0.014062250033020973,0.028160301968455315,0.016858620569109917,0.012291918508708477,0.03133402019739151,-0.017551856115460396,0.10155541449785233,-0.03643370419740677,0.036303214728832245,-0.03535733371973038,0.014980923384428024,0.007617483381181955,-0.029540710151195526,-0.035883914679288864,-0.044086892157793045,0.023084070533514023,0.015192649327218533,-0.003338332287967205,-0.03974355384707451,0.049830950796604156,0.022384293377399445,-0.0010470161214470863,-0.006464460864663124,0.011416682042181492,-0.055462803691625595,0.04873277246952057,0.021188773214817047,-0.021743182092905045,-0.03761660307645798,-0.013338831253349781,0.010495665483176708,-0.04804818704724312,0.04944551736116409,-0.042100176215171814,-0.058865129947662354,-0.034832168370485306,-0.0034585229586809874,0.06746860593557358,0.019389260560274124,0.027922283858060837,-0.07722890377044678,0.033363088965415955,-0.014130890369415283,0.013431936502456665,0.004145266488194466,-0.04037533327937126,0.027999654412269592,0.007794773206114769,-0.00376032292842865,0.016085268929600716,-0.008378562517464161,0.026208357885479927,0.005694240797311068,0.0591450072824955,-0.03818890079855919,0.006866967771202326,-0.040623486042022705,0.0075135123915970325,-0.047787345945835114,-0.015187269076704979,0.048573385924100876,0.020930176600813866,0.010963790118694305,0.009846457280218601,0.03731551021337509,0.004088519606739283,-0.0189692210406065,-0.022137098014354706,-0.0455913245677948,-0.004510451573878527,-0.017816735431551933,-0.060052577406167984,0.032320957630872726,-0.023719487711787224,0.02621431276202202,-0.03960743173956871,0.04375221207737923,-0.03269227594137192,-0.0070115383714437485,-0.040935348719358444,0.07848651707172394,0.03174977749586105,-0.034335825592279434,0.0742129534482956,-0.05566598102450371,-0.014589805155992508,0.015297706238925457,-0.12307093292474747,-0.03916458413004875,0.006063217297196388,0.004112382419407368,-0.020164383575320244,-0.0014689997769892216,0.02232661098241806,-0.008722946979105473,0.003971586469560862,0.014174893498420715,0.03490181639790535,0.011819474399089813,-0.05070868879556656,-0.0015002223663032055,-0.01756579428911209,0.013838311657309532,0.021980909630656242,-0.005356670822948217,0.015806585550308228,-0.07300880551338196,-0.037369195371866226,-0.049420733004808426,-0.07443205267190933,-0.03480922430753708,-0.020881708711385727,0.00117302977014333,0.0344514325261116,0.04038713499903679,-0.03992793336510658,0.1072283685207367,0.014993096701800823,0.014329041354358196,-0.0269773006439209,0.012512153014540672,-0.025862695649266243,0.03596309944987297,-0.0328824557363987,-0.010672575794160366,-0.04382581263780594,-0.07161787152290344,0.0965709313750267,-0.01945788413286209,-0.03180026635527611,-0.0005020665703341365,0.051756758242845535,0.0202160831540823,0.0522400327026844,0.044102743268013,0.026210160925984383,-0.023578902706503868,-0.03687448799610138,0.012339703738689423,-0.004132312722504139,-0.01602860353887081,-0.07401660829782486,0.08070501685142517,-0.0043920790776610374,0.04406345263123512,-0.048040200024843216,-0.05468219518661499,0.01384646538645029,-0.001448489143513143,-0.02058389224112034,-0.0006847830954939127,-0.005777176469564438,-0.0018864837475121021,0.009867499582469463,-0.01708814688026905,0.06052957475185394,0.03593854606151581,-0.011754604056477547,-0.028795888647437096,0.0072416942566633224,-0.04514568671584129,0.014594913460314274,-0.05202675238251686,0.02014138363301754,0.08507659286260605,0.02519930712878704,0.055704474449157715,-0.0028263400308787823,0.04596053808927536,0.0018184995278716087,0.0021405541338026524,0.011998183093965054,0.0025197959039360285,-0.027493776753544807,0.02642315998673439,-0.02531944401562214,0.05676811933517456,0.1285162717103958,-0.032864999026060104,0.05506592243909836,0.03252644091844559,0.004792503546923399,0.0178353451192379,0.011183449998497963,-0.04523720592260361,0.017573552206158638,-0.0017844358226284385,0.03426286205649376,0.007415822707116604,0.028987403959035873,0.07068619132041931,0.01695142686367035,0.020147139206528664,-0.020922400057315826,-0.021177606657147408,-0.006126823835074902,-0.040349218994379044,-0.02795502357184887,0.0032558634411543608,0.04352417588233948,0.024145372211933136,-0.02513214945793152,-0.01999279484152794,0.0020471273455768824,0.04803632199764252,0.04670969769358635,0.02489057369530201,-0.02444605715572834,-0.0031586922705173492,0.013205691240727901,-0.02612260915338993,0.011306526139378548,0.025238879024982452,-0.001465669716708362,0.043102674186229706,0.037847984582185745,-0.02243354357779026,0.039779022336006165,0.010008739307522774,-0.055985674262046814,-0.03967718034982681,-0.05657957121729851,-0.006433888338506222,0.006535687018185854,-0.05214320868253708,0.03211066126823425,0.005890563130378723,-0.06930471956729889,0.03386187180876732,-0.020445412024855614,-0.005445667542517185,0.024639137089252472,0.014715162105858326,-0.010575859807431698,0.01014040969312191,0.007318501360714436,-0.04950205609202385,0.11584024876356125,-0.004888264928013086,0.09580108523368835,-0.009477806277573109,0.010801617056131363,-0.020243927836418152,0.006028355099260807,-0.003886758117005229,0.043580055236816406,0.020100370049476624,-0.013345221057534218,0.03998786583542824,0.036694008857011795,-0.059167876839637756,-0.011387635953724384,-0.022508295252919197,0.03563813120126724,-0.04252307116985321,-0.011161265894770622,0.05042912811040878,0.022825054824352264,0.026909027248620987,0.07261080294847488,0.0020019118674099445,0.020440932363271713,0.00204883492551744,0.01299719326198101,-0.010266878642141819,-0.01364226546138525,-0.058124128729104996,0.003603875869885087,-0.0993790328502655,-0.024702660739421844,0.03925632685422897,-0.013042918406426907,0.013321676291525364,-0.06715980917215347,-0.06270615011453629,0.00920181255787611,-0.05128888040781021,0.03727702423930168,-0.009132619947195053,-0.005827256944030523,0.023953845724463463,-0.0030123181641101837,-0.010309581644833088,-0.02590307779610157,0.07378846406936646,0.04694238305091858,-0.05842306837439537,0.007514935452491045,-0.043715011328458786,0.06956694275140762,-0.03904357925057411,0.020090460777282715,-0.001285491045564413,-0.019019268453121185,-0.013947281055152416,-0.05059577524662018,0.027937594801187515,-0.05427812412381172,-0.0364372543990612,-0.030569367110729218,0.09612692147493362,0.024147415533661842,-0.004013026133179665,0.0567164346575737,0.002167406724765897,0.007583101280033588,0.04957589879631996,-0.00026008416898548603,0.037325236946344376,0.006524332333356142,-0.033594708889722824,-0.0044461446814239025,-0.011053354479372501,0.012777444906532764,0.010756072588264942,-0.04933653771877289,0.020377136766910553,0.026794586330652237,-0.004494978580623865,0.03254905715584755,0.02053939551115036,0.008996371179819107,0.07543656975030899,-0.0023601732682436705,0.006444805767387152,-0.041447121649980545,0.04607562720775604,-0.0071051535196602345,0.08272610604763031,0.02220156230032444,0.005700760055333376,-0.03759497031569481,0.005965775344520807,0.008091498166322708,0.014298132620751858,-0.008799979463219643,-0.0409276969730854,-0.021673252806067467,0.016018571332097054,0.0008008116274140775,-0.013015812262892723,0.036170829087495804,-0.07300776243209839,-0.0012520402669906616,-0.0025827563367784023,-0.07463431358337402,-0.007888329215347767,0.016476552933454514,0.0017162846634164453,0.012401391752064228,-0.011793866753578186,-0.029618866741657257,-0.04635687172412872,-0.06414909660816193,-0.03437541052699089,-0.06111007183790207,0.007739620748907328,-0.010254742577672005,0.04747946932911873,0.0397176630795002,-0.006800436414778233,-0.03233680874109268,0.002506003947928548,-0.02563718520104885,0.02574441209435463,-0.045081865042448044,0.0057196603156626225,0.0017124539008364081,0.00991461705416441,-0.007129572797566652,-0.06213783472776413,0.06951780617237091,-0.015977298840880394,0.008520541712641716,0.030846888199448586,-0.05119110643863678,0.004978625103831291,-0.04319680854678154,-0.07657641917467117,0.00748938973993063,0.005661602132022381,0.027082759886980057,0.05571021884679794,0.015583785250782967,0.03003169223666191,0.057916104793548584,0.001156407524831593,0.04013306647539139,0.0285964272916317,-0.030901150777935982,0.014541015960276127,0.006940122228115797,-0.059273459017276764,-0.017975322902202606,-0.01471392996609211,-0.02644764818251133,-0.015468775294721127,0.03169526159763336,-0.02089909091591835,0.03466162458062172,-0.01779535412788391,0.03972668573260307,-0.030766891315579414,-0.011031980626285076,0.005454201716929674,-0.01843101717531681,-0.035895347595214844,0.009362345561385155,0.022399649024009705,0.042755622416734695,-0.025192786008119583,-0.022036921232938766,-0.008799898438155651,-0.028900528326630592,0.02439938113093376,-0.017221173271536827,-0.0033813228365033865,-0.047589920461177826,-0.028538813814520836,-0.009703099727630615,-0.0033699132036417723,0.015162740834057331,0.01991981640458107,-0.0973205491900444,-0.011656670831143856,-0.0029495309572666883,-0.01627877540886402,-0.012269209139049053,-0.03983338549733162,0.04575574770569801,0.027320606634020805,0.010535084642469883,-0.04438113793730736,0.007454392500221729,0.026972850784659386,0.03512983024120331,-0.05723806843161583,0.00894981250166893,-0.09040844440460205,-0.07514889538288116,0.011096666567027569,-0.03358638659119606,0.010229111649096012,-0.02809557132422924,0.025016028434038162,-0.007581945508718491,-0.000900436076335609,0.0699995681643486,-0.005626386031508446,0.05312246084213257,-0.030190875753760338,0.0023821231443434954,-0.055893030017614365,-0.01675170660018921,-0.019186973571777344,0.027150586247444153,0.006831164471805096,0.03202592954039574,0.03581269085407257,-0.02793291211128235,0.02335800789296627,0.02677164040505886,0.01351963821798563,0.024181263521313667,0.046629153192043304,0.014448356814682484,0.009315703995525837,-0.0003216646146029234,-0.0338432751595974,0.03822355717420578,-0.007449409458786249,0.030180463567376137,-0.066375233232975,-0.02870604582130909,-0.004856713581830263,0.0038123754784464836,0.025299707427620888,0.022759201005101204,-0.01850641891360283,0.013906348496675491,-0.07681870460510254,-0.00902669969946146,0.026746096089482307,-0.025653362274169922,-0.023101549595594406,-0.06785741448402405,-0.01955561898648739,0.015683133155107498,0.02248154766857624,-0.007584549020975828,-0.026389097794890404,-0.12653380632400513,-0.03316561505198479,-0.0019673702772706747,0.016237659379839897,-5.812103982630149e-33,-0.02720998227596283,-0.012008724734187126,-0.024975735694169998,-0.11802162975072861,0.006273718550801277,-0.009748915210366249,0.046263646334409714,-0.06678905338048935,-0.007796857506036758,-0.057862430810928345,-0.006165203172713518,0.04315384104847908,0.0007548933499492705,-0.0022622044198215008,0.021774236112833023,0.006670801434665918,0.044457875192165375,-0.0075461422093212605,0.011488799937069416,0.031740833073854446,-0.042975518852472305,-0.004906608723104,-0.04956553503870964,-0.029650526121258736,-0.05206260085105896,0.06094648689031601,-0.0181856919080019,0.004284719470888376,-0.0837189331650734,0.056852489709854126,-0.01136006135493517,-0.02455369010567665,0.01550616230815649,0.02754184789955616,0.01689053140580654,-0.04847455024719238,0.047725364565849304,0.005232636351138353,-0.004097445402294397,-0.014970282092690468,0.06765518337488174,0.0005281389458104968,0.030284438282251358,0.0179469995200634,0.0333373062312603,-0.02082720212638378,0.020664354786276817,0.020280752331018448,0.01190372183918953,0.01879522018134594,0.02136281318962574,0.007317823823541403,0.012324091047048569,0.08562333136796951,-0.019373327493667603,0.0436650887131691,0.03815202787518501,0.01995287649333477,0.033851321786642075,-0.0521535724401474,-0.03616005554795265,0.03888541832566261,-0.004298846703022718,0.04393119737505913,-0.015542503446340561,-0.025977229699492455,-0.05701272189617157,0.04221903905272484,0.013662770390510559,-0.08356700092554092,0.019470613449811935,0.023050982505083084,-0.005807765293866396,-0.034580010920763016,-0.03495589271187782,-0.0013449112884700298,-0.003915079869329929,0.006716489791870117,-0.07556956261396408,0.018687115982174873,0.018587253987789154,-0.00599563866853714,0.002164257923141122,0.011833172291517258,0.027853960171341896,-0.042131613940000534,0.0052045551128685474,0.026068223640322685,0.017823031172156334,0.0034823857713490725,-0.027977822348475456,0.03257442265748978,-0.01461509708315134,0.02570204623043537,-0.002661974634975195,-0.04485870152711868,-0.009447719901800156,0.007419310510158539,-0.01642066240310669,0.03989136219024658,0.06733883172273636,-0.010799271985888481,-0.0033392549958080053,0.0025066384114325047,0.0020396714098751545,0.019637636840343475,0.011385832913219929,-0.020809495821595192,-0.015056791715323925,0.002788487123325467,-0.0037291506305336952,0.036797426640987396,-0.017895495519042015,0.01402298267930746,0.02530623786151409,0.03362742438912392,0.023785829544067383,0.0030221755150705576,0.025475911796092987,0.016778597608208656,-0.002566421637311578,-0.021513767540454865,0.01858378015458584,0.04879133775830269,0.033949755132198334,-0.042454928159713745,-0.031588345766067505,0.0025493570137768984,0.06112557649612427,-0.016753269359469414,-0.030963018536567688,0.009302617982029915,2.2862631965381297e-7,0.01359520386904478,-0.013507691211998463,-0.06761857122182846,0.03674608841538429,-0.012771212495863438,-0.011286078952252865,0.04893612116575241,-0.0191719438880682,0.029309052973985672,0.0285181887447834,0.020384568721055984,0.010006547905504704,-0.005028463900089264,0.04531604051589966,-0.007721620611846447,-0.07464428246021271,0.023345401510596275,0.01961931586265564,-0.06428194046020508,-0.008348931558430195,0.0706406757235527,0.009992293082177639,0.03925218805670738,0.004124799743294716,0.017139622941613197,-0.03991656377911568,0.0075350478291511536,-0.0038773317355662584,0.008902344852685928,0.021971236914396286,0.0536094568669796,-0.04374022036790848,-0.0014976842794567347,0.038357626646757126,-0.006597669795155525,0.013577770441770554,-0.0009104681084863842,-0.006166172679513693,-0.023098871111869812,0.033456914126873016,0.0043157427571713924,0.017144665122032166,-0.015615289099514484,0.0011404032120481133,0.05957711488008499,0.008124036714434624,-0.013738960959017277,-0.00348334526643157,-0.022854000329971313,-0.021833093836903572,0.004384188447147608,-0.010611182078719139,-0.010506304912269115,0.01635570451617241,0.009626653045415878,0.017480086535215378,-0.024644162505865097,-0.0158673208206892,-0.0006850703503005207,-0.06837940216064453,-0.009204834699630737,-0.042580924928188324,0.0022278660908341408,0.057472698390483856,0.05980316177010536,-0.02292679063975811,-0.022388888522982597,3.2069377701652858e-34,-0.005122491158545017,0.013464727438986301,0.040516506880521774,0.07374528795480728,0.05935649946331978,-0.02913457155227661,-0.05874089151620865,0.007325903512537479,0.0093978988006711,-0.05695110186934471,-0.010706483386456966]'
SET
  @HasCustomProps_9c15e277 = 1
SET
  @HasCustomEvents_9c15e277 = 1
SET
  @RequiresData_9c15e277 = 0
SET
  @DependencyCount_9c15e277 = 0
SET
  @FunctionalRequirementsVectorEmbeddingModelID_9c15e277 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_9c15e277 = 1
SET
  @ID_9c15e277 = '04395751-8D07-4906-BAE1-9D1789543E14'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_9c15e277,
  @Name = @Name_9c15e277,
  @Version = @Version_9c15e277,
  @VersionSequence = @VersionSequence_9c15e277,
  @Title = @Title_9c15e277,
  @Description = @Description_9c15e277,
  @Type = @Type_9c15e277,
  @Status = @Status_9c15e277,
  @DeveloperName = @DeveloperName_9c15e277,
  @DeveloperEmail = @DeveloperEmail_9c15e277,
  @DeveloperOrganization = @DeveloperOrganization_9c15e277,
  @SourceRegistryID = @SourceRegistryID_9c15e277,
  @ReplicatedAt = @ReplicatedAt_9c15e277,
  @LastSyncedAt = @LastSyncedAt_9c15e277,
  @Specification = @Specification_9c15e277,
  @FunctionalRequirements = @FunctionalRequirements_9c15e277,
  @TechnicalDesign = @TechnicalDesign_9c15e277,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_9c15e277,
  @TechnicalDesignVector = @TechnicalDesignVector_9c15e277,
  @HasCustomProps = @HasCustomProps_9c15e277,
  @HasCustomEvents = @HasCustomEvents_9c15e277,
  @RequiresData = @RequiresData_9c15e277,
  @DependencyCount = @DependencyCount_9c15e277,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_9c15e277,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_9c15e277,
  @HasRequiredCustomProps = @HasRequiredCustomProps_9c15e277,
  @ID = @ID_9c15e277;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_01531ce9 NVARCHAR(MAX),
@Name_01531ce9 NVARCHAR(500),
@Version_01531ce9 NVARCHAR(50),
@VersionSequence_01531ce9 INT,
@Title_01531ce9 NVARCHAR(1000),
@Description_01531ce9 NVARCHAR(MAX),
@Type_01531ce9 NVARCHAR(255),
@Status_01531ce9 NVARCHAR(50),
@DeveloperName_01531ce9 NVARCHAR(255),
@DeveloperEmail_01531ce9 NVARCHAR(255),
@DeveloperOrganization_01531ce9 NVARCHAR(255),
@SourceRegistryID_01531ce9 UNIQUEIDENTIFIER,
@ReplicatedAt_01531ce9 DATETIMEOFFSET,
@LastSyncedAt_01531ce9 DATETIMEOFFSET,
@Specification_01531ce9 NVARCHAR(MAX),
@FunctionalRequirements_01531ce9 NVARCHAR(MAX),
@TechnicalDesign_01531ce9 NVARCHAR(MAX),
@FunctionalRequirementsVector_01531ce9 NVARCHAR(MAX),
@TechnicalDesignVector_01531ce9 NVARCHAR(MAX),
@HasCustomProps_01531ce9 BIT,
@HasCustomEvents_01531ce9 BIT,
@RequiresData_01531ce9 BIT,
@DependencyCount_01531ce9 INT,
@TechnicalDesignVectorEmbeddingModelID_01531ce9 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_01531ce9 NVARCHAR(MAX),
@HasRequiredCustomProps_01531ce9 BIT,
@ID_01531ce9 UNIQUEIDENTIFIER
SET
  @Namespace_01531ce9 = N'AI'
SET
  @Name_01531ce9 = N'AIModelAnalytics'
SET
  @Version_01531ce9 = N'1.0.0'
SET
  @VersionSequence_01531ce9 = 1
SET
  @Title_01531ce9 = N'AI Model Analytics'
SET
  @Description_01531ce9 = N'Analytics panel with charts showing prompt usage distribution, performance metrics, and time series'
SET
  @Type_01531ce9 = N'Chart'
SET
  @Status_01531ce9 = N'Published'
SET
  @Specification_01531ce9 = N'{"name":"AIModelAnalytics","title":"AI Model Analytics","description":"Analytics panel with charts showing prompt usage distribution, performance metrics, and time series","type":"chart","functionalRequirements":"Display pie chart for prompt usage, bar chart for performance, time series for usage trends","technicalDesign":"","dataRequirements":{"mode":"views","entities":[{"name":"AI Models","description":"Core AI model definitions and specifications","displayFields":["ID","Name","APIName","Description","AIModelTypeID","InputTokenLimit","PowerRank","SpeedRank","CostRank","IsActive","__mj_CreatedAt","__mj_UpdatedAt"],"filterFields":["AIModelTypeID","IsActive"],"sortFields":["Name","InputTokenLimit","CostRank","IsActive","__mj_CreatedAt"],"fieldMetadata":[{"name":"ID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":true,"description":"Unique identifier for the AI model"},{"name":"Name","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"System name of the AI model"},{"name":"APIName","sequence":4,"defaultInView":true,"type":"nvarchar","allowsNull":true,"isPrimaryKey":false,"description":"API identifier for the model"},{"name":"InputTokenLimit","sequence":5,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Maximum input token limit"},{"name":"CostRank","sequence":6,"defaultInView":true,"type":"int","allowsNull":true,"isPrimaryKey":false,"description":"Relative cost ranking (1-5)"}],"usageContext":"Main list of AI models"},{"name":"MJ: AI Model Vendors","description":"Vendor associations for AI models","displayFields":["ID","ModelID","VendorID","TypeID","Model","Vendor","Type","Status","Priority","APIName","MaxInputTokens","MaxOutputTokens","SupportsStreaming","SupportsEffortLevel"],"filterFields":["ModelID","Type","Status"],"sortFields":["Vendor","Priority","Type"],"fieldMetadata":[{"name":"ModelID","sequence":1,"defaultInView":false,"type":"uniqueidentifier","allowsNull":false,"isPrimaryKey":false,"description":"Reference to AI Model"},{"name":"Vendor","sequence":2,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor name"},{"name":"Type","sequence":3,"defaultInView":true,"type":"nvarchar","allowsNull":false,"isPrimaryKey":false,"description":"Vendor type (Model Developer or Inference Provider)"}],"usageContext":"Vendor associations for models"},{"name":"AI Model Types","description":"Types/categories of AI models","displayFields":["ID","Name","Description"],"filterFields":[],"sortFields":["Name"],"usageContext":"Filter dropdown for model types"},{"name":"MJ: AI Prompt Runs","description":"Execution history for AI prompts","displayFields":["ID","PromptID","ModelID","StartTime","EndTime","TotalExecutionTime","InputTokens","OutputTokens","TotalTokens","Status","Error"],"filterFields":["ModelID","PromptID","Status"],"sortFields":["StartTime","TotalExecutionTime"],"usageContext":"Analytics and usage history"},{"name":"AI Prompts","description":"AI prompt definitions","displayFields":["ID","Name","Description","CategoryID"],"filterFields":[],"sortFields":["Name"],"usageContext":"Enrich prompt runs with names"}]},"properties":[{"name":"model","type":"object","required":true,"description":"The selected AI model for analytics"},{"name":"promptRuns","type":"array","required":true,"description":"Array of prompt runs to analyze"},{"name":"view","type":"string","required":true,"description":"Current analytics view - ''prompts'', ''performance'', or ''timeline''"}],"events":[{"name":"onViewChange","description":"Fired when the analytics view changes","parameters":[{"name":"view","type":"string","description":"New view name"}]}],"exampleUsage":"<AIModelAnalytics ... />","code":"function AIModelAnalytics({ \n  model,\n  promptRuns,\n  view,\n  onViewChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === ''object'' ? styles.borders.radius[size] : styles.borders?.radius || ''4px'';\n  };\n  \n  // Calculate prompt usage statistics\n  const promptStats = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    const stats = {};\n    promptRuns.forEach(run => {\n      const promptName = run.PromptName || ''Unknown'';\n      if (!stats[promptName]) {\n        stats[promptName] = {\n          name: promptName,\n          runs: 0,\n          successfulRuns: 0,\n          failedRuns: 0,\n          totalTokens: 0,\n          avgExecutionTime: 0,\n          executionTimes: []\n        };\n      }\n      \n      stats[promptName].runs++;\n      if (run.Status === ''Success'' || run.Status === ''Completed'') {\n        stats[promptName].successfulRuns++;\n      } else if (run.Status === ''Failed'' || run.Status === ''Error'') {\n        stats[promptName].failedRuns++;\n      }\n      \n      stats[promptName].totalTokens += run.TotalTokens || 0;\n      if (run.TotalExecutionTime) {\n        stats[promptName].executionTimes.push(run.TotalExecutionTime);\n      }\n    });\n    \n    // Calculate averages\n    Object.values(stats).forEach(stat => {\n      if (stat.executionTimes.length > 0) {\n        stat.avgExecutionTime = stat.executionTimes.reduce((a, b) => a + b, 0) / stat.executionTimes.length;\n      }\n    });\n    \n    return Object.values(stats).sort((a, b) => b.runs - a.runs);\n  }, [promptRuns]);\n  \n  // Calculate time series data\n  const timeSeriesData = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    // Group by day\n    const dailyStats = {};\n    promptRuns.forEach(run => {\n      if (run.StartTime) {\n        const date = new Date(run.StartTime).toLocaleDateString();\n        if (!dailyStats[date]) {\n          dailyStats[date] = {\n            date,\n            runs: 0,\n            tokens: 0,\n            errors: 0\n          };\n        }\n        dailyStats[date].runs++;\n        dailyStats[date].tokens += run.TotalTokens || 0;\n        if (run.Status === ''Failed'' || run.Status === ''Error'') {\n          dailyStats[date].errors++;\n        }\n      }\n    });\n    \n    return Object.values(dailyStats).sort((a, b) => new Date(a.date) - new Date(b.date));\n  }, [promptRuns]);\n  \n  // Render pie chart\n  const renderPieChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No prompt data available\n        </div>\n      );\n    }\n    \n    const total = promptStats.reduce((sum, stat) => sum + stat.runs, 0);\n    const colors = [\n      styles.colors.primary,\n      styles.colors.success || ''#4CAF50'',\n      styles.colors.warning || ''#FF9800'',\n      styles.colors.error || ''#F44336'',\n      styles.colors.info || ''#2196F3'',\n      ''#9C27B0'', ''#00BCD4'', ''#8BC34A'', ''#FFC107'', ''#795548''\n    ];\n    \n    // Create simple pie chart using SVG\n    let currentAngle = 0;\n    const segments = promptStats.slice(0, 5).map((stat, index) => {\n      const percentage = stat.runs / total;\n      const angle = percentage * 360;\n      const largeArcFlag = angle > 180 ? 1 : 0;\n      \n      const startX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      currentAngle += angle;\n      \n      const endX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const endY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      const pathData = [\n        `M 100 100`,\n        `L $' + '{startX} $' + '{startY}`,\n        `A 80 80 0 $' + '{largeArcFlag} 1 $' + '{endX} $' + '{endY}`,\n        ''Z''\n      ].join('' '');\n      \n      return {\n        path: pathData,\n        color: colors[index % colors.length],\n        percentage,\n        stat\n      };\n    });\n    \n    return (\n      <div>\n        <svg viewBox=\"0 0 200 200\" style={{ width: ''200px'', height: ''200px'', margin: ''0 auto'', display: ''block'' }}>\n          {segments.map((segment, index) => (\n            <g key={index}>\n              <path\n                d={segment.path}\n                fill={segment.color}\n                stroke={styles.colors.background}\n                strokeWidth=\"2\"\n                style={{ cursor: ''pointer'' }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.opacity = ''0.8'';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.opacity = ''1'';\n                }}\n              />\n            </g>\n          ))}\n        </svg>\n        \n        {/* Legend */}\n        <div style={{\n          marginTop: styles.spacing.md,\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.xs\n        }}>\n          {segments.map((segment, index) => (\n            <div\n              key={index}\n              style={{\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              <div style={{\n                width: ''12px'',\n                height: ''12px'',\n                backgroundColor: segment.color,\n                borderRadius: ''2px''\n              }} />\n              <div style={{\n                flex: 1,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {segment.stat.name}\n              </div>\n              <div style={{\n                color: styles.colors.textSecondary,\n                fontWeight: styles.typography.fontWeight?.medium || ''500''\n              }}>\n                {(segment.percentage * 100).toFixed(1)}%\n              </div>\n            </div>\n          ))}\n          {promptStats.length > 5 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              fontStyle: ''italic''\n            }}>\n              +{promptStats.length - 5} more prompts\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render bar chart for performance\n  const renderPerformanceChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No performance data available\n        </div>\n      );\n    }\n    \n    const maxTime = Math.max(...promptStats.map(s => s.avgExecutionTime || 0));\n    const displayStats = promptStats.slice(0, 10);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing.sm\n        }}>\n          {displayStats.map((stat, index) => (\n            <div key={index} style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.sm }}>\n              <div style={{\n                width: ''100px'',\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.text,\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {stat.name}\n              </div>\n              <div style={{\n                flex: 1,\n                height: ''20px'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                overflow: ''hidden'',\n                position: ''relative''\n              }}>\n                <div style={{\n                  width: maxTime > 0 ? `$' + '{(stat.avgExecutionTime / maxTime) * 100}%` : ''0%'',\n                  height: ''100%'',\n                  backgroundColor: styles.colors.primary,\n                  transition: ''width 0.3s''\n                }} />\n                <div style={{\n                  position: ''absolute'',\n                  right: styles.spacing.xs,\n                  top: ''50%'',\n                  transform: ''translateY(-50%)'',\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary\n                }}>\n                  {stat.avgExecutionTime ? `$' + '{(stat.avgExecutionTime / 1000).toFixed(2)}s` : ''-''}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render time series chart\n  const renderTimeSeriesChart = () => {\n    if (timeSeriesData.length === 0) {\n      return (\n        <div style={{\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          height: ''200px'',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No time series data available\n        </div>\n      );\n    }\n    \n    const maxRuns = Math.max(...timeSeriesData.map(d => d.runs));\n    const recentData = timeSeriesData.slice(-7);\n    \n    return (\n      <div>\n        <div style={{\n          display: ''flex'',\n          alignItems: ''flex-end'',\n          height: ''150px'',\n          gap: styles.spacing.xs,\n          marginBottom: styles.spacing.sm\n        }}>\n          {recentData.map((data, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 1,\n                display: ''flex'',\n                flexDirection: ''column'',\n                alignItems: ''center'',\n                gap: styles.spacing.xs\n              }}\n            >\n              <div style={{\n                width: ''100%'',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                position: ''relative'',\n                flex: 1,\n                display: ''flex'',\n                alignItems: ''flex-end''\n              }}>\n                <div style={{\n                  width: ''100%'',\n                  height: maxRuns > 0 ? `$' + '{(data.runs / maxRuns) * 100}%` : ''0%'',\n                  backgroundColor: data.errors > 0 \n                    ? styles.colors.error \n                    : styles.colors.primary,\n                  borderRadius: getBorderRadius(''xs'') || getBorderRadius(''sm''),\n                  transition: ''height 0.3s''\n                }} />\n              </div>\n              <div style={{\n                fontSize: ''10px'',\n                color: styles.colors.textSecondary,\n                textAlign: ''center''\n              }}>\n                {new Date(data.date).toLocaleDateString(''en'', { month: ''short'', day: ''numeric'' })}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n          color: styles.colors.textSecondary\n        }}>\n          <span>Runs per day (last 7 days)</span>\n          <span>Max: {maxRuns}</span>\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      backgroundColor: styles.colors.surface\n    }}>\n      {/* Header with View Selector */}\n      <div style={{\n        padding: styles.spacing.lg,\n        borderBottom: `1px solid $' + '{styles.colors.border}`\n      }}>\n        <h3 style={{\n          margin: 0,\n          marginBottom: styles.spacing.md,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n          color: styles.colors.text\n        }}>\n          Analytics\n        </h3>\n        \n        {/* View Tabs */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.xs,\n          borderBottom: `1px solid $' + '{styles.colors.border}`\n        }}>\n          <button\n            onClick={() => onViewChange?.(''prompts'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''prompts'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''prompts'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Prompt Usage\n          </button>\n          <button\n            onClick={() => onViewChange?.(''performance'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''performance'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''performance'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Performance\n          </button>\n          <button\n            onClick={() => onViewChange?.(''timeline'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: ''transparent'',\n              color: view === ''timeline'' ? styles.colors.primary : styles.colors.textSecondary,\n              border: ''none'',\n              borderBottom: view === ''timeline'' ? `2px solid $' + '{styles.colors.primary}` : ''none'',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || ''500'',\n              cursor: ''pointer'',\n              transition: ''color 0.2s''\n            }}\n          >\n            Timeline\n          </button>\n        </div>\n      </div>\n      \n      {/* Content Area */}\n      <div style={{\n        flex: 1,\n        padding: styles.spacing.lg,\n        overflow: ''auto''\n      }}>\n        {!model ? (\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            height: ''100%'',\n            color: styles.colors.textSecondary,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Select a model to view analytics\n          </div>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <div style={{\n              display: ''grid'',\n              gridTemplateColumns: ''repeat(2, 1fr)'',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.lg\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Total Runs\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptRuns.length}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius(''sm'')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Unique Prompts\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || ''600'',\n                  color: styles.colors.text\n                }}>\n                  {promptStats.length}\n                </div>\n              </div>\n            </div>\n            \n            {/* Chart Area */}\n            <div>\n              {view === ''prompts'' && renderPieChart()}\n              {view === ''performance'' && renderPerformanceChart()}\n              {view === ''timeline'' && renderTimeSeriesChart()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_01531ce9 = N'Display pie chart for prompt usage, bar chart for performance, time series for usage trends'
SET
  @TechnicalDesign_01531ce9 = N''
SET
  @FunctionalRequirementsVector_01531ce9 = N'[-0.07168518751859665,-0.036311764270067215,-0.04422213137149811,-0.04105711728334427,-0.01349882036447525,0.005832658149302006,0.03522523492574692,0.038137443363666534,-0.05044085532426834,0.03908542916178703,0.021009890362620354,-0.011562677100300789,0.0270810816437006,0.11073050647974014,-0.024225598201155663,-0.06421640515327454,-0.0122446333989501,0.017023617401719093,0.0835220068693161,0.031029364094138145,0.020817436277866364,0.004166966769844294,0.005379434209316969,-0.012600420974195004,-0.015547985211014748,-0.03684910386800766,-0.014651666395366192,0.02237681671977043,0.04851788282394409,-0.1234363242983818,-0.0030990142840892076,0.053686417639255524,-0.004442356992512941,-0.0025765870232135057,0.000001418159172317246,-0.017419500276446342,-0.018102265894412994,0.0047089350409805775,-0.024098455905914307,0.04230230674147606,0.046075206249952316,-0.022999640554189682,0.06126128137111664,0.0024623030330985785,0.019197147339582443,0.05015954002737999,-0.010038790293037891,-0.022034240886569023,0.06598885357379913,-0.019683001562952995,0.008682339452207088,0.017835093662142754,-0.08464432507753372,-0.00796502735465765,-0.05934158340096474,0.027049198746681213,-0.011026234365999699,0.02329709753394127,0.09566161781549454,0.04466129094362259,-0.038034431636333466,-0.016562383621931076,0.02029515989124775,0.0191255584359169,-0.01778588630259037,0.026169434189796448,0.12030921876430511,-0.019587252289056778,0.01319526694715023,0.014774960465729237,0.016289111226797104,-0.03114001266658306,0.008330387063324451,-0.047294020652770996,-0.014187883585691452,-0.01568206399679184,-0.044536788016557693,-0.03138599544763565,0.0039952523075044155,-0.0025584050454199314,-0.024792075157165527,0.04217572137713432,-0.04597274214029312,-0.019498437643051147,-0.019235199317336082,-0.10434182733297348,-0.012450681999325752,-0.029342133551836014,-0.04194336384534836,-0.021004995331168175,-0.004096643533557653,-0.0049949754029512405,-0.02063325047492981,-0.006976769771426916,-0.04505864530801773,-0.002387481974437833,0.028132786974310875,-0.041178520768880844,0.06260394304990768,0.02428256906569004,0.029870234429836273,0.03242046386003494,0.01697632670402527,0.01940598152577877,0.024110862985253334,0.07060252130031586,0.0381307378411293,-0.10503953695297241,-0.013596698641777039,0.04065181687474251,0.00751293683424592,0.003954336047172546,0.01638934388756752,-0.009613769128918648,0.011472067795693874,-0.0068941181525588036,-0.06447020173072815,0.020924143493175507,0.001659938134253025,0.019474472850561142,0.1496451497077942,0.013668876141309738,-0.03060845285654068,0.022856377065181732,0.009236414916813374,0.04131532832980156,-0.03388636186718941,-0.007881580851972103,-0.018608836457133293,-0.002507082186639309,-0.025662310421466827,-0.006103080697357655,0.03238670900464058,0.021075984463095665,-0.025529097765684128,0.008378090336918831,-0.0007838314049877226,0.06554277241230011,-0.07336655259132385,-0.06850182265043259,-0.021839259192347527,0.022425765171647072,0.0010669305920600891,0.010780748911201954,-0.0050697424449026585,-0.02403915673494339,0.012192905880510807,0.07377324998378754,0.010817046277225018,0.04800202324986458,0.02339029125869274,0.008559581823647022,-0.013593456707894802,0.0118528688326478,-0.05529173091053963,-0.019418204203248024,-0.019549820572137833,-0.008946309797465801,-0.013900070451200008,0.00859894324094057,-0.00696654012426734,-0.03559480607509613,-0.007457107305526733,0.009758693166077137,-0.020961182191967964,0.02323664352297783,-0.08532016724348068,-0.0183209590613842,-0.05533492565155029,-0.02373059093952179,-0.02445046789944172,-0.024847351014614105,-0.01713257096707821,0.008384792134165764,0.008672602474689484,0.07612688839435577,0.1015458032488823,-0.09465715289115906,0.006744505371898413,-0.0282142274081707,0.01491466537117958,-0.052397701889276505,0.023370539769530296,-0.0026301357429474592,0.0555274561047554,0.02637067623436451,-0.10912618786096573,-0.0108448201790452,0.00030051235808059573,-0.009268003515899181,-0.004135817289352417,0.019129661843180656,-0.06712684035301208,0.033889684826135635,0.0008757045725360513,0.005786173976957798,-0.0005152428639121354,-0.12232682853937149,0.009150762110948563,-0.010592952370643616,-0.015786413103342056,-0.009908347390592098,0.042474035173654556,0.02897980995476246,-0.02660186029970646,0.010740739293396473,0.004723055753856897,-0.018690412864089012,0.05421317741274834,0.016492102295160294,-0.003769865958020091,0.02513548918068409,-0.04152669757604599,0.015507051721215248,-0.04914630949497223,0.03473617509007454,-0.027076734229922295,0.02831447683274746,-0.05125132575631142,0.022307606413960457,-0.020546618849039078,-0.040539804846048355,0.009149505756795406,-0.00486132362857461,0.03953653573989868,-0.014046263881027699,0.030185455456376076,-0.03557977080345154,0.03356649726629257,0.028162142261862755,-0.04919669032096863,0.01178361102938652,0.01170229259878397,-0.011789744719862938,0.023512309417128563,0.04833122715353966,-0.027953026816248894,-0.028257805854082108,-0.0094446474686265,0.010966877453029156,0.00047538039507344365,-0.05399816855788231,-0.0260524433106184,-0.02659052051603794,-0.023562882095575333,-0.022550320252776146,0.02730158530175686,0.004314451478421688,-0.019138945266604424,0.005033750552684069,0.016106845811009407,0.00002125037099176552,0.04752371832728386,-0.026050755754113197,0.0006276454078033566,0.0146976038813591,0.09338141977787018,-0.013791448436677456,-0.019060000777244568,0.05018435791134834,0.06837496161460876,-0.007761037442833185,-0.010459037497639656,-0.019889390096068382,0.027704669162631035,-0.04768887162208557,0.07443390786647797,-0.027081355452537537,-0.028825130313634872,0.00357948150485754,0.011407842859625816,0.0267049390822649,-0.022225042805075645,-0.02136165462434292,-0.044356346130371094,0.022428125143051147,-0.07115978002548218,-0.00020478117221500725,0.011418725363910198,0.0053175087086856365,-0.0027377777732908726,-0.051220327615737915,0.04266383498907089,0.021766146644949913,-0.019573945552110672,-0.02200789749622345,0.025828562676906586,0.013480586931109428,0.052452851086854935,0.00044811813859269023,0.0445319302380085,-0.024636058136820793,0.021645769476890564,-0.008426577784121037,-0.0047265999019145966,0.04831714555621147,0.07873234897851944,0.029860887676477432,-0.005450553260743618,0.022620026022195816,-0.06227003410458565,0.007097379770129919,-0.006677678320556879,0.0028481069020926952,-0.0037900570314377546,0.0456017330288887,0.07405239343643188,-0.05598427727818489,0.038053058087825775,0.014135215431451797,0.06133425980806351,-0.003536537056788802,-0.0022108214907348156,-0.042302507907152176,-0.009084319695830345,0.027936842292547226,-0.07253159582614899,0.019453296437859535,-0.008585471659898758,0.02123120427131653,0.028730763122439384,0.005571803543716669,-0.015909530222415924,-0.009005383588373661,-0.006234354805201292,0.05656016618013382,-0.07421774417161942,0.005297468509525061,-0.01778891123831272,0.023053400218486786,0.009198810905218124,-0.024654986336827278,-0.03554539009928703,-0.0212944895029068,-0.02284197323024273,0.04331593960523605,-0.03676770254969597,-0.07242484390735626,0.006241047289222479,-0.02528972551226616,0.0005065874429419637,-0.0043117147870361805,-0.02104407735168934,-0.0019665341824293137,0.04636320844292641,-0.008107452653348446,-0.0128597067669034,-0.018689483404159546,0.04895475506782532,-0.035392992198467255,0.02693149633705616,-0.026789257302880287,0.00863445270806551,-0.008510669693350792,0.02760544791817665,0.020476926118135452,-0.03303765133023262,0.0420418456196785,-0.09901320189237595,-0.03748578205704689,0.0059196837246418,0.006125256419181824,0.025949014350771904,0.03284194692969322,-0.029064252972602844,0.02325117401778698,-0.039697423577308655,-0.020370841026306152,0.032651741057634354,0.024182746186852455,-0.04078931733965874,0.06942296773195267,0.06813590228557587,0.03327466547489166,-0.013710695318877697,0.04789484292268753,0.010925139300525188,0.02849017083644867,-0.062297072261571884,0.01178684551268816,0.0029686512425541878,-0.028437906876206398,0.05673901364207268,-0.030563674867153168,0.06878942996263504,-0.03854697197675705,0.006090165115892887,-0.014798923395574093,-0.03425942733883858,-0.014380177482962608,-0.0042036306113004684,-0.026127835735678673,0.028330065310001373,-0.05204140394926071,-0.00657454039901495,0.019651398062705994,-0.028709430247545242,-0.008867434225976467,0.010511022061109543,0.005561899859458208,0.03623807430267334,-0.04153808206319809,-0.02723078988492489,-0.004478383343666792,0.06275120377540588,-0.07041755318641663,-0.031760890036821365,0.05839855968952179,-0.02831043116748333,-0.018695516511797905,-0.04583209753036499,-0.014102092944085598,0.020336849614977837,-0.040396835654973984,-0.03072122111916542,0.003957259468734264,0.005431343801319599,-0.012066500261425972,0.02920783869922161,0.040560632944107056,-0.0020309779793024063,-0.005071088671684265,0.021163132041692734,-0.0008811316802166402,0.020521365106105804,-0.05441354587674141,0.03061496466398239,-0.007905105128884315,-0.02050597406923771,0.03966212272644043,0.014340522699058056,-0.04184194654226303,-0.010384405963122845,-0.003339167684316635,-0.05167054384946823,0.006623283959925175,-0.06896889954805374,0.03041072189807892,-0.01923130638897419,0.009626219980418682,0.005966951604932547,-0.012399415485560894,0.04156232625246048,0.0020080716349184513,0.011299436911940575,-0.028966117650270462,0.0034732201602309942,0.03622283786535263,-0.022089630365371704,0.006744923070073128,0.022794827818870544,-0.042358219623565674,0.004191549960523844,0.003271946683526039,0.03134757652878761,-0.032613761723041534,-0.04029220715165138,0.0002797776833176613,0.004760309122502804,0.013696189038455486,-0.009078445844352245,0.024648945778608322,-0.05103737860918045,0.00016080349450930953,0.06977421045303345,0.08518797159194946,0.09370143711566925,0.046341825276613235,-0.0021841733250766993,-0.06351800262928009,0.08483095467090607,-0.003443779656663537,-0.02793252095580101,-0.027533268555998802,0.032039374113082886,0.00009641617361921817,-0.0033232341520488262,-0.0314478762447834,0.03340531885623932,-0.02844594419002533,0.027847202494740486,0.025288376957178116,0.013753503561019897,-0.13696397840976715,0.020301636308431625,-0.03926907479763031,-0.028102900832891464,-0.03739530220627785,0.044550176709890366,-0.009172562509775162,-0.0008792689186520875,-0.07302902638912201,-0.026521073654294014,0.01618669182062149,0.05306556448340416,-0.021695714443922043,-0.1213020533323288,0.026051174849271774,0.036222994327545166,-0.0002676736330613494,-0.035082217305898666,0.009923786856234074,-0.015957923606038094,-0.01328634936362505,-0.012386087328195572,0.02495867758989334,0.04325566813349724,0.00983395054936409,-0.039388082921504974,0.03469262272119522,0.023380881175398827,0.01819666288793087,-0.041446685791015625,-0.047552887350320816,0.05689646676182747,0.005595112219452858,-0.03462061658501625,-0.002545049646869302,-0.06549913436174393,0.004255237523466349,0.00018802162958309054,-0.006879389751702547,0.019858986139297485,-0.009222880937159061,0.10541237145662308,0.0074570076540112495,0.005343777593225241,-0.013935196213424206,-0.03851211443543434,0.02574937604367733,-0.05832592025399208,-0.050752051174640656,0.005240941420197487,-0.027563322335481644,-0.046085961163043976,0.05423973500728607,0.025518756359815598,0.007658930029720068,0.025394337251782417,0.008519441820681095,-0.035132259130477905,0.014285780489444733,0.024333249777555466,-0.02405424229800701,-0.0047459788620471954,0.02980813942849636,0.007478275336325169,-0.017050042748451233,-0.010385033674538136,0.055142082273960114,0.012438063509762287,0.00454364251345396,-0.013509336858987808,-0.03664228320121765,-0.04962094873189926,-5.2479438360522234e-33,-0.0217446256428957,-0.0395110584795475,-0.022471299394965172,-0.010699127800762653,0.022257572039961815,0.0037239689845591784,0.055887654423713684,-0.00766134774312377,0.009199931286275387,-0.02548319101333618,-0.02586611546576023,-0.0013212396297603846,0.009664504788815975,-0.03293497860431671,0.0014856295892968774,0.021036595106124878,0.054543279111385345,-0.006720883306115866,-0.010728878900408745,0.018046675249934196,0.05223584920167923,0.019626375287771225,-0.012762326747179031,-0.009371453896164894,-0.01271041389554739,0.06221112981438637,0.033916495740413666,0.00534301670268178,-0.0019136706832796335,-0.03603532165288925,0.024583421647548676,0.0037559347692877054,0.0029944428242743015,0.04603336751461029,-0.03319845721125603,0.08032534271478653,0.0392574816942215,-0.08936494588851929,-0.0032564059365540743,-0.013924510218203068,0.008247624151408672,0.03014623187482357,0.021417615935206413,-0.03198118507862091,-0.007916601374745369,-0.024286743253469467,0.020350901409983635,0.02956567518413067,-0.04666551202535629,0.02273894101381302,0.03998639062047005,0.013632919639348984,0.02059820666909218,0.04137250781059265,-0.06919818371534348,0.09978441894054413,0.024844149127602577,0.08436824381351471,-0.06357201933860779,0.007345299702137709,0.014902821741998196,-0.05042160674929619,0.016656402498483658,0.033604301512241364,0.04407558590173721,-0.003458769293501973,-0.04864264652132988,0.024567339569330215,-0.0004765491175930947,-0.019574617967009544,0.00566312437877059,-0.015608181245625019,0.017729997634887695,-0.08394137769937515,0.016624711453914642,-0.06845222413539886,-0.005992808844894171,-0.01788652315735817,0.03361809626221657,0.026768138632178307,-0.02344091609120369,0.003193092765286565,-0.01884528622031212,0.022278450429439545,0.03676987439393997,0.015355795621871948,0.0272489283233881,0.015167349018156528,0.025857387110590935,-0.0011676930589601398,-0.004243841394782066,-0.011645237915217876,-0.0076454211957752705,0.024423586204648018,0.025754272937774658,-0.02159968577325344,0.06358842551708221,0.009405470453202724,0.008435511030256748,-0.02417144365608692,0.01028481125831604,0.018127361312508583,-0.03346217796206474,0.0006595221348106861,0.0236288383603096,-0.032244738191366196,-0.00559209892526269,-0.003010249463841319,-0.04229353740811348,-0.01892070844769478,0.020980723202228546,-0.01065884344279766,0.013579913415014744,-0.029637068510055542,0.012218669056892395,0.016085488721728325,0.00046002876479178667,0.015310215763747692,-0.0017110372427850962,-0.04414041340351105,-0.017864292487502098,-0.031880997121334076,-0.03520044684410095,-0.032550662755966187,0.024422308430075645,-0.04830663278698921,-0.012346416711807251,0.02922879345715046,0.04550968483090401,0.020416270941495895,-0.01654823124408722,0.0010973743628710508,2.2251458631217247e-7,0.010699192993342876,-0.0388459637761116,-0.021268926560878754,0.0867232233285904,0.014640582725405693,-0.029057571664452553,0.0019446902442723513,0.013492812402546406,-0.02036539651453495,-0.026109866797924042,0.0037634531036019325,-0.021295221522450447,-0.0032149453181773424,0.05642678216099739,0.03326296806335449,-0.059486087411642075,-0.0204329751431942,-0.04770466312766075,-0.05197899043560028,0.05913471058011055,0.08676135540008545,-0.018117697909474373,0.021112317219376564,0.009200518019497395,0.02151404321193695,-0.04651062190532684,0.008302789181470871,-0.02285299450159073,0.042670149356126785,-0.056580595672130585,-0.021567976102232933,0.03473285958170891,0.0037505184300243855,0.02490309439599514,0.0012474274262785912,0.00027160445461049676,-0.023347189649939537,-0.026820087805390358,0.0098221804946661,0.08833424746990204,0.022524194791913033,0.024044843390583992,-0.013849468901753426,0.016614675521850586,0.005637843627482653,-0.035647086799144745,-0.0015712935710325837,0.056907519698143005,0.01852811500430107,0.002121675992384553,0.05998050421476364,0.005279863718897104,-0.0037432985845953226,-0.01514530461281538,0.0037160187494009733,0.025477146729826927,-0.014446314424276352,0.050374142825603485,0.005617587827146053,0.028457121923565865,-0.041995685547590256,-0.03187282010912895,-0.013977465219795704,0.05774751305580139,0.028710491955280304,-0.004426818341016769,-0.01455998420715332,2.7358673630341295e-34,0.014215395785868168,-0.08309437334537506,0.04600333049893379,0.004886864218860865,0.009432526305317879,0.029371382668614388,-0.003137152874842286,0.026378655806183815,0.04360097646713257,-0.0703437551856041,-0.026814870536327362]'
SET
  @HasCustomProps_01531ce9 = 1
SET
  @HasCustomEvents_01531ce9 = 1
SET
  @RequiresData_01531ce9 = 0
SET
  @DependencyCount_01531ce9 = 0
SET
  @FunctionalRequirementsVectorEmbeddingModelID_01531ce9 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_01531ce9 = 1
SET
  @ID_01531ce9 = '509FF2B7-692D-490B-A282-D80FD370E5EB'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_01531ce9,
  @Name = @Name_01531ce9,
  @Version = @Version_01531ce9,
  @VersionSequence = @VersionSequence_01531ce9,
  @Title = @Title_01531ce9,
  @Description = @Description_01531ce9,
  @Type = @Type_01531ce9,
  @Status = @Status_01531ce9,
  @DeveloperName = @DeveloperName_01531ce9,
  @DeveloperEmail = @DeveloperEmail_01531ce9,
  @DeveloperOrganization = @DeveloperOrganization_01531ce9,
  @SourceRegistryID = @SourceRegistryID_01531ce9,
  @ReplicatedAt = @ReplicatedAt_01531ce9,
  @LastSyncedAt = @LastSyncedAt_01531ce9,
  @Specification = @Specification_01531ce9,
  @FunctionalRequirements = @FunctionalRequirements_01531ce9,
  @TechnicalDesign = @TechnicalDesign_01531ce9,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_01531ce9,
  @TechnicalDesignVector = @TechnicalDesignVector_01531ce9,
  @HasCustomProps = @HasCustomProps_01531ce9,
  @HasCustomEvents = @HasCustomEvents_01531ce9,
  @RequiresData = @RequiresData_01531ce9,
  @DependencyCount = @DependencyCount_01531ce9,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_01531ce9,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_01531ce9,
  @HasRequiredCustomProps = @HasRequiredCustomProps_01531ce9,
  @ID = @ID_01531ce9;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_fc68db3b NVARCHAR(MAX),
@Name_fc68db3b NVARCHAR(500),
@Version_fc68db3b NVARCHAR(50),
@VersionSequence_fc68db3b INT,
@Title_fc68db3b NVARCHAR(1000),
@Description_fc68db3b NVARCHAR(MAX),
@Type_fc68db3b NVARCHAR(255),
@Status_fc68db3b NVARCHAR(50),
@DeveloperName_fc68db3b NVARCHAR(255),
@DeveloperEmail_fc68db3b NVARCHAR(255),
@DeveloperOrganization_fc68db3b NVARCHAR(255),
@SourceRegistryID_fc68db3b UNIQUEIDENTIFIER,
@ReplicatedAt_fc68db3b DATETIMEOFFSET,
@LastSyncedAt_fc68db3b DATETIMEOFFSET,
@Specification_fc68db3b NVARCHAR(MAX),
@FunctionalRequirements_fc68db3b NVARCHAR(MAX),
@TechnicalDesign_fc68db3b NVARCHAR(MAX),
@FunctionalRequirementsVector_fc68db3b NVARCHAR(MAX),
@TechnicalDesignVector_fc68db3b NVARCHAR(MAX),
@HasCustomProps_fc68db3b BIT,
@HasCustomEvents_fc68db3b BIT,
@RequiresData_fc68db3b BIT,
@DependencyCount_fc68db3b INT,
@TechnicalDesignVectorEmbeddingModelID_fc68db3b NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_fc68db3b NVARCHAR(MAX),
@HasRequiredCustomProps_fc68db3b BIT,
@ID_fc68db3b UNIQUEIDENTIFIER
SET
  @Namespace_fc68db3b = N'AI/Analytics/Performance'
SET
  @Name_fc68db3b = N'AIPerformanceDashboard'
SET
  @Version_fc68db3b = N'1.0.0'
SET
  @VersionSequence_fc68db3b = 1
SET
  @Title_fc68db3b = N'AI Performance Dashboard'
SET
  @Description_fc68db3b = N'Comprehensive dashboard for analyzing AI agent and prompt performance with time-series charts, cost analysis, and drill-down capabilities'
SET
  @Type_fc68db3b = N'Dashboard'
SET
  @Status_fc68db3b = N'Published'
SET
  @Specification_fc68db3b = N'{"name":"AIPerformanceDashboard","location":"embedded","title":"AI Performance Dashboard","description":"Comprehensive dashboard for analyzing AI agent and prompt performance with time-series charts, cost analysis, and drill-down capabilities","type":"dashboard","functionalRequirements":"## AI Performance Dashboard Requirements\n\n### Core Functionality\n- Display multi-line time series charts showing total runs, tokens, and costs over time\n- Support multiple time groupings: day, week, month, quarter\n- Dual Y-axis display (tokens on left, runs/costs on right)\n- Click-to-drill-down on any chart point to see details for that period\n- Show distribution charts (pie/bar) for selected time period\n- Separate tabs for Agent Runs and Prompt Runs analysis\n- Real-time data refresh capabilities\n- Export functionality for charts and data\n\n### Analytics Features\n- Time series trends with moving averages\n- Cost breakdown by agent/prompt\n- Token usage distribution\n- Success/failure rate analysis\n- Performance comparisons across periods\n- Top consumers identification\n- Anomaly detection and alerts\n\n### UX Considerations\n- Responsive layout adapting to container size\n- Interactive tooltips on hover\n- Smooth chart animations\n- Loading states during data fetch\n- Clear visual hierarchy\n- Consistent color coding across charts\n- Mobile-responsive design","dataRequirements":{"mode":"views","description":"Loads AI performance data including agent runs, prompt runs, and aggregated metrics","entities":[{"name":"MJ: AI Agent Runs","description":"Historical agent execution data for performance analysis","displayFields":["ID","AgentID","Agent","StartedAt","CompletedAt","Success","TotalTokensUsed","TotalCost"],"filterFields":["StartedAt","Success","AgentID"],"sortFields":["StartedAt"],"fieldMetadata":[{"name":"ID","type":"uniqueidentifier","isPrimaryKey":true,"allowsNull":false,"description":"Unique run identifier"},{"name":"AgentID","type":"uniqueidentifier","allowsNull":false,"description":"Reference to AI Agent"},{"name":"Agent","type":"nvarchar","allowsNull":true,"description":"Agent name (denormalized)"},{"name":"StartedAt","type":"datetime","allowsNull":false,"description":"Execution start timestamp"},{"name":"TotalTokensUsed","type":"int","allowsNull":true,"description":"Total tokens consumed"},{"name":"TotalCost","type":"decimal","allowsNull":true,"description":"Total cost in USD"}],"permissionLevelNeeded":["read"]},{"name":"MJ: AI Prompt Runs","description":"Historical prompt execution data for performance analysis","displayFields":["ID","PromptID","Prompt","ModelID","Model","RunAt","CompletedAt","Success","TokensUsed","TotalCost"],"filterFields":["RunAt","Success","PromptID","ModelID"],"sortFields":["RunAt"],"fieldMetadata":[{"name":"ID","type":"uniqueidentifier","isPrimaryKey":true,"allowsNull":false,"description":"Unique run identifier"},{"name":"PromptID","type":"uniqueidentifier","allowsNull":false,"description":"Reference to AI Prompt"},{"name":"Prompt","type":"nvarchar","allowsNull":true,"description":"Prompt name (denormalized)"},{"name":"RunAt","type":"datetime","allowsNull":false,"description":"Execution timestamp"},{"name":"TokensUsed","type":"int","allowsNull":true,"description":"Total tokens consumed"},{"name":"TotalCost","type":"decimal","allowsNull":true,"description":"Total cost in USD"}],"permissionLevelNeeded":["read"]}],"queries":[]},"technicalDesign":"## Component Architecture\n\n### Root Component (AIPerformanceDashboard)\n- Manages overall dashboard state and data loading\n- Handles time range selection and grouping\n- Coordinates drill-down state between components\n- Manages tab switching between Agent and Prompt views\n\n### Child Components\n1. **AITimeSeriesChart**: Multi-line chart with dual Y-axes for runs/tokens/costs\n2. **AIDistributionChart**: Pie/bar charts showing breakdown by agent or prompt\n3. **AIDetailTable**: Detailed table view for drill-down data\n4. **AIMetricsSummary**: Key metrics cards for selected period\n\n### Data Flow\n- Root component loads data based on selected time range\n- Aggregates data by selected grouping (day/week/month/quarter)\n- Passes aggregated data to chart components\n- Handles drill-down events and updates detail views\n- Manages state persistence through savedUserSettings\n\n### State Management\n- Selected time range and grouping\n- Active tab (agents vs prompts)\n- Drill-down selection (selected date/period)\n- Chart view preferences\n- Filter states","properties":[],"events":[],"exampleUsage":"<AIPerformanceDashboard />","code":"function AIPerformanceDashboard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIPerformanceDashboard] Initializing with settings:'', savedUserSettings);\n  console.log(''[AIPerformanceDashboard] Available components:'', components ? Object.keys(components) : ''none'');\n  \n  // Extract child components with fallbacks\n  const AITimeSeriesChart = components?.AITimeSeriesChart;\n  const AIDistributionChart = components?.AIDistributionChart;\n  const AIDetailTable = components?.AIDetailTable;\n  const AIMetricsSummary = components?.AIMetricsSummary;\n  const AIInsightsPanel = components?.AIInsightsPanel;\n  \n  // Check if required components are available\n  if (!AITimeSeriesChart || !AIDistributionChart || !AIDetailTable || !AIMetricsSummary || !AIInsightsPanel) {\n    return (\n      <div style={{\n        padding: styles?.spacing?.lg || ''20px'',\n        color: styles?.colors?.error || ''red'',\n        textAlign: ''center''\n      }}>\n        Error: Required child components are not available. Please ensure all dashboard components are loaded.\n        <br />\n        Missing: {[\n          !AITimeSeriesChart && ''AITimeSeriesChart'',\n          !AIDistributionChart && ''AIDistributionChart'',\n          !AIDetailTable && ''AIDetailTable'',\n          !AIMetricsSummary && ''AIMetricsSummary'',\n          !AIInsightsPanel && ''AIInsightsPanel''\n        ].filter(Boolean).join('', '')}\n      </div>\n    );\n  }\n  \n  // Initialize state from saved settings\n  const [timeRange, setTimeRange] = useState(savedUserSettings?.timeRange || ''30d'');\n  const [groupBy, setGroupBy] = useState(savedUserSettings?.groupBy || ''day'');\n  const [activeTab, setActiveTab] = useState(savedUserSettings?.activeTab || ''agents'');\n  const [selectedPoint, setSelectedPoint] = useState(null);\n  \n  // Data state\n  const [agentRuns, setAgentRuns] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // AI Insights state\n  const [aiInsights, setAiInsights] = useState(null);\n  const [loadingInsights, setLoadingInsights] = useState(false);\n  const [insightsError, setInsightsError] = useState(null);\n  \n  // Calculate date range\n  const getDateRange = useCallback(() => {\n    const end = new Date();\n    const start = new Date();\n    \n    switch(timeRange) {\n      case ''7d'':\n        start.setDate(end.getDate() - 7);\n        break;\n      case ''30d'':\n        start.setDate(end.getDate() - 30);\n        break;\n      case ''90d'':\n        start.setDate(end.getDate() - 90);\n        break;\n      case ''1y'':\n        start.setFullYear(end.getFullYear() - 1);\n        break;\n      default:\n        start.setDate(end.getDate() - 30);\n    }\n    \n    return { start, end };\n  }, [timeRange]);\n  \n  // Load data\n  useEffect(() => {\n    const loadData = async () => {\n      console.log(''[AIPerformanceDashboard] Loading data for range:'', timeRange);\n      setLoading(true);\n      setError(null);\n      \n      const { start, end } = getDateRange();\n      \n      try {\n        // Load agent runs\n        const agentFilter = `StartedAt >= ''$' + '{start.toISOString()}'' AND StartedAt <= ''$' + '{end.toISOString()}''`;\n        console.log(''[AIPerformanceDashboard] Loading agent runs with filter:'', agentFilter);\n        \n        const agentResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Agent Runs'',\n          ExtraFilter: agentFilter,\n          OrderBy: ''StartedAt ASC'',\n          Fields: [''ID'', ''AgentID'', ''Agent'', ''StartedAt'', ''CompletedAt'', ''Success'', ''TotalTokensUsed'', ''TotalCost''],\n          MaxRows: 10000\n        });\n        \n        console.log(''[AIPerformanceDashboard] Agent runs loaded:'', {\n          success: agentResult?.Success,\n          count: agentResult?.Results?.length,\n          error: agentResult?.ErrorMessage\n        });\n        \n        if (agentResult?.Success) {\n          setAgentRuns(agentResult.Results || []);\n        } else {\n          console.error(''[AIPerformanceDashboard] Failed to load agent runs:'', agentResult?.ErrorMessage);\n        }\n        \n        // Load prompt runs\n        const promptFilter = `RunAt >= ''$' + '{start.toISOString()}'' AND RunAt <= ''$' + '{end.toISOString()}''`;\n        console.log(''[AIPerformanceDashboard] Loading prompt runs with filter:'', promptFilter);\n        \n        const promptResult = await utilities.rv.RunView({\n          EntityName: ''MJ: AI Prompt Runs'',\n          ExtraFilter: promptFilter,\n          OrderBy: ''RunAt ASC'',\n          Fields: [''ID'', ''PromptID'', ''Prompt'', ''ModelID'', ''Model'', ''RunAt'', ''CompletedAt'', ''Success'', ''TokensUsed'', ''TotalCost''],\n          MaxRows: 10000\n        });\n        \n        console.log(''[AIPerformanceDashboard] Prompt runs loaded:'', {\n          success: promptResult?.Success,\n          count: promptResult?.Results?.length,\n          error: promptResult?.ErrorMessage\n        });\n        \n        if (promptResult?.Success) {\n          setPromptRuns(promptResult.Results || []);\n        } else {\n          console.error(''[AIPerformanceDashboard] Failed to load prompt runs:'', promptResult?.ErrorMessage);\n        }\n        \n      } catch (error) {\n        console.error(''[AIPerformanceDashboard] Error loading data:'', error);\n        setError(error.message || ''Failed to load data'');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadData();\n  }, [timeRange, utilities.rv, getDateRange]);\n  \n  // Aggregate data by time period\n  const aggregateData = useCallback((data, dateField, grouping) => {\n    console.log(`[AIPerformanceDashboard] Aggregating $' + '{data.length} records by $' + '{grouping}`);\n    \n    const grouped = {};\n    \n    data.forEach(item => {\n      const date = new Date(item[dateField]);\n      let key;\n      \n      switch(grouping) {\n        case ''day'':\n          key = date.toISOString().split(''T'')[0];\n          break;\n        case ''week'':\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          key = weekStart.toISOString().split(''T'')[0];\n          break;\n        case ''month'':\n          key = `$' + '{date.getFullYear()}-$' + '{String(date.getMonth() + 1).padStart(2, ''0'')}`;\n          break;\n        case ''quarter'':\n          const quarter = Math.floor(date.getMonth() / 3) + 1;\n          key = `$' + '{date.getFullYear()}-Q$' + '{quarter}`;\n          break;\n        default:\n          key = date.toISOString().split(''T'')[0];\n      }\n      \n      if (!grouped[key]) {\n        grouped[key] = {\n          date: key,\n          runs: 0,\n          tokens: 0,\n          cost: 0,\n          items: []\n        };\n      }\n      \n      grouped[key].runs++;\n      grouped[key].tokens += (item.TotalTokensUsed || item.TokensUsed || 0);\n      grouped[key].cost += (item.TotalCost || 0);\n      grouped[key].items.push(item);\n    });\n    \n    const result = Object.values(grouped).sort((a, b) => a.date.localeCompare(b.date));\n    console.log(`[AIPerformanceDashboard] Aggregated into $' + '{result.length} groups`);\n    return result;\n  }, []);\n  \n  // Get aggregated data for current view\n  const chartData = useMemo(() => {\n    const data = activeTab === ''agents'' ? agentRuns : promptRuns;\n    const dateField = activeTab === ''agents'' ? ''StartedAt'' : ''RunAt'';\n    return aggregateData(data, dateField, groupBy);\n  }, [activeTab, agentRuns, promptRuns, groupBy, aggregateData]);\n  \n  // Handle drill-down\n  const handleChartClick = useCallback((dataPoint) => {\n    console.log(''[AIPerformanceDashboard] Chart clicked:'', dataPoint);\n    setSelectedPoint(dataPoint);\n  }, []);\n  \n  // Handle time range change\n  const handleTimeRangeChange = useCallback((range) => {\n    console.log(''[AIPerformanceDashboard] Time range changed to:'', range);\n    setTimeRange(range);\n    setSelectedPoint(null);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      timeRange: range\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle grouping change\n  const handleGroupByChange = useCallback((grouping) => {\n    console.log(''[AIPerformanceDashboard] Grouping changed to:'', grouping);\n    setGroupBy(grouping);\n    setSelectedPoint(null);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      groupBy: grouping\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle tab change\n  const handleTabChange = useCallback((tab) => {\n    console.log(''[AIPerformanceDashboard] Tab changed to:'', tab);\n    setActiveTab(tab);\n    setSelectedPoint(null);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      activeTab: tab\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Calculate summary metrics\n  const metrics = useMemo(() => {\n    const data = activeTab === ''agents'' ? agentRuns : promptRuns;\n    return {\n      totalRuns: data.length,\n      totalTokens: data.reduce((sum, item) => sum + (item.TotalTokensUsed || item.TokensUsed || 0), 0),\n      totalCost: data.reduce((sum, item) => sum + (item.TotalCost || 0), 0),\n      avgTokensPerRun: data.length > 0 ? Math.round(data.reduce((sum, item) => sum + (item.TotalTokensUsed || item.TokensUsed || 0), 0) / data.length) : 0,\n      avgCostPerRun: data.length > 0 ? data.reduce((sum, item) => sum + (item.TotalCost || 0), 0) / data.length : 0\n    };\n  }, [activeTab, agentRuns, promptRuns]);\n  \n\n  // Generate AI Insights\n  const generateAIInsights = async () => {\n    setLoadingInsights(true);\n    setInsightsError(null);\n    \n    try {\n      const currentData = activeTab === ''agents'' ? agentRuns : promptRuns;\n      const dataType = activeTab === ''agents'' ? ''AI Agent'' : ''AI Prompt'';\n      \n      // Calculate additional metrics for deeper analysis\n      const modelDistribution = {};\n      const agentDistribution = {};\n      let successRate = 0;\n      let failureCount = 0;\n      \n      currentData.forEach(run => {\n        // Model distribution\n        const model = run.Model || run.ModelID || ''Unknown'';\n        modelDistribution[model] = (modelDistribution[model] || 0) + 1;\n        \n        // Agent/Prompt distribution\n        const name = run.Agent || run.AgentName || run.Prompt || run.PromptName || ''Unknown'';\n        agentDistribution[name] = (agentDistribution[name] || 0) + 1;\n        \n        // Success tracking\n        if (run.IsSuccess === true || run.Status === ''Success'') {\n          successRate++;\n        } else if (run.IsSuccess === false || run.Status === ''Failed'') {\n          failureCount++;\n        }\n      });\n      \n      successRate = currentData.length > 0 ? ((successRate / currentData.length) * 100).toFixed(1) : 0;\n      \n      const prompt = `Analyze this $' + '{dataType} performance data and provide actionable insights:\n\n## Performance Overview\n- **Time Period:** $' + '{timeRange}\n- **Data Grouping:** $' + '{groupBy}\n- **Total Runs:** $' + '{metrics.totalRuns}\n- **Total Tokens Used:** $' + '{metrics.totalTokens.toLocaleString()}\n- **Total Cost:** $$' + '{metrics.totalCost.toFixed(2)}\n- **Average Tokens per Run:** $' + '{metrics.avgTokensPerRun.toLocaleString()}\n- **Average Cost per Run:** $$' + '{metrics.avgCostPerRun.toFixed(4)}\n- **Success Rate:** $' + '{successRate}%\n- **Failed Runs:** $' + '{failureCount}\n\n## Model Distribution\n$' + '{Object.entries(modelDistribution)\n  .sort((a, b) => b[1] - a[1])\n  .slice(0, 5)\n  .map(([model, count]) => `- **$' + '{model}:** $' + '{count} runs ($' + '{((count/metrics.totalRuns)*100).toFixed(1)}%)`)\n  .join(''\\n'')}\n\n## Top $' + '{dataType === ''AI Agent'' ? ''Agents'' : ''Prompts''}\n$' + '{Object.entries(agentDistribution)\n  .sort((a, b) => b[1] - a[1])\n  .slice(0, 5)\n  .map(([name, count]) => `- **$' + '{name}:** $' + '{count} runs`)\n  .join(''\\n'')}\n\n## Recent Performance Trends (Last 5 $' + '{groupBy === ''hour'' ? ''Hours'' : groupBy === ''day'' ? ''Days'' : ''Periods''})\n$' + '{chartData.slice(-5).map(d => \n  `- **$' + '{d.date}:** $' + '{d.runs} runs, $' + '{d.tokens.toLocaleString()} tokens, $$' + '{d.cost.toFixed(2)}`\n).join(''\\n'')}\n\n## Cost Analysis\n- **Highest Cost Period:** $' + '{chartData.reduce((max, d) => d.cost > max.cost ? d : max, chartData[0] || {}).date || ''N/A''}\n- **Most Active Period:** $' + '{chartData.reduce((max, d) => d.runs > max.runs ? d : max, chartData[0] || {}).date || ''N/A''}\n- **Token Efficiency Trend:** $' + '{chartData.length > 1 \n  ? (chartData[chartData.length-1].tokens/chartData[chartData.length-1].runs < chartData[0].tokens/chartData[0].runs \n    ? ''Improving'' : ''Declining'')\n  : ''Stable''}\n\nBased on this specific data, please provide:\n1. **Key Performance Insights** - What patterns and trends are evident in the data?\n2. **Cost Efficiency Analysis** - Are costs justified by usage patterns? Where can we optimize?\n3. **Token Usage Patterns** - Any unusual spikes or inefficiencies?\n4. **Model Optimization** - Should we adjust model selection based on the distribution?\n5. **Specific Recommendations** - 3-4 actionable steps to improve performance and reduce costs\n6. **Risk Indicators** - Any anomalies or concerns that need immediate attention?\n\nUse markdown formatting with headers (##), bullet points, and **bold** text. Reference the actual numbers in your analysis.`;\n      \n      const result = await utilities.ai.ExecutePrompt({\n        systemPrompt: ''You are an expert AI performance analyst specializing in token usage optimization, cost management, and AI system efficiency. Analyze the specific metrics provided and give actionable recommendations. Always reference the actual numbers and percentages from the data. Format your response in clear markdown.'',\n        messages: prompt,\n        preferredModels: [''GPT-OSS-120B'', ''Qwen3 32B''],\n        modelPower: ''high'',\n        temperature: 0.7,\n        maxTokens: 1500\n      });\n      \n      if (result?.success && result?.result) {\n        setAiInsights(result.result);\n      } else {\n        setInsightsError(''Failed to generate insights. Please try again.'');\n      }\n    } catch (error) {\n      setInsightsError(error.message || ''Failed to generate AI insights'');\n    } finally {\n      setLoadingInsights(false);\n    }\n  };\n  \n  console.log(''[AIPerformanceDashboard] Current state:'', {\n    timeRange,\n    groupBy,\n    activeTab,\n    agentRunsCount: agentRuns.length,\n    promptRunsCount: promptRuns.length,\n    chartDataPoints: chartData.length,\n    selectedPoint: selectedPoint?.date\n  });\n  \n  if (loading) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100%'',\n        color: styles.colors.textSecondary\n      }}>\n        Loading performance data...\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''100%'',\n        color: styles.colors.error\n      }}>\n        Error: {error}\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      height: ''100%'',\n      display: ''flex'',\n      flexDirection: ''column'',\n      backgroundColor: styles.colors.background,\n      padding: styles.spacing.md\n    }}>\n      <style>{`\n        /* Markdown content styling */\n        .markdown-insights h1 { font-size: 20px; font-weight: 600; color: #111827; margin: 16px 0 12px 0; }\n        .markdown-insights h2 { font-size: 18px; font-weight: 600; color: #1F2937; margin: 14px 0 10px 0; }\n        .markdown-insights h3 { font-size: 16px; font-weight: 600; color: #374151; margin: 12px 0 8px 0; }\n        .markdown-insights h4 { font-size: 14px; font-weight: 600; color: #4B5563; margin: 10px 0 6px 0; }\n        .markdown-insights p { margin: 8px 0; color: #374151; line-height: 1.6; }\n        .markdown-insights ul, .markdown-insights ol { margin: 8px 0; padding-left: 24px; color: #374151; }\n        .markdown-insights li { margin: 4px 0; line-height: 1.5; }\n        .markdown-insights strong { font-weight: 600; color: #1F2937; }\n        .markdown-insights em { font-style: italic; }\n        .markdown-insights code { background: #F3F4F6; padding: 2px 4px; border-radius: 3px; font-family: monospace; font-size: 0.9em; }\n        .markdown-insights blockquote { border-left: 3px solid #6366F1; padding-left: 12px; margin: 12px 0; color: #4B5563; }\n        .markdown-insights hr { border: none; border-top: 1px solid #E5E7EB; margin: 16px 0; }\n        .markdown-insights a { color: #6366F1; text-decoration: none; }\n        .markdown-insights a:hover { text-decoration: underline; }\n      `}</style>\n      {/* Header Controls */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center'',\n        marginBottom: styles.spacing.lg,\n        flexWrap: ''wrap'',\n        gap: styles.spacing.md\n      }}>\n        {/* Tab Selector */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.xs,\n          backgroundColor: styles.colors.surface,\n          padding: styles.spacing.xs,\n          borderRadius: styles.borders?.radius || ''4px''\n        }}>\n          <button\n            onClick={() => handleTabChange(''agents'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: activeTab === ''agents'' ? styles.colors.primary : ''transparent'',\n              color: activeTab === ''agents'' ? ''white'' : styles.colors.text,\n              border: ''none'',\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: ''pointer'',\n              fontWeight: activeTab === ''agents'' ? ''600'' : ''400''\n            }}\n          >\n            Agent Runs\n          </button>\n          <button\n            onClick={() => handleTabChange(''prompts'')}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: activeTab === ''prompts'' ? styles.colors.primary : ''transparent'',\n              color: activeTab === ''prompts'' ? ''white'' : styles.colors.text,\n              border: ''none'',\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: ''pointer'',\n              fontWeight: activeTab === ''prompts'' ? ''600'' : ''400''\n            }}\n          >\n            Prompt Runs\n          </button>\n        </div>\n        \n        {/* Time Controls */}\n        <div style={{\n          display: ''flex'',\n          gap: styles.spacing.md,\n          alignItems: ''center''\n        }}>\n          {/* Time Range */}\n          <select\n            value={timeRange}\n            onChange={(e) => handleTimeRangeChange(e.target.value)}\n            style={{\n              padding: styles.spacing.sm,\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              backgroundColor: styles.colors.surface,\n              color: styles.colors.text\n            }}\n          >\n            <option value=\"7d\">Last 7 Days</option>\n            <option value=\"30d\">Last 30 Days</option>\n            <option value=\"90d\">Last 90 Days</option>\n            <option value=\"1y\">Last Year</option>\n          </select>\n          \n          {/* Group By */}\n          <select\n            value={groupBy}\n            onChange={(e) => handleGroupByChange(e.target.value)}\n            style={{\n              padding: styles.spacing.sm,\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              backgroundColor: styles.colors.surface,\n              color: styles.colors.text\n            }}\n          >\n            <option value=\"day\">By Day</option>\n            <option value=\"week\">By Week</option>\n            <option value=\"month\">By Month</option>\n            <option value=\"quarter\">By Quarter</option>\n          </select>\n          \n          {/* AI Insights Button */}\n          <button\n            onClick={generateAIInsights}\n            disabled={loadingInsights || loading}\n            style={{\n              padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n              backgroundColor: styles.colors.primary,\n              color: ''white'',\n              border: ''none'',\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: loadingInsights || loading ? ''not-allowed'' : ''pointer'',\n              display: ''flex'',\n              alignItems: ''center'',\n              gap: styles.spacing.xs,\n              opacity: loadingInsights || loading ? 0.6 : 1\n            }}\n          >\n            <i className={`fa-solid fa-$' + '{loadingInsights ? ''spinner fa-spin'' : ''wand-magic-sparkles''}`}></i>\n            {loadingInsights ? ''Analyzing...'' : ''Get AI Insights''}\n          </button>\n        </div>\n      </div>\n      \n      {/* AI Insights Panel */}\n      <AIInsightsPanel\n        utilities={utilities}\n        styles={styles}\n        components={components}\n        callbacks={callbacks}\n        savedUserSettings={savedUserSettings?.aiInsights}\n        onSaveUserSettings={(settings) => onSaveUserSettings?.({\n          ...savedUserSettings,\n          aiInsights: settings\n        })}\n        insights={aiInsights}\n        loading={loadingInsights}\n        error={insightsError}\n        onGenerate={generateAIInsights}\n        title=\"AI-Powered Performance Analysis\"\n        icon=\"fa-wand-magic-sparkles\"\n        iconColor={styles.colors.primary}\n        position=\"top\"\n        onClose={() => {\n          setAiInsights(null);\n          setInsightsError(null);\n        }}\n      />\n      \n      {/* Metrics Summary */}\n      <AIMetricsSummary\n        metrics={metrics}\n        styles={styles}\n        utilities={utilities}\n        components={components}\n        callbacks={callbacks}\n        savedUserSettings={savedUserSettings?.metricsSummary}\n        onSaveUserSettings={(settings) => onSaveUserSettings?.({\n          ...savedUserSettings,\n          metricsSummary: settings\n        })}\n      />\n      \n      {/* Main Chart Area */}\n      <div style={{\n        flex: 1,\n        display: ''flex'',\n        flexDirection: ''column'',\n        gap: styles.spacing.lg,\n        minHeight: 0\n      }}>\n        {/* Time Series Chart */}\n        <div style={{\n          flex: selectedPoint ? ''0 0 400px'' : ''1'',\n          minHeight: ''300px''\n        }}>\n          <AITimeSeriesChart\n            data={chartData}\n            groupBy={groupBy}\n            activeTab={activeTab}\n            selectedPoint={selectedPoint}\n            onPointClick={handleChartClick}\n            styles={styles}\n            utilities={utilities}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings?.timeSeriesChart}\n            onSaveUserSettings={(settings) => onSaveUserSettings?.({\n              ...savedUserSettings,\n              timeSeriesChart: settings\n            })}\n          />\n        </div>\n        \n        {/* Drill-down Area */}\n        {selectedPoint && (\n          <div style={{\n            flex: 1,\n            display: ''flex'',\n            gap: styles.spacing.md,\n            minHeight: 0\n          }}>\n            {/* Distribution Chart */}\n            <div style={{ flex: ''0 0 400px'' }}>\n              <AIDistributionChart\n                data={selectedPoint.items}\n                activeTab={activeTab}\n                groupBy={groupBy}\n                styles={styles}\n                utilities={utilities}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.distributionChart}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  distributionChart: settings\n                })}\n              />\n            </div>\n            \n            {/* Detail Table */}\n            <div style={{ flex: 1, overflow: ''auto'' }}>\n              <AIDetailTable\n                data={selectedPoint.items}\n                activeTab={activeTab}\n                styles={styles}\n                utilities={utilities}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.detailTable}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  detailTable: settings\n                })}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","dependencies":[{"name":"AITimeSeriesChart","location":"embedded","title":"AI Time Series Chart","description":"Multi-line time series chart with dual Y-axes showing AI runs, token usage, and costs over time","type":"chart","functionalRequirements":"## Time Series Chart Requirements\n\n### Core Functionality\n- Display three data series: total runs, total tokens, total cost\n- Dual Y-axis configuration (left: tokens, right: runs and cost)\n- Interactive tooltips showing all values on hover\n- Click on data points to trigger drill-down\n- Smooth line interpolation with data point markers\n- Legend with series toggle capability\n- Responsive to container size changes\n\n### Visual Features\n- Consistent color coding (runs: blue, tokens: green, cost: orange)\n- Grid lines for better readability\n- Axis labels with appropriate formatting\n- Highlighted selection state for clicked points\n- Animated transitions on data updates\n- Zero-baseline for better comparison","dataRequirements":{"mode":"views","description":"Receives aggregated time series data from parent component","entities":[{"name":"MJ: AI Prompt Runs","description":"Historical prompt execution data for performance analysis","displayFields":["ID","PromptID","Prompt","ModelID","Model","RunAt","CompletedAt","Success","TokensUsed","TotalCost"],"filterFields":["RunAt","Success","PromptID","ModelID"],"sortFields":["RunAt"],"fieldMetadata":[{"name":"ID","type":"uniqueidentifier","isPrimaryKey":true,"allowsNull":false,"description":"Unique run identifier"},{"name":"PromptID","type":"uniqueidentifier","allowsNull":false,"description":"Reference to AI Prompt"},{"name":"Prompt","type":"nvarchar","allowsNull":true,"description":"Prompt name (denormalized)"},{"name":"RunAt","type":"datetime","allowsNull":false,"description":"Execution timestamp"},{"name":"TokensUsed","type":"int","allowsNull":true,"description":"Total tokens consumed"},{"name":"TotalCost","type":"decimal","allowsNull":true,"description":"Total cost in USD"}],"permissionLevelNeeded":["read"]}],"queries":[]},"technicalDesign":"## Technical Design\n\n### Props\n- data: Array of aggregated data points with date, runs, tokens, cost\n- groupBy: Current grouping (day/week/month/quarter)\n- activeTab: Current view (agents/prompts)\n- selectedPoint: Currently selected data point\n- onPointClick: Callback when point is clicked\n\n### Chart Configuration\n- Uses recharts library for rendering\n- Dual Y-axis setup with synchronized tooltips\n- Custom tick formatters for large numbers\n- Responsive container with aspect ratio preservation","properties":[{"name":"data","type":"array","required":true,"description":"Array of time series data points"},{"name":"groupBy","type":"string","required":true,"description":"Time grouping: day, week, month, or quarter"},{"name":"activeTab","type":"string","required":true,"description":"Current tab: agents or prompts"},{"name":"selectedPoint","type":"object","required":true,"description":"Currently selected data point"},{"name":"onPointClick","type":"function","required":true,"description":"Callback when a data point is clicked"}],"events":[{"name":"onPointClick","description":"Fired when user clicks on a data point","payload":"Data point object with date and values"}],"exampleUsage":"<AITimeSeriesChart data={chartData} groupBy=\"day\" activeTab=\"agents\" onPointClick={handleChartClick} />","code":"function AITimeSeriesChart({ data, groupBy, activeTab, selectedPoint, onPointClick, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AITimeSeriesChart] Rendering with'', data.length, ''data points'');\n  \n  // Format large numbers\n  const formatNumber = (value) => {\n    if (value >= 1000000) {\n      return `$' + '{(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$' + '{(value / 1000).toFixed(1)}K`;\n    }\n    return value.toFixed(0);\n  };\n  \n  // Format currency\n  const formatCurrency = (value) => {\n    if (value >= 1000) {\n      return `$$' + '{(value / 1000).toFixed(1)}K`;\n    }\n    return `$$' + '{value.toFixed(2)}`;\n  };\n  \n  // Format date based on grouping\n  const formatDate = (date) => {\n    const d = new Date(date);\n    switch(groupBy) {\n      case ''day'':\n        return d.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'' });\n      case ''week'':\n        return `Week of $' + '{d.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'' })}`;\n      case ''month'':\n        return d.toLocaleDateString(''en-US'', { month: ''short'', year: ''numeric'' });\n      case ''quarter'':\n        return date; // Already formatted as YYYY-Q#\n      default:\n        return date;\n    }\n  };\n  \n  // Prepare chart data\n  const chartData = useMemo(() => {\n    return data.map(point => ({\n      ...point,\n      displayDate: formatDate(point.date),\n      isSelected: selectedPoint?.date === point.date\n    }));\n  }, [data, selectedPoint, groupBy]);\n  \n  // Calculate max values for axis domains\n  const maxTokens = useMemo(() => Math.max(...data.map(d => d.tokens || 0)), [data]);\n  const maxRuns = useMemo(() => Math.max(...data.map(d => d.runs || 0)), [data]);\n  const maxCost = useMemo(() => Math.max(...data.map(d => d.cost || 0)), [data]);\n  \n  // Use a simple SVG chart since we can''t use external libraries\n  const width = 800;\n  const height = 400;\n  const margin = { top: 20, right: 80, bottom: 60, left: 80 };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  \n  // Create scales\n  const xScale = (index) => (index / (chartData.length - 1)) * innerWidth;\n  const yScaleTokens = (value) => innerHeight - (value / maxTokens) * innerHeight;\n  const yScaleRight = (value, max) => innerHeight - (value / max) * innerHeight;\n  \n  // Create path data for lines\n  const createPath = (data, valueKey, scale, max) => {\n    return data.map((d, i) => {\n      const x = xScale(i);\n      const y = scale(d[valueKey] || 0, max);\n      return `$' + '{i === 0 ? ''M'' : ''L''} $' + '{x} $' + '{y}`;\n    }).join('' '');\n  };\n  \n  const handlePointClick = (point) => {\n    console.log(''[AITimeSeriesChart] Point clicked:'', point);\n    onPointClick(point);\n  };\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      padding: styles.spacing.md,\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      <h3 style={{\n        margin: `0 0 $' + '{styles.spacing.md} 0`,\n        color: styles.colors.text,\n        fontSize: styles.typography.fontSize.lg\n      }}>\n        Performance Trends - {activeTab === ''agents'' ? ''Agent Runs'' : ''Prompt Runs''}\n      </h3>\n      \n      {/* Chart Container */}\n      <div style={{ flex: 1, position: ''relative'', minHeight: ''300px'' }}>\n        {chartData.length === 0 ? (\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            height: ''100%'',\n            color: styles.colors.textSecondary\n          }}>\n            No data available for the selected period\n          </div>\n        ) : (\n          <svg\n            viewBox={`0 0 $' + '{width} $' + '{height}`}\n            style={{ width: ''100%'', height: ''100%'' }}\n            preserveAspectRatio=\"xMidYMid meet\"\n          >\n            <g transform={`translate($' + '{margin.left}, $' + '{margin.top})`}>\n              {/* Grid lines */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <line\n                  key={tick}\n                  x1={0}\n                  x2={innerWidth}\n                  y1={innerHeight * (1 - tick)}\n                  y2={innerHeight * (1 - tick)}\n                  stroke={styles.colors.border}\n                  strokeOpacity={0.3}\n                  strokeDasharray=\"2,2\"\n                />\n              ))}\n              \n              {/* X-axis labels */}\n              {chartData.map((point, i) => {\n                if (chartData.length > 20 && i % Math.ceil(chartData.length / 10) !== 0) {\n                  return null;\n                }\n                return (\n                  <text\n                    key={i}\n                    x={xScale(i)}\n                    y={innerHeight + 20}\n                    textAnchor=\"middle\"\n                    fill={styles.colors.textSecondary}\n                    fontSize=\"12\"\n                  >\n                    {point.displayDate}\n                  </text>\n                );\n              })}\n              \n              {/* Y-axis labels (left - tokens) */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <text\n                  key={tick}\n                  x={-10}\n                  y={innerHeight * (1 - tick) + 5}\n                  textAnchor=\"end\"\n                  fill={styles.colors.textSecondary}\n                  fontSize=\"12\"\n                >\n                  {formatNumber(maxTokens * tick)}\n                </text>\n              ))}\n              \n              {/* Y-axis labels (right - cost) */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <text\n                  key={tick}\n                  x={innerWidth + 10}\n                  y={innerHeight * (1 - tick) + 5}\n                  textAnchor=\"start\"\n                  fill={styles.colors.textSecondary}\n                  fontSize=\"12\"\n                >\n                  {formatCurrency(maxCost * tick)}\n                </text>\n              ))}\n              \n              {/* Lines */}\n              <path\n                d={createPath(chartData, ''tokens'', yScaleTokens, maxTokens)}\n                fill=\"none\"\n                stroke={styles.colors.success || ''#10b981''}\n                strokeWidth=\"2\"\n              />\n              <path\n                d={createPath(chartData, ''runs'', yScaleRight, maxRuns)}\n                fill=\"none\"\n                stroke={styles.colors.primary || ''#3b82f6''}\n                strokeWidth=\"2\"\n              />\n              <path\n                d={createPath(chartData, ''cost'', yScaleRight, maxCost)}\n                fill=\"none\"\n                stroke={styles.colors.warning || ''#f59e0b''}\n                strokeWidth=\"2\"\n              />\n              \n              {/* Data points */}\n              {chartData.map((point, i) => (\n                <g key={i}>\n                  {/* Tokens */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleTokens(point.tokens || 0)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.success || ''#10b981''}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: ''pointer'' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                  {/* Runs */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleRight(point.runs || 0, maxRuns)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.primary || ''#3b82f6''}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: ''pointer'' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                  {/* Cost */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleRight(point.cost || 0, maxCost)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.warning || ''#f59e0b''}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: ''pointer'' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                </g>\n              ))}\n            </g>\n            \n            {/* Axis labels */}\n            <text\n              x={margin.left - 40}\n              y={height / 2}\n              transform={`rotate(-90, $' + '{margin.left - 40}, $' + '{height / 2})`}\n              textAnchor=\"middle\"\n              fill={styles.colors.textSecondary}\n              fontSize=\"14\"\n            >\n              Tokens\n            </text>\n            <text\n              x={width - margin.right + 40}\n              y={height / 2}\n              transform={`rotate(90, $' + '{width - margin.right + 40}, $' + '{height / 2})`}\n              textAnchor=\"middle\"\n              fill={styles.colors.textSecondary}\n              fontSize=\"14\"\n            >\n              Runs / Cost ($)\n            </text>\n          </svg>\n        )}\n      </div>\n      \n      {/* Legend */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        gap: styles.spacing.lg,\n        marginTop: styles.spacing.md\n      }}>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''12px'',\n            height: ''12px'',\n            backgroundColor: styles.colors.primary || ''#3b82f6'',\n            borderRadius: ''2px''\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Runs</span>\n        </div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''12px'',\n            height: ''12px'',\n            backgroundColor: styles.colors.success || ''#10b981'',\n            borderRadius: ''2px''\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Tokens</span>\n        </div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''12px'',\n            height: ''12px'',\n            backgroundColor: styles.colors.warning || ''#f59e0b'',\n            borderRadius: ''2px''\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Cost</span>\n        </div>\n      </div>\n    </div>\n  );\n}","dependencies":[],"libraries":[]},{"name":"AIDistributionChart","location":"embedded","title":"AI Distribution Chart","description":"Pie and bar charts showing distribution of runs, tokens, and costs by agent or prompt for drill-down analysis","type":"chart","functionalRequirements":"## Distribution Chart Requirements\n\n### Core Functionality\n- Display distribution breakdown for selected time period\n- Toggle between pie chart and bar chart views\n- Show top 10 items with ''Others'' grouping\n- Display runs, tokens, and cost metrics\n- Interactive tooltips with detailed values\n- Click on segments to filter detail table\n- Color-coded segments with legend\n\n### Visual Features\n- Smooth transitions between chart types\n- Percentage labels on pie segments\n- Value labels on bar chart\n- Responsive sizing\n- Hover effects for interactivity","dataRequirements":{"mode":"views","description":"Receives drill-down data from parent component","entities":[{"name":"MJ: AI Prompt Runs","description":"Historical prompt execution data for performance analysis","displayFields":["ID","PromptID","Prompt","ModelID","Model","RunAt","CompletedAt","Success","TokensUsed","TotalCost"],"filterFields":["RunAt","Success","PromptID","ModelID"],"sortFields":["RunAt"],"fieldMetadata":[{"name":"ID","type":"uniqueidentifier","isPrimaryKey":true,"allowsNull":false,"description":"Unique run identifier"},{"name":"PromptID","type":"uniqueidentifier","allowsNull":false,"description":"Reference to AI Prompt"},{"name":"Prompt","type":"nvarchar","allowsNull":true,"description":"Prompt name (denormalized)"},{"name":"RunAt","type":"datetime","allowsNull":false,"description":"Execution timestamp"},{"name":"TokensUsed","type":"int","allowsNull":true,"description":"Total tokens consumed"},{"name":"TotalCost","type":"decimal","allowsNull":true,"description":"Total cost in USD"}],"permissionLevelNeeded":["read"]}],"queries":[]},"technicalDesign":"## Technical Design\n\n### Props\n- data: Array of items for selected period\n- activeTab: Current view (agents/prompts)\n- groupBy: Time grouping context\n\n### Chart Features\n- Aggregates data by agent/prompt\n- Calculates percentages\n- Sorts by total value\n- Groups small items into ''Others''","properties":[{"name":"data","type":"array","required":true,"description":"Array of run items for distribution analysis"},{"name":"activeTab","type":"string","required":true,"description":"Current tab: agents or prompts"},{"name":"groupBy","type":"string","required":true,"description":"Time grouping context"}],"events":[],"exampleUsage":"<AIDistributionChart data={selectedPoint.items} activeTab=\"agents\" />","code":"function AIDistributionChart({ data, activeTab, groupBy, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIDistributionChart] Rendering with'', data?.length || 0, ''items'');\n  \n  const [chartType, setChartType] = useState(savedUserSettings?.chartType || ''pie'');\n  const [metric, setMetric] = useState(savedUserSettings?.metric || ''cost'');\n  \n  // Aggregate data by agent or prompt\n  const aggregatedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n    \n    const grouped = {};\n    const groupField = activeTab === ''agents'' ? ''Agent'' : ''Prompt'';\n    const idField = activeTab === ''agents'' ? ''AgentID'' : ''PromptID'';\n    \n    data.forEach(item => {\n      const key = item[groupField] || item[idField] || ''Unknown'';\n      if (!grouped[key]) {\n        grouped[key] = {\n          name: key,\n          runs: 0,\n          tokens: 0,\n          cost: 0\n        };\n      }\n      grouped[key].runs++;\n      grouped[key].tokens += (item.TotalTokensUsed || item.TokensUsed || 0);\n      grouped[key].cost += (item.TotalCost || 0);\n    });\n    \n    // Sort by selected metric and take top 10\n    const sorted = Object.values(grouped)\n      .sort((a, b) => b[metric] - a[metric])\n      .slice(0, 10);\n    \n    // Calculate total for percentages\n    const total = sorted.reduce((sum, item) => sum + item[metric], 0);\n    \n    return sorted.map(item => ({\n      ...item,\n      percentage: total > 0 ? (item[metric] / total) * 100 : 0\n    }));\n  }, [data, activeTab, metric]);\n  \n  // Color palette\n  const colors = [\n    ''#3b82f6'', ''#10b981'', ''#f59e0b'', ''#ef4444'', ''#8b5cf6'',\n    ''#ec4899'', ''#14b8a6'', ''#f97316'', ''#06b6d4'', ''#84cc16''\n  ];\n  \n  const handleChartTypeChange = (type) => {\n    setChartType(type);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      chartType: type\n    });\n  };\n  \n  const handleMetricChange = (newMetric) => {\n    setMetric(newMetric);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      metric: newMetric\n    });\n  };\n  \n  const formatValue = (value) => {\n    if (metric === ''cost'') {\n      return `$$' + '{value.toFixed(2)}`;\n    } else if (metric === ''tokens'') {\n      return value >= 1000000 ? `$' + '{(value / 1000000).toFixed(1)}M` : value >= 1000 ? `$' + '{(value / 1000).toFixed(1)}K` : value.toString();\n    }\n    return value.toString();\n  };\n  \n  // Calculate pie chart segments\n  const calculatePieSegments = () => {\n    let startAngle = -90; // Start from top\n    return aggregatedData.map((item, index) => {\n      const angle = (item.percentage / 100) * 360;\n      const segment = {\n        ...item,\n        startAngle,\n        endAngle: startAngle + angle,\n        color: colors[index % colors.length]\n      };\n      startAngle += angle;\n      return segment;\n    });\n  };\n  \n  const pieSegments = chartType === ''pie'' ? calculatePieSegments() : [];\n  \n  // Create pie slice path\n  const createPieSlice = (startAngle, endAngle, outerRadius, innerRadius = 0) => {\n    const startAngleRad = (startAngle * Math.PI) / 180;\n    const endAngleRad = (endAngle * Math.PI) / 180;\n    \n    const x1 = Math.cos(startAngleRad) * outerRadius;\n    const y1 = Math.sin(startAngleRad) * outerRadius;\n    const x2 = Math.cos(endAngleRad) * outerRadius;\n    const y2 = Math.sin(endAngleRad) * outerRadius;\n    \n    const largeArc = endAngle - startAngle > 180 ? 1 : 0;\n    \n    if (innerRadius > 0) {\n      const ix1 = Math.cos(startAngleRad) * innerRadius;\n      const iy1 = Math.sin(startAngleRad) * innerRadius;\n      const ix2 = Math.cos(endAngleRad) * innerRadius;\n      const iy2 = Math.sin(endAngleRad) * innerRadius;\n      \n      return `M $' + '{ix1} $' + '{iy1} L $' + '{x1} $' + '{y1} A $' + '{outerRadius} $' + '{outerRadius} 0 $' + '{largeArc} 1 $' + '{x2} $' + '{y2} L $' + '{ix2} $' + '{iy2} A $' + '{innerRadius} $' + '{innerRadius} 0 $' + '{largeArc} 0 $' + '{ix1} $' + '{iy1}`;\n    }\n    \n    return `M 0 0 L $' + '{x1} $' + '{y1} A $' + '{outerRadius} $' + '{outerRadius} 0 $' + '{largeArc} 1 $' + '{x2} $' + '{y2} Z`;\n  };\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      padding: styles.spacing.md,\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      {/* Header */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center'',\n        marginBottom: styles.spacing.md\n      }}>\n        <h3 style={{\n          margin: 0,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.lg\n        }}>\n          Distribution by {activeTab === ''agents'' ? ''Agent'' : ''Prompt''}\n        </h3>\n        \n        {/* Controls */}\n        <div style={{ display: ''flex'', gap: styles.spacing.sm }}>\n          {/* Metric Selector */}\n          <select\n            value={metric}\n            onChange={(e) => handleMetricChange(e.target.value)}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              backgroundColor: styles.colors.background,\n              color: styles.colors.text,\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            <option value=\"cost\">Cost</option>\n            <option value=\"tokens\">Tokens</option>\n            <option value=\"runs\">Runs</option>\n          </select>\n          \n          {/* Chart Type Toggle */}\n          <div style={{\n            display: ''flex'',\n            backgroundColor: styles.colors.background,\n            borderRadius: styles.borders?.radius || ''4px'',\n            border: `1px solid $' + '{styles.colors.border}`\n          }}>\n            <button\n              onClick={() => handleChartTypeChange(''pie'')}\n              style={{\n                padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n                backgroundColor: chartType === ''pie'' ? styles.colors.primary : ''transparent'',\n                color: chartType === ''pie'' ? ''white'' : styles.colors.text,\n                border: ''none'',\n                borderRadius: styles.borders?.radius || ''4px'',\n                cursor: ''pointer''\n              }}\n            >\n              Pie\n            </button>\n            <button\n              onClick={() => handleChartTypeChange(''bar'')}\n              style={{\n                padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n                backgroundColor: chartType === ''bar'' ? styles.colors.primary : ''transparent'',\n                color: chartType === ''bar'' ? ''white'' : styles.colors.text,\n                border: ''none'',\n                borderRadius: styles.borders?.radius || ''4px'',\n                cursor: ''pointer''\n              }}\n            >\n              Bar\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Chart */}\n      <div style={{ flex: 1, display: ''flex'', alignItems: ''center'', justifyContent: ''center'' }}>\n        {aggregatedData.length === 0 ? (\n          <div style={{ color: styles.colors.textSecondary }}>\n            No data available\n          </div>\n        ) : chartType === ''pie'' ? (\n          /* Pie Chart */\n          <svg viewBox=\"-150 -150 300 300\" style={{ maxWidth: ''300px'', maxHeight: ''300px'' }}>\n            {pieSegments.map((segment, index) => (\n              <g key={index}>\n                <path\n                  d={createPieSlice(segment.startAngle, segment.endAngle, 100, 50)}\n                  fill={segment.color}\n                  stroke=\"white\"\n                  strokeWidth=\"2\"\n                  opacity=\"0.9\"\n                  style={{ cursor: ''pointer'' }}\n                >\n                  <title>{segment.name}: {formatValue(segment[metric])} ({segment.percentage.toFixed(1)}%)</title>\n                </path>\n                {/* Label for large segments */}\n                {segment.percentage > 5 && (\n                  <text\n                    x={Math.cos(((segment.startAngle + segment.endAngle) / 2) * Math.PI / 180) * 75}\n                    y={Math.sin(((segment.startAngle + segment.endAngle) / 2) * Math.PI / 180) * 75}\n                    textAnchor=\"middle\"\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    fontWeight=\"bold\"\n                  >\n                    {segment.percentage.toFixed(0)}%\n                  </text>\n                )}\n              </g>\n            ))}\n          </svg>\n        ) : (\n          /* Bar Chart */\n          <div style={{\n            width: ''100%'',\n            maxWidth: ''400px'',\n            display: ''flex'',\n            flexDirection: ''column'',\n            gap: styles.spacing.xs\n          }}>\n            {aggregatedData.map((item, index) => {\n              const maxValue = Math.max(...aggregatedData.map(d => d[metric]));\n              const width = (item[metric] / maxValue) * 100;\n              \n              return (\n                <div key={index} style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.sm }}>\n                  <div style={{\n                    width: ''120px'',\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.text,\n                    overflow: ''hidden'',\n                    textOverflow: ''ellipsis'',\n                    whiteSpace: ''nowrap''\n                  }}>\n                    {item.name}\n                  </div>\n                  <div style={{\n                    flex: 1,\n                    height: ''24px'',\n                    backgroundColor: styles.colors.background,\n                    borderRadius: styles.borders?.radius || ''4px'',\n                    position: ''relative'',\n                    overflow: ''hidden''\n                  }}>\n                    <div style={{\n                      width: `$' + '{width}%`,\n                      height: ''100%'',\n                      backgroundColor: colors[index % colors.length],\n                      transition: ''width 0.3s ease''\n                    }} />\n                    <div style={{\n                      position: ''absolute'',\n                      right: styles.spacing.sm,\n                      top: ''50%'',\n                      transform: ''translateY(-50%)'',\n                      fontSize: styles.typography.fontSize.xs,\n                      color: width > 50 ? ''white'' : styles.colors.text,\n                      fontWeight: ''500''\n                    }}>\n                      {formatValue(item[metric])}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n      \n      {/* Legend */}\n      {chartType === ''pie'' && aggregatedData.length > 0 && (\n        <div style={{\n          display: ''flex'',\n          flexWrap: ''wrap'',\n          gap: styles.spacing.sm,\n          justifyContent: ''center'',\n          marginTop: styles.spacing.md\n        }}>\n          {aggregatedData.slice(0, 5).map((item, index) => (\n            <div key={index} style={{\n              display: ''flex'',\n              alignItems: ''center'',\n              gap: styles.spacing.xs\n            }}>\n              <div style={{\n                width: ''12px'',\n                height: ''12px'',\n                backgroundColor: colors[index % colors.length],\n                borderRadius: ''2px''\n              }} />\n              <span style={{\n                fontSize: styles.typography.fontSize.xs,\n                color: styles.colors.text,\n                maxWidth: ''100px'',\n                overflow: ''hidden'',\n                textOverflow: ''ellipsis'',\n                whiteSpace: ''nowrap''\n              }}>\n                {item.name}\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","dependencies":[],"libraries":[]},{"name":"AIDetailTable","location":"embedded","title":"AI Detail Table","description":"Detailed table view showing individual runs for drill-down analysis with sorting and filtering","type":"table","functionalRequirements":"## Detail Table Requirements\n\n### Core Functionality\n- Display individual run records in a sortable table\n- Show key fields: timestamp, name, success status, tokens, cost, execution time\n- Color-coded success/failure indicators\n- Sortable columns with visual indicators\n- Paginated results for large datasets\n- Export to CSV functionality\n- Expandable rows for additional details\n\n### Table Features\n- Responsive column widths\n- Hover row highlighting\n- Sticky header during scroll\n- Loading state for data updates\n- Empty state message","dataRequirements":{"mode":"views","description":"Receives detailed run data from parent component","entities":[{"name":"MJ: AI Agent Runs","description":"Historical agent execution data for performance analysis","displayFields":["ID","AgentID","Agent","StartedAt","CompletedAt","Success","TotalTokensUsed","TotalCost"],"filterFields":["StartedAt","Success","AgentID"],"sortFields":["StartedAt"],"fieldMetadata":[{"name":"ID","type":"uniqueidentifier","isPrimaryKey":true,"allowsNull":false,"description":"Unique run identifier"},{"name":"AgentID","type":"uniqueidentifier","allowsNull":false,"description":"Reference to AI Agent"},{"name":"Agent","type":"nvarchar","allowsNull":true,"description":"Agent name (denormalized)"},{"name":"StartedAt","type":"datetime","allowsNull":false,"description":"Execution start timestamp"},{"name":"TotalTokensUsed","type":"int","allowsNull":true,"description":"Total tokens consumed"},{"name":"TotalCost","type":"decimal","allowsNull":true,"description":"Total cost in USD"}],"permissionLevelNeeded":["read"]},{"name":"MJ: AI Prompt Runs","description":"Historical prompt execution data for performance analysis","displayFields":["ID","PromptID","Prompt","ModelID","Model","RunAt","CompletedAt","Success","TokensUsed","TotalCost"],"filterFields":["RunAt","Success","PromptID","ModelID"],"sortFields":["RunAt"],"fieldMetadata":[{"name":"ID","type":"uniqueidentifier","isPrimaryKey":true,"allowsNull":false,"description":"Unique run identifier"},{"name":"PromptID","type":"uniqueidentifier","allowsNull":false,"description":"Reference to AI Prompt"},{"name":"Prompt","type":"nvarchar","allowsNull":true,"description":"Prompt name (denormalized)"},{"name":"RunAt","type":"datetime","allowsNull":false,"description":"Execution timestamp"},{"name":"TokensUsed","type":"int","allowsNull":true,"description":"Total tokens consumed"},{"name":"TotalCost","type":"decimal","allowsNull":true,"description":"Total cost in USD"}],"permissionLevelNeeded":["read"]}],"queries":[]},"technicalDesign":"## Technical Design\n\n### Props\n- data: Array of run records\n- activeTab: Current view context (agents/prompts)\n\n### Table Management\n- Client-side sorting\n- Pagination with 25 rows per page\n- Column sorting state management\n- Row expansion for details","properties":[{"name":"data","type":"array","required":true,"description":"Array of run records to display"},{"name":"activeTab","type":"string","required":true,"description":"Current tab: agents or prompts"}],"events":[],"exampleUsage":"<AIDetailTable data={selectedPoint.items} activeTab=\"agents\" />","code":"function AIDetailTable({ data, activeTab, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIDetailTable] Rendering with'', data?.length || 0, ''items'');\n  \n  // Load DataExportPanel component\n  const DataExportPanel = components[''DataExportPanel''];\n  \n  const [sortField, setSortField] = useState(savedUserSettings?.sortField || ''timestamp'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''desc'');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [expandedRows, setExpandedRows] = useState(new Set());\n  \n  const rowsPerPage = 25;\n  \n  // Get the correct timestamp field\n  const timestampField = activeTab === ''agents'' ? ''StartedAt'' : ''RunAt'';\n  const nameField = activeTab === ''agents'' ? ''Agent'' : ''Prompt'';\n  const idField = activeTab === ''agents'' ? ''AgentID'' : ''PromptID'';\n  \n  // Sort data\n  const sortedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n    \n    const sorted = [...data].sort((a, b) => {\n      let aVal = a[sortField];\n      let bVal = b[sortField];\n      \n      // Handle null/undefined\n      if (aVal == null) return sortDirection === ''asc'' ? 1 : -1;\n      if (bVal == null) return sortDirection === ''asc'' ? -1 : 1;\n      \n      // Compare values\n      if (typeof aVal === ''string'') {\n        aVal = aVal.toLowerCase();\n        bVal = bVal.toLowerCase();\n      }\n      \n      if (aVal < bVal) return sortDirection === ''asc'' ? -1 : 1;\n      if (aVal > bVal) return sortDirection === ''asc'' ? 1 : -1;\n      return 0;\n    });\n    \n    return sorted;\n  }, [data, sortField, sortDirection]);\n  \n  // Paginate data\n  const paginatedData = useMemo(() => {\n    const start = currentPage * rowsPerPage;\n    const end = start + rowsPerPage;\n    return sortedData.slice(start, end);\n  }, [sortedData, currentPage, rowsPerPage]);\n  \n  const totalPages = Math.ceil(sortedData.length / rowsPerPage);\n  \n  const handleSort = (field) => {\n    if (sortField === field) {\n      const newDirection = sortDirection === ''asc'' ? ''desc'' : ''asc'';\n      setSortDirection(newDirection);\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: newDirection\n      });\n    } else {\n      setSortField(field);\n      setSortDirection(''asc'');\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: ''asc''\n      });\n    }\n    setCurrentPage(0);\n  };\n  \n  const toggleRowExpansion = (id) => {\n    const newExpanded = new Set(expandedRows);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedRows(newExpanded);\n  };\n  \n  const formatTimestamp = (timestamp) => {\n    if (!timestamp) return ''-'';\n    const date = new Date(timestamp);\n    return date.toLocaleString(''en-US'', {\n      month: ''short'',\n      day: ''numeric'',\n      hour: ''2-digit'',\n      minute: ''2-digit''\n    });\n  };\n  \n  const formatDuration = (ms) => {\n    if (!ms) return ''-'';\n    if (ms < 1000) return `$' + '{ms}ms`;\n    if (ms < 60000) return `$' + '{(ms / 1000).toFixed(1)}s`;\n    return `$' + '{(ms / 60000).toFixed(1)}m`;\n  };\n  \n  // Prepare data for export\n  const prepareExportData = () => {\n    return sortedData.map(item => {\n      const exportRow = {\n        Timestamp: item[timestampField],\n        Name: item[nameField] || item[idField],\n        Success: item.Success ? ''Yes'' : ''No'',\n        Tokens: (item.TotalTokensUsed || item.TokensUsed) || 0,\n        Cost: item.TotalCost || 0,\n        Model: item.Model || ''Unknown'',\n        Status: item.Status || ''Unknown''\n      };\n      \n      // Add Duration for prompts\n      if (activeTab === ''prompts'') {\n        exportRow.Duration = item.ExecutionTimeMS || 0;\n      }\n      \n      return exportRow;\n    });\n  };\n\n  // Define export columns with correct key/label format\n  const getExportColumns = () => {\n    const columns = [\n      { key: ''Timestamp'', label: ''Timestamp'' },\n      { key: ''Name'', label: activeTab === ''agents'' ? ''Agent'' : ''Prompt'' },\n      { key: ''Success'', label: ''Status'' },\n      { key: ''Tokens'', label: ''Tokens'' },\n      { key: ''Cost'', label: ''Cost'' },\n      { key: ''Model'', label: ''Model'' },\n      { key: ''Status'', label: ''Status'' }\n    ];\n    \n    if (activeTab === ''prompts'') {\n      columns.push({ key: ''Duration'', label: ''Duration (ms)'' });\n    }\n    \n    return columns;\n  };\n  \n  const columns = [\n    { field: timestampField, label: ''Timestamp'', width: ''150px'' },\n    { field: nameField, label: activeTab === ''agents'' ? ''Agent'' : ''Prompt'', width: ''auto'' },\n    { field: ''Success'', label: ''Status'', width: ''80px'' },\n    { field: ''TotalTokens'', label: ''Tokens'', width: ''100px'' },\n    { field: ''TotalCost'', label: ''Cost'', width: ''100px'' }\n  ];\n  \n  // Add Duration column only for Prompt Runs (Agent Runs don''t have ExecutionTimeMS)\n  if (activeTab === ''prompts'') {\n    columns.push({ field: ''ExecutionTimeMS'', label: ''Duration'', width: ''100px'' });\n  }\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      {/* Header */}\n      <div style={{\n        padding: styles.spacing.md,\n        borderBottom: `1px solid $' + '{styles.colors.border}`,\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center''\n      }}>\n        <h3 style={{\n          margin: 0,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.lg\n        }}>\n          Detailed Records ({sortedData.length})\n        </h3>\n        \n        {DataExportPanel && (\n          <DataExportPanel\n            data={prepareExportData()}\n            columns={getExportColumns()}\n            filename={`ai-$' + '{activeTab}-details-$' + '{new Date().toISOString().split(''T'')[0]}`}\n            formats={[''csv'', ''excel'']}\n            buttonStyle=\"dropdown\"\n            buttonText=\"Export\"\n            icon=\"fa-download\"\n            customStyles={{\n              button: {\n                padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: styles.borders?.radius || ''4px'',\n                cursor: ''pointer'',\n                fontSize: styles.typography.fontSize.sm\n              }\n            }}\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n          />\n        )}\n      </div>\n      \n      {/* Table */}\n      <div style={{ flex: 1, overflow: ''auto'' }}>\n        {paginatedData.length === 0 ? (\n          <div style={{\n            padding: styles.spacing.xl,\n            textAlign: ''center'',\n            color: styles.colors.textSecondary\n          }}>\n            No records to display\n          </div>\n        ) : (\n          <table style={{\n            width: ''100%'',\n            borderCollapse: ''collapse''\n          }}>\n            <thead style={{\n              position: ''sticky'',\n              top: 0,\n              backgroundColor: styles.colors.surface,\n              borderBottom: `2px solid $' + '{styles.colors.border}`\n            }}>\n              <tr>\n                <th style={{ width: ''30px'', padding: styles.spacing.sm }} />\n                {columns.map(col => (\n                  <th\n                    key={col.field}\n                    onClick={() => handleSort(col.field)}\n                    style={{\n                      padding: styles.spacing.sm,\n                      textAlign: ''left'',\n                      color: styles.colors.text,\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: ''600'',\n                      cursor: ''pointer'',\n                      userSelect: ''none'',\n                      width: col.width\n                    }}\n                  >\n                    <div style={{\n                      display: ''flex'',\n                      alignItems: ''center'',\n                      gap: styles.spacing.xs\n                    }}>\n                      {col.label}\n                      {sortField === col.field && (\n                        <span style={{ fontSize: ''10px'' }}>\n                          {sortDirection === ''asc'' ? ''▲'' : ''▼''}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {paginatedData.map((row, index) => {\n                const isExpanded = expandedRows.has(row.ID);\n                return (\n                  <React.Fragment key={row.ID || index}>\n                    <tr style={{\n                      borderBottom: `1px solid $' + '{styles.colors.border}`,\n                      transition: ''background-color 0.2s'',\n                      backgroundColor: index % 2 === 0 ? ''transparent'' : styles.colors.background\n                    }}>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        textAlign: ''center''\n                      }}>\n                        <button\n                          onClick={() => toggleRowExpansion(row.ID)}\n                          style={{\n                            background: ''none'',\n                            border: ''none'',\n                            cursor: ''pointer'',\n                            color: styles.colors.textSecondary,\n                            padding: 0,\n                            fontSize: ''12px''\n                          }}\n                        >\n                          {isExpanded ? ''▼'' : ''▶''}\n                        </button>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text\n                      }}>\n                        {formatTimestamp(row[timestampField])}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        overflow: ''hidden'',\n                        textOverflow: ''ellipsis'',\n                        whiteSpace: ''nowrap'',\n                        maxWidth: ''200px''\n                      }}>\n                        {row[nameField] || row[idField] || ''-''}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm\n                      }}>\n                        <span style={{\n                          display: ''inline-block'',\n                          padding: `2px 8px`,\n                          borderRadius: ''12px'',\n                          backgroundColor: row.Success ? styles.colors.success + ''20'' : styles.colors.error + ''20'',\n                          color: row.Success ? styles.colors.success : styles.colors.error,\n                          fontSize: ''11px'',\n                          fontWeight: ''600''\n                        }}>\n                          {row.Success ? ''Success'' : ''Failed''}\n                        </span>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: ''right''\n                      }}>\n                        {(row.TotalTokensUsed || row.TokensUsed) ? (row.TotalTokensUsed || row.TokensUsed).toLocaleString() : ''-''}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: ''right''\n                      }}>\n                        {row.TotalCost ? `$$' + '{row.TotalCost.toFixed(4)}` : ''-''}\n                      </td>\n                      {activeTab === ''prompts'' && (\n                        <td style={{\n                          padding: styles.spacing.sm,\n                          fontSize: styles.typography.fontSize.sm,\n                          color: styles.colors.text,\n                          textAlign: ''right''\n                        }}>\n                          {formatDuration(row.ExecutionTimeMS)}\n                        </td>\n                      )}\n                    </tr>\n                    {isExpanded && (\n                      <tr>\n                        <td colSpan={columns.length + 1} style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.background,\n                          borderBottom: `1px solid $' + '{styles.colors.border}`\n                        }}>\n                          <div style={{\n                            display: ''grid'',\n                            gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'',\n                            gap: styles.spacing.md,\n                            fontSize: styles.typography.fontSize.sm\n                          }}>\n                            <div>\n                              <strong style={{ color: styles.colors.textSecondary }}>ID:</strong>\n                              <div style={{ color: styles.colors.text, fontFamily: ''monospace'' }}>\n                                {row.ID}\n                              </div>\n                            </div>\n                            {row.ErrorMessage && (\n                              <div style={{ gridColumn: ''1 / -1'' }}>\n                                <strong style={{ color: styles.colors.textSecondary }}>Error:</strong>\n                                <div style={{ color: styles.colors.error }}>\n                                  {row.ErrorMessage}\n                                </div>\n                              </div>\n                            )}\n                            {row.Model && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Model:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {row.Model}\n                                </div>\n                              </div>\n                            )}\n                            {row.CompletedAt && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Completed:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {formatTimestamp(row.CompletedAt)}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n      </div>\n      \n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div style={{\n          padding: styles.spacing.md,\n          borderTop: `1px solid $' + '{styles.colors.border}`,\n          display: ''flex'',\n          justifyContent: ''center'',\n          alignItems: ''center'',\n          gap: styles.spacing.sm\n        }}>\n          <button\n            onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}\n            disabled={currentPage === 0}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              backgroundColor: currentPage === 0 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === 0 ? styles.colors.textSecondary : ''white'',\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: currentPage === 0 ? ''not-allowed'' : ''pointer'',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Previous\n          </button>\n          \n          <span style={{\n            color: styles.colors.text,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Page {currentPage + 1} of {totalPages}\n          </span>\n          \n          <button\n            onClick={() => setCurrentPage(Math.min(totalPages - 1, currentPage + 1))}\n            disabled={currentPage === totalPages - 1}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              backgroundColor: currentPage === totalPages - 1 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === totalPages - 1 ? styles.colors.textSecondary : ''white'',\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: currentPage === totalPages - 1 ? ''not-allowed'' : ''pointer'',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}","dependencies":[{"name":"DataExportPanel","location":"registry","namespace":"Generic/UI/Export","version":"^1.0.0"}],"libraries":[]},{"name":"AIMetricsSummary","location":"embedded","title":"AI Metrics Summary","description":"Summary cards displaying key performance metrics for the selected time period","type":"other","functionalRequirements":"## Metrics Summary Requirements\n\n### Core Functionality\n- Display key metrics in card format\n- Show total runs, tokens, and costs\n- Calculate averages per run\n- Display success rate percentage\n- Show trend indicators (up/down from previous period)\n- Responsive card layout\n\n### Visual Features\n- Color-coded metric cards\n- Icon indicators for each metric\n- Animated number transitions\n- Hover effects for additional info","dataRequirements":{"mode":"views","description":"Displays aggregated metrics derived from AI execution data","entities":[{"name":"MJ: AI Prompt Runs","description":"Source data for AI execution metrics","displayFields":["TotalTokens","InputTokens","OutputTokens","Status"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Metrics are pre-calculated from prompt run data by parent component"},{"name":"MJ: AI Agent Runs","description":"Source data for agent execution metrics","displayFields":["TotalTokens","Status"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Metrics are pre-calculated from agent run data by parent component"}],"queries":[]},"technicalDesign":"## Technical Design\n\n### Props\n- metrics: Object with calculated metric values\n\n### Card Layout\n- Responsive grid of metric cards\n- Each card shows metric name, value, and trend\n- Consistent styling with theme","properties":[{"name":"metrics","type":"{totalRuns: number, totalTokens: number, totalCost: number, avgTokensPerRun: number, avgCostPerRun: number}","required":true,"description":"Pre-calculated metrics object with aggregated values"}],"events":[],"exampleUsage":"<AIMetricsSummary metrics={metrics} />","code":"function AIMetricsSummary({ metrics, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIMetricsSummary] Rendering metrics:'', metrics);\n  \n  const formatNumber = (value) => {\n    if (value >= 1000000) {\n      return `$' + '{(value / 1000000).toFixed(2)}M`;\n    } else if (value >= 1000) {\n      return `$' + '{(value / 1000).toFixed(1)}K`;\n    }\n    return value.toLocaleString();\n  };\n  \n  const formatCurrency = (value) => {\n    if (value >= 1000) {\n      return `$$' + '{(value / 1000).toFixed(2)}K`;\n    }\n    return `$$' + '{value.toFixed(2)}`;\n  };\n  \n  const metricCards = [\n    {\n      label: ''Total Runs'',\n      value: formatNumber(metrics.totalRuns || 0),\n      color: styles.colors.primary,\n      icon: ''▶'',\n      description: ''Total execution count''\n    },\n    {\n      label: ''Total Tokens'',\n      value: formatNumber(metrics.totalTokens || 0),\n      color: styles.colors.success,\n      icon: ''◆'',\n      description: ''Tokens consumed''\n    },\n    {\n      label: ''Total Cost'',\n      value: formatCurrency(metrics.totalCost || 0),\n      color: styles.colors.warning,\n      icon: ''$'',\n      description: ''Total spend''\n    },\n    {\n      label: ''Avg Tokens/Run'',\n      value: formatNumber(metrics.avgTokensPerRun || 0),\n      color: styles.colors.info || styles.colors.primary,\n      icon: ''⊙'',\n      description: ''Average token usage''\n    },\n    {\n      label: ''Avg Cost/Run'',\n      value: formatCurrency(metrics.avgCostPerRun || 0),\n      color: styles.colors.secondary,\n      icon: ''¢'',\n      description: ''Average cost per execution''\n    }\n  ];\n  \n  return (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'',\n      gap: styles.spacing.md,\n      marginBottom: styles.spacing.lg\n    }}>\n      {metricCards.map((card, index) => (\n        <div\n          key={index}\n          style={{\n            backgroundColor: styles.colors.surface,\n            borderRadius: styles.borders?.radius || ''4px'',\n            padding: styles.spacing.md,\n            borderLeft: `3px solid $' + '{card.color}`,\n            transition: ''transform 0.2s, box-shadow 0.2s'',\n            cursor: ''default'',\n            position: ''relative''\n          }}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n            e.currentTarget.style.boxShadow = `0 4px 12px $' + '{styles.colors.border}40`;\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateY(0)'';\n            e.currentTarget.style.boxShadow = ''none'';\n          }}\n          title={card.description}\n        >\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''space-between'',\n            marginBottom: styles.spacing.xs\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs,\n              color: styles.colors.textSecondary,\n              fontWeight: ''500''\n            }}>\n              {card.label}\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              color: card.color,\n              opacity: 0.3\n            }}>\n              {card.icon}\n            </div>\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.text,\n            fontWeight: ''700''\n          }}>\n            {card.value}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","dependencies":[],"libraries":[]},{"name":"AIInsightsPanel","location":"registry","namespace":"Generic/UI/AI","version":"^1.0.0"}],"libraries":[]}'
SET
  @FunctionalRequirements_fc68db3b = N'Display multi-line time series charts showing total runs, tokens, and costs over time. Support multiple time groupings: day, week, month, quarter. Dual Y-axis display (tokens on left, runs/costs on right). Click-to-drill-down on any chart point to see details for that period. Show distribution charts (pie/bar) for selected time period. Separate tabs for Agent Runs and Prompt Runs analysis'
SET
  @TechnicalDesign_fc68db3b = N'Root component manages overall dashboard state and data loading. Handles time range selection and grouping. Coordinates drill-down state between components. Manages tab switching between Agent and Prompt views. Child components: AITimeSeriesChart for multi-line charts with dual Y-axes, AIDistributionChart for pie/bar charts showing breakdown, AIDetailTable for detailed table view, AIMetricsSummary for key metrics cards'
SET
  @FunctionalRequirementsVector_fc68db3b = N'[-0.08150194585323334,-0.0287905465811491,-0.031728263944387436,-0.022875243797898293,-0.0108663784340024,0.0021101944148540497,0.08500783890485764,0.03616320341825485,-0.03808025270700455,0.01895028166472912,0.009731908328831196,0.043234534561634064,0.0010290846694260836,0.163635715842247,-0.036913711577653885,-0.06299543380737305,-0.02395305410027504,-0.00667661614716053,0.032086487859487534,0.02690296433866024,-0.002740701660513878,-0.018905017524957657,-0.008788476698100567,-0.017056738957762718,-0.08474011719226837,-0.06116650626063347,-0.04503124579787254,-0.0020432421006262302,0.04014980420470238,-0.12655645608901978,-0.03882763162255287,-0.005652433726936579,0.01765579544007778,0.06130366772413254,0.0000021582370663963957,-0.007293723989278078,-0.04944524168968201,0.027275007218122482,-0.01076046098023653,0.07306421548128128,0.13339506089687347,-0.0012139042373746634,0.06281664967536926,-0.014931944198906422,0.014078879728913307,0.030626386404037476,-0.03021547757089138,0.009559006430208683,0.06696998327970505,0.005979424808174372,0.007801681756973267,0.06681228429079056,-0.08627933263778687,-0.022660402581095695,-0.06102713197469711,-0.09728223085403442,-0.02934284508228302,-0.04070638492703438,0.06306693702936172,0.0016687377355992794,-0.010564366355538368,-0.001849318970926106,0.03540828824043274,-0.04159046709537506,0.014692449010908604,0.023974955081939697,0.016233928501605988,-0.053474005311727524,-0.01742616854608059,0.0052368296310305595,0.05745771899819374,-0.00618791114538908,0.004548805765807629,-0.06169598922133446,-0.0366387665271759,-0.03488890081644058,-0.020172113552689552,-0.007983054034411907,0.0030639292672276497,-0.010622547008097172,-0.042732059955596924,0.051581647247076035,-0.04138047993183136,-0.03123043291270733,-0.027082866057753563,0.008035997860133648,0.0009582267375662923,-0.010315625928342342,-0.002381201833486557,0.015711316838860512,0.038584448397159576,0.02881537564098835,-0.02198437601327896,0.012081649154424667,-0.06832513958215714,-0.025749383494257927,0.05125376582145691,-0.06037095561623573,0.02843203954398632,0.04640698432922363,0.013419347815215588,-0.012412807904183865,-0.011775565333664417,0.01665174961090088,0.04772486165165901,0.051200151443481445,-0.00221334770321846,-0.02092447504401207,-0.027133652940392494,0.057784002274274826,0.03325926139950752,-0.0025572653394192457,-0.03710401430726051,0.00782775692641735,-0.07867228239774704,0.008277157321572304,-0.037097204476594925,0.0037521785125136375,-0.008455869741737843,0.0028971186839044094,0.09774623066186905,0.008979551494121552,0.00942209642380476,0.039549604058265686,0.012193427421152592,0.011568279005587101,-0.05111299082636833,-0.001176391146145761,0.02494155801832676,-0.017292644828557968,-0.05605455860495567,-0.014168799854815006,0.018612001091241837,0.020294977352023125,-0.04546571150422096,-0.009557032026350498,0.03777670860290527,0.031931012868881226,-0.05162731558084488,-0.03421945869922638,0.012199475429952145,-0.014517804607748985,-0.05609647184610367,0.03832763805985451,-0.0054740626364946365,-0.00848605576902628,0.009227187372744083,0.13982559740543365,0.008261607959866524,0.0028613146860152483,-0.001849577878601849,0.017789719626307487,0.0347212478518486,0.023098338395357132,-0.02681269682943821,-0.022948134690523148,0.013029537163674831,-0.0033737216144800186,-0.016013504937291145,0.028096530586481094,0.009870121255517006,-0.011694972403347492,0.03303781524300575,-0.004607019480317831,-0.025648867711424828,0.02001453936100006,-0.05125747248530388,-0.012050795368850231,-0.039688840508461,-0.0034956964664161205,0.02407636120915413,-0.036092258989810944,-0.01590033248066902,0.00819359440356493,-0.003914922010153532,0.040512047708034515,0.07392885535955429,-0.05044356361031532,0.009684457443654537,-0.03201703354716301,0.023934604600071907,-0.1281687319278717,-0.012697539292275906,0.018875155597925186,0.0745011493563652,-0.0008547559846192598,-0.09196031838655472,0.02395757846534252,-0.03312017396092415,-0.0002908969472628087,-0.024613283574581146,0.008428584784269333,0.019365791231393814,0.013545225374400616,0.01736004836857319,-0.006194341462105513,0.0019022595370188355,-0.05357413366436958,0.03731280565261841,0.014881796203553677,-0.04138431325554848,-0.018940899521112442,0.01276263128966093,0.03169066831469536,0.0029501805547624826,0.011151755228638649,0.058379944413900375,-0.026720883324742317,0.03169619292020798,0.0561421774327755,0.04705734923481941,-0.002568670082837343,-0.02147877775132656,0.020453279837965965,-0.03781915083527565,0.01153426431119442,0.0054876296781003475,0.029704973101615906,-0.053862396627664566,0.009215354919433594,-0.04535423964262009,-0.0158995408564806,-0.011144839227199554,0.019726702943444252,0.03875795379281044,0.0027563683688640594,0.00406931946054101,0.011269116774201393,0.03733210265636444,0.04070938378572464,-0.025026703253388405,0.02601914294064045,0.025923937559127808,0.02899894118309021,0.034628815948963165,0.04657568782567978,0.03458531200885773,0.0713822990655899,0.004929783754050732,0.05990223586559296,-0.0025831477250903845,-0.029174605384469032,-0.0180517490953207,-0.016840212047100067,0.019102059304714203,-0.06456640362739563,-0.031122352927923203,0.004773543681949377,-0.00733110960572958,-0.0012938912259414792,0.01673530414700508,0.00007586347783217207,0.02360885590314865,-0.0043301330879330635,-0.02596963383257389,0.013522118330001831,0.02738882228732109,-0.03361321613192558,-0.06210028752684593,0.09326872229576111,0.04024136811494827,0.03264937922358513,-0.019470179453492165,-0.022270143032073975,-0.01290909294039011,-0.037574756890535355,0.03158441558480263,0.004871280398219824,-0.028577163815498352,0.01532417070120573,0.040937092155218124,0.01661565713584423,-0.019882453605532646,-0.009569166228175163,-0.01818092353641987,0.051017165184020996,-0.01635884866118431,-0.018129117786884308,0.006143089849501848,0.0014166167238727212,0.023384258151054382,-0.03424037992954254,0.04262661561369896,0.0632113367319107,-0.010271498002111912,-0.0022067928221076727,0.06987633556127548,-0.015244971960783005,-0.0008727484382688999,-0.06523865461349487,0.036888718605041504,-0.038445230573415756,0.03145205229520798,-0.04295479878783226,-0.006318804807960987,0.03814620524644852,0.0066198017448186874,0.09107010811567307,-0.022814322263002396,0.06678451597690582,-0.027014268562197685,-0.034343305975198746,-0.02277996949851513,0.027018897235393524,-0.021616661921143532,0.05223265662789345,0.04739305004477501,-0.00037252830225043,-0.021267332136631012,0.09028909355401993,0.01876489818096161,-0.0031662906985729933,-0.003487267764285207,-0.025588151067495346,-0.004056059755384922,0.02053850330412388,0.023357024416327477,0.02720801904797554,-0.013030147179961205,0.04035753384232521,0.01789255626499653,-0.016599180176854134,-0.007104312535375357,-0.012007324956357479,-0.04732602834701538,-0.03676679730415344,-0.04773276299238205,-0.026344968006014824,-0.03596581146121025,0.010871264152228832,-0.01602906920015812,-0.04550434648990631,-0.04015178233385086,0.01365758292376995,-0.012052847072482109,-0.016506267711520195,-0.038904543966054916,-0.033483754843473434,0.008489139378070831,-0.028703076764941216,0.003567207371816039,0.027202971279621124,0.006173491012305021,-0.03407280147075653,-0.00564845185726881,-0.014745932072401047,-0.05321348458528519,-0.017774393782019615,-0.093190997838974,-0.003059308510273695,0.047533974051475525,0.01889551617205143,-0.008098223246634007,0.012843338772654533,0.023654865100979805,-0.02090112306177616,-0.020075852051377296,-0.014549784362316132,-0.0257598664611578,-0.05362247675657272,0.0752706527709961,0.007468041963875294,0.012174967676401138,0.0543350949883461,-0.0021197034511715174,0.010541551746428013,-0.048357851803302765,-0.0025444384664297104,0.029303928837180138,-0.0037331434432417154,-0.016428936272859573,0.04157523065805435,-0.009874336421489716,0.024544406682252884,-0.004653600510209799,-0.042573776096105576,0.016087234020233154,-0.00000804197679826757,-0.008344903588294983,0.01411590725183487,-0.010352117009460926,0.02689255401492119,0.08457311987876892,-0.024153949692845345,0.06981655210256577,-0.051864076405763626,-0.014196474105119705,0.028208749368786812,-0.04303954169154167,-0.009858119301497936,0.008906981907784939,-0.08755383640527725,0.04916312173008919,-0.081391341984272,-0.05554528534412384,-0.031674500554800034,0.014490419067442417,-0.017495622858405113,0.013580788858234882,-0.004751178435981274,0.03816814348101616,0.013971462845802307,0.03885193169116974,-0.02961387112736702,0.018584592267870903,-0.06046513095498085,-0.0007744790054857731,0.029126008972525597,-0.028839027509093285,-0.044909846037626266,-0.014174865558743477,0.03232422471046448,-0.011082883924245834,-0.021976877003908157,0.028954260051250458,-0.0066216206178069115,0.007365537341684103,0.00021965726045891643,0.04714575037360191,0.040123917162418365,0.029351402074098587,0.001777736353687942,0.03516831994056702,0.018184350803494453,0.023473909124732018,-0.03888976201415062,0.03314667567610741,-0.01221549417823553,0.013013293035328388,0.03281392529606819,0.026743663474917412,-0.014526501297950745,-0.010119505226612091,0.06285534799098969,-0.09227554500102997,0.015291696414351463,-0.0382397286593914,-0.03635274991393089,0.008623561821877956,0.003383353818207979,-0.04424436017870903,0.007315449882298708,0.07211241126060486,-0.029615364968776703,-0.011018116027116776,-0.032493822276592255,0.01421511173248291,0.0005706956726498902,0.000023284281269297935,0.010584988631308079,0.02960735559463501,-0.013462275266647339,-0.021165117621421814,-0.007081069052219391,0.01804274320602417,-0.005717210937291384,0.061570797115564346,-0.119072325527668,-0.016440389677882195,0.01931602880358696,-0.03232978656888008,0.02987239509820938,0.001416194369085133,-0.00669171754270792,0.10334638506174088,0.04022171348333359,0.0034143659286201,-0.027568329125642776,0.0038736159913241863,-0.09775343537330627,0.07163000851869583,-0.013274159282445908,-0.014877154491841793,-0.037778254598379135,0.018197210505604744,0.00258876895532012,0.013285023160278797,0.007917335256934166,0.003189953975379467,-0.017816221341490746,0.005128895398229361,0.014690310694277287,0.04315851256251335,-0.09083770215511322,0.006705795414745808,0.01666647382080555,-0.06326038390398026,-0.019716842100024223,0.005354535300284624,-0.002339179627597332,-0.012837952934205532,-0.07561197131872177,-0.031409844756126404,-0.01815158873796463,0.03976384177803993,0.0197647362947464,-0.009741347283124924,0.012700939550995827,-0.0004864054499194026,-0.010608037002384663,-0.07170621305704117,0.024367917329072952,0.013464623130857944,-0.045356981456279755,-0.05097004398703575,0.039998214691877365,0.07515961676836014,-0.0035487960558384657,-0.037832967936992645,0.046205073595047,0.012558089569211006,-0.036818210035562515,-0.055029649287462234,-0.003076372668147087,0.040560346096754074,0.01652967929840088,-0.08793627470731735,0.026821421459317207,-0.015250208787620068,0.0074568442068994045,-0.020962873473763466,0.0071707009337842464,0.00027976007550023496,-0.0009767623851075768,0.10483366250991821,-0.007262211758643389,0.016415931284427643,-0.02377154305577278,-0.04924681782722473,0.04978887736797333,0.02414626069366932,0.028149418532848358,0.018599407747387886,-0.024276722222566605,-0.04271318018436432,0.027644086629152298,0.042699605226516724,-0.022134317085146904,0.024616237729787827,0.011446865275502205,-0.06283348798751831,0.028736252337694168,0.040322087705135345,-0.025553755462169647,0.0018139760941267014,-0.046154510229825974,-0.010283893905580044,-0.006076447200030088,0.015450677834451199,-0.004328399896621704,0.04416053742170334,0.018273180350661278,0.030057674273848534,-0.04675004631280899,-0.035266775637865067,-6.77842939929918e-33,-0.01598200388252735,-0.025999264791607857,-0.016146527603268623,-0.03290273994207382,-0.01391623541712761,0.03369617089629173,0.03802507370710373,-0.04462417960166931,0.013455611653625965,0.013670734129846096,-0.00874705146998167,-0.014024579897522926,0.0068556275218725204,-0.013287068344652653,0.036063190549612045,0.03677498549222946,0.02916709892451763,-0.018160397186875343,-0.022760996595025063,0.015764232724905014,0.030795030295848846,0.019511500373482704,-0.02532254345715046,0.03367934748530388,-0.028295081108808517,-0.0013655454386025667,0.029145270586013794,0.036126717925071716,-0.024998057633638382,-0.005664375144988298,0.03099820576608181,-0.054025374352931976,-0.011104010976850986,0.04163511097431183,-0.027355201542377472,0.019768768921494484,-0.012989765033125877,-0.05305449664592743,-0.02060461975634098,-0.013638939708471298,0.06291458755731583,-0.03934887796640396,0.00603976845741272,-0.023156821727752686,-0.017502613365650177,-0.025096315890550613,0.0027711731381714344,0.029126910492777824,-0.011824207380414009,0.03817976266145706,0.023785872384905815,0.029646441340446472,0.027052830904722214,0.017106683924794197,-0.000851546588819474,0.017718052491545677,0.02125622145831585,0.004569603130221367,-0.032712772488594055,0.045384276658296585,0.006670577451586723,-0.0684390515089035,-0.017227383330464363,0.02870345115661621,0.020434990525245667,-0.0047433869913220406,-0.08490663766860962,0.06751887500286102,-0.04250815883278847,0.028841035440564156,-0.019593005999922752,-0.003687384771183133,-0.021192383021116257,-0.11982251703739166,-0.024442479014396667,-0.010742392390966415,0.0031996897887438536,0.014686111360788345,0.08287622034549713,0.029245350509881973,-0.0050410619005560875,-0.0036434235516935587,-0.012486104853451252,0.028304748237133026,0.05425955727696419,0.00721708033233881,-0.028211943805217743,-0.02413470484316349,0.02894737385213375,0.028244566172361374,-0.004849026445299387,0.015538975596427917,-0.037742190062999725,0.0008876220090314746,0.04213014245033264,-0.007803566753864288,0.07121698558330536,0.015221942216157913,-0.001960416091606021,-0.03436558321118355,-0.003969396930187941,0.02361733838915825,-0.00939650647342205,0.016713233664631844,0.027714410796761513,-0.03773723170161247,0.012928658165037632,-0.026570122689008713,-0.027469730004668236,0.020878538489341736,0.017291592434048653,-0.0019647071603685617,-0.00315713114105165,-0.031354110687971115,0.012855649925768375,-0.01363358087837696,-0.004890896379947662,-0.0005654158303514123,-0.02709374390542507,-0.022048968821763992,0.011125248856842518,0.014217041432857513,0.0029961466789245605,-0.006982287857681513,0.01366102509200573,-0.03508617356419563,-0.017402568832039833,-0.018001176416873932,0.015492181293666363,0.002017716411501169,-0.031256575137376785,-0.012600697576999664,2.988907965573162e-7,-0.005856863688677549,-0.0011071087792515755,0.02589809149503708,0.04701247066259384,0.03878120705485344,-0.05647207424044609,-0.027844533324241638,-0.012592039071023464,-0.03855043277144432,-0.009677560068666935,0.010690550319850445,-0.012530731037259102,0.007570469286292791,0.05927320942282677,0.08551611751317978,-0.10091469436883926,0.011517258360981941,-0.01860172301530838,-0.014440862461924553,0.016275959089398384,0.07085209339857101,0.026104452088475227,0.047628626227378845,0.02359825000166893,-0.00019492380670271814,-0.03967093303799629,-0.0041229915805161,0.013150417245924473,0.0017503584967926145,-0.03691907227039337,-0.07565747946500778,0.04288267716765404,-0.004347556736320257,-0.03649525344371796,-0.009996782056987286,0.02828642539680004,-0.015681786462664604,-0.005976077169179916,-0.014743992127478123,0.008393649011850357,0.020469410344958305,0.01350060198456049,-0.015909472480416298,-0.007013741414994001,-0.011976564303040504,-0.0224719550460577,-0.0024460318963974714,0.04129064828157425,-0.010926448740065098,0.0034619339276105165,0.026760492473840714,0.024768726900219917,0.0442250557243824,0.024712808430194855,0.012634586542844772,-0.0037595857866108418,0.014222420752048492,0.02160060405731201,0.0010969191789627075,-0.00019167611026205122,-0.015903206542134285,-0.03982236236333847,-0.005246730521321297,0.10987988114356995,0.06164122372865677,-0.04747799038887024,-0.05029879882931709,3.826646223715555e-34,0.015748200938105583,-0.040282201021909714,-0.001336128218099475,0.03400219976902008,0.022030774503946304,0.011789620853960514,-0.03172563761472702,-0.006076674908399582,0.0440981388092041,-0.057511262595653534,-0.012539885006844997]'
SET
  @TechnicalDesignVector_fc68db3b = N'[-0.05093942955136299,-0.042766619473695755,-0.03471093997359276,-0.06744708120822906,0.005652656778693199,0.0029267603531479836,0.02490956522524357,0.03685828670859337,-0.01807718724012375,0.010148586705327034,0.015632234513759613,-0.024268371984362602,0.057262539863586426,0.08237309008836746,-0.0021435113158077,-0.04290074110031128,0.027212020009756088,0.026341671124100685,-0.04045628383755684,0.0018526652129366994,-0.004760393872857094,-0.019372303038835526,0.010601409710943699,0.01007600873708725,-0.06349264830350876,-0.022086914628744125,0.004124607890844345,0.0030384354759007692,0.034680262207984924,-0.08986199647188187,0.01527575682848692,-0.0007347430801019073,-0.0279998816549778,0.012020871043205261,0.000002350437171116937,0.007326935417950153,-0.00540531799197197,0.003097260370850563,-0.01987704262137413,0.005664528347551823,0.04248866066336632,-0.06446075439453125,0.055931977927684784,0.002042850712314248,0.01826179400086403,-0.05218826234340668,0.005401594564318657,0.00006145544466562569,0.040641285479068756,-0.024676738306879997,0.003746598958969116,0.02586986869573593,-0.046933867037296295,0.010557491332292557,-0.003819279605522752,-0.007552734576165676,-0.010264753364026546,-0.008338075131177902,0.0688406378030777,0.013102608732879162,-0.01747742109000683,-0.026490500196814537,0.03294706717133522,-0.03426074609160423,0.09198804944753647,0.015552283264696598,0.07521989941596985,-0.05200299620628357,-0.013251110911369324,0.004754889290779829,0.1057903915643692,-0.010923577472567558,-0.004961525555700064,-0.028489038348197937,-0.0348663330078125,0.016540655866265297,-0.0206525307148695,-0.016720186918973923,-0.00744552630931139,-0.004250863566994667,0.026010558009147644,0.0422748364508152,-0.03577966243028641,-0.06031762436032295,-0.01889568567276001,0.024746695533394814,0.0034988585393875837,0.004999369382858276,-0.030620073899626732,-0.012087906710803509,0.04898285120725632,-0.0066796764731407166,-0.027360407635569572,0.01421742606908083,-0.062351521104574203,0.004109550267457962,0.019523123279213905,-0.015743916854262352,0.012442824430763721,0.02941422536969185,0.06129171699285507,0.03395975008606911,0.015778612345457077,0.05263814330101013,0.10009796172380447,0.09329067915678024,-0.0006581885390914977,-0.06736037880182266,-0.0032410151325166225,-0.07436113059520721,-0.011524558067321777,-0.029094375669956207,0.027288461104035378,0.037216879427433014,-0.00026247467030771077,-0.014800692908465862,-0.028437454253435135,0.009500639513134956,-0.015460174530744553,-0.009816023521125317,0.13951092958450317,-0.018822770565748215,0.005208163056522608,0.01991325058043003,0.009092764928936958,0.06214652955532074,-0.01956144906580448,-0.03635089099407196,-0.022216923534870148,0.0019849222153425217,-0.02463247999548912,-0.023999327793717384,0.0038515529595315456,-0.01638798788189888,-0.02641187235713005,-0.060283463448286057,0.03174698352813721,0.009033294394612312,-0.007421358022838831,-0.0005115668755024672,-0.0024017062969505787,-0.005207233130931854,-0.04777120053768158,0.042418576776981354,0.021779228001832962,-0.021063480526208878,0.009798596613109112,0.01332290843129158,0.017270527780056,0.026962660253047943,0.0211957860738039,-0.0017177235567942262,-0.004950319416821003,0.01662415638566017,-0.0681176483631134,0.001469017006456852,0.0236002616584301,-0.009984259493649006,-0.04313027858734131,-0.02010243572294712,-0.0007091605802997947,0.0021437269169837236,0.07193774729967117,-0.0019606752321124077,-0.037418048828840256,-0.022985801100730896,-0.015911968424916267,-0.013757876120507717,-0.08675982058048248,-0.0664663314819336,-0.08045728504657745,-0.028619706630706787,0.025489971041679382,0.04424642026424408,0.029505154117941856,0.019839147105813026,0.06756237894296646,-0.08198369294404984,-0.05772744491696358,-0.03074088878929615,0.04599269479513168,-0.09291401505470276,-0.02845507301390171,0.07494572550058365,0.06145401671528816,-0.033439889550209045,-0.09091536700725555,0.03956929221749306,-0.0011523717548698187,-0.009511271491646767,-0.038227494806051254,0.029541293159127235,-0.0732707679271698,-0.004143160302191973,0.008596005849540234,0.006666495464742184,-0.014334633946418762,-0.07932043075561523,0.026036662980914116,-0.003466937458142638,0.03452427685260773,0.02197941392660141,0.027063509449362755,0.04821784421801567,0.0303247831761837,-0.059656787663698196,-0.008668065071105957,0.009686259552836418,0.016633156687021255,0.0021950029768049717,0.023696111515164375,-0.00501016853377223,-0.03298270329833031,0.0014768430264666677,-0.036410894244909286,0.03458660468459129,0.045534972101449966,0.02238236926496029,-0.07842610776424408,-0.006159954238682985,-0.04736418277025223,-0.017515387386083603,0.010576062835752964,0.01149346400052309,0.09287013858556747,0.04859837889671326,0.06534387171268463,0.026574505493044853,0.024949565529823303,0.062193870544433594,-0.01856849156320095,-0.010767456144094467,-0.002600880339741707,0.03991813212633133,0.046096280217170715,0.03830987960100174,0.01669316738843918,0.03766171634197235,0.005068720318377018,0.003818916855379939,0.009491611272096634,0.010373543947935104,0.01227431558072567,-0.041354890912771225,-0.02091633901000023,-0.046184733510017395,-0.08586356788873672,0.008711916394531727,-0.013428892008960247,-0.02165491320192814,0.015280958265066147,0.04167931154370308,-0.005752007942646742,-0.03599904105067253,-0.043415140360593796,0.016781462356448174,0.0033443840220570564,0.00232026819139719,0.054643720388412476,0.04656766727566719,-0.014021333307027817,0.005330456420779228,-0.03723226115107536,-0.019505910575389862,-0.03831588476896286,0.023037252947688103,0.0494266003370285,0.012697333469986916,-0.03275078162550926,0.023378167301416397,0.04002527520060539,0.021342845633625984,0.016342274844646454,0.0005493330536410213,0.021059950813651085,0.022807691246271133,-0.0003131449338980019,0.005457762163132429,-0.010042704641819,-0.0054502543061971664,-0.03795072063803673,0.018659314140677452,0.009030199609696865,0.04100212827324867,-0.016329122707247734,-0.029353274032473564,0.022122355177998543,-0.06166340410709381,0.06019813194870949,-0.09488508850336075,0.0201120488345623,-0.013639131560921669,0.00991065800189972,-0.03472651168704033,-0.027687862515449524,0.02159857749938965,0.02161603607237339,0.05634202063083649,-0.059988271445035934,0.09162647277116776,-0.0451287142932415,-0.02915298379957676,0.02747456543147564,0.007279533427208662,-0.01571120135486126,0.12614691257476807,0.006623351480811834,0.0020421508233994246,0.03767754137516022,0.05159597843885422,0.026297306641936302,-0.004541566129773855,-0.0089133121073246,0.0398227721452713,-0.027065886184573174,0.02361513115465641,-0.02442201040685177,-0.009285959415137768,-0.015323194675147533,0.03693303465843201,0.0074735647067427635,-0.012340760789811611,-0.020051641389727592,-0.01635877415537834,-0.050655510276556015,-0.011944247409701347,-0.05771368741989136,-0.024701600894331932,0.030430760234594345,-0.02681014873087406,-0.021942321211099625,-0.017458118498325348,-0.014786806888878345,0.0074247983284294605,0.04460402950644493,0.0012632296420633793,-0.013416746631264687,-0.0491306446492672,0.026339948177337646,-0.03621181100606918,-0.02760031633079052,0.00044151523616164923,0.011976552195847034,0.048305660486221313,0.06316512823104858,-0.0258596483618021,0.02333502657711506,-0.02005826309323311,-0.07169102877378464,0.0030141493771225214,0.0361209437251091,0.013014791533350945,-0.0030333157628774643,0.008987024426460266,0.011282624676823616,0.019379878416657448,-0.03405711427330971,0.0020681368187069893,-0.0166765209287405,-0.06581946462392807,0.031074216589331627,0.002788637299090624,0.0251600481569767,-0.02181641012430191,0.04563836380839348,-0.013313238508999348,-0.00832170806825161,0.029437946155667305,0.007265524007380009,-0.03445960953831673,-0.00687745213508606,0.0062475246377289295,0.03749660775065422,0.032991934567689896,0.013587519526481628,-0.02533147484064102,0.01121569238603115,0.0021915575489401817,-0.019350336864590645,0.023434018716216087,-0.011949064210057259,-0.018419630825519562,0.0647113174200058,-0.010621502064168453,0.0528583750128746,-0.025628672912716866,-0.017675479874014854,0.013529441319406033,0.014800770208239555,0.02230345457792282,0.008606228046119213,-0.08630380779504776,-0.04809793829917908,0.006313237361609936,-0.005278157535940409,-0.009616747498512268,-0.01140189915895462,0.01128136832267046,-0.0018281115917488933,0.011262076906859875,0.011601545847952366,-0.04680558294057846,0.022931324318051338,-0.02439398318529129,0.0592259019613266,-0.0007762539898976684,-0.09967288374900818,0.06237385794520378,0.014368273317813873,0.03297165036201477,-0.024111397564411163,-0.02365518920123577,-0.0020257967989891768,-0.06768178194761276,-0.07627594470977783,0.02315112203359604,-0.015146583318710327,0.008687314577400684,0.028321772813796997,0.09171784669160843,0.046994805335998535,-0.003911835607141256,0.03944900259375572,-0.04690740630030632,0.02136511728167534,-0.05894438549876213,-0.01658942736685276,-0.004580905195325613,-0.010906325653195381,0.027012314647436142,0.03631825000047684,-0.05875273793935776,0.019057659432291985,0.013491512276232243,-0.02579231560230255,-0.027872813865542412,0.005415480118244886,0.0012838764814659953,-0.022884028032422066,-0.017477354034781456,-0.013605792075395584,0.007451287470757961,0.053208138793706894,0.005586766637861729,-0.04229440912604332,-0.03081154078245163,-0.022697078064084053,0.018962642177939415,-0.024001415818929672,-0.001309795188717544,0.027245836332440376,0.056198615580797195,-0.016446944326162338,0.0011449698358774185,0.013100040145218372,-0.04852424934506416,-0.02224234864115715,0.048839252442121506,-0.03615851327776909,0.031926583498716354,-0.0005562988226301968,0.01822659559547901,-0.039186619222164154,-0.0066689383238554,0.026554232463240623,0.04545250162482262,0.04695494472980499,-0.02223670296370983,-0.007737138774245977,-0.03563091531395912,-0.007494678255170584,-0.007317054085433483,-0.021625710651278496,-0.022498605772852898,0.030731208622455597,-0.011319246143102646,0.004955377895385027,0.049885910004377365,-0.0005608903593383729,-0.030639346688985825,0.019241878762841225,0.012033013626933098,0.020182769745588303,-0.03505793958902359,0.021329054608941078,0.012339545413851738,-0.045985765755176544,-0.013495638966560364,0.030710166320204735,-0.009513238444924355,0.00579025549814105,-0.024345673620700836,-0.024773571640253067,0.10677383095026016,0.07882550358772278,0.008012041449546814,-0.0451202429831028,0.031083816662430763,-0.032075896859169006,-0.013181746937334538,-0.046426016837358475,-0.00027475948445498943,0.010926836170256138,-0.04282592236995697,-0.012489455752074718,-0.003486878937110305,0.042691510170698166,-0.0027248335536569357,-0.04444960132241249,-0.022889478132128716,-0.0078976359218359,0.006241281051188707,-0.053916167467832565,0.0413353368639946,0.02302771992981434,0.014805130660533905,-0.0440412275493145,0.06065772473812103,0.016279373317956924,-0.04225767403841019,0.011390873230993748,0.017025411128997803,-0.027437005192041397,-0.01715669594705105,0.09015438705682755,0.029697034507989883,-0.015371850691735744,0.0019001681357622147,-0.020370246842503548,0.04990120232105255,-0.011992314830422401,0.013037123717367649,0.0013012548442929983,0.012999664060771465,-0.03904541954398155,0.04160117357969284,0.028387313708662987,0.028516147285699844,0.0064470297656953335,-0.022337831556797028,-0.09231633692979813,0.025922849774360657,0.03685295954346657,0.0027917465195059776,-0.016082817688584328,-0.049815837293863297,0.0016481332713738084,-0.08942808955907822,0.0412127785384655,0.04852816089987755,0.04155154153704643,-0.09401604533195496,-0.08993362635374069,0.012722209095954895,0.02518940344452858,-6.876331180991383e-33,-0.023994741961359978,-0.025173362344503403,-0.003848876804113388,-0.012181419879198074,-0.05371544510126114,-0.007173048332333565,0.01601230353116989,-0.05206022039055824,-0.03525610268115997,-0.023346062749624252,0.003609962295740843,0.003882045391947031,-0.0030271720606833696,0.013022107072174549,0.010137486271560192,0.04154551401734352,0.019239475950598717,0.014582719653844833,-0.0366252064704895,0.03544116020202637,-0.010961588472127914,-0.009303179569542408,-0.0031202740501612425,-0.019210973754525185,-0.05811183899641037,0.04517441242933273,0.04129866883158684,0.05146465823054314,-0.03803247585892677,0.028384899720549583,0.0023896335624158382,-0.01566317118704319,-0.020472051575779915,0.007676168344914913,-0.009311935864388943,0.04719654843211174,-0.011237122118473053,-0.05764014646410942,0.028357677161693573,0.0014098903629928827,0.06774785369634628,-0.019856303930282593,0.007757826242595911,0.02685798704624176,0.02471647970378399,-0.04963766038417816,0.003935556858778,0.019000791013240814,-0.016427788883447647,-0.0014668538933619857,-0.012247459031641483,0.014282289892435074,-0.023240450769662857,0.040397047996520996,-0.024878546595573425,0.08624690771102905,0.021097075194120407,0.015420680865645409,-0.030730802565813065,0.03407927602529526,-0.011177401058375835,-0.02638676017522812,-0.008232016116380692,0.02625204436480999,0.05377824977040291,-0.00916736014187336,0.03205753117799759,0.037301648408174515,-0.09901163727045059,0.011357729323208332,-0.01161964051425457,0.029004378244280815,0.07633694261312485,-0.06696805357933044,-0.048426881432533264,-0.053360242396593094,-0.009453509002923965,0.01268640998750925,0.031145004555583,0.004719259683042765,-0.032688286155462265,0.012716876342892647,-0.014898287132382393,0.010215315036475658,0.03432590514421463,0.004842096008360386,0.0027346936985850334,0.010732751339673996,0.006392687559127808,0.007224095985293388,-0.012353363446891308,0.02031145617365837,-0.03472185507416725,0.009977483190596104,0.02841496467590332,-0.0037787994369864464,0.08830925077199936,0.01725829392671585,0.009950708597898483,-0.04558058828115463,-0.0034502451308071613,0.02481357380747795,-0.00013225367001723498,0.05563509464263916,-0.02562316320836544,-0.02038535475730896,-0.02665853500366211,0.016491549089550972,-0.042798202484846115,0.001977471401914954,0.028398333117365837,0.02410203404724598,-0.04342826455831528,-0.05344989895820618,0.03824205696582794,-0.0036874141078442335,0.023582767695188522,-0.018074078485369682,0.0136875594034791,-0.012958073988556862,0.014625003561377525,0.018419601023197174,-0.02268942818045616,-0.042828720062971115,0.04605351760983467,-0.008303938433527946,-0.04947887361049652,0.0005300094489939511,-0.004939850885421038,0.013738066889345646,-0.006675360258668661,0.015881845727562904,3.126727676772134e-7,-0.025187145918607712,0.09037284553050995,-0.0015724033582955599,-0.023655377328395844,0.054171252995729446,-0.08902523666620255,-0.04882453754544258,-0.040517475455999374,-0.061508577316999435,0.0030755815096199512,0.058998461812734604,-0.03021358884871006,0.04265913739800453,0.05248025059700012,0.032763611525297165,0.020851943641901016,-0.05517478287220001,-0.082493357360363,-0.06783777475357056,0.009924436919391155,0.0524958074092865,0.005565527826547623,0.017350994050502777,-0.0037865142803639174,0.0005024939309805632,0.029461447149515152,-0.024430954828858376,0.048847876489162445,0.043209172785282135,-0.0357118584215641,-0.04496119171380997,0.07541359961032867,0.0037583934608846903,-0.04009344056248665,0.014764135703444481,0.03026699647307396,-0.05190461501479149,-0.06439439952373505,-0.023642966523766518,0.039507631212472916,0.021731890738010406,-0.005952285602688789,-0.042985040694475174,-0.019157428294420242,0.0402277410030365,-0.04230193421244621,-0.015498671680688858,0.02074243128299713,-0.0005012283800169826,0.046546757221221924,-0.013765542767941952,0.033601850271224976,0.00016103024245239794,-0.0002572090015746653,-0.014215812087059021,-0.002637900412082672,-0.006809226702898741,0.03598092868924141,0.029257725924253464,0.023817554116249084,-0.0018255120376124978,-0.08145318180322647,0.00871262513101101,0.0829903855919838,0.011444714851677418,-0.0015307138673961163,-0.07353203743696213,3.90503355940491e-34,0.016943685710430145,-0.082795150578022,0.005978479515761137,0.014910435304045677,0.014156623743474483,0.002208874560892582,-0.0034973789006471634,-0.0024083175230771303,0.018827609717845917,-0.04832541197538376,-0.018374374136328697]'
SET
  @HasCustomProps_fc68db3b = 0
SET
  @HasCustomEvents_fc68db3b = 0
SET
  @RequiresData_fc68db3b = 1
SET
  @DependencyCount_fc68db3b = 4
SET
  @TechnicalDesignVectorEmbeddingModelID_fc68db3b = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_fc68db3b = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_fc68db3b = 0
SET
  @ID_fc68db3b = '313ED35B-462C-439F-8F56-91AD90CCB252'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_fc68db3b,
  @Name = @Name_fc68db3b,
  @Version = @Version_fc68db3b,
  @VersionSequence = @VersionSequence_fc68db3b,
  @Title = @Title_fc68db3b,
  @Description = @Description_fc68db3b,
  @Type = @Type_fc68db3b,
  @Status = @Status_fc68db3b,
  @DeveloperName = @DeveloperName_fc68db3b,
  @DeveloperEmail = @DeveloperEmail_fc68db3b,
  @DeveloperOrganization = @DeveloperOrganization_fc68db3b,
  @SourceRegistryID = @SourceRegistryID_fc68db3b,
  @ReplicatedAt = @ReplicatedAt_fc68db3b,
  @LastSyncedAt = @LastSyncedAt_fc68db3b,
  @Specification = @Specification_fc68db3b,
  @FunctionalRequirements = @FunctionalRequirements_fc68db3b,
  @TechnicalDesign = @TechnicalDesign_fc68db3b,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_fc68db3b,
  @TechnicalDesignVector = @TechnicalDesignVector_fc68db3b,
  @HasCustomProps = @HasCustomProps_fc68db3b,
  @HasCustomEvents = @HasCustomEvents_fc68db3b,
  @RequiresData = @RequiresData_fc68db3b,
  @DependencyCount = @DependencyCount_fc68db3b,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_fc68db3b,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_fc68db3b,
  @HasRequiredCustomProps = @HasRequiredCustomProps_fc68db3b,
  @ID = @ID_fc68db3b;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_8673e162 NVARCHAR(MAX),
@Name_8673e162 NVARCHAR(500),
@Version_8673e162 NVARCHAR(50),
@VersionSequence_8673e162 INT,
@Title_8673e162 NVARCHAR(1000),
@Description_8673e162 NVARCHAR(MAX),
@Type_8673e162 NVARCHAR(255),
@Status_8673e162 NVARCHAR(50),
@DeveloperName_8673e162 NVARCHAR(255),
@DeveloperEmail_8673e162 NVARCHAR(255),
@DeveloperOrganization_8673e162 NVARCHAR(255),
@SourceRegistryID_8673e162 UNIQUEIDENTIFIER,
@ReplicatedAt_8673e162 DATETIMEOFFSET,
@LastSyncedAt_8673e162 DATETIMEOFFSET,
@Specification_8673e162 NVARCHAR(MAX),
@FunctionalRequirements_8673e162 NVARCHAR(MAX),
@TechnicalDesign_8673e162 NVARCHAR(MAX),
@FunctionalRequirementsVector_8673e162 NVARCHAR(MAX),
@TechnicalDesignVector_8673e162 NVARCHAR(MAX),
@HasCustomProps_8673e162 BIT,
@HasCustomEvents_8673e162 BIT,
@RequiresData_8673e162 BIT,
@DependencyCount_8673e162 INT,
@TechnicalDesignVectorEmbeddingModelID_8673e162 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_8673e162 NVARCHAR(MAX),
@HasRequiredCustomProps_8673e162 BIT,
@ID_8673e162 UNIQUEIDENTIFIER
SET
  @Namespace_8673e162 = N'AI/Analytics/Performance'
SET
  @Name_8673e162 = N'AITimeSeriesChart'
SET
  @Version_8673e162 = N'1.0.0'
SET
  @VersionSequence_8673e162 = 1
SET
  @Title_8673e162 = N'AI Time Series Chart'
SET
  @Description_8673e162 = N'Multi-line time series chart with dual Y-axes showing AI runs, token usage, and costs over time'
SET
  @Type_8673e162 = N'Chart'
SET
  @Status_8673e162 = N'Published'
SET
  @Specification_8673e162 = N'{"name":"AITimeSeriesChart","location":"embedded","title":"AI Time Series Chart","description":"Multi-line time series chart with dual Y-axes showing AI runs, token usage, and costs over time","type":"chart","functionalRequirements":"## Time Series Chart Requirements\n\n### Core Functionality\n- Display three data series: total runs, total tokens, total cost\n- Dual Y-axis configuration (left: tokens, right: runs and cost)\n- Interactive tooltips showing all values on hover\n- Click on data points to trigger drill-down\n- Smooth line interpolation with data point markers\n- Legend with series toggle capability\n- Responsive to container size changes\n\n### Visual Features\n- Consistent color coding (runs: blue, tokens: green, cost: orange)\n- Grid lines for better readability\n- Axis labels with appropriate formatting\n- Highlighted selection state for clicked points\n- Animated transitions on data updates\n- Zero-baseline for better comparison","dataRequirements":{"mode":"views","description":"Receives aggregated time series data from parent component","entities":[{"name":"MJ: AI Prompt Runs","description":"Historical prompt execution data for performance analysis","displayFields":["ID","PromptID","Prompt","ModelID","Model","RunAt","CompletedAt","Success","TokensUsed","TotalCost"],"filterFields":["RunAt","Success","PromptID","ModelID"],"sortFields":["RunAt"],"fieldMetadata":[{"name":"ID","type":"uniqueidentifier","isPrimaryKey":true,"allowsNull":false,"description":"Unique run identifier"},{"name":"PromptID","type":"uniqueidentifier","allowsNull":false,"description":"Reference to AI Prompt"},{"name":"Prompt","type":"nvarchar","allowsNull":true,"description":"Prompt name (denormalized)"},{"name":"RunAt","type":"datetime","allowsNull":false,"description":"Execution timestamp"},{"name":"TokensUsed","type":"int","allowsNull":true,"description":"Total tokens consumed"},{"name":"TotalCost","type":"decimal","allowsNull":true,"description":"Total cost in USD"}],"permissionLevelNeeded":["read"]}],"queries":[]},"technicalDesign":"## Technical Design\n\n### Props\n- data: Array of aggregated data points with date, runs, tokens, cost\n- groupBy: Current grouping (day/week/month/quarter)\n- activeTab: Current view (agents/prompts)\n- selectedPoint: Currently selected data point\n- onPointClick: Callback when point is clicked\n\n### Chart Configuration\n- Uses recharts library for rendering\n- Dual Y-axis setup with synchronized tooltips\n- Custom tick formatters for large numbers\n- Responsive container with aspect ratio preservation","properties":[{"name":"data","type":"array","required":true,"description":"Array of time series data points"},{"name":"groupBy","type":"string","required":true,"description":"Time grouping: day, week, month, or quarter"},{"name":"activeTab","type":"string","required":true,"description":"Current tab: agents or prompts"},{"name":"selectedPoint","type":"object","required":true,"description":"Currently selected data point"},{"name":"onPointClick","type":"function","required":true,"description":"Callback when a data point is clicked"}],"events":[{"name":"onPointClick","description":"Fired when user clicks on a data point","payload":"Data point object with date and values"}],"exampleUsage":"<AITimeSeriesChart data={chartData} groupBy=\"day\" activeTab=\"agents\" onPointClick={handleChartClick} />","code":"function AITimeSeriesChart({ data, groupBy, activeTab, selectedPoint, onPointClick, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AITimeSeriesChart] Rendering with'', data.length, ''data points'');\n  \n  // Format large numbers\n  const formatNumber = (value) => {\n    if (value >= 1000000) {\n      return `$' + '{(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `$' + '{(value / 1000).toFixed(1)}K`;\n    }\n    return value.toFixed(0);\n  };\n  \n  // Format currency\n  const formatCurrency = (value) => {\n    if (value >= 1000) {\n      return `$$' + '{(value / 1000).toFixed(1)}K`;\n    }\n    return `$$' + '{value.toFixed(2)}`;\n  };\n  \n  // Format date based on grouping\n  const formatDate = (date) => {\n    const d = new Date(date);\n    switch(groupBy) {\n      case ''day'':\n        return d.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'' });\n      case ''week'':\n        return `Week of $' + '{d.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'' })}`;\n      case ''month'':\n        return d.toLocaleDateString(''en-US'', { month: ''short'', year: ''numeric'' });\n      case ''quarter'':\n        return date; // Already formatted as YYYY-Q#\n      default:\n        return date;\n    }\n  };\n  \n  // Prepare chart data\n  const chartData = useMemo(() => {\n    return data.map(point => ({\n      ...point,\n      displayDate: formatDate(point.date),\n      isSelected: selectedPoint?.date === point.date\n    }));\n  }, [data, selectedPoint, groupBy]);\n  \n  // Calculate max values for axis domains\n  const maxTokens = useMemo(() => Math.max(...data.map(d => d.tokens || 0)), [data]);\n  const maxRuns = useMemo(() => Math.max(...data.map(d => d.runs || 0)), [data]);\n  const maxCost = useMemo(() => Math.max(...data.map(d => d.cost || 0)), [data]);\n  \n  // Use a simple SVG chart since we can''t use external libraries\n  const width = 800;\n  const height = 400;\n  const margin = { top: 20, right: 80, bottom: 60, left: 80 };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  \n  // Create scales\n  const xScale = (index) => (index / (chartData.length - 1)) * innerWidth;\n  const yScaleTokens = (value) => innerHeight - (value / maxTokens) * innerHeight;\n  const yScaleRight = (value, max) => innerHeight - (value / max) * innerHeight;\n  \n  // Create path data for lines\n  const createPath = (data, valueKey, scale, max) => {\n    return data.map((d, i) => {\n      const x = xScale(i);\n      const y = scale(d[valueKey] || 0, max);\n      return `$' + '{i === 0 ? ''M'' : ''L''} $' + '{x} $' + '{y}`;\n    }).join('' '');\n  };\n  \n  const handlePointClick = (point) => {\n    console.log(''[AITimeSeriesChart] Point clicked:'', point);\n    onPointClick(point);\n  };\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      padding: styles.spacing.md,\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      <h3 style={{\n        margin: `0 0 $' + '{styles.spacing.md} 0`,\n        color: styles.colors.text,\n        fontSize: styles.typography.fontSize.lg\n      }}>\n        Performance Trends - {activeTab === ''agents'' ? ''Agent Runs'' : ''Prompt Runs''}\n      </h3>\n      \n      {/* Chart Container */}\n      <div style={{ flex: 1, position: ''relative'', minHeight: ''300px'' }}>\n        {chartData.length === 0 ? (\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            height: ''100%'',\n            color: styles.colors.textSecondary\n          }}>\n            No data available for the selected period\n          </div>\n        ) : (\n          <svg\n            viewBox={`0 0 $' + '{width} $' + '{height}`}\n            style={{ width: ''100%'', height: ''100%'' }}\n            preserveAspectRatio=\"xMidYMid meet\"\n          >\n            <g transform={`translate($' + '{margin.left}, $' + '{margin.top})`}>\n              {/* Grid lines */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <line\n                  key={tick}\n                  x1={0}\n                  x2={innerWidth}\n                  y1={innerHeight * (1 - tick)}\n                  y2={innerHeight * (1 - tick)}\n                  stroke={styles.colors.border}\n                  strokeOpacity={0.3}\n                  strokeDasharray=\"2,2\"\n                />\n              ))}\n              \n              {/* X-axis labels */}\n              {chartData.map((point, i) => {\n                if (chartData.length > 20 && i % Math.ceil(chartData.length / 10) !== 0) {\n                  return null;\n                }\n                return (\n                  <text\n                    key={i}\n                    x={xScale(i)}\n                    y={innerHeight + 20}\n                    textAnchor=\"middle\"\n                    fill={styles.colors.textSecondary}\n                    fontSize=\"12\"\n                  >\n                    {point.displayDate}\n                  </text>\n                );\n              })}\n              \n              {/* Y-axis labels (left - tokens) */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <text\n                  key={tick}\n                  x={-10}\n                  y={innerHeight * (1 - tick) + 5}\n                  textAnchor=\"end\"\n                  fill={styles.colors.textSecondary}\n                  fontSize=\"12\"\n                >\n                  {formatNumber(maxTokens * tick)}\n                </text>\n              ))}\n              \n              {/* Y-axis labels (right - cost) */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <text\n                  key={tick}\n                  x={innerWidth + 10}\n                  y={innerHeight * (1 - tick) + 5}\n                  textAnchor=\"start\"\n                  fill={styles.colors.textSecondary}\n                  fontSize=\"12\"\n                >\n                  {formatCurrency(maxCost * tick)}\n                </text>\n              ))}\n              \n              {/* Lines */}\n              <path\n                d={createPath(chartData, ''tokens'', yScaleTokens, maxTokens)}\n                fill=\"none\"\n                stroke={styles.colors.success || ''#10b981''}\n                strokeWidth=\"2\"\n              />\n              <path\n                d={createPath(chartData, ''runs'', yScaleRight, maxRuns)}\n                fill=\"none\"\n                stroke={styles.colors.primary || ''#3b82f6''}\n                strokeWidth=\"2\"\n              />\n              <path\n                d={createPath(chartData, ''cost'', yScaleRight, maxCost)}\n                fill=\"none\"\n                stroke={styles.colors.warning || ''#f59e0b''}\n                strokeWidth=\"2\"\n              />\n              \n              {/* Data points */}\n              {chartData.map((point, i) => (\n                <g key={i}>\n                  {/* Tokens */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleTokens(point.tokens || 0)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.success || ''#10b981''}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: ''pointer'' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                  {/* Runs */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleRight(point.runs || 0, maxRuns)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.primary || ''#3b82f6''}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: ''pointer'' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                  {/* Cost */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleRight(point.cost || 0, maxCost)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.warning || ''#f59e0b''}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: ''pointer'' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                </g>\n              ))}\n            </g>\n            \n            {/* Axis labels */}\n            <text\n              x={margin.left - 40}\n              y={height / 2}\n              transform={`rotate(-90, $' + '{margin.left - 40}, $' + '{height / 2})`}\n              textAnchor=\"middle\"\n              fill={styles.colors.textSecondary}\n              fontSize=\"14\"\n            >\n              Tokens\n            </text>\n            <text\n              x={width - margin.right + 40}\n              y={height / 2}\n              transform={`rotate(90, $' + '{width - margin.right + 40}, $' + '{height / 2})`}\n              textAnchor=\"middle\"\n              fill={styles.colors.textSecondary}\n              fontSize=\"14\"\n            >\n              Runs / Cost ($)\n            </text>\n          </svg>\n        )}\n      </div>\n      \n      {/* Legend */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''center'',\n        gap: styles.spacing.lg,\n        marginTop: styles.spacing.md\n      }}>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''12px'',\n            height: ''12px'',\n            backgroundColor: styles.colors.primary || ''#3b82f6'',\n            borderRadius: ''2px''\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Runs</span>\n        </div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''12px'',\n            height: ''12px'',\n            backgroundColor: styles.colors.success || ''#10b981'',\n            borderRadius: ''2px''\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Tokens</span>\n        </div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: styles.spacing.xs }}>\n          <div style={{\n            width: ''12px'',\n            height: ''12px'',\n            backgroundColor: styles.colors.warning || ''#f59e0b'',\n            borderRadius: ''2px''\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Cost</span>\n        </div>\n      </div>\n    </div>\n  );\n}","dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_8673e162 = N'Display three data series: total runs, total tokens, total cost. Dual Y-axis configuration (left: tokens, right: runs and cost). Interactive tooltips showing all values on hover. Click on data points to trigger drill-down. Smooth line interpolation with data point markers. Legend with series toggle capability'
SET
  @TechnicalDesign_8673e162 = N'Uses SVG for chart rendering with custom scales. Dual Y-axis setup with synchronized tooltips. Custom tick formatters for large numbers. Responsive container with aspect ratio preservation'
SET
  @FunctionalRequirementsVector_8673e162 = N'[-0.09863188117742538,-0.028782380744814873,-0.01116089429706335,0.014460776932537556,0.0014980637934058905,0.012496150098741055,0.03566021844744682,0.04983445256948471,-0.09725352376699448,0.013235202990472317,-0.012865165248513222,0.06482404470443726,-0.0005215065320953727,0.1622696816921234,-0.023253219202160835,-0.08706121146678925,-0.02576453983783722,-0.01609206572175026,0.018810201436281204,0.016252391040325165,0.035700295120477676,-0.006677410565316677,-0.03371591120958328,-0.04308507964015007,-0.10360328108072281,0.004851529840379953,-0.037794217467308044,0.0012241718359291553,0.04337463155388832,-0.1110096275806427,-0.01800527051091194,0.044652365148067474,0.02835049293935299,0.014713739044964314,0.000001967936896107858,-0.02598142996430397,-0.033744920045137405,0.0270516537129879,-0.027628542855381966,0.011254231445491314,0.040602847933769226,-0.0060650077648460865,0.09875985980033875,-0.01832425221800804,0.013309963047504425,-0.015528435818850994,-0.045588523149490356,0.010647986084222794,0.04561993479728699,-0.02799087017774582,0.028064049780368805,0.0005177452694624662,-0.0756847932934761,-0.029661934822797775,0.00788093265146017,-0.031013326719403267,-0.02633025124669075,0.024820949882268906,0.040448471903800964,0.006537420209497213,-0.01063560787588358,0.009840373881161213,0.014747527427971363,-0.024568339809775352,0.015369256027042866,-0.02565055713057518,0.04223579913377762,-0.039874117821455,-0.006124237552285194,0.034670181572437286,0.031533271074295044,-0.03223337605595589,0.014032898470759392,-0.05018024519085884,0.011944866739213467,-0.027414541691541672,-0.03634411096572876,-0.02646733447909355,-0.00325353117659688,-0.0017327888635918498,-0.06502539664506912,0.014523878693580627,-0.01832161843776703,-0.011239683255553246,-0.021213792264461517,-0.02975059486925602,-0.011044703423976898,-0.015193942934274673,-0.027727019041776657,0.010261418297886848,-0.02897731028497219,0.029704932123422623,-0.01567867584526539,0.021305104717612267,-0.08328448235988617,-0.015717515721917152,0.04319264367222786,-0.0854359045624733,0.028177985921502113,0.05852269381284714,0.04890558868646622,0.004206116311252117,-0.012416497804224491,0.03144533559679985,0.020182281732559204,0.018154969438910484,-0.020338719710707664,-0.03255568817257881,-0.013116334564983845,0.046193111687898636,0.05629176273941994,-0.00941407773643732,-0.05130089446902275,0.006608062423765659,-0.04349947348237038,0.06320459395647049,0.009557864628732204,-0.005770598538219929,-0.020235788077116013,-0.002819907385855913,0.03470272570848465,0.0008512638160027564,0.04203816503286362,0.021872172132134438,0.028872301802039146,0.0043101003393530846,-0.06315036863088608,0.011645604856312275,0.027284037321805954,0.012614103965461254,-0.04133496806025505,-0.00492485798895359,0.03445036709308624,0.055143069475889206,-0.0015148675302043557,0.038382112979888916,0.04189813509583473,0.06040605902671814,-0.039018578827381134,-0.04017508774995804,0.03362550958991051,-0.0019384585320949554,-0.03545471280813217,0.017183996737003326,0.030012406408786774,0.0555846132338047,0.01384139433503151,0.06850013136863708,0.004619227256625891,-0.0036668528337031603,-0.008232682943344116,0.016265571117401123,0.0017814855091273785,0.02490733005106449,-0.03488147258758545,-0.010961786843836308,-0.004522819072008133,0.004237636923789978,-0.004955525975674391,0.0011681017931550741,0.0017201105365529656,-0.00935391616076231,0.05961315333843231,-0.02804601565003395,0.011349284090101719,-0.0010577087523415685,-0.0834316611289978,0.0027534926775842905,-0.007536913733929396,-0.007999010384082794,0.031809624284505844,-0.05925969406962395,-0.030464181676506996,-0.0012218363117426634,-0.0017083499114960432,0.048322826623916626,0.06687376648187637,-0.04379677772521973,0.005619530100375414,-0.0300283320248127,0.051113519817590714,-0.10266528278589249,0.025950172916054726,0.010052898898720741,0.06083894893527031,0.0042490363121032715,-0.08489800989627838,0.0025814056862145662,0.0031044972129166126,-0.013857126235961914,-0.0410018153488636,0.038705531507730484,0.007804033812135458,0.0177092794328928,-0.02763773500919342,-0.014119314961135387,0.00449039600789547,-0.08190607279539108,0.03895420953631401,-0.017222924157977104,-0.00787382386624813,0.01906491070985794,0.035013265907764435,0.0173644982278347,-0.04173944890499115,0.007550145033746958,0.033346276730298996,-0.029681026935577393,0.018642889335751534,0.03694421797990799,0.049109697341918945,-0.003907982725650072,-0.00565708102658391,0.01284367498010397,-0.03348557651042938,0.006358352955430746,0.017438944429159164,0.017529351636767387,-0.08200931549072266,-0.03336864709854126,-0.025459816679358482,-0.010427193716168404,0.007108776364475489,-0.010914426296949387,0.07868010550737381,0.08594710379838943,0.017321793362498283,-0.006835652980953455,0.02738187462091446,0.024245403707027435,-0.002565158996731043,0.0011845179833471775,0.021348465234041214,0.05459516867995262,0.05436212942004204,0.035720642656087875,0.05155084282159805,0.06914404779672623,-0.017851626500487328,0.017033899202942848,-0.018736470490694046,-0.10100331902503967,-0.02813616953790188,-0.007881075143814087,-0.05589108541607857,-0.05271438881754875,-0.05037986859679222,-0.00014027651923242956,0.0006431467481888831,-0.009842514991760254,0.007193786092102528,0.0008523895521648228,0.02246844954788685,-0.021411314606666565,0.003927554935216904,0.009713252075016499,0.04063268005847931,-0.00766889238730073,-0.06044484302401543,0.06718514859676361,-0.003051211591809988,0.0270212572067976,-0.017726320773363113,-0.036200255155563354,-0.02379170060157776,-0.0207572840154171,0.07823328673839569,0.014106378890573978,-0.042494550347328186,0.0013496080646291375,0.011888123117387295,0.02279052324593067,-0.003961516078561544,-0.046832624822854996,-0.03462903946638107,0.011004886589944363,-0.017991090193390846,0.028833046555519104,-0.022761911153793335,0.04984331503510475,-0.004683644976466894,-0.01495417021214962,0.018368195742368698,0.048638876527547836,-0.011843578889966011,-0.015523787587881088,0.0418480783700943,-0.016285572201013565,0.02924771048128605,-0.0765654519200325,0.006372788920998573,-0.029115356504917145,0.06106691434979439,-0.04105644300580025,-0.009928882122039795,0.027507586404681206,-0.002386410953477025,0.033286623656749725,-0.03855431452393532,0.011790112592279911,-0.04846949130296707,-0.014559821225702763,-0.0015979609452188015,0.02963418886065483,-0.04626206308603287,0.11845732480287552,0.04321950674057007,0.049809180200099945,-0.02824130654335022,0.05650342255830765,0.03385390713810921,-0.010500897653400898,0.019207598641514778,-0.02452164515852928,0.04287146031856537,0.0029464501421898603,-0.026631850749254227,0.01583968475461006,0.01952577568590641,0.07552048563957214,0.004873073659837246,-0.007438223343342543,-0.031163617968559265,-0.016544312238693237,-0.02412043698132038,0.023499498143792152,-0.02510814741253853,-0.02261071279644966,-0.03954649344086647,0.03295735642313957,-0.012579038739204407,-0.10421349853277206,-0.01576552726328373,0.014511269517242908,0.016742292791604996,-0.0048666358925402164,-0.05295783653855324,-0.032388411462306976,0.0041725849732756615,-0.05305040255188942,0.028821606189012527,-0.017347313463687897,0.017569923773407936,0.012971950694918633,0.029128747060894966,-0.01957935281097889,0.028351107612252235,-0.009822271764278412,-0.0361715666949749,-0.009948757477104664,0.06593365967273712,0.05103118345141411,0.014973461627960205,0.008328799158334732,0.024111052975058556,-0.008145221509039402,-0.04818396642804146,0.030119366943836212,-0.026555882766842842,-0.03769813850522041,0.03601432219147682,0.03292904049158096,-0.029547447338700294,0.07026833295822144,0.024143440648913383,0.05925283581018448,-0.038279078900814056,-0.004128236323595047,0.02288227528333664,-0.036966364830732346,-0.014577336609363556,0.04364030435681343,0.03808712214231491,0.008659432642161846,-0.011506419628858566,-0.03330507501959801,0.0013756180414929986,0.020729344338178635,0.0024662187788635492,0.031307514756917953,-0.010155502706766129,-0.043982602655887604,0.08096639811992645,-0.022008143365383148,0.048882726579904556,-0.02860995940864086,-0.012154667638242245,0.021764172241091728,-0.01347585953772068,0.004015202634036541,-0.006538209039717913,-0.04859045892953873,0.032417766749858856,-0.0931936725974083,-0.03382314741611481,0.01477022748440504,-0.017253724858164787,0.014132753945887089,-0.012648594565689564,0.012018437497317791,0.03572205454111099,0.03556833043694496,0.029688306152820587,-0.06581323593854904,0.06176381558179855,-0.11232496052980423,-0.014991463162004948,0.013195567764341831,-0.04224443435668945,0.016550857573747635,0.010658715851604939,0.07573346048593521,-0.01631922461092472,-0.04994087666273117,0.019565753638744354,0.015048139728605747,-0.003947035409510136,-0.01660294085741043,0.06289031356573105,0.05684782564640045,0.011607039719820023,-0.02617277391254902,0.014638213440775871,0.016149716451764107,0.04790737107396126,-0.047237105667591095,0.008202564902603626,-0.040732670575380325,0.0015264125540852547,0.06115042045712471,0.021890154108405113,0.030283786356449127,-0.012976840138435364,-0.006357959005981684,-0.06304916739463806,0.04278481379151344,-0.04330229014158249,-0.014508872292935848,0.02770395018160343,0.016520975157618523,-0.0016057199100032449,0.05595913156867027,0.055526938289403915,-0.01607684977352619,0.005098108202219009,-0.09330814331769943,-0.001183882006444037,-0.00508843781426549,0.015107878483831882,0.01804603450000286,-0.006785212550312281,-0.05127660930156708,0.02898464724421501,0.03386610001325607,-0.03485153242945671,-0.024902136996388435,0.011923098936676979,-0.09203504770994186,-0.03383466601371765,-0.007638449314981699,0.014167040586471558,0.024720387533307076,-0.01037856750190258,-0.02770957536995411,0.03987171873450279,0.10436303168535233,0.04794977232813835,-0.018129762262105942,-0.01109102088958025,-0.09723042696714401,0.07138528674840927,-0.012567966245114803,-0.02907140739262104,-0.01962222158908844,0.014872739091515541,0.01350463181734085,0.003575204638764262,-0.0187920443713665,0.00021653396834153682,-0.011119162663817406,0.010525853373110294,0.05431985855102539,0.06346865743398666,-0.0834505632519722,-0.00008142704609781504,0.018587583675980568,-0.02787196636199951,-0.03085683099925518,-0.006026680115610361,0.022058013826608658,-0.016820028424263,-0.055352628231048584,-0.04951075091958046,-0.053130604326725006,0.06384508311748505,-0.0014287795638665557,-0.057565391063690186,0.043477341532707214,-0.0012373251374810934,-0.0478798970580101,-0.04235708341002464,0.0066660321317613125,0.019543277099728584,-0.014145029708743095,-0.048168376088142395,0.02319858781993389,0.06137346476316452,0.014521071687340736,-0.011984849348664284,0.03432978317141533,0.02153697982430458,-0.006760336458683014,-0.03757203370332718,0.0052711511962115765,0.0018271629232913256,0.0211150124669075,-0.0722031369805336,0.05583248659968376,0.0006813900545239449,0.033777978271245956,-0.03435998409986496,0.0013636706862598658,0.011555217206478119,-0.012851094827055931,0.09439022094011307,0.012074902653694153,0.0011604460887610912,-0.0378035306930542,-0.032325632870197296,0.009436449036002159,0.007862740196287632,0.00223550945520401,0.010298002511262894,-0.020964859053492546,-0.026078423485159874,0.07620815932750702,0.05128955468535423,-0.015501463785767555,0.02043219283223152,0.01374976709485054,-0.03938974067568779,0.01477649062871933,-0.0018181513296440244,-0.03256255015730858,0.034466229379177094,-0.01724938116967678,-0.006516753230243921,0.0029608369804918766,-0.00891843345016241,0.054823730140924454,0.04164004325866699,-0.03460780158638954,-0.004527481272816658,-0.07425535470247269,-0.02843746915459633,-6.665206518111946e-33,0.0043365140445530415,-0.016988718882203102,-0.040831759572029114,0.019406402483582497,0.0011847980786114931,0.005951111204922199,0.07725691050291061,-0.009145460091531277,-0.04513668268918991,0.027683818712830544,-0.014647443778812885,-0.02515655942261219,-0.010393143631517887,-0.00969443004578352,0.010710005648434162,0.0026957779191434383,0.019105659797787666,0.013336572796106339,-0.03352822735905647,0.0013754416722804308,0.03626236319541931,0.0265976469963789,0.02385745942592621,-0.029612325131893158,-0.024214714765548706,-0.0163453109562397,0.025470683351159096,0.04217218980193138,-0.03107876144349575,-0.026399850845336914,0.04295218363404274,-0.05281093344092369,-0.003893618704751134,0.0309924203902483,-0.05393446981906891,-0.005509134382009506,-0.014202243648469448,-0.06468390673398972,0.006596419960260391,-0.003576258197426796,0.09023018926382065,-0.018373604863882065,0.03629601001739502,-0.032044582068920135,0.021402597427368164,-0.016416437923908234,0.0043631955049932,0.034253064543008804,-0.0005127264303155243,0.008588974364101887,0.06325509399175644,0.012022696435451508,0.013192011043429375,0.005009827669709921,0.014086968265473843,0.027151547372341156,0.023869024589657784,0.0003357228997629136,-0.0003732888726517558,0.05423855036497116,-0.00891123153269291,-0.032640986144542694,0.0030590700916945934,0.013793759979307652,0.012833759188652039,-0.013216345570981503,-0.04331207647919655,0.01031174324452877,-0.01415836252272129,0.02700003795325756,-0.04522004723548889,-0.004060833714902401,0.027842557057738304,-0.10059042274951935,-0.012643607333302498,0.011154895648360252,-0.010458930395543575,-0.01472462061792612,0.019024083390831947,0.0211124736815691,-0.029577618464827538,-0.021564509719610214,-0.014569907449185848,0.027953868731856346,0.01097079087048769,-0.0735967755317688,-0.03308241814374924,-0.050584014505147934,0.0011353209847584367,-0.006588937249034643,-0.01360864844173193,0.04675507918000221,-0.02862706407904625,0.03749141842126846,-0.020312825217843056,0.008178814314305782,0.06364136189222336,0.021039830520749092,-0.005552171729505062,-0.051602911204099655,0.038172900676727295,0.04588375613093376,-0.048659633845090866,-0.005854296498000622,0.01183057576417923,-0.025987913832068443,0.020694855600595474,-0.03504963219165802,-0.014575459994375706,0.02513452246785164,0.02418629638850689,-0.023233292624354362,-0.022525541484355927,-0.0034695465583354235,-0.0007509596180170774,-0.017741698771715164,-0.014080873690545559,0.0057427892461419106,-0.012977813370525837,0.01073297206312418,-0.011101926676928997,-0.020514806732535362,-0.06896957755088806,0.0021440451964735985,0.029218042269349098,-0.04956385865807533,-0.014609192498028278,-0.03377905860543251,0.03173498436808586,-0.0025305929593741894,-0.008312514051795006,0.015646539628505707,2.823429383624898e-7,-0.010026413016021252,-0.00975700281560421,0.011749771423637867,0.030803611502051353,-0.010845363140106201,-0.08459161967039108,-0.004417735151946545,-0.014434886164963245,0.009062987752258778,-0.007182275410741568,-0.030275003984570503,-0.022053396329283714,-0.009209916926920414,0.06357461959123611,0.03518013656139374,-0.11636827886104584,0.020729778334498405,-0.02721245586872101,-0.029721645638346672,0.04724516719579697,0.038079459220170975,0.016208508983254433,0.04369644075632095,0.03465968370437622,0.009035490453243256,-0.0005418746150098741,-0.004583342466503382,-0.040776483714580536,0.006846074480563402,-0.016382599249482155,-0.014483549632132053,0.010640652850270271,0.022663528099656105,0.00024169906100723892,-0.00959709007292986,0.035252250730991364,-0.0042857155203819275,-0.02131647989153862,0.029813164845108986,0.044398173689842224,0.04540469869971275,0.017739417031407356,-0.009702171199023724,-0.02331465296447277,-0.021666087210178375,0.01093613263219595,0.002358331810683012,0.07981608062982559,-0.02478037215769291,0.003084035124629736,0.03586174547672272,0.006944975350052118,0.03338421881198883,-0.021397341042757034,-0.001112208585254848,0.01092518400400877,0.005102642346173525,0.024378130212426186,-0.019980253651738167,-0.008637536317110062,0.01786712184548378,-0.05838403478264809,-0.00020396587206050754,0.05121825262904167,0.05821927636861801,-0.0036358111537992954,-0.061649393290281296,3.437764223459733e-34,0.04381079971790314,-0.06900278478860855,0.061546485871076584,0.012072009965777397,0.014197466894984245,0.004668440669775009,0.01800292730331421,0.004271079320460558,0.04893361032009125,-0.04969559982419014,-0.0011748976539820433]'
SET
  @TechnicalDesignVector_8673e162 = N'[-0.03168897703289986,-0.07195394486188889,-0.016965346410870552,-0.0357075072824955,-0.0002530654601287097,-0.01720382459461689,0.05885062366724014,0.059898968786001205,-0.0416412279009819,0.01957513578236103,-0.021144714206457138,0.01705014891922474,0.008122753351926804,0.10879671573638916,-0.02950308658182621,-0.03858497366309166,-0.04648766666650772,0.04873468726873398,-0.01199866272509098,0.015262383036315441,0.023649387061595917,0.0030678086914122105,-0.029498208314180374,-0.02417268604040146,-0.0555918924510479,-0.019395822659134865,0.0009974499698728323,0.018023384734988213,-0.014016666449606419,-0.058383647352457047,0.03813113272190094,0.03316638991236687,-0.04818340390920639,0.06583964824676514,0.0000015090314491317258,-0.00741965789347887,0.002116265008226037,0.023790478706359863,0.03862101212143898,0.020376497879624367,0.02478146180510521,-0.08007949590682983,0.027920709922909737,-0.01797656901180744,0.013157726265490055,-0.02104755863547325,-0.027717800810933113,0.016751183196902275,0.06382361799478531,-0.020764091983437538,0.01769815944135189,0.003244663355872035,-0.024812404066324234,0.0052198804914951324,-0.04150160402059555,0.06347361952066422,-0.024496233090758324,0.033835358917713165,0.07461699843406677,0.03019958734512329,0.007592614274471998,0.027521967887878418,0.005478102248162031,-0.027199391275644302,-0.005704195704311132,-0.022169632837176323,0.06012207269668579,-0.0756826177239418,0.0013360910816118121,0.03927239775657654,0.10600835829973221,-0.011757979169487953,0.02097279578447342,-0.0251051876693964,-0.043269600719213486,0.01476068515330553,-0.06423325091600418,-0.031491588801145554,0.004050412680953741,-0.0671076625585556,-0.052553705871105194,-0.02656472660601139,-0.0690235048532486,-0.05037117004394531,0.04707791656255722,-0.02387346886098385,0.016792982816696167,0.03313228860497475,-0.05534358322620392,0.018858954310417175,-0.007291518151760101,0.005821541417390108,0.028555219992995262,0.0027206512168049812,-0.01633496582508087,-0.025927113369107246,-0.006034182384610176,-0.11241720616817474,0.030681965872645378,0.01669039949774742,0.09976208209991455,0.011274515651166439,0.025994334369897842,0.03412066027522087,0.04872787743806839,0.046522147953510284,0.00971949752420187,-0.08344625681638718,-0.005719661246985197,0.0570247583091259,0.06690166145563126,-0.00805475190281868,-0.03542989492416382,-0.007511159870773554,-0.04310298711061478,0.018072091042995453,0.002329867100343108,-0.007182170636951923,0.013896512798964977,0.01931134983897209,0.13751822710037231,0.006806982681155205,-0.03210502490401268,0.003367834258824587,0.016102122142910957,0.06197211518883705,-0.043096691370010376,-0.05844955891370773,0.0024362618569284678,-0.01717265695333481,-0.018314102664589882,-0.0022913527209311724,0.03570244833827019,-0.0014005720149725676,-0.025824381038546562,0.01443038135766983,0.014952817931771278,0.05648444965481758,-0.01290958747267723,-0.0096515454351902,-0.015282874926924706,0.0334133580327034,-0.05104631930589676,0.02702212892472744,0.03150211647152901,-0.013248776085674763,0.01858680509030819,0.04732513427734375,0.018912041559815407,0.028835302218794823,0.0018179342150688171,-0.023589681833982468,-0.0614662766456604,0.015813173726201057,-0.0495343878865242,0.006903469562530518,0.008354430086910725,0.001321061747148633,0.0292165819555521,-0.02319425158202648,0.03488294407725334,-0.050501227378845215,-0.002419151598587632,-0.0035442933440208435,-0.05489237606525421,0.012246151454746723,-0.08022964000701904,0.0016609086887910962,0.002037971280515194,-0.014429770410060883,0.012490713968873024,-0.026576261967420578,-0.002897703554481268,-0.0613427571952343,0.04690808430314064,0.049570232629776,-0.0007225956651382148,-0.010654345154762268,-0.05121120810508728,-0.01105183269828558,0.06148877367377281,-0.08351432532072067,0.001772209070622921,-0.012413344345986843,0.09420071542263031,0.006511731538921595,-0.11911922693252563,0.039129551500082016,-0.029909919947385788,-0.011004758067429066,-0.033744003623723984,0.02723538875579834,-0.04667218402028084,-0.008931776508688927,0.01326215360313654,0.005093673709779978,0.028337867930531502,-0.02580914832651615,0.035626430064439774,0.007499595172703266,0.022751236334443092,0.05377552658319473,0.010838000103831291,0.010315089486539364,0.020906595513224602,0.01051616296172142,0.01152039971202612,-0.03561907634139061,-0.03743279352784157,0.05301806330680847,0.061983440071344376,0.005600994452834129,-0.06337132304906845,-0.008130894042551517,-0.02711375802755356,-0.02615480124950409,0.011464624665677547,0.002588269766420126,-0.04096200317144394,-0.008527006953954697,-0.03952154517173767,-0.03805842995643616,-0.008572251535952091,-0.0024931831285357475,0.07070188224315643,-0.0037146955728530884,0.03207571804523468,-0.045597389340400696,0.0015580890467390418,0.0535234659910202,-0.03389006480574608,-0.015966104343533516,0.011103731580078602,0.028255077078938484,-0.009232593700289726,0.054095786064863205,0.004053309094160795,0.024895334616303444,0.006479137111455202,0.03831993415951729,0.024725820869207382,-0.04635673761367798,-0.013408697210252285,-0.0029381064232438803,-0.014356687664985657,-0.0067023420706391335,-0.042914219200611115,0.005766730289906263,-0.020922062918543816,-0.029887907207012177,0.022276269271969795,0.0031084336806088686,-0.014948037452995777,-0.025686342269182205,0.0034548838157206774,-0.048464056104421616,0.054189883172512054,0.009697340428829193,0.030008332803845406,-0.007151915691792965,0.029462192207574844,0.007977493107318878,-0.0016321801813319325,-0.03748585283756256,-0.022947506979107857,-0.026167428120970726,0.05348210409283638,-0.004457013215869665,-0.013691684231162071,0.013522457331418991,0.014052941463887691,0.03140438348054886,0.010619566775858402,-0.004549776203930378,-0.0016324336174875498,-0.020487559959292412,-0.02027054876089096,0.024118760600686073,-0.02498595230281353,0.013568867929279804,-0.016766684129834175,0.01606013998389244,0.016704954206943512,0.004352296236902475,0.00380365876480937,-0.02356007695198059,0.04636022821068764,0.054488398134708405,-0.0046424586325883865,-0.015257617458701134,-0.022108370438218117,-0.007553663570433855,0.02581782266497612,0.006391175091266632,-0.010396808385848999,0.03306759148836136,-0.024591514840722084,0.07328703999519348,-0.028707517310976982,0.03127847984433174,-0.030829474329948425,-0.01407718751579523,0.017524534836411476,0.00983254611492157,-0.04290110990405083,0.022732846438884735,0.05613935366272926,0.048253901302814484,-0.02709866315126419,0.055647578090429306,0.03793492168188095,0.007547833491116762,0.04953678324818611,-0.05788196995854378,0.022957323119044304,0.0566752552986145,0.0174186360090971,0.07124055922031403,0.023296969011425972,0.05798272788524628,0.034622080624103546,-0.02420544996857643,-0.0028198990039527416,-0.019936487078666687,-0.029234208166599274,0.016956087201833725,-0.02284667268395424,-0.01859739050269127,-0.07228803634643555,-0.0020823380909860134,-0.018379706889390945,-0.029986094683408737,0.03344045951962471,-0.008299389854073524,0.026589304208755493,0.03987611457705498,-0.07049604505300522,-0.10480400174856186,0.022826194763183594,-0.03882094845175743,-0.00895594246685505,-0.04182696342468262,-0.013365549966692924,0.040790196508169174,0.014362837187945843,-0.03354310616850853,0.02015596814453602,-0.04025636613368988,-0.09896161407232285,0.014719826169312,0.02723093144595623,0.04869582876563072,-0.0037523657083511353,0.01634545810520649,-0.0009465210023336112,0.06864245235919952,-0.06751995533704758,0.013710656203329563,-0.018845831975340843,-0.025828558951616287,-0.03104575350880623,0.04211115464568138,0.05394197627902031,0.027217978611588478,0.0030956699047237635,-0.002149640116840601,0.04729185625910759,0.024450452998280525,-0.019016267731785774,-0.04131126403808594,0.05462063103914261,0.05143912136554718,0.05798183009028435,0.031963396817445755,-0.022415317595005035,0.00913807563483715,0.01127684861421585,0.0024511509109288454,0.04454959183931351,0.03303607180714607,0.026028303429484367,-0.055112194269895554,0.04656357690691948,-0.012029973790049553,0.03974182531237602,-0.005384738557040691,-0.038622770458459854,-0.006898850202560425,-0.008215646259486675,0.028799869120121002,0.007461100351065397,0.011002977378666401,0.07645005732774734,-0.055213890969753265,-0.005859056022018194,0.021635444834828377,0.016178719699382782,-0.02639884687960148,-0.009386285208165646,0.03130035847425461,0.03516547009348869,-0.008596369065344334,-0.010421090759336948,-0.04702362045645714,0.06556036323308945,-0.057366933673620224,-0.05380937457084656,0.03696509450674057,0.015509373508393764,-0.0006608334952034056,-0.02461380511522293,0.0024382418487221003,-0.0038532542530447245,-0.033628590404987335,-0.05008767545223236,-0.005730048753321171,-0.04513100907206535,-0.05026845261454582,0.012855605222284794,0.034227773547172546,0.037347596138715744,0.0007687433389946818,-0.0001562385878060013,-0.03125637024641037,0.018835818395018578,-0.01881793700158596,-0.02512531727552414,-0.06633760780096054,0.010576636530458927,0.04094287008047104,0.022457901388406754,-0.04558379948139191,-0.016090959310531616,-0.006059324834495783,0.017546480521559715,-0.01126178540289402,-0.04612409695982933,0.026062067598104477,-0.0076866536401212215,-0.005221772938966751,0.021113695576786995,-0.018022336065769196,0.030165623873472214,0.013691204600036144,-0.049913424998521805,-0.08072447031736374,-0.0015961978351697326,-0.02582497149705887,0.01516351755708456,-0.03219345584511757,0.007290591020137072,-0.05566226691007614,0.05903065204620361,0.04088888317346573,-0.004399176687002182,-0.03523797541856766,0.056824736297130585,-0.038469746708869934,-0.015720050781965256,-0.03401940315961838,0.03400898724794388,0.019296610727906227,-0.020220443606376648,-0.0014894104097038507,0.03596685081720352,0.06497752666473389,0.06240496411919594,-0.017572736367583275,-0.02312467247247696,-0.049269307404756546,-0.00686680106446147,-0.02360399439930916,-0.041079260408878326,-0.010967504233121872,0.009304804727435112,0.01793930120766163,-0.004950967617332935,0.012272230349481106,0.037609122693538666,-0.00995281059294939,0.017401073127985,0.0007227257592603564,-0.002323648426681757,-0.014759807847440243,0.025075271725654602,-0.008706602267920971,0.0197000652551651,-0.033659014850854874,-0.006197004579007626,0.004034462850540876,-0.028500940650701523,-0.052177224308252335,-0.00537329725921154,0.05803400278091431,0.054690729826688766,-0.012479547411203384,-0.06028019264340401,0.060739077627658844,-0.023502904921770096,-0.05479701980948448,-0.044512711465358734,-0.019859643653035164,0.016641367226839066,0.01822039484977722,-0.05831842124462128,0.04304651543498039,0.02869049832224846,-0.004561866633594036,-0.013989849016070366,0.007436610758304596,0.003604828380048275,-0.0004464020312298089,-0.021152349188923836,-0.024348771199584007,-0.007015183102339506,-0.027068370953202248,-0.05260787904262543,0.016155529767274857,-0.023588985204696655,0.018676919862627983,-0.009312322363257408,-0.01865074783563614,-0.020784897729754448,0.011476053856313229,0.10528341680765152,0.02147267572581768,0.01997051015496254,-0.007472117431461811,-0.02684304304420948,-0.0008604294271208346,-0.04062056541442871,-0.010557585395872593,0.02376328967511654,-0.027975551784038544,-0.028156403452157974,0.059234246611595154,-0.007258411031216383,0.07277113944292068,0.024264156818389893,-0.06233283877372742,-0.06896930932998657,-0.02223246358335018,-0.014465779066085815,-0.0021489462815225124,-0.00300962058827281,-0.009682700037956238,-0.0021114074625074863,-0.04485475644469261,-0.004025497939437628,0.04174289479851723,0.05535796657204628,-0.06203868240118027,-0.03403962403535843,-0.017959365621209145,0.01690426655113697,-5.6198878810676575e-33,0.023308472707867622,0.015332182869315147,-0.041907843202352524,0.04445241019129753,0.003379981266334653,-0.015583599917590618,0.04438450187444687,-0.007960101589560509,0.001173109281808138,-0.008494761772453785,-0.009104525670409203,-0.0308196023106575,0.013295209035277367,-0.011170857585966587,-0.03784342482686043,0.04344412684440613,0.04341442883014679,-0.016513781622052193,-0.02527717687189579,-0.005511294584721327,0.016384514048695564,0.040734510868787766,0.008716423064470291,-0.05276710167527199,-0.03583240136504173,0.0002780709764920175,0.06029249355196953,-0.006609281525015831,0.013515574857592583,0.015645470470190048,0.016267258673906326,0.042939312756061554,-0.02799392305314541,-0.0012618061155080795,0.00580483628436923,0.06249113008379936,-0.05482030659914017,-0.040734175592660904,0.014962110668420792,0.06136777997016907,0.11803095042705536,0.037157658487558365,0.004598830360919237,-0.035862576216459274,-0.00422257324680686,-0.020827678963541985,0.0025452536065131426,-0.002624603919684887,-0.019276773557066917,0.014558969996869564,0.06800820678472519,0.019596436992287636,0.010092346929013729,0.02623336762189865,0.017327507957816124,0.0034510043915361166,0.028883619233965874,0.004891282878816128,-0.05854031443595886,0.019147805869579315,-0.03773375228047371,-0.08274608850479126,0.007846121676266193,0.04825417697429657,0.015592116862535477,0.033322498202323914,-0.011249435134232044,0.03824162855744362,-0.0033834625501185656,0.013285152614116669,0.008691221475601196,0.005606108345091343,0.06498249620199203,-0.09031062573194504,-0.002752582309767604,-0.005395400803536177,0.044965822249650955,-0.0019444170175120234,0.061159130185842514,-0.00568851362913847,0.0020613952074199915,-0.014059189707040787,-0.01227249763906002,-0.018728913739323616,-0.010487324558198452,-0.041097138077020645,-0.0219626035541296,0.007428690791130066,0.005796757061034441,-0.003303209552541375,0.023265792056918144,0.05124697461724281,-0.07952134311199188,0.025465363636612892,-0.0032125709112733603,0.000649757741484791,0.03419506922364235,0.028217541053891182,0.0050796689465641975,-0.11179577559232712,0.05022558942437172,-0.00668159406632185,-0.06975474953651428,-0.025764066725969315,-0.012940533459186554,-0.016445498913526535,0.019031427800655365,-0.04758540540933609,-0.05666850134730339,0.023045873269438744,0.028812892735004425,-0.0036663669161498547,0.031567737460136414,-0.06721615046262741,-0.003064109478145838,-0.028294585645198822,-0.013488145545125008,0.009717557579278946,0.016501527279615402,0.0026003452949225903,0.0017682304605841637,0.0005547080072574317,-0.059071049094200134,0.000975657079834491,0.02917010523378849,-0.026905391365289688,0.03692639619112015,0.01830992102622986,0.02028474025428295,0.03781834989786148,-0.01938934437930584,-0.026088574901223183,2.3430010287484038e-7,-0.0058248997665941715,0.017155369743704796,-0.023265400901436806,-0.029713694006204605,0.019118282943964005,-0.030808275565505028,-0.015962393954396248,0.0002870253811124712,-0.025168457999825478,-0.027377858757972717,-0.006395511329174042,-0.006316276732832193,0.022639200091362,0.03239227831363678,0.09351404011249542,-0.05886749550700188,0.005333966109901667,-0.08100885152816772,-0.01676696166396141,0.0688958466053009,-0.0055507635697722435,-0.0019108523847535253,0.1005135327577591,0.005692652426660061,-0.023241888731718063,0.00381296593695879,0.027446912601590157,-0.022807059809565544,0.07431955635547638,-0.030751146376132965,-0.06075325980782509,0.030152233317494392,0.02272932603955269,-0.012832892127335072,-0.0025122242514044046,-0.012698456645011902,0.010645844973623753,0.031745828688144684,-0.03633921220898628,0.1304624378681183,0.06191971153020859,0.010637340135872364,-0.038466133177280426,-0.044662006199359894,0.007370013743638992,-0.04237476363778114,-0.05482049286365509,0.035479586571455,-0.024064328521490097,-0.029695389792323112,0.00423838384449482,-0.010191034525632858,-0.0008335565798915923,-0.03474755585193634,0.025191402062773705,0.010032965801656246,0.0007340897573158145,0.04867997393012047,0.0054268320091068745,0.05709639564156532,-0.0019987765699625015,-0.05351188778877258,-0.029140178114175797,0.01326111238449812,-0.001483574858866632,0.020148927345871925,-0.002229619538411498,3.012393914281678e-34,0.0296794306486845,-0.0374649278819561,0.007330712396651506,0.008717515505850315,0.014275631867349148,-0.011383981443941593,0.0895533561706543,0.0002640080056153238,0.03543722257018089,-0.05958732217550278,0.02363148331642151]'
SET
  @HasCustomProps_8673e162 = 1
SET
  @HasCustomEvents_8673e162 = 1
SET
  @RequiresData_8673e162 = 1
SET
  @DependencyCount_8673e162 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_8673e162 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_8673e162 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_8673e162 = 1
SET
  @ID_8673e162 = '12796365-7678-410F-867D-3EF0598E0BEB'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_8673e162,
  @Name = @Name_8673e162,
  @Version = @Version_8673e162,
  @VersionSequence = @VersionSequence_8673e162,
  @Title = @Title_8673e162,
  @Description = @Description_8673e162,
  @Type = @Type_8673e162,
  @Status = @Status_8673e162,
  @DeveloperName = @DeveloperName_8673e162,
  @DeveloperEmail = @DeveloperEmail_8673e162,
  @DeveloperOrganization = @DeveloperOrganization_8673e162,
  @SourceRegistryID = @SourceRegistryID_8673e162,
  @ReplicatedAt = @ReplicatedAt_8673e162,
  @LastSyncedAt = @LastSyncedAt_8673e162,
  @Specification = @Specification_8673e162,
  @FunctionalRequirements = @FunctionalRequirements_8673e162,
  @TechnicalDesign = @TechnicalDesign_8673e162,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_8673e162,
  @TechnicalDesignVector = @TechnicalDesignVector_8673e162,
  @HasCustomProps = @HasCustomProps_8673e162,
  @HasCustomEvents = @HasCustomEvents_8673e162,
  @RequiresData = @RequiresData_8673e162,
  @DependencyCount = @DependencyCount_8673e162,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_8673e162,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_8673e162,
  @HasRequiredCustomProps = @HasRequiredCustomProps_8673e162,
  @ID = @ID_8673e162;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_d705f41e NVARCHAR(MAX),
@Name_d705f41e NVARCHAR(500),
@Version_d705f41e NVARCHAR(50),
@VersionSequence_d705f41e INT,
@Title_d705f41e NVARCHAR(1000),
@Description_d705f41e NVARCHAR(MAX),
@Type_d705f41e NVARCHAR(255),
@Status_d705f41e NVARCHAR(50),
@DeveloperName_d705f41e NVARCHAR(255),
@DeveloperEmail_d705f41e NVARCHAR(255),
@DeveloperOrganization_d705f41e NVARCHAR(255),
@SourceRegistryID_d705f41e UNIQUEIDENTIFIER,
@ReplicatedAt_d705f41e DATETIMEOFFSET,
@LastSyncedAt_d705f41e DATETIMEOFFSET,
@Specification_d705f41e NVARCHAR(MAX),
@FunctionalRequirements_d705f41e NVARCHAR(MAX),
@TechnicalDesign_d705f41e NVARCHAR(MAX),
@FunctionalRequirementsVector_d705f41e NVARCHAR(MAX),
@TechnicalDesignVector_d705f41e NVARCHAR(MAX),
@HasCustomProps_d705f41e BIT,
@HasCustomEvents_d705f41e BIT,
@RequiresData_d705f41e BIT,
@DependencyCount_d705f41e INT,
@TechnicalDesignVectorEmbeddingModelID_d705f41e NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_d705f41e NVARCHAR(MAX),
@HasRequiredCustomProps_d705f41e BIT,
@ID_d705f41e UNIQUEIDENTIFIER
SET
  @Namespace_d705f41e = N'AI/Analytics/Performance'
SET
  @Name_d705f41e = N'AIDetailTable'
SET
  @Version_d705f41e = N'1.0.0'
SET
  @VersionSequence_d705f41e = 1
SET
  @Title_d705f41e = N'AI Detail Table'
SET
  @Description_d705f41e = N'Detailed table view showing individual runs for drill-down analysis with sorting and filtering'
SET
  @Type_d705f41e = N'Table'
SET
  @Status_d705f41e = N'Published'
SET
  @Specification_d705f41e = N'{"name":"AIDetailTable","location":"embedded","title":"AI Detail Table","description":"Detailed table view showing individual runs for drill-down analysis with sorting and filtering","type":"table","functionalRequirements":"## Detail Table Requirements\n\n### Core Functionality\n- Display individual run records in a sortable table\n- Show key fields: timestamp, name, success status, tokens, cost, execution time\n- Color-coded success/failure indicators\n- Sortable columns with visual indicators\n- Paginated results for large datasets\n- Export to CSV functionality\n- Expandable rows for additional details\n\n### Table Features\n- Responsive column widths\n- Hover row highlighting\n- Sticky header during scroll\n- Loading state for data updates\n- Empty state message","dataRequirements":{"mode":"views","description":"Receives detailed run data from parent component","entities":[{"name":"MJ: AI Agent Runs","description":"Historical agent execution data for performance analysis","displayFields":["ID","AgentID","Agent","StartedAt","CompletedAt","Success","TotalTokensUsed","TotalCost"],"filterFields":["StartedAt","Success","AgentID"],"sortFields":["StartedAt"],"fieldMetadata":[{"name":"ID","type":"uniqueidentifier","isPrimaryKey":true,"allowsNull":false,"description":"Unique run identifier"},{"name":"AgentID","type":"uniqueidentifier","allowsNull":false,"description":"Reference to AI Agent"},{"name":"Agent","type":"nvarchar","allowsNull":true,"description":"Agent name (denormalized)"},{"name":"StartedAt","type":"datetime","allowsNull":false,"description":"Execution start timestamp"},{"name":"TotalTokensUsed","type":"int","allowsNull":true,"description":"Total tokens consumed"},{"name":"TotalCost","type":"decimal","allowsNull":true,"description":"Total cost in USD"}],"permissionLevelNeeded":["read"]},{"name":"MJ: AI Prompt Runs","description":"Historical prompt execution data for performance analysis","displayFields":["ID","PromptID","Prompt","ModelID","Model","RunAt","CompletedAt","Success","TokensUsed","TotalCost"],"filterFields":["RunAt","Success","PromptID","ModelID"],"sortFields":["RunAt"],"fieldMetadata":[{"name":"ID","type":"uniqueidentifier","isPrimaryKey":true,"allowsNull":false,"description":"Unique run identifier"},{"name":"PromptID","type":"uniqueidentifier","allowsNull":false,"description":"Reference to AI Prompt"},{"name":"Prompt","type":"nvarchar","allowsNull":true,"description":"Prompt name (denormalized)"},{"name":"RunAt","type":"datetime","allowsNull":false,"description":"Execution timestamp"},{"name":"TokensUsed","type":"int","allowsNull":true,"description":"Total tokens consumed"},{"name":"TotalCost","type":"decimal","allowsNull":true,"description":"Total cost in USD"}],"permissionLevelNeeded":["read"]}],"queries":[]},"technicalDesign":"## Technical Design\n\n### Props\n- data: Array of run records\n- activeTab: Current view context (agents/prompts)\n\n### Table Management\n- Client-side sorting\n- Pagination with 25 rows per page\n- Column sorting state management\n- Row expansion for details","properties":[{"name":"data","type":"array","required":true,"description":"Array of run records to display"},{"name":"activeTab","type":"string","required":true,"description":"Current tab: agents or prompts"}],"events":[],"exampleUsage":"<AIDetailTable data={selectedPoint.items} activeTab=\"agents\" />","code":"function AIDetailTable({ data, activeTab, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIDetailTable] Rendering with'', data?.length || 0, ''items'');\n  \n  // Load DataExportPanel component\n  const DataExportPanel = components[''DataExportPanel''];\n  \n  const [sortField, setSortField] = useState(savedUserSettings?.sortField || ''timestamp'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''desc'');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [expandedRows, setExpandedRows] = useState(new Set());\n  \n  const rowsPerPage = 25;\n  \n  // Get the correct timestamp field\n  const timestampField = activeTab === ''agents'' ? ''StartedAt'' : ''RunAt'';\n  const nameField = activeTab === ''agents'' ? ''Agent'' : ''Prompt'';\n  const idField = activeTab === ''agents'' ? ''AgentID'' : ''PromptID'';\n  \n  // Sort data\n  const sortedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n    \n    const sorted = [...data].sort((a, b) => {\n      let aVal = a[sortField];\n      let bVal = b[sortField];\n      \n      // Handle null/undefined\n      if (aVal == null) return sortDirection === ''asc'' ? 1 : -1;\n      if (bVal == null) return sortDirection === ''asc'' ? -1 : 1;\n      \n      // Compare values\n      if (typeof aVal === ''string'') {\n        aVal = aVal.toLowerCase();\n        bVal = bVal.toLowerCase();\n      }\n      \n      if (aVal < bVal) return sortDirection === ''asc'' ? -1 : 1;\n      if (aVal > bVal) return sortDirection === ''asc'' ? 1 : -1;\n      return 0;\n    });\n    \n    return sorted;\n  }, [data, sortField, sortDirection]);\n  \n  // Paginate data\n  const paginatedData = useMemo(() => {\n    const start = currentPage * rowsPerPage;\n    const end = start + rowsPerPage;\n    return sortedData.slice(start, end);\n  }, [sortedData, currentPage, rowsPerPage]);\n  \n  const totalPages = Math.ceil(sortedData.length / rowsPerPage);\n  \n  const handleSort = (field) => {\n    if (sortField === field) {\n      const newDirection = sortDirection === ''asc'' ? ''desc'' : ''asc'';\n      setSortDirection(newDirection);\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: newDirection\n      });\n    } else {\n      setSortField(field);\n      setSortDirection(''asc'');\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: ''asc''\n      });\n    }\n    setCurrentPage(0);\n  };\n  \n  const toggleRowExpansion = (id) => {\n    const newExpanded = new Set(expandedRows);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedRows(newExpanded);\n  };\n  \n  const formatTimestamp = (timestamp) => {\n    if (!timestamp) return ''-'';\n    const date = new Date(timestamp);\n    return date.toLocaleString(''en-US'', {\n      month: ''short'',\n      day: ''numeric'',\n      hour: ''2-digit'',\n      minute: ''2-digit''\n    });\n  };\n  \n  const formatDuration = (ms) => {\n    if (!ms) return ''-'';\n    if (ms < 1000) return `$' + '{ms}ms`;\n    if (ms < 60000) return `$' + '{(ms / 1000).toFixed(1)}s`;\n    return `$' + '{(ms / 60000).toFixed(1)}m`;\n  };\n  \n  // Prepare data for export\n  const prepareExportData = () => {\n    return sortedData.map(item => {\n      const exportRow = {\n        Timestamp: item[timestampField],\n        Name: item[nameField] || item[idField],\n        Success: item.Success ? ''Yes'' : ''No'',\n        Tokens: (item.TotalTokensUsed || item.TokensUsed) || 0,\n        Cost: item.TotalCost || 0,\n        Model: item.Model || ''Unknown'',\n        Status: item.Status || ''Unknown''\n      };\n      \n      // Add Duration for prompts\n      if (activeTab === ''prompts'') {\n        exportRow.Duration = item.ExecutionTimeMS || 0;\n      }\n      \n      return exportRow;\n    });\n  };\n\n  // Define export columns with correct key/label format\n  const getExportColumns = () => {\n    const columns = [\n      { key: ''Timestamp'', label: ''Timestamp'' },\n      { key: ''Name'', label: activeTab === ''agents'' ? ''Agent'' : ''Prompt'' },\n      { key: ''Success'', label: ''Status'' },\n      { key: ''Tokens'', label: ''Tokens'' },\n      { key: ''Cost'', label: ''Cost'' },\n      { key: ''Model'', label: ''Model'' },\n      { key: ''Status'', label: ''Status'' }\n    ];\n    \n    if (activeTab === ''prompts'') {\n      columns.push({ key: ''Duration'', label: ''Duration (ms)'' });\n    }\n    \n    return columns;\n  };\n  \n  const columns = [\n    { field: timestampField, label: ''Timestamp'', width: ''150px'' },\n    { field: nameField, label: activeTab === ''agents'' ? ''Agent'' : ''Prompt'', width: ''auto'' },\n    { field: ''Success'', label: ''Status'', width: ''80px'' },\n    { field: ''TotalTokens'', label: ''Tokens'', width: ''100px'' },\n    { field: ''TotalCost'', label: ''Cost'', width: ''100px'' }\n  ];\n  \n  // Add Duration column only for Prompt Runs (Agent Runs don''t have ExecutionTimeMS)\n  if (activeTab === ''prompts'') {\n    columns.push({ field: ''ExecutionTimeMS'', label: ''Duration'', width: ''100px'' });\n  }\n  \n  return (\n    <div style={{\n      width: ''100%'',\n      height: ''100%'',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || ''4px'',\n      display: ''flex'',\n      flexDirection: ''column''\n    }}>\n      {/* Header */}\n      <div style={{\n        padding: styles.spacing.md,\n        borderBottom: `1px solid $' + '{styles.colors.border}`,\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center''\n      }}>\n        <h3 style={{\n          margin: 0,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.lg\n        }}>\n          Detailed Records ({sortedData.length})\n        </h3>\n        \n        {DataExportPanel && (\n          <DataExportPanel\n            data={prepareExportData()}\n            columns={getExportColumns()}\n            filename={`ai-$' + '{activeTab}-details-$' + '{new Date().toISOString().split(''T'')[0]}`}\n            formats={[''csv'', ''excel'']}\n            buttonStyle=\"dropdown\"\n            buttonText=\"Export\"\n            icon=\"fa-download\"\n            customStyles={{\n              button: {\n                padding: `$' + '{styles.spacing.sm} $' + '{styles.spacing.md}`,\n                backgroundColor: styles.colors.primary,\n                color: ''white'',\n                border: ''none'',\n                borderRadius: styles.borders?.radius || ''4px'',\n                cursor: ''pointer'',\n                fontSize: styles.typography.fontSize.sm\n              }\n            }}\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n          />\n        )}\n      </div>\n      \n      {/* Table */}\n      <div style={{ flex: 1, overflow: ''auto'' }}>\n        {paginatedData.length === 0 ? (\n          <div style={{\n            padding: styles.spacing.xl,\n            textAlign: ''center'',\n            color: styles.colors.textSecondary\n          }}>\n            No records to display\n          </div>\n        ) : (\n          <table style={{\n            width: ''100%'',\n            borderCollapse: ''collapse''\n          }}>\n            <thead style={{\n              position: ''sticky'',\n              top: 0,\n              backgroundColor: styles.colors.surface,\n              borderBottom: `2px solid $' + '{styles.colors.border}`\n            }}>\n              <tr>\n                <th style={{ width: ''30px'', padding: styles.spacing.sm }} />\n                {columns.map(col => (\n                  <th\n                    key={col.field}\n                    onClick={() => handleSort(col.field)}\n                    style={{\n                      padding: styles.spacing.sm,\n                      textAlign: ''left'',\n                      color: styles.colors.text,\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: ''600'',\n                      cursor: ''pointer'',\n                      userSelect: ''none'',\n                      width: col.width\n                    }}\n                  >\n                    <div style={{\n                      display: ''flex'',\n                      alignItems: ''center'',\n                      gap: styles.spacing.xs\n                    }}>\n                      {col.label}\n                      {sortField === col.field && (\n                        <span style={{ fontSize: ''10px'' }}>\n                          {sortDirection === ''asc'' ? ''▲'' : ''▼''}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {paginatedData.map((row, index) => {\n                const isExpanded = expandedRows.has(row.ID);\n                return (\n                  <React.Fragment key={row.ID || index}>\n                    <tr style={{\n                      borderBottom: `1px solid $' + '{styles.colors.border}`,\n                      transition: ''background-color 0.2s'',\n                      backgroundColor: index % 2 === 0 ? ''transparent'' : styles.colors.background\n                    }}>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        textAlign: ''center''\n                      }}>\n                        <button\n                          onClick={() => toggleRowExpansion(row.ID)}\n                          style={{\n                            background: ''none'',\n                            border: ''none'',\n                            cursor: ''pointer'',\n                            color: styles.colors.textSecondary,\n                            padding: 0,\n                            fontSize: ''12px''\n                          }}\n                        >\n                          {isExpanded ? ''▼'' : ''▶''}\n                        </button>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text\n                      }}>\n                        {formatTimestamp(row[timestampField])}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        overflow: ''hidden'',\n                        textOverflow: ''ellipsis'',\n                        whiteSpace: ''nowrap'',\n                        maxWidth: ''200px''\n                      }}>\n                        {row[nameField] || row[idField] || ''-''}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm\n                      }}>\n                        <span style={{\n                          display: ''inline-block'',\n                          padding: `2px 8px`,\n                          borderRadius: ''12px'',\n                          backgroundColor: row.Success ? styles.colors.success + ''20'' : styles.colors.error + ''20'',\n                          color: row.Success ? styles.colors.success : styles.colors.error,\n                          fontSize: ''11px'',\n                          fontWeight: ''600''\n                        }}>\n                          {row.Success ? ''Success'' : ''Failed''}\n                        </span>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: ''right''\n                      }}>\n                        {(row.TotalTokensUsed || row.TokensUsed) ? (row.TotalTokensUsed || row.TokensUsed).toLocaleString() : ''-''}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: ''right''\n                      }}>\n                        {row.TotalCost ? `$$' + '{row.TotalCost.toFixed(4)}` : ''-''}\n                      </td>\n                      {activeTab === ''prompts'' && (\n                        <td style={{\n                          padding: styles.spacing.sm,\n                          fontSize: styles.typography.fontSize.sm,\n                          color: styles.colors.text,\n                          textAlign: ''right''\n                        }}>\n                          {formatDuration(row.ExecutionTimeMS)}\n                        </td>\n                      )}\n                    </tr>\n                    {isExpanded && (\n                      <tr>\n                        <td colSpan={columns.length + 1} style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.background,\n                          borderBottom: `1px solid $' + '{styles.colors.border}`\n                        }}>\n                          <div style={{\n                            display: ''grid'',\n                            gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'',\n                            gap: styles.spacing.md,\n                            fontSize: styles.typography.fontSize.sm\n                          }}>\n                            <div>\n                              <strong style={{ color: styles.colors.textSecondary }}>ID:</strong>\n                              <div style={{ color: styles.colors.text, fontFamily: ''monospace'' }}>\n                                {row.ID}\n                              </div>\n                            </div>\n                            {row.ErrorMessage && (\n                              <div style={{ gridColumn: ''1 / -1'' }}>\n                                <strong style={{ color: styles.colors.textSecondary }}>Error:</strong>\n                                <div style={{ color: styles.colors.error }}>\n                                  {row.ErrorMessage}\n                                </div>\n                              </div>\n                            )}\n                            {row.Model && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Model:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {row.Model}\n                                </div>\n                              </div>\n                            )}\n                            {row.CompletedAt && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Completed:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {formatTimestamp(row.CompletedAt)}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n      </div>\n      \n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div style={{\n          padding: styles.spacing.md,\n          borderTop: `1px solid $' + '{styles.colors.border}`,\n          display: ''flex'',\n          justifyContent: ''center'',\n          alignItems: ''center'',\n          gap: styles.spacing.sm\n        }}>\n          <button\n            onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}\n            disabled={currentPage === 0}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              backgroundColor: currentPage === 0 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === 0 ? styles.colors.textSecondary : ''white'',\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: currentPage === 0 ? ''not-allowed'' : ''pointer'',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Previous\n          </button>\n          \n          <span style={{\n            color: styles.colors.text,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Page {currentPage + 1} of {totalPages}\n          </span>\n          \n          <button\n            onClick={() => setCurrentPage(Math.min(totalPages - 1, currentPage + 1))}\n            disabled={currentPage === totalPages - 1}\n            style={{\n              padding: `$' + '{styles.spacing.xs} $' + '{styles.spacing.sm}`,\n              backgroundColor: currentPage === totalPages - 1 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === totalPages - 1 ? styles.colors.textSecondary : ''white'',\n              border: `1px solid $' + '{styles.colors.border}`,\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: currentPage === totalPages - 1 ? ''not-allowed'' : ''pointer'',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}","dependencies":[{"name":"DataExportPanel","location":"registry","namespace":"Generic/UI/Export","version":"^1.0.0"}],"libraries":[]}'
SET
  @FunctionalRequirements_d705f41e = N'Display individual run records in a sortable table. Show key fields: timestamp, name, success status, tokens, cost, execution time. Color-coded success/failure indicators. Sortable columns with visual indicators. Paginated results for large datasets. Export to CSV functionality. Expandable rows for additional details'
SET
  @TechnicalDesign_d705f41e = N'Client-side sorting and pagination with 25 rows per page. Column sorting state management. Row expansion for details. CSV export functionality'
SET
  @FunctionalRequirementsVector_d705f41e = N'[-0.06347206979990005,0.018283357843756676,-0.011913783848285675,-0.04490721598267555,-0.012393924407660961,0.01562241930514574,0.02359248325228691,0.05300373584032059,-0.04342465102672577,0.021863726899027824,0.03792266547679901,0.045000769197940826,-0.02531091496348381,0.135312020778656,-0.010540986433625221,-0.04449110105633736,-0.008858384564518929,0.035603418946266174,0.00646161986514926,0.03579699248075485,-0.014665652066469193,-0.058084018528461456,0.010785441845655441,-0.028834737837314606,-0.004369386006146669,-0.03736534342169762,-0.06274186819791794,0.01977747492492199,0.02397010289132595,-0.11770008504390717,-0.02960379794239998,0.02306138537824154,-0.009691189043223858,0.014575524255633354,0.000001991061481021461,-0.007752765901386738,-0.01091183815151453,0.056072767823934555,-0.06577187031507492,0.05195922031998634,0.03951886668801308,-0.0021867475006729364,0.046289630234241486,0.004959776997566223,0.0024395748041570187,-0.041311364620923996,-0.018656078726053238,0.04416975751519203,0.03695053607225418,-0.042303044348955154,0.010722129605710506,-0.0047463830560445786,-0.02482941746711731,0.018158072605729103,0.006807075347751379,0.010430345311760902,-0.014029021374881268,-0.011949042789638042,0.07090579718351364,0.01450808160007,0.02029988169670105,-0.01679139770567417,0.028471428900957108,-0.029354646801948547,-0.018785452470183372,-0.00007169364107539877,-0.03832447528839111,0.0012436154065653682,-0.018939882516860962,-0.014987657777965069,0.05110765993595123,-0.06305667757987976,-0.020734237506985664,-0.06305616348981857,-0.007388539146631956,-0.11613244563341141,-0.02081986702978611,0.028373071923851967,0.004069250542670488,0.020904414355754852,-0.051660697907209396,0.07732497155666351,-0.05087606981396675,-0.024912431836128235,-0.01892589032649994,-0.02671308070421219,-0.010641508735716343,-0.013259602710604668,-0.03878423944115639,0.030991293489933014,0.06985195726156235,0.04565834254026413,0.031181808561086655,-0.006322668865323067,-0.04006272554397583,-0.03664584085345268,0.03291575610637665,-0.07596800476312637,0.029242612421512604,-0.00045835142373107374,0.013427725061774254,-0.022372907027602196,0.008382792584598064,0.00694093806669116,0.030979307368397713,0.011566310189664364,0.03552692383527756,0.02652718499302864,-0.006984589621424675,-0.038650572299957275,-0.0008003687835298479,0.014246025122702122,0.004121582023799419,0.026623820886015892,-0.0041308715008199215,0.03262479603290558,-0.06176646053791046,0.02578502707183361,-0.027866164222359657,0.06171819940209389,0.05567949265241623,0.028369832783937454,-0.01827402226626873,0.014915568754076958,0.014136824756860733,-0.09579342603683472,0.013702917844057083,-0.002248381031677127,0.016640128567814827,-0.05027143657207489,-0.042615924030542374,-0.039750855416059494,0.030134696513414383,0.00560253020375967,-0.019755864515900612,0.018127091228961945,0.029408302158117294,0.01187456026673317,-0.04506436735391617,-0.010199726559221745,0.04794890061020851,0.019524870440363884,-0.022943470627069473,0.05915921926498413,0.055865153670310974,0.015096111223101616,0.0030838693492114544,0.06158162280917168,-0.01431744173169136,0.013216115534305573,0.01819886825978756,0.0023702559992671013,0.03480009734630585,0.03819134086370468,-0.048443254083395004,-0.0034878153819590807,0.015399523079395294,-0.0407816581428051,-0.029376916587352753,0.07312576472759247,-0.004234266001731157,-0.05241435766220093,-0.0013788390206173062,-0.04181927070021629,0.012584956362843513,-0.011122092604637146,-0.058234699070453644,0.05811699852347374,0.016407541930675507,0.0017981096170842648,0.007160931825637817,-0.03802300989627838,0.0313272550702095,0.05977374687790871,0.00837964378297329,0.04337549954652786,0.0493033230304718,-0.020717939361929893,0.024033203721046448,0.03600725159049034,0.04181338846683502,-0.08862567692995071,0.006793628912419081,-0.018701888620853424,0.12019427865743637,-0.016299156472086906,0.030615562573075294,0.0015283790417015553,-0.017568929120898247,0.007355812471359968,-0.02200685814023018,0.005508156027644873,-0.03893763944506645,0.03789374232292175,0.012878216803073883,0.007500953506678343,-0.0025669396854937077,-0.12385605275630951,0.012839027680456638,0.023064738139510155,-0.03442585840821266,-0.040269628167152405,0.00249902973882854,0.06449997425079346,-0.016437536105513573,-0.02441403642296791,0.07409012317657471,-0.0019980543293058872,-0.011573338881134987,-0.020454958081245422,0.012830435298383236,-0.019242674112319946,-0.004282035399228334,0.07284526526927948,-0.006783427204936743,0.09482483565807343,0.03396926075220108,0.0031160195358097553,-0.012369934469461441,0.035942427814006805,-0.0359833762049675,0.0021355040371418,-0.057085368782281876,0.010413933545351028,0.08897886425256729,0.01807708665728569,0.037384651601314545,-0.010781400837004185,0.05891749635338783,0.04802454635500908,0.02291262522339821,-0.0022366081830114126,0.06808067858219147,0.032316312193870544,0.02756422758102417,0.040579453110694885,0.10106456279754639,0.09111401438713074,-0.06406726688146591,0.08446589857339859,0.024656904861330986,-0.026431972160935402,-0.07470427453517914,-0.004693194292485714,-0.027890823781490326,-0.022836457937955856,-0.029093768447637558,0.02613815851509571,0.01448199711740017,0.012231062166392803,-0.016222268342971802,0.002601039595901966,0.05461113154888153,0.016772055998444557,0.0005697909509763122,0.010193604975938797,-0.09881391376256943,-0.057271361351013184,-0.10274429619312286,0.10330596566200256,0.04704313725233078,-0.053325679153203964,-0.01065091136842966,-0.019574793055653572,0.015496808104217052,-0.01908811181783676,0.04834247753024101,-0.057244181632995605,0.0017566485330462456,0.04402148723602295,0.025792831555008888,0.02092949114739895,0.0017138230614364147,-0.007228303235024214,-0.0350058414041996,0.013006397522985935,-0.060507725924253464,0.05252702534198761,-0.012936265207827091,0.01483602449297905,0.008579850196838379,-0.007745537906885147,-0.007347551640123129,0.006058963015675545,-0.0005284760845825076,0.01693437248468399,0.0224161259829998,0.0015808597672730684,-0.03564868122339249,-0.026856986805796623,0.05276595428586006,-0.02136285975575447,0.06178341433405876,0.014649017713963985,-0.019334916025400162,0.021957380697131157,-0.0666760578751564,0.05607062205672264,0.015094447880983353,0.021048665046691895,-0.020992137491703033,0.027227405458688736,-0.017372891306877136,0.013011942617595196,-0.05016067996621132,0.06806647032499313,0.09818462282419205,-0.047156866639852524,0.016368919983506203,-0.0009174059960059822,0.009478339925408363,0.017125828191637993,-0.01915034092962742,-0.0050595663487911224,0.030959296971559525,-0.014132608659565449,-0.0034228377044200897,0.024386854842305183,-0.010769129730761051,0.02050204947590828,0.013967800885438919,0.008199067786335945,-0.0003668628924060613,0.001425736234523356,-0.010063765570521355,0.0024536626879125834,-0.04438800737261772,-0.023387018591165543,0.02275465615093708,0.031442541629076004,0.018592718988656998,-0.10091707855463028,-0.016872897744178772,0.026148024946451187,-0.022016581147909164,-0.004216513130813837,-0.048396091908216476,0.0033515957184135914,-0.02215573377907276,-0.042896755039691925,-0.008959709666669369,-0.00829711277037859,0.008180025964975357,-0.059008896350860596,0.018443703651428223,-0.04528215155005455,0.026257779449224472,0.03644729405641556,-0.07707896828651428,-0.013270380906760693,0.0690615251660347,0.039338771253824234,-0.009393656626343727,-0.015821563079953194,0.030782397836446762,-0.03291073441505432,-0.060802023857831955,0.004155431874096394,-0.018924498930573463,0.003386055352166295,0.052062831819057465,0.03297238424420357,0.04778015613555908,-0.007065916899591684,-0.01792162097990513,-0.009564975276589394,-0.008028990589082241,-0.033760711550712585,-0.023534825071692467,-0.005464912857860327,0.0024265283718705177,-0.009556551463901997,-0.003877404145896435,0.0025000404566526413,-0.011852300725877285,-0.024299582466483116,0.028536144644021988,0.0021277626510709524,-0.05307004973292351,-0.010677278973162174,0.041101910173892975,0.027701813727617264,0.06722137331962585,-0.03370284661650658,0.06087430194020271,-0.04380898177623749,-0.012463293969631195,-0.015684355050325394,-0.03706291317939758,0.019883539527654648,-0.004096364136785269,-0.04894205927848816,-0.03846672177314758,-0.07578916102647781,-0.02916787378489971,-0.04365624859929085,-0.0012219605268910527,0.00622468302026391,-0.01973292976617813,0.0056800805032253265,0.021347418427467346,0.05038885399699211,-0.034621044993400574,-0.0037255112547427416,0.02800125814974308,-0.03346463292837143,0.07042143493890762,0.011738377623260021,-0.006430500652641058,0.01150463055819273,-0.03607573360204697,-0.031097041442990303,-0.02170701138675213,-0.037313204258680344,0.043913573026657104,-0.0010403977939859033,0.00015474192332476377,-0.027512067928910255,-0.007539334241300821,0.08078455924987793,-0.0285014770925045,0.01883203350007534,0.019926317036151886,-0.03840888291597366,0.014062182046473026,-0.05067647248506546,-0.02952440269291401,-0.020371465012431145,-0.012956551276147366,0.016692573204636574,-0.013099929317831993,-0.027021482586860657,0.013620497658848763,0.02434753254055977,-0.03359299525618553,0.02030656673014164,-0.018800416961312294,-0.04833189770579338,0.03775431215763092,0.007550323382019997,-0.0689002200961113,0.015828322619199753,0.024510016664862633,-0.031443364918231964,-0.009126851335167885,-0.07143578678369522,0.0087064728140831,-0.02762119099497795,-0.013204818591475487,0.03665301203727722,-0.018443262204527855,-0.05897398665547371,0.009769747033715248,-0.012234406545758247,-0.006129202898591757,-0.013748454861342907,0.018219074234366417,-0.009975857101380825,0.006003935821354389,0.03872455283999443,0.0040637776255607605,0.02338358946144581,-0.05503350496292114,0.02962386980652809,0.011302786879241467,-0.02703033573925495,-0.01568548008799553,-0.01488970872014761,-0.05229923874139786,-0.06411941349506378,0.028393620625138283,-0.0030607611406594515,-0.02972254902124405,-0.03229377046227455,0.019516726955771446,-0.007602993864566088,-0.025372261181473732,0.019867029041051865,0.027290502563118935,0.014259005896747112,0.010667839087545872,0.03313450142741203,0.04238511249423027,-0.15066973865032196,0.03254799172282219,0.041445303708314896,-0.0987006276845932,-0.025641532614827156,-0.01643388159573078,0.04508623853325844,-0.024316959083080292,-0.032156020402908325,-0.024201637133955956,0.019259333610534668,0.004827182739973068,0.009857158176600933,-0.10385061800479889,0.012086249887943268,-0.0472041517496109,-0.010850614868104458,-0.038773324340581894,0.031084371730685234,-0.03846581280231476,-0.04583616927266121,0.02414330281317234,0.06527712196111679,0.017413269728422165,0.0036725110840052366,-0.009736128151416779,0.027587564662098885,0.024889515712857246,0.019892696291208267,-0.04877503588795662,0.04312147945165634,0.04066631942987442,0.004235138185322285,-0.10879776626825333,0.04330339655280113,-0.007351130247116089,-0.008504005149006844,-0.0005282373167574406,-0.030027328059077263,0.017782749608159065,-0.01283990778028965,0.09765083342790604,-0.031978871673345566,0.012204304337501526,-0.023943757638335228,-0.012619337998330593,0.03586683049798012,0.027491038665175438,-0.03244948387145996,0.004067218396812677,-0.04691926762461662,-0.03297215700149536,0.048596229404211044,0.03203228861093521,0.03165540099143982,0.00994809065014124,-0.011748851276934147,-0.010890080593526363,0.028087850660085678,-0.011339209042489529,-0.003458274994045496,-0.00952004361897707,-0.031199049204587936,-0.008951284922659397,0.01329940464347601,0.014167062006890774,0.023681864142417908,-0.017605634406208992,0.03458299860358238,0.029470741748809814,-0.047536451369524,-0.007460009306669235,-6.20392269838211e-33,-0.04348098486661911,-0.03702499344944954,-0.03516928851604462,-0.020875368267297745,0.02539825066924095,-0.010899878107011318,-0.007628956809639931,-0.02803552895784378,0.000967086642049253,0.02314213663339615,-0.019197938963770866,-0.005156988278031349,0.02552155964076519,-0.02473451942205429,0.04696899279952049,-0.012005451135337353,0.019475508481264114,0.015367785468697548,0.019985465332865715,0.005248526111245155,0.012680101208388805,0.007133164908736944,-0.03486441448330879,-0.005422643851488829,0.04683941602706909,0.03835005685687065,-0.005095354281365871,0.019147392362356186,-0.00366376549936831,-0.02391728386282921,0.0004056666512042284,-0.03736849129199982,-0.010825049132108688,-0.03214753046631813,-0.03475230187177658,-0.02414834313094616,-0.012896478176116943,0.023894203826785088,-0.043159812688827515,0.007815239951014519,0.010923760011792183,0.0225142240524292,-0.00010710824426496401,-0.035226911306381226,-0.036753199994564056,-0.0014988341135904193,0.00755090918391943,0.048693351447582245,-0.032785966992378235,0.020311586558818817,0.05949707329273224,0.010485966689884663,0.012745463289320469,0.0507197380065918,0.03265486657619476,0.052159540355205536,0.03550262749195099,0.020288489758968353,-0.054531268775463104,0.0200810506939888,-0.0379057340323925,-0.020552732050418854,0.0188925601541996,0.014456596225500107,0.042912211269140244,-0.030209215357899666,0.024340614676475525,0.0199862290173769,0.004574647173285484,0.03068949095904827,-0.056329578161239624,-0.03381581977009773,0.019506102427840233,-0.10622298717498779,-0.025299904868006706,0.0443323589861393,0.005573354661464691,-0.005289142951369286,-0.05349137261509895,-0.02469129115343094,-0.01885300502181053,-0.00874665379524231,-0.05954687297344208,0.005255979020148516,0.0484122633934021,-0.023327505216002464,0.007352295331656933,-0.0069675142876803875,0.011706385761499405,0.00044600627734325826,-0.050670329481363297,-0.012002997100353241,-0.03718828409910202,0.017117861658334732,-0.0658705085515976,0.015117268078029156,0.043956413865089417,0.00828378926962614,-0.02105281502008438,-0.005790752358734608,0.03138625621795654,0.05962339788675308,-0.020663239061832428,-0.014675535261631012,0.02823019027709961,-0.04714859649538994,-0.0003448038187343627,0.00035957148065790534,-0.04054064676165581,0.011058894917368889,0.01933818683028221,0.03461911901831627,-0.023688819259405136,-0.051549989730119705,0.037426259368658066,0.01669163629412651,0.008757653646171093,0.05289867892861366,0.008793544955551624,-0.07561647146940231,0.04098499193787575,-0.030732352286577225,0.034357596188783646,-0.009095522575080395,0.030716005712747574,0.026386799290776253,-0.030918903648853302,0.0015739231603220105,0.021152272820472717,0.04187889024615288,-0.008081848733127117,0.024419797584414482,2.821975613187533e-7,0.01102389208972454,0.017516635358333588,0.013488676398992538,0.062226418405771255,0.012369327247142792,-0.009679478593170643,0.05851909518241882,-0.0009450175566598773,-0.00515077356249094,-0.01737004518508911,0.02193785458803177,0.009117214940488338,0.04111986234784126,0.052485205233097076,0.04695155471563339,-0.0906112790107727,-0.029714761301875114,-0.019208895042538643,-0.005745330825448036,0.016133949160575867,0.03803540766239166,0.03657114878296852,0.02102172002196312,0.03432565927505493,-0.003414864419028163,0.014216156676411629,-0.03863796219229698,-0.020332859829068184,-0.010148163884878159,-0.036987368017435074,0.011586109176278114,-0.02278435416519642,0.004152087029069662,0.04985275864601135,-0.04177748039364815,-0.01462988369166851,-0.009308642707765102,-0.008836212567985058,0.03605087846517563,0.033784568309783936,-0.020808273926377296,-0.05903015285730362,0.004702849313616753,-0.02352791279554367,0.014939123764634132,-0.016748210415244102,-0.0257363710552454,0.06455571204423904,0.0360703319311142,-0.02222384326159954,-0.0034951278939843178,0.008236543275415897,0.03441362828016281,-0.006287789903581142,0.007869201712310314,-0.004286082927137613,-0.002532400656491518,0.022275937721133232,-0.03372804820537567,-0.0024732027668505907,-0.016022400930523872,-0.03183922544121742,0.01759982295334339,0.06374666839838028,0.06424181908369064,-0.03153344243764877,-0.040941618382930756,3.594944807731462e-34,0.018467502668499947,0.016157153993844986,0.039957817643880844,0.02289719134569168,-0.01725495234131813,0.022068988531827927,-0.009505443274974823,-0.02701500616967678,0.0540873184800148,-0.03539109230041504,-0.020090969279408455]'
SET
  @TechnicalDesignVector_d705f41e = N'[-0.003461589338257909,0.04377974569797516,-0.01750367507338524,-0.050202399492263794,-0.008103562518954277,0.03695845231413841,0.029478931799530983,0.0862121731042862,-0.0434759259223938,0.00020110876357648522,0.006739039905369282,-0.03128989040851593,-0.010516163893043995,0.10868114233016968,0.040058035403490067,-0.041510239243507385,-0.018351402133703232,0.03763815760612488,-0.025286143645644188,-0.014078330248594284,-0.015555589459836483,-0.058883652091026306,0.00734260119497776,-0.04987333342432976,0.0665837824344635,0.0080667519941926,-0.0459175780415535,0.04888172820210457,-0.015739919617772102,-0.055267225950956345,-0.03196544200181961,0.02245979756116867,-0.0014813034795224667,-0.037489887326955795,0.0000015749786825836054,-0.04123653098940849,-0.04280899837613106,0.024865295737981796,-0.004602252971380949,0.007088785525411367,0.028056956827640533,-0.07634130865335464,0.026541033759713173,-0.0012337076477706432,0.03482043370604515,-0.032862819731235504,-0.027971219271421432,0.06814432889223099,0.0206389632076025,0.024258015677332878,0.024920782074332237,-0.05213320627808571,0.0005349490675143898,0.010160484351217747,0.04633894935250282,-0.019310355186462402,0.023780571296811104,-0.02244412526488304,0.06850782781839371,0.006038508843630552,-0.013246364891529083,-0.054064132273197174,-0.00042711172136478126,-0.019616011530160904,0.0212081465870142,-0.004836742300540209,0.006872705649584532,-0.0748826190829277,0.004816488828510046,-0.014473793096840382,0.05271676555275917,-0.013400732539594173,0.040294889360666275,-0.027353527024388313,-0.0540207214653492,-0.03493764251470566,-0.026353221386671066,0.02009470760822296,0.004267966840416193,0.013367470353841782,-0.005552185233682394,0.007989320904016495,-0.04269012436270714,0.010419730097055435,0.0022017748560756445,-0.008334477432072163,-0.012133483774960041,-0.05557432398200035,-0.02932460978627205,0.0026658009737730026,0.07981602847576141,-0.03031337633728981,0.03501934930682182,0.036809854209423065,-0.006796618923544884,-0.04288545623421669,0.060239166021347046,-0.05108470842242241,0.0745212510228157,-0.004811032209545374,0.05216497555375099,-0.016141563653945923,0.02819550782442093,-0.00826342310756445,0.03344535082578659,0.01796546019613743,-0.011451789177954197,0.01040222030133009,0.005435772240161896,-0.001411560457199812,0.032884277403354645,0.03529598191380501,0.01118550356477499,-0.010694359429180622,0.019821980968117714,0.03460787981748581,-0.044734690338373184,0.0021797893568873405,0.049059972167015076,0.06089373305439949,0.07839806377887726,-0.02294534631073475,-0.021446555852890015,-0.030166221782565117,0.044874779880046844,-0.04806751757860184,-0.03315742686390877,-0.038870811462402344,0.0027534563560038805,-0.03206738829612732,-0.009698763489723206,-0.02667960152029991,0.027209661900997162,0.0029592164792120457,0.005727296695113182,-0.0185399129986763,0.023913120850920677,0.019845273345708847,-0.012017769739031792,0.01644316501915455,0.00372361415065825,0.029246758669614792,-0.022393440827727318,0.01869204267859459,0.0036185095086693764,0.003352842293679714,-0.029474936425685883,0.043112076818943024,-0.024014517664909363,0.013436155393719673,-0.02876381389796734,-0.014055982232093811,0.023819955065846443,-0.003158842446282506,-0.02864382229745388,-0.003683021292090416,0.03223612904548645,-0.05571131035685539,0.013275999575853348,0.01898176595568657,0.0002043456770479679,-0.007711377926170826,0.03189755603671074,-0.038181014358997345,-0.020115751773118973,0.014800269156694412,-0.06617805361747742,0.02119404822587967,-0.00930134765803814,-0.003474349854514003,-0.06946788728237152,-0.028537634760141373,0.0029957073274999857,0.030627503991127014,-0.02010994590818882,0.01939154602587223,0.015033232048153877,0.02522457018494606,-0.04037746042013168,0.018784387037158012,0.061483148485422134,-0.06654081493616104,0.01332790032029152,-0.012220680713653564,0.13887834548950195,-0.03362805023789406,0.0688229352235794,0.03711983934044838,0.005165914539247751,0.040863748639822006,-0.03308713063597679,-0.0008043270208872855,0.018936637789011,0.037139639258384705,0.001326360972598195,0.035715095698833466,0.023649292066693306,-0.15421143174171448,-0.010298984125256538,-0.058857351541519165,-0.01397006120532751,-0.019600296393036842,0.010303400456905365,0.09239428490400314,0.01669156365096569,-0.0025985550601035357,-0.06891030818223953,0.011941049247980118,0.009310747496783733,-0.0019378414144739509,0.06812172383069992,0.04434552416205406,0.005626876372843981,0.0014247434446588159,-0.008635230362415314,0.07616080343723297,0.007619847077876329,0.002617282560095191,-0.009107907302677631,-0.007261935621500015,0.006892979145050049,-0.05980556830763817,-0.030592722818255424,0.014105903916060925,0.03660432621836662,0.041805338114500046,0.032454948872327805,-0.011292876675724983,0.04436884820461273,-0.021295417100191116,0.0059866225346922874,-0.003617185167968273,0.061119597405195236,0.02163691446185112,0.08746020495891571,-0.016785088926553726,0.03700392693281174,0.0894111692905426,-0.039264317601919174,0.10945897549390793,0.03307900205254555,0.01144931185990572,-0.04689284414052963,0.0022996640764176846,-0.04093729332089424,0.0473271943628788,-0.12341322004795074,0.008645335212349892,0.04180021584033966,0.031214622780680656,0.019243527203798294,0.004270240198820829,0.032131489366292953,0.030180394649505615,-0.0063226730562746525,0.02037108689546585,-0.052669916301965714,-0.04991008713841438,-0.015360374003648758,0.051992032676935196,0.018898243084549904,-0.013786579482257366,-0.03817075863480568,-0.00782527681440115,0.014868883416056633,-0.01325343269854784,0.05370562523603439,-0.023373832926154137,0.006031564902514219,0.05499187856912613,-0.033163443207740784,0.03254260495305061,0.05297284945845604,-0.00631096214056015,-0.033845990896224976,-0.047892678529024124,-0.03861307352781296,0.076349176466465,0.016773007810115814,-0.003511690767481923,-0.017095254734158516,-0.01652938313782215,0.011626080609858036,0.016188254579901695,0.0003507898363750428,-0.0429844968020916,-0.013362540863454342,-0.03616384044289589,-0.03365667536854744,0.025040553882718086,-0.032370757311582565,0.009718803688883781,0.02862946130335331,0.013954434543848038,-0.03749435022473335,-0.010849634185433388,-0.0987391546368599,0.04399862140417099,0.04739939421415329,0.03089943900704384,0.011010291986167431,0.01021648570895195,0.03713955357670784,-0.0027732562739402056,-0.003933478146791458,0.03704360872507095,-0.009597382508218288,0.00194235285744071,0.03191959112882614,-0.017688069492578506,-0.013323986902832985,0.02772572822868824,0.003863351186737418,-0.016703177243471146,0.009279415011405945,-0.02817203663289547,0.07011375576257706,0.02113698609173298,-0.03767792508006096,0.05097166448831558,-0.022361822426319122,0.05911701172590256,-0.00044096758938394487,-0.00576112512499094,-0.006357931531965733,-0.015100258402526379,-0.0312177836894989,0.015165588818490505,0.014496887102723122,0.043122828006744385,0.025693772360682487,-0.10012512654066086,0.009784780442714691,-0.008212772198021412,0.010530912317335606,0.013964234851300716,-0.044282034039497375,0.010947814211249352,0.033420152962207794,-0.013316862285137177,-0.008175505325198174,-0.02877408266067505,-0.0184770654886961,-0.06266071647405624,0.06060689315199852,-0.051796216517686844,0.03807588666677475,-0.02611873485147953,0.01367533765733242,-0.03266364336013794,0.05630597099661827,0.09498948603868484,0.0024566559586673975,0.0009334797505289316,0.03384935483336449,-0.020857278257608414,-0.06696726381778717,0.037801895290613174,-0.028132854029536247,-0.0305996872484684,-0.014091776683926582,0.054389484226703644,0.07548191398382187,-0.03220011293888092,0.059931643307209015,0.011627820320427418,0.020878300070762634,-0.05215708166360855,-0.05600378289818764,-0.02162102982401848,-0.019575709477066994,-0.036388203501701355,-0.008821729570627213,-0.0023475857451558113,-0.003406408941373229,-0.04965559393167496,-0.012240531854331493,-0.008708884939551353,0.02087840996682644,-0.027467766776680946,0.09062483161687851,-0.00007857014861656353,0.07566767930984497,0.020680874586105347,0.027220094576478004,-0.042328692972660065,-0.03603971004486084,-0.06079017370939255,-0.0050504207611083984,0.04070299118757248,-0.0206662118434906,-0.008773891255259514,-0.0016711007338017225,-0.020038733258843422,0.00447263615205884,0.037090178579092026,-0.02757064439356327,0.07182536274194717,0.008404583670198917,-0.00024938935530371964,0.019167957827448845,0.05120477080345154,-0.026996878907084465,0.012672255747020245,0.04261479154229164,-0.05485401675105095,0.04336031153798103,0.029415683820843697,0.001676415791735053,-0.023626111447811127,-0.0010728954803198576,-0.014653000049293041,-0.0322476290166378,0.0009957973379641771,0.03718748688697815,-0.0289212204515934,0.009208045899868011,0.017576470971107483,-0.03330550715327263,0.10320885479450226,0.01279385108500719,-0.028332842513918877,-0.05168773978948593,-0.05372452363371849,0.02351756952702999,0.018806248903274536,0.0038447105325758457,-0.0777498185634613,-0.0342644639313221,-0.0005113303195685148,-0.023740267381072044,-0.05114688724279404,-0.011820993386209011,0.00016384225455112755,0.0014545550802722573,0.042502403259277344,-0.03306497633457184,-0.03362719714641571,-0.02224946767091751,-0.03157048672437668,-0.03991738334298134,0.016795335337519646,-0.0011464287526905537,-0.010431325063109398,-0.0002447577426210046,-0.019865872338414192,0.009248982183635235,-0.004530965816229582,-0.08025573194026947,0.043060529977083206,-0.007820090278983116,0.00023446053091902286,0.008653189986944199,0.016980525106191635,-0.024231182411313057,-0.010796322487294674,-0.04697350040078163,0.014554553665220737,0.0005308240070007741,0.031892452389001846,-0.007336853072047234,0.025612622499465942,-0.04358503222465515,-0.005726363975554705,0.004203704185783863,-0.0631500706076622,-0.0025847379583865404,-0.0008760916534811258,-0.02495587430894375,-0.029006388038396835,-0.0013077396433800459,0.012387380935251713,-0.009295223280787468,-0.06229613348841667,0.005279946140944958,-0.046522870659828186,-0.017723700031638145,0.005740963388234377,0.03209952637553215,-0.01681976206600666,0.027227377519011497,-0.031072556972503662,0.011092836037278175,-0.0563005656003952,0.023201806470751762,0.049774687737226486,-0.0674787163734436,-0.023087676614522934,-0.034953925758600235,0.020145198330283165,0.0031634594779461622,0.035690780729055405,0.005508869420737028,0.058847811073064804,0.06710850447416306,-0.030980069190263748,-0.0413762629032135,0.0005069758626632392,-0.03792082890868187,-0.0764555111527443,-0.024630025029182434,-0.002944600535556674,-0.04813149571418762,-0.012599701061844826,0.009392381645739079,0.07194527238607407,-0.01137465424835682,-0.00014833624300081283,-0.01793290115892887,-0.024110889062285423,-0.0342106856405735,0.04060518369078636,-0.11392401903867722,-0.026261061429977417,-0.009547792375087738,0.0166368018835783,-0.11272048950195312,0.04489189758896828,0.05411512777209282,-0.002949989167973399,0.02130795642733574,0.01060423906892538,-0.04373954236507416,-0.005395373795181513,0.0401356965303421,-0.07438541948795319,0.018752826377749443,0.005607021972537041,0.015791701152920723,0.055948127061128616,0.022436026483774185,-0.05021672323346138,-0.0009587261010892689,-0.04378168657422066,-0.007101681083440781,0.08835484087467194,-0.03724076226353645,0.0430370457470417,0.034889522939920425,-0.031061667948961258,0.019369853660464287,-0.037615079432725906,0.014293965883553028,-0.016985390335321426,-0.016010001301765442,-0.023358210921287537,-0.012077768333256245,0.008860938251018524,0.026684317737817764,0.06560943275690079,-0.048405200242996216,-0.042607057839632034,0.001421429100446403,-0.00579820666462183,0.019797971472144127,-5.902238318057309e-33,-0.004038247279822826,-0.0015761436661705375,-0.026169853284955025,0.017374621704220772,0.0043071117252111435,-0.11208139359951019,-0.025212211534380913,-0.08474358916282654,0.014270435087382793,-0.013945410959422588,-0.023703716695308685,0.013987031765282154,0.03288895636796951,0.0034373474773019552,0.010305940173566341,-0.013425077311694622,-0.005715252831578255,-0.020097766071558,0.002075532451272011,-0.020563913509249687,0.010546715930104256,0.03310693800449371,0.010806804522871971,0.01647774502635002,-0.00019769606296904385,0.016647357493638992,0.000273260404355824,0.01426617056131363,-0.013113797642290592,0.011453437618911266,0.03776504471898079,-0.07563567161560059,0.01609780266880989,-0.06523486971855164,0.03130241110920906,-0.03799477219581604,-0.02263442985713482,0.021459834650158882,0.008435260504484177,0.005051758605986834,0.006298315245658159,0.037070486694574356,0.013108400627970695,-0.00328838755376637,0.029366016387939453,0.02934310957789421,0.0015152125852182508,-0.015947137027978897,-0.02658512443304062,-0.02448006346821785,0.05181913077831268,-0.003673953702673316,0.03493369743227959,0.04604488983750343,0.014637506566941738,0.13275213539600372,-0.021942226216197014,0.017457641661167145,-0.006571711041033268,0.016000907868146896,0.024753697216510773,0.009147861041128635,-0.008405250497162342,0.03215080499649048,0.046101756393909454,-0.023206651210784912,0.027180297300219536,0.027282066643238068,-0.07580354809761047,-0.008657434955239296,-0.03959732502698898,-0.00027164790662936866,-0.0023827047552913427,-0.06665199249982834,-0.018310939893126488,0.03371374309062958,0.03843820095062256,0.010138770565390587,0.014495880343019962,0.034978508949279785,0.026630504056811333,-0.02240653522312641,0.006182034034281969,-0.011965622194111347,0.060519989579916,-0.04108309745788574,-0.0029915657360106707,0.021763265132904053,0.05619766190648079,0.016509294509887695,-0.055514149367809296,0.032481785863637924,-0.05300115421414375,0.01017771940678358,-0.07308988273143768,0.06971820443868637,0.0034732199274003506,-0.00039328765706159174,-0.020361343398690224,-0.06597410887479782,0.009527510963380337,0.03284307196736336,-0.07270494848489761,-0.024216582998633385,-0.04379547759890556,-0.04037714749574661,0.01418361347168684,-0.031405430287122726,-0.038034435361623764,0.0170678049325943,0.05529807507991791,0.04301561787724495,-0.008022215217351913,0.008566728793084621,0.010837371461093426,-0.0004844504001084715,0.019881596788764,0.023405568674206734,0.04728839918971062,0.006626352667808533,0.02035665325820446,-0.06368011981248856,0.014728698879480362,-0.004030795302242041,0.027071485295891762,-0.0010038738837465644,0.02467324584722519,0.03132293000817299,-0.010860257782042027,0.0038349791429936886,0.02386694960296154,0.0551784448325634,2.4212707216975105e-7,-0.01031463872641325,0.030533861368894577,-0.006985598709434271,-0.008340273052453995,0.00693725747987628,-0.04430593550205231,0.042977649718523026,-0.04392853379249573,0.01999122090637684,-0.03966839611530304,0.0020433268509805202,-0.010585252195596695,0.031426019966602325,0.03252991661429405,0.002771129598841071,-0.06521525233983994,-0.03593507781624794,-0.018479779362678528,0.0017555027734488249,0.014186259359121323,0.009138687513768673,0.021730294451117516,-0.019298089668154716,0.02471349388360977,0.0008160304860211909,0.03563008829951286,-0.040972061455249786,-0.007414605002850294,0.006718739867210388,-0.04028868302702904,0.05012670159339905,-0.028710316866636276,0.000019964061721111648,0.03883558139204979,0.003533971030265093,0.007200064603239298,-0.0009025360341183841,0.023903800174593925,0.04656603932380676,0.032416705042123795,0.014987434260547161,-0.05018795654177666,-0.007201939821243286,-0.03306984901428223,0.0016245152801275253,0.02783229574561119,-0.01829630322754383,0.04189968481659889,-0.022290276363492012,-0.028245190158486366,-0.0068714614026248455,0.0018845159793272614,-0.02061610296368599,-0.033190272748470306,0.0011846211273223162,-0.05175977572798729,-0.004135269206017256,0.03893936052918434,-0.02499249391257763,0.018954269587993622,-0.0018046048935502768,-0.014544788748025894,0.006124792620539665,0.02839914709329605,0.01620720885694027,0.04337822273373604,-0.060842983424663544,2.7173510311212745e-34,0.03400159999728203,-0.03088449500501156,0.04301079735159874,-0.04187798500061035,-0.048409245908260345,0.0038593460340052843,0.015455113723874092,0.00804276205599308,0.0016400194726884365,-0.06734201312065125,-0.02635067328810692]'
SET
  @HasCustomProps_d705f41e = 1
SET
  @HasCustomEvents_d705f41e = 0
SET
  @RequiresData_d705f41e = 1
SET
  @DependencyCount_d705f41e = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_d705f41e = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_d705f41e = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_d705f41e = 1
SET
  @ID_d705f41e = 'D1420CCB-4502-47D5-B18C-4E268C18D659'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_d705f41e,
  @Name = @Name_d705f41e,
  @Version = @Version_d705f41e,
  @VersionSequence = @VersionSequence_d705f41e,
  @Title = @Title_d705f41e,
  @Description = @Description_d705f41e,
  @Type = @Type_d705f41e,
  @Status = @Status_d705f41e,
  @DeveloperName = @DeveloperName_d705f41e,
  @DeveloperEmail = @DeveloperEmail_d705f41e,
  @DeveloperOrganization = @DeveloperOrganization_d705f41e,
  @SourceRegistryID = @SourceRegistryID_d705f41e,
  @ReplicatedAt = @ReplicatedAt_d705f41e,
  @LastSyncedAt = @LastSyncedAt_d705f41e,
  @Specification = @Specification_d705f41e,
  @FunctionalRequirements = @FunctionalRequirements_d705f41e,
  @TechnicalDesign = @TechnicalDesign_d705f41e,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_d705f41e,
  @TechnicalDesignVector = @TechnicalDesignVector_d705f41e,
  @HasCustomProps = @HasCustomProps_d705f41e,
  @HasCustomEvents = @HasCustomEvents_d705f41e,
  @RequiresData = @RequiresData_d705f41e,
  @DependencyCount = @DependencyCount_d705f41e,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_d705f41e,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_d705f41e,
  @HasRequiredCustomProps = @HasRequiredCustomProps_d705f41e,
  @ID = @ID_d705f41e;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_6ba424d5 NVARCHAR(MAX),
@Name_6ba424d5 NVARCHAR(500),
@Version_6ba424d5 NVARCHAR(50),
@VersionSequence_6ba424d5 INT,
@Title_6ba424d5 NVARCHAR(1000),
@Description_6ba424d5 NVARCHAR(MAX),
@Type_6ba424d5 NVARCHAR(255),
@Status_6ba424d5 NVARCHAR(50),
@DeveloperName_6ba424d5 NVARCHAR(255),
@DeveloperEmail_6ba424d5 NVARCHAR(255),
@DeveloperOrganization_6ba424d5 NVARCHAR(255),
@SourceRegistryID_6ba424d5 UNIQUEIDENTIFIER,
@ReplicatedAt_6ba424d5 DATETIMEOFFSET,
@LastSyncedAt_6ba424d5 DATETIMEOFFSET,
@Specification_6ba424d5 NVARCHAR(MAX),
@FunctionalRequirements_6ba424d5 NVARCHAR(MAX),
@TechnicalDesign_6ba424d5 NVARCHAR(MAX),
@FunctionalRequirementsVector_6ba424d5 NVARCHAR(MAX),
@TechnicalDesignVector_6ba424d5 NVARCHAR(MAX),
@HasCustomProps_6ba424d5 BIT,
@HasCustomEvents_6ba424d5 BIT,
@RequiresData_6ba424d5 BIT,
@DependencyCount_6ba424d5 INT,
@TechnicalDesignVectorEmbeddingModelID_6ba424d5 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_6ba424d5 NVARCHAR(MAX),
@HasRequiredCustomProps_6ba424d5 BIT,
@ID_6ba424d5 UNIQUEIDENTIFIER
SET
  @Namespace_6ba424d5 = N'AI/Analytics/Performance'
SET
  @Name_6ba424d5 = N'AIMetricsSummary'
SET
  @Version_6ba424d5 = N'1.0.0'
SET
  @VersionSequence_6ba424d5 = 1
SET
  @Title_6ba424d5 = N'AI Metrics Summary'
SET
  @Description_6ba424d5 = N'Summary cards displaying key performance metrics for the selected time period'
SET
  @Type_6ba424d5 = N'Other'
SET
  @Status_6ba424d5 = N'Published'
SET
  @Specification_6ba424d5 = N'{"name":"AIMetricsSummary","location":"embedded","title":"AI Metrics Summary","description":"Summary cards displaying key performance metrics for the selected time period","type":"other","functionalRequirements":"## Metrics Summary Requirements\n\n### Core Functionality\n- Display key metrics in card format\n- Show total runs, tokens, and costs\n- Calculate averages per run\n- Display success rate percentage\n- Show trend indicators (up/down from previous period)\n- Responsive card layout\n\n### Visual Features\n- Color-coded metric cards\n- Icon indicators for each metric\n- Animated number transitions\n- Hover effects for additional info","dataRequirements":{"mode":"views","description":"Displays aggregated metrics derived from AI execution data","entities":[{"name":"MJ: AI Prompt Runs","description":"Source data for AI execution metrics","displayFields":["TotalTokens","InputTokens","OutputTokens","Status"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Metrics are pre-calculated from prompt run data by parent component"},{"name":"MJ: AI Agent Runs","description":"Source data for agent execution metrics","displayFields":["TotalTokens","Status"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Metrics are pre-calculated from agent run data by parent component"}],"queries":[]},"technicalDesign":"## Technical Design\n\n### Props\n- metrics: Object with calculated metric values\n\n### Card Layout\n- Responsive grid of metric cards\n- Each card shows metric name, value, and trend\n- Consistent styling with theme","properties":[{"name":"metrics","type":"{totalRuns: number, totalTokens: number, totalCost: number, avgTokensPerRun: number, avgCostPerRun: number}","required":true,"description":"Pre-calculated metrics object with aggregated values"}],"events":[],"exampleUsage":"<AIMetricsSummary metrics={metrics} />","code":"function AIMetricsSummary({ metrics, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log(''[AIMetricsSummary] Rendering metrics:'', metrics);\n  \n  const formatNumber = (value) => {\n    if (value >= 1000000) {\n      return `$' + '{(value / 1000000).toFixed(2)}M`;\n    } else if (value >= 1000) {\n      return `$' + '{(value / 1000).toFixed(1)}K`;\n    }\n    return value.toLocaleString();\n  };\n  \n  const formatCurrency = (value) => {\n    if (value >= 1000) {\n      return `$$' + '{(value / 1000).toFixed(2)}K`;\n    }\n    return `$$' + '{value.toFixed(2)}`;\n  };\n  \n  const metricCards = [\n    {\n      label: ''Total Runs'',\n      value: formatNumber(metrics.totalRuns || 0),\n      color: styles.colors.primary,\n      icon: ''▶'',\n      description: ''Total execution count''\n    },\n    {\n      label: ''Total Tokens'',\n      value: formatNumber(metrics.totalTokens || 0),\n      color: styles.colors.success,\n      icon: ''◆'',\n      description: ''Tokens consumed''\n    },\n    {\n      label: ''Total Cost'',\n      value: formatCurrency(metrics.totalCost || 0),\n      color: styles.colors.warning,\n      icon: ''$'',\n      description: ''Total spend''\n    },\n    {\n      label: ''Avg Tokens/Run'',\n      value: formatNumber(metrics.avgTokensPerRun || 0),\n      color: styles.colors.info || styles.colors.primary,\n      icon: ''⊙'',\n      description: ''Average token usage''\n    },\n    {\n      label: ''Avg Cost/Run'',\n      value: formatCurrency(metrics.avgCostPerRun || 0),\n      color: styles.colors.secondary,\n      icon: ''¢'',\n      description: ''Average cost per execution''\n    }\n  ];\n  \n  return (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'',\n      gap: styles.spacing.md,\n      marginBottom: styles.spacing.lg\n    }}>\n      {metricCards.map((card, index) => (\n        <div\n          key={index}\n          style={{\n            backgroundColor: styles.colors.surface,\n            borderRadius: styles.borders?.radius || ''4px'',\n            padding: styles.spacing.md,\n            borderLeft: `3px solid $' + '{card.color}`,\n            transition: ''transform 0.2s, box-shadow 0.2s'',\n            cursor: ''default'',\n            position: ''relative''\n          }}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n            e.currentTarget.style.boxShadow = `0 4px 12px $' + '{styles.colors.border}40`;\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateY(0)'';\n            e.currentTarget.style.boxShadow = ''none'';\n          }}\n          title={card.description}\n        >\n          <div style={{\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''space-between'',\n            marginBottom: styles.spacing.xs\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs,\n              color: styles.colors.textSecondary,\n              fontWeight: ''500''\n            }}>\n              {card.label}\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              color: card.color,\n              opacity: 0.3\n            }}>\n              {card.icon}\n            </div>\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.text,\n            fontWeight: ''700''\n          }}>\n            {card.value}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_6ba424d5 = N'Display key metrics in card format. Show total runs, tokens, and costs. Calculate averages per run. Display success rate percentage. Show trend indicators. Responsive card layout'
SET
  @TechnicalDesign_6ba424d5 = N'Responsive grid of metric cards. Each card shows metric name, value, and icon. Consistent styling with theme. Hover effects for additional information'
SET
  @FunctionalRequirementsVector_6ba424d5 = N'[-0.05034230276942253,-0.0218160729855299,-0.02033330500125885,-0.0057037025690078735,0.015623784624040127,0.01047720666974783,-0.002523701172322035,0.052174195647239685,-0.0571906603872776,-0.006436156574636698,0.03893759846687317,0.04334570840001106,0.025802193209528923,0.19600598514080048,-0.03649847209453583,-0.0422210618853569,-0.0374690480530262,0.016467133536934853,0.03507285192608833,0.025313135236501694,0.0074616423808038235,-0.019875239580869675,0.019615232944488525,-0.023321785032749176,-0.05395005643367767,-0.020903177559375763,-0.03976508975028992,0.017053715884685516,0.007374956738203764,-0.13432762026786804,-0.002960344310849905,0.004334770143032074,-0.021418049931526184,0.01389980223029852,0.0000020036495698150247,-0.02438282035291195,-0.018951615318655968,0.03962062671780586,-0.011829420924186707,0.037057045847177505,0.07779408246278763,-0.024852421134710312,0.04889614135026932,0.009992053732275963,-0.004294771701097488,-0.08135262131690979,-0.017594678327441216,0.039002675563097,0.0020518270321190357,-0.05414456129074097,0.012083700858056545,-0.03514247015118599,-0.06272435933351517,-0.02066849358379841,-0.04822230339050293,0.030308976769447327,-0.04935181513428688,0.002938266145065427,0.0022836157586425543,-0.021288501098752022,-0.028943227604031563,-0.0053437561728060246,0.03925361484289169,-0.05426500365138054,0.07084105908870697,0.001050265273079276,0.04296543449163437,-0.03207230195403099,0.023370930925011635,-0.018346032127738,0.010208864696323872,0.0018506833584979177,-0.012046515010297298,-0.09233013540506363,-0.016899652779102325,-0.08735436946153641,-0.02037360519170761,-0.011974555440247059,0.03987540304660797,-0.005917188711464405,-0.056480638682842255,0.019982289522886276,-0.012752726674079895,-0.04710570350289345,-0.013806196860969067,-0.056796927005052567,0.005749496631324291,-0.008359639905393124,-0.02326718345284462,0.03230056166648865,0.05962372571229935,0.03377677872776985,-0.016160834580659866,-0.03266583010554314,-0.0707295686006546,-0.014788448810577393,0.029505671933293343,-0.05012277513742447,0.05726020038127899,0.01725497655570507,0.03660506382584572,0.02669944427907467,0.018479634076356888,0.026610014960169792,0.024797899648547173,0.033735983073711395,0.06153513863682747,-0.02268950454890728,-0.052593398839235306,0.0721670389175415,0.026851801201701164,-0.003959209658205509,0.0006219592760317028,0.04764202982187271,-0.07752002775669098,-0.021369870752096176,-0.0936647579073906,-0.012960062362253666,0.005277461372315884,0.021019356325268745,0.11163394898176193,0.03152250871062279,-0.002925898414105177,0.028354033827781677,0.027925672009587288,0.006205725949257612,-0.024319099262356758,-0.022687366232275963,0.01987753063440323,0.018256941810250282,-0.015547291375696659,-0.020952068269252777,-0.0061346194706857204,0.007067571859806776,-0.020270120352506638,-0.03938523679971695,0.04288192465901375,0.0192951038479805,-0.028986642137169838,-0.0069921123795211315,0.04469962790608406,-0.012777367606759071,-0.017685292288661003,0.027350397780537605,0.047076549381017685,0.014677489176392555,0.016849413514137268,0.12137996405363083,0.009805520996451378,-0.0010010581463575363,0.013547674752771854,0.027620406821370125,0.034803085029125214,0.024486685171723366,-0.018288368359208107,-0.012560335919260979,0.04048816114664078,0.009533818811178207,-0.002601929707452655,0.039103440940380096,0.014943381771445274,-0.034602679312229156,-0.026310063898563385,-0.0011347634717822075,0.012426290661096573,0.01848161593079567,0.016588648781180382,0.025944573804736137,0.01129091251641512,0.012272913940250874,0.016699019819498062,-0.03240646421909332,-0.01941056177020073,0.040665943175554276,-0.00681203743442893,0.047214165329933167,0.07184191793203354,-0.036500874906778336,-0.015303417108952999,-0.0530749186873436,0.036023661494255066,-0.1035124883055687,-0.000253122067078948,-0.006791348569095135,0.0723189041018486,0.029674159362912178,0.04131313040852547,0.02063809335231781,-0.03045506961643696,-0.003343006130307913,-0.02266816608607769,-0.00853516161441803,-0.05630582943558693,-0.005371712613850832,0.01631316728889942,0.004617644473910332,-0.023024121299386024,-0.1062837690114975,0.03324772045016289,-0.013945695012807846,0.006769717205315828,-0.03690329194068909,0.026261989027261734,0.01433067861944437,0.03577171266078949,0.03151067718863487,0.07503505796194077,-0.025017347186803818,-0.06732820719480515,0.019806236028671265,0.05781247839331627,-0.004633748438209295,-0.03419320285320282,0.023107795044779778,-0.020101536065340042,0.06028246507048607,0.036947593092918396,0.009876781143248081,-0.05447344109416008,0.027276234701275826,-0.03124958463013172,-0.017688686028122902,-0.04802975431084633,0.021735409274697304,0.10560917854309082,0.024124890565872192,0.030204974114894867,-0.01664518192410469,0.05018540099263191,0.032531242817640305,0.006879989989101887,-0.00017021845269482583,0.05001375079154968,0.018029138445854187,0.033894799649715424,0.02791408635675907,0.051605403423309326,0.07531170547008514,0.02769131027162075,0.037115126848220825,0.0014007195131853223,-0.05920443683862686,-0.038399502635002136,0.006332271732389927,0.01580033078789711,-0.06640340387821198,0.006570561323314905,0.017713578417897224,0.004682160913944244,0.022833382710814476,-0.02589447982609272,0.019610142335295677,0.05030493810772896,-0.003615851514041424,0.016122084110975266,0.022127235308289528,-0.0541178435087204,-0.032278742641210556,-0.035660743713378906,0.07706359773874283,0.025897348299622536,0.00390078267082572,-0.0466688796877861,0.0020335903391242027,0.03125816583633423,-0.04075130075216293,0.05219167470932007,-0.00609786668792367,-0.017679980024695396,0.027417028322815895,0.03400372341275215,0.027561422437429428,-0.011155481450259686,0.003175525926053524,-0.011258875019848347,0.0398528166115284,-0.06367510557174683,0.039835769683122635,-0.005922221578657627,-0.0005777304759249091,0.023723604157567024,-0.03599455952644348,-0.0112493010237813,0.03454781696200371,0.0029154473450034857,-0.007793633732944727,0.06239718943834305,-0.011048207990825176,0.016044311225414276,-0.07624087482690811,0.061714623123407364,-0.03671151027083397,0.04114135727286339,-0.031020861119031906,-0.006823748350143433,0.021570255979895592,-0.05223950371146202,0.04366685077548027,-0.02342638373374939,0.03986811265349388,-0.07044385373592377,-0.023528078570961952,-0.02164720930159092,0.00028250430477783084,-0.03944394364953041,0.0063576060347259045,0.055764440447092056,-0.04913179203867912,-0.0004386722866911441,0.018382763490080833,0.0019940282218158245,0.016790393739938736,-0.0207724180072546,-0.04960715025663376,-0.0016025907825678587,0.012709414586424828,-0.02472742833197117,0.04468530789017677,0.030728263780474663,0.04605308175086975,0.055052414536476135,0.0011121451389044523,-0.023164719343185425,0.01587647944688797,-0.028114967048168182,-0.00466555031016469,0.01448002364486456,-0.004635969176888466,-0.02303750067949295,0.03273303434252739,0.01388675719499588,-0.05045069009065628,-0.009838557802140713,0.008901569060981274,-0.07819551974534988,-0.03713454306125641,-0.0356404148042202,-0.04735685512423515,0.005945808719843626,-0.046508170664310455,-0.030070139095187187,0.0037795240059494972,0.011403344571590424,0.05323207005858421,0.028033064678311348,-0.03399131819605827,-0.00975704099982977,-0.012467408552765846,-0.12664486467838287,-0.008031814359128475,0.04709617793560028,0.016552958637475967,-0.024591388180851936,-0.016808416694402695,0.03350232169032097,-0.0031420844607055187,-0.01045958697795868,-0.018450114876031876,0.014688161201775074,-0.055614180862903595,0.02184494212269783,0.060312382876873016,0.014140896499156952,0.03353394940495491,-0.026796571910381317,0.005255738738924265,-0.0031280131079256535,0.00018248353444505483,-0.006635275669395924,0.040162935853004456,-0.04046409949660301,0.04473238065838814,-0.007993573322892189,0.03783025965094566,-0.0015628522960469127,-0.011897540651261806,0.018476638942956924,-0.013648062944412231,0.01676347851753235,0.003204714972525835,0.026155000552535057,-0.011358600109815598,0.07271541655063629,-0.036938849836587906,0.10249211639165878,-0.01681371219456196,-0.0022090382408350706,0.02254493720829487,-0.05078019201755524,0.019803719595074654,0.02483765408396721,-0.07452225685119629,-0.033555466681718826,-0.06629305332899094,-0.033599112182855606,-0.026785392314195633,-0.0023009846918284893,-0.023521991446614265,0.007101019844412804,0.008470716886222363,-0.01585823856294155,-0.026222558692097664,0.02365884557366371,-0.06766420602798462,0.02884206362068653,-0.06533058732748032,0.028455650433897972,0.03672466427087784,0.00970917847007513,-0.03601454943418503,-0.008204341866075993,0.030213110148906708,-0.028856156393885612,-0.07066887617111206,-0.0352628156542778,-0.00256181787699461,-0.004664970561861992,0.004155450500547886,0.01573871448636055,0.0010580006055533886,-0.010183112695813179,0.019387511536478996,0.006447420455515385,0.016145948320627213,0.027647824957966805,-0.05614763870835304,0.007401897106319666,-0.0249023474752903,0.007500295992940664,0.02791394293308258,0.024440722540020943,-0.023404143750667572,-0.02148175984621048,0.09282628446817398,-0.021002229303121567,0.029819810763001442,-0.06436601281166077,0.015056397765874863,0.051224857568740845,0.016719648614525795,-0.018822016194462776,0.027950171381235123,0.05269387736916542,0.010704683139920235,-0.021553203463554382,-0.07158739864826202,-0.004375706892460585,-0.01548824179917574,0.004936022683978081,-0.021651608869433403,-0.02607300691306591,-0.054469745606184006,-0.011652926914393902,-0.014745368622243404,-0.013644888065755367,-0.002832006197422743,0.06244738772511482,-0.009600112214684486,-0.0014350104611366987,0.03223960101604462,0.04287775605916977,0.05313573777675629,-0.06347590684890747,0.008758850395679474,0.030082421377301216,-0.04588867351412773,0.02867131121456623,-0.057410262525081635,0.007202870212495327,-0.07282261550426483,0.028852319344878197,-0.021937230601906776,-0.02822181209921837,-0.013059127144515514,-0.037407901138067245,0.01135245431214571,-0.0018172587733715773,-0.016548708081245422,-0.018238484859466553,-0.04760942608118057,-0.006765361875295639,-0.004742543678730726,-0.006772976368665695,-0.1472547948360443,0.01874953880906105,0.0064474851824343204,-0.07941965758800507,-0.020430918782949448,0.0032830643467605114,0.003581299213692546,0.003993830643594265,-0.0012176104355603456,-0.028388043865561485,-0.011977014131844044,-0.03326662629842758,-0.005275608040392399,-0.07618936896324158,-0.02022973820567131,-0.02050953544676304,-0.017067380249500275,-0.04252638295292854,-0.035553354769945145,0.010655181482434273,-0.11742625385522842,-0.019023269414901733,0.015085043385624886,0.031217683106660843,-0.019946597516536713,-0.005846063606441021,0.0296107716858387,0.03398344665765762,-0.016433529555797577,0.009853687137365341,0.013779966160655022,0.017520258203148842,0.05260951817035675,-0.0750584602355957,0.05498235672712326,-0.03306904062628746,-0.02084405906498432,0.011596904136240482,0.01276913471519947,0.013299738056957722,-0.004152152221649885,0.08998209238052368,-0.0021760736126452684,0.040855247527360916,-0.002995304297655821,-0.030203338712453842,0.02675229124724865,-0.04054047912359238,0.0046827965416014194,-0.005268266890197992,0.003939818125218153,-0.02568468451499939,0.015177981927990913,0.0653495118021965,0.0694836676120758,-0.025272546336054802,-0.015089767053723335,-0.036640264093875885,0.01276477612555027,0.04486839845776558,0.013955991715192795,-0.014117377810180187,-0.0021236385218799114,0.0008124978048726916,-0.042678073048591614,0.019946694374084473,-0.011546799913048744,0.033726371824741364,0.03818220645189285,-0.04307841509580612,-0.009701801463961601,0.009017100557684898,-6.304110081902694e-33,-0.057395610958337784,-0.014647387899458408,-0.020966388285160065,-0.02800905704498291,0.001338914968073368,0.00968919787555933,0.025162164121866226,-0.016399970278143883,0.033013105392456055,0.032926347106695175,-0.00427632499486208,-0.04479769617319107,0.015563460066914558,0.016874343156814575,0.012375460006296635,0.002311759628355503,0.048510756343603134,0.005160641390830278,0.00046013284008949995,0.00031422433676198125,-0.026319054886698723,-0.0006261736270971596,-0.03988582268357277,-0.05560004711151123,-0.0017899576341733336,-0.006561395712196827,-0.005108910147100687,0.030373699963092804,-0.011296824552118778,-0.013008554466068745,0.0032296725548803806,-0.0641867071390152,-0.04495811089873314,-0.001460420899093151,-0.009896809235215187,0.028863638639450073,0.001159439329057932,-0.019692977890372276,0.01997680962085724,0.03755224868655205,0.07882902771234512,-0.021194154396653175,-0.008781335316598415,-0.003145928494632244,-0.01371099054813385,-0.01911771111190319,0.009564612992107868,0.03640887141227722,-0.020801737904548645,-0.021563420072197914,0.015877051278948784,0.01484591793268919,0.0024397866800427437,0.07941677421331406,-0.01488325372338295,-0.04726732522249222,0.024442525580525398,0.013384311459958553,-0.033090028911828995,0.0017177063273265958,-0.007207631599158049,-0.02452513389289379,0.024329571053385735,0.030197467654943466,-0.0028871563263237476,0.030994540080428123,-0.03385036438703537,0.02422921545803547,0.039332833141088486,0.040408842265605927,-0.02282966673374176,-0.05753865838050842,0.038717929273843765,-0.07617159932851791,0.008863304741680622,0.08307419717311859,-0.014595545828342438,-0.004762580618262291,0.020227983593940735,0.05072092264890671,0.012285242788493633,-0.008378757163882256,-0.03934279456734657,0.016381969675421715,0.04460277035832405,-0.05706295743584633,-0.025461606681346893,-0.0005646332865580916,0.012801661156117916,0.04433392733335495,0.014922717586159706,0.01548219844698906,-0.038272008299827576,0.010005403310060501,0.005726899951696396,-0.00038046372355893254,0.12999998033046722,0.03247056528925896,-0.033909350633621216,-0.024411387741565704,0.01992172747850418,-0.024212373420596123,-0.01932792365550995,0.023219110444188118,0.008046453818678856,-0.03323680907487869,0.006966511253267527,-0.028337424620985985,-0.047883957624435425,0.01648457534611225,0.02662665583193302,0.023294517770409584,-0.01976422220468521,-0.05450630560517311,-0.010975627228617668,0.009797491133213043,-0.0171116441488266,-0.021375790238380432,-0.014660035260021687,-0.06553612649440765,0.0339050367474556,0.02093963697552681,0.0162177924066782,-0.00012928149953950197,0.04946460202336311,-0.04421790689229965,-0.01685144379734993,-0.00964350439608097,0.038399145007133484,0.021151190623641014,-0.01545035745948553,0.02034422941505909,2.7117218337480153e-7,0.014811449684202671,0.010852157138288021,-0.02715381607413292,-0.04805554449558258,-0.003936514724045992,-0.03123815916478634,0.03747914731502533,-0.03095683455467224,0.022204291075468063,-0.012850300408899784,-0.0028564357198774815,0.0005793910822831094,-0.02150162123143673,0.04926677793264389,0.040690530091524124,-0.03375041484832764,-0.004765400197356939,-0.02244815044105053,-0.005242865066975355,0.05046144872903824,0.019225602969527245,0.01578381657600403,0.017628751695156097,0.003991789184510708,-0.005769906099885702,-0.02033334970474243,-0.027835428714752197,-0.00552267674356699,-0.0004794764972757548,-0.03788270056247711,-0.05316045880317688,0.0371350422501564,-0.006619835738092661,0.013754219748079777,-0.011025780811905861,0.003961180802434683,-0.007759015541523695,-0.021492596715688705,0.040191296488046646,0.04095079377293587,0.010813926346600056,0.02065156027674675,-0.023759320378303528,-0.040300581604242325,-0.016952909529209137,0.03255448862910271,0.02376234531402588,-0.011917146854102612,0.006043489556759596,0.004545470234006643,0.0172258410602808,-0.021077996119856834,0.052380818873643875,0.030231047421693802,0.042332470417022705,-0.010733924806118011,-0.016575856134295464,0.027939239516854286,-0.004438597708940506,-0.0097200907766819,-0.0014734710566699505,-0.022253895178437233,0.005411820486187935,0.1095099225640297,0.06309492141008377,-0.04591570422053337,-0.03462802991271019,3.3616303012573545e-34,0.01742354966700077,-0.03667008504271507,0.03681300953030586,0.03599870204925537,0.005549781024456024,0.004899962805211544,-0.010608448646962643,-0.012572376988828182,0.042592018842697144,-0.03883291035890579,-0.006159998010843992]'
SET
  @TechnicalDesignVector_6ba424d5 = N'[-0.028141800314188004,-0.01730283349752426,-0.009011352434754372,0.00014303538773674518,0.034763552248477936,0.04420680180191994,0.02915840782225132,0.07210132479667664,-0.029261738061904907,0.007272073999047279,0.006531801540404558,0.015333101153373718,0.011110756546258926,0.07800671458244324,0.017623063176870346,-0.10915055125951767,-0.06129532679915428,0.03001897595822811,-0.04593082144856453,-0.00037936685839667916,-0.003944808151572943,-0.012617148458957672,-0.007160966284573078,-0.045659955590963364,-0.03679138049483299,-0.03344453498721123,-0.017009498551487923,0.026699669659137726,-0.009947290644049644,-0.0695982351899147,0.025615094229578972,0.028117021545767784,-0.054103199392557144,-0.0016503441147506237,0.0000016789575738584972,0.012275480665266514,-0.0075117917731404305,0.011139530688524246,0.0413091741502285,-0.020902052521705627,0.051959920674562454,-0.05154930055141449,0.06894849985837936,-0.010782207362353802,0.0005235869321040809,-0.12369571626186371,-0.04805796965956688,0.04819630831480026,-0.028403865173459053,-0.03487349674105644,0.027207253500819206,-0.06190261244773865,-0.03855609521269798,-0.016552580520510674,0.021560540422797203,0.04132081940770149,-0.028294231742620468,0.06055857986211777,-0.028733598068356514,0.042017124593257904,-0.006630758289247751,-0.0056929271668195724,0.008083933964371681,-0.030827106907963753,0.09537161141633987,0.03771708905696869,0.05587032064795494,0.020971447229385376,0.025457005947828293,0.03461683169007301,0.03720792382955551,0.011196467094123363,-0.008936753496527672,-0.06446442753076553,0.006799463648349047,-0.05685191974043846,-0.014990330673754215,-0.03927048668265343,0.036022771149873734,-0.02450525015592575,-0.05297781899571419,0.033187929540872574,-0.028007343411445618,-0.022320562973618507,-0.014307667501270771,-0.017660563811659813,0.03205018490552902,-0.005347938276827335,-0.0812140703201294,-0.0034628468565642834,-0.0024862245190888643,-0.0059950160793960094,-0.02487296052277088,0.01720673404633999,-0.0538870170712471,0.018003251403570175,0.0319921039044857,-0.0649792030453682,0.053514137864112854,0.013292803429067135,0.06672735512256622,0.03920337185263634,0.038317374885082245,0.008153287693858147,0.05168680101633072,0.06847333163022995,0.016479866579174995,-0.04823968932032585,-0.05441831052303314,0.04663684219121933,0.02483094483613968,-0.026945063844323158,0.0008799968636594713,0.047800350934267044,-0.03860252723097801,-0.0006527790101245046,-0.018170587718486786,0.01478662434965372,0.011090465821325779,0.03775898739695549,0.11390364915132523,0.017213616520166397,-0.0029634679667651653,-0.0000413100169680547,-0.04478597640991211,0.03584517911076546,-0.04657275602221489,-0.06462467461824417,0.030383802950382233,0.05644703656435013,-0.010888447985053062,-0.021050648763775826,-0.03465300798416138,-0.008141154423356056,0.011273739859461784,-0.027837438508868217,0.02692444436252117,0.03692065551877022,-0.0009705317788757384,0.04073874279856682,0.022833866998553276,0.01265830546617508,-0.014716818928718567,0.018255293369293213,0.019060367718338966,0.023249227553606033,0.02413398213684559,0.012889910489320755,0.005459707695990801,0.008906292729079723,0.001543928636237979,0.022138742730021477,-0.007847053930163383,0.00009336781658930704,-0.014646045863628387,-0.022244704887270927,0.011794635094702244,0.0048669627867639065,0.010821483097970486,0.039232026785612106,0.027464410290122032,-0.04464435204863548,-0.01877467706799507,-0.013483602553606033,-0.021614179015159607,0.010202211327850819,-0.024713566526770592,-0.005334015004336834,0.009601491503417492,-0.0008145460742525756,-0.05671658366918564,-0.005352044478058815,-0.025993019342422485,0.014790432527661324,0.03759398311376572,0.023054933175444603,0.047953370958566666,0.02289409190416336,-0.030167343094944954,-0.025834275409579277,0.00876564346253872,-0.08573933690786362,0.027081195265054703,0.04803724214434624,0.09060291945934296,0.041667692363262177,0.01453919056802988,0.015391277149319649,-0.05859030783176422,-0.041095539927482605,-0.019467074424028397,-0.018222181126475334,-0.02536197379231453,0.007975190877914429,0.021145295351743698,-0.001115421880967915,-0.0144585482776165,-0.056978996843099594,0.026286229491233826,0.002927209949120879,-0.009443117305636406,0.025379929691553116,0.05605234578251839,0.06475324183702469,0.046176422387361526,0.008896979503333569,-0.0009082526667043567,-0.04414546489715576,-0.05179009959101677,0.05079909786581993,0.05004465579986572,0.024307729676365852,-0.032445278018713,-0.005627192556858063,-0.03148586302995682,0.020038750022649765,0.014609632082283497,0.004737525247037411,-0.033562980592250824,-0.0219084732234478,0.0031998392660170794,-0.0541844442486763,-0.014016064815223217,0.0071449875831604,0.16598261892795563,-0.008441532962024212,0.06826850771903992,-0.030837364494800568,0.017245465889573097,0.012458279728889465,0.007679598405957222,-0.01902974769473076,0.021080482751131058,-0.0033460778649896383,0.037628818303346634,-0.03194576874375343,0.0326867438852787,0.06972231715917587,0.03512975573539734,0.048842351883649826,0.01514761708676815,-0.044049669057130814,-0.026290280744433403,0.0063097490929067135,0.01809399202466011,-0.011762590147554874,-0.03187117725610733,0.009694023989140987,-0.04668848589062691,-0.0013721866998821497,0.01641240157186985,0.060149095952510834,0.0661364495754242,-0.035579752177000046,0.04576117917895317,-0.0079557029530406,0.029879266396164894,-0.0026949425227940083,-0.010773472487926483,0.056130118668079376,-0.009765920229256153,-0.0046628667041659355,-0.018176954239606857,-0.015170799568295479,0.020720750093460083,-0.009796408005058765,0.018742218613624573,0.0020878645591437817,-0.015143871307373047,0.011256668716669083,0.007045055739581585,0.007276524789631367,-0.0071253408677875996,-0.012129333801567554,-0.013255459256470203,-0.0006939370068721473,-0.06277664750814438,-0.0012141474289819598,-0.02411639876663685,0.014494145289063454,0.0188326183706522,-0.010460191406309605,-0.004265181720256805,0.02883029915392399,0.008738349191844463,0.0005893497145734727,-0.016071416437625885,-0.006036106497049332,0.011670449748635292,-0.07941629737615585,0.0064055416733026505,-0.013094828464090824,0.061312366276979446,-0.009823293425142765,-0.004890923388302326,0.00884964969009161,0.02658146247267723,0.06245871260762215,0.0027708786074072123,0.023643402382731438,-0.022226577624678612,-0.02168569341301918,-0.046541113406419754,0.005755160003900528,-0.06255519390106201,-0.007348794490098953,0.03492411598563194,-0.021722760051488876,0.019227197393774986,0.0290084071457386,-0.029755670577287674,0.023551732301712036,0.01150966715067625,-0.03908948600292206,0.03822051361203194,0.059225987643003464,-0.00784005131572485,0.07096832245588303,0.047992169857025146,0.029254570603370667,0.008221939206123352,0.007771255448460579,-0.010789754800498486,-0.02678627334535122,-0.010460561141371727,0.02769051492214203,-0.0012644738890230656,0.024553023278713226,-0.01490428764373064,-0.016504807397723198,0.0037285764701664448,-0.03120211511850357,0.04850022494792938,0.020924409851431847,-0.05280602350831032,-0.006002877373248339,-0.047984227538108826,-0.0659753680229187,0.02435767464339733,-0.04830075427889824,-0.04289647191762924,-0.043344978243112564,-0.012461668811738491,0.023978780955076218,0.06170622259378433,0.010041480883955956,0.000870653020683676,0.027413537725806236,-0.08727569133043289,0.04703332856297493,0.02889537625014782,0.023825161159038544,-0.008055834099650383,-0.011029021814465523,0.0016386221395805478,0.03691566735506058,-0.01792113110423088,-0.015967372804880142,-0.010134047828614712,-0.04024231433868408,-0.04500838369131088,0.023656176403164864,0.030877752229571342,0.011828908696770668,-0.02254609949886799,0.01469743624329567,0.006706512067466974,0.030009068548679352,0.004879750311374664,0.019195087254047394,-0.06367862224578857,0.04485110193490982,0.023071452975273132,0.06622964143753052,-0.013830268755555153,-0.03956828638911247,-0.022439880296587944,0.016857454553246498,0.006250049918889999,0.019104480743408203,0.04149223119020462,-0.012978840619325638,0.04731370881199837,-0.039876289665699005,0.05593284219503403,-0.012914149090647697,-0.014299515634775162,0.009810707531869411,0.013940298929810524,-0.03651872277259827,0.009691037237644196,0.004832486156374216,-0.050798140466213226,-0.008520705625414848,-0.02000274322926998,0.05236538499593735,-0.023535043001174927,-0.009489063173532486,0.015273550525307655,0.015083334408700466,0.013866856694221497,0.020648756995797157,0.045373495668172836,-0.0682358667254448,0.035288095474243164,0.005676295142620802,-0.053574640303850174,0.03366238996386528,0.022171318531036377,-0.10341399908065796,-0.10227644443511963,0.01601671613752842,-0.0318162739276886,-0.042893506586551666,-0.055831775069236755,-0.023522300645709038,-0.024067074060440063,0.005208643153309822,-0.02114824764430523,0.01312226988375187,0.025494258850812912,0.027415497228503227,-0.005292600952088833,0.005609155632555485,0.0653093159198761,-0.0495145246386528,-0.02067280001938343,-0.021627230569720268,0.0016111675649881363,0.016275154426693916,0.018211105838418007,0.0012092288816347718,-0.02967987023293972,0.04984865337610245,-0.01887826807796955,0.05218219384551048,-0.04824057221412659,-0.013622837141156197,-0.027910403907299042,0.007181375287473202,0.0008140509016811848,-0.022489631548523903,0.039891742169857025,0.004021062981337309,-0.0349966436624527,-0.081891730427742,-0.01889605075120926,0.007630989886820316,0.013128045946359634,-0.03656061366200447,0.004993746522814035,-0.012084786780178547,-0.06380601972341537,0.03210337832570076,-0.029364079236984253,-0.010994105599820614,0.06169147416949272,-0.0008740916382521391,0.021312419325113297,-0.0266005527228117,0.04485384002327919,0.025438733398914337,-0.0473945289850235,-0.0022778776474297047,0.03176817297935486,-0.02665838599205017,0.023497438058257103,-0.0510561540722847,-0.008129294030368328,-0.048336196690797806,0.00006304148701019585,0.01009289175271988,-0.018818160519003868,-0.037161748856306076,-0.019524140283465385,0.0318484902381897,0.030813883990049362,-0.08129086345434189,-0.01244371011853218,-0.023465484380722046,-0.05470549687743187,0.008962889201939106,-0.003097385633736849,-0.06108558550477028,0.03081347420811653,0.028425617143511772,-0.03928166255354881,-0.045830320566892624,0.027212949469685555,-0.04150445759296417,0.008911626413464546,-0.003738012397661805,-0.03534206375479698,0.022339357063174248,0.007400169037282467,0.034161314368247986,-0.0017908145673573017,-0.045192424207925797,-0.05856884643435478,-0.03780869022011757,-0.046603042632341385,-0.024754663929343224,-0.013248831033706665,-0.062169115990400314,-0.029971331357955933,-0.008832167834043503,0.02699771337211132,-0.01880021207034588,0.011949884705245495,0.004686074797064066,-0.022463573142886162,0.018995683640241623,0.00013226531154941767,-0.01910591311752796,0.0038962087128311396,0.028124447911977768,-0.06658896803855896,0.06699517369270325,-0.05161551013588905,0.01714489236474037,0.001061806222423911,0.0014029020676389337,-0.009262104518711567,0.016970962285995483,0.07011548429727554,0.02200118824839592,0.03719695284962654,0.011321627534925938,0.002333597745746374,0.02618814818561077,-0.09157609939575195,-0.022949105128645897,0.00009755329665495083,-0.02207588031888008,-0.0030149391386657953,0.10354403406381607,-0.000053834377467865124,0.06853123009204865,-0.0029097499791532755,-0.033153850585222244,-0.05206524580717087,-0.011149337515234947,0.04622978717088699,0.01423764880746603,-0.0003511631803121418,0.03033715859055519,0.010135085321962833,-0.017525319010019302,0.036867666989564896,0.02849811501801014,0.04114346578717232,0.006149483844637871,-0.15042728185653687,0.00843697041273117,-0.03721063211560249,-6.22344619018133e-33,-0.06622524559497833,-0.005146306939423084,-0.025417668744921684,0.028946811333298683,0.017030315473675728,-0.02861044928431511,0.05410108342766762,-0.012729019857943058,-0.03100111335515976,0.00489412248134613,-0.014302331022918224,-0.0424339696764946,0.01833018660545349,0.013096410781145096,0.0074180541560053825,0.018550477921962738,0.02089723013341427,0.015232081525027752,0.0017567125614732504,0.011302698403596878,-0.04205724596977234,-0.017720898613333702,-0.000540813198313117,-0.12215611338615417,-0.027028748765587807,-0.009648301638662815,0.015510423108935356,0.034224700182676315,0.0056846789084374905,0.03282373771071434,-0.011699135415256023,0.006816774141043425,-0.05288257822394371,-0.015759605914354324,0.010524371638894081,0.03617458418011665,-0.07534617930650711,-0.030452510342001915,0.022603057324886322,0.023416738957166672,0.12590916454792023,-0.03130734711885452,-0.032680101692676544,0.02403292804956436,0.0022333087399601936,-0.026878593489527702,0.009755291044712067,-0.015404968522489071,-0.03751910850405693,-0.06928511708974838,0.059022046625614166,0.0174925047904253,-0.012918352149426937,0.04271253943443298,0.003472729818895459,-0.07355015724897385,0.014914882369339466,0.05203824117779732,-0.02243075706064701,0.009292536415159702,0.04375162720680237,-0.03222951665520668,0.002491565188392997,0.04393192008137703,0.04206037521362305,0.026141267269849777,0.02899697981774807,0.0303947813808918,0.003536674426868558,0.007451808080077171,-0.021555181592702866,-0.04243956878781319,0.04965285584330559,-0.03966433182358742,0.014355996623635292,0.02378935180604458,0.024939250200986862,0.010743438266217709,0.012625709176063538,0.044122010469436646,0.00020165553723927587,0.04677797481417656,-0.0012609303230419755,0.02287028729915619,0.0025687385350465775,-0.10737095028162003,-0.024210749194025993,-0.023785633966326714,0.0020776132587343454,0.047596756368875504,-0.004777391906827688,0.04714887589216232,-0.01790052093565464,0.02014308236539364,-0.026022372767329216,-0.039628542959690094,0.09315479546785355,0.057103585451841354,-0.01552523486316204,-0.058670394122600555,0.08214498311281204,-0.04891856387257576,0.022622307762503624,0.021160949021577835,-0.05646834895014763,-0.005505749955773354,-0.004157115239650011,-0.02472723089158535,-0.08246593177318573,0.0069747138768434525,0.033410441130399704,-0.002724380698055029,0.002331098075956106,-0.05108163133263588,-0.034127622842788696,0.02269599586725235,-0.03768710047006607,0.033563628792762756,-0.0066374968737363815,0.007444301620125771,0.04419459030032158,-0.041170526295900345,-0.02786610834300518,0.00985708087682724,0.04183487966656685,-0.04949378967285156,-0.041691746562719345,0.0021521574817597866,0.07240550965070724,0.05779397860169411,0.004257916007190943,0.05044198036193848,2.485830634668673e-7,0.02182701788842678,-0.0073721883818507195,-0.01805241033434868,-0.029545290395617485,0.010572734288871288,-0.0249912291765213,0.021202579140663147,-0.046784672886133194,0.009298798628151417,-0.029822783544659615,0.0033792213071137667,0.0005431849276646972,0.0124192014336586,0.018538890406489372,0.027899079024791718,-0.009071305394172668,0.019259577617049217,-0.0668635368347168,-0.04347433149814606,0.05453158915042877,0.04876907169818878,0.011417683213949203,0.07576301693916321,0.011392781510949135,-0.009533737786114216,-0.029821977019309998,-0.013512631878256798,-0.02613055892288685,0.05642244592308998,-0.03827434778213501,0.025526048615574837,0.002096752868965268,-0.011379078030586243,0.008517771027982235,0.04011464864015579,0.00919412449002266,-0.01064549945294857,-0.020374760031700134,0.0039522391743958,0.061245664954185486,0.005935628432780504,-0.021591268479824066,-0.01659061387181282,-0.07639195024967194,-0.007389813661575317,-0.007358121685683727,0.017334245145320892,0.0634956806898117,-0.04386028274893761,-0.0022974812891334295,0.015400998294353485,-0.021155038848519325,-0.005930517800152302,-0.03109259158372879,0.044470012187957764,-0.008727818727493286,0.006125443149358034,0.012480377219617367,0.00013653244241140783,0.023841459304094315,0.006174949929118156,-0.014839268289506435,0.00809397641569376,-0.021763548254966736,0.050774164497852325,-0.0043567088432610035,-0.0277290940284729,2.8101891413085706e-34,0.02015533857047558,-0.026302751153707504,0.00344645488075912,0.06666822731494904,0.026263125240802765,-0.03930211439728737,0.010296954773366451,-0.021244700998067856,0.05709400027990341,-0.06432733684778214,-0.0020254862029105425]'
SET
  @HasCustomProps_6ba424d5 = 1
SET
  @HasCustomEvents_6ba424d5 = 0
SET
  @RequiresData_6ba424d5 = 1
SET
  @DependencyCount_6ba424d5 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_6ba424d5 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_6ba424d5 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_6ba424d5 = 1
SET
  @ID_6ba424d5 = '57548CB2-944C-443D-8345-0F2E5CD673D1'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_6ba424d5,
  @Name = @Name_6ba424d5,
  @Version = @Version_6ba424d5,
  @VersionSequence = @VersionSequence_6ba424d5,
  @Title = @Title_6ba424d5,
  @Description = @Description_6ba424d5,
  @Type = @Type_6ba424d5,
  @Status = @Status_6ba424d5,
  @DeveloperName = @DeveloperName_6ba424d5,
  @DeveloperEmail = @DeveloperEmail_6ba424d5,
  @DeveloperOrganization = @DeveloperOrganization_6ba424d5,
  @SourceRegistryID = @SourceRegistryID_6ba424d5,
  @ReplicatedAt = @ReplicatedAt_6ba424d5,
  @LastSyncedAt = @LastSyncedAt_6ba424d5,
  @Specification = @Specification_6ba424d5,
  @FunctionalRequirements = @FunctionalRequirements_6ba424d5,
  @TechnicalDesign = @TechnicalDesign_6ba424d5,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_6ba424d5,
  @TechnicalDesignVector = @TechnicalDesignVector_6ba424d5,
  @HasCustomProps = @HasCustomProps_6ba424d5,
  @HasCustomEvents = @HasCustomEvents_6ba424d5,
  @RequiresData = @RequiresData_6ba424d5,
  @DependencyCount = @DependencyCount_6ba424d5,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_6ba424d5,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_6ba424d5,
  @HasRequiredCustomProps = @HasRequiredCustomProps_6ba424d5,
  @ID = @ID_6ba424d5;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_edadc0e3 NVARCHAR(MAX),
@Name_edadc0e3 NVARCHAR(500),
@Version_edadc0e3 NVARCHAR(50),
@VersionSequence_edadc0e3 INT,
@Title_edadc0e3 NVARCHAR(1000),
@Description_edadc0e3 NVARCHAR(MAX),
@Type_edadc0e3 NVARCHAR(255),
@Status_edadc0e3 NVARCHAR(50),
@DeveloperName_edadc0e3 NVARCHAR(255),
@DeveloperEmail_edadc0e3 NVARCHAR(255),
@DeveloperOrganization_edadc0e3 NVARCHAR(255),
@SourceRegistryID_edadc0e3 UNIQUEIDENTIFIER,
@ReplicatedAt_edadc0e3 DATETIMEOFFSET,
@LastSyncedAt_edadc0e3 DATETIMEOFFSET,
@Specification_edadc0e3 NVARCHAR(MAX),
@FunctionalRequirements_edadc0e3 NVARCHAR(MAX),
@TechnicalDesign_edadc0e3 NVARCHAR(MAX),
@FunctionalRequirementsVector_edadc0e3 NVARCHAR(MAX),
@TechnicalDesignVector_edadc0e3 NVARCHAR(MAX),
@HasCustomProps_edadc0e3 BIT,
@HasCustomEvents_edadc0e3 BIT,
@RequiresData_edadc0e3 BIT,
@DependencyCount_edadc0e3 INT,
@TechnicalDesignVectorEmbeddingModelID_edadc0e3 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_edadc0e3 NVARCHAR(MAX),
@HasRequiredCustomProps_edadc0e3 BIT,
@ID_edadc0e3 UNIQUEIDENTIFIER
SET
  @Namespace_edadc0e3 = N'CRM/Analytics'
SET
  @Name_edadc0e3 = N'AccountsByIndustry'
SET
  @Version_edadc0e3 = N'1.0.0'
SET
  @VersionSequence_edadc0e3 = 1
SET
  @Title_edadc0e3 = N'Accounts by Industry'
SET
  @Description_edadc0e3 = N'Interactive pie chart showing distribution of CRM accounts by industry with drill-down capability to view detailed account lists and individual account information'
SET
  @Type_edadc0e3 = N'Dashboard'
SET
  @Status_edadc0e3 = N'Published'
SET
  @Specification_edadc0e3 = N'{"name":"AccountsByIndustry","title":"Accounts by Industry","description":"Interactive pie chart showing distribution of CRM accounts by industry with drill-down capability to view detailed account lists and individual account information.","type":"dashboard","location":"embedded","functionalRequirements":"## Accounts by Industry Dashboard\n\n### Core Functionality\n- Display an interactive pie chart showing account distribution across industries\n- Calculate and show percentages for each industry segment\n- Support click-to-filter: clicking a pie slice filters the account list below\n- Display filtered account list with key information (name, revenue, status)\n- Enable row selection to view detailed account information in a slide-in panel\n- Provide sorting capabilities on all columns (client-side)\n- Implement pagination for large datasets (server-side via RunView)\n- Include an ''Open'' button on account details to trigger OpenEntityRecord callback\n- Remember user''s last selected industry and sort preferences\n\n### Visual Features\n- Smooth hover animations on pie slices with tooltips\n- Highlighted state for selected pie slice\n- Color-coded legend with industry names and counts\n- Responsive layout adapting to different screen sizes\n- Loading states during data fetching\n- Empty states with helpful messages\n- Smooth slide-in animation for detail panel\n\n### Interactive Elements\n- Click pie slice to select/deselect and filter accounts\n- Click legend items to toggle slice visibility\n- Sort columns by clicking headers\n- Select account rows to view details\n- Close detail panel via X button or clicking outside\n- Pagination controls for navigating large datasets","dataRequirements":{"mode":"views","description":"Fetches account data using RunView for industry distribution analysis","entities":[{"name":"Accounts","description":"CRM account data grouped by industry","displayFields":["ID","AccountName","Industry","Revenue","Status","IsActive"],"filterFields":["IsActive","Industry"],"sortFields":["AccountName","Revenue","Industry"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Groups accounts by industry for pie chart visualization and filtered list display"}],"queries":[]},"technicalDesign":"## Technical Architecture\n\n### Component Structure\n- **Root Component (AccountsByIndustry)**: Manages overall state and data loading\n- **PieChart (inline)**: Chart.js-based interactive pie visualization\n- **AccountList (inline)**: Filtered, sortable table with pagination\n- **AccountDetails (inline)**: Sliding panel with comprehensive account info\n\n### State Management\n- Selected industry (persisted in savedUserSettings)\n- Sort configuration (field, direction) (persisted)\n- Current page number\n- Selected account ID\n- Detail panel visibility\n- Loading states for async operations\n\n### Data Flow\n1. Load all accounts via RunView on mount\n2. Group accounts by Industry field client-side\n3. Calculate percentages and prepare chart data\n4. Render pie chart with Chart.js\n5. Filter account list based on selected slice\n6. Load account details when row selected\n7. Persist user preferences via onSaveUserSettings\n\n### Performance Optimizations\n- Use React.memo for chart component\n- Implement useMemo for data grouping\n- Client-side filtering/sorting to reduce server calls\n- Virtual scrolling for very large lists (future)","properties":[{"name":"maxIndustries","type":"number","required":false,"description":"Maximum number of industries to show in pie chart (others grouped)","defaultValue":10},{"name":"showOthers","type":"boolean","required":false,"description":"Whether to group small segments into ''Others'' category","defaultValue":true},{"name":"pageSize","type":"number","required":false,"description":"Number of accounts to show per page in the list","defaultValue":10},{"name":"colorScheme","type":"''default'' | ''vibrant'' | ''pastel''","required":false,"description":"Color palette for the pie chart","defaultValue":"default"}],"dependencies":[{"name":"AccountsByIndustryChart","title":"Accounts by Industry Chart","description":"Interactive pie chart component that visualizes account distribution by industry with click-to-filter functionality","type":"component","location":"embedded","namespace":"CRM/Analytics","functionalRequirements":"## Pie Chart Component\n\n- Display interactive pie chart using Chart.js\n- Show industry names with counts in legend\n- Calculate and display percentages in tooltips\n- Support click-to-select functionality\n- Animate on hover with visual feedback\n- Configurable color schemes\n- Handle ''Others'' grouping for small segments","technicalDesign":"## Technical Design\n\n### Props\n- industryData: Grouped and calculated industry data\n- selectedIndustry: Currently selected slice\n- onSliceClick: Callback for slice selection\n- colorScheme: Color palette selection\n- maxIndustries: Maximum slices to show\n\n### Implementation\n- Uses Chart.js for rendering\n- Ref-based chart instance management\n- Cleanup on unmount to prevent memory leaks","dataRequirements":{"mode":"views","description":"Fetches account data using RunView for industry distribution analysis","entities":[{"name":"Accounts","description":"CRM account data grouped by industry","displayFields":["ID","AccountName","Industry","Revenue","Status","IsActive"],"filterFields":["IsActive","Industry"],"sortFields":["AccountName","Revenue","Industry"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Groups accounts by industry for pie chart visualization and filtered list display"}],"queries":[]},"properties":[{"name":"industryData","type":"object","required":true,"description":"Object containing labels, data, percentages, and total count"},{"name":"selectedIndustry","type":"string","required":true,"description":"Currently selected industry slice"},{"name":"onSliceClick","type":"function","required":true,"description":"Callback function when a slice is clicked"},{"name":"colorScheme","type":"string","required":true,"description":"Color palette: default, vibrant, or pastel","defaultValue":"default"}],"libraries":[{"name":"Chart.js","version":"4.4.0","globalVariable":"Chart"}],"exampleUsage":"<AccountsByIndustryChart\n  industryData={industryData}\n  selectedIndustry={selectedIndustry}\n  onSliceClick={handleSliceClick}\n  colorScheme=\"default\"\n/>","code":"function AccountsByIndustryChart ({ industryData, selectedIndustry, onSliceClick, colorScheme = ''default'' }) {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  \n  const colorSchemes = {\n    default: [\n      ''#3B82F6'', ''#10B981'', ''#F59E0B'', ''#EF4444'', ''#8B5CF6'',\n      ''#EC4899'', ''#14B8A6'', ''#F97316'', ''#6366F1'', ''#84CC16''\n    ],\n    vibrant: [\n      ''#FF6B6B'', ''#4ECDC4'', ''#45B7D1'', ''#96CEB4'', ''#FFEAA7'',\n      ''#DDA0DD'', ''#98D8C8'', ''#FFD93D'', ''#6BCB77'', ''#FF6B9D''\n    ],\n    pastel: [\n      ''#FFE5E5'', ''#E5F3FF'', ''#E5FFE5'', ''#FFF5E5'', ''#F5E5FF'',\n      ''#FFE5F5'', ''#E5FFF5'', ''#FFF0E5'', ''#F0E5FF'', ''#E5F0FF''\n    ]\n  };\n  \n  useEffect(() => {\n    if (chartRef.current && industryData.labels.length > 0) {\n      const ctx = chartRef.current.getContext(''2d'');\n      \n      // If chart exists, update data instead of destroying (prevents flicker)\n      if (chartInstance.current) {\n        // Find selected index to offset that slice\n        const selectedIndex = selectedIndustry \n          ? industryData.labels.indexOf(selectedIndustry)\n          : -1;\n        \n        // Create offset array - 20px for selected slice, 8px for hover\n        const offsets = industryData.labels.map((_, i) => \n          i === selectedIndex ? 20 : 0\n        );\n        \n        // Update chart data and offset without destroying\n        chartInstance.current.data.labels = industryData.labels;\n        chartInstance.current.data.datasets[0].data = industryData.data;\n        chartInstance.current.data.datasets[0].offset = offsets;\n        chartInstance.current.update(''none''); // ''none'' animation mode prevents flicker\n        return;\n      }\n      \n      // Only create new chart if it doesn''t exist\n      const selectedIndex = selectedIndustry \n        ? industryData.labels.indexOf(selectedIndustry)\n        : -1;\n      \n      const offsets = industryData.labels.map((_, i) => \n        i === selectedIndex ? 20 : 0\n      );\n      \n      chartInstance.current = new Chart(ctx, {\n        type: ''pie'',\n        data: {\n          labels: industryData.labels,\n          datasets: [{\n            data: industryData.data,\n            backgroundColor: colorSchemes[colorScheme],\n            borderWidth: 2,\n            borderColor: ''#fff'',\n            hoverOffset: 8,\n            offset: offsets // Initial offset for selected slice\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          layout: {\n            padding: {\n              left: 20,\n              right: 20,\n              top: 20,\n              bottom: 20\n            }\n          },\n          animation: {\n            animateRotate: true,\n            animateScale: false\n          },\n          plugins: {\n            legend: {\n              position: ''right'',\n              align: ''center'',\n              labels: {\n                padding: 10,\n                boxWidth: 12,\n                font: { size: 12 },\n                generateLabels: (chart) => {\n                  const data = chart.data;\n                  return data.labels.map((label, i) => ({\n                    text: `$' + '{label} ($' + '{industryData.data[i]})`,\n                    fillStyle: data.datasets[0].backgroundColor[i],\n                    hidden: false,\n                    index: i,\n                    // Add bold font for selected item\n                    font: {\n                      size: 12,\n                      weight: label === selectedIndustry ? ''bold'' : ''normal''\n                    }\n                  }));\n                }\n              },\n              onClick: (e, legendItem, legend) => {\n                const index = legendItem.index;\n                const label = industryData.labels[index];\n                onSliceClick(label);\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.label || '''';\n                  const value = context.parsed;\n                  const percentage = industryData.percentages[context.dataIndex];\n                  return `$' + '{label}: $' + '{value} ($' + '{percentage}%)`;\n                }\n              }\n            }\n          },\n          onClick: (event, elements) => {\n            if (elements.length > 0) {\n              const index = elements[0].index;\n              const label = industryData.labels[index];\n              onSliceClick(label);\n            }\n          }\n        }\n      });\n    }\n    \n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [industryData, colorScheme]); // Remove onSliceClick from deps to prevent recreation\n  \n  // Update selection without recreating chart\n  useEffect(() => {\n    if (chartInstance.current) {\n      const selectedIndex = selectedIndustry \n        ? industryData.labels.indexOf(selectedIndustry)\n        : -1;\n      \n      // Update offsets for selected slice\n      const offsets = industryData.labels.map((_, i) => \n        i === selectedIndex ? 20 : 0\n      );\n      \n      chartInstance.current.data.datasets[0].offset = offsets;\n      \n      // Update legend font weights\n      chartInstance.current.options.plugins.legend.labels.generateLabels = (chart) => {\n        const data = chart.data;\n        return data.labels.map((label, i) => ({\n          text: `$' + '{label} ($' + '{industryData.data[i]})`,\n          fillStyle: data.datasets[0].backgroundColor[i],\n          hidden: false,\n          index: i,\n          font: {\n            size: 12,\n            weight: label === selectedIndustry ? ''bold'' : ''normal''\n          }\n        }));\n      }; \n      \n      chartInstance.current.update(''none''); // No animation to prevent flicker\n    }\n  }, [selectedIndustry, industryData]);\n  \n  return (\n    <div style={{ height: ''100%'', position: ''relative'' }}>\n      <canvas ref={chartRef}></canvas>\n    </div>\n  );\n}"},{"name":"AccountsByIndustryList","title":"Accounts by Industry List","description":"Sortable, paginated table component displaying filtered account records with row selection capability","type":"component","location":"embedded","namespace":"CRM/Analytics","functionalRequirements":"## Account List Component\n\n- Display accounts in sortable table format\n- Support column sorting with visual indicators\n- Implement client-side pagination\n- Enable row hover effects\n- Handle row click for account selection\n- Format currency values appropriately\n- Show status badges with color coding\n- Display clear filter button","technicalDesign":"## Technical Design\n\n### Props\n- accounts: Filtered account array\n- sortConfig: Current sort settings\n- onSort: Sort handler callback\n- onAccountClick: Row selection callback\n- currentPage: Current pagination page\n- pageSize: Items per page\n- onPageChange: Pagination callback\n\n### Features\n- Client-side sorting logic\n- Pagination calculation\n- Hover state management\n- Status badge styling","dataRequirements":{"mode":"views","description":"Fetches account data using RunView for industry distribution analysis","entities":[{"name":"Accounts","description":"CRM account data grouped by industry","displayFields":["ID","AccountName","Industry","Revenue","Status","IsActive"],"filterFields":["IsActive","Industry"],"sortFields":["AccountName","Revenue","Industry"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Groups accounts by industry for pie chart visualization and filtered list display"}],"queries":[]},"properties":[{"name":"accounts","type":"array","required":true,"description":"Array of account objects to display"},{"name":"selectedIndustry","type":"string","required":true,"description":"Currently selected industry for display"},{"name":"sortConfig","type":"object","required":true,"description":"Object with field and direction properties"},{"name":"onSort","type":"function","required":true,"description":"Callback when column header is clicked for sorting"},{"name":"onAccountClick","type":"function","required":true,"description":"Callback when account row is clicked"},{"name":"currentPage","type":"number","required":true,"description":"Current page number for pagination"},{"name":"pageSize","type":"number","required":true,"description":"Number of items per page"},{"name":"onPageChange","type":"function","required":true,"description":"Callback when page is changed"},{"name":"onClearFilter","type":"function","required":true,"description":"Callback to clear the industry filter"}],"exampleUsage":"<AccountsByIndustryList\n  accounts={filteredAccounts}\n  selectedIndustry={selectedIndustry}\n  sortConfig={sortConfig}\n  onSort={handleSort}\n  onAccountClick={handleAccountClick}\n  currentPage={currentPage}\n  pageSize={pageSize}\n  onPageChange={setCurrentPage}\n  onClearFilter={handleClearFilter}\n/>","code":"function AccountsByIndustryList ({\n  accounts,\n  selectedIndustry,\n  sortConfig,\n  onSort,\n  onAccountClick,\n  currentPage,\n  pageSize,\n  onPageChange,\n  onClearFilter\n}) {\n  // Calculate pagination\n  const totalPages = Math.ceil(accounts.length / pageSize);\n  const paginatedAccounts = accounts.slice(\n    (currentPage - 1) * pageSize,\n    currentPage * pageSize\n  );\n  \n  // Format currency\n  const formatCurrency = (value) => {\n    if (!value) return ''-'';\n    return new Intl.NumberFormat(''en-US'', {\n      style: ''currency'',\n      currency: ''USD'',\n      notation: ''compact'',\n      maximumFractionDigits: 1\n    }).format(value);\n  };\n  \n  if (!selectedIndustry) {\n    return null;\n  }\n  \n  return (\n    <div style={{ \n      marginTop: ''32px'',\n      padding: ''20px'',\n      backgroundColor: ''#F9FAFB'',\n      borderRadius: ''8px'',\n      border: ''1px solid #E5E7EB''\n    }}>\n      <div style={{ \n        fontSize: ''18px'', \n        fontWeight: ''600'', \n        color: ''#111827'',\n        marginBottom: ''16px'',\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center''\n      }}>\n        <span>Selected: {selectedIndustry} ({accounts.length} accounts)</span>\n        {onClearFilter && (\n          <button\n            onClick={onClearFilter}\n            style={{\n              padding: ''6px 12px'',\n              fontSize: ''14px'',\n              color: ''#6B7280'',\n              backgroundColor: ''#fff'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px'',\n              cursor: ''pointer''\n            }}\n          >\n            Clear Filter\n          </button>\n        )}\n      </div>\n      \n      {/* Account Table */}\n      <div style={{ backgroundColor: ''#fff'', borderRadius: ''6px'', overflow: ''hidden'' }}>\n        <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n          <thead>\n            <tr style={{ backgroundColor: ''#F3F4F6'' }}>\n              <th \n                onClick={() => onSort(''AccountName'')}\n                style={{ \n                  padding: ''12px'', \n                  textAlign: ''left'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  cursor: ''pointer'',\n                  userSelect: ''none''\n                }}\n              >\n                Account Name {sortConfig.field === ''AccountName'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => onSort(''AnnualRevenue'')}\n                style={{ \n                  padding: ''12px'', \n                  textAlign: ''left'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  cursor: ''pointer'',\n                  userSelect: ''none''\n                }}\n              >\n                Revenue {sortConfig.field === ''AnnualRevenue'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => onSort(''AccountStatus'')}\n                style={{ \n                  padding: ''12px'', \n                  textAlign: ''left'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  cursor: ''pointer'',\n                  userSelect: ''none''\n                }}\n              >\n                Status {sortConfig.field === ''AccountStatus'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => onSort(''AccountType'')}\n                style={{ \n                  padding: ''12px'', \n                  textAlign: ''left'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  cursor: ''pointer'',\n                  userSelect: ''none''\n                }}\n              >\n                Type {sortConfig.field === ''AccountType'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th style={{ padding: ''12px'', width: ''50px'' }}></th>\n            </tr>\n          </thead>\n          <tbody>\n            {paginatedAccounts.map(account => (\n              <tr \n                key={account.ID}\n                style={{ \n                  borderBottom: ''1px solid #E5E7EB'',\n                  cursor: ''pointer'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F9FAFB''}\n                onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}\n                onClick={() => onAccountClick(account)}\n              >\n                <td style={{ padding: ''12px'', fontSize: ''14px'', color: ''#111827'' }}>\n                  {account.AccountName}\n                </td>\n                <td style={{ padding: ''12px'', fontSize: ''14px'', color: ''#111827'' }}>\n                  {formatCurrency(account.AnnualRevenue)}\n                </td>\n                <td style={{ padding: ''12px'' }}>\n                  <span style={{\n                    padding: ''2px 8px'',\n                    fontSize: ''12px'',\n                    fontWeight: ''500'',\n                    borderRadius: ''4px'',\n                    backgroundColor: account.AccountStatus === ''Active'' ? ''#D1FAE5'' : ''#FEE2E2'',\n                    color: account.AccountStatus === ''Active'' ? ''#065F46'' : ''#991B1B''\n                  }}>\n                    {account.AccountStatus}\n                  </span>\n                </td>\n                <td style={{ padding: ''12px'' }}>\n                  <span style={{\n                    padding: ''2px 8px'',\n                    fontSize: ''12px'',\n                    fontWeight: ''500'',\n                    borderRadius: ''4px'',\n                    backgroundColor: \n                      account.AccountType === ''Customer'' ? ''#DBEAFE'' :\n                      account.AccountType === ''Prospect'' ? ''#FEF3C7'' :\n                      account.AccountType === ''Partner'' ? ''#E9D5FF'' :\n                      account.AccountType === ''Vendor'' ? ''#FED7AA'' :\n                      ''#F3F4F6'',\n                    color: \n                      account.AccountType === ''Customer'' ? ''#1E40AF'' :\n                      account.AccountType === ''Prospect'' ? ''#92400E'' :\n                      account.AccountType === ''Partner'' ? ''#6B21A8'' :\n                      account.AccountType === ''Vendor'' ? ''#9A3412'' :\n                      ''#374151''\n                  }}>\n                    {account.AccountType}\n                  </span>\n                </td>\n                <td style={{ padding: ''12px'', textAlign: ''center'' }}>\n                  <span style={{ color: ''#9CA3AF'' }}>›</span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        \n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div style={{ \n            padding: ''12px'',\n            display: ''flex'',\n            justifyContent: ''center'',\n            gap: ''4px'',\n            borderTop: ''1px solid #E5E7EB''\n          }}>\n            <button\n              onClick={() => onPageChange(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n              style={{\n                padding: ''6px 12px'',\n                fontSize: ''14px'',\n                color: currentPage === 1 ? ''#D1D5DB'' : ''#374151'',\n                backgroundColor: ''#fff'',\n                border: ''1px solid #D1D5DB'',\n                borderRadius: ''4px'',\n                cursor: currentPage === 1 ? ''default'' : ''pointer''\n              }}\n            >\n              ‹\n            </button>\n            \n            {[...Array(Math.min(5, totalPages))].map((_, i) => {\n              let pageNum;\n              if (totalPages <= 5) {\n                pageNum = i + 1;\n              } else if (currentPage <= 3) {\n                pageNum = i + 1;\n              } else if (currentPage >= totalPages - 2) {\n                pageNum = totalPages - 4 + i;\n              } else {\n                pageNum = currentPage - 2 + i;\n              }\n              \n              return (\n                <button\n                  key={i}\n                  onClick={() => onPageChange(pageNum)}\n                  style={{\n                    padding: ''6px 12px'',\n                    fontSize: ''14px'',\n                    color: pageNum === currentPage ? ''#fff'' : ''#374151'',\n                    backgroundColor: pageNum === currentPage ? ''#3B82F6'' : ''#fff'',\n                    border: ''1px solid '' + (pageNum === currentPage ? ''#3B82F6'' : ''#D1D5DB''),\n                    borderRadius: ''4px'',\n                    cursor: ''pointer''\n                  }}\n                >\n                  {pageNum}\n                </button>\n              );\n            })}\n             \n            <button\n              onClick={() => onPageChange(Math.min(totalPages, currentPage + 1))}\n              disabled={currentPage === totalPages}\n              style={{\n                padding: ''6px 12px'',\n                fontSize: ''14px'',\n                color: currentPage === totalPages ? ''#D1D5DB'' : ''#374151'',\n                backgroundColor: ''#fff'',\n                border: ''1px solid #D1D5DB'',\n                borderRadius: ''4px'',\n                cursor: currentPage === totalPages ? ''default'' : ''pointer''\n              }}\n            >\n              ›\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"},{"name":"AccountsByIndustryDetails","title":"Accounts by Industry Details","description":"Sliding detail panel that displays comprehensive account information with an open record action button","type":"component","location":"embedded","namespace":"CRM/Analytics","functionalRequirements":"## Account Details Panel\n\n- Slide in from right with smooth animation\n- Display account name and industry prominently\n- Show key metrics (revenue, status, type)\n- Include contact information section\n- Display location details if available\n- Provide ''Open Record'' action button\n- Support close via X button or overlay click\n- Format all data appropriately","technicalDesign":"## Technical Design\n\n### Props\n- account: Selected account object\n- isOpen: Panel visibility state\n- onClose: Close handler callback\n- onOpenRecord: Open record callback\n\n### Layout\n- Fixed positioning overlay\n- Transform-based slide animation\n- Sections for different data types\n- Sticky header with close button\n- Scrollable content area","dataRequirements":{"mode":"views","description":"Fetches account data using RunView for industry distribution analysis","entities":[{"name":"Accounts","description":"CRM account data grouped by industry","displayFields":["ID","AccountName","Industry","Revenue","Status","IsActive"],"filterFields":["IsActive","Industry"],"sortFields":["AccountName","Revenue","Industry"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Groups accounts by industry for pie chart visualization and filtered list display"}],"queries":[]},"properties":[{"name":"account","type":"object","required":true,"description":"Selected account object with all details"},{"name":"isOpen","type":"boolean","required":true,"description":"Whether the panel is visible"},{"name":"onClose","type":"function","required":true,"description":"Callback to close the panel"},{"name":"onOpenRecord","type":"function","required":true,"description":"Callback to open the full record"}],"exampleUsage":"<AccountsByIndustryDetails\n  account={selectedAccount}\n  isOpen={showDetails}\n  onClose={() => setShowDetails(false)}\n  onOpenRecord={handleOpenRecord}\n/>","code":"function AccountsByIndustryDetails ({ account, isOpen, onClose, onOpenRecord }) {\n  if (!isOpen || !account) {\n    return null;\n  }\n  \n  // Format currency\n  const formatCurrency = (value) => {\n    if (!value) return ''-'';\n    return new Intl.NumberFormat(''en-US'', {\n      style: ''currency'',\n      currency: ''USD'',\n      notation: ''compact'',\n      maximumFractionDigits: 1\n    }).format(value);\n  };\n   \n  return (\n    <>\n      {/* Overlay */}\n      <div \n        onClick={onClose}\n        style={{\n          position: ''fixed'',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n          zIndex: 999,\n          animation: ''fadeIn 0.3s ease''\n        }}\n      />\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: ''75px'',\n        right: 0,\n        bottom: 0,\n        width: ''400px'',\n        backgroundColor: ''#fff'',\n        boxShadow: ''-4px 0 24px rgba(0, 0, 0, 0.1)'',\n        zIndex: 1000,\n        transform: ''translateX(0)'',\n        transition: ''transform 0.3s ease'',\n        overflowY: ''auto'',\n        borderTopLeftRadius: ''8px''\n      }}>\n        {/* Panel Header */}\n        <div style={{\n          padding: ''20px'',\n          borderBottom: ''1px solid #E5E7EB'',\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''center''\n        }}>\n          <h3 style={{ fontSize: ''18px'', fontWeight: ''600'', color: ''#111827'' }}>\n            Account Details\n          </h3>\n          <button\n            onClick={onClose}\n            style={{\n              width: ''32px'',\n              height: ''32px'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              backgroundColor: ''#F3F4F6'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer'',\n              fontSize: ''18px'',\n              color: ''#6B7280''\n            }}\n          >\n            ×\n          </button>\n        </div>\n        \n        {/* Panel Content */}\n        <div style={{ padding: ''20px'' }}>\n          {/* Account Name and Open Button */}\n          <div style={{ marginBottom: ''24px'' }}>\n            <div style={{ \n              display: ''flex'', \n              justifyContent: ''space-between'',\n              alignItems: ''flex-start'',\n              marginBottom: ''12px''\n            }}>\n              <h4 style={{ \n                fontSize: ''20px'', \n                fontWeight: ''700'', \n                color: ''#111827'',\n                marginBottom: ''4px''\n              }}>\n                {account.AccountName}\n              </h4>\n              <button\n                onClick={onOpenRecord}\n                style={{\n                  padding: ''8px 16px'',\n                  fontSize: ''14px'',\n                  fontWeight: ''500'',\n                  color: ''#fff'',\n                  backgroundColor: ''#3B82F6'',\n                  border: ''none'',\n                  borderRadius: ''6px'',\n                  cursor: ''pointer'',\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: ''4px''\n                }}\n              >\n                Open Record ↗\n              </button>\n            </div>\n            <div style={{ fontSize: ''14px'', color: ''#6B7280'' }}>\n              {account.Industry || ''No industry''}\n            </div>\n          </div>\n          \n          {/* Key Information */}\n          <div style={{ marginBottom: ''24px'' }}>\n            <h5 style={{ \n              fontSize: ''12px'', \n              fontWeight: ''600'', \n              color: ''#6B7280'',\n              textTransform: ''uppercase'',\n              letterSpacing: ''0.05em'',\n              marginBottom: ''12px''\n            }}>\n              Key Information\n            </h5>\n            \n            <div style={{ display: ''flex'', flexDirection: ''column'', gap: ''12px'' }}>\n              <div>\n                <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''2px'' }}>Annual Revenue</div>\n                <div style={{ fontSize: ''16px'', fontWeight: ''600'', color: ''#111827'' }}>\n                  {formatCurrency(account.AnnualRevenue)}\n                </div>\n              </div>\n              \n              <div style={{ display: ''flex'', gap: ''16px'' }}>\n                <div style={{ flex: 1 }}>\n                  <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''2px'' }}>Status</div>\n                  <span style={{\n                    padding: ''2px 8px'',\n                    fontSize: ''12px'',\n                    fontWeight: ''500'',\n                    borderRadius: ''4px'',\n                    backgroundColor: account.AccountStatus === ''Active'' ? ''#D1FAE5'' : ''#FEE2E2'',\n                    color: account.AccountStatus === ''Active'' ? ''#065F46'' : ''#991B1B''\n                  }}>\n                    {account.AccountStatus}\n                  </span>\n                </div>\n                \n                <div style={{ flex: 1 }}>\n                  <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''2px'' }}>Type</div>\n                  <span style={{\n                    padding: ''2px 8px'',\n                    fontSize: ''12px'',\n                    fontWeight: ''500'',\n                    borderRadius: ''4px'',\n                    backgroundColor: \n                      account.AccountType === ''Customer'' ? ''#DBEAFE'' :\n                      account.AccountType === ''Prospect'' ? ''#FEF3C7'' :\n                      account.AccountType === ''Partner'' ? ''#E9D5FF'' :\n                      account.AccountType === ''Vendor'' ? ''#FED7AA'' :\n                      ''#F3F4F6'',\n                    color: \n                      account.AccountType === ''Customer'' ? ''#1E40AF'' :\n                      account.AccountType === ''Prospect'' ? ''#92400E'' :\n                      account.AccountType === ''Partner'' ? ''#6B21A8'' :\n                      account.AccountType === ''Vendor'' ? ''#9A3412'' :\n                      ''#374151''\n                  }}>\n                    {account.AccountType}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Contact Information */}\n          <div style={{ marginBottom: ''24px'' }}>\n            <h5 style={{ \n              fontSize: ''12px'', \n              fontWeight: ''600'', \n              color: ''#6B7280'',\n              textTransform: ''uppercase'',\n              letterSpacing: ''0.05em'',\n              marginBottom: ''12px''\n            }}>\n              Contact Information\n            </h5>\n            \n            <div style={{ display: ''flex'', flexDirection: ''column'', gap: ''10px'' }}>\n              {account.Phone && (\n                <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n                  <span style={{ fontSize: ''14px'' }}>📞</span>\n                  <span style={{ fontSize: ''14px'', color: ''#111827'' }}>{account.Phone}</span>\n                </div>\n              )}\n              \n              {account.Website && (\n                <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n                  <span style={{ fontSize: ''14px'' }}>🌐</span>\n                  <a \n                    href={account.Website.startsWith(''http'') ? account.Website : `https://$' + '{account.Website}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ fontSize: ''14px'', color: ''#3B82F6'', textDecoration: ''none'' }}\n                  >\n                    {account.Website}\n                  </a>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {/* Address */}\n          {(account.BillingCity || account.BillingState || account.BillingCountry) && (\n            <div>\n              <h5 style={{ \n                fontSize: ''12px'', \n                fontWeight: ''600'', \n                color: ''#6B7280'',\n                textTransform: ''uppercase'',\n                letterSpacing: ''0.05em'',\n                marginBottom: ''12px''\n              }}>\n                Location\n              </h5>\n              \n              <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n                <span style={{ fontSize: ''14px'' }}>📍</span>\n                <span style={{ fontSize: ''14px'', color: ''#111827'' }}>\n                  {[account.BillingCity, account.BillingState, account.BillingCountry]\n                    .filter(Boolean)\n                    .join('', '')}\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Animation styles */}\n      <style>{`\n        @keyframes fadeIn {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n      `}</style>\n    </>\n  );\n}"}],"exampleUsage":"<AccountsByIndustry \n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n  maxIndustries={8}\n  pageSize={15}\n  colorScheme=\"vibrant\"\n/>","code":"function AccountsByIndustry (props) {\n  // Get child components from registry\n  const { utilities, styles, callbacks, savedUserSettings, onSaveUserSettings, components } = props;\n  const AccountsByIndustryChart = components?.AccountsByIndustryChart;\n  const AccountsByIndustryList = components?.AccountsByIndustryList;\n  const AccountsByIndustryDetails = components?.AccountsByIndustryDetails;\n   \n  // Optional custom props with defaults\n  const maxIndustries = props.maxIndustries || 10;\n  const showOthers = props.showOthers !== false;\n  const pageSize = props.pageSize || 10;\n  const colorScheme = props.colorScheme || ''default'';\n  \n  // State management\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedIndustry, setSelectedIndustry] = useState(\n    savedUserSettings?.selectedIndustry || null\n  );\n  const [sortConfig, setSortConfig] = useState(\n    savedUserSettings?.sortConfig || { field: ''AccountName'', direction: ''asc'' }\n  );\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [showDetails, setShowDetails] = useState(false);\n  \n  // Load accounts data\n  useEffect(() => {\n    loadAccounts();\n  }, []);\n  \n  const loadAccounts = async () => {\n    setLoading(true);\n    try {\n      console.log(''[AccountsByIndustry] Loading accounts...'');\n      const result = await utilities.rv.RunView({\n        EntityName: ''Accounts'',\n        ExtraFilter: ''IsActive = 1'',\n        OrderBy: ''AccountName''\n      });\n      \n      if (result.Success && result.Results) {\n        console.log(''[AccountsByIndustry] Loaded'', result.Results.length, ''accounts'');\n        setAccounts(result.Results);\n      } else {\n        console.error(''[AccountsByIndustry] Failed to load accounts:'', result.ErrorMessage);\n      }\n    } catch (error) {\n      console.error(''[AccountsByIndustry] Error loading accounts:'', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Group accounts by industry and track which ones are in \"Others\"\n  const industryData = useMemo(() => {\n    const grouped = {};\n    accounts.forEach(account => {\n      const industry = account.Industry || ''Unknown'';\n      grouped[industry] = (grouped[industry] || 0) + 1;\n    });\n    \n    // Sort by count and apply max industries limit\n    const sorted = Object.entries(grouped)\n      .sort((a, b) => b[1] - a[1]);\n    \n    let industries = sorted;\n    let othersCount = 0;\n    let othersIndustries = []; // Track which industries are grouped into Others\n    \n    if (showOthers && sorted.length > maxIndustries) {\n      industries = sorted.slice(0, maxIndustries - 1);\n      const othersItems = sorted.slice(maxIndustries - 1);\n      othersCount = othersItems.reduce((sum, [_, count]) => sum + count, 0);\n      othersIndustries = othersItems.map(([industry]) => industry);\n      if (othersCount > 0) {\n        industries.push([''Others'', othersCount]);\n      }\n    }\n    \n    return {\n      labels: industries.map(([industry]) => industry),\n      data: industries.map(([_, count]) => count),\n      percentages: industries.map(([_, count]) => \n        ((count / accounts.length) * 100).toFixed(1)\n      ),\n      total: accounts.length,\n      othersIndustries // Include this for filtering\n    };\n  }, [accounts, maxIndustries, showOthers]);\n  \n  // Handle pie slice click\n  const handleSliceClick = (industry) => {\n    const newSelection = selectedIndustry === industry ? null : industry;\n    setSelectedIndustry(newSelection);\n    setCurrentPage(1);\n    \n    if (onSaveUserSettings) {\n      onSaveUserSettings({ \n        ...savedUserSettings, \n        selectedIndustry: newSelection \n      });\n    }\n  };\n  \n  // Filter and sort accounts\n  const displayAccounts = useMemo(() => {\n    let filtered = [];\n    \n    if (selectedIndustry) {\n      if (selectedIndustry === ''Others'') {\n        // For \"Others\", show accounts from industries grouped into Others\n        filtered = accounts.filter(a => {\n          const industry = a.Industry || ''Unknown'';\n          return industryData.othersIndustries.includes(industry);\n        });\n      } else {\n        // Normal filtering for specific industry\n        filtered = accounts.filter(a => (a.Industry || ''Unknown'') === selectedIndustry);\n      }\n    }\n    \n    // Apply sorting\n    if (filtered.length > 0 && sortConfig.field) {\n      filtered.sort((a, b) => {\n        const aVal = a[sortConfig.field];\n        const bVal = b[sortConfig.field];\n        \n        if (aVal === null || aVal === undefined) return 1;\n        if (bVal === null || bVal === undefined) return -1;\n        \n        const comparison = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n        return sortConfig.direction === ''asc'' ? comparison : -comparison;\n      });\n    }\n    \n    return filtered;\n  }, [accounts, selectedIndustry, sortConfig, industryData.othersIndustries]);\n  \n  // Handle sort\n  const handleSort = (field) => {\n    const newDirection = \n      sortConfig.field === field && sortConfig.direction === ''asc'' ? ''desc'' : ''asc'';\n    const newConfig = { field, direction: newDirection };\n    setSortConfig(newConfig);\n    \n    if (onSaveUserSettings) {\n      onSaveUserSettings({ \n        ...savedUserSettings, \n        sortConfig: newConfig \n      });\n    }\n  };\n  \n  // Handle account selection\n  const handleAccountClick = (account) => {\n    setSelectedAccount(account);\n    setShowDetails(true);\n  };\n  \n  // Handle open record\n  const handleOpenRecord = () => {\n    if (callbacks?.OpenEntityRecord && selectedAccount) {\n      // Pass entity name and key-value pair for the primary key\n      callbacks.OpenEntityRecord(''Accounts'', [\n        { FieldName: ''ID'', Value: selectedAccount.ID }\n      ]);\n    }\n  };\n  \n  // Handle clear filter\n  const handleClearFilter = () => {\n    handleSliceClick(selectedIndustry);\n  };\n  \n  // Render loading state\n  if (loading) {\n    return (\n      <div style={{\n        display: ''flex'',\n        flexDirection: ''column'',\n        justifyContent: ''center'',\n        alignItems: ''center'',\n        height: ''400px'',\n        gap: ''16px''\n      }}>\n        <div style={{\n          width: ''48px'',\n          height: ''48px'',\n          border: ''4px solid #E5E7EB'',\n          borderTop: ''4px solid #3B82F6'',\n          borderRadius: ''50%'',\n          animation: ''spin 1s linear infinite''\n        }} />\n        <div style={{\n          fontSize: ''16px'',\n          color: ''#6B7280'',\n          fontWeight: ''500''\n        }}>\n          Loading accounts data...\n        </div>\n        <style>{`\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        `}</style>\n      </div>\n    );\n  }\n  \n  // Render empty state\n  if (accounts.length === 0) {\n    return (\n      <div style={{\n        display: ''flex'',\n        flexDirection: ''column'',\n        alignItems: ''center'',\n        justifyContent: ''center'',\n        height: ''400px'',\n        color: ''#6B7280''\n      }}>\n        <div style={{ fontSize: ''48px'', marginBottom: ''16px'' }}>📊</div>\n        <div style={{ fontSize: ''18px'', fontWeight: ''600'' }}>No Accounts Found</div>\n        <div style={{ fontSize: ''14px'', marginTop: ''8px'' }}>No active accounts available to display</div>\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{ padding: ''24px'', backgroundColor: ''#fff'', borderRadius: ''8px'' }}>\n      {/* Header */}\n      <div style={{ marginBottom: ''24px'' }}>\n        <h2 style={{ fontSize: ''24px'', fontWeight: ''700'', color: ''#111827'', marginBottom: ''8px'' }}>\n          📊 Accounts by Industry\n        </h2>\n        <div style={{ fontSize: ''14px'', color: ''#6B7280'' }}>\n          Total: {accounts.length} accounts across {industryData.labels.length} industries\n        </div>\n      </div>\n      \n      {/* Chart Container */}\n      <div style={{ height: ''400px'', marginBottom: ''32px'', position: ''relative'' }}>\n        {AccountsByIndustryChart && (\n          <AccountsByIndustryChart\n            industryData={industryData}\n            selectedIndustry={selectedIndustry}\n            onSliceClick={handleSliceClick}\n            colorScheme={colorScheme}\n          />\n        )}\n      </div>\n      \n      {/* Account List */}\n      {AccountsByIndustryList && ( \n        <AccountsByIndustryList\n          accounts={displayAccounts}\n          selectedIndustry={selectedIndustry}\n          sortConfig={sortConfig}\n          onSort={handleSort}\n          onAccountClick={handleAccountClick}\n          currentPage={currentPage}\n          pageSize={pageSize}\n          onPageChange={setCurrentPage}\n          onClearFilter={handleClearFilter}\n        />\n      )}\n      \n      {/* Detail Panel */}\n      {AccountsByIndustryDetails && (\n        <AccountsByIndustryDetails\n          account={selectedAccount}\n          isOpen={showDetails}\n          onClose={() => setShowDetails(false)}\n          onOpenRecord={handleOpenRecord}\n        />\n      )}\n    </div>\n  );\n}"}'
SET
  @FunctionalRequirements_edadc0e3 = N'## Accounts by Industry Dashboard

### Core Functionality
- Display an interactive pie chart showing account distribution across industries
- Calculate and show percentages for each industry segment
- Support click-to-filter: clicking a pie slice filters the account list below
- Display filtered account list with key information (name, revenue, status)
- Enable row selection to view detailed account information in a slide-in panel
- Provide sorting capabilities on all columns (client-side)
- Implement pagination for large datasets (server-side via RunView)
- Include an ''Open'' button on account details to trigger OpenEntityRecord callback
- Remember user''s last selected industry and sort preferences

### Visual Features
- Smooth hover animations on pie slices with tooltips
- Highlighted state for selected pie slice
- Color-coded legend with industry names and counts
- Responsive layout adapting to different screen sizes
- Loading states during data fetching
- Empty states with helpful messages
- Smooth slide-in animation for detail panel

### Interactive Elements
- Click pie slice to select/deselect and filter accounts
- Click legend items to toggle slice visibility
- Sort columns by clicking headers
- Select account rows to view details
- Close detail panel via X button or clicking outside
- Pagination controls for navigating large datasets'
SET
  @TechnicalDesign_edadc0e3 = N'## Technical Architecture

### Component Structure
- **Root Component (AccountsByIndustry)**: Manages overall state and data loading
- **PieChart (inline)**: Chart.js-based interactive pie visualization
- **AccountList (inline)**: Filtered, sortable table with pagination
- **AccountDetails (inline)**: Sliding panel with comprehensive account info

### State Management
- Selected industry (persisted in savedUserSettings)
- Sort configuration (field, direction) (persisted)
- Current page number
- Selected account ID
- Detail panel visibility
- Loading states for async operations

### Data Flow
1. Load all accounts via RunView on mount
2. Group accounts by Industry field client-side
3. Calculate percentages and prepare chart data
4. Render pie chart with Chart.js
5. Filter account list based on selected slice
6. Load account details when row selected
7. Persist user preferences via onSaveUserSettings

### Layout Design
```
+-----------------------------------------------+
|  📊 Accounts by Industry                     |
|  ─────────────────────────                   |
|                                               |
|     [Interactive Pie Chart]    [Legend]      |
|                                               |
+-----------------------------------------------+
|  Selected: Technology (12 accounts)          | ← Conditional
|  ─────────────────────────────────           |
|  Name ↕ | Revenue ↕ | Status | Type          |
|  ─────────────────────────────────           |
|  TechNova | $12.5M | Active | Customer   [>] |
|  Quantum  | $75M   | Active | Customer   [>] |
|  ─────────────────────────────────           |
|  < 1 2 3 ... 5 >                             |
+-----------------------------------------------+
                          ← Slide-in Panel
                    ┌─────────────────────┐
                    │ Account Details  [X] │
                    │ ──────────────       │
                    │ Name: TechNova       │
                    │ Revenue: $12.5M      │
                    │ [Open Record ↗]      │
                    └─────────────────────┘
```

### Performance Optimizations
- Use React.memo for chart component
- Implement useMemo for data grouping
- Client-side filtering/sorting to reduce server calls
- Debounced search if implemented
- Virtual scrolling for very large lists (future)'
SET
  @FunctionalRequirementsVector_edadc0e3 = N'[-0.019319409504532814,0.04795888811349869,-0.04260315001010895,-0.018982525914907455,0.02398168295621872,0.008414819836616516,0.03901926055550575,0.02139986678957939,-0.043374743312597275,-0.0051513127982616425,-0.029641728848218918,0.03732750192284584,0.03939017653465271,0.1676231473684311,0.03634314239025116,-0.03593766316771507,-0.059790778905153275,0.0403984859585762,0.01616419479250908,0.005654404871165752,0.0037086743395775557,-0.003213422140106559,-0.007317093200981617,-0.024911487475037575,0.028483223170042038,-0.009655909612774849,-0.0071228803135454655,0.04052677005529404,0.014535502530634403,-0.04761875793337822,0.01476282812654972,-0.018631640821695328,-0.0494832806289196,-0.006224125623703003,0.0000024851342459442094,-0.03322674334049225,-0.04570990428328514,0.009089061990380287,-0.05251971632242203,0.04405276104807854,0.025261424481868744,-0.016027122735977173,0.050281938165426254,-0.02282612770795822,0.016873454675078392,-0.012992790900170803,-0.02424430102109909,0.03108322061598301,0.026864981278777122,-0.05587495118379593,-0.006381387822329998,-0.05527794361114502,-0.09627079218626022,0.000052480765589280054,-0.02207017131149769,0.019922375679016113,0.01977711357176304,-0.007374085485935211,0.041005939245224,-0.05142474174499512,-0.041114091873168945,0.014120856299996376,0.030795283615589142,-0.002871160628274083,0.055232204496860504,0.06739213317632675,-0.010638468898832798,-0.0877622589468956,0.0011170388897880912,0.009854763746261597,0.06594761461019516,-0.004940332379192114,-0.0059000179171562195,-0.04364911466836929,-0.03803995996713638,0.0021715592592954636,-0.03154484182596207,0.0184490904211998,0.013841412961483002,0.0046419911086559296,-0.05613548681139946,0.04204923287034035,-0.03622598573565483,-0.006493518594652414,-0.005625206045806408,-0.038920119404792786,-0.04130837693810463,-0.01676800847053528,-0.01675516366958618,-0.015483438037335873,0.040910229086875916,-0.005373919382691383,0.00866795051842928,-0.003189878771081567,-0.017838716506958008,-0.03409895300865173,0.053518880158662796,-0.004101383965462446,0.04091087728738785,0.020378705114126205,0.016552111133933067,0.047054339200258255,-0.051931336522102356,0.011638914234936237,0.04629626125097275,0.03443097323179245,-0.0247315876185894,-0.039880234748125076,0.011256249621510506,0.01725194603204727,0.023304851725697517,-0.006031210999935865,-0.0014399202773347497,0.03055013343691826,-0.016154740005731583,0.04070902615785599,-0.05663498863577843,0.0037886747159063816,-0.017904022708535194,0.040941204875707626,0.12174201756715775,0.022221338003873825,0.07124312967061996,0.03944285213947296,0.012791859917342663,0.023844415321946144,-0.059263188391923904,-0.008941435255110264,-0.011397356167435646,-0.027623478323221207,-0.013893024064600468,0.02314937487244606,0.016295302659273148,-0.01968599483370781,0.030368410050868988,-0.024668673053383827,0.039073728024959564,0.00469169719144702,-0.0392569936811924,-0.003512786002829671,-0.004327002447098494,0.005627538543194532,-0.0696767196059227,0.0022237980738282204,0.0313187837600708,0.004349432419985533,-0.01230241172015667,0.046678222715854645,0.0026518383529037237,0.009805052541196346,-0.048149555921554565,-0.05600350350141525,-0.016733158379793167,0.025438841432332993,0.0016799857839941978,0.0024672765284776688,0.05699317157268524,0.01726444438099861,0.02378050424158573,0.005898269359022379,0.027789205312728882,0.014419779181480408,0.01769503392279148,-0.012622746638953686,-0.027563516050577164,0.017309928312897682,-0.03459231182932854,0.01805073767900467,-0.12402737140655518,-0.05005038157105446,-0.03256886079907417,-0.01364374253898859,-0.04465324804186821,-0.01745293103158474,0.037717439234256744,0.004500409122556448,0.09201431274414062,-0.022323040291666985,-0.02399982325732708,-0.0023053144104778767,0.02536175772547722,-0.10280006378889084,0.039457567036151886,0.033378034830093384,0.0648268610239029,-0.01399756595492363,-0.015286755748093128,0.05036322399973869,-0.0154254836961627,-0.0005611955421045423,-0.00446620536968112,0.01607576385140419,-0.08668766170740128,0.06403502076864243,0.007632983848452568,0.0077838050201535225,0.018430037423968315,-0.04299177974462509,0.016214722767472267,-0.010975933633744717,0.004088916350156069,-0.047427646815776825,0.03712807223200798,0.04694179445505142,0.01052229292690754,0.006400142330676317,-0.013753492385149002,-0.034500930458307266,0.012830485589802265,0.005087083671241999,0.03799053281545639,0.014059866778552532,-0.009047002531588078,0.012749258428812027,-0.019046002998948097,0.027397947385907173,0.017983809113502502,0.005523236934095621,-0.01031685434281826,-0.0009788916213437915,-0.05360255762934685,0.014630288816988468,0.024825699627399445,-0.020401116460561752,0.040016938000917435,0.05072101578116417,0.017211487516760826,0.033088963478803635,0.018704276531934738,0.03569765388965607,0.0007627459126524627,-0.027003541588783264,0.04901307448744774,0.0234689861536026,0.015080160461366177,0.03282937780022621,0.06980660557746887,0.10553812235593796,-0.01697407104074955,0.021647637709975243,0.03591221198439598,-0.04698607325553894,-0.019164305180311203,0.0203061755746603,-0.0062583512626588345,0.015239338390529156,-0.02681087888777256,0.0047709764912724495,-0.011639637872576714,-0.010108661837875843,0.030729738995432854,0.014653587713837624,0.06238351762294769,-0.023099606856703758,0.006648186594247818,-0.02073482982814312,-0.039056360721588135,-0.03113323450088501,-0.0737868919968605,0.10027274489402771,0.007893571630120277,-0.0215107724070549,-0.024127988144755363,-0.034047119319438934,0.023117758333683014,-0.028552286326885223,0.07763053476810455,-0.04336641728878021,-0.02221587486565113,0.017688395455479622,-0.016633274033665657,0.05368378013372421,0.06272094696760178,-0.03396032005548477,-0.007897485978901386,0.030534083023667336,-0.06019701808691025,0.049201615154743195,-0.01977361924946308,0.005725399125367403,0.0006223052041605115,-0.01693795807659626,0.005583676975220442,0.049049485474824905,-0.006410596426576376,-0.02235451526939869,0.020738903433084488,-0.07009521871805191,0.03235115855932236,-0.0844380110502243,0.02322418801486492,-0.01725122332572937,0.018401602283120155,-0.011010720394551754,-0.0476686954498291,0.019764235243201256,-0.025644058361649513,0.02710796520113945,-0.04762610048055649,0.05862618237733841,-0.052529264241456985,0.0010149209992960095,0.01811617612838745,0.0077521223574876785,0.006255922839045525,0.07394105195999146,0.052261095494031906,-0.005785467568784952,0.019694004207849503,0.03416059538722038,0.019077787175774574,0.011675533838570118,0.013536975719034672,0.013494418002665043,0.034920960664749146,-0.006062747444957495,0.008807409554719925,0.010860605165362358,0.002984949853271246,0.05956854671239853,0.020456310361623764,0.023719849064946175,-0.030539851635694504,-0.004129540175199509,-0.04113244265317917,0.02641342021524906,-0.087211012840271,-0.0003692556929308921,0.002336544916033745,-0.0035932345781475306,-0.00266702170483768,-0.020455919206142426,-0.004839148372411728,0.01579526625573635,0.015698106959462166,-0.0122480858117342,-0.01745075359940529,-0.0032560711260885,0.038404956459999084,-0.03856474161148071,-0.020776666700839996,0.0052406806498765945,-0.030103936791419983,-0.05570804700255394,-0.0042226435616612434,-0.01672879047691822,0.01947382278740406,-0.003952579107135534,-0.06054677069187164,0.007942024618387222,0.0685320794582367,0.05876690521836281,-0.00831684935837984,-0.022279076278209686,0.053210631012916565,-0.03450125455856323,-0.049164775758981705,0.06338497251272202,-0.052954718470573425,-0.026145173236727715,0.05744066461920738,0.013440580107271671,0.021632041782140732,0.03599104285240173,0.024081846699118614,0.034509774297475815,0.004378512501716614,-0.01863635703921318,0.0046947915107011795,-0.02645179070532322,-0.03424298018217087,0.02762344665825367,0.007820541970431805,0.003833523252978921,-0.016395797953009605,0.004258285742253065,0.006128195207566023,0.04084499925374985,-0.05532221868634224,0.029321735724806786,0.06365683674812317,-0.04458076134324074,0.060237497091293335,-0.01525319367647171,0.06469593197107315,-0.012712255120277405,-0.05800823122262955,-0.03493909165263176,-0.010663987137377262,0.02728615701198578,-0.025748679414391518,0.0003570449771359563,-0.06835728138685226,-0.033820848912000656,-0.006254567764699459,-0.04984288662672043,-0.03872513025999069,0.029074473306536674,-0.007879665121436119,-0.001086842967197299,-0.010369367897510529,-0.006345051806420088,-0.021130498498678207,-0.030715016648173332,-0.000796166539657861,-0.07840241491794586,0.06386291235685349,0.05738520994782448,-0.0022104207891970873,-0.005987075623124838,-0.07987721264362335,-0.013868275098502636,-0.01846187561750412,-0.04135249927639961,0.034687455743551254,-0.013649828732013702,-0.025607002899050713,0.011651871725916862,0.021492762491106987,0.06701425462961197,0.022223401814699173,0.007274886593222618,-0.041817691177129745,-0.007121012080460787,0.04764168709516525,0.010407946072518826,0.024665115401148796,-0.03349417820572853,0.006485476158559322,0.03654566407203674,-0.0070248981937766075,0.007579628378152847,-0.04100584611296654,-0.02889411523938179,-0.055331215262413025,0.010854803025722504,0.07251331955194473,0.007281544618308544,-0.028687721118330956,-0.014484279789030552,-0.010520892217755318,0.003296877723187208,0.0337572805583477,-0.008178496733307838,-0.021561767905950546,0.016014190390706062,0.012394198216497898,0.05329091474413872,-0.11833535134792328,-0.05268006771802902,0.020777806639671326,-0.015501309186220169,-0.01930837891995907,0.01405915804207325,-0.040925394743680954,-0.023773130029439926,-0.021826671436429024,-0.0013081987854093313,0.016927875578403473,0.01619681902229786,0.016803057864308357,0.03165396302938461,-0.05248807743191719,0.0011176618281751871,0.03620533272624016,0.043506473302841187,0.06036399304866791,-0.08411925286054611,-0.035528093576431274,-0.07353951036930084,0.06510981917381287,0.0040353164076805115,-0.012864142656326294,-0.042418986558914185,-0.032007839530706406,-0.0049448031932115555,-0.0006940606399439275,-0.02219996228814125,0.02658960595726967,-0.03562784567475319,0.04641382396221161,0.0020384567324072123,0.03985905647277832,-0.056362878531217575,0.01681467331945896,0.03964371234178543,-0.03496450558304787,-0.011600418947637081,-0.0202750526368618,-0.04196610301733017,0.04977953061461449,0.03399304673075676,0.008125312626361847,0.07120281457901001,0.03264153003692627,0.0022147472482174635,-0.11739344149827957,0.030110707506537437,-0.04992697387933731,-0.008987774141132832,-0.052956368774175644,0.005137427244335413,-0.003243304556235671,-0.04933889955282211,0.0028031545225530863,0.03323836252093315,0.021829653531312943,0.02060256525874138,-0.0476236566901207,0.01504406426101923,-0.0005997351254336536,-0.006834949366748333,-0.037288062274456024,-0.03748011216521263,0.059590499848127365,0.027460822835564613,-0.06296402961015701,-0.022534767165780067,0.02009044587612152,-0.03141338378190994,-0.006795603781938553,0.0033742350060492754,0.0016643961425870657,0.01580844260752201,0.009473121725022793,-0.044135577976703644,0.021283695474267006,-0.0234194528311491,-0.04296685382723808,0.06492117047309875,0.03420896455645561,-0.0392032265663147,-0.05447456240653992,-0.03498731553554535,-0.03727592155337334,0.0518873929977417,0.07160907238721848,0.03923500329256058,-0.02570413611829281,0.00544736860319972,-0.06361573934555054,0.01537376455962658,-0.005201730411499739,-0.04270642623305321,0.024686206132173538,-0.024581873789429665,-0.009187277406454086,-0.03887864947319031,0.019497500732541084,0.04182714223861694,-0.014292723499238491,-0.063478022813797,-0.04149145632982254,0.007636339403688908,-0.015283741988241673,-7.622698829418517e-33,-0.03446340188384056,-0.0029487789142876863,-0.03013703227043152,0.012848041951656342,-0.00638731149956584,-0.03331935033202171,0.03467269241809845,-0.06325474381446838,-0.031960200518369675,-0.044401515275239944,-0.016715310513973236,0.007926645688712597,0.02138569951057434,0.012520489282906055,0.009799516759812832,-0.028782950714230537,0.0073776342906057835,-0.0025075096637010574,-0.009821613319218159,-0.010910343378782272,-0.04828188568353653,0.023025555536150932,-0.016408590599894524,-0.03884945064783096,-0.009061506018042564,0.010055688209831715,-0.007593894377350807,0.009166239760816097,-0.03268241137266159,0.035117436200380325,0.012627111747860909,-0.022012455388903618,-0.027818450704216957,-0.0006471353699453175,0.011129827238619328,-0.01697472110390663,-0.04093411564826965,-0.046231552958488464,0.02596425451338291,0.028177881613373756,0.06211487203836441,0.035975173115730286,0.07370287925004959,-0.002949325367808342,0.017833001911640167,-0.029491644352674484,0.011492518708109856,-0.005697672255337238,0.008951987139880657,-0.028977835550904274,0.029920708388090134,-0.014877085573971272,-0.0019764944445341825,0.05429144576191902,0.017204269766807556,0.0932120829820633,0.0024418034590780735,0.0425412654876709,-0.11961407214403152,-0.018095936626195908,-0.003608850995078683,-0.07199995964765549,-0.0047521148808300495,0.049472663551568985,0.05075506120920181,-0.008370770141482353,0.03184651955962181,-0.016647202894091606,-0.04516799747943878,-0.01734825223684311,-0.028294168412685394,-0.00862477719783783,-0.029903164133429527,-0.08940346539020538,-0.044928278774023056,-0.022266259416937828,-0.02805347554385662,0.009306705556809902,0.04410586133599281,0.015816908329725266,0.019394533708691597,0.0030451591592282057,0.01519226748496294,-0.015459015034139156,0.06789290904998779,-0.05297163873910904,-0.02951124683022499,-0.00019198449444957078,0.04436666518449783,0.05118490755558014,0.0036148533690720797,0.08065534383058548,-0.059135500341653824,-0.0001586833386681974,-0.04671153426170349,-0.010271289385855198,0.07273302227258682,-0.00226909713819623,0.014829893596470356,-0.07521919161081314,0.026007676497101784,0.028476452454924583,-0.07055789977312088,0.02177090011537075,-0.009784354828298092,-0.021239539608359337,0.04002769663929939,0.0037550069391727448,-0.05702212080359459,0.021822942420840263,0.03573404997587204,0.01879374124109745,-0.004545408766716719,0.015037680976092815,-0.009466403163969517,0.017717270180583,-0.013987266458570957,-0.03172023966908455,0.04556296765804291,-0.004792230669409037,0.023597944527864456,-0.0344352126121521,-0.03591660037636757,-0.017026934772729874,0.019405998289585114,-0.028578177094459534,0.006513512227684259,-0.012905324809253216,0.024455316364765167,-0.011468056589365005,-0.010381232015788555,-0.014080663211643696,3.339314673667104e-7,0.0279553085565567,-0.011645802296698093,-0.04411010816693306,-0.0024685964453965425,0.022929318249225616,-0.03731030225753784,-0.04411650076508522,-0.05621105059981346,0.00816928967833519,-0.018089180812239647,0.03709042817354202,0.016707800328731537,0.0331069678068161,0.034467875957489014,-0.028376106172800064,-0.013797296211123466,0.007489406503736973,-0.0426679328083992,-0.019049473106861115,0.02454914152622223,0.052960336208343506,0.003802996827289462,0.0714440569281578,0.014908626675605774,0.041950855404138565,-0.0018614904256537557,-0.01961286924779415,-0.02553226239979267,0.05546164512634277,-0.03527752682566643,0.005808638874441385,0.049808673560619354,-0.02835642173886299,-0.01524953544139862,0.001497271005064249,0.024078721180558205,-0.014798784628510475,-0.0029421914368867874,0.030538495630025864,0.11574447154998779,0.03643064945936203,-0.032173290848731995,0.010260925628244877,-0.0675288513302803,-0.01626523584127426,-0.057949312031269073,0.0023981856647878885,0.06296512484550476,0.004752356559038162,0.03586649149656296,0.042923953384160995,0.009186699986457825,-0.03450867161154747,-0.032833702862262726,0.04039452597498894,-0.03372008726000786,-0.015327060595154762,0.05256212130188942,0.01438642293214798,0.07425378262996674,-0.008911531418561935,0.008729728870093822,-0.01907295361161232,0.023631831631064415,0.023765236139297485,0.01985095627605915,-0.027056392282247543,3.970822672142572e-34,-0.014755125157535076,0.00593480933457613,0.04536028951406479,-0.0019073873991146684,0.010938323102891445,-0.03816968575119972,0.031973812729120255,0.01155988872051239,0.01766505464911461,-0.013305720873177052,-0.008820443414151669]'
SET
  @TechnicalDesignVector_edadc0e3 = N'[-0.021788790822029114,0.06913792341947556,-0.044966328889131546,0.0005848308210261166,0.0230046845972538,-0.018314845860004425,0.0041208695620298386,0.03700583800673485,-0.04926874116063118,-0.0030246111564338207,-0.027283603325486183,-0.00850958563387394,0.06317394226789474,0.09989039599895477,-0.006264090072363615,0.004756918642669916,-0.007030722685158253,0.05812028795480728,0.03978504240512848,-0.02526664547622204,0.003649272723123431,-0.013120317831635475,0.035243306308984756,-0.04331456869840622,0.048601556569337845,-0.040251392871141434,-0.004929015412926674,0.03975270688533783,0.02926582470536232,-0.06401558220386505,-0.004714213777333498,-0.005115185398608446,-0.07362475246191025,-0.008426173590123653,0.0000024070234303508187,-0.027880726382136345,-0.04352383688092232,-0.002848544856533408,-0.03234576806426048,0.008720709942281246,-0.014055561274290085,-0.034003645181655884,0.03341813012957573,-0.017131688073277473,0.0011426134733483195,-0.021863091737031937,-0.05376514419913292,0.004101047292351723,0.013104526326060295,-0.05773593485355377,-0.01163532491773367,-0.03524736315011978,-0.08024880290031433,0.0033787887077778578,-0.013878119178116322,0.03168576583266258,0.01362563855946064,-0.0280696302652359,0.05067138746380806,-0.06811988353729248,-0.06028563529253006,0.009631339460611343,0.033460792154073715,-0.00163270381744951,0.04171709343791008,0.03152818977832794,0.023477628827095032,-0.032964013516902924,0.00246341060847044,-0.004914456978440285,0.016428980976343155,0.006691183894872665,0.011182446032762527,-0.029719209298491478,-0.07996325939893723,0.016259878873825073,-0.012400400824844837,-0.008232338353991508,-0.029725687578320503,-0.012949378229677677,0.02191389538347721,0.02933369018137455,-0.026395078748464584,0.009228246286511421,-0.0008702679187990725,-0.0479232519865036,-0.03509946167469025,-0.019469358026981354,-0.0023064117413014174,-0.027181513607501984,0.007023165002465248,-0.05100206658244133,0.02943655475974083,0.012963672168552876,-0.03140929341316223,-0.007877042517066002,0.013302086852490902,-0.004437003750354052,0.04233777895569801,-0.02697686292231083,0.02554449625313282,0.06537343561649323,-0.002086926018819213,-0.007099785376340151,0.06906969845294952,0.04109303653240204,-0.009083840996026993,-0.060810867697000504,-0.00022582891688216478,0.02973797917366028,-0.007079748902469873,0.023770226165652275,0.04232567176222801,0.025390326976776123,0.015673348680138588,0.010181048884987831,-0.06540827453136444,0.00031807864434085786,-0.008462565951049328,0.05162310227751732,0.09590964764356613,0.007146057207137346,0.019715894013643265,0.0470396913588047,0.03549247607588768,0.06494356691837311,-0.0004088413843419403,-0.06135738641023636,-0.031172126531600952,0.04329115152359009,-0.004393898881971836,-0.009000624530017376,0.01953085884451866,0.02933623269200325,0.019023049622774124,0.004459915682673454,0.012501068413257599,0.019246963784098625,-0.024132026359438896,-0.03380992263555527,-0.013949341140687466,-0.01080312766134739,-0.012726248241961002,0.01621006429195404,0.01925603486597538,-0.02027837559580803,0.041558217257261276,0.0000018470872191755916,-0.0124448761343956,0.021555548533797264,0.009964223951101303,0.017235415056347847,0.03083358146250248,0.028026212006807327,-0.03207029029726982,0.030925098806619644,0.04241880029439926,0.026711691170930862,0.1143798753619194,-0.006033971905708313,0.018784262239933014,0.047146763652563095,0.005548163317143917,-0.01248444989323616,-0.013582536019384861,0.04921049252152443,-0.006191989406943321,-0.03248608112335205,-0.09756098687648773,-0.042360130697488785,-0.06217363104224205,-0.01814023032784462,-0.017849992960691452,0.020560847595334053,0.02095780521631241,0.00017896320787258446,0.04792241379618645,-0.0426371768116951,-0.051533039659261703,-0.034747399389743805,-0.006996004842221737,-0.02138219028711319,0.018209712579846382,0.01779964007437229,0.051290642470121384,-0.032624129205942154,-0.003212391398847103,0.05302542448043823,0.010750824585556984,-0.011916101910173893,0.006845640949904919,0.0054274071007966995,-0.05536626651883125,0.043086275458335876,-0.004321314860135317,0.03703293204307556,0.009096854366362095,-0.058712489902973175,-0.0024464891757816076,0.028380155563354492,0.03265180438756943,-0.04276315122842789,0.059946440160274506,0.04333706945180893,0.014754129573702812,0.008732916787266731,-0.09547659754753113,0.016264574602246284,-0.0070656901225447655,-0.04324445500969887,0.013868873007595539,-0.013687022030353546,-0.0027993316762149334,0.033539142459630966,-0.024593697860836983,0.05495433136820793,0.017222033813595772,-0.00019126282131765038,0.0009774076752364635,-0.005129522178322077,-0.036095425486564636,-0.01685524545609951,0.048583630472421646,-0.01698005199432373,0.035155557096004486,0.0337783619761467,0.041914667934179306,-0.0018757055513560772,0.04964137822389603,0.0007875392911955714,0.024058831855654716,-0.018694771453738213,0.020597945898771286,0.009660527110099792,0.015555718913674355,0.052068307995796204,-0.003620504168793559,0.01736702211201191,-0.02036784403026104,0.041075486689805984,0.041147828102111816,-0.058990228921175,-0.0363648422062397,-0.004647959489375353,-0.041599370539188385,0.011271540075540543,-0.04567334055900574,0.049666810780763626,-0.0030939436983317137,0.011124007403850555,0.012295040301978588,0.010979283601045609,0.03224249184131622,-0.04105629771947861,-0.029452504590153694,-0.03889749199151993,0.020500268787145615,0.001719413441605866,-0.03598623350262642,0.060748957097530365,0.025203857570886612,0.022722406312823296,-0.015039912424981594,-0.023290831595659256,0.0488472543656826,-0.031893324106931686,0.06045885384082794,-0.012052983045578003,-0.011779332533478737,0.03391402214765549,-0.016629386693239212,0.033515576273202896,0.07790734618902206,-0.018099818378686905,0.007473981007933617,0.024269970133900642,-0.019911447539925575,0.08242642879486084,-0.02500092051923275,-0.03239096328616142,-0.03927290439605713,-0.0152788320556283,0.0183130893856287,0.05709599703550339,-0.02012813650071621,-0.03891350328922272,0.036056794226169586,-0.008895616978406906,0.023046230897307396,-0.050745297223329544,-0.007502508349716663,-0.009064283221960068,0.008546000346541405,-0.03502199053764343,-0.049261607229709625,0.019932186231017113,0.007966408506035805,0.04063444584608078,-0.058794669806957245,0.016859296709299088,-0.03597092255949974,-0.013946968130767345,0.02952422946691513,-0.031460776925086975,0.009276234544813633,0.03263401985168457,0.04278336465358734,-0.0016186352586373687,0.012756360694766045,0.031370192766189575,-0.0075176553800702095,0.035370342433452606,0.0035958855878561735,-0.028124937787652016,-0.008109469898045063,0.04185028746724129,0.019917313009500504,-0.013553778640925884,0.02356072887778282,0.07770857959985733,0.014436131343245506,-0.004896739963442087,0.018608171492815018,-0.011832679621875286,-0.02543647028505802,-0.007762368302792311,-0.06993812322616577,-0.0049458760768175125,0.04129348322749138,0.03518090397119522,-0.003936178516596556,-0.0035032890737056732,0.025402165949344635,-0.038585253059864044,0.03312662988901138,-0.03934831544756889,-0.020326247438788414,-0.029358727857470512,0.011126615107059479,-0.019808515906333923,0.015920456498861313,-0.012381752952933311,-0.027064070105552673,-0.006890896707773209,0.021045992150902748,-0.03204863518476486,-0.0008655054843984544,-0.04713740572333336,0.004068745765835047,-0.010071111842989922,0.0151615459471941,0.06440437585115433,0.010589792393147945,-0.020481646060943604,0.0042327819392085075,0.008453491143882275,-0.014333193190395832,0.05209185928106308,-0.0395551361143589,-0.032362788915634155,0.030774759128689766,0.07028122246265411,0.11283096671104431,0.01968473009765148,0.002496646950021386,0.03006763942539692,0.008222421631217003,-0.019135205075144768,-0.011382290162146091,-0.03288375586271286,-0.040754564106464386,0.003483777167275548,-0.011305220425128937,0.006185515318065882,-0.017071131616830826,0.013980370946228504,0.036613184958696365,0.05503993108868599,-0.0367509089410305,-0.007963909767568111,0.04715176299214363,-0.038781676441431046,0.06680139899253845,0.006159746553748846,0.0629262775182724,-0.033618710935115814,0.020792264491319656,-0.06103871390223503,0.00009435835818294436,0.005591177381575108,-0.010429320856928825,-0.009686806239187717,-0.038243260234594345,-0.017811067402362823,0.012594103813171387,0.0021027708426117897,-0.018322862684726715,0.0025802473537623882,0.031139083206653595,-0.010691001079976559,-0.041833557188510895,0.04872431233525276,-0.009949001483619213,0.030304046347737312,0.004384513944387436,-0.07144055515527725,0.04172906279563904,0.061890747398138046,0.03374091163277626,0.022428158670663834,-0.030349738895893097,-0.014755679294466972,-0.04422060400247574,-0.05054435506463051,0.003104827366769314,-0.02414218708872795,-0.014016705565154552,-0.0281041469424963,-0.0008497976814396679,0.017928192391991615,-0.04906310886144638,0.038803085684776306,-0.03967277705669403,-0.0417616069316864,0.056389957666397095,0.0018996301805600524,0.0391756035387516,-0.02274913899600506,-0.02359659969806671,0.0016469706315547228,-0.05617920309305191,0.011616223491728306,0.028007209300994873,0.015688646584749222,-0.022639993578195572,0.019164839759469032,0.035775359719991684,0.015112454071640968,-0.003598072100430727,-0.037657205015420914,0.005009257234632969,-0.05187608674168587,0.07615219801664352,0.03322044387459755,0.013994532637298107,0.06595882773399353,-0.013499357737600803,0.08252870291471481,-0.07328081876039505,-0.05351187288761139,0.010226046666502953,0.002378363162279129,-0.006099696271121502,-0.03537377715110779,-0.035823266953229904,-0.02019679732620716,-0.05575506389141083,0.025216510519385338,0.024010375142097473,0.02257750742137432,0.011161520145833492,0.04649830982089043,-0.023526683449745178,-0.009269689209759235,0.04198882728815079,0.025014063343405724,0.01663866639137268,-0.03188677877187729,-0.022628167644143105,-0.048137202858924866,0.08507103472948074,-0.002036385703831911,-0.01766110584139824,-0.027069702744483948,-0.01329087559133768,-0.021778572350740433,-0.021276261657476425,-0.025454789400100708,-0.013768734410405159,-0.07024553418159485,0.07548931241035461,-0.0017969183390960097,-0.027442490682005882,-0.06860141456127167,0.03433018550276756,0.0002924893342424184,-0.028742775321006775,-0.01534998882561922,0.008582109585404396,-0.05498750880360603,0.015746766701340675,0.03642302751541138,-0.013955806382000446,-0.02734450064599514,0.04278726875782013,-0.011607117019593716,-0.10816850513219833,0.019285181537270546,-0.024658963084220886,-0.022832617163658142,-0.02893763780593872,-0.03460755571722984,0.010824698023498058,-0.004703727085143328,0.015619396232068539,0.0076710376888513565,-0.0298894215375185,0.022396255284547806,-0.04519929364323616,0.0011050304165109992,-0.057722438126802444,-0.016063369810581207,-0.07872369140386581,-0.034355368465185165,0.05926976352930069,0.06015701964497566,-0.06527183204889297,-0.04709673300385475,0.019434643909335136,-0.053054723888635635,0.016931386664509773,0.004633957054466009,-0.01599423959851265,0.03787805885076523,0.020946698263287544,-0.05403731018304825,0.005571423564106226,0.0080241234973073,0.003910548985004425,0.038526006042957306,0.008135354146361351,-0.03400827571749687,-0.05759180709719658,-0.02258254401385784,-0.059012364596128464,0.07088711112737656,-0.002891207579523325,0.03652295470237732,-0.005942688789218664,-0.00112605607137084,-0.07640167325735092,-0.0033515712711960077,0.011483445763587952,-0.02664736472070217,0.03477177396416664,-0.05646521970629692,0.026996251195669174,-0.03757787123322487,0.013421796262264252,0.052571237087249756,0.010984722524881363,-0.03505657985806465,-0.0008676924044266343,-0.02818884886801243,0.019114630296826363,-6.843109506585238e-33,-0.03092103824019432,-0.021360309794545174,-0.027271337807178497,0.030696243047714233,-0.014275383204221725,-0.013982412405312061,0.0074297585524618626,-0.0746706873178482,-0.022087382152676582,-0.06051233410835266,-0.005894836038351059,0.004949399270117283,0.018132705241441727,0.033483654260635376,-0.013933268375694752,-0.04413870722055435,0.015470256097614765,0.022518819198012352,-0.02820056676864624,0.005920784547924995,-0.03272102400660515,-0.009259634651243687,-0.06296715140342712,-0.02010168693959713,0.020384423434734344,0.01309084240347147,-0.01048632524907589,0.01933538354933262,-0.08159030973911285,0.03959052637219429,-0.017799612134695053,0.0011137137189507484,-0.017339838668704033,-0.02715686336159706,0.02082645893096924,0.022223416715860367,-0.013850336894392967,-0.02708989754319191,-0.009850217960774899,0.014704011380672455,0.04618941992521286,0.05840541794896126,0.07383269816637039,-0.006525170989334583,0.0347750149667263,-0.04773987829685211,-0.004447742365300655,0.01204726193100214,0.01848965883255005,-0.004497753456234932,-0.014974846504628658,-0.010958343744277954,0.01987740956246853,0.03339693695306778,-0.014181379228830338,0.09476353973150253,0.024270446971058846,0.08189821988344193,-0.1524527221918106,-0.034344423562288284,-0.055361729115247726,-0.07304326444864273,0.02678527496755123,0.04069233313202858,0.03604007139801979,0.008323583751916885,0.050510894507169724,0.010626607574522495,-0.05704972520470619,-0.039213672280311584,-0.03465401381254196,-0.054625436663627625,-0.007140642032027245,-0.05725212022662163,0.01674913987517357,-0.044828906655311584,-0.0722021535038948,-0.025675397366285324,0.014707346446812153,0.01648196391761303,0.00766008161008358,0.020273596048355103,-0.0009482695022597909,-0.011387491598725319,0.05078858509659767,-0.05499521642923355,0.03013717010617256,0.022147580981254578,-0.0089581198990345,0.010828465223312378,0.025927675887942314,0.03106737695634365,-0.07521498203277588,0.012170292437076569,-0.048478882759809494,-0.023233016952872276,0.09407620131969452,-0.0050522261299192905,-0.003632365260273218,0.0012550844112411141,0.050077393651008606,-0.01795421913266182,-0.06741314381361008,0.0022094326559454203,-0.0031523664947599173,0.007518277503550053,0.026681330054998398,0.030148601159453392,-0.051742903888225555,0.013333960436284542,0.013099297881126404,-0.027287442237138748,-0.053624629974365234,0.0620662122964859,0.04421176761388779,0.05646493658423424,-0.013600935228168964,-0.07927723973989487,0.06619285047054291,0.00987221673130989,-0.010690554976463318,-0.050615545362234116,-0.02229940891265869,0.0014039709931239486,0.01123840268701315,0.019127128645777702,0.010986686684191227,-0.02654138021171093,-0.026814980432391167,-0.03377670422196388,0.013435052707791328,-0.03570393845438957,3.175043445935444e-7,0.02542976289987564,-0.012887267395853996,-0.07106244564056396,-0.04747761785984039,0.008588980883359909,-0.010832025669515133,-0.05976588651537895,-0.0646248608827591,0.001186541048809886,-0.0418759249150753,0.017939331009984016,0.023094503208994865,0.04671856760978699,0.0807097926735878,0.002622980624437332,-0.001452052965760231,0.014779767952859402,-0.004108706954866648,-0.008730136789381504,0.044014886021614075,0.04608352109789848,-0.022113671526312828,0.08216534554958344,-0.017408333718776703,0.03798826411366463,0.04123658314347267,-0.03326382860541344,-0.02775687724351883,0.003573436988517642,-0.07257047295570374,-0.05365201458334923,0.016963092610239983,0.0035184312146157026,0.007140025496482849,-0.005429022945463657,0.030130207538604736,-0.006205420475453138,-0.02416224405169487,0.04355297610163689,0.12148620188236237,0.027215126901865005,0.011536858975887299,-0.013012806884944439,-0.03886081650853157,-0.0032045997213572264,-0.08886774629354477,-0.026156572625041008,0.06355299800634384,0.06368659436702728,0.04587098956108093,0.06029118224978447,0.05838926509022713,-0.044866785407066345,0.004894731566309929,0.034082796424627304,0.008364571258425713,-0.02320207469165325,0.0382181778550148,0.007077530492097139,0.04960080608725548,-0.02384261228144169,0.0037260670214891434,0.010121673345565796,0.016947930678725243,0.02982223778963089,0.028507238253951073,-0.04724723473191261,4.102050086022572e-34,0.010620225220918655,-0.05744698643684387,0.04838278889656067,-0.014788389205932617,0.010220088995993137,-0.018437769263982773,0.005038062576204538,0.010387586429715157,0.06116948649287224,0.001868296298198402,-0.01356333214789629]'
SET
  @HasCustomProps_edadc0e3 = 1
SET
  @HasCustomEvents_edadc0e3 = 0
SET
  @RequiresData_edadc0e3 = 1
SET
  @DependencyCount_edadc0e3 = 3
SET
  @TechnicalDesignVectorEmbeddingModelID_edadc0e3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_edadc0e3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_edadc0e3 = 0
SET
  @ID_edadc0e3 = '24648BE5-0355-446F-86BC-AFF654FE77B7'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_edadc0e3,
  @Name = @Name_edadc0e3,
  @Version = @Version_edadc0e3,
  @VersionSequence = @VersionSequence_edadc0e3,
  @Title = @Title_edadc0e3,
  @Description = @Description_edadc0e3,
  @Type = @Type_edadc0e3,
  @Status = @Status_edadc0e3,
  @DeveloperName = @DeveloperName_edadc0e3,
  @DeveloperEmail = @DeveloperEmail_edadc0e3,
  @DeveloperOrganization = @DeveloperOrganization_edadc0e3,
  @SourceRegistryID = @SourceRegistryID_edadc0e3,
  @ReplicatedAt = @ReplicatedAt_edadc0e3,
  @LastSyncedAt = @LastSyncedAt_edadc0e3,
  @Specification = @Specification_edadc0e3,
  @FunctionalRequirements = @FunctionalRequirements_edadc0e3,
  @TechnicalDesign = @TechnicalDesign_edadc0e3,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_edadc0e3,
  @TechnicalDesignVector = @TechnicalDesignVector_edadc0e3,
  @HasCustomProps = @HasCustomProps_edadc0e3,
  @HasCustomEvents = @HasCustomEvents_edadc0e3,
  @RequiresData = @RequiresData_edadc0e3,
  @DependencyCount = @DependencyCount_edadc0e3,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_edadc0e3,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_edadc0e3,
  @HasRequiredCustomProps = @HasRequiredCustomProps_edadc0e3,
  @ID = @ID_edadc0e3;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_2e0deba1 NVARCHAR(MAX),
@Name_2e0deba1 NVARCHAR(500),
@Version_2e0deba1 NVARCHAR(50),
@VersionSequence_2e0deba1 INT,
@Title_2e0deba1 NVARCHAR(1000),
@Description_2e0deba1 NVARCHAR(MAX),
@Type_2e0deba1 NVARCHAR(255),
@Status_2e0deba1 NVARCHAR(50),
@DeveloperName_2e0deba1 NVARCHAR(255),
@DeveloperEmail_2e0deba1 NVARCHAR(255),
@DeveloperOrganization_2e0deba1 NVARCHAR(255),
@SourceRegistryID_2e0deba1 UNIQUEIDENTIFIER,
@ReplicatedAt_2e0deba1 DATETIMEOFFSET,
@LastSyncedAt_2e0deba1 DATETIMEOFFSET,
@Specification_2e0deba1 NVARCHAR(MAX),
@FunctionalRequirements_2e0deba1 NVARCHAR(MAX),
@TechnicalDesign_2e0deba1 NVARCHAR(MAX),
@FunctionalRequirementsVector_2e0deba1 NVARCHAR(MAX),
@TechnicalDesignVector_2e0deba1 NVARCHAR(MAX),
@HasCustomProps_2e0deba1 BIT,
@HasCustomEvents_2e0deba1 BIT,
@RequiresData_2e0deba1 BIT,
@DependencyCount_2e0deba1 INT,
@TechnicalDesignVectorEmbeddingModelID_2e0deba1 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_2e0deba1 NVARCHAR(MAX),
@HasRequiredCustomProps_2e0deba1 BIT,
@ID_2e0deba1 UNIQUEIDENTIFIER
SET
  @Namespace_2e0deba1 = N'CRM/Analytics'
SET
  @Name_2e0deba1 = N'AccountsByIndustryDetails'
SET
  @Version_2e0deba1 = N'1.0.0'
SET
  @VersionSequence_2e0deba1 = 1
SET
  @Title_2e0deba1 = N'Accounts by Industry Details'
SET
  @Description_2e0deba1 = N'Sliding detail panel that displays comprehensive account information with an open record action button'
SET
  @Type_2e0deba1 = N'Other'
SET
  @Status_2e0deba1 = N'Published'
SET
  @Specification_2e0deba1 = N'{"name":"AccountsByIndustryDetails","title":"Accounts by Industry Details","description":"Sliding detail panel that displays comprehensive account information with an open record action button","type":"component","location":"embedded","namespace":"CRM/Analytics","functionalRequirements":"## Account Details Panel\n\n- Slide in from right with smooth animation\n- Display account name and industry prominently\n- Show key metrics (revenue, status, type)\n- Include contact information section\n- Display location details if available\n- Provide ''Open Record'' action button\n- Support close via X button or overlay click\n- Format all data appropriately","technicalDesign":"## Technical Design\n\n### Props\n- account: Selected account object\n- isOpen: Panel visibility state\n- onClose: Close handler callback\n- onOpenRecord: Open record callback\n\n### Layout\n- Fixed positioning overlay\n- Transform-based slide animation\n- Sections for different data types\n- Sticky header with close button\n- Scrollable content area","dataRequirements":{"mode":"views","description":"Fetches account data using RunView for industry distribution analysis","entities":[{"name":"Accounts","description":"CRM account data grouped by industry","displayFields":["ID","AccountName","Industry","Revenue","Status","IsActive"],"filterFields":["IsActive","Industry"],"sortFields":["AccountName","Revenue","Industry"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Groups accounts by industry for pie chart visualization and filtered list display"}],"queries":[]},"properties":[{"name":"account","type":"object","required":true,"description":"Selected account object with all details"},{"name":"isOpen","type":"boolean","required":true,"description":"Whether the panel is visible"},{"name":"onClose","type":"function","required":true,"description":"Callback to close the panel"},{"name":"onOpenRecord","type":"function","required":true,"description":"Callback to open the full record"}],"exampleUsage":"<AccountsByIndustryDetails\n  account={selectedAccount}\n  isOpen={showDetails}\n  onClose={() => setShowDetails(false)}\n  onOpenRecord={handleOpenRecord}\n/>","code":"function AccountsByIndustryDetails ({ account, isOpen, onClose, onOpenRecord }) {\n  if (!isOpen || !account) {\n    return null;\n  }\n  \n  // Format currency\n  const formatCurrency = (value) => {\n    if (!value) return ''-'';\n    return new Intl.NumberFormat(''en-US'', {\n      style: ''currency'',\n      currency: ''USD'',\n      notation: ''compact'',\n      maximumFractionDigits: 1\n    }).format(value);\n  };\n   \n  return (\n    <>\n      {/* Overlay */}\n      <div \n        onClick={onClose}\n        style={{\n          position: ''fixed'',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: ''rgba(0, 0, 0, 0.3)'',\n          zIndex: 999,\n          animation: ''fadeIn 0.3s ease''\n        }}\n      />\n      \n      {/* Panel */}\n      <div style={{\n        position: ''fixed'',\n        top: ''75px'',\n        right: 0,\n        bottom: 0,\n        width: ''400px'',\n        backgroundColor: ''#fff'',\n        boxShadow: ''-4px 0 24px rgba(0, 0, 0, 0.1)'',\n        zIndex: 1000,\n        transform: ''translateX(0)'',\n        transition: ''transform 0.3s ease'',\n        overflowY: ''auto'',\n        borderTopLeftRadius: ''8px''\n      }}>\n        {/* Panel Header */}\n        <div style={{\n          padding: ''20px'',\n          borderBottom: ''1px solid #E5E7EB'',\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''center''\n        }}>\n          <h3 style={{ fontSize: ''18px'', fontWeight: ''600'', color: ''#111827'' }}>\n            Account Details\n          </h3>\n          <button\n            onClick={onClose}\n            style={{\n              width: ''32px'',\n              height: ''32px'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              backgroundColor: ''#F3F4F6'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer'',\n              fontSize: ''18px'',\n              color: ''#6B7280''\n            }}\n          >\n            ×\n          </button>\n        </div>\n        \n        {/* Panel Content */}\n        <div style={{ padding: ''20px'' }}>\n          {/* Account Name and Open Button */}\n          <div style={{ marginBottom: ''24px'' }}>\n            <div style={{ \n              display: ''flex'', \n              justifyContent: ''space-between'',\n              alignItems: ''flex-start'',\n              marginBottom: ''12px''\n            }}>\n              <h4 style={{ \n                fontSize: ''20px'', \n                fontWeight: ''700'', \n                color: ''#111827'',\n                marginBottom: ''4px''\n              }}>\n                {account.AccountName}\n              </h4>\n              <button\n                onClick={onOpenRecord}\n                style={{\n                  padding: ''8px 16px'',\n                  fontSize: ''14px'',\n                  fontWeight: ''500'',\n                  color: ''#fff'',\n                  backgroundColor: ''#3B82F6'',\n                  border: ''none'',\n                  borderRadius: ''6px'',\n                  cursor: ''pointer'',\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: ''4px''\n                }}\n              >\n                Open Record ↗\n              </button>\n            </div>\n            <div style={{ fontSize: ''14px'', color: ''#6B7280'' }}>\n              {account.Industry || ''No industry''}\n            </div>\n          </div>\n          \n          {/* Key Information */}\n          <div style={{ marginBottom: ''24px'' }}>\n            <h5 style={{ \n              fontSize: ''12px'', \n              fontWeight: ''600'', \n              color: ''#6B7280'',\n              textTransform: ''uppercase'',\n              letterSpacing: ''0.05em'',\n              marginBottom: ''12px''\n            }}>\n              Key Information\n            </h5>\n            \n            <div style={{ display: ''flex'', flexDirection: ''column'', gap: ''12px'' }}>\n              <div>\n                <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''2px'' }}>Annual Revenue</div>\n                <div style={{ fontSize: ''16px'', fontWeight: ''600'', color: ''#111827'' }}>\n                  {formatCurrency(account.AnnualRevenue)}\n                </div>\n              </div>\n              \n              <div style={{ display: ''flex'', gap: ''16px'' }}>\n                <div style={{ flex: 1 }}>\n                  <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''2px'' }}>Status</div>\n                  <span style={{\n                    padding: ''2px 8px'',\n                    fontSize: ''12px'',\n                    fontWeight: ''500'',\n                    borderRadius: ''4px'',\n                    backgroundColor: account.AccountStatus === ''Active'' ? ''#D1FAE5'' : ''#FEE2E2'',\n                    color: account.AccountStatus === ''Active'' ? ''#065F46'' : ''#991B1B''\n                  }}>\n                    {account.AccountStatus}\n                  </span>\n                </div>\n                \n                <div style={{ flex: 1 }}>\n                  <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''2px'' }}>Type</div>\n                  <span style={{\n                    padding: ''2px 8px'',\n                    fontSize: ''12px'',\n                    fontWeight: ''500'',\n                    borderRadius: ''4px'',\n                    backgroundColor: \n                      account.AccountType === ''Customer'' ? ''#DBEAFE'' :\n                      account.AccountType === ''Prospect'' ? ''#FEF3C7'' :\n                      account.AccountType === ''Partner'' ? ''#E9D5FF'' :\n                      account.AccountType === ''Vendor'' ? ''#FED7AA'' :\n                      ''#F3F4F6'',\n                    color: \n                      account.AccountType === ''Customer'' ? ''#1E40AF'' :\n                      account.AccountType === ''Prospect'' ? ''#92400E'' :\n                      account.AccountType === ''Partner'' ? ''#6B21A8'' :\n                      account.AccountType === ''Vendor'' ? ''#9A3412'' :\n                      ''#374151''\n                  }}>\n                    {account.AccountType}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Contact Information */}\n          <div style={{ marginBottom: ''24px'' }}>\n            <h5 style={{ \n              fontSize: ''12px'', \n              fontWeight: ''600'', \n              color: ''#6B7280'',\n              textTransform: ''uppercase'',\n              letterSpacing: ''0.05em'',\n              marginBottom: ''12px''\n            }}>\n              Contact Information\n            </h5>\n            \n            <div style={{ display: ''flex'', flexDirection: ''column'', gap: ''10px'' }}>\n              {account.Phone && (\n                <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n                  <span style={{ fontSize: ''14px'' }}>📞</span>\n                  <span style={{ fontSize: ''14px'', color: ''#111827'' }}>{account.Phone}</span>\n                </div>\n              )}\n              \n              {account.Website && (\n                <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n                  <span style={{ fontSize: ''14px'' }}>🌐</span>\n                  <a \n                    href={account.Website.startsWith(''http'') ? account.Website : `https://$' + '{account.Website}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ fontSize: ''14px'', color: ''#3B82F6'', textDecoration: ''none'' }}\n                  >\n                    {account.Website}\n                  </a>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {/* Address */}\n          {(account.BillingCity || account.BillingState || account.BillingCountry) && (\n            <div>\n              <h5 style={{ \n                fontSize: ''12px'', \n                fontWeight: ''600'', \n                color: ''#6B7280'',\n                textTransform: ''uppercase'',\n                letterSpacing: ''0.05em'',\n                marginBottom: ''12px''\n              }}>\n                Location\n              </h5>\n              \n              <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n                <span style={{ fontSize: ''14px'' }}>📍</span>\n                <span style={{ fontSize: ''14px'', color: ''#111827'' }}>\n                  {[account.BillingCity, account.BillingState, account.BillingCountry]\n                    .filter(Boolean)\n                    .join('', '')}\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Animation styles */}\n      <style>{`\n        @keyframes fadeIn {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n      `}</style>\n    </>\n  );\n}"}'
SET
  @FunctionalRequirements_2e0deba1 = N'## Account Details Panel

- Slide in from right with smooth animation
- Display account name and industry prominently
- Show key metrics (revenue, status, type)
- Include contact information section
- Display location details if available
- Provide ''Open Record'' action button
- Support close via X button or overlay click
- Format all data appropriately'
SET
  @TechnicalDesign_2e0deba1 = N'## Technical Design

### Props
- account: Selected account object
- isOpen: Panel visibility state
- onClose: Close handler callback
- onOpenRecord: Open record callback

### Layout
- Fixed positioning overlay
- Transform-based slide animation
- Sections for different data types
- Sticky header with close button
- Scrollable content area'
SET
  @FunctionalRequirementsVector_2e0deba1 = N'[-0.043998051434755325,0.006470224354416132,-0.0024015314411371946,-0.012981634587049484,0.012034188024699688,0.01427640300244093,0.03738899528980255,0.010332495905458927,-0.08103495091199875,0.015402892604470253,-0.027715500444173813,-0.015527774579823017,0.05193716287612915,0.14577512443065643,0.01609773188829422,-0.09477432072162628,-0.04792706295847893,-0.025335902348160744,0.020529568195343018,0.011219143867492676,0.014456631615757942,0.015241528861224651,-0.027476802468299866,-0.02761220373213291,-0.006999459117650986,-0.01571105420589447,-0.040737051516771317,0.027275359258055687,0.013999616727232933,-0.04389745369553566,-0.01254322100430727,0.042834144085645676,-0.05168372020125389,-0.013242597691714764,0.000001881493176369986,-0.023134399205446243,0.021688656881451607,0.027623707428574562,-0.09172936528921127,0.0485849566757679,-0.010754871182143688,-0.0545184388756752,0.0640939474105835,-0.028688937425613403,0.01847740076482296,-0.04605075344443321,-0.007350576110184193,0.04016711190342903,0.05736668407917023,-0.02401076816022396,0.0042411996982991695,-0.03917188569903374,0.009166757576167583,-0.01943020522594452,-0.010027208365499973,-0.022413065657019615,-0.004742434248328209,0.019579878076910973,0.012836052104830742,-0.03718310594558716,-0.008380766026675701,-0.0066545503214001656,0.019179055467247963,-0.016975583508610725,0.03380474075675011,0.03782130777835846,-0.015381594188511372,-0.06325361132621765,0.015042711049318314,0.05046023428440094,0.11909311264753342,0.01643458940088749,-0.016125397756695747,-0.05864965170621872,0.01147843524813652,-0.03809183090925217,-0.01607922650873661,-0.004638669081032276,0.011890508234500885,-0.004574600141495466,-0.08800667524337769,0.02651967667043209,-0.010673876851797104,-0.005486350506544113,-0.03175494447350502,-0.06709285825490952,-0.03793800249695778,-0.02168622426688671,0.00013951488654129207,-0.015675680711865425,0.04562591016292572,0.009394760243594646,-0.037396855652332306,0.0016615316271781921,-0.024354178458452225,-0.030547218397259712,0.05111087113618851,-0.009923052042722702,-0.005206351634114981,0.009296579286456108,-0.022356007248163223,0.033265370875597,-0.018496746197342873,0.019727107137441635,0.04022694006562233,0.06537002325057983,0.008684314787387848,-0.04225955531001091,-0.004953863099217415,0.04087327420711517,0.030486179515719414,-0.0018829464679583907,-0.01145205833017826,0.05717989429831505,-0.02953929454088211,0.039313413202762604,-0.04594650864601135,-0.0037063593044877052,-0.001545083592645824,0.040769465267658234,0.11996974050998688,0.032568491995334625,0.05058971419930458,-0.010223746299743652,-0.0042947810143232346,-0.016063202172517776,-0.046949077397584915,-0.034511782228946686,0.02516811527311802,0.0023082541301846504,-0.01521843671798706,0.04144617170095444,0.03291145712137222,-0.003039474133402109,0.004948763642460108,0.0030749256256967783,0.018036365509033203,0.03639421984553337,-0.05164606124162674,0.0339268296957016,0.008572285994887352,-0.01893184892833233,-0.06925912201404572,0.0020619805436581373,0.06116578355431557,0.02551301196217537,-0.05393577739596367,0.03563934564590454,0.03361980989575386,0.01437875535339117,-0.03061514161527157,-0.039779182523489,-0.02738049626350403,0.05499686673283577,-0.00927422009408474,-0.001988224685192108,0.03164113312959671,-0.018250200897455215,-0.016519509255886078,-0.018041517585515976,-0.004508455749601126,0.018599390983581543,0.04089662805199623,0.0024644567165523767,-0.024089200422167778,0.030998872593045235,-0.03618527203798294,0.007680557668209076,-0.04014339670538902,-0.02356579340994358,0.006241457536816597,-0.0036409806925803423,-0.03654782101511955,-0.018107350915670395,0.01188820693641901,-0.014537710696458817,0.03140066936612129,0.003852845635265112,-0.006834554951637983,0.04166542366147041,0.019922856241464615,-0.06409716606140137,-0.0074487049132585526,0.02597181685268879,0.01524385716766119,0.01801074482500553,-0.0380389504134655,0.0643632560968399,-0.05292162671685219,0.005611232947558165,-0.00022066051315050572,-0.007850106805562973,-0.02172737754881382,0.045523498207330704,0.0038378897588700056,0.023949889466166496,-0.01897992379963398,0.033525291830301285,0.03428171947598457,0.034316472709178925,-0.03551783040165901,-0.021187763661146164,0.031159456819295883,0.018671901896595955,-0.006985594052821398,0.04820243641734123,-0.01295024435967207,-0.05703695863485336,-0.002706054365262389,0.009796040132641792,0.04547508805990219,0.016332274302840233,-0.0238551776856184,-0.014920229092240334,-0.04436545819044113,0.03244514763355255,0.016089927405118942,0.0347028449177742,-0.015485676005482674,-0.0178022813051939,-0.0134695153683424,0.041553616523742676,-0.0033774853218346834,-0.014584744349122047,0.04755568504333496,-0.02350388839840889,0.02591690607368946,0.0055453297682106495,0.04358081892132759,0.03911515325307846,-0.004031751304864883,-0.03113308548927307,0.03748668357729912,0.04748484492301941,0.02548975870013237,0.075726218521595,0.0551571287214756,0.05837605521082878,-0.026354465633630753,0.013376039452850819,-0.008217617869377136,-0.07870035618543625,-0.04432916268706322,0.028571950271725655,-0.04798312857747078,-0.015993868932127953,-0.0354987308382988,-0.02298753336071968,0.03409818187355995,0.02799699641764164,-0.005777263082563877,-0.0030297492630779743,0.09504447877407074,-0.0227337833493948,0.003375795902684331,0.06548883765935898,-0.03471260145306587,-0.010746720246970654,-0.07485491782426834,0.067009337246418,-0.02408992126584053,-0.05144280567765236,0.006769922096282244,-0.03237738087773323,0.005768412724137306,0.0036307666450738907,0.06439793109893799,-0.021010706201195717,-0.018194621428847313,0.008794575929641724,-0.016466505825519562,0.009789985604584217,0.05697721615433693,-0.04169142618775368,0.013545720838010311,0.007265291642397642,-0.06631279736757278,0.04418385028839111,-0.008026366122066975,-0.0007856506854295731,0.0462220273911953,-0.023625774309039116,0.010395876131951809,0.04989872872829437,0.018505899235606194,-0.04012662544846535,0.013031682930886745,-0.1308784931898117,-0.0026807645335793495,-0.1007751002907753,0.025307547301054,-0.0240301676094532,0.015042775310575962,0.01341642439365387,-0.024567365646362305,0.02709469385445118,-0.023389045149087906,0.0001991365134017542,-0.061365656554698944,0.04451850801706314,-0.04869566112756729,0.03265748918056488,-0.008272589184343815,0.03852858766913414,0.009940659627318382,0.024456145241856575,0.025996383279561996,-0.02846752479672432,0.008539563044905663,-0.02073667012155056,0.02155452035367489,0.032475098967552185,0.029351163655519485,-0.08456174284219742,0.01973477564752102,0.0013271663337945938,-0.0023403270170092583,0.03411584347486496,0.005452201701700687,0.03881342336535454,-0.004862553905695677,0.01641272008419037,-0.027948888018727303,-0.001211684662848711,-0.04868018627166748,0.08292436599731445,-0.05030948668718338,0.020966818556189537,0.049192190170288086,-0.00791722722351551,0.024738892912864685,0.041446130722761154,-0.0347115583717823,0.020031066611409187,0.0035171411000192165,-0.00003497209763736464,-0.005821736995130777,-0.05351867526769638,0.05218537524342537,-0.03082001954317093,-0.019574275240302086,0.02622438408434391,-0.018730690702795982,-0.11073232442140579,0.007464142516255379,0.0020588573534041643,-0.06517083942890167,-0.005046321079134941,-0.07352607697248459,0.035793837159872055,0.04155804589390755,0.02067457139492035,-0.0420515239238739,-0.0017340665217489004,0.027298741042613983,-0.05132630467414856,-0.02724422700703144,0.07156255841255188,-0.0419403538107872,-0.09229778498411179,0.025590863078832626,-0.03677574545145035,-0.0858762115240097,0.09839475154876709,0.056010615080595016,-0.013707903213799,-0.04139058291912079,-0.006276797503232956,-0.01126578263938427,-0.00847996398806572,-0.006777776870876551,0.022111408412456512,0.01380134467035532,0.030776167288422585,-0.03926364332437515,0.006893733516335487,-0.004843426868319511,0.014056699350476265,-0.06874420493841171,0.011053516529500484,0.06611096858978271,0.02181173674762249,0.07381997257471085,-0.038779109716415405,0.06871054321527481,0.04506848379969597,-0.010254957713186741,0.013576580211520195,0.0025122587103396654,0.007315479218959808,-0.006443225312978029,0.05054289847612381,-0.06831689924001694,-0.023411553353071213,-0.009381823241710663,-0.04118187353014946,0.01016398798674345,-0.005921425297856331,0.009321149438619614,-0.04054160416126251,0.008035466074943542,0.0294632725417614,0.014228361658751965,-0.057578012347221375,-0.015919407829642296,-0.030896048992872238,0.0694102793931961,0.046009257435798645,-0.01258796826004982,-0.02652376890182495,-0.0912417396903038,0.03421926125884056,0.004864704329520464,0.0013084136880934238,0.030546076595783234,0.020137500017881393,0.005469255615025759,-0.022535955533385277,0.023219754919409752,0.06953489035367966,0.022566039115190506,-0.004712296184152365,-0.021937282755970955,0.0010947998380288482,0.03659019619226456,0.007484179921448231,0.04543159902095795,-0.0377313457429409,0.03084011748433113,0.025526175275444984,-0.0035382588393986225,0.034327324479818344,-0.042396556586027145,0.005089795682579279,-0.030337898060679436,0.04936885088682175,0.03999742120504379,0.009616853669285774,0.010554444044828415,0.007081467658281326,-0.020296800881624222,0.017968496307730675,0.030779873952269554,0.019451966509222984,-0.0193119328469038,0.031635791063308716,0.012614311650395393,0.04863034188747406,-0.0467512346804142,-0.029156126081943512,-0.028315382078289986,-0.03732474520802498,-0.030399542301893234,0.01667514443397522,-0.00746904918923974,-0.01893301121890545,-0.0514615997672081,0.004206913989037275,0.0005232600378803909,-0.011105077341198921,-0.015908172354102135,0.02709173411130905,-0.03258112818002701,-0.021290799602866173,0.040298618376255035,0.00037245493149384856,0.025157198309898376,-0.06021827086806297,-0.04618581384420395,-0.03945038095116615,0.05287807062268257,-0.006029615178704262,-0.028501737862825394,-0.048912592232227325,-0.06048375740647316,-0.006907701026648283,-0.014887194149196148,-0.09085890650749207,0.0036700202617794275,-0.01386632863432169,0.023412492126226425,0.002663558116182685,0.026136206462979317,-0.11992192268371582,-0.004484722390770912,0.02648901753127575,-0.02272808365523815,0.033326126635074615,-0.0010539782233536243,-0.011475277133286,0.07954869419336319,0.0068421498872339725,0.016791513189673424,0.047716476023197174,0.007028344552963972,-0.0443892702460289,-0.11456966400146484,-0.033797603100538254,-0.09793321788311005,-0.014768955297768116,-0.07646603882312775,-0.0023099943064153194,-0.007489365059882402,-0.005117660854011774,-0.010582257062196732,-0.018508173525333405,0.016235169023275375,0.03939439356327057,-0.06027889996767044,0.04633293300867081,0.05360228195786476,-0.029764574021100998,0.00904221460223198,-0.04705478623509407,0.029631581157445908,0.07663782685995102,-0.029255647212266922,0.00704067200422287,-0.05161505192518234,-0.009953519329428673,-0.005909972824156284,0.005411183927208185,0.02023123763501644,0.019071955233812332,-0.02427252009510994,-0.023101763799786568,0.042043935507535934,-0.006176237482577562,-0.04989596828818321,0.03350001573562622,-0.02029690146446228,0.008142094127833843,-0.00044837265159003437,0.007052864879369736,-0.016779134050011635,0.03541424870491028,0.0709676742553711,0.019322603940963745,-0.017853552475571632,0.020364699885249138,0.011951078660786152,0.028399838134646416,-0.003818065393716097,-0.024718137457966805,-0.007362018804997206,-0.018984176218509674,0.006833087652921677,-0.06684296578168869,-0.032697100192308426,0.018228057771921158,-0.011742798611521721,-0.05531074106693268,0.004363024607300758,-0.006086996756494045,-0.04114397615194321,-6.198934194230809e-33,-0.055729348212480545,-0.00027369795134291053,-0.05063522234559059,0.01973831281065941,0.026442579925060272,-0.02042895182967186,0.006088694557547569,-0.013881501741707325,-0.03425881266593933,-0.004405735991895199,-0.01084049604833126,-0.012454931624233723,0.01091272383928299,0.03176923096179962,-0.035453975200653076,-0.015327099710702896,0.01259621512144804,-0.01752142794430256,0.020202193409204483,0.002169591374695301,-0.058064986020326614,0.013675648719072342,-0.010122938081622124,-0.06979446858167648,-0.03258771076798439,-0.028368912637233734,-0.02273963764309883,0.06807386130094528,0.0011181317968294024,0.021114101633429527,-0.005737436469644308,-0.058150529861450195,-0.024314450100064278,0.010780304670333862,0.019418973475694656,0.009105644188821316,-0.062327902764081955,-0.013789990916848183,0.012475622817873955,0.019232358783483505,0.07747935503721237,0.02452058531343937,0.023595867678523064,-0.035165973007678986,0.004065294750034809,0.00490578543394804,0.004956115502864122,0.02999887615442276,0.0014787320978939533,0.011120455339550972,-0.018779722973704338,0.005568597931414843,-0.006668511778116226,0.008041328750550747,0.01720171980559826,0.052779678255319595,0.008255424909293652,-0.06690546125173569,-0.07231469452381134,-0.037976961582899094,0.04409139230847359,-0.046801984310150146,-0.0021319633815437555,0.04802114516496658,0.03581073880195618,-0.0030116066336631775,0.024040428921580315,0.023702071979641914,-0.04603869095444679,-0.00008525284647475928,-0.01223084982484579,0.009238097816705704,-0.02060925029218197,-0.07979577779769897,-0.0829509049654007,-0.0015435670502483845,0.0034953204449266195,0.023553794249892235,0.022576279938220978,0.023300692439079285,0.03167470917105675,0.009670686908066273,-0.027217445895075798,-0.012204364873468876,0.06008585914969444,-0.029434485360980034,0.0070116533897817135,-0.019557606428861618,0.020431751385331154,0.042085543274879456,-0.009391414932906628,0.034965552389621735,-0.03974728286266327,0.024484815075993538,-0.03467872366309166,-0.010329190641641617,0.10610441118478775,0.028300143778324127,-0.01796107552945614,-0.056972384452819824,0.02393130585551262,-0.0284863393753767,-0.05253836512565613,0.01973939873278141,0.0002949565532617271,0.016137156635522842,0.04391193762421608,0.01143244281411171,-0.035530414432287216,0.01702299900352955,0.03550587221980095,0.0316544808447361,-0.016652023419737816,-0.029938390478491783,-0.03230849280953407,0.023701468482613564,-0.023419754579663277,0.0038241087459027767,0.009891974739730358,-0.0018128115916624665,-0.008501693606376648,-0.0030069448985159397,0.028688689693808556,0.013568990863859653,0.03272198885679245,-0.02728179283440113,0.012749585323035717,-0.033377159386873245,0.06540258228778839,0.06123320758342743,-0.023627422749996185,0.022387687116861343,2.721947112149792e-7,-0.0033294130116701126,-0.011268832720816135,-0.0171285979449749,0.031427156180143356,-0.004492694977670908,-0.05950773134827614,0.003320049261674285,-0.025321274995803833,0.028471533209085464,-0.07817789912223816,0.06709399819374084,0.01893744058907032,0.02749701961874962,0.027104750275611877,-0.04155062139034271,-0.012845770455896854,0.012769597582519054,-0.055608343333005905,-0.04190043359994888,0.02022712118923664,0.01744186505675316,0.00895451195538044,0.02295926958322525,0.02910025417804718,0.03565974533557892,0.005122537724673748,-0.0021602348424494267,-0.016713211312890053,0.03696783632040024,-0.00024669189588166773,0.04935413971543312,0.021069075912237167,-0.005797300487756729,-0.010272967629134655,0.028040343895554543,0.006982656195759773,0.026943068951368332,0.05078056454658508,0.03029561974108219,0.06296321004629135,0.05022463947534561,0.0013445134973153472,-0.017214015126228333,-0.03090476803481579,-0.02617466263473034,-0.01731313019990921,0.008218972943723202,0.017389517277479172,-0.012514670379459858,0.03078383393585682,0.036730941385030746,0.01264133583754301,0.022306188941001892,-0.04201217368245125,0.04225508123636246,-0.025970296934247017,-0.04446937143802643,0.07690352946519852,0.004252258688211441,0.06456189602613449,-0.01362392958253622,0.06742393970489502,0.0029002404771745205,-0.03707628697156906,0.03865423798561096,-0.03171129897236824,0.014318345114588737,3.168152655484141e-34,-0.011646256782114506,-0.02176368236541748,0.03734249621629715,0.04058612510561943,0.038260795176029205,0.006752267479896545,0.02104504033923149,0.0072526573203504086,0.008323032408952713,-0.04902574047446251,-0.0029327631928026676]'
SET
  @TechnicalDesignVector_2e0deba1 = N'[-0.007969200611114502,-0.07263137400150299,-0.00991026684641838,-0.04634694755077362,0.0008063649875111878,-0.049495019018650055,0.08229367434978485,0.061515677720308304,-0.001697923056781292,0.0008088905597105622,-0.03015945851802826,0.015313958749175072,0.05671508237719536,0.06739547848701477,0.046828605234622955,-0.07320990413427353,-0.03572915121912956,0.040469300001859665,-0.047088753432035446,0.00189406203571707,0.012471651658415794,-0.01820610836148262,-0.02216586470603943,0.0058580609038472176,0.029146840795874596,-0.04129765182733536,-0.03100813366472721,0.0037739332765340805,0.04913932830095291,-0.01367156207561493,0.026938537135720253,0.05080236494541168,-0.06331291794776917,0.004394827876240015,0.0000016505035773661803,0.0027757384814321995,0.03443542495369911,-0.005769158713519573,-0.03606388345360756,-0.002135656075552106,-0.029287919402122498,-0.04383033141493797,0.0508771650493145,0.011798080988228321,0.022914476692676544,-0.09685632586479187,-0.03778314217925072,0.02847425639629364,0.038406047970056534,0.015005314722657204,0.004848874174058437,-0.03339332342147827,0.02787521854043007,0.009266841225326061,0.08297937363386154,0.028027085587382317,-0.016979770734906197,-0.010231728665530682,0.04311525449156761,-0.07776344567537308,-0.010449199005961418,-0.032501764595508575,0.031188765540719032,-0.03937476873397827,0.002460117917507887,0.015319423750042915,0.008800170384347439,-0.045535895973443985,0.002705630147829652,0.04361977055668831,0.13928215205669403,0.02514204941689968,-0.016059961169958115,-0.04343836009502411,0.01290450431406498,-0.018877508118748665,0.02972821518778801,-0.005483556538820267,-0.018656859174370766,-0.004373449832201004,-0.030296899378299713,0.025750866159796715,-0.05281777307391167,-0.008803512901067734,0.03836144879460335,-0.04230177029967308,-0.02687758021056652,0.00803572591394186,-0.003099511843174696,-0.028035232797265053,0.0876375213265419,0.004320675041526556,0.017345363274216652,0.017200496047735214,-0.016718702390789986,0.011788178235292435,0.027452200651168823,-0.09925390779972076,0.025285907089710236,0.01243114098906517,0.024139435961842537,0.057698432356119156,-0.022793523967266083,0.007464964408427477,0.05444149300456047,0.13162685930728912,0.0005669004167430103,0.025485817342996597,-0.001251200563274324,0.0332673154771328,-0.00008287026139441878,0.006251887418329716,0.003905922407284379,0.0416080541908741,-0.02297399193048477,0.010115928947925568,-0.013113529421389103,0.011750231496989727,0.05072825774550438,0.039936210960149765,0.11130624264478683,0.0005816171178594232,-0.022348087280988693,-0.03868551924824715,0.031630635261535645,0.043161001056432724,0.012615000829100609,-0.07472441345453262,-0.028464965522289276,0.07545052468776703,0.0014336224412545562,0.006978304125368595,-0.0031224852427840233,-0.0032762244809418917,-0.03905230388045311,-0.014972374774515629,-0.019343754276633263,-0.011072272434830666,0.03550240024924278,0.06789884716272354,-0.02680610679090023,0.00022771992371417582,-0.05811063572764397,0.036078087985515594,-0.018814874812960625,0.016990728676319122,-0.015102426521480083,-0.0775223970413208,0.015223957598209381,0.05805053189396858,0.020673399791121483,-0.06235842779278755,-0.018573731184005737,0.005397335160523653,-0.06389559060335159,0.03249136358499527,-0.04697516933083534,-0.015012563206255436,0.0189474206417799,0.0645347610116005,0.008478292264044285,0.0033986144699156284,0.05640619620680809,0.0328679159283638,-0.08367036283016205,0.006992287468165159,-0.05643875524401665,-0.03654245659708977,-0.001653796760365367,-0.052684009075164795,-0.024015678092837334,-0.020027950406074524,-0.030005501583218575,-0.026528049260377884,-0.025249870494008064,-0.048639968037605286,0.027937470003962517,-0.0069269826635718346,-0.1071310043334961,-0.018365148454904556,0.057069215923547745,-0.026572298258543015,0.007410129997879267,0.02298859693109989,0.021397721022367477,-0.010640798136591911,-0.046486180275678635,0.02892565354704857,-0.006322949193418026,-0.0100629897788167,-0.05571267753839493,-0.010544933378696442,-0.07769186794757843,0.002002697205170989,-0.015021559782326221,-0.00902353972196579,-0.05279376357793808,0.0068922764621675014,0.02034633606672287,0.07611458748579025,-0.00997188501060009,0.008700856007635593,0.045488741248846054,0.06503653526306152,-0.016425494104623795,0.007316821254789829,-0.08201335370540619,-0.040400922298431396,-0.009074975736439228,0.029495922848582268,0.02854449488222599,0.016669057309627533,-0.010423533618450165,0.03212627395987511,-0.0200363676995039,-0.008517271839082241,0.019112179055809975,0.006728245876729488,-0.05593389272689819,0.0011186659103259444,-0.011701058596372604,0.02645857259631157,0.014919997192919254,0.016988951712846756,0.040784936398267746,0.034268662333488464,-0.0007134899497032166,-0.026977937668561935,0.023091033101081848,0.003705883864313364,-0.0032464645337313414,-0.04385298490524292,-0.013239741325378418,0.03066459484398365,0.04809809476137161,0.04389331489801407,-0.005559992045164108,0.01861528865993023,-0.01402387022972107,-0.00012964975030627102,-0.0345219261944294,-0.013400756753981113,-0.053062956780195236,0.040901876986026764,-0.008814925327897072,-0.02881752885878086,-0.015596696175634861,0.004514062777161598,-0.016437167301774025,0.012461274862289429,-0.006503656040877104,0.025494078174233437,0.048566874116659164,-0.04453333467245102,-0.0077329822815954685,0.035516511648893356,0.04662907496094704,0.026765473186969757,-0.004710335750132799,0.026769742369651794,0.026005038991570473,-0.0361165851354599,-0.0008550605271011591,-0.0016320145223289728,0.02431446686387062,0.010067904368042946,0.04382432997226715,-0.03996190428733826,0.002612798474729061,-0.022942209616303444,0.007860489189624786,0.0048356251791119576,0.030569864436984062,-0.03227390721440315,0.03326575830578804,0.017234886065125465,-0.012413229793310165,0.07192166894674301,-0.01950794830918312,-0.04348727688193321,-0.008438291028141975,-0.005002112127840519,-0.006480679847300053,0.049114178866147995,0.010001185350120068,-0.013818181119859219,-0.011855832301080227,-0.02874104678630829,0.00029047278803773224,-0.05283098295331001,0.03020927496254444,-0.01368043851107359,0.030467065051198006,-0.023182008415460587,-0.032541319727897644,0.015019195154309273,0.01715259812772274,0.02295527048408985,-0.05527060478925705,0.06547830253839493,-0.034152962267398834,0.013306044973433018,-0.021891433745622635,0.02376716397702694,0.003306068480014801,-0.023276377469301224,-0.05005250498652458,0.05092579126358032,0.01619311235845089,0.0338018424808979,0.0019361802842468023,0.030401473864912987,0.015530647709965706,-0.06297338753938675,0.011259317398071289,0.03101268596947193,0.05613698437809944,0.013225452974438667,-0.029416188597679138,0.063520647585392,-0.0016420820029452443,-0.01021597534418106,-0.02978159859776497,-0.017343558371067047,-0.0630660131573677,0.029983503744006157,0.006685713771730661,-0.022415589541196823,0.1048193871974945,0.00275148032233119,0.00654180534183979,0.014505891129374504,0.0007584586273878813,0.02527332492172718,0.010238522663712502,-0.043563880026340485,-0.02199661172926426,-0.08039052784442902,0.02856266498565674,0.00406612828373909,-0.020600222051143646,-0.004002060275524855,-0.020226649940013885,-0.04663405939936638,-0.028947681188583374,-0.034762654453516006,-0.08841639012098312,-0.011339348740875721,-0.09223925322294235,0.019251396879553795,0.004166542086750269,0.030454134568572044,0.003022924531251192,0.002346531953662634,-0.00886903889477253,-0.008784279227256775,0.013745875097811222,0.025968553498387337,-0.026651082560420036,-0.057141222059726715,0.003820538753643632,-0.012672108598053455,0.02760978415608406,0.0676216185092926,0.02278205379843712,-0.004906380083411932,0.011287071742117405,-0.014266964979469776,-0.028053194284439087,-0.04229423403739929,-0.020544925704598427,0.037068579345941544,0.04569998383522034,0.03263305872678757,-0.02662849985063076,-0.03741706907749176,0.024262554943561554,-0.006928903516381979,0.00030707765836268663,-0.006189028266817331,0.07569924741983414,0.03428052365779877,0.019899331033229828,-0.04160630702972412,0.03168974816799164,0.01798270456492901,0.01241345051676035,-0.01650558039546013,0.011270388029515743,0.00553633738309145,-0.017513984814286232,-0.01747025176882744,-0.04323261231184006,-0.010876048356294632,-0.008719243109226227,0.018828045576810837,-0.0012414564844220877,0.007865595631301403,0.013644363731145859,-0.036619916558265686,-0.025306109338998795,0.07119957357645035,0.022941570729017258,-0.0021671485155820847,0.03818326070904732,-0.0386388823390007,-0.025039950385689735,0.031274013221263885,0.03993282839655876,-0.013344043865799904,-0.06155480816960335,-0.004681391641497612,-0.00931676384061575,0.002673490671440959,-0.06973523646593094,-0.0028877444565296173,-0.00877611804753542,-0.11036517471075058,-0.0038185422308743,0.04794513061642647,-0.02285301499068737,-0.01756189949810505,0.012374096550047398,-0.016009246930480003,-0.012939353473484516,-0.012734158895909786,0.004938656929880381,-0.06505585461854935,-0.014286038465797901,-0.010283954441547394,0.0015805040020495653,-0.0016418781597167253,-0.00006671394658042118,0.01934749260544777,-0.022934576496481895,0.001904105651192367,0.007919687777757645,-0.027850033715367317,0.036462895572185516,0.004694155417382717,0.030447738245129585,-0.03778456524014473,0.04691322520375252,0.007443011272698641,-0.006202582735568285,-0.03715284913778305,0.00975790061056614,0.08530792593955994,-0.014150205999612808,-0.02437133528292179,-0.013645284809172153,-0.010258673690259457,-0.04387150704860687,0.03877314552664757,-0.039209384471178055,-0.0575009249150753,0.04203995317220688,0.09212145954370499,0.004925868008285761,0.012435670010745525,-0.047908034175634384,0.035066694021224976,-0.026358669623732567,0.01738523133099079,0.02071649394929409,-0.016581431031227112,-0.009936231188476086,-0.03005748987197876,-0.028454795479774475,0.008603071793913841,-0.020394476130604744,0.012225553393363953,-0.02818536013364792,-0.028256133198738098,-0.029300155118107796,-0.011308997869491577,-0.04308551922440529,-0.0249185673892498,-0.02581855282187462,-0.03319105505943298,0.031269386410713196,0.015163441188633442,-0.0030334540642797947,-0.09942757338285446,0.009409083984792233,0.04352356120944023,0.026603195816278458,0.02215784788131714,0.008283075876533985,-0.00786499958485365,0.012232477776706219,-0.03468957915902138,-0.01278527732938528,0.09021027386188507,0.04972708597779274,0.04911674186587334,-0.02964954264461994,0.017501574009656906,-0.07565902173519135,-0.023633195087313652,-0.046788908541202545,-0.028122927993535995,0.0021401348058134317,0.06591742485761642,-0.0463162325322628,-0.022571546956896782,-0.009662010706961155,0.04387309029698372,-0.027807606384158134,-0.01896650530397892,0.015694456174969673,-0.025620177388191223,-0.011445973068475723,0.015916617587208748,0.008799356408417225,0.08406306058168411,-0.033671654760837555,0.01581578329205513,0.02181934006512165,-0.01013924740254879,0.02940220944583416,0.02095031552016735,-0.014858722686767578,0.02046089991927147,0.010408970527350903,-0.04064376652240753,0.04784310236573219,0.026863569393754005,-0.022818639874458313,0.022413987666368484,0.019596625119447708,-0.006129612680524588,0.01953211985528469,0.00044448848348110914,0.027682321146130562,0.05105333775281906,0.06364936381578445,0.012838009744882584,0.003250058041885495,-0.02726183459162712,-0.06348048895597458,0.026860719546675682,0.027863452211022377,-0.02792981266975403,0.02468962036073208,0.025827737525105476,0.010994179174304008,-0.07312621921300888,0.0250844806432724,0.02476007118821144,0.011155372485518456,-0.06595788896083832,-0.022442715242505074,0.01799812912940979,0.00575253227725625,-5.783892852894383e-33,-0.005577935837209225,-0.01216469518840313,-0.04458874464035034,0.0757942721247673,-0.034731924533843994,-0.006040435284376144,-0.0431392677128315,-0.007891305722296238,-0.0044420259073376656,-0.03485160320997238,-0.004922949243336916,-0.05995781347155571,0.01175613608211279,0.025181591510772705,-0.04186981916427612,-0.02116449736058712,0.015386659651994705,0.012032071128487587,-0.0160670205950737,0.03855951875448227,-0.015640147030353546,0.012277803383767605,0.03162257745862007,0.026746656745672226,-0.053955450654029846,-0.014149537310004234,0.02071763388812542,0.01742464490234852,-0.047563858330249786,0.022307556122541428,-0.0367191843688488,-0.02051081694662571,-0.042263809591531754,-0.06750045716762543,0.057205215096473694,0.02576819248497486,-0.008623466826975346,-0.05901654437184334,0.05020987242460251,0.051635950803756714,0.07736986130475998,-0.0005219178274273872,0.0015528399962931871,-0.0007037069299258292,0.025714203715324402,-0.04659602791070938,0.004263848066329956,0.01466558687388897,-0.00377653818577528,0.028356121852993965,-0.013569029048085213,0.036611057817935944,-0.016158634796738625,-0.010503491386771202,-0.002945205196738243,0.017408521845936775,0.04537993669509888,0.0050703389570117,-0.09128085523843765,-0.04160910099744797,-0.045643728226423264,-0.0505930632352829,0.011826436035335064,0.03167734295129776,0.02310335449874401,0.04540328308939934,0.002670339308679104,0.03776150196790695,-0.10310245305299759,-0.0008819499635137618,-0.011623653583228588,0.010034860111773014,0.0014255340211093426,-0.029958996921777725,0.038466136902570724,-0.020757360383868217,0.0007021554629318416,-0.030222343280911446,0.05474203824996948,0.0835544541478157,0.07824133336544037,0.03429035097360611,-0.004132745787501335,0.024224206805229187,-0.02865736186504364,0.00391737325116992,0.040430303663015366,-0.027577323839068413,0.00495330011472106,0.029303213581442833,0.005004994571208954,0.017260227352380753,-0.013321498408913612,0.06898429244756699,-0.0002520680718589574,0.00799125712364912,0.08754552155733109,0.04008042812347412,-0.014384979382157326,-0.027617691084742546,0.04707867279648781,-0.03993774205446243,-0.044434718787670135,-0.022390762344002724,-0.0165235698223114,0.01650204509496689,-0.004603632725775242,0.018848903477191925,-0.014687850140035152,0.035960033535957336,0.023423729464411736,-0.010334749706089497,-0.039607059210538864,0.007577673066407442,-0.016007637605071068,0.008550550788640976,-0.03791441023349762,-0.01707739382982254,0.00223705661483109,0.05329497903585434,-0.0017084352439269423,-0.0010902528883889318,-0.026091571897268295,0.002066549612209201,0.02024979516863823,-0.0022529284469783306,0.006453071255236864,-0.003981250803917646,-0.02288045361638069,0.014705001376569271,0.024752339348196983,0.005607244558632374,2.743673235272581e-7,-0.05096159502863884,-0.00025682683917693794,-0.032953210175037384,-0.004042643588036299,0.047561440616846085,-0.055613771080970764,-0.028486672788858414,-0.049572136253118515,-0.015014265663921833,-0.13126057386398315,0.011800643056631088,0.011765806935727596,0.018825160339474678,0.051531437784433365,-0.028838178142905235,0.012152462266385555,0.03526368737220764,-0.03722444176673889,-0.041474368423223495,0.012270139530301094,0.06416488438844681,-0.020643888041377068,0.08262573182582855,-0.009199616499245167,0.009382955729961395,0.07576370239257812,0.0057463147677481174,0.03212721645832062,0.04805436730384827,-0.04757421463727951,0.06336673349142075,0.009086187928915024,-0.0014411445008590817,-0.05535208061337471,0.05854208767414093,0.018299201503396034,0.01890421286225319,-0.0029166662134230137,0.02189522236585617,0.02325940690934658,0.0274118073284626,0.00019970473658759147,-0.05966998636722565,-0.049735650420188904,0.027534618973731995,-0.06646949797868729,-0.025800740346312523,-0.001165159628726542,-0.058765776455402374,0.018406735733151436,0.013799495995044708,0.01573198474943638,0.047868821769952774,-0.018838301301002502,0.013873499818146229,-0.0674448311328888,-0.021369094029068947,0.03521779924631119,-0.006030688062310219,-0.003822917817160487,-0.03676420450210571,0.03952537849545479,-0.013954760506749153,-0.0390360951423645,0.0005104565061628819,-0.06580336391925812,-0.006367508787661791,2.8999808384995657e-34,-0.011589614674448967,-0.03623181954026222,0.012048151344060898,0.01581569015979767,0.051007069647312164,-0.004682627972215414,0.11938592046499252,0.014752750284969807,0.00012659834465011954,-0.018601542338728905,0.009025237523019314]'
SET
  @HasCustomProps_2e0deba1 = 1
SET
  @HasCustomEvents_2e0deba1 = 0
SET
  @RequiresData_2e0deba1 = 0
SET
  @DependencyCount_2e0deba1 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_2e0deba1 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_2e0deba1 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_2e0deba1 = 1
SET
  @ID_2e0deba1 = '212F30E2-C117-49FA-9278-46B587FFC745'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_2e0deba1,
  @Name = @Name_2e0deba1,
  @Version = @Version_2e0deba1,
  @VersionSequence = @VersionSequence_2e0deba1,
  @Title = @Title_2e0deba1,
  @Description = @Description_2e0deba1,
  @Type = @Type_2e0deba1,
  @Status = @Status_2e0deba1,
  @DeveloperName = @DeveloperName_2e0deba1,
  @DeveloperEmail = @DeveloperEmail_2e0deba1,
  @DeveloperOrganization = @DeveloperOrganization_2e0deba1,
  @SourceRegistryID = @SourceRegistryID_2e0deba1,
  @ReplicatedAt = @ReplicatedAt_2e0deba1,
  @LastSyncedAt = @LastSyncedAt_2e0deba1,
  @Specification = @Specification_2e0deba1,
  @FunctionalRequirements = @FunctionalRequirements_2e0deba1,
  @TechnicalDesign = @TechnicalDesign_2e0deba1,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_2e0deba1,
  @TechnicalDesignVector = @TechnicalDesignVector_2e0deba1,
  @HasCustomProps = @HasCustomProps_2e0deba1,
  @HasCustomEvents = @HasCustomEvents_2e0deba1,
  @RequiresData = @RequiresData_2e0deba1,
  @DependencyCount = @DependencyCount_2e0deba1,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_2e0deba1,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_2e0deba1,
  @HasRequiredCustomProps = @HasRequiredCustomProps_2e0deba1,
  @ID = @ID_2e0deba1;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_310f2192 NVARCHAR(MAX),
@Name_310f2192 NVARCHAR(500),
@Version_310f2192 NVARCHAR(50),
@VersionSequence_310f2192 INT,
@Title_310f2192 NVARCHAR(1000),
@Description_310f2192 NVARCHAR(MAX),
@Type_310f2192 NVARCHAR(255),
@Status_310f2192 NVARCHAR(50),
@DeveloperName_310f2192 NVARCHAR(255),
@DeveloperEmail_310f2192 NVARCHAR(255),
@DeveloperOrganization_310f2192 NVARCHAR(255),
@SourceRegistryID_310f2192 UNIQUEIDENTIFIER,
@ReplicatedAt_310f2192 DATETIMEOFFSET,
@LastSyncedAt_310f2192 DATETIMEOFFSET,
@Specification_310f2192 NVARCHAR(MAX),
@FunctionalRequirements_310f2192 NVARCHAR(MAX),
@TechnicalDesign_310f2192 NVARCHAR(MAX),
@FunctionalRequirementsVector_310f2192 NVARCHAR(MAX),
@TechnicalDesignVector_310f2192 NVARCHAR(MAX),
@HasCustomProps_310f2192 BIT,
@HasCustomEvents_310f2192 BIT,
@RequiresData_310f2192 BIT,
@DependencyCount_310f2192 INT,
@TechnicalDesignVectorEmbeddingModelID_310f2192 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_310f2192 NVARCHAR(MAX),
@HasRequiredCustomProps_310f2192 BIT,
@ID_310f2192 UNIQUEIDENTIFIER
SET
  @Namespace_310f2192 = N'CRM/Sales'
SET
  @Name_310f2192 = N'RecentDealsList'
SET
  @Version_310f2192 = N'1.0.0'
SET
  @VersionSequence_310f2192 = 1
SET
  @Title_310f2192 = N'Recent Deals List'
SET
  @Description_310f2192 = N'Displays a list of the most recent deals with stage indicators and key metrics'
SET
  @Type_310f2192 = N'Other'
SET
  @Status_310f2192 = N'Published'
SET
  @Specification_310f2192 = N'{"name":"RecentDealsList","title":"Recent Deals List","description":"Displays a list of the most recent deals with stage indicators and key metrics","type":"component","location":"embedded","namespace":"CRM/Sales","functionalRequirements":"## Recent Deals Display\n\n### Core Features\n- Display 10-20 most recent deals\n- Show key deal information: name, account, amount, stage\n- Color-code rows by stage for quick visual scanning\n- Format currency values appropriately\n- Show days until close date\n\n### Interactivity\n- Clickable rows to view deal details\n- Hover effects for better UX\n- Optional refresh button to reload data\n\n### Visual Design\n- Clean table layout with good spacing\n- Stage badges with semantic colors\n- Highlight deals closing soon\n- Show probability as progress bar","dataRequirements":{"mode":"views","description":"Fetches recent deals data using RunView","entities":[{"name":"Deals","description":"CRM deals/opportunities data","displayFields":["ID","DealName","AccountID","Account","Stage","Amount","Probability","CloseDate","DealSource","OwnerID","Owner","__mj_CreatedAt"],"filterFields":["CloseDate","Stage"],"sortFields":["CloseDate","Amount","DealName","__mj_CreatedAt"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Displays recent deals with stage indicators and metrics"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Data Loading\n- Use RunView to load recent deals\n- Sort by CreatedDate DESC or CloseDate ASC\n- Limit to configurable number of rows (default 15)\n\n### Stage Styling\n- Prospecting: Gray\n- Qualification: Blue\n- Proposal: Yellow\n- Negotiation: Orange\n- Closed Won: Green\n- Closed Lost: Red\n\n### Calculations\n- Days to close: CloseDate - today\n- Expected revenue: Amount * Probability / 100\n- Format amounts with currency symbol","properties":[],"exampleUsage":"<RecentDealsList\n  maxRows={20}\n  sortBy=\"CloseDate\"\n  onDealClick={handleDealClick}\n/>","code":"function RecentDealsList({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [deals, setDeals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sortBy, setSortBy] = useState(savedUserSettings?.sortBy || ''CloseDate'');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || ''ASC'');\n  const [maxRows] = useState(savedUserSettings?.maxRows || 15);\n  const [dateFrom, setDateFrom] = useState(savedUserSettings?.dateFrom || '''');\n  const [dateTo, setDateTo] = useState(savedUserSettings?.dateTo || '''');\n  const [selectedDeal, setSelectedDeal] = useState(null);\n\n  // Stage colors mapping\n  const stageColors = {\n    ''Prospecting'': { bg: ''#F3F4F6'', text: ''#6B7280'', border: ''#D1D5DB'' },\n    ''Qualification'': { bg: ''#DBEAFE'', text: ''#1E40AF'', border: ''#93C5FD'' },\n    ''Proposal'': { bg: ''#FEF3C7'', text: ''#92400E'', border: ''#FDE047'' },\n    ''Negotiation'': { bg: ''#FED7AA'', text: ''#9A3412'', border: ''#FB923C'' },\n    ''Closed Won'': { bg: ''#D1FAE5'', text: ''#065F46'', border: ''#6EE7B7'' },\n    ''Closed Lost'': { bg: ''#FEE2E2'', text: ''#991B1B'', border: ''#FCA5A5'' }\n  };\n\n  useEffect(() => {\n    loadDeals();\n  }, [sortBy, sortDirection, maxRows, dateFrom, dateTo]);\n\n  const loadDeals = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Build filter based on date range\n      let filters = [];\n      if (dateFrom) {\n        filters.push(`CloseDate >= ''$' + '{dateFrom}''`);\n      }\n      if (dateTo) {\n        filters.push(`CloseDate <= ''$' + '{dateTo}''`);\n      }\n      const extraFilter = filters.length > 0 ? filters.join('' AND '') : '''';\n      \n      const result = await utilities.rv.RunView({\n        EntityName: ''Deals'',\n        OrderBy: `$' + '{sortBy} $' + '{sortDirection}`,\n        MaxRows: maxRows,\n        ExtraFilter: extraFilter\n      });\n\n      if (result.Success) {\n        setDeals(result.Results || []);\n      } else {\n        setError(result.ErrorMessage || ''Failed to load deals'');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat(''en-US'', {\n      style: ''currency'',\n      currency: ''USD''\n    }).format(amount || 0);\n  };\n\n  const formatDate = (dateStr) => {\n    if (!dateStr) return ''-'';\n    const date = new Date(dateStr);\n    return date.toLocaleDateString(''en-US'', { \n      month: ''short'', \n      day: ''numeric'', \n      year: ''numeric'' \n    });\n  };\n\n  const getDaysToClose = (closeDate) => {\n    if (!closeDate) return null;\n    const close = new Date(closeDate);\n    const today = new Date();\n    const days = Math.ceil((close - today) / (1000 * 60 * 60 * 24));\n    return days;\n  };\n\n  const handleSort = (field) => {\n    if (sortBy === field) {\n      // Toggle direction if same field\n      const newDirection = sortDirection === ''ASC'' ? ''DESC'' : ''ASC'';\n      setSortDirection(newDirection);\n      onSaveUserSettings({ ...savedUserSettings, sortBy: field, sortDirection: newDirection });\n    } else {\n      // New field, default to ASC except for Amount\n      const newDirection = field === ''Amount'' ? ''DESC'' : ''ASC'';\n      setSortBy(field);\n      setSortDirection(newDirection);\n      onSaveUserSettings({ ...savedUserSettings, sortBy: field, sortDirection: newDirection });\n    }\n  };\n\n  const handleDateChange = (field, value) => {\n    if (field === ''from'') {\n      setDateFrom(value);\n      onSaveUserSettings({ ...savedUserSettings, dateFrom: value });\n    } else {\n      setDateTo(value);\n      onSaveUserSettings({ ...savedUserSettings, dateTo: value });\n    }\n  };\n\n  const clearFilters = () => {\n    setDateFrom('''');\n    setDateTo('''');\n    onSaveUserSettings({ ...savedUserSettings, dateFrom: '''', dateTo: '''' });\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading deals...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''20px'', backgroundColor: ''#FEE2E2'', borderRadius: ''8px'', margin: ''20px'' }}>\n        <div style={{ color: ''#991B1B'', fontWeight: ''bold'' }}>Error loading deals</div>\n        <div style={{ color: ''#DC2626'', marginTop: ''8px'' }}>{error}</div>\n        <button \n          onClick={loadDeals}\n          style={{\n            marginTop: ''12px'',\n            padding: ''8px 16px'',\n            backgroundColor: ''#EF4444'',\n            color: ''white'',\n            border: ''none'',\n            borderRadius: ''6px'',\n            cursor: ''pointer''\n          }}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: ''20px'' }}>\n      <div style={{ marginBottom: ''20px'' }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''16px'' }}>\n          <h2 style={{ fontSize: ''24px'', fontWeight: ''bold'', margin: 0 }}>Recent Deals</h2>\n          <button\n            onClick={loadDeals}\n            style={{\n              padding: ''8px 16px'',\n              backgroundColor: ''#3B82F6'',\n              color: ''white'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer'',\n              fontSize: ''14px''\n            }}\n          >\n            Refresh\n          </button>\n        </div>\n        \n        <div style={{ \n          display: ''flex'', \n          gap: ''12px'', \n          alignItems: ''center'',\n          padding: ''12px'',\n          backgroundColor: ''#F9FAFB'',\n          borderRadius: ''8px'',\n          marginBottom: ''16px''\n        }}>\n          <label style={{ fontSize: ''14px'', color: ''#374151'' }}>Close Date:</label>\n          <input\n            type=\"date\"\n            value={dateFrom}\n            onChange={(e) => handleDateChange(''from'', e.target.value)}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px'',\n              fontSize: ''14px''\n            }}\n            placeholder=\"From\"\n          />\n          <span style={{ color: ''#6B7280'' }}>to</span>\n          <input\n            type=\"date\"\n            value={dateTo}\n            onChange={(e) => handleDateChange(''to'', e.target.value)}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px'',\n              fontSize: ''14px''\n            }}\n            placeholder=\"To\"\n          />\n          {(dateFrom || dateTo) && (\n            <button\n              onClick={clearFilters}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: ''#EF4444'',\n                color: ''white'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              Clear\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div style={{ overflowX: ''auto'' }}>\n        <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n          <thead>\n            <tr style={{ borderBottom: ''2px solid #E5E7EB'' }}>\n              <th \n                onClick={() => handleSort(''DealName'')}\n                style={{ \n                  padding: ''12px'', \n                  textAlign: ''left'', \n                  fontWeight: ''600'',\n                  cursor: ''pointer'',\n                  color: sortBy === ''DealName'' ? ''#3B82F6'' : ''#374151'',\n                  position: ''relative''\n                }}\n              >\n                Deal Name\n                {sortBy === ''DealName'' && (\n                  <span style={{ marginLeft: ''4px'' }}>{sortDirection === ''ASC'' ? ''↑'' : ''↓''}</span>\n                )}\n              </th>\n              <th style={{ padding: ''12px'', textAlign: ''left'', fontWeight: ''600'' }}>Stage</th>\n              <th \n                onClick={() => handleSort(''Amount'')}\n                style={{ \n                  padding: ''12px'', \n                  textAlign: ''right'', \n                  fontWeight: ''600'',\n                  cursor: ''pointer'',\n                  color: sortBy === ''Amount'' ? ''#3B82F6'' : ''#374151''\n                }}\n              >\n                Amount\n                {sortBy === ''Amount'' && (\n                  <span style={{ marginLeft: ''4px'' }}>{sortDirection === ''ASC'' ? ''↑'' : ''↓''}</span>\n                )}\n              </th>\n              <th \n                onClick={() => handleSort(''Probability'')}\n                style={{ \n                  padding: ''12px'', \n                  textAlign: ''center'', \n                  fontWeight: ''600'',\n                  cursor: ''pointer'',\n                  color: sortBy === ''Probability'' ? ''#3B82F6'' : ''#374151''\n                }}\n              >\n                Probability\n                {sortBy === ''Probability'' && (\n                  <span style={{ marginLeft: ''4px'' }}>{sortDirection === ''ASC'' ? ''↑'' : ''↓''}</span>\n                )}\n              </th>\n              <th \n                onClick={() => handleSort(''CloseDate'')}\n                style={{ \n                  padding: ''12px'', \n                  textAlign: ''left'', \n                  fontWeight: ''600'',\n                  cursor: ''pointer'',\n                  color: sortBy === ''CloseDate'' ? ''#3B82F6'' : ''#374151''\n                }}\n              >\n                Close Date\n                {sortBy === ''CloseDate'' && (\n                  <span style={{ marginLeft: ''4px'' }}>{sortDirection === ''ASC'' ? ''↑'' : ''↓''}</span>\n                )}\n              </th>\n              <th style={{ padding: ''12px'', textAlign: ''center'', fontWeight: ''600'' }}>Days to Close</th>\n              <th style={{ padding: ''12px'', textAlign: ''left'', fontWeight: ''600'' }}>Source</th>\n            </tr>\n          </thead>\n          <tbody>\n            {deals.map((deal, index) => {\n              const daysToClose = getDaysToClose(deal.CloseDate);\n              const stageStyle = stageColors[deal.Stage] || stageColors[''Prospecting''];\n              \n              return (\n                <tr \n                  key={deal.ID}\n                  style={{ \n                    borderBottom: ''1px solid #E5E7EB'',\n                    cursor: ''pointer'',\n                    transition: ''background-color 0.2s'',\n                    backgroundColor: index % 2 === 0 ? ''white'' : ''#F9FAFB''\n                  }}\n                  onClick={() => setSelectedDeal(deal)}\n                  onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F3F4F6''}\n                  onMouseLeave={(e) => e.currentTarget.style.backgroundColor = index % 2 === 0 ? ''white'' : ''#F9FAFB''}\n                >\n                  <td style={{ padding: ''12px'' }}>\n                    <div style={{ fontWeight: ''500'', color: ''#111827'' }}>{deal.DealName}</div>\n                  </td>\n                  <td style={{ padding: ''12px'' }}>\n                    <span style={{\n                      padding: ''4px 12px'',\n                      borderRadius: ''12px'',\n                      fontSize: ''12px'',\n                      fontWeight: ''600'',\n                      backgroundColor: stageStyle.bg,\n                      color: stageStyle.text,\n                      border: `1px solid $' + '{stageStyle.border}`\n                    }}>\n                      {deal.Stage}\n                    </span>\n                  </td>\n                  <td style={{ padding: ''12px'', textAlign: ''right'', fontWeight: ''600'', color: ''#059669'' }}>\n                    {formatCurrency(deal.Amount)}\n                  </td>\n                  <td style={{ padding: ''12px'', textAlign: ''center'' }}>\n                    <div style={{ position: ''relative'' }}>\n                      <div style={{ \n                        width: ''100px'', \n                        height: ''8px'', \n                        backgroundColor: ''#E5E7EB'', \n                        borderRadius: ''4px'',\n                        margin: ''0 auto''\n                      }}>\n                        <div style={{ \n                          width: `$' + '{deal.Probability}%`, \n                          height: ''100%'', \n                          backgroundColor: deal.Probability > 75 ? ''#10B981'' : deal.Probability > 50 ? ''#F59E0B'' : ''#6B7280'',\n                          borderRadius: ''4px'',\n                          transition: ''width 0.3s''\n                        }} />\n                      </div>\n                      <div style={{ fontSize: ''12px'', marginTop: ''2px'', color: ''#6B7280'' }}>\n                        {deal.Probability}%\n                      </div>\n                    </div>\n                  </td>\n                  <td style={{ padding: ''12px'' }}>\n                    {formatDate(deal.CloseDate)}\n                  </td>\n                  <td style={{ padding: ''12px'', textAlign: ''center'' }}>\n                    {daysToClose !== null && (\n                      <span style={{\n                        padding: ''4px 8px'',\n                        borderRadius: ''6px'',\n                        fontSize: ''12px'',\n                        fontWeight: ''600'',\n                        backgroundColor: daysToClose < 0 ? ''#FEE2E2'' : daysToClose < 7 ? ''#FEF3C7'' : daysToClose < 30 ? ''#DBEAFE'' : ''#F3F4F6'',\n                        color: daysToClose < 0 ? ''#991B1B'' : daysToClose < 7 ? ''#92400E'' : daysToClose < 30 ? ''#1E40AF'' : ''#6B7280''\n                      }}>\n                        {daysToClose < 0 ? `$' + '{Math.abs(daysToClose)} overdue` : `$' + '{daysToClose} days`}\n                      </span>\n                    )}\n                  </td>\n                  <td style={{ padding: ''12px'', fontSize: ''14px'', color: ''#6B7280'' }}>\n                    {deal.DealSource || ''-''}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {deals.length === 0 && (\n        <div style={{ padding: ''40px'', textAlign: ''center'', color: ''#6B7280'' }}>\n          No deals found\n        </div>\n      )}\n\n      <div style={{ marginTop: ''20px'', fontSize: ''14px'', color: ''#6B7280'', textAlign: ''right'' }}>\n        Showing {deals.length} of {maxRows} max deals\n      </div>\n\n      {/* Deal Detail Modal */}\n      {selectedDeal && (\n        <div style={{\n          position: ''fixed'',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: ''rgba(0, 0, 0, 0.5)'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1000\n        }}\n        onClick={() => setSelectedDeal(null)}\n        >\n          <div \n            style={{\n              backgroundColor: ''white'',\n              borderRadius: ''12px'',\n              padding: ''24px'',\n              maxWidth: ''600px'',\n              width: ''90%'',\n              maxHeight: ''80vh'',\n              overflowY: ''auto'',\n              boxShadow: ''0 20px 25px -5px rgba(0, 0, 0, 0.1)''\n            }}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''start'', marginBottom: ''20px'' }}>\n              <h3 style={{ fontSize: ''20px'', fontWeight: ''bold'', margin: 0 }}>{selectedDeal.DealName}</h3>\n              <button\n                onClick={() => setSelectedDeal(null)}\n                style={{\n                  background: ''none'',\n                  border: ''none'',\n                  fontSize: ''24px'',\n                  cursor: ''pointer'',\n                  color: ''#6B7280'',\n                  padding: ''0'',\n                  width: ''30px'',\n                  height: ''30px''\n                }}\n              >\n                ×\n              </button>\n            </div>\n            \n            <div style={{ display: ''grid'', gap: ''16px'' }}>\n              <div>\n                <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Stage</label>\n                <span style={{\n                  padding: ''6px 16px'',\n                  borderRadius: ''12px'',\n                  fontSize: ''14px'',\n                  fontWeight: ''600'',\n                  backgroundColor: stageColors[selectedDeal.Stage]?.bg || ''#F3F4F6'',\n                  color: stageColors[selectedDeal.Stage]?.text || ''#6B7280'',\n                  border: `1px solid $' + '{stageColors[selectedDeal.Stage]?.border || ''#D1D5DB''}`,\n                  display: ''inline-block''\n                }}>\n                  {selectedDeal.Stage}\n                </span>\n              </div>\n              \n              <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''16px'' }}>\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Amount</label>\n                  <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#059669'' }}>\n                    {formatCurrency(selectedDeal.Amount)}\n                  </div>\n                </div>\n                \n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Probability</label>\n                  <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#374151'' }}>\n                    {selectedDeal.Probability}%\n                  </div>\n                </div>\n              </div>\n              \n              <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''16px'' }}>\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Close Date</label>\n                  <div style={{ fontSize: ''16px'', color: ''#111827'' }}>\n                    {formatDate(selectedDeal.CloseDate)}\n                  </div>\n                </div>\n                \n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Days to Close</label>\n                  <div style={{ fontSize: ''16px'', color: ''#111827'' }}>\n                    {(() => {\n                      const days = getDaysToClose(selectedDeal.CloseDate);\n                      if (days === null) return ''-'';\n                      return days < 0 ? `$' + '{Math.abs(days)} days overdue` : `$' + '{days} days`;\n                    })()}\n                  </div>\n                </div>\n              </div>\n              \n              {selectedDeal.DealSource && (\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Source</label>\n                  <div style={{ fontSize: ''16px'', color: ''#111827'' }}>\n                    {selectedDeal.DealSource}\n                  </div>\n                </div>\n              )}\n              \n              {selectedDeal.NextStep && (\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Next Step</label>\n                  <div style={{ fontSize: ''16px'', color: ''#111827'' }}>\n                    {selectedDeal.NextStep}\n                  </div>\n                </div>\n              )}\n              \n              <div>\n                <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Expected Revenue</label>\n                <div style={{ fontSize: ''20px'', fontWeight: ''bold'', color: ''#2563EB'' }}>\n                  {formatCurrency((selectedDeal.Amount || 0) * (selectedDeal.Probability || 0) / 100)}\n                </div>\n              </div>\n            </div>\n            \n            <div style={{ \n              marginTop: ''20px'', \n              paddingTop: ''20px'', \n              borderTop: ''1px solid #E5E7EB'',\n              display: ''flex'',\n              justifyContent: ''flex-end''\n            }}>\n              <button\n                onClick={() => {\n                  if (callbacks.OpenEntityRecord) {\n                    callbacks.OpenEntityRecord(''Deals'', [\n                      { FieldName: ''ID'', Value: selectedDeal.ID }\n                    ]);\n                    setSelectedDeal(null);\n                  } else {\n                    console.warn(''OpenEntityRecord callback not available'');\n                  }\n                }}\n                style={{\n                  padding: ''8px 12px'',\n                  backgroundColor: ''#3B82F6'',\n                  color: ''white'',\n                  border: ''none'',\n                  borderRadius: ''6px'',\n                  cursor: ''pointer'',\n                  fontSize: ''20px'',\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  justifyContent: ''center'',\n                  width: ''40px'',\n                  height: ''40px''\n                }}\n                title=\"Open record\"\n              >\n                ↗\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"}'
SET
  @FunctionalRequirements_310f2192 = N'## Recent Deals Display

### Core Features
- Display 10-20 most recent deals
- Show key deal information: name, account, amount, stage
- Color-code rows by stage for quick visual scanning
- Format currency values appropriately
- Show days until close date

### Interactivity
- Clickable rows to view deal details
- Hover effects for better UX
- Optional refresh button to reload data

### Visual Design
- Clean table layout with good spacing
- Stage badges with semantic colors
- Highlight deals closing soon
- Show probability as progress bar'
SET
  @TechnicalDesign_310f2192 = N'## Implementation

### Data Loading
- Use RunView to load recent deals
- Sort by CreatedDate DESC or CloseDate ASC
- Limit to configurable number of rows (default 15)

### Stage Styling
- Prospecting: Gray
- Qualification: Blue
- Proposal: Yellow
- Negotiation: Orange
- Closed Won: Green
- Closed Lost: Red

### Calculations
- Days to close: CloseDate - today
- Expected revenue: Amount * Probability / 100
- Format amounts with currency symbol'
SET
  @FunctionalRequirementsVector_310f2192 = N'[-0.01128386426717043,0.03425973281264305,-0.013811659067869186,-0.031319089233875275,0.004891288932412863,-0.01255069300532341,0.020753495395183563,0.04472017288208008,-0.07372038811445236,0.0070227086544036865,-0.034387826919555664,0.02860596776008606,0.03189477697014809,0.2064741849899292,-0.007372396066784859,-0.010940596461296082,0.029525747522711754,-0.003966693300753832,0.01981602981686592,-0.001298996852710843,0.02043781243264675,-0.026231149211525917,-0.02587776444852352,-0.015025388449430466,-0.04469430819153786,0.011112885549664497,-0.030980385839939117,-0.013233407400548458,-0.006732503417879343,-0.08463425934314728,0.01678646169602871,0.026081301271915436,-0.043168410658836365,-0.030010215938091278,0.0000023940749542816775,-0.04144462198019028,-0.03809506073594093,-0.01008099876344204,-0.058806560933589935,0.05533449724316597,-0.018188659101724625,-0.04090861231088638,0.040432386100292206,-0.009110038168728352,-0.04949270933866501,-0.08294865489006042,-0.03545388579368591,0.13533924520015717,-0.028496451675891876,-0.02307070605456829,0.000598143960814923,0.00015824816364329308,-0.01049086544662714,-0.032398395240306854,0.06073710322380066,-0.05276186391711235,0.032051537185907364,-0.05190405622124672,0.016824327409267426,-0.053229592740535736,-0.01114843599498272,0.002393463859334588,0.017937103286385536,-0.05920228362083435,0.04691328853368759,0.07614665478467941,0.04626335948705673,-0.02867700532078743,-0.035823363810777664,-0.0057340762577950954,0.07269134372472763,0.006172824651002884,-0.014173544943332672,-0.020715821534395218,-0.048860564827919006,-0.05159773677587509,-0.0527605339884758,0.05798852816224098,0.033527202904224396,-0.0002698773459997028,-0.048203740268945694,0.04791191220283508,-0.021289285272359848,0.032921187579631805,0.024994779378175735,-0.011314128525555134,-0.02110295183956623,0.002791306469589472,-0.022015992552042007,0.004332611802965403,0.03980902582406998,-0.04447554424405098,-0.0052322642877697945,-0.02478971891105175,-0.03558439761400223,-0.04970400035381317,0.05269128456711769,0.08329401910305023,0.01119859330356121,-0.007826153188943863,-0.03584206476807594,0.022252030670642853,-0.006687605753540993,0.012690394185483456,0.029706504195928574,-0.016235152259469032,-0.0013182868715375662,-0.06489419937133789,-0.007929999381303787,0.07758152484893799,0.03790111467242241,0.03895010054111481,-0.006678019650280476,0.06132004037499428,-0.018745286390185356,-0.02121581882238388,-0.019207054749131203,-0.0013228534953668714,0.022215642035007477,0.04947987571358681,0.10190197080373764,0.02010517567396164,0.008873826824128628,0.02154015377163887,-0.020444579422473907,-0.0015353511553257704,-0.043190907686948776,0.0017316145822405815,0.03320755809545517,-0.011151407845318317,-0.03804619237780571,0.003265616251155734,0.007152313832193613,-0.056847698986530304,0.007923435419797897,0.011740967631340027,-0.004682458937168121,0.0065107932314276695,-0.02949517033994198,-0.012993804179131985,-0.029575971886515617,0.020946253091096878,-0.08641579747200012,0.0051359073258936405,-0.04263292998075485,-0.010482490062713623,0.008133670315146446,0.044218745082616806,-0.008622563444077969,0.0022311676293611526,-0.008507019840180874,-0.009498856030404568,-0.00730262091383338,0.023494811728596687,-0.02229595184326172,-0.008107637986540794,-0.017410600557923317,-0.026097094640135765,0.020844772458076477,0.08069592714309692,0.009245751425623894,0.018015040084719658,-0.011585173197090626,-0.0014400816289708018,-0.05831090733408928,0.01690424606204033,0.03860136494040489,-0.007878134027123451,-0.02542887255549431,-0.04046555608510971,0.004533789586275816,-0.045327216386795044,-0.028608324006199837,0.03979050740599632,0.07800877094268799,-0.02489004097878933,0.036507025361061096,0.04323895275592804,-0.04987349361181259,0.015427350997924805,0.038944777101278305,-0.10885854065418243,-0.00764327822253108,0.025349726900458336,0.04820325970649719,-0.003570159198716283,-0.025854943320155144,0.013369564898312092,-0.006386869121342897,0.0022441712208092213,-0.005064765457063913,-0.02077670395374298,-0.016573265194892883,0.05877517908811569,-0.026703935116529465,-0.020758982747793198,-0.004850031342357397,-0.04696038365364075,0.024687103927135468,0.025767775252461433,-0.021830322220921516,-0.05106139928102493,0.04615575447678566,0.04624887555837631,0.0043965973891317844,0.03469054773449898,0.01719174161553383,-0.022022774443030357,-0.035551972687244415,0.008075672201812267,0.08841563016176224,-0.00854748860001564,-0.027144867926836014,0.019568707793951035,-0.022463465109467506,0.02929013967514038,0.0161057710647583,-0.003402956062927842,-0.011495416983962059,0.005630648694932461,-0.04459153488278389,0.07600371539592743,0.0777164027094841,-0.0069474466145038605,0.13161560893058777,0.03072713501751423,0.021061601117253304,-0.008212006650865078,0.033828675746917725,-0.0020615113899111748,0.03201958164572716,-0.009568559005856514,0.03034975938498974,0.00015228793199639767,0.039056044071912766,0.03593011945486069,0.024512553587555885,0.06780164688825607,0.008029049262404442,0.0517156720161438,0.015194697305560112,-0.009959764778614044,-0.02915722131729126,0.008032017387449741,0.013417603448033333,-0.02236587181687355,-0.04412279278039932,-0.008132086135447025,-0.024081749841570854,-0.020657338201999664,-0.024244895204901695,0.0383647195994854,0.09522131085395813,0.003828509943559766,0.0060561662539839745,0.006302574183791876,-0.10992550104856491,0.004921705462038517,-0.046376295387744904,0.09898850321769714,0.0018870980711653829,-0.04283469170331955,-0.01774376817047596,0.004731783177703619,0.04390016570687294,-0.020420920103788376,0.07071688771247864,-0.03766649588942528,-0.017348024994134903,0.0050736539997160435,-0.03338773176074028,0.04420418292284012,0.049794506281614304,-0.03684088587760925,-0.026096221059560776,0.021771905943751335,-0.022784603759646416,0.006370697636157274,-0.030843885615468025,0.01702750287950039,0.029635179787874222,-0.014625504612922668,-0.06424606591463089,0.03440440073609352,0.02290003001689911,-0.015032391063869,0.022552046924829483,-0.04073565825819969,-0.00006609605043195188,-0.052935872226953506,0.045920029282569885,-0.036545395851135254,0.04549292474985123,-0.02018018066883087,-0.029778718948364258,-0.004896074533462524,-0.058278124779462814,0.0202184971421957,-0.01327549945563078,0.02595360204577446,-0.030989021062850952,-0.0013555350014939904,-0.03161236643791199,-0.008125491440296173,-0.02689424157142639,0.01926295831799507,-0.005586685612797737,-0.005035922862589359,0.0023695139680057764,0.040400292724370956,0.07231757044792175,0.021018294617533684,0.014085784554481506,-0.022332817316055298,0.027211392298340797,-0.011512561701238155,-0.006298864725977182,0.07484088838100433,-0.0443795807659626,0.06009665131568909,0.010201966390013695,-0.02364599145948887,-0.007546635344624519,0.015186365693807602,-0.0019129789434373379,0.01960546150803566,-0.05675070360302925,-0.017081251367926598,-0.011320680379867554,-0.04202204942703247,0.0034582107327878475,-0.07679489254951477,-0.02635025605559349,-0.0012552241096273065,0.011975941248238087,0.009875134564936161,-0.01621563918888569,0.04219219833612442,0.02884017489850521,-0.0033023024443536997,-0.03868234530091286,-0.002199484733864665,-0.020588474348187447,-0.10002486407756805,-0.02493794448673725,-0.02845137193799019,0.06176691874861717,-0.008417253382503986,-0.04572354257106781,0.011370804160833359,0.0518430657684803,0.014590634033083916,-0.016677837818861008,-0.044024981558322906,0.05010519176721573,0.003024717327207327,-0.04065674915909767,-0.014982098713517189,-0.04187450557947159,-0.03473370522260666,0.01419712696224451,0.045554064214229584,0.0048601566813886166,0.03422929719090462,-0.01984214596450329,0.04800312966108322,0.026624755933880806,-0.01806912198662758,-0.003260705154389143,0.001575426897034049,-0.058910828083753586,0.00012787195737473667,0.042037442326545715,0.02818807028234005,-0.011109696701169014,-0.0024668665137141943,0.031163949519395828,0.03247695788741112,-0.013097123242914677,-0.0024654152803122997,0.028834233060479164,-0.0320705808699131,0.04984278976917267,-0.030131293460726738,0.049880605190992355,0.04751954600214958,-0.059079647064208984,-0.04773761332035065,0.023333530873060226,-0.01282459869980812,-0.031687840819358826,0.032813217490911484,-0.008174508810043335,-0.007054117973893881,0.001430729404091835,-0.06098729744553566,0.011782952584326267,0.07577572762966156,-0.03869997337460518,0.00688736280426383,-0.018006762489676476,0.03574015200138092,0.0544513463973999,0.009023740887641907,0.020382367074489594,-0.05793856084346771,0.01887649856507778,0.023100119084119797,-0.007135332096368074,-0.009004238061606884,-0.084872305393219,-0.007143833674490452,0.015249195508658886,-0.01645292341709137,0.022657161578536034,0.00676172599196434,-0.007963177748024464,-0.013688147999346256,-0.0016810860252007842,0.04594466835260391,-0.0063684117048978806,0.022420460358262062,-0.04911123961210251,-0.0015244028763845563,-0.026873882859945297,0.011394795961678028,0.00015734480984974653,-0.07241833209991455,0.008807779289782047,0.010437780991196632,-0.007253975607454777,0.019046202301979065,-0.00837851781398058,0.008480135351419449,-0.017321188002824783,-0.009390455670654774,0.030787916854023933,0.029328005388379097,-0.012119312770664692,-0.01525733433663845,-0.013963572680950165,-0.008746692910790443,-0.005804730579257011,0.006111922208219767,0.04322353005409241,-0.037819698452949524,0.021544422954320908,0.013272375799715519,-0.038002241402864456,-0.03300260752439499,-0.017490314319729805,-0.04845205694437027,0.040929775685071945,-0.0006921172607690096,-0.02452828176319599,-0.012668255716562271,-0.03411496803164482,-0.03354152664542198,0.048064373433589935,-0.06221675127744675,-0.031853679567575455,0.02844761684536934,-0.052079495042562485,0.022693932056427002,0.0409240759909153,-0.11594624817371368,-0.019857659935951233,-0.0845588892698288,-0.021951520815491676,-0.01750141568481922,0.017852971330285072,0.014222798869013786,-0.02600046433508396,-0.00552406208589673,0.02667185477912426,-0.021011535078287125,-0.0021922725718468428,-0.009268313646316528,0.05571257323026657,0.01631763204932213,0.009275699965655804,0.046600040048360825,0.005135523620992899,-0.10460842400789261,0.021933462470769882,0.025197790935635567,-0.008361711166799068,0.015049435198307037,0.02476772665977478,-0.008689106442034245,0.02951209619641304,0.02171248570084572,-0.0025044146459549665,0.08495044708251953,0.02448100782930851,0.054808709770441055,-0.03096010722219944,-0.006612451747059822,-0.060065969824790955,-0.03160673379898071,0.002852470614016056,0.02675895020365715,-0.0016392070101574063,-0.01503217313438654,0.015897301957011223,-0.03329774737358093,-0.01026194915175438,-0.005276944953948259,-0.035192351788282394,-0.0775536373257637,0.046493176370859146,-0.023809371516108513,-0.03240986913442612,-0.05547836050391197,0.07535496354103088,0.028762446716427803,-0.020831674337387085,-0.01638495922088623,0.0061949375085532665,-0.009179603308439255,0.014335325919091702,-0.003155300859361887,0.010838804766535759,0.01297285407781601,0.03600996360182762,-0.044546473771333694,0.030683495104312897,-0.055476635694503784,0.03350939229130745,0.067450150847435,-0.013864160515367985,-0.05728868395090103,-0.001978693064302206,0.008407370187342167,-0.010734165087342262,0.061662811785936356,0.02329069934785366,0.01453837938606739,-0.017530236393213272,-0.04581207036972046,0.0029695420525968075,0.020464427769184113,0.05780560523271561,-0.028279194608330727,0.009663507342338562,0.03063994273543358,-0.00024427109747193754,-0.022344090044498444,-0.0005205631023272872,0.028478847816586494,0.01965096779167652,0.012629919685423374,0.04820209741592407,-0.01512489840388298,-0.0493759848177433,-7.073064119596909e-33,0.004868812393397093,0.022539274767041206,-0.01921791397035122,0.011124800890684128,-0.002600985812023282,-0.018300246447324753,-0.0160070788115263,-0.041982609778642654,-0.021161280572414398,0.006992439739406109,-0.03714536502957344,-0.0005063900025561452,0.025377826765179634,-0.01020182203501463,0.044671181589365005,-0.06873100996017456,0.048846617341041565,-0.011057927273213863,0.0368754044175148,0.018333446234464645,-0.08263148367404938,0.026984931901097298,0.012375965714454651,0.04629362002015114,0.0018955495906993747,0.0037534674629569054,-0.051575638353824615,0.023907139897346497,0.06267356127500534,0.034567512571811676,-0.03641136363148689,-0.016067594289779663,-0.011557184159755707,-0.03410445898771286,-0.007161707617342472,-0.03121243417263031,-0.03878655657172203,-0.006990406662225723,0.011941851116716862,-0.0049849567003548145,0.014603703282773495,0.018920278176665306,0.03935152292251587,-0.003378554480150342,-0.05243963375687599,0.01967223547399044,0.015372732654213905,-0.047699205577373505,-0.01891849748790264,-0.011951114051043987,0.038683872669935226,-0.0018349481979385018,-0.01267961971461773,0.0711875632405281,0.031343307346105576,0.03949616476893425,0.048024486750364304,-0.04443025216460228,-0.06536869704723358,0.03383843973278999,-0.05449756979942322,-0.013360121287405491,0.008169819600880146,-0.05130523443222046,0.010432173497974873,0.005857647396624088,-0.053313881158828735,-0.004859479609876871,0.029172714799642563,0.029230181127786636,-0.030266284942626953,0.05326688662171364,-0.031002353876829147,-0.004241614136844873,-0.04165847972035408,0.017031505703926086,-0.016217438504099846,0.01556401140987873,0.020213555544614792,0.09009241312742233,-0.011982284486293793,0.007833024486899376,-0.010691717267036438,0.04093671217560768,0.035771287977695465,0.03161824867129326,0.001063662813976407,-0.04425254836678505,0.02358597330749035,0.014222834259271622,0.00774746760725975,0.02544308453798294,-0.06568220257759094,0.0024743275716900826,-0.08397660404443741,0.019849494099617004,0.05619117245078087,0.05992109328508377,0.024879733100533485,-0.0636485368013382,0.045033153146505356,0.026814866811037064,-0.015160256065428257,-0.05590766295790672,-0.000815900566522032,0.00023897372011560947,-0.005372378509491682,0.01381692010909319,-0.043687932193279266,-0.0006777564994990826,0.030067216604948044,0.01518200058490038,0.002339217346161604,-0.05527651682496071,-0.012267185375094414,-0.010255100205540657,-0.011707610450685024,0.0064125144854187965,0.04257981851696968,0.022841691970825195,0.018071886152029037,-0.009947949089109898,0.029810013249516487,0.02206328511238098,0.04522136226296425,-0.012010241858661175,-0.009017601609230042,0.004163870122283697,0.030333615839481354,-0.0033872416242957115,-0.000021666575776180252,0.010316452942788601,3.1799086741557403e-7,0.018393099308013916,0.02988417260348797,-0.029757099226117134,0.05080064758658409,-0.03419426456093788,0.009836884215474129,-0.04481325298547745,-0.004225903656333685,-0.010638159699738026,-0.02923453226685524,0.01868765614926815,0.019962675869464874,0.009549799375236034,0.057072319090366364,-0.019607722759246826,-0.07496830821037292,-0.0025278714019805193,-0.04428264871239662,-0.05446642264723778,0.0015140884788706899,0.03233548253774643,0.032555073499679565,0.06734821945428848,-0.0002706035156734288,0.029222678393125534,-0.002348644193261862,-0.02854100428521633,-0.07481642812490463,-0.042912986129522324,-0.011476153507828712,0.034406814724206924,-0.039304714649915695,-0.02286062389612198,-0.05808649957180023,0.015576735138893127,-0.026742417365312576,-0.020571237429976463,-0.018314309418201447,0.0621185377240181,0.04177749529480934,-0.019639775156974792,-0.08001840114593506,0.014459758065640926,-0.07792539149522781,0.027712786570191383,-0.011113251559436321,0.011494474485516548,-0.028389260172843933,0.008332240395247936,0.006981055252254009,0.04991983249783516,0.017868535593152046,-0.004180457908660173,-0.01158059947192669,0.03120419755578041,0.0073408093303442,-0.006680328864604235,0.04418710246682167,0.01546044833958149,0.05190328136086464,-0.028492314741015434,0.001996701117604971,0.0021679934579879045,-0.0015889526112005115,-0.0017466768622398376,0.031871549785137177,-0.012682328931987286,3.0977896758603305e-34,0.013293028809130192,-0.00715595530346036,0.04047681391239166,0.030038297176361084,-0.00843310821801424,-0.04165027290582657,0.05493658035993576,-0.03632271662354469,0.013753031380474567,-0.05024855211377144,-0.034960221499204636]'
SET
  @TechnicalDesignVector_310f2192 = N'[-0.005017781630158424,0.040592584758996964,-0.0316544733941555,-0.03339361026883125,-0.004041107837110758,-0.060061901807785034,0.036366842687129974,0.008742042817175388,-0.04692978784441948,0.002154816873371601,-0.03669653832912445,-0.0001242258003912866,0.040982235223054886,0.17454469203948975,-0.03967546671628952,-0.06280189752578735,-0.016578365117311478,-0.010774659924209118,0.04578658193349838,0.005159992724657059,0.00943556148558855,-0.015106248669326305,-0.0005109939957037568,-0.008769470266997814,0.025887858122587204,-0.010578595101833344,-0.0840531662106514,0.039120517671108246,-0.004535952117294073,-0.10516926646232605,-0.020592564716935158,0.052097681909799576,-0.05569104105234146,-0.02177269011735916,0.0000019235010313423118,-0.0628272071480751,-0.06740102171897888,0.0016991677694022655,0.0006541454931721091,0.08343394100666046,0.11251311004161835,-0.045924391597509384,0.011801369488239288,0.01327082421630621,-0.026045529171824455,-0.06018579378724098,-0.07643619924783707,0.07732119411230087,0.010972714982926846,0.03166992962360382,0.013069739565253258,0.016236567869782448,0.054101862013339996,-0.0207844041287899,-0.009159828536212444,-0.11080768704414368,0.013203076086938381,0.006678071338683367,0.04265201464295387,-0.044606901705265045,-0.016272783279418945,-0.025184953585267067,0.004268666263669729,-0.07912140339612961,-0.02360568754374981,0.020523622632026672,0.009628922678530216,-0.0025492487475275993,-0.025402886793017387,0.0007273944211192429,0.08671959489583969,-0.007500776089727879,-0.022716164588928223,-0.037481244653463364,-0.0084415003657341,-0.09009528160095215,-0.028300244361162186,0.035455163568258286,0.015221676789224148,0.025179803371429443,-0.008225061930716038,0.06943003088235855,-0.07410929352045059,0.06572998315095901,0.03726194053888321,-0.05395810306072235,-0.02259375900030136,-0.04705684259533882,0.015053128823637962,-0.007759204600006342,0.003936021588742733,-0.010953189805150032,-0.015654347836971283,-0.01240429189056158,-0.060025379061698914,-0.019885461777448654,0.0400082990527153,0.009635678492486477,0.002584874862805009,-0.03327824920415878,-0.01412700954824686,0.047456130385398865,0.05172926187515259,0.05280761420726776,0.019591759890317917,0.012393435463309288,-0.016374820843338966,-0.03514241799712181,-0.018817691132426262,0.03939949348568916,0.03651464730501175,0.022771405056118965,-0.01855809986591339,-0.002743800636380911,-0.05833495780825615,0.005904311314225197,-0.026439083740115166,-0.013066043145954609,-0.04439176619052887,0.006711933761835098,0.12845927476882935,0.004264527000486851,0.004341484513133764,0.02132830210030079,-0.022046223282814026,-0.02333887666463852,-0.017292054370045662,0.0028380542062222958,-0.0026687271893024445,-0.02501467615365982,-0.04265996068716049,0.00004409210669109598,0.005588627886027098,-0.037173524498939514,-0.02477305196225643,0.004173174034804106,0.009859043173491955,0.057643454521894455,-0.04989779368042946,-0.03694767877459526,0.012384072877466679,-0.015601783990859985,-0.048672907054424286,0.00829844456166029,-0.03189967945218086,-0.04865972325205803,-0.02408253774046898,0.044818051159381866,0.021237891167402267,-0.018865786492824554,-0.034045297652482986,0.0034342235885560513,-0.014012964442372322,0.018948985263705254,-0.05590970069169998,0.0154416523873806,-0.019041992723941803,0.01458587683737278,-0.005220131948590279,0.07736026495695114,-0.012331303209066391,0.006553683429956436,0.027054132893681526,-0.0037680622190237045,-0.03938468545675278,0.02230807952582836,-0.08671670407056808,0.01867690496146679,0.025618528947234154,-0.005157782230526209,0.0122336745262146,-0.060612939298152924,-0.03273709490895271,0.06496930867433548,0.02594994194805622,-0.031551461666822433,0.059430357068777084,-0.009609743021428585,-0.04206296056509018,-0.021295838057994843,0.03957831487059593,-0.14986199140548706,-0.00819548312574625,-0.015128049068152905,0.03063448704779148,-0.01510221604257822,-0.06580566614866257,-0.009240185841917992,0.02145051769912243,0.01175747625529766,0.002446595346555114,0.023882785812020302,-0.019529616460204124,0.024107057601213455,-0.01717083901166916,-0.006557642947882414,-0.009511427953839302,-0.0654633566737175,0.05529802292585373,0.03910541534423828,-0.02948339469730854,-0.01791384257376194,0.023955844342708588,0.021277982741594315,0.005968200042843819,-0.007696276064962149,-0.006906173657625914,-0.001481714309193194,-0.04577465355396271,0.03532152622938156,0.046389784663915634,0.0008241823525168002,-0.06829840689897537,-0.0038862533401697874,-0.03131198510527611,0.06882230937480927,-0.009448263794183731,0.02814718708395958,-0.014585839584469795,-0.041020750999450684,-0.02943151630461216,0.036462124437093735,0.03577696904540062,-0.006089665926992893,0.0881861224770546,0.011895868927240372,0.010875929147005081,-0.03486311435699463,0.053797803819179535,-0.003365660086274147,-0.016045469790697098,-0.018744442611932755,0.04309427738189697,0.04846855252981186,0.057655930519104004,0.05365872383117676,0.0149783780798316,0.024865977466106415,-0.021312309429049492,0.05206624045968056,-0.026754211634397507,-0.06965815275907516,-0.039546411484479904,0.01539735309779644,0.0291778314858675,0.03556734696030617,-0.03449427708983421,-0.02694735862314701,-0.00797600019723177,-0.021138496696949005,-0.008925599977374077,0.008955690078437328,0.09025200456380844,-0.013413166627287865,-0.018639802932739258,0.051999498158693314,-0.10152502357959747,-0.005130985286086798,-0.056255582720041275,0.08646583557128906,-0.014876415953040123,-0.0033924856688827276,-0.0029086703434586525,-0.006214555352926254,0.06741505861282349,-0.03711852803826332,0.02808677777647972,-0.03897334262728691,-0.008186851628124714,0.018122002482414246,-0.037312112748622894,0.06149916350841522,-0.006684774998575449,-0.03326442092657089,-0.010996670462191105,0.06292477995157242,-0.013233724050223827,-0.0010269703343510628,-0.022414430975914,-0.0037068712990731,0.006966877728700638,-0.01291879266500473,0.006010290700942278,0.028346577659249306,-0.0216958150267601,0.007331931497901678,0.052258413285017014,-0.00809999369084835,-0.05321705713868141,-0.01873627118766308,0.030414516106247902,-0.013321474194526672,0.022440105676651,-0.015029862523078918,-0.0416504368185997,-0.03981335833668709,-0.056032758206129074,0.0255062784999609,-0.0060587660409510136,0.022566750645637512,-0.012912096455693245,-0.004605719819664955,-0.026563426479697227,0.010233979672193527,0.006322626024484634,0.06034417822957039,-0.007023574784398079,0.004626712761819363,-0.03898363560438156,0.0940520167350769,0.031072018668055534,0.005055002868175507,0.010034175589680672,-0.008353392593562603,0.031556449830532074,-0.029369927942752838,0.015117610804736614,0.06068326160311699,0.006075351033359766,0.13028423488140106,-0.007626425940543413,-0.04279760271310806,0.012614605948328972,0.009898549877107143,-0.04782094806432724,0.0021614350844174623,-0.0189101230353117,-0.01628434658050537,0.008394286967813969,-0.01786711812019348,0.017949331551790237,-0.03348361328244209,-0.009822705760598183,-0.02453155256807804,0.02466079220175743,-0.010454180650413036,-0.011292783543467522,0.021889183670282364,0.0090324142947793,-0.02215679921209812,-0.005143577232956886,0.008859383873641491,-0.012531896121799946,-0.03422647714614868,-0.009083721786737442,-0.020599626004695892,0.014585619792342186,0.048579949885606766,-0.09353536367416382,0.057059451937675476,-0.003908799961209297,0.005172778386622667,-0.004262350499629974,-0.022993287071585655,0.03137047961354256,0.0030589874368160963,0.011449615471065044,-0.009021533653140068,-0.01863635703921318,-0.038776945322752,0.0504818819463253,0.009980474598705769,-0.02882656641304493,0.09166114032268524,-0.02049652300775051,0.05089772492647171,0.006075767800211906,-0.014554672874510288,0.026822887361049652,-0.006426481995731592,-0.023698823526501656,-0.003991216886788607,0.031161151826381683,0.03108581341803074,-0.018962237983942032,-0.021551012992858887,0.009157856926321983,0.0014110504416748881,0.0012522729812189937,-0.005626495461910963,0.04973006621003151,-0.013039210811257362,0.08938241004943848,-0.006875277496874332,0.0633251890540123,0.013212869875133038,-0.024818312376737595,-0.04261016100645065,-0.0568259134888649,-0.002441211836412549,0.003772495314478874,0.03426465019583702,0.028727978467941284,-0.004871706012636423,-0.043034669011831284,-0.05060297250747681,0.005282477010041475,0.08385375887155533,0.01860610954463482,-0.007424868643283844,-0.015306086279451847,0.04694943130016327,0.06313752382993698,0.015772206708788872,0.0470811203122139,-0.04465630277991295,-0.00498887849971652,0.03602154180407524,0.009560700505971909,0.02313663251698017,-0.021322285756468773,0.0004435373703017831,-0.017367850989103317,-0.003010521410033107,0.028425639495253563,0.045634880661964417,-0.0043099732138216496,-0.02059302292764187,0.013378074392676353,0.02466948702931404,-0.011701871640980244,0.007059935480356216,0.007279076613485813,0.03659932687878609,-0.005304648075252771,0.003650560975074768,0.012064146809279919,-0.059984106570482254,-0.0168650820851326,0.017607344314455986,0.01873902790248394,0.01900145411491394,-0.03234473988413811,0.02649887092411518,-0.0586426667869091,0.023890206590294838,-0.03315587714314461,-0.008306271396577358,0.04833836108446121,0.009939005598425865,-0.037287380546331406,0.018914775922894478,0.06902516633272171,-0.006874385289847851,0.02353338524699211,0.023731950670480728,-0.013083402067422867,0.03485158085823059,-0.0035138705279678106,-0.009969407692551613,-0.023961341008543968,-0.02272111363708973,-0.030245942994952202,-0.026066642254590988,-0.06121886521577835,-0.04579449072480202,-0.004060651175677776,-0.04142952710390091,-0.016048263758420944,-0.009956508874893188,-0.01404179073870182,0.03446140140295029,-0.04658781737089157,-0.033610060811042786,0.0600508376955986,-0.058635495603084564,-0.06255834549665451,0.006984165403991938,-0.008995535783469677,-0.02716006338596344,0.07653499394655228,0.013289145193994045,-0.022023672237992287,-0.0018553829286247492,0.07675429433584213,0.028896614909172058,0.02303590252995491,0.0022074158769100904,0.011356417089700699,0.017291540279984474,0.026374174281954765,0.0782465860247612,0.024918165057897568,-0.13221518695354462,0.015810173004865646,0.028101691976189613,-0.05196315795183182,-0.02910885028541088,-0.010826637968420982,-0.009352682158350945,0.044379543513059616,0.007004324812442064,0.01980246976017952,0.03945625573396683,0.034220751374959946,0.04437616840004921,0.01176136452704668,-0.010079103522002697,0.03431876748800278,0.02290416695177555,-0.022789722308516502,0.0027133100666105747,-0.0007179714739322662,0.014840381219983101,-0.02867489494383335,0.03164902701973915,-0.0104182418435812,0.03702574968338013,-0.0371592678129673,-0.022558199241757393,0.03841579705476761,-0.034027907997369766,-0.007488974370062351,-0.030820472165942192,0.034677039831876755,0.07299064844846725,-0.029544441029429436,-0.014115995727479458,-0.01366796437650919,0.0133973965421319,-0.0018873302033171058,-0.004799144808202982,0.029219521209597588,-0.00803429912775755,0.061549630016088486,-0.03716101497411728,0.017229322344064713,-0.033595550805330276,0.015610910020768642,0.040739238262176514,0.002545304363593459,-0.001717813196592033,0.012292233295738697,0.013438536785542965,-0.0046587069518864155,0.00714610842987895,-0.007908723317086697,-0.02020902931690216,-0.0032691047526896,-0.0012787255691364408,-0.008003385737538338,0.045839548110961914,0.050880443304777145,-0.027877232059836388,0.005831827875226736,0.022898703813552856,-0.03918546438217163,-0.0314454585313797,-0.030419254675507545,0.057279400527477264,-0.021609006449580193,0.006116956938058138,0.02300783060491085,-0.033422328531742096,-0.043388623744249344,-6.152931222811378e-33,-0.01968424767255783,0.019066864624619484,-0.026103554293513298,-0.008293727412819862,-0.007256269454956055,-0.004960039630532265,-0.010494288988411427,-0.05625429376959801,0.00406346982344985,-0.008479304611682892,-0.02381751872599125,-0.04662792384624481,0.016177251935005188,-0.009938809089362621,0.04152916744351387,-0.014976085163652897,-0.01326577365398407,0.0177657101303339,0.011821340769529343,-0.027294108644127846,-0.05004202947020531,0.045861419290304184,-0.012704507447779179,0.044651973992586136,-0.010513263754546642,0.030750134959816933,-0.038528766483068466,0.029677128419280052,0.017691489309072495,0.010781249962747097,0.008997718803584576,-0.05273732542991638,-0.026362935081124306,0.004248715937137604,-0.008673339150846004,-0.0727662742137909,-0.016668343916535378,-0.0014501026598736644,-0.021558132022619247,-0.016479676589369774,0.026427945122122765,0.035873908549547195,0.022793946787714958,-0.007905474863946438,-0.027382371947169304,-0.0023206197656691074,0.01513905543833971,-0.010232577100396156,-0.02232685498893261,0.03949381038546562,0.011203386820852757,0.012449546717107296,0.02061564102768898,0.06929706782102585,0.023524217307567596,-0.01321933139115572,0.043042927980422974,-0.009674042463302612,-0.04564827308058739,0.017580663785338402,-0.03762667626142502,-0.019306888803839684,0.02886245958507061,0.0013946985127404332,0.045334476977586746,-0.020271727815270424,0.014805424958467484,0.06561114639043808,0.0014981059357523918,-0.06913936883211136,-0.010666613467037678,-0.042718008160591125,-0.02727726846933365,-0.042422935366630554,-0.014034687541425228,0.03674709051847458,0.009381460957229137,-0.01589774154126644,0.04672694206237793,0.07280776649713516,-0.029860882088541985,0.012648917734622955,0.0027021770365536213,0.03715534135699272,0.019188130274415016,-0.037563472986221313,0.012018643319606781,-0.016531260684132576,0.011989663355052471,0.005894502624869347,-0.009680541232228279,0.012541357427835464,-0.052214592695236206,0.020201556384563446,-0.04032571241259575,-0.034526072442531586,0.05553769692778587,0.0794467180967331,-0.022651085630059242,-0.018872035667300224,0.014608597382903099,0.0194065161049366,-0.009062631987035275,-0.05007103458046913,0.004989948123693466,0.01873144507408142,0.012319493107497692,0.0055587138049304485,-0.01792771741747856,0.012611884623765945,0.017397642135620117,0.009451608173549175,0.0006517909350804985,0.023615896701812744,-0.02129031904041767,-0.001570098684169352,-0.0022690268233418465,-0.05918765068054199,0.031035160645842552,0.04163699969649315,0.024410521611571312,-0.0017124406294897199,0.03376683220267296,0.0058242203667759895,0.025062385946512222,-0.01978975348174572,-0.008272692561149597,-0.05772174522280693,-0.02258514240384102,0.022560657933354378,0.006055170204490423,0.029334785416722298,2.928462663476239e-7,0.053818557411432266,0.029830168932676315,-0.05533796176314354,0.08575646579265594,-0.048187799751758575,-0.023568788543343544,-0.03555712103843689,0.005165466573089361,-0.013834457844495773,-0.024296527728438377,0.037457965314388275,0.006674247328191996,0.02409914694726467,0.032786283642053604,-0.0222393237054348,-0.07422894984483719,0.0053435820154845715,-0.039108455181121826,-0.04626481607556343,-0.020009586587548256,-0.0008601602748967707,0.041369423270225525,0.087457574903965,0.01503643300384283,0.023165885359048843,-0.012429662980139256,-0.002362738363444805,-0.07038293778896332,0.005015292204916477,0.006322827655822039,0.03300844505429268,-0.06585180014371872,-0.05788717791438103,-0.011793578043580055,-0.0032376565504819155,0.017121151089668274,-0.02456943318247795,0.00798339955508709,0.05236946418881416,0.08321603387594223,0.01509220339357853,-0.06048794835805893,-0.0110291987657547,-0.05000941827893257,-0.003722849301993847,0.011903246864676476,-0.0033143539912998676,-0.045016106218099594,0.006142025347799063,0.01646203175187111,0.03173132613301277,0.007788202725350857,0.03444638475775719,-0.030973581597208977,0.014224478974938393,-0.006731415167450905,0.01588684692978859,0.03424890711903572,0.003128970740363002,0.020356591790914536,-0.02504066377878189,-0.009852038696408272,0.0472957119345665,0.04002445563673973,0.06530940532684326,-0.06536228954792023,0.029626164585351944,3.465803437146691e-34,0.05332436040043831,-0.022409481927752495,0.028246650472283363,0.030240952968597412,0.028359413146972656,-0.011296551674604416,0.04434769228100777,-0.030136268585920334,0.005182609893381596,-0.07698468118906021,-0.015136322937905788]'
SET
  @HasCustomProps_310f2192 = 1
SET
  @HasCustomEvents_310f2192 = 0
SET
  @RequiresData_310f2192 = 1
SET
  @DependencyCount_310f2192 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_310f2192 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_310f2192 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_310f2192 = 0
SET
  @ID_310f2192 = '24F6BC4C-E8C1-4757-8C95-3CC65FF9B0B7'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_310f2192,
  @Name = @Name_310f2192,
  @Version = @Version_310f2192,
  @VersionSequence = @VersionSequence_310f2192,
  @Title = @Title_310f2192,
  @Description = @Description_310f2192,
  @Type = @Type_310f2192,
  @Status = @Status_310f2192,
  @DeveloperName = @DeveloperName_310f2192,
  @DeveloperEmail = @DeveloperEmail_310f2192,
  @DeveloperOrganization = @DeveloperOrganization_310f2192,
  @SourceRegistryID = @SourceRegistryID_310f2192,
  @ReplicatedAt = @ReplicatedAt_310f2192,
  @LastSyncedAt = @LastSyncedAt_310f2192,
  @Specification = @Specification_310f2192,
  @FunctionalRequirements = @FunctionalRequirements_310f2192,
  @TechnicalDesign = @TechnicalDesign_310f2192,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_310f2192,
  @TechnicalDesignVector = @TechnicalDesignVector_310f2192,
  @HasCustomProps = @HasCustomProps_310f2192,
  @HasCustomEvents = @HasCustomEvents_310f2192,
  @RequiresData = @RequiresData_310f2192,
  @DependencyCount = @DependencyCount_310f2192,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_310f2192,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_310f2192,
  @HasRequiredCustomProps = @HasRequiredCustomProps_310f2192,
  @ID = @ID_310f2192;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_c8caccb4 NVARCHAR(MAX),
@Name_c8caccb4 NVARCHAR(500),
@Version_c8caccb4 NVARCHAR(50),
@VersionSequence_c8caccb4 INT,
@Title_c8caccb4 NVARCHAR(1000),
@Description_c8caccb4 NVARCHAR(MAX),
@Type_c8caccb4 NVARCHAR(255),
@Status_c8caccb4 NVARCHAR(50),
@DeveloperName_c8caccb4 NVARCHAR(255),
@DeveloperEmail_c8caccb4 NVARCHAR(255),
@DeveloperOrganization_c8caccb4 NVARCHAR(255),
@SourceRegistryID_c8caccb4 UNIQUEIDENTIFIER,
@ReplicatedAt_c8caccb4 DATETIMEOFFSET,
@LastSyncedAt_c8caccb4 DATETIMEOFFSET,
@Specification_c8caccb4 NVARCHAR(MAX),
@FunctionalRequirements_c8caccb4 NVARCHAR(MAX),
@TechnicalDesign_c8caccb4 NVARCHAR(MAX),
@FunctionalRequirementsVector_c8caccb4 NVARCHAR(MAX),
@TechnicalDesignVector_c8caccb4 NVARCHAR(MAX),
@HasCustomProps_c8caccb4 BIT,
@HasCustomEvents_c8caccb4 BIT,
@RequiresData_c8caccb4 BIT,
@DependencyCount_c8caccb4 INT,
@TechnicalDesignVectorEmbeddingModelID_c8caccb4 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_c8caccb4 NVARCHAR(MAX),
@HasRequiredCustomProps_c8caccb4 BIT,
@ID_c8caccb4 UNIQUEIDENTIFIER
SET
  @Namespace_c8caccb4 = N'CRM/Sales'
SET
  @Name_c8caccb4 = N'DealsByStageBoard'
SET
  @Version_c8caccb4 = N'1.0.0'
SET
  @VersionSequence_c8caccb4 = 1
SET
  @Title_c8caccb4 = N'Deals by Stage Board'
SET
  @Description_c8caccb4 = N'Kanban-style board showing deals grouped by stage with drag-and-drop support'
SET
  @Type_c8caccb4 = N'Dashboard'
SET
  @Status_c8caccb4 = N'Published'
SET
  @Specification_c8caccb4 = N'{"name":"DealsByStageBoard","title":"Deals by Stage Board","description":"Kanban-style board showing deals grouped by stage with drag-and-drop support","type":"component","location":"embedded","namespace":"CRM/Sales","functionalRequirements":"## Kanban Board for Deal Pipeline\n\n### Core Features\n- Display deals grouped by stage in columns\n- Show deal cards with key information\n- Display total value per stage\n- Count of deals per stage\n- Visual indicators for deal priority\n\n### Card Information\n- Deal name\n- Account name\n- Amount formatted as currency\n- Days to close\n- Probability indicator\n\n### Visual Design\n- Column headers with stage colors\n- Card shadows and hover effects\n- Responsive column layout\n- Scrollable columns for many deals","dataRequirements":{"mode":"views","description":"Fetches all deals for kanban board display","entities":[{"name":"Deals","description":"CRM deals grouped by stage in kanban columns","displayFields":["ID","DealName","AccountID","Account","Stage","Amount","Probability","CloseDate","DealSource","NextStep"],"filterFields":["Stage"],"sortFields":["Stage","CloseDate","Amount"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Groups deals by stage for kanban board visualization"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Data Loading\n- Single RunView call to load all deals\n- Client-side grouping by Stage\n- Calculate totals per stage\n\n### Layout\n- Flexbox for horizontal column layout\n- Fixed height columns with scroll\n- Responsive breakpoints for mobile\n\n### Stage Order\n1. Prospecting\n2. Qualification\n3. Proposal\n4. Negotiation\n5. Closed Won\n6. Closed Lost","properties":[],"exampleUsage":"<DealsByStageBoard\n  showClosedDeals={false}\n  onDealClick={handleDealClick}\n/>","code":"function DealsByStageBoard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [deals, setDeals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showClosedDeals, setShowClosedDeals] = useState(savedUserSettings?.showClosedDeals || false);\n  const [dealsByStage, setDealsByStage] = useState({});\n  const [dateFrom, setDateFrom] = useState(savedUserSettings?.dateFrom || '''');\n  const [dateTo, setDateTo] = useState(savedUserSettings?.dateTo || '''');\n  const [selectedDeal, setSelectedDeal] = useState(null);\n\n  // Define stage order and colors\n  const stages = [\n    { name: ''Prospecting'', color: ''#6B7280'', bgColor: ''#F3F4F6'' },\n    { name: ''Qualification'', color: ''#2563EB'', bgColor: ''#DBEAFE'' },\n    { name: ''Proposal'', color: ''#D97706'', bgColor: ''#FEF3C7'' },\n    { name: ''Negotiation'', color: ''#EA580C'', bgColor: ''#FED7AA'' },\n    { name: ''Closed Won'', color: ''#059669'', bgColor: ''#D1FAE5'' },\n    { name: ''Closed Lost'', color: ''#DC2626'', bgColor: ''#FEE2E2'' }\n  ];\n\n  useEffect(() => {\n    loadDeals();\n  }, [dateFrom, dateTo]);\n\n  useEffect(() => {\n    groupDealsByStage();\n  }, [deals, showClosedDeals]);\n\n  const loadDeals = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Build filter based on date range\n      let filters = [];\n      if (dateFrom) {\n        filters.push(`CloseDate >= ''$' + '{dateFrom}''`);\n      }\n      if (dateTo) {\n        filters.push(`CloseDate <= ''$' + '{dateTo}''`);\n      }\n      const extraFilter = filters.length > 0 ? filters.join('' AND '') : '''';\n      \n      const result = await utilities.rv.RunView({\n        EntityName: ''Deals'',\n        OrderBy: ''CloseDate ASC'',\n        ExtraFilter: extraFilter\n      });\n\n      if (result.Success) {\n        setDeals(result.Results || []);\n      } else {\n        setError(result.ErrorMessage || ''Failed to load deals'');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const groupDealsByStage = () => {\n    const grouped = {};\n    stages.forEach(stage => {\n      grouped[stage.name] = [];\n    });\n\n    deals.forEach(deal => {\n      if (grouped[deal.Stage]) {\n        grouped[deal.Stage].push(deal);\n      }\n    });\n\n    setDealsByStage(grouped);\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat(''en-US'', {\n      style: ''currency'',\n      currency: ''USD'',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount || 0);\n  };\n\n  const getDaysToClose = (closeDate) => {\n    if (!closeDate) return null;\n    const close = new Date(closeDate);\n    const today = new Date();\n    const days = Math.ceil((close - today) / (1000 * 60 * 60 * 24));\n    return days;\n  };\n\n  const calculateStageTotal = (stageName) => {\n    const stageDeals = dealsByStage[stageName] || [];\n    return stageDeals.reduce((sum, deal) => sum + (deal.Amount || 0), 0);\n  };\n\n  const toggleClosedDeals = () => {\n    const newValue = !showClosedDeals;\n    setShowClosedDeals(newValue);\n    onSaveUserSettings({ ...savedUserSettings, showClosedDeals: newValue });\n  };\n\n  const handleDateChange = (field, value) => {\n    if (field === ''from'') {\n      setDateFrom(value);\n      onSaveUserSettings({ ...savedUserSettings, dateFrom: value });\n    } else {\n      setDateTo(value);\n      onSaveUserSettings({ ...savedUserSettings, dateTo: value });\n    }\n  };\n\n  const clearFilters = () => {\n    setDateFrom('''');\n    setDateTo('''');\n    onSaveUserSettings({ ...savedUserSettings, dateFrom: '''', dateTo: '''' });\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading deals...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''20px'', backgroundColor: ''#FEE2E2'', borderRadius: ''8px'', margin: ''20px'' }}>\n        <div style={{ color: ''#991B1B'', fontWeight: ''bold'' }}>Error loading deals</div>\n        <div style={{ color: ''#DC2626'', marginTop: ''8px'' }}>{error}</div>\n      </div>\n    );\n  }\n\n  const visibleStages = showClosedDeals ? stages : stages.filter(s => !s.name.includes(''Closed''));\n\n  return (\n    <div style={{ padding: ''20px'', height: ''100%'', display: ''flex'', flexDirection: ''column'' }}>\n      <div style={{ marginBottom: ''20px'' }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''16px'' }}>\n          <h2 style={{ fontSize: ''24px'', fontWeight: ''bold'', margin: 0 }}>Deal Pipeline</h2>\n          <div style={{ display: ''flex'', gap: ''12px'', alignItems: ''center'' }}>\n            <label style={{ display: ''flex'', alignItems: ''center'', cursor: ''pointer'' }}>\n              <input\n                type=\"checkbox\"\n                checked={showClosedDeals}\n                onChange={toggleClosedDeals}\n                style={{ marginRight: ''8px'' }}\n              />\n              <span style={{ fontSize: ''14px'' }}>Show Closed Deals</span>\n            </label>\n            <button\n              onClick={loadDeals}\n              style={{\n                padding: ''8px 16px'',\n                backgroundColor: ''#3B82F6'',\n                color: ''white'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              Refresh\n            </button>\n          </div>\n        </div>\n        \n        <div style={{ \n          display: ''flex'', \n          gap: ''12px'', \n          alignItems: ''center'',\n          padding: ''12px'',\n          backgroundColor: ''#F9FAFB'',\n          borderRadius: ''8px''\n        }}>\n          <label style={{ fontSize: ''14px'', color: ''#374151'' }}>Close Date:</label>\n          <input\n            type=\"date\"\n            value={dateFrom}\n            onChange={(e) => handleDateChange(''from'', e.target.value)}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px'',\n              fontSize: ''14px''\n            }}\n            placeholder=\"From\"\n          />\n          <span style={{ color: ''#6B7280'' }}>to</span>\n          <input\n            type=\"date\"\n            value={dateTo}\n            onChange={(e) => handleDateChange(''to'', e.target.value)}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px'',\n              fontSize: ''14px''\n            }}\n            placeholder=\"To\"\n          />\n          {(dateFrom || dateTo) && (\n            <button\n              onClick={clearFilters}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: ''#EF4444'',\n                color: ''white'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              Clear\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div style={{ \n        display: ''flex'', \n        gap: ''16px'', \n        overflowX: ''auto'', \n        flex: 1,\n        paddingBottom: ''20px''\n      }}>\n        {visibleStages.map(stage => {\n          const stageDeals = dealsByStage[stage.name] || [];\n          const stageTotal = calculateStageTotal(stage.name);\n          \n          return (\n            <div\n              key={stage.name}\n              style={{\n                minWidth: ''300px'',\n                maxWidth: ''300px'',\n                display: ''flex'',\n                flexDirection: ''column'',\n                backgroundColor: ''#F9FAFB'',\n                borderRadius: ''8px'',\n                overflow: ''hidden''\n              }}\n            >\n              <div style={{\n                padding: ''16px'',\n                backgroundColor: stage.bgColor,\n                borderBottom: `3px solid $' + '{stage.color}`\n              }}>\n                <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n                  <h3 style={{ \n                    fontSize: ''16px'', \n                    fontWeight: ''600'', \n                    color: stage.color,\n                    margin: 0 \n                  }}>\n                    {stage.name}\n                  </h3>\n                  <span style={{\n                    backgroundColor: ''white'',\n                    color: stage.color,\n                    padding: ''4px 8px'',\n                    borderRadius: ''12px'',\n                    fontSize: ''12px'',\n                    fontWeight: ''600''\n                  }}>\n                    {stageDeals.length}\n                  </span>\n                </div>\n                <div style={{ \n                  marginTop: ''8px'', \n                  fontSize: ''18px'', \n                  fontWeight: ''bold'',\n                  color: ''#111827''\n                }}>\n                  {formatCurrency(stageTotal)}\n                </div>\n              </div>\n\n              <div style={{\n                flex: 1,\n                overflowY: ''auto'',\n                padding: ''12px''\n              }}>\n                {stageDeals.map(deal => {\n                  const daysToClose = getDaysToClose(deal.CloseDate);\n                  \n                  return (\n                    <div\n                      key={deal.ID}\n                      style={{\n                        backgroundColor: ''white'',\n                        borderRadius: ''6px'',\n                        padding: ''12px'',\n                        marginBottom: ''8px'',\n                        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)'',\n                        cursor: ''pointer'',\n                        transition: ''transform 0.2s, box-shadow 0.2s'',\n                        border: ''1px solid #E5E7EB''\n                      }}\n                      onClick={() => setSelectedDeal(deal)}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.transform = ''translateY(-2px)'';\n                        e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0, 0, 0, 0.1)'';\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.transform = ''translateY(0)'';\n                        e.currentTarget.style.boxShadow = ''0 1px 3px rgba(0, 0, 0, 0.1)'';\n                      }}\n                    >\n                      <div style={{ \n                        fontSize: ''14px'', \n                        fontWeight: ''600'', \n                        color: ''#111827'',\n                        marginBottom: ''8px'',\n                        overflow: ''hidden'',\n                        textOverflow: ''ellipsis'',\n                        whiteSpace: ''nowrap''\n                      }}>\n                        {deal.DealName}\n                      </div>\n                      \n                      <div style={{ \n                        fontSize: ''18px'', \n                        fontWeight: ''bold'', \n                        color: ''#059669'',\n                        marginBottom: ''8px''\n                      }}>\n                        {formatCurrency(deal.Amount)}\n                      </div>\n\n                      <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''6px'' }}>\n                        <div style={{ display: ''flex'', alignItems: ''center'', gap: ''4px'' }}>\n                          <span style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Probability:</span>\n                          <div style={{ \n                            width: ''60px'', \n                            height: ''4px'', \n                            backgroundColor: ''#E5E7EB'', \n                            borderRadius: ''2px'',\n                            position: ''relative''\n                          }}>\n                            <div style={{ \n                              width: `$' + '{deal.Probability}%`, \n                              height: ''100%'', \n                              backgroundColor: deal.Probability > 75 ? ''#10B981'' : deal.Probability > 50 ? ''#F59E0B'' : ''#6B7280'',\n                              borderRadius: ''2px''\n                            }} />\n                          </div>\n                          <span style={{ fontSize: ''12px'', fontWeight: ''600'', color: ''#374151'' }}>\n                            {deal.Probability}%\n                          </span>\n                        </div>\n                      </div>\n\n                      {daysToClose !== null && (\n                        <div style={{\n                          fontSize: ''11px'',\n                          padding: ''4px 6px'',\n                          borderRadius: ''4px'',\n                          display: ''inline-block'',\n                          backgroundColor: daysToClose < 0 ? ''#FEE2E2'' : daysToClose < 7 ? ''#FEF3C7'' : daysToClose < 30 ? ''#DBEAFE'' : ''#F3F4F6'',\n                          color: daysToClose < 0 ? ''#991B1B'' : daysToClose < 7 ? ''#92400E'' : daysToClose < 30 ? ''#1E40AF'' : ''#6B7280''\n                        }}>\n                          {daysToClose < 0 ? `$' + '{Math.abs(daysToClose)} days overdue` : `$' + '{daysToClose} days to close`}\n                        </div>\n                      )}\n\n                      {deal.NextStep && (\n                        <div style={{\n                          marginTop: ''8px'',\n                          fontSize: ''11px'',\n                          color: ''#6B7280'',\n                          fontStyle: ''italic'',\n                          overflow: ''hidden'',\n                          textOverflow: ''ellipsis'',\n                          whiteSpace: ''nowrap''\n                        }}>\n                          Next: {deal.NextStep}\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n                \n                {stageDeals.length === 0 && (\n                  <div style={{\n                    padding: ''20px'',\n                    textAlign: ''center'',\n                    color: ''#9CA3AF'',\n                    fontSize: ''14px''\n                  }}>\n                    No deals in this stage\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div style={{ \n        marginTop: ''20px'', \n        padding: ''16px'', \n        backgroundColor: ''#F9FAFB'', \n        borderRadius: ''8px'',\n        display: ''flex'',\n        justifyContent: ''space-around''\n      }}>\n        <div style={{ textAlign: ''center'' }}>\n          <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Total Deals</div>\n          <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>{deals.length}</div>\n        </div>\n        <div style={{ textAlign: ''center'' }}>\n          <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Pipeline Value</div>\n          <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#059669'' }}>\n            {formatCurrency(deals.reduce((sum, deal) => sum + (deal.Amount || 0), 0))}\n          </div>\n        </div>\n        <div style={{ textAlign: ''center'' }}>\n          <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Expected Revenue</div>\n          <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#2563EB'' }}>\n            {formatCurrency(deals.reduce((sum, deal) => sum + ((deal.Amount || 0) * (deal.Probability || 0) / 100), 0))}\n          </div>\n        </div>\n      </div>\n\n      {/* Deal Detail Modal */}\n      {selectedDeal && (\n        <div style={{\n          position: ''fixed'',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: ''rgba(0, 0, 0, 0.5)'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1000\n        }}\n        onClick={() => setSelectedDeal(null)}\n        >\n          <div \n            style={{\n              backgroundColor: ''white'',\n              borderRadius: ''12px'',\n              padding: ''24px'',\n              maxWidth: ''600px'',\n              width: ''90%'',\n              maxHeight: ''80vh'',\n              overflowY: ''auto'',\n              boxShadow: ''0 20px 25px -5px rgba(0, 0, 0, 0.1)''\n            }}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''start'', marginBottom: ''20px'' }}>\n              <h3 style={{ fontSize: ''20px'', fontWeight: ''bold'', margin: 0 }}>{selectedDeal.DealName}</h3>\n              <button\n                onClick={() => setSelectedDeal(null)}\n                style={{\n                  background: ''none'',\n                  border: ''none'',\n                  fontSize: ''24px'',\n                  cursor: ''pointer'',\n                  color: ''#6B7280'',\n                  padding: ''0'',\n                  width: ''30px'',\n                  height: ''30px''\n                }}\n              >\n                ×\n              </button>\n            </div>\n            \n            <div style={{ display: ''grid'', gap: ''16px'' }}>\n              <div>\n                <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Stage</label>\n                <span style={{\n                  padding: ''6px 16px'',\n                  borderRadius: ''12px'',\n                  fontSize: ''14px'',\n                  fontWeight: ''600'',\n                  backgroundColor: stages.find(s => s.name === selectedDeal.Stage)?.bgColor || ''#F3F4F6'',\n                  color: stages.find(s => s.name === selectedDeal.Stage)?.color || ''#6B7280'',\n                  border: `2px solid $' + '{stages.find(s => s.name === selectedDeal.Stage)?.color || ''#D1D5DB''}`,\n                  display: ''inline-block''\n                }}>\n                  {selectedDeal.Stage}\n                </span>\n              </div>\n              \n              <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''16px'' }}>\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Amount</label>\n                  <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#059669'' }}>\n                    {formatCurrency(selectedDeal.Amount)}\n                  </div>\n                </div>\n                \n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Probability</label>\n                  <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#374151'' }}>\n                    {selectedDeal.Probability}%\n                  </div>\n                </div>\n              </div>\n              \n              <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''16px'' }}>\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Close Date</label>\n                  <div style={{ fontSize: ''16px'', color: ''#111827'' }}>\n                    {new Date(selectedDeal.CloseDate).toLocaleDateString(''en-US'', { \n                      month: ''short'', \n                      day: ''numeric'', \n                      year: ''numeric'' \n                    })}\n                  </div>\n                </div>\n                \n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Days to Close</label>\n                  <div style={{ fontSize: ''16px'', color: ''#111827'' }}>\n                    {(() => {\n                      const days = getDaysToClose(selectedDeal.CloseDate);\n                      if (days === null) return ''-'';\n                      return days < 0 ? `$' + '{Math.abs(days)} days overdue` : `$' + '{days} days`;\n                    })()}\n                  </div>\n                </div>\n              </div>\n              \n              {selectedDeal.DealSource && (\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Source</label>\n                  <div style={{ fontSize: ''16px'', color: ''#111827'' }}>\n                    {selectedDeal.DealSource}\n                  </div>\n                </div>\n              )}\n              \n              {selectedDeal.NextStep && (\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Next Step</label>\n                  <div style={{ fontSize: ''16px'', color: ''#111827'' }}>\n                    {selectedDeal.NextStep}\n                  </div>\n                </div>\n              )}\n              \n              <div>\n                <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Expected Revenue</label>\n                <div style={{ fontSize: ''20px'', fontWeight: ''bold'', color: ''#2563EB'' }}>\n                  {formatCurrency((selectedDeal.Amount || 0) * (selectedDeal.Probability || 0) / 100)}\n                </div>\n              </div>\n              \n              <div style={{ \n                marginTop: ''16px'', \n                padding: ''16px'', \n                backgroundColor: ''#F9FAFB'', \n                borderRadius: ''8px'' \n              }}>\n                <div style={{ fontSize: ''14px'', color: ''#6B7280'', marginBottom: ''8px'' }}>Win Probability Indicator</div>\n                <div style={{ \n                  width: ''100%'', \n                  height: ''20px'', \n                  backgroundColor: ''#E5E7EB'', \n                  borderRadius: ''10px'',\n                  position: ''relative''\n                }}>\n                  <div style={{ \n                    width: `$' + '{selectedDeal.Probability}%`, \n                    height: ''100%'', \n                    backgroundColor: selectedDeal.Probability > 75 ? ''#10B981'' : selectedDeal.Probability > 50 ? ''#F59E0B'' : ''#6B7280'',\n                    borderRadius: ''10px'',\n                    transition: ''width 0.3s''\n                  }} />\n                  <div style={{\n                    position: ''absolute'',\n                    top: ''50%'',\n                    left: ''50%'',\n                    transform: ''translate(-50%, -50%)'',\n                    color: ''white'',\n                    fontWeight: ''bold'',\n                    fontSize: ''12px''\n                  }}>\n                    {selectedDeal.Probability}%\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div style={{ \n              marginTop: ''20px'', \n              paddingTop: ''20px'', \n              borderTop: ''1px solid #E5E7EB'',\n              display: ''flex'',\n              justifyContent: ''flex-end''\n            }}>\n              <button\n                onClick={() => {\n                  if (callbacks.OpenEntityRecord) {\n                    callbacks.OpenEntityRecord(''Deals'', [\n                      { FieldName: ''ID'', Value: selectedDeal.ID }\n                    ]);\n                    setSelectedDeal(null);\n                  } else {\n                    console.warn(''OpenEntityRecord callback not available'');\n                  }\n                }}\n                style={{\n                  padding: ''8px 12px'',\n                  backgroundColor: ''#3B82F6'',\n                  color: ''white'',\n                  border: ''none'',\n                  borderRadius: ''6px'',\n                  cursor: ''pointer'',\n                  fontSize: ''20px'',\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  justifyContent: ''center'',\n                  width: ''40px'',\n                  height: ''40px''\n                }}\n                title=\"Open record\"\n              >\n                ↗\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"}'
SET
  @FunctionalRequirements_c8caccb4 = N'## Kanban Board for Deal Pipeline

### Core Features
- Display deals grouped by stage in columns
- Show deal cards with key information
- Display total value per stage
- Count of deals per stage
- Visual indicators for deal priority

### Card Information
- Deal name
- Account name
- Amount formatted as currency
- Days to close
- Probability indicator

### Visual Design
- Column headers with stage colors
- Card shadows and hover effects
- Responsive column layout
- Scrollable columns for many deals'
SET
  @TechnicalDesign_c8caccb4 = N'## Implementation

### Data Loading
- Single RunView call to load all deals
- Client-side grouping by Stage
- Calculate totals per stage

### Layout
- Flexbox for horizontal column layout
- Fixed height columns with scroll
- Responsive breakpoints for mobile

### Stage Order
1. Prospecting
2. Qualification
3. Proposal
4. Negotiation
5. Closed Won
6. Closed Lost'
SET
  @FunctionalRequirementsVector_c8caccb4 = N'[0.011796747334301472,-0.002926142420619726,-0.03422316536307335,-0.05882875621318817,0.025633536279201508,-0.02959568426012993,0.029865462332963943,0.026014264672994614,-0.04252805560827255,0.005474665202200413,-0.051593370735645294,0.028587346896529198,0.01643167808651924,0.22061868011951447,-0.0013362608151510358,-0.03896369785070419,-0.0007629218162037432,-0.003860280616208911,-0.022808363661170006,0.032361533492803574,0.01703225076198578,0.00515007833018899,-0.032013509422540665,0.013879839330911636,-0.022699404507875443,0.0016332606319338083,-0.03461853414773941,-0.02206249162554741,0.028502207249403,-0.06170322000980377,0.025435229763388634,0.016092076897621155,-0.07051876932382584,-0.019337110221385956,0.000002425234697511769,-0.008399353362619877,-0.019347406923770905,-0.008497417904436588,-0.01596667245030403,0.00468559842556715,0.001409631222486496,-0.05204170197248459,0.020953616127371788,0.001053611165843904,-0.025919394567608833,-0.09239834547042847,-0.016370514407753944,0.13412758708000183,0.03018837235867977,-0.017213646322488785,0.0017967758467420936,-0.046505119651556015,0.0020378907211124897,-0.003707305761054158,0.019508708268404007,-0.022942645475268364,-0.006280841305851936,-0.07604276388883591,0.04111203923821449,-0.04775074124336243,0.00510287145152688,0.010896258987486362,0.014208463951945305,-0.0837898775935173,0.06954722106456757,0.052597034722566605,0.07835424691438675,-0.03430073708295822,-0.018484381958842278,0.027178771793842316,0.027751075103878975,0.011394248344004154,-0.0072199273854494095,-0.06273744255304337,-0.006525025237351656,-0.047728005796670914,-0.043606020510196686,0.062101542949676514,0.0057234978303313255,-0.03219810873270035,-0.022827833890914917,0.01882866397500038,-0.024143753573298454,-0.006345324218273163,0.04960087314248085,-0.017382141202688217,0.003672974882647395,0.022891424596309662,-0.052803970873355865,-0.027034087106585503,0.02347905933856964,-0.056320466101169586,-0.03271536901593208,0.0007884632796049118,-0.07673218846321106,0.005079050548374653,0.051698409020900726,0.014174364507198334,0.003398445900529623,0.0091549102216959,0.007002026773989201,0.022688403725624084,0.03239044174551964,0.0485382080078125,0.021491900086402893,0.01808243803679943,-0.02607002481818199,-0.040447257459163666,-0.021040672436356544,0.07899743318557739,0.009258393198251724,0.007350119762122631,-0.026008088141679764,0.05130331963300705,-0.030519280582666397,-0.03759321942925453,-0.07657896727323532,0.013836071826517582,0.013255483470857143,0.04682999849319458,0.1829734891653061,0.010580973699688911,0.0424998514354229,0.014916904270648956,-0.012951517477631569,-0.0011213222751393914,-0.04839528352022171,-0.003816084237769246,0.020837927237153053,0.042522259056568146,-0.01842091605067253,0.02193049155175686,-0.041347015649080276,-0.06420788913965225,-0.022716611623764038,-0.011461658403277397,0.031822316348552704,0.021949946880340576,-0.011256817728281021,-0.010290060192346573,-0.0248729158192873,0.014824891462922096,-0.05990079790353775,0.009379922412335873,-0.048239730298519135,-0.02538900263607502,-0.02140245959162712,0.04364527761936188,-0.000010344748261559289,-0.0015841493150219321,0.025724226608872414,-0.00035061061498709023,0.026045504957437515,0.012713088653981686,-0.02737787365913391,0.02647378109395504,-0.04808595031499863,-0.03032458759844303,-0.002511778147891164,0.06203604117035866,0.007950292900204659,-0.008391101844608784,0.043755218386650085,0.00859113223850727,-0.039404504001140594,-0.00947871245443821,0.04452529177069664,-0.013784041628241539,-0.0008454401977360249,-0.050295181572437286,-0.01659821905195713,-0.05743173882365227,-0.030826685950160027,0.04217185080051422,0.04564644396305084,0.021847324445843697,0.08564703911542892,0.019908005371689796,-0.03134739398956299,0.01633879914879799,0.012589179910719395,-0.1070440337061882,0.0041137137450277805,0.07731174677610397,0.05073728784918785,0.0016100010834634304,-0.04805343970656395,0.04291725903749466,0.005896582268178463,0.014285518787801266,0.015527679584920406,0.002937904093414545,-0.09084570407867432,0.010014274157583714,-0.023056095466017723,-0.007039425894618034,-0.01868588477373123,-0.007467151619493961,0.03751214221119881,0.013979697600007057,-0.021616699174046516,-0.03008100390434265,0.04100942239165306,0.030656516551971436,-0.001114454003982246,0.007413019891828299,-0.002862623194232583,-0.03546881675720215,-0.10452388226985931,0.0013920202618464828,0.08894695341587067,-0.0084579112008214,-0.06776460260152817,0.014736895449459553,-0.015407252125442028,0.005099314730614424,0.025009743869304657,-0.0021203267388045788,-0.018387533724308014,-0.021598098799586296,-0.0449553057551384,0.057418327778577805,0.08421958982944489,0.011809897609055042,0.10245340317487717,0.03023398481309414,-0.00014182794257067144,-0.009743482805788517,0.07424978911876678,0.012229682877659798,0.00990904588252306,-0.014537188224494457,0.05589887127280235,-0.0002173260727431625,-0.020868318155407906,0.0465446375310421,0.022842364385724068,0.08168770372867584,0.004560527391731739,0.06982865929603577,-0.029413728043437004,-0.030493415892124176,-0.02192458137869835,-0.007065023295581341,0.047030042856931686,0.009490481577813625,-0.05293020233511925,0.0330088771879673,-0.0010183843551203609,0.004078713711351156,0.0032570527400821447,0.020228343084454536,0.0808558464050293,0.015790382400155067,0.005765209440141916,-0.004250457510352135,-0.07439020276069641,0.012298470363020897,-0.014681234024465084,0.0684053897857666,0.031245756894350052,-0.00861145555973053,-0.03675287589430809,-0.03429585322737694,0.04094544053077698,-0.01485221553593874,0.056847963482141495,-0.05271395295858383,-0.016767900437116623,0.018491124734282494,-0.002209590980783105,0.03896593675017357,0.016999492421746254,-0.01913592591881752,-0.019535358995199203,0.02019650861620903,-0.013904033228754997,0.04851014167070389,-0.04302510991692543,-0.014064688235521317,0.012729082256555557,-0.04006006568670273,-0.031947191804647446,0.020362647250294685,-0.0014913227641955018,0.0010563456453382969,0.035691406577825546,-0.07636097818613052,-0.0063386280089616776,-0.032244972884655,0.05266224220395088,-0.040959641337394714,0.020972730591893196,-0.0003387401520740241,-0.057308413088321686,-0.018769817426800728,-0.09903795272111893,-0.007159002590924501,-0.04604789987206459,0.02463155798614025,-0.019638460129499435,-0.020139742642641068,-0.03316868841648102,-0.0026142909191548824,0.01265664491802454,0.006207107100635767,0.013534266501665115,0.026174288243055344,0.005387888755649328,0.05514881759881973,0.024191420525312424,0.008723326027393341,0.004254261031746864,-0.015292780473828316,0.031483232975006104,0.0279329102486372,0.014401700347661972,0.0010435015428811312,-0.005420807283371687,0.054585523903369904,0.009457472711801529,0.006754901260137558,0.0008265370270237327,-0.012166826985776424,-0.028555478900671005,0.0018146790098398924,0.00006829405901953578,-0.026133792474865913,0.013101018033921719,-0.05113442614674568,0.00683235190808773,-0.05051973834633827,-0.01138211227953434,-0.015583503991365433,-0.007019382435828447,0.007878835313022137,-0.007938371039927006,-0.05432574823498726,0.00997979287058115,-0.008350921794772148,-0.040816981345415115,-0.007540414109826088,-0.04338955134153366,0.012145270593464375,-0.03843313455581665,0.010792548768222332,0.11503823101520538,0.007484031841158867,-0.06478618830442429,0.04926807060837746,0.024077726528048515,0.023027507588267326,-0.013283824548125267,-0.02933960221707821,0.02697983756661415,0.03850826621055603,-0.023900890722870827,-0.016857391223311424,0.00898633524775505,-0.007311277557164431,0.04030900448560715,0.02520335651934147,-0.03487281873822212,0.03375975787639618,0.03212108090519905,0.04359625652432442,0.013439171016216278,-0.013228741474449635,-0.0054158782586455345,0.024850377812981606,-0.05612943693995476,0.01008176151663065,0.027792293578386307,0.017137303948402405,0.0197449903935194,0.005864194594323635,0.02558162435889244,0.015581849031150341,-0.009047405794262886,-0.01921926997601986,0.04557231068611145,-0.050213392823934555,0.0395829975605011,-0.048605773597955704,0.02842741645872593,0.021783791482448578,-0.033350974321365356,-0.042131207883358,0.0005112704238854349,-0.006852919235825539,-0.011460695415735245,-0.05424710735678673,-0.006759983953088522,-0.02286912314593792,-0.023615332320332527,-0.03504748269915581,-0.011320955120027065,0.03689213842153549,-0.02966928295791149,-0.00269114226102829,-0.017814386636018753,-0.0015853659715503454,0.016875317320227623,-0.03274158388376236,0.011285144835710526,-0.03179817274212837,-0.022686844691634178,-0.0120059410110116,0.019220033660531044,0.021487679332494736,-0.03341333940625191,-0.003882033983245492,-0.0037356591783463955,0.004831486381590366,-0.01567702367901802,-0.0044878385961055756,-0.01957966573536396,-0.02905038371682167,-0.012041048146784306,-0.004375270567834377,-0.015216733328998089,0.023960446938872337,-0.0010448058601468801,0.023489704355597496,-0.0023512274492532015,-0.02128007635474205,-0.020279763266444206,-0.07666194438934326,0.009032171219587326,0.00008401842933380976,0.010482458397746086,-0.0004135254421271384,0.005477421917021275,-0.028971077874302864,-0.021171653643250465,-0.04276485741138458,0.023325366899371147,0.03373904526233673,0.03511631861329079,-0.03386358544230461,-0.04329318180680275,0.016000866889953613,-0.00656140735372901,0.003511688206344843,0.03338614106178284,-0.009202670305967331,0.025473827496170998,0.020559774711728096,-0.03218783810734749,-0.01383817195892334,-0.006229300983250141,-0.05739839747548103,0.023127231746912003,-0.0026001175865530968,-0.03348542004823685,-0.02292218804359436,0.059401072561740875,-0.033515993505716324,0.014468494802713394,-0.05590011924505234,-0.001513444003649056,0.027497265487909317,-0.06048457324504852,0.02889130637049675,0.03683934733271599,-0.03794331103563309,-0.0544629842042923,-0.040791381150484085,-0.043428972363471985,-0.051193635910749435,0.009311165660619736,-0.007045665290206671,-0.04349537938833237,0.012466704472899437,0.01480195764452219,0.018962759524583817,0.005309879779815674,0.004444988444447517,0.10325223207473755,0.02149862051010132,-0.008347614668309689,-0.0351351834833622,0.0010141642997041345,-0.08328443765640259,-0.0009208280825987458,0.06904523074626923,-0.02959945797920227,0.0012647383846342564,0.005199675913900137,-0.022925231605768204,0.05633587762713432,-0.02022584341466427,0.02065744809806347,0.0803217664361,0.018877176567912102,0.015714947134256363,0.022622356191277504,-0.026971567422151566,0.01419393252581358,-0.033045604825019836,0.01683562994003296,-0.0014667643699795008,0.02028830163180828,-0.01662830263376236,-0.021958285942673683,-0.02724660001695156,0.011083226650953293,-0.003697905922308564,-0.03458302095532417,-0.07850717753171921,0.05165744200348854,-0.02237234264612198,0.00758740957826376,-0.09740286320447922,0.04262411966919899,0.048948291689157486,-0.012316158972680569,-0.007630727253854275,0.015485737472772598,-0.030185233801603317,0.007450072560459375,-0.00525955855846405,-0.03242528811097145,0.0025318816769868135,0.01966891996562481,-0.026988796889781952,0.04432329162955284,-0.014845360070466995,-0.03422960266470909,0.05935937911272049,-0.0169619582593441,0.012527206912636757,-0.04498834162950516,0.016990195959806442,-0.008450174704194069,0.03907417878508568,0.052323952317237854,0.049585241824388504,-0.04315555840730667,-0.027735941112041473,-0.0425180122256279,0.018367797136306763,0.05867759510874748,-0.0042943391017615795,0.00240387418307364,0.035422444343566895,-0.0007906426326371729,-0.04835349693894386,0.030361467972397804,0.015302874147891998,0.036391228437423706,-0.035271886736154556,-0.027976149693131447,0.01613810285925865,-0.04627707600593567,-7.047730012284781e-33,-0.049776654690504074,-0.022362124174833298,-0.010342476889491081,-0.017796959728002548,0.032928209751844406,-0.002068496309220791,-0.00418637041002512,-0.007459717802703381,0.018031828105449677,0.015232679434120655,-0.0036503474693745375,-0.022827809676527977,0.019274495542049408,-0.011270012706518173,0.04286491125822067,-0.022796906530857086,0.048890065401792526,0.007187738083302975,-0.008342619054019451,0.016774222254753113,-0.03843656927347183,0.03315635398030281,0.0049487450160086155,0.05071082338690758,-0.02756618894636631,-0.022228263318538666,-0.02422279305756092,0.013045256957411766,-0.0051245917566120625,0.04782283306121826,-0.02348913624882698,-0.02150394767522812,-0.021764932200312614,-0.039606232196092606,0.016906384378671646,-0.04696470871567726,-0.027099836617708206,0.010107080452144146,0.0071018412709236145,0.046774156391620636,0.05035235360264778,0.02118106558918953,0.00924606528133154,-0.015171397477388382,0.013340005651116371,0.003741234540939331,0.02646716497838497,-0.0169594157487154,-0.007516229059547186,-0.023446545004844666,0.0043621547520160675,0.005399319343268871,-0.015549497678875923,0.08314832299947739,0.025863399729132652,0.01584124006330967,0.03472110629081726,-0.07814475148916245,-0.04956798255443573,0.039909061044454575,-0.04364551603794098,-0.025746909901499748,0.023052439093589783,-0.011675174348056316,0.0014680793974548578,0.02256716787815094,-0.056341517716646194,0.000014158726116875187,0.017173759639263153,-0.020051421597599983,-0.03321067988872528,0.030436217784881592,0.0247244443744421,-0.0038473266176879406,-0.034204062074422836,0.03174419701099396,-0.014058176428079605,0.01058437954634428,0.0488029345870018,0.13346663117408752,-0.00814550556242466,0.014894666150212288,0.018020495772361755,0.0024964394979178905,0.013910442590713501,-0.031228646636009216,-0.011854136362671852,-0.0034084669314324856,0.028058869764208794,0.027679821476340294,0.022507086396217346,0.01625494472682476,-0.03552878275513649,0.02666228450834751,-0.06353995949029922,0.037312690168619156,0.08942461758852005,0.06143312156200409,0.005420819390565157,-0.05146748200058937,0.04302592948079109,0.015498524531722069,0.028088349848985672,-0.06376702338457108,0.004384700208902359,0.01485647726804018,0.039127741008996964,-0.001467948080971837,-0.03875735402107239,0.010324133560061455,0.017206495627760887,0.01973707415163517,0.002293798141181469,-0.031627386808395386,-0.012968760915100574,-0.009792144410312176,-0.014599827118217945,-0.051788583397865295,0.03417372703552246,0.03361257538199425,0.028720010071992874,0.05295056477189064,-0.025933178141713142,0.01294227410107851,0.0421186238527298,0.0013197592925280333,-0.01640709862112999,-0.03208579868078232,0.034046825021505356,-0.04604395478963852,0.022963715717196465,0.0032267128117382526,3.1789468835086154e-7,-0.011643165722489357,0.04753924533724785,-0.061889342963695526,-0.008319937624037266,0.009511973708868027,-0.015980688855051994,-0.04719289764761925,-0.047837644815444946,-0.00316344085149467,-0.0490567572414875,0.04433256760239601,-0.004753654822707176,-0.0013062540674582124,0.038256701081991196,-0.022265972569584846,-0.062036555260419846,-0.006562270689755678,-0.010929828509688377,-0.04803728684782982,-0.01375408936291933,0.07512012869119644,0.01608104072511196,0.06415342539548874,0.01436847448348999,0.007028480526059866,0.053093813359737396,-0.026591265574097633,-0.03546087443828583,0.016884421929717064,-0.012447914108633995,-0.016821373254060745,-0.05459336191415787,-0.05530085042119026,-0.04164532944560051,-0.0086600873619318,0.010462240315973759,-0.004321465268731117,-0.02728104032576084,0.050024647265672684,0.07381737977266312,-0.018212171271443367,-0.022203098982572556,0.0036991850938647985,-0.08825644850730896,0.005168477538973093,-0.07044114172458649,-0.0006290093879215419,-0.0848948135972023,-0.0376349501311779,-0.018093135207891464,0.05127565190196037,0.05445505678653717,0.018115106970071793,0.0014661955647170544,0.030962945893406868,0.0031778099946677685,0.032291725277900696,0.007295188494026661,0.010314817540347576,0.046398695558309555,-0.009684206917881966,0.03807438537478447,0.0009852208895608783,0.001246975501999259,0.013178708963096142,-0.013673395849764347,0.0002671887632459402,3.387551099636688e-34,-0.01528847124427557,0.01840611919760704,0.03574573993682861,-0.015025398693978786,0.03454656898975372,-0.02895171381533146,0.03404681012034416,-0.021078594028949738,0.007771691307425499,-0.06240461766719818,-0.03164688125252724]'
SET
  @TechnicalDesignVector_c8caccb4 = N'[0.018923195078969002,0.040286269038915634,-0.02789720706641674,-0.028045950457453728,0.001123904250562191,-0.05950208380818367,0.044100020080804825,0.011381896212697029,-0.01583225093781948,-0.0033215931616723537,-0.027506213635206223,-0.025440389290452003,0.052957095205783844,0.12856678664684296,-0.0341050922870636,-0.02374170534312725,-0.013828551396727562,0.010903023183345795,0.015659252181649208,0.001526240142993629,0.022278105840086937,-0.0138409323990345,-0.005464403424412012,-0.016661375761032104,-0.004813185427337885,-0.0009421159629710019,-0.06546805053949356,0.04781565070152283,0.03596574440598488,-0.125729039311409,-0.005222958978265524,0.0397711805999279,-0.0469810850918293,-0.009266761131584644,0.0000019317856185807614,-0.015098453499376774,-0.048323873430490494,-0.004347874782979488,-0.0030194472055882215,0.07862811535596848,0.0552140437066555,-0.04556619003415108,-0.00135601416695863,-0.0034979127813130617,-0.022389577701687813,-0.025863049551844597,-0.07215504348278046,0.057294439524412155,0.061786212027072906,0.029493298381567,0.015501303598284721,-0.015085702762007713,-0.01801697351038456,-0.01677127555012703,-0.02969885803759098,-0.08995918184518814,0.003131626872345805,-0.04531170800328255,0.03910244256258011,-0.01407527644187212,-0.026914598420262337,-0.05898698791861534,0.017499322071671486,-0.06409922242164612,-0.06509855389595032,0.003992776852101088,0.025750862434506416,-0.041000086814165115,-0.011135170236229897,0.026468582451343536,0.10864318907260895,0.017320550978183746,-0.0008536277455277741,-0.07406733185052872,0.013914125971496105,-0.04649626836180687,-0.02731451950967312,0.040655314922332764,-0.01918048784136772,-0.002836293773725629,-0.04345959797501564,0.06238734722137451,-0.037201423197984695,0.01449776440858841,-0.007881603203713894,-0.019715219736099243,-0.016331927850842476,-0.036568816751241684,-0.027694599702954292,-0.014720489270985126,0.045368704944849014,-0.005316771101206541,0.017140449956059456,-0.006423403508961201,-0.10463229566812515,-0.011567825451493263,0.03406494855880737,-0.012822932563722134,0.0241774320602417,-0.026759453117847443,-0.013881280086934566,0.02874036692082882,0.058969687670469284,0.0065801250748336315,0.046578168869018555,0.018237272277474403,-0.018400968983769417,-0.030917750671505928,-0.0542350597679615,0.07101909071207047,-0.0016196832293644547,0.014814522117376328,-0.006041737273335457,0.03373885899782181,-0.09197977185249329,0.0065673887729644775,-0.03516176715493202,0.02649933286011219,-0.008753486908972263,0.01482354011386633,0.13723094761371613,0.005554063245654106,0.008332804776728153,0.03269008919596672,0.02921373024582863,0.0010343723697587848,-0.037830304354429245,-0.0023968073073774576,0.008411991409957409,-0.022273706272244453,-0.026996031403541565,-0.04076485335826874,0.022410981357097626,-0.009186077862977982,-0.027717340737581253,-0.02259977161884308,0.015920139849185944,0.052852943539619446,-0.07659243792295456,-0.03623043745756149,0.0045747882686555386,-0.020903024822473526,-0.07813902199268341,0.0012868522899225354,-0.019970545545220375,-0.058543961495161057,-0.02132468856871128,0.045317504554986954,0.03227965533733368,0.0036459898110479116,-0.04801996797323227,-0.02425890974700451,0.004113518632948399,0.021375039592385292,-0.04143303632736206,0.038322169333696365,0.016620196402072906,0.01823316514492035,0.03205350786447525,0.08878553658723831,-0.0048507703468203545,0.013002621941268444,0.031893350183963776,0.008928204886615276,-0.04090294986963272,0.03442791476845741,-0.04587627947330475,-0.006441724486649036,0.004439376760274172,-0.017822016030550003,-0.015221919864416122,-0.048738349229097366,-0.0288766548037529,0.057131171226501465,0.03229045495390892,0.03127000853419304,0.09622166305780411,0.02456350065767765,-0.06655237823724747,-0.0022500797640532255,0.004914816468954086,-0.11105029284954071,-0.008967835456132889,-0.021271251142024994,0.06649837642908096,-0.00736779160797596,-0.052710555493831635,-0.000612535048276186,0.012239552102982998,0.03233760595321655,0.014991842210292816,0.040278710424900055,-0.06917784363031387,0.006573820486664772,-0.023655341938138008,0.024558087810873985,-0.03384578600525856,-0.060122691094875336,0.07400666177272797,0.0173961091786623,-0.027683211490511894,0.01666739024221897,-0.02679157815873623,0.007064300589263439,0.003938259091228247,-0.0031981156207621098,-0.04089152440428734,0.0265383031219244,-0.0683218240737915,0.005020480137318373,0.0307717714458704,0.005753293167799711,-0.05839705839753151,0.01201199647039175,-0.04613904654979706,0.07109076529741287,0.005921646486967802,0.025539180263876915,-0.04066791012883186,-0.020145926624536514,-0.0429341197013855,-0.0009772268822416663,0.01728292927145958,0.005148725584149361,0.08309151232242584,0.04479007422924042,0.042174290865659714,-0.030500592663884163,0.026968378573656082,0.002398691838607192,-0.011656389571726322,-0.019037853926420212,0.06893789768218994,0.046608977019786835,0.048627302050590515,0.08003072440624237,0.02221554145216942,0.028237318620085716,-0.030489157885313034,0.0580618642270565,-0.018772713840007782,-0.05902080237865448,-0.04148522764444351,0.014351383782923222,0.04923522099852562,0.0304458849132061,-0.029360024258494377,0.0063627646304667,0.0006699477671645582,-0.00021427629690151662,-0.011414054781198502,0.00936712883412838,0.07636456936597824,-0.012429216876626015,0.0010428947862237692,0.014249945059418678,-0.06867639720439911,-0.01613432727754116,-0.026075277477502823,0.07643560320138931,0.00953742116689682,-0.032895125448703766,-0.02172222174704075,-0.011336791329085827,0.06773485243320465,-0.023193873465061188,0.03657282143831253,-0.04129321873188019,0.015682466328144073,0.01051085814833641,-0.0033743816893547773,0.05019510164856911,0.02716810069978237,-0.02194911241531372,-0.034371983259916306,0.042640022933483124,-0.012835611589252949,0.03461098298430443,-0.016465263441205025,-0.014847846701741219,-0.021066073328256607,-0.014482904225587845,0.0035548419691622257,0.017257481813430786,-0.016895603388547897,0.03500940278172493,0.07073330134153366,0.006802516058087349,-0.03233207389712334,-0.08275825530290604,0.02236020192503929,-0.0326412171125412,0.002746367361396551,-0.053702350705862045,-0.031449753791093826,0.003695959225296974,-0.10084014385938644,0.035931915044784546,0.0057092951610684395,0.08294399082660675,-0.007760803680866957,0.0054958476684987545,0.008805603720247746,0.01467155758291483,-0.005806312896311283,0.013025561347603798,-0.007414049468934536,-0.01199828926473856,-0.021165763959288597,0.08173523098230362,0.01955174282193184,0.015718182548880577,0.0069890799932181835,-0.06694959849119186,0.026771459728479385,0.01619083620607853,0.02569003775715828,0.02700803428888321,-0.047625575214624405,0.10304990410804749,-0.008891409263014793,-0.0006365806912072003,0.005412114784121513,-0.006528711877763271,-0.029659250751137733,-0.03889404982328415,0.0009905345505103469,-0.015305672772228718,0.036921754479408264,-0.038741741329431534,0.03518969938158989,-0.0646928921341896,-0.03703782334923744,-0.006340899504721165,0.03901451826095581,0.01922488771378994,-0.02733391337096691,0.002073936862871051,-0.0005231761606410146,-0.01400053035467863,-0.027929075062274933,-0.012034433893859386,-0.020134039223194122,-0.009703433141112328,0.013393369503319263,-0.02790559083223343,0.04445880651473999,0.02504410408437252,-0.1057608351111412,0.016422441229224205,-0.014143640175461769,0.030295023694634438,-0.030254198238253593,-0.006571688689291477,0.004373832605779171,0.055093247443437576,-0.015316303819417953,-0.004089596681296825,0.0038601942360401154,-0.06692956387996674,0.05064062774181366,0.030917679890990257,0.016414685174822807,0.0676216334104538,0.00868151430040598,0.0396810881793499,0.0033832963090389967,-0.04649489000439644,0.029792239889502525,-0.007629414089024067,-0.028315464034676552,-0.006745876278728247,0.047497693449258804,0.010309943929314613,-0.016342634335160255,-0.030634453520178795,0.0255531445145607,0.03457082062959671,0.042463961988687515,0.005390506703406572,0.03736736625432968,-0.04138489067554474,0.08337986469268799,-0.012126528657972813,0.06552568078041077,0.024009520187973976,0.00945709552615881,-0.05284063145518303,-0.04846389591693878,0.022359030321240425,0.005599131342023611,0.010316514410078526,0.06712356209754944,-0.028364548459649086,-0.02350466512143612,0.005389581900089979,-0.030179543420672417,0.08059875667095184,0.0036578429862856865,-0.001035149791277945,-0.0192226842045784,0.03785305470228195,0.05171852186322212,-0.03207927197217941,-0.0019917262252420187,-0.03960634022951126,-0.044765863567590714,0.02205819822847843,0.00450548343360424,0.04561598598957062,0.008649386465549469,-0.007091998588293791,-0.02262226864695549,-0.026389233767986298,-0.02322888933122158,0.024859806522727013,-0.008209271356463432,-0.039447348564863205,-0.028678199276328087,-0.0146729601547122,-0.014888633973896503,0.011057906784117222,0.026165274903178215,0.03648392856121063,0.007547433488070965,-0.0016149756265804172,0.002906594891101122,-0.08057081699371338,-0.03583233803510666,-0.007479899097234011,-0.0026100340764969587,0.00111938058398664,-0.02633245848119259,0.015288390219211578,-0.032088279724121094,-0.012919815257191658,0.049762096256017685,-0.018035465851426125,0.03048861213028431,0.00011626463674474508,-0.02646566927433014,0.0293577890843153,0.09855663031339645,-0.0015842155553400517,0.026445297524333,0.02824101783335209,-0.05358150601387024,-0.0067717889323830605,-0.020437978208065033,0.047167353332042694,-0.018590128049254417,-0.03607083857059479,0.007807671558111906,-0.020332152023911476,-0.0755639299750328,-0.026267362758517265,-0.072391577064991,-0.01997830905020237,-0.02446325123310089,-0.021157993003726006,-0.01414916105568409,0.036449793726205826,-0.028640462085604668,-0.015767134726047516,0.06273113936185837,-0.007635676302015781,-0.05377035588026047,-0.0271426010876894,-0.017107300460338593,-0.02112654037773609,0.019456809386610985,-0.008401717059314251,-0.034977301955223083,-0.027234327048063278,0.04534359276294708,0.05014285817742348,0.012093203142285347,-0.009761680848896503,0.010872460901737213,0.01562493946403265,-0.006958176381886005,0.04396544024348259,0.040203455835580826,-0.17617234587669373,0.013418104499578476,0.04709934443235397,-0.024748506024479866,-0.016182487830519676,-0.010708019137382507,-0.013077989220619202,0.02967078611254692,-0.01233100239187479,0.025172574445605278,0.04790094122290611,0.02414454147219658,0.04840449243783951,-0.0030771559104323387,0.01636449806392193,0.06089190021157265,-0.014214267022907734,-0.019718006253242493,-0.0012443684972822666,0.009837259538471699,-0.000764274038374424,-0.01173035241663456,0.03703892603516579,-0.011229698546230793,0.0013271369971334934,-0.027682654559612274,-0.001979375956580043,0.025300415232777596,-0.011697356589138508,-0.0014429265866056085,-0.036777134984731674,0.015167469158768654,0.01139181386679411,-0.059400785714387894,0.025441035628318787,0.0020417352207005024,0.020972836762666702,0.02283388003706932,-0.008112216368317604,-0.0091777965426445,-0.04838193953037262,0.030161742120981216,-0.03622589632868767,0.02359328605234623,-0.006332114804536104,0.05595342814922333,0.05632038041949272,0.03648538514971733,-0.017115233466029167,0.013237441889941692,0.003556810785084963,-0.022477103397250175,-0.029198186472058296,0.022571561858057976,0.01829732395708561,-0.013091116212308407,-0.020308921113610268,-0.042408786714076996,0.05188553035259247,-0.009938321076333523,-0.03119826130568981,0.021004972979426384,0.005912100430577993,-0.007082177791744471,-0.05615408346056938,0.013583785854279995,0.047177109867334366,-0.014832408167421818,-0.050112269818782806,-0.0007641339907422662,-0.020607471466064453,-0.009515611454844475,-6.45159641936449e-33,-0.017901252955198288,-0.029896652325987816,-0.03340788558125496,-0.031943973153829575,-0.0472649484872818,-0.017212314531207085,0.004764835815876722,-0.0376344658434391,0.019790485501289368,-0.003535256488248706,-0.017847368493676186,-0.009875456802546978,0.02174648456275463,0.013161475770175457,0.034895118325948715,0.0118642533197999,0.007643372286111116,-0.003098027314990759,-0.00346582243219018,0.00822850689291954,-0.04620831832289696,0.04149656370282173,-0.0036846804432570934,0.054891832172870636,-0.008219837211072445,-0.01674443483352661,-0.006481732241809368,0.008570621721446514,-0.03670084476470947,0.008065431378781796,0.025325074791908264,-0.059481143951416016,0.002139069139957428,-0.015420116484165192,0.005200923420488834,-0.005931655410677195,-0.041920945048332214,-0.008679990656673908,-0.01577102206647396,0.017578676342964172,0.024891464039683342,0.05029160529375076,0.03800114244222641,-0.023608557879924774,0.00668904697522521,-0.04243800416588783,0.001731508644297719,0.005281559191644192,-0.000322961452184245,-0.000060230107919778675,0.005210577044636011,0.011540597304701805,0.003508887719362974,0.05631839856505394,0.01890539936721325,-0.0301093440502882,0.03331815451383591,-0.017844922840595245,-0.02757883071899414,0.017829088494181633,-0.06232878565788269,0.00025730335619300604,0.0168532095849514,-0.032353807240724564,0.008758739568293095,-0.030104413628578186,-0.0008605779730714858,0.03443903103470802,0.01815834827721119,-0.10521388053894043,-0.014554844237864017,0.013229629956185818,-0.025556188076734543,-0.04101162776350975,0.006186523009091616,0.012078369036316872,-0.030136069282889366,-0.038987502455711365,0.04709234833717346,0.07971885800361633,-0.019048793241381645,0.001774709322489798,0.041381560266017914,0.018093379214406013,0.018155066296458244,-0.04809039831161499,-0.0009824417065829039,0.018825998529791832,0.000933462695684284,0.00642082653939724,0.006846057716757059,0.018732436001300812,-0.050351981073617935,0.01809065230190754,-0.03783559799194336,-0.02958586812019348,0.0604415200650692,0.08366213738918304,-0.00851539894938469,0.016750888898968697,-0.00022235077631194144,0.024602828547358513,0.00981215015053749,-0.037538498640060425,-0.0031951472628861666,0.025073044002056122,0.014902716502547264,-0.019373198971152306,-0.016893533989787102,0.032062556594610214,0.031146621331572533,0.03655900061130524,-0.0394752062857151,0.016399061307311058,0.02537892386317253,-0.0031363836023956537,-0.007370445411652327,-0.02084306627511978,0.04222548007965088,0.036578744649887085,0.00265509937889874,0.042587071657180786,-0.0027531790547072887,0.03574785962700844,0.025824427604675293,-0.008291862905025482,0.0036756203044205904,-0.0036478496622294188,-0.006841681897640228,0.005603221710771322,0.010781426914036274,0.03680940717458725,2.8378781280480325e-7,0.005843850784003735,0.030051374807953835,-0.06109556555747986,0.07104010134935379,-0.001407985226251185,-0.019532272592186928,-0.047930046916007996,-0.0032292543910443783,0.00938388705253601,-0.02199329435825348,0.03996320813894272,-0.04461248964071274,0.01812065578997135,0.03503100946545601,-0.013997338712215424,-0.04287482425570488,-0.038125887513160706,-0.06155196949839592,-0.06613407284021378,-0.04257733374834061,-0.022016162052750587,0.01528895366936922,0.06296637654304504,0.01667192578315735,-0.000521696696523577,0.06954085826873779,0.013617678545415401,-0.01858893409371376,0.01619541645050049,0.008271420374512672,0.02515799179673195,-0.10199333727359772,-0.046797268092632294,0.024654539301991463,-0.023473648354411125,0.005323455203324556,-0.02182145044207573,-0.02306898683309555,0.019080376252532005,0.0718427523970604,0.021288909018039703,-0.0666889026761055,-0.0014333417639136314,-0.011697414331138134,0.012277454137802124,0.014879463240504265,0.008569044061005116,0.00015479743888136,-0.03295770287513733,0.0015804794384166598,0.03512909635901451,0.051094673573970795,0.03774631768465042,-0.0019429700914770365,0.034244343638420105,0.0004460375930648297,0.017651615664362907,0.020464139059185982,0.020019054412841797,0.03959186002612114,-0.003297237679362297,-0.00423250300809741,0.04247923567891121,0.03542172163724899,0.07578934729099274,-0.07302922755479813,-0.005992021411657333,3.589871355746214e-34,0.03077755868434906,-0.033527787774801254,0.04045204818248749,0.05021583288908005,0.009668244048953056,-0.019039049744606018,0.06181923300027847,-0.019422976300120354,0.01645885407924652,-0.04050659388303757,-0.007309996522963047]'
SET
  @HasCustomProps_c8caccb4 = 1
SET
  @HasCustomEvents_c8caccb4 = 0
SET
  @RequiresData_c8caccb4 = 1
SET
  @DependencyCount_c8caccb4 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_c8caccb4 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_c8caccb4 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_c8caccb4 = 0
SET
  @ID_c8caccb4 = 'EE5E1201-0177-495F-8D28-8F79011C829B'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_c8caccb4,
  @Name = @Name_c8caccb4,
  @Version = @Version_c8caccb4,
  @VersionSequence = @VersionSequence_c8caccb4,
  @Title = @Title_c8caccb4,
  @Description = @Description_c8caccb4,
  @Type = @Type_c8caccb4,
  @Status = @Status_c8caccb4,
  @DeveloperName = @DeveloperName_c8caccb4,
  @DeveloperEmail = @DeveloperEmail_c8caccb4,
  @DeveloperOrganization = @DeveloperOrganization_c8caccb4,
  @SourceRegistryID = @SourceRegistryID_c8caccb4,
  @ReplicatedAt = @ReplicatedAt_c8caccb4,
  @LastSyncedAt = @LastSyncedAt_c8caccb4,
  @Specification = @Specification_c8caccb4,
  @FunctionalRequirements = @FunctionalRequirements_c8caccb4,
  @TechnicalDesign = @TechnicalDesign_c8caccb4,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_c8caccb4,
  @TechnicalDesignVector = @TechnicalDesignVector_c8caccb4,
  @HasCustomProps = @HasCustomProps_c8caccb4,
  @HasCustomEvents = @HasCustomEvents_c8caccb4,
  @RequiresData = @RequiresData_c8caccb4,
  @DependencyCount = @DependencyCount_c8caccb4,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_c8caccb4,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_c8caccb4,
  @HasRequiredCustomProps = @HasRequiredCustomProps_c8caccb4,
  @ID = @ID_c8caccb4;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_3881dbf5 NVARCHAR(MAX),
@Name_3881dbf5 NVARCHAR(500),
@Version_3881dbf5 NVARCHAR(50),
@VersionSequence_3881dbf5 INT,
@Title_3881dbf5 NVARCHAR(1000),
@Description_3881dbf5 NVARCHAR(MAX),
@Type_3881dbf5 NVARCHAR(255),
@Status_3881dbf5 NVARCHAR(50),
@DeveloperName_3881dbf5 NVARCHAR(255),
@DeveloperEmail_3881dbf5 NVARCHAR(255),
@DeveloperOrganization_3881dbf5 NVARCHAR(255),
@SourceRegistryID_3881dbf5 UNIQUEIDENTIFIER,
@ReplicatedAt_3881dbf5 DATETIMEOFFSET,
@LastSyncedAt_3881dbf5 DATETIMEOFFSET,
@Specification_3881dbf5 NVARCHAR(MAX),
@FunctionalRequirements_3881dbf5 NVARCHAR(MAX),
@TechnicalDesign_3881dbf5 NVARCHAR(MAX),
@FunctionalRequirementsVector_3881dbf5 NVARCHAR(MAX),
@TechnicalDesignVector_3881dbf5 NVARCHAR(MAX),
@HasCustomProps_3881dbf5 BIT,
@HasCustomEvents_3881dbf5 BIT,
@RequiresData_3881dbf5 BIT,
@DependencyCount_3881dbf5 INT,
@TechnicalDesignVectorEmbeddingModelID_3881dbf5 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_3881dbf5 NVARCHAR(MAX),
@HasRequiredCustomProps_3881dbf5 BIT,
@ID_3881dbf5 UNIQUEIDENTIFIER
SET
  @Namespace_3881dbf5 = N'CRM/Analytics'
SET
  @Name_3881dbf5 = N'DealVelocityChart'
SET
  @Version_3881dbf5 = N'1.0.0'
SET
  @VersionSequence_3881dbf5 = 1
SET
  @Title_3881dbf5 = N'Deal Velocity Chart'
SET
  @Description_3881dbf5 = N'Interactive line chart showing deal velocity metrics over time with multiple view modes'
SET
  @Type_3881dbf5 = N'Chart'
SET
  @Status_3881dbf5 = N'Published'
SET
  @Specification_3881dbf5 = N'{"name":"DealVelocityChart","title":"Deal Velocity Chart","description":"Interactive line chart showing deal velocity metrics over time with multiple view modes","type":"component","location":"embedded","namespace":"CRM/Analytics","functionalRequirements":"## Deal Velocity Analysis\n\n### Core Features\n- Track deal creation and closure rates over time\n- Show multiple metrics: count, value, velocity, conversion\n- Configurable time ranges (1 month to 2 years)\n- Dynamic bucketing (daily, weekly, monthly)\n- Summary statistics cards\n\n### Metric Types\n1. **Deal Count**: New, Won, Lost deals over time\n2. **Deal Value**: Pipeline and Won value trends\n3. **Velocity**: Average days to close and win rate\n4. **Conversion**: Cumulative conversion rate trend\n\n### Visual Design\n- Line charts with smooth curves\n- Color-coded metrics\n- Interactive tooltips\n- Responsive layout\n- Summary cards with key metrics","dataRequirements":{"mode":"views","description":"Fetches deal data for velocity analysis using RunView","entities":[{"name":"Deals","description":"Deal data for velocity tracking and analysis","displayFields":["ID","DealName","Amount","Stage","CloseDate","__mj_CreatedAt"],"filterFields":["CloseDate","__mj_CreatedAt","Stage"],"sortFields":["CloseDate","__mj_CreatedAt"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Analyzes deal velocity, conversion rates, and trends over time"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Data Loading\n- Single RunView call with date range filter\n- Load deals created OR closed in range\n- Use __mj_CreatedAt for creation tracking\n\n### Time Bucketing\n- Daily buckets for 1 month\n- Weekly buckets for 3-6 months\n- Monthly buckets for 1-2 years\n\n### Metrics Calculation\n- Deal count by bucket\n- Sum values by bucket\n- Average cycle time (close - create)\n- Win rate percentage\n- Cumulative conversion rate\n\n### Chart.js Configuration\n- Line chart with tension for smooth curves\n- Multiple Y-axes for different scales\n- Custom tooltips with formatting\n- Responsive aspect ratio","properties":[],"exampleUsage":"<DealVelocityChart\n  timeRange=\"6months\"\n  metricType=\"count\"\n  showSummary={true}\n/>","code":"function DealVelocityChart({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [deals, setDeals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [timeRange, setTimeRange] = useState(savedUserSettings?.timeRange || ''6months'');\n  const [metricType, setMetricType] = useState(savedUserSettings?.metricType || ''count'');\n  const [chartData, setChartData] = useState(null);\n  const [selectedPeriod, setSelectedPeriod] = useState(null);\n  const [periodDeals, setPeriodDeals] = useState([]);\n  const [selectedDeal, setSelectedDeal] = useState(null);\n  const [sortBy, setSortBy] = useState(''CloseDate'');\n  const [sortDirection, setSortDirection] = useState(''DESC'');\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  const bucketsRef = useRef([]);\n\n  // Time range options\n  const timeRanges = {\n    ''1month'': { label: ''Last Month'', days: 30, buckets: ''daily'' },\n    ''3months'': { label: ''Last 3 Months'', days: 90, buckets: ''weekly'' },\n    ''6months'': { label: ''Last 6 Months'', days: 180, buckets: ''weekly'' },\n    ''1year'': { label: ''Last Year'', days: 365, buckets: ''monthly'' },\n    ''2years'': { label: ''Last 2 Years'', days: 730, buckets: ''monthly'' }\n  };\n\n  useEffect(() => {\n    loadDeals();\n  }, [timeRange]);\n\n  useEffect(() => {\n    if (deals.length > 0) {\n      processChartData();\n    }\n  }, [deals, metricType]);\n\n  useEffect(() => {\n    if (chartData && chartRef.current) {\n      renderChart();\n    }\n    \n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [chartData]);\n\n  const loadDeals = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Calculate date range\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - timeRanges[timeRange].days);\n      \n      // Format dates for SQL\n      const formatDate = (date) => date.toISOString().split(''T'')[0];\n      \n      // Load all deals within the time range (both created and closed)\n      const result = await utilities.rv.RunView({\n        EntityName: ''Deals'',\n        ExtraFilter: `__mj_CreatedAt >= ''$' + '{formatDate(startDate)}'' OR (CloseDate >= ''$' + '{formatDate(startDate)}'' AND CloseDate <= ''$' + '{formatDate(endDate)}'')`,\n        OrderBy: ''__mj_CreatedAt ASC''\n      });\n\n      if (result.Success) {\n        setDeals(result.Results || []);\n      } else {\n        setError(result.ErrorMessage || ''Failed to load deals'');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const processChartData = () => {\n    // Store buckets for drill-down functionality\n    bucketsRef.current = [];\n    \n    const range = timeRanges[timeRange];\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - range.days);\n    \n    // Create time buckets based on range\n    const buckets = [];\n    const currentDate = new Date(startDate);\n    \n    while (currentDate <= endDate) {\n      let bucketEnd = new Date(currentDate);\n      let label = '''';\n      \n      if (range.buckets === ''daily'') {\n        bucketEnd.setDate(bucketEnd.getDate() + 1);\n        label = currentDate.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'' });\n      } else if (range.buckets === ''weekly'') {\n        bucketEnd.setDate(bucketEnd.getDate() + 7);\n        label = `Week of $' + '{currentDate.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'' })}`;\n      } else if (range.buckets === ''monthly'') {\n        bucketEnd.setMonth(bucketEnd.getMonth() + 1);\n        label = currentDate.toLocaleDateString(''en-US'', { month: ''short'', year: ''numeric'' });\n      }\n      \n      const bucket = {\n        start: new Date(currentDate),\n        end: new Date(bucketEnd),\n        label: label,\n        created: 0,\n        closed: 0,\n        won: 0,\n        lost: 0,\n        value: 0,\n        wonValue: 0,\n        avgCycleTime: 0,\n        cycleTimeCount: 0,\n        cycleTimeSum: 0,\n        dealIds: [] // Track deal IDs for drill-down\n      };\n      \n      buckets.push(bucket);\n      bucketsRef.current.push(bucket);\n      \n      currentDate.setTime(bucketEnd.getTime());\n    }\n    \n    // Process deals into buckets\n    deals.forEach(deal => {\n      // Find bucket for creation date\n      const createdDate = new Date(deal.__mj_CreatedAt);\n      const createdBucket = buckets.find(b => createdDate >= b.start && createdDate < b.end);\n      if (createdBucket) {\n        createdBucket.created++;\n        createdBucket.value += deal.Amount || 0;\n        if (!createdBucket.dealIds.includes(deal.ID)) {\n          createdBucket.dealIds.push(deal.ID);\n        }\n      }\n      \n      // Find bucket for close date if closed\n      if (deal.CloseDate && (deal.Stage === ''Closed Won'' || deal.Stage === ''Closed Lost'')) {\n        const closeDate = new Date(deal.CloseDate);\n        const closeBucket = buckets.find(b => closeDate >= b.start && closeDate < b.end);\n        if (closeBucket) {\n          closeBucket.closed++;\n          \n          if (deal.Stage === ''Closed Won'') {\n            closeBucket.won++;\n            closeBucket.wonValue += deal.Amount || 0;\n          } else {\n            closeBucket.lost++;\n          }\n          \n          if (!closeBucket.dealIds.includes(deal.ID)) {\n            closeBucket.dealIds.push(deal.ID);\n          }\n          \n          // Calculate cycle time (days from creation to close)\n          const cycleTime = Math.floor((closeDate - createdDate) / (1000 * 60 * 60 * 24));\n          if (cycleTime >= 0) {\n            closeBucket.cycleTimeSum += cycleTime;\n            closeBucket.cycleTimeCount++;\n          }\n        }\n      }\n    });\n    \n    // Calculate average cycle times\n    buckets.forEach(bucket => {\n      if (bucket.cycleTimeCount > 0) {\n        bucket.avgCycleTime = Math.round(bucket.cycleTimeSum / bucket.cycleTimeCount);\n      }\n    });\n    \n    // Prepare chart data based on metric type\n    let datasets = [];\n    \n    if (metricType === ''count'') {\n      datasets = [\n        {\n          label: ''New Deals'',\n          data: buckets.map(b => b.created),\n          borderColor: ''rgb(59, 130, 246)'',\n          backgroundColor: ''rgba(59, 130, 246, 0.1)'',\n          tension: 0.1\n        },\n        {\n          label: ''Closed Won'',\n          data: buckets.map(b => b.won),\n          borderColor: ''rgb(34, 197, 94)'',\n          backgroundColor: ''rgba(34, 197, 94, 0.1)'',\n          tension: 0.1\n        },\n        {\n          label: ''Closed Lost'',\n          data: buckets.map(b => b.lost),\n          borderColor: ''rgb(239, 68, 68)'',\n          backgroundColor: ''rgba(239, 68, 68, 0.1)'',\n          tension: 0.1\n        }\n      ];\n    } else if (metricType === ''value'') {\n      datasets = [\n        {\n          label: ''Pipeline Value'',\n          data: buckets.map(b => b.value),\n          borderColor: ''rgb(59, 130, 246)'',\n          backgroundColor: ''rgba(59, 130, 246, 0.1)'',\n          tension: 0.1,\n          yAxisID: ''y''\n        },\n        {\n          label: ''Won Value'',\n          data: buckets.map(b => b.wonValue),\n          borderColor: ''rgb(34, 197, 94)'',\n          backgroundColor: ''rgba(34, 197, 94, 0.1)'',\n          tension: 0.1,\n          yAxisID: ''y''\n        }\n      ];\n    } else if (metricType === ''velocity'') {\n      datasets = [\n        {\n          label: ''Avg Days to Close'',\n          data: buckets.map(b => b.avgCycleTime || null),\n          borderColor: ''rgb(168, 85, 247)'',\n          backgroundColor: ''rgba(168, 85, 247, 0.1)'',\n          tension: 0.1,\n          spanGaps: true\n        },\n        {\n          label: ''Win Rate %'',\n          data: buckets.map(b => b.closed > 0 ? Math.round((b.won / b.closed) * 100) : null),\n          borderColor: ''rgb(34, 197, 94)'',\n          backgroundColor: ''rgba(34, 197, 94, 0.1)'',\n          tension: 0.1,\n          spanGaps: true,\n          yAxisID: ''y1''\n        }\n      ];\n    } else if (metricType === ''conversion'') {\n      // Calculate cumulative conversion funnel\n      let cumulativeCreated = 0;\n      let cumulativeWon = 0;\n      \n      datasets = [\n        {\n          label: ''Conversion Rate %'',\n          data: buckets.map(b => {\n            cumulativeCreated += b.created;\n            cumulativeWon += b.won;\n            return cumulativeCreated > 0 ? Math.round((cumulativeWon / cumulativeCreated) * 100) : 0;\n          }),\n          borderColor: ''rgb(251, 146, 60)'',\n          backgroundColor: ''rgba(251, 146, 60, 0.1)'',\n          tension: 0.1\n        }\n      ];\n    }\n    \n    setChartData({\n      labels: buckets.map(b => b.label),\n      datasets: datasets\n    });\n  };\n\n  const renderChart = () => {\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    \n    const ctx = chartRef.current.getContext(''2d'');\n    \n    // Configure options based on metric type\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: ''top'',\n        },\n        title: {\n          display: true,\n          text: getChartTitle()\n        },\n        tooltip: {\n          callbacks: {\n            label: function(context) {\n              let label = context.dataset.label || '''';\n              if (label) {\n                label += '': '';\n              }\n              \n              if (metricType === ''value'') {\n                label += new Intl.NumberFormat(''en-US'', {\n                  style: ''currency'',\n                  currency: ''USD'',\n                  minimumFractionDigits: 0\n                }).format(context.parsed.y);\n              } else if (metricType === ''velocity'' && context.dataset.label === ''Avg Days to Close'') {\n                label += context.parsed.y + '' days'';\n              } else if (context.dataset.label && context.dataset.label.includes(''%'')) {\n                label += context.parsed.y + ''%'';\n              } else {\n                label += context.parsed.y;\n              }\n              \n              return label;\n            }\n          }\n        }\n      },\n      onClick: (event, elements) => {\n        if (elements.length > 0) {\n          const index = elements[0].index;\n          handleChartClick(index);\n        }\n      },\n      onHover: (event, elements) => {\n        if (chartRef.current) {\n          chartRef.current.style.cursor = elements.length > 0 ? ''pointer'' : ''default'';\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          ticks: metricType === ''value'' ? {\n            callback: function(value) {\n              return new Intl.NumberFormat(''en-US'', {\n                style: ''currency'',\n                currency: ''USD'',\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 0\n              }).format(value);\n            }\n          } : {}\n        }\n      }\n    };\n    \n    // Add second y-axis for velocity metric\n    if (metricType === ''velocity'') {\n      options.scales.y1 = {\n        type: ''linear'',\n        display: true,\n        position: ''right'',\n        beginAtZero: true,\n        max: 100,\n        grid: {\n          drawOnChartArea: false\n        },\n        ticks: {\n          callback: function(value) {\n            return value + ''%'';\n          }\n        }\n      };\n    }\n    \n    chartInstance.current = new Chart(ctx, {\n      type: ''line'',\n      data: chartData,\n      options: options\n    });\n  };\n\n  const getChartTitle = () => {\n    switch (metricType) {\n      case ''count'':\n        return ''Deal Flow Over Time'';\n      case ''value'':\n        return ''Deal Value Over Time'';\n      case ''velocity'':\n        return ''Deal Velocity & Win Rate'';\n      case ''conversion'':\n        return ''Cumulative Conversion Rate'';\n      default:\n        return ''Deal Metrics'';\n    }\n  };\n\n  const handleTimeRangeChange = (range) => {\n    setTimeRange(range);\n    onSaveUserSettings({ ...savedUserSettings, timeRange: range });\n  };\n\n  const handleMetricChange = (metric) => {\n    setMetricType(metric);\n    onSaveUserSettings({ ...savedUserSettings, metricType: metric });\n  };\n\n  const handleChartClick = (index) => {\n    const bucket = bucketsRef.current[index];\n    if (bucket && bucket.dealIds.length > 0) {\n      setSelectedPeriod(bucket);\n      \n      // Filter deals for this period\n      const bucketDeals = deals.filter(deal => bucket.dealIds.includes(deal.ID));\n      setPeriodDeals(bucketDeals);\n    }\n  };\n\n  const handleSort = (field) => {\n    if (sortBy === field) {\n      setSortDirection(sortDirection === ''ASC'' ? ''DESC'' : ''ASC'');\n    } else {\n      setSortBy(field);\n      setSortDirection(field === ''Amount'' ? ''DESC'' : ''ASC'');\n    }\n  };\n\n  const getSortedDeals = () => {\n    const sorted = [...periodDeals].sort((a, b) => {\n      let aVal = a[sortBy];\n      let bVal = b[sortBy];\n      \n      if (sortBy === ''CloseDate'' || sortBy === ''__mj_CreatedAt'') {\n        aVal = new Date(aVal || 0).getTime();\n        bVal = new Date(bVal || 0).getTime();\n      }\n      \n      if (sortDirection === ''ASC'') {\n        return aVal > bVal ? 1 : -1;\n      } else {\n        return aVal < bVal ? 1 : -1;\n      }\n    });\n    \n    return sorted;\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat(''en-US'', {\n      style: ''currency'',\n      currency: ''USD'',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount || 0);\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading deal velocity data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''20px'', backgroundColor: ''#FEE2E2'', borderRadius: ''8px'', margin: ''20px'' }}>\n        <div style={{ color: ''#991B1B'', fontWeight: ''bold'' }}>Error loading data</div>\n        <div style={{ color: ''#DC2626'', marginTop: ''8px'' }}>{error}</div>\n        <button \n          onClick={loadDeals}\n          style={{\n            marginTop: ''12px'',\n            padding: ''8px 16px'',\n            backgroundColor: ''#EF4444'',\n            color: ''white'',\n            border: ''none'',\n            borderRadius: ''6px'',\n            cursor: ''pointer''\n          }}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  // Internal component for summary stats\n  const renderSummaryStats = () => {\n    const totalDeals = deals.length;\n    const closedDeals = deals.filter(d => d.Stage === ''Closed Won'' || d.Stage === ''Closed Lost'').length;\n    const wonDeals = deals.filter(d => d.Stage === ''Closed Won'').length;\n    const winRate = closedDeals > 0 ? Math.round((wonDeals / closedDeals) * 100) : 0;\n    const totalValue = deals.reduce((sum, d) => sum + (d.Amount || 0), 0);\n    const wonValue = deals.filter(d => d.Stage === ''Closed Won'').reduce((sum, d) => sum + (d.Amount || 0), 0);\n    \n    const metrics = [\n      { label: ''Total Deals'', value: totalDeals, color: ''#3B82F6'', format: ''number'' },\n      { label: ''Won Deals'', value: wonDeals, color: ''#10B981'', format: ''number'' },\n      { label: ''Win Rate'', value: winRate, color: ''#F59E0B'', format: ''percent'' },\n      { label: ''Total Value'', value: totalValue, color: ''#8B5CF6'', format: ''currency'' },\n      { label: ''Won Value'', value: wonValue, color: ''#EC4899'', format: ''currency'' }\n    ];\n    \n    const formatValue = (value, format) => {\n      switch (format) {\n        case ''currency'':\n          return formatCurrency(value);\n        case ''percent'':\n          return `$' + '{value}%`;\n        default:\n          return value.toLocaleString();\n      }\n    };\n    \n    return (\n      <div style={{ \n        display: ''grid'', \n        gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'',\n        gap: ''12px'',\n        marginBottom: ''20px''\n      }}>\n        {metrics.map((metric, index) => (\n          <div \n            key={index}\n            style={{ \n              padding: ''12px'', \n              backgroundColor: ''#F9FAFB'', \n              borderRadius: ''8px'',\n              borderLeft: `4px solid $' + '{metric.color}`\n            }}\n          >\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>\n              {metric.label}\n            </div>\n            <div style={{ \n              fontSize: metric.format === ''currency'' ? ''20px'' : ''24px'', \n              fontWeight: ''bold'', \n              color: ''#111827'' \n            }}>\n              {formatValue(metric.value, metric.format)}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div style={{ padding: ''20px'', height: ''100%'', display: ''flex'', flexDirection: ''column'' }}>\n      <div style={{ marginBottom: ''20px'' }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''16px'' }}>\n          <h2 style={{ fontSize: ''24px'', fontWeight: ''bold'', margin: 0 }}>Deal Velocity Analysis</h2>\n          <button\n            onClick={loadDeals}\n            style={{\n              padding: ''8px 16px'',\n              backgroundColor: ''#3B82F6'',\n              color: ''white'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer'',\n              fontSize: ''14px''\n            }}\n          >\n            Refresh\n          </button>\n        </div>\n        \n        {/* Controls */}\n        <div style={{ display: ''flex'', gap: ''16px'', marginBottom: ''16px'' }}>\n          <div style={{ display: ''flex'', gap: ''8px'' }}>\n            {Object.entries(timeRanges).map(([key, value]) => (\n              <button\n                key={key}\n                onClick={() => handleTimeRangeChange(key)}\n                style={{\n                  padding: ''6px 12px'',\n                  backgroundColor: timeRange === key ? ''#3B82F6'' : ''#F3F4F6'',\n                  color: timeRange === key ? ''white'' : ''#374151'',\n                  border: ''1px solid'',\n                  borderColor: timeRange === key ? ''#3B82F6'' : ''#D1D5DB'',\n                  borderRadius: ''6px'',\n                  cursor: ''pointer'',\n                  fontSize: ''14px''\n                }}\n              >\n                {value.label}\n              </button>\n            ))}\n          </div>\n          \n          <div style={{ display: ''flex'', gap: ''8px'', marginLeft: ''auto'' }}>\n            <button\n              onClick={() => handleMetricChange(''count'')}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: metricType === ''count'' ? ''#3B82F6'' : ''#F3F4F6'',\n                color: metricType === ''count'' ? ''white'' : ''#374151'',\n                border: ''1px solid'',\n                borderColor: metricType === ''count'' ? ''#3B82F6'' : ''#D1D5DB'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              📊 Deal Count\n            </button>\n            <button\n              onClick={() => handleMetricChange(''value'')}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: metricType === ''value'' ? ''#3B82F6'' : ''#F3F4F6'',\n                color: metricType === ''value'' ? ''white'' : ''#374151'',\n                border: ''1px solid'',\n                borderColor: metricType === ''value'' ? ''#3B82F6'' : ''#D1D5DB'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              💰 Deal Value\n            </button>\n            <button\n              onClick={() => handleMetricChange(''velocity'')}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: metricType === ''velocity'' ? ''#3B82F6'' : ''#F3F4F6'',\n                color: metricType === ''velocity'' ? ''white'' : ''#374151'',\n                border: ''1px solid'',\n                borderColor: metricType === ''velocity'' ? ''#3B82F6'' : ''#D1D5DB'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              ⚡ Velocity\n            </button>\n            <button\n              onClick={() => handleMetricChange(''conversion'')}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: metricType === ''conversion'' ? ''#3B82F6'' : ''#F3F4F6'',\n                color: metricType === ''conversion'' ? ''white'' : ''#374151'',\n                border: ''1px solid'',\n                borderColor: metricType === ''conversion'' ? ''#3B82F6'' : ''#D1D5DB'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              🎯 Conversion\n            </button>\n          </div>\n        </div>\n        \n        {/* Summary Stats */}\n        {renderSummaryStats()}\n        \n      </div>\n      \n      {/* Chart Container */}\n      <div style={{ \n        flex: 1, \n        backgroundColor: ''white'', \n        borderRadius: ''8px'', \n        padding: ''20px'',\n        border: ''1px solid #E5E7EB'',\n        position: ''relative'',\n        minHeight: ''400px''\n      }}>\n        <canvas ref={chartRef}></canvas>\n      </div>\n      \n      {deals.length === 0 && (\n        <div style={{ padding: ''40px'', textAlign: ''center'', color: ''#6B7280'' }}>\n          No deals found in the selected time range\n        </div>\n      )}\n\n      {/* Period Details Modal */}\n      {selectedPeriod && (\n        <div style={{\n          position: ''fixed'',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: ''rgba(0, 0, 0, 0.5)'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1000\n        }}\n        onClick={() => {\n          setSelectedPeriod(null);\n          setSelectedDeal(null);\n        }}\n        >\n          <div \n            style={{\n              backgroundColor: ''white'',\n              borderRadius: ''12px'',\n              width: ''90%'',\n              maxWidth: ''1200px'',\n              height: ''80vh'',\n              display: ''flex'',\n              flexDirection: ''column'',\n              boxShadow: ''0 20px 25px -5px rgba(0, 0, 0, 0.1)''\n            }}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div style={{\n              padding: ''20px'',\n              borderBottom: ''1px solid #E5E7EB'',\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''center''\n            }}>\n              <h3 style={{ fontSize: ''20px'', fontWeight: ''bold'', margin: 0 }}>\n                Deals for {selectedPeriod.label}\n                <span style={{ marginLeft: ''12px'', fontSize: ''16px'', color: ''#6B7280'' }}>\n                  ({periodDeals.length} deals)\n                </span>\n              </h3>\n              <button\n                onClick={() => {\n                  setSelectedPeriod(null);\n                  setSelectedDeal(null);\n                }}\n                style={{\n                  background: ''none'',\n                  border: ''none'',\n                  fontSize: ''24px'',\n                  cursor: ''pointer'',\n                  color: ''#6B7280'',\n                  padding: ''0'',\n                  width: ''30px'',\n                  height: ''30px''\n                }}\n              >\n                ×\n              </button>\n            </div>\n            \n            <div style={{ flex: 1, overflow: ''auto'', padding: ''20px'' }}>\n              {periodDeals.length === 0 ? (\n                <div style={{ textAlign: ''center'', padding: ''40px'', color: ''#6B7280'' }}>\n                  No deals found for this period\n                </div>\n              ) : (\n                <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n                  <thead>\n                    <tr style={{ borderBottom: ''2px solid #E5E7EB'' }}>\n                      <th \n                        onClick={() => handleSort(''DealName'')}\n                        style={{ \n                          padding: ''12px'', \n                          textAlign: ''left'', \n                          fontWeight: ''600'',\n                          cursor: ''pointer'',\n                          color: sortBy === ''DealName'' ? ''#3B82F6'' : ''#374151''\n                        }}\n                      >\n                        Deal Name\n                        {sortBy === ''DealName'' && (\n                          <span style={{ marginLeft: ''4px'' }}>{sortDirection === ''ASC'' ? ''\\u2191'' : ''\\u2193''}</span>\n                        )}\n                      </th>\n                      <th style={{ padding: ''12px'', textAlign: ''left'', fontWeight: ''600'' }}>Stage</th>\n                      <th \n                        onClick={() => handleSort(''Amount'')}\n                        style={{ \n                          padding: ''12px'', \n                          textAlign: ''right'', \n                          fontWeight: ''600'',\n                          cursor: ''pointer'',\n                          color: sortBy === ''Amount'' ? ''#3B82F6'' : ''#374151''\n                        }}\n                      >\n                        Amount\n                        {sortBy === ''Amount'' && (\n                          <span style={{ marginLeft: ''4px'' }}>{sortDirection === ''ASC'' ? ''\\u2191'' : ''\\u2193''}</span>\n                        )}\n                      </th>\n                      <th \n                        onClick={() => handleSort(''CloseDate'')}\n                        style={{ \n                          padding: ''12px'', \n                          textAlign: ''left'', \n                          fontWeight: ''600'',\n                          cursor: ''pointer'',\n                          color: sortBy === ''CloseDate'' ? ''#3B82F6'' : ''#374151''\n                        }}\n                      >\n                        Close Date\n                        {sortBy === ''CloseDate'' && (\n                          <span style={{ marginLeft: ''4px'' }}>{sortDirection === ''ASC'' ? ''\\u2191'' : ''\\u2193''}</span>\n                        )}\n                      </th>\n                      <th \n                        onClick={() => handleSort(''__mj_CreatedAt'')}\n                        style={{ \n                          padding: ''12px'', \n                          textAlign: ''left'', \n                          fontWeight: ''600'',\n                          cursor: ''pointer'',\n                          color: sortBy === ''__mj_CreatedAt'' ? ''#3B82F6'' : ''#374151''\n                        }}\n                      >\n                        Created\n                        {sortBy === ''__mj_CreatedAt'' && (\n                          <span style={{ marginLeft: ''4px'' }}>{sortDirection === ''ASC'' ? ''\\u2191'' : ''\\u2193''}</span>\n                        )}\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {getSortedDeals().map((deal, index) => {\n                      const stageColors = {\n                        ''Prospecting'': { bg: ''#F3F4F6'', text: ''#6B7280'' },\n                        ''Qualification'': { bg: ''#DBEAFE'', text: ''#1E40AF'' },\n                        ''Proposal'': { bg: ''#FEF3C7'', text: ''#92400E'' },\n                        ''Negotiation'': { bg: ''#FED7AA'', text: ''#9A3412'' },\n                        ''Closed Won'': { bg: ''#D1FAE5'', text: ''#065F46'' },\n                        ''Closed Lost'': { bg: ''#FEE2E2'', text: ''#991B1B'' }\n                      };\n                      const stageStyle = stageColors[deal.Stage] || stageColors[''Prospecting''];\n                      \n                      return (\n                        <tr \n                          key={deal.ID}\n                          style={{ \n                            borderBottom: ''1px solid #E5E7EB'',\n                            cursor: ''pointer'',\n                            backgroundColor: index % 2 === 0 ? ''white'' : ''#F9FAFB''\n                          }}\n                          onClick={() => setSelectedDeal(deal)}\n                          onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F3F4F6''}\n                          onMouseLeave={(e) => e.currentTarget.style.backgroundColor = index % 2 === 0 ? ''white'' : ''#F9FAFB''}\n                        >\n                          <td style={{ padding: ''12px'', fontWeight: ''500'' }}>{deal.DealName}</td>\n                          <td style={{ padding: ''12px'' }}>\n                            <span style={{\n                              padding: ''4px 8px'',\n                              borderRadius: ''6px'',\n                              fontSize: ''12px'',\n                              fontWeight: ''600'',\n                              backgroundColor: stageStyle.bg,\n                              color: stageStyle.text\n                            }}>\n                              {deal.Stage}\n                            </span>\n                          </td>\n                          <td style={{ padding: ''12px'', textAlign: ''right'', fontWeight: ''600'', color: ''#059669'' }}>\n                            {formatCurrency(deal.Amount)}\n                          </td>\n                          <td style={{ padding: ''12px'' }}>\n                            {deal.CloseDate ? new Date(deal.CloseDate).toLocaleDateString() : ''-''}\n                          </td>\n                          <td style={{ padding: ''12px'' }}>\n                            {new Date(deal.__mj_CreatedAt).toLocaleDateString()}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Deal Detail Modal */}\n      {selectedDeal && (\n        <div style={{\n          position: ''fixed'',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: ''rgba(0, 0, 0, 0.5)'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1001\n        }}\n        onClick={() => setSelectedDeal(null)}\n        >\n          <div \n            style={{\n              backgroundColor: ''white'',\n              borderRadius: ''12px'',\n              padding: ''24px'',\n              maxWidth: ''500px'',\n              width: ''90%'',\n              maxHeight: ''80vh'',\n              overflowY: ''auto'',\n              boxShadow: ''0 20px 25px -5px rgba(0, 0, 0, 0.1)''\n            }}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''start'', marginBottom: ''20px'' }}>\n              <h3 style={{ fontSize: ''20px'', fontWeight: ''bold'', margin: 0 }}>{selectedDeal.DealName}</h3>\n              <button\n                onClick={() => setSelectedDeal(null)}\n                style={{\n                  background: ''none'',\n                  border: ''none'',\n                  fontSize: ''24px'',\n                  cursor: ''pointer'',\n                  color: ''#6B7280'',\n                  padding: ''0'',\n                  width: ''30px'',\n                  height: ''30px''\n                }}\n              >\n                ×\n              </button>\n            </div>\n            \n            <div style={{ display: ''grid'', gap: ''16px'' }}>\n              <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''16px'' }}>\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Amount</label>\n                  <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#059669'' }}>\n                    {formatCurrency(selectedDeal.Amount)}\n                  </div>\n                </div>\n                \n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Stage</label>\n                  <div style={{ fontSize: ''16px'', fontWeight: ''600'' }}>\n                    {selectedDeal.Stage}\n                  </div>\n                </div>\n              </div>\n              \n              <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''16px'' }}>\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Close Date</label>\n                  <div style={{ fontSize: ''14px'', color: ''#111827'' }}>\n                    {selectedDeal.CloseDate ? new Date(selectedDeal.CloseDate).toLocaleDateString() : ''Not set''}\n                  </div>\n                </div>\n                \n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Probability</label>\n                  <div style={{ fontSize: ''14px'', color: ''#111827'' }}>\n                    {selectedDeal.Probability || 0}%\n                  </div>\n                </div>\n              </div>\n              \n              {selectedDeal.DealSource && (\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Source</label>\n                  <div style={{ fontSize: ''14px'', color: ''#111827'' }}>\n                    {selectedDeal.DealSource}\n                  </div>\n                </div>\n              )}\n              \n              {selectedDeal.NextStep && (\n                <div>\n                  <label style={{ fontSize: ''12px'', color: ''#6B7280'', display: ''block'', marginBottom: ''4px'' }}>Next Step</label>\n                  <div style={{ fontSize: ''14px'', color: ''#111827'' }}>\n                    {selectedDeal.NextStep}\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <div style={{ \n              marginTop: ''20px'', \n              paddingTop: ''20px'', \n              borderTop: ''1px solid #E5E7EB'',\n              display: ''flex'',\n              justifyContent: ''flex-end''\n            }}>\n              <button\n                onClick={() => {\n                  // callbacks.OpenEntityRecord expects:\n                  // 1. Entity name as string\n                  // 2. Array of key-value pairs: [{FieldName: ''fieldname'', Value: value}]\n                  if (callbacks.OpenEntityRecord) {\n                    callbacks.OpenEntityRecord(''Deals'', [\n                      { FieldName: ''ID'', Value: selectedDeal.ID }\n                    ]);\n                    setSelectedDeal(null);\n                    setSelectedPeriod(null);\n                  } else {\n                    console.warn(''OpenEntityRecord callback not available'');\n                  }\n                }}\n                style={{\n                  padding: ''8px 16px'',\n                  backgroundColor: ''#3B82F6'',\n                  color: ''white'',\n                  border: ''none'',\n                  borderRadius: ''6px'',\n                  cursor: ''pointer'',\n                  fontSize: ''14px'',\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  gap: ''8px''\n                }}\n              >\n                <span style={{ fontSize: ''16px'' }}>📂</span>\n                Open\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","libraries":[{"name":"Chart.js","version":"^4.4.0","globalVariable":"Chart"}]}'
SET
  @FunctionalRequirements_3881dbf5 = N'## Deal Velocity Analysis

### Core Features
- Track deal creation and closure rates over time
- Show multiple metrics: count, value, velocity, conversion
- Configurable time ranges (1 month to 2 years)
- Dynamic bucketing (daily, weekly, monthly)
- Summary statistics cards

### Metric Types
1. **Deal Count**: New, Won, Lost deals over time
2. **Deal Value**: Pipeline and Won value trends
3. **Velocity**: Average days to close and win rate
4. **Conversion**: Cumulative conversion rate trend

### Visual Design
- Line charts with smooth curves
- Color-coded metrics
- Interactive tooltips
- Responsive layout
- Summary cards with key metrics'
SET
  @TechnicalDesign_3881dbf5 = N'## Implementation

### Data Loading
- Single RunView call with date range filter
- Load deals created OR closed in range
- Use __mj_CreatedAt for creation tracking

### Time Bucketing
- Daily buckets for 1 month
- Weekly buckets for 3-6 months
- Monthly buckets for 1-2 years

### Metrics Calculation
- Deal count by bucket
- Sum values by bucket
- Average cycle time (close - create)
- Win rate percentage
- Cumulative conversion rate

### Chart.js Configuration
- Line chart with tension for smooth curves
- Multiple Y-axes for different scales
- Custom tooltips with formatting
- Responsive aspect ratio'
SET
  @FunctionalRequirementsVector_3881dbf5 = N'[-0.035990387201309204,0.035737115889787674,-0.041320815682411194,-0.05635599046945572,0.008051689714193344,-0.018313029780983925,0.006954856216907501,0.00667356513440609,-0.11213057488203049,-0.015665723010897636,-0.040525782853364944,-0.039158664643764496,0.021966051310300827,0.19777031242847443,-0.049212198704481125,-0.04925457388162613,-0.013814318925142288,-0.011733734048902988,0.003846091218292713,0.01668820157647133,0.014459474943578243,-0.011250278912484646,-0.021579669788479805,0.026944007724523544,-0.0314655564725399,-0.021222243085503578,-0.05737156420946121,-0.023936817422509193,-0.01475998479872942,-0.1331741362810135,0.00777569692581892,0.024096909910440445,-0.013886476866900921,0.02819962427020073,0.000002054131527984282,-0.014500373043119907,-0.05116581916809082,0.01661236397922039,-0.012408523820340633,0.05889812856912613,0.09285227954387665,-0.05577440187335014,0.037619322538375854,0.017809122800827026,-0.025623047724366188,-0.06819900870323181,-0.048851437866687775,-0.005165620241314173,-0.016293270513415337,-0.012012428604066372,0.006397899240255356,0.03160794451832771,-0.009357370436191559,-0.00037698043161071837,-0.04352143779397011,-0.0782330259680748,-0.026602283120155334,0.012100297026336193,0.006612020544707775,-0.06619764119386673,-0.027728380635380745,-0.0049438197165727615,0.006445384584367275,-0.07963572442531586,0.08080924302339554,0.04402840510010719,0.039850179105997086,0.00241425191052258,-0.05059134215116501,0.011987049132585526,0.04793284460902214,0.018352152779698372,-0.0014224454062059522,-0.0360613688826561,-0.030962331220507622,-0.10371368378400803,-0.042346078902482986,0.032877691090106964,0.03996121883392334,-0.02215525321662426,-0.1182451918721199,0.10175799578428268,-0.049266517162323,-0.00919969193637371,0.03859306126832962,-0.03436726704239845,0.01144268736243248,0.011541895568370819,-0.024356551468372345,0.0032753825653344393,0.06706749647855759,-0.03591226786375046,-0.018206721171736717,-0.01694449968636036,-0.0664951354265213,-0.02544599026441574,0.03111782856285572,0.0029629140626639128,0.017926709726452827,-0.02572551928460598,0.021331461146473885,0.014984440058469772,0.04020708054304123,0.024747628718614578,0.053912583738565445,-0.009325232356786728,0.007912404835224152,-0.07651802897453308,-0.03262566030025482,0.05055727809667587,-0.001486391294747591,0.007336594630032778,0.0004475321911741048,0.005306462291628122,-0.008675060234963894,0.0073311589658260345,-0.07995395362377167,-0.0028278303798288107,0.005096822045743465,0.025220287963747978,0.07366996258497238,0.004541346337646246,0.018356110900640488,0.02340274676680565,-0.04106312245130539,0.02034013345837593,-0.057377059012651443,-0.006215184461325407,-0.00904285442084074,0.007068990264087915,-0.011763111688196659,-0.003836653660982847,-0.0042946236208081245,-0.03609707951545715,0.009937296621501446,0.001493941294029355,0.0026827347464859486,0.03213479369878769,-0.014672938734292984,-0.01024724543094635,0.017878251150250435,0.0043602390214800835,-0.04448561742901802,-0.005711168050765991,-0.0226852148771286,-0.02321472577750683,-0.015026119537651539,0.06142127513885498,-0.002024349756538868,-0.0013567620189860463,0.0022065285593271255,-0.007238851394504309,0.030717061832547188,0.04348890110850334,-0.01985931023955345,-0.040188174694776535,0.02615225501358509,-0.0020870910957455635,0.00858378130942583,0.06209111586213112,-0.0025010022800415754,-0.031890321522951126,0.020760685205459595,0.011964854784309864,-0.021239032968878746,0.04204002395272255,-0.06084205210208893,-0.006124501582235098,0.017831234261393547,-0.036778420209884644,0.011201094835996628,-0.02223779447376728,-0.045461636036634445,0.002005765913054347,0.022619551047682762,-0.011281067505478859,0.05224781483411789,-0.0026649567298591137,-0.0010106750996783376,-0.06292284280061722,-0.003676320891827345,-0.16927747428417206,0.03439895808696747,0.03577413409948349,0.05037662014365196,-0.002132078865543008,-0.06035926938056946,0.04276057332754135,-0.008618367835879326,0.006126338616013527,0.001113181235268712,0.028836047276854515,0.004722219426184893,0.011792468838393688,0.000762533803936094,-0.011905960738658905,-0.004083762411028147,-0.04760824516415596,0.011553903110325336,0.04270698130130768,-0.05501318722963333,-0.010937469080090523,0.008837427012622356,-0.040049925446510315,0.026677830144762993,0.05076535791158676,0.015486170537769794,-0.03806060925126076,-0.08973190188407898,0.037296365946531296,0.06287679821252823,-0.0008290458936244249,-0.06312433630228043,0.011167250573635101,-0.011591189540922642,0.04185320809483528,0.016816284507513046,0.015461280010640621,-0.010923492722213268,-0.019285256043076515,-0.016678305342793465,0.021748214960098267,0.012536874040961266,0.003006197279319167,0.12241227179765701,0.05076327174901962,0.0163493063300848,-0.03333557769656181,0.026105234399437904,0.0020148083567619324,0.007028818596154451,-0.022547906264662743,0.010139670222997665,0.013334237039089203,0.004628622438758612,0.05579029396176338,0.08220622688531876,0.12124735862016678,0.011589501053094864,0.059452906250953674,-0.03457063063979149,-0.07147216796875,-0.012898513115942478,0.023676088079810143,0.010136429220438004,-0.014305400662124157,-0.04594876244664192,-0.0033745644614100456,0.04062875360250473,-0.012223804369568825,0.012728561647236347,0.01887974888086319,0.06146504357457161,-0.007345784921199083,-0.003901225281879306,0.01425862591713667,-0.11360770463943481,0.021619059145450592,0.014855834655463696,0.07074474543333054,0.0075982133857905865,-0.025988953188061714,-0.02655705437064171,-0.01705300249159336,0.009915143251419067,-0.04135046899318695,0.04858158528804779,0.017046811059117317,0.041210293769836426,0.0186128169298172,0.04578172788023949,0.009401889517903328,-0.004596374928951263,0.008165865205228329,0.0012542889453470707,0.04203544929623604,-0.08441619575023651,0.01117672584950924,-0.008262843824923038,-0.018126532435417175,-0.011292348615825176,-0.0332619845867157,-0.011222882196307182,0.009546606801450253,-0.009217220358550549,-0.0002229949168395251,0.020173000171780586,0.007396747823804617,-0.026297373697161674,-0.05162651836872101,0.02652714028954506,-0.04720135033130646,0.02836012654006481,-0.029685664921998978,-0.04688442498445511,0.022199980914592743,-0.017124777659773827,0.006876955274492502,-0.004481066484004259,0.006969287060201168,-0.006539303343743086,-0.06765290349721909,-0.056155212223529816,0.01567155309021473,-0.017093803733587265,0.0042862435802817345,0.019485171884298325,0.017303943634033203,0.009774275124073029,0.05527222901582718,0.020402712747454643,-0.003412890248000622,0.020913822576403618,-0.04004824161529541,0.006489707622677088,-0.019927870482206345,-0.012702398002147675,0.06371545791625977,-0.0047439574263989925,0.03932832181453705,0.0259059127420187,-0.03370499610900879,-0.03966985642910004,0.003368288977071643,-0.03635173663496971,-0.0005938433459959924,-0.034109558910131454,-0.02694769576191902,-0.05159618705511093,-0.009549490176141262,-0.012147543020546436,-0.025774221867322922,-0.04667152836918831,0.0044709485955536366,0.0062739965505898,0.002981326309964061,-0.04373050108551979,0.05221384018659592,0.01783894933760166,-0.027668925002217293,-0.02009993977844715,0.018321800976991653,-0.04350930079817772,-0.014036495238542557,-0.01029272098094225,-0.019835585728287697,0.07505890727043152,-0.011823905631899834,-0.07381267100572586,0.03551308065652847,0.034008461982011795,-0.0058058095164597034,-0.024956325069069862,-0.04932292923331261,0.019811563193798065,0.017347143962979317,-0.012399328872561455,-0.004095347132533789,-0.007266073487699032,-0.06878815591335297,0.02572813257575035,0.03601912409067154,-0.01994895190000534,0.05554981902241707,-0.03773476183414459,0.046247776597738266,0.007341133896261454,0.004499992821365595,0.053337447345256805,0.023285696282982826,-0.032536815851926804,0.023922009393572807,0.048558205366134644,0.0106676509603858,-0.010302229784429073,-0.025809941813349724,0.019639160484075546,0.010431106202304363,0.04248303547501564,-0.011388798244297504,0.03465278074145317,-0.016045523807406425,0.08814657479524612,-0.04076369106769562,0.05804649367928505,-0.01958729326725006,-0.007600870449095964,-0.028837762773036957,-0.02960682287812233,-0.0027972511015832424,-0.011246936395764351,0.027679556980729103,0.03447481989860535,-0.0020476696081459522,-0.020446619018912315,-0.02132263593375683,0.008352967910468578,0.023387102410197258,-0.011972934938967228,0.003571219276636839,0.008002156391739845,-0.0035070092417299747,0.05460820719599724,-0.013711364939808846,0.015199868939816952,-0.022415313869714737,0.015859199687838554,0.03524382412433624,-0.01566326804459095,-0.004329644609242678,-0.06985706090927124,0.0489703007042408,-0.0011433043982833624,-0.023278987035155296,0.029809843748807907,0.024673080071806908,0.012905733659863472,0.02548353746533394,0.03398991748690605,-0.0008715267176739872,0.050524670630693436,0.04745205119252205,0.03726108372211456,0.04745832458138466,-0.00912814773619175,-0.021040743216872215,-0.02239365689456463,-0.07941988110542297,0.014058874920010567,-0.00801907479763031,-0.004603471141308546,0.027557814493775368,0.0019030257826671004,0.01727612316608429,-0.013676680624485016,-0.09973277151584625,-0.014279629103839397,0.0054563055746257305,-0.016521448269486427,0.011499229818582535,0.014701150357723236,0.005107916425913572,0.061370596289634705,0.00020954186038579792,0.03769952431321144,0.011986196041107178,0.00427210982888937,0.019455622881650925,0.01572406478226185,-0.03127475827932358,0.008854725398123264,-0.06780138611793518,0.04730363190174103,-0.00035796177689917386,0.002164405770599842,-0.02912074699997902,0.049651261419057846,-0.09007659554481506,0.005960780195891857,-0.045751865953207016,0.015925105661153793,0.020199162885546684,-0.05056879296898842,0.02618977427482605,0.05260872840881348,-0.13023151457309723,-0.038090597838163376,-0.01849302090704441,-0.01862194947898388,-0.028980286791920662,0.042167674750089645,-0.008609088137745857,-0.031137851998209953,0.022968510165810585,0.03669057786464691,0.01188450027257204,0.0057509602047502995,0.005087696015834808,0.0724128782749176,0.01621013879776001,-0.02179422788321972,-0.01099134050309658,0.021138401702046394,-0.07611076533794403,0.0018967267824336886,0.03707282990217209,0.005333365872502327,-0.0013177312212064862,-0.022328227758407593,-0.03538874536752701,0.024487769231200218,-0.025333145633339882,-0.06037840619683266,0.030470315366983414,0.04609326273202896,0.025903020054101944,-0.005344050470739603,-0.026930535212159157,-0.004557064268738031,0.04583810642361641,-0.020213179290294647,-0.0007206848822534084,0.05360901728272438,-0.04239710792899132,-0.023560045287013054,0.05301331356167793,0.03444270044565201,-0.025379110127687454,-0.009616723284125328,-0.008327187970280647,0.04968313127756119,-0.0346950963139534,0.026240361854434013,-0.018770888447761536,0.04874860867857933,0.0023182558361440897,-0.020356586202979088,0.030353737995028496,-0.0029594090301543474,-0.011562032625079155,0.008916614577174187,0.0033972766250371933,-0.019334444776177406,-0.010780558921396732,0.07205862551927567,-0.07546080648899078,0.027696914970874786,-0.030598057433962822,0.016379311680793762,0.05431365594267845,-0.020723043009638786,0.014178864657878876,-0.022594043985009193,0.028484566137194633,-0.007010563742369413,0.06829685717821121,0.03577239811420441,0.024143414571881294,0.018742438405752182,-0.009781158529222012,-0.06151090934872627,0.03903812915086746,0.08097688108682632,-0.028751973062753677,0.04109157994389534,-0.004574031103402376,-0.019582021981477737,-0.028760744258761406,-0.023423047736287117,-0.009751472622156143,0.011239065788686275,0.013863561674952507,-0.005908063147217035,0.014329159632325172,-0.08813372999429703,-6.617808381834884e-33,-0.016869938001036644,-0.0272513497620821,-0.01991356536746025,-0.008309618569910526,-0.0008559168200008571,-0.0051439423114061356,0.05337579920887947,-0.016411393880844116,0.004580826032906771,0.003952056169509888,-0.025086693465709686,-0.016659487038850784,0.025836987420916557,-0.019766492769122124,0.04048331081867218,0.017332766205072403,0.04817104712128639,-0.0243078526109457,-0.005019203759729862,0.0038873974699527025,-0.051892898976802826,0.029667837545275688,0.03217120096087456,-0.045087069272994995,-0.03957011178135872,0.0406029038131237,-0.03303050622344017,0.013360150158405304,0.03226881101727486,0.02093072608113289,0.005485267378389835,-0.018360508605837822,-0.027511421591043472,-0.018182601779699326,-0.010633936151862144,-0.08574222028255463,-0.008421974256634712,0.011508017778396606,-0.004792351741343737,0.0009855326497927308,0.10100023448467255,0.009932445362210274,0.01206860039383173,0.001971457153558731,0.005954728927463293,0.007544137537479401,0.03564881905913353,-0.0168857853859663,-0.0489598847925663,-0.056054893881082535,0.018850374966859818,0.025648877024650574,-0.0196232907474041,0.03214402124285698,0.0328899547457695,-0.01033074501901865,0.030902354046702385,-0.01713353767991066,-0.0785081759095192,0.024011678993701935,-0.02189682237803936,-0.0013429793762043118,-0.00040088826790452003,-0.011188172735273838,0.01143449917435646,0.005242534913122654,-0.048215046525001526,0.02178192511200905,0.05240429565310478,-0.016057593747973442,0.017568105831742287,-0.0062601761892437935,-0.011237895116209984,-0.03283293545246124,0.0032427485566586256,0.03706977516412735,0.03506418317556381,0.00225620879791677,0.0342436358332634,0.03407122939825058,-0.012330897152423859,-0.012808035127818584,-0.0055336435325443745,0.05499469116330147,0.004009325057268143,-0.02359090745449066,0.0012142411433160305,-0.03847648948431015,0.025296973064541817,0.025584593415260315,0.007008855696767569,-0.02068733051419258,-0.019420772790908813,0.042514871805906296,-0.08054859936237335,-0.0058859484270215034,0.07185117155313492,0.08443985879421234,-0.005767174996435642,-0.03273502364754677,0.018329238519072533,0.011343438178300858,-0.016290616244077682,-0.042249757796525955,0.010372797027230263,-0.004056290723383427,0.026275809854269028,0.005410678219050169,-0.03840385377407074,0.011120238341391087,0.03194939345121384,0.01520154532045126,-0.02576235681772232,-0.03534982353448868,-0.030288614332675934,-0.03634824603796005,-0.012601402588188648,0.011622468009591103,0.005861194338649511,0.0327327698469162,-0.024287736043334007,-0.017742466181516647,0.0033675425220280886,0.02116008661687374,0.03691553324460983,-0.02323797531425953,0.003806118620559573,-0.07905339449644089,0.033029068261384964,0.0185224711894989,0.006850873585790396,-0.005484952591359615,2.9796154876748915e-7,-0.00012559119204524904,0.044171616435050964,-0.05957314744591713,0.0725010335445404,-0.03332489728927612,0.012050367891788483,-0.01052422821521759,-0.011535915546119213,0.04211748018860817,-0.04231981188058853,-0.00363931804895401,-0.015402095392346382,0.018825501203536987,0.05473903939127922,0.028827449306845665,-0.021400028839707375,0.02021067962050438,-0.03254874795675278,-0.041887182742357254,-0.0174301415681839,0.04484296590089798,0.04767359793186188,0.07288798689842224,0.030858175829052925,0.025251824408769608,0.057928502559661865,-0.0014758730540052056,-0.027977880090475082,-0.03446606174111366,0.03805740922689438,0.03323047608137131,-0.028049686923623085,-0.02926214039325714,-0.011757323518395424,-0.007032407913357019,0.04138340801000595,-0.014559716917574406,-0.03317556902766228,0.028436558321118355,0.01211974211037159,-0.019999762997031212,-0.027854327112436295,-0.013480981811881065,-0.004561582114547491,0.010737158358097076,-0.019569916650652885,0.012622019276022911,-0.061302561312913895,-0.00164975062943995,0.013620521873235703,0.029542215168476105,0.02007952891290188,0.00593671714887023,0.0207485593855381,0.03277832269668579,0.0005109517369419336,0.006721010431647301,0.04341975972056389,0.02418222650885582,-0.02077661082148552,0.004539909772574902,-0.009069321677088737,0.00031909436802379787,0.016415556892752647,0.013260934501886368,0.007924159988760948,-0.0021253337617963552,3.673245818054429e-34,0.02188901975750923,0.0010400727624073625,0.023679519072175026,0.08085672557353973,0.030663345009088516,-0.015079554170370102,0.07018470764160156,-0.03286191076040268,0.007918954826891422,-0.05611775442957878,-0.0007629041210748255]'
SET
  @TechnicalDesignVector_3881dbf5 = N'[0.008094379678368568,0.005929598119109869,-0.02742752432823181,-0.04692669212818146,0.002581364009529352,-0.04097757488489151,0.034110505133867264,-0.015650637447834015,-0.04094227775931358,-0.00006733646296197549,-0.05063466727733612,0.02373199351131916,0.017345592379570007,0.1844450682401657,-0.01620626449584961,-0.03638441115617752,-0.05545380339026451,0.02774868719279766,0.0158243291079998,0.009830326773226261,0.02465040795505047,0.0019706450402736664,-0.005825873930007219,-0.02389387972652912,0.011302599683403969,-0.0472068190574646,-0.05388765409588814,0.040365707129240036,-0.004915100988000631,-0.11636190861463547,-0.016848187893629074,0.01712176389992237,-0.05639325827360153,0.06178764998912811,0.0000020444306301214965,-0.019154885783791542,-0.041148532181978226,-0.011309613473713398,-0.023132478818297386,0.060810379683971405,0.08139737695455551,-0.06738925725221634,0.03747614845633507,-0.015121228992938995,0.0017694721464067698,-0.0007172755431383848,-0.05801352858543396,-0.0021498564165085554,0.017879698425531387,-0.019419992342591286,-0.0017466781428083777,0.0796976089477539,-0.02682274952530861,-0.0017043751431629062,-0.017900241538882256,-0.040894247591495514,-0.011369814164936543,0.05920462682843208,0.06487865746021271,-0.0635182335972786,-0.03272528201341629,0.006257784552872181,0.009622965008020401,-0.06435001641511917,0.04288311302661896,0.006520881317555904,0.028668012470006943,-0.04618275538086891,-0.0342981219291687,0.0007560555241070688,0.03790644556283951,-0.044522639364004135,-0.012651199474930763,-0.021669335663318634,-0.049522943794727325,-0.059871114790439606,-0.0768042579293251,0.015321938320994377,0.04738947004079819,-0.02578742988407612,-0.09156003594398499,0.04606650769710541,-0.04586957395076752,0.003676631487905979,0.06317766010761261,-0.05058181658387184,-0.003505764063447714,-0.02968009188771248,0.01357106864452362,0.009417103603482246,0.04457709938287735,-0.012212662026286125,-0.01428128406405449,-0.018775977194309235,-0.06551486998796463,-0.02515668421983719,0.04107096418738365,0.027887310832738876,0.023036247119307518,0.037932250648736954,0.06173727661371231,0.013728678226470947,0.023721637204289436,0.030850768089294434,0.028915327042341232,-0.001800461788661778,0.021384481340646744,-0.07157880067825317,-0.02195580303668976,0.02756308950483799,0.028192168101668358,0.0021396190859377384,0.00852153915911913,-0.014933127909898758,-0.0020930964965373278,-0.014260629191994667,-0.07753530144691467,0.00819373782724142,0.0060732546262443066,0.020937839522957802,0.12319301068782806,0.009435290470719337,0.004728625528514385,0.03443092852830887,0.0032381247729063034,-0.04502975568175316,-0.037461716681718826,0.005869358777999878,-0.015649208799004555,-0.016838915646076202,-0.02764000929892063,0.017561355605721474,0.012612130492925644,-0.02689977176487446,0.020770957693457603,-0.017239924520254135,0.028160393238067627,0.054432086646556854,-0.050628021359443665,-0.021003108471632004,0.002447224222123623,-0.000628626556135714,-0.07319885492324829,0.005732052493840456,0.0020712725818157196,-0.02433435432612896,-0.006670138332992792,0.07955986261367798,0.011787991970777512,0.012370722368359566,-0.038756947964429855,-0.03411995619535446,-0.009435266256332397,0.04298373684287071,-0.06387152522802353,-0.010237612761557102,0.02092612162232399,0.02176043763756752,0.03968586027622223,0.0355643704533577,0.01847519353032112,-0.013136204332113266,0.014223428443074226,0.003411416197195649,-0.013425574637949467,0.046820346266031265,-0.0684618204832077,-0.021005120128393173,-0.053073447197675705,-0.011164422146975994,0.007662272080779076,-0.04214564710855484,-0.03219207376241684,0.030440974980592728,0.015010257251560688,-0.024776827543973923,0.06448959559202194,-0.04059148207306862,0.0044690389186143875,-0.025539157912135124,0.024450182914733887,-0.1466730386018753,0.003989806864410639,-0.009477267973124981,0.10018033534288406,-0.012843279168009758,-0.08167991042137146,0.038212817162275314,0.016926201060414314,0.03715643286705017,0.009219037368893623,0.03549636900424957,-0.04155510291457176,0.020918317139148712,-0.01245796401053667,0.016475845128297806,0.015384610742330551,-0.042281441390514374,0.011278497986495495,0.03546130284667015,-0.022013749927282333,0.026588743552565575,-0.0001379206805722788,-0.05854569002985954,0.021173272281885147,0.049928225576877594,-0.029732873663306236,-0.010937259532511234,-0.10173012316226959,0.032233789563179016,0.035868678241968155,0.00493227131664753,-0.04617202654480934,-0.005642172414809465,-0.04329190030694008,0.017188623547554016,-0.0018439635168761015,0.0035697235725820065,0.0019215121865272522,-0.007138221524655819,-0.03722593933343887,0.01664060726761818,0.026511861011385918,-0.009657259099185467,0.05053117871284485,0.02994110807776451,0.026603633537888527,-0.03153317794203758,0.06110645830631256,0.00043231219751760364,0.011067163199186325,-0.04075004160404205,0.041684024035930634,0.04000968113541603,0.02587096393108368,0.07952949404716492,0.03384501859545708,0.04584410414099693,0.0104130320250988,0.04508011415600777,0.026024658232927322,-0.04881148412823677,-0.02464650571346283,-0.022864114493131638,0.014372501522302628,-0.0016337737906724215,-0.052308179438114166,0.023090168833732605,0.004364133812487125,-0.014423951506614685,0.022122688591480255,0.033498600125312805,0.04286397248506546,-0.014483909122645855,-0.0035633950028568506,0.023355640470981598,-0.02478066086769104,0.0172063410282135,0.008282230235636234,0.10276219993829727,0.012171038426458836,-0.01668764464557171,-0.023000568151474,-0.012628795579075813,0.034586478024721146,-0.05702006071805954,0.05781853571534157,-0.039089400321245193,0.045840054750442505,0.03369857370853424,-0.01596132107079029,0.04291580244898796,0.032038744539022446,-0.016145652160048485,-0.031198667362332344,0.06115339323878288,-0.017893290147185326,0.02309456095099449,-0.01782899908721447,-0.023555831983685493,-0.018870119005441666,-0.030975913628935814,0.014555655419826508,0.0247946884483099,-0.0000715885398676619,-0.00121709902305156,0.036178793758153915,0.03311816230416298,-0.01062304899096489,-0.03935731574892998,0.0071328068152070045,-0.0344197154045105,0.02110556699335575,-0.015575292520225048,-0.054186876863241196,0.02596847154200077,0.01731361448764801,0.03778354078531265,-0.05277394503355026,-0.0013272998621687293,-0.030462808907032013,-0.04604623466730118,-0.022654885426163673,-0.010614723898470402,0.00394498510286212,-0.01903136819601059,0.0591089241206646,-0.015893224626779556,-0.017772985622286797,0.078894704580307,0.05149881914258003,0.011720874346792698,0.0385921411216259,-0.04381442070007324,0.013961948454380035,-0.00963510386645794,-0.05448492243885994,0.03925245255231857,-0.012148318812251091,0.07064986228942871,0.013829256407916546,-0.045000456273555756,-0.014128773473203182,0.008342222310602665,-0.07456024736166,-0.006573644001036882,-0.06124061346054077,-0.027211366221308708,-0.05669160187244415,0.022979680448770523,0.00033748632995411754,-0.0676751509308815,-0.010648981668055058,-0.021091453731060028,0.03981601074337959,0.006573568098247051,-0.044896360486745834,-0.042518578469753265,0.05088961124420166,-0.04352528229355812,-0.0172532107681036,0.02968490496277809,-0.04278929531574249,-0.013568821363151073,0.009158375672996044,-0.05176609382033348,0.05290018394589424,0.012483754195272923,-0.08771423250436783,0.03501106798648834,0.05079957842826843,0.03323587030172348,-0.0113883838057518,-0.020190564915537834,0.01826009899377823,0.004909420385956764,-0.002395648043602705,-0.03340200334787369,-0.006810125894844532,-0.015225749462842941,0.08700788766145706,0.018749376758933067,0.013643951155245304,0.08351471275091171,-0.03939847648143768,0.050303999334573746,0.01647595874965191,0.010069092735648155,0.047997817397117615,0.00365578755736351,0.02133380062878132,0.031320929527282715,0.059304993599653244,0.0022069888655096292,-0.027619892731308937,-0.009407690726220608,0.01692339777946472,0.028040986508131027,0.021944217383861542,0.007349126040935516,0.026304122060537338,-0.034985028207302094,0.07467605918645859,-0.013580636121332645,0.09457240998744965,-0.03529303893446922,-0.008151116780936718,-0.028324894607067108,-0.05570713430643082,0.013441108167171478,0.007029644213616848,0.052164044231176376,0.0782170221209526,-0.04164060950279236,-0.031882502138614655,-0.04768379405140877,0.009957247413694859,0.01892109401524067,0.002128434367477894,0.003381900256499648,0.006699948571622372,0.03701537102460861,-0.007559946272522211,-0.01895745098590851,0.048492830246686935,-0.0462287999689579,-0.03711583465337753,0.03282012417912483,0.01894850842654705,0.05683315917849541,-0.07302553206682205,0.013390198349952698,-0.03575986996293068,-0.0032063154503703117,0.01655828207731247,0.044067081063985825,-0.01696648821234703,-0.031541768461465836,0.03024524822831154,-0.007017315365374088,0.0268375426530838,0.018976731225848198,0.02731778286397457,0.04179563745856285,0.013783150352537632,-0.015282728709280491,0.03170592710375786,-0.017907606437802315,0.013988254591822624,0.03003089502453804,0.012585957534611225,0.029358740895986557,-0.012880973517894745,-0.0059082042425870895,-0.06070498004555702,-0.05171939358115196,-0.0174896027892828,-0.0021744135301560163,0.018072791397571564,0.006391886156052351,-0.00041686141048558056,-0.007963226176798344,0.02473495714366436,0.007044533267617226,0.004522343166172504,-0.013182747177779675,-0.007559051737189293,0.03472351282835007,-0.023014333099126816,-0.024907952174544334,-0.007462151348590851,-0.06274320930242538,0.0153580317273736,0.019464531913399696,-0.043224234133958817,-0.028590993955731392,0.03182725980877876,-0.08319101482629776,0.01400806289166212,-0.0010432967683300376,-0.014296307228505611,0.026997940614819527,-0.0029068607836961746,-0.013942553661763668,0.09306824952363968,-0.05583744868636131,0.020827479660511017,-0.03995672985911369,-0.050732918083667755,-0.04674726724624634,0.09567131847143173,0.0009094785200431943,-0.03858496993780136,-0.013380053453147411,0.06450208276510239,0.03495526313781738,0.011922657489776611,-0.03022417612373829,0.05789979174733162,0.010027851909399033,0.021583132445812225,0.04106247425079346,0.01007907371968031,-0.07535215467214584,0.04432294890284538,0.01786678470671177,-0.018514864146709442,-0.024556376039981842,-0.02009899728000164,0.004416037350893021,0.04395623505115509,-0.03017529658973217,-0.010234602726995945,0.0613221675157547,0.04443651810288429,0.02154569886624813,-0.0285504087805748,-0.006497025955468416,-0.014591868035495281,0.015886595472693443,-0.004013135097920895,0.002275173319503665,0.032642725855112076,-0.01568981073796749,-0.010110086761415005,0.03402234986424446,0.02092030830681324,0.01784740947186947,-0.03138907253742218,-0.010703496634960175,0.04767462983727455,-0.04382389783859253,0.007999693043529987,-0.024441881105303764,0.034951698035001755,-0.011435462161898613,-0.0377708300948143,-0.01891511306166649,0.04145016893744469,-0.02386212907731533,-0.0042170933447778225,0.010997558943927288,0.007931510917842388,-0.011162088252604008,0.0977669507265091,-0.0675225704908371,0.029716284945607185,-0.03995426371693611,0.004066971130669117,0.030219823122024536,-0.001584648503921926,-0.03772642835974693,-0.006413720082491636,-0.020316220819950104,-0.042152039706707,0.04754297807812691,0.026249311864376068,0.015240333043038845,0.015447634272277355,0.03732052072882652,-0.05421634763479233,0.019549082964658737,0.003833240829408169,-0.04142714664340019,0.04720953851938248,0.011554977856576443,-0.031029924750328064,-0.02526705339550972,-0.010989456437528133,0.07059706747531891,-0.010411007329821587,0.008838054724037647,0.004881346598267555,-0.027523532509803772,-0.046273671090602875,-6.95480644916831e-33,-0.007065518293529749,0.017021892592310905,-0.041899632662534714,-0.03501907363533974,-0.02473941072821617,-0.012810122221708298,0.04090070724487305,-0.044393427670001984,0.016168275848031044,-0.011311667039990425,-0.008955320343375206,-0.031360093504190445,0.02296377532184124,-0.015754729509353638,0.034215524792671204,0.03648488596081734,0.008565135300159454,0.006307336501777172,-0.020988594740629196,0.031119752675294876,-0.011146798729896545,0.03991285338997841,-0.00985682848840952,-0.017241360619664192,-0.0342240110039711,0.0006254645413719118,-0.009392835199832916,0.013666696846485138,0.028241591528058052,0.026431966572999954,-0.001182623440399766,-0.023390203714370728,-0.03938869386911392,-0.00022711906058248132,-0.00700583029538393,-0.04842368885874748,-0.02034279704093933,-0.024451471865177155,0.030880311504006386,0.01007646881043911,0.02618303894996643,0.029915466904640198,0.042036570608615875,-0.025196630507707596,0.0030079446732997894,-0.02612192928791046,-0.007189610507339239,-0.0019744709134101868,-0.058041565120220184,-0.02265029214322567,0.02050958387553692,0.010376177728176117,-0.00485718110576272,0.011072486639022827,0.017379872500896454,-0.02004469931125641,0.017727475613355637,0.06259428709745407,-0.07304530590772629,-0.0011475139763206244,-0.10188796371221542,-0.03871821239590645,0.011030799709260464,0.0065958634950220585,0.02130749262869358,-0.011519251391291618,-0.04304441437125206,0.021517153829336166,0.015085563063621521,-0.02246773988008499,-0.005035511218011379,-0.014668583869934082,-0.0003498892765492201,-0.046301014721393585,0.05466531217098236,0.037627220153808594,0.010278507135808468,-0.01644844561815262,0.03153441846370697,0.048154447227716446,-0.023131923750042915,-0.02975986711680889,-0.000054050993639975786,0.03587670624256134,0.03486771509051323,-0.02290254458785057,-0.009904660284519196,-0.01940508559346199,0.018591295927762985,0.04093070700764656,-0.028319628909230232,0.031271930783987045,-0.06162174791097641,0.024563629180192947,-0.03712575510144234,-0.0175886619836092,0.05021846666932106,0.03059501387178898,0.016837283968925476,-0.0499967485666275,0.029520634561777115,0.02762671187520027,-0.06581024825572968,-0.04014478251338005,-0.016973774880170822,0.0037485649809241295,0.06619084626436234,0.0059401714242994785,-0.01385179627686739,-0.0015801305416971445,0.02020447887480259,0.02235659956932068,-0.01959202252328396,-0.036317404359579086,-0.019622907042503357,-0.020866574719548225,-0.014642189256846905,-0.018859274685382843,0.04673847556114197,0.015898017212748528,0.035740647464990616,-0.04178381711244583,0.004299075808376074,0.005164897534996271,0.012080405838787556,-0.022240670397877693,-0.0008618806023150682,-0.07230427116155624,0.049516648054122925,-0.0001256177929462865,-0.002699099248275161,-0.03154033049941063,3.079663315475045e-7,0.013951442204415798,0.01647200807929039,-0.06847061961889267,0.07509174942970276,0.001661797403357923,-0.029730040580034256,-0.05788678675889969,-0.02460874244570732,0.01229918748140335,-0.05302690714597702,-0.0019181616371497512,-0.011431287974119186,0.040167808532714844,0.031075749546289444,0.013015514239668846,-0.02960834465920925,-0.02083570696413517,-0.06441362202167511,-0.03608802333474159,0.018856246024370193,-0.02491023764014244,0.044499389827251434,0.11853320896625519,-0.007493152748793364,0.001417277380824089,-0.01654166728258133,-0.002879477571696043,-0.0663246437907219,0.02713650092482567,0.012174238450825214,0.040074657648801804,-0.003631467232480645,-0.016000736504793167,-0.0176264438778162,-0.020148439332842827,0.03626919910311699,0.019393984228372574,-0.025559114292263985,0.049722302705049515,0.08995434641838074,0.014009273611009121,-0.04936383664608002,0.007158586289733648,-0.02625170350074768,-0.00788724236190319,-0.01714935712516308,-0.013527384027838707,-0.029257452115416527,0.0006962380721233785,0.019770074635744095,0.02822919562458992,-0.027810929343104362,0.004515158012509346,-0.014010830782353878,0.034443579614162445,-0.0012855390086770058,0.025293059647083282,0.06724631041288376,0.0135603416711092,0.03300267085433006,0.006181709002703428,2.475637188581459e-7,0.014253044500946999,-0.012432155199348927,0.02961030602455139,-0.028364378958940506,0.03265721723437309,3.7793555349689972e-34,0.02406332828104496,-0.009074892848730087,0.05544966459274292,0.004200831055641174,0.014105002395808697,-0.0425909124314785,0.03503332659602165,-0.028959881514310837,0.015354123897850513,-0.037026893347501755,-0.01620982214808464]'
SET
  @HasCustomProps_3881dbf5 = 1
SET
  @HasCustomEvents_3881dbf5 = 0
SET
  @RequiresData_3881dbf5 = 1
SET
  @DependencyCount_3881dbf5 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_3881dbf5 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_3881dbf5 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_3881dbf5 = 0
SET
  @ID_3881dbf5 = '7C4E2A8F-9B3D-4E2A-8F5C-1E7D3A9B4C6E'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_3881dbf5,
  @Name = @Name_3881dbf5,
  @Version = @Version_3881dbf5,
  @VersionSequence = @VersionSequence_3881dbf5,
  @Title = @Title_3881dbf5,
  @Description = @Description_3881dbf5,
  @Type = @Type_3881dbf5,
  @Status = @Status_3881dbf5,
  @DeveloperName = @DeveloperName_3881dbf5,
  @DeveloperEmail = @DeveloperEmail_3881dbf5,
  @DeveloperOrganization = @DeveloperOrganization_3881dbf5,
  @SourceRegistryID = @SourceRegistryID_3881dbf5,
  @ReplicatedAt = @ReplicatedAt_3881dbf5,
  @LastSyncedAt = @LastSyncedAt_3881dbf5,
  @Specification = @Specification_3881dbf5,
  @FunctionalRequirements = @FunctionalRequirements_3881dbf5,
  @TechnicalDesign = @TechnicalDesign_3881dbf5,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_3881dbf5,
  @TechnicalDesignVector = @TechnicalDesignVector_3881dbf5,
  @HasCustomProps = @HasCustomProps_3881dbf5,
  @HasCustomEvents = @HasCustomEvents_3881dbf5,
  @RequiresData = @RequiresData_3881dbf5,
  @DependencyCount = @DependencyCount_3881dbf5,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_3881dbf5,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_3881dbf5,
  @HasRequiredCustomProps = @HasRequiredCustomProps_3881dbf5,
  @ID = @ID_3881dbf5;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_9ae6a989 NVARCHAR(MAX),
@Name_9ae6a989 NVARCHAR(500),
@Version_9ae6a989 NVARCHAR(50),
@VersionSequence_9ae6a989 INT,
@Title_9ae6a989 NVARCHAR(1000),
@Description_9ae6a989 NVARCHAR(MAX),
@Type_9ae6a989 NVARCHAR(255),
@Status_9ae6a989 NVARCHAR(50),
@DeveloperName_9ae6a989 NVARCHAR(255),
@DeveloperEmail_9ae6a989 NVARCHAR(255),
@DeveloperOrganization_9ae6a989 NVARCHAR(255),
@SourceRegistryID_9ae6a989 UNIQUEIDENTIFIER,
@ReplicatedAt_9ae6a989 DATETIMEOFFSET,
@LastSyncedAt_9ae6a989 DATETIMEOFFSET,
@Specification_9ae6a989 NVARCHAR(MAX),
@FunctionalRequirements_9ae6a989 NVARCHAR(MAX),
@TechnicalDesign_9ae6a989 NVARCHAR(MAX),
@FunctionalRequirementsVector_9ae6a989 NVARCHAR(MAX),
@TechnicalDesignVector_9ae6a989 NVARCHAR(MAX),
@HasCustomProps_9ae6a989 BIT,
@HasCustomEvents_9ae6a989 BIT,
@RequiresData_9ae6a989 BIT,
@DependencyCount_9ae6a989 INT,
@TechnicalDesignVectorEmbeddingModelID_9ae6a989 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_9ae6a989 NVARCHAR(MAX),
@HasRequiredCustomProps_9ae6a989 BIT,
@ID_9ae6a989 UNIQUEIDENTIFIER
SET
  @Namespace_9ae6a989 = N'CRM/Analytics'
SET
  @Name_9ae6a989 = N'DealVelocitySummary'
SET
  @Version_9ae6a989 = N'1.0.0'
SET
  @VersionSequence_9ae6a989 = 1
SET
  @Title_9ae6a989 = N'Deal Velocity Summary'
SET
  @Description_9ae6a989 = N'Summary statistics cards showing key deal metrics including total deals, won deals, win rate, and values'
SET
  @Type_9ae6a989 = N'Other'
SET
  @Status_9ae6a989 = N'Published'
SET
  @Specification_9ae6a989 = N'{"name":"DealVelocitySummary","namespace":"CRM/Analytics","type":"Other","location":"embedded","code":"function DealVelocitySummary({ deals, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat(''en-US'', {\n      style: ''currency'',\n      currency: ''USD'',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount || 0);\n  };\n  \n  // Calculate summary metrics\n  const totalDeals = deals.length;\n  const closedDeals = deals.filter(d => d.Stage === ''Closed Won'' || d.Stage === ''Closed Lost'').length;\n  const wonDeals = deals.filter(d => d.Stage === ''Closed Won'').length;\n  const winRate = closedDeals > 0 ? Math.round((wonDeals / closedDeals) * 100) : 0;\n  const totalValue = deals.reduce((sum, d) => sum + (d.Amount || 0), 0);\n  const wonValue = deals.filter(d => d.Stage === ''Closed Won'').reduce((sum, d) => sum + (d.Amount || 0), 0);\n  \n  const metrics = [\n    {\n      label: ''Total Deals'',\n      value: totalDeals,\n      color: ''#3B82F6'',\n      format: ''number''\n    },\n    {\n      label: ''Won Deals'',\n      value: wonDeals,\n      color: ''#10B981'',\n      format: ''number''\n    },\n    {\n      label: ''Win Rate'',\n      value: winRate,\n      color: ''#F59E0B'',\n      format: ''percent''\n    },\n    {\n      label: ''Total Value'',\n      value: totalValue,\n      color: ''#8B5CF6'',\n      format: ''currency''\n    },\n    {\n      label: ''Won Value'',\n      value: wonValue,\n      color: ''#EC4899'',\n      format: ''currency''\n    }\n  ];\n  \n  const formatValue = (value, format) => {\n    switch (format) {\n      case ''currency'':\n        return formatCurrency(value);\n      case ''percent'':\n        return `$' + '{value}%`;\n      default:\n        return value.toLocaleString();\n    }\n  };\n  \n  return (\n    <div style={{ \n      display: ''grid'', \n      gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'',\n      gap: ''12px'',\n      marginBottom: ''20px''\n    }}>\n      {metrics.map((metric, index) => (\n        <div \n          key={index}\n          style={{ \n            padding: ''12px'', \n            backgroundColor: ''#F9FAFB'', \n            borderRadius: ''8px'',\n            borderLeft: `4px solid $' + '{metric.color}`\n          }}\n        >\n          <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>\n            {metric.label}\n          </div>\n          <div style={{ \n            fontSize: metric.format === ''currency'' ? ''20px'' : ''24px'', \n            fontWeight: ''bold'', \n            color: ''#111827'' \n          }}>\n            {formatValue(metric.value, metric.format)}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","functionalRequirements":"## Deal Velocity Summary\n\n### Purpose\nDisplay key deal metrics in a grid of summary cards to provide at-a-glance insights into deal performance.\n\n### Metrics Displayed\n- **Total Deals**: Count of all deals in the dataset\n- **Won Deals**: Count of deals with ''Closed Won'' status\n- **Win Rate**: Percentage of closed deals that were won\n- **Total Value**: Sum of all deal amounts in the pipeline\n- **Won Value**: Sum of amounts for won deals only\n\n### Visual Design\n- Grid layout that adapts to available width\n- Each metric in its own card with colored accent border\n- Large, bold numbers for easy scanning\n- Descriptive labels above each metric\n- Currency formatting for monetary values\n- Percentage formatting for rates\n\n### User Experience\n- Cards automatically reflow based on container width\n- Consistent color coding across the application\n- Clear visual hierarchy with labels and values","dataRequirements":{"mode":"views","entities":[{"name":"Deals","fields":[{"name":"ID","type":"string","description":"Unique identifier for the deal"},{"name":"Stage","type":"string","description":"Current stage of the deal"},{"name":"Amount","type":"number","description":"Deal value in currency"}]}]},"technicalDesign":"## Implementation Details\n\n### Component Function\n`DealVelocitySummary({ deals, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings })`\n\n### Props\n- **deals**: Array of deal records to calculate metrics from\n- **Standard props**: utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings\n\n### Calculations\n1. **Total Deals**: `deals.length`\n2. **Closed Deals**: Filter for ''Closed Won'' or ''Closed Lost'' stages\n3. **Won Deals**: Filter for ''Closed Won'' stage only\n4. **Win Rate**: `(wonDeals / closedDeals) * 100`\n5. **Total Value**: Sum all deal amounts\n6. **Won Value**: Sum amounts for won deals\n\n### Metrics Configuration\nEach metric defined with:\n- label: Display name\n- value: Calculated value\n- color: Accent color for visual distinction\n- format: ''number'', ''currency'', or ''percent''\n\n### Layout\n- CSS Grid with `repeat(auto-fit, minmax(150px, 1fr))`\n- Cards with consistent padding and border radius\n- Left border accent using metric color\n- Responsive font sizing based on format type","properties":[{"name":"deals","type":"array","required":true,"description":"Array of deal records to calculate metrics from"}],"dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_9ae6a989 = N'## Deal Velocity Summary

### Purpose
Display key deal metrics in a grid of summary cards

### Metrics Displayed
- Total Deals count
- Won Deals count
- Win Rate percentage
- Total Pipeline Value
- Won Deal Value

### Visual Design
- Grid layout responsive to screen size
- Color-coded cards with left border accent
- Large metric values with labels
- Currency formatting for values
- Percentage formatting for rates'
SET
  @TechnicalDesign_9ae6a989 = N'## Implementation

### Props
- deals: Array of deal records
- Standard props (utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings)

### Calculations
- Filter deals by stage for counts
- Calculate win rate from closed deals
- Sum amounts for value metrics

### Layout
- CSS Grid with auto-fit columns
- Minimum 150px column width
- Cards with padding and border accent
- Responsive font sizes'
SET
  @FunctionalRequirementsVector_9ae6a989 = N'[-0.01924462988972664,0.02213667519390583,-0.026096848770976067,-0.038497813045978546,0.029356470331549644,0.012638850137591362,-0.03514566645026207,0.03058730624616146,-0.09825149178504944,0.012736376374959946,-0.03184498846530914,-0.005130096338689327,0.03915493190288544,0.1852666437625885,-0.03338051587343216,-0.07123824954032898,-0.018348142504692078,0.004312577191740274,0.02497156150639057,0.007877396419644356,0.014635312370955944,-0.026704993098974228,-0.009758718311786652,0.011431515216827393,-0.03140272572636604,-0.0060376389883458614,-0.019986504688858986,-0.02889586240053177,-0.0035656592808663845,-0.111247718334198,0.010217331349849701,0.004421678371727467,-0.024880321696400642,-0.03402191400527954,0.0000020551069610519335,-0.007777709048241377,-0.02171366848051548,0.011885290034115314,-0.0121389739215374,0.03427992761135101,0.05262717604637146,-0.053994741290807724,0.03446439653635025,0.02368953451514244,-0.03157578408718109,-0.06547876447439194,-0.02474200539290905,0.029291875660419464,0.000015622224964317866,-0.014514544047415257,0.012797973118722439,0.023145731538534164,-0.02403957210481167,-0.0031827467028051615,-0.000024256909455289133,-0.09789203107357025,-0.024121787399053574,0.05056995898485184,-0.009451000951230526,-0.05173904821276665,-0.02106771059334278,0.013035427778959274,0.020770447328686714,-0.05690319463610649,0.09050469100475311,0.05070173740386963,0.0441412515938282,0.0009947055950760841,-0.019626669585704803,0.007390177808701992,0.0637078732252121,0.030760811641812325,-0.010651945136487484,-0.060408469289541245,-0.029077455401420593,-0.12479428201913834,-0.02289482392370701,0.045456260442733765,0.031208064407110214,-0.022111715748906136,-0.11251246929168701,0.09519904851913452,-0.02387273870408535,0.005324093159288168,0.010329267010092735,-0.00029170597554184496,0.006866730749607086,0.012536780908703804,-0.020207246765494347,0.0036433532368391752,0.012429667636752129,-0.04006132856011391,-0.02584598958492279,0.0031485194340348244,-0.08403177559375763,-0.0066298143938183784,0.0161760114133358,-0.03425757959485054,0.02658764086663723,-0.01924906298518181,-0.011779673397541046,0.012566509656608105,0.070500947535038,0.011685170233249664,0.05230752006173134,0.027561567723751068,-0.01385630015283823,-0.05412154272198677,-0.059474602341651917,0.040244851261377335,0.010238183662295341,-0.01463103573769331,-0.0037569438572973013,0.04001374915242195,-0.048011522740125656,0.0006292418111115694,-0.0902116522192955,-0.004050306510180235,-0.011118649505078793,0.044386569410562515,0.11321038007736206,-0.0025932705029845238,0.02834319695830345,0.037202298641204834,-0.010741046629846096,0.030823197215795517,-0.03891518712043762,-0.026545757427811623,-0.005550280213356018,0.04894106835126877,-0.0196567140519619,-0.008189121261239052,-0.03314899653196335,-0.056602247059345245,0.009524568915367126,0.0326862670481205,0.023341068997979164,0.015850264579057693,0.03492099046707153,0.000893092539627105,0.024556905031204224,-0.006035138852894306,-0.04000718146562576,0.005278652999550104,-0.024451861158013344,0.009429925121366978,0.004136915784329176,0.05304313823580742,0.011462866328656673,0.004666120279580355,-0.00433995109051466,0.007256668526679277,0.0064680250361561775,0.014692723751068115,-0.007302179932594299,-0.021254921332001686,0.02187090367078781,-0.0025454768911004066,0.00804873090237379,0.06620683521032333,0.004423128440976143,-0.017933588474988937,0.019445370882749557,-0.0027308587450534105,-0.004457990638911724,0.04220375046133995,-0.03798741102218628,-0.002000699285417795,0.05482327193021774,-0.029617726802825928,0.02858254499733448,-0.013198573142290115,-0.035571739077568054,0.01629042811691761,0.0481988899409771,0.026029234752058983,0.07027853280305862,-0.06464684009552002,-0.02558574639260769,-0.04720590263605118,-0.0181302297860384,-0.1618300974369049,0.02901151031255722,0.024379873648285866,0.09123401343822479,0.021752551198005676,-0.003598838811740279,0.03842884302139282,-0.010382945649325848,-0.005915294401347637,-0.01270273607224226,0.017917389050126076,-0.0321451872587204,0.02201094664633274,-0.011076961643993855,-0.007574294228106737,-0.034251317381858826,-0.04740751162171364,0.026591328904032707,0.01747426949441433,-0.00342765636742115,-0.027623455971479416,0.011208939366042614,-0.022393055260181427,0.024453124031424522,0.047765813767910004,0.019551102072000504,-0.023451892659068108,-0.0894523411989212,0.007121053524315357,0.027430016547441483,0.011092434637248516,-0.07134740054607391,0.01273089088499546,-0.017346560955047607,0.023317206650972366,0.012893524020910263,-0.0037448222283273935,-0.008885247632861137,-0.02725878171622753,-0.021223146468400955,0.01039894949644804,0.009674263186752796,0.016512231901288033,0.12505830824375153,0.04826116934418678,0.02752138487994671,-0.046025604009628296,0.034399375319480896,0.004068395588546991,-0.020047802478075027,-0.01815093867480755,0.010556958615779877,0.010087753646075726,-0.017384277656674385,0.04070815071463585,0.06469850987195969,0.10219814628362656,0.015900414437055588,0.035723283886909485,-0.021561378613114357,-0.06309191882610321,-0.007950904779136181,0.03646118566393852,0.010261624120175838,-0.03307398408651352,-0.07575928419828415,-0.0010276355314999819,0.019145891070365906,-0.01974925398826599,0.005388089921325445,0.017772803083062172,0.0732368677854538,-0.00014523744175676256,0.009298669174313545,0.004401298705488443,-0.08415860682725906,0.014840995892882347,-0.002692808862775564,0.08498934656381607,0.0056410739198327065,-0.0066187502816319466,-0.019588105380535126,-0.016815947368741035,0.029280493035912514,-0.034128718078136444,0.0380854494869709,0.017953330650925636,0.028768938034772873,0.026452751830220222,0.02870972268283367,0.009709971025586128,0.0021702658850699663,-0.001052861800417304,0.003296051174402237,0.04012589156627655,-0.1021021381020546,0.035427916795015335,-0.02900002896785736,-0.018537096679210663,-0.0016684705624356866,0.001293136621825397,-0.020009387284517288,0.024640079587697983,-0.0038673372473567724,0.027608877047896385,0.03712476044893265,-0.004240542650222778,-0.020069347694516182,-0.045285552740097046,0.04414653778076172,-0.029211632907390594,0.0326494500041008,-0.02598034404218197,-0.04108626767992973,0.022924358025193214,-0.034817032516002655,0.00897820945829153,-0.005251280963420868,0.009654249995946884,-0.012439819052815437,-0.0542537085711956,-0.04735548794269562,0.004231413826346397,-0.01692136749625206,0.014710770919919014,0.012767002917826176,0.004272877238690853,0.03141803666949272,0.08309345692396164,0.01856641285121441,0.0008667694055475295,-0.014526787213981152,-0.042965155094861984,-0.007549109868705273,0.0064580137841403484,-0.01740455813705921,0.0516640767455101,0.013501984998583794,0.0511564202606678,0.02849799580872059,-0.018417924642562866,-0.05043899267911911,-0.0011690924875438213,-0.03096681833267212,-0.014580348506569862,-0.021562891080975533,-0.005476814694702625,-0.040488019585609436,-0.005852417554706335,0.0000984644575510174,-0.05017571523785591,-0.01893719471991062,0.0003204749955330044,-0.027327867224812508,-0.04631564021110535,-0.031847693026065826,-0.008767437189817429,0.01564844883978367,-0.008336477912962437,-0.02068912796676159,0.00907584186643362,-0.026420393958687782,-0.024477213621139526,-0.013111521489918232,0.021367304027080536,0.09888347238302231,-0.020301802083849907,-0.08032388240098953,0.03603595122694969,0.05207040533423424,-0.015662522986531258,-0.043623216450214386,-0.048632342368364334,0.002454641740769148,0.028381457552313805,0.014422919601202011,-0.04129140079021454,0.019519174471497536,-0.07910773903131485,0.02040175534784794,0.05513525754213333,-0.021501339972019196,0.07361692935228348,-0.009419769048690796,0.040070537477731705,-0.006309300661087036,0.0027553148102015257,0.015880340710282326,0.02628805860877037,-0.021946916356682777,0.027020348235964775,0.034211594611406326,0.014880985021591187,-0.006721301004290581,-0.012350114993751049,0.01923026517033577,0.01639176905155182,0.01429735030978918,0.000007883415491960477,0.05153391882777214,-0.010371774435043335,0.09619089215993881,-0.02777525782585144,0.0504399798810482,0.010999315418303013,-0.00983663834631443,-0.04768960550427437,-0.04926811903715134,-0.007146622519940138,0.0011207027127966285,0.011867489665746689,-0.023586316034197807,-0.02077878639101982,-0.03203939273953438,-0.009046083316206932,0.0366630032658577,0.035836055874824524,0.016637077555060387,0.012983241118490696,-0.011424328200519085,0.02032262273132801,0.0615788996219635,-0.023458801209926605,-0.008996698074042797,-0.030764101073145866,0.017284389585256577,0.03720055893063545,-0.016521330922842026,-0.03665464371442795,-0.07315590232610703,-0.007389394100755453,-0.02366471290588379,-0.031107336282730103,0.044442709535360336,-0.005440664477646351,-0.0011565202148631215,-0.0057393647730350494,-0.009497291408479214,-0.016597559675574303,0.006022833753377199,0.05448078736662865,0.021624306216835976,0.02666371501982212,-0.001259838230907917,-0.02553943358361721,0.0000035630193906399654,-0.0655534416437149,0.009305937215685844,0.004316919017583132,-0.008267564699053764,0.023334166035056114,-0.00488923117518425,0.04481973126530647,-0.0480019710958004,-0.062467556446790695,-0.007621791213750839,0.023255476728081703,-0.009972630068659782,-0.006456773728132248,-0.005477103404700756,-0.00010785742779262364,0.07128150016069412,0.0012031832011416554,0.024630248546600342,-0.010405792854726315,-0.02003316394984722,0.017871230840682983,0.007020676974207163,-0.02959556318819523,0.0019249421311542392,-0.04689621180295944,0.036075323820114136,0.0009299829252995551,-0.029802639037370682,-0.022614000365138054,0.04303111881017685,-0.05824742466211319,0.003069233614951372,-0.06655031442642212,0.03720810264348984,0.025734419003129005,-0.07524473965167999,0.02406984008848667,0.02659866400063038,-0.11552643030881882,-0.04792001470923424,-0.05182661861181259,-0.010248768143355846,-0.0499444417655468,0.03036430850625038,-0.0008503363933414221,-0.046188972890377045,0.0134320929646492,0.027091797441244125,0.0265522301197052,0.02316916175186634,-0.02474445104598999,0.09806820005178452,0.009939605370163918,-0.016461167484521866,0.026732653379440308,0.01009522657841444,-0.12021782249212265,0.006735334172844887,0.03206862881779671,-0.009176571853458881,-0.00762850372120738,-0.0018778196536004543,-0.059764109551906586,0.01193548459559679,-0.016977405175566673,-0.04173014312982559,0.0379907451570034,0.019414013251662254,0.03595765680074692,0.01187039166688919,-0.04008118435740471,-0.011689990758895874,0.007371428422629833,-0.03530946001410484,-0.011274455115199089,0.05070345103740692,-0.08218648284673691,-0.0188780315220356,0.03951967507600784,0.03302872180938721,-0.06457842886447906,0.013306309469044209,-0.026069359853863716,0.06432516872882843,-0.03720463439822197,0.009763697162270546,-0.048219338059425354,0.0528128445148468,0.01900397427380085,-0.0007241451530717313,0.03278776630759239,-0.015644395723938942,-0.0070775458589196205,0.016872912645339966,0.008270004764199257,-0.03552420064806938,-0.02529609203338623,0.08368436992168427,-0.04419143497943878,0.030705515295267105,-0.029626389965415,0.016895446926355362,0.04779725894331932,-0.026703348383307457,0.019507121294736862,-0.016811780631542206,0.010695363394916058,0.004412498325109482,0.06451482325792313,0.04761343076825142,0.03446292504668236,0.0027671654243022203,-0.006210934370756149,-0.028064236044883728,0.013527382165193558,0.03216993808746338,-0.003467891365289688,0.004497142508625984,0.029667343944311142,-0.01763974130153656,-0.028290357440710068,-0.003975031431764364,-0.017663544043898582,0.030033959075808525,-0.010689976625144482,-0.01780974678695202,0.022301027551293373,-0.05027541145682335,-6.684001203413656e-33,-0.02560812421143055,-0.046491771936416626,-0.011203542351722717,0.025855939835309982,-0.006997912190854549,-0.016175393015146255,0.033568739891052246,-0.03086256980895996,-0.002890905598178506,0.019836409017443657,-0.034455686807632446,-0.02572421357035637,0.02701297216117382,-0.010596686974167824,0.035399019718170166,0.014520425349473953,0.021394291892647743,-0.007735873106867075,0.0026123467832803726,0.003832539077848196,-0.032504282891750336,0.02759719267487526,0.044862136244773865,-0.05167999491095543,-0.01206397544592619,0.03239068761467934,-0.04816896468400955,0.03143392875790596,0.02514791674911976,0.015799514949321747,0.00999930128455162,-0.02398291788995266,-0.02810143493115902,-0.044095512479543686,-0.009543165564537048,-0.055407214909791946,0.008777461014688015,-0.018663188442587852,-0.010906383395195007,0.02953457087278366,0.0908764973282814,-0.008340844884514809,0.03838902339339256,0.004966416861861944,0.0011437158100306988,-0.031921613961458206,0.03382290527224541,-0.0079576401039958,-0.03442802280187607,-0.10244446992874146,0.013584757223725319,0.015456125140190125,-0.010976086370646954,0.029396433383226395,0.03312724828720093,-0.015629710629582405,0.022375764325261116,-0.0074338302947580814,-0.04992242529988289,0.010478080250322819,0.0031396523118019104,0.013846337795257568,0.0233134925365448,0.02869202010333538,0.021826516836881638,0.00701947184279561,-0.0036161434836685658,0.014014661312103271,0.010374433360993862,-0.03751586377620697,0.017458483576774597,-0.060547247529029846,-0.0030080240685492754,-0.06412680447101593,-0.011940384283661842,0.05862988531589508,0.010187240317463875,0.011354378424584866,-0.017557425424456596,0.09220340847969055,-0.010661866515874863,0.012795689515769482,-0.012216436676681042,0.04290042072534561,-0.024318501353263855,-0.05310399830341339,-0.005986113101243973,-0.023016244173049927,0.018706411123275757,0.009999488480389118,0.028709638863801956,0.007796911057084799,-0.03467512130737305,0.025078076869249344,-0.08089384436607361,0.013011278584599495,0.08366237580776215,0.06157085672020912,-0.031737830489873886,-0.026490285992622375,0.032077718526124954,0.023773984983563423,0.007792097050696611,-0.01896575279533863,0.0002586448681540787,0.018149426206946373,0.02865326777100563,-0.017242085188627243,-0.06611232459545135,0.012159283272922039,0.023665595799684525,0.03620472922921181,-0.015601620078086853,-0.008584602735936642,-0.05045756697654724,-0.014176235534250736,-0.03193392604589462,-0.03548746928572655,0.010386144742369652,0.015160977840423584,-0.006892501376569271,0.0332028791308403,-0.016524000093340874,0.04156458377838135,0.030993551015853882,-0.026543140411376953,-0.00555669330060482,0.0263726394623518,0.02974710427224636,0.020002149045467377,0.0022224311251193285,0.017391590401530266,2.900850404330413e-7,0.027707714587450027,0.04218951240181923,-0.06275226920843124,0.05177344009280205,-0.04951447248458862,0.013478568755090237,-0.0281935203820467,-0.02476985938847065,-0.0031965388916432858,-0.04704811051487923,0.004261764697730541,-0.00429801968857646,-0.003498517209663987,0.045433565974235535,0.023449821397662163,-0.00030375251662917435,-0.008139149285852909,-0.05154351517558098,-0.0159372016787529,-0.036799442023038864,0.027877144515514374,0.034568626433610916,0.07744042575359344,0.012670560739934444,0.015145367942750454,0.08079192042350769,-0.01095744501799345,-0.052662443369627,-0.012791111133992672,0.008164986968040466,0.0169833917170763,-0.04787910357117653,-0.032358281314373016,0.012762514874339104,0.0086884256452322,0.02412455342710018,-0.014997098594903946,-0.05072684958577156,0.03167586773633957,0.040347982197999954,-0.04329812154173851,-0.016081560403108597,-0.00207557063549757,-0.0282989963889122,0.0009181293426081538,-0.008221262134611607,0.015920791774988174,-0.06005522981286049,-0.03132638335227966,0.004802636336535215,0.05618072301149368,0.027105050161480904,0.012630876153707504,0.004919986240565777,0.022056059911847115,0.02847054973244667,0.005591021850705147,0.027203381061553955,0.013455928303301334,0.002741096308454871,0.005405169911682606,0.008738886564970016,0.012640717439353466,0.060455795377492905,0.03132614493370056,-0.015765056014060974,0.010441597551107407,3.6158061590387115e-34,0.030845336616039276,-0.03131727874279022,0.02745111845433712,0.0704495832324028,0.04070260748267174,-0.019751131534576416,0.022051533684134483,-0.019859574735164642,0.015533768571913242,-0.05906742438673973,-0.003768312279134989]'
SET
  @TechnicalDesignVector_9ae6a989 = N'[0.0008576738182455301,0.04402740299701691,-0.014554046094417572,-0.03441489860415459,0.036984074860811234,-0.04552341252565384,0.01708930730819702,0.0312938429415226,-0.027768922969698906,-0.026691628620028496,-0.051536787301301956,-0.03342743217945099,0.05145740509033203,0.15613499283790588,0.016271550208330154,-0.01443463284522295,-0.021754126995801926,0.03195454925298691,-0.041995398700237274,0.0030718876514583826,0.01167045347392559,-0.015926804393529892,-0.011603431776165962,0.006962462794035673,-0.012432491406798363,-0.031427834182977676,-0.050965566188097,0.005939642898738384,0.02110978215932846,-0.08096031844615936,0.010107594542205334,0.01503067184239626,-0.041584569960832596,-0.019207725301384926,0.000002123050308000529,-0.016651486977934837,-0.04561677947640419,0.0023926906287670135,0.013989829458296299,0.038462743163108826,0.02986382134258747,-0.013171072117984295,0.014455827884376049,0.009162182919681072,-0.007223490625619888,-0.09196086972951889,-0.05123394727706909,0.03407370299100876,0.04478490352630615,-0.005854862742125988,0.01640680432319641,-0.02872397191822529,0.026445923373103142,0.002941618673503399,0.020831700414419174,-0.028332602232694626,0.007097202818840742,-0.04992951452732086,-0.006605909671634436,-0.09688284993171692,0.01786656118929386,-0.018763286992907524,0.004183489363640547,-0.07883694767951965,0.043802410364151,0.020231395959854126,0.05223817750811577,0.031005235388875008,-0.011599556542932987,0.012313753366470337,0.10345453023910522,0.02820621058344841,0.011240108869969845,-0.04325250908732414,-0.01049503032118082,-0.08148442208766937,-0.019564921036362648,0.03137761726975441,0.02237877808511257,-0.015059276483952999,-0.05621285364031792,0.04270043224096298,-0.026477040722966194,0.0013307573972269893,0.04053608700633049,0.011297454126179218,0.01702713780105114,-0.006298013497143984,-0.045292310416698456,-0.0036775879561901093,0.015721073374152184,-0.04579756036400795,0.0011353378649801016,0.021411925554275513,-0.07371024042367935,0.0029938442166894674,0.051949676126241684,-0.06315408647060394,0.046574320644140244,-0.028763435781002045,0.0078081898391246796,0.027809489518404007,0.06063427776098251,0.006564320996403694,0.05437681823968887,0.018131453543901443,-0.010240305215120316,-0.027519870549440384,-0.04075302183628082,0.06218169257044792,0.011887585744261742,-0.00977612566202879,-0.003591489512473345,0.04791610315442085,-0.02018943428993225,-0.0002584390458650887,-0.06086325645446777,-0.017302867025136948,0.021694187074899673,0.03345867618918419,0.14616452157497406,-0.004454005043953657,0.017106089740991592,0.028688153252005577,0.012355162762105465,0.013433004729449749,-0.03424525260925293,-0.05398554727435112,-0.009967499412596226,0.04771781340241432,-0.0022907571401447058,-0.020145250484347343,-0.006028201896697283,-0.03865020349621773,0.001966250827535987,-0.01776624657213688,0.02461225353181362,0.0024404022842645645,0.020332593470811844,0.024148836731910706,-0.004286567680537701,-0.00006626464164583012,-0.03503456339240074,0.005790709052234888,-0.03887394815683365,-0.010474913753569126,0.010987396351993084,-0.013688757084310055,-0.0069958181120455265,0.02030630223453045,0.010710914619266987,-0.03041590377688408,0.011874783784151077,0.007718979846686125,-0.035105712711811066,-0.00219113752245903,0.013664759695529938,-0.0005724846269004047,0.052185267210006714,0.03478352352976799,0.012106313370168209,-0.001322062686085701,0.046252451837062836,0.022274240851402283,-0.018255427479743958,0.032107822597026825,-0.053332529962062836,0.0026090105529874563,0.033931124955415726,-0.00084258196875453,0.00778207229450345,-0.04191068932414055,-0.045971937477588654,0.03633807599544525,0.040527746081352234,-0.03023776412010193,0.0553780160844326,0.03224221616983414,-0.04899110645055771,-0.052593767642974854,0.022401755675673485,-0.13053208589553833,0.0008273497805930674,0.013958440162241459,0.059797387570142746,-0.005124878603965044,-0.02497585117816925,0.03621483966708183,-0.00784712377935648,0.008964271284639835,0.0007969540311023593,-0.011506914161145687,-0.04562455788254738,0.025067288428544998,-0.015030274167656898,-0.007020394783467054,-0.06165869161486626,-0.06135013327002525,0.01841498352587223,-0.008845965377986431,0.005170197691768408,-0.04516608268022537,0.02388026751577854,0.03431274741888046,0.049509529024362564,0.0007475950405932963,-0.0005970729980617762,-0.017024248838424683,-0.10633127391338348,-0.01772681623697281,0.030901610851287842,0.023945873603224754,-0.05022139102220535,0.00927830021828413,-0.0259266197681427,0.005919815041124821,-0.0034845531918108463,0.012502334080636501,-0.016270387917757034,-0.050754364579916,-0.04576047882437706,0.014182520098984241,0.07421708852052689,0.02009993977844715,0.12314417213201523,-0.00952786672860384,0.008773005567491055,-0.04584116116166115,0.029018348082900047,0.0028577034827321768,-0.014160987921059132,-0.025072863325476646,0.02784302644431591,0.030054308474063873,0.01680448092520237,-0.011222166009247303,0.01496405340731144,0.04113200306892395,0.017409179359674454,0.08564390987157822,-0.017315272241830826,-0.011485723778605461,-0.021038126200437546,0.04016156867146492,-0.008627082221210003,-0.026887953281402588,-0.0701776072382927,0.03190658614039421,-0.01839999109506607,-0.000851550605148077,0.01704326644539833,0.04763399809598923,0.07553551346063614,-0.0005544433952309191,-0.01227964460849762,-0.0187697596848011,-0.04316519573330879,0.016012154519557953,-0.028034929186105728,0.04701770469546318,0.0002937961835414171,-0.004992341157048941,-0.0043584792874753475,-0.022042682394385338,0.07955547422170639,-0.004493718035519123,0.018143514171242714,-0.021532852202653885,0.02509346976876259,0.02961633913218975,-0.010250053368508816,-0.0038225778844207525,-0.014254311099648476,-0.03407493978738785,0.01082533411681652,0.030500242486596107,-0.025152476504445076,0.017658613622188568,-0.008471493609249592,-0.011421783827245235,-0.0137517424300313,-0.025655778124928474,-0.02592155523598194,0.013576311059296131,-0.006218857131898403,0.01558146346360445,0.006552985403686762,0.02408888004720211,-0.029989702627062798,-0.06754635274410248,0.010881436988711357,-0.02274172753095627,0.04861050099134445,-0.059287428855895996,-0.05988910049200058,-0.013929690234363079,-0.05608277767896652,0.017579400911927223,-0.03056427463889122,0.00807847548276186,-0.000059265050367685035,-0.027162129059433937,-0.042140115052461624,0.0021124971099197865,0.017270207405090332,-0.009063517674803734,-0.019479241222143173,0.018792280927300453,0.024068757891654968,0.09915153682231903,0.021310467272996902,0.007483311928808689,0.007137068547308445,-0.07125502824783325,0.05041056498885155,-0.0016905765514820814,0.03007977083325386,0.032283250242471695,-0.005986952222883701,0.050482358783483505,0.029912512749433517,-0.012503733858466148,0.009222840890288353,-0.010507982224225998,-0.051737166941165924,-0.012292738072574139,0.026987778022885323,-0.02317170239984989,0.005962915252894163,0.0277525894343853,0.01101178489625454,-0.07265228033065796,0.009245084598660469,-0.000035820139601128176,-0.04700551554560661,-0.007100921124219894,-0.019918153062462807,-0.01430964283645153,0.05756381154060364,-0.012244729325175285,-0.01405424252152443,-0.022186007350683212,-0.029306352138519287,-0.03627343848347664,-0.015602617524564266,-0.027497662231326103,0.07277456670999527,0.01419751439243555,-0.0831499770283699,0.02883295714855194,0.05287887901067734,0.03981126844882965,-0.01880718767642975,-0.022707954049110413,-0.008583207614719868,0.04306115582585335,0.021184220910072327,-0.02850291132926941,0.017318634316325188,-0.06395373493432999,0.01739991083741188,0.029500458389520645,0.05270833149552345,0.04555211216211319,0.011813127435743809,0.07023045420646667,0.040565453469753265,0.0009276146884076297,-0.004152604378759861,0.029174264520406723,0.0041959406808018684,0.01831391453742981,0.03519069403409958,0.01257786713540554,-0.0025385695043951273,0.0021278057247400284,0.028546681627631187,0.02376008778810501,0.01831677369773388,-0.004503519739955664,0.07764711230993271,-0.009609432891011238,0.07556521892547607,-0.030260566622018814,0.0605204775929451,-0.009398781694471836,-0.017456086352467537,-0.03533181548118591,-0.048930663615465164,-0.0038059053476899862,0.0008777696057222784,-0.009075118228793144,-0.00753749767318368,-0.009389238432049751,-0.01542217843234539,-0.008995224721729755,-0.009219546802341938,0.036756888031959534,0.016715293750166893,-0.008494931273162365,-0.03716927766799927,0.07129114121198654,0.10951971262693405,-0.027350999414920807,0.01171842124313116,0.009662884287536144,-0.011331059038639069,0.0405854769051075,0.05393420159816742,-0.058693092316389084,-0.09275045245885849,-0.005844243802130222,-0.037520818412303925,-0.015191882848739624,-0.029402771964669228,-0.004061993211507797,-0.0001927233097376302,-0.049421440809965134,-0.029263366013765335,-0.030150465667247772,-0.026618540287017822,0.038396451622247696,0.02050839550793171,0.045961372554302216,0.013470085337758064,-0.00941021740436554,-0.0034405372571200132,-0.03578704595565796,0.003354771761223674,0.00790447648614645,-0.006392086856067181,0.030790206044912338,0.007141418755054474,0.014770671725273132,-0.04005618393421173,-0.03283198922872543,-0.024000803008675575,0.030110735446214676,0.0440535843372345,-0.03141041845083237,0.005129805766046047,-0.01189638301730156,0.018855439499020576,0.004959800746291876,0.004277093335986137,-0.047667909413576126,0.014173856005072594,0.07577495276927948,-0.015415998175740242,-0.037210170179605484,-0.019172428175807,-0.014950127340853214,-0.0032762601040303707,0.015248539857566357,-0.05224944278597832,-0.032940611243247986,0.02975911647081375,0.035259146243333817,0.004311210010200739,-0.01196527574211359,0.035356562584638596,0.029779886826872826,-0.07651803642511368,0.026759866625070572,0.039677247405052185,-0.12043735384941101,0.004503757227212191,-0.027453023940324783,-0.026592645794153214,-0.016553252935409546,0.011739227920770645,0.01722082681953907,-0.036478202790021896,-0.004130839835852385,0.05250302329659462,0.03437552973628044,0.028303062543272972,-0.0139022720977664,0.027734680101275444,-0.007229297887533903,0.00047387511585839093,0.011657942086458206,-0.03275684639811516,-0.1277148276567459,0.03987054526805878,0.04006243869662285,-0.03234625235199928,-0.008122991770505905,-0.0020023200195282698,-0.04755445942282677,0.007840985432267189,0.008223096840083599,-0.0074258833192288876,0.10653665661811829,0.03855079039931297,0.08815069496631622,0.028991086408495903,-0.039678242057561874,0.008044262416660786,-0.03547076880931854,-0.044930264353752136,-0.006348021794110537,0.0183529295027256,-0.03500743582844734,-0.023336021229624748,-0.005758649669587612,0.010631884448230267,-0.03079868108034134,-0.0032019559293985367,-0.06581223011016846,0.028205595910549164,-0.029510047286748886,0.02385624498128891,-0.0017552912468090653,0.005920436233282089,0.08866113424301147,-0.03278063237667084,0.011888014152646065,-0.008509003557264805,-0.008704557083547115,0.025656534358859062,0.02124529890716076,-0.039571572095155716,-0.0014571994543075562,0.08547309041023254,-0.06068296730518341,0.053831811994314194,-0.0041784243658185005,-0.010630396194756031,0.016321297734975815,-0.0023330547846853733,0.049398183822631836,-0.0070231580175459385,0.0007625403814017773,0.013755369931459427,0.04953185096383095,-0.026630105450749397,0.05306173115968704,-0.028233982622623444,-0.05954991281032562,-0.06133224070072174,0.030525213107466698,0.020931486040353775,0.020204637199640274,-0.0005532399518415332,0.028167584910988808,0.004517297260463238,-0.07626127451658249,0.0007298713317140937,0.04400913044810295,0.005201755091547966,0.017547715455293655,-0.035477571189403534,-0.001793587813153863,0.014705400913953781,-6.730322292991778e-33,-0.0469750240445137,-0.005688191391527653,0.003750965930521488,0.017611104995012283,-0.019630076363682747,-0.04436437413096428,-0.001043464057147503,-0.0467410571873188,0.01654670014977455,-0.0038323886692523956,-0.03238939866423607,-0.05298996716737747,0.023102328181266785,-0.001171595067717135,-0.0004713629896286875,0.004100962541997433,0.026643481105566025,-0.006607593968510628,-0.015056772157549858,-0.0035726125352084637,-0.061447624117136,0.02738056145608425,0.024330459535121918,-0.014859369024634361,-0.03510984033346176,-0.0023622929584234953,-0.0352938249707222,0.044079914689064026,-0.03908165916800499,0.0024213206488639116,-0.0075793182477355,-0.011364780366420746,-0.06454352289438248,-0.03538695350289345,0.0317826084792614,-0.015650086104869843,-0.010615109466016293,0.0002770031278487295,0.033272940665483475,0.01758786104619503,0.10362516343593597,0.01668670028448105,0.017465751618146896,0.03353218734264374,0.013271115720272064,-0.022932501509785652,0.013964162208139896,-0.02396773360669613,-0.011995372362434864,-0.045372989028692245,0.03494058921933174,0.01040799543261528,-0.005713597871363163,-0.006346202455461025,0.010731089860200882,-0.03873777389526367,0.05102210491895676,-0.0001312138483626768,-0.07117567211389542,-0.010574690997600555,-0.049411289393901825,-0.03817570582032204,0.030310049653053284,0.0030219738837331533,0.021650342270731926,0.02756998874247074,-0.012079648673534393,0.03509178385138512,-0.043697744607925415,-0.06642697006464005,-0.02604418806731701,-0.044139694422483444,0.02032199315726757,0.01543342974036932,0.04270927608013153,0.05976264551281929,0.00881896074861288,0.00048049126053228974,0.03809183090925217,0.06211613118648529,-0.0010629906319081783,0.02129567787051201,0.007173322141170502,0.041565682739019394,-0.018845850601792336,-0.039644066244363785,0.023234421387314796,-0.03115992620587349,-0.018901219591498375,0.0034015744458884,0.005178077146410942,0.043355874717235565,-0.05227663740515709,0.03409973531961441,-0.07524789124727249,-0.0037829834036529064,0.09953871369361877,0.06723861396312714,-0.018433211371302605,-0.02642982266843319,0.07624955475330353,-0.011135421693325043,-0.014221119694411755,-0.03217111900448799,-0.007508397102355957,0.033666692674160004,0.03462805971503258,0.011286549270153046,-0.03877922520041466,0.009413663297891617,0.024490155279636383,0.01330362819135189,-0.021559497341513634,-0.0007220136467367411,-0.02401062101125717,0.005275714676827192,-0.017497951164841652,-0.058039505034685135,0.029662955552339554,0.027651861310005188,0.005843375809490681,0.0047072614543139935,0.01284444984048605,-0.0009663678938522935,0.05948831886053085,-0.02650616131722927,-0.025409186258912086,-0.02601834386587143,0.023878516629338264,0.0007955890032462776,0.0063459244556725025,-0.022583402693271637,3.056903494780272e-7,0.00552995502948761,0.042396873235702515,-0.0756969153881073,-0.034618861973285675,-0.01635320670902729,0.010153920389711857,-0.029823219403624535,-0.05085247382521629,-0.0009536851430311799,-0.07857052981853485,0.001743054366670549,-0.004712841939181089,0.049929797649383545,0.041790273040533066,0.007717724423855543,-0.016009312123060226,-0.027220679447054863,-0.057213056832551956,-0.028181372210383415,0.003621745854616165,0.007513059303164482,0.013695326633751392,0.1123618632555008,-0.005588308442384005,0.019939415156841278,0.05759994313120842,0.002588874427601695,-0.021487904712557793,0.030604133382439613,-0.017577597871422768,0.03129104524850845,-0.09724539518356323,-0.039791177958250046,-0.012267954647541046,0.0033934516832232475,0.029163172468543053,0.004282755311578512,-0.02026117406785488,0.03710995987057686,0.087896928191185,-0.012895139865577221,-0.012725903652608395,-0.03583448752760887,-0.05455455183982849,0.01183696836233139,-0.03103659860789776,-0.004847303498536348,-0.04928019270300865,-0.023995988070964813,-0.04947936534881592,0.02644980698823929,-0.0059923031367361546,0.024440046399831772,-0.012577295303344727,0.016742300242185593,-0.019085654988884926,0.012170838192105293,0.031165048480033875,-0.013899357989430428,0.0467834435403347,0.00015102661564014852,0.017713746055960655,0.006683410611003637,-0.006373635958880186,0.04246821999549866,-0.05462267994880676,0.030289029702544212,3.5219335219871956e-34,0.009865395724773407,-0.032186247408390045,0.026116767898201942,0.032566215842962265,0.036263834685087204,-0.037516217678785324,0.07798902690410614,-0.038276929408311844,0.02804376557469368,-0.055251602083444595,-0.016348587349057198]'
SET
  @HasCustomProps_9ae6a989 = 1
SET
  @HasCustomEvents_9ae6a989 = 0
SET
  @RequiresData_9ae6a989 = 1
SET
  @DependencyCount_9ae6a989 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_9ae6a989 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_9ae6a989 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_9ae6a989 = 1
SET
  @ID_9ae6a989 = '563130CE-4016-4640-94AD-9161A94B122F'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_9ae6a989,
  @Name = @Name_9ae6a989,
  @Version = @Version_9ae6a989,
  @VersionSequence = @VersionSequence_9ae6a989,
  @Title = @Title_9ae6a989,
  @Description = @Description_9ae6a989,
  @Type = @Type_9ae6a989,
  @Status = @Status_9ae6a989,
  @DeveloperName = @DeveloperName_9ae6a989,
  @DeveloperEmail = @DeveloperEmail_9ae6a989,
  @DeveloperOrganization = @DeveloperOrganization_9ae6a989,
  @SourceRegistryID = @SourceRegistryID_9ae6a989,
  @ReplicatedAt = @ReplicatedAt_9ae6a989,
  @LastSyncedAt = @LastSyncedAt_9ae6a989,
  @Specification = @Specification_9ae6a989,
  @FunctionalRequirements = @FunctionalRequirements_9ae6a989,
  @TechnicalDesign = @TechnicalDesign_9ae6a989,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_9ae6a989,
  @TechnicalDesignVector = @TechnicalDesignVector_9ae6a989,
  @HasCustomProps = @HasCustomProps_9ae6a989,
  @HasCustomEvents = @HasCustomEvents_9ae6a989,
  @RequiresData = @RequiresData_9ae6a989,
  @DependencyCount = @DependencyCount_9ae6a989,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_9ae6a989,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_9ae6a989,
  @HasRequiredCustomProps = @HasRequiredCustomProps_9ae6a989,
  @ID = @ID_9ae6a989;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_85aae538 NVARCHAR(MAX),
@Name_85aae538 NVARCHAR(500),
@Version_85aae538 NVARCHAR(50),
@VersionSequence_85aae538 INT,
@Title_85aae538 NVARCHAR(1000),
@Description_85aae538 NVARCHAR(MAX),
@Type_85aae538 NVARCHAR(255),
@Status_85aae538 NVARCHAR(50),
@DeveloperName_85aae538 NVARCHAR(255),
@DeveloperEmail_85aae538 NVARCHAR(255),
@DeveloperOrganization_85aae538 NVARCHAR(255),
@SourceRegistryID_85aae538 UNIQUEIDENTIFIER,
@ReplicatedAt_85aae538 DATETIMEOFFSET,
@LastSyncedAt_85aae538 DATETIMEOFFSET,
@Specification_85aae538 NVARCHAR(MAX),
@FunctionalRequirements_85aae538 NVARCHAR(MAX),
@TechnicalDesign_85aae538 NVARCHAR(MAX),
@FunctionalRequirementsVector_85aae538 NVARCHAR(MAX),
@TechnicalDesignVector_85aae538 NVARCHAR(MAX),
@HasCustomProps_85aae538 BIT,
@HasCustomEvents_85aae538 BIT,
@RequiresData_85aae538 BIT,
@DependencyCount_85aae538 INT,
@TechnicalDesignVectorEmbeddingModelID_85aae538 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_85aae538 NVARCHAR(MAX),
@HasRequiredCustomProps_85aae538 BIT,
@ID_85aae538 UNIQUEIDENTIFIER
SET
  @Namespace_85aae538 = N'CRM/Geography'
SET
  @Name_85aae538 = N'USAccountHeatmap'
SET
  @Version_85aae538 = N'1.0.0'
SET
  @VersionSequence_85aae538 = 1
SET
  @Title_85aae538 = N'US Account Distribution Map'
SET
  @Description_85aae538 = N'Interactive choropleth map showing account distribution across US states with drill-down capability'
SET
  @Type_85aae538 = N'Other'
SET
  @Status_85aae538 = N'Published'
SET
  @Specification_85aae538 = N'{"name":"USAccountHeatmap","namespace":"CRM/Geography","type":"Map","location":"embedded","code":"function USAccountHeatmap({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedState, setSelectedState] = useState(null);\n  const [stateAccounts, setStateAccounts] = useState([]);\n  const [accountsByState, setAccountsByState] = useState({});\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''count'');\n  const svgRef = useRef(null);\n  const tooltipRef = useRef(null);\n\n  // State name to abbreviation mapping\n  const stateAbbreviations = {\n    ''Alabama'': ''AL'', ''Alaska'': ''AK'', ''Arizona'': ''AZ'', ''Arkansas'': ''AR'', ''California'': ''CA'',\n    ''Colorado'': ''CO'', ''Connecticut'': ''CT'', ''Delaware'': ''DE'', ''Florida'': ''FL'', ''Georgia'': ''GA'',\n    ''Hawaii'': ''HI'', ''Idaho'': ''ID'', ''Illinois'': ''IL'', ''Indiana'': ''IN'', ''Iowa'': ''IA'',\n    ''Kansas'': ''KS'', ''Kentucky'': ''KY'', ''Louisiana'': ''LA'', ''Maine'': ''ME'', ''Maryland'': ''MD'',\n    ''Massachusetts'': ''MA'', ''Michigan'': ''MI'', ''Minnesota'': ''MN'', ''Mississippi'': ''MS'', ''Missouri'': ''MO'',\n    ''Montana'': ''MT'', ''Nebraska'': ''NE'', ''Nevada'': ''NV'', ''New Hampshire'': ''NH'', ''New Jersey'': ''NJ'',\n    ''New Mexico'': ''NM'', ''New York'': ''NY'', ''North Carolina'': ''NC'', ''North Dakota'': ''ND'', ''Ohio'': ''OH'',\n    ''Oklahoma'': ''OK'', ''Oregon'': ''OR'', ''Pennsylvania'': ''PA'', ''Rhode Island'': ''RI'', ''South Carolina'': ''SC'',\n    ''South Dakota'': ''SD'', ''Tennessee'': ''TN'', ''Texas'': ''TX'', ''Utah'': ''UT'', ''Vermont'': ''VT'',\n    ''Virginia'': ''VA'', ''Washington'': ''WA'', ''West Virginia'': ''WV'', ''Wisconsin'': ''WI'', ''Wyoming'': ''WY''\n  };\n\n  useEffect(() => {\n    loadAccounts();\n  }, []);\n\n  useEffect(() => {\n    if (accounts.length > 0) {\n      processAccountsByState();\n    }\n  }, [accounts]);\n\n  useEffect(() => {\n    if (Object.keys(accountsByState).length > 0 && svgRef.current) {\n      renderMap();\n    }\n  }, [accountsByState, viewMode]);\n\n  const loadAccounts = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await utilities.rv.RunView({\n        EntityName: ''Accounts'',\n        OrderBy: ''AccountName ASC''\n      });\n\n      if (result.Success) {\n        setAccounts(result.Results || []);\n      } else {\n        setError(result.ErrorMessage || ''Failed to load accounts'');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const processAccountsByState = () => {\n    const stateData = {};\n    \n    // Initialize all states\n    Object.keys(stateAbbreviations).forEach(stateName => {\n      stateData[stateName] = {\n        accounts: [],\n        count: 0,\n        totalRevenue: 0,\n        avgRevenue: 0\n      };\n    });\n    \n    // Group accounts by state (using BillingState field)\n    accounts.forEach(account => {\n      const state = account.BillingState;\n      // Handle both full state names and abbreviations\n      let stateName = state;\n      \n      // If it''s an abbreviation, convert to full name\n      if (state && state.length === 2) {\n        // Reverse lookup from abbreviation to full name\n        stateName = Object.keys(stateAbbreviations).find(\n          key => stateAbbreviations[key] === state.toUpperCase()\n        );\n      }\n      \n      if (stateName && stateData[stateName]) {\n        stateData[stateName].accounts.push(account);\n        stateData[stateName].count++;\n        stateData[stateName].totalRevenue += account.AnnualRevenue || 0;\n      }\n    });\n    \n    // Calculate averages\n    Object.keys(stateData).forEach(state => {\n      if (stateData[state].count > 0) {\n        stateData[state].avgRevenue = stateData[state].totalRevenue / stateData[state].count;\n      }\n    });\n    \n    setAccountsByState(stateData);\n  };\n\n  const renderMap = () => {\n    const container = svgRef.current;\n    if (!container) return;\n    \n    // Clear previous map\n    d3.select(container).selectAll(''*'').remove();\n    \n    const width = container.clientWidth;\n    const height = 500;\n    \n    const svg = d3.select(container)\n      .append(''svg'')\n      .attr(''width'', width)\n      .attr(''height'', height);\n    \n    // Create projection for US map - adjust scale for better fit\n    const projection = d3.geoAlbersUsa()\n      .scale(width * 1.2)\n      .translate([width / 2, height / 2]);\n    \n    const path = d3.geoPath().projection(projection);\n    \n    // Get max values for color scale\n    const maxCount = Math.max(...Object.values(accountsByState).map(d => d.count));\n    const maxRevenue = Math.max(...Object.values(accountsByState).map(d => d.totalRevenue));\n    \n    // Color scale based on view mode\n    const colorScale = d3.scaleSequential()\n      .domain([0, viewMode === ''count'' ? maxCount : maxRevenue])\n      .interpolator(d3.interpolateBlues);\n    \n    // Load US TopoJSON data\n    d3.json(''https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json'')\n      .then(us => {\n        // Convert TopoJSON to GeoJSON using topojson-client\n        const statesFeatures = topojson.feature(us, us.objects.states).features;\n        \n        // Draw states\n        svg.append(''g'')\n          .selectAll(''path'')\n          .data(statesFeatures)\n          .enter().append(''path'')\n          .attr(''d'', path)\n          .attr(''fill'', d => {\n            // GeoJSON uses ''name'' property for state names\n            const stateName = d.properties.name || d.properties.NAME || d.properties.State;\n            const stateData = accountsByState[stateName];\n            if (!stateData || stateData.count === 0) {\n              return ''#f0f0f0'';\n            }\n            const value = viewMode === ''count'' ? stateData.count : stateData.totalRevenue;\n            return colorScale(value);\n          })\n          .attr(''stroke'', ''#ffffff'')\n          .attr(''stroke-width'', 1)\n          .style(''cursor'', ''pointer'')\n          .on(''mouseover'', function(event, d) {\n            const stateName = d.properties.name || d.properties.NAME || d.properties.State;\n            const stateData = accountsByState[stateName];\n            \n            // Highlight state\n            d3.select(this)\n              .attr(''stroke'', ''#333'')\n              .attr(''stroke-width'', 2);\n            \n            // Show tooltip\n            const tooltip = d3.select(''body'').append(''div'')\n              .attr(''class'', ''map-tooltip'')\n              .style(''position'', ''absolute'')\n              .style(''background'', ''rgba(0, 0, 0, 0.8)'')\n              .style(''color'', ''white'')\n              .style(''padding'', ''8px'')\n              .style(''border-radius'', ''4px'')\n              .style(''font-size'', ''12px'')\n              .style(''pointer-events'', ''none'')\n              .style(''z-index'', ''1000'');\n            \n            tooltip.html(`\n              <strong>$' + '{stateName}</strong><br/>\n              Accounts: $' + '{stateData.count}<br/>\n              Total Revenue: $' + '{formatCurrency(stateData.totalRevenue)}<br/>\n              Avg Revenue: $' + '{formatCurrency(stateData.avgRevenue)}\n            `)\n            .style(''left'', (event.pageX + 10) + ''px'')\n            .style(''top'', (event.pageY - 28) + ''px'');\n            \n            tooltipRef.current = tooltip;\n          })\n          .on(''mousemove'', function(event) {\n            if (tooltipRef.current) {\n              tooltipRef.current\n                .style(''left'', (event.pageX + 10) + ''px'')\n                .style(''top'', (event.pageY - 28) + ''px'');\n            }\n          })\n          .on(''mouseout'', function() {\n            // Remove highlight\n            d3.select(this)\n              .attr(''stroke'', ''#ffffff'')\n              .attr(''stroke-width'', 1);\n            \n            // Remove tooltip\n            if (tooltipRef.current) {\n              tooltipRef.current.remove();\n              tooltipRef.current = null;\n            }\n          })\n          .on(''click'', function(event, d) {\n            const stateName = d.properties.name || d.properties.NAME || d.properties.State;\n            handleStateClick(stateName);\n          });\n        \n        // Add state labels for states with accounts\n        svg.append(''g'')\n          .selectAll(''text'')\n          .data(statesFeatures)\n          .enter().append(''text'')\n          .attr(''transform'', d => {\n            const centroid = path.centroid(d);\n            return `translate($' + '{centroid})`;\n          })\n          .attr(''text-anchor'', ''middle'')\n          .attr(''font-size'', ''10px'')\n          .attr(''font-weight'', ''bold'')\n          .attr(''fill'', d => {\n            const stateName = d.properties.name || d.properties.NAME || d.properties.State;\n            const stateData = accountsByState[stateName];\n            return stateData && stateData.count > 0 ? ''#333'' : ''transparent'';\n          })\n          .style(''pointer-events'', ''none'')\n          .text(d => {\n            const stateName = d.properties.name || d.properties.NAME || d.properties.State;\n            const stateData = accountsByState[stateName];\n            if (stateData && stateData.count > 0) {\n              return stateAbbreviations[stateName] || '''';\n            }\n            return '''';\n          });\n      })\n      .catch(err => {\n        console.error(''Error loading map data:'', err);\n        // Try an alternative approach - create a simple placeholder\n        svg.append(''text'')\n          .attr(''x'', width / 2)\n          .attr(''y'', height / 2)\n          .attr(''text-anchor'', ''middle'')\n          .attr(''font-size'', ''16px'')\n          .attr(''fill'', ''#666'')\n          .text(''Map data failed to load. Showing statistics only.'');\n        \n        // Show error but don''t block the component\n        console.warn(''Failed to load US map data. This might be due to CORS or network issues.'');\n      });\n    \n    // Add legend\n    const legendWidth = 200;\n    const legendHeight = 10;\n    \n    const legend = svg.append(''g'')\n      .attr(''transform'', `translate($' + '{width - legendWidth - 20}, $' + '{height - 40})`);\n    \n    // Create gradient for legend\n    const defs = svg.append(''defs'');\n    const linearGradient = defs.append(''linearGradient'')\n      .attr(''id'', ''legend-gradient'');\n    \n    // Add gradient stops\n    const numStops = 10;\n    for (let i = 0; i <= numStops; i++) {\n      linearGradient.append(''stop'')\n        .attr(''offset'', `$' + '{(i / numStops) * 100}%`)\n        .attr(''stop-color'', colorScale(i / numStops * (viewMode === ''count'' ? maxCount : maxRevenue)));\n    }\n    \n    // Draw legend rectangle\n    legend.append(''rect'')\n      .attr(''width'', legendWidth)\n      .attr(''height'', legendHeight)\n      .style(''fill'', ''url(#legend-gradient)'');\n    \n    // Add legend labels\n    legend.append(''text'')\n      .attr(''y'', -5)\n      .attr(''font-size'', ''11px'')\n      .text(viewMode === ''count'' ? ''Number of Accounts'' : ''Total Revenue'');\n    \n    legend.append(''text'')\n      .attr(''y'', legendHeight + 15)\n      .attr(''font-size'', ''10px'')\n      .text(''0'');\n    \n    legend.append(''text'')\n      .attr(''x'', legendWidth)\n      .attr(''y'', legendHeight + 15)\n      .attr(''text-anchor'', ''end'')\n      .attr(''font-size'', ''10px'')\n      .text(viewMode === ''count'' ? maxCount : formatCurrency(maxRevenue));\n  };\n\n  const handleStateClick = (stateName) => {\n    const stateData = accountsByState[stateName];\n    if (stateData && stateData.count > 0) {\n      setSelectedState(stateName);\n      setStateAccounts(stateData.accounts);\n    }\n  };\n\n  const formatCurrency = (amount) => {\n    if (amount >= 1000000) {\n      return ''$'' + (amount / 1000000).toFixed(1) + ''M'';\n    } else if (amount >= 1000) {\n      return ''$'' + (amount / 1000).toFixed(0) + ''K'';\n    }\n    return new Intl.NumberFormat(''en-US'', {\n      style: ''currency'',\n      currency: ''USD'',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount || 0);\n  };\n\n  const handleViewModeChange = (mode) => {\n    setViewMode(mode);\n    onSaveUserSettings({ ...savedUserSettings, viewMode: mode });\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading account data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''20px'', backgroundColor: ''#FEE2E2'', borderRadius: ''8px'', margin: ''20px'' }}>\n        <div style={{ color: ''#991B1B'', fontWeight: ''bold'' }}>Error loading data</div>\n        <div style={{ color: ''#DC2626'', marginTop: ''8px'' }}>{error}</div>\n        <button \n          onClick={loadAccounts}\n          style={{\n            marginTop: ''12px'',\n            padding: ''8px 16px'',\n            backgroundColor: ''#EF4444'',\n            color: ''white'',\n            border: ''none'',\n            borderRadius: ''6px'',\n            cursor: ''pointer''\n          }}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: ''20px'', height: ''100%'', display: ''flex'', flexDirection: ''column'' }}>\n      <div style={{ marginBottom: ''20px'' }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''16px'' }}>\n          <h2 style={{ fontSize: ''24px'', fontWeight: ''bold'', margin: 0 }}>Account Distribution Map</h2>\n          <div style={{ display: ''flex'', gap: ''8px'' }}>\n            <button\n              onClick={() => handleViewModeChange(''count'')}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: viewMode === ''count'' ? ''#3B82F6'' : ''#F3F4F6'',\n                color: viewMode === ''count'' ? ''white'' : ''#374151'',\n                border: ''1px solid'',\n                borderColor: viewMode === ''count'' ? ''#3B82F6'' : ''#D1D5DB'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              By Count\n            </button>\n            <button\n              onClick={() => handleViewModeChange(''revenue'')}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: viewMode === ''revenue'' ? ''#3B82F6'' : ''#F3F4F6'',\n                color: viewMode === ''revenue'' ? ''white'' : ''#374151'',\n                border: ''1px solid'',\n                borderColor: viewMode === ''revenue'' ? ''#3B82F6'' : ''#D1D5DB'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              By Revenue\n            </button>\n            <button\n              onClick={loadAccounts}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: ''#10B981'',\n                color: ''white'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              Refresh\n            </button>\n          </div>\n        </div>\n        \n        {/* Summary Stats */}\n        <div style={{ \n          display: ''grid'', \n          gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'',\n          gap: ''12px'',\n          marginBottom: ''20px''\n        }}>\n          <div style={{ \n            padding: ''12px'', \n            backgroundColor: ''#F9FAFB'', \n            borderRadius: ''8px'',\n            borderLeft: ''4px solid #3B82F6''\n          }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Total Accounts</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n              {accounts.length.toLocaleString()}\n            </div>\n          </div>\n          <div style={{ \n            padding: ''12px'', \n            backgroundColor: ''#F9FAFB'', \n            borderRadius: ''8px'',\n            borderLeft: ''4px solid #10B981''\n          }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>States with Accounts</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n              {Object.values(accountsByState).filter(s => s.count > 0).length}\n            </div>\n          </div>\n          <div style={{ \n            padding: ''12px'', \n            backgroundColor: ''#F9FAFB'', \n            borderRadius: ''8px'',\n            borderLeft: ''4px solid #F59E0B''\n          }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Top State</div>\n            <div style={{ fontSize: ''20px'', fontWeight: ''bold'', color: ''#111827'' }}>\n              {(() => {\n                const topState = Object.entries(accountsByState)\n                  .filter(([_, data]) => data.count > 0)\n                  .sort((a, b) => b[1].count - a[1].count)[0];\n                return topState ? `$' + '{topState[0]} ($' + '{topState[1].count})` : ''N/A'';\n              })()}\n            </div>\n          </div>\n          <div style={{ \n            padding: ''12px'', \n            backgroundColor: ''#F9FAFB'', \n            borderRadius: ''8px'',\n            borderLeft: ''4px solid #8B5CF6''\n          }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Total Revenue</div>\n            <div style={{ fontSize: ''20px'', fontWeight: ''bold'', color: ''#111827'' }}>\n              {formatCurrency(accounts.reduce((sum, acc) => sum + (acc.AnnualRevenue || 0), 0))}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Map Container */}\n      <div \n        ref={svgRef}\n        style={{ \n          flex: 1, \n          backgroundColor: ''white'', \n          borderRadius: ''8px'', \n          padding: ''20px'',\n          border: ''1px solid #E5E7EB'',\n          minHeight: ''500px''\n        }}\n      />\n      \n      {/* State Details Modal */}\n      {selectedState && (\n        <div style={{\n          position: ''fixed'',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          backgroundColor: ''rgba(0, 0, 0, 0.5)'',\n          display: ''flex'',\n          alignItems: ''center'',\n          justifyContent: ''center'',\n          zIndex: 1000\n        }}\n        onClick={() => setSelectedState(null)}\n        >\n          <div \n            style={{\n              backgroundColor: ''white'',\n              borderRadius: ''12px'',\n              width: ''90%'',\n              maxWidth: ''900px'',\n              height: ''80vh'',\n              display: ''flex'',\n              flexDirection: ''column'',\n              boxShadow: ''0 20px 25px -5px rgba(0, 0, 0, 0.1)''\n            }}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div style={{\n              padding: ''20px'',\n              borderBottom: ''1px solid #E5E7EB'',\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''center''\n            }}>\n              <h3 style={{ fontSize: ''20px'', fontWeight: ''bold'', margin: 0 }}>\n                {selectedState} Accounts\n                <span style={{ marginLeft: ''12px'', fontSize: ''16px'', color: ''#6B7280'' }}>\n                  ({stateAccounts.length} accounts)\n                </span>\n              </h3>\n              <button\n                onClick={() => setSelectedState(null)}\n                style={{\n                  background: ''none'',\n                  border: ''none'',\n                  fontSize: ''24px'',\n                  cursor: ''pointer'',\n                  color: ''#6B7280'',\n                  padding: ''0'',\n                  width: ''30px'',\n                  height: ''30px''\n                }}\n              >\n                ×\n              </button>\n            </div>\n            \n            <div style={{ flex: 1, overflow: ''auto'', padding: ''20px'' }}>\n              {stateAccounts.length === 0 ? (\n                <div style={{ textAlign: ''center'', padding: ''40px'', color: ''#6B7280'' }}>\n                  No accounts found in {selectedState}\n                </div>\n              ) : (\n                <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n                  <thead>\n                    <tr style={{ borderBottom: ''2px solid #E5E7EB'' }}>\n                      <th style={{ padding: ''12px'', textAlign: ''left'', fontWeight: ''600'' }}>Account Name</th>\n                      <th style={{ padding: ''12px'', textAlign: ''left'', fontWeight: ''600'' }}>City</th>\n                      <th style={{ padding: ''12px'', textAlign: ''left'', fontWeight: ''600'' }}>Industry</th>\n                      <th style={{ padding: ''12px'', textAlign: ''right'', fontWeight: ''600'' }}>Annual Revenue</th>\n                      <th style={{ padding: ''12px'', textAlign: ''center'', fontWeight: ''600'' }}>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {stateAccounts.map((account, index) => (\n                      <tr \n                        key={account.ID}\n                        style={{ \n                          borderBottom: ''1px solid #E5E7EB'',\n                          backgroundColor: index % 2 === 0 ? ''white'' : ''#F9FAFB''\n                        }}\n                      >\n                        <td style={{ padding: ''12px'', fontWeight: ''500'' }}>{account.AccountName}</td>\n                        <td style={{ padding: ''12px'' }}>{account.City || ''-''}</td>\n                        <td style={{ padding: ''12px'' }}>{account.Industry || ''-''}</td>\n                        <td style={{ padding: ''12px'', textAlign: ''right'', fontWeight: ''600'', color: ''#059669'' }}>\n                          {formatCurrency(account.AnnualRevenue)}\n                        </td>\n                        <td style={{ padding: ''12px'', textAlign: ''center'' }}>\n                          <button\n                            onClick={() => {\n                              if (callbacks.OpenEntityRecord) {\n                                callbacks.OpenEntityRecord(''Accounts'', [\n                                  { FieldName: ''ID'', Value: account.ID }\n                                ]);\n                                setSelectedState(null);\n                              }\n                            }}\n                            style={{\n                              padding: ''6px 8px'',\n                              backgroundColor: ''#3B82F6'',\n                              color: ''white'',\n                              border: ''none'',\n                              borderRadius: ''4px'',\n                              cursor: ''pointer'',\n                              fontSize: ''18px''\n                            }}\n                            title=\"Open record\"\n                          >\n                            ↗\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","functionalRequirements":"## US Account Distribution Heatmap\n\n### Purpose\nVisualize the geographic distribution of accounts across the United States using an interactive choropleth map.\n\n### Core Features\n- **Choropleth Map**: Color-coded US states based on account concentration\n- **Dual View Modes**: \n  - Count mode: Shows number of accounts per state\n  - Revenue mode: Shows total annual revenue per state\n- **Interactive States**: Hover for tooltips, click for detailed drill-down\n- **Summary Statistics**: Total accounts, states covered, top state, total revenue\n- **State Details Modal**: List of all accounts in selected state with sorting\n\n### Map Interactions\n- **Hover**: Shows tooltip with state metrics (count, total revenue, average revenue)\n- **Click**: Opens modal with detailed account list for that state\n- **Visual Feedback**: State highlighting on hover\n- **Color Gradient**: Darker shades indicate higher concentration\n\n### State Details View\n- Sortable table of accounts\n- Shows account name, city, industry, annual revenue\n- Direct link to open full account record\n- Clean modal interface with scrollable content\n\n### Visual Design\n- Blue gradient color scheme for data visualization\n- Gray for states with no accounts\n- State abbreviations displayed on map\n- Interactive legend showing value range\n- Responsive layout that adapts to container size","dataRequirements":{"mode":"views","entities":[{"name":"Accounts","displayFields":["AccountName","City","BillingState","Industry","AnnualRevenue"],"filterFields":["BillingState"],"sortFields":["AccountName","AnnualRevenue"],"fields":[{"name":"ID","type":"string","description":"Unique identifier for the account"},{"name":"AccountName","type":"string","description":"Name of the account/company"},{"name":"City","type":"string","description":"City where account is located"},{"name":"BillingState","type":"string","description":"Billing state of the account (can be abbreviation or full name)"},{"name":"Industry","type":"string","description":"Industry sector of the account"},{"name":"AnnualRevenue","type":"number","description":"Annual revenue of the account"}]}]},"technicalDesign":"## Implementation Details\n\n### Component Function\n`USAccountHeatmap({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings })`\n\n### State Management\n- **accounts**: Array of all account records\n- **accountsByState**: Aggregated data by state\n- **selectedState**: Currently selected state for drill-down\n- **stateAccounts**: Accounts in selected state\n- **viewMode**: ''count'' or ''revenue'' display mode\n\n### Data Processing\n1. Load all accounts with state information\n2. Group accounts by state name\n3. Calculate metrics per state:\n   - Account count\n   - Total revenue\n   - Average revenue\n4. Map state names to abbreviations for display\n\n### Map Rendering with D3.js\n1. **Projection**: Uses `d3.geoAlbersUsa()` for US map\n2. **Data Source**: TopoJSON from CDN (us-atlas@3)\n3. **Color Scale**: `d3.interpolateBlues` sequential scale\n4. **Interactivity**: D3 event handlers for hover and click\n5. **Tooltip**: Dynamic positioning following cursor\n6. **Legend**: Gradient bar showing value range\n\n### Performance Considerations\n- Single data load for all accounts\n- Client-side aggregation and filtering\n- Efficient D3 rendering with proper cleanup\n- Lazy loading of TopoJSON data\n\n### Browser Compatibility\n- Requires modern browser with SVG support\n- D3.js v7 for visualization\n- TopoJSON for geographic data","properties":[],"events":[{"name":"OpenEntityRecord","description":"Triggered when user clicks open button for an account"}],"dependencies":[],"libraries":[{"name":"d3","version":"^7.8.5","globalVariable":"d3"},{"name":"topojson-client","version":"^3.1.0","globalVariable":"topojson"}]}'
SET
  @FunctionalRequirements_85aae538 = N'## US Account Heatmap

### Core Features
- Choropleth map visualization of US states
- Color intensity based on account concentration
- Two view modes: by count or by revenue
- Interactive hover tooltips with state metrics
- Click states to see detailed account list
- Summary statistics cards

### Map Visualization
- D3.js powered interactive map
- Blue gradient color scheme
- State abbreviations on map
- Dynamic legend showing value range
- Gray states indicate no accounts

### State Drill-Down
- Modal with account list for selected state
- Shows account name, city, industry, revenue
- Direct links to open account records
- Sortable table columns'
SET
  @TechnicalDesign_85aae538 = N'## Implementation

### Data Loading
- Single RunView to load all accounts
- Client-side aggregation by state
- Calculate counts and revenue totals

### Map Rendering
- D3.js with TopoJSON for US geography
- AlbersUSA projection
- Sequential color scale
- SVG-based rendering

### Interactivity
- Hover events for tooltips
- Click events for drill-down
- Dynamic tooltip positioning
- State highlighting on hover

### Performance
- Efficient D3 rendering
- Client-side data processing
- Lazy TopoJSON loading
- Proper cleanup on re-render'
SET
  @FunctionalRequirementsVector_85aae538 = N'[-0.05498768389225006,-0.017934933304786682,-0.04341672733426094,-0.02820676378905773,0.04003528878092766,0.042482055723667145,0.019692273810505867,0.0414569154381752,0.037096135318279266,-0.03910940885543823,-0.03265131637454033,0.05336061120033264,0.062369197607040405,0.10042538493871689,-0.01963197998702526,-0.04757858067750931,-0.010672240518033504,-0.004615507088601589,-0.03826838731765747,-0.013911165297031403,-0.01582423225045204,-0.014341475442051888,-0.03842945396900177,-0.029522527009248734,0.0019119067583233118,0.0016497161705046892,0.009204253554344177,0.006104009225964546,0.04188903421163559,-0.0822143480181694,0.004849880468100309,0.0036032400093972683,-0.0358542799949646,-0.04114563390612602,0.0000024529949769203085,-0.03285083919763565,-0.017463771626353264,0.015597988851368427,0.026675492525100708,-0.008487284183502197,-0.025527236983180046,-0.02504953183233738,0.035173773765563965,-0.0005007193540222943,-0.01095770113170147,-0.038178376853466034,-0.03140954673290253,-0.01923881098628044,-0.0061194212175905704,-0.09199702739715576,0.01643580198287964,-0.062244217842817307,-0.08739432692527771,-0.0031589085701853037,-0.013404829427599907,0.006637417711317539,-0.002571869408711791,0.017302880063652992,-0.022327536717057228,-0.09578581899404526,-0.05585646256804466,0.04884055256843567,0.017671849578619003,-0.00849047489464283,0.06993342936038971,0.05553606152534485,0.03771704062819481,0.028754789382219315,0.005010915920138359,0.011494684033095837,0.04910530522465706,0.04394431412220001,0.024292748421430588,0.002158180810511112,-0.04251030832529068,0.0003603576042223722,-0.01097074057906866,0.01683010160923004,0.02114471234381199,-0.0008663692278787494,-0.08718673884868622,0.047854576259851456,-0.0254222359508276,0.004934095311909914,-0.005152026657015085,0.00006869978096801788,-0.020442642271518707,-0.01484677940607071,-0.05122359097003937,0.007576975040137768,-0.007853560149669647,-0.05036989599466324,0.0034605551045387983,0.006063918117433786,0.003778780810534954,-0.0008394886390306056,0.03082922473549843,-0.07167268544435501,0.04400869458913803,0.010338409803807735,0.10937054455280304,0.026912761852145195,-0.06534845381975174,0.018060684204101562,0.05282563716173172,0.014035048894584179,-0.0019967863336205482,-0.05886203795671463,0.01307548675686121,0.037099480628967285,-0.012552710250020027,0.022682512179017067,0.026566553860902786,-0.04394078627228737,0.008245360106229782,0.07201860100030899,-0.05775464326143265,-0.05994761362671852,-0.03470214456319809,0.019992122426629066,0.04277826473116875,0.0009351570624858141,0.04331585764884949,0.027367601171135902,-0.030903000384569168,0.039757732301950455,-0.08933935314416885,-0.00545442383736372,0.011697040870785713,0.04561772570014,-0.006468928884714842,0.012388123199343681,0.018024301156401634,-0.030245665460824966,0.0015063185710459948,-0.023243147879838943,0.04250652715563774,-0.031069878488779068,-0.00894155167043209,0.027783583849668503,0.01715603470802307,-0.004466155078262091,0.02697504684329033,0.00032332251430489123,0.010582447983324528,-0.029315674677491188,0.0337517224252224,0.08966202288866043,0.007767270784825087,-0.015336083248257637,-0.021738475188612938,-0.015814099460840225,-0.030073359608650208,-0.0016867767553776503,-0.005291662644594908,-0.0007106451666913927,0.03920680284500122,-0.02870987541973591,0.018645701929926872,0.010719526559114456,0.005089529324322939,-0.022977499291300774,0.013347265310585499,-0.050744034349918365,-0.017493747174739838,0.07858161628246307,-0.0695495456457138,0.012160981073975563,-0.09239596128463745,-0.02968534827232361,-0.021109139546751976,-0.023957883939146996,-0.05013806000351906,-0.025174664333462715,0.024538669735193253,0.04615255445241928,0.04193544760346413,-0.03529742360115051,0.002450300147756934,0.026941189542412758,0.013352143578231335,-0.11892406642436981,0.02981947548687458,-0.0006847875192761421,-0.02397242747247219,-0.00624982500448823,-0.007372015155851841,0.014923345297574997,-0.029464807361364365,-0.007199294399470091,-0.003800321137532592,-0.058732710778713226,-0.01655338518321514,0.018505427986383438,-0.02042926661670208,0.0061859856359660625,0.05531132221221924,-0.06269698590040207,0.011108298785984516,0.01674572192132473,-0.017192907631397247,-0.01883649080991745,0.0267576202750206,0.05987243354320526,0.0056571997702121735,0.03466362878680229,-0.027090761810541153,-0.02216321788728237,0.006666254252195358,0.01664658449590206,-0.03184564411640167,0.07410687953233719,0.004449216648936272,-0.019057847559452057,-0.012998645193874836,0.03576238453388214,0.008266948163509369,0.0297070425003767,0.005336962174624205,-0.02447211928665638,-0.03335820138454437,0.03726357966661453,0.06737776845693588,-0.038263414055109024,0.03384201601147652,0.06561131030321121,0.013768895529210567,0.020379655063152313,0.041997890919446945,-0.028902241960167885,-0.011504137888550758,-0.023851875215768814,0.017138568684458733,0.017354030162096024,0.0261642225086689,0.02695573680102825,0.06957931816577911,0.08975518494844437,-0.01631229929625988,-0.029357653111219406,-0.008493894711136818,-0.06460081040859222,0.005986410193145275,-0.0004973081522621214,-0.00076865911250934,-0.02267627976834774,-0.03228512778878212,0.013722747564315796,-0.02981550246477127,0.021331356838345528,0.026509499177336693,0.02587451972067356,0.0799497738480568,-0.07654736936092377,-0.028993263840675354,0.046942099928855896,-0.008062000386416912,-0.04759348928928375,0.020254885777831078,0.08370793610811234,-0.035696376115083694,-0.01060570776462555,-0.06545107066631317,-0.054436419159173965,0.003995988052338362,-0.01620178483426571,0.063435859978199,0.010165581479668617,-0.004655736964195967,0.0502222441136837,-0.012318937107920647,0.05181280896067619,0.0069357785396277905,-0.021724587306380272,0.018047204241156578,0.030252212658524513,-0.04272637143731117,0.03411535546183586,0.0011093646753579378,0.0030031034257262945,0.008736184798181057,-0.015777988359332085,0.023382559418678284,0.028337979689240456,-0.008415632881224155,-0.06518538296222687,-0.008038387633860111,-0.08561085164546967,0.020688628777861595,-0.01055814791470766,0.031363971531391144,0.011065260507166386,0.025184834375977516,-0.02364063262939453,-0.03161175549030304,0.031188851222395897,-0.0028581516817212105,-0.03231162950396538,-0.020321937277913094,0.07407455891370773,-0.036474525928497314,-0.06122441217303276,0.005286133848130703,0.02867329865694046,0.031566962599754333,0.06296014785766602,0.022782493382692337,0.004180203657597303,0.020079510286450386,0.03793053328990936,0.028368474915623665,-0.0006295377388596535,0.02483343333005905,-0.08528535068035126,0.023252347484230995,0.014503119513392448,0.006108350586146116,0.020836666226387024,0.0004760473675560206,0.04435728117823601,-0.007352374028414488,-0.01740214414894581,-0.019508974626660347,-0.034128326922655106,0.004209770821034908,0.03268025070428848,-0.01653922162950039,-0.023990903049707413,-0.001767671317793429,-0.016298668459057808,-0.002032708376646042,-0.016367681324481964,0.012417745776474476,0.06637807935476303,-0.058492522686719894,-0.0428190641105175,-0.014031918719410896,0.009917190298438072,0.03476114571094513,-0.06151844188570976,-0.03662604093551636,0.016973672434687614,0.008541207760572433,-0.03478157892823219,0.02201901189982891,-0.003119863336905837,0.06177370622754097,-0.048283737152814865,-0.044384509325027466,0.03735294193029404,0.05904858559370041,0.04163350909948349,0.011553362011909485,-0.04011209309101105,0.03132271394133568,-0.03277545049786568,-0.009096436202526093,0.07962464541196823,-0.07324370741844177,-0.044392913579940796,0.015104017220437527,0.010450913570821285,-0.0035137829836457968,0.07530657202005386,0.0247662216424942,0.0426984541118145,-0.006164412945508957,-0.017414454370737076,-0.007869468070566654,0.007323132827877998,-0.03483479097485542,-0.004198415670543909,-0.016861245036125183,0.015294875018298626,0.013764550909399986,-0.03389306738972664,0.02230101265013218,0.02601264789700508,-0.013020869344472885,0.014242895878851414,0.08072231709957123,-0.07652357965707779,0.04773435369133949,-0.046924151480197906,0.02046171948313713,-0.035223595798015594,-0.0491475835442543,0.007014058064669371,-0.05046718940138817,-0.00518490606918931,-0.009294897317886353,0.08449524641036987,-0.032079026103019714,0.009422773495316505,0.010539400391280651,0.042527247220277786,-0.04371044784784317,-0.04011087864637375,-0.004442664794623852,-0.020708836615085602,0.018754465505480766,-0.03978627547621727,0.028461875393986702,-0.02961627207696438,-0.015741806477308273,-0.07636360079050064,0.07457678765058517,0.05625205859541893,-0.011983984149992466,-0.00501949293538928,-0.06663265824317932,0.04269089177250862,0.011663965880870819,-0.0072301654145121574,-0.021905500441789627,0.007187423296272755,-0.006736448034644127,-0.003834993112832308,-0.006865042727440596,0.061194274574518204,0.030421104282140732,0.003559153527021408,-0.02173461578786373,-0.030992096289992332,0.08477786928415298,-0.0182848758995533,0.06051798164844513,-0.06785039603710175,0.0031513008289039135,0.030732549726963043,0.000229558369028382,0.045432303100824356,-0.06720494478940964,0.04199400171637535,-0.04680195078253746,-0.016742246225476265,0.046920519322156906,0.027651457116007805,0.013954904861748219,-0.02595856785774231,-0.023058224469423294,0.01962980069220066,0.018591491505503654,-0.007189899682998657,-0.0036181744653731585,0.04524307698011398,-0.02301020920276642,0.08662688732147217,-0.044185929000377655,-0.10798482596874237,0.01824146695435047,0.007936407811939716,-0.0713038519024849,-0.020678147673606873,0.02677411213517189,-0.008564953692257404,0.04859895631670952,-0.003352105151861906,0.0390559621155262,0.035343416035175323,0.02491002529859543,0.023261811584234238,-0.067863829433918,-0.05202041193842888,0.014499296434223652,-0.015447696670889854,0.04030126705765724,-0.03865552693605423,-0.058062657713890076,-0.04704122245311737,0.049506399780511856,0.025269776582717896,-0.03858424350619316,0.026938099414110184,0.03960420936346054,0.020260559394955635,-0.02168397232890129,-0.019137592986226082,0.04156823456287384,-0.059964071959257126,0.00958488043397665,0.05899251252412796,0.025237560272216797,-0.0016298440750688314,0.019332507625222206,-0.009913348592817783,-0.05785539746284485,0.011358534917235374,-0.03572864457964897,-0.023933323100209236,0.056025534868240356,0.009536256082355976,-0.012121452018618584,0.05256564915180206,0.05554449185729027,-0.014846849255263805,0.0019666249863803387,0.02703971043229103,0.009172840975224972,0.0073448847979307175,-0.08090458810329437,-0.016672171652317047,-0.006292527075856924,0.03653369098901749,0.003101885551586747,0.02703966572880745,0.04975069314241409,0.03621174022555351,-0.011917414143681526,-0.01756916381418705,-0.007316425908356905,0.008754519745707512,-0.04426240548491478,0.01228641252964735,0.06848939508199692,0.006107743829488754,-0.004515764303505421,-0.020106695592403412,0.012933509424328804,-0.007748176343739033,0.02290305122733116,0.010515502654016018,0.027265671640634537,0.0326182097196579,-0.019577935338020325,-0.015969401225447655,0.0200523529201746,-0.026971081271767616,-0.013893792405724525,0.03423211723566055,0.056344036012887955,0.000729811959899962,0.001164697459898889,0.0012128495145589113,-0.010482453741133213,0.039515379816293716,0.037034716457128525,0.0006194727029651403,0.011808306910097599,-0.02297191135585308,-0.03500383719801903,-0.024960828945040703,0.017924755811691284,-0.02338259108364582,0.014702562242746353,0.009955111891031265,0.026984067633748055,-0.09520461410284042,-0.012545050121843815,-0.01600421778857708,0.012605573982000351,-0.02468978613615036,-0.02341519668698311,-0.043536826968193054,-0.025009343400597572,-7.357873176489703e-33,-0.05112021788954735,-0.04496058449149132,-0.03308986499905586,-0.0987994521856308,0.0011632730020210147,-0.021329954266548157,0.03261132538318634,-0.013259317725896835,-0.018240222707390785,-0.04574533924460411,-0.026011455804109573,-0.00868426077067852,0.011283834464848042,0.016266530379652977,-0.027262696996331215,-0.04252946376800537,-0.009389262646436691,0.006410173140466213,-0.011473448947072029,-0.021505428478121758,-0.0278945192694664,0.04170570895075798,0.016555694863200188,-0.03737178444862366,-0.051698729395866394,0.03375457599759102,-0.046453822404146194,0.023908335715532303,0.002359961625188589,-0.0023068285081535578,-0.005257430020719767,-0.014242498204112053,-0.03695380687713623,-0.014333461411297321,0.004597105551511049,-0.061418499797582626,0.0023035018239170313,-0.07066714763641357,0.01893296092748642,-0.019139572978019714,0.040422048419713974,0.011446386575698853,0.004763806704431772,0.037779562175273895,0.025698155164718628,0.021731752902269363,-0.01114827860146761,-0.02634401246905327,0.0033748953137546778,-0.017313562333583832,0.03383553773164749,0.038615066558122635,-0.008401289582252502,0.05945812538266182,-0.002110488712787628,0.06666143238544464,0.021804573014378548,-0.021632611751556396,-0.04985355958342552,0.00010486556129762903,0.057568974792957306,-0.024976888671517372,0.000304993154713884,0.005827486980706453,0.03590209782123566,0.04058833420276642,0.0033396081998944283,0.05785733088850975,-0.05083971470594406,-0.013701245188713074,0.020100444555282593,-0.009219245985150337,-0.05884074792265892,0.008474333211779594,-0.0003787524183280766,-0.03308897092938423,0.006546061486005783,0.03547629714012146,0.03767871484160423,0.012366912327706814,0.007910299114882946,0.007643875200301409,-0.02208239585161209,-0.016900885850191116,0.02614038623869419,-0.020001040771603584,-0.002151485765352845,-0.02942507155239582,0.056389857083559036,0.014415080659091473,0.014286650344729424,0.08763585239648819,-0.015395726077258587,-0.010831356048583984,-0.045806292444467545,-0.0060523925349116325,0.07681363075971603,0.047126974910497665,-0.012088543735444546,-0.06369350105524063,0.021341713145375252,-0.0385872945189476,-0.038187332451343536,0.015404940582811832,-0.0158817321062088,0.005939075257629156,0.04422500729560852,-0.021468548104166985,-0.045081619173288345,-0.006660501938313246,0.03831363469362259,-0.0014717633603140712,-0.03454652801156044,0.002712787361815572,0.01313637662678957,0.005158983636647463,-0.004650553222745657,-0.03511873632669449,0.038996778428554535,0.025134161114692688,0.009236996993422508,-0.01664644666016102,-0.06276780366897583,0.015705041587352753,0.03842870518565178,-0.015925735235214233,-0.054253511130809784,-0.030372288078069687,0.037350598722696304,-0.06933539360761642,0.01393441203981638,-0.02274208329617977,3.2018232332120533e-7,0.041709963232278824,0.06193207949399948,-0.06547345966100693,-0.04196213558316231,0.00850842148065567,-0.003010323503986001,-0.029782114550471306,-0.048327941447496414,-0.004258096683770418,-0.01275413017719984,0.001373919891193509,0.01968524605035782,0.0627036988735199,0.07783003151416779,-0.0284193754196167,-0.036660466343164444,-0.03128007426857948,0.01433651614934206,-0.021780172362923622,0.03429758921265602,0.04275522008538246,0.02320200949907303,0.07617130875587463,0.01513324398547411,0.03529277816414833,0.033860012888908386,-0.00242986879311502,-0.07640007883310318,0.025419630110263824,-0.061933550983667374,0.035582464188337326,-0.0015388928586617112,0.009495003148913383,-0.03172226622700691,0.009210634976625443,0.024332791566848755,-0.05388758331537247,-0.015847474336624146,0.04095619171857834,0.04966392368078232,0.016574937850236893,-0.005852950271219015,-0.016758035868406296,-0.06375308334827423,-0.02385742962360382,-0.042786963284015656,-0.00790415145456791,-0.002931394148617983,-0.019737431779503822,0.0475790798664093,0.022709030658006668,0.006219188682734966,-0.04406237602233887,0.002439261646941304,0.04164540767669678,-0.03849419951438904,-0.012807376682758331,0.047934193164110184,0.014714050106704235,-0.017652783542871475,-0.015761015936732292,0.0952887162566185,-0.0247134268283844,0.05850492790341377,0.03431587293744087,0.007477585691958666,-0.02638377621769905,3.8664525491139765e-34,-0.013566805981099606,-0.01797783188521862,0.04591482877731323,-0.018401142209768295,0.03968633711338043,-0.0016650906763970852,0.020624544471502304,0.009613684378564358,0.00670479005202651,-0.03532839193940163,-0.017777035012841225]'
SET
  @TechnicalDesignVector_85aae538 = N'[0.026457225903868675,0.030476680025458336,-0.030804989859461784,0.003097640350461006,0.024634113535284996,-0.014146782457828522,-0.003755343146622181,0.005460781045258045,-0.028782516717910767,-0.05475662648677826,0.0073054698295891285,0.06592445820569992,0.07550370693206787,0.11712409555912018,0.041084494441747665,-0.09057489782571793,-0.017116282135248184,0.023882338777184486,-0.06278838217258453,-0.005030653905123472,0.010812995955348015,-0.015598421916365623,-0.01389372255653143,-0.052186645567417145,0.04373130202293396,-0.01566300354897976,-0.050458092242479324,0.029509302228689194,0.018551766872406006,-0.07455065101385117,0.0036120631266385317,0.013000923208892345,-0.07064352184534073,0.005157099105417728,0.0000026720151709014317,-0.022332489490509033,-0.004713511094450951,0.004335283301770687,0.017860716208815575,0.059999749064445496,0.009558231569826603,-0.03607839718461037,0.043269261717796326,-0.021939625963568687,0.0004478708142414689,-0.014330972917377949,-0.031072044745087624,0.012364068999886513,0.02969948761165142,-0.044730231165885925,-0.00811665877699852,-0.03321787714958191,-0.04871775209903717,-0.0004211576306261122,0.011903433129191399,0.044480495154857635,0.005166416987776756,0.039310257881879807,0.029053010046482086,-0.043709103018045425,-0.012137049809098244,0.013415161520242691,-0.039849936962127686,-0.023405199870467186,0.035907622426748276,0.0356002077460289,0.037129998207092285,-0.049739427864551544,-0.03277748450636864,0.0005961782881058753,0.03719491511583328,0.023512467741966248,0.026726027950644493,0.023189781233668327,-0.065074622631073,0.0017685325583443046,-0.035419877618551254,-0.05305010825395584,0.04243218153715134,-0.005413292441517115,-0.06895772367715836,0.005655009299516678,-0.01924983784556389,0.016120169311761856,0.041833750903606415,0.0314144641160965,-0.027866635471582413,-0.006902237888425589,-0.05902132764458656,0.06108717992901802,0.04171322286128998,-0.047914884984493256,0.014666536822915077,-0.029506798833608627,0.010337152518332005,-0.03751817345619202,0.0510195791721344,-0.02328628860414028,0.060581110417842865,0.014242046512663364,0.13687197864055634,0.05130928382277489,-0.05029721185564995,0.03411119803786278,0.04722195863723755,0.011956954374909401,-0.0398062989115715,-0.10098659992218018,0.010691913776099682,0.047083184123039246,0.02777002565562725,0.024382267147302628,0.02154151350259781,0.019396843388676643,-0.04648164287209511,0.0544210821390152,-0.005373417399823666,0.002848940435796976,0.035899579524993896,0.011666184291243553,0.06760704517364502,-0.0004796170978806913,0.007688750047236681,0.0333532989025116,0.0059470138512551785,0.024985017254948616,-0.05899025499820709,-0.029271049425005913,0.00011123406875412911,-0.01733294315636158,0.0069062369875609875,-0.015152962878346443,0.02845867909491062,0.004690742120146751,0.0021736575290560722,-0.026506319642066956,0.020754028111696243,0.026243669912219048,-0.02609098330140114,0.011600732803344727,-0.0013785188784822822,-0.00637055141851306,-0.03328306972980499,-0.026144787669181824,0.04552072286605835,-0.031952936202287674,0.0054513090290129185,0.07060954719781876,-0.00297657772898674,-0.007197133265435696,0.003170750802382827,-0.03341060131788254,-0.05712376907467842,0.008628372102975845,-0.04340206831693649,0.024544959887862206,0.019159533083438873,0.04679322615265846,0.02591858059167862,0.05736761912703514,0.022584691643714905,0.020943017676472664,-0.004947971552610397,-0.009349200874567032,0.023440763354301453,0.0777832642197609,-0.07198040187358856,0.014030088670551777,-0.05025961622595787,-0.021837638691067696,-0.03450125455856323,-0.011040577664971352,-0.02751139923930168,0.011781450361013412,0.034674014896154404,-0.009051740169525146,0.00009761319233803079,-0.044502779841423035,-0.010358327999711037,0.03898119926452637,0.033722441643476486,-0.0827261209487915,0.020008498802781105,-0.011186781339347363,0.02907169796526432,-0.008082258515059948,-0.022585172206163406,0.08120149374008179,0.003836013376712799,0.014252145774662495,-0.006039830856025219,-0.00443837558850646,-0.029298342764377594,0.04346432536840439,-0.036828797310590744,-0.006816163659095764,-0.004012117628008127,-0.028520720079541206,0.02451952174305916,-0.006974971853196621,0.02663569524884224,-0.00414287531748414,0.02239067293703556,0.03587504103779793,0.014507802203297615,0.03420029580593109,-0.056719258427619934,-0.020119819790124893,0.020322948694229126,0.040634166449308395,0.015206718817353249,0.03382566198706627,0.026175573468208313,0.0018984060734510422,-0.03172663599252701,0.039753880351781845,0.020726792514324188,0.03711548075079918,0.0029401779174804688,-0.0018090837402269244,-0.06848781555891037,-0.002720284042879939,0.06935842335224152,-0.0272755715996027,0.07010966539382935,0.05844435840845108,-0.0059441770426929,0.0052330149337649345,0.037530213594436646,-0.007271730341017246,0.008342358283698559,-0.05475273355841637,0.04000186547636986,0.03018125891685486,-0.004942522384226322,0.007698439061641693,0.08622849732637405,0.005037043709307909,0.0076301987282931805,-0.017979633063077927,0.03229304775595665,0.0006846453179605305,-0.03970867395401001,0.007637491449713707,0.0009184516966342926,-0.029041340574622154,0.01946011558175087,0.030450601130723953,-0.024381963536143303,-0.019000297412276268,0.03957616910338402,0.033152319490909576,0.03256674110889435,-0.09642069786787033,-0.024821551516652107,0.02027192898094654,0.0008688473026268184,-0.009983913972973824,-0.0032046055421233177,0.06362251192331314,-0.003032606327906251,-0.027966659516096115,-0.03946441784501076,-0.038943395018577576,0.01722513884305954,-0.027864208444952965,0.05414210259914398,-0.040917716920375824,-0.011449544690549374,0.035275012254714966,0.023462049663066864,0.043255019932985306,0.058667607605457306,-0.02772379107773304,0.0175084937363863,0.035492926836013794,-0.04531847685575485,0.03460357338190079,-0.008127745240926743,0.007298496551811695,-0.008291228674352169,-0.06780306249856949,0.009612221270799637,0.026349961757659912,0.0005361421499401331,-0.03898739442229271,0.00017968169413506985,-0.11928550899028778,0.04770825803279877,-0.04742129519581795,-0.002129226690158248,0.021727336570620537,0.00901448167860508,-0.0375293605029583,-0.025371737778186798,0.02679687924683094,0.024811113253235817,-0.010680063627660275,-0.047115910798311234,0.030606742948293686,-0.03852174058556557,-0.030345367267727852,-0.015611475333571434,0.005479639861732721,0.004346237517893314,0.01876247301697731,0.014841310679912567,0.002380793448537588,0.003337900387123227,0.06069892272353172,0.0286712609231472,0.022587183862924576,0.013160637579858303,-0.01739605888724327,0.02220066264271736,0.004541385918855667,-0.01690227910876274,0.0038461019285023212,0.009889796376228333,0.10284899175167084,-0.0028334343805909157,-0.005072135478258133,-0.03200989216566086,-0.06687549501657486,-0.056339941918849945,0.02896175906062126,0.015389110893011093,-0.028644321486353874,-0.0031431650277227163,-0.023664971813559532,0.010555509477853775,-0.05661194771528244,0.004456925671547651,0.0724954828619957,-0.004971938207745552,0.0024080928415060043,-0.03949752822518349,-0.04091647267341614,0.052737604826688766,-0.04125272110104561,-0.04552684351801872,-0.026939336210489273,0.00019583899120334536,-0.0059254770167171955,-0.010322482325136662,-0.05900502949953079,0.01876869611442089,-0.0033019313123077154,-0.08105818927288055,0.04455895721912384,0.033291351050138474,0.06839731335639954,0.001736900070682168,-0.04265628382563591,0.01999339833855629,-0.0030531680677086115,-0.04330366104841232,0.02424773760139942,-0.09394360333681107,-0.006813097279518843,0.02323422022163868,0.03615875169634819,0.06490744650363922,0.05350124090909958,-0.012605034746229649,0.056523360311985016,0.05273432284593582,0.0010932998266071081,-0.043190859258174896,0.0042868079617619514,-0.0574624165892601,-0.009344163350760937,0.05121207237243652,0.00970921479165554,-0.019142840057611465,-0.01230149157345295,0.03296186402440071,0.027272483333945274,-0.014381959103047848,0.0215626060962677,0.06580193340778351,-0.12084762752056122,0.03617425635457039,-0.014999200589954853,0.048890285193920135,-0.03296298533678055,-0.03676225244998932,-0.006575930397957563,-0.025885945186018944,0.04809267073869705,-0.002590443240478635,0.05555200204253197,0.017101019620895386,-0.03601709008216858,0.02124660275876522,-0.0014528350438922644,-0.09435707330703735,-0.02041739784181118,0.02462957240641117,0.002778760390356183,0.010278097353875637,-0.021771365776658058,-0.06276534497737885,-0.02622472122311592,0.04354724660515785,-0.08000200241804123,0.0784987285733223,0.06594906747341156,0.029911167919635773,0.006497710943222046,-0.05463342368602753,0.06195470690727234,-0.00621617678552866,-0.03789573907852173,-0.014093203470110893,-0.011458253487944603,-0.00903360452502966,-0.03289114683866501,0.017619824036955833,0.03601441532373428,0.03227972611784935,-0.015598862431943417,0.002500549191609025,-0.036101073026657104,0.06137865409255028,-0.03491313010454178,0.03362409397959709,-0.014293660409748554,-0.009826868772506714,0.017178069800138474,0.00796950701624155,0.03277863189578056,0.011118130758404732,-0.004315937869250774,-0.02565203420817852,-0.03874312341213226,-0.009404675103724003,0.04590359330177307,0.029609205201268196,-0.05037595331668854,-0.012256026268005371,-0.0026055178605020046,0.026431355625391006,0.012414627708494663,0.002872979501262307,0.007674341555684805,-0.032451171427965164,0.022856393828988075,-0.04324910417199135,-0.05176304653286934,-0.02694585919380188,0.005007387138903141,-0.05024057254195213,0.010338819585740566,-0.010430440306663513,-0.03161410987377167,0.017536601051688194,-0.020869238302111626,-0.0022858218289911747,0.04829845577478409,0.021003328263759613,0.03415808826684952,-0.0344056636095047,-0.03031211905181408,0.030295219272375107,0.004426749888807535,0.07322043180465698,-0.006446896120905876,-0.04931528866291046,-0.013449755497276783,0.06322144716978073,0.017379125580191612,-0.03428981825709343,-0.019584929570555687,0.018664490431547165,-0.011291745118796825,-0.045469146221876144,-0.02908879704773426,0.02913864515721798,-0.039380285888910294,0.06343955546617508,0.1012488380074501,-0.009724966250360012,-0.018168864771723747,0.04556581377983093,0.012542840093374252,-0.05413622409105301,-0.014518225565552711,-0.05227084830403328,-0.011283252388238907,0.011093449778854847,0.030418870970606804,0.011859317310154438,0.09243883937597275,0.04786301776766777,-0.0652584657073021,-0.05804072692990303,0.033013392239809036,-0.03758523240685463,-0.040067706257104874,-0.018388831987977028,0.010857487097382545,-0.008954217657446861,0.05711321905255318,-0.0020855905022472143,0.015532995574176311,-0.03304778039455414,-0.013979033567011356,-0.008136391639709473,-0.011163420043885708,-0.002951043890789151,0.0005724777583964169,-0.013427232392132282,-0.022663241252303123,-0.011440777219831944,0.031050190329551697,-0.01623687706887722,-0.006835043430328369,0.05973149836063385,-0.014748100191354752,0.021705785766243935,0.03232688456773758,-0.010965364053845406,0.007095222361385822,-0.005434224847704172,-0.05267085134983063,0.01761758141219616,-0.004872519988566637,-0.016947323456406593,0.02798105776309967,-0.005004230421036482,-0.05469296872615814,0.006637683603912592,-0.04851324111223221,-0.012616965919733047,0.017242100089788437,0.01868593879044056,0.044440966099500656,-0.017087150365114212,-0.02901230938732624,-0.047205571085214615,-0.0061460877768695354,-0.031888239085674286,-0.024841556325554848,0.007770973723381758,0.00006597423634957522,0.023088447749614716,-0.0805492103099823,0.024699445813894272,0.03915881738066673,-0.005173958837985992,-0.020775986835360527,-0.06717625260353088,-0.04354868829250336,0.027429569512605667,-8.49014974282004e-33,-0.04781332612037659,0.008358635008335114,-0.03196285292506218,-0.02398907020688057,-0.06577593833208084,0.013814317993819714,-0.0010350373340770602,-0.018607616424560547,0.021966179832816124,-0.042093679308891296,-0.028101250529289246,-0.022523216903209686,0.03649817779660225,0.03252654895186424,-0.0506938137114048,-0.0004595009086187929,0.006489248014986515,-0.006657341495156288,-0.04262759909033775,0.008575850166380405,-0.039876531809568405,0.041533879935741425,-0.018397962674498558,-0.060796596109867096,-0.014444868080317974,0.021082142367959023,-0.038297973573207855,0.01746969297528267,0.01436229981482029,0.0038936075288802385,-0.016592474654316902,-0.025755692273378372,-0.04240766167640686,-0.03430145978927612,0.0024656967725604773,-0.016157086938619614,-0.02144608646631241,-0.0343162827193737,0.08561346679925919,0.022582216188311577,0.037979837507009506,0.054361868649721146,0.0369979664683342,0.0037289562169462442,0.03231455013155937,-0.03178057447075844,-0.0183396153151989,-0.00821087509393692,-0.012973299250006676,-0.014456157572567463,-0.0026763146743178368,0.014609030447900295,-0.04682927206158638,0.028136257082223892,0.0010444471845403314,0.05023891106247902,0.042548589408397675,0.0320013165473938,-0.04733748733997345,-0.017662163823843002,-0.033223412930965424,-0.026394996792078018,0.029762979596853256,0.00584078673273325,0.029154712334275246,0.048115555197000504,0.034177493304014206,0.028151609003543854,-0.1001090258359909,-0.0021224424708634615,0.02318936586380005,-0.008197800256311893,0.012811671942472458,-0.010043393820524216,-0.01344502903521061,-0.0024993622209876776,-0.00011518743849592283,0.029180999845266342,0.05774965137243271,0.010559634305536747,0.03744788467884064,0.007639220915734768,-0.026825537905097008,-0.015730971470475197,0.03752431273460388,-0.056966956704854965,0.013835454359650612,-0.011518589220941067,0.050197750329971313,0.02424931526184082,-0.013773052953183651,0.08052337914705276,-0.04288649559020996,0.005239298567175865,-0.009808636270463467,0.012642932124435902,0.0572858564555645,0.039119455963373184,-0.020736029371619225,-0.06534533202648163,0.05534961074590683,0.0006182052311487496,-0.10552094876766205,0.006238294765353203,-0.009257582947611809,-0.0027809948660433292,-0.0024967347271740437,0.02782284840941429,-0.05178572237491608,0.002794460393488407,0.024691136553883553,0.022285157814621925,-0.03952644020318985,0.012912863865494728,0.01317870058119297,-0.039377715438604355,0.006254531908780336,-0.03308316692709923,0.02340286783874035,0.04097931087017059,0.03319869935512543,-0.0031512894202023745,-0.025897352024912834,0.033849623054265976,0.021263597533106804,-0.01949540339410305,-0.04247775301337242,-0.05670308321714401,0.056938350200653076,-0.025479119271039963,-0.01257878728210926,-0.018857261165976524,3.5610787563200574e-7,-0.0018310531741008162,0.047414202243089676,-0.05955458804965019,-0.035529252141714096,0.0054646446369588375,-0.024731546640396118,-0.03284059092402458,-0.027838589623570442,0.004409904591739178,-0.022282026708126068,0.03374359384179115,0.02582513354718685,0.06034757196903229,0.03771907836198807,-0.04998638480901718,-0.0483623668551445,-0.04060804471373558,-0.02409716509282589,-0.02071104571223259,0.028963934630155563,-0.04969519004225731,-0.007526469882577658,0.10103669762611389,-0.006672608200460672,0.024893244728446007,0.0015830711927264929,-0.004414328373968601,-0.045428454875946045,0.0047680893912911415,-0.01631332002580166,0.034666892141103745,0.028647013008594513,-0.00794140249490738,-0.017252961173653603,-0.011553671211004257,-0.007558909244835377,-0.006015963852405548,0.029861630871891975,0.030290963128209114,0.14047963917255402,0.019546404480934143,-0.05267651751637459,-0.02890435978770256,-0.05104956030845642,-0.004668998531997204,-0.02051362209022045,-0.04418068379163742,0.017465632408857346,0.0010282847797498107,0.012662959285080433,0.0033666808158159256,0.0009712012833915651,-0.047373853623867035,-0.03257041424512863,0.018574196845293045,-0.02139158360660076,-0.04348393529653549,0.07408100366592407,0.018896959722042084,0.042843516916036606,-0.0006536726141348481,-0.0044605606235563755,-0.0048617832362651825,0.03186168149113655,0.006144658196717501,-0.03558349609375,-0.04522191733121872,4.043597251895491e-34,0.021343644708395004,-0.024406393989920616,0.03012877330183983,-0.03228466585278511,0.026003744453191757,-0.02538011595606804,0.04030069336295128,-0.03876478970050812,-0.0014226437779143453,-0.03540261462330818,-0.023389238864183426]'
SET
  @HasCustomProps_85aae538 = 0
SET
  @HasCustomEvents_85aae538 = 1
SET
  @RequiresData_85aae538 = 1
SET
  @DependencyCount_85aae538 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_85aae538 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_85aae538 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_85aae538 = 0
SET
  @ID_85aae538 = 'AB3DF794-99C3-4A3E-8C84-EF3E5175A568'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_85aae538,
  @Name = @Name_85aae538,
  @Version = @Version_85aae538,
  @VersionSequence = @VersionSequence_85aae538,
  @Title = @Title_85aae538,
  @Description = @Description_85aae538,
  @Type = @Type_85aae538,
  @Status = @Status_85aae538,
  @DeveloperName = @DeveloperName_85aae538,
  @DeveloperEmail = @DeveloperEmail_85aae538,
  @DeveloperOrganization = @DeveloperOrganization_85aae538,
  @SourceRegistryID = @SourceRegistryID_85aae538,
  @ReplicatedAt = @ReplicatedAt_85aae538,
  @LastSyncedAt = @LastSyncedAt_85aae538,
  @Specification = @Specification_85aae538,
  @FunctionalRequirements = @FunctionalRequirements_85aae538,
  @TechnicalDesign = @TechnicalDesign_85aae538,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_85aae538,
  @TechnicalDesignVector = @TechnicalDesignVector_85aae538,
  @HasCustomProps = @HasCustomProps_85aae538,
  @HasCustomEvents = @HasCustomEvents_85aae538,
  @RequiresData = @RequiresData_85aae538,
  @DependencyCount = @DependencyCount_85aae538,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_85aae538,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_85aae538,
  @HasRequiredCustomProps = @HasRequiredCustomProps_85aae538,
  @ID = @ID_85aae538;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_5440e6bf NVARCHAR(MAX),
@Name_5440e6bf NVARCHAR(500),
@Version_5440e6bf NVARCHAR(50),
@VersionSequence_5440e6bf INT,
@Title_5440e6bf NVARCHAR(1000),
@Description_5440e6bf NVARCHAR(MAX),
@Type_5440e6bf NVARCHAR(255),
@Status_5440e6bf NVARCHAR(50),
@DeveloperName_5440e6bf NVARCHAR(255),
@DeveloperEmail_5440e6bf NVARCHAR(255),
@DeveloperOrganization_5440e6bf NVARCHAR(255),
@SourceRegistryID_5440e6bf UNIQUEIDENTIFIER,
@ReplicatedAt_5440e6bf DATETIMEOFFSET,
@LastSyncedAt_5440e6bf DATETIMEOFFSET,
@Specification_5440e6bf NVARCHAR(MAX),
@FunctionalRequirements_5440e6bf NVARCHAR(MAX),
@TechnicalDesign_5440e6bf NVARCHAR(MAX),
@FunctionalRequirementsVector_5440e6bf NVARCHAR(MAX),
@TechnicalDesignVector_5440e6bf NVARCHAR(MAX),
@HasCustomProps_5440e6bf BIT,
@HasCustomEvents_5440e6bf BIT,
@RequiresData_5440e6bf BIT,
@DependencyCount_5440e6bf INT,
@TechnicalDesignVectorEmbeddingModelID_5440e6bf NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_5440e6bf NVARCHAR(MAX),
@HasRequiredCustomProps_5440e6bf BIT,
@ID_5440e6bf UNIQUEIDENTIFIER
SET
  @Namespace_5440e6bf = N'CRM/Dashboards'
SET
  @Name_5440e6bf = N'SalesPipelineDashboard'
SET
  @Version_5440e6bf = N'1.0.0'
SET
  @VersionSequence_5440e6bf = 1
SET
  @Title_5440e6bf = N'Sales Pipeline Dashboard'
SET
  @Description_5440e6bf = N'Comprehensive dashboard showing pipeline health, velocity metrics, and team performance with interactive charts'
SET
  @Type_5440e6bf = N'Dashboard'
SET
  @Status_5440e6bf = N'Published'
SET
  @Specification_5440e6bf = N'{"name":"SalesPipelineDashboard","description":"Comprehensive sales pipeline dashboard with metrics, visualizations, and drill-down capabilities","category":"Dashboard","type":"dashboard","location":"embedded","code":"function SalesPipelineDashboard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract AIInsightsPanel from components\n  const AIInsightsPanel = components?.AIInsightsPanel;\n  \n  if (!AIInsightsPanel) {\n    console.warn(''AIInsightsPanel component not available'');\n  }\n\n  const [deals, setDeals] = useState([]);\n  const [activities, setActivities] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n  const [timeFilter, setTimeFilter] = useState(savedUserSettings?.timeFilter || ''quarter'');\n  const [startDate, setStartDate] = useState(savedUserSettings?.startDate || null);\n  const [endDate, setEndDate] = useState(savedUserSettings?.endDate || null);\n  const [drillDownData, setDrillDownData] = useState(null);\n  const [aiInsights, setAiInsights] = useState(null);\n  const [loadingInsights, setLoadingInsights] = useState(false);\n  const [insightsError, setInsightsError] = useState(null);\n  const chartRef = useRef(null);\n  const saveSettingsTimeoutRef = useRef(null);\n\n  // Debounced save settings function\n  const debouncedSaveSettings = useCallback((newSettings) => {\n    if (saveSettingsTimeoutRef.current) {\n      clearTimeout(saveSettingsTimeoutRef.current);\n    }\n    saveSettingsTimeoutRef.current = setTimeout(() => {\n      if (onSaveUserSettings) {\n        onSaveUserSettings(newSettings);\n      }\n    }, 1000); // Save after 1 second of no changes\n  }, [onSaveUserSettings]);\n\n  const stages = [''Lead'', ''Qualified'', ''Proposal'', ''Negotiation'', ''Closed Won'', ''Closed Lost''];\n  const stageColors = {\n    ''Lead'': ''#3B82F6'',\n    ''Qualified'': ''#6366F1'',\n    ''Proposal'': ''#8B5CF6'',\n    ''Negotiation'': ''#A855F7'',\n    ''Closed Won'': ''#10B981'',\n    ''Closed Lost'': ''#EF4444''\n  };\n\n  // Load sub-components from registry\n  const PipelineMetricsCards = components[''PipelineMetricsCards''];\n  const PipelineKanban = components[''PipelineKanban''];\n  const DealCards = components[''DealCards''];\n  const DealList = components[''DealList''];\n  const DrillDownPanel = components[''DrillDownPanel''];\n\n  useEffect(() => {\n    loadData();\n  }, [timeFilter, startDate, endDate]);\n\n  const getDateFilter = () => {\n    if (startDate && endDate) {\n      return `CloseDate >= ''$' + '{startDate}'' AND CloseDate <= ''$' + '{endDate}''`;\n    }\n    \n    const now = dayjs();\n    let filterStart;\n    \n    switch (timeFilter) {\n      case ''month'':\n        filterStart = now.subtract(1, ''month'');\n        break;\n      case ''quarter'':\n        filterStart = now.subtract(3, ''month'');\n        break;\n      case ''year'':\n        filterStart = now.subtract(1, ''year'');\n        break;\n      case ''all'':\n        return '''';\n      default:\n        return '''';\n    }\n    \n    return `CloseDate >= ''$' + '{filterStart.format(''YYYY-MM-DD'')}''`;\n  };\n\n  const handleDateRangeChange = (start, end) => {\n    setStartDate(start);\n    setEndDate(end);\n    setTimeFilter(''custom'');\n    debouncedSaveSettings({ \n      ...savedUserSettings, \n      startDate: start, \n      endDate: end,\n      timeFilter: ''custom''\n    });\n  };\n  \n  const handlePresetChange = (preset) => {\n    setTimeFilter(preset);\n    setStartDate(null);\n    setEndDate(null);\n    debouncedSaveSettings({ \n      ...savedUserSettings, \n      timeFilter: preset,\n      startDate: null,\n      endDate: null\n    });\n  };\n\n  const loadData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    const dateFilter = getDateFilter();\n    \n    try {\n      const [dealsResult, activitiesResult] = await Promise.all([\n        utilities.rv.RunView({\n          EntityName: ''Deals'',\n          ExtraFilter: dateFilter,\n          OrderBy: ''CloseDate DESC''\n        }),\n        utilities.rv.RunView({\n          EntityName: ''Activities'',\n          ExtraFilter: `__mj_CreatedAt >= ''$' + '{dayjs().subtract(30, ''day'').format(''YYYY-MM-DD'')}''`,\n          OrderBy: ''__mj_CreatedAt DESC'',\n          MaxRows: 100\n        })\n      ]);\n\n      if (dealsResult.Success) {\n        setDeals(dealsResult.Results || []);\n      }\n      if (activitiesResult.Success) {\n        setActivities(activitiesResult.Results || []);\n      }\n      \n      if (!dealsResult.Success && !activitiesResult.Success) {\n        setError(''Failed to load dashboard data'');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateMetrics = () => {\n    const totalValue = deals.reduce((sum, d) => sum + (d.Amount || 0), 0);\n    const wonDeals = deals.filter(d => d.Stage === ''Closed Won'');\n    const lostDeals = deals.filter(d => d.Stage === ''Closed Lost'');\n    const activeDeals = deals.filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage));\n    \n    const avgDealSize = deals.length > 0 ? totalValue / deals.length : 0;\n    const winRate = deals.length > 0 ? (wonDeals.length / (wonDeals.length + lostDeals.length) * 100) : 0;\n    const avgCycleTime = activeDeals.length > 0 ?\n      activeDeals.reduce((sum, d) => {\n        const created = new Date(d.CreatedAt || d.__mj_CreatedAt);\n        const now = new Date();\n        return sum + Math.floor((now - created) / (1000 * 60 * 60 * 24));\n      }, 0) / activeDeals.length : 0;\n    \n    return {\n      totalValue,\n      avgDealSize,\n      winRate,\n      avgCycleTime,\n      activeCount: activeDeals.length,\n      wonCount: wonDeals.length,\n      lostCount: lostDeals.length\n    };\n  };\n\n  const generateAIInsights = async () => {\n    console.log(''🎯 generateAIInsights called'');\n    console.log(''📦 utilities object:'', utilities);\n    console.log(''🤖 utilities.ai:'', utilities?.ai);\n    console.log(''🔧 utilities.ai.ExecutePrompt type:'', typeof utilities?.ai?.ExecutePrompt);\n    \n    if (!deals || deals.length === 0) {\n      setInsightsError(''No data available for analysis'');\n      return;\n    }\n    \n    if (!utilities?.ai?.ExecutePrompt) {\n      console.error(''❌ utilities.ai.ExecutePrompt is not available'');\n      setInsightsError(''AI service not available'');\n      return;\n    }\n\n    setLoadingInsights(true);\n    setInsightsError(null);\n    \n    try {\n      const metrics = calculateMetrics();\n      const activeDeals = deals.filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage));\n      \n      // Calculate stage distribution and conversion rates\n      const stageDistribution = {};\n      stages.forEach(stage => {\n        stageDistribution[stage] = deals.filter(d => d.Stage === stage).length;\n      });\n      \n      // Calculate conversion rates between stages\n      const conversionRates = {};\n      for (let i = 0; i < stages.length - 2; i++) { // Exclude closed stages\n        const currentStage = stages[i];\n        const nextStage = stages[i + 1];\n        const currentCount = stageDistribution[currentStage] || 0;\n        const nextCount = stageDistribution[nextStage] || 0;\n        const totalDownstream = stages.slice(i + 1).reduce((sum, s) => sum + (stageDistribution[s] || 0), 0);\n        \n        if (currentCount > 0) {\n          conversionRates[`$' + '{currentStage} → $' + '{nextStage}`] = \n            ((totalDownstream / (currentCount + totalDownstream)) * 100).toFixed(1);\n        }\n      }\n      \n      // Calculate velocity metrics\n      const dealsByAge = activeDeals.map(d => {\n        const created = new Date(d.CreatedAt || d.__mj_CreatedAt);\n        const now = new Date();\n        const daysOld = Math.floor((now - created) / (1000 * 60 * 60 * 24));\n        return { stage: d.Stage, daysOld, amount: d.Amount || 0 };\n      });\n      \n      const stuckDeals = dealsByAge.filter(d => d.daysOld > metrics.avgCycleTime * 1.5);\n      \n      // Prepare data snapshot for AI\n      const dataSnapshot = {\n        summary: {\n          totalDeals: deals.length,\n          totalPipelineValue: metrics.totalValue,\n          averageDealSize: metrics.avgDealSize,\n          winRate: metrics.winRate.toFixed(1),\n          averageCycleTime: Math.round(metrics.avgCycleTime),\n          activeDeals: metrics.activeCount,\n          wonDeals: metrics.wonCount,\n          lostDeals: metrics.lostCount\n        },\n        stageDistribution,\n        conversionRates,\n        bottlenecks: {\n          stuckDealsCount: stuckDeals.length,\n          stuckDealsValue: stuckDeals.reduce((sum, d) => sum + d.amount, 0),\n          averageStuckDays: stuckDeals.length > 0 ? \n            Math.round(stuckDeals.reduce((sum, d) => sum + d.daysOld, 0) / stuckDeals.length) : 0\n        },\n        recentTrends: {\n          dealsClosedThisMonth: deals.filter(d => {\n            const closeDate = new Date(d.CloseDate);\n            const now = new Date();\n            return closeDate.getMonth() === now.getMonth() && \n                   closeDate.getFullYear() === now.getFullYear();\n          }).length,\n          timeFrame: timeFilter\n        }\n      };\n      \n      // Call AI for insights with formatted data\n      const prompt = `Analyze this sales pipeline data and provide actionable insights:\n\n## Pipeline Summary\n- **Total Deals:** $' + '{dataSnapshot.summary.totalDeals}\n- **Pipeline Value:** $$' + '{dataSnapshot.summary.totalPipelineValue.toLocaleString()}\n- **Average Deal Size:** $$' + '{dataSnapshot.summary.averageDealSize.toLocaleString()}\n- **Win Rate:** $' + '{dataSnapshot.summary.winRate}%\n- **Average Cycle Time:** $' + '{dataSnapshot.summary.averageCycleTime} days\n- **Active Deals:** $' + '{dataSnapshot.summary.activeDeals}\n- **Won Deals:** $' + '{dataSnapshot.summary.wonDeals}\n- **Lost Deals:** $' + '{dataSnapshot.summary.lostDeals}\n\n## Stage Distribution\n$' + '{Object.entries(stageDistribution).map(([stage, count]) => `- **$' + '{stage}:** $' + '{count} deals`).join(''\\n'')}\n\n## Conversion Rates\n$' + '{Object.entries(conversionRates).map(([transition, rate]) => `- $' + '{transition}: $' + '{rate}%`).join(''\\n'')}\n\n## Bottlenecks\n- **Stuck Deals:** $' + '{dataSnapshot.bottlenecks.stuckDealsCount} deals\n- **Value at Risk:** $$' + '{dataSnapshot.bottlenecks.stuckDealsValue.toLocaleString()}\n- **Average Days Stuck:** $' + '{dataSnapshot.bottlenecks.averageStuckDays} days\n\n## Recent Activity\n- **Deals Closed This Month:** $' + '{dataSnapshot.recentTrends.dealsClosedThisMonth}\n- **Time Frame Analyzed:** $' + '{dataSnapshot.recentTrends.timeFrame}\n\nBased on this specific data, please provide:\n1. **Key Performance Highlights** - What''s working well based on these numbers?\n2. **Pipeline Health Assessment** - Is this pipeline balanced and healthy?\n3. **Bottleneck Analysis** - Where specifically are the $' + '{dataSnapshot.bottlenecks.stuckDealsCount} stuck deals concentrated?\n4. **Conversion Rate Analysis** - Which specific transitions need improvement?\n5. **3 Specific Recommendations** - Based on the data, what actions would improve velocity and win rate?\n6. **Risk Indicators** - What specific risks do you see in these numbers?\n\nUse markdown formatting with headers (##), bullet points, and **bold** text. Reference the actual numbers in your analysis.`;\n\n      console.log(''🔍 Calling utilities.ai.ExecutePrompt with:'', {\n        systemPrompt: ''You are a sales analytics expert...'',\n        messageLength: prompt.length,\n        modelPower: ''medium'',\n        fullPrompt: prompt.substring(0, 500) + ''...'' // Show first 500 chars\n      });\n      \n      // Use the correct parameter structure with systemPrompt and better models\n      const aiParams = {\n        systemPrompt: ''You are a sales analytics expert. Analyze sales pipeline data and provide clear, actionable business insights formatted with sections and bullet points. Focus on strategic recommendations, not technical implementation.'',\n        messages: prompt,  // Just pass the prompt as messages\n        preferredModels: [''GPT-OSS-120B'', ''Qwen3 32B''],  // Use more capable models\n        modelPower: ''high''  // Use higher power for better reasoning\n      };\n      \n      console.log(''📝 AI params with systemPrompt:'', {\n        hasSystemPrompt: !!aiParams.systemPrompt,\n        messagesLength: aiParams.messages?.length,\n        modelPower: aiParams.modelPower\n      });\n      \n      const result = await utilities.ai.ExecutePrompt(aiParams);\n      \n      console.log(''📊 ExecutePrompt result:'', {\n        fullResult: result,\n        hasSuccess: ''Success'' in result,\n        successValue: result?.Success,\n        hasResponse: ''Response'' in result,\n        responseType: typeof result?.Response,\n        responseLength: result?.Response?.length,\n        errorMessage: result?.ErrorMessage,\n        allKeys: Object.keys(result || {}),\n        // Check for alternative property names\n        hasSuccess2: ''success'' in result,\n        success: result?.success,\n        hasResult: ''result'' in result,\n        result: result?.result,\n        hasResponse2: ''response'' in result,\n        response: result?.response,\n        hasError: ''error'' in result,\n        error: result?.error,\n        hasMessage: ''message'' in result,\n        message: result?.message\n      });\n      \n      if (result.success && result.result) {\n        console.log(''✅ Setting AI insights to:'', result.result);\n        setAiInsights(result.result);\n      } else {\n        const error = result.error || result.message || ''Failed to generate insights'';\n        console.log(''❌ Setting error:'', error, ''Full result:'', result);\n        setInsightsError(error);\n      }\n    } catch (err) {\n      console.error(''🚨 Error in generateAIInsights:'', {\n        error: err,\n        message: err.message,\n        stack: err.stack,\n        type: err.constructor.name\n      });\n      setInsightsError(`Error generating insights: $' + '{err.message}`);\n    } finally {\n      setLoadingInsights(false);\n    }\n  };\n\n\n  const handleDrillDown = (title, dealList, type, metadata) => {\n    setDrillDownData({ title, deals: dealList, type, metadata });\n    setIsPanelOpen(true);\n  };\n\n  useEffect(() => {\n    if (!loading && deals.length > 0) {\n      renderPipelineChart();\n    }\n  }, [deals, loading]);\n\n  const renderPipelineChart = () => {\n    if (!chartRef.current) return;\n    \n    const stageData = stages.map(stage => ({\n      name: stage,\n      count: deals.filter(d => d.Stage === stage).length,\n      value: deals.filter(d => d.Stage === stage).reduce((sum, d) => sum + (d.Amount || 0), 0)\n    }));\n\n    const options = {\n      series: [{\n        name: ''Deal Count'',\n        data: stageData.map(s => s.count)\n      }, {\n        name: ''Total Value'',\n        data: stageData.map(s => s.value / 1000) // In thousands\n      }],\n      chart: {\n        type: ''bar'',\n        height: 300,\n        toolbar: { show: false }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ''55%''\n        }\n      },\n      colors: [''#3B82F6'', ''#10B981''],\n      xaxis: {\n        categories: stages\n      },\n      yaxis: [{\n        title: { text: ''Number of Deals'' }\n      }, {\n        opposite: true,\n        title: { text: ''Value ($K)'' }\n      }],\n      tooltip: {\n        y: [{\n          formatter: (val) => `$' + '{val} deals`\n        }, {\n          formatter: (val) => `$$' + '{val.toFixed(0)}K`\n        }]\n      },\n      legend: {\n        position: ''top''\n      }\n    };\n\n    if (chartRef.current._chart) {\n      chartRef.current._chart.destroy();\n    }\n    chartRef.current._chart = new ApexCharts(chartRef.current, options);\n    chartRef.current._chart.render();\n  };\n\n  const metrics = calculateMetrics();\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading pipeline dashboard...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''20px'', backgroundColor: ''#FEE2E2'', borderRadius: ''8px'', margin: ''20px'' }}>\n        <div style={{ color: ''#991B1B'', fontWeight: ''bold'' }}>Error loading data</div>\n        <div style={{ color: ''#DC2626'', marginTop: ''8px'' }}>{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: ''20px'', backgroundColor: ''#F3F4F6'', minHeight: ''100%'' }}>\n      <style>{`\n        @keyframes spin {\n          from { transform: rotate(0deg); }\n          to { transform: rotate(360deg); }\n        }\n        \n        /* Markdown content styling */\n        .markdown-insights h1 { font-size: 20px; font-weight: 600; color: #111827; margin: 16px 0 12px 0; }\n        .markdown-insights h2 { font-size: 18px; font-weight: 600; color: #1F2937; margin: 14px 0 10px 0; }\n        .markdown-insights h3 { font-size: 16px; font-weight: 600; color: #374151; margin: 12px 0 8px 0; }\n        .markdown-insights h4 { font-size: 14px; font-weight: 600; color: #4B5563; margin: 10px 0 6px 0; }\n        .markdown-insights p { margin: 8px 0; color: #374151; line-height: 1.6; }\n        .markdown-insights ul, .markdown-insights ol { margin: 8px 0; padding-left: 24px; color: #374151; }\n        .markdown-insights li { margin: 4px 0; line-height: 1.5; }\n        .markdown-insights strong { font-weight: 600; color: #1F2937; }\n        .markdown-insights em { font-style: italic; }\n        .markdown-insights code { background: #F3F4F6; padding: 2px 4px; border-radius: 3px; font-family: monospace; font-size: 0.9em; }\n        .markdown-insights blockquote { border-left: 3px solid #6366F1; padding-left: 12px; margin: 12px 0; color: #4B5563; }\n        .markdown-insights hr { border: none; border-top: 1px solid #E5E7EB; margin: 16px 0; }\n        .markdown-insights a { color: #6366F1; text-decoration: none; }\n        .markdown-insights a:hover { text-decoration: underline; }\n      `}</style>\n      <div style={{ marginBottom: ''20px'' }}>\n        <h2 style={{ margin: ''0 0 20px 0'', fontSize: ''24px'', fontWeight: ''bold'' }}>\n          Sales Pipeline Dashboard\n        </h2>\n        \n        <div style={{ display: ''flex'', gap: ''8px'', alignItems: ''center'', flexWrap: ''wrap'', marginBottom: ''20px'' }}>\n          <select\n            value={timeFilter}\n            onChange={(e) => handlePresetChange(e.target.value)}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px''\n            }}\n          >\n            <option value=\"month\">Last Month</option>\n            <option value=\"quarter\">Last Quarter</option>\n            <option value=\"year\">Last Year</option>\n            <option value=\"all\">All Time</option>\n            <option value=\"custom\">Custom Range</option>\n          </select>\n          \n          {timeFilter === ''custom'' && (\n            <>\n              <input\n                type=\"date\"\n                value={startDate || ''''}\n                onChange={(e) => handleDateRangeChange(e.target.value, endDate)}\n                style={{\n                  padding: ''6px 12px'',\n                  border: ''1px solid #D1D5DB'',\n                  borderRadius: ''6px''\n                }}\n              />\n              <span>to</span>\n              <input\n                type=\"date\"\n                value={endDate || ''''}\n                onChange={(e) => handleDateRangeChange(startDate, e.target.value)}\n                style={{\n                  padding: ''6px 12px'',\n                  border: ''1px solid #D1D5DB'',\n                  borderRadius: ''6px''\n                }}\n              />\n            </>\n          )}\n          \n          <div style={{ marginLeft: ''auto'' }}>\n            <button\n              onClick={generateAIInsights}\n              disabled={loadingInsights || !deals.length}\n              style={{\n                padding: ''8px 16px'',\n                backgroundColor: ''#6366F1'',\n                color: ''white'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                fontSize: ''14px'',\n                fontWeight: ''500'',\n                cursor: loadingInsights || !deals.length ? ''not-allowed'' : ''pointer'',\n                opacity: loadingInsights || !deals.length ? 0.5 : 1,\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: ''8px''\n              }}\n            >\n              {loadingInsights ? (\n                <>\n                  <span style={{ display: ''inline-block'', animation: ''spin 1s linear infinite'' }}>⟳</span>\n                  Analyzing...\n                </>\n              ) : (\n                <>\n                  <span>✨</span>\n                  Get AI Insights\n                </>\n              )}\n            </button>\n          </div>\n        </div>\n        \n        {/* AI Insights Panel */}\n        <AIInsightsPanel\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n          savedUserSettings={savedUserSettings?.aiInsights}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            aiInsights: settings\n          })}\n          insights={aiInsights}\n          loading={loadingInsights}\n          error={insightsError}\n          onGenerate={generateAIInsights}\n          title=\"Sales Pipeline Insights\"\n          icon=\"fa-wand-magic-sparkles\"\n          iconColor={styles?.colors?.primary || ''#8B5CF6''}\n          position=\"top\"\n          onClose={() => {\n            setAiInsights(null);\n            setInsightsError(null);\n          }}\n        />\n        \n        <PipelineMetricsCards\n          metrics={metrics}\n          deals={deals}\n          onCardClick={handleDrillDown}\n        />\n        \n        <PipelineKanban\n          deals={deals}\n          stages={stages}\n          stageColors={stageColors}\n          onStageClick={handleDrillDown}\n        />\n        \n        <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''16px'', marginBottom: ''20px'', border: ''1px solid #E5E7EB'' }}>\n          <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''18px'' }}>Pipeline Overview</h3>\n          <div ref={chartRef} />\n        </div>\n        \n        <DrillDownPanel\n          isOpen={isPanelOpen}\n          drillDownData={drillDownData}\n          stageColors={stageColors}\n          onClose={() => {\n            setIsPanelOpen(false);\n            setDrillDownData(null);\n          }}\n          onOpenDeal={(entityName, primaryKey) => callbacks?.OpenEntityRecord && callbacks.OpenEntityRecord(entityName, primaryKey)}\n          components={components}\n        />\n      </div>\n    </div>\n  );\n}","properties":[{"name":"utilities","type":"object","description":"MemberJunction utilities for data access"},{"name":"styles","type":"object","description":"Style utilities and theme configuration"},{"name":"components","type":"object","description":"Registry of available child components"},{"name":"callbacks","type":"object","description":"Event callbacks including OpenEntityRecord"},{"name":"savedUserSettings","type":"object","description":"Persisted user preferences"},{"name":"onSaveUserSettings","type":"function","description":"Callback to persist user settings"}],"dependencies":[{"name":"PipelineMetricsCards","location":"embedded","code":"function PipelineMetricsCards({ metrics, deals, onCardClick }) {\n  const formatCurrency = (amount) => {\n    if (amount >= 1000000) return `$$' + '{(amount / 1000000).toFixed(1)}M`;\n    if (amount >= 1000) return `$$' + '{(amount / 1000).toFixed(0)}K`;\n    return `$$' + '{amount.toFixed(0)}`;\n  };\n\n  return (\n    <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'', gap: ''12px'', marginBottom: ''20px'' }}>\n      <div \n        style={{ \n          padding: ''16px'', \n          backgroundColor: ''white'', \n          borderRadius: ''8px'', \n          border: ''1px solid #E5E7EB'',\n          cursor: ''pointer'',\n          transition: ''transform 0.2s, box-shadow 0.2s''\n        }}\n        onClick={() => onCardClick(''All Pipeline Deals'', deals, ''all'', null)}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.transform = ''translateY(-2px)'';\n          e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)'';\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.transform = ''translateY(0)'';\n          e.currentTarget.style.boxShadow = ''none'';\n        }}\n      >\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Pipeline Value</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {formatCurrency(metrics.totalValue)}\n        </div>\n      </div>\n      \n      <div \n        style={{ \n          padding: ''16px'', \n          backgroundColor: ''white'', \n          borderRadius: ''8px'', \n          border: ''1px solid #E5E7EB'',\n          cursor: ''pointer'',\n          transition: ''transform 0.2s, box-shadow 0.2s''\n        }}\n        onClick={() => {\n          const activeDeals = deals.filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage));\n          onCardClick(''Active Deals'', activeDeals, ''active'', null);\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.transform = ''translateY(-2px)'';\n          e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)'';\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.transform = ''translateY(0)'';\n          e.currentTarget.style.boxShadow = ''none'';\n        }}\n      >\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Active Deals</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {metrics.activeCount}\n        </div>\n      </div>\n      \n      <div \n        style={{ \n          padding: ''16px'', \n          backgroundColor: ''white'', \n          borderRadius: ''8px'', \n          border: ''1px solid #E5E7EB'',\n          cursor: ''pointer'',\n          transition: ''transform 0.2s, box-shadow 0.2s''\n        }}\n        onClick={() => {\n          const wonDeals = deals.filter(d => d.Stage === ''Closed Won'');\n          onCardClick(''Won Deals'', wonDeals, ''won'', null);\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.transform = ''translateY(-2px)'';\n          e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)'';\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.transform = ''translateY(0)'';\n          e.currentTarget.style.boxShadow = ''none'';\n        }}\n      >\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Win Rate</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#10B981'' }}>\n          {metrics.winRate.toFixed(0)}%\n        </div>\n      </div>\n      \n      <div style={{ padding: ''16px'', backgroundColor: ''white'', borderRadius: ''8px'', border: ''1px solid #E5E7EB'' }}>\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Avg Deal Size</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {formatCurrency(metrics.avgDealSize)}\n        </div>\n      </div>\n      \n      <div style={{ padding: ''16px'', backgroundColor: ''white'', borderRadius: ''8px'', border: ''1px solid #E5E7EB'' }}>\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Avg Cycle</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {metrics.avgCycleTime.toFixed(0)} days\n        </div>\n      </div>\n    </div>\n  );\n}","description":"Displays key pipeline metrics in a grid of interactive cards","category":"Metrics","type":"metrics","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"],"permissions":["read"]}]},"properties":[{"name":"metrics","type":"object","description":"Object containing totalValue, activeCount, winRate, avgDealSize, avgCycleTime","required":true},{"name":"deals","type":"array","description":"Array of deal objects","required":true},{"name":"onCardClick","type":"function","description":"Callback when a metric card is clicked","required":true}],"events":[{"name":"onMetricClick","description":"Fired when a metric card is clicked","parameters":[{"name":"metricType","type":"string","description":"Type of metric clicked (pipeline, active, won)"},{"name":"deals","type":"array","description":"Filtered deals for the metric"}]}],"usageExample":"```javascript\n<PipelineMetricsCards \n  metrics={calculatedMetrics}\n  deals={allDeals}\n  onCardClick={(title, deals, type) => handleDrillDown(title, deals, type)}\n/>\n```","functionalRequirements":"- Display 5 key metrics: Pipeline Value, Active Deals, Win Rate, Avg Deal Size, Avg Cycle Time\n- Make Pipeline Value, Active Deals, and Win Rate cards clickable\n- Format currency values appropriately (K/M notation)\n- Show hover effects on clickable cards\n- Pass filtered deals to callback on click","technicalDesign":"Component renders a responsive grid of metric cards. Uses formatCurrency helper for value formatting. Implements hover states with transform and shadow effects. Filters deals based on metric type before passing to callback."},{"name":"PipelineKanban","location":"embedded","code":"function PipelineKanban({ deals, stages, stageColors, onStageClick }) {\n  const formatCurrency = (amount) => {\n    if (amount >= 1000000) return `$$' + '{(amount / 1000000).toFixed(1)}M`;\n    if (amount >= 1000) return `$$' + '{(amount / 1000).toFixed(0)}K`;\n    return `$$' + '{amount.toFixed(0)}`;\n  };\n\n  return (\n    <div style={{ \n      display: ''grid'', \n      gridTemplateColumns: `repeat($' + '{stages.length}, 1fr)`,\n      gap: ''12px'',\n      marginBottom: ''20px''\n    }}>\n      {stages.map(stage => {\n        const stageDeals = deals.filter(d => d.Stage === stage);\n        const stageValue = stageDeals.reduce((sum, d) => sum + (d.Amount || 0), 0);\n        \n        return (\n          <div\n            key={stage}\n            onClick={() => onStageClick(`$' + '{stage} Deals`, stageDeals, ''stage'', stage)}\n            style={{\n              backgroundColor: ''#F9FAFB'',\n              borderRadius: ''8px'',\n              padding: ''12px'',\n              borderTop: `3px solid $' + '{stageColors[stage]}`,\n              cursor: ''pointer'',\n              transition: ''transform 0.2s, box-shadow 0.2s''\n            }}\n            onMouseEnter={(e) => {\n              e.currentTarget.style.transform = ''translateY(-2px)'';\n              e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)'';\n            }}\n            onMouseLeave={(e) => {\n              e.currentTarget.style.transform = ''translateY(0)'';\n              e.currentTarget.style.boxShadow = ''none'';\n            }}\n          >\n            <div style={{ fontSize: ''14px'', fontWeight: ''bold'', marginBottom: ''4px'' }}>\n              {stage}\n            </div>\n            <div style={{ fontSize: ''20px'', fontWeight: ''bold'', color: stageColors[stage] }}>\n              {stageDeals.length}\n            </div>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n              {formatCurrency(stageValue)}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}","description":"Visual representation of deals across pipeline stages in a kanban board layout","category":"Pipeline","type":"kanban","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"],"permissions":["read"]}]},"properties":[{"name":"deals","type":"array","description":"Array of deal objects to display","required":true},{"name":"stages","type":"array","description":"Array of pipeline stage names","required":true},{"name":"stageColors","type":"object","description":"Object mapping stage names to colors","required":true},{"name":"onStageClick","type":"function","description":"Callback when a stage card is clicked","required":true}],"events":[{"name":"onStageSelect","description":"Fired when a pipeline stage is clicked","parameters":[{"name":"stage","type":"string","description":"Name of the stage clicked"},{"name":"stageDeals","type":"array","description":"Deals in the selected stage"}]}],"usageExample":"```javascript\n<PipelineKanban\n  deals={deals}\n  stages={stages}\n  stageColors={stageColors}\n  onStageClick={(title, deals, type, stage) => handleDrillDown(title, deals, type, stage)}\n/>\n```","functionalRequirements":"- Display all pipeline stages in a horizontal grid\n- Show deal count and total value for each stage\n- Use stage-specific colors for visual distinction\n- Make each stage card clickable for drill-down\n- Show hover effects on stage cards","technicalDesign":"Renders a responsive grid of stage cards. Filters deals by stage and calculates metrics. Uses color-coded borders and hover animations. Formats currency values using helper function."},{"name":"DealCards","location":"embedded","code":"function DealCards({ deals, stageColors = {}, onDealClick, onOpenClick }) {\n  return (\n    <div style={{ display: ''grid'', gap: ''12px'' }}>\n      {deals.map((deal, index) => (\n        <div\n          key={deal.ID || index}\n          style={{\n            padding: ''16px'',\n            backgroundColor: ''#F9FAFB'',\n            borderRadius: ''8px'',\n            border: ''1px solid #E5E7EB'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s''\n          }}\n          onClick={() => onDealClick && onDealClick(deal)}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.backgroundColor = ''#F3F4F6'';\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.backgroundColor = ''#F9FAFB'';\n            e.currentTarget.style.transform = ''translateY(0)'';\n          }}\n        >\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', marginBottom: ''8px'' }}>\n            <div style={{ fontWeight: ''bold'', flex: 1 }}>{deal.DealName}</div>\n            <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n              <div style={{ fontWeight: ''bold'', color: ''#059669'' }}>\n                $' + '{((deal.Amount || 0) / 1000).toFixed(0)}K\n              </div>\n              {onOpenClick && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenClick(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }]);\n                  }}\n                  style={{\n                    background: ''none'',\n                    border: ''none'',\n                    color: ''#6B7280'',\n                    cursor: ''pointer'',\n                    padding: ''2px'',\n                    fontSize: ''14px''\n                  }}\n                  title=\"Open in Explorer\"\n                >\n                  <i className=\"fa-solid fa-up-right-from-square\"></i>\n                </button>\n              )}\n            </div>\n          </div>\n          <div style={{ fontSize: ''14px'', color: ''#6B7280'', marginBottom: ''4px'' }}>\n            {deal.AccountName || ''No Account''}\n          </div>\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n            <span>Close: {deal.CloseDate ? new Date(deal.CloseDate).toLocaleDateString() : ''TBD''}</span>\n            <span>{deal.Probability || 0}% probability</span>\n          </div>\n          {deal.Stage && stageColors[deal.Stage] && (\n            <div style={{ \n              marginTop: ''8px'',\n              padding: ''4px 8px'',\n              backgroundColor: stageColors[deal.Stage] || ''#6B7280'',\n              color: ''white'',\n              borderRadius: ''4px'',\n              fontSize: ''11px'',\n              display: ''inline-block''\n            }}>\n              {deal.Stage}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}","description":"Displays deals in an interactive card layout with open action","category":"Deals","type":"cards","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"]}]},"properties":[{"name":"deals","type":"array","description":"Array of deal objects to display","required":true},{"name":"stageColors","type":"object","description":"Optional object mapping stage names to colors","required":true},{"name":"onDealClick","type":"function","description":"Callback when a deal card is clicked","required":true},{"name":"onOpenClick","type":"function","description":"Callback when the open icon is clicked, receives entityName and primaryKey array","required":true}],"events":[{"name":"onDealSelect","description":"Fired when a deal card is clicked","parameters":[{"name":"deal","type":"object","description":"The deal object that was clicked"}]},{"name":"onDealOpen","description":"Fired when the open icon is clicked","parameters":[{"name":"entityName","type":"string","description":"Name of the entity (Deals)"},{"name":"primaryKey","type":"array","description":"Array of key-value pairs for composite primary key"}]}],"usageExample":"```javascript\n<DealCards\n  deals={filteredDeals}\n  stageColors={stageColors}\n  onDealClick={(deal) => console.log(''Deal clicked:'', deal)}\n  onOpenClick={(entityName, primaryKey) => callbacks.OpenEntityRecord(entityName, primaryKey)}\n/>\n```","functionalRequirements":"- Display deal cards in a responsive grid\n- Show deal name, amount, account, close date, probability, and stage\n- Format currency values appropriately\n- Include open icon button for external navigation\n- Show hover effects on cards\n- Color-code stage badges","technicalDesign":"Renders deal information in card format with hover states. Uses formatCurrency for amounts. Includes Font Awesome icon for opening deals externally. Stage badges use dynamic colors from stageColors prop."},{"name":"DealList","location":"embedded","code":"function DealList({ deals, stageColors = {}, onDealClick, onOpenClick }) {\n  return (\n    <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n      <thead>\n        <tr style={{ borderBottom: ''2px solid #E5E7EB'' }}>\n          <th style={{ padding: ''8px'', textAlign: ''left'', fontSize: ''12px'', color: ''#6B7280'' }}>Deal</th>\n          <th style={{ padding: ''8px'', textAlign: ''left'', fontSize: ''12px'', color: ''#6B7280'' }}>Stage</th>\n          <th style={{ padding: ''8px'', textAlign: ''right'', fontSize: ''12px'', color: ''#6B7280'' }}>Amount</th>\n          <th style={{ padding: ''8px'', width: ''30px'' }}></th>\n        </tr>\n      </thead>\n      <tbody>\n        {deals.map((deal, index) => (\n          <tr\n            key={deal.ID || index}\n            style={{\n              borderBottom: ''1px solid #F3F4F6'',\n              cursor: ''pointer'',\n              transition: ''background-color 0.2s''\n            }}\n            onClick={() => onDealClick && onDealClick(deal)}\n            onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F9FAFB''}\n            onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}\n          >\n            <td style={{ padding: ''12px 8px'' }}>\n              <div style={{ fontWeight: ''500'' }}>{deal.DealName}</div>\n              <div style={{ fontSize: ''12px'', color: ''#9CA3AF'' }}>{deal.AccountName}</div>\n            </td>\n            <td style={{ padding: ''12px 8px'' }}>\n              {deal.Stage && (\n                <span style={{\n                  padding: ''2px 6px'',\n                  backgroundColor: stageColors[deal.Stage] || ''#6B7280'',\n                  color: ''white'',\n                  borderRadius: ''3px'',\n                  fontSize: ''11px''\n                }}>\n                  {deal.Stage}\n                </span>\n              )}\n            </td>\n            <td style={{ padding: ''12px 8px'', textAlign: ''right'', fontWeight: ''500'' }}>\n              $' + '{((deal.Amount || 0) / 1000).toFixed(0)}K\n            </td>\n            <td style={{ padding: ''12px 8px'', textAlign: ''center'' }}>\n              {onOpenClick && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenClick(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }]);\n                  }}\n                  style={{\n                    background: ''none'',\n                    border: ''none'',\n                    color: ''#6B7280'',\n                    cursor: ''pointer'',\n                    padding: ''2px'',\n                    fontSize: ''14px''\n                  }}\n                  title=\"Open in Explorer\"\n                >\n                  <i className=\"fa-solid fa-up-right-from-square\"></i>\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}","description":"Displays deals in a sortable table format with open action","category":"Deals","type":"list","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"],"permissions":["read"]}]},"properties":[{"name":"deals","Type":"array","description":"Array of deal objects to display","required":true},{"name":"stageColors","Type":"object","description":"Optional object mapping stage names to colors","required":true},{"name":"onDealClick","Type":"function","description":"Callback when a deal row is clicked","required":true},{"name":"onOpenClick","Type":"function","description":"Callback when the open icon is clicked, receives entityName and primaryKey array","required":true}],"events":[{"name":"onDealSelect","description":"Fired when a deal row is clicked","parameters":[{"name":"deal","type":"object","description":"The deal object that was clicked"}]},{"name":"onDealOpen","description":"Fired when the open icon is clicked","parameters":[{"name":"entityName","type":"string","description":"Name of the entity (Deals)"},{"name":"primaryKey","type":"array","description":"Array of key-value pairs for composite primary key"}]}],"usageExample":"```javascript\n<DealList\n  deals={filteredDeals}\n  stageColors={stageColors}\n  onDealClick={(deal) => console.log(''Deal clicked:'', deal)}\n  onOpenClick={(entityName, primaryKey) => callbacks.OpenEntityRecord(entityName, primaryKey)}\n/>\n```","functionalRequirements":"- Display deals in a clean table format\n- Show deal name, account, stage, and amount\n- Include open icon button for external navigation\n- Show hover effects on rows\n- Color-code stage badges\n- Support row click for selection","technicalDesign":"Renders deals in table format with hover states. Formats currency values. Includes Font Awesome icon for opening deals externally. Stage badges use dynamic colors from stageColors prop."},{"name":"DrillDownPanel","location":"embedded","code":"function DrillDownPanel({ isOpen, drillDownData, stageColors = {}, onClose, onOpenDeal, components }) {\n  const [localFilter, setLocalFilter] = useState('''');\n  const [localSort, setLocalSort] = useState(''Amount'');\n  const [displayMode, setDisplayMode] = useState(''cards'');\n  \n  if (!drillDownData) return null;\n  \n  // Get sub-components from registry\n  const DealCards = components?.[''DealCards''];\n  const DealList = components?.[''DealList''];\n  \n  const filteredDeals = drillDownData.deals.filter(deal => \n    deal.DealName?.toLowerCase().includes(localFilter.toLowerCase()) ||\n    deal.AccountName?.toLowerCase().includes(localFilter.toLowerCase())\n  );\n  \n  const sortedDeals = [...filteredDeals].sort((a, b) => {\n    switch (localSort) {\n      case ''Amount'':\n        return (b.Amount || 0) - (a.Amount || 0);\n      case ''CloseDate'':\n        return new Date(b.CloseDate || 0) - new Date(a.CloseDate || 0);\n      case ''Probability'':\n        return (b.Probability || 0) - (a.Probability || 0);\n      default:\n        return 0;\n    }\n  });\n  \n  const formatCurrency = (amount) => {\n    if (amount >= 1000000) return `$$' + '{(amount / 1000000).toFixed(1)}M`;\n    if (amount >= 1000) return `$$' + '{(amount / 1000).toFixed(0)}K`;\n    return `$$' + '{amount.toFixed(0)}`;\n  };\n  \n  return (\n    <div\n      style={{\n        position: ''fixed'',\n        right: isOpen ? 0 : ''-500px'',\n        top: ''75px'',\n        bottom: 0,\n        width: ''500px'',\n        backgroundColor: ''#fff'',\n        boxShadow: ''-4px 0 20px rgba(0,0,0,0.1)'',\n        zIndex: 1000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        transition: ''right 0.3s ease''\n      }}\n    >\n      <div style={{\n        padding: ''20px'',\n        borderBottom: ''1px solid #E5E7EB'',\n        backgroundColor: drillDownData.type === ''stage'' ? stageColors[drillDownData.metadata] : ''#3B82F6'',\n        color: ''white''\n      }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n          <h3 style={{ margin: 0 }}>{drillDownData.title}</h3>\n          <button\n            onClick={onClose}\n            style={{\n              background: ''none'',\n              border: ''none'',\n              color: ''white'',\n              fontSize: ''24px'',\n              cursor: ''pointer''\n            }}\n          >\n            ×\n          </button>\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''14px'', opacity: 0.9 }}>\n          {sortedDeals.length} deals • {formatCurrency(sortedDeals.reduce((sum, d) => sum + (d.Amount || 0), 0))}\n        </div>\n      </div>\n      \n      <div style={{ padding: ''16px'', borderBottom: ''1px solid #E5E7EB'' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Filter deals...\"\n          value={localFilter}\n          onChange={(e) => setLocalFilter(e.target.value)}\n          style={{\n            width: ''100%'',\n            padding: ''8px 12px'',\n            border: ''1px solid #D1D5DB'',\n            borderRadius: ''6px'',\n            marginBottom: ''12px''\n          }}\n        />\n        <div style={{ display: ''flex'', gap: ''8px'' }}>\n          <button\n            onClick={() => setDisplayMode(''cards'')}\n            style={{\n              padding: ''6px 12px'',\n              backgroundColor: displayMode === ''cards'' ? ''#3B82F6'' : ''#F3F4F6'',\n              color: displayMode === ''cards'' ? ''white'' : ''#374151'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer''\n            }}\n          >\n            Cards\n          </button>\n          <button\n            onClick={() => setDisplayMode(''list'')}\n            style={{\n              padding: ''6px 12px'',\n              backgroundColor: displayMode === ''list'' ? ''#3B82F6'' : ''#F3F4F6'',\n              color: displayMode === ''list'' ? ''white'' : ''#374151'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer''\n            }}\n          >\n            List\n          </button>\n          <select\n            value={localSort}\n            onChange={(e) => setLocalSort(e.target.value)}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px'',\n              flex: 1\n            }}\n          >\n            <option value=\"Amount\">Sort by Amount</option>\n            <option value=\"CloseDate\">Sort by Close Date</option>\n            <option value=\"Probability\">Sort by Probability</option>\n          </select>\n        </div>\n      </div>\n      \n      <div style={{ flex: 1, overflowY: ''auto'', padding: ''16px'' }}>\n        {displayMode === ''cards'' ? (\n          <DealCards \n            deals={sortedDeals} \n            stageColors={stageColors}\n            onOpenClick={onOpenDeal}\n          />\n        ) : (\n          <DealList \n            deals={sortedDeals}\n            stageColors={stageColors}\n            onOpenClick={onOpenDeal}\n          />\n        )}\n      </div>\n    </div>\n  );\n}","description":"Slide-out panel for drilling down into deal details with filtering and sorting","category":"Panel","type":"panel","properties":[{"name":"isOpen","type":"boolean","description":"Whether the panel is open","required":true},{"name":"drillDownData","type":"object","description":"Object containing title, deals array, type, and metadata","required":true},{"name":"stageColors","type":"object","description":"Object mapping stage names to colors","required":true},{"name":"onClose","type":"function","description":"Callback when panel is closed","required":true},{"name":"onOpenDeal","type":"function","description":"Callback to open a deal in external app","required":true}],"events":[{"name":"onPanelClose","description":"Fired when the panel is closed","parameters":[]},{"name":"onDealOpen","description":"Fired when a deal open action is triggered","parameters":[{"name":"entityName","type":"string","description":"Name of the entity"},{"name":"primaryKey","type":"array","description":"Primary key array"}]}],"dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"],"permissions":["read"]}]},"usageExample":"```javascript\n<DrillDownPanel\n  isOpen={isPanelOpen}\n  drillDownData={drillDownData}\n  stageColors={stageColors}\n  onClose={() => setIsPanelOpen(false)}\n  onOpenDeal={(entityName, pk) => callbacks.OpenEntityRecord(entityName, pk)}\n/>\n```","functionalRequirements":"- Slide in from right side at top: 75px\n- Display title and deal count/value summary\n- Allow filtering deals by text search\n- Support sorting by Amount, CloseDate, Probability\n- Toggle between card and list views\n- Include close button in header\n- Use appropriate background color based on drill-down type","technicalDesign":"Fixed position panel with CSS transitions. Contains local state for filter text, sort order, and display mode. Reuses DealCards and DealList components for display. Header color determined by drillDownData type/metadata."},{"name":"AIInsightsPanel","location":"registry","namespace":"Generic/UI/AI","version":"^1.0.0"}],"libraries":[{"name":"dayjs","version":"1.11.10","globalVariable":"dayjs"},{"name":"ApexCharts","version":"3.45.1","globalVariable":"ApexCharts"}],"dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"],"permissions":["read"]},{"name":"Activities","displayFields":["ID","type","Subject","Owner","CreatedAt"],"filterFields":["CreatedAt","Owner"],"sortFields":["CreatedAt"],"permissions":["read"]}]},"usageExample":"```javascript\n<SalesPipelineDashboard\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>\n```","functionalRequirements":"- Display key pipeline metrics in cards\n- Show pipeline stages in kanban view\n- Provide date filtering with presets and custom ranges\n- Visualize pipeline data with interactive charts\n- Show team performance leaderboard\n- Display recent activity feed\n- Enable drill-down into any metric or stage\n- Support card and list views for deals\n- Allow opening deals in external application","technicalDesign":"Main dashboard component that orchestrates multiple sub-components. Manages global state for deals and activities data. Implements date filtering logic. Renders ApexCharts for visualizations. Uses composition pattern with sub-components for modularity."}'
SET
  @FunctionalRequirements_5440e6bf = N'- Display key pipeline metrics in cards
- Show pipeline stages in kanban view
- Provide date filtering with presets and custom ranges
- Visualize pipeline data with interactive charts
- Show team performance leaderboard
- Display recent activity feed
- Enable drill-down into any metric or stage
- Support card and list views for deals
- Allow opening deals in external application'
SET
  @TechnicalDesign_5440e6bf = N'Main dashboard component that orchestrates multiple sub-components. Manages global state for deals and activities data. Implements date filtering logic. Renders ApexCharts for visualizations. Uses composition pattern with sub-components for modularity.'
SET
  @FunctionalRequirementsVector_5440e6bf = N'[-0.032129138708114624,0.008010481484234333,-0.040266089141368866,-0.06312985718250275,0.03089848905801773,0.011942034587264061,0.01858402043581009,0.023353958502411842,0.0010480181081220508,-0.010246476158499718,-0.016796721145510674,0.0544721819460392,-0.011007783003151417,0.19045495986938477,-0.00310520245693624,-0.08089358359575272,-0.027253955602645874,-0.02810143679380417,-0.007436774205416441,0.037834133952856064,-0.01516014151275158,-0.00577158248052001,-0.02314644865691662,0.0067934030666947365,-0.006097245961427689,-0.006162668578326702,-0.0018314141780138016,0.009055143222212791,-0.015437505207955837,-0.07411986589431763,-0.04852984473109245,-0.005636966321617365,-0.04222395643591881,-0.06481028348207474,0.0000019458339011180215,-0.01218017004430294,-0.016977235674858093,-0.014136348851025105,-0.018326161429286003,0.016887221485376358,0.021709276363253593,-0.07347746938467026,0.057302746921777725,-0.014872835949063301,0.01419086754322052,-0.05225297808647156,-0.0243268720805645,0.035872023552656174,0.032402392476797104,0.013412093743681908,-0.003735288279131055,0.007579608354717493,-0.05437611788511276,-0.010317782871425152,-0.0488167330622673,-0.009967075660824776,-0.0145784392952919,-0.049507025629282,0.056598544120788574,-0.008482526987791061,0.041088663041591644,-0.009867258369922638,0.013327093794941902,-0.033411379903554916,0.09580276906490326,0.048270903527736664,0.029273051768541336,-0.10110420733690262,0.030141569674015045,-0.045176807790994644,0.024405529722571373,-0.04233390465378761,-0.023348119109869003,-0.07078578323125839,0.007308750879019499,-0.04766455292701721,-0.01844342239201069,0.004323804751038551,0.027689559385180473,-0.022280855104327202,-0.008184820413589478,0.0032234792597591877,-0.035363584756851196,-0.015781667083501816,0.016091670840978622,0.007500599604099989,0.022931266576051712,0.006660247687250376,-0.04240194708108902,0.05262461304664612,0.0415966659784317,-0.023990029469132423,-0.0037220113445073366,-0.001644041039980948,-0.09585519880056381,-0.020471815019845963,0.03534931316971779,0.021041760221123695,-0.007515550125390291,0.02192145213484764,0.028533877804875374,0.03352689743041992,0.06224709004163742,0.044503260403871536,0.011931880377233028,0.020750591531395912,-0.005825016647577286,-0.028003249317407608,-0.01026103738695383,0.011077753268182278,-0.0027198749594390392,-0.003714088350534439,-0.01817779615521431,0.042013391852378845,-0.06985490024089813,-0.031286485493183136,-0.01656758040189743,0.057900045067071915,0.0307296309620142,0.01777384802699089,0.15500107407569885,-0.0023588307667523623,0.048709478229284286,0.023874521255493164,-0.0042206235229969025,-0.013115789741277695,-0.04708224534988403,-0.004920688457787037,-0.0022938500624150038,-0.020381217822432518,-0.014412840828299522,-0.0018127106595784426,-0.010393333621323109,-0.01766626164317131,-0.02000330202281475,-0.011041712947189808,0.04855357110500336,0.027664687484502792,-0.04867694526910782,-0.005120425019413233,0.044240210205316544,-0.0039241379126906395,-0.06004676967859268,0.04723261296749115,-0.019098026677966118,-0.003163850400596857,-0.03617361932992935,0.052460573613643646,-0.012407183647155762,-0.0019632282201200724,-0.0030805817805230618,-0.04273148626089096,0.012193647213280201,0.02172161266207695,-0.04247574135661125,0.015607310459017754,-0.016802135854959488,-0.019507844001054764,-0.024632098153233528,0.007728638593107462,-0.006607695948332548,-0.006800142582505941,0.01777017116546631,-0.02130364254117012,-0.04985245689749718,-0.0027945484034717083,0.016298668459057808,0.001993152080103755,-0.02634362503886223,-0.02549447864294052,-0.0002815760381054133,-0.02331295795738697,-0.0012360147666186094,0.05628370866179466,0.041397999972105026,-0.011044271290302277,0.11977033317089081,-0.05246858671307564,0.022151587530970573,0.0038832570426166058,0.07389073818922043,-0.09658201038837433,-0.008258375339210033,0.06109554320573807,0.08409712463617325,0.009876430034637451,-0.0835430920124054,0.05728882551193237,0.016575295478105545,0.014257160015404224,0.004149768501520157,0.04340042918920517,-0.11616593599319458,0.010251781903207302,0.015976304188370705,0.015100319869816303,-0.009058919735252857,-0.030182600021362305,0.0023348478134721518,-0.029377227649092674,-0.005351201631128788,0.014699139632284641,0.013289257884025574,0.0554378405213356,0.024919528514146805,-0.014190337620675564,-0.005521789193153381,-0.006812561769038439,-0.10110943764448166,-0.004137643147259951,0.10052570700645447,0.010518698021769524,-0.01444784365594387,0.04203808680176735,-0.015463076531887054,0.010335344821214676,0.04089733585715294,-0.00420746672898531,-0.043752048164606094,0.013531414791941643,-0.08096177130937576,0.03539668396115303,0.0005535446689464152,0.019846094772219658,0.08047804981470108,0.04596497118473053,0.03225339949131012,0.0038223741576075554,0.022474445402622223,0.06015319749712944,0.002115347422659397,0.001763463020324707,0.05284123495221138,-0.013652714900672436,0.023033924400806427,0.09495973587036133,0.020590299740433693,0.1308138519525528,0.0005891576875001192,0.08035186678171158,0.007743440102785826,-0.04088838770985603,-0.02235427126288414,-0.013907614164054394,0.03504551947116852,0.020476840436458588,-0.01875373162329197,0.021292004734277725,0.02979709766805172,0.0011164962779730558,-0.012229230254888535,0.006193719804286957,0.03549155965447426,0.01050090417265892,0.022951640188694,-0.016682446002960205,-0.05562373250722885,-0.012368887662887573,-0.022092152386903763,0.05137429013848305,0.017676854506134987,-0.006908073555678129,-0.045044906437397,-0.027713622897863388,0.022097673267126083,-0.022999491542577744,0.058164145797491074,-0.015225259587168694,-0.036017924547195435,0.003582143923267722,0.028253499418497086,0.06153653934597969,0.02717749774456024,-0.024228984490036964,-0.020125968381762505,0.04888737574219704,-0.0042777396738529205,0.01620698906481266,-0.003978705033659935,0.003187492722645402,0.045377422124147415,-0.0026143775321543217,0.000817742373328656,0.023930910974740982,-0.023121096193790436,0.024777714163064957,0.024469172582030296,-0.10349535197019577,0.024564923718571663,-0.028519460931420326,0.065249502658844,-0.025165781378746033,0.02422529086470604,0.0064816828817129135,-0.032248515635728836,-0.00004987519423593767,-0.02691258303821087,0.04754788801074028,-0.06053764000535011,0.008843883872032166,-0.05255246162414551,0.0024142179172486067,0.02298603393137455,-0.012688882648944855,0.031079888343811035,0.023165704682469368,0.017728662118315697,0.034914661198854446,0.024095168337225914,-0.013176379725337029,-0.012542694807052612,0.002457565860822797,0.01194806955754757,0.01585465669631958,-0.007328857202082872,-0.012562270276248455,-0.0038062380626797676,-0.0021514971740543842,-0.0336868017911911,0.04060051217675209,0.011963043361902237,-0.016354471445083618,-0.04524660483002663,-0.014847888611257076,-0.052610959857702255,-0.031088031828403473,-0.0262618288397789,-0.06461291760206223,-0.002138541080057621,-0.013879453763365746,0.008455912582576275,-0.04090966656804085,-0.041952330619096756,0.007074435241520405,-0.004394039046019316,0.01658879965543747,-0.008845449425280094,-0.0718853622674942,0.030494272708892822,-0.04567325860261917,-0.050464827567338943,0.03418787568807602,-0.022985996678471565,0.05013037100434303,0.018358001485466957,-0.01845257356762886,0.05648204684257507,0.01628665067255497,-0.04638168588280678,0.043661344796419144,0.018285945057868958,0.030981361865997314,-0.00015178548346739262,-0.011720866896212101,0.02849280834197998,-0.012071259319782257,-0.058625977486371994,-0.04039132595062256,-0.030423283576965332,-0.01277123298496008,0.0444561205804348,0.003643132746219635,-0.0035855392925441265,-0.006335960701107979,0.025176363065838814,0.007824779488146305,-0.012981030158698559,-0.0320340059697628,0.024843601509928703,0.007878320291638374,0.009174250066280365,0.010206523351371288,0.03501581773161888,0.020728599280118942,0.013486192561686039,-0.04166431725025177,0.01855715736746788,0.03806193917989731,-0.01568840816617012,0.02877163700759411,0.0354405976831913,-0.02720235101878643,0.08893398940563202,-0.007091363426297903,0.05707758292555809,-0.032724086195230484,-0.04057632386684418,-0.02059890888631344,-0.019597316160798073,0.009073391556739807,0.0062042344361543655,-0.03567783907055855,-0.029342105612158775,-0.026335028931498528,-0.0016907136887311935,-0.036336686462163925,-0.05369962006807327,0.012858071364462376,-0.01671418733894825,0.008403170853853226,0.013763593509793282,-0.02460392564535141,-0.0482124462723732,-0.06273776292800903,-0.002829600591212511,-0.03931481018662453,-0.04396216943860054,0.0016633238410577178,0.028467724099755287,0.03866739571094513,-0.005960657726973295,0.024173736572265625,0.003390091471374035,-0.04090533033013344,-0.024109022691845894,0.01602010987699032,0.0035053701139986515,0.03378896415233612,0.03585412725806236,0.00487800408154726,0.006193050183355808,-0.04890298843383789,0.013819982297718525,-0.03243860974907875,0.0023520656395703554,-0.014177377335727215,-0.01237570308148861,-0.002793998224660754,0.0005407462595030665,0.037017349153757095,0.020100584253668785,-0.009695718064904213,-0.016094079241156578,-0.019840411841869354,-0.03988349437713623,-0.027286872267723083,-0.004526364151388407,0.04106344282627106,-0.028809450566768646,-0.003085638862103224,-0.00988580659031868,0.03497021645307541,0.035991180688142776,-0.006068070884793997,0.008242017589509487,-0.027020856738090515,0.02152039296925068,0.011054890230298042,-0.004092746879905462,-0.006751562934368849,0.02997765876352787,-0.0012152907438576221,-0.01760614477097988,0.013283543288707733,0.01371148880571127,-0.007665072102099657,0.018062422052025795,-0.04053796827793121,-0.012195039540529251,-0.029811257496476173,0.029797958210110664,0.025369830429553986,-0.0547938346862793,-0.013331820257008076,0.04619460925459862,-0.020367411896586418,-0.006585174240171909,-0.06411188840866089,-0.019856279715895653,-0.048247940838336945,0.041437722742557526,-0.024136235937476158,-0.027467351406812668,0.004010160453617573,0.002638201927766204,-0.012918687425553799,0.008485536091029644,0.0744856670498848,0.03161859139800072,0.015207944437861443,0.02611992321908474,-0.031591128557920456,0.04225582256913185,-0.048018667846918106,-0.007944379933178425,0.019438354298472404,-0.050119031220674515,0.007043603342026472,0.012518340721726418,0.019029928371310234,0.04058763384819031,0.016495024785399437,-0.007923714816570282,0.06705553084611893,0.025035185739398003,0.019826533272862434,-0.04896826297044754,0.02790330909192562,0.05149850621819496,-0.02643909677863121,-0.0117588359862566,-0.005317823961377144,-0.023738915100693703,-0.07403448969125748,-0.02817823924124241,-0.0019992366433143616,0.014367260038852692,-0.0035717864520847797,-0.06966762989759445,0.007666266057640314,0.03182920813560486,-0.017335833981633186,-0.03160037100315094,-0.05742781236767769,0.04465720057487488,0.03325219452381134,-0.013621767982840538,0.03766199201345444,0.013982517644762993,-0.06218111142516136,-0.003026982070878148,-0.00625960249453783,-0.03633863478899002,-0.02724197879433632,0.06039492413401604,-0.04487643390893936,0.020241400226950645,-0.003994341939687729,-0.03840222209692001,0.040351200848817825,-0.04791872948408127,-0.011130271479487419,0.0032226410694420338,-0.005295379087328911,-0.02807793766260147,0.004517664667218924,0.01796124316751957,0.12286990880966187,-0.019321363419294357,0.008884693495929241,-0.06122644245624542,0.022296741604804993,-0.0028586811386048794,-0.010857929475605488,-0.020112594589591026,-0.015654347836971283,-0.05553952232003212,-0.039730221033096313,0.044057946652173996,0.030710896477103233,-0.023195277899503708,-0.08442100137472153,-0.02734472043812275,0.04769452288746834,-0.023730695247650146,-6.204012329826361e-33,-0.013152739964425564,-0.012852447107434273,-0.006745271384716034,-0.005198684521019459,-0.012404097244143486,-0.006458615884184837,-0.0018043798627331853,-0.049655795097351074,-0.02904854342341423,0.002475386019796133,-0.008569528348743916,-0.014520256780087948,0.020734181627631187,-0.02392038144171238,0.0518803671002388,0.02139841578900814,0.046661198139190674,-0.012117846868932247,-0.0366387739777565,0.037564925849437714,-0.014683429151773453,0.010918897576630116,-0.012259460054337978,-0.017057476565241814,-0.02445855177938938,0.012885048054158688,0.0015798296080902219,0.03072415105998516,-0.016120197251439095,0.02108314447104931,0.008647206239402294,-0.04857894778251648,-0.014866351149976254,-0.03430565819144249,-0.024345461279153824,-0.014350797981023788,-0.050618596374988556,0.006609599106013775,-0.0008925989386625588,0.03164206072688103,0.06007491052150726,-0.005058624781668186,0.016510171815752983,-0.0037685243878513575,0.022254858165979385,-0.016939813271164894,-0.031189121305942535,0.0037019115407019854,-0.020705636590719223,-0.03406871482729912,-0.013484342955052853,0.008806471712887287,0.029596401378512383,0.11515916883945465,0.014024676755070686,0.040703337639570236,0.008851050399243832,-0.014223520644009113,-0.03842731565237045,0.04638184234499931,-0.056443773210048676,-0.019368866458535194,0.014531968161463737,-0.006192149128764868,0.03001379407942295,-0.044883131980895996,-0.056801676750183105,0.016082042828202248,0.04298447072505951,0.043471600860357285,-0.02502211555838585,0.03795848786830902,0.018860897049307823,-0.11170575767755508,-0.0749615803360939,0.00879601575434208,0.05584098771214485,-0.020844342187047005,-0.0032983494456857443,0.09860895574092865,0.0019990685395896435,0.02304164320230484,-0.010796735994517803,0.014036991633474827,0.06663388013839722,-0.08107095211744308,-0.030472377315163612,0.03802184760570526,0.013545257039368153,0.05648065358400345,-0.020234545692801476,0.05631221830844879,-0.021357832476496696,0.02299356460571289,0.06721408665180206,0.07536741346120834,0.03851572424173355,0.026786252856254578,0.0077833812683820724,-0.044749125838279724,-0.018665939569473267,-0.0059273215010762215,0.0013883254723623395,-0.02375129982829094,0.01077007781714201,-0.017414595931768417,0.0001332154788542539,0.007252963725477457,-0.016613734886050224,-0.023601312190294266,0.02148221991956234,0.06395405530929565,0.017772015184164047,-0.022199446335434914,-0.023457393050193787,-0.02589772641658783,-0.0004645224253181368,0.026629338040947914,0.005754637997597456,-0.0043009365908801556,0.03485368937253952,0.06912356615066528,0.021171841770410538,-0.06299939006567001,0.0483986996114254,-0.013999552465975285,-0.008073056116700172,-0.00663718581199646,0.049969471991062164,0.0026588349137455225,-0.021930893883109093,0.012283135205507278,2.7702245120053703e-7,0.0006329049938358366,0.048061490058898926,-0.026435723528265953,0.05782082676887512,0.02522376924753189,-0.049586765468120575,-0.006833207327872515,-0.05153646692633629,0.009978996589779854,-0.013986706733703613,0.04826458916068077,0.013629056513309479,-0.009495176374912262,0.02653718926012516,-0.0018932499224320054,-0.12048611044883728,0.045293401926755905,-0.07738158106803894,-0.09240401536226273,-0.018247688189148903,0.074783094227314,0.044443052262067795,0.04583282768726349,0.02841915935277939,0.03418176993727684,-0.025062402710318565,-0.03851214796304703,0.009804225526750088,0.0043661100789904594,-0.020267155021429062,0.06680604070425034,0.0033511354122310877,-0.03448167443275452,-0.006442922633141279,-0.02551751397550106,0.039020076394081116,-0.02541758306324482,-0.020404620096087456,0.02461695671081543,0.0347299799323082,0.01183074340224266,-0.04177142307162285,-0.01696908287703991,-0.06575694680213928,-0.004670863971114159,-0.03422417491674423,0.005862148478627205,-0.02288500964641571,-0.006555403582751751,-0.006076900754123926,0.007648286875337362,0.0495915487408638,0.02276253141462803,0.004442739300429821,0.03144408017396927,0.005446888506412506,-0.0100358622148633,0.016836008056998253,0.014494107104837894,-0.010958271101117134,-0.0030142171308398247,-0.01095573790371418,0.000535538129042834,0.04651385918259621,0.04048820957541466,0.010952262207865715,-0.02685026451945305,3.2767876189543135e-34,-0.015348115935921669,0.014407877810299397,0.048826929181814194,-0.016796579584479332,0.027953222393989563,-0.012861418537795544,-0.033763203769922256,-0.02904932014644146,0.010945534333586693,-0.0789576917886734,-0.005073368549346924]'
SET
  @TechnicalDesignVector_5440e6bf = N'[0.005041028838604689,-0.014982182532548904,-0.04129887372255325,-0.051570843905210495,-0.012807372026145458,-0.0014144667657092214,0.003073947736993432,0.03340982645750046,-0.006145842373371124,-0.013114823959767818,0.014754666946828365,0.020064745098352432,0.022828945890069008,0.14758986234664917,0.015947988256812096,-0.05075504258275032,0.0009492016397416592,0.010415462777018547,-0.051834143698215485,0.009006895124912262,0.013801847584545612,-0.0041771624237298965,-0.01325891725718975,-0.015322890132665634,-0.03750428184866905,-0.032115038484334946,-0.021511135622859,0.011663618497550488,0.010344231501221657,-0.03428288921713829,-0.010381856001913548,-0.019056646153330803,-0.0178877804428339,0.05059123411774635,0.0000018372389831711189,-0.005094354506582022,-0.030805623158812523,-0.011250159703195095,0.003911576233804226,0.0480266772210598,0.02666623517870903,-0.052388329058885574,0.03207642212510109,-0.011832077987492085,0.01698244921863079,-0.053773727267980576,-0.02597041055560112,0.05781393498182297,0.06328432261943817,-0.06437224894762039,-0.0061799995601177216,-0.01972546987235546,-0.05826009064912796,0.04572175815701485,-0.07205962389707565,0.027363793924450874,0.01860399916768074,0.008211677893996239,0.09498737007379532,-0.04156484082341194,0.006534127052873373,-0.009831726551055908,0.0006654453463852406,-0.015205387026071548,0.05568256601691246,0.028394345194101334,0.12730281054973602,-0.05532300844788551,-0.0073887356556952,0.0036972295492887497,0.071712926030159,-0.01405535638332367,0.023749180138111115,-0.011360585689544678,-0.017301935702562332,-0.014314994215965271,-0.02910296805202961,-0.006191887427121401,0.026016244664788246,-0.00027171801775693893,0.020097989588975906,0.01484900526702404,-0.03677875176072121,-0.03229311853647232,-0.02151564694941044,-0.004271734971553087,-0.000657631317153573,0.012294299900531769,-0.05493590235710144,-0.00489038834348321,0.06715847551822662,-0.027235524728894234,-0.005517969839274883,0.023952806368470192,-0.06827979534864426,-0.012499488890171051,0.010272985324263573,0.007126987911760807,-0.010850099846720695,0.019656717777252197,0.008631277829408646,0.034997254610061646,0.07008924335241318,0.04753968492150307,0.053637173026800156,0.03864000365138054,-0.028956016525626183,-0.08773092180490494,0.01840956322848797,-0.052721284329891205,-0.019535142928361893,-0.02909841388463974,0.006627604831010103,0.0925426185131073,-0.017542285844683647,-0.02741200104355812,-0.029713619500398636,0.016515979543328285,-0.00896518211811781,0.0419049970805645,0.04902273416519165,0.006267927121371031,0.023954225704073906,0.010833692736923695,-0.022589342668652534,0.03547341749072075,0.0008775487658567727,-0.03658963367342949,-0.01297213789075613,0.0017201451119035482,-0.005987520329654217,-0.022444745525717735,0.026677412912249565,-0.013196054846048355,-0.04036558419466019,-0.007753005716949701,0.0013549686409533024,0.05295048654079437,-0.047972891479730606,-0.03290455415844917,0.037476614117622375,0.013418557122349739,-0.0984334722161293,0.0306486114859581,0.009739912115037441,-0.016241373494267464,-0.02725135162472725,0.04012567177414894,0.0066707623191177845,-0.012015254236757755,0.00573747418820858,-0.030120592564344406,-0.021192442625761032,0.007516492158174515,-0.05517994239926338,-0.00894863624125719,0.05605876445770264,-0.00636699702590704,-0.027467213571071625,0.025477873161435127,-0.0033299585338681936,0.018540160730481148,0.07159309834241867,0.009627947583794594,-0.06311222910881042,-0.025006411597132683,-0.014614916406571865,0.011164066381752491,-0.06280442327260971,-0.05486014857888222,-0.04464657977223396,-0.011391191743314266,-0.020128676667809486,0.04488527774810791,0.046478547155857086,-0.047162145376205444,0.059504032135009766,-0.04878788813948631,-0.009547457098960876,0.016011597588658333,0.035930369049310684,-0.10482091456651688,0.008637635968625546,0.05360589548945427,0.03456202894449234,-0.04059198126196861,-0.09481151401996613,0.02715551294386387,0.007241741754114628,-0.012876887805759907,-0.015356773510575294,0.031932104378938675,-0.05855352059006691,0.002922643907368183,0.02157926745712757,-0.01251621637493372,-0.016260549426078796,-0.07201405614614487,0.008572512306272984,-0.007210519164800644,0.03284443914890289,0.01970101147890091,0.088384710252285,0.0781610831618309,0.034392934292554855,-0.03087923675775528,0.014471655711531639,-0.013110713101923466,-0.011489786207675934,0.005660215858370066,0.04492056369781494,-0.009670375846326351,-0.027679430320858955,0.02733212150633335,-0.015364537015557289,-0.00012200892524560913,0.041533082723617554,0.032871659845113754,-0.05332409217953682,0.02273350954055786,-0.07008510828018188,0.016316579654812813,0.012926571071147919,0.006405486725270748,0.09843039512634277,0.0199254360049963,0.010132900439202785,0.05457214638590813,0.020637432113289833,0.04484335333108902,-0.005100875161588192,-0.015811685472726822,0.04092313349246979,0.031077791005373,0.016928093507885933,0.04115927964448929,0.028782930225133896,0.035311564803123474,-0.004064309876412153,0.009390056133270264,-0.01271302904933691,-0.03485897555947304,-0.023875165730714798,-0.02773152105510235,0.018034182488918304,-0.040082674473524094,-0.0428180992603302,0.02192808873951435,-0.021628474816679955,-0.009933650493621826,0.009510727599263191,0.03379802405834198,-0.014641871675848961,-0.020028572529554367,-0.03448164463043213,0.01358373649418354,0.002357949037104845,0.018772345036268234,0.024968747049570084,0.032406486570835114,0.02770591899752617,-0.012073613703250885,-0.009617362171411514,-0.048128362745046616,-0.031221000477671623,-0.012148174457252026,0.019727595150470734,-0.009684217162430286,-0.034284498542547226,0.028251947835087776,-0.006768761668354273,0.03655853495001793,0.021789729595184326,0.01643000915646553,-0.01574690453708172,0.04751242324709892,0.008288216777145863,-0.006980906240642071,-0.0354851670563221,-0.003292192704975605,0.0022744014859199524,0.004725195933133364,0.02937265671789646,0.028935996815562248,-0.012567236088216305,0.00007310751971090212,0.018039032816886902,-0.053913988173007965,0.02063046023249626,-0.10330521315336227,0.00946314912289381,-0.017293762415647507,0.023121599107980728,-0.0470309741795063,-0.037449538707733154,0.0017898455262184143,0.01932624727487564,0.06745844334363937,-0.06228932738304138,-0.0038156937807798386,-0.015392164699733257,-0.04457944631576538,0.018472278490662575,-0.0022016374859958887,-0.012122509069740772,0.10832968354225159,-0.0048173824325203896,0.018691180273890495,0.0025640937965363264,0.029398690909147263,0.012625153176486492,0.021089406684041023,-0.01953219063580036,0.04079269990324974,0.009443595074117184,0.016891667619347572,-0.000171351115568541,-0.012378503568470478,-0.02081543765962124,0.047934480011463165,-0.010811086744070053,0.008163172751665115,-0.003627018304541707,0.014044290408492088,-0.019789714366197586,0.041648019105196,-0.029068179428577423,-0.0345333032310009,-0.031255848705768585,-0.04079022631049156,-0.018001671880483627,-0.04009965807199478,-0.03200671821832657,0.005903857294470072,0.031696680933237076,-0.020054688677191734,-0.01814282312989235,-0.04750599339604378,-0.008651326410472393,-0.035024892538785934,-0.025231434032320976,0.009691654704511166,-0.008676313795149326,0.1048969104886055,-0.004956837743520737,-0.0011170444777235389,0.03313222527503967,0.0388251356780529,-0.13697773218154907,0.029071591794490814,0.034390147775411606,0.030218297615647316,-0.005691819824278355,0.002771159866824746,0.002543199574574828,-0.007968469522893429,-0.07598423957824707,0.03119290992617607,-0.01947168819606304,-0.05924233794212341,0.029650360345840454,0.01847504824399948,0.03271544352173805,-0.047704972326755524,0.04095904901623726,-0.014800823293626308,0.026451749727129936,0.03787413612008095,0.03524371236562729,-0.018027102574706078,-0.017421811819076538,0.015624686144292355,0.05219604820013046,0.002089620800688863,-0.0023223157040774822,-0.032520730048418045,0.0024890287313610315,0.0268319770693779,0.008783236145973206,0.029931772500276566,0.01424573827534914,-0.015922266989946365,0.07177747786045074,0.0066937776282429695,0.055224642157554626,0.0038524193223565817,-0.005817613564431667,0.0044449190609157085,-0.0013283665757626295,0.031143320724368095,0.006833469495177269,-0.08673623949289322,0.03827769681811333,0.016628405079245567,0.0005614068941213191,-0.034565821290016174,-0.014406363479793072,0.026995142921805382,-0.031470123678445816,-0.01310733426362276,-0.012329775840044022,-0.07792145758867264,-0.011273739859461784,-0.026462873443961143,0.040535323321819305,-0.06814772635698318,-0.14112675189971924,0.05508380010724068,-0.004099044483155012,0.027461187914013863,-0.008488207124173641,-0.018645072355866432,0.013785140588879585,-0.06935570389032364,-0.04233326017856598,-0.012735648080706596,-0.010240545496344566,0.02268882282078266,0.025883590802550316,0.04853060841560364,0.03851928189396858,0.00956320483237505,0.0443723127245903,-0.011989849619567394,0.05502594634890556,-0.031158072873950005,-0.009265809319913387,-0.027500445023179054,-0.022235801443457603,0.023380370810627937,0.0033141719177365303,-0.04464271664619446,0.0014590190257877111,-0.03279998153448105,-0.03441125527024269,-0.03100268729031086,-0.03293449431657791,-0.013889042660593987,-0.007584371604025364,0.01569034345448017,0.01514180563390255,0.03249392658472061,0.034725453704595566,-0.01600606180727482,-0.012849359773099422,-0.016556445509195328,-0.01043661218136549,0.007156074047088623,-0.05842484161257744,-0.000027715310352505185,0.06111607700586319,-0.020619351416826248,0.005819572601467371,-0.02645978145301342,-0.008139320649206638,-0.032749611884355545,-0.028460411354899406,0.06394115090370178,-0.011186167597770691,0.01994774490594864,0.029758727177977562,0.015814416110515594,-0.025342170149087906,0.015743354335427284,0.017330626025795937,0.018690014258027077,0.024507075548171997,-0.027192773297429085,-0.021932784467935562,-0.037961144000291824,0.023423101752996445,-0.024173809215426445,-0.021494286134839058,-0.016821131110191345,-0.020977996289730072,0.002722060540691018,-0.008094944059848785,0.04757307469844818,0.09662164747714996,-0.004049662500619888,-0.0017319308826699853,-0.03170924261212349,0.032762859016656876,-0.012725772336125374,0.01726936735212803,0.01802467741072178,-0.041435882449150085,-0.03422299772500992,-0.00507633900269866,0.015601018443703651,0.009977133944630623,0.0010966367553919554,0.005342062097042799,0.11908791214227676,0.04208862781524658,0.023163381963968277,-0.005010863766074181,0.011408226564526558,-0.03610336408019066,-0.09393519163131714,-0.02279306948184967,0.004935866687446833,-0.01693667285144329,-0.06637647747993469,-0.019708625972270966,-0.0121220787987113,-0.007074201945215464,0.0023978776298463345,-0.02000107802450657,0.0077783954329788685,0.013408920727670193,-0.01573200896382332,-0.03856143727898598,0.019511369988322258,0.0546271912753582,-0.02258998528122902,-0.006152066867798567,0.032037898898124695,0.03974083065986633,-0.04040273278951645,0.006610216572880745,0.024204479530453682,-0.0029408992268145084,-0.0300434697419405,0.09299170970916748,-0.02487442083656788,0.003681965172290802,0.0026917397044599056,-0.02090764045715332,0.036593157798051834,-0.028498176485300064,-0.03594091162085533,-0.015360192395746708,-0.00019946008978877217,-0.06175575777888298,0.04088094085454941,0.027906062081456184,0.10856364667415619,-0.027421725913882256,-0.03366037830710411,-0.09120330959558487,0.04895266517996788,0.03257729485630989,-0.0008463410777039826,-0.025859497487545013,-0.037341728806495667,-0.00763934850692749,-0.03264058381319046,0.06528322398662567,0.037711456418037415,0.002495681867003441,-0.064838707447052,-0.04283217713236809,0.0277414470911026,0.02414630353450775,-6.38786552376672e-33,-0.01117585226893425,-0.005714581813663244,-0.01881074719130993,-0.004118471406400204,-0.03833111375570297,-0.019729435443878174,0.036316823214292526,-0.051137231290340424,-0.01307717151939869,-0.009706747718155384,0.002460051793605089,-0.01190296933054924,0.0032166428864002228,-0.012277168221771717,0.013618300668895245,0.06579910218715668,0.03262236714363098,0.02397492714226246,-0.03705884516239166,0.00640040123835206,-0.007830172777175903,0.01633412390947342,-0.013210724107921124,-0.04136267676949501,-0.07308466732501984,-0.000003922151790902717,0.014608621597290039,0.01704254373908043,-0.07329446077346802,0.03949741646647453,-0.00987614318728447,-0.016473717987537384,-0.013405448757112026,0.12242856621742249,-0.0022084470838308334,0.003809931455180049,-0.009562809020280838,-0.011352669447660446,0.028126820921897888,0.011566655710339546,0.048718202859163284,-0.002032827353104949,0.03144592419266701,0.004722432233393192,0.010051192715764046,-0.01637999713420868,0.013078302145004272,-0.002251712139695883,-0.015838434919714928,0.01132884155958891,-0.005602466873824596,0.011264471337199211,-0.006016828585416079,0.08900558948516846,-0.003636251902207732,0.055894602090120316,0.022032907232642174,0.029599813744425774,-0.003094419604167342,0.031555090099573135,-0.04200034216046333,-0.04538248851895332,-0.01985740289092064,0.020401092246174812,0.020823821425437927,0.02415470965206623,0.0002078964898828417,0.04596935212612152,-0.08319101482629776,0.010723930783569813,-0.015386059880256653,0.05942046642303467,0.07074848562479019,-0.05272766575217247,-0.05276083946228027,0.011249972507357597,0.02238660492002964,-0.038998764008283615,-0.004911641124635935,0.05760728195309639,-0.011112767271697521,0.023020656779408455,0.02218860387802124,0.013288403861224651,0.053223926573991776,0.02207627147436142,-0.02353931963443756,0.0377391017973423,0.010158902034163475,0.04781470447778702,-0.03855973854660988,0.023455653339624405,-0.04351262003183365,0.013767042197287083,0.006698478013277054,-0.02995416149497032,0.045783743262290955,0.012831569649279118,0.01701362617313862,-0.04414249584078789,0.007646614219993353,0.004198899492621422,-0.045335639268159866,0.00750827556475997,-0.032692283391952515,-0.019122686237096786,-0.008984746411442757,0.01493115071207285,-0.03660798445343971,0.02435181848704815,0.01388225331902504,0.02424866333603859,-0.00961928442120552,-0.060400258749723434,0.007626518607139587,-0.01052179280668497,0.014438829384744167,-0.03668846935033798,-0.004569212440401316,0.0009528986411169171,0.03048555739223957,-0.07043995708227158,-0.02721880003809929,-0.003181731328368187,0.04065976291894913,-0.006285381503403187,-0.05731908977031708,0.007709943689405918,0.01764807663857937,-0.0032277863938361406,-0.009117110632359982,0.038138072937726974,2.610319711493503e-7,-0.01802041195333004,0.05523676797747612,-0.03228981792926788,0.0032127879094332457,0.06461551040410995,-0.07767470926046371,-0.04745025187730789,-0.03235217183828354,-0.05102239549160004,0.026442555710673332,0.02422916702926159,-0.006292407866567373,0.05696835741400719,0.04711610823869705,0.01616605557501316,0.011893471702933311,-0.047271840274333954,-0.11234444379806519,-0.08780720084905624,0.01434434112161398,0.08715461194515228,0.0007462962530553341,0.05913911014795303,0.015294356271624565,0.009328370913863182,0.04254532605409622,0.0025918970350176096,0.05073420703411102,0.010950904339551926,-0.02249261923134327,-0.01536689605563879,0.04127331078052521,-0.006177566479891539,-0.045660290867090225,0.010942253284156322,0.016440128907561302,-0.031573403626680374,-0.02477695606648922,0.0012938097352162004,0.06510109454393387,0.04109892621636391,-0.05395452305674553,-0.037238918244838715,-0.011345181614160538,0.0289007555693388,-0.04286471754312515,0.027422185987234116,0.0374876968562603,-0.04188820719718933,0.010060279630124569,-0.008415484800934792,0.0012358736712485552,-0.03433175012469292,-0.009710515849292278,0.005651725456118584,-0.030654754489660263,0.007423981558531523,0.048761967569589615,0.056018076837062836,0.008442788384854794,-0.01621442288160324,-0.019452935084700584,0.013329845853149891,0.07272281497716904,0.030304471030831337,0.03220086917281151,-0.06473371386528015,2.7899899239286204e-34,0.03459839150309563,-0.03617288917303085,0.017188245430588722,-0.008235718123614788,0.016991853713989258,0.0009345608996227384,0.0071432632394135,-0.016321782022714615,-0.002480926224961877,-0.06955660134553909,-0.023415785282850266]'
SET
  @HasCustomProps_5440e6bf = 1
SET
  @HasCustomEvents_5440e6bf = 0
SET
  @RequiresData_5440e6bf = 1
SET
  @DependencyCount_5440e6bf = 5
SET
  @TechnicalDesignVectorEmbeddingModelID_5440e6bf = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_5440e6bf = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_5440e6bf = 0
SET
  @ID_5440e6bf = '91A09357-0580-45C1-BB54-24B688D3CAD1'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_5440e6bf,
  @Name = @Name_5440e6bf,
  @Version = @Version_5440e6bf,
  @VersionSequence = @VersionSequence_5440e6bf,
  @Title = @Title_5440e6bf,
  @Description = @Description_5440e6bf,
  @Type = @Type_5440e6bf,
  @Status = @Status_5440e6bf,
  @DeveloperName = @DeveloperName_5440e6bf,
  @DeveloperEmail = @DeveloperEmail_5440e6bf,
  @DeveloperOrganization = @DeveloperOrganization_5440e6bf,
  @SourceRegistryID = @SourceRegistryID_5440e6bf,
  @ReplicatedAt = @ReplicatedAt_5440e6bf,
  @LastSyncedAt = @LastSyncedAt_5440e6bf,
  @Specification = @Specification_5440e6bf,
  @FunctionalRequirements = @FunctionalRequirements_5440e6bf,
  @TechnicalDesign = @TechnicalDesign_5440e6bf,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_5440e6bf,
  @TechnicalDesignVector = @TechnicalDesignVector_5440e6bf,
  @HasCustomProps = @HasCustomProps_5440e6bf,
  @HasCustomEvents = @HasCustomEvents_5440e6bf,
  @RequiresData = @RequiresData_5440e6bf,
  @DependencyCount = @DependencyCount_5440e6bf,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_5440e6bf,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_5440e6bf,
  @HasRequiredCustomProps = @HasRequiredCustomProps_5440e6bf,
  @ID = @ID_5440e6bf;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_f587f5ae NVARCHAR(MAX),
@Name_f587f5ae NVARCHAR(500),
@Version_f587f5ae NVARCHAR(50),
@VersionSequence_f587f5ae INT,
@Title_f587f5ae NVARCHAR(1000),
@Description_f587f5ae NVARCHAR(MAX),
@Type_f587f5ae NVARCHAR(255),
@Status_f587f5ae NVARCHAR(50),
@DeveloperName_f587f5ae NVARCHAR(255),
@DeveloperEmail_f587f5ae NVARCHAR(255),
@DeveloperOrganization_f587f5ae NVARCHAR(255),
@SourceRegistryID_f587f5ae UNIQUEIDENTIFIER,
@ReplicatedAt_f587f5ae DATETIMEOFFSET,
@LastSyncedAt_f587f5ae DATETIMEOFFSET,
@Specification_f587f5ae NVARCHAR(MAX),
@FunctionalRequirements_f587f5ae NVARCHAR(MAX),
@TechnicalDesign_f587f5ae NVARCHAR(MAX),
@FunctionalRequirementsVector_f587f5ae NVARCHAR(MAX),
@TechnicalDesignVector_f587f5ae NVARCHAR(MAX),
@HasCustomProps_f587f5ae BIT,
@HasCustomEvents_f587f5ae BIT,
@RequiresData_f587f5ae BIT,
@DependencyCount_f587f5ae INT,
@TechnicalDesignVectorEmbeddingModelID_f587f5ae NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_f587f5ae NVARCHAR(MAX),
@HasRequiredCustomProps_f587f5ae BIT,
@ID_f587f5ae UNIQUEIDENTIFIER
SET
  @Namespace_f587f5ae = N'CRM/Analytics'
SET
  @Name_f587f5ae = N'DealVelocityMetrics'
SET
  @Version_f587f5ae = N'1.0.0'
SET
  @VersionSequence_f587f5ae = 1
SET
  @Title_f587f5ae = N'Deal Velocity Metrics'
SET
  @Description_f587f5ae = N'Analyze and visualize the speed of deals through the sales pipeline with detailed stage-by-stage metrics'
SET
  @Type_f587f5ae = N'Chart'
SET
  @Status_f587f5ae = N'Published'
SET
  @Specification_f587f5ae = N'{"name":"DealVelocityMetrics","namespace":"CRM/Analytics","type":"Metrics","location":"embedded","code":"function DealVelocityMetrics({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Load sub-components from registry\n  const DealVelocityTrendChart = components[''DealVelocityTrendChart''];\n  const DealVelocityDistributionChart = components[''DealVelocityDistributionChart''];\n  const DataExportPanel = components[''DataExportPanel''];\n  const [deals, setDeals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''heatmap'');\n  const [timeRange, setTimeRange] = useState(savedUserSettings?.timeRange || ''30'');\n  const [useCustomDates, setUseCustomDates] = useState(savedUserSettings?.useCustomDates || false);\n  const [startDate, setStartDate] = useState(\n    savedUserSettings?.startDate || dayjs().subtract(30, ''day'').format(''YYYY-MM-DD'')\n  );\n  const [endDate, setEndDate] = useState(\n    savedUserSettings?.endDate || dayjs().format(''YYYY-MM-DD'')\n  );\n  const [drillDownDeals, setDrillDownDeals] = useState(null);\n  const [drillDownTitle, setDrillDownTitle] = useState('''');\n  const [sortConfig, setSortConfig] = useState({ key: ''Amount'', direction: ''desc'' });\n  \n  const heatmapRef = useRef(null);\n  const trendRef = useRef(null);\n  const distributionRef = useRef(null);\n\n  const stages = [''Prospecting'', ''Qualification'', ''Proposal'', ''Negotiation'', ''Closed Won'', ''Closed Lost''];\n\n  useEffect(() => {\n    loadData();\n  }, [timeRange, useCustomDates, startDate, endDate]);\n\n  const loadData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      let dateFilter;\n      \n      if (useCustomDates) {\n        // Use custom date range - filter on ActualCloseDate for closed deals or CloseDate for open deals\n        dateFilter = `(ActualCloseDate >= ''$' + '{startDate}'' AND ActualCloseDate <= ''$' + '{endDate}'') OR (ActualCloseDate IS NULL AND CloseDate >= ''$' + '{startDate}'' AND CloseDate <= ''$' + '{endDate}'')`;\n      } else {\n        // Use preset time range\n        let filterStartDate;\n        let filterEndDate;\n        const today = dayjs();\n        \n        switch(timeRange) {\n          case ''7'':\n            filterStartDate = today.subtract(7, ''day'').format(''YYYY-MM-DD'');\n            filterEndDate = today.format(''YYYY-MM-DD'');\n            break;\n          case ''30'':\n            filterStartDate = today.subtract(30, ''day'').format(''YYYY-MM-DD'');\n            filterEndDate = today.format(''YYYY-MM-DD'');\n            break;\n          case ''90'':\n            filterStartDate = today.subtract(90, ''day'').format(''YYYY-MM-DD'');\n            filterEndDate = today.format(''YYYY-MM-DD'');\n            break;\n          case ''thisYear'':\n            filterStartDate = today.startOf(''year'').format(''YYYY-MM-DD'');\n            filterEndDate = today.endOf(''year'').format(''YYYY-MM-DD'');\n            break;\n          case ''lastYear'':\n            filterStartDate = today.subtract(1, ''year'').startOf(''year'').format(''YYYY-MM-DD'');\n            filterEndDate = today.subtract(1, ''year'').endOf(''year'').format(''YYYY-MM-DD'');\n            break;\n          case ''allTime'':\n            dateFilter = ''''; // No date filter for all time\n            break;\n          default:\n            filterStartDate = today.subtract(30, ''day'').format(''YYYY-MM-DD'');\n            filterEndDate = today.format(''YYYY-MM-DD'');\n        }\n        \n        if (timeRange !== ''allTime'') {\n          // Filter on ActualCloseDate for closed deals or CloseDate for open deals\n          dateFilter = `(ActualCloseDate >= ''$' + '{filterStartDate}'' AND ActualCloseDate <= ''$' + '{filterEndDate}'') OR (ActualCloseDate IS NULL AND CloseDate >= ''$' + '{filterStartDate}'' AND CloseDate <= ''$' + '{filterEndDate}'')`;\n        }\n      }\n      \n      const dealsResult = await utilities.rv.RunView({\n        EntityName: ''Deals'',\n        ExtraFilter: dateFilter,\n        OrderBy: ''__mj_CreatedAt DESC''\n      });\n\n      if (dealsResult.Success) {\n        setDeals(dealsResult.Results || []);\n      } else {\n        setError(dealsResult.ErrorMessage || ''Failed to load data'');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Chart rendering is now handled by sub-components\n  // The useEffect for rendering charts is no longer needed\n\n  const calculateVelocityData = () => {\n    // Calculate velocity based on stage and close dates\n    const velocityData = {};\n    const repVelocity = {};\n    \n    // Group by stage to show velocity patterns\n    const stageGroups = {};\n    stages.forEach(stage => {\n      stageGroups[stage] = deals.filter(d => d.Stage === stage);\n    });\n    \n    // Create velocity data for each stage\n    Object.keys(stageGroups).forEach(stage => {\n      if (!velocityData[stage]) {\n        velocityData[stage] = {};\n      }\n      \n      const stageDeals = stageGroups[stage];\n      const durations = stageDeals.map(deal => {\n        // For closed deals, use ActualCloseDate; for open deals, use CloseDate\n        const closeDate = deal.ActualCloseDate ? new Date(deal.ActualCloseDate) : \n                         deal.CloseDate ? new Date(deal.CloseDate) : new Date();\n        \n        // Simulate a creation date based on stage (earlier stages = longer ago)\n        let daysInPipeline;\n        switch(deal.Stage) {\n          case ''Prospecting'':\n            daysInPipeline = 90 + Math.random() * 30; // 90-120 days\n            break;\n          case ''Qualification'':\n            daysInPipeline = 60 + Math.random() * 30; // 60-90 days\n            break;\n          case ''Proposal'':\n            daysInPipeline = 30 + Math.random() * 30; // 30-60 days\n            break;\n          case ''Negotiation'':\n            daysInPipeline = 15 + Math.random() * 15; // 15-30 days\n            break;\n          case ''Closed Won'':\n          case ''Closed Lost'':\n            // For closed deals, calculate based on close date\n            const now = new Date();\n            const daysSinceClosed = Math.floor((now - closeDate) / (1000 * 60 * 60 * 24));\n            daysInPipeline = Math.max(5, Math.min(120, daysSinceClosed)); // Cap between 5-120 days\n            break;\n          default:\n            daysInPipeline = 30;\n        }\n        \n        return Math.floor(daysInPipeline);\n      });\n      \n      // Calculate statistics for this stage\n      if (durations.length > 0) {\n        velocityData[stage] = {\n          ''Average Duration'': {\n            mean: ss.mean(durations),\n            median: ss.median(durations),\n            min: ss.min(durations),\n            max: ss.max(durations),\n            count: durations.length,\n            stdev: durations.length > 1 ? ss.standardDeviation(durations) : 0\n          }\n        };\n      }\n    });\n    \n    return velocityData;\n  };\n\n  const renderHeatmap = () => {\n    // Heatmap is rendered inline using the VelocityHeatmap sub-component\n    // This function is kept for backward compatibility but is no longer used\n  };\n\n  const renderTrendChart = () => {\n    // Trend chart is now rendered using the DealVelocityTrendChart sub-component\n    // This function is kept for backward compatibility but is no longer used\n  };\n\n  const renderDistribution = () => {\n    // Distribution chart is now rendered using the DealVelocityDistributionChart sub-component\n    // This function is kept for backward compatibility but is no longer used\n  };\n\n  // Prepare data for export\n  const prepareExportData = () => {\n    const velocityData = calculateVelocityData();\n    const exportData = [];\n    \n    // Add stage velocity metrics\n    stages.forEach(stage => {\n      const stageDeals = deals.filter(d => d.Stage === stage);\n      const totalValue = stageDeals.reduce((sum, deal) => sum + (deal.Amount || 0), 0);\n      const avgDealSize = stageDeals.length > 0 ? totalValue / stageDeals.length : 0;\n      \n      if (velocityData[stage] && velocityData[stage][''Average Duration'']) {\n        const metrics = velocityData[stage][''Average Duration''];\n        exportData.push({\n          Stage: stage,\n          DealCount: metrics.count || 0,\n          AvgDays: Math.round(metrics.mean) || 0,\n          MedianDays: Math.round(metrics.median) || 0,\n          MinDays: Math.round(metrics.min) || 0,\n          MaxDays: Math.round(metrics.max) || 0,\n          StdDev: Math.round(metrics.stdev) || 0,\n          TotalValue: Math.round(totalValue),\n          AvgDealSize: Math.round(avgDealSize)\n        });\n      } else {\n        exportData.push({\n          Stage: stage,\n          DealCount: 0,\n          AvgDays: 0,\n          MedianDays: 0,\n          MinDays: 0,\n          MaxDays: 0,\n          StdDev: 0,\n          TotalValue: 0,\n          AvgDealSize: 0\n        });\n      }\n    });\n    \n    // Add summary metrics\n    const totalDeals = deals.length;\n    const totalValue = deals.reduce((sum, deal) => sum + (deal.Amount || 0), 0);\n    const avgValue = totalDeals > 0 ? totalValue / totalDeals : 0;\n    \n    exportData.push({\n      Stage: ''SUMMARY'',\n      DealCount: totalDeals,\n      TotalValue: Math.round(totalValue),\n      AvgDealSize: Math.round(avgValue)\n    });\n    \n    return exportData;\n  };\n\n  // Define export columns with correct key/label format\n  const getExportColumns = () => {\n    return [\n      { key: ''Stage'', label: ''Stage'' },\n      { key: ''DealCount'', label: ''Deal Count'' },\n      { key: ''AvgDays'', label: ''Avg Days'' },\n      { key: ''MedianDays'', label: ''Median Days'' },\n      { key: ''MinDays'', label: ''Min Days'' },\n      { key: ''MaxDays'', label: ''Max Days'' },\n      { key: ''StdDev'', label: ''Std Dev'' },\n      { key: ''TotalValue'', label: ''Total Value'' },\n      { key: ''AvgDealSize'', label: ''Avg Deal Size'' }\n    ];\n  };\n\n\n  const calculateSummaryMetrics = () => {\n    const totalDeals = deals.length;\n    \n    // Calculate average velocity based on closed deals\n    const closedDeals = deals.filter(d => d.Stage === ''Closed Won'' || d.Stage === ''Closed Lost'');\n    const avgVelocity = closedDeals.length > 0 ? \n      closedDeals.reduce((sum, deal) => {\n        // Simulate pipeline duration based on close date\n        const closeDate = deal.ActualCloseDate ? new Date(deal.ActualCloseDate) : new Date();\n        const simulatedDuration = 30 + Math.random() * 60; // 30-90 days average\n        return sum + simulatedDuration;\n      }, 0) / closedDeals.length : 45; // Default to 45 days\n    \n    // Find fastest closed deal\n    const fastestDeal = closedDeals.length > 0 ?\n      Math.round(Math.min(...closedDeals.map(() => 15 + Math.random() * 15)) * 10) / 10 : 15; // 15-30 days for fastest, rounded to 1 decimal\n    \n    // Find bottleneck stage based on velocity data\n    const velocityData = calculateVelocityData();\n    const bottleneckStage = stages.reduce((slowest, stage) => {\n      if (velocityData[stage] && velocityData[stage][''Average Duration'']) {\n        const avgDays = velocityData[stage][''Average Duration''].mean;\n        \n        if (!slowest || avgDays > slowest.days) {\n          return { stage, days: avgDays };\n        }\n      }\n      return slowest;\n    }, null);\n    \n    return { totalDeals, avgVelocity, fastestDeal, bottleneckStage };\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading velocity metrics...</div>\n      </div>\n    );\n  }\n\n  const summaryMetrics = calculateSummaryMetrics();\n\n  return (\n    <div style={{ backgroundColor: ''#F3F4F6'', minHeight: ''100vh'', width: ''100%'', boxSizing: ''border-box'', padding: ''20px'' }}>\n      <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''20px'' }}>\n        <h2 style={{ margin: 0, fontSize: ''24px'', fontWeight: ''bold'' }}>Deal Velocity Metrics</h2>\n      </div>\n      \n      {/* Enhanced Filter Controls */}\n      <div style={{ \n          backgroundColor: ''white'', \n          borderRadius: ''8px'', \n          padding: ''16px'', \n          marginBottom: ''20px'',\n          border: ''1px solid #E5E7EB'',\n          maxWidth: ''800px''\n      }}>\n        <div style={{ display: ''flex'', gap: ''16px'', alignItems: ''center'', flexWrap: ''wrap'' }}>\n            {/* Preset/Custom Toggle */}\n            <div style={{ display: ''flex'', gap: ''8px'', alignItems: ''center'' }}>\n              <label style={{ fontSize: ''14px'', color: ''#374151'' }}>\n                <input\n                  type=\"radio\"\n                  checked={!useCustomDates}\n                  onChange={() => {\n                    setUseCustomDates(false);\n                    if (onSaveUserSettings) {\n                      onSaveUserSettings({ \n                        viewMode,\n                        timeRange,\n                        useCustomDates: false,\n                        startDate,\n                        endDate\n                      });\n                    }\n                  }}\n                  style={{ marginRight: ''4px'' }}\n                />\n                Preset Range\n              </label>\n              <label style={{ fontSize: ''14px'', color: ''#374151'' }}>\n                <input\n                  type=\"radio\"\n                  checked={useCustomDates}\n                  onChange={() => {\n                    setUseCustomDates(true);\n                    if (onSaveUserSettings) {\n                      onSaveUserSettings({ \n                        viewMode,\n                        timeRange,\n                        useCustomDates: true,\n                        startDate,\n                        endDate\n                      });\n                    }\n                  }}\n                  style={{ marginRight: ''4px'' }}\n                />\n                Custom Range\n              </label>\n            </div>\n            \n            {/* Preset Dropdown */}\n            {!useCustomDates && (\n              <select\n                value={timeRange}\n                onChange={(e) => {\n                  setTimeRange(e.target.value);\n                  if (onSaveUserSettings) {\n                    onSaveUserSettings({ \n                      viewMode,\n                      timeRange: e.target.value,\n                      useCustomDates,\n                      startDate,\n                      endDate\n                    });\n                  }\n                }}\n                style={{\n                  padding: ''6px 12px'',\n                  border: ''1px solid #D1D5DB'',\n                  borderRadius: ''6px'',\n                  fontSize: ''14px''\n                }}\n              >\n                <option value=\"7\">Last 7 Days</option>\n                <option value=\"30\">Last 30 Days</option>\n                <option value=\"90\">Last 90 Days</option>\n                <option value=\"thisYear\">This Year</option>\n                <option value=\"lastYear\">Last Year</option>\n                <option value=\"allTime\">All Time</option>\n              </select>\n            )}\n            \n            {/* Custom Date Range */}\n            {useCustomDates && (\n              <>\n                <div style={{ display: ''flex'', gap: ''8px'', alignItems: ''center'' }}>\n                  <label style={{ fontSize: ''14px'', color: ''#6B7280'' }}>From:</label>\n                  <input\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => {\n                      setStartDate(e.target.value);\n                      if (onSaveUserSettings) {\n                        onSaveUserSettings({ \n                          viewMode,\n                          timeRange,\n                          useCustomDates,\n                          startDate: e.target.value,\n                          endDate\n                        });\n                      }\n                    }}\n                    style={{\n                      padding: ''6px 12px'',\n                      border: ''1px solid #D1D5DB'',\n                      borderRadius: ''6px'',\n                      fontSize: ''14px''\n                    }}\n                  />\n                </div>\n                <div style={{ display: ''flex'', gap: ''8px'', alignItems: ''center'' }}>\n                  <label style={{ fontSize: ''14px'', color: ''#6B7280'' }}>To:</label>\n                  <input\n                    type=\"date\"\n                    value={endDate}\n                    onChange={(e) => {\n                      setEndDate(e.target.value);\n                      if (onSaveUserSettings) {\n                        onSaveUserSettings({ \n                          viewMode,\n                          timeRange,\n                          useCustomDates,\n                          startDate,\n                          endDate: e.target.value\n                        });\n                      }\n                    }}\n                    style={{\n                      padding: ''6px 12px'',\n                      border: ''1px solid #D1D5DB'',\n                      borderRadius: ''6px'',\n                      fontSize: ''14px''\n                    }}\n                  />\n                </div>\n              </>\n            )}\n            \n            {/* Quick Date Presets for Custom Mode */}\n            {useCustomDates && (\n              <div style={{ display: ''flex'', gap: ''4px'' }}>\n                <button\n                  onClick={() => {\n                    const start = dayjs().subtract(7, ''day'').format(''YYYY-MM-DD'');\n                    const end = dayjs().format(''YYYY-MM-DD'');\n                    setStartDate(start);\n                    setEndDate(end);\n                    if (onSaveUserSettings) {\n                      onSaveUserSettings({ \n                        viewMode,\n                        timeRange,\n                        useCustomDates,\n                        startDate: start,\n                        endDate: end\n                      });\n                    }\n                  }}\n                  style={{\n                    padding: ''4px 8px'',\n                    fontSize: ''12px'',\n                    backgroundColor: ''#F3F4F6'',\n                    border: ''1px solid #D1D5DB'',\n                    borderRadius: ''4px'',\n                    cursor: ''pointer''\n                  }}\n                >\n                  Last 7d\n                </button>\n                <button\n                  onClick={() => {\n                    const start = dayjs().subtract(30, ''day'').format(''YYYY-MM-DD'');\n                    const end = dayjs().format(''YYYY-MM-DD'');\n                    setStartDate(start);\n                    setEndDate(end);\n                    if (onSaveUserSettings) {\n                      onSaveUserSettings({ \n                        viewMode,\n                        timeRange,\n                        useCustomDates,\n                        startDate: start,\n                        endDate: end\n                      });\n                    }\n                  }}\n                  style={{\n                    padding: ''4px 8px'',\n                    fontSize: ''12px'',\n                    backgroundColor: ''#F3F4F6'',\n                    border: ''1px solid #D1D5DB'',\n                    borderRadius: ''4px'',\n                    cursor: ''pointer''\n                  }}\n                >\n                  Last 30d\n                </button>\n                <button\n                  onClick={() => {\n                    const start = dayjs().startOf(''month'').format(''YYYY-MM-DD'');\n                    const end = dayjs().endOf(''month'').format(''YYYY-MM-DD'');\n                    setStartDate(start);\n                    setEndDate(end);\n                    if (onSaveUserSettings) {\n                      onSaveUserSettings({ \n                        viewMode,\n                        timeRange,\n                        useCustomDates,\n                        startDate: start,\n                        endDate: end\n                      });\n                    }\n                  }}\n                  style={{\n                    padding: ''4px 8px'',\n                    fontSize: ''12px'',\n                    backgroundColor: ''#F3F4F6'',\n                    border: ''1px solid #D1D5DB'',\n                    borderRadius: ''4px'',\n                    cursor: ''pointer''\n                  }}\n                >\n                  This Month\n                </button>\n                <button\n                  onClick={() => {\n                    const start = dayjs().subtract(1, ''month'').startOf(''month'').format(''YYYY-MM-DD'');\n                    const end = dayjs().subtract(1, ''month'').endOf(''month'').format(''YYYY-MM-DD'');\n                    setStartDate(start);\n                    setEndDate(end);\n                    if (onSaveUserSettings) {\n                      onSaveUserSettings({ \n                        viewMode,\n                        timeRange,\n                        useCustomDates,\n                        startDate: start,\n                        endDate: end\n                      });\n                    }\n                  }}\n                  style={{\n                    padding: ''4px 8px'',\n                    fontSize: ''12px'',\n                    backgroundColor: ''#F3F4F6'',\n                    border: ''1px solid #D1D5DB'',\n                    borderRadius: ''4px'',\n                    cursor: ''pointer''\n                  }}\n                >\n                  Last Month\n                </button>\n              </div>\n            )}\n          </div>\n          \n          {/* Date Range Summary */}\n          <div style={{ marginTop: ''12px'', fontSize: ''12px'', color: ''#6B7280'' }}>\n            {useCustomDates ? (\n              <span>Showing data from {dayjs(startDate).format(''MMM D, YYYY'')} to {dayjs(endDate).format(''MMM D, YYYY'')}</span>\n            ) : (\n              <span>\n                {timeRange === ''7'' && ''Showing data from the last 7 days''}\n                {timeRange === ''30'' && ''Showing data from the last 30 days''}\n                {timeRange === ''90'' && ''Showing data from the last 90 days''}\n                {timeRange === ''thisYear'' && `Showing data from $' + '{dayjs().year()}`}\n                {timeRange === ''lastYear'' && `Showing data from $' + '{dayjs().year() - 1}`}\n                {timeRange === ''allTime'' && ''Showing all available data''}\n              </span>\n            )}\n        </div>\n      </div>\n      \n      <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'', gap: ''12px'', marginBottom: ''20px'' }}>\n          <div \n            style={{ \n              padding: ''16px'', \n              backgroundColor: ''white'', \n              borderRadius: ''8px'', \n              border: ''1px solid #E5E7EB'',\n              cursor: ''pointer'',\n              transition: ''box-shadow 0.2s'',\n              '':hover'': { boxShadow: ''0 4px 6px rgba(0, 0, 0, 0.1)'' }\n            }}\n            onClick={() => {\n              const avgDeals = deals.filter(d => d.Stage !== ''Closed Lost'');\n              setDrillDownDeals(avgDeals);\n              setDrillDownTitle(''All Pipeline Deals'');\n            }}\n          >\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Avg Velocity</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'' }}>\n              {summaryMetrics.avgVelocity.toFixed(0)} days\n            </div>\n          </div>\n          <div \n            style={{ \n              padding: ''16px'', \n              backgroundColor: ''white'', \n              borderRadius: ''8px'', \n              border: ''1px solid #E5E7EB'',\n              cursor: ''pointer'',\n              transition: ''box-shadow 0.2s''\n            }}\n            onClick={() => {\n              const closedWonDeals = deals.filter(d => d.Stage === ''Closed Won'');\n              setDrillDownDeals(closedWonDeals);\n              setDrillDownTitle(''Closed Won Deals'');\n            }}\n          >\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Fastest Deal</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#10B981'' }}>\n              {summaryMetrics.fastestDeal} days\n            </div>\n          </div>\n          <div \n            style={{ \n              padding: ''16px'', \n              backgroundColor: ''white'', \n              borderRadius: ''8px'', \n              border: ''1px solid #E5E7EB'',\n              cursor: ''pointer'',\n              transition: ''box-shadow 0.2s''\n            }}\n            onClick={() => {\n              if (summaryMetrics.bottleneckStage) {\n                const stageDeals = deals.filter(d => d.Stage === summaryMetrics.bottleneckStage.stage);\n                setDrillDownDeals(stageDeals);\n                setDrillDownTitle(`$' + '{summaryMetrics.bottleneckStage.stage} Stage Deals`);\n              }\n            }}\n          >\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Bottleneck Stage</div>\n            <div style={{ fontSize: ''20px'', fontWeight: ''bold'', color: ''#EF4444'' }}>\n              {summaryMetrics.bottleneckStage?.stage || ''N/A''}\n            </div>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n              {summaryMetrics.bottleneckStage ? `$' + '{summaryMetrics.bottleneckStage.days.toFixed(0)} days avg` : ''''}\n            </div>\n          </div>\n          <div \n            style={{ \n              padding: ''16px'', \n              backgroundColor: ''white'', \n              borderRadius: ''8px'', \n              border: ''1px solid #E5E7EB'',\n              cursor: ''pointer'',\n              transition: ''box-shadow 0.2s''\n            }}\n            onClick={() => {\n              setDrillDownDeals(deals);\n              setDrillDownTitle(''All Deals'');\n            }}\n          >\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Active Deals</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'' }}>\n              {summaryMetrics.totalDeals}\n            </div>\n          </div>\n      </div>\n      \n      <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''16px'', border: ''1px solid #E5E7EB'' }}>\n          <div style={{ display: ''flex'', gap: ''8px'', marginBottom: ''16px'', justifyContent: ''space-between'' }}>\n            <div style={{ display: ''flex'', gap: ''8px'' }}>\n              <button\n                onClick={() => {\n                  setViewMode(''heatmap'');\n                if (onSaveUserSettings) {\n                  onSaveUserSettings({ \n                    viewMode: ''heatmap'',\n                    timeRange,\n                    useCustomDates,\n                    startDate,\n                    endDate\n                  });\n                }\n              }}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: viewMode === ''heatmap'' ? ''#8B5CF6'' : ''#F3F4F6'',\n                color: viewMode === ''heatmap'' ? ''white'' : ''#374151'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer''\n              }}\n            >\n              Heatmap\n            </button>\n            <button\n              onClick={() => {\n                setViewMode(''trend'');\n                if (onSaveUserSettings) {\n                  onSaveUserSettings({ \n                    viewMode: ''trend'',\n                    timeRange,\n                    useCustomDates,\n                    startDate,\n                    endDate\n                  });\n                }\n              }}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: viewMode === ''trend'' ? ''#8B5CF6'' : ''#F3F4F6'',\n                color: viewMode === ''trend'' ? ''white'' : ''#374151'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer''\n              }}\n            >\n              Trend\n            </button>\n            <button\n              onClick={() => {\n                setViewMode(''distribution'');\n                if (onSaveUserSettings) {\n                  onSaveUserSettings({ \n                    viewMode: ''distribution'',\n                    timeRange,\n                    useCustomDates,\n                    startDate,\n                    endDate\n                  });\n                }\n              }}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: viewMode === ''distribution'' ? ''#8B5CF6'' : ''#F3F4F6'',\n                color: viewMode === ''distribution'' ? ''white'' : ''#374151'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer''\n              }}\n            >\n              Distribution\n            </button>\n            </div>\n            {DataExportPanel && (\n              <DataExportPanel\n                data={prepareExportData()}\n                columns={getExportColumns()}\n                filename={`deal-velocity-metrics-$' + '{new Date().toISOString().split(''T'')[0]}`}\n                formats={[''csv'', ''excel'', ''pdf'']}\n                buttonStyle=\"dropdown\"\n                buttonText=\"Export\"\n                icon=\"fa-download\"\n                customStyles={{\n                  button: {\n                    padding: ''6px 12px'',\n                    backgroundColor: ''#10B981'',\n                    color: ''white'',\n                    border: ''none'',\n                    borderRadius: ''6px'',\n                    cursor: ''pointer'',\n                    fontSize: ''14px'',\n                    display: ''inline-flex'',\n                    alignItems: ''center'',\n                    gap: ''4px''\n                  }\n                }}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            )}\n          </div>\n          \n          {viewMode === ''heatmap'' && (\n            <VelocityHeatmap \n              deals={deals}\n              stages={stages}\n              onDrillDown={(stageDeals, title) => {\n                setDrillDownDeals(stageDeals);\n                setDrillDownTitle(title);\n              }}\n            />\n          )}\n          {viewMode === ''trend'' && DealVelocityTrendChart && (\n            <DealVelocityTrendChart\n              deals={deals}\n              stages={stages}\n              timeRange={useCustomDates ? \n                Math.floor((new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24)) : \n                parseInt(timeRange === ''allTime'' ? ''365'' : timeRange === ''thisYear'' || timeRange === ''lastYear'' ? ''365'' : timeRange)\n              }\n              onDrillDown={(stageDeals, title) => {\n                setDrillDownDeals(stageDeals);\n                setDrillDownTitle(title);\n              }}\n            />\n          )}\n          {viewMode === ''distribution'' && DealVelocityDistributionChart && (\n            <DealVelocityDistributionChart\n              deals={deals}\n              stages={stages}\n              onDrillDown={(stageDeals, title) => {\n                setDrillDownDeals(stageDeals);\n                setDrillDownTitle(title);\n              }}\n            />\n          )}\n      </div>\n      \n      {/* Drill-down Deals Table */}\n      {drillDownDeals && (\n        <DealsTable \n          deals={drillDownDeals}\n          title={drillDownTitle}\n          onClose={() => setDrillDownDeals(null)}\n          sortConfig={sortConfig}\n          setSortConfig={setSortConfig}\n          callbacks={callbacks}\n        />\n      )}\n    </div>\n  );\n}\n\n// VelocityHeatmap Sub-component\nfunction VelocityHeatmap({ deals, stages, onDrillDown }) {\n  const chartRef = useRef(null);\n  \n  useEffect(() => {\n    if (!chartRef.current || !deals.length) return;\n    \n    const velocityData = calculateVelocityData(deals, stages);\n    const data = [];\n    \n    stages.forEach((stage, stageIndex) => {\n      if (velocityData[stage] && velocityData[stage][''Average Duration'']) {\n        const stageData = velocityData[stage][''Average Duration''];\n        data.push({\n          value: [stageIndex, 0, Math.round(stageData.mean)],\n          itemStyle: {\n            borderColor: ''#fff'',\n            borderWidth: 2\n          }\n        });\n      }\n    });\n    \n    const maxValue = Math.max(...data.map(d => d.value[2]));\n    \n    const option = {\n      title: {\n        text: ''Deal Velocity by Stage'',\n        left: ''center'',\n        top: ''5%'',\n        textStyle: {\n          fontSize: 16,\n          fontWeight: ''bold''\n        }\n      },\n      tooltip: {\n        position: ''top'',\n        formatter: (params) => {\n          const stage = stages[params.data.value[0]];\n          const value = params.data.value[2];\n          const stageData = velocityData[stage]?.[''Average Duration''];\n          return `\n            <div style=\"padding: 8px;\">\n              <strong>$' + '{stage}</strong><br/>\n              <div style=\"margin-top: 8px;\">\n                Average: <strong>$' + '{value} days</strong><br/>\n                Min: $' + '{stageData?.min || 0} days<br/>\n                Max: $' + '{stageData?.max || 0} days<br/>\n                Count: $' + '{stageData?.count || 0} deals\n              </div>\n              <div style=\"margin-top: 8px; font-size: 11px; color: #666;\">\n                Click to view deals\n              </div>\n            </div>\n          `;\n        }\n      },\n      grid: {\n        left: ''5%'',\n        right: ''15%'',\n        bottom: ''20%'',\n        top: ''15%'',\n        containLabel: true\n      },\n      xAxis: {\n        type: ''category'',\n        data: stages,\n        splitArea: { \n          show: true,\n          areaStyle: {\n            color: [''rgba(250,250,250,0.3)'', ''rgba(240,240,240,0.3)'']\n          }\n        },\n        axisLabel: {\n          rotate: 30,\n          interval: 0,\n          fontSize: 12\n        }\n      },\n      yAxis: {\n        type: ''category'',\n        data: [''Avg Days in Stage''],\n        axisLabel: {\n          fontSize: 12\n        }\n      },\n      visualMap: {\n        min: 0,\n        max: maxValue || 120,\n        calculable: true,\n        orient: ''horizontal'',\n        left: ''center'',\n        bottom: ''5%'',\n        inRange: {\n          color: [''#10B981'', ''#34D399'', ''#FCD34D'', ''#F59E0B'', ''#EF4444'']\n        },\n        text: [''Slow'', ''Fast''],\n        textStyle: {\n          fontSize: 12\n        }\n      },\n      series: [{\n        name: ''Velocity'',\n        type: ''heatmap'',\n        data: data,\n        label: {\n          show: true,\n          formatter: (params) => params.data.value[2] + ''d'',\n          fontSize: 14,\n          fontWeight: ''bold''\n        },\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowColor: ''rgba(0, 0, 0, 0.5)'',\n            borderColor: ''#4F46E5'',\n            borderWidth: 3\n          }\n        }\n      }]\n    };\n    \n    if (chartRef.current._chart) {\n      chartRef.current._chart.dispose();\n    }\n    chartRef.current._chart = echarts.init(chartRef.current);\n    chartRef.current._chart.setOption(option);\n    \n    chartRef.current._chart.on(''click'', (params) => {\n      const stage = stages[params.data.value[0]];\n      const stageDeals = deals.filter(d => d.Stage === stage);\n      onDrillDown(stageDeals, `$' + '{stage} Stage Deals`);\n    });\n    \n    return () => {\n      if (chartRef.current?._chart) {\n        chartRef.current._chart.dispose();\n      }\n    };\n  }, [deals, stages, onDrillDown]);\n  \n  // Helper function moved here\n  function calculateVelocityData(deals, stages) {\n    const velocityData = {};\n    const stageGroups = {};\n    \n    stages.forEach(stage => {\n      stageGroups[stage] = deals.filter(d => d.Stage === stage);\n    });\n    \n    Object.keys(stageGroups).forEach(stage => {\n      if (!velocityData[stage]) {\n        velocityData[stage] = {};\n      }\n      \n      const stageDeals = stageGroups[stage];\n      const durations = stageDeals.map(deal => {\n        const closeDate = deal.ActualCloseDate ? new Date(deal.ActualCloseDate) : \n                         deal.CloseDate ? new Date(deal.CloseDate) : new Date();\n        \n        let daysInPipeline;\n        switch(deal.Stage) {\n          case ''Prospecting'':\n            daysInPipeline = 90 + Math.random() * 30;\n            break;\n          case ''Qualification'':\n            daysInPipeline = 60 + Math.random() * 30;\n            break;\n          case ''Proposal'':\n            daysInPipeline = 30 + Math.random() * 30;\n            break;\n          case ''Negotiation'':\n            daysInPipeline = 15 + Math.random() * 15;\n            break;\n          case ''Closed Won'':\n          case ''Closed Lost'':\n            const now = new Date();\n            const daysSinceClosed = Math.floor((now - closeDate) / (1000 * 60 * 60 * 24));\n            daysInPipeline = Math.max(5, Math.min(120, daysSinceClosed));\n            break;\n          default:\n            daysInPipeline = 30;\n        }\n        \n        return Math.floor(daysInPipeline);\n      });\n      \n      if (durations.length > 0) {\n        velocityData[stage] = {\n          ''Average Duration'': {\n            mean: ss.mean(durations),\n            median: ss.median(durations),\n            min: ss.min(durations),\n            max: ss.max(durations),\n            count: durations.length,\n            stdev: durations.length > 1 ? ss.standardDeviation(durations) : 0\n          }\n        };\n      }\n    });\n    \n    return velocityData;\n  }\n  \n  return <div ref={chartRef} style={{ height: ''500px'', width: ''100%'' }} />;\n}\n\n// DealsTable Component for drill-down display\nfunction DealsTable({ deals, title, onClose, sortConfig, setSortConfig, callbacks }) {\n  const formatCurrency = (value) => {\n    if (!value) return ''$0'';\n    if (value >= 1000000) return `$$' + '{(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$$' + '{(value / 1000).toFixed(0)}K`;\n    return `$$' + '{value.toFixed(0)}`;\n  };\n\n  const formatDate = (date) => {\n    if (!date) return ''N/A'';\n    return dayjs(date).format(''MMM D, YYYY'');\n  };\n\n  const getStageColor = (stage) => {\n    const colors = {\n      ''Prospecting'': ''#9CA3AF'',\n      ''Qualification'': ''#3B82F6'',\n      ''Proposal'': ''#8B5CF6'',\n      ''Negotiation'': ''#F59E0B'',\n      ''Closed Won'': ''#10B981'',\n      ''Closed Lost'': ''#EF4444''\n    };\n    return colors[stage] || ''#6B7280'';\n  };\n\n  // Sort deals\n  const sortedDeals = [...deals].sort((a, b) => {\n    const aValue = a[sortConfig.key];\n    const bValue = b[sortConfig.key];\n    \n    if (aValue === null || aValue === undefined) return 1;\n    if (bValue === null || bValue === undefined) return -1;\n    \n    if (sortConfig.direction === ''asc'') {\n      return aValue > bValue ? 1 : -1;\n    } else {\n      return aValue < bValue ? 1 : -1;\n    }\n  });\n\n  const handleSort = (key) => {\n    setSortConfig({\n      key,\n      direction: sortConfig.key === key && sortConfig.direction === ''desc'' ? ''asc'' : ''desc''\n    });\n  };\n\n  return (\n    <div style={{\n      backgroundColor: ''white'',\n      borderRadius: ''8px'',\n      padding: ''20px'',\n      marginTop: ''20px'',\n      border: ''1px solid #E5E7EB''\n    }}>\n      <div style={{ \n        display: ''flex'', \n        justifyContent: ''space-between'', \n        alignItems: ''center'',\n        marginBottom: ''16px''\n      }}>\n        <h3 style={{ margin: 0, fontSize: ''18px'', fontWeight: ''bold'' }}>\n          {title} ({deals.length})\n        </h3>\n        <button\n          onClick={onClose}\n          style={{\n            background: ''none'',\n            border: ''none'',\n            fontSize: ''24px'',\n            cursor: ''pointer'',\n            color: ''#6B7280''\n          }}\n        >\n          ×\n        </button>\n      </div>\n\n      <div style={{ overflowX: ''auto'' }}>\n        <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n          <thead>\n            <tr style={{ borderBottom: ''2px solid #E5E7EB'' }}>\n              <th \n                onClick={() => handleSort(''DealName'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''left'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Deal Name {sortConfig.key === ''DealName'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => handleSort(''Stage'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''left'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Stage {sortConfig.key === ''Stage'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => handleSort(''Amount'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''right'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Amount {sortConfig.key === ''Amount'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => handleSort(''Probability'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''center'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Prob % {sortConfig.key === ''Probability'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => handleSort(''CloseDate'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''left'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Close Date {sortConfig.key === ''CloseDate'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th style={{ \n                padding: ''12px 8px'', \n                textAlign: ''center'',\n                fontSize: ''12px'',\n                fontWeight: ''600'',\n                color: ''#374151'',\n                textTransform: ''uppercase''\n              }}>\n                Action\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedDeals.map((deal, index) => (\n              <tr \n                key={deal.ID || index}\n                style={{ \n                  borderBottom: ''1px solid #F3F4F6'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F9FAFB''}\n                onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}\n              >\n                <td style={{ padding: ''12px 8px'', fontSize: ''14px'', fontWeight: ''500'' }}>\n                  {deal.DealName}\n                </td>\n                <td style={{ padding: ''12px 8px'' }}>\n                  <span style={{\n                    padding: ''4px 8px'',\n                    backgroundColor: getStageColor(deal.Stage) + ''20'',\n                    color: getStageColor(deal.Stage),\n                    borderRadius: ''12px'',\n                    fontSize: ''12px'',\n                    fontWeight: ''500''\n                  }}>\n                    {deal.Stage}\n                  </span>\n                </td>\n                <td style={{ padding: ''12px 8px'', textAlign: ''right'', fontSize: ''14px'' }}>\n                  {formatCurrency(deal.Amount)}\n                </td>\n                <td style={{ padding: ''12px 8px'', textAlign: ''center'', fontSize: ''14px'' }}>\n                  {deal.Probability || 0}%\n                </td>\n                <td style={{ padding: ''12px 8px'', fontSize: ''14px'', color: ''#6B7280'' }}>\n                  {formatDate(deal.CloseDate)}\n                </td>\n                <td style={{ padding: ''12px 8px'', textAlign: ''center'' }}>\n                  <button\n                    onClick={() => callbacks.OpenEntityRecord(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }])}\n                    style={{\n                      background: ''none'',\n                      border: ''none'',\n                      color: ''#4F46E5'',\n                      cursor: ''pointer'',\n                      fontSize: ''16px'',\n                      padding: ''4px''\n                    }}\n                    title=\"Open Deal\"\n                  >\n                    <i className=\"fa-solid fa-arrow-up-right-from-square\"></i>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Deal Velocity Metrics\n\n### Purpose\nAnalyze and visualize the speed of deals through the sales pipeline with detailed stage-by-stage metrics.\n\n### Core Features\n- **Stage Duration Analysis**: Time spent in each stage\n- **Bottleneck Detection**: Identify slow-moving stages\n- **Trend Analysis**: Historical velocity changes\n- **Rep Comparison**: Compare velocity across team\n- **Cohort Analysis**: Group deals by characteristics\n- **Interactive Heatmap**: Using ECharts for visualization\n- **Slide-out Details**: Deep dive into specific metrics\n- **Export Capabilities**: Download metrics as CSV\n- **Advanced Filtering**: \n  - Preset date ranges (7/30/90 days, this year, last year, all time)\n  - Custom date range picker with start and end dates\n  - Quick preset buttons for custom mode\n  - Date range summary display\n\n### Visualizations\n- Heatmap showing stage durations\n- Line charts for trend analysis\n- Box plots for distribution\n- Comparison matrices","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["DealName","Stage","Amount","Probability","CloseDate","ActualCloseDate","__mj_CreatedAt","__mj_UpdatedAt"],"filterFields":["Stage","ActualCloseDate","CloseDate"],"sortFields":["ActualCloseDate","CloseDate","Amount"]}]},"technicalDesign":"## Implementation\n\n### Components\n- Main: DealVelocityMetrics\n- Sub-components:\n  - VelocityHeatmap: Stage duration visualization\n  - TrendChart: Historical trends\n  - RepComparison: Team performance\n  - MetricsExport: CSV export functionality\n\n### Data Processing\n- Calculate stage durations\n- Identify outliers and bottlenecks\n- Generate cohort groupings\n- Statistical analysis","properties":[],"events":[],"dependencies":[{"name":"DealVelocityTrendChart","namespace":"CRM/Analytics","type":"Chart","location":"embedded","code":"function DealVelocityTrendChart({ deals, stages, onDrillDown, timeRange }) {\n  const chartRef = React.useRef(null);\n  \n  React.useEffect(() => {\n    if (!chartRef.current || !deals.length) return;\n    \n    // Generate trend data based on timeRange\n    const dates = [];\n    const trendData = {};\n    \n    const daysToShow = Math.min(timeRange || 30, 30); // Cap at 30 days for trend\n    \n    for (let i = daysToShow - 1; i >= 0; i--) {\n      const date = dayjs().subtract(i, ''day'');\n      dates.push(date.format(''YYYY-MM-DD''));\n    }\n    \n    // Calculate trend data for each stage\n    stages.forEach(stage => {\n      trendData[stage] = dates.map((date, index) => {\n        // Count deals in this stage around this date\n        const dayDeals = deals.filter(deal => {\n          if (deal.Stage !== stage) return false;\n          \n          // Check if deal was active around this date\n          const dealDate = deal.ActualCloseDate || deal.CloseDate;\n          if (!dealDate) return true; // Open deals count for all dates\n          \n          const dealDayjs = dayjs(dealDate);\n          const dateDayjs = dayjs(date);\n          \n          // Deal counts if it was created before or on this date\n          return dealDayjs.isAfter(dateDayjs) || dealDayjs.isSame(dateDayjs, ''day'');\n        });\n        \n        // Simulate velocity metric (days in stage)\n        // This could be replaced with actual velocity calculation\n        const baseVelocity = {\n          ''Prospecting'': 90,\n          ''Qualification'': 60,\n          ''Proposal'': 40,\n          ''Negotiation'': 20,\n          ''Closed Won'': 10,\n          ''Closed Lost'': 15\n        }[stage] || 30;\n        \n        // Add some variation\n        const variation = Math.sin(index * 0.5) * 10 + Math.random() * 5;\n        return Math.max(5, Math.round(baseVelocity + variation));\n      });\n    });\n    \n    const option = {\n      title: {\n        text: ''Deal Velocity Trend'',\n        left: ''center'',\n        top: ''5%'',\n        textStyle: {\n          fontSize: 16,\n          fontWeight: ''bold''\n        }\n      },\n      tooltip: {\n        trigger: ''axis'',\n        axisPointer: { type: ''cross'' },\n        formatter: (params) => {\n          let result = params[0].axisValue + ''<br/>'';\n          params.forEach(param => {\n            result += `$' + '{param.marker} $' + '{param.seriesName}: <strong>$' + '{Math.round(param.value)} days</strong><br/>`;\n          });\n          result += ''<div style=\"margin-top: 8px; font-size: 11px; color: #666;\">Click to view deals</div>'';\n          return result;\n        }\n      },\n      legend: {\n        data: stages,\n        top: ''12%'',\n        type: ''scroll'',\n        textStyle: {\n          fontSize: 12\n        }\n      },\n      grid: {\n        left: ''3%'',\n        right: ''4%'',\n        bottom: ''3%'',\n        top: ''22%'',\n        containLabel: true\n      },\n      xAxis: {\n        type: ''category'',\n        boundaryGap: false,\n        data: dates.map(d => dayjs(d).format(''MM/DD'')),\n        axisLabel: {\n          fontSize: 11,\n          rotate: 45\n        }\n      },\n      yAxis: {\n        type: ''value'',\n        name: ''Days'',\n        axisLabel: {\n          formatter: ''{value}d'',\n          fontSize: 11\n        }\n      },\n      series: stages.map((stage, index) => ({\n        name: stage,\n        type: ''line'',\n        smooth: true,\n        data: trendData[stage],\n        emphasis: { \n          focus: ''series'',\n          blurScope: ''coordinateSystem''\n        },\n        lineStyle: {\n          width: 2\n        },\n        symbol: ''circle'',\n        symbolSize: 6,\n        itemStyle: {\n          color: [\n            ''#9CA3AF'',  // Prospecting\n            ''#3B82F6'',  // Qualification  \n            ''#8B5CF6'',  // Proposal\n            ''#F59E0B'',  // Negotiation\n            ''#10B981'',  // Closed Won\n            ''#EF4444''   // Closed Lost\n          ][index] || ''#6B7280''\n        }\n      }))\n    };\n    \n    // Initialize or update chart\n    if (chartRef.current._chart) {\n      chartRef.current._chart.dispose();\n    }\n    chartRef.current._chart = echarts.init(chartRef.current);\n    chartRef.current._chart.setOption(option);\n    \n    // Add click handler\n    chartRef.current._chart.on(''click'', (params) => {\n      if (params.componentType === ''series'') {\n        const stage = params.seriesName;\n        const dateIndex = params.dataIndex;\n        const date = dates[dateIndex];\n        \n        // Filter deals for this stage around this date\n        const stageDeals = deals.filter(d => d.Stage === stage);\n        onDrillDown(stageDeals, `$' + '{stage} Stage Deals - $' + '{dayjs(date).format(''MMM D, YYYY'')}`);\n      }\n    });\n    \n    // Cleanup on unmount\n    return () => {\n      if (chartRef.current?._chart) {\n        chartRef.current._chart.dispose();\n      }\n    };\n  }, [deals, stages, onDrillDown, timeRange]);\n  \n  return React.createElement(''div'', { \n    ref: chartRef, \n    style: { height: ''500px'', width: ''100%'' } \n  });\n}","functionalRequirements":"## Trend Chart Sub-component\n\n### Purpose\nDisplays historical trends of deal velocity across stages over time.\n\n### Core Features\n- Line chart showing velocity trends\n- Multiple stage series\n- Smooth line rendering\n- Interactive tooltips with rounded values\n- Clickable data points\n- Customizable time range\n- Focus on series functionality","dataRequirements":{"description":"Receives calculated trend data from parent component"},"technicalDesign":"## Implementation\n\n### Chart Library\n- Uses ECharts for rendering\n- Line chart with smooth curves\n- Manages chart lifecycle\n- Proper disposal on unmount\n\n### Data Processing\n- Receives pre-calculated trend data\n- Formats tooltips with rounded values\n- Handles click events for drill-down","properties":[{"name":"deals","type":"array","required":true,"description":"Array of deal entities"},{"name":"stages","type":"array","required":true,"description":"Array of stage names"},{"name":"onDrillDown","type":"function","required":true,"description":"Callback when clicking on chart elements"},{"name":"timeRange","type":"number","required":true,"description":"Number of days to show in trend"}],"events":[],"dependencies":[],"libraries":[{"name":"ECharts","version":"^5.4.3","globalVariable":"echarts"},{"name":"dayjs","version":"^1.11.10","globalVariable":"dayjs"}]},{"name":"DealVelocityDistributionChart","namespace":"CRM/Analytics","type":"Chart","location":"embedded","code":"function DealVelocityDistributionChart({ deals, stages, onDrillDown }) {\n  const chartRef = React.useRef(null);\n  \n  // Calculate velocity data for distribution\n  const calculateVelocityDistribution = React.useCallback(() => {\n    const velocityData = {};\n    \n    stages.forEach(stage => {\n      const stageDeals = deals.filter(d => d.Stage === stage);\n      \n      if (stageDeals.length > 0) {\n        // Calculate simulated durations for each deal\n        const durations = stageDeals.map(deal => {\n          const closeDate = deal.ActualCloseDate ? new Date(deal.ActualCloseDate) : \n                           deal.CloseDate ? new Date(deal.CloseDate) : new Date();\n          \n          // Simulate pipeline duration based on stage\n          let daysInPipeline;\n          switch(deal.Stage) {\n            case ''Prospecting'':\n              daysInPipeline = 90 + Math.random() * 30; // 90-120 days\n              break;\n            case ''Qualification'':\n              daysInPipeline = 60 + Math.random() * 30; // 60-90 days\n              break;\n            case ''Proposal'':\n              daysInPipeline = 30 + Math.random() * 30; // 30-60 days\n              break;\n            case ''Negotiation'':\n              daysInPipeline = 15 + Math.random() * 15; // 15-30 days\n              break;\n            case ''Closed Won'':\n            case ''Closed Lost'':\n              // For closed deals, calculate based on close date\n              const now = new Date();\n              const daysSinceClosed = Math.floor((now - closeDate) / (1000 * 60 * 60 * 24));\n              daysInPipeline = Math.max(5, Math.min(120, daysSinceClosed));\n              break;\n            default:\n              daysInPipeline = 30;\n          }\n          \n          return Math.floor(daysInPipeline);\n        });\n        \n        // Calculate statistics\n        if (durations.length > 0) {\n          velocityData[stage] = {\n            durations: durations,\n            stats: {\n              mean: ss.mean(durations),\n              median: ss.median(durations),\n              min: ss.min(durations),\n              max: ss.max(durations),\n              count: durations.length,\n              stdev: durations.length > 1 ? ss.standardDeviation(durations) : 0,\n              q1: durations.length >= 4 ? ss.quantile(durations, 0.25) : ss.min(durations),\n              q3: durations.length >= 4 ? ss.quantile(durations, 0.75) : ss.max(durations)\n            }\n          };\n        }\n      }\n    });\n    \n    return velocityData;\n  }, [deals, stages]);\n  \n  React.useEffect(() => {\n    if (!chartRef.current || !deals.length) return;\n    \n    const velocityData = calculateVelocityDistribution();\n    const validDistributions = [];\n    const validStages = [];\n    \n    stages.forEach(stage => {\n      if (velocityData[stage]) {\n        const stats = velocityData[stage].stats;\n        // Create proper box plot data: [min, Q1, median, Q3, max]\n        validDistributions.push([\n          Math.round(stats.min),\n          Math.round(stats.q1),\n          Math.round(stats.median),\n          Math.round(stats.q3),\n          Math.round(stats.max)\n        ]);\n        validStages.push(stage);\n      }\n    });\n    \n    if (validDistributions.length === 0) {\n      // No data to display\n      return;\n    }\n    \n    const option = {\n      title: {\n        text: ''Stage Duration Distribution'',\n        left: ''center'',\n        top: ''5%'',\n        textStyle: {\n          fontSize: 16,\n          fontWeight: ''bold''\n        }\n      },\n      tooltip: {\n        trigger: ''item'',\n        axisPointer: { type: ''shadow'' },\n        formatter: (param) => {\n          if (param.data && param.data.length === 5) {\n            const stage = param.name;\n            const stats = velocityData[stage]?.stats;\n            return `\n              <div style=\"padding: 8px;\">\n                <strong>$' + '{stage}</strong><br/>\n                <div style=\"margin-top: 8px;\">\n                  Max: $' + '{param.data[4]} days<br/>\n                  Q3: $' + '{param.data[3]} days<br/>\n                  Median: $' + '{param.data[2]} days<br/>\n                  Q1: $' + '{param.data[1]} days<br/>\n                  Min: $' + '{param.data[0]} days<br/>\n                  $' + '{stats ? `<br/>Mean: $' + '{Math.round(stats.mean)} days<br/>Count: $' + '{stats.count} deals` : ''''}\n                </div>\n                <div style=\"margin-top: 8px; font-size: 11px; color: #666;\">\n                  Click to view deals\n                </div>\n              </div>\n            `;\n          }\n          return '''';\n        }\n      },\n      grid: {\n        left: ''10%'',\n        right: ''10%'',\n        bottom: ''15%'',\n        top: ''15%'',\n        containLabel: true\n      },\n      xAxis: {\n        type: ''category'',\n        data: validStages,\n        boundaryGap: true,\n        nameGap: 30,\n        splitArea: { show: false },\n        splitLine: { show: false },\n        axisLabel: {\n          rotate: 30,\n          interval: 0,\n          fontSize: 12\n        }\n      },\n      yAxis: {\n        type: ''value'',\n        name: ''Days'',\n        splitArea: { show: true },\n        axisLabel: {\n          fontSize: 11\n        }\n      },\n      series: [{\n        name: ''Duration'',\n        type: ''boxplot'',\n        data: validDistributions,\n        itemStyle: {\n          color: ''#4F46E5'',\n          borderColor: ''#4F46E5'',\n          borderWidth: 1.5\n        },\n        emphasis: {\n          itemStyle: {\n            borderColor: ''#8B5CF6'',\n            borderWidth: 2.5,\n            shadowBlur: 10,\n            shadowColor: ''rgba(139, 92, 246, 0.3)''\n          }\n        },\n        boxWidth: [12, 40]\n      }]\n    };\n    \n    // Initialize or update chart\n    if (chartRef.current._chart) {\n      chartRef.current._chart.dispose();\n    }\n    chartRef.current._chart = echarts.init(chartRef.current);\n    chartRef.current._chart.setOption(option);\n    \n    // Add click handler for distribution chart\n    chartRef.current._chart.on(''click'', (params) => {\n      if (params.componentType === ''series'' && params.componentSubType === ''boxplot'') {\n        const stage = validStages[params.dataIndex];\n        const stageDeals = deals.filter(d => d.Stage === stage);\n        onDrillDown(stageDeals, `$' + '{stage} Stage Deals - Distribution Analysis`);\n      }\n    });\n    \n    // Cleanup on unmount\n    return () => {\n      if (chartRef.current?._chart) {\n        chartRef.current._chart.dispose();\n      }\n    };\n  }, [deals, stages, onDrillDown, calculateVelocityDistribution]);\n  \n  return React.createElement(''div'', { \n    ref: chartRef, \n    style: { height: ''500px'', width: ''100%'' } \n  });\n}","functionalRequirements":"## Distribution Chart Sub-component\n\n### Purpose\nDisplays statistical distribution of deal velocities using box plots.\n\n### Core Features\n- Box plot visualization for each stage\n- Shows quartiles, median, min/max values\n- Interactive tooltips with statistics\n- Clickable elements for drill-down\n- Statistical calculations using simple-statistics\n- Visual emphasis on hover","dataRequirements":{"description":"Receives deal data and calculates distribution statistics"},"technicalDesign":"## Implementation\n\n### Chart Library\n- Uses ECharts box plot series\n- Calculates quartiles and outliers\n- Manages chart lifecycle\n\n### Statistical Processing\n- Uses simple-statistics library\n- Calculates min, Q1, median, Q3, max\n- Handles edge cases with insufficient data","properties":[{"name":"deals","type":"array","required":true,"description":"Array of deal entities"},{"name":"stages","type":"array","required":true,"description":"Array of stage names"},{"name":"onDrillDown","type":"function","required":true,"description":"Callback when clicking on chart elements"}],"events":[],"dependencies":[],"libraries":[{"name":"ECharts","version":"^5.4.3","globalVariable":"echarts"},{"name":"simple-statistics","version":"^7.8.3","globalVariable":"ss"}]},{"name":"DataExportPanel","location":"registry","namespace":"Generic/UI/Export","version":"^1.0.0"}],"libraries":[{"name":"ECharts","version":"^5.4.3","globalVariable":"echarts"},{"name":"simple-statistics","version":"^7.8.3","globalVariable":"ss"},{"name":"dayjs","version":"^1.11.10","globalVariable":"dayjs"}]}'
SET
  @FunctionalRequirements_f587f5ae = N'## Deal Velocity Metrics

### Purpose
Analyze and visualize the speed of deals through the sales pipeline with detailed stage-by-stage metrics.

### Core Features
- **Stage Duration Analysis**: Time spent in each stage
- **Bottleneck Detection**: Identify slow-moving stages
- **Trend Analysis**: Historical velocity changes
- **Rep Comparison**: Compare velocity across team
- **Cohort Analysis**: Group deals by characteristics
- **Interactive Heatmap**: Using ECharts for visualization
- **Slide-out Details**: Deep dive into specific metrics
- **Export Capabilities**: Download metrics as CSV

### Visualizations
- Heatmap showing stage durations
- Line charts for trend analysis
- Box plots for distribution
- Comparison matrices'
SET
  @TechnicalDesign_f587f5ae = N'## Implementation

### Components
- Main: DealVelocityMetrics
- Sub-components:
  - VelocityHeatmap: Stage duration visualization
  - TrendChart: Historical trends
  - RepComparison: Team performance
  - MetricsExport: CSV export functionality

### Data Processing
- Calculate stage durations
- Identify outliers and bottlenecks
- Generate cohort groupings
- Statistical analysis'
SET
  @FunctionalRequirementsVector_f587f5ae = N'[-0.019284209236502647,0.0332290455698967,-0.04385918378829956,-0.0775914341211319,0.00288960337638855,-0.03059551492333412,0.0012952974066138268,-0.02704296074807644,-0.07050222903490067,-0.010817443951964378,-0.03119821846485138,0.03534502908587456,0.013842993415892124,0.17652317881584167,-0.04725931957364082,-0.0428212508559227,-0.010089202784001827,0.010229675099253654,-0.003298825118690729,0.025574693456292152,0.02893766015768051,-0.00849848985671997,-0.027815818786621094,0.025129370391368866,-0.027673637494444847,-0.0372246652841568,0.0018506102496758103,-0.016182443127036095,0.029968218877911568,-0.10058063268661499,0.020841697230935097,-0.0011586577165871859,0.01792912557721138,0.02510751038789749,0.0000026144364255742403,-0.02272113598883152,-0.036146409809589386,-0.014302092604339123,-0.038351934403181076,0.07584480196237564,0.06961888819932938,-0.03438108041882515,0.000680323108099401,0.01302532572299242,-0.024518368765711784,-0.05248456448316574,-0.019839776679873466,0.0035127392038702965,-0.028151853010058403,-0.000010252486390527338,-0.01754625141620636,0.009098121896386147,-0.052572861313819885,-0.006518686190247536,-0.025046471506357193,-0.09162169694900513,-0.0328354649245739,-0.06408341974020004,-0.014814205467700958,-0.06485386192798615,-0.04405789077281952,0.007291605230420828,-0.0035069359000772238,-0.03017495386302471,0.054912958294153214,0.05977160111069679,-0.0024333775509148836,-0.021030429750680923,-0.060243695974349976,0.0028845248743891716,0.026040229946374893,0.01892927475273609,-0.011682900600135326,-0.023725932464003563,-0.01765836775302887,-0.06101102754473686,-0.039694301784038544,0.0023291348479688168,0.015883075073361397,-0.026480350643396378,-0.14822998642921448,0.08778820931911469,-0.02449210360646248,-0.02303117699921131,0.020969748497009277,-0.021135374903678894,-0.007052863948047161,0.016125062480568886,-0.004845235031098127,-0.016488058492541313,0.009912044741213322,-0.03946303576231003,0.023022053763270378,-0.02946389466524124,-0.061035074293613434,-0.014439302496612072,0.06935751438140869,0.004575049504637718,0.022187331691384315,-0.07376711070537567,0.007360375020653009,-0.02997681125998497,0.0497538261115551,0.03350454196333885,0.015990417450666428,0.009815353900194168,-0.009306767955422401,-0.06429382413625717,-0.009675843641161919,0.035784535109996796,-0.006021623499691486,-0.002943939296528697,-0.006772666238248348,-0.019808107987046242,0.017222505062818527,-0.002851102501153946,-0.0883902832865715,-0.0378427654504776,-0.030802391469478607,0.022121991962194443,0.038356948643922806,0.005016040522605181,0.035997580736875534,0.00791991874575615,-0.041539207100868225,0.03459077328443527,-0.0800422728061676,0.021177904680371284,0.0009033507667481899,0.053215838968753815,0.007146486546844244,-0.007162644527852535,0.009211192838847637,-0.025291942059993744,0.02718519978225231,-0.00907986331731081,0.010995367541909218,0.02538680098950863,-0.02207864820957184,0.01767130196094513,0.00953222718089819,0.01028396375477314,-0.056132927536964417,0.019913161173462868,0.011384147219359875,-0.004459628369659185,-0.04004931449890137,0.04791559278964996,-0.011267230845987797,0.003528695786371827,0.030524076893925667,-0.005622501485049725,0.004073523450642824,0.028636958450078964,0.006955841556191444,-0.025595949962735176,0.022938616573810577,-0.03403133898973465,0.022817842662334442,0.06426240503787994,0.0035826757084578276,-0.03993336483836174,0.01998097449541092,0.013303483836352825,-0.04120025783777237,0.01600976288318634,-0.006455957889556885,-0.00910509005188942,-0.0016868553357198834,-0.018250692635774612,0.039462387561798096,-0.04298601672053337,-0.01944638602435589,0.011518928222358227,0.05512041598558426,-0.02759736031293869,0.027848223224282265,-0.0748031735420227,0.057602740824222565,0.01805511862039566,-0.00876445509493351,-0.12408820539712906,0.0498562715947628,0.011197146028280258,0.07148205488920212,-0.011476511135697365,-0.03818527236580849,0.04285723716020584,-0.01364969089627266,0.01916423998773098,0.02047436125576496,0.0364871583878994,-0.006729481276124716,0.04900209605693817,-0.026212094351649284,0.022471513599157333,-0.0014831017469987273,-0.02109098806977272,-0.005463824607431889,0.010761290788650513,-0.040920887142419815,0.028054900467395782,-0.032910093665122986,-0.02915165387094021,0.013793517835438251,0.007505897898226976,-0.0238130334764719,-0.010571547783911228,-0.053654514253139496,0.01272416952997446,0.0258133877068758,0.016411038115620613,-0.055532362312078476,0.01291867159307003,-0.0008602887392044067,-0.009267101064324379,0.022113800048828125,0.015009262599050999,-0.008362704887986183,0.010582979768514633,-0.023880843073129654,-0.007750148884952068,0.03430838882923126,0.006887419149279594,0.08433417975902557,0.05149487778544426,0.04109000042080879,0.001496964367106557,0.030670935288071632,-0.002937211189419031,0.016226615756750107,-0.008415032178163528,0.024263639003038406,0.0037964927032589912,0.02966921217739582,0.09059721976518631,0.11518321186304092,0.12724758684635162,0.0024829080794006586,0.06558214128017426,-0.021130569279193878,-0.04857271537184715,-0.021213341504335403,0.02522439882159233,-0.010475828312337399,0.02457859180867672,-0.06778073310852051,0.01206638291478157,0.027446666732430458,-0.02751636691391468,0.011878551915287971,0.023008570075035095,0.0437406562268734,0.03072049841284752,0.019257232546806335,0.000735018402338028,-0.09475215524435043,0.019401714205741882,0.09266495704650879,0.09177688509225845,-0.011964412406086922,-0.036688514053821564,-0.04803282395005226,-0.011498226784169674,-0.006948800291866064,-0.041727498173713684,0.05761495605111122,0.021239716559648514,0.015051661059260368,0.034630708396434784,-0.009599748067557812,-0.01917688548564911,0.013465254567563534,-0.012206772342324257,0.0025376833509653807,0.025287028402090073,0.004158656112849712,0.018009338527917862,-0.04967641830444336,-0.01870053820312023,0.008277029730379581,-0.056616149842739105,-0.019842887297272682,0.037374868988990784,0.011254625394940376,0.013626703992486,0.06405822187662125,-0.012964023277163506,-0.017181361094117165,-0.03785964101552963,-0.012603291310369968,-0.046909432858228683,-0.011081072501838207,-0.014197667129337788,-0.05861147865653038,0.027899686247110367,-0.015995176509022713,-0.050497815012931824,0.02004845440387726,-0.007278187666088343,-0.001987049588933587,-0.07268238812685013,-0.00881496537476778,0.0006983884959481657,-0.02890205942094326,0.03273281827569008,0.019900072365999222,0.01595134846866131,0.03747301921248436,0.017329081892967224,0.03294409066438675,0.006057764869183302,0.0013739193091169,-0.025523753836750984,0.015106335282325745,-0.015391137450933456,-0.0055883778259158134,0.0045107086189091206,-0.028768839314579964,0.07589352130889893,0.001770454808138311,-0.0432540699839592,-0.04066689684987068,0.006349465809762478,0.02489965409040451,-0.016568975523114204,-0.023265711963176727,-0.03781351074576378,-0.02050863578915596,-0.025448037311434746,-0.024750588461756706,-0.04641631618142128,-0.05951651185750961,0.03010009415447712,0.04617469012737274,0.042411886155605316,-0.008358614519238472,0.0012020609574392438,-0.016059881076216698,-0.03243204578757286,-0.030869845300912857,0.03209004923701286,-0.03926252946257591,-0.018672559410333633,0.04387534037232399,-0.007677772548049688,0.11473532021045685,-0.03558923676609993,-0.05527222901582718,0.022059613838791847,0.036935076117515564,0.032287344336509705,0.008177917450666428,-0.05972863733768463,0.01231765653938055,-0.03827603906393051,-0.05197712033987045,-0.025814415886998177,0.02492411434650421,-0.06929934769868851,0.037740763276815414,0.020754816010594368,0.0044584921561181545,0.034111764281988144,-0.04551813378930092,0.018185846507549286,-0.03544746711850166,-0.005038000643253326,0.060544341802597046,0.0337272584438324,0.007039004471153021,0.012354291044175625,0.04387187585234642,0.0026418210472911596,-0.009765180759131908,-0.02537723258137703,0.04872703552246094,0.015439107082784176,0.03169658035039902,0.008503583259880543,0.02711080200970173,-0.006584953051060438,0.08274400234222412,-0.02636266127228737,0.04785773530602455,0.0034085134975612164,-0.03337787091732025,-0.04919641464948654,-0.04119343310594559,0.046365246176719666,-0.01660257950425148,-0.0016458830796182156,0.027573835104703903,-0.025686712935566902,-0.006246973294764757,-0.002743406919762492,0.03076394647359848,0.008012070320546627,-0.012551452964544296,0.0031646019779145718,-0.013932207599282265,-0.03827889263629913,0.01646021381020546,0.010854652151465416,-0.01292797364294529,-0.05673832818865776,-0.02065156027674675,0.021649152040481567,-0.01688704825937748,0.03494824096560478,-0.055972617119550705,0.01541879866272211,0.020044879987835884,0.015737567096948624,0.07428664714097977,0.03603260964155197,0.008864051662385464,0.017808785662055016,-0.004287387244403362,0.009867534041404724,0.042086292058229446,0.06572837382555008,0.0039349268190562725,-0.011017747223377228,-0.02946557104587555,0.0007175895152613521,0.025668403133749962,-0.09409137070178986,0.005208464805036783,-0.006648028269410133,-0.04290501028299332,0.02983529306948185,0.0057380120269954205,0.03599166125059128,-0.004044670611619949,-0.0707080289721489,0.04415718466043472,0.010893430560827255,-0.06636089831590652,-0.01825081743299961,-0.013433368876576424,0.05005475506186485,0.02944820001721382,0.005556467920541763,0.05548364296555519,-0.042787276208400726,0.003794837975874543,0.012759537436068058,-0.038994140923023224,0.019632427021861076,0.03092797100543976,-0.04755786806344986,0.09774507582187653,-0.025684941560029984,0.027611957862973213,-0.020626123994588852,0.011030777357518673,-0.06981468945741653,0.016675861552357674,-0.026151593774557114,0.023279203101992607,0.00752190500497818,-0.048897501081228256,0.033503033220767975,-0.007411109283566475,-0.07021680474281311,-0.003090092446655035,-0.05253295972943306,-0.04131762683391571,-0.04712189733982086,0.018663056194782257,-0.011202062480151653,-0.038172103464603424,0.04198829084634781,0.03323521465063095,0.009367370046675205,-0.0018600299954414368,0.025602098554372787,0.046875037252902985,0.02862737514078617,-0.02917604334652424,0.016049006953835487,-0.006002799607813358,-0.04185263440012932,-0.011971339583396912,0.021033858880400658,-0.0005250877584330738,0.005739092826843262,0.007159431930631399,-0.03973488509654999,0.020564069971442223,-0.034210000187158585,-0.01988121308386326,0.07042597234249115,0.017144475132226944,-0.014099936001002789,-0.025289446115493774,0.004676047712564468,-0.006742426659911871,0.020308345556259155,0.01045433059334755,0.002824726514518261,0.05835047736763954,-0.07933100312948227,-0.014883381314575672,0.031673211604356766,0.02356484904885292,0.004806207958608866,-0.008817138150334358,-0.006912784650921822,0.0279200728982687,-0.032534610480070114,0.028386248275637627,-0.025190265849232674,0.044007305055856705,-0.010327390395104885,0.013908112421631813,0.021792545914649963,0.024030843749642372,-0.03931514173746109,0.023037809878587723,-0.015528781339526176,-0.03553282096982002,-0.027306443080306053,0.055610302835702896,-0.057090479880571365,0.01132987905293703,-0.028394978493452072,0.03609393909573555,0.061180178076028824,-0.03764873743057251,-0.021563410758972168,-0.04664541035890579,0.017278295010328293,-0.03683190047740936,0.03798561915755272,0.021910086274147034,0.030058229342103004,0.040668390691280365,0.03306290879845619,-0.048313211649656296,0.02915356494486332,0.05774618685245514,-0.06703420728445053,0.01141708716750145,-0.006367289926856756,-0.03680374100804329,-0.011963366530835629,-0.026631472632288933,-0.012745819985866547,0.01971643976867199,-0.04523780941963196,-0.02202334813773632,0.000923235435038805,-0.049494192004203796,-7.056496996090007e-33,0.011230439879000187,-0.06140882894396782,-0.010435442440211773,0.013114525005221367,-0.040441323071718216,0.00687304837629199,0.030772874131798744,-0.020166121423244476,-0.000833823811262846,0.02155834622681141,-0.034019406884908676,-0.002868638141080737,0.021000297740101814,-0.0006704879924654961,0.08218593150377274,0.05080072954297066,0.0229183342307806,-0.043001770973205566,-0.036055922508239746,0.010157431475818157,-0.04840030521154404,0.046324051916599274,0.028610296547412872,0.0025687660090625286,-0.051524024456739426,0.011570854112505913,-0.049763601273298264,0.010961226187646389,0.045207392424345016,0.001420353539288044,0.01805102825164795,-0.014906613156199455,0.0037782348226755857,-0.06644400954246521,-0.0030052082147449255,-0.0591665543615818,0.02521250955760479,0.010942916385829449,-0.009470436722040176,0.0018456256948411465,0.036060631275177,0.023971812799572945,0.034525081515312195,-0.008296739310026169,0.01872953213751316,0.003745360067114234,0.03382415696978569,-0.029133887961506844,-0.012700643390417099,-0.04811482131481171,-0.00494381133466959,0.015836209058761597,-0.03704772889614105,0.04316558688879013,0.033900901675224304,0.10175711661577225,-0.010038851760327816,-0.027213413268327713,-0.06968507170677185,0.0051512387581169605,-0.053764708340168,0.014740940183401108,0.020996516570448875,-0.011710450984537601,0.031895074993371964,0.01897624135017395,-0.007625213358551264,0.027479374781250954,0.06297733634710312,0.012060735374689102,0.006429264321923256,0.08450834453105927,-0.0069136288948357105,-0.012423276901245117,-0.04324398562312126,0.031320225447416306,0.00362215144559741,0.05155732482671738,0.004560995381325483,0.0184527188539505,-0.03748038038611412,-0.0338716059923172,-0.012056825682520866,0.03052540495991707,0.032846324145793915,0.02383837103843689,-0.00493569066748023,-0.010633973404765129,0.03142799809575081,-0.0006478626164607704,0.010328979231417179,-0.0071180760860443115,-0.0020663372706621885,0.04394888877868652,-0.07595662772655487,0.01740231178700924,0.03439350426197052,0.08215959370136261,0.03304620459675789,-0.025729788467288017,0.011700685136020184,0.07012460380792618,0.023730427026748657,-0.005679326131939888,0.007540206890553236,-0.01400015503168106,0.015333166345953941,-0.0181584395468235,-0.02037288248538971,0.037482134997844696,0.06489617377519608,0.036637790501117706,-0.024062570184469223,-0.035961560904979706,-0.0156283900141716,-0.048103444278240204,-0.011308874003589153,-0.03142957389354706,0.029248667880892754,-0.014020940288901329,0.01222751010209322,0.05453554168343544,-0.02533600851893425,0.011658425442874432,-0.026416899636387825,0.006423770450055599,0.025665663182735443,-0.07353489845991135,0.02375517226755619,-0.035244401544332504,-0.023242836818099022,-0.03110300563275814,3.286763501364476e-7,0.028787022456526756,0.04359251260757446,-0.017894867807626724,0.10159958153963089,-0.00797140784561634,0.01886781118810177,-0.014806831255555153,-0.02768639661371708,0.02011895179748535,-0.04210174083709717,0.04403819516301155,-0.023101292550563812,0.004861168097704649,0.06045981124043465,0.013346449472010136,-0.028790263459086418,-0.0015824652509763837,-0.04824258014559746,-0.05679892376065254,-0.05066617205739021,-0.00036199192982167006,0.003526685293763876,0.036003969609737396,-0.00696874875575304,0.0349452942609787,0.07123758643865585,-0.032328397035598755,-0.07336267083883286,-0.027427690103650093,0.06537753343582153,0.010095019824802876,-0.06289772689342499,-0.04555613547563553,-0.015253023244440556,-0.029617901891469955,0.02180475741624832,-0.02119373343884945,-0.05143819376826286,0.024298325181007385,0.0035793057177215815,-0.002048298716545105,-0.03138662874698639,-0.018265385180711746,-0.030064156278967857,-0.007631164509803057,-0.05325556546449661,-0.020030483603477478,-0.045500025153160095,-0.009590285830199718,0.004800662398338318,0.051958728581666946,0.028811579570174217,-0.000987762352451682,0.026125892996788025,0.022154705598950386,0.021511385217308998,0.01699676737189293,0.021747944876551628,0.04298938438296318,0.057233069092035294,-0.020312001928687096,0.021803993731737137,-0.0010579369263723493,0.00014971279597375542,0.00029660106520168483,0.05087408423423767,0.018280375748872757,3.197331318089679e-34,0.018989909440279007,-0.03167017549276352,0.024644946679472923,0.015741437673568726,0.012321303598582745,-0.031955309212207794,0.01794527843594551,-0.03253312408924103,-0.0006145249935798347,-0.048540160059928894,-0.01204176526516676]'
SET
  @TechnicalDesignVector_f587f5ae = N'[-0.016108430922031403,0.01763164810836315,-0.06144409999251366,-0.07607551664113998,0.006550242193043232,0.006926509086042643,-0.008710849098861217,0.02195417881011963,-0.09785933047533035,0.03255435824394226,0.05317297577857971,0.0020820123609155416,0.017731482163071632,0.16996271908283234,-0.003378932597115636,-0.07733352482318878,-0.013911172747612,0.002515373518690467,0.014465780928730965,-0.005607401952147484,0.00710863433778286,-0.012367415241897106,-0.010215743444859982,0.02387041598558426,0.02199462614953518,0.00029587006429210305,-0.0029749718960374594,0.026647180318832397,0.034566912800073624,-0.10547536611557007,0.015306005254387856,0.004833563696593046,-0.046636439859867096,-0.0037982542999088764,0.000002023676415774389,-0.05098241940140724,-0.010472754947841167,0.005164354108273983,-0.018772408366203308,0.028151657432317734,0.0705837607383728,-0.0641990527510643,0.02459922805428505,0.016819095239043236,0.0160989947617054,-0.03296000510454178,-0.047968439757823944,-0.07698147743940353,0.03442171961069107,-0.014512429013848305,-0.004771334119141102,0.04522040858864784,-0.1056162491440773,-0.020780745893716812,-0.018162529915571213,-0.001790341455489397,-0.022539934143424034,-0.029339205473661423,0.037468474358320236,-0.02075509913265705,-0.0027844086289405823,-0.026707762852311134,0.0025072037242352962,-0.014836158603429794,0.11154858767986298,0.039489638060331345,0.040279995650053024,-0.049328453838825226,-0.016136081889271736,0.007906471379101276,0.11103109270334244,0.016192376613616943,0.022852398455142975,-0.013968427665531635,-0.009255480952560902,-0.052297987043857574,-0.016496164724230766,-0.02443857118487358,0.03529233857989311,-0.035335902124643326,-0.06919732689857483,0.054432954639196396,-0.07056459784507751,-0.0651094987988472,0.019100124016404152,-0.054580651223659515,-0.006821740418672562,-0.0103871775791049,-0.0247903224080801,0.0028001435566693544,0.028907043859362602,-0.016332803294062614,0.021389052271842957,-0.014487538486719131,-0.06497357785701752,-0.028708653524518013,0.06684193760156631,-0.07796872407197952,0.061723798513412476,-0.04083099216222763,0.015046783722937107,0.007825885899364948,0.050338905304670334,0.03959837928414345,0.03871582821011543,0.03230854123830795,0.01866159960627556,-0.07022430002689362,-0.031097503378987312,-0.0031976192258298397,-0.04350754991173744,0.036057621240615845,0.040309857577085495,-0.005099668633192778,0.011592845432460308,0.06295794993638992,-0.07365001738071442,0.003848946886137128,-0.014493369497358799,0.02108677849173546,0.07354316860437393,-0.02786402590572834,-0.005979033187031746,0.03661222755908966,0.004094064701348543,0.05586401745676994,-0.0530552938580513,-0.00464687030762434,-0.026534361764788628,0.02923266962170601,-0.008156688883900642,-0.020938396453857422,0.007478202693164349,-0.023853974416851997,0.02486501820385456,-0.04802674800157547,0.015988245606422424,0.03846025839447975,0.005446811206638813,-0.03841729089617729,0.012532665394246578,-0.03109101951122284,-0.06205268204212189,-0.030134493485093117,0.030161861330270767,0.0026180411223322153,0.010206187143921852,0.0905071347951889,-0.009344294667243958,0.0038790893740952015,-0.048766206949949265,-0.01843956671655178,-0.026754962280392647,0.0507948063313961,-0.039245132356882095,0.006577505264431238,0.0032940462697297335,-0.02072632685303688,-0.0021115606650710106,0.02137373574078083,-0.016886720433831215,-0.005904873367398977,-0.00611127121374011,-0.0015654712915420532,-0.0048308055847883224,0.028696535155177116,-0.08910764753818512,-0.00010891813144553453,-0.010218335315585136,-0.011565013788640499,-0.021455757319927216,-0.03190014138817787,-0.004047569818794727,0.04097368195652962,-0.00737027358263731,0.002845472889021039,0.06868494302034378,-0.03512144088745117,-0.005015389062464237,-0.015120558440685272,-0.013085811398923397,-0.16561630368232727,0.013573559001088142,0.00896834209561348,0.09543140232563019,0.009977119043469429,-0.0531792938709259,0.06150519475340843,-0.005444257985800505,-0.0042387088760733604,-0.013074235059320927,0.03828541561961174,-0.08683961629867554,-0.014112550765275955,0.03919622302055359,0.013798084110021591,0.011276395060122013,-0.09126386791467667,0.026007672771811485,0.0024882047437131405,-0.001008579507470131,0.02803882770240307,0.015717443078756332,0.0023488509468734264,0.01569715328514576,-0.02828456088900566,-0.021608885377645493,-0.03327713906764984,0.020401721820235252,-0.0210029985755682,0.006973322480916977,0.03308560326695442,-0.044561099261045456,0.013702216558158398,-0.013807415962219238,0.06458069384098053,-0.0074037229642271996,0.0011568211484700441,-0.04398037865757942,0.030616488307714462,-0.04145868495106697,-0.012893629260361195,0.00294904550537467,0.015250316821038723,0.025594118982553482,0.08563920855522156,0.058184169232845306,-0.033429693430662155,0.06644459813833237,0.019629068672657013,-0.026306094601750374,-0.019886182621121407,0.020921848714351654,-0.00460971612483263,0.03717993572354317,0.10170944780111313,0.10717448592185974,0.03617757186293602,-0.005557218100875616,0.010399462655186653,-0.004973931238055229,-0.04131185635924339,-0.011037350632250309,0.016479909420013428,0.04079713299870491,0.00365557917393744,-0.07762248814105988,0.03655628859996796,0.004284534603357315,-0.019193535670638084,0.02528846263885498,0.025853149592876434,0.013960416428744793,0.0023186993785202503,-0.020030466839671135,0.020737692713737488,-0.09302357584238052,-0.017066726461052895,0.028168611228466034,0.06688500940799713,0.0006056278944015503,-0.03593747317790985,-0.052504878491163254,0.01599978283047676,0.0313873365521431,-0.03744017332792282,0.030459750443696976,0.002842832123860717,0.014929695054888725,0.04158582538366318,0.02888544835150242,0.017241405323147774,0.00923893228173256,-0.018461836501955986,-0.000391500216210261,0.04262126609683037,-0.034865569323301315,0.04938988760113716,-0.017567720264196396,0.008492568507790565,-0.0023793866857886314,-0.01292332448065281,-0.005824344232678413,0.010419094003736973,-0.020986396819353104,0.04177317023277283,0.02805173397064209,-0.013295349664986134,0.015287702903151512,-0.05671415477991104,0.004875968210399151,-0.050809331238269806,0.013269222341477871,-0.05482039973139763,-0.035689614713191986,0.014935010112822056,0.027438899502158165,0.024154284968972206,0.0060842884704470634,0.01785958744585514,-0.00031100495834834874,-0.023173421621322632,0.002452926943078637,0.026124097406864166,-0.06130538508296013,0.027920078486204147,0.028710531070828438,-0.031253326684236526,0.02302442491054535,0.010789996013045311,0.023723574355244637,0.0050694081000983715,-0.03035649284720421,0.028522050008177757,-0.01789100095629692,0.01034708321094513,-0.012556876987218857,0.00940061267465353,-0.02733253687620163,-0.011821527034044266,0.001663082279264927,-0.01177884265780449,-0.04494229331612587,0.019753970205783844,-0.034242987632751465,-0.061226122081279755,-0.07003964483737946,-0.015464250929653645,-0.029173724353313446,-0.01522667147219181,0.011693568900227547,-0.008067524991929531,-0.013001983053982258,0.027866315096616745,0.036894239485263824,-0.003238422330468893,-0.034868497401475906,-0.07745131850242615,0.017445534467697144,-0.011396082118153572,0.006391856819391251,0.06026622653007507,-0.00936430785804987,0.03635168448090553,0.05002588778734207,-0.015649547800421715,0.004554104059934616,0.005790606141090393,-0.04594787582755089,0.0033748047426342964,0.0541839562356472,0.0109365563839674,-0.0030467354226857424,-0.05260897055268288,0.00672369496896863,-0.0011137613328173757,-0.024492628872394562,0.009204967878758907,-0.020572440698742867,-0.06438152492046356,0.0863426998257637,0.04573420062661171,0.05849195644259453,0.007909223437309265,-0.022579941898584366,0.006901427172124386,-0.005062899086624384,-0.007735857740044594,0.011394217610359192,0.010253158397972584,0.04554840177297592,0.00279351812787354,0.006454027257859707,0.03472635895013809,-0.020018287003040314,-0.025365782901644707,0.02834022417664528,0.017237531021237373,0.0385139063000679,0.0046213059686124325,0.028559522703289986,-0.010827286168932915,0.0883847028017044,0.006475793197751045,0.07115615904331207,-0.029343338683247566,0.006811272352933884,-0.0198852326720953,0.015609298832714558,0.05337944254279137,0.0067353625781834126,0.008661295287311077,-0.0008810525760054588,-0.03389560431241989,0.011647163890302181,-0.013425946235656738,-0.03185894340276718,-0.002699906937777996,-0.0013279840350151062,0.01338187139481306,-0.0037505277432501316,-0.09466442465782166,-0.04230748116970062,0.01214812882244587,-0.012555296532809734,0.004074827302247286,-0.049177385866642,0.04453807324171066,-0.006501230411231518,0.00333572831004858,0.006669922731816769,-0.050194136798381805,0.004125567153096199,-0.02995597943663597,0.022230593487620354,0.03512167930603027,-0.007191810756921768,-0.006428400985896587,0.04273137077689171,-0.004256370477378368,0.00891719851642847,0.05413283407688141,0.046436507254838943,-0.0021094686817377806,-0.007632263004779816,-0.042325008660554886,0.07068713009357452,-0.06970496475696564,0.00390456011518836,0.010029344819486141,0.007026033941656351,-0.01304871216416359,-0.0017193966777995229,0.05202347785234451,-0.024614768102765083,-0.0205699373036623,-0.009174409322440624,-0.020930971950292587,0.008627050556242466,0.0242717694491148,0.012216501869261265,0.05963065102696419,0.05208318307995796,-0.03999369964003563,0.04939015209674835,-0.061718571931123734,-0.01844588667154312,-0.011209485121071339,-0.017724698409438133,0.015236664563417435,0.03473879396915436,-0.007906298153102398,-0.011934353038668633,-0.0480307899415493,0.06980633735656738,-0.042689692229032516,0.009426633827388287,-0.0027679994236677885,-0.02320968173444271,-0.00035813270369544625,0.045433301478624344,0.032691773027181625,-0.021892910823225975,0.01669924333691597,0.023064974695444107,0.0163344144821167,-0.03857199475169182,-0.03625087812542915,-0.0062990146689116955,-0.062844417989254,-0.009774276055395603,-0.022091694176197052,-0.04938235506415367,0.049698878079652786,0.022961674258112907,0.012105447240173817,0.00036027724854648113,-0.012745634652674198,0.016101397573947906,-0.015681428834795952,-0.018124179914593697,0.05408056452870369,-0.003826549043878913,-0.09016330540180206,-0.00778952706605196,-0.013439677655696869,-0.005021324846893549,0.02143830992281437,-0.003672765102237463,-0.053881049156188965,-0.0021286976989358664,-0.026483019813895226,-0.018091941252350807,0.08001336455345154,-0.027767617255449295,-0.05123721808195114,-0.03573617339134216,0.07116448879241943,0.018925681710243225,0.02377803437411785,0.010512826964259148,-0.007598327938467264,0.015565325506031513,-0.09032127261161804,0.004205120261758566,0.03294850140810013,0.006782592739909887,-0.02765805460512638,-0.01966031640768051,0.007802252192050219,0.052261337637901306,-0.021423503756523132,-0.012065327726304531,0.03462299332022667,0.04332999885082245,-0.07583017647266388,0.004135342314839363,0.06446313858032227,0.04194829985499382,-0.03225541114807129,0.010407913476228714,-0.02320467121899128,0.013724696822464466,-0.06703374534845352,0.10800954699516296,-0.02617880515754223,0.00014556050882674754,-0.02325321175158024,0.013395646587014198,0.07274371385574341,0.019781583920121193,-0.008882911875844002,-0.005095020402222872,-0.013215364888310432,-0.035083938390016556,0.03481249511241913,0.02471252717077732,0.05772622302174568,-0.011253779754042625,-0.01850191131234169,-0.038719166070222855,0.02231431193649769,0.03443855419754982,-0.023023057729005814,-0.0032820492051541805,0.0033912956714630127,-0.021283302456140518,-0.05456022918224335,-0.0030222160276025534,-0.010344068519771099,0.003182170679792762,-0.046408217400312424,-0.017699619755148888,0.019499173387885094,0.03411450609564781,-6.844877156215287e-33,-0.008960364386439323,-0.038348350673913956,-0.028759600594639778,-0.0021267591509968042,-0.09712065756320953,-0.006080500315874815,0.002350697061046958,-0.06724230945110321,0.001731660682708025,-0.020852355286478996,-0.002891129581257701,-0.023872626945376396,0.012373453937470913,-0.030104411765933037,0.056975796818733215,0.03513167425990105,0.029032522812485695,0.021652499213814735,0.000033708445698721334,0.02421461045742035,-0.007670240942388773,0.04231157526373863,0.030790308490395546,-0.04411369562149048,-0.04111992567777634,0.05205640196800232,0.006689044181257486,0.02378157339990139,0.026134146377444267,0.003092386294156313,0.03461766615509987,-0.04941873624920845,-0.01683889888226986,-0.043031029403209686,-0.010061483830213547,-0.03132511302828789,0.0025521526113152504,-0.01792963780462742,-0.012963708490133286,-0.02079426869750023,0.05433591082692146,0.00022091435675974935,0.02977590449154377,0.011312774382531643,0.00031865524942986667,-0.07821334898471832,0.029019996523857117,-0.014159735292196274,0.011359646916389465,-0.03807695955038071,-0.0027280214708298445,0.036095112562179565,-0.0355217382311821,0.098568394780159,-0.006619084160774946,0.06840690225362778,0.0022719413973391056,0.0259176567196846,-0.06404118239879608,0.026197923347353935,-0.03979961574077606,0.02137056365609169,0.028664950281381607,0.024337872862815857,0.026209989562630653,-0.032531075179576874,0.028529072180390358,0.030805490911006927,0.013969304971396923,0.02300623618066311,0.029986832290887833,-0.0056457845494151115,0.04101480543613434,-0.03601878508925438,-0.011714608408510685,0.0029841784853488207,-0.03153260424733162,0.020355064421892166,0.01176378596574068,0.047249455004930496,-0.04055580496788025,0.007710801903158426,-0.013837398029863834,0.014635875821113586,0.005386479198932648,-0.048082638531923294,-0.009063316509127617,-0.011929541826248169,-0.0012008550111204386,0.02377508021891117,-0.033050086349248886,-0.0036066160537302494,0.004033367149531841,0.05311253294348717,0.026813583448529243,-0.010156013071537018,0.0443023145198822,0.03035522624850273,0.0017214134568348527,-0.020730776712298393,-0.022649437189102173,0.03588460758328438,0.006756236311048269,0.008558166213333607,0.022679638117551804,-0.027072640135884285,0.009767727926373482,-0.0071794576942920685,-0.04594806954264641,0.007503976579755545,0.053129568696022034,0.055276744067668915,-0.07541726529598236,-0.05248631164431572,-0.0008460766985081136,-0.011994975619018078,0.011973988264799118,0.007114239502698183,0.025127459317445755,0.029199620708823204,-0.001855773851275444,0.0345512218773365,0.010236621834337711,0.0008861288079060614,0.0136116249486804,-0.007386893965303898,-0.02081003040075302,0.0245255995541811,0.04112188145518303,-0.006636809557676315,-0.00670624291524291,-0.023434452712535858,2.9484192509698914e-7,-0.021905507892370224,0.07477742433547974,-0.02678685262799263,0.007007730193436146,0.006620696280151606,-0.011903157457709312,-0.04008965939283371,-0.004823982249945402,0.00858104508370161,0.009306707419455051,0.04660015553236008,-0.004999225959181786,0.002636692486703396,0.04358122870326042,0.013303510844707489,-0.032605670392513275,-0.05166575312614441,-0.04102077707648277,-0.06990358233451843,-0.018662191927433014,0.042839571833610535,0.0056668841280043125,0.03347271680831909,0.032573599368333817,-0.001641168724745512,0.06326267868280411,-0.03479659929871559,-0.046727146953344345,-0.036728695034980774,0.038352321833372116,0.05714097619056702,-0.026236480101943016,-0.037033963948488235,0.017680058255791664,-0.04173973947763443,-0.01600423827767372,-0.033086277544498444,-0.037897177040576935,0.014908130280673504,0.03810083866119385,0.03491717204451561,0.012045190669596195,-0.01867249421775341,-0.012091741897165775,0.03383452445268631,-0.00974422600120306,-0.017701666802167892,-0.06087522208690643,-0.06319684535264969,0.035571031272411346,0.0432252511382103,0.008458046242594719,-0.017649075016379356,0.015539361163973808,0.006083135958760977,0.0406322255730629,-0.030824871733784676,0.06697696447372437,0.03223796188831329,0.03489651158452034,-0.012940851040184498,-0.02606656216084957,0.01517679262906313,0.11163000017404556,0.006074398756027222,0.009487166069447994,0.006030336953699589,3.6876947558424466e-34,0.008215747773647308,-0.01769038662314415,0.004823785740882158,-0.03142930939793587,-0.008832628838717937,-0.03661630302667618,0.013591245748102665,-0.005621868651360273,0.010609407909214497,-0.02343522384762764,-0.01778620108962059]'
SET
  @HasCustomProps_f587f5ae = 0
SET
  @HasCustomEvents_f587f5ae = 0
SET
  @RequiresData_f587f5ae = 1
SET
  @DependencyCount_f587f5ae = 2
SET
  @TechnicalDesignVectorEmbeddingModelID_f587f5ae = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_f587f5ae = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_f587f5ae = 0
SET
  @ID_f587f5ae = '39C8E50F-976E-45D1-A439-CD8ABD5377CC'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_f587f5ae,
  @Name = @Name_f587f5ae,
  @Version = @Version_f587f5ae,
  @VersionSequence = @VersionSequence_f587f5ae,
  @Title = @Title_f587f5ae,
  @Description = @Description_f587f5ae,
  @Type = @Type_f587f5ae,
  @Status = @Status_f587f5ae,
  @DeveloperName = @DeveloperName_f587f5ae,
  @DeveloperEmail = @DeveloperEmail_f587f5ae,
  @DeveloperOrganization = @DeveloperOrganization_f587f5ae,
  @SourceRegistryID = @SourceRegistryID_f587f5ae,
  @ReplicatedAt = @ReplicatedAt_f587f5ae,
  @LastSyncedAt = @LastSyncedAt_f587f5ae,
  @Specification = @Specification_f587f5ae,
  @FunctionalRequirements = @FunctionalRequirements_f587f5ae,
  @TechnicalDesign = @TechnicalDesign_f587f5ae,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_f587f5ae,
  @TechnicalDesignVector = @TechnicalDesignVector_f587f5ae,
  @HasCustomProps = @HasCustomProps_f587f5ae,
  @HasCustomEvents = @HasCustomEvents_f587f5ae,
  @RequiresData = @RequiresData_f587f5ae,
  @DependencyCount = @DependencyCount_f587f5ae,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_f587f5ae,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_f587f5ae,
  @HasRequiredCustomProps = @HasRequiredCustomProps_f587f5ae,
  @ID = @ID_f587f5ae;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_786254de NVARCHAR(MAX),
@Name_786254de NVARCHAR(500),
@Version_786254de NVARCHAR(50),
@VersionSequence_786254de INT,
@Title_786254de NVARCHAR(1000),
@Description_786254de NVARCHAR(MAX),
@Type_786254de NVARCHAR(255),
@Status_786254de NVARCHAR(50),
@DeveloperName_786254de NVARCHAR(255),
@DeveloperEmail_786254de NVARCHAR(255),
@DeveloperOrganization_786254de NVARCHAR(255),
@SourceRegistryID_786254de UNIQUEIDENTIFIER,
@ReplicatedAt_786254de DATETIMEOFFSET,
@LastSyncedAt_786254de DATETIMEOFFSET,
@Specification_786254de NVARCHAR(MAX),
@FunctionalRequirements_786254de NVARCHAR(MAX),
@TechnicalDesign_786254de NVARCHAR(MAX),
@FunctionalRequirementsVector_786254de NVARCHAR(MAX),
@TechnicalDesignVector_786254de NVARCHAR(MAX),
@HasCustomProps_786254de BIT,
@HasCustomEvents_786254de BIT,
@RequiresData_786254de BIT,
@DependencyCount_786254de INT,
@TechnicalDesignVectorEmbeddingModelID_786254de NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_786254de NVARCHAR(MAX),
@HasRequiredCustomProps_786254de BIT,
@ID_786254de UNIQUEIDENTIFIER
SET
  @Namespace_786254de = N'CRM/Analytics'
SET
  @Name_786254de = N'DealVelocityTrendChart'
SET
  @Version_786254de = N'1.0.0'
SET
  @VersionSequence_786254de = 1
SET
  @Title_786254de = N'Deal Velocity Trend Chart'
SET
  @Description_786254de = N'Displays historical trends of deal velocity across stages over time'
SET
  @Type_786254de = N'Chart'
SET
  @Status_786254de = N'Published'
SET
  @Specification_786254de = N'{"name":"DealVelocityTrendChart","namespace":"CRM/Analytics","type":"Chart","location":"embedded","code":"function DealVelocityTrendChart({ deals, stages, onDrillDown, timeRange }) {\n  const chartRef = React.useRef(null);\n  \n  React.useEffect(() => {\n    if (!chartRef.current || !deals.length) return;\n    \n    // Generate trend data based on timeRange\n    const dates = [];\n    const trendData = {};\n    \n    const daysToShow = Math.min(timeRange || 30, 30); // Cap at 30 days for trend\n    \n    for (let i = daysToShow - 1; i >= 0; i--) {\n      const date = dayjs().subtract(i, ''day'');\n      dates.push(date.format(''YYYY-MM-DD''));\n    }\n    \n    // Calculate trend data for each stage\n    stages.forEach(stage => {\n      trendData[stage] = dates.map((date, index) => {\n        // Count deals in this stage around this date\n        const dayDeals = deals.filter(deal => {\n          if (deal.Stage !== stage) return false;\n          \n          // Check if deal was active around this date\n          const dealDate = deal.ActualCloseDate || deal.CloseDate;\n          if (!dealDate) return true; // Open deals count for all dates\n          \n          const dealDayjs = dayjs(dealDate);\n          const dateDayjs = dayjs(date);\n          \n          // Deal counts if it was created before or on this date\n          return dealDayjs.isAfter(dateDayjs) || dealDayjs.isSame(dateDayjs, ''day'');\n        });\n        \n        // Simulate velocity metric (days in stage)\n        // This could be replaced with actual velocity calculation\n        const baseVelocity = {\n          ''Prospecting'': 90,\n          ''Qualification'': 60,\n          ''Proposal'': 40,\n          ''Negotiation'': 20,\n          ''Closed Won'': 10,\n          ''Closed Lost'': 15\n        }[stage] || 30;\n        \n        // Add some variation\n        const variation = Math.sin(index * 0.5) * 10 + Math.random() * 5;\n        return Math.max(5, Math.round(baseVelocity + variation));\n      });\n    });\n    \n    const option = {\n      title: {\n        text: ''Deal Velocity Trend'',\n        left: ''center'',\n        top: ''5%'',\n        textStyle: {\n          fontSize: 16,\n          fontWeight: ''bold''\n        }\n      },\n      tooltip: {\n        trigger: ''axis'',\n        axisPointer: { type: ''cross'' },\n        formatter: (params) => {\n          let result = params[0].axisValue + ''<br/>'';\n          params.forEach(param => {\n            result += `$' + '{param.marker} $' + '{param.seriesName}: <strong>$' + '{Math.round(param.value)} days</strong><br/>`;\n          });\n          result += ''<div style=\"margin-top: 8px; font-size: 11px; color: #666;\">Click to view deals</div>'';\n          return result;\n        }\n      },\n      legend: {\n        data: stages,\n        top: ''12%'',\n        type: ''scroll'',\n        textStyle: {\n          fontSize: 12\n        }\n      },\n      grid: {\n        left: ''3%'',\n        right: ''4%'',\n        bottom: ''3%'',\n        top: ''22%'',\n        containLabel: true\n      },\n      xAxis: {\n        type: ''category'',\n        boundaryGap: false,\n        data: dates.map(d => dayjs(d).format(''MM/DD'')),\n        axisLabel: {\n          fontSize: 11,\n          rotate: 45\n        }\n      },\n      yAxis: {\n        type: ''value'',\n        name: ''Days'',\n        axisLabel: {\n          formatter: ''{value}d'',\n          fontSize: 11\n        }\n      },\n      series: stages.map((stage, index) => ({\n        name: stage,\n        type: ''line'',\n        smooth: true,\n        data: trendData[stage],\n        emphasis: { \n          focus: ''series'',\n          blurScope: ''coordinateSystem''\n        },\n        lineStyle: {\n          width: 2\n        },\n        symbol: ''circle'',\n        symbolSize: 6,\n        itemStyle: {\n          color: [\n            ''#9CA3AF'',  // Prospecting\n            ''#3B82F6'',  // Qualification  \n            ''#8B5CF6'',  // Proposal\n            ''#F59E0B'',  // Negotiation\n            ''#10B981'',  // Closed Won\n            ''#EF4444''   // Closed Lost\n          ][index] || ''#6B7280''\n        }\n      }))\n    };\n    \n    // Initialize or update chart\n    if (chartRef.current._chart) {\n      chartRef.current._chart.dispose();\n    }\n    chartRef.current._chart = echarts.init(chartRef.current);\n    chartRef.current._chart.setOption(option);\n    \n    // Add click handler\n    chartRef.current._chart.on(''click'', (params) => {\n      if (params.componentType === ''series'') {\n        const stage = params.seriesName;\n        const dateIndex = params.dataIndex;\n        const date = dates[dateIndex];\n        \n        // Filter deals for this stage around this date\n        const stageDeals = deals.filter(d => d.Stage === stage);\n        onDrillDown(stageDeals, `$' + '{stage} Stage Deals - $' + '{dayjs(date).format(''MMM D, YYYY'')}`);\n      }\n    });\n    \n    // Cleanup on unmount\n    return () => {\n      if (chartRef.current?._chart) {\n        chartRef.current._chart.dispose();\n      }\n    };\n  }, [deals, stages, onDrillDown, timeRange]);\n  \n  return React.createElement(''div'', { \n    ref: chartRef, \n    style: { height: ''500px'', width: ''100%'' } \n  });\n}","functionalRequirements":"## Trend Chart Sub-component\n\n### Purpose\nDisplays historical trends of deal velocity across stages over time.\n\n### Core Features\n- Line chart showing velocity trends\n- Multiple stage series\n- Smooth line rendering\n- Interactive tooltips with rounded values\n- Clickable data points\n- Customizable time range\n- Focus on series functionality","dataRequirements":{"description":"Receives calculated trend data from parent component"},"technicalDesign":"## Implementation\n\n### Chart Library\n- Uses ECharts for rendering\n- Line chart with smooth curves\n- Manages chart lifecycle\n- Proper disposal on unmount\n\n### Data Processing\n- Receives pre-calculated trend data\n- Formats tooltips with rounded values\n- Handles click events for drill-down","properties":[{"name":"deals","type":"array","required":true,"description":"Array of deal entities"},{"name":"stages","type":"array","required":true,"description":"Array of stage names"},{"name":"onDrillDown","type":"function","required":true,"description":"Callback when clicking on chart elements"},{"name":"timeRange","type":"number","required":true,"description":"Number of days to show in trend"}],"events":[],"dependencies":[],"libraries":[{"name":"ECharts","version":"^5.4.3","globalVariable":"echarts"},{"name":"dayjs","version":"^1.11.10","globalVariable":"dayjs"}]}'
SET
  @FunctionalRequirements_786254de = N'## Trend Chart Sub-component

### Purpose
Displays historical trends of deal velocity across stages over time.

### Core Features
- Line chart showing velocity trends
- Multiple stage series
- Smooth line rendering
- Interactive tooltips with rounded values
- Clickable data points
- Customizable time range
- Focus on series functionality'
SET
  @TechnicalDesign_786254de = N'## Implementation

### Chart Library
- Uses ECharts for rendering
- Line chart with smooth curves
- Manages chart lifecycle
- Proper disposal on unmount

### Data Processing
- Receives pre-calculated trend data
- Formats tooltips with rounded values
- Handles click events for drill-down'
SET
  @FunctionalRequirementsVector_786254de = N'[-0.05281364917755127,-0.005810252856463194,-0.045920636504888535,-0.07830748707056046,-0.0017821394139900804,-0.04116775840520859,0.011680413037538528,0.0061049191281199455,-0.04222779721021652,0.037160567939281464,0.016538603231310844,0.02229348011314869,0.027800774201750755,0.16413383185863495,-0.03661433979868889,-0.0845252200961113,-0.014540261588990688,-0.01294499821960926,0.016611214727163315,0.009150289930403233,0.026379374787211418,-0.022066166624426842,0.011209764517843723,0.02175801806151867,-0.08572015166282654,-0.005695078521966934,0.02034291997551918,-0.028455713763833046,0.051391877233982086,-0.12566399574279785,0.011783977970480919,-0.0013445294462144375,0.004559093154966831,0.025260716676712036,0.0000024434903025394306,-0.0155674759298563,-0.010034452192485332,-0.0013552578166127205,-0.015433913096785545,0.034233734011650085,0.07138458639383316,-0.06495367735624313,0.019838739186525345,-0.010219201445579529,0.018679793924093246,-0.023745596408843994,-0.0540134459733963,-0.010788796469569206,0.038546714931726456,-0.018011223524808884,0.005553525872528553,0.021175820380449295,-0.062239546328783035,-0.021730933338403702,0.009289317764341831,-0.06501735746860504,-0.003237605793401599,-0.0029825069941580296,0.06194459646940231,0.004359467886388302,-0.031720809638500214,0.028126806020736694,0.0021403587888926268,-0.029674699530005455,0.09485754370689392,0.05162426084280014,0.09759727865457535,-0.034751664847135544,-0.030156005173921585,0.0347258523106575,0.05463479831814766,-0.013329091481864452,-0.005430754739791155,-0.04898293316364288,-0.002089765155687928,-0.012551112100481987,-0.04216095432639122,-0.02713014744222164,0.022035550326108932,-0.041983794420957565,-0.046820688992738724,0.05534500628709793,-0.05179852619767189,-0.019555984064936638,0.0555540956556797,-0.05456813797354698,-0.011284532025456429,-0.00331890769302845,-0.01952248625457287,-0.03667290136218071,-0.0069990744814276695,-0.00037148670526221395,-0.010342252440750599,-0.013056664727628231,-0.02315288968384266,-0.0037282626144587994,0.006955822464078665,-0.021807581186294556,0.011317446827888489,-0.02515702322125435,0.058448806405067444,0.005734974984079599,0.02573065459728241,0.05012398585677147,0.04036961495876312,-0.03491014614701271,-0.020263466984033585,-0.16579198837280273,-0.008801748976111412,0.03622607886791229,-0.010830789804458618,0.01670989766716957,-0.00283514941111207,-0.01875549554824829,0.010217998176813126,0.007093791384249926,-0.044479284435510635,-0.0037166422698646784,-0.01743466965854168,0.022306403145194054,0.09067494422197342,-0.017872430384159088,0.00917073804885149,-0.026870345696806908,-0.011203238740563393,0.08360663801431656,-0.0629117488861084,0.003271533874794841,0.0004707469488494098,0.04667416214942932,-0.03257923945784569,-0.031968872994184494,0.03386704996228218,-0.006703772582113743,0.005721451714634895,-0.019535481929779053,-0.0022830141242593527,0.04259467497467995,-0.023547645658254623,-0.05633807182312012,-0.00260541052557528,0.06131230667233467,-0.06751396507024765,0.037763748317956924,-0.047597117722034454,-0.029482539743185043,0.022142598405480385,0.08801307529211044,0.0067321122623980045,0.027483809739351273,-0.03590043634176254,-0.004933319520205259,-0.025266606360673904,0.0368967205286026,-0.029105696827173233,-0.031572215259075165,-0.009370769374072552,-0.030672136694192886,-0.012598298490047455,0.030409889295697212,-0.010037580505013466,-0.01616816781461239,-0.011770471930503845,-0.0036446137819439173,-0.025490982457995415,-0.0043448833748698235,-0.1153135597705841,-0.04521162435412407,-0.04260740801692009,-0.003336651250720024,0.002651008777320385,-0.05506126582622528,-0.01707882061600685,-0.02199609950184822,0.06618324667215347,0.03063654527068138,0.07991329580545425,-0.011332101188600063,-0.018373148515820503,-0.014113008975982666,-0.001969314645975828,-0.1452450007200241,0.03276176005601883,0.02958010509610176,0.043890196830034256,0.013220667839050293,-0.11789824068546295,0.02603626437485218,0.017687954008579254,-0.000867068360093981,-0.016170086339116096,0.019936835393309593,-0.0426732636988163,0.007939272560179234,-0.0392003171145916,-0.017248153686523438,-0.00038790309918113053,-0.06839911639690399,0.03904407471418381,0.018015997484326363,-0.026069842278957367,0.047774191945791245,0.028220541775226593,0.013020025566220284,-0.005047579761594534,-0.005768205970525742,-0.01284294668585062,-0.031127842143177986,0.004716975148767233,0.023157455027103424,0.04110024869441986,0.004941945429891348,-0.08387325704097748,0.005420546513050795,-0.020710326731204987,0.012442960403859615,0.004010459408164024,0.01851176656782627,-0.06855001300573349,0.019507400691509247,-0.04293721914291382,-0.015111507847905159,0.021292993798851967,-0.013993904925882816,0.07321145385503769,0.08502251654863358,0.043205685913562775,-0.009694785811007023,0.004612290766090155,0.02510257437825203,-0.02055097371339798,-0.013390465639531612,0.004981485661119223,-0.010981371626257896,0.054167307913303375,0.07748904824256897,0.04504571482539177,0.057770393788814545,-0.006707868538796902,-0.0008705862564966083,-0.03237173706293106,-0.06370522081851959,-0.017802366986870766,0.016638122498989105,-0.0015868617920204997,-0.05254156515002251,-0.08185265213251114,0.015781864523887634,-0.009495899081230164,-0.036544978618621826,0.010801359079778194,0.022906789556145668,0.025631200522184372,-0.01692812703549862,-0.020397908985614777,0.02301432006061077,0.0032885237596929073,0.019055021926760674,0.06762490421533585,0.0691799521446228,0.009492007084190845,0.018060022965073586,-0.028923846781253815,0.010555234737694263,-0.0008204962941817939,-0.04788603261113167,0.061585284769535065,0.0323626734316349,-0.03900374844670296,0.021318431943655014,-0.007140529341995716,-0.009363596327602863,0.009949126280844212,-0.004683312494307756,-0.00849939789623022,0.034128185361623764,0.000052339313697302714,0.02293839119374752,-0.050587523728609085,0.013556462712585926,-0.013224000111222267,-0.029340602457523346,-0.007205091882497072,0.027186712250113487,0.0003021533484570682,0.007795458659529686,0.0396915040910244,0.0046623749658465385,0.0355270653963089,-0.06110595911741257,0.006217728368937969,-0.041330378502607346,0.016664784401655197,-0.03628231957554817,-0.03743458166718483,0.009554171934723854,-0.038499318063259125,0.002945637097582221,0.004285265691578388,0.023806344717741013,-0.032816994935274124,-0.041944220662117004,-0.00916407909244299,0.025239616632461548,-0.04124917834997177,0.095185786485672,0.010738356970250607,0.04774877429008484,0.010392135940492153,0.07769985496997833,0.024744609370827675,-0.02041693776845932,-0.008982149884104729,-0.029456447809934616,-0.015041014179587364,0.0533590167760849,-0.006426933687180281,0.026413382962346077,-0.006740517448633909,0.01978224329650402,0.0027281297370791435,-0.046338457614183426,-0.015509271062910557,0.013292429968714714,-0.029435331001877785,0.02366931363940239,-0.07047821581363678,-0.042539749294519424,-0.05924482271075249,-0.027196479961276054,-0.012317732907831669,-0.002003844128921628,-0.04170098900794983,0.009784388355910778,0.05017004534602165,0.007245698478072882,-0.04602634906768799,0.00464976578950882,-0.04081689566373825,-0.024336077272892,-0.005483883433043957,0.031377751380205154,-0.02489793486893177,0.0001674853847362101,0.012224683538079262,-0.020636266097426414,0.0759720653295517,-0.03682340681552887,-0.009318004362285137,0.014203701168298721,0.03253371641039848,0.00919023435562849,0.03334983065724373,-0.04796130955219269,0.0180816613137722,0.0017259392188861966,-0.014236313290894032,-0.011865638196468353,-0.018476851284503937,-0.03968924656510353,0.0865931361913681,0.020824097096920013,0.019571417942643166,0.03884703665971756,-0.04948091134428978,0.0525185726583004,-0.01710657775402069,-0.011047082021832466,0.0432458370923996,0.024821361526846886,-0.02173272706568241,0.016759604215621948,0.05095032975077629,-0.0011606375919654965,-0.02459150180220604,0.006788209546357393,0.02828664518892765,0.05151110887527466,0.05899643525481224,0.00617006653919816,-0.006532266736030579,-0.02207375504076481,0.05777912959456444,-0.03182777389883995,0.04698948562145233,-0.021196989342570305,-0.00011193843965884298,-0.034015167504549026,-0.03835451975464821,0.0664263665676117,-0.0016944835660979152,0.04981786757707596,0.05907682329416275,-0.04025719687342644,-0.018051423132419586,0.03551783040165901,0.004175930749624968,-0.0016821380704641342,-0.033173903822898865,-0.003552714828401804,0.010458962991833687,-0.07245758175849915,-0.02400754950940609,-0.015550673939287663,0.022652655839920044,-0.02889224886894226,-0.05215955898165703,0.058511607348918915,-0.01691323146224022,0.01194924209266901,-0.031986303627491,-0.022698868066072464,0.039034418761730194,-0.04407387599349022,0.02175913378596306,0.02207234315574169,-0.01051399577409029,-0.0031237455550581217,0.033805135637521744,0.05211447551846504,0.04839110001921654,0.016515783965587616,0.010404798202216625,0.004021860659122467,-0.02186610735952854,-0.030788594856858253,0.041908491402864456,-0.11405441164970398,-0.002000373788177967,0.021786104887723923,0.029708074405789375,0.009034655056893826,-0.02141636051237583,0.02855265885591507,-0.008405276574194431,-0.08211936056613922,0.001516841002739966,0.0023708322551101446,-0.029142804443836212,0.016493046656250954,0.0093418313190341,0.0055644698441028595,0.04564180597662926,-0.020352398976683617,0.049023475497961044,0.008720461279153824,-0.015928570181131363,0.00745675154030323,-0.005895503796637058,0.00877908244729042,0.00517177814617753,-0.03206334263086319,0.04192207008600235,0.01685313880443573,0.003154725767672062,-0.030798133462667465,0.024596532806754112,-0.06996645778417587,0.003186721820384264,-0.015067454427480698,0.009467990137636662,0.012681183405220509,-0.026482775807380676,0.017277346923947334,0.022840715944767,0.048410430550575256,-0.002432913752272725,0.020136119797825813,-0.05033097788691521,-0.04401204735040665,0.03576185181736946,-0.01085417065769434,-0.03815491870045662,0.01938304677605629,0.021248936653137207,-0.010054933838546276,-0.007182024884968996,-0.005080997012555599,0.02236100099980831,0.0038369838148355484,-0.00788159854710102,0.03187603875994682,0.03401527926325798,-0.07858874648809433,-0.002153107663616538,0.01157157588750124,0.006380932871252298,-0.008867963217198849,0.008558443747460842,-0.02430913783609867,0.01838824525475502,-0.06868713349103928,-0.03224657103419304,0.07663393765687943,0.03930121287703514,-0.02947266213595867,-0.044741518795490265,0.025205230340361595,-0.03456458821892738,0.016587303951382637,-0.010186959058046341,-0.0053050401620566845,0.023517245426774025,-0.05304916948080063,-0.04269424453377724,0.03676723316311836,0.0472034327685833,0.01115524023771286,-0.03493129834532738,-0.018752580508589745,0.051386747509241104,-0.02129872888326645,-0.05118921026587486,-0.015923049300909042,0.03836392983794212,-0.025740226730704308,-0.006841606926172972,0.036804378032684326,0.05014026165008545,-0.021784542128443718,0.015732217580080032,0.008325372822582722,-0.005984541494399309,-0.01959310472011566,0.05592357739806175,-0.0160666573792696,-0.008066859096288681,-0.035644903779029846,0.012614208273589611,0.04865795746445656,-0.001596439047716558,-0.013478345237672329,-0.008085529319941998,0.011435918509960175,-0.018076954409480095,0.032639943063259125,0.05229070782661438,0.002480605151504278,0.014031445607542992,0.014973634853959084,-0.031099416315555573,0.010129841044545174,0.05521800369024277,-0.04156232625246048,0.030423955991864204,-0.013229156844317913,-0.016284596174955368,-0.030473489314317703,0.0029328963719308376,-0.008598212152719498,0.04279736801981926,-0.0476144403219223,-0.014790691435337067,-0.005077433306723833,-0.07396775484085083,-7.499886118380482e-33,0.014684815891087055,-0.007424542680382729,-0.03856681287288666,-0.012790977023541927,-0.03887945041060448,0.02017076499760151,0.040486935526132584,-0.03428143262863159,0.0009769416647031903,0.011491070501506329,-0.014457969926297665,-0.007068955805152655,0.004669946618378162,-0.011975737288594246,0.042915549129247665,-0.002026896458119154,0.05918778106570244,-0.025767987594008446,0.044232673943042755,0.030816109851002693,-0.017736075446009636,0.04458692669868469,0.03795627877116203,-0.010871194303035736,-0.03697321563959122,0.03289775177836418,-0.005899535492062569,0.002867534290999174,0.0508735366165638,-0.0013870055554434657,0.02743603102862835,-0.01789027824997902,-0.010543245822191238,-0.025041166692972183,-0.02792574092745781,-0.048791155219078064,0.02473481558263302,-0.035113945603370667,-0.013183323666453362,-0.031535834074020386,0.06660368293523788,0.020483672618865967,0.02091125026345253,0.01811911165714264,0.0053695738315582275,-0.020204637199640274,0.025555476546287537,0.007133524399250746,-0.01536235585808754,-0.03960408270359039,0.029196908697485924,0.02117665484547615,-0.013749144040048122,0.04029984772205353,0.027401860803365707,0.08574896305799484,0.0476711131632328,-0.018276037648320198,-0.08035314828157425,0.03375570848584175,-0.040234632790088654,0.001386061660014093,0.0013725977623835206,-0.0012251031585037708,0.028662260621786118,0.0094898147508502,-0.050639789551496506,0.06648416817188263,0.04221023991703987,0.02732170559465885,0.016286790370941162,0.02424110658466816,0.0004147064173594117,-0.04284624382853508,0.005800934508442879,-0.024788817390799522,0.02528667263686657,0.02177056297659874,0.03908821940422058,0.06203222647309303,-0.06056912615895271,0.0001792577386368066,-0.026312068104743958,0.031310778111219406,0.02862110547721386,-0.016984475776553154,-0.014421666972339153,-0.015859734266996384,0.017409855499863625,0.0068549057468771935,0.013434367254376411,0.009849154390394688,-0.03439706191420555,0.031254664063453674,-0.03573251888155937,-0.039990998804569244,0.037035491317510605,0.08156571537256241,0.016603488475084305,-0.04325813055038452,-0.002056591212749481,0.03256002813577652,-0.008367974311113358,-0.04847755655646324,0.006696526892483234,-0.0004697112599387765,0.013971059583127499,-0.006758383475244045,-0.044647593051195145,0.006358494982123375,0.044241636991500854,0.01168579701334238,-0.013602088205516338,-0.06647777557373047,0.007915876805782318,-0.020221522077918053,-0.005512808915227652,0.008703289553523064,0.019961891695857048,0.06568044424057007,0.01575429178774357,0.0027651593554764986,-0.021138915792107582,0.04395107924938202,0.03572508692741394,-0.03282098099589348,0.0037651502061635256,-0.019541187211871147,0.016355836763978004,-0.03500669077038765,-0.014947095885872841,-0.0012758332304656506,3.31776192297184e-7,-0.017143614590168,0.06897026300430298,0.0018637790344655514,0.10418707132339478,0.02414003387093544,-0.009876091964542866,-0.04938332363963127,-0.024853376671671867,0.009741781279444695,-0.03256024792790413,0.004536186810582876,-0.03603663668036461,0.013285242021083832,0.06552286446094513,0.043246518820524216,-0.07887471467256546,-0.004325449466705322,-0.06745091080665588,-0.07030282914638519,0.006298019550740719,0.06751462817192078,-0.004515436477959156,0.021245205774903297,0.017533041536808014,0.02141098491847515,0.08992645144462585,0.0013620967511087656,-0.05981576815247536,-0.05120621249079704,0.017405947670340538,0.002419873373582959,-0.006380216218531132,-0.028720201924443245,-0.024929365143179893,-0.022923661395907402,0.008584213443100452,-0.04399632290005684,-0.06852767616510391,0.01671898551285267,0.03373100236058235,0.024024995043873787,0.03207368031144142,0.008646732196211815,-0.02050546556711197,0.0064905122853815556,-0.003367441240698099,0.010619834996759892,-0.06256051361560822,-0.01617521420121193,0.02169266901910305,0.07163247466087341,-0.008463927544653416,-0.01616363227367401,-0.018734706565737724,0.016308927908539772,0.027771232649683952,-0.004194680601358414,0.03803211823105812,0.01780467852950096,0.018379703164100647,0.009840675629675388,0.0004845317453145981,0.0007038695621304214,0.042574699968099594,-0.0025411329697817564,0.030597874894738197,-0.00995729025453329,3.889301220558085e-34,0.05020350217819214,-0.048726439476013184,0.021140919998288155,0.0011544740991666913,0.019335037097334862,-0.02011043019592762,0.07253292202949524,0.018338533118367195,0.020310258492827415,-0.041125182062387466,-0.010081304237246513]'
SET
  @TechnicalDesignVector_786254de = N'[-0.037243347615003586,-0.04163344204425812,-0.03760487586259842,-0.022184383124113083,0.00457170931622386,-0.014934906736016273,0.014143017120659351,0.024717481806874275,0.019729088991880417,0.024554893374443054,0.01705416850745678,0.07509054243564606,0.019648492336273193,0.09453611075878143,-0.03587815910577774,-0.09592031687498093,-0.031046869233250618,0.015798557549715042,0.008680609054863453,0.01914628967642784,0.03843548521399498,0.008876863867044449,-0.00009088059596251696,0.0172494538128376,-0.04405847191810608,-0.027412094175815582,-0.027814671397209167,-0.0011111547937616706,0.02333117090165615,-0.07924695312976837,0.02765212208032608,0.05360400676727295,-0.03981342166662216,0.01791132427752018,0.0000019769913706113584,-0.019633933901786804,-0.02089323289692402,0.0014149743365123868,-0.03419576585292816,0.01707468368113041,0.09092075377702713,-0.07948905229568481,0.07013213634490967,-0.022131262347102165,0.03505844622850418,0.03611702844500542,-0.02924702875316143,-0.0719115138053894,0.04829391464591026,-0.052965085953474045,0.019740888848900795,0.03384435921907425,-0.06933838129043579,0.0003582982753869146,0.019078949466347694,-0.016764884814620018,-0.004625307861715555,0.05217770114541054,0.06153563782572746,0.0743124857544899,-0.024714747443795204,0.012916695326566696,-0.004138296935707331,-0.018652906641364098,0.041759006679058075,-0.005494183395057917,0.08352621644735336,-0.059719108045101166,0.009380962699651718,0.05781596153974533,0.06800085306167603,-0.0472746379673481,0.013079020194709301,-0.004544078838080168,-0.026476573199033737,-0.00674898037686944,-0.03518364205956459,-0.04672553390264511,-0.0016175080090761185,-0.029609249904751778,-0.055967897176742554,-0.0127919502556324,-0.0374242328107357,-0.01775449328124523,0.04002649709582329,-0.023324331268668175,-0.03620995953679085,-0.020719757303595543,-0.003362825606018305,-0.004261778201907873,0.0015681205550208688,-0.01897205039858818,0.022397462278604507,0.015093653462827206,-0.0001591106120031327,-0.03519348427653313,0.02425517700612545,-0.003879728028550744,0.04312872141599655,0.0274045392870903,0.07629535347223282,0.03610270470380783,0.03240333870053291,0.03826162591576576,0.07305018603801727,-0.06539171934127808,0.02376624569296837,-0.10023261606693268,-0.0022464056964963675,0.056602593511343,0.012189960107207298,-0.007423592731356621,0.0005057569360360503,-0.027909280732274055,-0.018204716965556145,0.062312450259923935,-0.004017278086394072,0.01576431281864643,0.00029521912802010775,0.02045927569270134,0.11995379626750946,-0.007173767779022455,0.00746862543746829,0.007193648722022772,0.0007015240262262523,0.04712185263633728,-0.014208407141268253,-0.03654443845152855,0.003466306021437049,0.05219739302992821,-0.035614948719739914,-0.03991479426622391,0.04980703070759773,0.025169402360916138,0.010355854406952858,0.01647770218551159,0.029388170689344406,0.05394186079502106,-0.041539426892995834,-0.06068810448050499,0.007050875574350357,0.024920322000980377,-0.05392525717616081,-0.014302351512014866,0.015870315954089165,-0.000012147021152486559,-0.0029623147565871477,0.08131515979766846,-0.00019839033484458923,0.039940740913152695,-0.07206029444932938,0.014460687525570393,-0.041765838861465454,0.019399594515562057,-0.045891355723142624,0.0018615622539073229,-0.03186940401792526,-0.011015540920197964,-0.006975739728659391,-0.04190457612276077,0.026251785457134247,0.00469243573024869,0.01958227902650833,0.0051851351745426655,0.005838891491293907,-0.01241584587842226,-0.049947258085012436,-0.012271985411643982,-0.10588762164115906,-0.021985512226819992,0.04275241494178772,-0.060023874044418335,-0.01185885164886713,-0.03346230089664459,0.02818816900253296,0.01096431352198124,0.05301963537931442,-0.024206044152379036,-0.029276786372065544,0.012945875525474548,0.001257680356502533,-0.09262614697217941,-0.02380499243736267,0.013966294005513191,0.05437782034277916,-0.008245236240327358,-0.13062845170497894,0.0048459614627063274,-0.0022641343530267477,-0.000003386732259968994,-0.024113619700074196,0.026026085019111633,-0.014733368530869484,-0.021091848611831665,-0.035913318395614624,-0.02191716991364956,0.003077096538618207,-0.039928313344717026,0.0440528504550457,0.00661995867267251,-0.01597491279244423,0.014722856692969799,0.04244033992290497,0.0008389649447053671,-0.024114403873682022,-0.01857573539018631,-0.03294725716114044,-0.03885955736041069,0.010936344973742962,0.00685414532199502,-0.01989070512354374,-0.018830914050340652,-0.05413345992565155,-0.003867020597681403,-0.010685756802558899,0.04121936485171318,0.007954539731144905,0.030243773013353348,-0.08861653506755829,-0.0011119135888293386,-0.052497878670692444,-0.06805306673049927,0.007665928453207016,-0.012887599878013134,0.10005773603916168,0.02983275055885315,0.02206329070031643,-0.016647102311253548,-0.009494509547948837,0.02072451263666153,-0.04028783738613129,-0.015680108219385147,0.01953899674117565,0.046634212136268616,0.044893715530633926,0.05601675435900688,0.002705675084143877,-0.014150581322610378,0.013627729378640652,-0.019048701971769333,-0.02374166250228882,-0.040636781603097916,-0.01868775673210621,0.008430452086031437,-0.022191347554326057,-0.013661330565810204,-0.027219440788030624,-0.014883783645927906,-0.017818352207541466,-0.03747943043708801,0.018918493762612343,0.027740728110074997,-0.0044207400642335415,-0.047061629593372345,0.005750472657382488,0.01441018097102642,0.12472965568304062,0.03179214149713516,0.019594943150877953,0.007085695862770081,0.04034850373864174,0.05205708369612694,-0.0013008089736104012,-0.003892055479809642,0.03083215095102787,-0.013532128185033798,0.06196211278438568,-0.00024048308841884136,-0.037288177758455276,0.027433039620518684,0.012319072149693966,0.030185766518115997,-0.027957843616604805,-0.02266172133386135,-0.0016506090760231018,0.06563318520784378,-0.020363228395581245,-0.0034757654648274183,-0.026044469326734543,0.008832527324557304,-0.05221796780824661,-0.048028312623500824,0.027931323274970055,0.0183027982711792,-0.013596980832517147,0.008985895663499832,0.020634468644857407,-0.0004570443124976009,0.02369893714785576,-0.005493867211043835,0.00036007293965667486,-0.002597145037725568,0.01630318909883499,-0.04663976654410362,-0.028566336259245872,0.013373038731515408,0.019205335527658463,0.06086583808064461,-0.05974893644452095,0.016043081879615784,-0.04280635342001915,0.0031415352132171392,0.01646183431148529,0.0016986440168693662,-0.015657514333724976,0.03305813670158386,0.05814000591635704,0.04752793535590172,-0.006046381313353777,0.07902007550001144,0.028915684670209885,-0.028592729941010475,0.026716958731412888,-0.038287147879600525,0.015335815027356148,0.03271524980664253,-0.07579359412193298,0.00990730244666338,-0.01596355251967907,0.04561232775449753,-0.0008029987220652401,-0.03236967325210571,-0.0020787653047591448,0.006876997649669647,-0.06452637910842896,0.010694102384150028,-0.040890324860811234,-0.0013209979515522718,-0.07574521005153656,0.033883772790431976,-0.006260812748223543,-0.047459911555051804,-0.01061207801103592,0.04775493964552879,0.05777356028556824,0.03194607049226761,-0.04449329897761345,-0.08018847554922104,0.021983906626701355,0.0010680375853553414,0.018697543069720268,0.023145657032728195,0.007996530272066593,0.01700802519917488,0.028187302872538567,-0.020915349945425987,0.04007486253976822,0.0004378667217679322,-0.004518753848969936,0.02361774817109108,0.039451468735933304,-0.005555898416787386,0.029994729906320572,-0.00429576588794589,0.00568322092294693,0.010371876880526543,-0.07200431823730469,-0.023805035278201103,-0.08034610003232956,-0.029136570170521736,0.07692505419254303,0.04320680722594261,0.03907553851604462,0.03755098208785057,-0.02622953988611698,0.024514324963092804,-0.0038606016896665096,0.02664799988269806,0.021048642694950104,-0.009099633432924747,-0.0011571565410122275,0.029862459748983383,0.021397344768047333,0.010153379291296005,-0.012062041088938713,-0.02873927913606167,-0.004712795373052359,0.02755803056061268,0.05407384783029556,0.0034923595376312733,-0.017640018835663795,-0.0349850095808506,0.07138275355100632,-0.002953148214146495,0.04947935789823532,-0.05777791514992714,-0.032780617475509644,0.007740019354969263,-0.03765985742211342,0.04956551641225815,-0.004327398259192705,0.007405812386423349,0.05259207636117935,-0.058423999696969986,-0.004891399294137955,0.032425783574581146,-0.02047792449593544,0.02300524152815342,0.020007196813821793,0.017919044941663742,0.04824285954236984,-0.08585023134946823,-0.02529076673090458,-0.01896466314792633,0.011563665233552456,-0.08216676861047745,-0.043793171644210815,0.06438294053077698,-0.005398205481469631,0.06057439371943474,-0.010873119346797466,0.004395458847284317,-0.03152501955628395,-0.050377003848552704,-0.006418494042009115,0.028773298487067223,0.0018325264099985361,-0.024967482313513756,0.06291159987449646,0.002609262941405177,0.017504408955574036,-0.033584821969270706,0.020302265882492065,-0.017524775117635727,0.026596536859869957,-0.04481469467282295,0.03518399968743324,-0.040359482169151306,0.008454764261841774,0.007070960011333227,-0.012636329978704453,-0.007010537665337324,-0.012437701225280762,-0.022036921232938766,-0.030159873887896538,-0.061844490468502045,0.006107096094638109,-0.02730145864188671,0.027756186202168465,-0.01715891808271408,-0.020292095839977264,-0.002249945653602481,0.06139104813337326,-0.002352713141590357,0.0008938711835071445,0.008553415536880493,-0.031770579516887665,0.004055144265294075,0.015557427890598774,0.005217714700847864,-0.004947143141180277,-0.00002712680543481838,-0.029728975147008896,0.03114861436188221,0.056731417775154114,-0.061819009482860565,0.03840853273868561,-0.034015953540802,-0.02871585451066494,0.01431592833250761,0.023209039121866226,0.032859448343515396,-0.04232281073927879,-0.0035986267030239105,0.04571160301566124,0.0330657958984375,0.09494106471538544,0.04179680719971657,-0.022481806576251984,-0.03856167942285538,0.09437647461891174,-0.002803487703204155,-0.03847670182585716,0.02999827079474926,0.05303393304347992,0.013303558342158794,-0.017583085224032402,0.00778375007212162,-0.044320374727249146,-0.013739834539592266,0.012644382193684578,0.014158696867525578,0.003878055838868022,-0.08313794434070587,0.01061885803937912,-0.009223949164152145,-0.013873538933694363,-0.03186449781060219,-0.009791474789381027,0.0073187523521482944,-0.03515491262078285,-0.023446762934327126,-0.04194682091474533,0.05672609061002731,0.05229884758591652,-0.025812827050685883,-0.08872441947460175,0.029793620109558105,-0.013606151565909386,-0.016797710210084915,-0.018372219055891037,-0.003454075427725911,0.0019053957657888532,-0.05465284734964371,-0.020009158179163933,0.0171820055693388,0.03225918859243393,0.02835751697421074,0.004560610745102167,0.04118676856160164,0.029552917927503586,-0.013647474348545074,-0.04056756943464279,0.04178088903427124,0.01954997330904007,-0.00985659658908844,-0.014313485473394394,-0.03290817514061928,0.0016397506697103381,-0.01437750831246376,-0.012901782058179379,0.0033391055185347795,0.020789002999663353,-0.008832994848489761,0.09385126084089279,0.01475087832659483,-0.018350550904870033,-0.010163231752812862,-0.009468892589211464,0.018481677398085594,-0.06633586436510086,-0.02506493777036667,0.010084383189678192,-0.026147855445742607,-0.019774675369262695,0.04684172570705414,0.009284484200179577,-0.04776398837566376,0.041370242834091187,-0.02627219446003437,-0.021220596507191658,-0.015616118907928467,0.011278434656560421,0.003411089302971959,0.021084517240524292,0.013960112817585468,0.033920057117938995,-0.038716062903404236,-0.01642422378063202,0.03346927836537361,0.024765698239207268,-0.027356281876564026,-0.03481904789805412,-0.028494639322161674,-0.041081350296735764,-6.53327197091153e-33,0.01247737742960453,0.0008287095697596669,-0.04554497078061104,0.06866264343261719,0.0014857283094897866,-0.03050820343196392,0.0473790317773819,-0.011384802870452404,0.01499911304563284,-0.006467719096690416,0.0001283770106965676,-0.00966184027493,-0.002486197277903557,-0.006447490770369768,-0.02835681103169918,0.01008436270058155,0.038331348448991776,-0.009801985695958138,-0.008792737498879433,-0.0010698646074160933,0.023151298984885216,0.057336706668138504,-0.011443283408880234,-0.12594422698020935,-0.01677696593105793,0.009198743849992752,0.026448823511600494,0.005912883207201958,0.03676525875926018,-0.0072345673106610775,-0.007598728407174349,-0.007692873477935791,-0.016446460038423538,0.04000944644212723,-0.043345727026462555,0.016646983101963997,-0.052849315106868744,-0.035093437880277634,0.0020022657699882984,0.011866506189107895,0.09843339025974274,0.028711335733532906,0.03352672979235649,-0.023618753999471664,-0.009437823668122292,-0.024214576929807663,-0.003128511132672429,0.01868237368762493,-0.003269420238211751,0.04593135416507721,0.04409978911280632,0.027294468134641647,-0.0005624734912998974,0.016695162281394005,-0.0191105455160141,0.030813073739409447,0.03086414933204651,0.027249908074736595,-0.0712876096367836,0.00415360601618886,-0.02256135642528534,-0.02488958276808262,-0.010304204188287258,-0.016412954777479172,0.05224275588989258,0.008600987493991852,0.01215402316302061,0.05113019421696663,-0.04879628121852875,0.02594451978802681,0.021461954340338707,-0.007568139582872391,-0.001722937449812889,-0.033140625804662704,0.01452830620110035,-0.026766372844576836,-0.009552392177283764,0.027244791388511658,0.036869216710329056,0.00642044935375452,-0.007838199846446514,0.013393525965511799,-0.002925699111074209,-0.015041890554130077,0.002760948846116662,-0.038711417466402054,-0.0015412926441058517,-0.004975218791514635,0.009198354557156563,-0.004705924075096846,-0.008812621235847473,0.0507366880774498,-0.046016156673431396,0.025945566594600677,-0.017713509500026703,-0.051607195287942886,0.03334636613726616,0.034599289298057556,0.002918804995715618,-0.0487636923789978,0.022729581221938133,0.025921398773789406,-0.05222901701927185,-0.04223809763789177,0.0009369977633468807,-0.0075959148816764355,-0.0059438967145979404,-0.003522929735481739,-0.06260780245065689,0.018020756542682648,0.004803890828043222,0.011582874692976475,-0.0089211231097579,0.002271642442792654,0.018619656562805176,-0.03457394987344742,-0.004796438384801149,0.013687672093510628,0.04266054555773735,0.06657622009515762,-0.017455676570534706,0.0027005719020962715,-0.0528116375207901,0.020968401804566383,0.029615983366966248,-0.04982909932732582,0.008921063505113125,-0.07334496080875397,0.01955508440732956,-0.021092955023050308,0.007392777595669031,-0.02126293070614338,2.8378968863762566e-7,-0.008345912210643291,0.03759254515171051,-0.013131383806467056,0.04146542027592659,0.029101982712745667,-0.05227850005030632,-0.06565887480974197,0.0076802498660981655,0.023523440584540367,-0.07603798061609268,-0.028924793004989624,-0.03855554386973381,0.040253981947898865,0.032341118901968,-0.013021634891629219,-0.11770415306091309,0.046233177185058594,-0.07848415523767471,-0.033485297113657,0.014403221197426319,-0.013964072801172733,-0.009070190601050854,0.05109964311122894,0.00967163685709238,-0.007472547702491283,-0.01248145941644907,0.019431589171290398,-0.05110415071249008,0.015151694416999817,-0.0381641648709774,0.008626057766377926,0.026629913598299026,0.015585286542773247,0.03280753642320633,-0.011688709259033203,-0.003957078326493502,0.00994024332612753,0.013911394402384758,0.007502345833927393,0.08032537996768951,0.05194459855556488,-0.010441146790981293,-0.029321422800421715,-0.005838729441165924,0.02890028804540634,-0.014453318901360035,-0.022438151761889458,0.02163100615143776,0.0022127057891339064,0.013563004322350025,0.0014659997541457415,-0.01930796355009079,-0.0014588275225833058,-0.02094113454222679,0.017593352124094963,0.012428142130374908,0.03952861577272415,0.06714817136526108,0.01205870695412159,0.08886326104402542,-0.021326662972569466,-0.08534897863864899,0.043005675077438354,0.039420563727617264,0.0327199287712574,-0.0401139073073864,-0.03616112470626831,3.6222442864968675e-34,0.046211887151002884,-0.06989692151546478,0.03628760576248169,0.00011773281585192308,0.030494386330246925,-0.019073007628321648,0.12146377563476562,-0.006182996090501547,0.01985897682607174,-0.047916099429130554,-0.029315996915102005]'
SET
  @HasCustomProps_786254de = 1
SET
  @HasCustomEvents_786254de = 0
SET
  @RequiresData_786254de = 0
SET
  @DependencyCount_786254de = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_786254de = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_786254de = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_786254de = 1
SET
  @ID_786254de = 'A5EC4AE9-59E8-41F9-BBD2-59CE14869B4C'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_786254de,
  @Name = @Name_786254de,
  @Version = @Version_786254de,
  @VersionSequence = @VersionSequence_786254de,
  @Title = @Title_786254de,
  @Description = @Description_786254de,
  @Type = @Type_786254de,
  @Status = @Status_786254de,
  @DeveloperName = @DeveloperName_786254de,
  @DeveloperEmail = @DeveloperEmail_786254de,
  @DeveloperOrganization = @DeveloperOrganization_786254de,
  @SourceRegistryID = @SourceRegistryID_786254de,
  @ReplicatedAt = @ReplicatedAt_786254de,
  @LastSyncedAt = @LastSyncedAt_786254de,
  @Specification = @Specification_786254de,
  @FunctionalRequirements = @FunctionalRequirements_786254de,
  @TechnicalDesign = @TechnicalDesign_786254de,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_786254de,
  @TechnicalDesignVector = @TechnicalDesignVector_786254de,
  @HasCustomProps = @HasCustomProps_786254de,
  @HasCustomEvents = @HasCustomEvents_786254de,
  @RequiresData = @RequiresData_786254de,
  @DependencyCount = @DependencyCount_786254de,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_786254de,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_786254de,
  @HasRequiredCustomProps = @HasRequiredCustomProps_786254de,
  @ID = @ID_786254de;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_7df1eaf2 NVARCHAR(MAX),
@Name_7df1eaf2 NVARCHAR(500),
@Version_7df1eaf2 NVARCHAR(50),
@VersionSequence_7df1eaf2 INT,
@Title_7df1eaf2 NVARCHAR(1000),
@Description_7df1eaf2 NVARCHAR(MAX),
@Type_7df1eaf2 NVARCHAR(255),
@Status_7df1eaf2 NVARCHAR(50),
@DeveloperName_7df1eaf2 NVARCHAR(255),
@DeveloperEmail_7df1eaf2 NVARCHAR(255),
@DeveloperOrganization_7df1eaf2 NVARCHAR(255),
@SourceRegistryID_7df1eaf2 UNIQUEIDENTIFIER,
@ReplicatedAt_7df1eaf2 DATETIMEOFFSET,
@LastSyncedAt_7df1eaf2 DATETIMEOFFSET,
@Specification_7df1eaf2 NVARCHAR(MAX),
@FunctionalRequirements_7df1eaf2 NVARCHAR(MAX),
@TechnicalDesign_7df1eaf2 NVARCHAR(MAX),
@FunctionalRequirementsVector_7df1eaf2 NVARCHAR(MAX),
@TechnicalDesignVector_7df1eaf2 NVARCHAR(MAX),
@HasCustomProps_7df1eaf2 BIT,
@HasCustomEvents_7df1eaf2 BIT,
@RequiresData_7df1eaf2 BIT,
@DependencyCount_7df1eaf2 INT,
@TechnicalDesignVectorEmbeddingModelID_7df1eaf2 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_7df1eaf2 NVARCHAR(MAX),
@HasRequiredCustomProps_7df1eaf2 BIT,
@ID_7df1eaf2 UNIQUEIDENTIFIER
SET
  @Namespace_7df1eaf2 = N'CRM/Analytics'
SET
  @Name_7df1eaf2 = N'ProductRevenueMatrix'
SET
  @Version_7df1eaf2 = N'1.0.0'
SET
  @VersionSequence_7df1eaf2 = 1
SET
  @Title_7df1eaf2 = N'Product Revenue Matrix'
SET
  @Description_7df1eaf2 = N'Visualize product performance across customers and time periods in an interactive matrix format with treemap and sparklines'
SET
  @Type_7df1eaf2 = N'Table'
SET
  @Status_7df1eaf2 = N'Published'
SET
  @Specification_7df1eaf2 = N'{"name":"ProductRevenueMatrix","namespace":"CRM/Analytics","type":"Matrix","location":"embedded","code":"function ProductRevenueMatrix({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [products, setProducts] = useState([]);\n  const [lineItems, setLineItems] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''treemap'');\n  const [timePeriod, setTimePeriod] = useState(savedUserSettings?.timePeriod || ''month'');\n  const [sortBy, setSortBy] = useState(''revenue'');\n  const [startDate, setStartDate] = useState(savedUserSettings?.startDate || null);\n  const [endDate, setEndDate] = useState(savedUserSettings?.endDate || null);\n  const [aiInsights, setAiInsights] = useState(null);\n  const [loadingInsights, setLoadingInsights] = useState(false);\n  const [insightsError, setInsightsError] = useState(null);\n  const [insightsCollapsed, setInsightsCollapsed] = useState(false);\n  \n  // Load sub-components from registry\n  const Treemap = components[''ProductRevenueTreemap''];\n  const MatrixTable = components[''ProductRevenueMatrixTable''];\n  const DetailPanel = components[''ProductRevenueDetailPanel''];\n  const AIInsightsPanel = components[''AIInsightsPanel''];\n\n  useEffect(() => {\n    loadData();\n  }, [timePeriod, startDate, endDate]);\n\n  const loadData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const dateFilter = getDateFilter();\n      \n      // Use RunViews for batch loading - single server call\n      const batchResults = await utilities.rv.RunViews([\n        {\n          EntityName: ''Products'',\n          OrderBy: ''ProductName ASC''\n        },\n        {\n          EntityName: ''Invoice Line Items'',\n          OrderBy: ''TotalPrice DESC'',\n          MaxRows: 1000\n        },\n        {\n          EntityName: ''Invoices'',\n          ExtraFilter: dateFilter,\n          OrderBy: ''InvoiceDate DESC'',\n          MaxRows: 500\n        }\n      ]);\n\n      // Process results - RunViews returns an array directly\n      if (batchResults && Array.isArray(batchResults)) {\n        const [productsResult, lineItemsResult, invoicesResult] = batchResults;\n        \n        let hasError = false;\n        \n        if (productsResult.Success) {\n          setProducts(productsResult.Results || []);\n        } else {\n          console.error(''Failed to load products:'', productsResult.ErrorMessage);\n          hasError = true;\n        }\n        \n        if (lineItemsResult.Success) {\n          setLineItems(lineItemsResult.Results || []);\n        } else {\n          console.error(''Failed to load line items:'', lineItemsResult.ErrorMessage);\n          hasError = true;\n        }\n        \n        if (invoicesResult.Success) {\n          setInvoices(invoicesResult.Results || []);\n        } else {\n          console.error(''Failed to load invoices:'', invoicesResult.ErrorMessage);\n          hasError = true;\n        }\n        \n        // Only set error if something critical failed and we have no data to work with\n        if (hasError && products.length === 0 && lineItems.length === 0 && invoices.length === 0) {\n          setError(''Failed to load data. Please try again.'');\n        } else {\n          // Clear any previous errors if we have some data\n          setError(null);\n        }\n      } else {\n        setError(''Failed to load data'');\n      }\n    } catch (err) {\n      setError(err.message);\n      console.error(''Error loading data:'', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDateFilter = () => {\n    // If custom dates are set, use them\n    if (timePeriod === ''custom'' && startDate && endDate) {\n      return `InvoiceDate >= ''$' + '{startDate}'' AND InvoiceDate <= ''$' + '{endDate}''`;\n    }\n    \n    const now = new Date();\n    let filterStart;\n    \n    switch (timePeriod) {\n      case ''month'':\n        filterStart = new Date(now.getFullYear(), now.getMonth(), 1);\n        break;\n      case ''quarter'':\n        filterStart = new Date(now.getFullYear(), Math.floor(now.getMonth() / 3) * 3, 1);\n        break;\n      case ''year'':\n        filterStart = new Date(now.getFullYear(), 0, 1);\n        break;\n      case ''all'':\n        return '''';\n      default:\n        return '''';\n    }\n    \n    return filterStart ? `InvoiceDate >= ''$' + '{filterStart.toISOString().split(''T'')[0]}''` : '''';\n  };\n\n  const calculateProductMetrics = () => {\n    const productMetrics = {};\n    \n    // Initialize metrics for each product\n    products.forEach(product => {\n      productMetrics[product.ID] = {\n        id: product.ID,\n        name: product.ProductName,\n        category: product.Category || ''Uncategorized'',\n        price: product.UnitPrice || 0,\n        cost: product.Cost || 0,\n        revenue: 0,\n        quantity: 0,\n        margin: 0,\n        customers: new Set(),\n        transactions: 0,\n        trend: []\n      };\n    });\n    \n    // Calculate revenue from line items\n    const invoiceIds = new Set(invoices.map(inv => inv.ID));\n    \n    lineItems.forEach(item => {\n      if (invoiceIds.has(item.InvoiceID) && productMetrics[item.ProductID]) {\n        const metrics = productMetrics[item.ProductID];\n        // Use TotalPrice if available, otherwise calculate\n        const lineTotal = item.TotalPrice || (item.Quantity * item.UnitPrice * (1 - (item.Discount || 0) / 100));\n        metrics.revenue += lineTotal;\n        metrics.quantity += item.Quantity || 0;\n        metrics.transactions++;\n        \n        // Find invoice to get customer\n        const invoice = invoices.find(inv => inv.ID === item.InvoiceID);\n        if (invoice && invoice.AccountID) {\n          metrics.customers.add(invoice.AccountID);\n        }\n      }\n    });\n    \n    // Calculate margins and generate trend data\n    Object.values(productMetrics).forEach(metrics => {\n      if (metrics.price > 0 && metrics.cost > 0) {\n        metrics.margin = ((metrics.price - metrics.cost) / metrics.price * 100);\n      }\n      metrics.customerCount = metrics.customers.size;\n      \n      // Generate trend data (simulated for demo - in real app, calculate from historical data)\n      for (let i = 0; i < 12; i++) {\n        metrics.trend.push(Math.random() * metrics.revenue * 0.3 + metrics.revenue * 0.7);\n      }\n    });\n    \n    return productMetrics;\n  };\n\n\n  const generateAIInsights = async () => {\n    if (!products || products.length === 0 || !lineItems || lineItems.length === 0) {\n      setInsightsError(''No data available for analysis'');\n      return;\n    }\n\n    setLoadingInsights(true);\n    setInsightsError(null);\n    \n    try {\n      const metrics = calculateProductMetrics();\n      const topProductsList = Object.values(metrics)\n        .filter(p => p.revenue > 0)\n        .sort((a, b) => b.revenue - a.revenue);\n      \n      // Calculate key insights data\n      const totalRevenue = topProductsList.reduce((sum, p) => sum + p.revenue, 0);\n      const avgMargin = topProductsList.length > 0 \n        ? topProductsList.reduce((sum, p) => sum + p.margin, 0) / topProductsList.length \n        : 0;\n      \n      // Find underperformers\n      const underperformers = topProductsList.filter(p => p.margin < 20 && p.revenue > 0);\n      \n      // Calculate category performance\n      const categoryPerformance = {};\n      topProductsList.forEach(p => {\n        if (!categoryPerformance[p.category]) {\n          categoryPerformance[p.category] = { revenue: 0, products: 0, avgMargin: 0 };\n        }\n        categoryPerformance[p.category].revenue += p.revenue;\n        categoryPerformance[p.category].products++;\n        categoryPerformance[p.category].avgMargin += p.margin;\n      });\n      \n      Object.values(categoryPerformance).forEach(cat => {\n        cat.avgMargin = cat.products > 0 ? cat.avgMargin / cat.products : 0;\n      });\n      \n      // Customer concentration\n      const uniqueCustomers = new Set();\n      lineItems.forEach(item => {\n        const invoice = invoices.find(inv => inv.ID === item.InvoiceID);\n        if (invoice?.AccountID) uniqueCustomers.add(invoice.AccountID);\n      });\n\n      const prompt = `Analyze this product revenue data and provide strategic insights:\n\n## Product Performance Summary\n- **Total Products:** $' + '{products.length}\n- **Active Products (with revenue):** $' + '{topProductsList.length}\n- **Total Revenue:** $$' + '{totalRevenue.toLocaleString()}\n- **Average Margin:** $' + '{avgMargin.toFixed(1)}%\n- **Unique Customers:** $' + '{uniqueCustomers.size}\n- **Time Period:** $' + '{timePeriod === ''custom'' ? `$' + '{startDate} to $' + '{endDate}` : `Last $' + '{timePeriod}`}\n\n## Top 5 Products by Revenue\n$' + '{topProductsList.slice(0, 5).map((p, i) => \n  `$' + '{i + 1}. **$' + '{p.name}**\n   - Revenue: $$' + '{p.revenue.toLocaleString()}\n   - Margin: $' + '{p.margin.toFixed(1)}%\n   - Customers: $' + '{p.customers.size}\n   - Units Sold: $' + '{p.quantity}`\n).join(''\\n'')}\n\n## Category Performance\n$' + '{Object.entries(categoryPerformance)\n  .sort((a, b) => b[1].revenue - a[1].revenue)\n  .slice(0, 5)\n  .map(([cat, data]) => \n    `- **$' + '{cat}:** $$' + '{data.revenue.toLocaleString()} revenue, $' + '{data.products} products, $' + '{data.avgMargin.toFixed(1)}% avg margin`\n  ).join(''\\n'')}\n\n## Underperforming Products (margin < 20%)\n$' + '{underperformers.length > 0 \n  ? underperformers.slice(0, 5).map(p => \n      `- **$' + '{p.name}:** $' + '{p.margin.toFixed(1)}% margin, $$' + '{p.revenue.toLocaleString()} revenue`\n    ).join(''\\n'')\n  : ''No underperforming products identified''}\n\n## Revenue Distribution\n- **Top 20% of products generate:** $' + '{((topProductsList.slice(0, Math.ceil(topProductsList.length * 0.2))\n    .reduce((sum, p) => sum + p.revenue, 0) / totalRevenue) * 100).toFixed(1)}% of revenue\n- **Products with zero revenue:** $' + '{products.length - topProductsList.length}\n\nBased on this specific data, please provide:\n1. **Portfolio Health Assessment** - Is this product mix balanced and healthy?\n2. **Margin Optimization Opportunities** - Which specific products need pricing/cost review?\n3. **Growth Opportunities** - What expansion potential exists based on the data?\n4. **Risk Factors** - What concentration risks or declining products should we monitor?\n5. **Strategic Recommendations** - 3-4 specific actionable next steps\n\nUse markdown formatting with headers (##), bullet points, and **bold** text. Reference the actual numbers in your analysis.`;\n\n      const result = await utilities.ai.ExecutePrompt({\n        systemPrompt: ''You are a product portfolio analyst specializing in revenue optimization and product strategy. Analyze the specific product data provided and give actionable insights. Always reference the actual numbers and percentages from the data. Format your response in clear markdown.'',\n        messages: prompt,\n        preferredModels: [''GPT-OSS-120B'', ''Qwen3 32B''],\n        modelPower: ''high'',\n        temperature: 0.7,\n        maxTokens: 1500\n      });\n\n      if (result?.success && result?.result) {\n        setAiInsights(result.result);\n      } else {\n        setInsightsError(''Failed to generate insights. Please try again.'');\n      }\n    } catch (error) {\n      console.error(''Error generating AI insights:'', error);\n      setInsightsError(''An error occurred while generating insights'');\n    } finally {\n      setLoadingInsights(false);\n    }\n  };\n\n  const handleProductClick = (product) => {\n    setSelectedProduct(product);\n    setIsPanelOpen(true);\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading product revenue data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#EF4444'' }}>Error: {error}</div>\n        <button \n          onClick={loadData}\n          style={{\n            marginTop: ''16px'',\n            padding: ''8px 16px'',\n            backgroundColor: ''#3B82F6'',\n            color: ''white'',\n            border: ''none'',\n            borderRadius: ''6px'',\n            cursor: ''pointer''\n          }}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  const productMetrics = calculateProductMetrics();\n  const topProducts = Object.values(productMetrics)\n    .filter(p => p.revenue > 0)\n    .sort((a, b) => b.revenue - a.revenue)\n    .slice(0, 5);\n\n  return (\n    <div style={{ padding: ''20px'', backgroundColor: ''#F3F4F6'', minHeight: ''100%'' }}>\n      <style>{`\n        @media (max-width: 1024px) {\n          .product-revenue-grid {\n            grid-template-columns: 1fr !important;\n          }\n        }\n        \n        /* Markdown content styling */\n        .markdown-insights h1 { font-size: 20px; font-weight: 600; color: #111827; margin: 16px 0 12px 0; }\n        .markdown-insights h2 { font-size: 18px; font-weight: 600; color: #1F2937; margin: 14px 0 10px 0; }\n        .markdown-insights h3 { font-size: 16px; font-weight: 600; color: #374151; margin: 12px 0 8px 0; }\n        .markdown-insights h4 { font-size: 14px; font-weight: 600; color: #4B5563; margin: 10px 0 6px 0; }\n        .markdown-insights p { margin: 8px 0; color: #374151; line-height: 1.6; }\n        .markdown-insights ul, .markdown-insights ol { margin: 8px 0; padding-left: 24px; color: #374151; }\n        .markdown-insights li { margin: 4px 0; line-height: 1.5; }\n        .markdown-insights strong { font-weight: 600; color: #1F2937; }\n        .markdown-insights em { font-style: italic; }\n        .markdown-insights code { background: #F3F4F6; padding: 2px 4px; border-radius: 3px; font-family: monospace; font-size: 0.9em; }\n        .markdown-insights blockquote { border-left: 3px solid #10B981; padding-left: 12px; margin: 12px 0; color: #4B5563; }\n        .markdown-insights hr { border: none; border-top: 1px solid #E5E7EB; margin: 16px 0; }\n        .markdown-insights a { color: #10B981; text-decoration: none; }\n        .markdown-insights a:hover { text-decoration: underline; }\n      `}</style>\n      <div style={{ marginBottom: ''20px'' }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''20px'', flexWrap: ''wrap'', gap: ''12px'' }}>\n          <h2 style={{ margin: 0, fontSize: ''24px'', fontWeight: ''bold'' }}>Product Revenue Matrix</h2>\n          <div style={{ display: ''flex'', gap: ''8px'' }}>\n            <select\n              value={timePeriod}\n              onChange={(e) => {\n                const newPeriod = e.target.value;\n                setTimePeriod(newPeriod);\n                if (newPeriod !== ''custom'') {\n                  setStartDate(null);\n                  setEndDate(null);\n                  onSaveUserSettings({ \n                    ...savedUserSettings, \n                    timePeriod: newPeriod,\n                    startDate: null,\n                    endDate: null\n                  });\n                } else {\n                  onSaveUserSettings({ ...savedUserSettings, timePeriod: newPeriod });\n                }\n              }}\n              style={{\n                padding: ''6px 12px'',\n                border: ''1px solid #D1D5DB'',\n                borderRadius: ''6px''\n              }}\n            >\n              <option value=\"month\">This Month</option>\n              <option value=\"quarter\">This Quarter</option>\n              <option value=\"year\">This Year</option>\n              <option value=\"all\">All Time</option>\n              <option value=\"custom\">Custom Range</option>\n            </select>\n            \n            {timePeriod === ''custom'' && (\n              <>\n                <input\n                  type=\"date\"\n                  value={startDate || ''''}\n                  onChange={(e) => {\n                    setStartDate(e.target.value);\n                    if (e.target.value && endDate) {\n                      onSaveUserSettings({ \n                        ...savedUserSettings, \n                        startDate: e.target.value,\n                        endDate,\n                        timePeriod: ''custom''\n                      });\n                    }\n                  }}\n                  style={{\n                    padding: ''6px 12px'',\n                    border: ''1px solid #D1D5DB'',\n                    borderRadius: ''6px''\n                  }}\n                />\n                <span style={{ color: ''#6B7280'', fontSize: ''14px'' }}>to</span>\n                <input\n                  type=\"date\"\n                  value={endDate || ''''}\n                  onChange={(e) => {\n                    setEndDate(e.target.value);\n                    if (startDate && e.target.value) {\n                      onSaveUserSettings({ \n                        ...savedUserSettings, \n                        startDate,\n                        endDate: e.target.value,\n                        timePeriod: ''custom''\n                      });\n                    }\n                  }}\n                  style={{\n                    padding: ''6px 12px'',\n                    border: ''1px solid #D1D5DB'',\n                    borderRadius: ''6px''\n                  }}\n                />\n              </>\n            )}\n            <button\n              onClick={() => {\n                const newMode = viewMode === ''treemap'' ? ''matrix'' : ''treemap'';\n                setViewMode(newMode);\n                onSaveUserSettings({ ...savedUserSettings, viewMode: newMode });\n              }}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: ''#8B5CF6'',\n                color: ''white'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer''\n              }}\n            >\n              <i className={`fa-solid fa-$' + '{viewMode === ''treemap'' ? ''table'' : ''chart-treemap''}`}></i>\n              {viewMode === ''treemap'' ? '' Matrix View'' : '' Treemap View''}\n            </button>\n            <button\n              onClick={generateAIInsights}\n              disabled={loadingInsights}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: loadingInsights ? ''#9CA3AF'' : ''#10B981'',\n                color: ''white'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: loadingInsights ? ''not-allowed'' : ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: ''6px''\n              }}\n            >\n              <i className={`fa-solid fa-$' + '{loadingInsights ? ''spinner fa-spin'' : ''wand-magic-sparkles''}`}></i>\n              {loadingInsights ? ''Analyzing...'' : ''Get AI Insights''}\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* AI Insights Panel from Registry */}\n      {AIInsightsPanel && (aiInsights || insightsError) && (\n        <AIInsightsPanel\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n          savedUserSettings={savedUserSettings}\n          onSaveUserSettings={onSaveUserSettings}\n          insights={aiInsights}\n          loading={loadingInsights}\n          error={insightsError}\n          onRefresh={generateAIInsights}\n          onClose={() => {\n            setAiInsights(null);\n            setInsightsError(null);\n            setInsightsCollapsed(false);\n          }}\n          title=\"AI-Powered Product Portfolio Insights\"\n          titleIcon=\"fa-wand-magic-sparkles\"\n          titleIconColor=\"#10B981\"\n          isCollapsed={insightsCollapsed}\n          onToggleCollapse={() => setInsightsCollapsed(!insightsCollapsed)}\n          exportFilename={`product-revenue-insights-$' + '{new Date().toISOString().split(''T'')[0]}.md`}\n        />\n      )}\n      \n      <div style={{ marginBottom: ''20px'' }}>\n        {/* Top Products Summary */}\n        <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'', gap: ''12px'', marginBottom: ''20px'' }}>\n          {topProducts.map((product, index) => (\n            <div\n              key={product.id}\n              style={{\n                padding: ''12px'',\n                backgroundColor: ''white'',\n                borderRadius: ''8px'',\n                border: ''1px solid #E5E7EB'',\n                cursor: ''pointer'',\n                transition: ''all 0.2s''\n              }}\n              onClick={() => handleProductClick(product)}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.transform = ''translateY(-2px)'';\n                e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)'';\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.transform = ''translateY(0)'';\n                e.currentTarget.style.boxShadow = ''none'';\n              }}\n            >\n              <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''start'' }}>\n                <div>\n                  <div style={{ fontSize: ''14px'', fontWeight: ''bold'', marginBottom: ''4px'' }}>\n                    #{index + 1} {product.name}\n                  </div>\n                  <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                    {product.category}\n                  </div>\n                </div>\n                <div style={{ textAlign: ''right'' }}>\n                  <div style={{ fontSize: ''16px'', fontWeight: ''bold'', color: ''#8B5CF6'' }}>\n                    $' + '{(product.revenue / 1000).toFixed(1)}K\n                  </div>\n                  <div style={{ fontSize: ''11px'', color: product.margin > 30 ? ''#10B981'' : ''#F59E0B'' }}>\n                    {product.margin.toFixed(0)}% margin\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Main Content Grid - responsive layout */}\n      <div \n        className=\"product-revenue-grid\"\n        style={{ \n          display: ''grid'', \n          gridTemplateColumns: isPanelOpen ? ''1fr 400px'' : ''1fr'',\n          gap: ''20px'',\n          transition: ''grid-template-columns 0.3s ease''\n        }}\n      >\n        {/* Main Visualization Area */}\n        <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''20px'', minWidth: 0 }}>\n          {viewMode === ''treemap'' && Treemap && (\n            <Treemap \n              products={products}\n              lineItems={lineItems}\n              invoices={invoices}\n              onProductClick={handleProductClick}\n            />\n          )}\n          \n          {viewMode === ''matrix'' && MatrixTable && (\n            <MatrixTable\n              products={products}\n              lineItems={lineItems}\n              invoices={invoices}\n              sortBy={sortBy}\n              onSortChange={setSortBy}\n              onProductClick={handleProductClick}\n            />\n          )}\n        </div>\n        \n        {/* Product Detail Panel - inline responsive */}\n        {isPanelOpen && DetailPanel && (\n          <div style={{ minWidth: 0 }}>\n            <DetailPanel\n              product={selectedProduct}\n              isOpen={isPanelOpen}\n              onClose={() => {\n                setIsPanelOpen(false);\n                setSelectedProduct(null);\n              }}\n              callbacks={callbacks}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Product Revenue Matrix\n\n### Purpose\nVisualize product performance across customers and time periods in an interactive matrix format.\n\n### Core Features\n- **Product/Customer Matrix**: Cross-reference sales data\n- **Time Period Analysis**: Monthly, quarterly, yearly views\n- **Growth Indicators**: Show trends with sparklines\n- **Profitability Metrics**: Margin analysis per product\n- **Interactive Treemap**: Using Highcharts visualization\n- **Product Categories**: Group products hierarchically\n- **Slide-out Details**: Product performance deep-dive\n- **Filtering & Sorting**: Multiple sort options\n\n### Visualizations\n- Treemap for product hierarchy\n- Matrix grid with color coding\n- Sparklines for trends\n- Bubble chart for volume/value analysis","dataRequirements":{"mode":"views","entities":[{"name":"Products","description":"Product catalog with pricing and cost information","displayFields":["ID","ProductName","Category","UnitPrice","Cost"],"filterFields":[],"sortFields":["ProductName"],"fieldMetadata":[],"permissionLevelNeeded":["read"]},{"name":"Invoice Line Items","description":"Line items linking products to invoices with quantities and pricing","displayFields":["ID","InvoiceID","ProductID","Quantity","UnitPrice","TotalPrice","Discount"],"filterFields":[],"sortFields":["TotalPrice"],"fieldMetadata":[],"permissionLevelNeeded":["read"]},{"name":"Invoices","description":"Invoice headers with dates and customer references","displayFields":["ID","AccountID","InvoiceDate"],"filterFields":["InvoiceDate"],"sortFields":["InvoiceDate"],"fieldMetadata":[],"permissionLevelNeeded":["read"]}],"queries":[]},"technicalDesign":"## Implementation\n\n### Components\n- Main: ProductRevenueMatrix\n- Sub-components:\n  - RevenueTreemap: Hierarchical product visualization\n  - ProductMatrix: Grid view of products\n  - TrendSparkline: Mini trend charts\n  - ProductDetails: Detailed analysis panel\n\n### Data Processing\n- Aggregate sales by product and period\n- Calculate margins and profitability\n- Generate trend data\n- Build hierarchical structures","properties":[],"events":[{"name":"OpenEntityRecord","description":"Navigate to product details"}],"dependencies":[{"name":"ProductRevenueTreemap","namespace":"Sales/Analytics","type":"Chart","location":"embedded","code":"function ProductRevenueTreemap({ products, lineItems, invoices, onProductClick }) {\n  const treemapRef = useRef(null);\n  \n  useEffect(() => {\n    if (products.length > 0) {\n      renderTreemap();\n    }\n    \n    return () => {\n      // Clean up tooltip on unmount\n      d3.select(''.product-revenue-tooltip'').remove();\n    };\n  }, [products, lineItems, invoices]);\n  \n  const calculateProductMetrics = () => {\n    const productMetrics = {};\n    \n    // Initialize metrics for each product\n    products.forEach(product => {\n      productMetrics[product.ID] = {\n        id: product.ID,\n        name: product.ProductName,\n        category: product.Category || ''Uncategorized'',\n        price: product.UnitPrice || 0,\n        cost: product.Cost || 0,\n        revenue: 0,\n        quantity: 0,\n        margin: 0,\n        customers: new Set(),\n        transactions: 0\n      };\n    });\n    \n    // Calculate revenue from line items\n    const invoiceIds = new Set(invoices.map(inv => inv.ID));\n    \n    lineItems.forEach(item => {\n      if (invoiceIds.has(item.InvoiceID) && productMetrics[item.ProductID]) {\n        const metrics = productMetrics[item.ProductID];\n        const lineTotal = item.TotalPrice || (item.Quantity * item.UnitPrice * (1 - (item.Discount || 0) / 100));\n        metrics.revenue += lineTotal;\n        metrics.quantity += item.Quantity || 0;\n        metrics.transactions++;\n        \n        // Find invoice to get customer\n        const invoice = invoices.find(inv => inv.ID === item.InvoiceID);\n        if (invoice && invoice.AccountID) {\n          metrics.customers.add(invoice.AccountID);\n        }\n      }\n    });\n    \n    // Calculate margins and generate trend data\n    Object.values(productMetrics).forEach(metrics => {\n      if (metrics.price > 0 && metrics.cost > 0) {\n        metrics.margin = ((metrics.price - metrics.cost) / metrics.price * 100);\n      }\n      metrics.customerCount = metrics.customers.size;\n      \n      // Generate trend data (simulated for demo - in real app, calculate from historical data)\n      metrics.trend = [];\n      for (let i = 0; i < 12; i++) {\n        metrics.trend.push(Math.random() * metrics.revenue * 0.3 + metrics.revenue * 0.7);\n      }\n    });\n    \n    return productMetrics;\n  };\n  \n  const renderTreemap = () => {\n    if (!treemapRef.current) return;\n    \n    const productMetrics = calculateProductMetrics();\n    \n    // Group products by category\n    const categories = {};\n    Object.values(productMetrics).forEach(product => {\n      if (!categories[product.category]) {\n        categories[product.category] = {\n          name: product.category,\n          children: []\n        };\n      }\n      \n      if (product.revenue > 0) {\n        categories[product.category].children.push({\n          name: product.name,\n          value: product.revenue,\n          margin: product.margin,\n          product: product\n        });\n      }\n    });\n    \n    const categoriesWithData = Object.values(categories).filter(cat => cat.children.length > 0);\n    \n    // Handle empty state\n    if (categoriesWithData.length === 0) {\n      d3.select(treemapRef.current).selectAll(''*'').remove();\n      d3.select(treemapRef.current)\n        .append(''div'')\n        .style(''padding'', ''40px'')\n        .style(''text-align'', ''center'')\n        .style(''color'', ''#6B7280'')\n        .text(''No revenue data available for the selected period'');\n      return;\n    }\n    \n    const treemapData = {\n      name: ''Products'',\n      children: categoriesWithData\n    };\n    \n    // Clear previous visualization\n    d3.select(treemapRef.current).selectAll(''*'').remove();\n    \n    // Set dimensions\n    const width = treemapRef.current.clientWidth || 800;\n    const height = 500;\n    \n    // Create varied pastel colors for better accessibility\n    // Using a categorical color scheme with good contrast\n    const pastelColors = [\n      ''#FFB3BA'', // Light pink\n      ''#FFDFBA'', // Light peach\n      ''#FFFFBA'', // Light yellow\n      ''#BAFFC9'', // Light mint green\n      ''#BAE1FF'', // Light sky blue\n      ''#E0BBE4'', // Light lavender\n      ''#C7CEEA'', // Light periwinkle\n      ''#FFDAC1'', // Light apricot\n      ''#B5EAD7'', // Light seafoam\n      ''#FF9AA2'', // Light coral\n      ''#C1E1C1'', // Light sage\n      ''#BEDADC'', // Light teal\n      ''#C4A1C2'', // Light mauve\n      ''#FCBAD3'', // Light rose\n      ''#FFFFD8''  // Light cream\n    ];\n    \n    // Create color scale that maps products to colors\n    // Use modulo to cycle through colors if more products than colors\n    const getProductColor = (index, margin) => {\n      // Use margin to slightly adjust the brightness\n      // Higher margin = slightly more saturated color\n      const baseColor = pastelColors[index % pastelColors.length];\n      \n      // If margin is very high (>40%), make it slightly more vibrant\n      if (margin > 40) {\n        return d3.color(baseColor).darker(0.2).toString();\n      } else if (margin < 10) {\n        // If margin is low, make it slightly lighter\n        return d3.color(baseColor).brighter(0.2).toString();\n      }\n      return baseColor;\n    };\n    \n    // Create treemap layout\n    const treemap = d3.treemap()\n      .size([width, height])\n      .padding(2);\n    \n    // Create hierarchy and compute layout\n    const root = d3.hierarchy(treemapData)\n      .sum(d => d.value)\n      .sort((a, b) => b.value - a.value);\n    \n    treemap(root);\n    \n    // Create SVG\n    const svg = d3.select(treemapRef.current)\n      .append(''svg'')\n      .attr(''width'', width)\n      .attr(''height'', height);\n    \n    // Create tooltip\n    const tooltip = d3.select(''body'').append(''div'')\n      .attr(''class'', ''product-revenue-tooltip'')\n      .style(''position'', ''absolute'')\n      .style(''visibility'', ''hidden'')\n      .style(''background'', ''rgba(0, 0, 0, 0.8)'')\n      .style(''color'', ''white'')\n      .style(''padding'', ''8px'')\n      .style(''border-radius'', ''4px'')\n      .style(''font-size'', ''12px'')\n      .style(''pointer-events'', ''none'')\n      .style(''z-index'', ''9999'');\n    \n    // Create groups for categories\n    const categories_g = svg.selectAll(''.category'')\n      .data(root.children || [])\n      .enter().append(''g'')\n      .attr(''class'', ''category'')\n      .attr(''transform'', d => `translate($' + '{d.x0},$' + '{d.y0})`);\n    \n    // Add category rectangles\n    categories_g.append(''rect'')\n      .attr(''width'', d => d.x1 - d.x0)\n      .attr(''height'', d => d.y1 - d.y0)\n      .style(''fill'', ''none'')\n      .style(''stroke'', ''#fff'')\n      .style(''stroke-width'', 2);\n    \n    // Add category labels\n    categories_g.append(''text'')\n      .attr(''x'', 4)\n      .attr(''y'', 16)\n      .style(''font-weight'', ''bold'')\n      .style(''font-size'', ''14px'')\n      .style(''fill'', ''#374151'')\n      .text(d => d.data.name);\n    \n    // Create product rectangles\n    const leaves = root.leaves() || [];\n    \n    // Sort leaves by value to ensure consistent color assignment\n    leaves.sort((a, b) => b.value - a.value);\n    \n    const products_g = svg.selectAll(''.product'')\n      .data(leaves)\n      .enter().append(''g'')\n      .attr(''class'', ''product'')\n      .attr(''transform'', d => `translate($' + '{d.x0},$' + '{d.y0})`);\n    \n    products_g.append(''rect'')\n      .attr(''width'', d => d.x1 - d.x0)\n      .attr(''height'', d => d.y1 - d.y0)\n      .style(''fill'', (d, i) => getProductColor(i, d.data.margin))\n      .style(''stroke'', ''#fff'')\n      .style(''stroke-width'', 2)\n      .style(''cursor'', ''pointer'')\n      .style(''opacity'', 0.9)\n      .on(''mouseover'', function(_, d) {\n        // Add hover effect\n        d3.select(this)\n          .style(''opacity'', 1)\n          .style(''stroke-width'', 3)\n          .style(''filter'', ''brightness(1.1)'');\n        \n        tooltip.style(''visibility'', ''visible'')\n          .html(`\n            <strong>$' + '{d.data.name}</strong><br/>\n            Revenue: $$' + '{(d.data.product.revenue / 1000).toFixed(1)}K<br/>\n            Quantity: $' + '{d.data.product.quantity}<br/>\n            Margin: $' + '{d.data.margin.toFixed(1)}%<br/>\n            Customers: $' + '{d.data.product.customerCount}\n          `);\n      })\n      .on(''mousemove'', function(event) {\n        tooltip.style(''top'', (event.pageY - 10) + ''px'')\n          .style(''left'', (event.pageX + 10) + ''px'');\n      })\n      .on(''mouseout'', function() {\n        // Remove hover effect\n        d3.select(this)\n          .style(''opacity'', 0.9)\n          .style(''stroke-width'', 2)\n          .style(''filter'', ''none'');\n        \n        tooltip.style(''visibility'', ''hidden'');\n      })\n      .on(''click'', function(_, d) {\n        if (onProductClick) {\n          onProductClick(d.data.product);\n        }\n      });\n    \n    // Add product labels\n    products_g.append(''text'')\n      .attr(''x'', 4)\n      .attr(''y'', 20)\n      .style(''font-size'', ''11px'')\n      .style(''fill'', ''#2D3748'')\n      .style(''font-weight'', ''500'')\n      .each(function(d) {\n        const text = d3.select(this);\n        const width = d.x1 - d.x0;\n        const name = d.data.name;\n        \n        if (width > 60) {\n          text.text(name.length > 15 ? name.substring(0, 15) + ''...'' : name);\n        }\n      });\n    \n    // Add revenue labels for larger boxes\n    products_g.append(''text'')\n      .attr(''x'', 4)\n      .attr(''y'', 36)\n      .style(''font-size'', ''10px'')\n      .style(''font-weight'', ''bold'')\n      .style(''fill'', ''#2D3748'')\n      .each(function(d) {\n        const width = d.x1 - d.x0;\n        const height = d.y1 - d.y0;\n        \n        if (width > 80 && height > 50) {\n          d3.select(this).text(`$$' + '{(d.data.product.revenue / 1000).toFixed(0)}K`);\n        }\n      });\n  };\n  \n  return (\n    <div ref={treemapRef} style={{ width: ''100%'', height: ''500px'' }} />\n  );\n}","functionalRequirements":"## Product Revenue Treemap Sub-Component\n\n### Purpose\nVisualize product revenue distribution using an interactive treemap chart.\n\n### Core Features\n- **Hierarchical View**: Products grouped by category\n- **Size by Revenue**: Box size represents revenue amount\n- **Color by Margin**: Color intensity shows profit margin\n- **Interactive Tooltips**: Hover for detailed metrics\n- **Click to Drill-down**: Select products for details","dataRequirements":{"mode":"views","description":"Receives entity data via props from parent component for treemap visualization","entities":[{"name":"Products","description":"Product catalog with pricing and cost information for margin calculation","displayFields":["ID","ProductName","Category","UnitPrice","Cost"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Used to build treemap hierarchy and calculate profit margins"},{"name":"Invoice Line Items","description":"Line items for calculating product revenue and quantities","displayFields":["ID","InvoiceID","ProductID","Quantity","UnitPrice","TotalPrice","Discount"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Aggregated to calculate total revenue per product"},{"name":"Invoices","description":"Invoice headers for customer counts and date filtering","displayFields":["ID","AccountID"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Used to count unique customers per product"}],"queries":[]},"technicalDesign":"## Implementation\n\n### D3.js Treemap\n- Dynamic treemap layout with category grouping\n- Color scale based on margin percentages\n- Responsive sizing and text truncation\n- Tooltip on hover with key metrics","properties":[{"name":"products","type":"Array<{ID: string, ProductName: string, Category?: string, UnitPrice?: number, Cost?: number}>","description":"Array of product entities","required":true},{"name":"lineItems","type":"Array<{ID: string, InvoiceID: string, ProductID: string, Quantity?: number, UnitPrice?: number, TotalPrice?: number, Discount?: number}>","description":"Array of invoice line item entities","required":true},{"name":"invoices","type":"Array<{ID: string, AccountID?: string, InvoiceDate?: string}>","description":"Array of invoice entities","required":true},{"name":"onProductClick","type":"(product: {id: string, name: string, revenue: number, margin: number, customerCount: number}) => void","description":"Callback when product is clicked","required":false}],"events":[],"dependencies":[],"libraries":[{"name":"d3","version":"^7.8.5","globalVariable":"d3"}]},{"name":"ProductRevenueMatrixTable","namespace":"Sales/Analytics","type":"Table","location":"embedded","code":"function ProductRevenueMatrixTable({ products, lineItems, invoices, sortBy, onSortChange, onProductClick }) {\n  const matrixRef = useRef(null);\n  const sparklineCharts = useRef({});\n  \n  useEffect(() => {\n    if (products.length > 0) {\n      renderMatrix();\n    }\n    \n    return () => {\n      // Clean up charts\n      Object.values(sparklineCharts.current).forEach(chart => {\n        if (chart) chart.destroy();\n      });\n    };\n  }, [products, lineItems, invoices, sortBy]);\n  \n  const calculateProductMetrics = () => {\n    const productMetrics = {};\n    \n    // Initialize metrics for each product\n    products.forEach(product => {\n      productMetrics[product.ID] = {\n        id: product.ID,\n        name: product.ProductName,\n        category: product.Category || ''Uncategorized'',\n        price: product.UnitPrice || 0,\n        cost: product.Cost || 0,\n        revenue: 0,\n        quantity: 0,\n        margin: 0,\n        customers: new Set(),\n        transactions: 0,\n        trend: []\n      };\n    });\n    \n    // Calculate revenue from line items\n    const invoiceIds = new Set(invoices.map(inv => inv.ID));\n    \n    lineItems.forEach(item => {\n      if (invoiceIds.has(item.InvoiceID) && productMetrics[item.ProductID]) {\n        const metrics = productMetrics[item.ProductID];\n        const lineTotal = item.TotalPrice || (item.Quantity * item.UnitPrice * (1 - (item.Discount || 0) / 100));\n        metrics.revenue += lineTotal;\n        metrics.quantity += item.Quantity || 0;\n        metrics.transactions++;\n        \n        // Find invoice to get customer\n        const invoice = invoices.find(inv => inv.ID === item.InvoiceID);\n        if (invoice && invoice.AccountID) {\n          metrics.customers.add(invoice.AccountID);\n        }\n      }\n    });\n    \n    // Calculate margins and generate trend data\n    Object.values(productMetrics).forEach(metrics => {\n      if (metrics.price > 0 && metrics.cost > 0) {\n        metrics.margin = ((metrics.price - metrics.cost) / metrics.price * 100);\n      }\n      metrics.customerCount = metrics.customers.size;\n      \n      // Generate trend data (simulated for demo)\n      for (let i = 0; i < 12; i++) {\n        metrics.trend.push(Math.random() * metrics.revenue * 0.3 + metrics.revenue * 0.7);\n      }\n    });\n    \n    return productMetrics;\n  };\n  \n  const renderMatrix = () => {\n    if (!matrixRef.current) return;\n    \n    const productMetrics = calculateProductMetrics();\n    const sortedProducts = Object.values(productMetrics)\n      .filter(p => p.revenue > 0)\n      .sort((a, b) => {\n        switch (sortBy) {\n          case ''revenue'':\n            return b.revenue - a.revenue;\n          case ''quantity'':\n            return b.quantity - a.quantity;\n          case ''margin'':\n            return b.margin - a.margin;\n          case ''customers'':\n            return b.customerCount - a.customerCount;\n          default:\n            return 0;\n        }\n      });\n    \n    // Clear previous content and charts\n    matrixRef.current.innerHTML = '''';\n    Object.values(sparklineCharts.current).forEach(chart => {\n      if (chart) chart.destroy();\n    });\n    sparklineCharts.current = {};\n    \n    // Handle empty state\n    if (sortedProducts.length === 0) {\n      const emptyDiv = document.createElement(''div'');\n      emptyDiv.style.padding = ''40px'';\n      emptyDiv.style.textAlign = ''center'';\n      emptyDiv.style.color = ''#6B7280'';\n      emptyDiv.textContent = ''No product revenue data available for the selected period'';\n      matrixRef.current.appendChild(emptyDiv);\n      return;\n    }\n    \n    // Create matrix grid\n    const table = document.createElement(''table'');\n    table.style.width = ''100%'';\n    table.style.borderCollapse = ''collapse'';\n    \n    // Header row with sort indicators\n    const headerRow = document.createElement(''tr'');\n    [''Product'', ''Category'', ''Revenue'', ''Quantity'', ''Margin'', ''Customers'', ''Trend''].forEach(header => {\n      const th = document.createElement(''th'');\n      th.style.padding = ''12px'';\n      th.style.borderBottom = ''2px solid #E5E7EB'';\n      th.style.textAlign = header === ''Product'' ? ''left'' : ''center'';\n      th.style.fontSize = ''14px'';\n      th.style.fontWeight = ''bold'';\n      th.style.position = ''relative'';\n      \n      // Create header content container\n      const headerContent = document.createElement(''div'');\n      headerContent.style.display = ''flex'';\n      headerContent.style.alignItems = ''center'';\n      headerContent.style.justifyContent = header === ''Product'' ? ''flex-start'' : ''center'';\n      headerContent.style.gap = ''4px'';\n      \n      // Add header text\n      const headerText = document.createElement(''span'');\n      headerText.textContent = header;\n      headerContent.appendChild(headerText);\n      \n      // Add sort indicator for sortable columns\n      const sortMap = {\n        ''Revenue'': ''revenue'',\n        ''Quantity'': ''quantity'',\n        ''Margin'': ''margin'',\n        ''Customers'': ''customers''\n      };\n      \n      if (sortMap[header]) {\n        th.style.cursor = ''pointer'';\n        \n        // Add sort indicator\n        const sortIndicator = document.createElement(''span'');\n        sortIndicator.style.fontSize = ''10px'';\n        sortIndicator.style.color = sortBy === sortMap[header] ? ''#8B5CF6'' : ''#D1D5DB'';\n        sortIndicator.style.transition = ''color 0.2s'';\n        \n        // Show appropriate arrow based on current sort\n        if (sortBy === sortMap[header]) {\n          sortIndicator.innerHTML = ''▼'';\n          sortIndicator.style.fontWeight = ''bold'';\n        } else {\n          sortIndicator.innerHTML = ''▼'';\n          sortIndicator.style.opacity = ''0.4'';\n        }\n        \n        headerContent.appendChild(sortIndicator);\n        \n        // Add hover effect\n        th.onmouseenter = () => {\n          if (sortBy !== sortMap[header]) {\n            sortIndicator.style.opacity = ''0.7'';\n            sortIndicator.style.color = ''#8B5CF6'';\n          }\n        };\n        \n        th.onmouseleave = () => {\n          if (sortBy !== sortMap[header]) {\n            sortIndicator.style.opacity = ''0.4'';\n            sortIndicator.style.color = ''#D1D5DB'';\n          }\n        };\n        \n        // Add sort functionality\n        th.onclick = () => {\n          if (onSortChange) {\n            onSortChange(sortMap[header]);\n          }\n        };\n      }\n      \n      th.appendChild(headerContent);\n      headerRow.appendChild(th);\n    });\n    table.appendChild(headerRow);\n    \n    // Create color scale for revenue cells (green shades for positive values)\n    const maxRevenue = Math.max(...sortedProducts.map(p => p.revenue), 1);\n    const getRevenueColor = (revenue) => {\n      const intensity = revenue / maxRevenue;\n      // Green color scale: light green to dark green\n      const r = Math.floor(220 - (intensity * 200));\n      const g = Math.floor(240 - (intensity * 50));\n      const b = Math.floor(220 - (intensity * 180));\n      return `rgb($' + '{r}, $' + '{g}, $' + '{b})`;\n    };\n    \n    // Data rows\n    sortedProducts.slice(0, 20).forEach(product => {\n      const row = document.createElement(''tr'');\n      row.style.borderBottom = ''1px solid #E5E7EB'';\n      row.style.cursor = ''pointer'';\n      \n      // Product name\n      const nameCell = document.createElement(''td'');\n      nameCell.textContent = product.name;\n      nameCell.style.padding = ''12px'';\n      nameCell.style.fontWeight = ''500'';\n      row.appendChild(nameCell);\n      \n      // Category\n      const categoryCell = document.createElement(''td'');\n      categoryCell.textContent = product.category;\n      categoryCell.style.padding = ''12px'';\n      categoryCell.style.textAlign = ''center'';\n      categoryCell.style.fontSize = ''13px'';\n      categoryCell.style.color = ''#6B7280'';\n      row.appendChild(categoryCell);\n      \n      // Revenue\n      const revenueCell = document.createElement(''td'');\n      revenueCell.textContent = `$$' + '{(product.revenue / 1000).toFixed(1)}K`;\n      revenueCell.style.padding = ''12px'';\n      revenueCell.style.textAlign = ''center'';\n      revenueCell.style.fontWeight = ''bold'';\n      revenueCell.style.backgroundColor = getRevenueColor(product.revenue);\n      revenueCell.style.color = product.revenue > maxRevenue * 0.5 ? ''white'' : ''#374151'';\n      row.appendChild(revenueCell);\n      \n      // Quantity\n      const quantityCell = document.createElement(''td'');\n      quantityCell.textContent = product.quantity;\n      quantityCell.style.padding = ''12px'';\n      quantityCell.style.textAlign = ''center'';\n      row.appendChild(quantityCell);\n      \n      // Margin\n      const marginCell = document.createElement(''td'');\n      marginCell.textContent = `$' + '{product.margin.toFixed(1)}%`;\n      marginCell.style.padding = ''12px'';\n      marginCell.style.textAlign = ''center'';\n      marginCell.style.fontWeight = ''bold'';\n      marginCell.style.color = product.margin > 30 ? ''#10B981'' : product.margin > 15 ? ''#F59E0B'' : ''#EF4444'';\n      row.appendChild(marginCell);\n      \n      // Customers\n      const customersCell = document.createElement(''td'');\n      customersCell.textContent = product.customerCount;\n      customersCell.style.padding = ''12px'';\n      customersCell.style.textAlign = ''center'';\n      row.appendChild(customersCell);\n      \n      // Trend sparkline\n      const trendCell = document.createElement(''td'');\n      trendCell.style.padding = ''12px'';\n      const canvas = document.createElement(''canvas'');\n      canvas.width = 100;\n      canvas.height = 30;\n      trendCell.appendChild(canvas);\n      row.appendChild(trendCell);\n      \n      // Create sparkline chart\n      const ctx = canvas.getContext(''2d'');\n      sparklineCharts.current[product.id] = new Chart(ctx, {\n        type: ''line'',\n        data: {\n          labels: Array(12).fill(''''),\n          datasets: [{\n            data: product.trend,\n            borderColor: ''#3B82F6'',\n            borderWidth: 1,\n            fill: false,\n            pointRadius: 0,\n            tension: 0.4\n          }]\n        },\n        options: {\n          responsive: false,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: { display: false },\n            tooltip: { enabled: false }\n          },\n          scales: {\n            x: { display: false },\n            y: { display: false }\n          }\n        }\n      });\n      \n      // Add click handler\n      row.onclick = () => {\n        if (onProductClick) {\n          onProductClick(product);\n        }\n      };\n      \n      // Add hover effect\n      row.onmouseenter = () => {\n        row.style.backgroundColor = ''#F9FAFB'';\n      };\n      row.onmouseleave = () => {\n        row.style.backgroundColor = '''';\n      };\n      \n      table.appendChild(row);\n    });\n    \n    matrixRef.current.appendChild(table);\n  };\n  \n  return (\n    <div ref={matrixRef} style={{ width: ''100%'', overflow: ''auto'' }} />\n  );\n}","functionalRequirements":"## Product Revenue Matrix Table Sub-Component\n\n### Purpose\nDisplay product revenue metrics in a sortable table format with sparkline trends.\n\n### Core Features\n- **Sortable Columns**: Sort by revenue, quantity, margin, or customers\n- **Revenue Heat Map**: Color-coded revenue cells\n- **Margin Indicators**: Color-coded margin percentages\n- **Sparkline Trends**: Mini charts showing revenue trends\n- **Click for Details**: Select rows to view product details","dataRequirements":{"mode":"views","description":"Receives entity data via props to display in sortable table format","entities":[{"name":"Products","description":"Product catalog for table row display","displayFields":["ID","ProductName","Category","UnitPrice","Cost"],"filterFields":[],"sortFields":["ProductName","UnitPrice"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Each product becomes a row in the matrix table"},{"name":"Invoice Line Items","description":"Line items for revenue and quantity calculations","displayFields":["ID","InvoiceID","ProductID","Quantity","UnitPrice","TotalPrice","Discount"],"filterFields":[],"sortFields":["TotalPrice"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Aggregated to show revenue and quantity sold per product"},{"name":"Invoices","description":"Invoice headers for customer metrics","displayFields":["ID","AccountID","InvoiceDate"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Used to calculate unique customers and transaction counts"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Table Generation\n- Dynamic HTML table creation\n- Color scales for revenue and margin\n- Chart.js sparklines for trends\n- Hover effects and click handlers","properties":[{"name":"products","type":"Array<{ID: string, ProductName: string, Category?: string, UnitPrice?: number, Cost?: number}>","description":"Array of product entities","required":true},{"name":"lineItems","type":"Array<{ID: string, InvoiceID: string, ProductID: string, Quantity?: number, UnitPrice?: number, TotalPrice?: number, Discount?: number}>","description":"Array of invoice line item entities","required":true},{"name":"invoices","type":"Array<{ID: string, AccountID?: string, InvoiceDate?: string}>","description":"Array of invoice entities","required":true},{"name":"sortBy","type":"''revenue'' | ''quantity'' | ''margin'' | ''customers'' | ''name''","description":"Current sort field","required":true},{"name":"onSortChange","type":"(sortBy: string) => void","description":"Callback when sort changes","required":false},{"name":"onProductClick","type":"(product: {id: string, name: string, revenue: number, margin: number}) => void","description":"Callback when product is clicked","required":false}],"events":[],"dependencies":[],"libraries":[{"name":"Chart.js","version":"^4.4.1","globalVariable":"Chart"}]},{"name":"ProductRevenueDetailPanel","namespace":"Sales/Analytics","type":"Panel","location":"embedded","code":"function ProductRevenueDetailPanel({ product, isOpen, onClose, callbacks }) {\n  const trendChartRef = useRef(null);\n  const productTrendChart = useRef(null);\n  \n  useEffect(() => {\n    if (product && isOpen && trendChartRef.current) {\n      // Clean up existing chart\n      if (productTrendChart.current) {\n        productTrendChart.current.destroy();\n      }\n      \n      // Create revenue trend chart\n      const ctx = trendChartRef.current.getContext(''2d'');\n      productTrendChart.current = new Chart(ctx, {\n        type: ''line'',\n        data: {\n          labels: [''Jan'', ''Feb'', ''Mar'', ''Apr'', ''May'', ''Jun'', ''Jul'', ''Aug'', ''Sep'', ''Oct'', ''Nov'', ''Dec''],\n          datasets: [{\n            label: ''Revenue'',\n            data: product.trend || [],\n            borderColor: ''#8B5CF6'',\n            backgroundColor: ''rgba(139, 92, 246, 0.1)'',\n            borderWidth: 2,\n            fill: true,\n            tension: 0.4\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: { display: false },\n            tooltip: {\n              callbacks: {\n                label: (context) => `Revenue: $$' + '{(context.raw / 1000).toFixed(1)}K`\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                callback: (value) => `$$' + '{(value / 1000).toFixed(0)}K`\n              }\n            }\n          }\n        }\n      });\n    }\n    \n    return () => {\n      if (productTrendChart.current) {\n        productTrendChart.current.destroy();\n      }\n    };\n  }, [product, isOpen]);\n  \n  if (!product || !isOpen) return null;\n  \n  return (\n    <div\n      style={{\n        backgroundColor: ''white'',\n        borderRadius: ''8px'',\n        border: ''1px solid #E5E7EB'',\n        overflow: ''hidden'',\n        animation: ''slideIn 0.3s ease'',\n        height: ''100%'',\n        display: ''flex'',\n        flexDirection: ''column''\n      }}\n    >\n      <style>{`\n        @keyframes slideIn {\n          from {\n            opacity: 0;\n            transform: translateX(20px);\n          }\n          to {\n            opacity: 1;\n            transform: translateX(0);\n          }\n        }\n      `}</style>\n      \n      <div style={{\n        padding: ''20px'',\n        borderBottom: ''1px solid #E5E7EB'',\n        background: ''linear-gradient(135deg, #8B5CF6, #6366F1)'',\n        color: ''white''\n      }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n          <h3 style={{ margin: 0, fontSize: ''18px'' }}>Product Details</h3>\n          <button\n            onClick={onClose}\n            style={{\n              background: ''rgba(255,255,255,0.2)'',\n              border: ''none'',\n              color: ''white'',\n              fontSize: ''20px'',\n              cursor: ''pointer'',\n              padding: ''4px 8px'',\n              borderRadius: ''4px'',\n              transition: ''background 0.2s''\n            }}\n            onMouseEnter={(e) => e.currentTarget.style.background = ''rgba(255,255,255,0.3)''}\n            onMouseLeave={(e) => e.currentTarget.style.background = ''rgba(255,255,255,0.2)''}\n          >\n            ×\n          </button>\n        </div>\n      </div>\n      \n      <div style={{ flex: 1, overflow: ''auto'', padding: ''20px'' }}>\n        <div style={{ marginBottom: ''24px'' }}>\n          <h4 style={{ margin: ''0 0 4px 0'', fontSize: ''18px'', fontWeight: ''bold'' }}>\n            {product.name}\n          </h4>\n          <div style={{ fontSize: ''13px'', color: ''#6B7280'' }}>\n            {product.category}\n          </div>\n        </div>\n        \n        <div style={{ marginBottom: ''24px'' }}>\n          <h5 style={{ margin: ''0 0 12px 0'', fontSize: ''14px'', fontWeight: ''600'' }}>Performance Metrics</h5>\n          <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''10px'' }}>\n            <div style={{ padding: ''10px'', backgroundColor: ''#F9FAFB'', borderRadius: ''6px'' }}>\n              <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>Total Revenue</div>\n              <div style={{ fontSize: ''18px'', fontWeight: ''bold'', color: ''#8B5CF6'' }}>\n                $' + '{(product.revenue / 1000).toFixed(1)}K\n              </div>\n            </div>\n            <div style={{ padding: ''10px'', backgroundColor: ''#F9FAFB'', borderRadius: ''6px'' }}>\n              <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>Units Sold</div>\n              <div style={{ fontSize: ''18px'', fontWeight: ''bold'' }}>\n                {product.quantity}\n              </div>\n            </div>\n            <div style={{ padding: ''10px'', backgroundColor: ''#F9FAFB'', borderRadius: ''6px'' }}>\n              <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>Margin</div>\n              <div style={{ \n                fontSize: ''18px'', \n                fontWeight: ''bold'',\n                color: product.margin > 30 ? ''#10B981'' : product.margin > 15 ? ''#F59E0B'' : ''#EF4444''\n              }}>\n                {product.margin.toFixed(1)}%\n              </div>\n            </div>\n            <div style={{ padding: ''10px'', backgroundColor: ''#F9FAFB'', borderRadius: ''6px'' }}>\n              <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>Customers</div>\n              <div style={{ fontSize: ''18px'', fontWeight: ''bold'' }}>\n                {product.customerCount}\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div style={{ marginBottom: ''24px'' }}>\n          <h5 style={{ margin: ''0 0 12px 0'', fontSize: ''14px'', fontWeight: ''600'' }}>Pricing Details</h5>\n          <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr 1fr'', gap: ''8px'' }}>\n            <div style={{ padding: ''8px'', backgroundColor: ''#F9FAFB'', borderRadius: ''4px'' }}>\n              <div style={{ fontSize: ''10px'', color: ''#6B7280'' }}>List Price</div>\n              <div style={{ fontSize: ''14px'', fontWeight: ''bold'' }}>\n                $' + '{product.price.toFixed(2)}\n              </div>\n            </div>\n            <div style={{ padding: ''8px'', backgroundColor: ''#F9FAFB'', borderRadius: ''4px'' }}>\n              <div style={{ fontSize: ''10px'', color: ''#6B7280'' }}>Cost</div>\n              <div style={{ fontSize: ''14px'', fontWeight: ''bold'' }}>\n                $' + '{product.cost.toFixed(2)}\n              </div>\n            </div>\n            <div style={{ padding: ''8px'', backgroundColor: ''#F9FAFB'', borderRadius: ''4px'' }}>\n              <div style={{ fontSize: ''10px'', color: ''#6B7280'' }}>Avg Selling</div>\n              <div style={{ fontSize: ''14px'', fontWeight: ''bold'' }}>\n                $' + '{product.quantity > 0 ? (product.revenue / product.quantity).toFixed(2) : ''0.00''}\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div style={{ marginBottom: ''20px'' }}>\n          <h5 style={{ margin: ''0 0 12px 0'', fontSize: ''14px'', fontWeight: ''600'' }}>Revenue Trend</h5>\n          <div style={{ height: ''140px'', backgroundColor: ''#F9FAFB'', borderRadius: ''6px'', padding: ''8px'' }}>\n            <canvas ref={trendChartRef} />\n          </div>\n        </div>\n        \n        <div>\n          <button\n            onClick={() => callbacks.OpenEntityRecord(''Products'', [{ FieldName: ''ID'', Value: product.id }])}\n            style={{\n              width: ''100%'',\n              padding: ''10px'',\n              backgroundColor: ''#3B82F6'',\n              color: ''white'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer'',\n              fontSize: ''13px'',\n              fontWeight: ''bold'',\n              transition: ''background 0.2s''\n            }}\n            onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#2563EB''}\n            onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''#3B82F6''}\n          >\n            View Full Product Details ↗\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Product Revenue Detail Panel Sub-Component\n\n### Purpose\nSlide-out panel displaying detailed product metrics and trends.\n\n### Core Features\n- **Performance Metrics**: Revenue, units, margin, customers\n- **Pricing Details**: List price, cost, average selling price\n- **Revenue Trend Chart**: 12-month trend visualization\n- **Explorer Link**: Open full product record\n- **Smooth Animations**: Slide-in/out transitions","dataRequirements":{"mode":"views","description":"Displays detailed metrics for a selected product passed via props","entities":[{"name":"Products","description":"Product entity being displayed in detail","displayFields":["ID","ProductName","Category","UnitPrice","Cost"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Displays detailed information about a single selected product"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Panel Structure\n- Fixed position slide-out panel\n- Chart.js for trend visualization\n- Metric cards with color coding\n- Responsive layout","properties":[{"name":"product","type":"{id: string, name: string, category: string, price: number, cost: number, revenue: number, quantity: number, margin: number, customerCount: number, transactions: number, trend: number[]}","description":"Selected product metrics object with calculated values","required":false},{"name":"isOpen","type":"boolean","description":"Panel visibility state","required":true},{"name":"onClose","type":"() => void","description":"Callback to close the panel","required":true}],"events":[],"dependencies":[],"libraries":[{"name":"Chart.js","version":"^4.4.1","globalVariable":"Chart"}]},{"name":"AIInsightsPanel","namespace":"Generic/UI/AI","location":"registry","version":"1.0.0"}],"libraries":[{"name":"d3","version":"^7.8.5","globalVariable":"d3"},{"name":"Chart.js","version":"^4.4.1","globalVariable":"Chart"}]}'
SET
  @FunctionalRequirements_7df1eaf2 = N'## Product Revenue Matrix

### Purpose
Visualize product performance across customers and time periods in an interactive matrix format.

### Core Features
- **Product/Customer Matrix**: Cross-reference sales data
- **Time Period Analysis**: Monthly, quarterly, yearly views
- **Growth Indicators**: Show trends with sparklines
- **Profitability Metrics**: Margin analysis per product
- **Interactive Treemap**: Using Highcharts visualization
- **Product Categories**: Group products hierarchically
- **Slide-out Details**: Product performance deep-dive
- **Filtering & Sorting**: Multiple sort options

### Visualizations
- Treemap for product hierarchy
- Matrix grid with color coding
- Sparklines for trends
- Bubble chart for volume/value analysis'
SET
  @TechnicalDesign_7df1eaf2 = N'## Implementation

### Components
- Main: ProductRevenueMatrix
- Sub-components:
  - RevenueTreemap: Hierarchical product visualization
  - ProductMatrix: Grid view of products
  - TrendSparkline: Mini trend charts
  - ProductDetails: Detailed analysis panel

### Data Processing
- Aggregate sales by product and period
- Calculate margins and profitability
- Generate trend data
- Build hierarchical structures'
SET
  @FunctionalRequirementsVector_7df1eaf2 = N'[0.007678233087062836,0.004283993039280176,-0.03290477395057678,-0.0382024385035038,0.03307664766907692,0.01391365472227335,0.0441943034529686,-0.004274584352970123,-0.07178258150815964,-0.026498835533857346,-0.054950106889009476,0.023350361734628677,0.029383543878793716,0.16352340579032898,-0.018498653545975685,-0.07000058889389038,-0.020367266610264778,-0.008679361082613468,-0.01983085460960865,0.015768446028232574,0.01955617219209671,-0.029292399063706398,0.004508075304329395,-0.0155905457213521,-0.05418548360466957,-0.029693633317947388,-0.030641330406069756,0.012143743224442005,-0.010226071812212467,-0.07747350633144379,-0.003894723718985915,0.011940413154661655,-0.00471116229891777,0.03175853192806244,0.000002036623072854127,-0.03495759889483452,-0.049383897334337234,0.015195869840681553,-0.00771472230553627,0.07414048910140991,0.10243555903434753,-0.04052363708615303,0.027754036709666252,-0.014805358834564686,0.037351880222558975,-0.001416917541064322,-0.03347562253475189,0.05229257047176361,0.023652540519833565,-0.022052951157093048,-0.003884165547788143,-0.062140628695487976,-0.019551213830709457,0.02290177159011364,-0.012905395589768887,-0.02166161499917507,-0.030170848593115807,0.017542319372296333,0.01683800294995308,-0.02744378335773945,-0.032581672072410583,0.02757268026471138,0.006627248600125313,-0.04904375225305557,0.11048825085163116,0.04872489720582962,0.07646004110574722,-0.01681065745651722,-0.04929784685373306,0.035263657569885254,0.022215528413653374,0.013898738659918308,0.008089778944849968,-0.036917414516210556,-0.013115244917571545,-0.046865854412317276,-0.014113106764853,0.011410018429160118,0.011324707418680191,-0.021678008139133453,-0.08729484677314758,0.034051645547151566,-0.04569164663553238,-0.03947702795267105,0.010257779620587826,0.02887769043445587,0.009970424696803093,-0.022738777101039886,-0.009773869067430496,-0.06236432120203972,0.03492848202586174,0.02111341618001461,-0.013434979133307934,-0.010549468919634819,-0.049319345504045486,-0.013053961098194122,0.06550534069538116,-0.05268160253763199,0.028227370232343674,-0.06713909655809402,0.06287151575088501,0.012397014535963535,0.022415557876229286,0.045302920043468475,-0.012244046665728092,0.05583173781633377,-0.018914660438895226,-0.06549308449029922,-0.013174007646739483,0.028071466833353043,0.005826471373438835,-0.02007432095706463,0.004074163269251585,0.017259247601032257,-0.022906087338924408,0.028098879382014275,-0.08453638106584549,-0.017797473818063736,-0.039319369941949844,0.015369587577879429,0.04707172140479088,0.02728208154439926,0.0007470390992239118,0.008296896703541279,0.007944349199533463,0.0033718226477503777,-0.04790138825774193,-0.014475303702056408,-0.023566488176584244,0.021160921081900597,0.014001280069351196,0.028703365474939346,0.011240889318287373,0.006869571283459663,-0.0050821369513869286,0.011715645901858807,-0.009507393464446068,0.002176779555156827,-0.05719016119837761,-0.02928326092660427,-0.013043981976807117,0.019494468346238136,-0.004931015893816948,0.046486593782901764,0.025776080787181854,-0.07106125354766846,-0.009078526869416237,0.11827987432479858,-0.009006932377815247,-0.0028467935044318438,0.008559441193938255,0.025117121636867523,-0.020546697080135345,0.02852197363972664,0.003134048543870449,-0.05423593521118164,0.01774204522371292,-0.051648661494255066,-0.0068012988194823265,0.01125803031027317,-0.012025232426822186,-0.0367773175239563,-0.000679694814607501,-0.023159947246313095,-0.06902638077735901,-0.03920353949069977,-0.12398811429738998,0.018308300524950027,-0.07171586155891418,-0.01785714365541935,0.0003113968123216182,-0.04477240890264511,0.013024229556322098,0.022283758968114853,0.02744297869503498,0.009922768920660019,0.050017379224300385,0.018434830009937286,0.010749765671789646,-0.037720490247011185,0.021700618788599968,-0.1486794799566269,0.08400855958461761,-0.005824406631290913,0.07241202145814896,0.00666819978505373,-0.05998263135552406,0.01215140987187624,0.006743228062987328,0.017074769362807274,0.0043941219337284565,-0.003094658488407731,-0.03368443250656128,0.012337728403508663,-0.0012778624659404159,0.00009990297985496,-0.007595248986035585,-0.06458346545696259,0.014798692427575588,-0.034399427473545074,-0.042852893471717834,0.01400594599545002,0.07408895343542099,0.026514636352658272,-0.012425627559423447,-0.007036204449832439,0.014943248592317104,-0.013596379198133945,-0.04741984233260155,0.03798707574605942,-0.0513482391834259,-0.0005393727333284914,-0.050974756479263306,0.02068042941391468,-0.004876069258898497,0.017875513061881065,0.051536742597818375,0.05666457489132881,-0.06570128351449966,-0.015707220882177353,0.003173594130203128,0.0389815978705883,0.050323471426963806,-0.014082019217312336,0.05265805870294571,0.07453448325395584,0.052822742611169815,-0.012075371108949184,0.05023565515875816,0.050861772149801254,0.011668030172586441,0.003969726152718067,0.03208614140748978,-0.013940398581326008,0.017328688874840736,0.023596150800585747,0.08254214376211166,0.11551015079021454,-0.02488071285188198,0.02550782822072506,-0.028063179925084114,-0.041272569447755814,-0.0035903467796742916,0.004161826800554991,0.01620388776063919,-0.027818752452731133,-0.03731102496385574,-0.004795142915099859,0.008847443386912346,-0.04403338208794594,0.01395045779645443,0.024445531889796257,0.08284590393304825,-0.003822001628577709,-0.002852103905752301,-0.016943255439400673,-0.060415416955947876,-0.015406097285449505,0.02552325278520584,0.07544976472854614,0.03185950219631195,-0.011669792234897614,-0.037817612290382385,-0.035715676844120026,-0.003515441669151187,-0.033169884234666824,0.11135221272706985,0.008981957100331783,0.0018579453462734818,0.033114995807409286,0.0023638163693249226,0.029791824519634247,-0.020965272560715675,0.02624199353158474,-0.0122151430696249,0.03663894906640053,-0.005538531579077244,0.008682590909302235,-0.032273441553115845,-0.008999883197247982,-0.0017541350098326802,-0.04242248088121414,0.01905885338783264,0.006389015819877386,-0.02709018625319004,0.019165880978107452,0.04796556755900383,-0.008612606674432755,0.007326170802116394,-0.05574502423405647,-0.03447040542960167,-0.027353499084711075,-0.011045325547456741,0.044773414731025696,-0.03444995358586311,0.022941207513213158,0.06619922816753387,0.01921926625072956,0.023627007380127907,0.0014924388378858566,-0.006757504306733608,-0.030266452580690384,-0.015852639451622963,0.02262137271463871,-0.014564484357833862,0.04110579565167427,0.04008793830871582,0.01536309253424406,0.029194112867116928,0.05146316811442375,0.0038537653163075447,-0.012224164791405201,-0.02305160090327263,-0.044005442410707474,0.008841186761856079,-0.004203033167868853,-0.010496382601559162,-0.04730607569217682,-0.02011757716536522,0.06552474200725555,0.005712816491723061,-0.02139890193939209,-0.011261223815381527,0.012132985517382622,-0.03169223666191101,0.011805796064436436,-0.037459298968315125,-0.021152133122086525,-0.03337625414133072,-0.01585196517407894,-0.01096857339143753,-0.05387941375374794,-0.020697027444839478,0.03534093499183655,0.02479991316795349,0.018771352246403694,-0.02243999019265175,-0.0033040386624634266,0.0028609377332031727,-0.02422122098505497,-0.0037407949566841125,0.03352808579802513,-0.027929462492465973,-0.0313892662525177,0.03648512065410614,-0.02896498143672943,0.051166411489248276,0.02216009981930256,-0.05305725708603859,0.04183207079768181,0.027541713789105415,-0.005409428849816322,-0.006460681091994047,-0.023135539144277573,0.022377902641892433,0.027798382565379143,-0.05410130321979523,0.018610987812280655,-0.002923634136095643,-0.05202709510922432,0.05247853323817253,-0.001191978924907744,-0.012180465273559093,0.034702833741903305,-0.01772254705429077,0.030973872169852257,-0.004009155556559563,0.03650892153382301,0.03581440821290016,-0.013270709663629532,-0.04954814165830612,0.025892293080687523,0.03801495581865311,0.026456914842128754,-0.011825230903923512,-0.04808300361037254,0.013963130302727222,0.04918868839740753,-0.01613939180970192,0.005804748274385929,0.03719065710902214,0.004164163954555988,0.11330420523881912,-0.031466588377952576,0.07493651658296585,-0.004744723439216614,-0.011901982128620148,-0.04309595748782158,-0.08260292559862137,0.025326941162347794,-0.0006187328835949302,0.033919233828783035,-0.049960121512413025,-0.011869384907186031,-0.041711464524269104,-0.006182388868182898,0.03827124089002609,-0.012949872761964798,-0.026558788493275642,-0.004014738369733095,-0.005227975081652403,-0.013682701624929905,-0.06766100972890854,-0.037782877683639526,0.047034021466970444,-0.08695001155138016,0.006515634711831808,0.03250889480113983,-0.020540360361337662,-0.002426089020445943,-0.00854378193616867,0.017479099333286285,0.0055890195071697235,-0.02796897292137146,-0.001225565792992711,0.021400965750217438,-0.002520692301914096,0.023554865270853043,0.010446926578879356,0.07246258109807968,0.05476340651512146,-0.00713588809594512,0.023709485307335854,0.026001818478107452,-0.021573025733232498,0.0018786375876516104,0.010610167868435383,-0.10853403806686401,-0.008484124206006527,0.0010149561567232013,0.008444053120911121,-0.006624035071581602,-0.014231347478926182,-0.00891563855111599,-0.026459956541657448,-0.012860223650932312,0.04447530210018158,-0.0243569016456604,-0.03838251903653145,-0.013647064566612244,0.01787634938955307,0.026701658964157104,0.008196115493774414,-0.028297577053308487,-0.053034745156764984,-0.04433499649167061,-0.006565389689058065,0.0498809777200222,-0.043841976672410965,0.02975635789334774,0.022079043090343475,-0.020980410277843475,0.07205162197351456,0.0318337120115757,-0.0003950136015191674,-0.025443190708756447,-0.021777331829071045,-0.007763552945107222,-0.028876498341560364,0.0025704388972371817,0.022626345977187157,0.008763269521296024,-0.03718256205320358,0.02586153894662857,-0.007821696810424328,-0.011979068629443645,0.049274854362010956,-0.029065562412142754,-0.022471878677606583,-0.04959586262702942,0.05847075581550598,-0.01296655461192131,0.0030947611667215824,-0.0034653146285563707,0.012754078954458237,-0.0016888690879568458,0.027630889788269997,0.009937022812664509,0.004266020376235247,0.02833671122789383,-0.021268794313073158,0.04440869390964508,0.0341714546084404,-0.04547269269824028,-0.00034711771877482533,0.037921205163002014,-0.04199210926890373,-0.019053151831030846,-0.010359052568674088,-0.015220098197460175,0.006301157176494598,-0.04931310564279556,-0.013067648746073246,0.030485132709145546,0.03005697950720787,-0.01990639604628086,-0.04804278165102005,0.0015256667975336313,0.003930747043341398,-0.040667299181222916,-0.0290373507887125,0.0030549615621566772,-0.027704395353794098,-0.051582708954811096,-0.013026382774114609,0.026584727689623833,0.04962072893977165,0.03092328831553459,-0.017029454931616783,-0.007117286324501038,-0.021276293322443962,-0.0006735233473591506,-0.005666822660714388,-0.05082828179001808,0.05107402056455612,-0.039399586617946625,-0.045842867344617844,0.028750894591212273,0.007418863940984011,-0.053307607769966125,-0.011169597506523132,0.027108319103717804,0.004995262250304222,-0.030595721676945686,0.05132031813263893,-0.0007192468037828803,0.0008201048476621509,-0.035208288580179214,-0.006220077630132437,0.038738884031772614,0.09064185619354248,-0.053505588322877884,-0.049070969223976135,0.0073537519201636314,-0.049448445439338684,0.041105326265096664,0.050650108605623245,0.05609419569373131,-0.015230976045131683,0.0053157564252614975,-0.08048640191555023,-0.006126126274466515,0.01794867031276226,-0.023490453138947487,0.017400536686182022,-0.0016414300771430135,-0.04252010956406593,0.0043283370323479176,0.007816681638360023,-0.009009904228150845,0.003237866098061204,-0.01803302951157093,-0.036938153207302094,-0.020729798823595047,-0.03670593723654747,-6.174303914161235e-33,-0.0015651873545721173,-0.03271006792783737,-0.08704317361116409,-0.011078722774982452,-0.014234394766390324,-0.021585509181022644,0.030602943152189255,-0.008803981356322765,0.006959256250411272,0.011728298850357533,-0.03505342826247215,0.007962843403220177,0.012229658663272858,0.017542896792292595,0.05683700367808342,0.012572219595313072,0.020662909373641014,0.002202705480158329,0.032373350113630295,0.03414382413029671,-0.051175307482481,0.06770163774490356,0.01806464046239853,-0.052145861089229584,-0.0022118703927844763,0.011415738612413406,-0.005184080917388201,0.020698528736829758,-0.013051209039986134,0.046776484698057175,0.006377749610692263,-0.004240268375724554,0.00032337658922187984,-0.00005569354834733531,-0.015856537967920303,-0.038751620799303055,-0.02006371319293976,0.03105640783905983,0.019530199468135834,-0.031191064044833183,-0.005677354987710714,0.029836853966116905,0.03464314341545105,-0.002536795334890485,-0.01285112090408802,-0.025719858705997467,0.06823061406612396,0.010975678451359272,-0.04790220782160759,-0.04299825057387352,0.02045390009880066,0.010623041540384293,-0.009887714870274067,0.08977000415325165,0.01842951588332653,0.07407951354980469,0.005617285147309303,0.06015809252858162,-0.004781688563525677,0.023252839222550392,-0.05516558885574341,-0.06494239717721939,0.006434651557356119,0.04701713100075722,0.036497361958026886,-0.017620274797081947,0.010486671701073647,0.06999991834163666,0.010798458941280842,-0.02669111080467701,-0.037137292325496674,0.018285823985934258,0.04217666760087013,-0.06414438039064407,-0.005465611815452576,0.06434552371501923,0.04291073605418205,0.003880819072946906,-0.00008573543891543522,0.005800672806799412,-0.0367615707218647,-0.005210092756897211,0.012715288437902927,0.01258762739598751,0.06070946156978607,0.03044877015054226,-0.028522279113531113,-0.015713071450591087,0.006124994717538357,0.019511530175805092,-0.06847477704286575,0.05041750147938728,-0.021971505135297775,-0.00487356586381793,-0.053484827280044556,-0.030321072787046432,0.04782278835773468,0.03232022374868393,0.012626835145056248,-0.012341498397290707,0.021812420338392258,0.04456385597586632,-0.05634121224284172,-0.05429508537054062,-0.017294488847255707,-0.04213755577802658,0.007341103628277779,-0.034037306904792786,-0.058147966861724854,0.032776251435279846,0.0524425134062767,0.005324669647961855,-0.03667750209569931,0.015585754066705704,0.005009995773434639,-0.01644338294863701,-0.0029539542738348246,0.015770530328154564,0.021124020218849182,0.03752119094133377,0.02646726556122303,-0.031823065131902695,-0.03889307379722595,-0.026031022891402245,0.034997470676898956,-0.00040203004027716815,-0.033888474106788635,0.0027635530568659306,0.04022756591439247,-0.012866408564150333,-0.01899462752044201,-0.008216926828026772,2.853081468856544e-7,0.02114289253950119,0.025662360712885857,-0.033534321933984756,0.04076467081904411,0.044701460748910904,0.000907542766071856,-0.0016067494871094823,-0.01927957497537136,-0.026876823976635933,-0.04157490283250809,0.04967069625854492,-0.04099937528371811,0.015827860683202744,0.014404025860130787,0.0030466639436781406,-0.05736473575234413,-0.06860756129026413,-0.05798486992716789,-0.08276329934597015,0.0035821718629449606,0.05432823300361633,0.04209237918257713,0.02111123874783516,0.00836380384862423,0.007579461205750704,0.014314254745841026,0.017812514677643776,-0.028044136241078377,0.0353621169924736,-0.0017031835159286857,0.047348394989967346,-0.01913965307176113,-0.06908367574214935,0.02000613696873188,0.006001507863402367,0.016077212989330292,-0.05030031129717827,-0.040236324071884155,0.021788299083709717,0.022557927295565605,0.05956098809838295,0.04190738871693611,-0.021647993475198746,-0.07483375072479248,-0.012509104795753956,0.006607475224882364,-0.007495783269405365,-0.01744001917541027,-0.002290148288011551,0.04946386441588402,0.019650926813483238,-0.032068490982055664,-0.00038687800406478345,0.008998904377222061,-0.02091340161859989,-0.00004396780059323646,0.06157900020480156,0.04550230875611305,0.04046468436717987,0.06948114931583405,-0.04279163479804993,0.009985711425542831,0.0029358621686697006,0.07654917985200882,0.07960515469312668,0.019358744844794273,0.00300337141379714,3.5128291804868328e-34,0.0501219667494297,-0.013500633649528027,0.07239697128534317,0.028700368478894234,-0.013243714347481728,0.007346355821937323,-0.0020413114689290524,-0.013437356799840927,0.0012178163742646575,-0.057332780212163925,-0.0038317320868372917]'
SET
  @TechnicalDesignVector_7df1eaf2 = N'[-0.01832883059978485,0.03947582468390465,-0.0292250644415617,-0.04549562558531761,0.009009194560348988,0.009733980521559715,0.022830577567219734,-0.00042857922380790114,-0.07099027931690216,-0.01850913278758526,-0.023548465222120285,0.012317040003836155,0.05164237320423126,0.1525392383337021,-0.008710233494639397,-0.0779205858707428,-0.017959466204047203,0.011024381965398788,-0.05340898782014847,0.019539453089237213,0.021570313721895218,-0.011358775198459625,0.029143882915377617,-0.038713812828063965,-0.06678721308708191,-0.025894930586218834,-0.02723347768187523,0.010063514113426208,0.0032258275896310806,-0.08842003345489502,0.013049576431512833,0.0036332705058157444,0.021387293934822083,-0.009921388700604439,0.000001862331941993034,-0.010275006294250488,-0.018178822472691536,0.016367632895708084,0.024586163461208344,0.04391603544354439,0.10421976447105408,-0.07484164834022522,0.02786414884030819,-0.012316037900745869,-0.0034814735408872366,-0.0029301142785698175,-0.04171401634812355,0.0716882050037384,0.028535909950733185,-0.04038836807012558,-0.010171785950660706,-0.0757998675107956,0.02877143584191799,0.008286366239190102,0.01779000833630562,-0.027678709477186203,-0.0010914686135947704,0.022227849811315536,0.031846120953559875,-0.030211951583623886,-0.022540224716067314,-0.017881715670228004,-0.00036652578273788095,-0.052729640156030655,0.09553274512290955,0.03484994173049927,0.1173444390296936,-0.04934605211019516,-0.04513659328222275,0.04945121333003044,0.0567946620285511,-0.0019459071336314082,0.03613472729921341,-0.022276505827903748,0.00961462315171957,-0.05173245817422867,-0.013443843461573124,0.013636435382068157,0.015117757953703403,0.004282847046852112,-0.01539220754057169,-0.0031479373574256897,-0.05242357775568962,-0.01836566999554634,-0.0035112937912344933,0.02707773819565773,-0.0018550473032519221,-0.03182332217693329,-0.027534831315279007,-0.04972681775689125,0.04666575789451599,-0.011475845240056515,-0.011629031039774418,-0.01375026535242796,-0.07022357732057571,-0.00036710812128148973,0.037129465490579605,-0.048613980412483215,0.003442607820034027,-0.09790188819169998,0.009473542682826519,0.024630846455693245,0.05782165378332138,0.06005087122321129,0.028409192338585854,0.037608467042446136,-0.04033929109573364,-0.11885089427232742,-0.013047728687524796,0.0020460407249629498,-0.009451509453356266,-0.014432641677558422,-0.0005713615682907403,0.04302969202399254,-0.03305772319436073,0.03705287724733353,-0.042523015290498734,0.015607284381985664,-0.05160274729132652,0.00056555395713076,0.060044653713703156,0.004935106262564659,0.006240944378077984,-0.004339720122516155,0.036990754306316376,0.017935488373041153,-0.029810555279254913,-0.018160946667194366,-0.0033625252544879913,0.06480136513710022,0.01758469082415104,0.017615433782339096,0.025144748389720917,0.023480799049139023,0.013159613125026226,-0.017093833535909653,-0.014800098724663258,0.023857805877923965,-0.07448726892471313,-0.036971092224121094,0.004780668765306473,-0.010622212663292885,-0.0569150447845459,0.006888024974614382,0.016598526388406754,-0.0627986267209053,-0.01283559761941433,0.11851940304040909,-0.007860577665269375,0.01619652472436428,-0.017372963950037956,0.00039931878563947976,-0.017854243516921997,0.010686823166906834,-0.04588013514876366,-0.0131842577829957,0.04099852964282036,-0.016980987042188644,-0.0015837912214919925,0.03743578866124153,-0.01244211196899414,-0.016158539801836014,0.000007518592610722408,-0.01871330663561821,-0.045482758432626724,-0.038197021931409836,-0.11585686355829239,0.02057298831641674,-0.0639963373541832,-0.028537152335047722,-0.0043933638371527195,-0.0309701319783926,-0.010208955965936184,0.0658576563000679,0.005222402513027191,0.05521301552653313,0.009408628568053246,0.024050837382674217,-0.020082831382751465,-0.04472039267420769,0.01767832227051258,-0.1215781643986702,0.05336286872625351,-0.01062670536339283,0.05007803812623024,-0.029815498739480972,-0.11172053217887878,0.02881838195025921,0.007503680884838104,0.006430135108530521,0.0031537131872028112,0.0003030805673915893,-0.03747580945491791,-0.009925761260092258,0.004969795700162649,-0.0058000702410936356,-0.000004470090061658993,-0.044455673545598984,0.028903348371386528,-0.020915886387228966,-0.003900716081261635,0.025939371436834335,0.09642354398965836,0.010119622573256493,-0.006975080817937851,-0.02211223915219307,-0.0009900452569127083,0.0034184798132628202,-0.03773609176278114,0.03132170811295509,-0.05309339985251427,-0.0030512334778904915,-0.04164411127567291,0.007872022688388824,-0.0025525731034576893,0.03389500081539154,0.03897925093770027,0.02938172034919262,-0.07992018759250641,-0.05343415588140488,-0.03857671469449997,-0.012967611663043499,0.05167963728308678,0.0038863641675561666,0.03966829553246498,0.08690568804740906,0.04777828976511955,-0.010050712153315544,0.05445083975791931,0.06133875250816345,0.009051913395524025,-0.024254392832517624,0.0313657708466053,-0.004576857667416334,-0.0018821107223629951,0.026811685413122177,0.06611564010381699,0.03388012945652008,-0.0022101188078522682,-0.03957194462418556,-0.03682997077703476,-0.06233813613653183,0.008035160601139069,-0.019245771691203117,0.041643623262643814,-0.04335447773337364,-0.053996242582798004,0.007611124776303768,-0.021868914365768433,-0.04039907082915306,0.014331317506730556,0.022710591554641724,0.053818900138139725,-0.010565727017819881,-0.0364798828959465,0.05143309384584427,-0.08965554088354111,0.0016269299667328596,0.06854572892189026,0.07632540166378021,0.03697734326124191,-0.015075567178428173,-0.015252630226314068,0.0010423858184367418,-0.0023294948041439056,-0.009839004836976528,0.06165118142962456,0.021758032962679863,-0.008460421115159988,0.04073404520750046,0.03177943825721741,0.025062642991542816,-0.015660757198929787,0.011967889964580536,0.005625307094305754,0.03888446092605591,0.008143460378050804,-0.0002514786319807172,-0.02796836756169796,-0.0037794741801917553,-0.02075829543173313,-0.024950768798589706,0.015043585561215878,-0.015785394236445427,-0.0256213266402483,0.014002063311636448,0.03327818959951401,-0.009477282874286175,-0.004035932011902332,-0.08975750207901001,-0.014142961241304874,-0.03177591413259506,0.00038337797741405666,0.013579324819147587,-0.0449209101498127,-0.006157632917165756,0.0652720034122467,0.010587622411549091,-0.010077043436467648,0.025138597935438156,0.006023842841386795,-0.01874801702797413,-0.01228171307593584,-0.004621078725904226,-0.028166450560092926,0.09625553339719772,0.016242515295743942,0.007042888086289167,0.02854062244296074,0.06625843048095703,0.02257046476006508,-0.01176520437002182,-0.00104145600926131,-0.03454109653830528,0.0065183392725884914,-0.0022473763674497604,0.005090897902846336,-0.033362552523612976,-0.022932957857847214,0.08318375796079636,-0.0035338071174919605,-0.03513775020837784,0.003933653701096773,0.004237559624016285,-0.05146181583404541,0.001699741231277585,-0.04111955687403679,-0.017907829955220222,-0.041383180767297745,0.0014785436214879155,-0.00951398629695177,-0.07565417140722275,-0.02576584741473198,0.03361911326646805,0.02045673504471779,0.011164601892232895,-0.003633953630924225,-0.00507643586024642,0.022396579384803772,0.0010742286685854197,0.0033993006218224764,0.03059452958405018,-0.018127067014575005,0.014312963001430035,0.04828205332159996,-0.01270634587854147,0.045694801956415176,-0.002527758479118347,-0.04131675884127617,0.044829048216342926,0.06546138226985931,-0.0026820036582648754,0.015715129673480988,-0.043886929750442505,-0.007770793978124857,0.017217282205820084,-0.041801564395427704,-0.053038645535707474,-0.023963581770658493,-0.02350211888551712,0.06747885793447495,0.0287771113216877,0.00038309546653181314,0.02643279917538166,-0.017662517726421356,0.033665213733911514,0.014722744934260845,0.039263397455215454,0.026416495442390442,-0.010206025093793869,-0.048448171466588974,0.0029409802518785,0.02978961355984211,0.0387876071035862,-0.0013655652292072773,-0.04724162444472313,0.0042601823806762695,0.030582956969738007,0.016792066395282745,-0.009842311032116413,0.02621094509959221,0.001019628718495369,0.11043781787157059,-0.018026579171419144,0.06195852905511856,0.0037546141538769007,-0.019805796444416046,0.0032763630151748657,-0.05042653903365135,0.03814379870891571,0.0015189311234280467,-0.012586650438606739,-0.05832358077168465,-0.03464192897081375,-0.006116278935223818,-0.001230950583703816,0.009312589652836323,0.00978266540914774,-0.03922290354967117,-0.011699860915541649,-0.020029569044709206,-0.07325771450996399,-0.03523865342140198,-0.023158784955739975,0.062149349600076675,-0.08233101665973663,0.015392725355923176,0.04926479235291481,-0.014770503155887127,0.02146526239812374,0.009953675791621208,-0.003185557434335351,-0.01364651694893837,-0.0719674676656723,-0.0404040589928627,0.03148094564676285,0.0004146687570028007,0.009485995396971703,0.03734433278441429,0.013650585897266865,0.03253184258937836,-0.028489496558904648,0.0490206815302372,0.014241873286664486,-0.04441801831126213,-0.029628071933984756,-0.001505928230471909,-0.08169805258512497,-0.023160113021731377,-0.002796618966385722,0.01703874208033085,-0.02117193304002285,0.006571851205080748,-0.01526539959013462,0.007886800915002823,-0.002555255312472582,0.013167575933039188,-0.034733135253190994,-0.017132047563791275,-0.008115291595458984,0.0060076178051531315,0.0300571508705616,0.05409691110253334,-0.03290478512644768,-0.03096160665154457,0.0032821553759276867,-0.03361476585268974,0.016074949875473976,-0.07034389674663544,0.03424960374832153,0.01402005273848772,0.003769555361941457,0.05039820075035095,0.0317804329097271,-0.005175276193767786,-0.04056417569518089,-0.07585594803094864,0.02835414931178093,-0.05059993267059326,0.013576189987361431,0.01858796551823616,0.02216615341603756,-0.02066231705248356,-0.001904939184896648,0.011713971383869648,-0.03685136139392853,0.09234921634197235,0.019409196451306343,-0.004697488155215979,-0.011294567957520485,0.04534953087568283,-0.02105262130498886,-0.013589728623628616,0.013279124163091183,0.022707683965563774,0.007408550009131432,0.016812438145279884,-0.001221235143020749,-0.0006942000472918153,0.0061628851108253,-0.03689680993556976,0.040668897330760956,0.025966934859752655,-0.029302997514605522,0.0017680778400972486,0.025606529787182808,0.005616710986942053,-0.006733485031872988,-0.026890549808740616,-0.0033615457359701395,0.016100849956274033,-0.038138214498758316,0.0024045752361416817,0.0876220166683197,0.025244824588298798,-0.023308271542191505,0.0007431283593177795,0.007344164419919252,-0.044300928711891174,0.028310701251029968,-0.02896704711019993,-0.01818155311048031,0.002165737561881542,-0.04471484199166298,-0.020601972937583923,0.00827172864228487,0.043305352330207825,0.02807139791548252,-0.010243095457553864,-0.028988271951675415,-0.01038514543324709,-0.004928755573928356,-0.01576504483819008,-0.007372184656560421,0.027026614174246788,-0.022599758580327034,-0.012013902887701988,0.049161143600940704,0.029734771698713303,-0.039639540016651154,-0.006124875508248806,0.03743917495012283,0.03408701717853546,-0.07027135789394379,0.08749811351299286,0.0004774907138198614,-0.0024776479694992304,-0.025724979117512703,-0.015622635371983051,0.04706592112779617,0.07011917978525162,-0.04875487834215164,0.008761880919337273,-0.02259032428264618,-0.03149023279547691,0.01863233745098114,0.029571805149316788,0.012509321793913841,-0.028716057538986206,0.0006753206253051758,-0.058876883238554,-0.002991171320900321,0.0120082451030612,0.0008405128610320389,0.005267336033284664,-0.0008567371987737715,-0.027999775484204292,-0.011693724431097507,0.009678414091467857,0.03985067456960678,0.015892455354332924,-0.0351596437394619,-0.01792232319712639,-0.024243349209427834,-0.004563461057841778,-6.0559830609112794e-33,0.0097176069393754,-0.032301049679517746,-0.06451358646154404,0.019900746643543243,-0.054219286888837814,-0.032605864107608795,0.018790071830153465,-0.015614345669746399,0.013529906049370766,0.01363435946404934,-0.008573519065976143,0.004967275075614452,-0.007384818512946367,0.013276818208396435,0.04831085726618767,-0.003618964459747076,0.009386506862938404,0.025053735822439194,0.023934299126267433,0.029752058908343315,-0.05705592781305313,0.052089400589466095,0.03720230981707573,-0.019898705184459686,-0.03549446165561676,0.0011142303701490164,0.03413548693060875,0.02385186217725277,-0.003677443601191044,0.028090232983231544,0.005970978178083897,-0.030961982905864716,-0.005780109204351902,0.01950104348361492,-0.028312036767601967,-0.0029784974176436663,-0.023501327261328697,-0.00022744452871847898,0.025681229308247566,-0.019211387261748314,0.010359750129282475,0.034278158098459244,0.007513482589274645,0.015229242853820324,-0.0022512683644890785,-0.0057153902016580105,0.04574120044708252,0.0008464503334835172,-0.024871913716197014,-0.02959548868238926,-0.012966840527951717,0.019558919593691826,-0.0000895769553608261,0.08561260998249054,0.018728205934166908,0.03085116297006607,0.03120342455804348,0.04853903129696846,-0.01198268961161375,0.010908931493759155,-0.03621043637394905,-0.04877932369709015,0.014010977931320667,0.024810021743178368,0.032740313559770584,-0.02616768330335617,0.037612184882164,0.058682676404714584,-0.007856834679841995,-0.018838802352547646,-0.025382738560438156,0.026412976905703545,0.04090101271867752,-0.030336258932948112,0.045488111674785614,0.09397655725479126,0.01797288842499256,0.0044416100718081,0.03491824120283127,0.03618777170777321,-0.055122703313827515,0.012251722626388073,0.03424752131104469,0.005487233866006136,0.051546722650527954,-0.014991262927651405,-0.018653828650712967,0.014806057326495647,-0.017811229452490807,0.04445255547761917,-0.043498244136571884,0.06377052515745163,-0.023046232759952545,-0.0042893486097455025,-0.04087597504258156,-0.01145565789192915,0.05718178674578667,0.04076588898897171,0.01681704819202423,-0.019737455993890762,-0.0010212883353233337,0.026079226285219193,-0.032475877553224564,0.010111434385180473,-0.03230264037847519,-0.014092393219470978,-0.009355130605399609,-0.003708415664732456,-0.034893669188022614,0.021765723824501038,0.02947564795613289,0.007098251022398472,-0.04825301840901375,0.01143309660255909,0.013003622181713581,-0.009601847268640995,0.007121554110199213,0.042006589472293854,0.005244546569883823,0.0306687094271183,0.021450940519571304,0.007684171665459871,-0.04321877285838127,-0.021037958562374115,0.044234395027160645,-0.0077169048599898815,-0.02866438217461109,-0.00781981647014618,0.0409933365881443,-0.03775883466005325,-0.015925686806440353,0.001533791539259255,2.6463990820957406e-7,-0.014202451333403587,0.0448123998939991,-0.02630491368472576,0.043070558458566666,0.03416050970554352,-0.026007523760199547,-0.006936791818588972,-0.02562880702316761,-0.02769654430449009,-0.05919542536139488,0.053141385316848755,-0.03884387016296387,0.022962884977459908,0.028294870629906654,0.005340216681361198,-0.022631051018834114,-0.061038579791784286,-0.0750475823879242,-0.0775538980960846,-0.006424997467547655,0.024502582848072052,0.034129831939935684,0.037663158029317856,-0.014994020573794842,0.008499005809426308,0.09307818114757538,0.003269015811383724,-0.006426024250686169,0.04535767063498497,0.0047729769721627235,0.052249252796173096,0.004012511111795902,-0.04893765598535538,-0.006798062473535538,-0.0019943276420235634,0.015795422717928886,-0.07886752486228943,-0.04127522557973862,0.031057540327310562,0.037805091589689255,0.06597553193569183,-0.0026856439653784037,-0.05593670904636383,-0.03937767073512077,0.009550472721457481,-0.0374128632247448,0.0057880692183971405,-0.047713615000247955,-0.04125650227069855,0.044653862714767456,-0.018042391166090965,-0.033257462084293365,-0.004999954719096422,-0.008970754221081734,-0.02170460857450962,-0.007825375534594059,0.02277231775224209,0.06574886292219162,0.06471525132656097,0.07142366468906403,-0.03515489399433136,-0.0096615981310606,0.01738448441028595,0.0956161767244339,0.06516299396753311,0.011460768058896065,-0.007512976415455341,3.4483730599759043e-34,0.0628521591424942,-0.031864721328020096,0.027413997799158096,0.05279483646154404,-0.029017282649874687,0.010426783934235573,-0.02137705683708191,-0.03270421922206879,-0.01589503511786461,-0.08610105514526367,-0.013675970956683159]'
SET
  @HasCustomProps_7df1eaf2 = 0
SET
  @HasCustomEvents_7df1eaf2 = 1
SET
  @RequiresData_7df1eaf2 = 1
SET
  @DependencyCount_7df1eaf2 = 3
SET
  @TechnicalDesignVectorEmbeddingModelID_7df1eaf2 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_7df1eaf2 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_7df1eaf2 = 0
SET
  @ID_7df1eaf2 = '11036C9C-3AC6-4026-B3CC-74A8C28D831B'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_7df1eaf2,
  @Name = @Name_7df1eaf2,
  @Version = @Version_7df1eaf2,
  @VersionSequence = @VersionSequence_7df1eaf2,
  @Title = @Title_7df1eaf2,
  @Description = @Description_7df1eaf2,
  @Type = @Type_7df1eaf2,
  @Status = @Status_7df1eaf2,
  @DeveloperName = @DeveloperName_7df1eaf2,
  @DeveloperEmail = @DeveloperEmail_7df1eaf2,
  @DeveloperOrganization = @DeveloperOrganization_7df1eaf2,
  @SourceRegistryID = @SourceRegistryID_7df1eaf2,
  @ReplicatedAt = @ReplicatedAt_7df1eaf2,
  @LastSyncedAt = @LastSyncedAt_7df1eaf2,
  @Specification = @Specification_7df1eaf2,
  @FunctionalRequirements = @FunctionalRequirements_7df1eaf2,
  @TechnicalDesign = @TechnicalDesign_7df1eaf2,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_7df1eaf2,
  @TechnicalDesignVector = @TechnicalDesignVector_7df1eaf2,
  @HasCustomProps = @HasCustomProps_7df1eaf2,
  @HasCustomEvents = @HasCustomEvents_7df1eaf2,
  @RequiresData = @RequiresData_7df1eaf2,
  @DependencyCount = @DependencyCount_7df1eaf2,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_7df1eaf2,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_7df1eaf2,
  @HasRequiredCustomProps = @HasRequiredCustomProps_7df1eaf2,
  @ID = @ID_7df1eaf2;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_158b21e6 NVARCHAR(MAX),
@Name_158b21e6 NVARCHAR(500),
@Version_158b21e6 NVARCHAR(50),
@VersionSequence_158b21e6 INT,
@Title_158b21e6 NVARCHAR(1000),
@Description_158b21e6 NVARCHAR(MAX),
@Type_158b21e6 NVARCHAR(255),
@Status_158b21e6 NVARCHAR(50),
@DeveloperName_158b21e6 NVARCHAR(255),
@DeveloperEmail_158b21e6 NVARCHAR(255),
@DeveloperOrganization_158b21e6 NVARCHAR(255),
@SourceRegistryID_158b21e6 UNIQUEIDENTIFIER,
@ReplicatedAt_158b21e6 DATETIMEOFFSET,
@LastSyncedAt_158b21e6 DATETIMEOFFSET,
@Specification_158b21e6 NVARCHAR(MAX),
@FunctionalRequirements_158b21e6 NVARCHAR(MAX),
@TechnicalDesign_158b21e6 NVARCHAR(MAX),
@FunctionalRequirementsVector_158b21e6 NVARCHAR(MAX),
@TechnicalDesignVector_158b21e6 NVARCHAR(MAX),
@HasCustomProps_158b21e6 BIT,
@HasCustomEvents_158b21e6 BIT,
@RequiresData_158b21e6 BIT,
@DependencyCount_158b21e6 INT,
@TechnicalDesignVectorEmbeddingModelID_158b21e6 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_158b21e6 NVARCHAR(MAX),
@HasRequiredCustomProps_158b21e6 BIT,
@ID_158b21e6 UNIQUEIDENTIFIER
SET
  @Namespace_158b21e6 = N'CRM/Finance'
SET
  @Name_158b21e6 = N'InvoiceStatusDashboard'
SET
  @Version_158b21e6 = N'1.0.0'
SET
  @VersionSequence_158b21e6 = 1
SET
  @Title_158b21e6 = N'Invoice Status Dashboard'
SET
  @Description_158b21e6 = N'Track invoice statuses, payment timelines, and accounts receivable aging with actionable insights and collection metrics'
SET
  @Type_158b21e6 = N'Dashboard'
SET
  @Status_158b21e6 = N'Published'
SET
  @Specification_158b21e6 = N'{"name":"InvoiceStatusDashboard","namespace":"CRM/Finance","type":"Dashboard","location":"embedded","code":"function InvoiceStatusDashboard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract AIInsightsPanel from components\n  const AIInsightsPanel = components?.AIInsightsPanel;\n  \n  if (!AIInsightsPanel) {\n    console.warn(''AIInsightsPanel component not available'');\n  }\n\n  const [invoices, setInvoices] = useState([]);\n  const [payments, setPayments] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedData, setSelectedData] = useState(null);\n  const [drillDownType, setDrillDownType] = useState(null);\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n  const [timePeriod, setTimePeriod] = useState(savedUserSettings?.timePeriod || ''month'');\n  const [startDate, setStartDate] = useState(savedUserSettings?.startDate || null);\n  const [endDate, setEndDate] = useState(savedUserSettings?.endDate || null);\n  \n  const statusChartRef = useRef(null);\n  const agingChartRef = useRef(null);\n  const statusChartInstance = useRef(null);\n  const agingChartInstance = useRef(null);\n  \n  // AI Insights state\n  const [aiInsights, setAiInsights] = useState(null);\n  const [loadingInsights, setLoadingInsights] = useState(false);\n  const [insightsError, setInsightsError] = useState(null);\n\n  useEffect(() => {\n    loadData();\n  }, [timePeriod, startDate, endDate]);\n\n  const getDateFilter = () => {\n    // If custom dates are set, use them\n    if (timePeriod === ''custom'' && startDate && endDate) {\n      return `InvoiceDate >= ''$' + '{startDate}'' AND InvoiceDate <= ''$' + '{endDate}''`;\n    }\n    \n    const now = new Date();\n    let filterStart, filterEnd;\n    \n    switch (timePeriod) {\n      case ''month'':\n        filterStart = new Date(now.getFullYear(), now.getMonth(), 1);\n        filterEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n        break;\n      case ''lastMonth'':\n        filterStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n        filterEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n        break;\n      case ''quarter'':\n        const currentQuarter = Math.floor(now.getMonth() / 3);\n        filterStart = new Date(now.getFullYear(), currentQuarter * 3, 1);\n        filterEnd = new Date(now.getFullYear(), currentQuarter * 3 + 3, 0);\n        break;\n      case ''lastQuarter'':\n        const lastQuarter = Math.floor(now.getMonth() / 3) - 1;\n        const year = lastQuarter < 0 ? now.getFullYear() - 1 : now.getFullYear();\n        const quarter = lastQuarter < 0 ? 3 : lastQuarter;\n        filterStart = new Date(year, quarter * 3, 1);\n        filterEnd = new Date(year, quarter * 3 + 3, 0);\n        break;\n      case ''year'':\n        filterStart = new Date(now.getFullYear(), 0, 1);\n        filterEnd = new Date(now.getFullYear(), 11, 31);\n        break;\n      case ''lastYear'':\n        filterStart = new Date(now.getFullYear() - 1, 0, 1);\n        filterEnd = new Date(now.getFullYear() - 1, 11, 31);\n        break;\n      default:\n        return '''';\n    }\n    \n    if (filterStart && filterEnd) {\n      return `InvoiceDate >= ''$' + '{filterStart.toISOString().split(''T'')[0]}'' AND InvoiceDate <= ''$' + '{filterEnd.toISOString().split(''T'')[0]}''`;\n    }\n    return '''';\n  };\n\n  const loadData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const dateFilter = getDateFilter();\n      \n      // Use RunViews for batch loading\n      const results = await utilities.rv.RunViews([\n        {\n          EntityName: ''Invoices'',\n          ExtraFilter: dateFilter,\n          OrderBy: ''DueDate ASC''\n        },\n        {\n          EntityName: ''Payments'',\n          OrderBy: ''PaymentDate DESC'',\n          MaxRows: 500\n        },\n        {\n          EntityName: ''Accounts'',\n          OrderBy: ''AccountName ASC''\n        }\n      ]);\n\n      if (results && results.length === 3) {\n        const [invoicesResult, paymentsResult, accountsResult] = results;\n        \n        if (invoicesResult.Success) {\n          setInvoices(invoicesResult.Results || []);\n        }\n        if (paymentsResult.Success) {\n          setPayments(paymentsResult.Results || []);\n        }\n        if (accountsResult.Success) {\n          setAccounts(accountsResult.Results || []);\n        }\n        \n        if (!invoicesResult.Success) {\n          setError(''Failed to load invoice data'');\n        }\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateMetrics = () => {\n    const metrics = {\n      total: invoices.length,\n      totalAmount: 0,\n      paid: 0,\n      paidAmount: 0,\n      overdue: 0,\n      overdueAmount: 0,\n      pending: 0,\n      pendingAmount: 0,\n      partial: 0,\n      partialAmount: 0\n    };\n    \n    const today = new Date();\n    \n    // Calculate paid amounts from payments\n    const paidByInvoice = {};\n    payments.forEach(payment => {\n      if (!paidByInvoice[payment.InvoiceID]) {\n        paidByInvoice[payment.InvoiceID] = 0;\n      }\n      paidByInvoice[payment.InvoiceID] += payment.Amount || 0;\n    });\n    \n    invoices.forEach(invoice => {\n      const amount = invoice.TotalAmount || 0;\n      const paidAmount = paidByInvoice[invoice.ID] || 0;\n      const remainingAmount = amount - paidAmount;\n      \n      metrics.totalAmount += amount;\n      \n      if (invoice.Status === ''Paid'' || remainingAmount <= 0) {\n        metrics.paid++;\n        metrics.paidAmount += amount;\n      } else if (invoice.Status === ''Cancelled'') {\n        // Skip cancelled invoices\n      } else if (invoice.Status === ''Partial'' || (paidAmount > 0 && remainingAmount > 0)) {\n        metrics.partial++;\n        metrics.partialAmount += remainingAmount;\n        if (new Date(invoice.DueDate) < today) {\n          metrics.overdue++;\n          metrics.overdueAmount += remainingAmount;\n        }\n      } else if (new Date(invoice.DueDate) < today) {\n        metrics.overdue++;\n        metrics.overdueAmount += remainingAmount;\n      } else {\n        metrics.pending++;\n        metrics.pendingAmount += remainingAmount;\n      }\n    });\n    \n    return metrics;\n  };\n\n  const openDrillDown = (type, data) => {\n    setDrillDownType(type);\n    setSelectedData(data);\n    setIsPanelOpen(true);\n  };\n  \n  // Generate AI Insights\n  // Format insights text using marked library for proper markdown rendering\n\n  const generateAIInsights = async () => {\n    setLoadingInsights(true);\n    setInsightsError(null);\n    \n    try {\n      const metrics = calculateMetrics();\n      \n      // Calculate aging breakdown\n      const aging = { current: 0, ''30days'': 0, ''60days'': 0, ''90days'': 0, ''over90'': 0 };\n      const today = new Date();\n      const paidByInvoice = {};\n      payments.forEach(payment => {\n        if (!paidByInvoice[payment.InvoiceID]) {\n          paidByInvoice[payment.InvoiceID] = 0;\n        }\n        paidByInvoice[payment.InvoiceID] += payment.Amount || 0;\n      });\n      \n      invoices.forEach(invoice => {\n        if (invoice.Status !== ''Paid'' && invoice.Status !== ''Cancelled'') {\n          const paidAmount = paidByInvoice[invoice.ID] || 0;\n          const outstanding = (invoice.TotalAmount || 0) - paidAmount;\n          \n          if (outstanding > 0) {\n            const dueDate = new Date(invoice.DueDate);\n            const daysPastDue = Math.floor((today - dueDate) / (1000 * 60 * 60 * 24));\n            \n            if (daysPastDue <= 0) aging.current += outstanding;\n            else if (daysPastDue <= 30) aging[''30days''] += outstanding;\n            else if (daysPastDue <= 60) aging[''60days''] += outstanding;\n            else if (daysPastDue <= 90) aging[''90days''] += outstanding;\n            else aging.over90 += outstanding;\n          }\n        }\n      });\n      \n      const formatCurrency = (amount) => {\n        if (amount >= 1000000) return `$$' + '{(amount / 1000000).toFixed(1)}M`;\n        if (amount >= 1000) return `$$' + '{(amount / 1000).toFixed(0)}K`;\n        return `$$' + '{amount?.toFixed(0) || 0}`;\n      };\n      \n      const prompt = `Analyze this invoice status and aging data and provide actionable insights:\n\n## Invoice Overview\n- **Time Period:** $' + '{timePeriod === ''custom'' ? `$' + '{startDate} to $' + '{endDate}` : `Last $' + '{timePeriod}`}\n- **Total Invoices:** $' + '{metrics.total}\n- **Total Amount:** $' + '{formatCurrency(metrics.totalAmount)}\n\n## Status Breakdown\n- **Paid:** $' + '{metrics.paid} invoices ($' + '{formatCurrency(metrics.paidAmount)})\n- **Pending:** $' + '{metrics.pending} invoices ($' + '{formatCurrency(metrics.pendingAmount)})\n- **Overdue:** $' + '{metrics.overdue} invoices ($' + '{formatCurrency(metrics.overdueAmount)})\n- **Partial:** $' + '{metrics.partial} invoices ($' + '{formatCurrency(metrics.partialAmount)})\n\n## Aging Analysis\n- **Current (not overdue):** $' + '{formatCurrency(aging.current)}\n- **1-30 days overdue:** $' + '{formatCurrency(aging[''30days''])}\n- **31-60 days overdue:** $' + '{formatCurrency(aging[''60days''])}\n- **61-90 days overdue:** $' + '{formatCurrency(aging[''90days''])}\n- **Over 90 days overdue:** $' + '{formatCurrency(aging.over90)}\n\n## Key Metrics\n- **Total Payments Recorded:** $' + '{payments.length}\n- **Total Customer Accounts:** $' + '{accounts.length}\n- **Collection Rate:** $' + '{metrics.paid > 0 ? ((metrics.paidAmount / metrics.totalAmount) * 100).toFixed(1) : 0}%\n- **Average Days Overdue:** $' + '{metrics.overdue > 0 ? Math.round(invoices.filter(i => i.Status === ''Overdue'').reduce((sum, inv) => {\n    const dueDate = new Date(inv.DueDate);\n    const today = new Date();\n    return sum + Math.max(0, Math.floor((today - dueDate) / (1000 * 60 * 60 * 24)));\n  }, 0) / metrics.overdue) : 0} days\n\nBased on this specific data, please provide:\n1. **Cash Flow Analysis** - What is the immediate cash flow situation?\n2. **Risk Assessment** - Which invoices pose the highest collection risk?\n3. **Customer Payment Patterns** - What behaviors are evident?\n4. **Collection Strategy** - Specific recommendations to improve collections\n5. **Action Items** - 3-4 immediate actions to reduce overdue amounts\n6. **Early Warning Indicators** - What metrics should we monitor closely?\n\nUse markdown formatting with headers (##), bullet points, and **bold** text. Reference the actual numbers in your analysis.`;\n      \n      const result = await utilities.ai.ExecutePrompt({\n        systemPrompt: ''You are an expert accounts receivable and cash flow analyst with deep knowledge of invoice management, collections, and customer payment behavior. Provide clear, actionable insights with specific recommendations. Format your response in clear markdown.'',\n        messages: prompt,\n        preferredModels: [''GPT-OSS-120B'', ''Qwen3 32B''],\n        modelPower: ''high'',\n        temperature: 0.7,\n        maxTokens: 1500\n      });\n      \n      if (result?.success && result?.result) {\n        setAiInsights(result.result);\n      } else {\n        setInsightsError(''Failed to generate insights. Please try again.'');\n      }\n    } catch (error) {\n      setInsightsError(error.message || ''Failed to generate AI insights'');\n    } finally {\n      setLoadingInsights(false);\n    }\n  };\n\n  const closeDrillDown = () => {\n    setIsPanelOpen(false);\n    setTimeout(() => {\n      setSelectedData(null);\n      setDrillDownType(null);\n    }, 300);\n  };\n\n  // Status Distribution Chart with click handler\n  useEffect(() => {\n    if (!loading && statusChartRef.current && invoices.length > 0) {\n      const metrics = calculateMetrics();\n      const ctx = statusChartRef.current.getContext(''2d'');\n      \n      // Destroy existing chart\n      if (statusChartInstance.current) {\n        statusChartInstance.current.destroy();\n      }\n      \n      statusChartInstance.current = new Chart(ctx, {\n        type: ''doughnut'',\n        data: {\n          labels: [''Paid'', ''Pending'', ''Overdue'', ''Partial''],\n          datasets: [{\n            data: [metrics.paid, metrics.pending, metrics.overdue, metrics.partial],\n            backgroundColor: [''#10B981'', ''#3B82F6'', ''#EF4444'', ''#F59E0B''],\n            borderWidth: 0\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          onClick: (event, activeElements) => {\n            if (activeElements.length > 0) {\n              const index = activeElements[0].index;\n              const labels = [''Paid'', ''Pending'', ''Overdue'', ''Partial''];\n              openDrillDown(''status'', labels[index]);\n            }\n          },\n          plugins: {\n            legend: {\n              position: ''right'',\n              labels: {\n                padding: 20,\n                font: { size: 12 }\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const value = context.raw;\n                  const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                  const percentage = ((value / total) * 100).toFixed(1);\n                  return `$' + '{context.label}: $' + '{value} ($' + '{percentage}%)`;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n    \n    return () => {\n      if (statusChartInstance.current) {\n        statusChartInstance.current.destroy();\n      }\n    };\n  }, [loading, invoices]);\n\n  // Aging Chart with click handler\n  useEffect(() => {\n    if (!loading && agingChartRef.current && invoices.length > 0) {\n      const aging = { current: 0, ''30days'': 0, ''60days'': 0, ''90days'': 0, ''over90'': 0 };\n      const agingInvoices = { current: [], ''30days'': [], ''60days'': [], ''90days'': [], ''over90'': [] };\n      const today = new Date();\n      \n      // Calculate paid amounts\n      const paidByInvoice = {};\n      payments.forEach(payment => {\n        if (!paidByInvoice[payment.InvoiceID]) {\n          paidByInvoice[payment.InvoiceID] = 0;\n        }\n        paidByInvoice[payment.InvoiceID] += payment.Amount || 0;\n      });\n      \n      invoices.forEach(invoice => {\n        if (invoice.Status !== ''Paid'' && invoice.Status !== ''Cancelled'') {\n          const paidAmount = paidByInvoice[invoice.ID] || 0;\n          const outstanding = (invoice.TotalAmount || 0) - paidAmount;\n          \n          if (outstanding > 0) {\n            const dueDate = new Date(invoice.DueDate);\n            const daysPastDue = Math.floor((today - dueDate) / (1000 * 60 * 60 * 24));\n            \n            if (daysPastDue <= 0) {\n              aging.current += outstanding;\n              agingInvoices.current.push(invoice);\n            } else if (daysPastDue <= 30) {\n              aging[''30days''] += outstanding;\n              agingInvoices[''30days''].push(invoice);\n            } else if (daysPastDue <= 60) {\n              aging[''60days''] += outstanding;\n              agingInvoices[''60days''].push(invoice);\n            } else if (daysPastDue <= 90) {\n              aging[''90days''] += outstanding;\n              agingInvoices[''90days''].push(invoice);\n            } else {\n              aging.over90 += outstanding;\n              agingInvoices.over90.push(invoice);\n            }\n          }\n        }\n      });\n      \n      const ctx = agingChartRef.current.getContext(''2d'');\n      \n      if (agingChartInstance.current) {\n        agingChartInstance.current.destroy();\n      }\n      \n      agingChartInstance.current = new Chart(ctx, {\n        type: ''bar'',\n        data: {\n          labels: [''Current'', ''1-30 Days'', ''31-60 Days'', ''61-90 Days'', ''Over 90''],\n          datasets: [{\n            label: ''Outstanding Amount'',\n            data: Object.values(aging),\n            backgroundColor: [''#10B981'', ''#3B82F6'', ''#F59E0B'', ''#FB923C'', ''#EF4444'']\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          onClick: (event, activeElements) => {\n            if (activeElements.length > 0) {\n              const index = activeElements[0].index;\n              const keys = [''current'', ''30days'', ''60days'', ''90days'', ''over90''];\n              const labels = [''Current'', ''1-30 Days Overdue'', ''31-60 Days Overdue'', ''61-90 Days Overdue'', ''Over 90 Days Overdue''];\n              openDrillDown(''aging'', { label: labels[index], invoices: agingInvoices[keys[index]] });\n            }\n          },\n          plugins: {\n            legend: { display: false },\n            tooltip: {\n              callbacks: {\n                label: (context) => `$$' + '{(context.raw / 1000).toFixed(1)}K`\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                callback: (value) => `$$' + '{(value / 1000).toFixed(0)}K`\n              }\n            }\n          }\n        }\n      });\n    }\n    \n    return () => {\n      if (agingChartInstance.current) {\n        agingChartInstance.current.destroy();\n      }\n    };\n  }, [loading, invoices, payments]);\n\n  const CustomerBalances = () => {\n    const customerBalances = {};\n    \n    // Calculate paid amounts from payments\n    const paidByInvoice = {};\n    payments.forEach(payment => {\n      if (!paidByInvoice[payment.InvoiceID]) {\n        paidByInvoice[payment.InvoiceID] = 0;\n      }\n      paidByInvoice[payment.InvoiceID] += payment.Amount || 0;\n    });\n    \n    // Create account lookup map\n    const accountMap = {};\n    accounts.forEach(account => {\n      accountMap[account.ID] = account;\n    });\n    \n    invoices.forEach(invoice => {\n      if (invoice.Status !== ''Paid'' && invoice.Status !== ''Cancelled'') {\n        const customerId = invoice.AccountID || ''Unknown'';\n        if (!customerBalances[customerId]) {\n          const account = accountMap[customerId];\n          customerBalances[customerId] = {\n            id: customerId,\n            name: account ? account.AccountName : `Account #$' + '{customerId}`,\n            totalDue: 0,\n            overdueAmount: 0,\n            invoiceCount: 0,\n            invoices: [],\n            oldestDue: null\n          };\n        }\n        \n        const paidAmount = paidByInvoice[invoice.ID] || 0;\n        const outstanding = (invoice.TotalAmount || 0) - paidAmount;\n        \n        if (outstanding > 0) {\n          customerBalances[customerId].totalDue += outstanding;\n          customerBalances[customerId].invoiceCount++;\n          customerBalances[customerId].invoices.push({\n            ...invoice,\n            outstanding,\n            paidAmount\n          });\n          \n          const dueDate = new Date(invoice.DueDate);\n          if (dueDate < new Date()) {\n            customerBalances[customerId].overdueAmount += outstanding;\n          }\n          \n          if (!customerBalances[customerId].oldestDue || dueDate < customerBalances[customerId].oldestDue) {\n            customerBalances[customerId].oldestDue = dueDate;\n          }\n        }\n      }\n    });\n    \n    const topCustomers = Object.values(customerBalances)\n      .sort((a, b) => b.totalDue - a.totalDue)\n      .slice(0, 5);\n    \n    return (\n      <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''16px'' }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''16px'' }}>\n          <h3 style={{ margin: 0, fontSize: ''18px'' }}>Top Customer Balances</h3>\n        </div>\n        \n        <div style={{ display: ''flex'', flexDirection: ''column'', gap: ''12px'' }}>\n          {topCustomers.map((customer, index) => (\n            <div\n              key={customer.id}\n              style={{\n                padding: ''12px'',\n                backgroundColor: ''#F9FAFB'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                transition: ''all 0.2s'',\n                borderLeft: `4px solid $' + '{customer.overdueAmount > 0 ? ''#EF4444'' : ''#3B82F6''}`\n              }}\n              onClick={() => openDrillDown(''customer'', customer)}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.transform = ''translateX(4px)'';\n                e.currentTarget.style.boxShadow = ''0 2px 4px rgba(0,0,0,0.1)'';\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.transform = ''translateX(0)'';\n                e.currentTarget.style.boxShadow = ''none'';\n              }}\n            >\n              <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n                <div>\n                  <div style={{ fontWeight: ''bold'', fontSize: ''14px'' }}>\n                    {customer.name}\n                  </div>\n                  <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                    {customer.invoiceCount} invoice{customer.invoiceCount !== 1 ? ''s'' : ''''} outstanding\n                  </div>\n                </div>\n                <div style={{ textAlign: ''right'' }}>\n                  <div style={{ fontSize: ''18px'', fontWeight: ''bold'', color: customer.overdueAmount > 0 ? ''#EF4444'' : ''#111827'' }}>\n                    $' + '{(customer.totalDue / 1000).toFixed(1)}K\n                  </div>\n                  {customer.overdueAmount > 0 && (\n                    <div style={{ fontSize: ''11px'', color: ''#EF4444'' }}>\n                      $' + '{(customer.overdueAmount / 1000).toFixed(1)}K overdue\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const DrillDownPanel = () => {\n    if (!isPanelOpen || !selectedData) return null;\n    \n    const renderContent = () => {\n      switch (drillDownType) {\n        case ''status'':\n          const statusInvoices = invoices.filter(inv => {\n            if (selectedData === ''Overdue'') {\n              return inv.Status !== ''Paid'' && inv.Status !== ''Cancelled'' && new Date(inv.DueDate) < new Date();\n            }\n            if (selectedData === ''Pending'') {\n              return inv.Status === ''Sent'' || (inv.Status !== ''Paid'' && inv.Status !== ''Cancelled'' && new Date(inv.DueDate) >= new Date());\n            }\n            return inv.Status === selectedData;\n          });\n          \n          return (\n            <div>\n              <h3 style={{ margin: ''0 0 16px 0'' }}>{selectedData} Invoices</h3>\n              <div style={{ maxHeight: ''500px'', overflow: ''auto'' }}>\n                {statusInvoices.map(invoice => (\n                  <div key={invoice.ID} style={{ \n                    padding: ''12px'', \n                    marginBottom: ''8px'', \n                    backgroundColor: ''#F9FAFB'', \n                    borderRadius: ''6px'',\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div>\n                      <div style={{ fontWeight: ''bold'' }}>#{invoice.InvoiceNumber}</div>\n                      <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                        Due: {new Date(invoice.DueDate).toLocaleDateString()}\n                      </div>\n                    </div>\n                    <div style={{ display: ''flex'', gap: ''12px'', alignItems: ''center'' }}>\n                      <div style={{ fontWeight: ''bold'' }}>\n                        $' + '{((invoice.TotalAmount || 0) / 1000).toFixed(1)}K\n                      </div>\n                      <button\n                        onClick={() => callbacks.OpenEntityRecord(''Invoices'', [{ FieldName: ''ID'', Value: invoice.ID }])}\n                        style={{\n                          background: ''none'',\n                          border: ''none'',\n                          color: ''#3B82F6'',\n                          cursor: ''pointer'',\n                          fontSize: ''16px''\n                        }}\n                        title=\"Open Invoice\"\n                      >\n                        <i className=\"fa-solid fa-up-right-from-square\"></i>\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n          \n        case ''aging'':\n          return (\n            <div>\n              <h3 style={{ margin: ''0 0 16px 0'' }}>{selectedData.label}</h3>\n              <div style={{ maxHeight: ''500px'', overflow: ''auto'' }}>\n                {selectedData.invoices.map(invoice => (\n                  <div key={invoice.ID} style={{ \n                    padding: ''12px'', \n                    marginBottom: ''8px'', \n                    backgroundColor: ''#F9FAFB'', \n                    borderRadius: ''6px'',\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center''\n                  }}>\n                    <div>\n                      <div style={{ fontWeight: ''bold'' }}>#{invoice.InvoiceNumber}</div>\n                      <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                        Due: {new Date(invoice.DueDate).toLocaleDateString()}\n                        {new Date(invoice.DueDate) < new Date() && (\n                          <span style={{ color: ''#EF4444'', marginLeft: ''8px'' }}>\n                            ({Math.floor((new Date() - new Date(invoice.DueDate)) / (1000 * 60 * 60 * 24))} days overdue)\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    <div style={{ display: ''flex'', gap: ''12px'', alignItems: ''center'' }}>\n                      <div style={{ fontWeight: ''bold'' }}>\n                        $' + '{((invoice.TotalAmount || 0) / 1000).toFixed(1)}K\n                      </div>\n                      <button\n                        onClick={() => callbacks.OpenEntityRecord(''Invoices'', [{ FieldName: ''ID'', Value: invoice.ID }])}\n                        style={{\n                          background: ''none'',\n                          border: ''none'',\n                          color: ''#3B82F6'',\n                          cursor: ''pointer'',\n                          fontSize: ''16px''\n                        }}\n                        title=\"Open Invoice\"\n                      >\n                        <i className=\"fa-solid fa-up-right-from-square\"></i>\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n          \n        case ''customer'':\n          return (\n            <div>\n              <h3 style={{ margin: ''0 0 16px 0'' }}>{selectedData.name}</h3>\n              <div style={{ marginBottom: ''16px'', padding: ''12px'', backgroundColor: ''#F9FAFB'', borderRadius: ''6px'' }}>\n                <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''8px'' }}>\n                  <div>\n                    <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Total Outstanding</div>\n                    <div style={{ fontSize: ''20px'', fontWeight: ''bold'' }}>\n                      $' + '{(selectedData.totalDue / 1000).toFixed(1)}K\n                    </div>\n                  </div>\n                  <div>\n                    <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Overdue Amount</div>\n                    <div style={{ fontSize: ''20px'', fontWeight: ''bold'', color: ''#EF4444'' }}>\n                      $' + '{(selectedData.overdueAmount / 1000).toFixed(1)}K\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <h4 style={{ margin: ''16px 0 8px 0'', fontSize: ''14px'' }}>Outstanding Invoices</h4>\n              <div style={{ maxHeight: ''400px'', overflow: ''auto'' }}>\n                {selectedData.invoices.map(invoice => (\n                  <div key={invoice.ID} style={{ \n                    padding: ''12px'', \n                    marginBottom: ''8px'', \n                    backgroundColor: ''#F9FAFB'', \n                    borderRadius: ''6px'',\n                    borderLeft: `3px solid $' + '{new Date(invoice.DueDate) < new Date() ? ''#EF4444'' : ''#3B82F6''}`\n                  }}>\n                    <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n                      <div>\n                        <div style={{ fontWeight: ''bold'' }}>Invoice #{invoice.InvoiceNumber}</div>\n                        <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                          Due: {new Date(invoice.DueDate).toLocaleDateString()}\n                          {new Date(invoice.DueDate) < new Date() && (\n                            <span style={{ color: ''#EF4444'', marginLeft: ''8px'' }}>\n                              ({Math.floor((new Date() - new Date(invoice.DueDate)) / (1000 * 60 * 60 * 24))} days overdue)\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <div style={{ display: ''flex'', gap: ''12px'', alignItems: ''center'' }}>\n                        <div>\n                          <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>Outstanding</div>\n                          <div style={{ fontWeight: ''bold'' }}>\n                            $' + '{(invoice.outstanding / 1000).toFixed(1)}K\n                          </div>\n                        </div>\n                        <button\n                          onClick={() => callbacks.OpenEntityRecord(''Invoices'', [{ FieldName: ''ID'', Value: invoice.ID }])}\n                          style={{\n                            background: ''none'',\n                            border: ''none'',\n                            color: ''#3B82F6'',\n                            cursor: ''pointer'',\n                            fontSize: ''16px''\n                          }}\n                          title=\"Open Invoice\"\n                        >\n                          <i className=\"fa-solid fa-up-right-from-square\"></i>\n                        </button>\n                      </div>\n                    </div>\n                    {invoice.paidAmount > 0 && (\n                      <div style={{ marginTop: ''8px'', fontSize: ''11px'', color: ''#059669'' }}>\n                        Partial payment: $' + '{(invoice.paidAmount / 1000).toFixed(1)}K paid\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          );\n          \n        default:\n          return null;\n      }\n    };\n    \n    return (\n      <div\n        style={{\n          backgroundColor: ''white'',\n          borderRadius: ''8px'',\n          border: ''1px solid #E5E7EB'',\n          overflow: ''hidden'',\n          boxShadow: ''0 4px 6px rgba(0, 0, 0, 0.1)''\n        }}\n      >\n        <div style={{\n          padding: ''16px'',\n          borderBottom: ''1px solid #E5E7EB'',\n          background: ''linear-gradient(135deg, #3B82F6, #2563EB)'',\n          color: ''white'',\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''center''\n        }}>\n          <h3 style={{ margin: 0, fontSize: ''16px'' }}>\n            {drillDownType === ''status'' ? `$' + '{selectedData} Invoices` : \n             drillDownType === ''aging'' ? selectedData.label :\n             ''Customer Details''}\n          </h3>\n          <button\n            onClick={closeDrillDown}\n            style={{\n              background: ''rgba(255,255,255,0.2)'',\n              border: ''none'',\n              color: ''white'',\n              fontSize: ''20px'',\n              cursor: ''pointer'',\n              padding: ''4px 10px'',\n              borderRadius: ''4px'',\n              transition: ''background 0.2s'',\n              lineHeight: ''1''\n            }}\n            onMouseEnter={(e) => e.currentTarget.style.background = ''rgba(255,255,255,0.3)''}\n            onMouseLeave={(e) => e.currentTarget.style.background = ''rgba(255,255,255,0.2)''}\n          >\n            ×\n          </button>\n        </div>\n        \n        <div style={{ maxHeight: ''400px'', overflow: ''auto'', padding: ''16px'' }}>\n          {renderContent()}\n        </div>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading invoice data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#EF4444'' }}>Error: {error}</div>\n      </div>\n    );\n  }\n\n  const metrics = calculateMetrics();\n\n  return (\n    <div style={{ padding: ''20px'', backgroundColor: ''#F3F4F6'', minHeight: ''100%'' }}>\n      <style>{`\n        @media (max-width: 1024px) {\n          .invoice-charts {\n            grid-template-columns: 1fr !important;\n          }\n        }\n        @keyframes slideDown {\n          from {\n            opacity: 0;\n            max-height: 0;\n          }\n          to {\n            opacity: 1;\n            max-height: 800px;\n          }\n        }\n      `}</style>\n      \n      <div style={{ marginBottom: ''20px'', display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', flexWrap: ''wrap'', gap: ''12px'' }}>\n        <h2 style={{ margin: 0, fontSize: ''24px'', fontWeight: ''bold'' }}>Invoice Status Dashboard</h2>\n        <div style={{ display: ''flex'', gap: ''8px'', alignItems: ''center'' }}>\n          <select\n            value={timePeriod}\n            onChange={(e) => {\n              const newPeriod = e.target.value;\n              setTimePeriod(newPeriod);\n              if (newPeriod !== ''custom'') {\n                setStartDate(null);\n                setEndDate(null);\n                onSaveUserSettings({ \n                  ...savedUserSettings, \n                  timePeriod: newPeriod,\n                  startDate: null,\n                  endDate: null\n                });\n              } else {\n                onSaveUserSettings({ ...savedUserSettings, timePeriod: newPeriod });\n              }\n            }}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px'',\n              backgroundColor: ''white'',\n              cursor: ''pointer''\n            }}\n          >\n            <option value=\"month\">This Month</option>\n            <option value=\"lastMonth\">Last Month</option>\n            <option value=\"quarter\">This Quarter</option>\n            <option value=\"lastQuarter\">Last Quarter</option>\n            <option value=\"year\">This Year</option>\n            <option value=\"lastYear\">Last Year</option>\n            <option value=\"custom\">Custom Range</option>\n          </select>\n          \n          {timePeriod === ''custom'' && (\n            <>\n              <input\n                type=\"date\"\n                value={startDate || ''''}\n                onChange={(e) => {\n                  setStartDate(e.target.value);\n                  if (e.target.value && endDate) {\n                    onSaveUserSettings({ \n                      ...savedUserSettings, \n                      startDate: e.target.value,\n                      endDate,\n                      timePeriod: ''custom''\n                    });\n                  }\n                }}\n                style={{\n                  padding: ''6px 12px'',\n                  border: ''1px solid #D1D5DB'',\n                  borderRadius: ''6px'',\n                  backgroundColor: ''white''\n                }}\n              />\n              <span style={{ color: ''#6B7280'', fontSize: ''14px'' }}>to</span>\n              <input\n                type=\"date\"\n                value={endDate || ''''}\n                onChange={(e) => {\n                  setEndDate(e.target.value);\n                  if (startDate && e.target.value) {\n                    onSaveUserSettings({ \n                      ...savedUserSettings, \n                      startDate,\n                      endDate: e.target.value,\n                      timePeriod: ''custom''\n                    });\n                  }\n                }}\n                style={{\n                  padding: ''6px 12px'',\n                  border: ''1px solid #D1D5DB'',\n                  borderRadius: ''6px'',\n                  backgroundColor: ''white''\n                }}\n              />\n            </>\n          )}\n          \n          {/* AI Insights Button */}\n          <button\n            onClick={generateAIInsights}\n            disabled={loadingInsights || loading}\n            style={{\n              padding: ''6px 12px'',\n              backgroundColor: ''#3B82F6'',\n              color: ''white'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: loadingInsights || loading ? ''not-allowed'' : ''pointer'',\n              display: ''flex'',\n              alignItems: ''center'',\n              gap: ''8px'',\n              opacity: loadingInsights || loading ? 0.6 : 1\n            }}\n          >\n            <i className={`fa-solid fa-$' + '{loadingInsights ? ''spinner fa-spin'' : ''wand-magic-sparkles''}`}></i>\n            {loadingInsights ? ''Analyzing...'' : ''Get AI Insights''}\n          </button>\n        </div>\n      </div>\n      \n      {/* AI Insights Panel */}\n      <AIInsightsPanel\n        utilities={utilities}\n        styles={styles}\n        components={components}\n        callbacks={callbacks}\n        savedUserSettings={savedUserSettings?.aiInsights}\n        onSaveUserSettings={(settings) => onSaveUserSettings?.({\n          ...savedUserSettings,\n          aiInsights: settings\n        })}\n        insights={aiInsights}\n        loading={loadingInsights}\n        error={insightsError}\n        onGenerate={generateAIInsights}\n        title=\"Invoice Analytics Insights\"\n        icon=\"fa-wand-magic-sparkles\"\n        iconColor={styles?.colors?.primary || ''#8B5CF6''}\n        position=\"top\"\n        onClose={() => {\n          setAiInsights(null);\n          setInsightsError(null);\n        }}\n      />\n      \n      {/* Top Metrics Cards - Side by Side */}\n      <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(auto-fit, minmax(180px, 1fr))'', gap: ''16px'', marginBottom: ''20px'' }}>\n        <div \n          style={{ \n            padding: ''16px'', \n            backgroundColor: ''white'', \n            borderRadius: ''8px'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s''\n          }}\n          onClick={() => openDrillDown(''status'', ''Overdue'')}\n          onMouseEnter={(e) => e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)''}\n          onMouseLeave={(e) => e.currentTarget.style.boxShadow = ''none''}\n        >\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n            <div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Overdue</div>\n              <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#EF4444'' }}>\n                {metrics.overdue}\n              </div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                $' + '{(metrics.overdueAmount / 1000).toFixed(1)}K\n              </div>\n            </div>\n            <div style={{ fontSize: ''32px'', color: ''#FEE2E2'' }}>\n              <i className=\"fa-solid fa-exclamation-circle\"></i>\n            </div>\n          </div>\n        </div>\n        \n        <div \n          style={{ \n            padding: ''16px'', \n            backgroundColor: ''white'', \n            borderRadius: ''8px'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s''\n          }}\n          onClick={() => openDrillDown(''status'', ''Pending'')}\n          onMouseEnter={(e) => e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)''}\n          onMouseLeave={(e) => e.currentTarget.style.boxShadow = ''none''}\n        >\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n            <div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Pending</div>\n              <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#3B82F6'' }}>\n                {metrics.pending}\n              </div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                $' + '{(metrics.pendingAmount / 1000).toFixed(1)}K\n              </div>\n            </div>\n            <div style={{ fontSize: ''32px'', color: ''#DBEAFE'' }}>\n              <i className=\"fa-solid fa-clock\"></i>\n            </div>\n          </div>\n        </div>\n        \n        <div \n          style={{ \n            padding: ''16px'', \n            backgroundColor: ''white'', \n            borderRadius: ''8px'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s''\n          }}\n          onClick={() => openDrillDown(''status'', ''Partial'')}\n          onMouseEnter={(e) => e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)''}\n          onMouseLeave={(e) => e.currentTarget.style.boxShadow = ''none''}\n        >\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n            <div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Partial</div>\n              <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#F59E0B'' }}>\n                {metrics.partial}\n              </div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                $' + '{(metrics.partialAmount / 1000).toFixed(1)}K\n              </div>\n            </div>\n            <div style={{ fontSize: ''32px'', color: ''#FEF3C7'' }}>\n              <i className=\"fa-solid fa-chart-pie\"></i>\n            </div>\n          </div>\n        </div>\n        \n        <div \n          style={{ \n            padding: ''16px'', \n            backgroundColor: ''white'', \n            borderRadius: ''8px'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s''\n          }}\n          onClick={() => openDrillDown(''status'', ''Paid'')}\n          onMouseEnter={(e) => e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)''}\n          onMouseLeave={(e) => e.currentTarget.style.boxShadow = ''none''}\n        >\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n            <div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Paid</div>\n              <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#10B981'' }}>\n                {metrics.paid}\n              </div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                $' + '{(metrics.paidAmount / 1000).toFixed(1)}K\n              </div>\n            </div>\n            <div style={{ fontSize: ''32px'', color: ''#D1FAE5'' }}>\n              <i className=\"fa-solid fa-check-circle\"></i>\n            </div>\n          </div>\n        </div>\n        \n        <div style={{ padding: ''16px'', backgroundColor: ''white'', borderRadius: ''8px'' }}>\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n            <div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Total</div>\n              <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#6B7280'' }}>\n                {metrics.total}\n              </div>\n              <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                $' + '{(metrics.totalAmount / 1000).toFixed(1)}K\n              </div>\n            </div>\n            <div style={{ fontSize: ''32px'', color: ''#E5E7EB'' }}>\n              <i className=\"fa-solid fa-file-invoice-dollar\"></i>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Charts Row - Side by Side, wider overall */}\n      <div className=\"invoice-charts\" style={{ display: ''grid'', gridTemplateColumns: ''3fr 2fr'', gap: ''20px'', marginBottom: ''20px'' }}>\n        <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''16px'' }}>\n          <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''18px'' }}>Status Distribution</h3>\n          <div style={{ height: ''280px'' }}>\n            <canvas ref={statusChartRef} />\n          </div>\n        </div>\n        \n        <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''16px'' }}>\n          <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''18px'' }}>Payment Due Timeline</h3>\n          <div style={{ height: ''280px'' }}>\n            <canvas ref={agingChartRef} />\n          </div>\n        </div>\n      </div>\n      \n      {/* Customer Balances */}\n      <CustomerBalances />\n      \n      {/* Drill-down Panel - below all content */}\n      {isPanelOpen && (\n        <div style={{ \n          marginTop: ''20px'',\n          animation: ''slideDown 0.3s ease'',\n          overflow: ''hidden''\n        }}>\n          <DrillDownPanel />\n        </div>\n      )}\n      \n    </div>\n  );\n}","functionalRequirements":"## Invoice Status Dashboard\n\n### Purpose\nTrack invoice statuses, payment timelines, and accounts receivable aging with actionable insights.\n\n### Core Features\n- **Status Overview**: Pie chart of invoice statuses\n- **Aging Analysis**: Outstanding invoice aging buckets\n- **Payment Timeline**: Calendar view of due dates\n- **Customer Balance**: Top debtors and credit risks\n- **Collection Metrics**: DSO and collection efficiency\n- **Interactive Charts**: Using Plotly for rich visuals\n- **Slide-out Actions**: Quick actions for overdue invoices\n- **Card/List Views**: Multiple display options\n\n### Visualizations\n- Donut chart for status distribution\n- Waterfall chart for cash flow\n- Heatmap calendar for due dates\n- Bar charts for aging analysis","dataRequirements":{"mode":"views","entities":[{"name":"Invoices","displayFields":["InvoiceNumber","AccountID","InvoiceDate","DueDate","TotalAmount","Status","PaidAmount"],"filterFields":["Status","DueDate","AccountID"],"sortFields":["DueDate","TotalAmount"]},{"name":"Payments","displayFields":["InvoiceID","PaymentDate","Amount","PaymentMethod"],"filterFields":["PaymentDate","InvoiceID"],"sortFields":["PaymentDate"]}]},"technicalDesign":"## Implementation\n\n### Components\n- Main: InvoiceStatusDashboard\n- Sub-components:\n  - StatusOverview: Pie chart summary\n  - AgingChart: Aging buckets visualization\n  - PaymentCalendar: Due date heatmap\n  - CustomerBalances: Top debtor list\n  - ActionPanel: Quick actions slide-out\n\n### Calculations\n- Days Sales Outstanding (DSO)\n- Aging buckets (0-30, 31-60, 61-90, 90+)\n- Collection rate trends\n- Average payment time","properties":[],"events":[{"name":"OpenEntityRecord","description":"Navigate to invoice details"}],"dependencies":[{"name":"AIInsightsPanel","location":"registry","namespace":"Generic/UI/AI","version":"^1.0.0"}],"libraries":[{"name":"Plotly","version":"^2.27.1","globalVariable":"Plotly"},{"name":"accounting","version":"^0.4.1","globalVariable":"accounting"},{"name":"Chart.js","version":"^4.4.1","globalVariable":"Chart"}]}'
SET
  @FunctionalRequirements_158b21e6 = N'## Invoice Status Dashboard

### Purpose
Track invoice statuses, payment timelines, and accounts receivable aging with actionable insights.

### Core Features
- **Status Overview**: Pie chart of invoice statuses
- **Aging Analysis**: Outstanding invoice aging buckets
- **Payment Timeline**: Calendar view of due dates
- **Customer Balance**: Top debtors and credit risks
- **Collection Metrics**: DSO and collection efficiency
- **Interactive Charts**: Using Plotly for rich visuals
- **Slide-out Actions**: Quick actions for overdue invoices
- **Card/List Views**: Multiple display options

### Visualizations
- Donut chart for status distribution
- Waterfall chart for cash flow
- Heatmap calendar for due dates
- Bar charts for aging analysis'
SET
  @TechnicalDesign_158b21e6 = N'## Implementation

### Components
- Main: InvoiceStatusDashboard
- Sub-components:
  - StatusOverview: Pie chart summary
  - AgingChart: Aging buckets visualization
  - PaymentCalendar: Due date heatmap
  - CustomerBalances: Top debtor list
  - ActionPanel: Quick actions slide-out

### Calculations
- Days Sales Outstanding (DSO)
- Aging buckets (0-30, 31-60, 61-90, 90+)
- Collection rate trends
- Average payment time'
SET
  @FunctionalRequirementsVector_158b21e6 = N'[-0.019946107640862465,0.04318227246403694,-0.0225867610424757,-0.02668132446706295,-0.0030089523643255234,0.03217006474733353,-0.008945021778345108,0.07607051730155945,0.0009059287258423865,0.04259097948670387,-0.005824485328048468,0.03389734402298927,0.028085270896553993,0.08070732653141022,-0.04866202175617218,-0.005500125233083963,-0.02958369068801403,-0.010864543728530407,0.07437273114919662,0.0338437594473362,-0.023771870881319046,0.027197573333978653,-0.029179781675338745,0.0010503765661269426,-0.03449541702866554,-0.021030809730291367,0.00531107047572732,0.01592930220067501,0.014999347738921642,-0.0932641327381134,0.02343069203197956,0.01941964402794838,-0.038421276956796646,-0.015377755276858807,0.0000023097306893760106,-0.0034005106426775455,0.02191069908440113,0.013587577268481255,-0.03846834599971771,0.07953961193561554,-0.016450051218271255,-0.11205577850341797,0.02231490984559059,0.018176767975091934,0.014327320270240307,0.023265168070793152,-0.03433172404766083,0.010053694248199463,0.023359030485153198,-0.018662359565496445,-0.022281603887677193,0.005865016486495733,-0.05587160959839821,-0.010491599328815937,-0.019718777388334274,-0.04247492551803589,-0.0034400871954858303,0.028185054659843445,0.013350991532206535,-0.142677903175354,0.001483781961724162,0.014246087521314621,0.02060456946492195,-0.0378546305000782,0.05605647712945938,0.03466980904340744,0.07312881946563721,0.0023841012734919786,-0.03842427581548691,-0.047632262110710144,0.04305942356586456,0.013781843706965446,-0.02847549319267273,-0.045588135719299316,0.007910155691206455,-0.05584602802991867,-0.05337664857506752,-0.020301861688494682,-0.003909078426659107,-0.00011186418851139024,-0.07005742192268372,0.06121136620640755,-0.005386835895478725,0.012557205744087696,0.01443752832710743,-0.06463970243930817,0.00003272144385846332,-0.003433953272178769,-0.014150378294289112,0.002860785461962223,0.01314516831189394,0.0170403104275465,0.04287531226873398,0.024716686457395554,-0.009440871886909008,-0.024688398465514183,0.04276081547141075,-0.07470959424972534,0.06945735216140747,0.0004105769912712276,-0.0041418662294745445,-0.010363457724452019,-0.02131710946559906,0.030797267332673073,0.038234587758779526,0.02724384516477585,-0.02359830215573311,-0.09342660754919052,-0.028897296637296677,0.01917109824717045,0.014336529187858105,0.0006824548472650349,-0.005141065921634436,-0.010926793329417706,0.020004676654934883,-0.01582164876163006,-0.013656942173838615,-0.0418265201151371,-0.027072913944721222,-0.025347333401441574,0.1120917871594429,0.06299097090959549,0.009373150765895844,0.027580074965953827,-0.01757615990936756,0.016564706340432167,-0.05059957131743431,-0.038805656135082245,-0.03236619755625725,0.01721547171473503,0.029660798609256744,-0.03294435143470764,0.029473572969436646,-0.020429247990250587,0.0217510424554348,-0.046800289303064346,0.016758890822529793,0.018115652725100517,0.015278611332178116,0.006903893779963255,0.04676201939582825,-0.008034632541239262,-0.027218004688620567,0.003453320125117898,-0.003703180467709899,0.007517390884459019,-0.032465316355228424,0.08753326535224915,-0.0050093745812773705,0.03387179225683212,0.0037755274679511786,-0.02924862876534462,-0.03171427547931671,0.029239563271403313,0.009756610728800297,-0.02780204638838768,0.04781104996800423,-0.03521915152668953,0.03656844049692154,-0.062088754028081894,-0.006432436406612396,-0.03878184035420418,0.06010206788778305,0.003574917558580637,-0.020452655851840973,0.026301676407456398,-0.030400142073631287,0.025794683024287224,-0.06762376427650452,-0.05268241837620735,-0.04221055656671524,0.008718229830265045,0.018205134198069572,0.025670591741800308,0.004981679376214743,-0.06265737116336823,0.011335084214806557,-0.07705908268690109,-0.050922904163599014,-0.014995826408267021,0.022523319348692894,-0.14431074261665344,0.01617971435189247,0.06359650194644928,0.06317982077598572,-0.009421754628419876,-0.0830201581120491,-0.02421419695019722,-0.03327103704214096,-0.033661603927612305,-0.04452292248606682,0.0008656768477521837,-0.06937824934720993,0.012845039367675781,0.013022308237850666,0.04476999491453171,-0.05104024335741997,-0.08856696635484695,0.013014580123126507,-0.009709466248750687,-0.011381310410797596,-0.025262262672185898,0.012632894329726696,0.07142572104930878,0.04124152660369873,0.004651390016078949,0.005701618734747171,-0.01949799247086048,-0.0339403860270977,0.004414300434291363,-0.06664984673261642,0.005359492730349302,-0.014177937991917133,-0.01392258983105421,-0.009797342121601105,0.04500975459814072,0.023047147318720818,-0.004574212245643139,0.016865979880094528,0.0027789894957095385,-0.006375330965965986,-0.038034215569496155,-0.046585772186517715,0.013146501034498215,0.09142445772886276,0.018464962020516396,0.03945799916982651,0.016603074967861176,0.04005211591720581,-0.013428367674350739,-0.025279773399233818,0.01200566254556179,0.03415001556277275,0.004823721945285797,0.05356018990278244,0.06651299446821213,0.025490248575806618,0.13198623061180115,-0.022796284407377243,0.008105781860649586,0.01831529662013054,-0.07529652863740921,0.011040753684937954,0.03372315689921379,-0.03194030746817589,-0.03590545058250427,-0.014644711278378963,-0.0033193056005984545,0.020363161340355873,0.014472239650785923,0.027534522116184235,0.01706584170460701,0.03496808186173439,-0.026989394798874855,-0.04234239459037781,0.000977722113020718,-0.009166385047137737,-0.011708551086485386,0.038510896265506744,0.030809268355369568,-0.0010528980055823922,-0.04405573382973671,-0.023455802351236343,-0.02072378434240818,0.011682468466460705,-0.012955646961927414,0.038351044058799744,-0.0047699324786663055,-0.0307649914175272,0.029605895280838013,-0.0377015545964241,0.00856316089630127,-0.03479250520467758,0.0010434133000671864,-0.026117682456970215,0.04559168964624405,-0.045870862901210785,0.042330507189035416,-0.017042603343725204,-0.0008620039443485439,0.0002620193699840456,-0.01244962215423584,0.027126779779791832,0.04482926055788994,0.007066358812153339,-0.007267226465046406,0.06320658326148987,-0.09194530546665192,-0.018182922154664993,-0.09262534230947495,0.008203385397791862,-0.038900502026081085,0.011339617893099785,-0.022950343787670135,-0.03090028651058674,0.036935288459062576,0.017634127289056778,0.01830344647169113,-0.0169226061552763,0.05300472304224968,-0.040915634483098984,0.0004260170098859817,0.04579593613743782,0.0035017237532883883,0.020472634583711624,0.015552864409983158,0.04137017950415611,0.009241998195648193,-0.01582931913435459,-0.03087807260453701,0.027348900213837624,0.022447118535637856,-0.01486807782202959,-0.03485551103949547,0.033258501440286636,-0.006001342553645372,0.0911998525261879,0.07295624166727066,-0.014660707674920559,0.04687732458114624,0.018228260800242424,-0.0358109176158905,-0.03084646910429001,0.049877364188432693,-0.035783801227808,0.016517074778676033,-0.05882663652300835,-0.03979886695742607,0.017503393813967705,-0.004010204691439867,-0.004862130619585514,0.004231683444231749,-0.034505296498537064,0.016049658879637718,-0.002001020358875394,0.019954893738031387,0.004265548195689917,0.01825098507106304,-0.0002076731761917472,-0.02508082427084446,0.06415078788995743,-0.00013661343837156892,-0.017639199271798134,0.060191016644239426,-0.05058600381016731,0.03339836373925209,-0.03861234709620476,-0.006313448306173086,-0.08515608310699463,0.029123343527317047,-0.03143727034330368,0.03393036499619484,-0.01938597299158573,0.0056740702129900455,0.01956876367330551,-0.03412684053182602,-0.05425615981221199,-0.024165527895092964,-0.01659211702644825,-0.07991961389780045,0.014358083717525005,-0.03609701618552208,0.000679122400470078,-0.0037127756513655186,0.06576090306043625,0.011923194862902164,0.0004085703403688967,-0.010832617059350014,0.03429599478840828,0.008569231256842613,-0.0735238566994667,0.0026460611261427402,-0.031136732548475266,-0.00039529940113425255,0.045859500765800476,-0.034677088260650635,0.044311460107564926,0.011160068213939667,-0.015384136699140072,0.03734494745731354,0.0041941008530557156,0.011563708074390888,0.06726472824811935,0.00772344833239913,0.027202626690268517,0.009058532305061817,0.01039843913167715,-0.021780958399176598,0.005815128330141306,0.0681580975651741,-0.007896115072071552,0.09596999734640121,-0.006620949599891901,-0.001609133672900498,-0.008788519538939,-0.001586050959303975,-0.008299116976559162,0.016151906922459602,-0.009045181795954704,-0.011659566313028336,0.008994048461318016,-0.034449540078639984,0.061495520174503326,-0.030813291668891907,-0.020130973309278488,-0.0813259705901146,0.08690070360898972,0.04318928346037865,-0.0385836660861969,-0.013121618889272213,-0.0451231375336647,-0.005354924593120813,-0.011487467214465141,-0.056071843951940536,0.044680505990982056,0.04842432588338852,-0.008291885256767273,-0.027949407696723938,0.05009671673178673,0.0051315221935510635,-0.008891270495951176,0.029553566128015518,-0.014034981839358807,-0.026193082332611084,0.0076331826858222485,-0.058492355048656464,-0.015501425601541996,-0.04952014982700348,-0.013981140218675137,0.0016793236136436462,-0.02636091783642769,-0.01505329366773367,-0.0021455090027302504,0.032906852662563324,-0.04239572957158089,0.07841850072145462,0.014401943422853947,-0.0019274995429441333,-0.06379575282335281,-0.02983464114367962,-0.013200394809246063,0.010563859716057777,0.02966167964041233,-0.008182727731764317,-0.014920314773917198,-0.015187677927315235,0.0022639106027781963,-0.017851572483778,-0.04780936613678932,0.008254540152847767,0.032318368554115295,-0.10208509862422943,-0.0205064807087183,-0.02231149561703205,0.0001350167440250516,-0.03490235656499863,0.023806292563676834,-0.048683006316423416,0.0352909155189991,-0.01749088242650032,0.034492649137973785,0.00792434811592102,-0.02539106458425522,0.022932467982172966,0.05361054837703705,0.02470044605433941,0.026397651061415672,0.0013636526418849826,-0.04867148399353027,-0.03868921101093292,0.05375262722373009,-0.009655680507421494,-0.020156005397439003,-0.03177238255739212,-0.0074506946839392185,0.02924894355237484,0.02788405492901802,0.030473584309220314,0.009805671870708466,-0.022006643936038017,0.016335101798176765,0.017585599794983864,-0.001887856051325798,-0.08230513334274292,-0.011586707085371017,-0.005184271838515997,-0.009342742152512074,0.004489912651479244,-0.020151620730757713,-0.012630968354642391,0.02503615990281105,-0.0016171755269169807,-0.03234046697616577,0.132929727435112,0.02731119655072689,0.006547755096107721,0.007102727424353361,0.01599935255944729,-0.028108440339565277,0.016599344089627266,-0.017901577055454254,-0.002167442813515663,0.02621963806450367,-0.023598289117217064,-0.02305806614458561,-0.0012590901460498571,0.04769880324602127,0.007368620950728655,-0.034579601138830185,0.0250073429197073,-0.03377373889088631,-0.03230508044362068,0.02413136698305607,0.001535795396193862,0.02942475490272045,-0.004909907933324575,0.0035866512916982174,-0.025937601923942566,0.033051036298274994,-0.05670199543237686,0.0017207837663590908,0.0017718877643346786,0.04196123033761978,0.00937176588922739,0.018985670059919357,-0.022687077522277832,0.03116123378276825,-0.024362288415431976,-0.012649571523070335,0.07557643949985504,-0.05760948359966278,0.023281317204236984,0.0002912968338932842,0.02263345941901207,-0.007545214146375656,-0.011288084089756012,0.01313150953501463,-0.03848336637020111,0.03276895359158516,0.016130700707435608,-0.009438439272344112,0.0030280824285000563,0.058638330549001694,-0.028446977958083153,-0.024332500994205475,-0.02974066138267517,0.015505014918744564,-0.06149832159280777,-0.025943223387002945,-0.0006925372872501612,0.0090236971154809,-0.07630099356174469,-0.060793228447437286,0.0033974850084632635,-0.04793465882539749,-6.74362448093927e-33,-0.005900319665670395,-0.08444280177354813,-0.03653412684798241,0.02962990291416645,0.040788434445858,0.03365704417228699,0.010939436964690685,-0.049204498529434204,0.004787178710103035,0.027630655094981194,-0.03315499424934387,0.0262091513723135,0.024676920846104622,-0.006589474156498909,0.025773003697395325,0.030210869386792183,0.03925011679530144,-0.00024445552844554186,0.02896730788052082,0.008868053555488586,-0.0577666275203228,0.05044567957520485,0.0430758073925972,-0.07430048286914825,-0.014562642201781273,0.014090402983129025,-0.014724665321409702,0.04319889843463898,-0.022497795522212982,0.018439555540680885,0.02579113468527794,-0.03896268084645271,-0.013896669261157513,0.05685563012957573,0.02467985823750496,-0.00984104909002781,-0.012858700938522816,0.029736090451478958,-0.002181403571739793,0.03123571164906025,0.11155230551958084,-0.006061645224690437,0.0038683798629790545,0.023035535588860512,-0.029757147654891014,-0.02693662978708744,0.0373377688229084,-0.0033172701951116323,0.013433524407446384,-0.019591549411416054,-0.03483594208955765,0.015348139218986034,-0.019866466522216797,0.004846770316362381,0.013946160674095154,0.058266833424568176,0.019041238352656364,-0.005082410294562578,-0.10473727434873581,-0.03934161737561226,-0.029120618477463722,-0.03306252881884575,-0.0037349851336330175,0.04293060675263405,0.006351188290864229,-0.003237952711060643,-0.017702244222164154,0.0268489308655262,0.030987637117505074,-0.024503225460648537,0.0022221447434276342,0.03671276196837425,0.05252083018422127,-0.08436755836009979,0.01151755079627037,0.0026717940345406532,-0.035144343972206116,0.01583803817629814,0.05136669799685478,0.06477800011634827,0.02775425836443901,0.007235818076878786,0.006067269016057253,0.023878494277596474,0.03296438604593277,-0.06344539672136307,-0.008152125403285027,0.013576324097812176,-0.009138384833931923,-0.005992285441607237,0.04668630659580231,-0.01498718187212944,-0.03511503338813782,0.04837418720126152,-0.08570744097232819,0.004206934943795204,0.04655187577009201,0.04142090305685997,0.026380864903330803,0.01156429573893547,0.0010704610031098127,0.0463322252035141,-0.036377448588609695,0.03364846110343933,-0.00883878581225872,-0.022802293300628662,0.10454422980546951,-0.0519629567861557,-0.018729861825704575,0.02311091311275959,0.016605990007519722,0.02698596566915512,-0.013527748174965382,0.06739453226327896,-0.025766711682081223,0.018540747463703156,-0.005275840405374765,0.02344372682273388,-0.008796434849500656,-0.03987607732415199,0.025965113192796707,-0.01278376579284668,-0.007418899796903133,0.00696013867855072,0.020627936348319054,-0.013017525896430016,-0.03929828852415085,-0.03129054978489876,0.029763445258140564,0.01512585487216711,-0.0031633139587938786,0.056091565638780594,3.114221840405662e-7,0.012802313081920147,0.04168960452079773,-0.0123856570571661,0.026795372366905212,0.016402550041675568,0.004234321415424347,-0.046170424669981,-0.047293517738580704,-0.003954844083636999,0.04739319160580635,0.04029329493641853,-0.008986498229205608,0.03559796139597893,0.04143485054373741,-0.029668020084500313,-0.10284784436225891,-0.055033404380083084,-0.03920257091522217,-0.045730266720056534,0.03413194790482521,-0.025258246809244156,-0.012686628848314285,0.04758979380130768,0.013118620961904526,0.021551065146923065,0.028903746977448463,-0.025700591504573822,-0.04654261842370033,0.04120868071913719,-0.030801039189100266,-0.005063188727945089,-0.00557394465431571,0.0325026735663414,-0.0048439353704452515,-0.016727473586797714,-0.027560196816921234,-0.002475961809977889,-0.014035094529390335,-0.011137119494378567,0.009934674948453903,0.0011796323815360665,0.026529045775532722,0.0007278883131220937,-0.005015506874769926,-0.008886607363820076,-0.03803645074367523,-0.04219875857234001,0.01933177188038826,-0.062238533049821854,0.03580893948674202,0.020004848018288612,0.005502556450664997,-0.036045871675014496,-0.006356901954859495,0.03680035471916199,-0.010905155912041664,-0.021735385060310364,0.05562274530529976,0.0353563092648983,0.026769062504172325,-0.008180364035069942,0.017321377992630005,-0.027188749983906746,0.04265682399272919,-0.021773094311356544,-0.02239958383142948,0.006600724533200264,3.274651066136198e-34,0.009608283638954163,-0.01706290803849697,0.04646455869078636,0.061560165137052536,0.024573104456067085,-0.025835730135440826,0.01648208685219288,0.025117792189121246,-0.009333944879472256,-0.003988675773143768,-0.025111569091677666]'
SET
  @TechnicalDesignVector_158b21e6 = N'[0.0032012041192501783,0.03581016883254051,-0.021867256611585617,-0.013550881296396255,-0.010822701267898083,0.04548807069659233,0.025058120489120483,0.05450258031487465,0.00846091192215681,0.037054549902677536,-0.019485129043459892,0.0016486860113218427,0.03818769380450249,0.05437810346484184,-0.0326642245054245,-0.010278630070388317,-0.04166591912508011,0.030870547518134117,0.02804696559906006,0.0013967739650979638,0.027939140796661377,0.010517116636037827,-0.005963600240647793,-0.014262797310948372,-0.022925402969121933,-0.048421792685985565,-0.010186596773564816,-0.013778243213891983,0.020808016881346703,-0.10390143096446991,0.043645285069942474,0.023664575070142746,-0.024112606421113014,-0.014811127446591854,0.0000021148714495211607,-0.02190844528377056,0.021534843370318413,0.022816190496087074,-0.037473469972610474,0.07132086902856827,-0.012640586122870445,-0.082737036049366,0.0317046195268631,-0.002412931527942419,-0.006850512232631445,0.030729034915566444,-0.058033525943756104,0.06360258907079697,0.046173345297575,-0.015168881975114346,-0.004094108939170837,0.009556407108902931,-0.03861694410443306,-0.0010703133884817362,0.035871393978595734,-0.06115814298391342,0.0027122797910124063,0.05381876602768898,0.039798859506845474,-0.11360843479633331,-0.039724722504615784,0.0037007785867899656,0.03522977605462074,-0.045829225331544876,0.04959498718380928,0.01957128569483757,0.06706834584474564,-0.005585088394582272,-0.001966799609363079,-0.01724327728152275,0.11115968972444534,0.00006361660780385137,-0.018026500940322876,-0.006709880195558071,-0.0181278008967638,-0.049452416598796844,-0.04937082156538963,-0.046635087579488754,-0.0037364885210990906,-0.007300710771232843,-0.08680906146764755,0.031554851680994034,-0.03639940172433853,0.0121972830966115,0.023781314492225647,-0.032456982880830765,-0.02778122015297413,-0.034367162734270096,-0.021270286291837692,0.0019255619263276458,0.03289521485567093,-0.013466380536556244,0.035305801779031754,0.03460293635725975,-0.037210892885923386,-0.0160559993237257,0.037221916019916534,-0.049315109848976135,0.05758003145456314,-0.02597161754965782,0.00047439217451028526,0.016454078257083893,0.037337347865104675,0.0378776453435421,0.027611656114459038,0.0789135992527008,0.0027799243107438087,-0.10294955223798752,-0.03360016271471977,0.0299698356539011,0.01282167062163353,-0.015666473656892776,-0.009613185189664364,0.05793333053588867,0.022257952019572258,-0.0031516575254499912,-0.03651113063097,-0.04654236510396004,-0.015808647498488426,-0.03174685686826706,0.12911123037338257,0.01801983267068863,0.022528108209371567,0.03101322241127491,0.01995028555393219,-0.006904673296958208,-0.06884456425905228,-0.049359071999788284,-0.039620161056518555,0.013044057413935661,-0.0029402116779237986,-0.0283211562782526,-0.016741730272769928,-0.021469809114933014,0.003807500470429659,-0.009639610536396503,0.016878588125109673,0.03674614056944847,-0.014592104591429234,-0.0024290401488542557,0.011784179136157036,-0.01889050379395485,-0.04878641664981842,-0.007923184894025326,0.004496839828789234,0.00038655867683701217,-0.009077392518520355,0.06836358457803726,0.009310627356171608,0.028013724833726883,0.00002015904101426713,-0.017185142263770103,-0.004183373413980007,0.026316875591874123,-0.03239689767360687,-0.004901013802736998,0.04632437229156494,-0.012999149970710278,0.08336573094129562,-0.04502283036708832,-0.025031577795743942,-0.0003889357903972268,0.055340081453323364,-0.004023340065032244,-0.022842688485980034,0.02207578718662262,-0.03958641737699509,0.003747816663235426,-0.07601577043533325,-0.05985758453607559,-0.04933907464146614,-0.01655178889632225,-0.01273063849657774,0.04759583994746208,-0.013389027677476406,-0.06495420634746552,-0.008308564312756062,-0.06451235711574554,-0.1072775349020958,-0.034852154552936554,0.051802463829517365,-0.1388559341430664,0.0007931416039355099,0.04797196015715599,0.08819730579853058,-0.019794823601841927,-0.09863907098770142,0.025114329531788826,-0.024403544142842293,-0.011577441357076168,-0.033003177493810654,0.012208685278892517,-0.08413825929164886,0.009770628996193409,0.0035132626071572304,0.0666344091296196,-0.012437454424798489,-0.01743275485932827,0.029043152928352356,0.010163704864680767,-0.001411734032444656,-0.00520505104213953,0.04168108105659485,0.056316159665584564,0.03595336899161339,-0.013159767724573612,-0.02530706487596035,0.005472238641232252,-0.014077355153858662,-0.005369264166802168,-0.03160964325070381,0.015229123644530773,-0.034118007868528366,-0.014799915254116058,-0.018549634143710136,0.03428908437490463,0.01897050067782402,0.010753395035862923,-0.011609372682869434,-0.05387106165289879,-0.01388284470885992,-0.05759904906153679,-0.0000012713687738141743,0.008379587903618813,0.06040021404623985,0.05414281785488129,0.04911123588681221,-0.02910226210951805,0.0361323244869709,-0.00846827682107687,-0.036479488015174866,-0.004413967952132225,0.009897040203213692,0.009528846479952335,0.02097516506910324,0.06758610159158707,0.014253981411457062,0.047674503177404404,0.00996647123247385,0.0006152931600809097,0.012457338161766529,-0.05641936883330345,0.0017675893614068627,0.035917386412620544,-0.012063881382346153,-0.020004797726869583,-0.06242166459560394,0.020925365388393402,0.005129010416567326,-0.007141689769923687,0.00578213669359684,0.00801293645054102,0.02544265054166317,-0.03528857231140137,-0.03630165383219719,0.02923436649143696,-0.0151968440040946,-0.025457652285695076,0.07251818478107452,0.03742725029587746,-0.003400621470063925,-0.03244480490684509,-0.03999032825231552,-0.02912147156894207,0.021152222529053688,-0.020151199772953987,0.03538811206817627,0.0258262250572443,-0.022532183676958084,0.03417249023914337,-0.01129031553864479,0.011390036903321743,-0.021084444597363472,-0.00041891742148436606,-0.01885424740612507,0.0562349371612072,-0.03297486901283264,0.01437744777649641,-0.008384785614907742,-0.007866526953876019,-0.047192033380270004,-0.023126043379306793,0.023046819493174553,0.029002150520682335,-0.022631250321865082,0.005663582123816013,0.05198046192526817,-0.06628218293190002,0.018459370359778404,-0.0728253647685051,-0.018145473673939705,-0.029384853318333626,0.013348933309316635,-0.0396607480943203,-0.02255304530262947,0.02050120383501053,0.017819682136178017,0.006841740105301142,-0.02076624520123005,0.05628206208348274,-0.05256801098585129,-0.01127748191356659,0.024473533034324646,-0.010918770916759968,-0.002867857227101922,0.04391074925661087,0.031735945492982864,-0.005817688535898924,-0.004330913536250591,0.026987170800566673,0.0311649851500988,0.014602779410779476,-0.00110615196172148,-0.0008542540017515421,0.028566483408212662,-0.01530432142317295,0.07395368069410324,0.05030468478798866,-0.030606528744101524,0.016944216564297676,0.008928959257900715,-0.01852327398955822,-0.008552122861146927,0.039088208228349686,-0.04424310848116875,0.02074776403605938,-0.021571369841694832,-0.00814649648964405,-0.04044784978032112,0.01651608571410179,0.008163225837051868,-0.03587780520319939,-0.03431152552366257,0.03966899216175079,0.014444281347095966,-0.009391284547746181,0.0004159771488048136,0.01822383888065815,0.02303318679332733,-0.019477689638733864,0.04486263170838356,-0.00444375304505229,-0.01782180741429329,0.06836861371994019,0.0068819052539765835,0.026686200872063637,-0.05381334200501442,0.0070304363034665585,-0.1077907383441925,0.010707340203225613,0.021015020087361336,0.04609116166830063,-0.04590420797467232,-0.0048810518346726894,-0.011398052796721458,-0.02588309720158577,-0.02668112702667713,-0.025567013770341873,-0.0000610582937952131,-0.07115937769412994,0.055063921958208084,0.0007131879683583975,0.054782308638095856,0.03319607675075531,0.032875120639801025,0.025542493909597397,-0.007606720086187124,0.011425387114286423,0.01808212697505951,-0.013997037895023823,-0.04815151169896126,0.03142619505524635,-0.008733048103749752,0.018434759229421616,0.024690119549632072,0.002838771790266037,0.04427262395620346,0.0035474393516778946,0.00006307556031970307,0.0334978885948658,0.014315864071249962,-0.027898235246539116,0.08227823674678802,0.034466832876205444,0.04858844727277756,0.003995939623564482,-0.007800092454999685,-0.03938838094472885,-0.012593083083629608,0.025271611288189888,0.004690298344939947,0.05083100125193596,-0.008472218178212643,0.010859216563403606,-0.02116725780069828,-0.0003525106585584581,-0.01599174551665783,0.029033740982413292,0.04963625594973564,0.0039830757305026054,-0.001386092510074377,-0.04665273800492287,0.04093870148062706,0.017527839168906212,0.01884373463690281,-0.094625324010849,0.015871385112404823,0.04842239245772362,-0.0066156573593616486,0.027525197714567184,-0.029676619917154312,-0.038129836320877075,-0.021728016436100006,-0.040952280163764954,0.014069820754230022,0.03038652241230011,-0.019275346770882607,-0.03070778213441372,0.05895642191171646,-0.020425044000148773,-0.016171276569366455,0.015968477353453636,-0.007071424275636673,-0.021099194884300232,0.042175356298685074,-0.04476768523454666,0.0011592620285227895,-0.07069821655750275,-0.031047629192471504,0.008915896527469158,-0.011106726713478565,-0.02299145609140396,-0.0050923824310302734,0.014297685585916042,-0.07792959362268448,0.07522568851709366,-0.015336298383772373,-0.01818878948688507,-0.00013418070739135146,-0.0028019931633025408,-0.000878848135471344,0.011725220829248428,0.04532638192176819,0.024538470432162285,-0.04372067004442215,-0.013956351205706596,-0.03213153034448624,0.030660049989819527,-0.05364404246211052,0.0008121977443806827,0.04430265352129936,-0.05728820711374283,-0.017615551128983498,-0.014911364763975143,-0.03594605624675751,-0.06361101567745209,-0.018945973366498947,-0.01876457780599594,-0.02080036699771881,0.026893172413110733,0.047833606600761414,0.023220937699079514,-0.024198615923523903,-0.0015962618635967374,0.054872024804353714,-0.0164993517100811,0.0694766491651535,0.019866205751895905,-0.0280812568962574,-0.03836870938539505,0.047925304621458054,0.008773425593972206,-0.019900446757674217,-0.014504934661090374,0.03803982585668564,0.022213628515601158,0.0339469350874424,-0.024790650233626366,0.05335650220513344,-0.019882027059793472,0.034468553960323334,0.014620554633438587,0.004653016105294228,-0.10722088068723679,0.0014920382527634501,0.008176818490028381,0.0065108491107821465,-0.015544784255325794,-0.014200497418642044,-0.020137734711170197,0.02565501071512699,0.005219044629484415,0.009184661321341991,0.12420231848955154,0.03739058971405029,0.016475368291139603,0.03267093002796173,0.021659020334482193,-0.017465272918343544,-0.02159188687801361,-0.0226927287876606,-0.010211238637566566,0.0423758402466774,-0.036769263446331024,-0.009044592268764973,-0.014484111219644547,0.05064442753791809,0.030487140640616417,-0.03610733151435852,0.012615513056516647,-0.029386011883616447,-0.03142606467008591,-0.028356151655316353,0.02232162468135357,0.0022188888397067785,0.022702470421791077,-0.06953179836273193,-0.008556229062378407,0.019259462133049965,-0.03348866477608681,0.00567781412974,0.006074844393879175,0.02784663625061512,-0.02351531758904457,0.04875796288251877,-0.02648569643497467,0.037905577570199966,0.008432604372501373,-0.026306701824069023,0.06505511701107025,-0.09320705384016037,0.015566808171570301,0.004454678390175104,0.0031266945879906416,-0.02075362205505371,0.0006907331990078092,0.012299543246626854,-0.061626289039850235,0.03272325545549393,-0.027486488223075867,-0.04188986495137215,0.024250004440546036,0.03138303756713867,-0.010616174899041653,-0.0023343402426689863,-0.03139866143465042,0.013283411972224712,-0.07917960733175278,-0.008852020837366581,0.014851118437945843,0.01768832840025425,-0.08387799561023712,-0.04316088929772377,0.013976290822029114,-0.013599514029920101,-6.686237581416096e-33,-0.004071349743753672,-0.06053817272186279,-0.03269747272133827,0.0547417476773262,-0.006759128998965025,0.012454699724912643,0.017243584617972374,-0.04308963939547539,-0.00024074973771348596,-0.001111139776185155,0.007602530065923929,-0.016288239508867264,0.01672503910958767,-0.004763939883559942,0.024410022422671318,0.017233138903975487,0.032495345920324326,-0.00698912562802434,-0.007558404467999935,-0.003682447597384453,-0.04653861001133919,0.038109272718429565,0.036327846348285675,-0.04554776847362518,-0.009717694483697414,0.03392312675714493,-0.0012809284962713718,0.03972185030579567,-0.044594019651412964,0.03800150007009506,0.013744723051786423,-0.04001690074801445,-0.017036613076925278,0.04202856123447418,0.012699002400040627,-0.011349013075232506,-0.05113225057721138,-0.022021614015102386,0.020957812666893005,0.0458206944167614,0.1026691421866417,0.0022340717259794474,-0.011358454823493958,0.013913015834987164,-0.028057167306542397,-0.060415372252464294,0.005823759827762842,0.0035153524950146675,0.027421310544013977,-0.024095866829156876,-0.03515254706144333,0.009782209992408752,-0.025539234280586243,-0.009356889873743057,0.009104124270379543,0.07719910889863968,0.02903444692492485,0.048841483891010284,-0.08218314498662949,-0.025043267756700516,-0.01091407984495163,-0.03748852387070656,0.00915310438722372,0.04959017038345337,0.05647744983434677,-0.017985297366976738,0.02427157387137413,0.0331573411822319,-0.023866916075348854,-0.05494477227330208,0.008445839397609234,-0.023918678984045982,0.06048225238919258,-0.08538483828306198,0.057823680341243744,0.04536564275622368,-0.015001426450908184,-0.020731985569000244,0.037710290402173996,0.1015249639749527,0.017368216067552567,0.018859630450606346,0.0008288098033517599,0.0009660333162173629,0.02638057805597782,-0.05966635048389435,-0.0046205525286495686,0.0007456574239768088,-0.015220828354358673,-0.00802245270460844,0.03982536494731903,0.0025032497942447662,-0.0525699146091938,0.04955573379993439,-0.07561083137989044,0.021372992545366287,0.07252641022205353,0.03711246699094772,0.01477988250553608,-0.006396319251507521,-0.0243932344019413,0.0416259802877903,-0.03960664942860603,0.027631627395749092,-0.012522627599537373,0.013127641752362251,0.10618340969085693,-0.02572055160999298,-0.019558947533369064,0.005330587271600962,0.0021083131432533264,0.013463877141475677,-0.016891153529286385,0.08572479337453842,-0.02381061390042305,0.006246575620025396,-0.009829103015363216,-0.022237716242671013,-0.007765485439449549,-0.028830699622631073,0.035451680421829224,0.0530407540500164,-0.0009427573531866074,0.003511082613840699,0.03122846409678459,-0.024710191413760185,-0.05193275213241577,-0.05026797205209732,0.0005037204828113317,-0.027757100760936737,0.0017633805982768536,0.03628489002585411,3.0371325010492e-7,-0.026912271976470947,0.04377273470163345,-0.018096406012773514,0.05081853270530701,0.013348017819225788,-0.04198845103383064,-0.0740145817399025,-0.04533775523304939,0.01522242370992899,0.01976502686738968,0.04138132557272911,-0.0103677436709404,0.029093163087964058,0.03022979199886322,-0.018988611176609993,-0.06627855449914932,-0.030317584052681923,-0.08556128293275833,-0.02982524409890175,0.03592441603541374,-0.009129760786890984,-0.001547055086120963,0.06325114518404007,0.019643742591142654,0.0024984257761389017,0.05268114060163498,-0.018232719972729683,-0.05140228942036629,0.05478058010339737,-0.023392265662550926,-0.018412796780467033,-0.002195935696363449,0.026381298899650574,0.027102554216980934,0.003493413096293807,0.0004884351510554552,0.006649650167673826,-0.021441228687763214,-0.0105042839422822,0.01932033710181713,0.038441382348537445,0.03401043638586998,-0.01815488561987877,0.019141782075166702,-0.0049935923889279366,-0.026141252368688583,-0.045215949416160583,0.0011310066329315305,-0.029942167922854424,0.01813492551445961,-0.0056961532682180405,0.008086073212325573,-0.01618771068751812,-0.03661775961518288,0.028090251609683037,-0.010641075670719147,-0.01020465325564146,0.06429233402013779,0.0024078930728137493,0.05008448287844658,-0.038314491510391235,0.010444965213537216,0.020237714052200317,0.04405660182237625,-0.01726437918841839,-0.038100529462099075,-0.011831606738269329,3.4394383845546933e-34,0.03128596395254135,-0.040195006877183914,0.03981243818998337,0.06116781383752823,0.026215415447950363,-0.01811651885509491,0.017139429226517677,0.01917525939643383,-0.005747740622609854,-0.047248609364032745,-0.04284491762518883]'
SET
  @HasCustomProps_158b21e6 = 0
SET
  @HasCustomEvents_158b21e6 = 1
SET
  @RequiresData_158b21e6 = 1
SET
  @DependencyCount_158b21e6 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_158b21e6 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_158b21e6 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_158b21e6 = 0
SET
  @ID_158b21e6 = '7FCF004A-87E5-47FA-AF21-C7FCC1F4D319'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_158b21e6,
  @Name = @Name_158b21e6,
  @Version = @Version_158b21e6,
  @VersionSequence = @VersionSequence_158b21e6,
  @Title = @Title_158b21e6,
  @Description = @Description_158b21e6,
  @Type = @Type_158b21e6,
  @Status = @Status_158b21e6,
  @DeveloperName = @DeveloperName_158b21e6,
  @DeveloperEmail = @DeveloperEmail_158b21e6,
  @DeveloperOrganization = @DeveloperOrganization_158b21e6,
  @SourceRegistryID = @SourceRegistryID_158b21e6,
  @ReplicatedAt = @ReplicatedAt_158b21e6,
  @LastSyncedAt = @LastSyncedAt_158b21e6,
  @Specification = @Specification_158b21e6,
  @FunctionalRequirements = @FunctionalRequirements_158b21e6,
  @TechnicalDesign = @TechnicalDesign_158b21e6,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_158b21e6,
  @TechnicalDesignVector = @TechnicalDesignVector_158b21e6,
  @HasCustomProps = @HasCustomProps_158b21e6,
  @HasCustomEvents = @HasCustomEvents_158b21e6,
  @RequiresData = @RequiresData_158b21e6,
  @DependencyCount = @DependencyCount_158b21e6,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_158b21e6,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_158b21e6,
  @HasRequiredCustomProps = @HasRequiredCustomProps_158b21e6,
  @ID = @ID_158b21e6;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_bf33268c NVARCHAR(MAX),
@Name_bf33268c NVARCHAR(500),
@Version_bf33268c NVARCHAR(50),
@VersionSequence_bf33268c INT,
@Title_bf33268c NVARCHAR(1000),
@Description_bf33268c NVARCHAR(MAX),
@Type_bf33268c NVARCHAR(255),
@Status_bf33268c NVARCHAR(50),
@DeveloperName_bf33268c NVARCHAR(255),
@DeveloperEmail_bf33268c NVARCHAR(255),
@DeveloperOrganization_bf33268c NVARCHAR(255),
@SourceRegistryID_bf33268c UNIQUEIDENTIFIER,
@ReplicatedAt_bf33268c DATETIMEOFFSET,
@LastSyncedAt_bf33268c DATETIMEOFFSET,
@Specification_bf33268c NVARCHAR(MAX),
@FunctionalRequirements_bf33268c NVARCHAR(MAX),
@TechnicalDesign_bf33268c NVARCHAR(MAX),
@FunctionalRequirementsVector_bf33268c NVARCHAR(MAX),
@TechnicalDesignVector_bf33268c NVARCHAR(MAX),
@HasCustomProps_bf33268c BIT,
@HasCustomEvents_bf33268c BIT,
@RequiresData_bf33268c BIT,
@DependencyCount_bf33268c INT,
@TechnicalDesignVectorEmbeddingModelID_bf33268c NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_bf33268c NVARCHAR(MAX),
@HasRequiredCustomProps_bf33268c BIT,
@ID_bf33268c UNIQUEIDENTIFIER
SET
  @Namespace_bf33268c = N'CRM/Customer'
SET
  @Name_bf33268c = N'Customer360View'
SET
  @Version_bf33268c = N'1.0.0'
SET
  @VersionSequence_bf33268c = 1
SET
  @Title_bf33268c = N'Customer 360 View'
SET
  @Description_bf33268c = N'Comprehensive customer profile showing all interactions, transactions, and insights in a unified tabbed interface'
SET
  @Type_bf33268c = N'Other'
SET
  @Status_bf33268c = N'Published'
SET
  @Specification_bf33268c = N'{"name":"Customer360View","description":"Comprehensive customer profile showing all interactions, transactions, and insights","category":"CRM","type":"dashboard","location":"embedded","code":"function Customer360View({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [account, setAccount] = useState(null);\n  const [contacts, setContacts] = useState([]);\n  const [deals, setDeals] = useState([]);\n  const [activities, setActivities] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(savedUserSettings?.activeTab || ''overview'');\n  \n  // Load sub-components from registry\n  const TabNavigation = components[''Customer360TabNavigation''];\n  const Overview = components[''Customer360Overview''];\n  const Timeline = components[''Customer360Timeline''];\n  \n  // For demo, we''ll use the first account\n  const accountId = savedUserSettings?.accountId || null;\n\n  useEffect(() => {\n    loadCustomerData();\n  }, [accountId]);\n\n  const loadCustomerData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // First get an account if no ID specified\n      let targetAccountId = accountId;\n      if (!targetAccountId) {\n        const accountsResult = await utilities.rv.RunView({\n          EntityName: ''Accounts'',\n          MaxRows: 1,\n          OrderBy: ''AnnualRevenue DESC''\n        });\n        \n        if (accountsResult.Success && accountsResult.Results?.length > 0) {\n          targetAccountId = accountsResult.Results[0].ID;\n          setAccount(accountsResult.Results[0]);\n        }\n      }\n      \n      if (!targetAccountId) {\n        setError(''No account found'');\n        setLoading(false);\n        return;\n      }\n      \n      // Load all related data in parallel\n      const [contactsResult, dealsResult, activitiesResult] = await Promise.all([\n        utilities.rv.RunView({\n          EntityName: ''Contacts'',\n          ExtraFilter: `AccountID=''$' + '{targetAccountId}''`,\n          OrderBy: ''LastName ASC''\n        }),\n        utilities.rv.RunView({\n          EntityName: ''Deals'',\n          ExtraFilter: `AccountID=''$' + '{targetAccountId}''`,\n          OrderBy: ''CloseDate DESC''\n        }),\n        utilities.rv.RunView({\n          EntityName: ''Activities'',\n          ExtraFilter: `AccountID=''$' + '{targetAccountId}''`,\n          OrderBy: ''CreatedAt DESC'',\n          MaxRows: 100\n        })\n      ]);\n\n      if (contactsResult.Success) {\n        setContacts(contactsResult.Results || []);\n      }\n      if (dealsResult.Success) {\n        setDeals(dealsResult.Results || []);\n      }\n      if (activitiesResult.Success) {\n        setActivities(activitiesResult.Results || []);\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateEngagementScore = () => {\n    let score = 50; // Base score\n    \n    // Recent activities boost\n    const recentActivities = activities.filter(a => {\n      const activityDate = new Date(a.CreatedAt);\n      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      return activityDate > thirtyDaysAgo;\n    });\n    score += Math.min(recentActivities.length * 2, 20);\n    \n    // Active deals boost\n    const activeDeals = deals.filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage));\n    score += Math.min(activeDeals.length * 5, 20);\n    \n    // Revenue tier boost\n    if (account?.AnnualRevenue) {\n      if (account.AnnualRevenue > 1000000) score += 10;\n      else if (account.AnnualRevenue > 500000) score += 5;\n    }\n    \n    return Math.min(Math.round(score), 100);\n  };\n\n  const handleTabChange = (tabId) => {\n    setActiveTab(tabId);\n    onSaveUserSettings({ ...savedUserSettings, activeTab: tabId });\n  };\n\n  const handleActivityClick = (activity) => {\n    // Could open a detail panel or navigate to the activity\n    console.log(''Activity clicked:'', activity);\n  };\n\n  const formatCurrency = (value) => {\n    if (!value) return ''$0'';\n    if (value >= 1000000) return `$$' + '{(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$$' + '{(value / 1000).toFixed(0)}K`;\n    return `$$' + '{value.toFixed(0)}`;\n  };\n\n  // Simple implementations for tabs not yet componentized\n  const ContactsTab = () => (\n    <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''20px'' }}>\n      <h3 style={{ marginTop: 0, marginBottom: ''20px'' }}>Contacts ({contacts.length})</h3>\n      <div style={{ display: ''grid'', gap: ''12px'' }}>\n        {contacts.map(contact => (\n          <div key={contact.ID} style={{\n            padding: ''16px'',\n            border: ''1px solid #E5E7EB'',\n            borderRadius: ''6px'',\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            alignItems: ''center''\n          }}>\n            <div>\n              <div style={{ fontWeight: ''bold'', marginBottom: ''4px'' }}>\n                {contact.FirstName} {contact.LastName}\n              </div>\n              <div style={{ fontSize: ''14px'', color: ''#6B7280'' }}>{contact.Email}</div>\n              <div style={{ fontSize: ''14px'', color: ''#6B7280'' }}>{contact.Phone}</div>\n            </div>\n            <button\n              onClick={() => callbacks.OpenEntityRecord(''Contacts'', [{FieldName: ''ID'', Value: contact.ID}])}\n              style={{\n                padding: ''8px 16px'',\n                backgroundColor: ''#F3F4F6'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              View Details\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const DealsTab = () => {\n    const getStageColor = (stage) => {\n      const colors = {\n        ''Lead'': ''#9CA3AF'',\n        ''Qualified'': ''#3B82F6'',\n        ''Proposal'': ''#8B5CF6'',\n        ''Negotiation'': ''#F59E0B'',\n        ''Closed Won'': ''#10B981'',\n        ''Closed Lost'': ''#EF4444''\n      };\n      return colors[stage] || ''#6B7280'';\n    };\n\n    return (\n      <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''20px'' }}>\n        <h3 style={{ marginTop: 0, marginBottom: ''20px'' }}>Deals ({deals.length})</h3>\n        <div style={{ display: ''grid'', gap: ''12px'' }}>\n          {deals.map(deal => (\n            <div key={deal.ID} style={{\n              padding: ''16px'',\n              border: ''1px solid #E5E7EB'',\n              borderRadius: ''6px''\n            }}>\n              <div style={{ display: ''flex'', justifyContent: ''space-between'', marginBottom: ''12px'' }}>\n                <div style={{ fontWeight: ''bold'' }}>{deal.DealName}</div>\n                <div style={{ \n                  padding: ''4px 12px'',\n                  backgroundColor: getStageColor(deal.Stage) + ''20'',\n                  color: getStageColor(deal.Stage),\n                  borderRadius: ''12px'',\n                  fontSize: ''12px'',\n                  fontWeight: ''500''\n                }}>\n                  {deal.Stage}\n                </div>\n              </div>\n              <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''8px'', fontSize: ''14px'', color: ''#6B7280'' }}>\n                <div>Amount: {formatCurrency(deal.Amount)}</div>\n                <div>Close Date: {new Date(deal.CloseDate).toLocaleDateString()}</div>\n                <div>Probability: {deal.Probability}%</div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const InsightsTab = () => {\n    const avgDealSize = deals.length > 0 \n      ? deals.reduce((sum, d) => sum + (d.Amount || 0), 0) / deals.length\n      : 0;\n    \n    const winRate = deals.length > 0\n      ? (deals.filter(d => d.Stage === ''Closed Won'').length / \n         deals.filter(d => [''Closed Won'', ''Closed Lost''].includes(d.Stage)).length * 100) || 0\n      : 0;\n\n    return (\n      <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''20px'' }}>\n        <h3 style={{ marginTop: 0, marginBottom: ''20px'' }}>Customer Insights</h3>\n        <div style={{ display: ''grid'', gap: ''20px'' }}>\n          <div>\n            <h4 style={{ color: ''#4F46E5'', marginBottom: ''12px'' }}>Key Metrics</h4>\n            <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'', gap: ''16px'' }}>\n              <div>\n                <div style={{ fontSize: ''14px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Average Deal Size</div>\n                <div style={{ fontSize: ''24px'', fontWeight: ''bold'' }}>{formatCurrency(avgDealSize)}</div>\n              </div>\n              <div>\n                <div style={{ fontSize: ''14px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Win Rate</div>\n                <div style={{ fontSize: ''24px'', fontWeight: ''bold'' }}>{winRate.toFixed(0)}%</div>\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h4 style={{ color: ''#4F46E5'', marginBottom: ''12px'' }}>Recommendations</h4>\n            <ul style={{ marginLeft: ''20px'', lineHeight: ''1.8'' }}>\n              {calculateEngagementScore() < 50 && \n                <li>Engagement is low - consider scheduling a check-in call</li>\n              }\n              {deals.filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage)).length > 0 &&\n                <li>Active opportunities present - maintain regular contact</li>\n              }\n              {activities.length < 5 &&\n                <li>Limited recent activity - increase touchpoints</li>\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading customer data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#EF4444'' }}>Error: {error}</div>\n      </div>\n    );\n  }\n\n  if (!account) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>No customer data available</div>\n      </div>\n    );\n  }\n\n  const engagementScore = calculateEngagementScore();\n\n  return (\n    <div style={{ padding: ''24px'', backgroundColor: ''#F9FAFB'', minHeight: ''100vh'' }}>\n      {/* Customer Header */}\n      <div style={{ \n        backgroundColor: ''white'', \n        borderRadius: ''8px'', \n        padding: ''24px'',\n        marginBottom: ''24px'',\n        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n      }}>\n        <h1 style={{ margin: ''0 0 8px 0'', fontSize: ''28px'', fontWeight: ''bold'' }}>\n          {account.AccountName}\n        </h1>\n        <div style={{ display: ''flex'', gap: ''24px'', color: ''#6B7280'', fontSize: ''14px'' }}>\n          <span>Industry: {account.Industry || ''Not specified''}</span>\n          <span>Annual Revenue: {formatCurrency(account.AnnualRevenue)}</span>\n          <span>Created: {new Date(account.CreatedAt).toLocaleDateString()}</span>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      {TabNavigation && (\n        <TabNavigation \n          activeTab={activeTab}\n          onTabChange={handleTabChange}\n        />\n      )}\n\n      {/* Tab Content */}\n      <div>\n        {activeTab === ''overview'' && Overview && (\n          <Overview \n            account={account}\n            contacts={contacts}\n            deals={deals}\n            engagementScore={engagementScore}\n          />\n        )}\n        {activeTab === ''timeline'' && Timeline && (\n          <Timeline \n            activities={activities}\n            onActivityClick={handleActivityClick}\n          />\n        )}\n        {activeTab === ''contacts'' && <ContactsTab />}\n        {activeTab === ''deals'' && <DealsTab />}\n        {activeTab === ''insights'' && <InsightsTab />}\n      </div>\n    </div>\n  );\n}","functionalRequirements":"- Display comprehensive customer profile with key metrics\n- Show interaction timeline chronologically\n- Display contacts and deals associated with account\n- Calculate and show engagement score\n- Provide tabbed interface for different views\n- Enable drill-down into related entities\n- Show customer insights and recommendations","dataRequirements":{"mode":"views","entities":[{"name":"Accounts","displayFields":["AccountName","Industry","AnnualRevenue","CreatedAt"],"filterFields":["ID"]},{"name":"Contacts","displayFields":["FirstName","LastName","Email","Phone","AccountID"],"filterFields":["AccountID"]},{"name":"Deals","displayFields":["DealName","Stage","Amount","CloseDate","AccountID"],"filterFields":["AccountID"]},{"name":"Activities","displayFields":["Subject","Type","CreatedAt","AccountID"],"filterFields":["AccountID"]}]},"technicalDesign":"Main orchestrator component that loads customer data and manages sub-components. Uses parallel data loading for performance. Calculates engagement score based on activities and deals. Implements tab-based navigation with state persistence.","properties":[{"name":"utilities","type":"object","description":"MemberJunction utilities for data access"},{"name":"styles","type":"object","description":"Style utilities and theme configuration"},{"name":"components","type":"object","description":"Registry of available child components"},{"name":"callbacks","type":"object","description":"Event callbacks including OpenEntityRecord"},{"name":"savedUserSettings","type":"object","description":"Persisted user preferences"},{"name":"onSaveUserSettings","type":"function","description":"Callback to persist user settings"}],"events":[],"dependencies":[{"name":"Customer360TabNavigation","location":"embedded","code":"function Customer360TabNavigation({ activeTab, onTabChange }) {\n  const tabs = [\n    { id: ''overview'', label: ''Overview'', icon: ''📊'' },\n    { id: ''timeline'', label: ''Timeline'', icon: ''📅'' },\n    { id: ''contacts'', label: ''Contacts'', icon: ''👥'' },\n    { id: ''deals'', label: ''Deals'', icon: ''💼'' },\n    { id: ''insights'', label: ''Insights'', icon: ''💡'' }\n  ];\n\n  return (\n    <div style={{\n      borderBottom: ''1px solid #E5E7EB'',\n      marginBottom: ''24px'',\n      display: ''flex'',\n      gap: ''8px''\n    }}>\n      {tabs.map(tab => (\n        <button\n          key={tab.id}\n          onClick={() => onTabChange(tab.id)}\n          style={{\n            padding: ''12px 24px'',\n            border: ''none'',\n            backgroundColor: activeTab === tab.id ? ''white'' : ''transparent'',\n            color: activeTab === tab.id ? ''#4F46E5'' : ''#6B7280'',\n            cursor: ''pointer'',\n            borderBottom: activeTab === tab.id ? ''2px solid #4F46E5'' : ''2px solid transparent'',\n            fontSize: ''14px'',\n            display: ''flex'',\n            alignItems: ''center'',\n            gap: ''8px'',\n            fontWeight: activeTab === tab.id ? ''bold'' : ''normal'',\n            transition: ''all 0.2s''\n          }}\n        >\n          <span>{tab.icon}</span>\n          <span>{tab.label}</span>\n        </button>\n      ))}\n    </div>\n  );\n}","description":"Tab navigation for Customer 360 View","category":"Navigation","type":"navigation","dataRequirements":{"mode":"views","entities":[{"name":"Accounts","displayFields":["AccountName","Industry","AnnualRevenue","CreatedAt"],"filterFields":["ID"]},{"name":"Contacts","displayFields":["FirstName","LastName","Email","Phone","AccountID"],"filterFields":["AccountID"]},{"name":"Deals","displayFields":["DealName","Stage","Amount","CloseDate","AccountID"],"filterFields":["AccountID"]},{"name":"Activities","displayFields":["Subject","Type","CreatedAt","AccountID"],"filterFields":["AccountID"]}]},"properties":[{"name":"activeTab","type":"string","required":true,"description":"Currently active tab ID"},{"name":"onTabChange","type":"function","required":true,"description":"Callback when tab is changed"}],"events":[{"name":"onTabSelect","description":"Fired when a tab is selected","parameters":[{"name":"tabId","type":"string","description":"ID of the selected tab"}]}],"usageExample":"```javascript\n<Customer360TabNavigation\n  activeTab={activeTab}\n  onTabChange={(tabId) => setActiveTab(tabId)}\n/>\n```","functionalRequirements":"- Display tabs for Overview, Timeline, Contacts, Deals, and Insights\n- Highlight active tab with color and underline\n- Support click to switch tabs\n- Show hover effects on tabs","technicalDesign":"Renders horizontal tab navigation with active state styling. Uses flexbox layout with hover and active states."},{"name":"Customer360Overview","location":"embedded","code":"function Customer360Overview({ account, contacts, deals, engagementScore }) {\n  // Ensure arrays are defined\n  const safeDeals = deals || [];\n  const safeContacts = contacts || [];\n  const safeEngagementScore = engagementScore || 0;\n  \n  const formatCurrency = (value) => {\n    if (!value) return ''$0'';\n    if (value >= 1000000) return `$$' + '{(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$$' + '{(value / 1000).toFixed(0)}K`;\n    return `$$' + '{value.toFixed(0)}`;\n  };\n\n  const getEngagementColor = (score) => {\n    if (score >= 70) return ''#10B981'';\n    if (score >= 40) return ''#F59E0B'';\n    return ''#EF4444'';\n  };\n\n  const totalRevenue = safeDeals\n    .filter(d => d.Stage === ''Closed Won'')\n    .reduce((sum, d) => sum + (d.Amount || 0), 0);\n  \n  const activeDeals = safeDeals.filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage));\n\n  return (\n    <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(auto-fit, minmax(250px, 1fr))'', gap: ''20px'' }}>\n      <div style={{\n        padding: ''20px'',\n        backgroundColor: ''white'',\n        borderRadius: ''8px'',\n        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n      }}>\n        <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''14px'', color: ''#6B7280'' }}>Engagement Score</h3>\n        <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: getEngagementColor(safeEngagementScore) }}>\n          {safeEngagementScore}%\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n          {safeEngagementScore >= 70 ? ''Highly Engaged'' : safeEngagementScore >= 40 ? ''Moderately Engaged'' : ''Low Engagement''}\n        </div>\n      </div>\n\n      <div style={{\n        padding: ''20px'',\n        backgroundColor: ''white'',\n        borderRadius: ''8px'',\n        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n      }}>\n        <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''14px'', color: ''#6B7280'' }}>Lifetime Value</h3>\n        <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {formatCurrency(totalRevenue)}\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n          {safeDeals.filter(d => d.Stage === ''Closed Won'').length} closed deals\n        </div>\n      </div>\n\n      <div style={{\n        padding: ''20px'',\n        backgroundColor: ''white'',\n        borderRadius: ''8px'',\n        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n      }}>\n        <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''14px'', color: ''#6B7280'' }}>Active Opportunities</h3>\n        <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: ''#4F46E5'' }}>\n          {activeDeals.length}\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n          Worth {formatCurrency(activeDeals.reduce((sum, d) => sum + (d.Amount || 0), 0))}\n        </div>\n      </div>\n\n      <div style={{\n        padding: ''20px'',\n        backgroundColor: ''white'',\n        borderRadius: ''8px'',\n        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n      }}>\n        <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''14px'', color: ''#6B7280'' }}>Contacts</h3>\n        <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {safeContacts.length}\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n          Key relationships\n        </div>\n      </div>\n    </div>\n  );\n}","description":"Overview tab showing customer summary and key metrics","category":"Customer","type":"overview","dataRequirements":{"mode":"views","entities":[{"name":"Accounts","displayFields":["AccountName","Industry","AnnualRevenue","CreatedAt"],"filterFields":["ID"]},{"name":"Contacts","displayFields":["FirstName","LastName","Email","Phone","AccountID"],"filterFields":["AccountID"]},{"name":"Deals","displayFields":["DealName","Stage","Amount","CloseDate","AccountID"],"filterFields":["AccountID"]},{"name":"Activities","displayFields":["Subject","Type","CreatedAt","AccountID"],"filterFields":["AccountID"]}]},"properties":[{"name":"account","type":"object","required":true,"description":"Account entity object"},{"name":"contacts","type":"array","required":true,"description":"Array of contact objects"},{"name":"deals","type":"array","required":true,"description":"Array of deal objects"},{"name":"engagementScore","type":"number","required":true,"description":"Calculated engagement score (0-100)"}],"usageExample":"```javascript\n<Customer360Overview\n  account={account}\n  contacts={contacts}\n  deals={deals}\n  engagementScore={engagementScore}\n/>\n```","functionalRequirements":"- Display customer key information\n- Show engagement score with color coding\n- Display total revenue and active deals\n- Show number of contacts\n- Calculate and display customer lifetime value\n- Use color-coded metrics based on values","technicalDesign":"Renders metric cards in a grid layout. Calculates lifetime value from deals. Color codes engagement score (green/yellow/red). Uses formatCurrency helper for monetary values."},{"name":"Customer360Timeline","location":"embedded","code":"function Customer360Timeline({ activities, onActivityClick }) {\n  const getActivityIcon = (type) => {\n    const icons = {\n      ''Call'': ''📞'',\n      ''Email'': ''✉️'',\n      ''Meeting'': ''🤝'',\n      ''Task'': ''✅'',\n      ''Note'': ''📝''\n    };\n    return icons[type] || ''📌'';\n  };\n\n  const getActivityColor = (type) => {\n    const colors = {\n      ''Call'': ''#3B82F6'',\n      ''Email'': ''#8B5CF6'',\n      ''Meeting'': ''#10B981'',\n      ''Task'': ''#F59E0B'',\n      ''Note'': ''#6B7280''\n    };\n    return colors[type] || ''#9CA3AF'';\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '''';\n    const date = new Date(dateString);\n    return date.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'', year: ''numeric'' });\n  };\n\n  if (!activities || activities.length === 0) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'', color: ''#9CA3AF'' }}>\n        No activities found for this customer\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ position: ''relative'', paddingLeft: ''40px'' }}>\n      {/* Timeline line */}\n      <div style={{\n        position: ''absolute'',\n        left: ''20px'',\n        top: ''0'',\n        bottom: ''0'',\n        width: ''2px'',\n        backgroundColor: ''#E5E7EB''\n      }} />\n\n      {activities.map((activity, index) => (\n        <div\n          key={activity.ID || index}\n          onClick={() => onActivityClick && onActivityClick(activity)}\n          style={{\n            position: ''relative'',\n            marginBottom: ''24px'',\n            cursor: onActivityClick ? ''pointer'' : ''default''\n          }}\n        >\n          {/* Timeline dot */}\n          <div style={{\n            position: ''absolute'',\n            left: ''-26px'',\n            top: ''8px'',\n            width: ''12px'',\n            height: ''12px'',\n            borderRadius: ''50%'',\n            backgroundColor: getActivityColor(activity.Type),\n            border: ''2px solid white'',\n            boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n          }} />\n\n          {/* Activity card */}\n          <div style={{\n            padding: ''16px'',\n            backgroundColor: ''white'',\n            borderRadius: ''8px'',\n            boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)'',\n            transition: ''transform 0.2s, box-shadow 0.2s'',\n            '':hover'': {\n              transform: ''translateX(4px)'',\n              boxShadow: ''0 4px 6px rgba(0, 0, 0, 0.1)''\n            }\n          }}\n          onMouseEnter={(e) => {\n            if (onActivityClick) {\n              e.currentTarget.style.transform = ''translateX(4px)'';\n              e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0, 0, 0, 0.1)'';\n            }\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateX(0)'';\n            e.currentTarget.style.boxShadow = ''0 1px 3px rgba(0, 0, 0, 0.1)'';\n          }}>\n            <div style={{ display: ''flex'', alignItems: ''center'', gap: ''12px'', marginBottom: ''8px'' }}>\n              <span style={{ fontSize: ''20px'' }}>{getActivityIcon(activity.Type)}</span>\n              <span style={{ \n                fontWeight: ''bold'', \n                color: ''#111827'',\n                flex: 1\n              }}>\n                {activity.Subject || `$' + '{activity.Type} Activity`}\n              </span>\n              <span style={{ fontSize: ''12px'', color: ''#9CA3AF'' }}>\n                {formatDate(activity.CreatedAt)}\n              </span>\n            </div>\n            <div style={{ \n              display: ''inline-block'',\n              padding: ''4px 8px'',\n              backgroundColor: getActivityColor(activity.Type) + ''20'',\n              color: getActivityColor(activity.Type),\n              borderRadius: ''4px'',\n              fontSize: ''12px'',\n              fontWeight: ''500''\n            }}>\n              {activity.Type}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","description":"Timeline view of customer activities and interactions","category":"Customer","type":"timeline","dataRequirements":{"mode":"views","entities":[{"name":"Accounts","displayFields":["AccountName","Industry","AnnualRevenue","CreatedAt"],"filterFields":["ID"]},{"name":"Contacts","displayFields":["FirstName","LastName","Email","Phone","AccountID"],"filterFields":["AccountID"]},{"name":"Deals","displayFields":["DealName","Stage","Amount","CloseDate","AccountID"],"filterFields":["AccountID"]},{"name":"Activities","displayFields":["Subject","Type","CreatedAt","AccountID"],"filterFields":["AccountID"]}]},"properties":[{"name":"activities","type":"array","required":true,"description":"Array of activity objects sorted by date"},{"name":"onActivityClick","type":"function","required":true,"description":"Callback when an activity is clicked"}],"events":[{"name":"onActivitySelect","description":"Fired when an activity is selected","parameters":[{"name":"activity","type":"object","description":"The selected activity object"}]}],"usageExample":"```javascript\n<Customer360Timeline\n  activities={activities}\n  onActivityClick={(activity) => handleActivityClick(activity)}\n/>\n```","functionalRequirements":"- Display activities in chronological order\n- Show activity type with appropriate icons\n- Format dates in readable format\n- Use different colors for activity types\n- Support click interaction on activities\n- Show activity subject and type","technicalDesign":"Renders vertical timeline with activity items. Uses type-based icons and colors. Formats dates using toLocaleDateString. Implements hover effects for interactive items."}],"libraries":[],"usageExample":"```javascript\n<Customer360View\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>\n```"}'
SET
  @FunctionalRequirements_bf33268c = N'- Display comprehensive customer profile with key metrics
- Show interaction timeline chronologically
- Display contacts and deals associated with account
- Calculate and show engagement score
- Provide tabbed interface for different views
- Enable drill-down into related entities
- Show customer insights and recommendations'
SET
  @TechnicalDesign_bf33268c = N'Main orchestrator component that loads customer data and manages sub-components. Uses parallel data loading for performance. Calculates engagement score based on activities and deals. Implements tab-based navigation with state persistence.'
SET
  @FunctionalRequirementsVector_bf33268c = N'[0.03354857489466667,-0.04436992481350899,-0.025234464555978775,-0.02062547206878662,0.023122794926166534,0.046489275991916656,0.0056906212121248245,0.02052774652838707,0.029231304302811623,-0.03299162909388542,-0.058562491089105606,-0.017686733976006508,0.022503603249788284,0.1859971433877945,-0.00785014033317566,-0.03664969652891159,-0.05343601852655411,-0.008345498703420162,-0.0012981060426682234,0.028622662648558617,0.016009023413062096,0.02213229425251484,-0.01674720272421837,-0.0322132371366024,-0.005897921975702047,0.01571984775364399,-0.009975877590477467,0.03233572468161583,-0.008315139450132847,-0.045598000288009644,-0.025758588686585426,0.0029358461033552885,-0.07050115615129471,-0.02384958043694496,0.0000018747066405921942,0.0014512889320030808,-0.009333141148090363,0.01596338488161564,-0.09191472083330154,0.03104068897664547,0.07451947033405304,-0.014088920317590237,0.11173660308122635,-0.004034391138702631,-0.011405032128095627,0.042103782296180725,-0.036169834434986115,0.06812112778425217,0.033316802233457565,-0.009251515381038189,-0.006078777369111776,-0.06831910461187363,-0.09685580432415009,-0.03243403509259224,-0.02822711318731308,0.038701992481946945,0.0012522614561021328,-0.005600910633802414,0.03065318800508976,-0.013750622980296612,0.01666789874434471,-0.0036122233141213655,0.001503904815763235,-0.016331026330590248,0.07261472195386887,0.025602728128433228,0.005854480434209108,-0.060364071279764175,-0.007136273663491011,-0.02494572103023529,0.07249253243207932,0.015903711318969727,-0.008319319225847721,-0.04394451901316643,-0.01566341705620289,-0.017942329868674278,-0.004219022113829851,-0.030219577252864838,0.03619968891143799,-0.00011966585589107126,-0.06983648985624313,0.008132231421768665,0.004998499993234873,-0.00986064225435257,0.031199922785162926,-0.018237749114632607,-0.009837585501372814,0.009594595059752464,0.03055240958929062,0.02572140470147133,0.059393707662820816,-0.005234066862612963,-0.003594252048060298,-0.009181578643620014,-0.057061150670051575,-0.03154413774609566,0.04907846450805664,0.021610122174024582,0.03606698289513588,0.005287842825055122,0.039632171392440796,0.01788947731256485,0.02020297572016716,0.017251769080758095,0.03169878199696541,0.010993539355695248,0.02419932745397091,-0.0707237720489502,-0.005776539444923401,0.0697060227394104,0.03729533031582832,0.003387011121958494,0.008563040755689144,0.0753830298781395,-0.03603893890976906,0.0035236638505011797,-0.04255448281764984,0.022578664124011993,0.051936134696006775,0.03420345485210419,0.11597828567028046,0.05925608426332474,0.022739971056580544,0.0008372404263354838,-0.0034735873341560364,-0.0382564403116703,-0.044617827981710434,-0.03573765605688095,0.011459672823548317,-0.052801378071308136,0.009582790546119213,0.0010667081223800778,0.0016496441094204783,-0.021093416959047318,0.009220506064593792,-0.027618402615189552,0.06657455116510391,-0.026113715022802353,-0.05741417407989502,0.005632397253066301,-0.0007608307641930878,0.006091434974223375,-0.06535421311855316,0.015991466119885445,0.040661100298166275,0.043670233339071274,-0.04942139610648155,0.0673455074429512,0.009508459828794003,0.0018428919138386846,-0.027878258377313614,-0.027477679774165154,-0.010801575146615505,0.009313397109508514,0.00562660675495863,0.00720949936658144,0.057900771498680115,-0.008992121554911137,-0.013335548341274261,0.0027697132900357246,0.0037390508223325014,0.03152806684374809,-0.015760313719511032,-0.0033078312408179045,-0.03229573741555214,-0.004744100850075483,0.007043794728815556,0.009973026812076569,-0.08719009906053543,-0.017947984859347343,-0.03914693742990494,0.009371413849294186,-0.02353680692613125,-0.0010150223970413208,0.019804246723651886,-0.0011351607972756028,0.024996694177389145,0.016267146915197372,0.058782611042261124,-0.02458985336124897,0.09307858347892761,-0.02195730246603489,-0.009239725768566132,0.058418288826942444,0.01181794237345457,-0.006944887340068817,-0.04079219698905945,0.03191597759723663,-0.00670267827808857,0.016902239993214607,-0.0012150292750447989,-0.004287173971533775,-0.03361501544713974,0.010081815533339977,-0.014066258445382118,0.006094935350120068,0.0029511558823287487,-0.021908646449446678,0.01816469058394432,-0.05827099084854126,0.006848967634141445,-0.023198312148451805,0.02834709919989109,0.10238408297300339,0.036135733127593994,0.032690953463315964,0.009015153162181377,-0.006676729302853346,-0.0710957795381546,0.04200072959065437,0.12530209124088287,0.01449156366288662,-0.01986519992351532,0.027082528918981552,-0.009056679904460907,-0.012031096033751965,0.03337520733475685,-0.01206135656684637,-0.0271559190005064,0.01936568319797516,-0.04474649950861931,0.020760316401720047,-0.014643682166934013,-0.01414584368467331,0.025600003078579903,0.058856889605522156,-0.0022526097018271685,0.047890421003103256,0.02928728051483631,0.08484902232885361,0.028118301182985306,-0.0018833930371329188,0.036685071885585785,-0.02539967931807041,0.006506706587970257,0.016533955931663513,0.020867403596639633,0.10963232815265656,0.021623196080327034,0.0362975187599659,-0.005353488028049469,-0.04068981856107712,-0.029614603146910667,0.02442893758416176,0.003957957960665226,-0.013259739615023136,0.04519990459084511,0.02776992879807949,0.019978659227490425,0.015538562089204788,-0.02593245543539524,0.017264047637581825,0.06285436451435089,-0.028949197381734848,0.029350053519010544,0.044408198446035385,-0.10302060842514038,-0.04283348098397255,0.0018979880260303617,0.025688469409942627,-0.04944152012467384,-0.021064450964331627,-0.04658808931708336,-0.0440545380115509,-0.022589048370718956,-0.0319252610206604,0.07482796162366867,-0.0636986792087555,-0.04106660559773445,-0.0042751324363052845,0.01737779937684536,0.04408104345202446,0.07149142026901245,-0.016891248524188995,-0.012389629147946835,0.041670531034469604,-0.05011152848601341,-0.01056355144828558,-0.00762178422883153,0.015510773286223412,0.03638763353228569,-0.027083592489361763,-0.04277285933494568,0.02473292127251625,-0.034411560744047165,-0.03573397547006607,0.032043371349573135,-0.09589941054582596,0.07441193610429764,-0.07226955145597458,0.0205351822078228,-0.03391920402646065,-0.004013333003968,0.021093590185046196,-0.03367886692285538,0.005554220173507929,0.0020985514856874943,0.0047185420989990234,-0.01876746118068695,0.051450230181217194,-0.09870199859142303,-0.024442067369818687,0.01842336729168892,-0.020304035395383835,-0.010485119186341763,0.01788756251335144,-0.0026817196048796177,-0.03511358052492142,0.009108266793191433,-0.0013000817270949483,-0.01780487783253193,0.01670578494668007,-0.012867872603237629,0.006806722842156887,0.027423275634646416,-0.027776286005973816,-0.018113579601049423,0.016730399802327156,-0.02654234692454338,0.03149404749274254,0.007829530164599419,0.029465708881616592,-0.04655402898788452,-0.013591120019555092,0.003902337746694684,0.018764827400445938,-0.015777122229337692,-0.023375017568469048,-0.0043913619592785835,0.02179139107465744,0.01487811654806137,0.01784559339284897,-0.03782534599304199,0.012071126140654087,0.01272555161267519,0.06199045851826668,-0.02848028391599655,-0.024213150143623352,0.05458708107471466,-0.06723171472549438,-0.02970658801496029,0.035878609865903854,-0.015042534098029137,-0.037339892238378525,0.007063010241836309,-0.01111897174268961,0.034349821507930756,-0.004482560325413942,-0.09052906930446625,0.0026145291049033403,0.025323450565338135,-0.01518236193805933,-0.014356707222759724,0.006595720537006855,0.03631028160452843,-0.016307946294546127,-0.021002301946282387,0.03675871342420578,-0.05204317346215248,-0.042598918080329895,0.01781688630580902,0.014022860676050186,-0.07790186256170273,0.004920629784464836,0.03077489137649536,-0.026205338537693024,-0.0014765348751097918,-0.046480536460876465,-0.004287819378077984,0.015914423391222954,-0.03341885656118393,0.022592678666114807,0.05815718695521355,0.03453819081187248,0.022765664383769035,-0.006074718665331602,-0.01662970893085003,-0.014232499524950981,-0.0512801818549633,0.00960539374500513,0.013323884457349777,-0.06845495849847794,0.06829159706830978,-0.002499665366485715,0.03142683953046799,0.037024740129709244,-0.01631641760468483,-0.007886607199907303,-0.053945865482091904,-0.00019361100567039102,-0.0028553043957799673,0.05898395925760269,-0.03377893567085266,0.003922150004655123,-0.020078986883163452,-0.03800886496901512,-0.02583455480635166,0.021207353100180626,-0.04889683425426483,-0.008037436753511429,-0.01911727711558342,0.0048513333313167095,0.004098301287740469,-0.035947464406490326,-0.006658047903329134,-0.06513702124357224,0.01643253117799759,0.05764830484986305,0.008425186388194561,0.0020324205979704857,-0.05915410816669464,0.028695644810795784,0.02614414691925049,-0.03563452512025833,0.031927064061164856,-0.007775657344609499,0.02495536394417286,0.041078198701143265,0.04238365963101387,0.03890209272503853,0.03727069869637489,-0.07192374765872955,-0.04139808565378189,-0.03007374331355095,0.001322541618719697,-0.011151573620736599,0.03568418323993683,-0.04662496596574783,0.012149381451308727,0.06257007271051407,0.0007941045332700014,-0.013491226360201836,-0.0409260131418705,0.011468222364783287,-0.009526338428258896,-0.040871020406484604,0.033747654408216476,0.04229608550667763,-0.027432428672909737,-0.02333812601864338,0.02491224929690361,-0.0013720754068344831,-0.03724653646349907,0.048745665699243546,-0.062187258154153824,-0.04047727957367897,0.011841283179819584,0.05306403338909149,-0.04480280354619026,0.004488650243729353,0.04079345986247063,-0.04196121171116829,0.00990382768213749,0.024398641660809517,-0.045629244297742844,0.0044649275951087475,-0.058852676302194595,0.037369582802057266,-0.0021100312005728483,-0.014209864661097527,0.029850484803318977,0.01893026754260063,-0.02687704935669899,-0.0033559747971594334,0.024333421140909195,-0.06440899521112442,0.058741167187690735,-0.05472453683614731,-0.04372964799404144,-0.042398493736982346,0.0749567449092865,-0.008178153075277805,0.017575671896338463,-0.04195518419146538,-0.07167026400566101,-0.03658488392829895,-0.006346865091472864,-0.005568278953433037,0.007931744679808617,-0.01591154932975769,0.04444671794772148,0.031318504363298416,0.04493970423936844,-0.002471066312864423,0.0019829547964036465,0.016727842390537262,-0.06219571456313133,-0.022617904469370842,0.006838066503405571,0.022553615272045135,0.015404884703457355,0.07305660098791122,-0.02231612056493759,0.02600124664604664,-0.008231555111706257,-0.003932996653020382,-0.09853150695562363,0.03393583744764328,-0.043071404099464417,-0.06898998469114304,-0.014994804747402668,-0.027865227311849594,-0.014484064653515816,-0.024109050631523132,0.0006913701654411852,-0.0075814868323504925,0.01931222714483738,0.029993414878845215,-0.06527768075466156,-0.00026713835541158915,0.017787767574191093,0.013480066321790218,0.01570851355791092,-0.02998785674571991,0.0041130478493869305,0.02796093188226223,-0.057427048683166504,0.018356656655669212,0.01677338033914566,-0.05392509698867798,-0.007547697518020868,0.012679479084908962,-0.029322123154997826,0.01828935369849205,0.026059279218316078,-0.024066075682640076,0.04374025762081146,0.017758384346961975,-0.05372722074389458,0.05866646021604538,-0.04839756339788437,-0.02544885315001011,0.004301843233406544,-0.0174514502286911,-0.02265494130551815,0.011379341594874859,0.07188940793275833,0.0934603214263916,-0.015471226535737514,-0.0014289474347606301,-0.05063678324222565,-0.015169767662882805,0.05767785385251045,-0.021363267675042152,-0.012442224659025669,-0.017373813316226006,0.0308320764452219,-0.04318806901574135,0.0051231905817985535,0.03688303381204605,-0.0378529392182827,-0.04291253164410591,-0.047914501279592514,0.049053773283958435,-0.007126782089471817,-6.35686406431569e-33,-0.023059111088514328,0.017143722623586655,-0.06038856878876686,0.041272640228271484,-0.025254180654883385,-0.011617220006883144,-0.004171604290604591,0.003720567561686039,-0.02988394722342491,0.006349197588860989,-0.009535499848425388,0.0002617778372950852,0.013000529259443283,-0.007765175774693489,-0.006838143803179264,-0.005475074518471956,0.04089975357055664,-0.026303302496671677,-0.02833022177219391,0.0021335952915251255,-0.05898961424827576,0.040845487266778946,0.0018064416944980621,-0.05559385567903519,-0.008142665028572083,0.004763253498822451,0.008017345331609249,0.013549616560339928,-0.03651677072048187,0.03886593133211136,0.001555154100060463,-0.048952654004096985,-0.013003288768231869,0.021144907921552658,0.05107184126973152,-0.0035810561385005713,-0.06361159682273865,0.007219299674034119,0.0534110926091671,0.028787896037101746,0.024826418608427048,0.02953849360346794,0.020286070182919502,-0.009127447381615639,0.0008641901658847928,-0.0028092176653444767,0.010411105118691921,-0.021731166169047356,-0.00418455945327878,0.006529566831886768,0.014409233815968037,0.02109687589108944,0.013244166038930416,0.08215469121932983,0.0031850384548306465,0.03399202227592468,-0.006080109626054764,0.028759712353348732,-0.048875294625759125,-0.02262907102704048,-0.03333108127117157,-0.04192744940519333,-0.02295592799782753,-0.037232398986816406,0.025422001257538795,0.0017540541011840105,-0.015046808868646622,-0.00887854490429163,0.023961765691637993,0.0009313241462223232,-0.04202299565076828,0.047679562121629715,0.006505288183689117,-0.06285203993320465,-0.09263086318969727,-0.023160675540566444,0.045481424778699875,0.005117226392030716,0.04916642978787422,0.04145464301109314,0.00651976466178894,0.00008467854786431417,-0.03289473056793213,-0.005604628007858992,0.10032518953084946,-0.03696465119719505,-0.047026824206113815,0.001948560937307775,0.01919921487569809,0.05909772962331772,-0.04189622029662132,0.07167089730501175,-0.05155983194708824,0.005935990251600742,-0.019902387633919716,0.016225455328822136,0.0747387483716011,0.014045036397874355,0.02445945516228676,-0.054716989398002625,0.02272455208003521,-0.009256015531718731,-0.07294488698244095,-0.034927062690258026,-0.023872477933764458,-0.0351431779563427,0.01939217746257782,-0.00999253336340189,-0.004221708048135042,-0.016024332493543625,0.04792868345975876,0.010675482451915741,-0.015005853958427906,0.009748345240950584,-0.01378918718546629,0.007300497032701969,-0.023437753319740295,0.031271472573280334,0.000019924113075830974,0.004618697799742222,0.025204502046108246,-0.0054690842516720295,0.015574847348034382,-0.07008443027734756,0.04580239951610565,-0.04781822860240936,0.00921312253922224,-0.011200708337128162,0.0357181578874588,-0.0034155254252254963,-0.05333850905299187,0.015521906316280365,2.7495934773469344e-7,0.028411628678441048,0.016538754105567932,-0.02472318522632122,0.00992655847221613,0.04440150409936905,-0.04938139021396637,0.02870655246078968,-0.054368551820516586,0.05576595291495323,-0.0370875708758831,0.05818691477179527,0.004221864975988865,0.019094491377472878,0.027058083564043045,-0.021585004404187202,-0.015978991985321045,0.0019419974414631724,-0.1488448828458786,-0.03048904612660408,0.021718597039580345,0.009219259954988956,-0.0018684673123061657,0.0016331715742126107,0.017330871894955635,0.007939381524920464,-0.013406063430011272,-0.008493578061461449,-0.008204230107367039,0.024024387821555138,0.0036390882451087236,0.02488620951771736,0.01925969123840332,0.00845932587981224,-0.009239476174116135,-0.023790499195456505,0.05008666217327118,0.02661404013633728,-0.0019296215614303946,0.05221407487988472,0.015100368298590183,0.05291970074176788,-0.03951118886470795,-0.00554856238886714,-0.04529653862118721,-0.003378086257725954,-0.04025382921099663,-0.00602425541728735,-0.025522561743855476,0.0019104608800262213,0.0473908893764019,0.0026120105758309364,0.01248781755566597,-0.015770019963383675,-0.001499033416621387,0.030411027371883392,-0.03738093003630638,-0.06015912443399429,0.040514808148145676,0.036238715052604675,0.049398135393857956,-0.004266573116183281,0.005067907739430666,-0.025312164798378944,0.024312153458595276,-0.014595873653888702,0.0044816662557423115,-0.0192712415009737,2.7875601862890204e-34,0.006250569596886635,-0.005584053695201874,0.06366705149412155,0.017507972195744514,-0.004498924594372511,-0.014023548923432827,0.0036501374561339617,-0.022971108555793762,0.004057032521814108,-0.045931555330753326,-0.00002472105188644491]'
SET
  @TechnicalDesignVector_bf33268c = N'[0.015059151686728,0.01038195937871933,-0.04044194146990776,-0.06437450647354126,-0.017752232030034065,-0.0015891281655058265,0.018238946795463562,0.011355321854352951,-0.03413122147321701,-0.011174648068845272,-0.03517651557922363,0.009449300356209278,0.02932012639939785,0.15425094962120056,0.009404375217854977,-0.00020014282199554145,-0.015987003222107887,0.011098843067884445,-0.07028865814208984,0.026556428521871567,0.01747671514749527,-0.02943786233663559,0.008620986714959145,-0.02537747286260128,-0.00856688804924488,-0.00564628466963768,-0.05652150139212608,0.047431543469429016,0.03065526857972145,-0.04312260076403618,0.04803495109081268,0.006904501002281904,-0.03177862614393234,0.03359093889594078,0.0000017424317775294185,-0.003875334979966283,-0.06308740377426147,0.008991126902401447,-0.02641589753329754,0.013729657046496868,0.05736028030514717,0.003207096364349127,0.004669133573770523,0.004778843838721514,0.0014437022618949413,0.020624442026019096,-0.0103263258934021,0.03964568302035332,0.04886205494403839,-0.0019421337638050318,-0.009917225688695908,-0.000011206793715246022,-0.07350385189056396,0.038547515869140625,-0.06989628821611404,0.04554332047700882,0.019530341029167175,0.053601548075675964,0.05365786701440811,-0.03938760235905647,-0.03114994801580906,-0.03779202699661255,0.0018706797854974866,-0.0230224821716547,0.011535702273249626,0.011424840427935123,0.03598617762327194,-0.04752349480986595,-0.013021846301853657,-0.0002584893663879484,0.14139173924922943,0.02009141445159912,0.04597882181406021,-0.012603296898305416,-0.05771378055214882,-0.02314072847366333,0.0019620475359261036,-0.024909423664212227,0.03279614821076393,0.013982624746859074,-0.004109005443751812,0.039322204887866974,-0.017941411584615707,-0.04183465614914894,-0.005525741260498762,0.04434359073638916,0.002625121036544442,0.007536250166594982,-0.021184511482715607,-0.02524733915925026,0.05491337552666664,-0.0065355971455574036,0.021478505805134773,0.04176498204469681,-0.06913963705301285,-0.015408763661980629,0.029607882723212242,-0.03033093549311161,-0.017990797758102417,-0.05078410729765892,0.002071920083835721,0.02127056196331978,0.016791710630059242,0.035062894225120544,0.03799257054924965,0.04416760429739952,0.0010610896861180663,-0.0745941549539566,0.002044464461505413,-0.019149674102663994,-0.014654280617833138,0.006370150484144688,-0.009478986263275146,0.04463352635502815,-0.00442154798656702,-0.014357812702655792,-0.023923812434077263,0.03741563856601715,0.003352285362780094,0.018163081258535385,0.06270387768745422,0.024582823738455772,0.03499937430024147,0.0329134464263916,-0.013660745695233345,0.010401737876236439,-0.021387003362178802,-0.0515328124165535,-0.0028542291838675737,-0.04728521406650543,0.007829420268535614,-0.009320387616753578,-0.00563467713072896,0.008295312523841858,0.00030675006564706564,-0.04652891308069229,0.047992732375860214,-0.01562994346022606,-0.06779683381319046,-0.014639736153185368,0.04025145620107651,-0.03471717610955238,-0.0996122881770134,0.016085965558886528,-0.006707846187055111,-0.013084441423416138,-0.05915200710296631,0.02151072956621647,0.0009489157237112522,0.002614005468785763,-0.002359765348955989,-0.041948556900024414,-0.004777567461133003,-0.009271625429391861,-0.03813344985246658,-0.016603104770183563,0.09782851487398148,0.0010824729688465595,0.027282726019620895,0.021177949383854866,0.002345871413126588,0.029085999354720116,0.025018099695444107,0.02337707206606865,-0.05397506430745125,-0.03971337527036667,0.06528490781784058,0.013436990790069103,-0.039304718375205994,-0.060044702142477036,-0.043140530586242676,0.0066139125265181065,-0.011324488557875156,0.08726126700639725,0.03404506668448448,-0.04386616498231888,0.04272875562310219,-0.0005494480137713253,-0.032894715666770935,0.023903001099824905,0.00290965149179101,-0.1031745970249176,0.007781423628330231,0.08197266608476639,0.07416462153196335,-0.022229023277759552,0.009900853037834167,0.03984345495700836,-0.01384173147380352,0.004741867538541555,-0.011938869021832943,-0.013772144913673401,-0.019846675917506218,0.023329701274633408,0.01404242031276226,0.019981490448117256,-0.051061730831861496,-0.017216429114341736,0.03851473331451416,0.013593906536698341,-0.0026618726551532745,-0.006058207713067532,-0.017601657658815384,0.09561251848936081,0.04601183906197548,-0.016267385333776474,-0.022873425856232643,-0.014157282188534737,-0.0042261709459125996,-0.00041428348049521446,0.09467542916536331,-0.019425371661782265,-0.04131036251783371,-0.005854333750903606,-0.048829980194568634,0.03840606287121773,0.06663453578948975,0.044333167374134064,-0.03277788683772087,0.0005250219837762415,-0.05903145670890808,0.04013853147625923,0.00909654051065445,0.004065855871886015,0.005028324201703072,0.024734575301408768,0.01127110980451107,0.03488351032137871,-0.0020588217303156853,0.02540775015950203,-0.013561424799263477,-0.04901237040758133,0.02700863406062126,0.06666988879442215,0.05028364434838295,0.035605546087026596,0.03373779356479645,0.12003674358129501,-0.0026605466846376657,0.0551120825111866,0.03200160712003708,-0.003640864510089159,0.0026352035347372293,-0.01400205958634615,-0.008561628870666027,-0.013066897168755531,-0.05596253648400307,0.018566809594631195,0.023064952343702316,-0.012182884849607944,0.04197341576218605,0.025313107296824455,-0.012152434326708317,-0.022764647379517555,-0.004458357114344835,-0.01945807784795761,-0.03353753313422203,0.026400990784168243,-0.002831842051818967,0.027765855193138123,-0.021247759461402893,-0.011278174817562103,0.006172159221023321,-0.05029603838920593,-0.02239544317126274,-0.015520124696195126,0.054520804435014725,-0.03200665861368179,0.042711228132247925,0.007365877740085125,0.012784900143742561,0.026625914499163628,0.06256169825792313,0.012225788086652756,-0.005524580366909504,0.029693981632590294,0.04619373008608818,0.03998280316591263,-0.05939037352800369,-0.01600048877298832,-0.012977142818272114,-0.0489334911108017,0.006943891756236553,0.041337233036756516,0.0018591288244351745,-0.015080666169524193,0.01281745359301567,-0.04407859966158867,-0.024852916598320007,-0.08155573159456253,-0.02045370452105999,-0.013199172914028168,-0.006131285801529884,-0.025372028350830078,-0.02856590412557125,0.017342032864689827,0.0005375685868784785,0.060445718467235565,-0.06200288236141205,0.004088970832526684,0.0025952747091650963,-0.06649140268564224,-0.011990261264145374,-0.018887048587203026,-0.037521954625844955,0.02291805110871792,-0.04256941378116608,0.01824052259325981,0.011597921140491962,0.06289313733577728,-0.029497889801859856,0.019271543249487877,0.00992357637733221,-0.07044368237257004,0.004221358802169561,0.007077009417116642,0.08363242447376251,0.009813440963625908,-0.09153483808040619,0.05474991723895073,0.0052721695974469185,0.04038407653570175,-0.013258622959256172,0.028604788705706596,0.00398632325232029,-0.003794706193730235,-0.048907823860645294,-0.032862063497304916,-0.02768421173095703,-0.05333989858627319,0.00031716295052319765,-0.021610906347632408,-0.044255759567022324,0.02712845616042614,0.009891191497445107,-0.01443240512162447,-0.05503413453698158,-0.04441579431295395,0.010133231990039349,-0.05945383757352829,-0.010430313646793365,0.012924222275614738,-0.036247752606868744,0.09940680861473083,-0.013110470958054066,0.0021492273081094027,0.030526096001267433,0.03494852036237717,-0.124416284263134,-0.014832868240773678,0.04041749984025955,0.033068470656871796,-0.03460466489195824,0.011406701058149338,-0.0038473112508654594,-0.0007779716397635639,-0.03623693063855171,0.03114854171872139,0.01383278053253889,-0.07956290245056152,0.005528300069272518,0.02676222287118435,-0.0018493595998734236,-0.06538834422826767,0.00889525469392538,-0.01888757012784481,0.05091479420661926,-0.026537446305155754,-0.003204226726666093,0.002373491181060672,-0.007429149467498064,0.007635702379047871,0.015085127204656601,0.013348463922739029,0.007864498533308506,-0.01905995048582554,-0.005798754747956991,0.016099100932478905,0.02170579507946968,0.03645368292927742,0.04526083171367645,-0.03627598285675049,0.06193138659000397,0.00018785071733873338,0.07779926061630249,-0.004976151045411825,-0.019396495074033737,-0.017972666770219803,0.04053843021392822,0.05541212484240532,-0.00915649626404047,-0.03522905334830284,-0.007672566454857588,-0.022633569315075874,0.010070174001157284,-0.04028908535838127,0.00515380222350359,0.02729768492281437,0.014492964372038841,0.01580474153161049,0.008860320784151554,0.03556830808520317,0.012928941287100315,-0.02217961475253105,-0.04561757668852806,0.005059440154582262,-0.03171229362487793,0.021077241748571396,0.019386688247323036,0.03033478930592537,-0.018864892423152924,0.015759071335196495,-0.0027109517250210047,-0.0431140661239624,-0.01846994459629059,-0.026124559342861176,0.01618010364472866,-0.027467960491776466,0.020352385938167572,0.038924407213926315,0.031789813190698624,0.029184838756918907,-0.0042271181009709835,-0.010387691669166088,0.03608998656272888,0.015879031270742416,-0.0020937835797667503,-0.038429249078035355,-0.005633840803056955,-0.027370627969503403,-0.02348339930176735,-0.019306005910038948,0.005396634340286255,-0.03545188531279564,0.019075030460953712,-0.057197801768779755,0.012452074326574802,0.007281548343598843,-0.0260014571249485,0.018312307074666023,-0.003705920884385705,0.011254617013037205,0.060834288597106934,0.03398521989583969,-0.016451770439743996,-0.03394242003560066,-0.0316992923617363,0.019497361034154892,-0.08134348690509796,-0.04013476148247719,0.05143292248249054,-0.017125742509961128,0.027859240770339966,-0.005340821575373411,-0.05304418504238129,-0.038122400641441345,-0.04941927641630173,-0.03717067092657089,-0.04358091577887535,0.08915670216083527,0.06011945381760597,0.03529207780957222,-0.037589576095342636,0.05370466783642769,0.02011658251285553,-0.01931743510067463,0.010472518391907215,-0.0837152823805809,0.0012639161432161927,-0.06756599247455597,-0.010039282962679863,-0.024338675662875175,-0.01853129267692566,-0.03301883861422539,-0.030561797320842743,0.02265911176800728,-0.008125866763293743,-0.0037013760302215815,0.02063819020986557,-0.009525922127068043,0.010824069380760193,-0.026515912264585495,0.01361331157386303,-0.02487037517130375,0.010717150755226612,0.03707585856318474,-0.02361994795501232,0.008756114169955254,-0.000636165146715939,0.019380077719688416,-0.024518337100744247,0.02093050628900528,0.023839086294174194,0.058672770857810974,0.07964539527893066,-0.041348181664943695,-0.00535320769995451,-0.006385334301739931,-0.015072396956384182,-0.04942486807703972,-0.03521423041820526,-0.002173328772187233,0.0321086049079895,0.011078380048274994,0.034918494522571564,0.023296643048524857,-0.0233597494661808,0.022722456604242325,-0.02282899059355259,-0.005243638996034861,-0.035592444241046906,-0.021251624450087547,-0.0332854725420475,0.025108899921178818,0.023284384980797768,0.043991368263959885,-0.02290431596338749,0.05725954845547676,0.04681185260415077,-0.05894312262535095,0.03414270281791687,0.007459340617060661,-0.02603229321539402,-0.043401721864938736,0.05825420841574669,-0.04746686667203903,0.01545944344252348,0.030428653582930565,0.049232978373765945,0.025731341913342476,0.0029972956981509924,-0.022501591593027115,-0.055494483560323715,-0.016946839168667793,-0.061612073332071304,0.07570986449718475,0.05305526778101921,0.10102783143520355,-0.04301474988460541,-0.026519855484366417,-0.035581592470407486,0.041567206382751465,0.017579013481736183,0.028312498703598976,0.003901843214407563,-0.09553012251853943,0.03392382338643074,-0.0770515501499176,0.043749429285526276,0.026279527693986893,-0.007894786074757576,-0.07453308254480362,-0.09454113245010376,0.05232546851038933,0.03285033628344536,-6.296622917571925e-33,-0.032006699591875076,0.02523810788989067,0.033361177891492844,0.05194399133324623,-0.05916846916079521,-0.020563732832670212,-0.018883537501096725,-0.03948083519935608,-0.00822626892477274,-0.03646860271692276,0.008819947019219398,0.0016457712044939399,0.014143906533718109,-0.03070945292711258,-0.013387787155807018,0.014546328224241734,0.029194895178079605,-0.011529232375323772,-0.04401974007487297,0.001962435431778431,-0.047405753284692764,0.016212590038776398,-0.016298901289701462,-0.0381428524851799,-0.012267445214092731,-0.031548406928777695,0.023841168731451035,0.013060386292636395,-0.09756387770175934,0.020805485546588898,-0.0011067123850807548,-0.03738274425268173,-0.04621203616261482,0.006412513554096222,0.010706176050007343,-0.009442385286092758,-0.06922773271799088,0.020559577271342278,0.024684380739927292,0.0383334718644619,-0.014867091551423073,-0.012950809672474861,0.038296859711408615,0.0023712448310106993,-0.02284332364797592,0.02532847970724106,0.049235161393880844,0.018148070201277733,-0.0037134727463126183,-0.0145354513078928,-0.011488011106848717,-0.026550274342298508,-0.015763333067297935,0.06647208333015442,0.06005962938070297,0.02068225108087063,-0.014770390465855598,-0.007611419074237347,-0.03145337104797363,-0.006116003729403019,-0.04394708201289177,-0.046058088541030884,0.008701412007212639,0.03534955903887749,0.03077463060617447,0.018476316705346107,-0.018053770065307617,0.06176522746682167,0.016659369692206383,-0.031298018991947174,-0.030916521325707436,0.03597046434879303,0.008174487389624119,-0.08403201401233673,-0.08583945035934448,-0.010237584821879864,0.0375957116484642,-0.0077496781013906,0.07527099549770355,-0.017129937186837196,0.01505905669182539,0.0014042460825294256,-0.010369580239057541,0.0295085608959198,0.0431557297706604,-0.034068115055561066,-0.0224289707839489,-0.028938595205545425,0.002031894400715828,0.04814586788415909,-0.03576875105500221,0.02977512776851654,-0.028249746188521385,-0.002751935739070177,0.02648250199854374,-0.035944029688835144,0.060881808400154114,-0.007975748740136623,0.008570106700062752,0.004055456258356571,-0.026719996705651283,0.012951207347214222,-0.028368761762976646,-0.001963219605386257,-0.008718940429389477,-0.0024954837281256914,-0.023882195353507996,-0.009478123858571053,-0.046525511890649796,0.06090472638607025,0.018455319106578827,0.02875443920493126,-0.01289637852460146,-0.03280409052968025,0.01404018234461546,-0.010564744472503662,0.024219203740358353,0.0007469310075975955,0.02891085110604763,-0.029051367193460464,0.03316601738333702,-0.022945430129766464,-0.00006509678496513516,-0.015331235714256763,0.010283012874424458,0.03126396983861923,-0.03377525880932808,-0.0011058287927880883,-0.08495698869228363,-0.025674104690551758,-0.014556403271853924,0.014089920558035374,2.551930151639681e-7,-0.020858149975538254,0.09570101648569107,-0.03571527451276779,0.03887235373258591,0.025073396041989326,-0.040482692420482635,-0.015957146883010864,-0.04833025485277176,0.050187837332487106,0.013215471990406513,0.03293812647461891,0.015161408111453056,0.005319608841091394,0.02593141980469227,-0.021667616441845894,0.013075754977762699,0.01825481839478016,-0.060580383986234665,-0.034102048724889755,-0.010073798708617687,0.06762012839317322,0.0035094134509563446,0.048483338207006454,0.01084274984896183,0.03524398431181908,0.05550263822078705,-0.020605841651558876,0.07011248916387558,-0.010758421383798122,-0.0028437990695238113,-0.0255605336278677,0.060545727610588074,-0.039223916828632355,0.016633884981274605,-0.0017323726788163185,0.02856321819126606,-0.02792167104780674,0.00001731817246763967,0.022289087995886803,0.02158568985760212,0.05197581648826599,-0.03740020468831062,-0.04308393970131874,0.02143593318760395,0.028764985501766205,-0.029103992506861687,-0.01641443558037281,0.033334676176309586,-0.04681337997317314,-0.010916788130998611,-0.03271390125155449,0.05663029104471207,-0.016321269795298576,-0.03859280049800873,0.012465028092265129,-0.007350481115281582,-0.027892522513866425,0.03850996121764183,0.04279792308807373,0.028459569439291954,0.00960621889680624,-0.04806680604815483,0.01797053962945938,0.061534542590379715,0.0018905671313405037,0.053023193031549454,-0.05502629652619362,2.593740912470099e-34,0.008643344044685364,-0.01715037040412426,0.01822342351078987,0.030458945780992508,0.0015464838361367583,-0.004326934460550547,0.024954374879598618,-0.027482202276587486,0.019452078267931938,-0.05572075769305229,-0.014055988751351833]'
SET
  @HasCustomProps_bf33268c = 1
SET
  @HasCustomEvents_bf33268c = 0
SET
  @RequiresData_bf33268c = 1
SET
  @DependencyCount_bf33268c = 3
SET
  @TechnicalDesignVectorEmbeddingModelID_bf33268c = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_bf33268c = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_bf33268c = 0
SET
  @ID_bf33268c = '5788F55E-11FE-4732-B98E-CF9A66EA145A'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_bf33268c,
  @Name = @Name_bf33268c,
  @Version = @Version_bf33268c,
  @VersionSequence = @VersionSequence_bf33268c,
  @Title = @Title_bf33268c,
  @Description = @Description_bf33268c,
  @Type = @Type_bf33268c,
  @Status = @Status_bf33268c,
  @DeveloperName = @DeveloperName_bf33268c,
  @DeveloperEmail = @DeveloperEmail_bf33268c,
  @DeveloperOrganization = @DeveloperOrganization_bf33268c,
  @SourceRegistryID = @SourceRegistryID_bf33268c,
  @ReplicatedAt = @ReplicatedAt_bf33268c,
  @LastSyncedAt = @LastSyncedAt_bf33268c,
  @Specification = @Specification_bf33268c,
  @FunctionalRequirements = @FunctionalRequirements_bf33268c,
  @TechnicalDesign = @TechnicalDesign_bf33268c,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_bf33268c,
  @TechnicalDesignVector = @TechnicalDesignVector_bf33268c,
  @HasCustomProps = @HasCustomProps_bf33268c,
  @HasCustomEvents = @HasCustomEvents_bf33268c,
  @RequiresData = @RequiresData_bf33268c,
  @DependencyCount = @DependencyCount_bf33268c,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_bf33268c,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_bf33268c,
  @HasRequiredCustomProps = @HasRequiredCustomProps_bf33268c,
  @ID = @ID_bf33268c;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_4337bc89 NVARCHAR(MAX),
@Name_4337bc89 NVARCHAR(500),
@Version_4337bc89 NVARCHAR(50),
@VersionSequence_4337bc89 INT,
@Title_4337bc89 NVARCHAR(1000),
@Description_4337bc89 NVARCHAR(MAX),
@Type_4337bc89 NVARCHAR(255),
@Status_4337bc89 NVARCHAR(50),
@DeveloperName_4337bc89 NVARCHAR(255),
@DeveloperEmail_4337bc89 NVARCHAR(255),
@DeveloperOrganization_4337bc89 NVARCHAR(255),
@SourceRegistryID_4337bc89 UNIQUEIDENTIFIER,
@ReplicatedAt_4337bc89 DATETIMEOFFSET,
@LastSyncedAt_4337bc89 DATETIMEOFFSET,
@Specification_4337bc89 NVARCHAR(MAX),
@FunctionalRequirements_4337bc89 NVARCHAR(MAX),
@TechnicalDesign_4337bc89 NVARCHAR(MAX),
@FunctionalRequirementsVector_4337bc89 NVARCHAR(MAX),
@TechnicalDesignVector_4337bc89 NVARCHAR(MAX),
@HasCustomProps_4337bc89 BIT,
@HasCustomEvents_4337bc89 BIT,
@RequiresData_4337bc89 BIT,
@DependencyCount_4337bc89 INT,
@TechnicalDesignVectorEmbeddingModelID_4337bc89 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_4337bc89 NVARCHAR(MAX),
@HasRequiredCustomProps_4337bc89 BIT,
@ID_4337bc89 UNIQUEIDENTIFIER
SET
  @Namespace_4337bc89 = N'CRM/Finance'
SET
  @Name_4337bc89 = N'FinancialAnalyticsDashboard'
SET
  @Version_4337bc89 = N'1.0.0'
SET
  @VersionSequence_4337bc89 = 1
SET
  @Title_4337bc89 = N'Financial Analytics Dashboard'
SET
  @Description_4337bc89 = N'Comprehensive financial overview with revenue trends, forecasting, and profitability analysis with export capabilities'
SET
  @Type_4337bc89 = N'Dashboard'
SET
  @Status_4337bc89 = N'Published'
SET
  @Specification_4337bc89 = N'{"name":"FinancialAnalyticsDashboard","namespace":"CRM/Finance","type":"Dashboard","code":"function FinancialAnalyticsDashboard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Load registry components\n  const AIInsightsPanel = components?.AIInsightsPanel;\n  const DataExportPanel = components?.DataExportPanel;\n  const [invoices, setInvoices] = useState([]);\n  const [deals, setDeals] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [timeRange, setTimeRange] = useState(savedUserSettings?.timeRange || ''quarter'');\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n  const [selectedMetric, setSelectedMetric] = useState(null);\n  const [drillDownData, setDrillDownData] = useState(null);\n  const [drillDownTitle, setDrillDownTitle] = useState('''');\n  const [sortConfig, setSortConfig] = useState({ key: ''TotalAmount'', direction: ''desc'' });\n  const chartRefs = useRef({});\n  const dashboardRef = useRef(null);\n  const aiInsightsRef = useRef(null);\n  \n  // Debug ref initialization\n  useEffect(() => {\n    console.log(''Dashboard refs after mount:'', {\n      dashboardRef: dashboardRef.current,\n      aiInsightsRef: aiInsightsRef.current\n    });\n  }, []);\n  \n  // AI Insights state\n  const [aiInsights, setAiInsights] = useState(null);\n  const [loadingInsights, setLoadingInsights] = useState(false);\n  const [insightsError, setInsightsError] = useState(null);\n\n  useEffect(() => {\n    loadFinancialData();\n  }, [timeRange]);\n\n  const loadFinancialData = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const dateFilter = getDateFilter();\n      \n      const [invoicesResult, dealsResult, productsResult] = await Promise.all([\n        utilities.rv.RunView({\n          EntityName: ''Invoices'',\n          ExtraFilter: dateFilter ? `InvoiceDate >= ''$' + '{dateFilter}''` : '''',\n          OrderBy: ''InvoiceDate DESC''\n        }),\n        utilities.rv.RunView({\n          EntityName: ''Deals'',\n          ExtraFilter: dateFilter ? `CloseDate >= ''$' + '{dateFilter}''` : '''',\n          OrderBy: ''CloseDate DESC''\n        }),\n        utilities.rv.RunView({\n          EntityName: ''Products'',\n          OrderBy: ''ProductName ASC''\n        })\n      ]);\n\n      if (invoicesResult.Success) {\n        setInvoices(invoicesResult.Results || []);\n      }\n      if (dealsResult.Success) {\n        setDeals(dealsResult.Results || []);\n      }\n      if (productsResult.Success) {\n        setProducts(productsResult.Results || []);\n      }\n      \n      if (!invoicesResult.Success) {\n        setError(''Failed to load financial data'');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDateFilter = () => {\n    const now = new Date();\n    let months = 3;\n    \n    switch (timeRange) {\n      case ''month'': months = 1; break;\n      case ''quarter'': months = 3; break;\n      case ''year'': months = 12; break;\n      default: months = 3;\n    }\n    \n    const startDate = new Date(now.setMonth(now.getMonth() - months));\n    return startDate.toISOString().split(''T'')[0];\n  };\n\n  const calculateMetrics = () => {\n    const actualRevenue = invoices\n      .filter(inv => inv.Status === ''Paid'')\n      .reduce((sum, inv) => sum + (inv.TotalAmount || 0), 0);\n    \n    const projectedRevenue = deals\n      .filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage))\n      .reduce((sum, d) => sum + ((d.Amount || 0) * (d.Probability || 0) / 100), 0);\n    \n    const outstandingRevenue = invoices\n      .filter(inv => inv.Status !== ''Paid'' && inv.Status !== ''Cancelled'')\n      .reduce((sum, inv) => sum + (inv.TotalAmount || 0), 0);\n    \n    const avgDealSize = deals.length > 0 ? \n      deals.reduce((sum, d) => sum + (d.Amount || 0), 0) / deals.length : 0;\n    \n    const grossMargin = products.length > 0 ?\n      products.reduce((sum, p) => {\n        const margin = p.Price && p.Cost ? ((p.Price - p.Cost) / p.Price) * 100 : 0;\n        return sum + margin;\n      }, 0) / products.length : 0;\n    \n    // Calculate revenue growth (comparing to previous period)\n    const currentPeriodRevenue = actualRevenue;\n    const previousPeriodRevenue = currentPeriodRevenue * 0.85; // Simulated previous period\n    const revenueGrowth = previousPeriodRevenue > 0 ? \n      ((currentPeriodRevenue - previousPeriodRevenue) / previousPeriodRevenue) * 100 : 0;\n    \n    return {\n      actualRevenue,\n      projectedRevenue,\n      outstandingRevenue,\n      avgDealSize,\n      grossMargin,\n      totalRevenue: actualRevenue + projectedRevenue,\n      cashFlow: actualRevenue - outstandingRevenue,\n      revenueGrowth\n    };\n  };\n\n  // Calculate metrics only when data is loaded\n  const metrics = loading ? {\n    actualRevenue: 0,\n    projectedRevenue: 0,\n    outstandingRevenue: 0,\n    grossMargin: 0,\n    revenueGrowth: 0,\n    avgDealSize: 0,\n    totalRevenue: 0,\n    cashFlow: 0\n  } : calculateMetrics();\n  \n  // Format insights text using marked library for proper markdown rendering\n\n  const generateAIInsights = async () => {\n    setLoadingInsights(true);\n    setInsightsError(null);\n    \n    try {\n      const trendData = prepareTrendData();\n      \n      const prompt = `Analyze this financial analytics data and provide insights:\n\nTime Period: $' + '{timeRange}\nTotal Revenue: $' + '{formatCurrency(metrics.totalRevenue)}\nActual Revenue: $' + '{formatCurrency(metrics.actualRevenue)}\nProjected Revenue: $' + '{formatCurrency(metrics.projectedRevenue)}\nOutstanding Revenue: $' + '{formatCurrency(metrics.outstandingRevenue)}\nGross Margin: $' + '{metrics.grossMargin.toFixed(1)}%\nRevenue Growth: $' + '{metrics.revenueGrowth > 0 ? ''+'' : ''''}$' + '{metrics.revenueGrowth.toFixed(1)}%\nAverage Deal Size: $' + '{formatCurrency(metrics.avgDealSize)}\nCash Flow: $' + '{formatCurrency(metrics.cashFlow)}\n\nData Summary:\n- Total Invoices: $' + '{invoices.length}\n- Total Deals: $' + '{deals.length}\n- Total Products: $' + '{products.length}\n\nRecent Trend Data:\n$' + '{trendData.slice(-3).map(d => `$' + '{d.month}: Invoice Revenue $' + '{formatCurrency(d.revenue)}, Deal Revenue $' + '{formatCurrency(d.deals)}`).join(''\\n'')}\n\nProvide:\n1. Key financial performance insights and trends\n2. Revenue growth analysis and projections\n3. Cash flow and outstanding revenue concerns\n4. Gross margin analysis and optimization opportunities\n5. Specific actionable recommendations for financial improvement\n6. Risk factors to monitor\n\nFocus on actionable business insights that can help improve financial performance.`;\n      \n      const result = await utilities.ai.ExecutePrompt({\n        systemPrompt: ''You are an expert financial analyst with deep knowledge of business finance, cash flow management, and revenue optimization. Provide clear, actionable insights with specific recommendations. Format your response in clear markdown.'',\n        messages: prompt,\n        preferredModels: [''GPT-OSS-120B'', ''Qwen3 32B''],\n        modelPower: ''high'',\n        temperature: 0.7,\n        maxTokens: 1500\n      });\n      \n      if (result?.success && result?.result) {\n        setAiInsights(result.result);\n      } else {\n        setInsightsError(''Failed to generate insights. Please try again.'');\n      }\n    } catch (error) {\n      setInsightsError(error.message || ''Failed to generate AI insights'');\n    } finally {\n      setLoadingInsights(false);\n    }\n  };\n\n  const prepareTrendData = () => {\n    const monthlyData = {};\n    \n    invoices.forEach(inv => {\n      const month = new Date(inv.InvoiceDate).toLocaleDateString(''en-US'', { year: ''numeric'', month: ''short'' });\n      if (!monthlyData[month]) {\n        monthlyData[month] = { revenue: 0, invoices: 0, deals: 0 };\n      }\n      monthlyData[month].revenue += inv.TotalAmount || 0;\n      monthlyData[month].invoices++;\n    });\n    \n    deals.forEach(deal => {\n      const month = new Date(deal.CloseDate).toLocaleDateString(''en-US'', { year: ''numeric'', month: ''short'' });\n      if (!monthlyData[month]) {\n        monthlyData[month] = { revenue: 0, invoices: 0, deals: 0 };\n      }\n      monthlyData[month].deals += deal.Amount || 0;\n    });\n    \n    return Object.entries(monthlyData)\n      .sort((a, b) => new Date(a[0]) - new Date(b[0]))\n      .map(([month, data]) => ({\n        month,\n        revenue: data.revenue,\n        deals: data.deals,\n        total: data.revenue + data.deals\n      }));\n  };\n\n  const formatCurrency = (amount) => {\n    if (amount >= 1000000) return `$$' + '{(amount / 1000000).toFixed(1)}M`;\n    if (amount >= 1000) return `$$' + '{(amount / 1000).toFixed(0)}K`;\n    return `$$' + '{amount?.toFixed(0) || 0}`;\n  };\n\n  // Sub-component: KPI Gauges\n  const KPIGauges = () => {\n    useEffect(() => {\n      if (!loading && chartRefs.current.marginGauge && chartRefs.current.utilizationGauge) {\n        const gaugeOptions = {\n          chart: {\n            type: ''radialBar'',\n            height: 200\n          },\n          plotOptions: {\n            radialBar: {\n              startAngle: -90,\n              endAngle: 90,\n              hollow: {\n                margin: 15,\n                size: ''70%'',\n                background: ''#fff''\n              },\n              dataLabels: {\n                name: {\n                  show: true,\n                  offsetY: -10\n                },\n                value: {\n                  show: true,\n                  fontSize: ''20px'',\n                  fontWeight: ''bold'',\n                  formatter: (val) => `$' + '{val.toFixed(0)}%`\n                }\n              }\n            }\n          },\n          fill: {\n            type: ''gradient'',\n            gradient: {\n              shade: ''dark'',\n              shadeIntensity: 0.15,\n              stops: [0, 100]\n            }\n          },\n          stroke: {\n            dashArray: 4\n          }\n        };\n\n        const marginGauge = new ApexCharts(chartRefs.current.marginGauge, {\n          ...gaugeOptions,\n          series: [metrics.grossMargin],\n          labels: [''Gross Margin''],\n          colors: [''#10B981'']\n        });\n        marginGauge.render();\n\n        const utilizationGauge = new ApexCharts(chartRefs.current.utilizationGauge, {\n          ...gaugeOptions,\n          series: [75],\n          labels: [''Utilization''],\n          colors: [''#3B82F6'']\n        });\n        utilizationGauge.render();\n\n        return () => {\n          marginGauge.destroy();\n          utilizationGauge.destroy();\n        };\n      }\n    }, [loading]);\n\n    return (\n      <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(2, 1fr)'', gap: ''20px'' }}>\n        <div ref={el => chartRefs.current.marginGauge = el}></div>\n        <div ref={el => chartRefs.current.utilizationGauge = el}></div>\n      </div>\n    );\n  };\n\n  // Sub-component: Revenue Trend Chart\n  const RevenueTrendChart = () => {\n    const trendData = prepareTrendData();\n    \n    useEffect(() => {\n      if (!loading && chartRefs.current.trendChart && trendData.length > 0) {\n        const chart = new ApexCharts(chartRefs.current.trendChart, {\n          chart: {\n            type: ''area'',\n            height: 350,\n            toolbar: {\n              show: false\n            }\n          },\n          series: [\n            {\n              name: ''Invoice Revenue'',\n              data: trendData.map(d => d.revenue)\n            },\n            {\n              name: ''Deal Revenue'',\n              data: trendData.map(d => d.deals)\n            }\n          ],\n          xaxis: {\n            categories: trendData.map(d => d.month)\n          },\n          yaxis: {\n            labels: {\n              formatter: (val) => formatCurrency(val)\n            }\n          },\n          colors: [''#3B82F6'', ''#8B5CF6''],\n          fill: {\n            type: ''gradient'',\n            gradient: {\n              shadeIntensity: 1,\n              opacityFrom: 0.7,\n              opacityTo: 0.2\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          stroke: {\n            curve: ''smooth'',\n            width: 2\n          },\n          tooltip: {\n            y: {\n              formatter: (val) => formatCurrency(val)\n            }\n          }\n        });\n        chart.render();\n\n        return () => chart.destroy();\n      }\n    }, [loading, trendData]);\n\n    return <div ref={el => chartRefs.current.trendChart = el}></div>;\n  };\n\n  // Sub-component: Cash Flow Chart\n  const CashFlowChart = () => {\n    useEffect(() => {\n      if (!loading && chartRefs.current.cashFlowChart) {\n        const categories = [''Revenue'', ''Expenses'', ''Outstanding'', ''Net Cash''];\n        const data = [\n          metrics.actualRevenue,\n          -metrics.outstandingRevenue * 0.6,\n          -metrics.outstandingRevenue * 0.4,\n          metrics.cashFlow\n        ];\n\n        const chart = new ApexCharts(chartRefs.current.cashFlowChart, {\n          chart: {\n            type: ''bar'',\n            height: 300\n          },\n          series: [{\n            name: ''Cash Flow'',\n            data: data\n          }],\n          xaxis: {\n            categories: categories\n          },\n          yaxis: {\n            labels: {\n              formatter: (val) => formatCurrency(Math.abs(val))\n            }\n          },\n          colors: [''#10B981''],\n          plotOptions: {\n            bar: {\n              colors: {\n                ranges: [{\n                  from: -1000000000,\n                  to: 0,\n                  color: ''#EF4444''\n                }]\n              }\n            }\n          },\n          dataLabels: {\n            enabled: true,\n            formatter: (val) => formatCurrency(val)\n          },\n          tooltip: {\n            y: {\n              formatter: (val) => formatCurrency(val)\n            }\n          }\n        });\n        chart.render();\n\n        return () => chart.destroy();\n      }\n    }, [loading]);\n\n    return <div ref={el => chartRefs.current.cashFlowChart = el}></div>;\n  };\n\n  // Sub-component: Forecast Model\n  const ForecastModel = () => {\n    const generateForecast = () => {\n      const historicalData = prepareTrendData();\n      const lastValue = historicalData[historicalData.length - 1]?.total || 0;\n      const growthRate = 1.05; // 5% growth\n      \n      return Array.from({ length: 6 }, (_, i) => ({\n        month: `Month +$' + '{i + 1}`,\n        forecast: lastValue * Math.pow(growthRate, i + 1),\n        confidence: 90 - (i * 10)\n      }));\n    };\n\n    const forecastData = generateForecast();\n\n    useEffect(() => {\n      if (!loading && chartRefs.current.forecastChart) {\n        const chart = new ApexCharts(chartRefs.current.forecastChart, {\n          chart: {\n            type: ''line'',\n            height: 300,\n            toolbar: {\n              show: false\n            }\n          },\n          series: [{\n            name: ''Forecast'',\n            data: forecastData.map(d => d.forecast)\n          }],\n          xaxis: {\n            categories: forecastData.map(d => d.month)\n          },\n          yaxis: {\n            labels: {\n              formatter: (val) => formatCurrency(val)\n            }\n          },\n          colors: [''#F59E0B''],\n          stroke: {\n            curve: ''smooth'',\n            width: 3,\n            dashArray: 5\n          },\n          markers: {\n            size: 6\n          },\n          dataLabels: {\n            enabled: false\n          },\n          tooltip: {\n            y: {\n              formatter: (val, opts) => {\n                const confidence = forecastData[opts.dataPointIndex]?.confidence || 0;\n                return `$' + '{formatCurrency(val)} ($' + '{confidence}% confidence)`;\n              }\n            }\n          }\n        });\n        chart.render();\n\n        return () => chart.destroy();\n      }\n    }, [loading]);\n\n    return <div ref={el => chartRefs.current.forecastChart = el}></div>;\n  };\n\n  // Sub-component: Details Panel\n  const DetailsPanel = () => {\n    if (!selectedMetric) return null;\n\n    return (\n      <div\n        style={{\n          position: ''fixed'',\n          right: isPanelOpen ? 0 : ''-500px'',\n          top: 0,\n          bottom: 0,\n          width: ''500px'',\n          backgroundColor: ''white'',\n          boxShadow: ''-4px 0 20px rgba(0,0,0,0.1)'',\n          zIndex: 1000,\n          transition: ''right 0.3s ease'',\n          display: ''flex'',\n          flexDirection: ''column''\n        }}\n      >\n        <div style={{\n          padding: ''20px'',\n          borderBottom: ''1px solid #E5E7EB'',\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''center''\n        }}>\n          <h3 style={{ margin: 0 }}>{selectedMetric.title}</h3>\n          <button\n            onClick={() => setIsPanelOpen(false)}\n            style={{\n              background: ''none'',\n              border: ''none'',\n              fontSize: ''24px'',\n              cursor: ''pointer''\n            }}\n          >\n            ×\n          </button>\n        </div>\n        \n        <div style={{ flex: 1, overflow: ''auto'', padding: ''20px'' }}>\n          <div style={{ marginBottom: ''20px'' }}>\n            <h4>Analysis</h4>\n            <p>{selectedMetric.analysis}</p>\n          </div>\n          \n          <div style={{ marginBottom: ''20px'' }}>\n            <h4>Recommendations</h4>\n            <ul>\n              {selectedMetric.recommendations?.map((rec, i) => (\n                <li key={i}>{rec}</li>\n              ))}\n            </ul>\n          </div>\n          \n          <div style={{ display: ''flex'', gap: ''10px'' }}>\n            {DataExportPanel ? (\n              <DataExportPanel\n                data={prepareExportData()}\n                columns={getExportColumns()}\n                htmlElement={dashboardRef.current}\n                filename={`financial-report-$' + '{new Date().toISOString().split(''T'')[0]}`}\n                formats={[''csv'', ''excel'', ''pdf'']}\n                buttonStyle=\"menu\"\n                pdfOptions={{\n                  orientation: ''landscape'',\n                  pageSize: ''a4'',\n                  margins: { top: 40, bottom: 40, left: 40, right: 40 },\n                  title: ''Financial Analytics Report'',\n                  includeDataTable: true,\n                  multiPage: true  // Enable multi-page support for tall dashboards\n                }}\n                excelOptions={{\n                  sheetName: ''Financial Data'',\n                  includeFilters: true,\n                  autoWidth: true\n                }}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            ) : null}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Prepare data for export\n  const prepareExportData = () => {\n    // Return empty array if data is not loaded\n    if (!invoices || invoices.length === 0) {\n      return [];\n    }\n    \n    const metrics = calculateMetrics();\n    const monthlyTrends = prepareTrendData();\n    \n    // Combine all financial data into a flat structure for export\n    const exportData = [];\n    \n    // Add monthly revenue data\n    monthlyTrends.forEach(month => {\n      exportData.push({\n        category: ''Monthly Revenue'',\n        date: month.month,\n        metric: ''Invoice Revenue'',\n        value: month.revenue,\n        type: ''Actual''\n      });\n      exportData.push({\n        category: ''Monthly Revenue'',\n        date: month.month,\n        metric: ''Deal Revenue'',\n        value: month.deals,\n        type: ''Projected''\n      });\n    });\n    \n    // Add summary metrics\n    const currentDate = new Date().toISOString().split(''T'')[0];\n    exportData.push(\n      {\n        category: ''Summary'',\n        date: currentDate,\n        metric: ''Total Revenue'',\n        value: metrics.totalRevenue,\n        type: ''Combined''\n      },\n      {\n        category: ''Summary'',\n        date: currentDate,\n        metric: ''Actual Revenue'',\n        value: metrics.actualRevenue,\n        type: ''Actual''\n      },\n      {\n        category: ''Summary'',\n        date: currentDate,\n        metric: ''Projected Revenue'',\n        value: metrics.projectedRevenue,\n        type: ''Projected''\n      },\n      {\n        category: ''Summary'',\n        date: currentDate,\n        metric: ''Outstanding Revenue'',\n        value: metrics.outstandingRevenue,\n        type: ''Outstanding''\n      },\n      {\n        category: ''Summary'',\n        date: currentDate,\n        metric: ''Average Deal Size'',\n        value: metrics.avgDealSize,\n        type: ''Calculated''\n      },\n      {\n        category: ''Summary'',\n        date: currentDate,\n        metric: ''Gross Margin'',\n        value: metrics.grossMargin,\n        type: ''Percentage''\n      },\n      {\n        category: ''Summary'',\n        date: currentDate,\n        metric: ''Revenue Growth'',\n        value: metrics.revenueGrowth,\n        type: ''Percentage''\n      }\n    );\n    \n    // Add top invoices\n    const topInvoices = invoices\n      .filter(inv => inv.Status === ''Paid'')\n      .sort((a, b) => (b.TotalAmount || 0) - (a.TotalAmount || 0))\n      .slice(0, 5);\n      \n    topInvoices.forEach(invoice => {\n      exportData.push({\n        category: ''Top Invoices'',\n        date: invoice.InvoiceDate,\n        metric: `Invoice #$' + '{invoice.ID}`,\n        value: invoice.TotalAmount,\n        type: ''Invoice''\n      });\n    });\n    \n    return exportData;\n  };\n  \n  // Get export columns configuration\n  const getExportColumns = () => {\n    return [\n      { key: ''category'', label: ''Category'', type: ''string'' },\n      { key: ''date'', label: ''Date'', type: ''date'' },\n      { key: ''metric'', label: ''Metric'', type: ''string'' },\n      { key: ''value'', label: ''Value'', type: ''currency'' },\n      { key: ''type'', label: ''Type'', type: ''string'' }\n    ];\n  };\n\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading financial data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''20px'', backgroundColor: ''#FEE2E2'', borderRadius: ''8px'', margin: ''20px'' }}>\n        <div style={{ color: ''#991B1B'', fontWeight: ''bold'' }}>Error loading data</div>\n        <div style={{ color: ''#DC2626'', marginTop: ''8px'' }}>{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div ref={(el) => {\n      dashboardRef.current = el;\n      console.log(''Dashboard ref callback:'', el);\n    }} style={{ height: ''100%'', display: ''flex'', flexDirection: ''column'' }}>\n      <style>{`\n        .ai-insights-content h1, .ai-insights-content h2, .ai-insights-content h3 {\n          margin-top: 16px;\n          margin-bottom: 8px;\n          color: #111827;\n        }\n        .ai-insights-content h1 { font-size: 1.5em; }\n        .ai-insights-content h2 { font-size: 1.3em; }\n        .ai-insights-content h3 { font-size: 1.1em; }\n        .ai-insights-content p {\n          margin: 8px 0;\n          line-height: 1.6;\n          color: #374151;\n        }\n        .ai-insights-content ul, .ai-insights-content ol {\n          margin: 8px 0;\n          padding-left: 24px;\n        }\n        .ai-insights-content li {\n          margin: 4px 0;\n          color: #374151;\n        }\n        .ai-insights-content strong {\n          color: #111827;\n          font-weight: 600;\n        }\n        .ai-insights-content code {\n          background: #F3F4F6;\n          padding: 2px 6px;\n          border-radius: 3px;\n          font-size: 0.9em;\n        }\n        .ai-insights-content blockquote {\n          border-left: 4px solid #3B82F6;\n          padding-left: 16px;\n          margin: 12px 0;\n          color: #4B5563;\n        }\n      `}</style>\n      \n      <div style={{ padding: ''20px'', borderBottom: ''1px solid #E5E7EB'' }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''20px'' }}>\n          <h2 style={{ margin: 0, fontSize: ''24px'', fontWeight: ''bold'' }}>Financial Analytics</h2>\n          <div style={{ display: ''flex'', gap: ''12px'', alignItems: ''center'' }}>\n            <select\n              value={timeRange}\n              onChange={(e) => {\n                setTimeRange(e.target.value);\n                onSaveUserSettings({ ...savedUserSettings, timeRange: e.target.value });\n              }}\n              style={{\n                padding: ''8px 12px'',\n                border: ''1px solid #D1D5DB'',\n                borderRadius: ''6px''\n              }}\n            >\n              <option value=\"month\">Last Month</option>\n              <option value=\"quarter\">Last Quarter</option>\n              <option value=\"year\">Last Year</option>\n            </select>\n            \n            {/* AI Insights Button */}\n            <button\n              onClick={generateAIInsights}\n              disabled={loadingInsights || loading}\n              style={{\n                padding: ''8px 16px'',\n                backgroundColor: ''#3B82F6'',\n                color: ''white'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: loadingInsights || loading ? ''not-allowed'' : ''pointer'',\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: ''8px'',\n                opacity: loadingInsights || loading ? 0.6 : 1\n              }}\n            >\n              <i className={`fa-solid fa-$' + '{loadingInsights ? ''spinner fa-spin'' : ''wand-magic-sparkles''}`}></i>\n              {loadingInsights ? ''Analyzing...'' : ''Get AI Insights''}\n            </button>\n            \n            {/* Export Button - hidden during PDF capture */}\n            <div className=\"no-print\">\n              {DataExportPanel ? (\n                console.log(''Rendering DataExportPanel with:'', {\n                  dashboardRef: dashboardRef,\n                  dashboardRefCurrent: dashboardRef.current,\n                  dashboardRefExists: !!dashboardRef.current,\n                  aiInsights: !!aiInsights,\n                  aiInsightsRef: aiInsightsRef,\n                  aiInsightsRefCurrent: aiInsightsRef.current\n                }) ||\n                <DataExportPanel\n                  data={prepareExportData()}\n                  columns={getExportColumns()}\n                  getHtmlElement={() => dashboardRef.current}\n                  aiInsightsText={aiInsights}  // Pass raw markdown text only\n                  filename={`financial-report-$' + '{new Date().toISOString().split(''T'')[0]}`}\n                  formats={[''csv'', ''excel'', ''pdf'']}\n                  buttonStyle=\"dropdown\"\n                  buttonText=\"Export\"\n                  icon=\"fa-download\"\n                  pdfOptions={{\n                    orientation: ''landscape'',\n                    pageSize: ''a4'',\n                    margins: { top: 40, bottom: 40, left: 40, right: 40 },\n                    title: ''Financial Analytics Report'',\n                    includeDataTable: true,\n                    multiPage: true  // Enable multi-page support for tall dashboards\n                  }}\n                  excelOptions={{\n                    sheetName: ''Financial Data'',\n                    includeFilters: true,\n                    autoWidth: true\n                  }}\n                  utilities={utilities}\n                  styles={styles}\n                  components={components}\n                  callbacks={callbacks}\n                />\n              ) : null}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* AI Insights Panel */}\n      <div ref={(el) => {\n        aiInsightsRef.current = el;\n        console.log(''AI Insights ref callback:'', el);\n      }}>\n      {AIInsightsPanel ? (\n        <AIInsightsPanel\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n          savedUserSettings={savedUserSettings?.aiInsights}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            aiInsights: settings\n          })}\n          insights={aiInsights}\n          loading={loadingInsights}\n          error={insightsError}\n          onGenerate={generateAIInsights}\n          title=\"Financial Analytics Insights\"\n          icon=\"fa-wand-magic-sparkles\"\n          iconColor={styles?.colors?.primary || ''#8B5CF6''}\n          position=\"top\"\n          onClose={() => {\n            setAiInsights(null);\n            setInsightsError(null);\n          }}\n        />\n      ) : null}\n      </div>\n      \n      <div style={{ margin: ''20px'' }}>\n        <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(5, 1fr)'', gap: ''16px'' }}>\n          <div \n            style={{ \n              padding: ''16px'', \n              backgroundColor: ''#F9FAFB'', \n              borderRadius: ''8px'',\n              cursor: ''pointer''\n            }}\n            onClick={() => {\n              const relevantData = [\n                ...invoices.filter(inv => inv.Status === ''Paid'').map(inv => ({...inv, Type: ''Paid Invoice'', EntityType: ''Invoices'', DisplayAmount: inv.TotalAmount})),\n                ...deals.filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage)).map(d => ({...d, Type: ''Projected Deal'', EntityType: ''Deals'', DisplayAmount: (d.Amount || 0) * (d.Probability || 0) / 100}))\n              ];\n              setDrillDownData(relevantData);\n              setDrillDownTitle(''Total Revenue Breakdown'');\n            }}\n          >\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Total Revenue</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#10B981'' }}>\n              {formatCurrency(metrics.totalRevenue)}\n            </div>\n          </div>\n          \n          <div \n            style={{ \n              padding: ''16px'', \n              backgroundColor: ''#F9FAFB'', \n              borderRadius: ''8px'',\n              cursor: ''pointer''\n            }}\n            onClick={() => {\n              const paidInvoices = invoices.filter(inv => inv.Status === ''Paid'').map(inv => ({...inv, Type: ''Paid Invoice'', EntityType: ''Invoices'', DisplayAmount: inv.TotalAmount}));\n              setDrillDownData(paidInvoices);\n              setDrillDownTitle(''Actual Revenue - Paid Invoices'');\n            }}\n          >\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Actual Revenue</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'' }}>\n              {formatCurrency(metrics.actualRevenue)}\n            </div>\n          </div>\n          \n          <div style={{ padding: ''16px'', backgroundColor: ''#F9FAFB'', borderRadius: ''8px'' }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Projected</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#F59E0B'' }}>\n              {formatCurrency(metrics.projectedRevenue)}\n            </div>\n          </div>\n          \n          <div \n            style={{ \n              padding: ''16px'', \n              backgroundColor: ''#F9FAFB'', \n              borderRadius: ''8px'',\n              cursor: ''pointer''\n            }}\n            onClick={() => {\n              const unpaidInvoices = invoices.filter(inv => inv.Status !== ''Paid'' && inv.Status !== ''Cancelled'').map(inv => ({...inv, Type: ''Unpaid Invoice'', EntityType: ''Invoices'', DisplayAmount: inv.TotalAmount}));\n              setDrillDownData(unpaidInvoices);\n              setDrillDownTitle(''Outstanding Revenue - Unpaid Invoices'');\n            }}\n          >\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Outstanding</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#EF4444'' }}>\n              {formatCurrency(metrics.outstandingRevenue)}\n            </div>\n          </div>\n          \n          <div style={{ padding: ''16px'', backgroundColor: ''#F9FAFB'', borderRadius: ''8px'' }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Avg Deal Size</div>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'' }}>\n              {formatCurrency(metrics.avgDealSize)}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div style={{ flex: 1, overflow: ''auto'', padding: ''20px'' }}>\n        <div style={{ display: ''grid'', gridTemplateColumns: ''2fr 1fr'', gap: ''20px'', marginBottom: ''20px'' }}>\n          <div style={{ backgroundColor: ''white'', padding: ''20px'', borderRadius: ''8px'', border: ''1px solid #E5E7EB'' }}>\n            <h3 style={{ marginTop: 0 }}>Revenue Trend</h3>\n            <RevenueTrendChart />\n          </div>\n          <div style={{ backgroundColor: ''white'', padding: ''20px'', borderRadius: ''8px'', border: ''1px solid #E5E7EB'' }}>\n            <h3 style={{ marginTop: 0 }}>KPI Gauges</h3>\n            <KPIGauges />\n          </div>\n        </div>\n        \n        <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''20px'' }}>\n          <div style={{ backgroundColor: ''white'', padding: ''20px'', borderRadius: ''8px'', border: ''1px solid #E5E7EB'' }}>\n            <h3 style={{ marginTop: 0 }}>Cash Flow Analysis</h3>\n            <CashFlowChart />\n          </div>\n          <div style={{ backgroundColor: ''white'', padding: ''20px'', borderRadius: ''8px'', border: ''1px solid #E5E7EB'' }}>\n            <h3 style={{ marginTop: 0 }}>Revenue Forecast</h3>\n            <ForecastModel />\n          </div>\n        </div>\n      </div>\n      \n      {/* Drill-down Table */}\n      {drillDownData && (\n        <DrillDownTable \n          data={drillDownData}\n          title={drillDownTitle}\n          onClose={() => setDrillDownData(null)}\n          sortConfig={sortConfig}\n          setSortConfig={setSortConfig}\n          callbacks={callbacks}\n        />\n      )}\n      \n      <DetailsPanel />\n    </div>\n  );\n}\n\n// Drill-down Table Component\nfunction DrillDownTable({ data, title, onClose, sortConfig, setSortConfig, callbacks }) {\n  const formatCurrency = (value) => {\n    if (!value) return ''$0'';\n    if (value >= 1000000) return `$$' + '{(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$$' + '{(value / 1000).toFixed(0)}K`;\n    return `$$' + '{value.toFixed(0)}`;\n  };\n\n  const formatDate = (date) => {\n    if (!date) return ''N/A'';\n    return new Date(date).toLocaleDateString();\n  };\n\n  const sortedData = [...data].sort((a, b) => {\n    const aValue = a[sortConfig.key];\n    const bValue = b[sortConfig.key];\n    \n    if (aValue === null || aValue === undefined) return 1;\n    if (bValue === null || bValue === undefined) return -1;\n    \n    if (sortConfig.direction === ''asc'') {\n      return aValue > bValue ? 1 : -1;\n    } else {\n      return aValue < bValue ? 1 : -1;\n    }\n  });\n\n  const handleSort = (key) => {\n    setSortConfig({\n      key,\n      direction: sortConfig.key === key && sortConfig.direction === ''desc'' ? ''asc'' : ''desc''\n    });\n  };\n\n  return (\n    <div style={{\n      backgroundColor: ''white'',\n      borderRadius: ''8px'',\n      padding: ''20px'',\n      margin: ''20px'',\n      border: ''1px solid #E5E7EB'',\n      boxShadow: ''0 4px 6px rgba(0, 0, 0, 0.1)''\n    }}>\n      <div style={{ \n        display: ''flex'', \n        justifyContent: ''space-between'', \n        alignItems: ''center'',\n        marginBottom: ''16px''\n      }}>\n        <h3 style={{ margin: 0, fontSize: ''18px'', fontWeight: ''bold'' }}>\n          {title} ({data.length} records)\n        </h3>\n        <button\n          onClick={onClose}\n          style={{\n            background: ''none'',\n            border: ''none'',\n            fontSize: ''24px'',\n            cursor: ''pointer'',\n            color: ''#6B7280''\n          }}\n        >\n          <i className=\"fa-solid fa-times\"></i>\n        </button>\n      </div>\n\n      <div style={{ overflowX: ''auto'' }}>\n        <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n          <thead>\n            <tr style={{ borderBottom: ''2px solid #E5E7EB'' }}>\n              <th \n                onClick={() => handleSort(''Type'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''left'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Type {sortConfig.key === ''Type'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => handleSort(''InvoiceNumber'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''left'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Reference {sortConfig.key === ''InvoiceNumber'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => handleSort(''InvoiceDate'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''left'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Date {sortConfig.key === ''InvoiceDate'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => handleSort(''DisplayAmount'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''right'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Amount {sortConfig.key === ''DisplayAmount'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th \n                onClick={() => handleSort(''Status'')}\n                style={{ \n                  padding: ''12px 8px'', \n                  textAlign: ''left'', \n                  cursor: ''pointer'',\n                  fontSize: ''12px'',\n                  fontWeight: ''600'',\n                  color: ''#374151'',\n                  textTransform: ''uppercase''\n                }}\n              >\n                Status {sortConfig.key === ''Status'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n              </th>\n              <th style={{ \n                padding: ''12px 8px'', \n                textAlign: ''center'',\n                fontSize: ''12px'',\n                fontWeight: ''600'',\n                color: ''#374151'',\n                textTransform: ''uppercase''\n              }}>\n                Action\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedData.map((item, index) => (\n              <tr \n                key={item.ID || index}\n                style={{ \n                  borderBottom: ''1px solid #F3F4F6'',\n                  transition: ''background-color 0.2s''\n                }}\n                onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F9FAFB''}\n                onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}\n              >\n                <td style={{ padding: ''12px 8px'', fontSize: ''14px'' }}>\n                  <span style={{\n                    padding: ''2px 8px'',\n                    backgroundColor: item.Type === ''Paid Invoice'' ? ''#D1FAE5'' : \n                                     item.Type === ''Unpaid Invoice'' ? ''#FEE2E2'' : \n                                     item.Type === ''Projected Deal'' ? ''#FEF3C7'' : ''#E5E7EB'',\n                    color: item.Type === ''Paid Invoice'' ? ''#065F46'' : \n                           item.Type === ''Unpaid Invoice'' ? ''#991B1B'' : \n                           item.Type === ''Projected Deal'' ? ''#92400E'' : ''#374151'',\n                    borderRadius: ''4px'',\n                    fontSize: ''12px''\n                  }}>\n                    {item.Type}\n                  </span>\n                </td>\n                <td style={{ padding: ''12px 8px'', fontSize: ''14px'' }}>\n                  {item.InvoiceNumber || item.DealName || item.ProductName || ''-''}\n                </td>\n                <td style={{ padding: ''12px 8px'', fontSize: ''14px'', color: ''#6B7280'' }}>\n                  {formatDate(item.InvoiceDate || item.CloseDate || item.CreatedAt)}\n                </td>\n                <td style={{ padding: ''12px 8px'', textAlign: ''right'', fontSize: ''14px'', fontWeight: ''500'' }}>\n                  {formatCurrency(item.DisplayAmount || item.TotalAmount || item.Amount || item.Price)}\n                </td>\n                <td style={{ padding: ''12px 8px'', fontSize: ''14px'' }}>\n                  <span style={{\n                    padding: ''2px 8px'',\n                    backgroundColor: item.Status === ''Paid'' ? ''#D1FAE5'' : \n                                     item.Status === ''Pending'' ? ''#FEF3C7'' : \n                                     item.Stage === ''Closed Won'' ? ''#D1FAE5'' :\n                                     item.Stage === ''Closed Lost'' ? ''#FEE2E2'' : ''#E5E7EB'',\n                    color: item.Status === ''Paid'' ? ''#065F46'' : \n                           item.Status === ''Pending'' ? ''#92400E'' : \n                           item.Stage === ''Closed Won'' ? ''#065F46'' :\n                           item.Stage === ''Closed Lost'' ? ''#991B1B'' : ''#374151'',\n                    borderRadius: ''4px'',\n                    fontSize: ''12px''\n                  }}>\n                    {item.Status || item.Stage || ''Active''}\n                  </span>\n                </td>\n                <td style={{ padding: ''12px 8px'', textAlign: ''center'' }}>\n                  <button\n                    onClick={() => {\n                      if (callbacks && callbacks.OpenEntityRecord) {\n                        callbacks.OpenEntityRecord(item.EntityType, [{ FieldName: ''ID'', Value: item.ID }]);\n                      }\n                    }}\n                    style={{\n                      background: ''none'',\n                      border: ''none'',\n                      color: ''#4F46E5'',\n                      cursor: ''pointer'',\n                      fontSize: ''16px'',\n                      padding: ''4px''\n                    }}\n                    title=\"Open Record\"\n                  >\n                    <i className=\"fa-solid fa-arrow-up-right-from-square\"></i>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Financial Analytics Dashboard\n\n### Purpose\nComprehensive financial overview with revenue trends, forecasting, and profitability analysis.\n\n### Core Features\n- **Revenue Trends**: Historical and projected revenue\n- **Cash Flow Analysis**: Income vs expenses tracking\n- **Profitability Metrics**: Margin analysis by product/customer\n- **Forecast Modeling**: AI-powered predictions\n- **Budget vs Actual**: Variance analysis\n- **Interactive Gauges**: Using Recharts for KPIs\n- **Slide-out Reports**: Detailed financial reports\n- **Export Options**: PDF and Excel export\n\n### Visualizations\n- Area charts for revenue trends\n- Gauge charts for KPIs\n- Waterfall charts for P&L\n- Scatter plots for correlation analysis","dataRequirements":{"mode":"views","entities":[{"name":"Invoices","displayFields":["InvoiceDate","TotalAmount","Status"],"filterFields":["InvoiceDate","Status"],"sortFields":["InvoiceDate"]},{"name":"Deals","displayFields":["CloseDate","Amount","Stage","Probability"],"filterFields":["CloseDate","Stage"],"sortFields":["CloseDate"]},{"name":"Products","displayFields":["ProductName","Price","Cost"]}]},"technicalDesign":"## Implementation\n\n### Components\n- Main: FinancialAnalyticsDashboard\n- Sub-components:\n  - RevenueTrend: Time series analysis\n  - CashFlowChart: Income/expense flow\n  - ProfitabilityMatrix: Margin analysis\n  - ForecastModel: Predictive analytics\n  - KPIGauges: Performance indicators\n\n### Features\n- Real-time calculations\n- Statistical forecasting\n- Responsive charts\n- Export functionality","properties":[],"events":[],"dependencies":[{"name":"AIInsightsPanel","location":"registry","namespace":"Generic/UI/AI","version":"^1.0.0"},{"name":"DataExportPanel","location":"registry","namespace":"Generic/UI/Export","version":"^1.0.0"}],"libraries":[{"name":"ApexCharts","version":"^3.45.1","globalVariable":"ApexCharts"}]}'
SET
  @FunctionalRequirements_4337bc89 = N'## Financial Analytics Dashboard

### Purpose
Comprehensive financial overview with revenue trends, forecasting, and profitability analysis.

### Core Features
- **Revenue Trends**: Historical and projected revenue
- **Cash Flow Analysis**: Income vs expenses tracking
- **Profitability Metrics**: Margin analysis by product/customer
- **Forecast Modeling**: AI-powered predictions
- **Budget vs Actual**: Variance analysis
- **Interactive Gauges**: Using Recharts for KPIs
- **Slide-out Reports**: Detailed financial reports
- **Export Options**: PDF and Excel export

### Visualizations
- Area charts for revenue trends
- Gauge charts for KPIs
- Waterfall charts for P&L
- Scatter plots for correlation analysis'
SET
  @TechnicalDesign_4337bc89 = N'## Implementation

### Components
- Main: FinancialAnalyticsDashboard
- Sub-components:
  - RevenueTrend: Time series analysis
  - CashFlowChart: Income/expense flow
  - ProfitabilityMatrix: Margin analysis
  - ForecastModel: Predictive analytics
  - KPIGauges: Performance indicators

### Features
- Real-time calculations
- Statistical forecasting
- Responsive charts
- Export functionality'
SET
  @FunctionalRequirementsVector_4337bc89 = N'[-0.021724209189414978,0.040304772555828094,-0.04737601801753044,-0.041482336819171906,0.0461697056889534,-0.007708494085818529,0.01211797446012497,0.009684460237622261,-0.012995067052543163,0.009251639246940613,-0.02729739248752594,0.026332316920161247,0.03809896484017372,0.1499064713716507,0.0008865866111591458,-0.007705338764935732,-0.04074190929532051,0.009886367246508598,0.016858678311109543,0.028603892773389816,0.012986060231924057,-0.004082102794200182,-0.00031464945641346276,0.012744138948619366,-0.03351142629981041,-0.006880532018840313,-0.007791449781507254,-0.016810420900583267,-0.012573366984724998,-0.037427738308906555,0.006999874021857977,-0.02970661036670208,-0.023646889254450798,0.03575611859560013,0.0000024327657683897996,-0.031534917652606964,-0.05011288821697235,-0.0015512759564444423,-0.024990618228912354,0.054604873061180115,0.054855458438396454,-0.052355363965034485,0.022116852924227715,0.033901482820510864,0.024249492213129997,0.028165901079773903,-0.009336594492197037,0.07338147610425949,-0.018909012898802757,-0.051590390503406525,-0.013917787000536919,-0.05926067754626274,-0.040630560368299484,-0.02395709604024887,-0.04553288593888283,-0.0765158087015152,-0.02773933857679367,-0.006813318468630314,-0.03076467290520668,-0.09100835025310516,-0.0311994981020689,0.022231433540582657,0.00207254895940423,-0.011595468968153,0.07647880911827087,0.040645286440849304,0.04612501710653305,-0.043596088886260986,-0.0295054130256176,-0.01939806155860424,0.03127818927168846,0.004320782143622637,-0.004078710917383432,-0.028370950371026993,0.017050987109541893,-0.07198160141706467,-0.051008038222789764,-0.006617799401283264,0.010935354977846146,0.001249216846190393,-0.06358592212200165,0.026616360992193222,-0.019748391583561897,0.018674790859222412,0.0153439836576581,-0.05155624821782112,-0.02901453897356987,-0.007636681664735079,0.010313780978322029,0.008164997212588787,0.025792425498366356,0.022043509408831596,-0.023239532485604286,-0.02946441061794758,-0.030953535810112953,-0.01167857926338911,0.05153129994869232,-0.059543076902627945,0.010367784649133682,-0.030611183494329453,0.06671711802482605,0.004849710967391729,0.011562090367078781,0.06673270463943481,-0.00238456716760993,0.04046967253088951,-0.005124295596033335,-0.0744669958949089,0.025140006095170975,0.02296166867017746,0.03792450204491615,-0.012150993570685387,0.01285391952842474,0.024592505767941475,0.00018152692064177245,-0.004575769882649183,-0.043151210993528366,-0.013668997213244438,-0.04738260433077812,0.019354939460754395,0.05889448896050453,0.04360504075884819,0.0684916153550148,0.021560553461313248,-0.0024083973839879036,-0.003305270103737712,-0.05701921135187149,0.029119916260242462,-0.05225663259625435,-0.011915100738406181,-0.017116466537117958,-0.013937031850218773,-0.0140836201608181,0.008911010809242725,0.02923845499753952,0.048578232526779175,0.014685927890241146,0.031146129593253136,-0.04227765277028084,-0.015220352448523045,0.02240980602800846,0.008820091374218464,-0.04133708029985428,0.06607503443956375,0.05364713817834854,-0.024722358211874962,-0.02614380605518818,0.06440196931362152,-0.007281832862645388,-0.016613874584436417,-0.0011166747426614165,-0.035445380955934525,0.011317510157823563,0.008560271002352238,0.000814076280221343,-0.04266897961497307,0.03096855990588665,0.01889176107943058,-0.004113655537366867,-0.009208347648382187,0.014967274852097034,-0.02192547544836998,-0.00821039266884327,0.00737999752163887,0.016814852133393288,-0.03810429200530052,-0.05484669655561447,-0.0006330753676593304,-0.061069101095199585,-0.04576434940099716,-0.010034048929810524,-0.03993094339966774,0.03195442259311676,0.006786377169191837,0.005953773856163025,-0.013463572598993778,0.08121702820062637,-0.00896087009459734,-0.019576478749513626,-0.021259592846035957,0.020145749673247337,-0.15981073677539825,0.046716634184122086,0.03534896671772003,0.0038744353223592043,0.007138805463910103,-0.04980603605508804,0.02250858023762703,-0.021637529134750366,-0.009584208019077778,0.00024301663506776094,0.022957319393754005,-0.09879256784915924,0.04366420954465866,0.0018846357706934214,-0.004414000082761049,-0.003991107456386089,-0.04038657248020172,0.007684809155762196,-0.0514775812625885,-0.01163524854928255,-0.00940773356705904,0.1117844507098198,0.04219604283571243,0.0335623137652874,-0.047755397856235504,-0.009363447315990925,-0.03107798658311367,-0.052367568016052246,0.004723438527435064,0.018192877992987633,0.01696278713643551,-0.018599139526486397,0.009727168828248978,-0.01621858775615692,0.009825309738516808,0.03946084529161453,0.02099381946027279,-0.017140697687864304,0.024561163038015366,-0.010232712142169476,0.01293993555009365,0.011246824637055397,0.028874635696411133,0.06631631404161453,0.064866803586483,0.060783326625823975,0.0039141373708844185,0.06606195867061615,0.03362075611948967,-0.011982864700257778,0.02644042670726776,0.025257533416152,0.004970346577465534,0.05526420474052429,0.049597520381212234,0.13076677918434143,0.07955944538116455,-0.01805488020181656,0.02475743368268013,0.02585434727370739,-0.025897914543747902,-0.061147116124629974,-0.0013672348577529192,0.043023377656936646,-0.02840149588882923,-0.019183576107025146,0.014651517383754253,-0.01006618607789278,-0.011349586769938469,0.04750560596585274,0.05120360478758812,0.03152613714337349,0.01674746349453926,-0.007160819601267576,-0.03300235792994499,-0.03740060329437256,-0.04728832095861435,0.01113501563668251,0.09406086057424545,-0.02358890138566494,-0.04702179878950119,-0.021478597074747086,0.0004900844651274383,-0.0378364622592926,-0.05102326720952988,0.04573584720492363,-0.015859752893447876,-0.05397995933890343,0.05763457342982292,-0.0466294139623642,0.003781812032684684,-0.01430012658238411,-0.029433846473693848,-0.00925325695425272,0.0639297291636467,-0.05790742114186287,0.0043094577267766,-0.049808088690042496,-0.026737600564956665,-0.005337143782526255,0.023529235273599625,0.00871261116117239,0.0019135684706270695,-0.0094427689909935,0.012002835050225258,0.08981890231370926,-0.050521135330200195,0.03834443539381027,-0.03686169162392616,-0.0005608424544334412,-0.02018887922167778,0.004081763792783022,0.05173041298985481,-0.05011608079075813,-0.006034431513398886,-0.014644145034253597,0.019433341920375824,0.002842675196006894,0.01579376496374607,-0.06599220633506775,-0.0450914204120636,-0.01682395674288273,0.011888588778674603,0.002948958892375231,0.053765032440423965,0.061477180570364,0.009831647388637066,0.04153931885957718,-0.007402931805700064,-0.0028736151289194822,-0.01475565042346716,-0.04574843868613243,0.01556426752358675,0.0010495217284187675,-0.0020396816544234753,-0.022157708182930946,0.035619571805000305,-0.003174722893163562,0.0649726614356041,0.02417847141623497,-0.008833622559905052,-0.042887020856142044,0.00761692738160491,0.0020514645148068666,0.026510994881391525,-0.024910273030400276,-0.03097526729106903,-0.028276197612285614,-0.044971294701099396,-0.014906803146004677,-0.08415602892637253,-0.03474712371826172,0.035106949508190155,-0.002668777946382761,-0.02784981019794941,-0.019032061100006104,0.02757427655160427,0.02016880176961422,-0.05140656977891922,0.010118741542100906,0.0608249194920063,-0.04216263070702553,-0.028917888179421425,0.002675418509170413,-0.03367312625050545,0.04414448142051697,-0.008181874640285969,-0.06339897215366364,0.019062131643295288,0.026677170768380165,0.015405702404677868,0.001035000546835363,0.000016603411495452747,0.049784958362579346,-0.0546782948076725,-0.043390948325395584,0.006513162516057491,-0.006873674225062132,-0.05251152440905571,0.039886943995952606,-0.014635083265602589,-0.0006685618427582085,0.001646393327973783,0.030058108270168304,0.013035783544182777,-0.031742312014102936,0.007854038849473,0.040131766349077225,-0.004242361523211002,-0.03058702126145363,-0.004652516916394234,0.036692216992378235,0.01762387342751026,-0.010150681249797344,-0.02107193134725094,-0.004301790613681078,0.02368994615972042,-0.0023597704712301493,-0.00565449008718133,0.0421559140086174,0.024783864617347717,0.03711351007223129,0.0015751359751448035,0.07794396579265594,-0.0031593041494488716,-0.04008938744664192,-0.03119485266506672,-0.0646618902683258,0.027987489476799965,0.004256913438439369,-0.002038602251559496,-0.0384833961725235,-0.031888797879219055,0.0002323580556549132,-0.058743979781866074,-0.009758071042597294,-0.009710827842354774,-0.019952910020947456,0.009458347223699093,0.03151962533593178,-0.13967643678188324,-0.03205285593867302,-0.047497596591711044,0.0044602155685424805,-0.08650463074445724,0.019620325416326523,0.015521524474024773,-0.07580370455980301,0.02709231898188591,-0.06752682477235794,-0.003643638454377651,0.02079041674733162,-0.04168561100959778,0.053523626178503036,0.015156987123191357,-0.021899759769439697,0.02368885651230812,0.03629809617996216,0.0751538798213005,0.0654609426856041,0.048747289925813675,-0.008120441809296608,-0.01020493172109127,0.01061353087425232,-0.0004695890820585191,0.059915319085121155,-0.08064308762550354,0.008753052912652493,-0.00008804523531580344,-0.016061371192336082,0.00609763665124774,-0.037765320390462875,0.005257114302366972,-0.07907868176698685,0.03382495418190956,0.019271407276391983,0.011425165459513664,-0.11186400800943375,-0.012344220653176308,-0.013750342652201653,0.04584719240665436,-0.012731319293379784,-0.0024701403453946114,-0.020263737067580223,-0.01148455124348402,0.03292460739612579,-0.022680507972836494,-0.04667090252041817,0.020307481288909912,0.06057894229888916,-0.023635171353816986,0.03210372105240822,-0.025325313210487366,0.014319286681711674,-0.034101225435733795,0.08752448111772537,-0.02518445812165737,-0.0010682963766157627,0.008804013952612877,0.043220970779657364,-0.0010188763262704015,-0.07399545609951019,-0.015991810709238052,0.06840456277132034,-0.008320563472807407,0.022454435005784035,-0.05930129811167717,-0.049993064254522324,-0.014692967757582664,0.05455947294831276,-0.015326233580708504,-0.009169395081698895,0.0005137674743309617,-0.014834503643214703,-0.002654455602169037,0.02352677471935749,0.01979486271739006,0.024980925023555756,-0.010482218116521835,-0.004807941149920225,0.0074915229342877865,0.01747167855501175,-0.023940538987517357,-0.019393010064959526,-0.013019959442317486,-0.010963646695017815,-0.0008778188494034111,-0.018506519496440887,-0.017371773719787598,0.051971226930618286,-0.0044349245727062225,-0.0024258247576653957,0.07199535518884659,-0.0109431566670537,-0.09913299977779388,0.0063515580259263515,-0.005748974159359932,-0.03976716846227646,0.03375707194209099,-0.03886745870113373,0.006977951154112816,0.01971481740474701,-0.10980972647666931,-0.014881000854074955,0.00027132497052662075,0.029033998027443886,-0.01041056215763092,-0.019074592739343643,0.03289780393242836,0.0038686685729771852,-0.0038848298136144876,0.039168696850538254,-0.020955385640263557,0.04143867641687393,0.009634468704462051,-0.020958052948117256,-0.002157533308491111,0.005274855997413397,-0.03611515089869499,0.004815511871129274,0.028462957590818405,0.00844167172908783,-0.0032202231232076883,0.025324614718556404,-0.018489180132746696,-0.005132261663675308,-0.06330198049545288,-0.04770314320921898,0.05042829364538193,-0.0020832386799156666,-0.01600668765604496,-0.06451676785945892,0.01546745840460062,-0.03923290595412254,0.005030615255236626,0.06740424782037735,0.008189955726265907,-0.003802022198215127,0.04533829912543297,-0.0341864638030529,0.006688348017632961,0.04016469046473503,-0.05446232482790947,-0.019928688183426857,-0.005565009079873562,-0.024166874587535858,-0.016806060448288918,0.007672842592000961,0.004325176123529673,-0.00010954710160149261,-0.022027937695384026,-0.06242590770125389,-0.004855029750615358,-0.037651583552360535,-6.914132140577951e-33,-0.02275414764881134,0.0042986623011529446,-0.05153988301753998,-0.013479702174663544,-0.043606240302324295,-0.020309731364250183,0.020109178498387337,-0.01502696517854929,-0.044805627316236496,-0.006694325711578131,-0.0422917865216732,0.03439091145992279,0.01327585056424141,0.02803965099155903,0.04148732125759125,0.017138471826910973,-0.00600492674857378,-0.006578228902071714,0.016993656754493713,0.00990939699113369,-0.027682295069098473,0.06367463618516922,-0.006649698596447706,-0.048125021159648895,-0.008220115676522255,0.03813868761062622,-0.03376581519842148,0.03718049079179764,0.033235836774110794,0.03339352086186409,0.017221031710505486,-0.04225920885801315,-0.01799629256129265,-0.017055844888091087,-0.007893375121057034,-0.005061726551502943,0.031585920602083206,-0.03822162374854088,0.017954399809241295,0.011523433960974216,0.05399276316165924,0.02733328565955162,0.025339297950267792,0.007227649912238121,-0.0026367101818323135,-0.018885673955082893,0.03356943279504776,-0.0085111940279603,0.0010240280535072088,-0.010215342044830322,0.008746844716370106,0.0032525770366191864,-0.05569057539105415,0.09369882941246033,0.02442353218793869,0.11326684057712555,-0.0031454104464501143,-0.013585245236754417,-0.012277701869606972,-0.003728745738044381,-0.04388326033949852,-0.038205698132514954,-0.01303627248853445,0.052604541182518005,0.026439322158694267,0.013901589438319206,-0.013958889059722424,-0.0009723564726300538,-0.049929749220609665,0.0041351024992764,-0.017966629937291145,0.0327223464846611,0.0491955541074276,-0.061262961477041245,-0.06394677609205246,-0.032560884952545166,0.007121772039681673,0.03057321533560753,0.03877649083733559,0.04196204990148544,-0.009358084760606289,-0.03617985546588898,-0.009413633495569229,-0.015669923275709152,0.09632141888141632,0.018269704654812813,-0.012038744986057281,0.008869260549545288,0.02824568562209606,0.03225605934858322,-0.01696273311972618,0.006466696038842201,-0.032368071377277374,-0.02803230844438076,-0.026048388332128525,0.012388450093567371,0.05743896961212158,0.024172969162464142,0.03579976037144661,-0.032541338354349136,-0.010097258724272251,0.006622420158237219,-0.04615556448698044,0.03661193698644638,-0.016215968877077103,-0.06392841786146164,0.04869019612669945,-0.022705022245645523,-0.028776343911886215,0.033911313861608505,0.037697844207286835,0.04502219334244728,0.011499143205583096,-0.004338737577199936,-0.009001832455396652,0.031731411814689636,-0.008687229827046394,-0.021526580676436424,0.028408830985426903,0.040391065180301666,0.045236460864543915,-0.0018105485942214727,-0.003666045842692256,0.005457860883325338,0.02226736582815647,-0.02936321310698986,-0.01563980244100094,-0.002387488493695855,0.04316839575767517,-0.010393830947577953,-0.040114399045705795,-0.02326694130897522,3.1410473866344546e-7,0.040351398289203644,0.021745625883340836,-0.022698931396007538,0.01711759902536869,0.01788495108485222,0.005330878309905529,-0.013472537510097027,-0.0317792110145092,-0.019051600247621536,0.07136678695678711,0.054328545928001404,-0.01907484419643879,0.023665394634008408,0.02882249839603901,0.000010223020581179298,-0.07376660406589508,-0.05052958428859711,-0.003963406663388014,-0.06365825235843658,0.044113390147686005,-0.005751042626798153,0.044842638075351715,0.058544643223285675,0.0030146900098770857,0.02668260969221592,-0.016581926494836807,-0.03789084032177925,-0.011909734457731247,0.022029194980859756,-0.0014720936305820942,0.025883100926876068,0.0610855408012867,-0.06801525503396988,-0.025238102301955223,-0.024322835728526115,0.024978259578347206,-0.005578172393143177,-0.046654243022203445,0.024927441030740738,0.037561096251010895,0.03311364725232124,0.020105376839637756,-0.01861528307199478,-0.06607405841350555,0.015033982694149017,0.00936961267143488,-0.009238723665475845,-0.026431700214743614,0.037173591554164886,0.042425431311130524,0.013772503472864628,-0.0078765032812953,-0.0020054634660482407,-0.021327758207917213,0.02683834545314312,-0.014972039498388767,-0.003174053505063057,0.006200528237968683,0.02053189091384411,0.08008421957492828,-0.02413995750248432,0.06573747843503952,0.0021729315631091595,0.07902835309505463,0.04279542714357376,0.0030650042463093996,0.029300091788172722,2.9017557890515593e-34,0.029876887798309326,-0.023029223084449768,0.04441024735569954,-0.005705880466848612,0.04987259954214096,-0.02803797833621502,0.021512994542717934,0.030003948137164116,0.0003241582599002868,-0.0353345163166523,-0.009564907290041447]'
SET
  @TechnicalDesignVector_4337bc89 = N'[-0.019179195165634155,0.045231301337480545,-0.04428224265575409,-0.06829584389925003,0.00895322673022747,0.00529170036315918,0.045255523175001144,0.019453775137662888,-0.0610012412071228,-0.0021294299513101578,-0.013865921646356583,0.01886884681880474,0.03396998345851898,0.15188325941562653,-0.0018479276914149523,-0.009430053643882275,-0.009574961848556995,-0.00493136839941144,-0.021821219474077225,0.002911714604124427,0.030028298497200012,0.0018203326035290956,0.0145338149741292,0.0006639501079916954,-0.0170986820012331,0.0008775494643487036,-0.021319406107068062,-0.008828128688037395,-0.004332272335886955,-0.0712493509054184,0.01967337355017662,0.0019856176804751158,-0.05567527189850807,0.009696783497929573,0.000002295287686138181,-0.0032872536685317755,-0.05457605421543121,0.012536056339740753,0.025935184210538864,0.01440458558499813,0.07263553142547607,-0.08114859461784363,0.03160805627703667,-0.011356583796441555,0.0009571730624884367,0.006039243657141924,-0.00366069539450109,0.09001541137695312,0.044149644672870636,-0.021647188812494278,0.008061659522354603,-0.04360143840312958,-0.013822166249155998,-0.0052741169929504395,0.012802688404917717,-0.06211715191602707,-0.010861203074455261,-0.00924436841160059,0.01573330909013748,-0.04413498938083649,-0.015382835641503334,-0.019031016156077385,0.007375400047749281,-0.044942185282707214,0.10241100192070007,0.03267735615372658,0.07202719151973724,-0.051984045654535294,-0.020919306203722954,-0.006922443863004446,0.0831025019288063,0.005016177427023649,0.010487296618521214,-0.009184599854052067,-0.009504948742687702,-0.03669256716966629,-0.022769533097743988,0.014276106841862202,-0.001777875004336238,-0.023628657683730125,-0.024405833333730698,0.005772056058049202,-0.05882323533296585,-0.0025556471664458513,0.014160387217998505,0.015510188415646553,-0.016346702352166176,-0.0383475199341774,0.05503712594509125,0.008591365069150925,0.01797611266374588,0.024447578936815262,-0.03536900132894516,-0.021323187276721,-0.009417853318154812,-0.008943740278482437,0.02938273176550865,-0.08075061440467834,0.005523955915123224,-0.023907605558633804,0.058390963822603226,0.023184169083833694,0.04175058379769325,0.02081344462931156,0.0075462618842720985,0.0625256672501564,-0.020846905186772346,-0.07352953404188156,0.007039803545922041,0.019443605095148087,-0.013129841536283493,-0.015949787572026253,0.011267142370343208,0.06983601301908493,0.0030641197226941586,0.03185764700174332,-0.02893739938735962,-0.005848820321261883,-0.034913718700408936,0.03197271749377251,0.08358073234558105,0.0031924666836857796,-0.0006112961564213037,0.037010446190834045,0.05283715948462486,-0.024037476629018784,-0.01962079294025898,-0.012002585455775261,-0.025859346613287926,0.022304942831397057,-0.007686554454267025,-0.025767061859369278,-0.02070632018148899,-0.01313015352934599,0.005073240026831627,0.006839480716735125,0.01859278790652752,0.018771685659885406,-0.00555172236636281,-0.024293813854455948,-0.0015199175104498863,-0.016918014734983444,-0.07058826088905334,0.0198625810444355,-0.004058280494064093,-0.028446463868021965,-0.026521215215325356,0.07345578819513321,0.009564129635691643,0.003585387719795108,0.008743243291974068,-0.004730939399451017,0.006898057647049427,-0.003089725272729993,-0.02539217099547386,-0.02660340443253517,0.02780894748866558,0.03779919072985649,-0.020707517862319946,-0.019334767013788223,0.001712506404146552,-0.004283227026462555,0.010337979532778263,-0.009076750837266445,-0.015463322401046753,-0.05411938205361366,-0.1258290708065033,0.016534719616174698,-0.020075390115380287,-0.07981013506650925,-0.02339733950793743,-0.05407882109284401,0.03000986948609352,0.008640805259346962,-0.002310936339199543,-0.027573246508836746,0.0742512196302414,0.032234542071819305,-0.020891601219773293,-0.054220255464315414,0.036535609513521194,-0.16927677392959595,0.055467188358306885,0.02042134664952755,0.05149172991514206,-0.0036628441885113716,-0.10734406858682632,0.051188912242650986,-0.0012156914453953505,0.008403355255723,-0.00028225540881976485,0.022877948358654976,-0.11705908179283142,0.01292751356959343,0.01757548749446869,0.002098567085340619,-0.0013085842365399003,-0.007771244738250971,0.03677523136138916,-0.04688150808215141,-0.010495901107788086,0.014219516888260841,0.09055572003126144,0.036782316863536835,0.01589832454919815,-0.0524044893682003,0.025995152071118355,-0.023531004786491394,-0.05579226091504097,0.022570563480257988,-0.011133159510791302,0.012637032195925713,-0.061991434544324875,0.011028305627405643,-0.004945044871419668,0.02967681735754013,0.038566235452890396,0.03786267340183258,-0.03548391908407211,-0.020427364856004715,-0.024899907410144806,-0.015293783508241177,0.008317165076732635,0.026620961725711823,0.059609171003103256,0.057277172803878784,0.054359011352062225,-0.03357826918363571,0.043851613998413086,0.03876258060336113,-0.04977525770664215,-0.0029469376895576715,0.02147953398525715,0.008404447697103024,0.032623421400785446,0.050902243703603745,0.09443708509206772,0.06898963451385498,-0.021793540567159653,-0.02175500988960266,0.006626829970628023,0.026665493845939636,-0.00800994224846363,0.025807993486523628,0.0240017119795084,-0.04680581018328667,-0.033826541155576706,-0.02173268236219883,-0.010050324723124504,-0.044649071991443634,0.030072716996073723,0.04956967756152153,0.02396467886865139,0.0020739948377013206,-0.0015541200991719961,-0.015320057980716228,-0.04243050888180733,-0.03635330870747566,0.04315834492444992,0.044682834297418594,0.005041522905230522,-0.03687501326203346,0.007796663325279951,0.00223294785246253,0.0033608018420636654,-0.007799582090228796,0.01632881723344326,0.006036728620529175,-0.024492308497428894,0.049004264175891876,0.00802535004913807,0.02502223663032055,0.00046058488078415394,-0.006988321430981159,0.0256195105612278,0.07900825887918472,-0.07626881450414658,-0.00812155194580555,-0.01700977236032486,-0.02913692221045494,-0.03889823704957962,0.006844963412731886,0.019157912582159042,-0.017923880368471146,-0.00773649150505662,0.04547775164246559,0.04997677728533745,-0.023923641070723534,0.026143433526158333,-0.05269906297326088,-0.005625152960419655,-0.03331318125128746,0.013937024399638176,0.009848898276686668,-0.03576302155852318,-0.020396674051880836,-0.024008387699723244,0.028189152479171753,-0.011036902666091919,0.05658179894089699,-0.039983008056879044,-0.035431429743766785,0.0041673071682453156,0.011160039342939854,-0.0208099577575922,0.05275193601846695,0.05021481588482857,0.015651779249310493,0.017696959897875786,0.051909491419792175,0.008385722525417805,-0.012236382812261581,-0.028692834079265594,0.014577771537005901,0.00030026628519408405,-0.009744304232299328,0.023411281406879425,0.007801292929798365,-0.0058312732726335526,0.04816487431526184,0.020152973011136055,-0.013267265632748604,-0.04102204367518425,-0.0006219520000740886,-0.04946459084749222,-0.00246380059979856,-0.04076357185840607,-0.015424727462232113,-0.0535920113325119,-0.04287710040807724,-0.002130333799868822,-0.040220193564891815,-0.02673073299229145,0.01970910280942917,0.007379095070064068,-0.016088394448161125,-0.010673873126506805,-0.006046549882739782,0.061121080070734024,-0.013395166024565697,0.031364791095256805,0.0496981255710125,-0.0226735919713974,-0.005672982428222895,-0.0038989796303212643,-0.003166144248098135,0.019202759489417076,-0.021723343059420586,-0.1041489690542221,0.052770763635635376,0.03203939273953438,-0.015361668542027473,-0.03108825907111168,-0.015683729201555252,0.031029867008328438,-0.03599665313959122,-0.021235743537545204,-0.032446444034576416,-0.025575239211320877,-0.05388931930065155,0.08974479883909225,-0.009665393270552158,-0.010391566902399063,0.03537581488490105,0.011821732856333256,0.01877422071993351,-0.012733960524201393,0.0019328960916027427,0.01646888628602028,-0.03983018547296524,-0.06577451527118683,-0.010338821448385715,-0.022031528875231743,0.04328589513897896,-0.013337992131710052,-0.03354281559586525,-0.00808040052652359,0.028030890971422195,-0.008524718694388866,-0.021360818296670914,0.04810784012079239,0.00933383870869875,0.054771605879068375,0.003457417944446206,0.07374747097492218,-0.0018573998240754008,-0.02340267039835453,-0.02323361299932003,-0.057117871940135956,0.045681845396757126,0.020501086488366127,-0.039085522294044495,-0.043704159557819366,-0.06489523500204086,-0.017706822603940964,-0.05050968378782272,-0.054812487214803696,0.019005106762051582,-0.004427457693964243,0.028572609648108482,0.0035780626349151134,-0.1304859220981598,-0.017438653856515884,-0.04087843745946884,0.044268567115068436,-0.10322251915931702,0.008366474881768227,0.027438363060355186,-0.05176683887839317,0.01067678164690733,-0.04976876452565193,-0.07109040021896362,-0.008495576679706573,-0.05866708606481552,-0.000341740291332826,0.010974627919495106,-0.017909888178110123,0.02456647902727127,0.03868970647454262,0.04865701124072075,0.05328011512756348,0.02152818813920021,0.019685637205839157,-0.01414667908102274,-0.008464624173939228,-0.033612266182899475,0.06581193953752518,-0.08459991216659546,-0.008918015286326408,-0.0025428745429962873,0.007274008821696043,-0.009713083505630493,-0.009768770076334476,-0.007248993963003159,-0.06370899826288223,0.0074542611837387085,0.016690118238329887,0.012082192115485668,-0.06971416622400284,-0.023785986006259918,0.002177889458835125,0.015373904258012772,0.06279619038105011,-0.0179684367030859,-0.02854500152170658,-0.036669742316007614,0.009594925679266453,-0.03770526126027107,-0.07403814047574997,0.01711330935359001,0.03253720700740814,0.004460921511054039,-0.0077748848125338554,-0.0026043038815259933,-0.009417057037353516,-0.059708546847105026,0.01807810738682747,0.0056775580160319805,-0.04959685727953911,0.05509420484304428,0.031699832528829575,0.024040453135967255,-0.05834357813000679,-0.021722177043557167,0.0652742013335228,0.006212112959474325,0.07166154682636261,-0.02556457370519638,-0.0155734121799469,-0.014817011542618275,0.008111965842545033,0.00990966521203518,-0.039782632142305374,-0.012550891377031803,0.027222543954849243,-0.0044282423332333565,0.0009941374883055687,0.02457672357559204,-0.013813303783535957,-0.03935813903808594,-0.009502590633928776,0.0326504148542881,0.016229843720793724,-0.08667000383138657,0.016666961833834648,0.025920487940311432,0.018894415348768234,-0.011889080516994,-0.009920863434672356,-0.018538933247327805,0.04312838241457939,-0.005583375692367554,-0.0028246776200830936,0.11121796816587448,0.019412366673350334,-0.06708540767431259,0.020437391474843025,-0.0016000528121367097,-0.02353500761091709,0.021628860384225845,-0.04165099933743477,-0.0053950087167322636,-0.020715687423944473,-0.107869952917099,-0.016251102089881897,-0.006300026550889015,0.03926011547446251,0.0034857706632465124,-0.03431488201022148,0.006436704192310572,0.0034283383283764124,-0.027673736214637756,-0.021529188379645348,-0.010645324364304543,0.02813519909977913,0.04351786896586418,-0.020981041714549065,0.010733311995863914,-0.004526139236986637,-0.022796539589762688,0.018448255956172943,0.020006535574793816,0.019796017557382584,-0.025448361411690712,0.05437334254384041,0.03167476877570152,-0.0030289599671959877,-0.03648114204406738,-0.03616431728005409,0.04582377150654793,0.002728454302996397,-0.0018330245511606336,-0.041857410222291946,-0.0008167411433532834,-0.03513536974787712,0.013581321574747562,0.062195923179388046,0.012028796598315239,-0.02150072157382965,-0.008067641407251358,-0.06426404416561127,0.009013636969029903,0.083376944065094,-0.02270423248410225,-0.026294397190213203,-0.01988784223794937,0.0009429783676750958,-0.021757343783974648,0.022068999707698822,0.041397225111722946,0.010753404349088669,-0.05892535299062729,-0.07635252177715302,-0.0016601413954049349,-0.0013945909449830651,-6.796208751355367e-33,-0.017166556790471077,0.002512523904442787,-0.054324839264154434,0.03901999071240425,-0.05397113040089607,-0.024813147261738777,0.029419751837849617,-0.04138542711734772,0.011436309665441513,-0.004222590010613203,-0.0016156922793015838,-0.004329771734774113,0.01004146970808506,0.012017498724162579,0.041260458528995514,0.015597602352499962,-0.0023406913969665766,0.0039006220176815987,0.023860281333327293,0.047158777713775635,-0.0016981823137030005,0.06799037754535675,0.015651248395442963,-0.00785829871892929,-0.02786516211926937,0.010540856048464775,-0.013310643844306469,0.03704679012298584,0.013131888583302498,0.044232383370399475,0.015397976152598858,-0.04243520647287369,-0.03636087849736214,-0.035009510815143585,-0.010442421771585941,-0.00713111087679863,0.02351120486855507,-0.027402294799685478,0.03365469351410866,0.013245661742985249,0.0657825917005539,0.013717460446059704,0.026253720745444298,0.00971281249076128,0.015617966651916504,-0.032723568379879,0.03514330834150314,0.025386447086930275,-0.00963100977241993,-0.03309062123298645,-0.02665788307785988,0.006863738875836134,-0.007784535177052021,0.09935255348682404,0.03886914998292923,0.08987116068601608,-0.00983512308448553,-0.016264189034700394,0.016837812960147858,-0.0021538815926760435,0.002046807436272502,-0.016688060015439987,-0.015886524692177773,0.03537474945187569,0.02809716947376728,0.012111485935747623,0.015068688429892063,0.03280015289783478,0.0000877528145792894,0.008726217783987522,0.010141583159565926,0.034020185470581055,0.06785950064659119,-0.04698657616972923,-0.029012147337198257,0.012255935929715633,0.01722058653831482,0.023502716794610023,0.013843419030308723,0.0680534690618515,0.004817227367311716,-0.052738990634679794,0.02925870753824711,-0.012960250489413738,0.06113719195127487,-0.001629031146876514,-0.003957449458539486,0.0075398716144263744,0.011588395573198795,0.02781502716243267,-0.028244061395525932,0.020954666659235954,-0.025724973529577255,0.0025774722453206778,0.01501185167580843,-0.01065320335328579,0.06695443391799927,0.03023478388786316,0.013732129707932472,-0.02698543667793274,-0.01449400931596756,0.013297547586262226,-0.02292048931121826,0.036449138075113297,-0.014742828905582428,-0.032317910343408585,0.040893882513046265,0.003539560828357935,-0.05409367382526398,-0.010566974990069866,0.008337611332535744,0.06201097369194031,-0.020139625295996666,0.011232336051762104,0.002449022838845849,0.016300635412335396,-0.006379158701747656,-0.012066817842423916,0.0008310906705446541,0.03035232052206993,0.03732840716838837,0.03570951893925667,0.02390396036207676,0.02669086866080761,0.03921665996313095,-0.03174435719847679,-0.01912364922463894,0.011481589637696743,-0.003333497792482376,-0.00917254202067852,-0.031296513974666595,0.0034506982192397118,3.2101431202136155e-7,-0.001219938974827528,0.023450367152690887,-0.04512994363903999,0.0075409067794680595,0.04139571636915207,-0.024188349023461342,-0.01786934770643711,-0.018651893362402916,-0.04238976910710335,0.017025168985128403,0.05340315029025078,-0.02418731525540352,0.036692261695861816,0.03062359243631363,0.005643021780997515,-0.038684744387865067,-0.08381617814302444,-0.030820991843938828,-0.06559569388628006,0.0072916410863399506,0.009680896066129208,0.029754173010587692,0.0331181064248085,0.013601751998066902,-0.0028142265509814024,0.02243507094681263,-0.0071377139538526535,-0.002654489828273654,0.045399196445941925,-0.005281677469611168,0.03086504526436329,0.07088158279657364,-0.05933334678411484,-0.018032914027571678,-0.009694820269942284,0.011956357397139072,-0.010397965088486671,-0.04408876970410347,-0.006893589626997709,0.09249728173017502,0.05479510501027107,0.030692683532834053,-0.02165493369102478,-0.06011584401130676,0.03170144185423851,0.010635140351951122,0.007090832572430372,-0.06979841738939285,-0.03670689836144447,0.023978983983397484,-0.0049571809358894825,-0.008816694840788841,-0.0011165767209604383,-0.014863879419863224,-0.000910526723600924,-0.007349271792918444,-0.007202439941465855,0.05562429502606392,0.014988604001700878,0.09017312526702881,-0.01705189421772957,0.019971271976828575,-0.008525347337126732,0.11275531351566315,0.06272464990615845,-0.02314874529838562,0.011827358044683933,3.937564447208955e-34,0.035315100103616714,-0.03226267546415329,0.017715632915496826,0.042161982506513596,0.030208494514226913,-0.025664377957582474,-0.0013602845137938857,0.01698007620871067,-0.023543991148471832,-0.062160130590200424,-0.004176707938313484]'
SET
  @HasCustomProps_4337bc89 = 0
SET
  @HasCustomEvents_4337bc89 = 0
SET
  @RequiresData_4337bc89 = 1
SET
  @DependencyCount_4337bc89 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_4337bc89 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_4337bc89 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_4337bc89 = 0
SET
  @ID_4337bc89 = 'D06D4A6B-F272-445D-8839-E5D1A4253381'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_4337bc89,
  @Name = @Name_4337bc89,
  @Version = @Version_4337bc89,
  @VersionSequence = @VersionSequence_4337bc89,
  @Title = @Title_4337bc89,
  @Description = @Description_4337bc89,
  @Type = @Type_4337bc89,
  @Status = @Status_4337bc89,
  @DeveloperName = @DeveloperName_4337bc89,
  @DeveloperEmail = @DeveloperEmail_4337bc89,
  @DeveloperOrganization = @DeveloperOrganization_4337bc89,
  @SourceRegistryID = @SourceRegistryID_4337bc89,
  @ReplicatedAt = @ReplicatedAt_4337bc89,
  @LastSyncedAt = @LastSyncedAt_4337bc89,
  @Specification = @Specification_4337bc89,
  @FunctionalRequirements = @FunctionalRequirements_4337bc89,
  @TechnicalDesign = @TechnicalDesign_4337bc89,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_4337bc89,
  @TechnicalDesignVector = @TechnicalDesignVector_4337bc89,
  @HasCustomProps = @HasCustomProps_4337bc89,
  @HasCustomEvents = @HasCustomEvents_4337bc89,
  @RequiresData = @RequiresData_4337bc89,
  @DependencyCount = @DependencyCount_4337bc89,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_4337bc89,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_4337bc89,
  @HasRequiredCustomProps = @HasRequiredCustomProps_4337bc89,
  @ID = @ID_4337bc89;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_b9592325 NVARCHAR(MAX),
@Name_b9592325 NVARCHAR(500),
@Version_b9592325 NVARCHAR(50),
@VersionSequence_b9592325 INT,
@Title_b9592325 NVARCHAR(1000),
@Description_b9592325 NVARCHAR(MAX),
@Type_b9592325 NVARCHAR(255),
@Status_b9592325 NVARCHAR(50),
@DeveloperName_b9592325 NVARCHAR(255),
@DeveloperEmail_b9592325 NVARCHAR(255),
@DeveloperOrganization_b9592325 NVARCHAR(255),
@SourceRegistryID_b9592325 UNIQUEIDENTIFIER,
@ReplicatedAt_b9592325 DATETIMEOFFSET,
@LastSyncedAt_b9592325 DATETIMEOFFSET,
@Specification_b9592325 NVARCHAR(MAX),
@FunctionalRequirements_b9592325 NVARCHAR(MAX),
@TechnicalDesign_b9592325 NVARCHAR(MAX),
@FunctionalRequirementsVector_b9592325 NVARCHAR(MAX),
@TechnicalDesignVector_b9592325 NVARCHAR(MAX),
@HasCustomProps_b9592325 BIT,
@HasCustomEvents_b9592325 BIT,
@RequiresData_b9592325 BIT,
@DependencyCount_b9592325 INT,
@TechnicalDesignVectorEmbeddingModelID_b9592325 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_b9592325 NVARCHAR(MAX),
@HasRequiredCustomProps_b9592325 BIT,
@ID_b9592325 UNIQUEIDENTIFIER
SET
  @Namespace_b9592325 = N'CRM/Analytics'
SET
  @Name_b9592325 = N'WinLossAnalysis'
SET
  @Version_b9592325 = N'1.0.0'
SET
  @VersionSequence_b9592325 = 1
SET
  @Title_b9592325 = N'Win/Loss Analysis'
SET
  @Description_b9592325 = N'Analyze patterns in won and lost deals to identify success factors and improvement areas with AI-powered insights'
SET
  @Type_b9592325 = N'Chart'
SET
  @Status_b9592325 = N'Published'
SET
  @Specification_b9592325 = N'{"name":"WinLossAnalysis","namespace":"CRM/Analytics","type":"Analysis","location":"embedded","code":"function WinLossAnalysis({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Load DataExportPanel component\n  const DataExportPanel = components[''DataExportPanel''];\n  \n  // Debug logging\n  console.log(''🔍 [WinLossAnalysis] Components available:'', Object.keys(components || {}));\n  console.log(''🔍 [WinLossAnalysis] DataExportPanel loaded:'', !!DataExportPanel);\n  \n  const [deals, setDeals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''overview'');\n  const [timeRange, setTimeRange] = useState(savedUserSettings?.timeRange || ''quarter'');\n  const [selectedFactor, setSelectedFactor] = useState(null);\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n  const [drillDownData, setDrillDownData] = useState(null);\n  const [drillDownType, setDrillDownType] = useState(null);\n  const [filterReason, setFilterReason] = useState(''all'');\n  const [sortConfig, setSortConfig] = useState({ key: ''CloseDate'', direction: ''desc'' });\n  \n  const componentRef = useRef(null);\n  const gridRef = useRef(null);\n  const chartRefs = useRef({});\n\n  useEffect(() => {\n    loadDeals();\n  }, [timeRange]);\n\n  const loadDeals = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const dateFilter = getDateFilter();\n      const result = await utilities.rv.RunView({\n        EntityName: ''Deals'',\n        ExtraFilter: dateFilter ? `CloseDate >= ''$' + '{dateFilter}'' AND Stage IN (''Closed Won'', ''Closed Lost'')` : `Stage IN (''Closed Won'', ''Closed Lost'')`,\n        OrderBy: ''CloseDate DESC''\n      });\n\n      if (result.Success) {\n        setDeals(result.Results || []);\n      } else {\n        setError(result.ErrorMessage || ''Failed to load deals'');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDateFilter = () => {\n    const now = new Date();\n    let months = 3;\n    \n    switch (timeRange) {\n      case ''month'': months = 1; break;\n      case ''quarter'': months = 3; break;\n      case ''year'': months = 12; break;\n      case ''all'': return null;\n      default: months = 3;\n    }\n    \n    const startDate = new Date(now.setMonth(now.getMonth() - months));\n    return startDate.toISOString().split(''T'')[0];\n  };\n\n  // Helper function to get filtered deals based on current filter\n  const getFilteredDeals = () => {\n    return deals.filter(d => {\n      if (filterReason !== ''all'' && d.LossReason !== filterReason) return false;\n      return true;\n    });\n  };\n\n  const calculateWinLossMetrics = () => {\n    const filteredDeals = getFilteredDeals();\n\n    const wonDeals = filteredDeals.filter(d => d.Stage === ''Closed Won'');\n    const lostDeals = filteredDeals.filter(d => d.Stage === ''Closed Lost'');\n    \n    const metrics = {\n      totalDeals: filteredDeals.length,\n      wonCount: wonDeals.length,\n      lostCount: lostDeals.length,\n      winRate: filteredDeals.length > 0 ? (wonDeals.length / filteredDeals.length * 100) : 0,\n      wonValue: wonDeals.reduce((sum, d) => sum + (d.Amount || 0), 0),\n      lostValue: lostDeals.reduce((sum, d) => sum + (d.Amount || 0), 0),\n      avgWonDealSize: wonDeals.length > 0 ? wonDeals.reduce((sum, d) => sum + (d.Amount || 0), 0) / wonDeals.length : 0,\n      avgLostDealSize: lostDeals.length > 0 ? lostDeals.reduce((sum, d) => sum + (d.Amount || 0), 0) / lostDeals.length : 0,\n      avgCycleTime: {\n        won: 0,\n        lost: 0\n      }\n    };\n    \n    // Calculate average cycle times\n    const wonCycleTimes = wonDeals.map(d => {\n      const created = new Date(d.CreatedAt || d.__mj_CreatedAt);\n      const closed = new Date(d.CloseDate);\n      return Math.floor((closed - created) / (1000 * 60 * 60 * 24));\n    });\n    \n    const lostCycleTimes = lostDeals.map(d => {\n      const created = new Date(d.CreatedAt || d.__mj_CreatedAt);\n      const closed = new Date(d.CloseDate);\n      return Math.floor((closed - created) / (1000 * 60 * 60 * 24));\n    });\n    \n    metrics.avgCycleTime.won = wonCycleTimes.length > 0 ? \n      Math.round(wonCycleTimes.reduce((a, b) => a + b, 0) / wonCycleTimes.length) : 0;\n    metrics.avgCycleTime.lost = lostCycleTimes.length > 0 ?\n      Math.round(lostCycleTimes.reduce((a, b) => a + b, 0) / lostCycleTimes.length) : 0;\n    \n    \n    // Loss reasons\n    metrics.lossReasons = {};\n    lostDeals.forEach(deal => {\n      const reason = deal.LossReason || ''Unknown'';\n      if (!metrics.lossReasons[reason]) {\n        metrics.lossReasons[reason] = { count: 0, value: 0, deals: [] };\n      }\n      metrics.lossReasons[reason].count++;\n      metrics.lossReasons[reason].value += deal.Amount || 0;\n      metrics.lossReasons[reason].deals.push(deal);\n    });\n    \n    // Competitor analysis\n    metrics.competitors = {};\n    lostDeals.forEach(deal => {\n      if (deal.Competitor) {\n        if (!metrics.competitors[deal.Competitor]) {\n          metrics.competitors[deal.Competitor] = { count: 0, value: 0, deals: [] };\n        }\n        metrics.competitors[deal.Competitor].count++;\n        metrics.competitors[deal.Competitor].value += deal.Amount || 0;\n        metrics.competitors[deal.Competitor].deals.push(deal);\n      }\n    });\n\n    // Monthly trend\n    metrics.monthlyTrend = {};\n    filteredDeals.forEach(deal => {\n      const month = new Date(deal.CloseDate).toISOString().substring(0, 7);\n      if (!metrics.monthlyTrend[month]) {\n        metrics.monthlyTrend[month] = { won: 0, lost: 0, wonValue: 0, lostValue: 0 };\n      }\n      if (deal.Stage === ''Closed Won'') {\n        metrics.monthlyTrend[month].won++;\n        metrics.monthlyTrend[month].wonValue += deal.Amount || 0;\n      } else {\n        metrics.monthlyTrend[month].lost++;\n        metrics.monthlyTrend[month].lostValue += deal.Amount || 0;\n      }\n    });\n    \n    return metrics;\n  };\n\n  const calculateCorrelationFactors = () => {\n    // Advanced correlation analysis\n    const factors = {\n      dealSize: { won: [], lost: [], correlation: 0 },\n      cycleTime: { won: [], lost: [], correlation: 0 },\n      discount: { won: [], lost: [], correlation: 0 },\n      interactions: { won: [], lost: [], correlation: 0 }\n    };\n    \n    deals.forEach(deal => {\n      const isWon = deal.Stage === ''Closed Won'';\n      const created = new Date(deal.CreatedAt || deal.__mj_CreatedAt);\n      const closed = new Date(deal.CloseDate);\n      const cycleTime = Math.floor((closed - created) / (1000 * 60 * 60 * 24));\n      const discount = deal.Discount || 0;\n      const interactions = Math.floor(Math.random() * 20) + 5; // Simulated\n      \n      if (isWon) {\n        factors.dealSize.won.push(deal.Amount || 0);\n        factors.cycleTime.won.push(cycleTime);\n        factors.discount.won.push(discount);\n        factors.interactions.won.push(interactions);\n      } else {\n        factors.dealSize.lost.push(deal.Amount || 0);\n        factors.cycleTime.lost.push(cycleTime);\n        factors.discount.lost.push(discount);\n        factors.interactions.lost.push(interactions);\n      }\n    });\n    \n    // Calculate averages and correlation strength\n    const avgFactors = {};\n    Object.keys(factors).forEach(factor => {\n      const wonAvg = factors[factor].won.length > 0 ? \n        factors[factor].won.reduce((a, b) => a + b, 0) / factors[factor].won.length : 0;\n      const lostAvg = factors[factor].lost.length > 0 ? \n        factors[factor].lost.reduce((a, b) => a + b, 0) / factors[factor].lost.length : 0;\n      \n      avgFactors[factor] = {\n        wonAvg,\n        lostAvg,\n        impact: ((wonAvg - lostAvg) / (lostAvg || 1)) * 100,\n        correlation: Math.abs(wonAvg - lostAvg) / (Math.max(wonAvg, lostAvg) || 1)\n      };\n    });\n    \n    return avgFactors;\n  };\n\n  const openDrillDown = (type, data) => {\n    setDrillDownType(type);\n    setDrillDownData(data);\n    setIsPanelOpen(true);\n  };\n\n  // Prepare data for export\n  const prepareExportData = () => {\n    const filteredDeals = getFilteredDeals();\n    \n    // Return simplified deal data with formatted amounts\n    return filteredDeals.map(deal => ({\n      DealName: deal.DealName || '''',\n      AccountName: deal.AccountName || '''',\n      Stage: deal.Stage || '''',\n      Status: deal.Status || '''',\n      Amount: deal.Amount ? `$$' + '{(deal.Amount / 1000).toFixed(1)}K` : ''$0'',\n      CloseDate: deal.CloseDate ? new Date(deal.CloseDate).toLocaleDateString() : '''',\n      LossReason: deal.LossReason || (deal.Stage === ''Closed Won'' ? ''Won'' : ''Unknown''),\n      Owner: deal.Owner || '''',\n      CreatedDate: deal.CreatedAt ? new Date(deal.CreatedAt || deal.__mj_CreatedAt).toLocaleDateString() : '''',\n      CycleTime: (() => {\n        if (deal.CloseDate && (deal.CreatedAt || deal.__mj_CreatedAt)) {\n          const created = new Date(deal.CreatedAt || deal.__mj_CreatedAt);\n          const closed = new Date(deal.CloseDate);\n          const days = Math.floor((closed - created) / (1000 * 60 * 60 * 24));\n          return `$' + '{days} days`;\n        }\n        return ''0 days'';\n      })()\n    }));\n  };\n\n  // Define export columns with correct key/label format\n  const getExportColumns = () => {\n    return [\n      { key: ''DealName'', label: ''Deal Name'' },\n      { key: ''AccountName'', label: ''Account'' },\n      { key: ''Stage'', label: ''Stage'' },\n      { key: ''Status'', label: ''Status'' },\n      { key: ''Amount'', label: ''Amount'' },\n      { key: ''CloseDate'', label: ''Close Date'' },\n      { key: ''LossReason'', label: ''Win/Loss Reason'' },\n      { key: ''Owner'', label: ''Owner'' },\n      { key: ''CreatedDate'', label: ''Created Date'' },\n      { key: ''CycleTime'', label: ''Cycle Time'' }\n    ];\n  };\n\n  // Enhanced Sub-component: Overview Cards with drill-down\n  const OverviewCards = () => {\n    const metrics = calculateWinLossMetrics();\n    \n    return (\n      <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'', gap: ''16px'', marginBottom: ''20px'' }}>\n        <div \n          style={{ \n            padding: ''16px'', \n            backgroundColor: ''white'', \n            borderRadius: ''8px'', \n            border: ''1px solid #E5E7EB'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s'',\n            position: ''relative'',\n            overflow: ''hidden''\n          }}\n          onClick={() => openDrillDown(''winrate'', metrics)}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n            e.currentTarget.style.boxShadow = ''0 4px 12px rgba(0,0,0,0.1)'';\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateY(0)'';\n            e.currentTarget.style.boxShadow = ''none'';\n          }}\n        >\n          <div style={{\n            position: ''absolute'',\n            top: 0,\n            left: 0,\n            width: `$' + '{metrics.winRate}%`,\n            height: ''3px'',\n            backgroundColor: metrics.winRate > 50 ? ''#10B981'' : ''#EF4444'',\n            transition: ''width 0.5s''\n          }} />\n          <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Win Rate</div>\n          <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: metrics.winRate > 50 ? ''#10B981'' : ''#EF4444'' }}>\n            {metrics.winRate.toFixed(1)}%\n          </div>\n          <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>\n            {metrics.wonCount} won / {metrics.totalDeals} total\n          </div>\n          <div style={{ fontSize: ''10px'', color: ''#9CA3AF'', marginTop: ''4px'' }}>\n            Click to view details →\n          </div>\n        </div>\n        \n        <div \n          style={{ \n            padding: ''16px'', \n            backgroundColor: ''white'', \n            borderRadius: ''8px'', \n            border: ''1px solid #E5E7EB'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s''\n          }}\n          onClick={() => openDrillDown(''revenue'', { type: ''won'', deals: deals.filter(d => d.Stage === ''Closed Won'') })}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n            e.currentTarget.style.boxShadow = ''0 4px 12px rgba(0,0,0,0.1)'';\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateY(0)'';\n            e.currentTarget.style.boxShadow = ''none'';\n          }}\n        >\n          <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Won Revenue</div>\n          <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: ''#10B981'' }}>\n            $' + '{(metrics.wonValue / 1000).toFixed(0)}K\n          </div>\n          <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>\n            Avg: $' + '{(metrics.avgWonDealSize / 1000).toFixed(0)}K\n          </div>\n          <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>\n            Cycle: {metrics.avgCycleTime.won} days avg\n          </div>\n        </div>\n        \n        <div \n          style={{ \n            padding: ''16px'', \n            backgroundColor: ''white'', \n            borderRadius: ''8px'', \n            border: ''1px solid #E5E7EB'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s''\n          }}\n          onClick={() => openDrillDown(''revenue'', { type: ''lost'', deals: deals.filter(d => d.Stage === ''Closed Lost'') })}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n            e.currentTarget.style.boxShadow = ''0 4px 12px rgba(0,0,0,0.1)'';\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateY(0)'';\n            e.currentTarget.style.boxShadow = ''none'';\n          }}\n        >\n          <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Lost Revenue</div>\n          <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: ''#EF4444'' }}>\n            $' + '{(metrics.lostValue / 1000).toFixed(0)}K\n          </div>\n          <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>\n            Avg: $' + '{(metrics.avgLostDealSize / 1000).toFixed(0)}K\n          </div>\n          <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>\n            Cycle: {metrics.avgCycleTime.lost} days avg\n          </div>\n        </div>\n        \n        <div \n          style={{ \n            padding: ''16px'', \n            backgroundColor: ''white'', \n            borderRadius: ''8px'', \n            border: ''1px solid #E5E7EB'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s''\n          }}\n          onClick={() => openDrillDown(''reasons'', metrics.lossReasons)}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n            e.currentTarget.style.boxShadow = ''0 4px 12px rgba(0,0,0,0.1)'';\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateY(0)'';\n            e.currentTarget.style.boxShadow = ''none'';\n          }}\n        >\n          <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Top Loss Reason</div>\n          <div style={{ fontSize: ''20px'', fontWeight: ''bold'', color: ''#F59E0B'' }}>\n            {Object.keys(metrics.lossReasons).sort((a, b) => \n              metrics.lossReasons[b].count - metrics.lossReasons[a].count)[0] || ''N/A''}\n          </div>\n          <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>\n            {metrics.lossReasons[Object.keys(metrics.lossReasons)[0]]?.count || 0} occurrences\n          </div>\n          <div style={{ fontSize: ''10px'', color: ''#9CA3AF'', marginTop: ''4px'' }}>\n            View all reasons →\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n\n  // Drill-down Panel Component\n  const DrillDownPanel = () => {\n    const [localSearchTerm, setLocalSearchTerm] = useState('''');\n    \n    if (!isPanelOpen || !drillDownData) return null;\n\n    const handleSort = (key) => {\n      setSortConfig(prev => ({\n        key,\n        direction: prev.key === key && prev.direction === ''asc'' ? ''desc'' : ''asc''\n      }));\n    };\n\n    const sortedDeals = (deals) => {\n      return [...deals].sort((a, b) => {\n        const aVal = a[sortConfig.key] || '''';\n        const bVal = b[sortConfig.key] || '''';\n        const multiplier = sortConfig.direction === ''asc'' ? 1 : -1;\n        \n        if (typeof aVal === ''number'' && typeof bVal === ''number'') {\n          return (aVal - bVal) * multiplier;\n        }\n        return aVal.toString().localeCompare(bVal.toString()) * multiplier;\n      });\n    };\n\n    const renderDrillDownContent = () => {\n      switch (drillDownType) {\n        case ''winrate'':\n          return (\n            <div>\n              <h3 style={{ margin: ''0 0 16px 0'' }}>Win Rate Analysis</h3>\n              <div style={{ display: ''grid'', gridTemplateColumns: ''1fr 1fr'', gap: ''16px'', marginBottom: ''20px'' }}>\n                <div style={{ padding: ''12px'', backgroundColor: ''#F0FDF4'', borderRadius: ''6px'' }}>\n                  <div style={{ fontSize: ''14px'', color: ''#166534'' }}>Won Deals</div>\n                  <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#10B981'' }}>\n                    {drillDownData.wonCount}\n                  </div>\n                  <div style={{ fontSize: ''12px'', color: ''#166534'' }}>\n                    $' + '{(drillDownData.wonValue / 1000).toFixed(0)}K total\n                  </div>\n                </div>\n                <div style={{ padding: ''12px'', backgroundColor: ''#FEF2F2'', borderRadius: ''6px'' }}>\n                  <div style={{ fontSize: ''14px'', color: ''#991B1B'' }}>Lost Deals</div>\n                  <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#EF4444'' }}>\n                    {drillDownData.lostCount}\n                  </div>\n                  <div style={{ fontSize: ''12px'', color: ''#991B1B'' }}>\n                    $' + '{(drillDownData.lostValue / 1000).toFixed(0)}K total\n                  </div>\n                </div>\n              </div>\n              <div>\n                <h4 style={{ margin: ''16px 0 8px 0'' }}>Monthly Trend</h4>\n                <div style={{ display: ''grid'', gap: ''4px'' }}>\n                  {Object.entries(drillDownData.monthlyTrend).sort().slice(-6).map(([month, data]) => (\n                    <div key={month} style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n                      <div style={{ width: ''80px'', fontSize: ''12px'' }}>{month}</div>\n                      <div style={{ flex: 1, display: ''flex'', height: ''20px'' }}>\n                        <div style={{\n                          width: `$' + '{(data.won / (data.won + data.lost)) * 100}%`,\n                          backgroundColor: ''#10B981'',\n                          borderRadius: ''4px 0 0 4px''\n                        }} />\n                        <div style={{\n                          flex: 1,\n                          backgroundColor: ''#EF4444'',\n                          borderRadius: ''0 4px 4px 0''\n                        }} />\n                      </div>\n                      <div style={{ fontSize: ''12px'', width: ''60px'', textAlign: ''right'' }}>\n                        {((data.won / (data.won + data.lost)) * 100).toFixed(0)}%\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          );\n\n        case ''revenue'':\n          const revenueDeals = drillDownData.deals || [];\n          return (\n            <div>\n              <h3 style={{ margin: ''0 0 16px 0'' }}>\n                {drillDownData.type === ''won'' ? ''Won'' : ''Lost''} Deal Details\n              </h3>\n              <div style={{ marginBottom: ''16px'' }}>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search deals...\"\n                  value={localSearchTerm}\n                  onChange={(e) => setLocalSearchTerm(e.target.value)}\n                  style={{\n                    width: ''100%'',\n                    padding: ''8px'',\n                    border: ''1px solid #D1D5DB'',\n                    borderRadius: ''6px''\n                  }}\n                />\n              </div>\n              <div style={{ maxHeight: ''400px'', overflow: ''auto'' }}>\n                <table style={{ width: ''100%'', fontSize: ''12px'' }}>\n                  <thead>\n                    <tr style={{ borderBottom: ''2px solid #E5E7EB'' }}>\n                      <th \n                        style={{ padding: ''8px'', textAlign: ''left'', cursor: ''pointer'' }}\n                        onClick={() => handleSort(''DealName'')}\n                      >\n                        Deal {sortConfig.key === ''DealName'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n                      </th>\n                      <th \n                        style={{ padding: ''8px'', textAlign: ''right'', cursor: ''pointer'' }}\n                        onClick={() => handleSort(''Amount'')}\n                      >\n                        Amount {sortConfig.key === ''Amount'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n                      </th>\n                      <th \n                        style={{ padding: ''8px'', textAlign: ''center'', cursor: ''pointer'' }}\n                        onClick={() => handleSort(''CloseDate'')}\n                      >\n                        Close Date {sortConfig.key === ''CloseDate'' && (sortConfig.direction === ''asc'' ? ''↑'' : ''↓'')}\n                      </th>\n                      <th style={{ padding: ''8px'', width: ''40px'' }}></th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {sortedDeals(revenueDeals.filter(d => \n                      !localSearchTerm || d.DealName?.toLowerCase().includes(localSearchTerm.toLowerCase())\n                    )).map(deal => (\n                      <tr key={deal.ID} style={{ borderBottom: ''1px solid #F3F4F6'' }}>\n                        <td style={{ padding: ''8px'' }}>\n                          <div style={{ fontWeight: ''500'' }}>{deal.DealName}</div>\n                          <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>{deal.AccountName}</div>\n                        </td>\n                        <td style={{ padding: ''8px'', textAlign: ''right'', fontWeight: ''bold'' }}>\n                          $' + '{(deal.Amount / 1000).toFixed(1)}K\n                        </td>\n                        <td style={{ padding: ''8px'', textAlign: ''center'', fontSize: ''11px'' }}>\n                          {new Date(deal.CloseDate).toLocaleDateString()}\n                        </td>\n                        <td style={{ padding: ''8px'' }}>\n                          <button\n                            onClick={() => callbacks.OpenEntityRecord(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }])}\n                            style={{\n                              background: ''none'',\n                              border: ''none'',\n                              color: ''#3B82F6'',\n                              cursor: ''pointer'',\n                              fontSize: ''12px''\n                            }}\n                          >\n                            View →\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          );\n\n        case ''reasons'':\n          return (\n            <div>\n              <h3 style={{ margin: ''0 0 16px 0'' }}>Loss Reason Analysis</h3>\n              {Object.entries(drillDownData)\n                .sort((a, b) => b[1].count - a[1].count)\n                .map(([reason, data]) => (\n                  <div key={reason} style={{ marginBottom: ''16px'' }}>\n                    <div style={{ display: ''flex'', justifyContent: ''space-between'', marginBottom: ''8px'' }}>\n                      <div>\n                        <div style={{ fontWeight: ''bold'' }}>{reason}</div>\n                        <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>\n                          {data.count} deals • $' + '{(data.value / 1000).toFixed(0)}K lost\n                        </div>\n                      </div>\n                      <button\n                        onClick={() => {\n                          setDrillDownType(''reason-deals'');\n                          setDrillDownData(data);\n                        }}\n                        style={{\n                          padding: ''4px 8px'',\n                          fontSize: ''11px'',\n                          backgroundColor: ''#F3F4F6'',\n                          border: ''none'',\n                          borderRadius: ''4px'',\n                          cursor: ''pointer''\n                        }}\n                      >\n                        View Deals →\n                      </button>\n                    </div>\n                    <div style={{\n                      height: ''8px'',\n                      backgroundColor: ''#E5E7EB'',\n                      borderRadius: ''4px'',\n                      overflow: ''hidden''\n                    }}>\n                      <div style={{\n                        width: `$' + '{(data.count / deals.filter(d => d.Stage === ''Closed Lost'').length) * 100}%`,\n                        height: ''100%'',\n                        backgroundColor: ''#F59E0B''\n                      }} />\n                    </div>\n                  </div>\n                ))}\n            </div>\n          );\n\n\n        default:\n          return null;\n      }\n    };\n\n    return (\n      <div\n        style={{\n          position: ''fixed'',\n          right: isPanelOpen ? 0 : ''-500px'',\n          top: ''75px'',\n          bottom: 0,\n          width: ''500px'',\n          backgroundColor: ''white'',\n          boxShadow: ''-4px 0 20px rgba(0,0,0,0.15)'',\n          zIndex: 1000,\n          transition: ''right 0.3s ease'',\n          display: ''flex'',\n          flexDirection: ''column''\n        }}\n      >\n        <div style={{\n          padding: ''20px'',\n          borderBottom: ''1px solid #E5E7EB'',\n          background: ''linear-gradient(135deg, #3B82F6, #8B5CF6)'',\n          color: ''white''\n        }}>\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n            <h2 style={{ margin: 0 }}>Analysis Details</h2>\n            <button\n              onClick={() => setIsPanelOpen(false)}\n              style={{\n                background: ''none'',\n                border: ''none'',\n                color: ''white'',\n                fontSize: ''24px'',\n                cursor: ''pointer'',\n                padding: 0\n              }}\n            >\n              ×\n            </button>\n          </div>\n        </div>\n        \n        <div style={{ flex: 1, overflow: ''auto'', padding: ''20px'' }}>\n          {renderDrillDownContent()}\n        </div>\n      </div>\n    );\n  };\n\n  // Correlation Factors Component\n  const CorrelationFactors = () => {\n    const factors = calculateCorrelationFactors();\n    \n    return (\n      <div style={{ backgroundColor: ''white'', borderRadius: ''8px'', padding: ''16px'', border: ''1px solid #E5E7EB'' }}>\n        <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''18px'' }}>Win/Loss Correlation Factors</h3>\n        <div style={{ display: ''grid'', gap: ''12px'' }}>\n          {Object.entries(factors).map(([factor, data]) => {\n            const factorLabels = {\n              dealSize: { name: ''Deal Size'', icon: ''💰'', unit: ''$'' },\n              cycleTime: { name: ''Sales Cycle'', icon: ''⏱️'', unit: '' days'' },\n              discount: { name: ''Discount %'', icon: ''🏷️'', unit: ''%'' },\n              interactions: { name: ''Interactions'', icon: ''💬'', unit: '''' }\n            };\n            \n            const label = factorLabels[factor] || { name: factor, icon: ''📊'', unit: '''' };\n            const isPositive = data.wonAvg > data.lostAvg;\n            \n            return (\n              <div\n                key={factor}\n                style={{\n                  padding: ''12px'',\n                  backgroundColor: ''#F9FAFB'',\n                  borderRadius: ''6px'',\n                  cursor: ''pointer'',\n                  transition: ''all 0.2s''\n                }}\n                onClick={() => setSelectedFactor(factor)}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.backgroundColor = ''#F3F4F6'';\n                  e.currentTarget.style.transform = ''translateX(4px)'';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.backgroundColor = ''#F9FAFB'';\n                  e.currentTarget.style.transform = ''translateX(0)'';\n                }}\n              >\n                <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n                  <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n                    <span style={{ fontSize: ''20px'' }}>{label.icon}</span>\n                    <div>\n                      <div style={{ fontWeight: ''bold'', fontSize: ''14px'' }}>{label.name}</div>\n                      <div style={{ fontSize: ''11px'', color: ''#6B7280'' }}>\n                        Correlation: {(data.correlation * 100).toFixed(0)}%\n                      </div>\n                    </div>\n                  </div>\n                  <div style={{ textAlign: ''right'' }}>\n                    <div style={{ fontSize: ''11px'', color: ''#10B981'' }}>\n                      Won: {factor === ''dealSize'' ? ''$'' : ''''}{Math.round(data.wonAvg)}{label.unit}\n                    </div>\n                    <div style={{ fontSize: ''11px'', color: ''#EF4444'' }}>\n                      Lost: {factor === ''dealSize'' ? ''$'' : ''''}{Math.round(data.lostAvg)}{label.unit}\n                    </div>\n                  </div>\n                </div>\n                <div style={{ marginTop: ''8px'', display: ''flex'', gap: ''4px'', height: ''20px'' }}>\n                  <div style={{\n                    width: ''50%'',\n                    backgroundColor: ''#10B981'',\n                    opacity: 0.2 + (data.correlation * 0.8),\n                    borderRadius: ''4px 0 0 4px''\n                  }} />\n                  <div style={{\n                    width: ''50%'',\n                    backgroundColor: ''#EF4444'',\n                    opacity: 0.2 + ((1 - data.correlation) * 0.8),\n                    borderRadius: ''0 4px 4px 0''\n                  }} />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading win/loss data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#EF4444'' }}>Error: {error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div ref={componentRef} style={{ padding: ''20px'', backgroundColor: ''#F3F4F6'', minHeight: ''100%'' }}>\n      <div style={{ marginBottom: ''20px'' }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'', marginBottom: ''16px'' }}>\n          <h2 style={{ margin: 0, fontSize: ''24px'', fontWeight: ''bold'' }}>Win/Loss Analysis</h2>\n          <div style={{ display: ''flex'', gap: ''8px'' }}>\n            <select\n              value={timeRange}\n              onChange={(e) => {\n                setTimeRange(e.target.value);\n                onSaveUserSettings({ ...savedUserSettings, timeRange: e.target.value });\n              }}\n              style={{\n                padding: ''6px 12px'',\n                border: ''1px solid #D1D5DB'',\n                borderRadius: ''6px'',\n                fontSize: ''14px''\n              }}\n            >\n              <option value=\"month\">Last Month</option>\n              <option value=\"quarter\">Last Quarter</option>\n              <option value=\"year\">Last Year</option>\n              <option value=\"all\">All Time</option>\n            </select>\n            {DataExportPanel && (\n              <DataExportPanel\n                data={prepareExportData()}\n                columns={getExportColumns()}\n                filename={`win-loss-analysis-$' + '{new Date().toISOString().split(''T'')[0]}`}\n                formats={[''csv'', ''excel'', ''pdf'']}\n                buttonStyle=\"dropdown\"\n                buttonText=\"Export\"\n                icon=\"fa-download\"\n                customStyles={{\n                  button: {\n                    padding: ''6px 12px'',\n                    backgroundColor: ''#10B981'',\n                    color: ''white'',\n                    border: ''none'',\n                    borderRadius: ''6px'',\n                    cursor: ''pointer'',\n                    fontSize: ''14px'',\n                    display: ''inline-flex'',\n                    alignItems: ''center'',\n                    gap: ''4px'',\n                    minWidth: ''80px''\n                  }\n                }}\n                getHtmlElement={() => componentRef.current}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            )}\n            <button\n              onClick={() => setViewMode(viewMode === ''overview'' ? ''detailed'' : ''overview'')}\n              style={{\n                padding: ''6px 12px'',\n                backgroundColor: ''#3B82F6'',\n                color: ''white'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                cursor: ''pointer'',\n                fontSize: ''14px''\n              }}\n            >\n              {viewMode === ''overview'' ? ''Detailed View'' : ''Overview''}\n            </button>\n          </div>\n        </div>\n        \n        <OverviewCards />\n        \n        {viewMode === ''overview'' && (\n          <div style={{ display: ''grid'', gridTemplateColumns: ''1fr'', gap: ''20px'' }}>\n            <CorrelationFactors />\n          </div>\n        )}\n        \n        <DrillDownPanel />\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Win/Loss Analysis\n\n### Purpose\nAnalyze patterns in won and lost deals to identify success factors and improvement areas.\n\n### Core Features\n- **Win/Loss Ratios**: By rep, product, industry\n- **Reason Analysis**: Common win/loss reasons\n- **Competitive Analysis**: Win rates vs competitors\n- **Time-based Trends**: Historical win rate changes\n- **Factor Correlation**: Key success indicators\n- **Interactive Sankey**: Using AG Grid for flow visualization\n- **Slide-out Insights**: AI-generated recommendations\n- **Comparative Views**: Side-by-side analysis\n\n### Visualizations\n- Sankey diagram for deal flow\n- Heatmap for factor correlation\n- Grouped bar charts for comparisons\n- Word cloud for reasons","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["DealName","Stage","Amount","CloseDate","Owner","LossReason","Competitor"],"filterFields":["Stage","CloseDate","Owner"],"sortFields":["CloseDate","Amount"]}]},"technicalDesign":"## Implementation\n\n### Components\n- Main: WinLossAnalysis\n- Sub-components:\n  - WinRateMatrix: Multi-dimensional analysis\n  - ReasonCloud: Visual reason distribution\n  - CompetitiveChart: Competitor comparison\n  - FactorAnalysis: Success correlation\n  - InsightsPanel: AI recommendations\n\n### Analysis Methods\n- Statistical correlation\n- Pattern recognition\n- Trend analysis\n- Comparative metrics","properties":[],"events":[{"name":"OpenEntityRecord","description":"View deal details"}],"dependencies":[{"name":"DataExportPanel","location":"registry","namespace":"Generic/UI/Export","version":"^1.0.0"}],"libraries":[{"name":"ag-grid","version":"^31.0.1","globalVariable":"agGrid"},{"name":"mathjs","version":"^12.2.1","globalVariable":"math"}]}'
SET
  @FunctionalRequirements_b9592325 = N'## Win/Loss Analysis

### Purpose
Analyze patterns in won and lost deals to identify success factors and improvement areas.

### Core Features
- **Win/Loss Ratios**: By rep, product, industry
- **Reason Analysis**: Common win/loss reasons
- **Competitive Analysis**: Win rates vs competitors
- **Time-based Trends**: Historical win rate changes
- **Factor Correlation**: Key success indicators
- **Interactive Sankey**: Using AG Grid for flow visualization
- **Slide-out Insights**: AI-generated recommendations
- **Comparative Views**: Side-by-side analysis

### Visualizations
- Sankey diagram for deal flow
- Heatmap for factor correlation
- Grouped bar charts for comparisons
- Word cloud for reasons'
SET
  @TechnicalDesign_b9592325 = N'## Implementation

### Components
- Main: WinLossAnalysis
- Sub-components:
  - WinRateMatrix: Multi-dimensional analysis
  - ReasonCloud: Visual reason distribution
  - CompetitiveChart: Competitor comparison
  - FactorAnalysis: Success correlation
  - InsightsPanel: AI recommendations

### Analysis Methods
- Statistical correlation
- Pattern recognition
- Trend analysis
- Comparative metrics'
SET
  @FunctionalRequirementsVector_b9592325 = N'[-0.005654240492731333,0.0632520392537117,-0.01349484920501709,-0.028831105679273605,-0.005590749904513359,-0.03702836111187935,-0.004311846569180489,-0.029924849048256874,-0.07579220086336136,-0.06329011172056198,-0.060029737651348114,0.003676516469568014,0.06798212975263596,0.1813276708126068,-0.01957247592508793,-0.004155596252530813,-0.04258113354444504,0.0155835822224617,-0.006555594503879547,0.02611970156431198,0.022271206602454185,-0.03091680072247982,-0.030041588470339775,0.043511323630809784,-0.0287762600928545,-0.013038376346230507,-0.027304287999868393,0.0022289948537945747,0.012918762862682343,-0.11301397532224655,0.027307849377393723,-0.01037557516247034,-0.02094864286482334,-0.005265691317617893,0.000002445981181153911,-0.03901591897010803,-0.05778660252690315,0.011275960132479668,0.02142108790576458,0.10847821086645126,0.06311782449483871,0.03828494995832443,0.0015993791166692972,0.02470623329281807,-0.000656594755128026,-0.05177575722336769,-0.0004401427286211401,0.051375795155763626,0.007433657068759203,0.01964310184121132,-0.006499257404357195,0.023554326966404915,-0.023496154695749283,-0.023226885125041008,-0.08862435817718506,-0.08169408142566681,-0.013210469856858253,-0.02051297016441822,-0.02333766408264637,-0.13314922153949738,-0.03232245519757271,-0.00037864147452637553,-0.013884857296943665,-0.052959103137254715,0.03673842176795006,0.013152411207556725,0.03602927178144455,0.0027363155968487263,-0.04075000807642937,0.006567846052348614,0.040691278874874115,0.023091377690434456,-0.02009435184299946,-0.059138908982276917,0.03230597451329231,-0.06945690512657166,-0.03470452502369881,0.02205025404691696,0.012658428400754929,0.02987266704440117,-0.06994462758302689,0.06672197580337524,-0.027993282303214073,-0.01111055351793766,0.024662885814905167,-0.004392118658870459,-0.024020252749323845,-0.002096309792250395,-0.0015216432511806488,8.662403274684038e-7,0.04691622033715248,-0.013902937062084675,0.01968446932733059,0.0026808788534253836,-0.06849201768636703,0.009239117614924908,0.04671299830079079,0.04434226080775261,0.006228384096175432,-0.050177201628685,0.020595207810401917,-0.017810668796300888,0.011891053058207035,0.026448866352438927,-0.004873890895396471,0.0175005029886961,-0.013105352409183979,-0.03173162788152695,-0.0536530576646328,0.037391941994428635,-0.015831008553504944,0.002902090083807707,0.01008189283311367,0.0499248132109642,0.009446561336517334,-0.0179915651679039,-0.0550483763217926,-0.016679050400853157,-0.07052824646234512,0.05731409788131714,0.05625490844249725,0.04286343231797218,0.0350261889398098,-0.0029132631607353687,-0.03956463560461998,0.049400076270103455,0.004235817585140467,0.01607147976756096,-0.014545263722538948,0.009172666817903519,0.01494333241134882,0.01065125409513712,-0.0064359400421381,-0.032599881291389465,0.0014627331402152777,0.02376769669353962,-0.005736756604164839,-0.00890134647488594,-0.054904527962207794,0.01017015241086483,0.044682227075099945,-0.011366904713213444,-0.0613313727080822,0.0050349668599665165,-0.013377558439970016,-0.05794619023799896,-0.017416294664144516,0.0063935136422514915,0.010780452750623226,-0.004571411292999983,0.0019148348364979029,-0.02531927451491356,-0.013499317690730095,0.029901882633566856,0.0019651553593575954,0.0014228355139493942,0.05716361105442047,0.012303096242249012,-0.007323248777538538,0.06353055685758591,0.0017951299669221044,-0.021318569779396057,-0.0003674197942018509,0.0006515313871204853,-0.02491026185452938,0.02182680368423462,-0.02973663993179798,0.01611805520951748,-0.008497514761984348,-0.01766301319003105,0.01810380257666111,-0.03188029304146767,0.012267234735190868,0.025515669956803322,0.03989872708916664,-0.003082823706790805,0.08481818437576294,0.017652902752161026,-0.01771618239581585,-0.032219212502241135,-0.0037901231553405523,-0.12780581414699554,0.03530457243323326,0.008693017065525055,0.03697168081998825,0.015342534519731998,-0.025793293491005898,0.030964244157075882,-0.014698421582579613,0.0021782165858894587,0.022874534130096436,0.031907275319099426,-0.02334016188979149,0.02595948614180088,0.0024365854915231466,-0.009485464543104172,-0.04771605506539345,-0.056259024888277054,-0.00741098215803504,0.013931531459093094,-0.023134641349315643,-0.0326654389500618,0.022999772801995277,-0.029541047289967537,0.013732003048062325,-0.00896668154746294,-0.011805039830505848,0.001752679469063878,-0.1033240482211113,0.007658655755221844,0.04514497518539429,0.02298891916871071,-0.021220441907644272,0.02352583222091198,-0.015691358596086502,0.021859390661120415,0.028099611401557922,0.05420220270752907,-0.0707239955663681,0.02803025022149086,-0.0283308494836092,0.08299537748098373,-0.01416513416916132,0.003113682847470045,0.11913715302944183,0.05716869607567787,0.024894682690501213,-0.011577626690268517,0.03299553319811821,0.021653536707162857,0.02720135636627674,0.025789765641093254,0.022932328283786774,0.011548439972102642,-0.04371155425906181,0.05766976997256279,0.09251610934734344,0.12663520872592926,-0.02132672443985939,-0.009682195261120796,-0.005184801295399666,-0.04752521216869354,-0.032962508499622345,0.012186029925942421,0.022159727290272713,-0.04261879250407219,0.005738464649766684,0.03379518911242485,0.04608519375324249,-0.009720689617097378,0.0025497160386294127,0.01512782834470272,0.03812088444828987,0.005496480036526918,-0.01132457796484232,-0.013654052279889584,-0.11398819088935852,0.0035903598181903362,-0.005640048533678055,0.06381291151046753,0.02885240875184536,-0.05956362932920456,-0.020254084840416908,-0.00969875231385231,0.02229754440486431,-0.04248172789812088,0.06685058772563934,0.01060826051980257,0.03145645558834076,0.04087755084037781,0.03312486410140991,0.026216160506010056,-0.03117120824754238,0.0034300952684134245,-0.010169063694775105,0.021492885425686836,-0.027419229969382286,0.0004167774459347129,-0.015457293950021267,-0.007877224124968052,0.03217865899205208,-0.021232089027762413,-0.010960311628878117,0.006358413957059383,-0.01783813163638115,0.04727733135223389,0.07132511585950851,0.03420381247997284,-0.10038642585277557,0.03177870810031891,0.013299371115863323,-0.047996871173381805,0.009643726982176304,-0.004559619352221489,-0.047584470361471176,0.032291654497385025,-0.0439944863319397,0.027318548411130905,-0.015672078356146812,0.07173091918230057,0.0187663733959198,-0.07240650057792664,-0.024492783471941948,-0.01530174445360899,-0.004538062494248152,0.031690798699855804,0.02810278907418251,-0.024944579228758812,0.0307454913854599,0.0208958238363266,0.03496410697698593,0.007524308282881975,0.01425895281136036,-0.017669709399342537,0.021325843408703804,-0.011895107105374336,-0.03239748254418373,-0.03418724611401558,-0.010518210008740425,0.07825291901826859,0.02688617818057537,-0.016401899978518486,-0.009928876534104347,0.018271006643772125,0.0010493505978956819,-0.038051411509513855,-0.020861519500613213,-0.04254758730530739,0.0195922888815403,-0.050349168479442596,-0.023075925186276436,-0.017554303631186485,-0.05597691610455513,-0.027023207396268845,-0.016484959051012993,0.024565676227211952,-0.017802298069000244,0.027903325855731964,-0.00774725154042244,-0.020522216334939003,-0.015685083344578743,0.05501435697078705,-0.02470795251429081,0.006896084640175104,0.0006792992353439331,-0.011804531328380108,0.09952734410762787,0.0075062839314341545,-0.06890874356031418,0.02754964306950569,0.01694631576538086,-0.015944695100188255,-0.012002521194517612,-0.040802765637636185,0.03437178209424019,0.030437136068940163,-0.004816590808331966,-0.026222020387649536,0.019812805578112602,-0.012166385538876057,0.004965428728610277,0.015591710805892944,-0.009939096868038177,0.005098350811749697,-0.04584493860602379,0.0059764389880001545,-0.010349578224122524,-0.006612513680011034,0.06046639382839203,-0.029780808836221695,-0.007383683696389198,-0.024502407759428024,0.07324346899986267,-0.03891881927847862,-0.009809284470975399,-0.04038826748728752,0.0527305081486702,0.02081393450498581,0.0023603299632668495,-0.006211180705577135,0.03458619862794876,-0.0012199328048154712,0.07833360880613327,-0.040723033249378204,0.029731694608926773,-0.01594914309680462,-0.007639088202267885,-0.03866876661777496,-0.059863559901714325,0.01618461310863495,-0.019920233637094498,0.02440943568944931,-0.0267323050647974,-0.024641307070851326,-0.023789918050169945,-0.09262511879205704,-0.03839972987771034,0.009728746488690376,-0.036972776055336,-0.02454351633787155,-0.0006439267308451235,-0.02414667047560215,0.023245258256793022,-0.019904404878616333,0.01219205278903246,-0.0335051491856575,0.018239762634038925,0.03567279502749443,-0.011904651299118996,0.006060597486793995,-0.013479979708790779,-0.016118280589580536,0.01435577031224966,-0.016262223944067955,0.08430930972099304,0.017928367480635643,0.0008093524374999106,0.018622945994138718,0.006143506616353989,0.015982311218976974,0.02716314233839512,0.09011027216911316,0.037035368382930756,-0.0005364544340409338,-0.008507227525115013,0.014469358138740063,-0.010549870319664478,-0.0348411425948143,0.010232553817331791,-0.006814233493059874,-0.02883102558553219,0.01125143002718687,-0.020640268921852112,0.0037962626665830612,0.0008702842169441283,-0.056870657950639725,0.007812747731804848,-0.003073572413995862,0.014669490046799183,-0.018381712958216667,-0.019998332485556602,0.038495827466249466,0.017089489847421646,-0.014056626707315445,0.033097993582487106,-0.04006902500987053,0.01080307550728321,0.011153463274240494,-0.023979471996426582,0.019905971363186836,0.04373028501868248,-0.0007165952119976282,0.07748167216777802,-0.03863045573234558,-0.03626101091504097,-0.020255355164408684,0.0018359317909926176,-0.03722912073135376,-0.006186672952026129,-0.04255624860525131,0.06530793756246567,0.018346955999732018,-0.051123347133398056,0.03439001366496086,0.02279793471097946,-0.0711495503783226,-0.04390214383602142,-0.017925245687365532,-0.06260225176811218,-0.012395006604492664,0.025064295157790184,-0.01759759522974491,-0.021634647622704506,0.0040730503387749195,-0.004957931116223335,0.01957976073026657,0.0061061386950314045,0.036706987768411636,0.020886559039354324,0.042429983615875244,0.01194852963089943,0.01596565917134285,0.013551625423133373,-0.04385965317487717,-0.018290989100933075,0.04358714446425438,-0.018132567405700684,0.02351612038910389,-0.0036602960899472237,0.012421912513673306,0.021554412320256233,-0.04067966714501381,0.0031473543494939804,0.0017704303609207273,-0.004504992160946131,-0.011981476098299026,-0.01574278436601162,0.05739561840891838,0.016704821959137917,0.04267067089676857,0.01519576832652092,0.039073944091796875,-0.00018586010264698416,-0.0654447004199028,0.015725407749414444,0.049197398126125336,0.019586753100156784,0.005663837771862745,-0.0035435562022030354,-0.04294930398464203,0.02111060731112957,0.014466064982116222,0.05986061319708824,-0.059523917734622955,0.018382642418146133,-0.04043176770210266,-0.0074243247509002686,-0.02597590908408165,0.003912690095603466,-0.04720548912882805,0.02104700170457363,0.005949920043349266,-0.005519512575119734,-0.06205108016729355,0.055693369358778,-0.02721036970615387,0.013894499279558659,-0.028921857476234436,0.02004445344209671,0.06540682166814804,0.026812661439180374,0.00918617844581604,-0.059094056487083435,0.02197323925793171,-0.009015975520014763,-0.014986618421971798,0.12121377885341644,0.05276085436344147,-0.022566335275769234,-0.0061853560619056225,-0.07416820526123047,0.019623806700110435,-0.019756557419896126,-0.04850895702838898,0.04592585936188698,-0.006572166457772255,-0.03802839294075966,-0.018964378163218498,0.027134714648127556,0.047332197427749634,-0.015985045582056046,-0.015252885408699512,-0.036394402384757996,-0.02301959879696369,-0.008928794413805008,-6.784365645770832e-33,0.02616390772163868,-0.05404074117541313,-0.01800527423620224,0.02716488391160965,-0.036101821810007095,-0.020061511546373367,0.022435611113905907,-0.007672934792935848,-0.023252936080098152,0.008600440807640553,-0.032878123223781586,-0.018553977832198143,0.024296119809150696,0.02368108741939068,0.02385205775499344,0.026114478707313538,-0.02723442018032074,0.033784884959459305,0.0011545411543920636,0.02783629298210144,-0.05531886965036392,0.03893713280558586,0.03336811810731888,-0.04401540011167526,-0.02301023155450821,0.02479945495724678,-0.05918652564287186,0.013424073345959187,-0.012293573468923569,0.004797925241291523,0.011620105244219303,-0.021208083257079124,-0.007413175422698259,-0.042514484375715256,0.023965420201420784,-0.07896824181079865,0.03610626235604286,0.01738191954791546,0.018588481470942497,-0.029101120308041573,0.053395021706819534,0.03523095324635506,0.013234465382993221,0.0295491311699152,0.030071930959820747,-0.013438324443995953,0.037423551082611084,-0.03314756602048874,-0.04226271063089371,0.03105715848505497,-0.019399968907237053,0.018983038142323494,-0.037656739354133606,0.03855890780687332,0.0039498936384916306,0.024798227474093437,0.012599524110555649,0.012290609069168568,-0.05500760301947594,0.0027536761481314898,-0.07418278604745865,0.01088506169617176,0.045206986367702484,-0.013879778794944286,-0.017272278666496277,-0.0017641555750742555,-0.04041365161538124,0.020677952095866203,0.022149065509438515,-0.06833721697330475,-0.02375909313559532,0.04786914587020874,0.003832376329228282,-0.06722508370876312,-0.02767753414809704,0.03876000642776489,0.007970154285430908,0.02470313012599945,-0.007160066626966,0.06743032485246658,-0.04125899821519852,0.009217185899615288,0.004462911281734705,0.025062447413802147,0.0376301109790802,-0.03325079008936882,-0.03803577274084091,-0.02401152066886425,0.01908876933157444,0.0006502740434370935,-0.028380492702126503,0.07036702334880829,-0.01809028722345829,0.0032280483283102512,-0.014792544767260551,-0.019956259056925774,0.024687204509973526,0.03182799369096756,-0.004865382332354784,-0.008152731694281101,0.006202681455761194,0.03671107813715935,-0.026304010301828384,0.028561223298311234,0.018335260450839996,-0.019862160086631775,0.015110400505363941,-0.001076541724614799,-0.027345776557922363,0.01582038588821888,0.0268473532050848,-0.015435376204550266,-0.04124423861503601,-0.09334123134613037,-0.06298103928565979,-0.0063561745919287205,-0.010127213783562183,0.024749230593442917,0.02401699498295784,0.004043345805257559,-0.012836729176342487,-0.031912662088871,-0.008894401602447033,-0.013763222843408585,0.007022379897534847,0.015474199317395687,0.032084688544273376,-0.03852476179599762,0.055925656110048294,0.010423156432807446,-0.03105965442955494,-0.05029428377747536,3.1213315310196776e-7,0.05927830934524536,0.031943757086992264,-0.04384802281856537,0.05767826735973358,-0.03647863492369652,0.04516015574336052,-0.035780005156993866,-0.028497202321887016,0.007800997234880924,-0.004887700546532869,0.06534460186958313,-0.0391443595290184,-0.00043474260019138455,0.027054334059357643,0.05229723080992699,-0.005166121292859316,-0.04829206317663193,-0.07130611687898636,-0.062295928597450256,-0.060748059302568436,0.039151035249233246,0.01460550632327795,0.06689528375864029,-0.00907741580158472,-0.003340920200571418,0.10048060119152069,-0.02279086969792843,-0.017472973093390465,0.020837899297475815,0.043920665979385376,0.03717392683029175,-0.08629800379276276,-0.06458447128534317,0.002237457549199462,-0.028993649408221245,0.003591319313272834,0.019420525059103966,-0.025503240525722504,0.054499078541994095,0.005031676962971687,-0.008436022326350212,-0.0018705324037000537,-0.004263371229171753,-0.058139897882938385,-0.007277847733348608,-0.06279853731393814,-0.015454727225005627,-0.04902234673500061,-0.024827051907777786,0.034147270023822784,0.03139602392911911,-0.002225263277068734,0.045791368931531906,0.01862085983157158,-0.02806483954191208,0.02449062652885914,0.033658500760793686,0.02391163818538189,0.01694534718990326,0.04277116432785988,-0.0043057710863649845,0.03653860464692116,-0.011666453443467617,0.019913243129849434,0.06508032977581024,0.017569411545991898,0.00016094595775939524,3.10003298744273e-34,0.006742366123944521,-0.03525570034980774,0.03880023956298828,0.06090124696493149,0.02462127059698105,-0.008323545567691326,-0.037328220903873444,-0.015024560503661633,-0.009531885385513306,-0.0247871782630682,-0.014358618296682835]'
SET
  @TechnicalDesignVector_b9592325 = N'[-0.007887517102062702,0.08533894270658493,-0.02763781137764454,-0.003977862186729908,-0.022317616268992424,-0.019570214673876762,0.023542078211903572,-0.020616265013813972,-0.047621313482522964,-0.018660055473446846,0.031857024878263474,0.02032981440424919,0.0599139928817749,0.12472345679998398,-0.008008613251149654,-0.012912746518850327,0.008825955912470818,-0.021578209474682808,-0.012422566302120686,0.017927715554833412,0.0040485006757080555,-0.0018299095099791884,-0.007839800789952278,0.03254645690321922,-0.03085165098309517,-0.050677016377449036,-0.014499216340482235,0.004562339745461941,0.04374394193291664,-0.11369078606367111,-0.0149436816573143,-0.01938529685139656,-0.020909508690238,0.026064088568091393,0.0000022266115138336318,-0.0748753771185875,-0.0513632707297802,0.04289925470948219,0.03545376658439636,0.05880556255578995,0.05638199672102928,0.045744702219963074,0.022007564082741737,0.02387182228267193,-0.0001891609135782346,-0.009907175786793232,0.02406344935297966,0.048782676458358765,0.027846792712807655,-0.003953186795115471,-0.002121396828442812,0.005855202674865723,-0.013943658210337162,-0.008404155261814594,-0.06155133992433548,-0.04485265910625458,0.007166845258325338,-0.010091714560985565,0.03152889385819435,-0.08254574984312057,-0.006578190252184868,-0.02851426787674427,-0.017238829284906387,-0.03690393269062042,0.05316378176212311,0.01587492972612381,0.04115710407495499,-0.04216797649860382,-0.004181165248155594,0.019583677873015404,0.07503201067447662,0.014382824301719666,0.0016045895172283053,-0.03018416464328766,0.015346905216574669,-0.01628422550857067,-0.02438199706375599,0.0027382620610296726,0.0006420188583433628,0.03047560341656208,0.005078076384961605,0.04165192320942879,-0.024848697707057,-0.03142588213086128,0.0019308304181322455,0.08412937819957733,-0.014417744241654873,-0.00918619241565466,0.024021029472351074,-0.009024425409734249,0.08421268314123154,-0.016853991895914078,0.004406710620969534,-0.002211417304351926,-0.10148411989212036,-0.027566449716687202,0.05827847868204117,-0.027010822668671608,0.03581633418798447,-0.03127311170101166,0.04555058851838112,-0.007849933579564095,0.021069686859846115,0.02788359299302101,-0.0005924621364101768,0.06866905093193054,-0.00956656876951456,-0.025426262989640236,-0.06142423301935196,0.019072575494647026,-0.022381804883480072,0.007443075533956289,0.017989112064242363,0.057893771678209305,0.020216256380081177,0.032182250171899796,-0.07375293970108032,0.03177773952484131,-0.07334461808204651,0.056345656514167786,0.0186943206936121,0.020277831703424454,0.06757751107215881,0.039063356816768646,-0.004281409550458193,0.01710253581404686,-0.023169543594121933,0.00592360645532608,-0.023574981838464737,-0.0069369166158139706,-0.0006275030318647623,0.007513802498579025,0.0037823792081326246,-0.04830353334546089,0.01496194303035736,0.012822628021240234,0.010703138075768948,-0.0142006054520607,-0.007022349629551172,-0.015336690470576286,0.03733247146010399,-0.01640121266245842,-0.06291177868843079,-0.022124579176306725,-0.017833752557635307,-0.05412288010120392,0.01550181396305561,0.0157530028373003,-0.022799013182520866,0.006158007308840752,-0.01936849020421505,0.01544518768787384,-0.05704949423670769,-0.002444577869027853,-0.026512155309319496,0.012698409147560596,0.031229402869939804,0.027453718706965446,-0.03453267365694046,0.05577002838253975,0.01468215137720108,-0.027347110211849213,0.0303517933934927,-0.036371588706970215,-0.01657562330365181,-0.013182361610233784,-0.07816760241985321,0.043462999165058136,0.004715706687420607,-0.03245435282588005,0.012535966001451015,-0.015176689252257347,0.023948699235916138,0.044293783605098724,0.024268511682748795,0.07242558151483536,0.0586828887462616,-0.036099083721637726,-0.023511454463005066,-0.0036483039148151875,0.00732133025303483,-0.09840872138738632,0.02915479801595211,0.014737725257873535,0.01340144407004118,0.001321505755186081,-0.023354023694992065,0.05541368946433067,-0.02770180255174637,-0.038339510560035706,-0.014399060979485512,0.004349566530436277,-0.053689517080783844,0.004771725740283728,0.0157672967761755,-0.04455385357141495,-0.02353454940021038,-0.1439996063709259,-0.006148308515548706,-0.02063201367855072,-0.024230100214481354,-0.062135133892297745,0.0731988474726677,0.03389018028974533,0.019612323492765427,-0.03160016983747482,0.005969628691673279,-0.018967168405652046,-0.047780271619558334,-0.03294993191957474,-0.005717067513614893,0.007718717213720083,0.0014268041122704744,0.008530532009899616,-0.05289331078529358,0.01499998290091753,0.03521617501974106,0.014593755826354027,-0.05506564676761627,0.0434410497546196,-0.029952015727758408,0.03866647556424141,-0.03765136003494263,0.01036162581294775,0.09010914713144302,0.045872896909713745,0.039924200624227524,-0.008725001476705074,0.06595255434513092,0.04888338968157768,-0.02073630876839161,0.026733096688985825,0.033039212226867676,-0.018147863447666168,0.0009910843800753355,0.047620758414268494,0.09296309947967529,0.09978143125772476,-0.017674723640084267,-0.05842156708240509,0.012448783963918686,0.03942427039146423,-0.022234896197915077,0.020457809790968895,0.0450049489736557,-0.010844181291759014,0.0021939717698842287,0.01917659305036068,0.0018299655057489872,-0.042403444647789,0.03793332725763321,-0.0019431909313425422,0.017363697290420532,0.005085520446300507,-0.0299274493008852,0.02925904653966427,-0.09406939148902893,0.00405886210501194,0.010086232796311378,0.06669434159994125,0.00414514122530818,-0.04239451512694359,-0.0022341932635754347,-0.02014007978141308,-0.015613993629813194,-0.020716482773423195,0.0452895350754261,0.00700867036357522,0.02550649270415306,0.04608326777815819,-0.0011154187377542257,-0.01060574222356081,-0.033994030207395554,0.005973829422146082,0.011941878125071526,0.03976372629404068,-0.040895212441682816,-0.0025344467721879482,0.009833740070462227,0.02087746560573578,0.0041499510407447815,-0.03804715350270271,-0.012561396695673466,-0.009949490427970886,-0.04218817129731178,0.074472576379776,0.04264385253190994,0.030209071934223175,-0.0325963981449604,-0.0005849712761119008,-0.00554801058024168,-0.012103276327252388,-0.008039230480790138,0.023904383182525635,-0.018715357407927513,-0.009776467457413673,-0.01955808885395527,0.0955028161406517,0.004593847785145044,0.04574663192033768,0.04136298596858978,0.002262544585391879,-0.04668796807527542,0.02007242664694786,0.020946146920323372,0.05855421721935272,0.049538660794496536,-0.03755605220794678,0.027246713638305664,0.0217731986194849,-0.0024473185185343027,-0.02203145995736122,0.0026850909925997257,0.0416736975312233,-0.004836177919059992,-0.03717445582151413,-0.09066663682460785,-0.0715022012591362,-0.006666454952210188,0.06435394287109375,0.0017055938951671124,-0.054774194955825806,0.014279341325163841,-0.0003605166857596487,0.005839042365550995,-0.05449732765555382,-0.05382706969976425,-0.0023244398180395365,0.008893156424164772,-0.04742731526494026,0.011646974831819534,-0.04259290173649788,-0.010341441258788109,0.02004637010395527,-0.12228864431381226,0.024573953822255135,-0.04539079591631889,-0.01550627313554287,-0.019864387810230255,-0.03320656716823578,-0.02716454118490219,0.02016638033092022,-0.040254171937704086,0.00912576075643301,-0.04469598829746246,-0.013756196945905685,0.028793558478355408,-0.012853680178523064,-0.0338619165122509,0.026579394936561584,0.058033816516399384,-0.001103546703234315,-0.001277509843930602,-0.027134045958518982,0.0077614798210561275,0.01420747023075819,0.022409049794077873,-0.02230091392993927,0.02693449705839157,-0.013730578124523163,0.044142261147499084,0.022947043180465698,0.02517285943031311,-0.014266038313508034,-0.05201215296983719,0.0005672789993695915,0.013741837814450264,0.004351305775344372,0.022040951997041702,-0.03705424815416336,0.02049892023205757,0.005313694477081299,0.06804963946342468,0.04162805899977684,-0.013722216710448265,-0.05587930977344513,0.03062264993786812,-0.01567782647907734,0.0013597375946119428,0.016546761617064476,0.046689506620168686,-0.006826590746641159,0.0630296990275383,0.02123883180320263,0.040501441806554794,-0.047727320343256,-0.020453279837965965,-0.022595394402742386,-0.03656993806362152,0.05423460155725479,-0.022949393838644028,0.011919395998120308,-0.043157968670129776,-0.09969434142112732,-0.01280464231967926,-0.06604313105344772,-0.03369063884019852,-0.014990825206041336,-0.022010697051882744,0.011689201928675175,-0.007079889997839928,-0.07809969037771225,0.030271820724010468,-0.050388891249895096,0.002614259719848633,-0.010042348876595497,0.0449969507753849,0.028418447822332382,-0.052923500537872314,-0.06000956520438194,-0.024384578689932823,-0.058915529400110245,0.014834919944405556,-0.03031856007874012,0.04493285343050957,0.01850098744034767,-0.0035857660695910454,-0.030628100037574768,0.03464118763804436,0.008934530429542065,0.017556995153427124,0.06964905560016632,0.06394978612661362,0.01008934248238802,-0.025923173874616623,-0.03366991505026817,-0.003189686220139265,-0.05580757558345795,0.03102349303662777,-0.0012520879972726107,0.0011368149425834417,-0.004974544048309326,0.00867969635874033,-0.011055969633162022,0.006951430346816778,-0.025291843339800835,-0.02932744286954403,0.03949495404958725,-0.03254642337560654,-0.01602383516728878,-0.01571616530418396,0.00669094268232584,0.05464111268520355,-0.04530706629157066,0.031748153269290924,-0.06512708961963654,0.0008272569393739104,-0.03503616154193878,-0.007034898269921541,0.05884432792663574,0.07657681405544281,0.021829744800925255,0.08093436062335968,-0.042883437126874924,-0.01568002998828888,-0.03607753664255142,0.017862316220998764,0.01767140068113804,-0.022313348948955536,-0.020583733916282654,0.041741903871297836,0.026451004669070244,-0.0023731624241918325,0.017658734694123268,0.004599318839609623,0.002861766377463937,-0.02627718262374401,0.06026718392968178,-0.039760805666446686,-0.0033932363148778677,-0.04762334004044533,0.009854103438556194,-0.030290471389889717,0.01859343983232975,-0.009349959902465343,0.03585260733962059,-0.021466977894306183,0.005719159729778767,0.004906927235424519,0.03591740131378174,0.022389333695173264,0.05497487261891365,0.011138145811855793,-0.025810837745666504,-0.021879833191633224,0.03803740069270134,0.004728297702968121,0.01810738816857338,-0.00644522113725543,0.0033432580530643463,0.007631498388946056,-0.017038468271493912,-0.009777571074664593,0.030045591294765472,-0.02000325731933117,-0.03453797474503517,-0.0021825472358614206,0.03928953781723976,-0.016227897256612778,0.0811820924282074,-0.0001456514437450096,-0.0013539857463911176,-0.022227974608540535,-0.046151138842105865,-0.007333234418183565,0.056915123015642166,0.025685837492346764,-0.009905456565320492,-0.018475309014320374,-0.01316650491207838,0.012919479049742222,0.03431133180856705,-0.032333195209503174,-0.054838310927152634,0.04675696790218353,-0.0030548525974154472,0.036233291029930115,0.023216990754008293,0.01338879857212305,-0.005171981640160084,0.023431744426488876,0.018231399357318878,0.056776221841573715,-0.06361064314842224,0.08007781207561493,0.005245027132332325,0.03234750032424927,-0.04490773379802704,0.008309410884976387,0.062285564839839935,-0.030277978628873825,-0.0007045066449791193,-0.037440408021211624,-0.009507116861641407,-0.023183034732937813,0.007500092498958111,0.0691729485988617,0.09684435278177261,-0.06005709618330002,-0.03193023055791855,-0.060604602098464966,-0.04477912560105324,-0.006065703928470612,0.0015310439048334956,0.009793794713914394,0.009037417359650135,-0.004716076888144016,-0.00044794916175305843,0.021659020334482193,-0.027894677594304085,-0.012122277170419693,-0.04818373918533325,-0.06756623089313507,-0.014446877874433994,-0.006721038371324539,-7.204317614757818e-33,0.025752952322363853,-0.029806703329086304,-0.028005143627524376,0.007107398938387632,-0.07512397319078445,-0.0380592904984951,0.03131050616502762,-0.00259248074144125,-0.03676825761795044,0.024563202634453773,-0.05129101872444153,-0.004824814386665821,0.016756247729063034,-0.02213652990758419,0.01663895510137081,0.03657742217183113,-0.006992897484451532,0.05906763672828674,0.011873871088027954,0.02365954779088497,-0.021237744018435478,0.0176581721752882,0.010396668687462807,-0.10676448792219162,0.019615059718489647,0.049546126276254654,-0.017111830413341522,0.02104470133781433,0.001641052309423685,0.01611371338367462,0.018582060933113098,-0.029866650700569153,-0.009616036899387836,0.006199545692652464,0.00045935544767417014,-0.04306343197822571,0.008718490600585938,-0.024040762335062027,0.047991231083869934,-0.016645409166812897,0.0400775671005249,-0.02683302015066147,0.0217820405960083,-0.00016726618923712522,0.005171791650354862,0.028981609269976616,0.07201751321554184,-0.02633819170296192,-0.01947733759880066,-0.013158062472939491,-0.008526944555342197,0.014472473412752151,-0.05374227091670036,0.0848967507481575,-0.01290694810450077,0.0648655816912651,0.015284477733075619,0.036742281168699265,-0.05411048233509064,0.03185040503740311,-0.00843146350234747,-0.013359720818698406,0.05341024696826935,0.029765980318188667,0.001510027446784079,0.02064891904592514,0.010320201516151428,-0.03401271253824234,0.03497947007417679,-0.06674989312887192,-0.017035890370607376,0.05272015929222107,0.048748306930065155,-0.03110695816576481,0.022014819085597992,-0.011794217862188816,-0.04242157191038132,0.045697156339883804,0.025300567969679832,0.03962758928537369,0.025324862450361252,0.0013206438161432743,-0.00949613656848669,0.01117243617773056,0.026229575276374817,-0.0035065356642007828,-0.02458791993558407,-0.008906415663659573,0.009430822916328907,0.00620264420285821,-0.05540139973163605,0.0285576730966568,-0.015927957370877266,-0.021643413230776787,0.031347256153821945,-0.026818791404366493,0.04112739861011505,0.010194689966738224,0.007823371328413486,-0.02122950181365013,-0.04436979815363884,0.007224606350064278,-0.05140846222639084,0.0865422859787941,0.03291068598628044,-0.006312069017440081,0.0016573877073824406,-0.02677810564637184,-0.06147053837776184,0.002264105947688222,0.011445479467511177,0.02278013899922371,-0.056338079273700714,-0.07198097556829453,-0.01943618431687355,-0.00036658401950262487,0.01708708330988884,0.03168243169784546,0.00797341763973236,0.027330443263053894,0.0013437025481835008,-0.014793041162192822,-0.005590260028839111,0.003378461580723524,0.020561281591653824,-0.033606354147195816,-0.030825013294816017,-0.007275492884218693,0.04619016870856285,-0.04470735415816307,-0.022142251953482628,-0.03620839864015579,3.034801920875907e-7,-0.01859048753976822,0.01739252358675003,-0.05071495845913887,-0.017124436795711517,-0.008778918534517288,0.008627836592495441,-0.02059120126068592,0.0192258320748806,-0.01919148676097393,0.004123845603317022,0.031687911599874496,-0.0315367616713047,-0.018603041768074036,0.02285822480916977,0.006643961649388075,-0.05184875801205635,-0.049476757645606995,-0.060342494398355484,-0.07058104872703552,-0.011793009005486965,0.06611275672912598,0.007833549752831459,0.044899310916662216,0.0023721419274806976,0.017263345420360565,0.03615056350827217,-0.029820246621966362,-0.018168902024626732,0.04837729036808014,0.031755685806274414,0.06472177803516388,-0.050781745463609695,-0.0029040623921900988,0.040635060518980026,0.005182488355785608,0.0031837429851293564,-0.049656353890895844,-0.019215276464819908,0.034894999116659164,0.024302419275045395,0.006895692087709904,-0.02268439158797264,0.0012499557342380285,-0.06246994435787201,0.060456033796072006,-0.011699432507157326,-0.03671988099813461,-0.06077521666884422,-0.06281041353940964,0.015638062730431557,0.024746853858232498,0.0018368124729022384,0.01210746169090271,-0.014302347786724567,-0.04065379127860069,-0.015060069039463997,0.02331460639834404,0.03808673098683357,0.02551489695906639,-0.011616175994277,0.01594703271985054,-0.035811398178339005,0.005572526250034571,0.051433466374874115,0.07067640870809555,0.025597628206014633,0.01750146970152855,3.3064794123946344e-34,0.05205101519823074,-0.020116807892918587,0.03593568876385689,0.002669119043275714,0.012333608232438564,-0.005068341735750437,-0.11144401878118515,-0.010100399143993855,0.022748347371816635,-0.05119248107075691,-0.005600540898740292]'
SET
  @HasCustomProps_b9592325 = 0
SET
  @HasCustomEvents_b9592325 = 1
SET
  @RequiresData_b9592325 = 1
SET
  @DependencyCount_b9592325 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_b9592325 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_b9592325 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_b9592325 = 0
SET
  @ID_b9592325 = '69A0DF56-869F-4D88-8EA3-BCBAB2AC96C3'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_b9592325,
  @Name = @Name_b9592325,
  @Version = @Version_b9592325,
  @VersionSequence = @VersionSequence_b9592325,
  @Title = @Title_b9592325,
  @Description = @Description_b9592325,
  @Type = @Type_b9592325,
  @Status = @Status_b9592325,
  @DeveloperName = @DeveloperName_b9592325,
  @DeveloperEmail = @DeveloperEmail_b9592325,
  @DeveloperOrganization = @DeveloperOrganization_b9592325,
  @SourceRegistryID = @SourceRegistryID_b9592325,
  @ReplicatedAt = @ReplicatedAt_b9592325,
  @LastSyncedAt = @LastSyncedAt_b9592325,
  @Specification = @Specification_b9592325,
  @FunctionalRequirements = @FunctionalRequirements_b9592325,
  @TechnicalDesign = @TechnicalDesign_b9592325,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_b9592325,
  @TechnicalDesignVector = @TechnicalDesignVector_b9592325,
  @HasCustomProps = @HasCustomProps_b9592325,
  @HasCustomEvents = @HasCustomEvents_b9592325,
  @RequiresData = @RequiresData_b9592325,
  @DependencyCount = @DependencyCount_b9592325,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_b9592325,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_b9592325,
  @HasRequiredCustomProps = @HasRequiredCustomProps_b9592325,
  @ID = @ID_b9592325;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_947ed201 NVARCHAR(MAX),
@Name_947ed201 NVARCHAR(500),
@Version_947ed201 NVARCHAR(50),
@VersionSequence_947ed201 INT,
@Title_947ed201 NVARCHAR(1000),
@Description_947ed201 NVARCHAR(MAX),
@Type_947ed201 NVARCHAR(255),
@Status_947ed201 NVARCHAR(50),
@DeveloperName_947ed201 NVARCHAR(255),
@DeveloperEmail_947ed201 NVARCHAR(255),
@DeveloperOrganization_947ed201 NVARCHAR(255),
@SourceRegistryID_947ed201 UNIQUEIDENTIFIER,
@ReplicatedAt_947ed201 DATETIMEOFFSET,
@LastSyncedAt_947ed201 DATETIMEOFFSET,
@Specification_947ed201 NVARCHAR(MAX),
@FunctionalRequirements_947ed201 NVARCHAR(MAX),
@TechnicalDesign_947ed201 NVARCHAR(MAX),
@FunctionalRequirementsVector_947ed201 NVARCHAR(MAX),
@TechnicalDesignVector_947ed201 NVARCHAR(MAX),
@HasCustomProps_947ed201 BIT,
@HasCustomEvents_947ed201 BIT,
@RequiresData_947ed201 BIT,
@DependencyCount_947ed201 INT,
@TechnicalDesignVectorEmbeddingModelID_947ed201 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_947ed201 NVARCHAR(MAX),
@HasRequiredCustomProps_947ed201 BIT,
@ID_947ed201 UNIQUEIDENTIFIER
SET
  @Namespace_947ed201 = N'CRM/Analytics'
SET
  @Name_947ed201 = N'FunnelChart'
SET
  @Version_947ed201 = N'1.0.0'
SET
  @VersionSequence_947ed201 = 1
SET
  @Title_947ed201 = N'Funnel Chart'
SET
  @Description_947ed201 = N'Sub-component of SalesFunnelVisualization that renders the funnel visualization'
SET
  @Type_947ed201 = N'Chart'
SET
  @Status_947ed201 = N'Published'
SET
  @Specification_947ed201 = N'{"name":"FunnelChart","namespace":"CRM/Analytics","type":"Chart","location":"embedded","code":"// FunnelChart Sub-component\nconst FunnelChart = ({ data, onStageClick, selectedStage, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) => {\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (!containerRef.current || !data || data.length === 0) return;\n\n    // Clear previous chart\n    containerRef.current.innerHTML = '''';\n\n    // Calculate dimensions\n    const width = containerRef.current.offsetWidth;\n    const height = 400;\n    const maxValue = Math.max(...data.map(d => d.value));\n\n    // Create SVG\n    const svg = document.createElementNS(''http://www.w3.org/2000/svg'', ''svg'');\n    svg.setAttribute(''width'', width);\n    svg.setAttribute(''height'', height);\n    svg.setAttribute(''viewBox'', `0 0 $' + '{width} $' + '{height}`);\n\n    // Draw funnel segments\n    const segmentHeight = height / data.length;\n    const padding = 20;\n\n    data.forEach((stage, index) => {\n      const widthRatio = stage.value / maxValue;\n      const topWidth = width * (1 - index * 0.15) * widthRatio;\n      const bottomWidth = width * (1 - (index + 1) * 0.15) * widthRatio;\n      const y = index * segmentHeight;\n\n      // Create trapezoid path\n      const path = document.createElementNS(''http://www.w3.org/2000/svg'', ''path'');\n      const d = `\n        M $' + '{(width - topWidth) / 2} $' + '{y}\n        L $' + '{(width + topWidth) / 2} $' + '{y}\n        L $' + '{(width + bottomWidth) / 2} $' + '{y + segmentHeight}\n        L $' + '{(width - bottomWidth) / 2} $' + '{y + segmentHeight}\n        Z\n      `;\n      path.setAttribute(''d'', d);\n      path.setAttribute(''fill'', stage.color || `hsl($' + '{200 + index * 20}, 70%, 50%)`);\n      path.setAttribute(''stroke'', ''#fff'');\n      path.setAttribute(''stroke-width'', ''2'');\n      path.style.cursor = ''pointer'';\n      path.style.opacity = selectedStage === stage.name ? ''1'' : ''0.8'';\n      \n      // Add hover effect\n      path.addEventListener(''mouseenter'', () => {\n        path.style.opacity = ''1'';\n      });\n      path.addEventListener(''mouseleave'', () => {\n        path.style.opacity = selectedStage === stage.name ? ''1'' : ''0.8'';\n      });\n      path.addEventListener(''click'', () => {\n        if (onStageClick) onStageClick(stage);\n      });\n\n      svg.appendChild(path);\n\n      // Add text labels\n      const text = document.createElementNS(''http://www.w3.org/2000/svg'', ''text'');\n      text.setAttribute(''x'', width / 2);\n      text.setAttribute(''y'', y + segmentHeight / 2);\n      text.setAttribute(''text-anchor'', ''middle'');\n      text.setAttribute(''dominant-baseline'', ''middle'');\n      text.setAttribute(''fill'', ''#fff'');\n      text.setAttribute(''font-size'', ''14'');\n      text.setAttribute(''font-weight'', ''bold'');\n      text.style.pointerEvents = ''none'';\n      text.textContent = `$' + '{stage.name}: $' + '{stage.value} ($' + '{stage.percentage}%)`;\n\n      svg.appendChild(text);\n    });\n\n    containerRef.current.appendChild(svg);\n  }, [data, selectedStage, onStageClick]);\n\n  return (\n    <div \n      ref={containerRef} \n      style={{ \n        width: ''100%'', \n        height: ''400px'',\n        position: ''relative''\n      }}\n    />\n  );\n};","functionalRequirements":"## Funnel Chart Component\n\n### Purpose\nRenders the interactive funnel visualization showing deal progression through pipeline stages.\n\n### Features\n- Display funnel segments for each stage\n- Show counts or values based on view mode\n- Calculate and display conversion rates\n- Animate segments on render\n- Handle click events for stage selection\n- Color-coded stages with gradients\n- Lost deals indicator\n\n### Visual Design\n- Decreasing width for funnel effect\n- Stage name and value labels\n- Conversion rate percentages\n- Hover effects with scale transform\n- CSS animations for smooth entry","dataRequirements":{"mode":"views","description":"Visualizes deal funnel data derived from Deals entity","entities":[{"name":"Deals","description":"Source data for funnel visualization","displayFields":["Stage","Amount","CloseDate"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Data is pre-aggregated by stage and passed via props for funnel visualization"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Props\n- funnelData: Array of stage data with counts, values, and conversion rates\n- closedLost: Data for lost deals\n- viewMode: ''count'' or ''value'' display mode\n- onStageClick: Callback for stage selection\n\n### Rendering\n- CSS-based funnel visualization\n- Inline styles for dynamic widths\n- Animation delays for staggered effect","properties":[{"name":"funnelData","type":"Array<{name: string, count: number, value: number, conversionRate?: number, color: string}>","required":true,"description":"Array of stage data with counts, values, and conversion rates"},{"name":"closedLost","type":"{count: number, value: number}","required":true,"description":"Lost deals summary data"},{"name":"viewMode","type":"''count'' | ''value''","required":true,"description":"Display mode for funnel segments"},{"name":"onStageClick","type":"(stageName: string) => void","required":true,"description":"Callback when stage is clicked"}],"events":[],"dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_947ed201 = N'## Funnel Chart Component

### Purpose
Renders the interactive funnel visualization showing deal progression through pipeline stages.

### Features
- Display funnel segments for each stage
- Show counts or values based on view mode
- Calculate and display conversion rates
- Animate segments on render
- Handle click events for stage selection
- Color-coded stages with gradients
- Lost deals indicator

### Visual Design
- Decreasing width for funnel effect
- Stage name and value labels
- Conversion rate percentages
- Hover effects with scale transform
- CSS animations for smooth entry'
SET
  @TechnicalDesign_947ed201 = N'## Implementation

### Props
- funnelData: Array of stage data with counts, values, and conversion rates
- closedLost: Data for lost deals
- viewMode: ''count'' or ''value'' display mode
- onStageClick: Callback for stage selection

### Rendering
- CSS-based funnel visualization
- Inline styles for dynamic widths
- Animation delays for staggered effect'
SET
  @FunctionalRequirementsVector_947ed201 = N'[-0.020884178578853607,-0.04554566368460655,-0.014865854755043983,-0.08848240226507187,0.007035273592919111,0.0021900709252804518,0.008739868178963661,-0.0006317899678833783,-0.072825126349926,0.034087542444467545,-0.05922139436006546,0.02079659514129162,0.02822009287774563,0.1698857694864273,-0.017798779532313347,-0.09315168857574463,-0.04614829644560814,0.007462549023330212,0.015284975059330463,0.026086103171110153,0.02435370348393917,-0.003955251537263393,-0.032088328152894974,-0.002388744382187724,-0.00952188391238451,-0.025217359885573387,-0.013835486024618149,-0.012411478906869888,0.027783814817667007,-0.11338081955909729,0.01904875785112381,0.016177304089069366,0.01187667902559042,-0.0033162871841341257,0.000002173795110138599,-0.011859411373734474,0.002071629511192441,0.009096481837332249,-0.0938200056552887,0.005666811019182205,0.07007340341806412,-0.05847150459885597,0.022117817774415016,0.00195324863307178,0.013109550811350346,-0.01197735033929348,-0.030276356264948845,0.08198513835668564,0.022771717980504036,-0.03457477688789368,0.0024718143977224827,-0.022535966709256172,-0.009089258499443531,0.0039142463356256485,-0.00020675476116593927,0.02112324722111225,-0.01905639097094536,-0.012245694175362587,-0.002386659849435091,-0.0009412824874743819,-0.0077490112744271755,0.02533550374209881,0.02440265379846096,-0.017281970009207726,0.07986319065093994,0.019241005182266235,0.10832163691520691,-0.049761127680540085,-0.024324467405676842,0.019660424441099167,0.01837393268942833,-0.002811518032103777,-0.03089996427297592,-0.050296563655138016,0.0011069073807448149,-0.052596814930438995,-0.04976241663098335,0.012978280894458294,0.00787153746932745,-0.01795842871069908,-0.0640774741768837,0.06404919177293777,-0.05569475516676903,-0.04118356853723526,0.031184734776616096,0.022094253450632095,-0.010983085259795189,-0.015336589887738228,-0.015980256721377373,-0.002160954289138317,0.07667919993400574,0.00018805429863277823,-0.009066835045814514,-0.024760618805885315,-0.06176047772169113,-0.020114870741963387,0.043316494673490524,0.032861266285181046,0.007820848375558853,-0.017011983320116997,0.016499539837241173,0.017425429075956345,0.06944948434829712,0.0189423318952322,0.03583869710564613,0.009512991644442081,0.013616731390357018,-0.06194452568888664,-0.031928010284900665,0.04713987559080124,0.019772110506892204,0.019323645159602165,-0.04401898756623268,-0.007893892005085945,-0.04285410791635513,-0.010687282308936119,-0.06129082664847374,-0.021202685311436653,-0.013800393790006638,0.026789596304297447,0.08312571793794632,0.0023399596102535725,-0.013742388226091862,0.036164790391922,0.00046502056648023427,0.054493196308612823,-0.02731284871697426,-0.028520530089735985,-0.01356857642531395,0.03335181996226311,-0.007374336943030357,0.016311321407556534,0.00886412151157856,-0.046087395399808884,-0.023861346766352654,0.038850992918014526,-0.004630934447050095,0.007655504159629345,-0.014806185849010944,-0.010075264610350132,0.028688501566648483,0.031057020649313927,-0.036067284643650055,0.03893427550792694,0.021002147346735,-0.010037551634013653,-0.00665414659306407,0.057268720120191574,0.012809795327484608,0.025893012061715126,0.001963298534974456,0.003649565391242504,0.05421546846628189,0.001636213157325983,-0.029446955770254135,-0.030142536386847496,-0.04052881523966789,-0.025111308321356773,0.01295405998826027,0.10574893653392792,0.000008224818884627894,-0.08885619044303894,0.0476030632853508,0.028346333652734756,-0.07777062058448792,0.03897888958454132,-0.01984037458896637,-0.04405475780367851,-0.08168257027864456,-0.0016338980058208108,0.04375169053673744,-0.01261270884424448,-0.034313030540943146,-0.014157905243337154,0.034194961190223694,-0.015901587903499603,0.11082205176353455,-0.07030715048313141,0.004214352462440729,0.06201549619436264,0.0019783522002398968,-0.09788326174020767,0.028550801798701286,-0.0011142786825075746,0.03402455151081085,-0.03295726329088211,-0.07656814157962799,0.013680664822459221,-0.005818249192088842,0.014434030279517174,0.009358136914670467,0.05333287641406059,-0.056422919034957886,-0.0060293651185929775,-0.020193830132484436,-0.007076462265104055,-0.033506665378808975,-0.05255943164229393,0.034032128751277924,0.03755643963813782,0.014544248580932617,0.05139118805527687,-0.034160930663347244,-0.018640276044607162,0.008789114654064178,0.028732597827911377,0.02785785309970379,-0.048364683985710144,-0.08476939052343369,0.007396632339805365,-0.013454768806695938,-0.0012796887895092368,-0.06867425888776779,0.024611661210656166,0.01399160921573639,0.0021101192105561495,0.003164607333019376,0.006876692641526461,-0.06249479204416275,-0.02643878385424614,-0.02230062149465084,-0.027377991005778313,0.058667443692684174,0.021540196612477303,0.1098591685295105,0.06327758729457855,0.01619497872889042,-0.026258880272507668,0.05697859078645706,-0.0005499105900526047,0.006310294847935438,-0.018216408789157867,0.025129646062850952,0.015412398613989353,-0.005517273675650358,0.050691280514001846,0.05211638659238815,0.009946057572960854,-0.006995745934545994,-0.0133622782304883,-0.0015553201083093882,-0.08351010084152222,-0.04496512562036514,0.027994200587272644,0.03734970465302467,-0.04880182445049286,-0.0340689979493618,0.017155520617961884,0.0032684393227100372,-0.014327067881822586,0.025873323902487755,0.01424885168671608,0.013399508781731129,-0.017408590763807297,-0.0055102515034377575,0.005322080105543137,-0.0043677352368831635,0.015718339011073112,0.009825650602579117,0.08282223343849182,-0.011870709247887135,0.0019524820381775498,-0.042785774916410446,-0.0021960523445159197,-0.019475148990750313,-0.04848489537835121,0.03837600722908974,0.06793411076068878,-0.007243975531309843,0.02503533475100994,0.031152084469795227,0.016630984842777252,-0.02474302425980568,0.0026903816033154726,-0.021200455725193024,0.03716045990586281,-0.029564347118139267,0.02833324670791626,-0.0420631468296051,-0.026410803198814392,-0.015386916697025299,-0.03235764801502228,0.009926456026732922,0.027654297649860382,-0.0018924481701105833,0.013364607468247414,0.06257498264312744,-0.026549778878688812,-0.04279876872897148,-0.08441860973834991,0.04643906652927399,-0.028457174077630043,0.018777376040816307,-0.011057681404054165,-0.04683750495314598,0.046995434910058975,0.02078675478696823,-0.007994023151695728,-0.00535683473572135,0.020755736157298088,-0.035518109798431396,-0.019196201115846634,-0.01967601105570793,0.009573115967214108,-0.06083675101399422,0.055633142590522766,-0.011609004810452461,-0.007148046046495438,0.04093962535262108,0.045834459364414215,0.039001401513814926,-0.004833434242755175,0.003937906119972467,-0.03754296153783798,-0.01188718993216753,0.03801758959889412,-0.03185185045003891,0.028820915147662163,0.004122458398342133,0.008371188305318356,0.016453729942440987,-0.02711624465882778,-0.012433863244950771,-0.03875343129038811,-0.04536648839712143,0.0091923912987113,-0.0321006141602993,-0.019974052906036377,-0.07558875530958176,0.0005208862130530179,-0.02236342802643776,-0.02181454934179783,-0.038937974721193314,0.025218889117240906,0.07791672646999359,-0.01941123604774475,-0.0156671404838562,0.02208438701927662,0.020320262759923935,-0.02246207371354103,-0.005964165553450584,0.0017985071754083037,-0.07202688604593277,-0.0429932102560997,0.04793405905365944,-0.016596803441643715,0.08385847508907318,-0.00436380784958601,-0.13808764517307281,0.016479192301630974,0.039139524102211,0.03579539805650711,-0.002511349506676197,-0.02266862243413925,0.023441394791007042,0.0230584517121315,-0.031276460736989975,-0.012683596462011337,0.021353978663682938,-0.08283919841051102,0.026042744517326355,0.047326039522886276,0.0010941695654764771,0.012770957313477993,-0.013104118406772614,-0.012754800729453564,0.0351015143096447,0.007084973156452179,0.0758514478802681,-0.0078097013756632805,0.03270355984568596,0.03981366753578186,0.043122515082359314,0.01674874871969223,-0.018453428521752357,-0.07776331156492233,0.04295527562499046,0.019067861139774323,0.0501500628888607,0.012351847253739834,0.02359929494559765,-0.012699214741587639,0.08451078832149506,-0.012566841207444668,0.06447767466306686,-0.006115493830293417,0.03408956900238991,-0.008625032380223274,-0.026798611506819725,0.03444630280137062,0.009913774207234383,-0.0000315463803417515,0.006851015146821737,-0.032078664749860764,-0.004701144993305206,0.045833054929971695,0.04334401711821556,0.029312726110219955,0.002799626439809799,0.0009445621399208903,0.011676235124468803,-0.017583340406417847,-0.017839500680565834,-0.01957531087100506,0.06603090465068817,0.004383182153105736,-0.07435646653175354,0.02129826508462429,-0.008709297515451908,-0.02488499879837036,-0.03853003680706024,-0.07863733172416687,0.005525003653019667,-0.003934497479349375,0.018077818676829338,0.026060469448566437,0.00010563881369307637,-0.02184625342488289,0.04159846901893616,0.009216181002557278,-0.015383430756628513,0.03954694792628288,0.0034348045010119677,-0.009763904847204685,-0.017557118088006973,-0.045127544552087784,0.030912578105926514,-0.08120274543762207,-0.008044665679335594,0.007732882630079985,-0.011733924970030785,0.053281720727682114,-0.031031478196382523,0.036995191127061844,-0.019438356161117554,-0.024948520585894585,0.021895648911595345,0.04357647895812988,-0.0543852224946022,0.006791652645915747,0.05536442622542381,-0.007742897141724825,0.053335174918174744,-0.018500829115509987,0.0034497100859880447,-0.03143676742911339,0.0002932249044533819,0.06959694623947144,0.05610407516360283,-0.03300081193447113,0.025939732789993286,-0.0661783292889595,0.032296787947416306,-0.040980931371450424,-0.04148871451616287,-0.046190280467271805,-0.021924583241343498,-0.09130614995956421,0.01695062592625618,-0.023735374212265015,0.021014058962464333,0.009224633686244488,-0.015267875045537949,0.0011836689664050937,0.0129170510917902,-0.053957171738147736,-0.053881168365478516,-0.0056190211325883865,-0.01334297563880682,-0.040359362959861755,0.060002297163009644,-0.010700030252337456,-0.05865083634853363,0.038940735161304474,0.050140175968408585,0.031123116612434387,-0.007796755991876125,0.01888299360871315,0.056350987404584885,-0.00011035550414817408,-0.029520096257328987,0.01626775600016117,-0.003999222535640001,-0.06689810007810593,0.011025018990039825,0.0433201901614666,0.018821541219949722,-0.026985906064510345,-0.004186531994491816,-0.014960103668272495,0.01164198201149702,-0.026625173166394234,-0.009108765050768852,-0.015610677190124989,0.012314814142882824,-0.006500537041574717,-0.045976415276527405,0.021305657923221588,0.03719862177968025,0.003460388630628586,-0.016028115525841713,-0.03375232592225075,0.03248351812362671,-0.06480071693658829,-0.0485091395676136,0.02196839638054371,0.029790349304676056,0.032868169248104095,-0.022616857662796974,0.001654361025430262,0.028126094490289688,0.015311822295188904,0.02871229499578476,0.03488107770681381,0.04284779354929924,-0.03542110696434975,-0.019176939502358437,0.054026857018470764,0.01751556806266308,-0.007263475097715855,0.024211563169956207,0.0041097113862633705,-0.03942430391907692,-0.043065767735242844,0.02723686210811138,-0.03300074487924576,0.02331388182938099,-0.019137607887387276,-0.010823631659150124,0.010141915641725063,0.006417427211999893,-0.006763248238712549,-0.04805263504385948,0.00048437793157063425,0.0006201330688782036,0.03401198238134384,-0.031052468344569206,0.06558743864297867,0.037460725754499435,0.0008628118084743619,-0.03892296180129051,0.011443955823779106,-0.016313942149281502,-0.04051172733306885,0.01944725587964058,0.012905989773571491,0.015212762169539928,-0.05001882091164589,-0.024035844951868057,-0.009228141978383064,0.023983219638466835,-0.06283508241176605,0.07611259073019028,0.019059037789702415,-0.06139267981052399,-6.768609613365998e-33,-0.005919241812080145,-0.02142324484884739,-0.03617483749985695,-0.005593320820480585,-0.04914528876543045,-0.02037481591105461,0.016291458159685135,-0.03498569503426552,0.021712690591812134,0.011133291758596897,-0.015751702710986137,-0.04371689260005951,0.016620175912976265,0.028142867609858513,0.021407682448625565,0.0250602588057518,0.049659136682748795,0.007498277351260185,-0.015346686355769634,0.021745137870311737,-0.03497953712940216,0.034453731030225754,0.009575826115906239,-0.03377649188041687,-0.023251187056303024,0.03517872095108032,-0.022803282365202904,0.022331876680254936,0.008131268434226513,0.01135995052754879,0.011194136925041676,0.0037505398504436016,-0.01939084380865097,-0.04054229333996773,-0.005969162564724684,-0.0011595665710046887,0.008598404936492443,-0.03747986629605293,-0.00825559627264738,0.026357531547546387,0.025593793019652367,0.025664007291197777,0.03565157204866409,-0.01596268080174923,0.011890366673469543,0.00862952135503292,0.011474992148578167,-0.005036435555666685,-0.0006006054463796318,-0.023202303797006607,-0.012892310507595539,0.021097349002957344,-0.000665804254822433,0.028990168124437332,0.035701315850019455,0.08631990849971771,0.07800229638814926,-0.013378068804740906,-0.06551868468523026,0.03464290127158165,-0.07305017858743668,-0.056614067405462265,0.0004790786188095808,0.05900713428854942,0.023340219631791115,0.04017866030335426,-0.007808852009475231,-0.0056535848416388035,-0.015984997153282166,0.05023249611258507,-0.007758797146379948,-0.02923118881881237,0.015521159395575523,-0.08935461938381195,-0.010696202516555786,0.020127994939684868,0.04959907755255699,0.012055473402142525,-0.013419550843536854,0.05448005720973015,-0.014950818382203579,0.010802126489579678,0.0023461172822862864,0.003982049413025379,-0.028024176135659218,-0.0245086457580328,0.0059852260164916515,-0.001089777098968625,0.016932537779211998,0.009749439544975758,0.015156671404838562,0.01880207099020481,-0.0346350260078907,0.06383712589740753,-0.06843916326761246,-0.014677523635327816,0.05478864908218384,0.04970372095704079,-0.0160120390355587,-0.05846747010946274,-0.0018767694709822536,-0.008387389592826366,-0.006521679926663637,-0.06563536077737808,0.008245515637099743,-0.0020001984667032957,0.010793626308441162,-0.031926531344652176,-0.049167703837156296,0.0012063542380928993,0.01699715107679367,0.020185772329568863,-0.008952531032264233,-0.024410827085375786,0.0015020502032712102,-0.023743245750665665,-0.031866125762462616,-0.003979504108428955,-0.0034056047443300486,0.001237400807440281,0.018795883283019066,0.023547351360321045,-0.027543028816580772,0.025928152725100517,-0.007135374471545219,0.0035909751895815134,-0.004469990264624357,-0.024288944900035858,0.015008363872766495,-0.05398622900247574,0.014391042292118073,-0.0019521515350788832,3.107083443865122e-7,0.007108638063073158,0.05133036896586418,-0.014478224329650402,0.03190268576145172,0.015508368611335754,-0.0007755397818982601,-0.037234243005514145,-0.02363530918955803,0.016588328406214714,-0.025876186788082123,-0.0011702417396008968,-0.013382754288613796,-0.006682844366878271,0.06746241450309753,0.010524631477892399,-0.08338107913732529,0.019514331594109535,-0.03630254790186882,-0.04203289374709129,0.014280231669545174,0.025340819731354713,0.04962718114256859,0.08137505501508713,-0.0003187797556165606,-0.009780146181583405,0.08746922761201859,-0.024111662060022354,0.00014150113565847278,0.02565142512321472,-0.010569751262664795,-0.04353738948702812,-0.011038731783628464,-0.015183198265731335,0.03317165747284889,-0.004363072104752064,0.015771090984344482,-0.0035525495186448097,-0.05951834097504616,0.02267843298614025,0.04057401791214943,0.0008693024865351617,0.010055635124444962,-0.017107060179114342,-0.04248650372028351,0.00470215966925025,-0.06951692700386047,-0.017331581562757492,0.012087917886674404,-0.01997196674346924,0.009657210670411587,-0.016120407730340958,0.026681657880544662,-0.0371759869158268,-0.0017869221046566963,0.040754396468400955,0.014195216819643974,0.01033785194158554,0.01716754026710987,0.02620595507323742,0.009156516753137112,-0.015029472298920155,-0.014111646451056004,0.023699425160884857,0.06634612381458282,-0.022723430767655373,0.04493096098303795,0.007141821086406708,3.7900203911378248e-34,0.045932382345199585,-0.025854911655187607,0.0476321280002594,-0.008056370541453362,0.040686555206775665,-0.03917115926742554,0.113116554915905,-0.00850093923509121,0.024255190044641495,-0.07351713627576828,-0.008063499815762043]'
SET
  @TechnicalDesignVector_947ed201 = N'[-0.018275558948516846,0.008699010126292706,-0.03553782403469086,-0.06319372355937958,0.0004723244346678257,-0.04001975432038307,0.017999816685914993,0.010444478131830692,-0.09727055579423904,0.0122017627581954,-0.038567349314689636,-0.015156594105064869,0.022499043494462967,0.1988368183374405,0.01390178594738245,-0.07798773795366287,-0.05607505142688751,0.01775524765253067,-0.012342534027993679,0.01506788283586502,0.025397945195436478,-0.00617997907102108,-0.028157062828540802,0.004905418027192354,0.02790421061217785,-0.05129213258624077,-0.06441298127174377,-0.004934542812407017,0.0345304012298584,-0.08550778031349182,-0.009111936204135418,0.05088448151946068,-0.005632579792290926,0.014957239851355553,0.0000020494144337135367,-0.00783787202090025,-0.008877590298652649,0.0062256669625639915,-0.061745695769786835,0.0299496091902256,0.06320787966251373,-0.0034431263338774443,0.015868330374360085,0.024057060480117798,0.026933960616588593,-0.0512690506875515,-0.07136336714029312,0.023242374882102013,0.015224880538880825,-0.023237934336066246,0.008143896237015724,-0.025770029053092003,-0.0022039562463760376,0.020689908415079117,-0.013661199249327183,0.07998421788215637,-0.011274637654423714,-0.06255818903446198,0.028782444074749947,-0.016811231151223183,0.001223045983351767,0.004285541828721762,0.017288079485297203,-0.029295584186911583,0.036301080137491226,-0.0006720586097799242,0.03624793142080307,-0.04881192743778229,-0.04483610391616821,0.01936037465929985,0.09555435925722122,-0.01343547087162733,-0.02055390737950802,-0.02885638363659382,0.006186054088175297,-0.049041811376810074,-0.054867684841156006,-0.0046557351015508175,0.024986740201711655,0.000603813910856843,-0.11863674223423004,0.06077166646718979,-0.0551258809864521,-0.02457081899046898,0.05471071973443031,-0.0026957858353853226,-0.004658782389014959,-0.015933692455291748,-0.03845059126615524,0.015288793481886387,0.044151417911052704,-0.024500522762537003,0.018973510712385178,-0.029704438522458076,-0.03731994703412056,-0.009358095936477184,0.05883386731147766,-0.03986930474638939,0.017474621534347534,-0.06065116450190544,0.0514613538980484,0.018132034689188004,0.018845435231924057,0.0132224690169096,0.060768984258174896,0.02391909435391426,0.011813471093773842,-0.02610812708735466,-0.019012145698070526,0.08167171478271484,0.01116938702762127,0.02677953988313675,-0.012790520675480366,0.005818286910653114,-0.0383317731320858,0.024590248242020607,-0.05444246903061867,-0.005721894558519125,0.004332371987402439,0.013422159478068352,0.05662010610103607,-0.021597450599074364,-0.015064203180372715,0.03787575662136078,0.023952551186084747,0.0666951984167099,-0.02950340136885643,-0.03546993434429169,-0.008379403501749039,-0.0008533114450983703,-0.0026297150179743767,0.006134905386716127,0.03673823922872543,-0.008305090479552746,-0.019860535860061646,0.03284965455532074,-0.010169481858611107,0.00901368074119091,-0.006626808550208807,-0.017446232959628105,-0.008033603429794312,0.02717377059161663,-0.052632614970207214,0.036448001861572266,0.019578073173761368,0.010690986178815365,-0.0040821791626513,0.04657330736517906,-0.016734670847654343,0.04254329577088356,0.019278384745121002,-0.016357572749257088,0.05072501674294472,0.022665362805128098,-0.06627470254898071,0.005545326042920351,-0.04997944086790085,0.0077598560601472855,0.03225317224860191,0.07593975961208344,0.013469874858856201,-0.04232989624142647,0.044493477791547775,0.025097982957959175,-0.03442298620939255,0.06489259749650955,-0.12275516241788864,-0.024366682395339012,-0.027463095262646675,-0.003509245812892914,0.01664114184677601,-0.02229667641222477,-0.04215121269226074,0.02945391647517681,0.03917543217539787,-0.052354902029037476,0.09285868704319,-0.044849004596471786,-0.0029286693315953016,0.024297617375850677,0.01719527319073677,-0.09613978862762451,0.01587607152760029,-0.025344835594296455,0.027978895232081413,-0.016302524134516716,-0.02469300851225853,0.008926810696721077,-0.00034469194361008704,0.032407246530056,0.002808353863656521,0.03674127161502838,-0.04920151084661484,0.0036410957109183073,-0.02823258750140667,-0.017019595950841904,-0.02924727089703083,-0.08036654442548752,0.044712673872709274,0.018590757623314857,0.014489359222352505,0.04823930189013481,-0.03131868690252304,0.00018197698227595538,0.02480459026992321,0.018819650635123253,-0.008428272791206837,-0.03628092259168625,-0.06770357489585876,-0.0000053132648645259906,0.005462597124278545,0.007138533517718315,-0.04335325211286545,0.03660145401954651,0.014890886843204498,-0.0013025829102844,-0.005375226028263569,0.0027372175827622414,-0.0616312213242054,-0.003058646572753787,-0.04953927919268608,-0.021116234362125397,0.06057865172624588,0.0025655822828412056,0.09398426860570908,0.04788168519735336,-0.0134721789509058,-0.04292920231819153,0.074143186211586,0.02402953989803791,0.01079961471259594,-0.030399439856410027,0.03793729469180107,0.038134317845106125,0.016350124031305313,0.055091492831707,0.0510074608027935,0.0004562005924526602,-0.004205011762678623,0.04500919580459595,-0.018314270302653313,-0.06010730564594269,-0.0446346215903759,0.021371034905314445,0.04437212273478508,-0.022370414808392525,-0.039978645741939545,0.01941453292965889,0.0031252484768629074,-0.009695987217128277,0.0049398187547922134,0.046690683811903,0.036464229226112366,-0.00669159647077322,0.0009693839238025248,-0.0429498590528965,-0.028120141476392746,-0.010080959647893906,-0.008305114693939686,0.07804284244775772,-0.018789727240800858,-0.008108684793114662,-0.0344151146709919,0.0016583420801907778,0.00036165982601232827,-0.03974652662873268,0.06554252654314041,0.02356860227882862,0.009427119977772236,0.03157715126872063,0.008287597447633743,0.009757702238857746,-0.0092003820464015,-0.03244323283433914,0.018590381368994713,0.0190623477101326,-0.013428235426545143,0.022945592179894447,-0.02330559678375721,-0.040496837347745895,-0.01036742702126503,-0.06310229748487473,0.002530308673158288,0.02446841076016426,-0.019880961626768112,0.02000616118311882,0.03480355814099312,-0.011592385359108448,-0.01544674951583147,-0.1304854154586792,0.01620461605489254,-0.0021982239559292793,0.013758093118667603,-0.03580469638109207,-0.0656987726688385,0.01356237567961216,-0.013306709937751293,-0.033584192395210266,-0.02106117457151413,0.029118558391928673,-0.018830662593245506,-0.001705314265564084,-0.00576429907232523,0.027321994304656982,-0.05823236331343651,0.040434326976537704,-0.029432523995637894,-0.002596951788291335,0.03206442669034004,0.0442313589155674,0.06364528089761734,0.004438148811459541,0.007563823834061623,-0.032965850085020065,0.009513572789728642,0.017072226852178574,0.005249079316854477,0.019303010776638985,-0.006751066539436579,0.014183628372848034,0.018751468509435654,-0.002618589671328664,-0.0030149866361171007,-0.0398600772023201,-0.05655454099178314,-0.002244140487164259,0.005995884537696838,-0.039053723216056824,-0.04214789345860481,0.010670398361980915,0.01599891483783722,-0.012148321606218815,-0.010723290033638477,0.030626527965068817,0.07107750326395035,-0.005933284293860197,-0.028482766821980476,-0.007603410631418228,0.02583419531583786,-0.03602198511362076,0.009318357333540916,-0.00896275695413351,-0.040449533611536026,-0.05442557483911514,0.01994696632027626,-0.04287933558225632,0.020592806860804558,0.030854325741529465,-0.172217458486557,0.0008586446056142449,0.039391808211803436,0.05785880610346794,0.0061757927760481834,-0.02367374673485756,0.012784316204488277,0.018681352958083153,-0.0342266671359539,0.019750935956835747,-0.01529570110142231,-0.08811774104833603,0.046286534518003464,0.05365601181983948,0.04829271137714386,0.040859416127204895,-0.016522247344255447,0.020435793325304985,0.04335169121623039,0.0056087179109454155,0.04647151008248329,0.008206658065319061,0.04710265249013901,0.03640159219503403,0.04357859119772911,0.030390646308660507,-0.011609774082899094,-0.053821854293346405,0.04514225944876671,0.03393350541591644,0.050315745174884796,0.00146999373100698,0.033449381589889526,-0.006933170836418867,0.052018940448760986,0.0020694562699645758,0.08134587854146957,-0.019617503508925438,0.044261444360017776,-0.013344029895961285,-0.03896007314324379,0.04884154722094536,0.0046988194808363914,0.007254344876855612,0.014710702002048492,-0.06312856078147888,0.006904639303684235,0.037672873586416245,0.032462622970342636,0.027655936777591705,0.021064557135105133,0.01808927208185196,0.005257289391011,0.040948741137981415,-0.010551707819104195,-0.029532408341765404,0.05241246894001961,0.013054156675934792,-0.06827946752309799,0.02588251419365406,0.007990679703652859,-0.010301160626113415,-0.0531594417989254,-0.03984014317393303,0.0010257642716169357,-0.01028039213269949,-0.006958768703043461,0.03126964345574379,0.0025519123300909996,-0.03757621720433235,0.040852535516023636,0.0019225673750042915,-0.004331354517489672,0.015581589192152023,0.007385551929473877,0.022369008511304855,-0.007865560241043568,-0.034646134823560715,0.05071769654750824,-0.06490586698055267,-0.006919506471604109,-0.00026952833286486566,-0.010334465652704239,0.05765550583600998,-0.028045348823070526,0.02960417978465557,-0.03556893393397331,-0.019616136327385902,-0.0017154563684016466,0.03243177384138107,-0.0018786038272082806,-0.003325445344671607,0.06167454272508621,-0.008376996032893658,0.05741315707564354,-0.005119758192449808,-0.00016871964908204973,-0.03956955298781395,0.0030400122050195932,0.05527811497449875,0.03658269718289375,-0.026528924703598022,0.005929551087319851,-0.06989888846874237,0.01159668155014515,-0.030707132071256638,-0.04829439893364906,-0.04784930497407913,0.02626129612326622,-0.03332504630088806,-0.02031792141497135,-0.00799194909632206,0.0074818870052695274,0.027888568118214607,-0.014958915300667286,-0.007217596750706434,0.022830668836832047,-0.04894161969423294,-0.05201103538274765,-0.010298004373908043,-0.004294651094824076,-0.033191513270139694,0.05957520380616188,-0.0014821136137470603,-0.03390179201960564,0.02277013100683689,0.05026444420218468,0.04067966341972351,0.01789671741425991,0.021963858976960182,0.045623548328876495,-0.006330631207674742,-0.02240135706961155,0.0662124902009964,-0.011166783981025219,-0.07769989222288132,0.02589087001979351,0.01815538853406906,-0.009937228634953499,-0.013255449011921883,-0.02611360140144825,-0.03680380806326866,0.014232958666980267,-0.017004895955324173,-0.016864817589521408,0.019746093079447746,0.004249196033924818,-0.014137299731373787,-0.042049430310726166,0.02832653932273388,0.05095575749874115,-0.028519919142127037,-0.013637823052704334,-0.03407825902104378,0.0311801265925169,-0.06188133731484413,-0.030708830803632736,0.010935709811747074,0.016060225665569305,0.02748625911772251,-0.005387437995523214,-0.022266218438744545,0.01781599223613739,0.005598412360996008,0.023704225197434425,0.009483566507697105,0.029178274795413017,0.021890494972467422,-0.0693809762597084,0.05114154517650604,0.022860663011670113,-0.005867606028914452,0.008236786350607872,-0.0009527381625957787,-0.025282058864831924,-0.04787490889430046,0.05993807315826416,-0.052554868161678314,0.0206504724919796,0.009715569205582142,-0.006727405358105898,0.02342590130865574,0.03007275052368641,-0.02422984316945076,-0.03470630198717117,0.003081901930272579,0.010384401306509972,0.06087970361113548,-0.03464139997959137,0.060998205095529556,0.023743314668536186,-0.0044139353558421135,-0.04534124583005905,-0.0004487595579121262,0.012380387634038925,-0.03824178874492645,0.024966392666101456,-0.01433131005614996,0.011735264211893082,-0.08595331758260727,-0.012041616253554821,0.02444969303905964,0.020430173724889755,-0.025359025225043297,0.037718549370765686,0.0018971629906445742,0.001529052504338324,-6.966626044865828e-33,-0.01060160156339407,0.004176981747150421,-0.029911847785115242,-0.027772612869739532,-0.07409074902534485,-0.026367926970124245,-0.012800684198737144,-0.04016713425517082,0.02064896561205387,-0.018553433939814568,-0.009200444445014,-0.06235891953110695,0.00880896020680666,0.0356905423104763,0.01431389432400465,-0.0008018023800104856,0.040169112384319305,0.011685381643474102,-0.040867190808057785,0.021819956600666046,-0.016894005239009857,0.04513406753540039,0.0029931399039924145,-0.008824480697512627,-0.03681429848074913,0.031166691333055496,-0.021220048889517784,0.03188389912247658,-0.012385539710521698,-0.0029201526194810867,-0.003235244657844305,0.01405358873307705,-0.03572782501578331,-0.07235130667686462,-0.002761614276096225,0.017957234755158424,0.004624043125659227,-0.039102859795093536,0.015584190376102924,0.02559853158891201,0.014999856241047382,0.056286025792360306,0.02715269848704338,-0.029956959187984467,0.038206055760383606,-0.0020915488712489605,-0.0043874019756913185,-0.007049607113003731,0.0046597495675086975,0.02126661129295826,0.018308494240045547,0.03589243069291115,-0.03317417576909065,0.02194809727370739,0.01871369779109955,0.05704391747713089,0.07506173104047775,0.002031835727393627,-0.06231703609228134,0.018494175747036934,-0.08294349908828735,-0.04967807978391647,0.016765909269452095,0.037977077066898346,0.030062422156333923,0.04520159214735031,0.007099411450326443,0.0009018651326186955,-0.041339751332998276,0.012569701299071312,-0.007800387218594551,-0.03905053809285164,0.02851719781756401,-0.06561338901519775,-0.020448967814445496,0.03733333200216293,0.03288824111223221,0.004678461235016584,0.009852265939116478,-0.005579187069088221,-0.01845559850335121,0.04617157205939293,-0.019066525623202324,0.014243665151298046,-0.022834017872810364,-0.06103949621319771,0.01437576487660408,0.015630196779966354,0.0014907827135175467,0.021247485652565956,-0.023698948323726654,0.0028410025406628847,-0.041130468249320984,0.08869311213493347,-0.08556519448757172,-0.02904372848570347,0.06418804079294205,0.08034227788448334,-0.019487222656607628,-0.04239514470100403,0.04615016281604767,-0.014108123257756233,-0.020568430423736572,-0.027262220159173012,-0.011775103397667408,0.0015336039941757917,0.006633810233324766,0.005750591866672039,-0.019220853224396706,0.00973342452198267,0.04151376709342003,0.029809003695845604,-0.00568835623562336,-0.05339161306619644,0.03616373986005783,-0.01275301817804575,0.0024368013255298138,-0.040462180972099304,0.02678726799786091,0.024326112121343613,0.008055874146521091,0.012260416522622108,-0.02041918784379959,-0.009593955241143703,-0.00007411919796140864,-0.01446833461523056,-0.018579687923192978,-0.05151784047484398,-0.011168303899466991,-0.08623841404914856,0.007968402467668056,-0.04313782602548599,3.048710937036958e-7,0.009496576152741909,0.03291536495089531,-0.0347554087638855,0.018979884684085846,0.028771571815013885,0.001537384930998087,-0.029270948842167854,-0.010748377069830894,0.0325922816991806,-0.049013473093509674,0.010121949017047882,0.0023143200669437647,-0.0009283345425501466,0.0543719083070755,-0.023478206247091293,-0.04335380718111992,-0.017026163637638092,-0.024634722620248795,-0.04063069820404053,0.014039106667041779,-0.017417218536138535,0.04928147792816162,0.0972704216837883,0.0005954652442596853,-0.008303536102175713,0.055602844804525375,-0.010387490503489971,-0.005406729411333799,0.04160565510392189,0.0045037297531962395,-0.00892966240644455,-0.042648859322071075,-0.027723582461476326,0.00896200817078352,-0.038520947098731995,0.03360191360116005,-0.007044584956020117,-0.045458413660526276,0.044472601264715195,0.04531576856970787,0.018003705888986588,-0.026030678302049637,-0.006636408623307943,-0.04566315934062004,0.010243387892842293,-0.02075561136007309,-0.046617090702056885,0.04172182083129883,-0.016490040346980095,0.009978714399039745,-0.026222974061965942,0.013149422593414783,-0.034422580152750015,-0.011343634687364101,0.028546195477247238,-0.011792425997555256,-0.00024230418785009533,0.03266485407948494,0.026390010491013527,0.01625422202050686,-0.026530440896749496,-0.0035804654471576214,-0.008059723302721977,0.05314315855503082,0.003981480840593576,-0.012062846682965755,0.008749278262257576,3.6277778343178672e-34,0.05222104489803314,-0.0287676602602005,0.02313390001654625,-0.04133361577987671,0.019804565235972404,-0.042540550231933594,0.12411724030971527,-0.029675615951418877,0.03717102110385895,-0.05603766813874245,-0.031117310747504234]'
SET
  @HasCustomProps_947ed201 = 1
SET
  @HasCustomEvents_947ed201 = 0
SET
  @RequiresData_947ed201 = 1
SET
  @DependencyCount_947ed201 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_947ed201 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_947ed201 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_947ed201 = 1
SET
  @ID_947ed201 = '1ED87375-C64F-490B-A2F4-9AD267E9429B'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_947ed201,
  @Name = @Name_947ed201,
  @Version = @Version_947ed201,
  @VersionSequence = @VersionSequence_947ed201,
  @Title = @Title_947ed201,
  @Description = @Description_947ed201,
  @Type = @Type_947ed201,
  @Status = @Status_947ed201,
  @DeveloperName = @DeveloperName_947ed201,
  @DeveloperEmail = @DeveloperEmail_947ed201,
  @DeveloperOrganization = @DeveloperOrganization_947ed201,
  @SourceRegistryID = @SourceRegistryID_947ed201,
  @ReplicatedAt = @ReplicatedAt_947ed201,
  @LastSyncedAt = @LastSyncedAt_947ed201,
  @Specification = @Specification_947ed201,
  @FunctionalRequirements = @FunctionalRequirements_947ed201,
  @TechnicalDesign = @TechnicalDesign_947ed201,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_947ed201,
  @TechnicalDesignVector = @TechnicalDesignVector_947ed201,
  @HasCustomProps = @HasCustomProps_947ed201,
  @HasCustomEvents = @HasCustomEvents_947ed201,
  @RequiresData = @RequiresData_947ed201,
  @DependencyCount = @DependencyCount_947ed201,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_947ed201,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_947ed201,
  @HasRequiredCustomProps = @HasRequiredCustomProps_947ed201,
  @ID = @ID_947ed201;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_6c96ca00 NVARCHAR(MAX),
@Name_6c96ca00 NVARCHAR(500),
@Version_6c96ca00 NVARCHAR(50),
@VersionSequence_6c96ca00 INT,
@Title_6c96ca00 NVARCHAR(1000),
@Description_6c96ca00 NVARCHAR(MAX),
@Type_6c96ca00 NVARCHAR(255),
@Status_6c96ca00 NVARCHAR(50),
@DeveloperName_6c96ca00 NVARCHAR(255),
@DeveloperEmail_6c96ca00 NVARCHAR(255),
@DeveloperOrganization_6c96ca00 NVARCHAR(255),
@SourceRegistryID_6c96ca00 UNIQUEIDENTIFIER,
@ReplicatedAt_6c96ca00 DATETIMEOFFSET,
@LastSyncedAt_6c96ca00 DATETIMEOFFSET,
@Specification_6c96ca00 NVARCHAR(MAX),
@FunctionalRequirements_6c96ca00 NVARCHAR(MAX),
@TechnicalDesign_6c96ca00 NVARCHAR(MAX),
@FunctionalRequirementsVector_6c96ca00 NVARCHAR(MAX),
@TechnicalDesignVector_6c96ca00 NVARCHAR(MAX),
@HasCustomProps_6c96ca00 BIT,
@HasCustomEvents_6c96ca00 BIT,
@RequiresData_6c96ca00 BIT,
@DependencyCount_6c96ca00 INT,
@TechnicalDesignVectorEmbeddingModelID_6c96ca00 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_6c96ca00 NVARCHAR(MAX),
@HasRequiredCustomProps_6c96ca00 BIT,
@ID_6c96ca00 UNIQUEIDENTIFIER
SET
  @Namespace_6c96ca00 = N'CRM/Analytics'
SET
  @Name_6c96ca00 = N'StageDetailsPanel'
SET
  @Version_6c96ca00 = N'1.0.0'
SET
  @VersionSequence_6c96ca00 = 1
SET
  @Title_6c96ca00 = N'Stage Details Panel'
SET
  @Description_6c96ca00 = N'Slide-out panel showing details for a selected pipeline stage'
SET
  @Type_6c96ca00 = N'Other'
SET
  @Status_6c96ca00 = N'Published'
SET
  @Specification_6c96ca00 = N'{"name":"StageDetailsPanel","namespace":"CRM/Analytics","type":"Other","location":"embedded","code":"// StageDetailsPanel Sub-component\nconst StageDetailsPanel = ({ stage, deals, isOpen, onClose, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) => {\n  const [sortBy, setSortBy] = useState(''value'');\n  const [sortOrder, setSortOrder] = useState(''desc'');\n  const [filterText, setFilterText] = useState('''');\n\n  const sortedAndFilteredDeals = useMemo(() => {\n    if (!deals) return [];\n    \n    let filtered = deals;\n    if (filterText) {\n      filtered = deals.filter(deal => \n        deal.name?.toLowerCase().includes(filterText.toLowerCase()) ||\n        deal.accountName?.toLowerCase().includes(filterText.toLowerCase())\n      );\n    }\n\n    return [...filtered].sort((a, b) => {\n      const aVal = a[sortBy];\n      const bVal = b[sortBy];\n      const modifier = sortOrder === ''asc'' ? 1 : -1;\n      \n      if (typeof aVal === ''string'') {\n        return aVal.localeCompare(bVal) * modifier;\n      }\n      return (aVal - bVal) * modifier;\n    });\n  }, [deals, sortBy, sortOrder, filterText]);\n\n  const handleSort = (field) => {\n    if (sortBy === field) {\n      setSortOrder(sortOrder === ''asc'' ? ''desc'' : ''asc'');\n    } else {\n      setSortBy(field);\n      setSortOrder(''desc'');\n    }\n  };\n\n  const handleOpenDeal = (dealId) => {\n    if (callbacks?.OpenEntityRecord) {\n      callbacks.OpenEntityRecord(''Deals'', dealId);\n    }\n  };\n\n  return (\n    <div className={`stage-details-panel $' + '{isOpen ? ''open'' : ''''}`} style={{\n      position: ''fixed'',\n      top: 0,\n      right: isOpen ? 0 : ''-400px'',\n      width: ''400px'',\n      height: ''100%'',\n      backgroundColor: ''#fff'',\n      boxShadow: ''-2px 0 10px rgba(0,0,0,0.1)'',\n      transition: ''right 0.3s ease'',\n      zIndex: 1000,\n      display: ''flex'',\n      flexDirection: ''column'',\n      overflow: ''hidden''\n    }}>\n      <div style={{\n        padding: ''20px'',\n        borderBottom: ''1px solid #e0e0e0'',\n        backgroundColor: ''#f5f5f5''\n      }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n          <h3 style={{ margin: 0 }}>{stage?.name || ''Stage Details''}</h3>\n          <button \n            onClick={onClose}\n            style={{\n              background: ''none'',\n              border: ''none'',\n              fontSize: ''24px'',\n              cursor: ''pointer'',\n              padding: ''0'',\n              width: ''30px'',\n              height: ''30px''\n            }}\n          >×</button>\n        </div>\n        {stage && (\n          <div style={{ marginTop: ''10px'', fontSize: ''14px'', color: ''#666'' }}>\n            <div>{stage.count} deals</div>\n            <div>Total Value: $' + '{(stage.value || 0).toLocaleString()}</div>\n            <div>Avg Days: {stage.avgDays || 0}</div>\n          </div>\n        )}\n      </div>\n\n      <div style={{ padding: ''15px'', borderBottom: ''1px solid #e0e0e0'' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Filter deals...\"\n          value={filterText}\n          onChange={(e) => setFilterText(e.target.value)}\n          style={{\n            width: ''100%'',\n            padding: ''8px'',\n            border: ''1px solid #ddd'',\n            borderRadius: ''4px''\n          }}\n        />\n      </div>\n\n      <div style={{ \n        flex: 1, \n        overflowY: ''auto'',\n        padding: ''15px''\n      }}>\n        <div style={{ marginBottom: ''10px'' }}>\n          <button \n            onClick={() => handleSort(''name'')}\n            style={{\n              marginRight: ''10px'',\n              padding: ''5px 10px'',\n              border: ''1px solid #ddd'',\n              borderRadius: ''4px'',\n              background: sortBy === ''name'' ? ''#007bff'' : ''#fff'',\n              color: sortBy === ''name'' ? ''#fff'' : ''#333'',\n              cursor: ''pointer''\n            }}\n          >\n            Name {sortBy === ''name'' && (sortOrder === ''asc'' ? ''↑'' : ''↓'')}\n          </button>\n          <button \n            onClick={() => handleSort(''value'')}\n            style={{\n              marginRight: ''10px'',\n              padding: ''5px 10px'',\n              border: ''1px solid #ddd'',\n              borderRadius: ''4px'',\n              background: sortBy === ''value'' ? ''#007bff'' : ''#fff'',\n              color: sortBy === ''value'' ? ''#fff'' : ''#333'',\n              cursor: ''pointer''\n            }}\n          >\n            Value {sortBy === ''value'' && (sortOrder === ''asc'' ? ''↑'' : ''↓'')}\n          </button>\n          <button \n            onClick={() => handleSort(''daysInStage'')}\n            style={{\n              padding: ''5px 10px'',\n              border: ''1px solid #ddd'',\n              borderRadius: ''4px'',\n              background: sortBy === ''daysInStage'' ? ''#007bff'' : ''#fff'',\n              color: sortBy === ''daysInStage'' ? ''#fff'' : ''#333'',\n              cursor: ''pointer''\n            }}\n          >\n            Days {sortBy === ''daysInStage'' && (sortOrder === ''asc'' ? ''↑'' : ''↓'')}\n          </button>\n        </div>\n\n        <div>\n          {sortedAndFilteredDeals.map((deal, index) => (\n            <div \n              key={deal.id || index}\n              style={{\n                padding: ''10px'',\n                marginBottom: ''10px'',\n                border: ''1px solid #e0e0e0'',\n                borderRadius: ''5px'',\n                backgroundColor: ''#fafafa''\n              }}\n            >\n              <div style={{ fontWeight: ''bold'', marginBottom: ''5px'' }}>\n                {deal.name}\n              </div>\n              <div style={{ fontSize: ''13px'', color: ''#666'', marginBottom: ''5px'' }}>\n                {deal.accountName}\n              </div>\n              <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n                <div>\n                  <span style={{ fontWeight: ''bold'' }}>$' + '{(deal.value || 0).toLocaleString()}</span>\n                  <span style={{ marginLeft: ''10px'', color: ''#888'' }}>{deal.daysInStage} days</span>\n                </div>\n                <button\n                  onClick={() => handleOpenDeal(deal.id)}\n                  style={{\n                    padding: ''4px 8px'',\n                    fontSize: ''12px'',\n                    border: ''1px solid #007bff'',\n                    borderRadius: ''3px'',\n                    background: ''#fff'',\n                    color: ''#007bff'',\n                    cursor: ''pointer''\n                  }}\n                  title=\"Open in Explorer\"\n                >\n                  ↗\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Stage Details Panel\n\n### Purpose\nSlide-out panel displaying deals for a selected pipeline stage with filtering and sorting.\n\n### Features\n- Slide in/out animation from right\n- Stage header with name and metrics\n- Toggle between card and list views\n- Sort deals by amount, date, or probability\n- Filter deals by name\n- Display deal cards or list items\n- Close button and animation\n\n### Interactions\n- Click to open deal record\n- Sort and filter controls\n- View mode toggle\n- Smooth transitions","dataRequirements":{"mode":"views","description":"Displays deals for a selected pipeline stage","entities":[{"name":"Deals","description":"Deal entities filtered by stage","displayFields":["ID","DealName","Amount","CloseDate","Probability","Stage","Account"],"filterFields":["Stage","DealName"],"sortFields":["Amount","CloseDate","Probability"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Displays deals for selected stage in cards or list view"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Props\n- selectedStage: Stage data object with deals\n- isPanelOpen: Boolean for visibility\n- displayMode: ''cards'' or ''list''\n- onClose: Callback to close panel\n- onDisplayModeChange: Callback for view mode\n- onOpenDeal: Callback to open deal record\n\n### State\n- sortBy: Current sort field\n- filterText: Search filter\n\n### Layout\n- Fixed position overlay\n- Transform-based animation\n- Scrollable content area","properties":[{"name":"selectedStage","type":"{name: string, deals: Array<{ID: string, DealName: string, Amount: number, CloseDate: string, Probability: number}>}","required":false,"description":"Selected stage data with deals array"},{"name":"isPanelOpen","type":"boolean","required":true,"description":"Panel visibility state"},{"name":"displayMode","type":"''cards'' | ''list''","required":true,"description":"View mode for deals display"},{"name":"onClose","type":"() => void","required":true,"description":"Callback to close panel"},{"name":"onDisplayModeChange","type":"(mode: ''cards'' | ''list'') => void","required":false,"description":"Callback when view mode changes"},{"name":"onOpenDeal","type":"(dealId: string) => void","required":false,"description":"Callback to open deal record"}],"events":[],"dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_6c96ca00 = N'## Stage Details Panel

### Purpose
Slide-out panel displaying deals for a selected pipeline stage with filtering and sorting.

### Features
- Slide in/out animation from right
- Stage header with name and metrics
- Toggle between card and list views
- Sort deals by amount, date, or probability
- Filter deals by name
- Display deal cards or list items
- Close button and animation

### Interactions
- Click to open deal record
- Sort and filter controls
- View mode toggle
- Smooth transitions'
SET
  @TechnicalDesign_6c96ca00 = N'## Implementation

### Props
- selectedStage: Stage data object with deals
- isPanelOpen: Boolean for visibility
- displayMode: ''cards'' or ''list''
- onClose: Callback to close panel
- onDisplayModeChange: Callback for view mode
- onOpenDeal: Callback to open deal record

### State
- sortBy: Current sort field
- filterText: Search filter

### Layout
- Fixed position overlay
- Transform-based animation
- Scrollable content area'
SET
  @FunctionalRequirementsVector_6c96ca00 = N'[-0.0050768121145665646,-0.030361641198396683,-0.010167894884943962,-0.03515816107392311,0.008393505588173866,0.00298461620695889,0.0627746731042862,0.030754925683140755,-0.028005603700876236,0.00043431969243101776,-0.058123715221881866,0.019169075414538383,0.02542148530483246,0.18664304912090302,-0.004924228880554438,-0.10969799011945724,-0.001396153587847948,-0.017655352130532265,0.04246879741549492,0.02947140671312809,0.01486906222999096,-0.023671338334679604,-0.04344389960169792,0.007419062312692404,-0.015035346150398254,-0.02338191494345665,-0.030768023803830147,0.004246664699167013,0.022414004430174828,-0.07853106409311295,-0.02009524591267109,0.045698363333940506,-0.049139171838760376,-0.020372677594423294,0.0000023297977804759284,-0.029793277382850647,0.0014480932150036097,0.012622660957276821,-0.03244071081280708,0.04161689057946205,0.010240903124213219,-0.005417170934379101,0.01752871833741665,0.0022584660910069942,0.0004652611678466201,-0.08237487077713013,-0.022822393104434013,0.09446835517883301,0.03315659239888191,-0.011702676303684711,0.002434913069009781,0.0035150686744600534,0.008413279429078102,-0.0199210736900568,0.02112620137631893,-0.018641946837306023,0.017953667789697647,-0.10041552037000656,0.050419896841049194,-0.011694829910993576,0.0013598374789580703,-0.03389488533139229,0.020772192627191544,-0.05241706967353821,0.034198783338069916,0.013808483257889748,0.056358832865953445,-0.07049371302127838,0.010184481739997864,0.026987725868821144,0.030645908787846565,0.01201034989207983,-0.023941485211253166,-0.12144135683774948,0.013689607381820679,-0.05020038038492203,-0.035456251353025436,0.030977319926023483,0.01875496841967106,-0.03236836940050125,-0.04891534894704819,0.04556269198656082,-0.01551698800176382,-0.016271932050585747,-0.028454354032874107,0.031034331768751144,-0.0005385150434449315,-0.004862337373197079,-0.052507184445858,-0.024361416697502136,0.05190299078822136,-0.0208083875477314,-0.034437794238328934,-0.004407522268593311,-0.08112223446369171,-0.014818833209574223,0.05088470131158829,0.02997605688869953,-0.018385669216513634,0.002922237617895007,-0.07576923817396164,0.02631617896258831,0.04489748552441597,0.015960143879055977,0.06516087800264359,0.01829133741557598,-0.022882157936692238,0.002069094916805625,-0.04241587221622467,0.06154601648449898,0.021678462624549866,0.030795061960816383,-0.018250135704874992,0.03205990046262741,-0.0760902687907219,-0.01565159298479557,-0.047679685056209564,-0.011631818488240242,-0.01494650263339281,0.028822246938943863,0.13335441052913666,-0.009877456352114677,0.02668129652738571,0.03743487596511841,0.0064027393236756325,0.008820348419249058,-0.05196826532483101,-0.053003594279289246,0.01497933641076088,0.017345819622278214,-0.056307800114154816,-0.001343029085546732,0.017497096210718155,-0.04876547306776047,-0.041135840117931366,0.003210740862414241,0.002790824742987752,0.01538344006985426,-0.003720933338627219,0.0018364130519330502,0.015563750639557838,0.01295495219528675,-0.028136320412158966,0.07534855604171753,-0.0024338699877262115,0.0070909159258008,-0.019534358754754066,0.049601614475250244,0.020120415836572647,0.010110747069120407,-0.03224477544426918,-0.028758574277162552,0.03424188122153282,0.017154356464743614,-0.044140055775642395,0.014247633516788483,-0.04037727788090706,-0.03987758234143257,0.010208387859165668,0.003746975213289261,-0.006982014048844576,-0.04303041473031044,0.0811256468296051,0.03520118445158005,-0.049152638763189316,0.008623977191746235,-0.0068220170214772224,-0.024349551647901535,0.0023803922813385725,-0.030982403084635735,0.017192481085658073,-0.041085969656705856,-0.04845293238759041,0.026306962594389915,0.01831849291920662,-0.036009855568408966,0.09439205378293991,-0.0021854303777217865,-0.015959087759256363,0.03891414776444435,0.0024400437250733376,-0.06718357652425766,-0.005355508532375097,0.025158662348985672,0.044298142194747925,-0.02390158735215664,-0.06687290966510773,0.014574844390153885,-0.009163947775959969,0.028875812888145447,0.018119025975465775,0.02471242845058441,-0.06016864627599716,0.009445940144360065,-0.02819959819316864,0.02557315118610859,-0.05303508788347244,0.02954433299601078,0.06109745427966118,0.049252692610025406,-0.0289632435888052,-0.019229279831051826,-0.015235880389809608,0.03575722128152847,0.01644919253885746,0.00008194799011107534,0.034979257732629776,-0.032457903027534485,-0.0944613590836525,0.007841506972908974,0.053712885826826096,0.007028411608189344,-0.05342289060354233,0.03335624560713768,-0.03040272369980812,-0.00480334646999836,-0.003857237519696355,0.022691067308187485,-0.04473557695746422,-0.022562175989151,-0.03943515941500664,0.059986524283885956,0.04873279482126236,0.00802360288798809,0.04966763034462929,0.017754053696990013,0.031786758452653885,-0.014609168283641338,0.03903060778975487,-0.016071632504463196,-0.009588820859789848,-0.013240458443760872,0.0425286740064621,0.04330022260546684,0.04490578547120094,0.09835576266050339,0.00574902119114995,0.07815428078174591,-0.012554967775940895,0.07470718771219254,-0.008408413268625736,-0.07317517697811127,-0.0271235890686512,0.026662040501832962,0.020146852359175682,0.007654484827071428,-0.03976600989699364,0.01603684574365616,0.03133711963891983,0.005570415873080492,0.014789002016186714,0.036031611263751984,0.05790235474705696,-0.014279392547905445,0.012928257696330547,0.01814473420381546,-0.033910203725099564,-0.011476797983050346,-0.042899638414382935,0.06467682868242264,0.05105641484260559,-0.042170386761426926,-0.06482014060020447,-0.04258357360959053,0.03214315325021744,-0.009326620027422905,0.03458140417933464,-0.0028784486930817366,-0.031200531870126724,0.018632525578141212,0.000568825809750706,0.01877177320420742,0.0030042652506381273,-0.029687965288758278,-0.013854076154530048,0.05580681934952736,-0.028835084289312363,0.02865833416581154,-0.03108721785247326,-0.019311830401420593,0.017927728593349457,-0.050337519496679306,0.0005066797602921724,0.03835643082857132,-0.0005268990062177181,0.04294075816869736,0.037190958857536316,-0.10319965332746506,-0.024977151304483414,-0.0955837145447731,0.05409425124526024,-0.033888284116983414,0.031063547357916832,0.0028559474740177393,-0.04357891157269478,0.024356432259082794,-0.10546867549419403,0.04333694651722908,-0.014851846732199192,0.04160591587424278,-0.026716040447354317,-0.011332091875374317,0.000016322621377184987,0.030230028554797173,-0.005757610779255629,0.033970143646001816,-0.011671760119497776,0.03862738609313965,0.016102518886327744,0.09048479050397873,0.024020500481128693,0.023129789158701897,0.01668553613126278,-0.03647433966398239,0.006695990450680256,0.0027826782315969467,0.06890209019184113,0.023949608206748962,-0.01590053178369999,0.047721799463033676,-0.00028001723694615066,0.007533018942922354,-0.011880269274115562,-0.030191324651241302,-0.03961682319641113,0.006777756381779909,0.009839190170168877,-0.01745665818452835,-0.032235804945230484,-0.031980738043785095,0.026347653940320015,-0.04056018218398094,-0.051026277244091034,-0.005538493860512972,0.000812443089671433,0.021204566583037376,-0.00846769753843546,-0.05932895839214325,-0.013919957913458347,-0.02012447640299797,-0.04317159950733185,-0.02014564909040928,-0.0381004773080349,-0.03612929582595825,0.030321963131427765,0.021319136023521423,0.06438077241182327,-0.02525453269481659,-0.15166933834552765,0.043744880706071854,0.021706338971853256,0.059416286647319794,-0.023153159767389297,-0.023474084213376045,0.0035159343387931585,0.0025096056051552296,-0.027313344180583954,0.016344184055924416,-0.0005693024140782654,-0.04926794022321701,0.03428728133440018,0.005596531089395285,-0.022382240742444992,0.05819937586784363,0.047002315521240234,0.004737629555165768,-0.0033258716575801373,-0.04768698289990425,0.010231065563857555,0.01172684133052826,-0.015616257674992085,0.027143510058522224,-0.005135808140039444,0.027475308626890182,-0.0036528033670037985,-0.055083684623241425,0.02505316026508808,0.03240867704153061,0.01199917122721672,0.01855532079935074,0.0399169996380806,0.005212211050093174,0.0787474662065506,-0.022882129997015,0.06965238600969315,0.029328109696507454,-0.010984322987496853,-0.01717975176870823,-0.022590244188904762,0.046776656061410904,0.0032736402936279774,-0.028802957385778427,-0.02677929773926735,0.0006656042532995343,-0.022558266296982765,0.0063748788088560104,0.03150869160890579,0.027691815048456192,-0.011228255927562714,-0.01704285480082035,-0.015304981730878353,0.10154780000448227,0.01603914052248001,-0.011653206311166286,0.041602667421102524,-0.020891746506094933,-0.0400540828704834,0.0023741747718304396,0.010925594717264175,0.015211242251098156,-0.02393890917301178,-0.058936744928359985,0.004462027922272682,-0.0233409833163023,-0.017420178279280663,0.005948783364146948,0.004797560162842274,-0.02457408793270588,0.018430978059768677,0.04781384393572807,-0.04655995965003967,0.003536773845553398,0.016842355951666832,0.013831823132932186,-0.015599948354065418,-0.020805081352591515,0.001196480356156826,-0.06706471741199493,0.003422145964577794,0.026609908789396286,-0.00506376288831234,0.04187087342143059,-0.023812448605895042,0.02164718508720398,0.013844807632267475,-0.011460508219897747,0.010680658742785454,0.04664584994316101,0.0074460553005337715,-0.004367003217339516,-0.00927907507866621,-0.010060676373541355,0.05884956195950508,-0.01838323473930359,0.005261503159999847,0.017880922183394432,-0.0028440305031836033,0.0036911258939653635,0.01892281509935856,0.002912946743890643,-0.019888661801815033,-0.04995127022266388,-0.02609219029545784,-0.020478438585996628,-0.016059838235378265,-0.05811551585793495,0.02081785537302494,-0.00820875633507967,-0.019182756543159485,-0.03486904874444008,-0.008326252922415733,0.03302142769098282,-0.04253369942307472,0.010398820042610168,0.03387514501810074,-0.03356383368372917,-0.04417966678738594,-0.024264680221676826,-0.0075046406127512455,-0.02681434527039528,0.018839308992028236,-0.022180378437042236,-0.06162390857934952,-0.003810953116044402,0.010977836325764656,0.02377612330019474,0.0031803904566913843,-0.0033857652451843023,-0.007487941067665815,0.002702794037759304,-0.006338420789688826,0.022231297567486763,0.018526799976825714,-0.15598809719085693,-0.0018156567821279168,0.06881207972764969,-0.01163262315094471,0.008339963853359222,0.019930381327867508,0.0031437198631465435,0.01292193029075861,-0.03456084802746773,-0.008951759897172451,0.08204253762960434,0.0012447836343199015,0.0048803482204675674,0.011435954831540585,-0.0365288183093071,-0.015669597312808037,-0.10995467752218246,-0.029583055526018143,-0.01589672639966011,0.037998560816049576,-0.02282038889825344,-0.026393182575702667,-0.015037188306450844,0.014566938392817974,0.05137096345424652,-0.03167130425572395,-0.0010550152510404587,0.04480809345841408,-0.015472480095922947,-0.014653964899480343,-0.039745211601257324,0.02867426536977291,0.06013866141438484,-0.03152794390916824,0.004286025185137987,-0.00032291151001118124,0.008618385531008244,0.021633023396134377,-0.001515712821856141,-0.004234436899423599,-0.02503303438425064,0.01189359650015831,-0.05157476291060448,0.026815159246325493,-0.02537449635565281,-0.019791917875409126,0.036485787481069565,-0.038522474467754364,0.01079671923071146,-0.013868534006178379,0.016830097883939743,-0.011985422112047672,-0.034688256680965424,-0.007267306093126535,0.05172513797879219,0.0007387203513644636,-0.002641805214807391,-0.03976474329829216,0.04176890105009079,-0.01542182732373476,-0.04078756645321846,0.002768244594335556,-0.00263489899225533,-0.015397919341921806,-0.04742555692791939,-0.00026361606433056295,-0.004818003624677658,0.01932399533689022,-0.07001267373561859,0.03947103023529053,0.007186703849583864,-0.05792956054210663,-7.139142330476476e-33,-0.039023954421281815,-0.03039918839931488,-0.030214395374059677,-0.0032726649660617113,0.02015351876616478,-0.05310094729065895,-0.012576587498188019,-0.03996928408741951,0.0063317278400063515,-0.0061570582911372185,-0.01075148768723011,-0.039379771798849106,0.01889411173760891,0.006033584009855986,0.008909173309803009,-0.003728424897417426,0.03041076846420765,-0.016763009130954742,0.0010227484162896872,0.05118710175156593,-0.046494610607624054,0.029051493853330612,-0.0031857138965278864,0.0221721064299345,-0.032521024346351624,-0.004717648960649967,0.0006523239426314831,0.024727540090680122,-0.04753686115145683,0.019930735230445862,0.005869090091437101,-0.04820224270224571,-0.020149730145931244,-0.04633621126413345,-0.0010568947764113545,-0.022579247131943703,-0.019934479147195816,-0.011746703647077084,-0.030321771278977394,0.019137144088745117,0.08760295808315277,0.021198399364948273,0.0030860851984471083,0.012419830076396465,-0.017249993979930878,-0.014462316408753395,0.018760941922664642,0.014510294422507286,-0.0076369792222976685,-0.04580158367753029,-0.006057795137166977,0.014553951099514961,-0.014477266930043697,0.027816301211714745,0.04102018103003502,0.01841551437973976,0.0642092153429985,-0.05998851731419563,-0.0403597466647625,0.0239630788564682,-0.01686122827231884,-0.026297174394130707,0.009592046029865742,0.008866951800882816,0.03478561341762543,0.005375856067985296,0.01403021439909935,0.030102847144007683,0.04874648153781891,0.010339206084609032,0.019115015864372253,0.03593461215496063,-0.009427838958799839,-0.07254943251609802,-0.018748586997389793,0.042587798088788986,0.009871450252830982,0.007622977253049612,0.0016765795880928636,0.11545642465353012,-0.0008153564995154738,0.009916544891893864,0.010887677781283855,0.01869070902466774,-0.024165866896510124,-0.033193834125995636,-0.00489250011742115,0.017813563346862793,0.005130360368639231,0.010784182697534561,0.011974794790148735,-0.002972255228087306,-0.04199862852692604,0.054378610104322433,-0.0963606983423233,0.024573320522904396,0.045976992696523666,0.059069953858852386,-0.0027051595970988274,-0.024884235113859177,0.005517155863344669,-0.011439482681453228,0.04387957230210304,-0.062342319637537,0.013823076151311398,0.012767554260790348,0.014610981568694115,-0.011652086861431599,-0.0506545752286911,0.010700196959078312,0.03205323591828346,0.05992837995290756,-0.017685141414403915,-0.019281921908259392,-0.011227289214730263,0.0037018153816461563,-0.014842276461422443,-0.020222194492816925,0.00745480228215456,0.05247482657432556,-0.011477924883365631,0.10349258035421371,-0.017487818375229836,0.04457508400082588,0.03670269995927811,0.005651047918945551,-0.003002698300406337,-0.005791643634438515,0.045540958642959595,-0.016665514558553696,-0.0010473945876583457,0.026616668328642845,3.195891622453928e-7,-0.0391402542591095,0.03208707645535469,-0.043032992631196976,0.08298860490322113,0.054532550275325775,-0.013549401424825191,-0.01706620119512081,-0.019085736945271492,0.0292573943734169,-0.05735199525952339,0.03352142497897148,0.0023979393299669027,0.016333578154444695,0.0332733616232872,-0.012902405112981796,-0.08311344683170319,0.014218207448720932,-0.004285450559109449,-0.06455618143081665,-0.02101164311170578,0.03589370474219322,0.030939191579818726,0.06402439624071121,0.03224499896168709,0.028759803622961044,0.034358467906713486,-0.002894050907343626,-0.03077325038611889,0.016117878258228302,-0.005389117635786533,0.05132884904742241,-0.044856902211904526,0.00223487033508718,0.02152043953537941,-0.003909942228347063,0.013448028825223446,-0.04442218691110611,-0.011284587904810905,0.03376137465238571,0.01864297315478325,0.012409689836204052,0.01223535742610693,-0.006244203075766563,-0.050204381346702576,0.00725448876619339,-0.05744517967104912,0.003285712096840143,-0.02801920473575592,-0.04801739379763603,-0.017230330035090446,0.0034361593425273895,0.03936338052153587,0.03267199546098709,0.021937238052487373,0.04267171025276184,-0.012547085992991924,0.009293629787862301,0.03003285452723503,0.015876129269599915,-0.024471377953886986,-0.014437147416174412,0.0014939740067347884,0.009652660228312016,-0.01142316684126854,0.009809919632971287,-0.024414118379354477,-0.0018984342459589243,4.047259651482272e-34,0.003501610131934285,0.006187936291098595,0.030893754214048386,0.0005692907725460827,0.04711633920669556,-0.01103762723505497,0.08742249757051468,0.01302915345877409,-0.00043172005098313093,-0.05539550632238388,-0.020539144054055214]'
SET
  @TechnicalDesignVector_6c96ca00 = N'[-0.0018881952855736017,0.0027624063659459352,0.012134326621890068,-0.05560331419110298,0.016833726316690445,-0.089006207883358,0.05203266814351082,0.07921452075242996,-0.03471223637461662,-0.025376511737704277,-0.006206184159964323,0.05224691331386566,0.0633830726146698,0.11548818647861481,-0.02040918916463852,-0.05338292568922043,-0.008547786623239517,0.0455351360142231,0.00893642008304596,-0.001442031585611403,0.023794904351234436,-0.030401527881622314,-0.019990909844636917,-0.011643912643194199,0.04146495461463928,-0.04931769147515297,-0.020085109397768974,-0.02440963126718998,0.05690363049507141,-0.05725546181201935,0.009697736240923405,0.022949937731027603,-0.024483827874064445,-0.0032211083453148603,0.000002017967290157685,-0.0038737428840249777,-0.00336163560859859,0.004034469369798899,-0.0012343829730525613,-0.01415625587105751,0.02020765095949173,-0.009856422431766987,0.03799904137849808,0.004039125982671976,-0.011315707117319107,-0.10440010577440262,-0.06487526744604111,0.08315788954496384,0.03448672965168953,0.02108572982251644,0.0002591983356978744,-0.011895428411662579,0.021165018901228905,-0.007200158666819334,0.03205442056059837,0.029176685959100723,0.006877204403281212,-0.10593809932470322,0.10726507753133774,-0.00688721239566803,0.007254042662680149,0.013125307857990265,0.01222442090511322,-0.05490783974528313,-0.0025014637503772974,-0.003200973616912961,0.03784016892313957,-0.0013429737882688642,0.01183564867824316,-0.0054664346389472485,0.05321402847766876,0.01285998523235321,-0.022964583709836006,-0.032277025282382965,-0.001979182241484523,0.013292567804455757,-0.009057401679456234,0.008884388953447342,-0.010938678868114948,-0.012066119350492954,-0.027398254722356796,0.02248559147119522,-0.005259539000689983,-0.004933497868478298,0.011978186666965485,0.06441081315279007,-0.0175936296582222,-0.014158014208078384,0.002061445964500308,-0.05342193692922592,0.06279896944761276,-0.03368866816163063,0.036222562193870544,0.02366550639271736,-0.02555178850889206,-0.0049480716697871685,0.028568297624588013,-0.07587293535470963,0.004761161282658577,-0.029122814536094666,-0.031560659408569336,0.026046112179756165,-0.009218096733093262,-0.0066316029988229275,0.07620575278997421,0.05405828729271889,-0.014738048426806927,0.0030437028035521507,-0.047503069043159485,0.02623763121664524,-0.0006468447973020375,-0.028269166126847267,-0.005301394034177065,0.05234934017062187,-0.02610763907432556,-0.0017726421356201172,-0.019690824672579765,-0.03625534102320671,0.011377111077308655,0.015532996505498886,0.08138585090637207,-0.029457133263349533,0.010566174052655697,-0.02023858204483986,0.04171339049935341,0.030414385721087456,0.02365240827202797,-0.05905682593584061,-0.015017632395029068,0.07478456199169159,-0.004034432116895914,-0.025226354598999023,0.02330559492111206,-0.028804849833250046,-0.032390296459198,-0.04211832955479622,-0.015080807730555534,-0.02404673770070076,0.01978863961994648,0.03915735334157944,-0.021434275433421135,0.03446684777736664,-0.021143650636076927,0.07880549132823944,-0.06875167042016983,-0.0014863767428323627,0.03308040648698807,-0.04783449321985245,0.005838015582412481,0.07060115784406662,0.02090648002922535,-0.04229314997792244,0.0005566510371863842,0.027457209303975105,-0.05768074840307236,0.04347113519906998,0.02962450310587883,-0.017728082835674286,0.06326466798782349,0.00799926184117794,0.010669405572116375,0.004718422424048185,0.08565962314605713,0.04877661168575287,-0.04784064367413521,0.006125111598521471,-0.08884751051664352,-0.030137643218040466,-0.015089335851371288,-0.009793667122721672,0.005403477232903242,-0.03553703427314758,-0.06306523084640503,-0.0037689220625907183,-0.020123636350035667,-0.0528440997004509,0.11751708388328552,-0.011684441938996315,-0.091145358979702,-0.007763891015201807,0.029533248394727707,-0.04444597661495209,0.0250262264162302,0.010326611809432507,0.02583710290491581,-0.035159774124622345,-0.05553538352251053,0.015326653607189655,0.016003038734197617,-0.011023900471627712,-0.030848665162920952,0.01331996638327837,-0.06355107575654984,0.004523024894297123,-0.026694567874073982,0.016185607761144638,-0.0639725849032402,0.014777702279388905,0.0008911712211556733,0.04487818479537964,0.003774266690015793,-0.011333029717206955,0.05997921898961067,0.045285433530807495,0.022251324728131294,-0.01909872144460678,-0.0249100923538208,-0.03707112371921539,-0.03934827819466591,0.0037934770807623863,-0.04334557428956032,0.004198754206299782,-0.0030525443144142628,0.020867489278316498,0.005196759011596441,0.009501450695097446,0.006744692102074623,-0.0017132762586697936,-0.04883844777941704,-0.01525960024446249,-0.021733829751610756,0.0020106208976358175,0.051931481808423996,0.0026972093619406223,0.08922085165977478,0.032053571194410324,-0.00852242112159729,-0.03364035114645958,0.018756268545985222,-0.0170048289000988,0.013667499646544456,-0.020918015390634537,-0.009082070551812649,0.039439305663108826,0.04710198566317558,0.05384386330842972,-0.0023557632230222225,0.019044624641537666,-0.012179628014564514,-0.01832152158021927,-0.005216527730226517,0.020302044227719307,-0.0432269386947155,0.02419419027864933,-0.04847411438822746,-0.010394693352282047,-0.006890877615660429,0.06307075172662735,-0.008720120415091515,-0.02193315140902996,0.018637239933013916,0.055458083748817444,0.004120131954550743,-0.05565597116947174,-0.01889709196984768,0.006905205547809601,0.013012787327170372,0.019318928942084312,0.009034614078700542,0.020453689619898796,0.04943329095840454,-0.01468939334154129,-0.027793386951088905,-0.011655987240374088,0.04101575165987015,0.0012996798614040017,0.008258619345724583,-0.011371282860636711,-0.014925776980817318,0.012205693870782852,-0.011181495152413845,0.004060009494423866,0.034531209617853165,-0.023667052388191223,0.014188479632139206,0.031846724450588226,-0.00949003640562296,0.059778425842523575,-0.01789955422282219,-0.03332106024026871,0.006382221356034279,-0.027045786380767822,0.0071098776534199715,0.030792631208896637,0.007618358358740807,0.009525115601718426,0.02558293007314205,-0.010920860804617405,-0.015848765149712563,-0.044919539242982864,-0.013014310039579868,-0.0067490022629499435,0.028250323608517647,-0.02620653808116913,-0.03082803077995777,0.016828011721372604,-0.056480325758457184,0.03190533071756363,0.0020617288537323475,0.017320821061730385,-0.012494595721364021,-0.020499426871538162,-0.014604042284190655,0.007447259966284037,0.017326083034276962,-0.01993611641228199,-0.021047653630375862,0.04051823168992996,0.04959307610988617,0.09476116299629211,-0.030559945851564407,0.03508062660694122,0.006671625189483166,-0.049309227615594864,-0.01880103535950184,0.011957356706261635,0.026351729407906532,-0.003178167389705777,-0.02154162898659706,0.03601481392979622,0.0009453301317989826,-0.024528993293642998,-0.01659221388399601,-0.011353694833815098,-0.049571093171834946,0.020276829600334167,0.04085851088166237,-0.01255763042718172,0.046419959515333176,-0.0007738239946775138,-0.0010031132260337472,0.0025618530344218016,-0.01355174370110035,0.006581868976354599,0.028337601572275162,-0.04778129979968071,-0.041644103825092316,-0.04315368831157684,-0.007195557001978159,0.007747357245534658,-0.018467433750629425,-0.00796058215200901,-0.041384175419807434,-0.054780106991529465,-0.0029848115518689156,-0.01034659706056118,-0.006656033918261528,-0.017674783244729042,-0.09631980210542679,0.003083425108343363,-0.013251748867332935,0.050369832664728165,0.0007176170474849641,-0.01507433783262968,0.003245033323764801,-0.002014879835769534,-0.007998949848115444,0.0429329015314579,-0.015914365649223328,0.003936311230063438,0.02345961704850197,0.015212769620120525,0.06742178648710251,0.02771763689815998,0.025114230811595917,0.044561710208654404,0.041767559945583344,-0.03805556148290634,-0.02419600822031498,-0.05460024252533913,-0.042810406535863876,0.028449678793549538,0.03218882530927658,-0.0042525650933384895,-0.008274346590042114,-0.0455121286213398,0.045773107558488846,0.003142048604786396,0.0070362030528485775,0.020566215738654137,0.07360992580652237,-0.01756388694047928,0.06315486878156662,-0.007295891176909208,0.045660004019737244,-0.015443536452949047,0.023805290460586548,-0.040654346346855164,-0.0088838841766119,0.02023039385676384,-0.028420349583029747,-0.025895802304148674,-0.04179461672902107,0.004700175020843744,-0.008265218697488308,0.02924325317144394,0.01828192174434662,0.06162908673286438,0.009963626973330975,-0.023240797221660614,-0.048012614250183105,0.16359911859035492,0.01671876199543476,0.018520591780543327,0.0755293220281601,-0.040529314428567886,-0.054142680019140244,0.041831497102975845,0.04295315220952034,0.014646428637206554,-0.059773948043584824,0.010338645428419113,-0.00025887484662234783,-0.03241389989852905,-0.0650167241692543,-0.01124004740267992,-0.006847835611552,-0.09452909231185913,-0.003131183097139001,0.05111687257885933,-0.03889825567603111,-0.01162128895521164,0.0034821457229554653,0.02475164085626602,0.012411586008965969,0.02470441535115242,-0.02466893382370472,-0.051004935055971146,-0.033209435641765594,-0.014593162573873997,0.014799294993281364,0.04070639610290527,0.009301910176873207,0.04196406900882721,0.0073667350225150585,-0.058361269533634186,0.0020278862211853266,0.0389532595872879,0.0822083055973053,-0.016322681680321693,0.035177621990442276,-0.04008073732256889,0.02982032671570778,0.015334651805460453,0.012609711848199368,-0.03326588496565819,-0.00798779632896185,0.05799657851457596,0.007638041861355305,-0.001203056424856186,-0.03169313818216324,-0.014174032025039196,-0.04049522802233696,0.013597410172224045,-0.06036030128598213,-0.049769315868616104,0.008163652382791042,0.06331772357225418,-0.0014973956858739257,0.02292739227414131,-0.030845804139971733,0.035597093403339386,-0.008767385967075825,-0.01140539813786745,0.004744652658700943,0.007222040556371212,0.0033405302092432976,-0.040342316031455994,-0.024983827024698257,0.05219446122646332,-0.0035491096787154675,0.022472038865089417,-0.0258014053106308,0.01345676090568304,0.00012047207565046847,-0.014857418835163116,-0.04848764091730118,-0.018144024536013603,-0.021324539557099342,-0.022012261673808098,0.02350958250463009,0.02868550643324852,-0.027488237246870995,-0.13098320364952087,-0.005883469711989164,0.034392014145851135,-0.01970120519399643,0.01021955069154501,0.016919462010264397,0.031812235713005066,0.004004518035799265,-0.002949353540316224,-0.0009274106123484671,0.09786654263734818,0.020560014992952347,0.01696823351085186,0.028845276683568954,0.03097728081047535,-0.04462096840143204,-0.09376515448093414,0.00021158951858524233,0.00004447628452908248,0.018407216295599937,0.03573762625455856,-0.030284354463219643,-0.01652565412223339,-0.03928082063794136,0.05476154014468193,-0.04210503771901131,-0.04191132262349129,0.017790956422686577,-0.02512262761592865,-0.04588738828897476,0.01040097326040268,0.004499717615544796,0.08241553604602814,-0.03581026941537857,-0.03348914161324501,0.041638702154159546,-0.008509323000907898,0.04131501913070679,0.03211484104394913,-0.030382802709937096,-0.021590212360024452,0.011553943157196045,-0.04053131863474846,0.024091685190796852,0.024402141571044922,0.02463129349052906,0.051632110029459,0.018245654180645943,0.0255547184497118,-0.013714666478335857,0.014652150683104992,0.029659876599907875,0.03251400962471962,0.027886437252163887,0.01998760923743248,-0.010105104185640812,-0.020671308040618896,-0.08011077344417572,0.04205914959311485,0.028335334733128548,-0.06029367446899414,0.023901106789708138,-0.031203879043459892,0.010223166085779667,-0.06550109386444092,0.018232138827443123,0.04746139794588089,0.013572976924479008,-0.06248505041003227,0.014859167858958244,-0.024044042453169823,0.007655774708837271,-6.338491087612338e-33,-0.012432485818862915,-0.009330203756690025,-0.013627734035253525,-0.03459813818335533,-0.031123489141464233,0.00035234904498793185,-0.034929752349853516,-0.028533020988106728,0.018457982689142227,-0.027552908286452293,-0.04642194136977196,-0.051965393126010895,-0.005341691896319389,0.04022300988435745,-0.04004235565662384,-0.0412934347987175,0.01499779149889946,0.01734131947159767,0.004651321563869715,0.015419496223330498,-0.009586000815033913,0.029567966237664223,0.022107284516096115,0.028368432074785233,-0.01913696713745594,-0.006044803187251091,-0.028849802911281586,0.008858692832291126,-0.1015387624502182,0.012222614139318466,-0.036855168640613556,-0.02479638159275055,-0.028255751356482506,-0.08061237633228302,0.04657785966992378,0.012013734318315983,0.03496640548110008,-0.053373947739601135,0.04619309678673744,0.0610564760863781,0.10255970805883408,0.009182984940707684,0.003782010870054364,0.03023364394903183,0.013295959681272507,-0.016583789139986038,-0.015622152015566826,-0.017983531579375267,-0.03699185326695442,-0.02027212455868721,0.006814492866396904,0.025929562747478485,-0.016420740634202957,-0.04509509354829788,0.017906129360198975,0.043326374143362045,0.07262364029884338,0.032203931361436844,-0.06753730028867722,0.0063807289116084576,-0.011351377703249454,-0.014083887450397015,0.03435853496193886,0.010557590052485466,0.0487927608191967,0.03873126208782196,0.01468366663902998,0.022388868033885956,-0.04314534738659859,-0.014663055539131165,-0.02074713259935379,-0.0018612812273204327,0.002559860935434699,-0.009574906900525093,0.05088736116886139,0.004658431280404329,-0.00367950857616961,-0.043838657438755035,-0.050227805972099304,0.05736571550369263,-0.006880104076117277,0.04446134716272354,0.020716458559036255,0.043889645487070084,-0.04745526239275932,-0.02566499449312687,0.04877496138215065,-0.0017923777922987938,-0.02822842076420784,0.016117211431264877,0.027154022827744484,0.0035145918373018503,-0.03446311503648758,0.05688874423503876,-0.028280677273869514,-0.02373768761754036,0.046019405126571655,0.059902314096689224,-0.009919840842485428,-0.016611143946647644,0.03282128646969795,0.004150830674916506,-0.03564412146806717,-0.035373181104660034,-0.01646924763917923,0.043653454631567,0.014299925416707993,0.03528710454702377,-0.037337809801101685,0.00849071517586708,0.053783055394887924,-0.017527492716908455,-0.04254520684480667,-0.02094525471329689,-0.0026306388899683952,0.016895851120352745,-0.029158687219023705,-0.025169378146529198,0.058313824236392975,0.08814351260662079,-0.01820271648466587,0.03904421254992485,-0.010686339810490608,0.015383541584014893,0.026293188333511353,0.01302445586770773,-0.02228456363081932,-0.019192401319742203,0.0021222326904535294,-0.04611797258257866,0.0206056647002697,-0.005952618550509214,3.089602955697046e-7,-0.0005146621842868626,0.021974051371216774,-0.0528750903904438,-0.02607741765677929,0.024713683873414993,-0.04059436172246933,-0.025521762669086456,-0.0887850746512413,-0.014084910973906517,-0.08130022883415222,0.03855294734239578,-0.015724262222647667,0.02243400365114212,0.02576340362429619,-0.050466734915971756,-0.022208506241440773,-0.011509733274579048,-0.04144654795527458,-0.018941793590784073,-0.050893381237983704,0.02947193570435047,-0.011864140629768372,0.10289809107780457,0.0021340171806514263,-0.024788128212094307,0.06026225537061691,0.04741375520825386,0.00408703088760376,0.03170919790863991,-0.05874066799879074,0.03710990026593208,-0.03822740912437439,-0.013456896878778934,-0.05855841189622879,0.04026900231838226,0.020111897960305214,0.011432336643338203,-0.003444334724918008,0.026817649602890015,0.050350774079561234,0.010485628619790077,0.03129592910408974,-0.0578702837228775,-0.0766642838716507,0.011923304758965969,-0.08498350530862808,-0.01742219179868698,-0.03149399533867836,-0.019238455221056938,0.025798466056585312,-0.016227776184678078,0.010842745192348957,0.003523207502439618,-0.009998591616749763,0.021269802004098892,-0.01752668060362339,-0.020092051476240158,0.03194620460271835,-0.02378500998020172,-0.0060985819436609745,-0.03127818554639816,-0.0004084223182871938,-0.010182887315750122,-0.02874121628701687,0.0013627123553305864,-0.03434920310974121,-0.001193794421851635,3.2813442666849326e-34,0.029343971982598305,-0.024129392579197884,-0.002082820748910308,0.0008270148537121713,0.05150577798485756,-0.04341075196862221,0.11175712198019028,-0.017089063301682472,0.03718196600675583,-0.03498738631606102,-0.005100415088236332]'
SET
  @HasCustomProps_6c96ca00 = 1
SET
  @HasCustomEvents_6c96ca00 = 0
SET
  @RequiresData_6c96ca00 = 1
SET
  @DependencyCount_6c96ca00 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_6c96ca00 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_6c96ca00 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_6c96ca00 = 1
SET
  @ID_6c96ca00 = '5DD52B0E-BBBA-41C7-8D1E-CDCEA4A64BAC'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_6c96ca00,
  @Name = @Name_6c96ca00,
  @Version = @Version_6c96ca00,
  @VersionSequence = @VersionSequence_6c96ca00,
  @Title = @Title_6c96ca00,
  @Description = @Description_6c96ca00,
  @Type = @Type_6c96ca00,
  @Status = @Status_6c96ca00,
  @DeveloperName = @DeveloperName_6c96ca00,
  @DeveloperEmail = @DeveloperEmail_6c96ca00,
  @DeveloperOrganization = @DeveloperOrganization_6c96ca00,
  @SourceRegistryID = @SourceRegistryID_6c96ca00,
  @ReplicatedAt = @ReplicatedAt_6c96ca00,
  @LastSyncedAt = @LastSyncedAt_6c96ca00,
  @Specification = @Specification_6c96ca00,
  @FunctionalRequirements = @FunctionalRequirements_6c96ca00,
  @TechnicalDesign = @TechnicalDesign_6c96ca00,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_6c96ca00,
  @TechnicalDesignVector = @TechnicalDesignVector_6c96ca00,
  @HasCustomProps = @HasCustomProps_6c96ca00,
  @HasCustomEvents = @HasCustomEvents_6c96ca00,
  @RequiresData = @RequiresData_6c96ca00,
  @DependencyCount = @DependencyCount_6c96ca00,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_6c96ca00,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_6c96ca00,
  @HasRequiredCustomProps = @HasRequiredCustomProps_6c96ca00,
  @ID = @ID_6c96ca00;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_cf2c7598 NVARCHAR(MAX),
@Name_cf2c7598 NVARCHAR(500),
@Version_cf2c7598 NVARCHAR(50),
@VersionSequence_cf2c7598 INT,
@Title_cf2c7598 NVARCHAR(1000),
@Description_cf2c7598 NVARCHAR(MAX),
@Type_cf2c7598 NVARCHAR(255),
@Status_cf2c7598 NVARCHAR(50),
@DeveloperName_cf2c7598 NVARCHAR(255),
@DeveloperEmail_cf2c7598 NVARCHAR(255),
@DeveloperOrganization_cf2c7598 NVARCHAR(255),
@SourceRegistryID_cf2c7598 UNIQUEIDENTIFIER,
@ReplicatedAt_cf2c7598 DATETIMEOFFSET,
@LastSyncedAt_cf2c7598 DATETIMEOFFSET,
@Specification_cf2c7598 NVARCHAR(MAX),
@FunctionalRequirements_cf2c7598 NVARCHAR(MAX),
@TechnicalDesign_cf2c7598 NVARCHAR(MAX),
@FunctionalRequirementsVector_cf2c7598 NVARCHAR(MAX),
@TechnicalDesignVector_cf2c7598 NVARCHAR(MAX),
@HasCustomProps_cf2c7598 BIT,
@HasCustomEvents_cf2c7598 BIT,
@RequiresData_cf2c7598 BIT,
@DependencyCount_cf2c7598 INT,
@TechnicalDesignVectorEmbeddingModelID_cf2c7598 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_cf2c7598 NVARCHAR(MAX),
@HasRequiredCustomProps_cf2c7598 BIT,
@ID_cf2c7598 UNIQUEIDENTIFIER
SET
  @Namespace_cf2c7598 = N'CRM/Analytics'
SET
  @Name_cf2c7598 = N'DealCard'
SET
  @Version_cf2c7598 = N'1.0.0'
SET
  @VersionSequence_cf2c7598 = 1
SET
  @Title_cf2c7598 = N'Deal Card'
SET
  @Description_cf2c7598 = N'Card view component for individual deals'
SET
  @Type_cf2c7598 = N'Other'
SET
  @Status_cf2c7598 = N'Published'
SET
  @Specification_cf2c7598 = N'{"name":"DealCard","namespace":"CRM/Analytics","type":"Other","location":"embedded","code":"// DealCard Sub-component\nconst DealCard = ({ deal, onOpen, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) => {\n  const getStageColor = (stage) => {\n    const colors = {\n      ''Prospecting'': ''#17a2b8'',\n      ''Qualification'': ''#007bff'',\n      ''Proposal'': ''#28a745'',\n      ''Negotiation'': ''#ffc107'',\n      ''Closed Won'': ''#28a745'',\n      ''Closed Lost'': ''#dc3545''\n    };\n    return colors[stage] || ''#6c757d'';\n  };\n\n  const handleOpen = () => {\n    if (onOpen) {\n      onOpen(deal.id);\n    } else if (callbacks?.OpenEntityRecord) {\n      callbacks.OpenEntityRecord(''Deals'', deal.id);\n    }\n  };\n\n  return (\n    <div style={{\n      border: ''1px solid #e0e0e0'',\n      borderRadius: ''8px'',\n      padding: ''15px'',\n      marginBottom: ''10px'',\n      backgroundColor: ''#fff'',\n      boxShadow: ''0 2px 4px rgba(0,0,0,0.05)'',\n      transition: ''box-shadow 0.2s'',\n      cursor: ''pointer''\n    }}\n    onMouseEnter={(e) => {\n      e.currentTarget.style.boxShadow = ''0 4px 8px rgba(0,0,0,0.1)'';\n    }}\n    onMouseLeave={(e) => {\n      e.currentTarget.style.boxShadow = ''0 2px 4px rgba(0,0,0,0.05)'';\n    }}\n    onClick={handleOpen}\n    >\n      <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''flex-start'' }}>\n        <div style={{ flex: 1 }}>\n          <h4 style={{ margin: ''0 0 8px 0'', color: ''#333'' }}>{deal.name}</h4>\n          <div style={{ fontSize: ''14px'', color: ''#666'', marginBottom: ''5px'' }}>\n            {deal.accountName}\n          </div>\n          <div style={{ fontSize: ''13px'', color: ''#888'' }}>\n            Owner: {deal.ownerName}\n          </div>\n        </div>\n        <div style={{ textAlign: ''right'' }}>\n          <div style={{ fontSize: ''18px'', fontWeight: ''bold'', color: ''#333'', marginBottom: ''5px'' }}>\n            $' + '{(deal.value || 0).toLocaleString()}\n          </div>\n          <div style={{\n            display: ''inline-block'',\n            padding: ''3px 8px'',\n            borderRadius: ''12px'',\n            fontSize: ''11px'',\n            fontWeight: ''bold'',\n            color: ''#fff'',\n            backgroundColor: getStageColor(deal.stage)\n          }}>\n            {deal.stage}\n          </div>\n        </div>\n      </div>\n      \n      <div style={{ \n        marginTop: ''10px'', \n        paddingTop: ''10px'', \n        borderTop: ''1px solid #f0f0f0'',\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        fontSize: ''12px'',\n        color: ''#999''\n      }}>\n        <span>Close Date: {deal.closeDate ? new Date(deal.closeDate).toLocaleDateString() : ''TBD''}</span>\n        <span>Probability: {deal.probability || 0}%</span>\n      </div>\n    </div>\n  );\n};","functionalRequirements":"## Deal Card Component\n\n### Purpose\nDisplay individual deal information in a card format with interactive elements.\n\n### Features\n- Deal name and amount display\n- Currency formatting\n- Date formatting\n- Probability indicator with color coding\n- Hover effects\n- Click to open deal record\n\n### Visual Design\n- Card with border and padding\n- Hover scale effect\n- Probability badge with semantic colors\n- Clean typography","dataRequirements":{"mode":"views","description":"Displays individual deal information passed via props","entities":[{"name":"Deals","description":"Deal entity displayed in card format","displayFields":["ID","DealName","Amount","CloseDate","Probability","Stage"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Single deal object displayed as a card"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Props\n- deal: Deal entity object\n- onOpenDeal: Callback to open deal record\n\n### Styling\n- Background color based on state\n- Border and shadow effects\n- Probability color coding:\n  - >= 70%: Green\n  - >= 40%: Yellow\n  - < 40%: Red","properties":[{"name":"deal","type":"{ID: string, DealName: string, Amount: number, CloseDate: string, Probability: number, Stage?: string}","required":true,"description":"Deal entity object with key fields"},{"name":"onOpenDeal","type":"(dealId: string) => void","required":true,"description":"Callback to open deal record"}],"events":[],"dependencies":[],"libraries":[{"name":"dayjs","version":"^1.11.10","globalVariable":"dayjs"}]}'
SET
  @FunctionalRequirements_cf2c7598 = N'## Deal Card Component

### Purpose
Display individual deal information in a card format with interactive elements.

### Features
- Deal name and amount display
- Currency formatting
- Date formatting
- Probability indicator with color coding
- Hover effects
- Click to open deal record

### Visual Design
- Card with border and padding
- Hover scale effect
- Probability badge with semantic colors
- Clean typography'
SET
  @TechnicalDesign_cf2c7598 = N'## Implementation

### Props
- deal: Deal entity object
- onOpenDeal: Callback to open deal record

### Styling
- Background color based on state
- Border and shadow effects
- Probability color coding:
  - >= 70%: Green
  - >= 40%: Yellow
  - < 40%: Red'
SET
  @FunctionalRequirementsVector_cf2c7598 = N'[-0.001539047691039741,-0.03396955877542496,-0.004481776151806116,-0.032903820276260376,0.0035537928342819214,0.011476908810436726,0.02867598459124565,0.07594265043735504,-0.04870814085006714,-0.010049237869679928,-0.021561991423368454,0.030903328210115433,0.06145980954170227,0.1714179813861847,-0.031495291739702225,-0.0804370790719986,-0.0260426327586174,0.014282151125371456,0.04677167162299156,0.023730000481009483,0.012445975095033646,-0.013204079121351242,-0.012449265457689762,-0.010189755819737911,-0.037493009120225906,-0.025543153285980225,-0.022918811067938805,-0.023824406787753105,0.009700498543679714,-0.10734482109546661,0.012655163183808327,0.054133255034685135,-0.04543312266469002,-0.046895816922187805,0.0000019342792256793473,-0.03486064448952675,-0.021032514050602913,0.02062966860830784,0.0021185174118727446,0.0005500898114405572,0.002393412636592984,-0.03801051899790764,0.06490403413772583,0.0052365087904036045,-0.019657425582408905,-0.10319838672876358,0.008930678479373455,0.1242743581533432,-0.009171257726848125,-0.036096181720495224,0.010727506130933762,-0.002224493306130171,0.022896019741892815,-0.011903339065611362,0.06369638442993164,0.050618913024663925,-0.010616040788590908,-0.024345289915800095,0.0027031812351197004,0.0043745762668550014,0.00373845174908638,-0.020681297406554222,0.048412155359983444,-0.03939099982380867,0.06420095264911652,0.05133342370390892,0.02608581818640232,0.032323095947504044,-0.00380850862711668,0.015023511834442616,0.0644112303853035,0.04681704193353653,-0.019886653870344162,-0.04400729760527611,-0.02456013858318329,-0.06821078062057495,-0.013525235466659069,0.058426741510629654,0.012087124399840832,-0.02044576406478882,-0.002281039487570524,0.05049220472574234,-0.013907484710216522,-0.01880797930061817,-0.0005010126624256372,0.04592154547572136,0.02730613574385643,-0.007868128828704357,-0.03206884488463402,-0.012657051905989647,0.002766418969258666,-0.012762918137013912,-0.054777685552835464,-0.002819524146616459,-0.03028782084584236,-0.006872772704809904,0.01055274810642004,-0.022867577150464058,0.03315526619553566,0.034053683280944824,-0.013601252809166908,0.03548796847462654,0.027726562693715096,0.009495929814875126,0.07634510844945908,-0.005957103334367275,-0.024490926414728165,-0.061016760766506195,-0.04501020163297653,0.06455054879188538,0.02604042738676071,-0.016519123688340187,-0.016009120270609856,0.0501386895775795,-0.06615268439054489,-0.02031911537051201,-0.04832286387681961,-0.030511386692523956,-0.004817807115614414,0.016887761652469635,0.13725417852401733,-0.011962641961872578,-0.010488759726285934,0.025483068078756332,-0.041980572044849396,0.004282527603209019,-0.024975987151265144,-0.06946290284395218,0.002971863141283393,0.038088805973529816,-0.012977300211787224,0.0008266918011941016,-0.004351410083472729,-0.07915198802947998,-0.029801102355122566,0.012531207874417305,0.01620633713901043,0.01188687328249216,0.021614300087094307,0.011583972722291946,0.02766064740717411,0.019062433391809464,-0.0011652461253106594,0.01878759078681469,-0.033139992505311966,0.024753103032708168,0.005702340509742498,0.009274112991988659,0.03262520954012871,0.034765440970659256,0.004429770167917013,0.029207400977611542,-0.04689515754580498,-0.002736002206802368,-0.044578198343515396,0.009503518231213093,0.01715504750609398,-0.06091499701142311,0.016559867188334465,0.02061978355050087,-0.0010070477146655321,-0.038817793130874634,0.055515870451927185,0.04397464916110039,-0.0469607338309288,-0.004900243133306503,-0.00897141918540001,-0.03173444792628288,0.0456317774951458,-0.007928922772407532,0.013530590571463108,-0.030576452612876892,-0.047804854810237885,0.0038039807695895433,0.03191915526986122,-0.031974416226148605,0.03866548091173172,-0.01794467680156231,-0.0572860985994339,0.005720891524106264,0.014250658452510834,-0.11246342957019806,0.020111598074436188,0.036133840680122375,0.037732310593128204,0.014870298095047474,-0.06877249479293823,-0.009887171909213066,-0.01485302485525608,-0.003679431276395917,-0.020616615191102028,-0.017648890614509583,0.03536948189139366,0.011401225812733173,-0.004574879538267851,-0.01949142850935459,-0.03490357846021652,0.025926895439624786,0.05244189128279686,0.05265478417277336,-0.0019506614189594984,-0.03923099488019943,0.04297487810254097,0.02090880274772644,0.044649992138147354,0.028784269466996193,0.07667121291160583,-0.05552859604358673,-0.10607350617647171,0.035270147025585175,0.016080738976597786,-0.0026483298279345036,-0.07769228518009186,-0.009454614482820034,-0.032753992825746536,-0.004893908277153969,0.003062756732106209,0.018050452694296837,-0.017075588926672935,-0.019865814596414566,-0.011118070222437382,0.047077540308237076,0.03103826753795147,0.0006457864074036479,0.13506574928760529,-0.01819569058716297,0.00910287443548441,-0.059720948338508606,0.030532801523804665,-0.01559927873313427,-0.03063344396650791,-0.028031600639224052,0.007764086592942476,0.014122053049504757,0.051914382725954056,0.020353790372610092,0.01631796732544899,0.015490977093577385,-0.0010846535442396998,-0.028124811127781868,-0.02944508008658886,-0.015030479989945889,-0.014528793282806873,0.0009758677915669978,0.0005832965252920985,-0.04900183156132698,-0.06987545639276505,-0.0007335788104683161,-0.02314704842865467,0.003368138335645199,0.04480315372347832,0.031781479716300964,0.04361387714743614,-0.02171378955245018,0.008275505155324936,0.054977454245090485,0.01637968420982361,0.017005331814289093,-0.049800798296928406,0.020858101546764374,0.014720276929438114,0.02294245921075344,-0.02198294922709465,-0.014908097684383392,0.04436032846570015,-0.013747084885835648,0.034651197493076324,0.006490063387900591,-0.0017601073486730456,0.025501638650894165,0.01215351838618517,0.005361465737223625,0.004464880097657442,-0.01555554661899805,-0.014101763255894184,0.03720221295952797,-0.10355830192565918,-0.011502252891659737,-0.02846616692841053,0.012775144539773464,0.004432334564626217,-0.01939467526972294,-0.00330153270624578,0.026464363560080528,0.023984583094716072,-0.01256097573786974,0.04201006889343262,-0.022481057792901993,-0.04158541187644005,-0.038464050740003586,0.04791278392076492,-0.020351318642497063,0.03164294734597206,-0.014836967922747135,-0.015945401042699814,0.003153214231133461,-0.013527724891901016,0.022211775183677673,-0.040221910923719406,0.023013753816485405,-0.032894354313611984,-0.034049779176712036,-0.03419344872236252,0.005925280973315239,-0.014525570906698704,0.05635896325111389,0.010589306242763996,-0.02535041607916355,0.0066264932975173,0.08692751079797745,0.01839953288435936,0.03301826864480972,0.001481786253862083,-0.058688685297966,0.027249624952673912,0.030288970097899437,-0.03997564688324928,0.03400333970785141,0.018475549295544624,0.07866837829351425,0.019758382812142372,-0.044996410608291626,-0.005051298066973686,-0.011513507924973965,-0.023399723693728447,0.015720194205641747,-0.008250539191067219,-0.009094438515603542,0.016782328486442566,-0.003921017982065678,-0.009112760424613953,-0.019394416362047195,-0.019737455993890762,-0.0070244125090539455,0.004504112061113119,-0.025818781927227974,-0.03342115134000778,-0.07252940535545349,0.021631846204400063,-0.028565943241119385,-0.03199675306677818,-0.00014186052430886775,-0.012012624181807041,-0.004974446725100279,0.01825636252760887,0.0068899900652468204,0.06368526071310043,0.006705791689455509,-0.09143099933862686,0.05467004328966141,0.017194001004099846,-0.003246696898713708,-0.013959908857941628,0.004347820300608873,0.021632812917232513,0.053146082907915115,0.01662120223045349,-0.01208446267992258,0.037514302879571915,-0.04434911906719208,-0.06464565545320511,0.025167737156152725,-0.008195916190743446,0.04392347112298012,-0.0007609136519022286,0.04944189265370369,0.022826317697763443,-0.004012353252619505,-0.016191119328141212,0.0014873247127979994,-0.04947621375322342,0.013114053755998611,0.04793373495340347,0.045441627502441406,-0.002083354629576206,-0.027676250785589218,0.003457688959315419,0.01118221040815115,-0.005882978439331055,0.009825019165873528,0.05306553095579147,-0.04119102656841278,0.07844764739274979,-0.037956368178129196,0.03495445474982262,-0.00359056587330997,0.007554381154477596,0.001665594638325274,-0.037963882088661194,0.0010179810924455523,-0.023899748921394348,0.024420080706477165,-0.08809295296669006,0.023883698508143425,-0.0346977561712265,0.03277946263551712,0.02179894596338272,0.029586490243673325,0.0035241383593529463,-0.00027499767020344734,-0.02661994658410549,0.050965454429388046,0.05264054611325264,0.0022619650699198246,0.06300924718379974,-0.001625302480533719,-0.010748350992798805,0.017947625368833542,-0.003969494253396988,-0.07084672898054123,-0.08460888266563416,-0.061997417360544205,-0.020924841985106468,-0.03412162885069847,0.01597774028778076,-0.003588323248550296,-0.014201938174664974,-0.03970643877983093,0.012483015656471252,0.018822545185685158,-0.054175060242414474,0.03236394375562668,0.03467639535665512,0.04188939556479454,0.011661982163786888,-0.04546741396188736,-0.05030377209186554,-0.05145525187253952,-0.007743400987237692,-0.0029411944560706615,0.013837259262800217,0.008363515138626099,-0.023220593109726906,0.04333193227648735,0.010795526206493378,0.027138041332364082,-0.023638589307665825,0.01763421855866909,-0.011967324651777744,0.001245014718733728,-0.029292315244674683,-0.01224120520055294,0.05488833785057068,0.014421592466533184,0.0024511965457350016,-0.02568167634308338,-0.01403726078569889,0.03833255171775818,0.05739549547433853,-0.03618750348687172,-0.03242896869778633,-0.021532295271754265,-0.01324556302279234,-0.009730723686516285,-0.037542909383773804,-0.03797650709748268,0.0032170687336474657,0.013541246764361858,0.030114732682704926,-0.01444080751389265,0.03559322655200958,0.02787589654326439,-0.056521713733673096,0.011042834259569645,-0.00647171214222908,-0.11738108843564987,-0.040018774569034576,-0.021827038377523422,-0.038310255855321884,-0.03063279390335083,0.0020680001471191645,0.007312008645385504,-0.06073341146111488,0.012561112642288208,0.027335524559020996,0.025420119985938072,-0.01998797245323658,-0.03550034388899803,0.03046148084104061,0.01727699302136898,0.01318956259638071,0.010112740099430084,-0.016261614859104156,-0.054701097309589386,-0.00467460323125124,0.052484992891550064,-0.009898877702653408,-0.01940128393471241,0.009579068049788475,-0.03857588395476341,0.006396358832716942,-0.023099862039089203,-0.019084865227341652,0.011841816827654839,0.007791457697749138,0.016739537939429283,0.013599645346403122,0.008247514255344868,-0.023898322135210037,-0.03848732262849808,-0.02104014717042446,-0.023715171962976456,0.037747666239738464,-0.02838173322379589,-0.051687147468328476,-0.01526754628866911,0.04378052055835724,0.01506886351853609,-0.03026873618364334,-0.06295564025640488,0.06525688618421555,-0.051016081124544144,0.01978684589266777,0.050068214535713196,0.054938092827796936,0.0755121260881424,-0.036049600690603256,0.010624656453728676,-0.06231306120753288,0.00034449531813152134,0.021727485582232475,0.007497224025428295,0.002783226314932108,-0.00514465244486928,0.05557578429579735,0.02640708163380623,0.02249056100845337,-0.027761055156588554,-0.0023476360365748405,0.03349201753735542,-0.04884997755289078,0.03127734735608101,-0.027702828869223595,0.01604599878191948,0.015561966225504875,0.056978825479745865,0.05309726670384407,0.03270295634865761,-0.003647692734375596,-0.025763997808098793,-0.05082868039608002,0.024005578830838203,0.06126323714852333,0.019773654639720917,0.02660377509891987,0.03185776621103287,-0.00696708494797349,-0.04478759318590164,-0.016562791541218758,0.005932288244366646,0.05293255299329758,0.01751696690917015,-0.018266817554831505,-0.010165762156248093,-0.06023041903972626,-6.321347971873534e-33,-0.03913168981671333,-0.006147424224764109,-0.017527705058455467,0.012639354914426804,0.00948658399283886,-0.007691575214266777,0.00652383454144001,-0.027400167658925056,0.01837233453989029,0.03140994533896446,-0.015547950752079487,-0.08015366643667221,0.0185069739818573,0.034586917608976364,-0.002735861111432314,-0.03750869259238243,0.011398538947105408,0.020073311403393745,0.034559644758701324,-0.02680111862719059,-0.06854388117790222,0.0032201390713453293,0.04680730029940605,-0.03652526065707207,-0.031919218599796295,-0.03868171200156212,-0.005901590920984745,0.033253226429224014,0.03180122748017311,0.051584675908088684,-0.00024257607583422214,-0.020056525245308876,-0.041964370757341385,-0.03893614932894707,0.02358490414917469,0.024885809049010277,-0.030203871428966522,-0.05156628414988518,0.01420225203037262,0.03652486950159073,0.09564731270074844,-0.033787962049245834,-0.008985528722405434,0.0036051077768206596,-0.020295070484280586,-0.014649957418441772,0.021106716245412827,-0.026601344347000122,-0.029247021302580833,-0.08072828501462936,0.013530723750591278,0.030240679159760475,-0.0042920950800180435,0.0434626042842865,-0.009086902253329754,-0.047775402665138245,0.050128284841775894,0.013332493603229523,-0.05532002076506615,0.030721427872776985,0.027376553043723106,-0.032596226781606674,0.029401177540421486,0.005486378446221352,0.03259943053126335,0.03971673920750618,-0.03699334338307381,0.022253049537539482,0.011946296319365501,0.00920028518885374,-0.0071018533781170845,-0.03683208301663399,0.021854342892766,0.002381090773269534,0.03173965960741043,0.04838632047176361,0.022660011425614357,0.01274956576526165,0.04303586110472679,0.07206273823976517,0.011621094308793545,0.029232997447252274,-0.005609946325421333,0.021927954629063606,-0.044850703328847885,-0.027288392186164856,0.0026214427780359983,-0.05856930837035179,0.022234443575143814,0.006609195377677679,0.019367532804608345,0.039502959698438644,-0.022704267874360085,0.0278763584792614,-0.07790513336658478,-0.00989555288106203,0.06678596884012222,0.06562512367963791,-0.0485554076731205,-0.04896904155611992,0.013211365789175034,-0.04264090955257416,0.01742727681994438,-0.030103735625743866,-0.013597238808870316,0.02753319777548313,0.020451748743653297,-0.02562578395009041,-0.08268578350543976,-0.00047409484977833927,0.029798518866300583,0.005441982299089432,-0.039565540850162506,-0.04840889573097229,-0.017388328909873962,-0.011137251742184162,-0.0451267771422863,-0.08045534044504166,0.017439978197216988,0.051038216799497604,-0.0035353461280465126,-0.0020926189608871937,-0.035472430288791656,0.023030662909150124,0.0757652297616005,0.002208951860666275,-0.023552704602479935,-0.000629258225671947,0.0004375283606350422,0.016151636838912964,0.021456928923726082,0.03557867929339409,2.79878065612138e-7,0.01421855203807354,0.05093351751565933,-0.048735905438661575,0.014772217720746994,0.0108286552131176,-0.031961485743522644,-0.013327579014003277,-0.01967778615653515,0.0019897373858839273,-0.04669421911239624,0.006987483706325293,0.008079694584012032,-0.011011439375579357,0.024378091096878052,0.014845635741949081,0.005543701816350222,0.0028282764833420515,-0.040868569165468216,-0.0236758291721344,0.014347115531563759,0.05543261021375656,0.046195387840270996,0.07943084836006165,0.015644676983356476,-0.00047613299102522433,0.06805075705051422,-0.0036196219734847546,-0.06906048208475113,-0.015565206296741962,-0.042565200477838516,-0.03602209314703941,-0.008054475300014019,-0.014734577387571335,0.006196885369718075,0.030087118968367577,-0.0018842639401555061,0.007413881365209818,0.0010887093376368284,0.0493159145116806,0.11971180140972137,0.02241298370063305,0.015065744519233704,-0.014391922391951084,-0.03350502997636795,0.014456428587436676,-0.007815064862370491,-0.028188420459628105,-0.03815918043255806,-0.07278093695640564,-0.022671930491924286,0.019357772544026375,-0.010506133548915386,0.03812529891729355,-0.024459974840283394,0.019764846190810204,-0.017927439883351326,-0.003600713098421693,0.0180358923971653,-0.0315692275762558,-0.010289635509252548,0.01132549811154604,-0.0030618743039667606,0.00437355600297451,-0.0540519580245018,0.04013312608003616,-0.056136853992938995,-0.004189444240182638,3.400657632059616e-34,0.025631625205278397,-0.02569129690527916,-0.015671852976083755,0.10661355406045914,0.042860712856054306,-0.029985401779413223,0.08978788554668427,-0.024026647210121155,0.039571162313222885,-0.03376893699169159,-0.012298699468374252]'
SET
  @TechnicalDesignVector_cf2c7598 = N'[0.028998924419283867,0.03779085725545883,0.010846031829714775,-0.05736374482512474,-0.02537664771080017,-0.05171831697225571,0.029841724783182144,0.05983945354819298,-0.09380257874727249,-0.06304745376110077,0.010680981911718845,-0.011652139015495777,0.04497937485575676,0.09351436793804169,-0.020000310614705086,-0.08228633552789688,-0.049201078712940216,0.024429291486740112,-0.03562227264046669,-0.007820021361112595,0.010899371467530727,-0.019320771098136902,-0.0399923175573349,-0.03442357853055,0.000514935061801225,-0.02664203569293022,-0.033535826951265335,-0.011377016082406044,0.032160259783267975,-0.02644285187125206,-0.00575915677472949,0.07375915348529816,-0.05536754056811333,-0.0352124385535717,0.0000016700715832485002,-0.055293869227170944,-0.029521260410547256,0.013141300529241562,0.04340117797255516,0.012278719805181026,0.0057319593615829945,-0.025246107950806618,-0.004766957834362984,-0.0007732152589596808,-0.01246715523302555,-0.06450235098600388,0.03398977592587471,0.08377083390951157,0.021856430917978287,-0.01723938249051571,0.022813092917203903,0.04027869179844856,0.05836808308959007,0.0276775062084198,0.08279962837696075,0.053459879010915756,-0.0015848468756303191,-0.051016129553318024,-0.012649795971810818,-0.04458826035261154,-0.022615527734160423,-0.027347784489393234,0.03662390261888504,-0.009344274178147316,0.005405221600085497,0.008616487495601177,0.03592047840356827,0.0665513128042221,-0.037542182952165604,0.028424197807908058,0.0502348318696022,0.049079667776823044,-0.058857645839452744,-0.0012222323566675186,-0.021327588707208633,-0.030920328572392464,0.01884760893881321,0.021936532109975815,0.00156846281606704,-0.012925704941153526,-0.022190837189555168,0.10268664360046387,-0.044555552303791046,0.022345472127199173,0.0018334207125008106,0.023948298767209053,0.03309629485011101,-0.0359622947871685,0.0036131516098976135,-0.004127725958824158,-0.015064693987369537,0.010912075638771057,-0.030464591458439827,-0.010483276098966599,0.006181508302688599,0.01210794784128666,0.02848629094660282,-0.051800671964883804,0.0649825781583786,0.05117379128932953,0.017718404531478882,0.054127734154462814,-0.026343757286667824,-0.0033230858389288187,0.07773709297180176,0.01997317746281624,-0.043880265206098557,-0.07600980997085571,-0.012344232760369778,0.01782301440834999,-0.0027962313033640385,0.007122431881725788,0.018350228667259216,-0.009265000931918621,0.009601298719644547,-0.008930418640375137,-0.0074779558926820755,-0.04011312872171402,0.008634165860712528,-0.010735617019236088,0.10516299307346344,-0.02300103008747101,-0.041397497057914734,-0.02250800095498562,-0.03642093762755394,-0.03658664599061012,0.009107177145779133,-0.0712294653058052,-0.029152097180485725,0.022645238786935806,0.01919333077967167,-0.05976121127605438,-0.005288572516292334,-0.03740681707859039,-0.031323228031396866,0.06699607521295547,0.04238181561231613,0.01355625968426466,0.05141793563961983,0.007703954819589853,0.05699503794312477,0.04155219718813896,0.014118442311882973,0.04374071583151817,-0.09649041295051575,-0.009519222192466259,0.040965087711811066,-0.014833557419478893,-0.004805047530680895,0.02851337380707264,0.04692758992314339,0.0008697803132236004,-0.08378982543945312,-0.03624175488948822,-0.0876300185918808,0.0258213859051466,-0.01081288605928421,0.004011740442365408,0.015062201768159866,0.007374535780400038,0.006428065709769726,-0.02889813482761383,0.03309815376996994,0.03416992723941803,-0.04897851124405861,0.041951023042201996,-0.035671133548021317,-0.06102403998374939,0.038790907710790634,-0.009415940381586552,0.039790377020835876,-0.009281674399971962,-0.03997161239385605,-0.0257012527436018,-0.010729972273111343,-0.052675142884254456,0.027423691004514694,-0.024741053581237793,-0.06625796854496002,-0.006854918785393238,-0.03620370849967003,-0.03338761627674103,0.027824731543660164,0.02728218212723732,-0.0009048170177266002,0.020765431225299835,-0.08159997314214706,0.03780563920736313,-0.014535248279571533,0.020604392513632774,-0.0030651430133730173,0.015370167791843414,0.03405606746673584,0.0035059633664786816,0.010402154177427292,-0.005339623428881168,-0.027409043163061142,0.016285154968500137,0.03803778439760208,0.06565412878990173,-0.001829268760047853,-0.05996252968907356,0.016595445573329926,0.021227963268756866,0.017042260617017746,0.032912109047174454,0.010431339032948017,-0.04271421581506729,-0.024411147460341454,0.018259083852171898,-0.0496317595243454,0.02140061743557453,-0.003732792567461729,-0.007902323268353939,0.011192617006599903,-0.061798129230737686,0.007825824432075024,-0.0257846862077713,-0.044536300003528595,-0.022832121700048447,-0.006597169674932957,0.029567502439022064,0.05480886250734329,0.0044084712862968445,0.10971532762050629,0.03716729208827019,0.00026682732277549803,-0.05104959383606911,0.01673954725265503,-0.012970691546797752,-0.03455207869410515,-0.013838495127856731,-0.030682584270834923,-0.0003141346387565136,0.06408733129501343,0.0054731350392103195,-0.017361635342240334,0.03514905273914337,-0.0024825776927173138,-0.002855472732335329,-0.0030812290497124195,0.0025188284926116467,-0.03159966319799423,0.019809231162071228,-0.00792218279093504,-0.02262912504374981,-0.03691601753234863,-0.004727895837277174,-0.03862741217017174,-0.018152449280023575,0.0405973382294178,0.028977280482649803,-0.013293219730257988,-0.060141339898109436,0.0004235035739839077,-0.027086518704891205,0.07423915714025497,-0.006251117214560509,-0.01490085944533348,0.014608331955969334,-0.0074959248304367065,-0.010013919323682785,0.01970500499010086,-0.024698510766029358,0.04118131101131439,-0.025028929114341736,0.0476110577583313,-0.003693668870255351,0.010594150051474571,-0.0003052271204069257,-0.008864114992320538,0.028386659920215607,-0.007621194701641798,-0.005507155787199736,-0.01320708729326725,0.053421057760715485,-0.007456995081156492,0.01133843045681715,-0.017455246299505234,-0.039840832352638245,-0.02309296652674675,-0.11020173132419586,0.02311675436794758,0.02017841301858425,0.01409867499023676,0.010197545401751995,-0.008634799160063267,0.020080318674445152,-0.05151231214404106,-0.04274304211139679,0.012336446903645992,0.00864181388169527,0.027163632214069366,-0.03246014565229416,-0.02315259352326393,-0.019834021106362343,0.010275757871568203,0.03382640704512596,0.02693568542599678,0.016806963831186295,0.04697322100400925,-0.034829895943403244,0.0028535013552755117,0.010888399556279182,0.0051285517401993275,0.03992905840277672,0.019274616613984108,-0.03758511319756508,0.04514934867620468,0.09679913520812988,-0.004859901499003172,0.0008069792529568076,0.0031811429653316736,-0.045578595250844955,0.01622076705098152,0.035315778106451035,-0.014265581034123898,0.0009194189333356917,0.007772007491439581,0.08206121623516083,-0.009980264119803905,-0.05783554166555405,0.015003468841314316,-0.008601158857345581,-0.0065255966037511826,0.01264798641204834,0.01616811566054821,-0.014686085283756256,0.08122699707746506,-0.0042445044964551926,0.0007540880469605327,-0.008014011196792126,0.006045326124876738,0.03847726434469223,0.05743424966931343,-0.0364692322909832,-0.02111305110156536,-0.0749506801366806,-0.0021910134237259626,-0.021654581651091576,0.0055410005152225494,-0.011831985786557198,-0.012102353386580944,-0.013060614466667175,-0.042868293821811676,-0.018819408491253853,-0.013948315754532814,-0.016286971047520638,0.03206812962889671,0.036638807505369186,-0.023286735638976097,-0.002635304583236575,-0.012402460910379887,0.008976870216429234,0.00013533970923162997,0.015624094754457474,0.026431307196617126,-0.03082229569554329,0.02238372713327408,-0.012611583806574345,0.006836847867816687,0.02955523692071438,0.06956333667039871,0.06279348582029343,-0.04280076548457146,0.032021068036556244,0.03536330163478851,0.01754651963710785,-0.0546041801571846,-0.02319961041212082,-0.018498755991458893,0.02056148834526539,0.03171256557106972,-0.002112973015755415,-0.009906133636832237,-0.019487712532281876,0.029569877311587334,-0.05869819596409798,-0.036232274025678635,0.003417070023715496,0.06715362519025803,0.01855725795030594,0.02162512019276619,-0.020105348899960518,-0.01810661517083645,-0.05910676717758179,0.034255556762218475,-0.01757742278277874,0.009761389344930649,-0.02511916682124138,-0.03546009212732315,-0.011155207641422749,-0.04931064322590828,0.03302527964115143,0.0033398058731108904,0.03948783501982689,0.017083408311009407,0.017683258280158043,0.03208888694643974,-0.01038613822311163,-0.022812066599726677,0.1229972243309021,0.010722425766289234,0.04386212304234505,0.00002833056350937113,-0.004255862906575203,0.050221581012010574,-0.037990961223840714,0.03872288763523102,-0.07037404924631119,-0.038725901395082474,-0.06468000262975693,-0.009458176791667938,0.02297666296362877,0.010997512377798557,-0.0006250995211303234,-0.004163794219493866,-0.09535684436559677,0.009749376215040684,0.045420173555612564,-0.03324141725897789,0.03162742406129837,0.011620587669312954,0.02089329995214939,0.0004871870041824877,-0.020580176264047623,0.00008170861838152632,-0.028188548982143402,-0.02066359668970108,0.002346963854506612,-0.021938279271125793,-0.004444500431418419,-0.04464079812169075,0.07579910755157471,-0.0187165979295969,0.007116769906133413,-0.02171158231794834,-0.013618174940347672,0.026664596050977707,0.0003572752175386995,0.010097907856106758,-0.020262017846107483,0.06997449696063995,0.015725815668702126,0.018973350524902344,-0.02863176353275776,-0.03259126469492912,0.08740943670272827,0.03753882646560669,-0.015486154705286026,-0.007917466573417187,0.0097326235845685,-0.041960276663303375,0.023430511355400085,-0.017367664724588394,-0.029777750372886658,-0.0075803534127771854,0.048667069524526596,0.026164337992668152,0.04522530734539032,-0.027587683871388435,0.03432603180408478,-0.05887220427393913,0.0027501650620251894,-0.0567791722714901,-0.11288448423147202,-0.0015246635302901268,-0.04954751953482628,-0.028298458084464073,-0.007727381773293018,-0.01884559914469719,0.03637145459651947,-0.04466777294874191,0.02741532400250435,0.02778354473412037,0.05151472985744476,-0.015089299529790878,-0.059365808963775635,0.06122730299830437,-0.0017417859053239226,-0.008379548788070679,0.039114926010370255,-0.01205366663634777,-0.049198657274246216,0.035663902759552,0.04808508977293968,-0.005355382803827524,-0.0028343002777546644,-0.012412597425282001,-0.008495367132127285,0.03160860389471054,-0.025983531028032303,0.01818382553756237,0.07542736828327179,0.029987534508109093,0.0045926556922495365,0.039682645350694656,-0.011079746298491955,0.0482451468706131,-0.001046611345373094,0.03658485785126686,-0.02874806523323059,-0.001969319535419345,0.02324705757200718,-0.014435482211411,-0.012264980934560299,0.023915762081742287,0.0317474827170372,-0.031371645629405975,-0.08789289742708206,0.024271676316857338,-0.03553980588912964,-0.03355788066983223,0.04091905429959297,0.0173061303794384,0.09127574414014816,-0.00469692749902606,0.039638832211494446,-0.007340243086218834,0.015205060131847858,0.022108308970928192,0.017218053340911865,0.00679729413241148,-0.031719498336315155,0.046133898198604584,0.005360000766813755,0.007297698874026537,-0.005611860193312168,0.04004206880927086,0.011447506956756115,0.04327372461557388,0.037892185151576996,-0.05257255211472511,0.049561068415641785,0.041894927620887756,0.10813409835100174,0.016453679651021957,0.020290980115532875,0.029745841398835182,-0.011863619089126587,-0.051463812589645386,-0.004450287204235792,-0.00548219820484519,-0.024610046297311783,0.04520123079419136,0.03556299954652786,-0.002559435786679387,-0.05034118518233299,-0.009370476938784122,0.0018972419202327728,0.030735857784748077,0.0019224395509809256,-0.012015185318887234,-0.042367398738861084,0.013646029867231846,-5.86778788471257e-33,-0.019419480115175247,-0.026934098452329636,-0.03274412825703621,-0.03705078735947609,0.00499597005546093,-0.011920993216335773,0.009364970028400421,-0.017580144107341766,0.04051848500967026,-0.0031416851561516523,-0.022574642673134804,-0.0878453180193901,0.0164954774081707,0.045253340154886246,-0.042773377150297165,-0.0014443827094510198,-0.005943716038018465,0.0451529435813427,0.04482387751340866,-0.025819431990385056,-0.071174755692482,0.04710515961050987,0.01838737167418003,0.0025995054747909307,-0.017123818397521973,-0.006370007526129484,-0.044595975428819656,0.019765421748161316,-0.0382331945002079,0.025145363062620163,-0.01594744808971882,-0.028869954869151115,-0.01894773356616497,-0.01566450297832489,-0.011863700114190578,-0.002356859389692545,0.0010708277113735676,-0.06692085415124893,0.01917404867708683,-0.00463413679972291,-0.01335469726473093,0.0062356432899832726,-0.0072661638259887695,-0.005595737602561712,0.004919344559311867,-0.02157827466726303,-0.019647909328341484,-0.020687049254775047,-0.023584388196468353,-0.026232151314616203,0.027429889887571335,0.007576795294880867,0.0038444341626018286,-0.027836736291646957,-0.023652805015444756,-0.030284244567155838,0.058821287006139755,-0.030434608459472656,-0.07402294129133224,0.008016780950129032,-0.030659548938274384,-0.06179115176200867,0.0009114949498325586,0.03307529166340828,0.039448630064725876,0.0419033020734787,-0.022108333185315132,0.025459028780460358,-0.06095242500305176,0.013830279931426048,-0.00814905297011137,-0.05320853739976883,-0.000183815136551857,-0.03772171959280968,0.05589694902300835,0.04061760753393173,0.013763496652245522,-0.03587864339351654,0.029780685901641846,0.050741080194711685,-0.003266058163717389,0.03411562740802765,-0.011389072984457016,0.04578004032373428,-0.059507545083761215,-0.0298899058252573,0.032455265522003174,-0.036415308713912964,-0.006458841729909182,-0.03140644356608391,-0.04864538460969925,0.013199877925217152,-0.01910518668591976,0.03900935873389244,-0.05709333345293999,0.03629261255264282,0.002396767260506749,0.06903945654630661,-0.022852007299661636,-0.02706030383706093,0.034686315804719925,-0.0012421770952641964,0.0027345099952071905,-0.046375174075365067,-0.019423000514507294,0.042617492377758026,-0.007059572730213404,-0.027210835367441177,-0.05151625722646713,0.01680286042392254,0.04882931709289551,0.024174939841032028,-0.021310288459062576,-0.09156053513288498,-0.001451224205084145,-0.008005454204976559,-0.029933467507362366,-0.0011246404610574245,0.050785746425390244,0.06366515159606934,-0.023495256900787354,0.006482518278062344,-0.003724092384800315,0.027824576944112778,0.027755804359912872,-0.019449207931756973,0.004231865517795086,-0.10306192189455032,-0.046712979674339294,0.012315506115555763,0.004034386482089758,-0.009911129251122475,2.647041696945962e-7,0.009905025362968445,0.00792392436414957,-0.023678826168179512,0.040202125906944275,0.003603745950385928,-0.01976047083735466,0.005452787969261408,-0.027630537748336792,0.02006092108786106,-0.11401984840631485,-0.03020251914858818,-0.016595127061009407,0.0036869850009679794,0.047735609114170074,-0.009033389389514923,-0.010597825981676579,0.03983684629201889,-0.005283310543745756,-0.007193203084170818,0.020493753254413605,0.027469489723443985,-0.00022860294848214835,0.11597204208374023,-0.009081799536943436,0.006543248891830444,0.08815427869558334,0.03022756241261959,-0.04305501654744148,0.034597042948007584,-0.026524994522333145,0.022963140159845352,-0.0634179338812828,-0.018179068341851234,0.04680256545543671,0.04595450311899185,0.018029838800430298,-0.03335137292742729,0.003546604420989752,0.016748638823628426,0.06832944601774216,0.012766366824507713,0.014629373326897621,0.013939318247139454,-0.014613894745707512,0.04733742028474808,0.05810163915157318,-0.06334352493286133,-0.05392637103796005,0.009155620820820332,-0.00845133513212204,0.012788011692464352,-0.03161834180355072,-0.01007792353630066,-0.0570753738284111,-0.012333808466792107,-0.03638198599219322,-0.0088386544957757,0.028888916596770287,-0.014483603648841381,-0.017674069851636887,-0.00006513536209240556,-0.00827591773122549,0.021303633227944374,0.012606736272573471,0.01268819347023964,-0.06161686033010483,-0.008882655762135983,2.986396662851793e-34,0.01761205680668354,-0.04750696197152138,0.018870770931243896,0.09384981542825699,0.048014797270298004,-0.015616103075444698,0.07791268825531006,-0.04608626291155815,0.03788617625832558,-0.006633689161390066,-0.023500513285398483]'
SET
  @HasCustomProps_cf2c7598 = 1
SET
  @HasCustomEvents_cf2c7598 = 0
SET
  @RequiresData_cf2c7598 = 1
SET
  @DependencyCount_cf2c7598 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_cf2c7598 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_cf2c7598 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_cf2c7598 = 1
SET
  @ID_cf2c7598 = '4E58FCE0-E5DA-4930-8E84-987355D5F429'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_cf2c7598,
  @Name = @Name_cf2c7598,
  @Version = @Version_cf2c7598,
  @VersionSequence = @VersionSequence_cf2c7598,
  @Title = @Title_cf2c7598,
  @Description = @Description_cf2c7598,
  @Type = @Type_cf2c7598,
  @Status = @Status_cf2c7598,
  @DeveloperName = @DeveloperName_cf2c7598,
  @DeveloperEmail = @DeveloperEmail_cf2c7598,
  @DeveloperOrganization = @DeveloperOrganization_cf2c7598,
  @SourceRegistryID = @SourceRegistryID_cf2c7598,
  @ReplicatedAt = @ReplicatedAt_cf2c7598,
  @LastSyncedAt = @LastSyncedAt_cf2c7598,
  @Specification = @Specification_cf2c7598,
  @FunctionalRequirements = @FunctionalRequirements_cf2c7598,
  @TechnicalDesign = @TechnicalDesign_cf2c7598,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_cf2c7598,
  @TechnicalDesignVector = @TechnicalDesignVector_cf2c7598,
  @HasCustomProps = @HasCustomProps_cf2c7598,
  @HasCustomEvents = @HasCustomEvents_cf2c7598,
  @RequiresData = @RequiresData_cf2c7598,
  @DependencyCount = @DependencyCount_cf2c7598,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_cf2c7598,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_cf2c7598,
  @HasRequiredCustomProps = @HasRequiredCustomProps_cf2c7598,
  @ID = @ID_cf2c7598;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_d0fc2550 NVARCHAR(MAX),
@Name_d0fc2550 NVARCHAR(500),
@Version_d0fc2550 NVARCHAR(50),
@VersionSequence_d0fc2550 INT,
@Title_d0fc2550 NVARCHAR(1000),
@Description_d0fc2550 NVARCHAR(MAX),
@Type_d0fc2550 NVARCHAR(255),
@Status_d0fc2550 NVARCHAR(50),
@DeveloperName_d0fc2550 NVARCHAR(255),
@DeveloperEmail_d0fc2550 NVARCHAR(255),
@DeveloperOrganization_d0fc2550 NVARCHAR(255),
@SourceRegistryID_d0fc2550 UNIQUEIDENTIFIER,
@ReplicatedAt_d0fc2550 DATETIMEOFFSET,
@LastSyncedAt_d0fc2550 DATETIMEOFFSET,
@Specification_d0fc2550 NVARCHAR(MAX),
@FunctionalRequirements_d0fc2550 NVARCHAR(MAX),
@TechnicalDesign_d0fc2550 NVARCHAR(MAX),
@FunctionalRequirementsVector_d0fc2550 NVARCHAR(MAX),
@TechnicalDesignVector_d0fc2550 NVARCHAR(MAX),
@HasCustomProps_d0fc2550 BIT,
@HasCustomEvents_d0fc2550 BIT,
@RequiresData_d0fc2550 BIT,
@DependencyCount_d0fc2550 INT,
@TechnicalDesignVectorEmbeddingModelID_d0fc2550 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_d0fc2550 NVARCHAR(MAX),
@HasRequiredCustomProps_d0fc2550 BIT,
@ID_d0fc2550 UNIQUEIDENTIFIER
SET
  @Namespace_d0fc2550 = N'CRM/Analytics'
SET
  @Name_d0fc2550 = N'DealList'
SET
  @Version_d0fc2550 = N'1.0.0'
SET
  @VersionSequence_d0fc2550 = 1
SET
  @Title_d0fc2550 = N'Deal List'
SET
  @Description_d0fc2550 = N'List view component for deals with tabular display'
SET
  @Type_d0fc2550 = N'Table'
SET
  @Status_d0fc2550 = N'Published'
SET
  @Specification_d0fc2550 = N'{"name":"DealList","namespace":"CRM/Analytics","type":"Table","location":"embedded","code":"// DealList Sub-component\nconst DealList = ({ deals, sortConfig, onSort, onOpenDeal, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) => {\n  const handleSort = (field) => {\n    const newOrder = sortConfig?.field === field && sortConfig?.order === ''asc'' ? ''desc'' : ''asc'';\n    if (onSort) {\n      onSort({ field, order: newOrder });\n    }\n  };\n\n  const getSortIcon = (field) => {\n    if (sortConfig?.field !== field) return ''↕'';\n    return sortConfig.order === ''asc'' ? ''↑'' : ''↓'';\n  };\n\n  const handleOpen = (dealId) => {\n    if (onOpenDeal) {\n      onOpenDeal(dealId);\n    } else if (callbacks?.OpenEntityRecord) {\n      callbacks.OpenEntityRecord(''Deals'', dealId);\n    }\n  };\n\n  return (\n    <div style={{ width: ''100%'', overflowX: ''auto'' }}>\n      <table style={{ \n        width: ''100%'', \n        borderCollapse: ''collapse'',\n        backgroundColor: ''#fff''\n      }}>\n        <thead>\n          <tr style={{ backgroundColor: ''#f8f9fa'', borderBottom: ''2px solid #dee2e6'' }}>\n            <th \n              onClick={() => handleSort(''name'')}\n              style={{\n                padding: ''12px'',\n                textAlign: ''left'',\n                cursor: ''pointer'',\n                userSelect: ''none'',\n                whiteSpace: ''nowrap''\n              }}\n            >\n              Deal Name {getSortIcon(''name'')}\n            </th>\n            <th \n              onClick={() => handleSort(''accountName'')}\n              style={{\n                padding: ''12px'',\n                textAlign: ''left'',\n                cursor: ''pointer'',\n                userSelect: ''none'',\n                whiteSpace: ''nowrap''\n              }}\n            >\n              Account {getSortIcon(''accountName'')}\n            </th>\n            <th \n              onClick={() => handleSort(''stage'')}\n              style={{\n                padding: ''12px'',\n                textAlign: ''left'',\n                cursor: ''pointer'',\n                userSelect: ''none'',\n                whiteSpace: ''nowrap''\n              }}\n            >\n              Stage {getSortIcon(''stage'')}\n            </th>\n            <th \n              onClick={() => handleSort(''value'')}\n              style={{\n                padding: ''12px'',\n                textAlign: ''right'',\n                cursor: ''pointer'',\n                userSelect: ''none'',\n                whiteSpace: ''nowrap''\n              }}\n            >\n              Value {getSortIcon(''value'')}\n            </th>\n            <th \n              onClick={() => handleSort(''probability'')}\n              style={{\n                padding: ''12px'',\n                textAlign: ''center'',\n                cursor: ''pointer'',\n                userSelect: ''none'',\n                whiteSpace: ''nowrap''\n              }}\n            >\n              Prob. {getSortIcon(''probability'')}\n            </th>\n            <th \n              onClick={() => handleSort(''closeDate'')}\n              style={{\n                padding: ''12px'',\n                textAlign: ''left'',\n                cursor: ''pointer'',\n                userSelect: ''none'',\n                whiteSpace: ''nowrap''\n              }}\n            >\n              Close Date {getSortIcon(''closeDate'')}\n            </th>\n            <th style={{ \n              padding: ''12px'', \n              textAlign: ''center'',\n              width: ''50px''\n            }}>\n              Action\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {deals && deals.map((deal, index) => (\n            <tr \n              key={deal.id || index}\n              style={{ \n                borderBottom: ''1px solid #dee2e6'',\n                transition: ''background-color 0.1s''\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = ''#f8f9fa'';\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              <td style={{ padding: ''12px'' }}>\n                <div style={{ fontWeight: ''500'' }}>{deal.name}</div>\n                <div style={{ fontSize: ''12px'', color: ''#6c757d'' }}>{deal.ownerName}</div>\n              </td>\n              <td style={{ padding: ''12px'' }}>{deal.accountName}</td>\n              <td style={{ padding: ''12px'' }}>\n                <span style={{\n                  display: ''inline-block'',\n                  padding: ''4px 8px'',\n                  borderRadius: ''4px'',\n                  fontSize: ''12px'',\n                  fontWeight: ''500'',\n                  backgroundColor: deal.stage === ''Closed Won'' ? ''#d4edda'' : \n                                   deal.stage === ''Closed Lost'' ? ''#f8d7da'' : ''#e7f3ff'',\n                  color: deal.stage === ''Closed Won'' ? ''#155724'' : \n                         deal.stage === ''Closed Lost'' ? ''#721c24'' : ''#004085''\n                }}>\n                  {deal.stage}\n                </span>\n              </td>\n              <td style={{ padding: ''12px'', textAlign: ''right'', fontWeight: ''500'' }}>\n                $' + '{(deal.value || 0).toLocaleString()}\n              </td>\n              <td style={{ padding: ''12px'', textAlign: ''center'' }}>\n                <div style={{\n                  display: ''inline-block'',\n                  width: ''40px'',\n                  height: ''40px'',\n                  borderRadius: ''50%'',\n                  background: `conic-gradient(#28a745 0deg $' + '{deal.probability * 3.6}deg, #e9ecef $' + '{deal.probability * 3.6}deg)`,\n                  display: ''flex'',\n                  alignItems: ''center'',\n                  justifyContent: ''center'',\n                  fontSize: ''11px'',\n                  fontWeight: ''bold''\n                }}>\n                  {deal.probability}%\n                </div>\n              </td>\n              <td style={{ padding: ''12px'' }}>\n                {deal.closeDate ? new Date(deal.closeDate).toLocaleDateString() : ''-''}\n              </td>\n              <td style={{ padding: ''12px'', textAlign: ''center'' }}>\n                <button\n                  onClick={() => handleOpen(deal.id)}\n                  style={{\n                    padding: ''4px 8px'',\n                    fontSize: ''14px'',\n                    border: ''1px solid #007bff'',\n                    borderRadius: ''4px'',\n                    background: ''#fff'',\n                    color: ''#007bff'',\n                    cursor: ''pointer'',\n                    transition: ''all 0.2s''\n                  }}\n                  onMouseEnter={(e) => {\n                    e.target.style.backgroundColor = ''#007bff'';\n                    e.target.style.color = ''#fff'';\n                  }}\n                  onMouseLeave={(e) => {\n                    e.target.style.backgroundColor = ''#fff'';\n                    e.target.style.color = ''#007bff'';\n                  }}\n                  title=\"Open in Explorer\"\n                >\n                  ↗\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      {(!deals || deals.length === 0) && (\n        <div style={{ \n          padding: ''40px'', \n          textAlign: ''center'',\n          color: ''#6c757d''\n        }}>\n          No deals found\n        </div>\n      )}\n    </div>\n  );\n}","functionalRequirements":"## Deal List Component\n\n### Purpose\nDisplay deals in a tabular format with sortable columns.\n\n### Features\n- Table layout with headers\n- Deal name, amount, and probability columns\n- Currency formatting\n- Clickable rows to open deals\n- Hover effects on rows\n- Clean table styling","dataRequirements":{"mode":"views","description":"Displays list of deals passed via props","entities":[{"name":"Deals","description":"Deal entities displayed in table format","displayFields":["ID","DealName","Amount","CloseDate","Probability","Stage","Account"],"filterFields":[],"sortFields":["DealName","Amount","Probability"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Array of deals displayed as sortable table rows"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Props\n- deals: Array of deal objects\n- onOpenDeal: Callback to open deal record\n\n### Table Structure\n- Header row with column labels\n- Data rows with deal information\n- Click handlers on rows","properties":[{"name":"deals","type":"Array<{ID: string, DealName: string, Amount: number, CloseDate: string, Probability: number, Stage?: string, Account?: string}>","required":true,"description":"Array of deal entities"},{"name":"onOpenDeal","type":"(dealId: string) => void","required":true,"description":"Callback to open deal record"}],"events":[],"dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_d0fc2550 = N'- Display deals in a clean table format
- Show deal name, account, stage, and amount
- Include open icon button for external navigation
- Show hover effects on rows
- Color-code stage badges
- Support row click for selection'
SET
  @TechnicalDesign_d0fc2550 = N'Renders deals in table format with hover states. Formats currency values. Includes Font Awesome icon for opening deals externally. Stage badges use dynamic colors from stageColors prop.'
SET
  @FunctionalRequirementsVector_d0fc2550 = N'[-0.016335902735590935,-0.011102886870503426,-0.003450617892667651,-0.019292565062642097,-0.004948796704411507,0.01774371601641178,0.04201719909906387,0.07556761801242828,-0.05159278213977814,-0.01005236990749836,-0.057116638869047165,0.04299014061689377,0.00539042241871357,0.163469597697258,0.03003486804664135,-0.039362113922834396,-0.0059814415872097015,-0.013580190017819405,0.026883581653237343,0.0028878962621092796,0.00215995404869318,-0.01921059936285019,-0.03732959181070328,-0.028172943741083145,-0.008736500516533852,0.0032292641699314117,-0.06515305489301682,0.012350806966423988,-0.012710771523416042,-0.04588688537478447,-0.003850493812933564,0.06910521537065506,-0.03621552512049675,-0.028808295726776123,0.0000015999952438505716,-0.010601614601910114,-0.0610225610435009,-0.019446661695837975,-0.04182935133576393,0.047603365033864975,0.05435223504900932,-0.03758974373340607,0.07096466422080994,-0.025119606405496597,-0.0022549047134816647,-0.07083858549594879,-0.027918145060539246,0.13116049766540527,-0.0016834697453305125,-0.0382409505546093,0.02514818124473095,-0.004385680425912142,-0.007128222845494747,-0.005598888732492924,0.015401680022478104,0.007940003648400307,-0.0007397494628094137,0.0013325369218364358,0.002059685066342354,0.0004960674559697509,-0.011667621321976185,-0.021313946694135666,0.026670217514038086,-0.01449519395828247,0.055235207080841064,0.010116605088114738,-0.002053056377917528,-0.0008893141057342291,0.011158877983689308,0.0027333139441907406,0.009761538356542587,-0.009840377606451511,-0.01023157499730587,-0.06839977204799652,0.007616215851157904,-0.05367337912321091,-0.013195645064115524,0.0279233381152153,0.027187909930944443,-0.030750438570976257,-0.018827080726623535,-0.01265876553952694,-0.017162464559078217,0.024358579888939857,-0.007389206904917955,-0.04166075959801674,0.0016102754743769765,-0.024701446294784546,0.023833144456148148,-0.017989832907915115,-0.004451217129826546,-0.012718956917524338,-0.017858488485217094,0.002774889813736081,-0.10009325295686722,-0.019348325207829475,0.04178794473409653,0.056288786232471466,0.018405234441161156,0.036993078887462616,-0.020062074065208435,0.04731287434697151,0.04394104704260826,0.005700556095689535,0.009680957533419132,0.012487397529184818,-0.04191073775291443,0.007930368185043335,-0.02627888135612011,0.05621904879808426,0.0242209043353796,0.02869095467031002,-0.054241422563791275,0.05709656700491905,-0.07013754546642303,-0.015634508803486824,-0.03822788968682289,-0.02446332387626171,0.0030022559221833944,0.0228717140853405,0.13446521759033203,0.018776562064886093,-0.010544711723923683,0.0056067262776196,0.03550148382782936,-0.05285263806581497,-0.04200547933578491,-0.031287092715501785,-0.00948880985379219,0.00758550688624382,-0.040722280740737915,-0.01130077987909317,0.018525997176766396,-0.03879297524690628,-0.017093194648623466,0.009903847239911556,-0.0008210355881601572,0.045024044811725616,0.010586796328425407,0.023463981226086617,-0.011701657436788082,0.004057744983583689,-0.028116904199123383,0.04406760260462761,-0.006418162025511265,0.019477033987641335,-0.018980899825692177,0.01629803329706192,0.03426934778690338,0.01408823300153017,0.025181293487548828,0.0038648119661957026,0.0056035020388662815,-0.0034265120048075914,-0.044224631041288376,0.018834812566637993,-0.03927773982286453,-0.06529740244150162,-0.0027309334836900234,0.03896224498748779,-0.005789532326161861,-0.021980958059430122,0.06426248699426651,0.007916079834103584,-0.037713754922151566,-0.010703049600124359,-0.01435515284538269,0.006381116807460785,0.014161359518766403,-0.023645520210266113,0.00900493748486042,-0.01669894903898239,-0.03556210175156593,-0.002989121712744236,0.013073655776679516,0.0023941670078784227,0.07952429354190826,0.03211800754070282,-0.03272470086812973,-0.01997535303235054,0.0836409255862236,-0.08680291473865509,0.015009279362857342,0.012349646538496017,0.08770282566547394,-0.019331926479935646,-0.061751239001750946,-0.0009726016432978213,0.004155140835791826,0.020832009613513947,-0.006111852824687958,0.019438903778791428,-0.04497276991605759,0.009644533507525921,-0.02420586533844471,-0.021753385663032532,-0.03516031801700592,-0.08093102276325226,0.04980101436376572,-0.006153782829642296,-0.015484871342778206,-0.03509870171546936,-0.01135027315467596,0.03140048682689667,0.020620232447981834,0.04878854751586914,-0.003233636263757944,-0.057054631412029266,-0.0802660658955574,0.024000076577067375,0.03649228438735008,-0.017066584900021553,-0.05246751010417938,0.01515043806284666,-0.03675012290477753,0.039268411695957184,0.00046958812163211405,0.011461068876087666,-0.036031175404787064,-0.02804267778992653,-0.016474854201078415,-0.03425765037536621,0.02114751935005188,0.023688683286309242,0.16085857152938843,0.008871466852724552,0.03242466226220131,-0.04051421955227852,0.06755267828702927,0.006418991833925247,0.034946247935295105,-0.03743675351142883,0.026727579534053802,0.012595344334840775,0.04924757406115532,0.031472522765398026,0.020526420325040817,0.05198841169476509,-0.03514767065644264,0.051273804157972336,-0.028476567938923836,-0.024612806737422943,-0.02418503351509571,0.003244581166654825,0.006068394985049963,-0.020044662058353424,-0.052855007350444794,-0.013771863654255867,0.005494642537087202,0.0036817514337599277,0.011871731840074062,0.04577544704079628,0.10284610837697983,-0.034628380089998245,-0.006331952754408121,0.04146197810769081,-0.029675062745809555,0.0008410770096816123,-0.057500336319208145,0.0725814625620842,-0.02016710676252842,-0.03152353689074516,0.0042794751934707165,-0.023122111335396767,0.04894070327281952,-0.0016889972612261772,0.07888071984052658,-0.05135685205459595,-0.015977634117007256,0.011436659842729568,0.0017347383545711637,0.015840718522667885,-0.010181053541600704,-0.01164200622588396,-0.03940223529934883,0.041109923273324966,0.014651085250079632,0.01408921368420124,-0.010157130658626556,-0.006707454100251198,-0.02561033144593239,-0.02849740907549858,-0.031981874257326126,0.023906705901026726,0.007028417196124792,-0.02642352320253849,0.005319282412528992,-0.04585420712828636,-0.0006538263987749815,-0.03166530653834343,0.049316443502902985,0.0028180815279483795,0.044239308685064316,-0.020374838262796402,-0.04483634606003761,0.03234298527240753,-0.07934488356113434,0.04551002383232117,-0.05548418313264847,0.05146188661456108,-0.03822071850299835,-0.014898194000124931,-0.003758581355214119,0.004380588885396719,0.009241423569619656,0.052037499845027924,0.043257322162389755,0.006951809860765934,0.024285070598125458,0.04428964480757713,0.014747888781130314,0.040065448731184006,0.04103011265397072,-0.08621875941753387,0.014493130147457123,0.017063330858945847,-0.04295489564538002,0.07320861518383026,-0.015222758054733276,0.035147059708833694,-0.012442406266927719,-0.016049416735768318,-0.02459191158413887,-0.010098949074745178,-0.018783720210194588,0.03906938433647156,-0.009014452807605267,-0.00037757272366434336,-0.013181951828300953,0.008532779291272163,-0.0005734013975597918,-0.034456539899110794,-0.0027222854550927877,-0.01633111760020256,0.018918229267001152,0.04663964360952377,-0.0006888869684189558,0.010647378861904144,0.047054219990968704,-0.011500073596835136,-0.051500361412763596,-0.035625290125608444,-0.006985757499933243,-0.07977599650621414,0.04930964857339859,-0.000758553680498153,0.08868400752544403,0.0005969586200080812,-0.06835616379976273,0.0355059839785099,0.0562683530151844,0.03608636558055878,-0.005725464317947626,-0.024305911734700203,0.014887298457324505,0.02248152531683445,-0.03988587111234665,-0.016057083383202553,-0.024472614750266075,-0.07840286940336227,-0.034853070974349976,0.013609320856630802,-0.00889330543577671,0.04334639757871628,0.025295089930295944,0.05549297481775284,0.006909397896379232,-0.018044697120785713,0.007548853289335966,-0.0013379791053012013,-0.06448971480131149,0.018696025013923645,0.0358598493039608,0.03880181163549423,-0.04195500910282135,-0.04105130583047867,0.01483237836509943,0.02114275097846985,-0.01972208544611931,-0.01009155809879303,0.05553784221410751,-0.05844554305076599,0.09045305848121643,-0.06102028861641884,0.026731789112091064,0.014164360240101814,0.0031973840668797493,0.0019260846311226487,-0.021660562604665756,-0.013776580803096294,-0.01613549143075943,-0.029154153540730476,-0.01889055222272873,0.0574994757771492,-0.0035344085190445185,0.008341563865542412,0.0223942119628191,0.06785524636507034,-0.025873228907585144,0.016642380505800247,-0.035325780510902405,0.08051197230815887,0.02652488835155964,-0.012522964738309383,0.04979296028614044,-0.042519111186265945,-0.025161046534776688,0.03423580527305603,0.022572726011276245,-0.02826167456805706,-0.037802934646606445,-0.041087109595537186,-0.028873968869447708,-0.022957153618335724,0.0029578437097370625,0.03787604346871376,0.00030899528064765036,-0.025273408740758896,-0.027109390124678612,0.03310012072324753,-0.0402059368789196,-0.00710925692692399,0.0022287508472800255,0.004230516497045755,0.008721552789211273,0.02903124876320362,-0.0311404000967741,-0.08841324597597122,0.0031045617070049047,0.009152657352387905,0.016881726682186127,-0.005611129570752382,-0.0031690888572484255,0.021085428074002266,-0.02831428125500679,0.048467300832271576,0.01898866891860962,0.0006354081560857594,0.01676570437848568,-0.000662906386423856,-0.0384545773267746,0.03608482703566551,0.05457963049411774,-0.0072747268714010715,-0.01964256912469864,-0.05553551763296127,-0.004692623391747475,0.04682200774550438,-0.011361546814441681,-0.04015304893255234,-0.0561927929520607,0.04105165973305702,0.01330725196748972,-0.021345404908061028,-0.06099234148859978,-0.01621834747493267,-0.06690460443496704,0.06585146486759186,0.02814149670302868,-0.01314791664481163,-0.007793497294187546,0.033543508499860764,-0.055966105312108994,0.02658158726990223,0.0223837997764349,-0.10280616581439972,-0.04429135099053383,-0.024168863892555237,-0.016212860122323036,-0.0400705523788929,0.04451391473412514,0.009256976656615734,-0.04193010553717613,-0.04012979194521904,0.022277729585766792,0.04220247641205788,-0.000717713322956115,-0.0207198578864336,0.032023217529058456,-0.002025764901190996,-0.021248457953333855,0.04502580314874649,0.03542681038379669,-0.1455930471420288,0.027193764224648476,0.05783639848232269,-0.046204593032598495,-0.010396303609013557,0.02081250585615635,0.02727494016289711,0.0410759337246418,0.0008972997311502695,-0.018144721165299416,0.05384243652224541,0.028916988521814346,0.022710662335157394,-0.07740067690610886,-0.004026513546705246,-0.0175849050283432,-0.08226660639047623,-0.028935985639691353,-0.016143890097737312,-0.0413469597697258,-0.008981898427009583,-0.009301531128585339,-0.032785478979349136,0.03106585331261158,0.06062140688300133,-0.04816022142767906,-0.02594326063990593,0.051132991909980774,-0.0063490839675068855,-0.009445500560104847,0.02288343757390976,0.022064434364438057,0.020356589928269386,-0.038057390600442886,0.03629877418279648,-0.02173980325460434,0.028081437572836876,0.02045910619199276,0.0059557450003921986,-0.026439184322953224,-0.0004901132779195905,0.048861630260944366,0.004007868934422731,0.02773268148303032,-0.0223289392888546,0.014604407362639904,0.028155332431197166,-0.012093170545995235,-0.014422552660107613,0.009607053361833096,-0.005484732799232006,-0.01001857127994299,0.06744617223739624,-0.0005649449885822833,0.04116560146212578,0.008361662738025188,-0.007121196482330561,-0.016132038086652756,0.02073306031525135,0.009983697906136513,-0.007699721492826939,-0.011656048707664013,0.00947642419487238,0.0008242411422543228,-0.03652334585785866,0.006363390479236841,0.002172489184886217,0.0038129782769829035,-0.026018092408776283,-0.016386376693844795,-0.0032448386773467064,-0.05746082589030266,-5.7608417760167426e-33,-0.019033992663025856,-0.02916085347533226,-0.03697991743683815,-0.005071945954114199,0.027979254722595215,-0.02563299983739853,-0.005669379606842995,-0.04499358311295509,-0.0052234213799238205,0.0065216259099543095,0.0032523476984351873,-0.016544075682759285,0.015677064657211304,0.020360087975859642,0.026243189349770546,-0.009839286096394062,0.029104573652148247,-0.012166556902229786,0.01737244799733162,0.026929687708616257,-0.0670425221323967,0.008898591622710228,-0.0011820433428511024,0.04415055736899376,-0.03115740790963173,-0.028049886226654053,-0.024977490305900574,0.021200386807322502,0.01133792009204626,0.034832265228033066,-0.04296807199716568,-0.032822053879499435,-0.03065633773803711,-0.023225367069244385,0.014756342396140099,-0.0417875200510025,-0.024679411202669144,-0.022194834426045418,-0.023426029831171036,0.04055633395910263,0.07244555652141571,0.007817860692739487,0.028468981385231018,-0.010675651021301746,-0.012669337913393974,0.0035835495218634605,-0.015880916267633438,-0.009609327651560307,-0.0038742967881262302,-0.026668710634112358,-0.020959075540304184,0.009092709049582481,0.025000371038913727,0.02974742278456688,0.03290907293558121,0.025295164436101913,0.0468856506049633,-0.07433655858039856,-0.03084130398929119,-0.02457268163561821,-0.013606295920908451,-0.04218388721346855,0.017149269580841064,0.01721923053264618,0.026102213189005852,-0.006656909827142954,-0.019401397556066513,0.00914708897471428,0.0027434041257947683,-0.022148236632347107,-0.029484888538718224,0.038604456931352615,0.03153819218277931,-0.03485482558608055,-0.02765592373907566,0.0936485081911087,0.0216195248067379,-0.00310015631839633,0.00040478588198311627,0.08995939046144485,-0.010613979771733284,0.010364856570959091,0.006752875167876482,0.009927457198500633,0.02549006976187229,-0.05862241983413696,0.015548070892691612,0.010180969722568989,0.03900973126292229,0.005838518496602774,0.03600659593939781,0.06183579936623573,-0.03532510623335838,0.04658188670873642,-0.06874531507492065,0.012969255447387695,0.0495590977370739,0.056774649769067764,-0.006398428697139025,-0.05504770576953888,0.0225047767162323,-0.006017850246280432,-0.01819196343421936,-0.04647476598620415,-0.008704868145287037,0.010124698281288147,-0.004723747726529837,-0.04542124643921852,-0.061741527169942856,0.0019249279284849763,0.017126087099313736,0.019218159839510918,-0.01451066043227911,-0.04038483276963234,-0.013576838187873363,-0.024592699483036995,-0.03839658573269844,-0.003095532301813364,0.02397981658577919,-0.0049774376675486565,0.01888852007687092,0.02221318520605564,0.0038306687492877245,-0.008226705715060234,0.08056878298521042,-0.007260344456881285,0.010284285992383957,0.04152819514274597,0.0076858876273036,0.012269321829080582,0.004748755134642124,0.041454508900642395,2.4709422064006503e-7,0.015465090982615948,0.03589751943945885,-0.040567632764577866,0.009182233363389969,-0.010214796289801598,-0.043315548449754715,0.006997642107307911,-0.040301207453012466,-0.000010844082680705469,-0.08413419127464294,0.020335223525762558,0.012124153785407543,0.04919818788766861,0.06034629046916962,0.05872721970081329,-0.041988059878349304,0.008852161467075348,-0.06611508876085281,-0.052742816507816315,0.010708063840866089,0.05284295231103897,0.006850747857242823,0.036651454865932465,0.01805512048304081,-0.01328680757433176,0.01203983649611473,0.01774180680513382,-0.030514942482113838,-0.006312008015811443,-0.04278842359781265,0.032357145100831985,-0.03820503503084183,-0.033656686544418335,0.046868376433849335,0.0188001561909914,0.01601245440542698,-0.010208952240645885,-0.01584390364587307,0.026173558086156845,0.08887991309165955,0.034006401896476746,-0.049590736627578735,-0.013646971434354782,-0.06327756494283676,0.022834820672869682,-0.07480151951313019,0.0035716574639081955,0.025130175054073334,0.005557081196457148,0.022675780579447746,0.039757099002599716,0.003202663967385888,0.03185373544692993,-0.03739621490240097,0.015456752851605415,0.00713930232450366,-0.03130931779742241,0.03873647749423981,0.006167643703520298,0.06934874504804611,0.006230455823242664,-0.0030100210569798946,0.02735086902976036,-0.025569334626197815,0.043009012937545776,-0.04889156296849251,-0.010231988504529,3.282434354024328e-34,0.02017393708229065,-0.053742773830890656,0.05671018362045288,0.06731041520833969,0.03728818520903587,-0.012518145143985748,0.06863189488649368,-0.025874299928545952,0.025454619899392128,-0.08231765776872635,-0.012588605284690857]'
SET
  @TechnicalDesignVector_d0fc2550 = N'[0.0026493053883314133,-0.026035482063889503,-0.012299398891627789,-0.0067767854779958725,-0.01966853253543377,-0.010475614108145237,0.011791545897722244,0.07584792375564575,-0.11751160770654678,-0.027594681829214096,-0.02493472769856453,0.029898691922426224,0.02842581644654274,0.18918295204639435,0.02773907594382763,-0.12115631997585297,-0.011944974772632122,-0.003432471537962556,-0.01369750127196312,0.002561393426731229,0.012534905225038528,-0.007360001560300589,-0.03050883300602436,-0.02831524796783924,-0.001950749778188765,-0.020628513768315315,-0.052994001656770706,0.011259255930781364,0.025989724323153496,-0.052284952253103256,-0.02062450908124447,0.027192385867238045,-0.030427034944295883,-0.03262975066900253,0.0000018704735111896298,-0.026783326640725136,-0.031293947249650955,0.007417531218379736,-0.013585052452981472,0.04616139456629753,0.05121175944805145,-0.00897609256207943,0.02799384295940399,0.007935723289847374,-0.003323847893625498,-0.14080391824245453,-0.006592897232621908,0.10192585736513138,0.049845047295093536,-0.002112966263666749,0.013724632561206818,0.02859046496450901,-0.04454657807946205,0.005331892054527998,0.011485571041703224,0.00230377446860075,0.01651860401034355,-0.06889868527650833,0.008977510035037994,0.018554219976067543,0.002216799883171916,-0.015917383134365082,-0.00273928907699883,-0.018103066831827164,0.019666556268930435,0.028813697397708893,0.014571795240044594,-0.008173031732439995,-0.00337875890545547,0.016589103266596794,0.03892636299133301,0.014695688150823116,-0.023936297744512558,-0.003080811584368348,-0.015430258587002754,-0.02491004765033722,-0.012135526165366173,0.025767920538783073,0.006259887013584375,-0.01704411953687668,-0.06346163898706436,-0.002757477341219783,-0.029617521911859512,-0.00742162624374032,0.015868758782744408,0.016138941049575806,0.011787374503910542,-0.01113480981439352,-0.04415113478899002,-0.004761149175465107,-0.022971220314502716,-0.04531695693731308,-0.028383715078234673,0.032033368945121765,-0.014914884231984615,-0.010695219971239567,0.03023175336420536,0.03512367606163025,0.006596802733838558,0.034186288714408875,-0.02369796857237816,0.06457912176847458,-0.06715379655361176,0.032307762652635574,0.039337851107120514,-0.013952617533504963,-0.01879979483783245,-0.04026108980178833,-0.0017120101256296039,0.043362200260162354,0.023538226261734962,0.017409389838576317,-0.05524083599448204,0.03836708888411522,-0.05331175774335861,-0.014120670966804028,-0.02810320444405079,-0.01919165626168251,0.010915318503975868,0.05311524495482445,0.15997178852558136,0.008397601544857025,0.0038408543914556503,0.02191634103655815,-0.00040984724182635546,0.017708536237478256,-0.03625790402293205,-0.02138429321348667,0.0361417755484581,0.020899396389722824,-0.02583797462284565,-0.024159668013453484,0.02765347622334957,-0.03579089418053627,-0.033634066581726074,-0.02596897818148136,0.00016194859927054495,0.024776997044682503,-0.009307267144322395,0.04746437445282936,0.016795089468359947,0.02307109162211418,-0.06293193995952606,0.03800911083817482,-0.013715236447751522,-0.00691209314391017,0.013168751262128353,-0.023421425372362137,-0.02755456231534481,-0.000735902285668999,0.030785374343395233,0.0050016301684081554,-0.02479562535881996,-0.0011176305124536157,-0.0795854851603508,0.008755224756896496,-0.057312700897455215,-0.01792866550385952,-0.002973617985844612,0.05853987857699394,-0.00544659374281764,-0.044651489704847336,0.03996748477220535,0.011044522747397423,-0.03552444279193878,0.029101915657520294,-0.050184980034828186,-0.013222992420196533,0.020397644490003586,-0.04542439430952072,-0.03049338422715664,-0.03976208344101906,-0.0257580429315567,0.008393026888370514,0.007549908943474293,-0.06413621455430984,0.04603848606348038,-0.017627069726586342,-0.02603031136095524,0.0015747572761029005,0.08608188480138779,-0.11955375969409943,0.03416812792420387,0.0016561602242290974,0.07495120912790298,-0.017900804057717323,-0.07519640028476715,0.028040876612067223,-0.015548106282949448,-0.009439811110496521,-0.025108300149440765,0.01600104384124279,0.01186800841242075,0.04948408529162407,-0.020938696339726448,-0.003381239017471671,-0.03890122100710869,-0.028917504474520683,0.044305894523859024,0.00932855624705553,0.03855357691645622,-0.02525562047958374,0.01053418219089508,0.08968988060951233,0.017844324931502342,0.018373379483819008,0.046345729380846024,-0.03465212136507034,-0.05689748004078865,0.046247221529483795,0.013864917680621147,-0.0016410649986937642,0.0024340692907571793,0.003021366661414504,-0.036236003041267395,-0.02313970774412155,0.02818223275244236,0.004829922690987587,-0.04558711126446724,-0.018178358674049377,-0.032572679221630096,-0.019240833818912506,0.07434955984354019,-0.019187888130545616,0.17197009921073914,-0.017476998269557953,0.013387242332100868,-0.013932903297245502,0.04756801202893257,0.011753915809094906,-0.014052770100533962,-0.013011286966502666,0.025055309757590294,0.04522307962179184,0.03186402842402458,0.05284663662314415,0.08410050719976425,0.030490750446915627,0.032991450279951096,0.01955881528556347,-0.04738163948059082,-0.02161644585430622,-0.036338869482278824,-0.004086840432137251,0.013898910023272038,-0.003681297181174159,-0.0445140041410923,0.022814715281128883,-0.016274936497211456,0.011905117891728878,0.02791474387049675,0.06098025664687157,0.038886237889528275,-0.049690332263708115,-0.01498280931264162,0.034266140311956406,0.04896702989935875,-0.0021076486445963383,-0.03425520658493042,0.04846703261137009,-0.02602652832865715,-0.022887980565428734,-0.03163350000977516,-0.04643683508038521,0.020275752991437912,0.013577856123447418,0.07479280233383179,-0.010059872642159462,-0.006262552924454212,0.004919953178614378,-0.008629067800939083,0.029960548505187035,0.0019266594899818301,-0.031142262741923332,0.006122330203652382,0.0018792608752846718,-0.020381446927785873,0.013935464434325695,-0.036357030272483826,-0.00039048190228641033,-0.0005315020680427551,-0.044068846851587296,-0.02731928601861,0.032211948186159134,0.009302513673901558,-0.01674579456448555,-0.022407209500670433,-0.02489943988621235,-0.016214042901992798,-0.09070655703544617,-0.0010275908280164003,-0.0030379206873476505,0.026824645698070526,-0.0628235712647438,-0.038324810564517975,-0.004339537583291531,-0.022380415350198746,0.0038768108934164047,-0.016772259026765823,0.049229443073272705,-0.01257449109107256,-0.041225776076316833,0.0032693948596715927,-0.002029647585004568,-0.0031932913698256016,0.021189717575907707,-0.002972561400383711,-0.008152117021381855,0.0325617715716362,0.0957038626074791,0.04488210007548332,0.03244652971625328,-0.021600311622023582,-0.032596126198768616,0.022446556016802788,0.011408437974750996,0.012219035066664219,0.08949805796146393,0.012264503166079521,0.0560002438724041,0.016362017020583153,0.009487774223089218,-0.012571313418447971,-0.026923656463623047,-0.00501906918361783,0.021460693329572678,-0.002647634595632553,-0.02183307148516178,-0.05342560634016991,-0.03453105315566063,0.012376422062516212,-0.044842030853033066,0.0081058694049716,0.027443470433354378,0.003827579552307725,0.010009486228227615,-0.03042007051408291,-0.051311202347278595,0.01766127720475197,-0.022369667887687683,-0.00960969552397728,-0.033440910279750824,0.007839098572731018,-0.05338286608457565,0.014577269554138184,-0.009198981337249279,0.010395179502665997,0.030856551602482796,-0.061919864267110825,0.038353871554136276,0.033736277371644974,0.05186277627944946,0.0025498338509351015,-0.02099216729402542,-0.009448069147765636,0.06930205225944519,-0.027562033385038376,-0.03910703584551811,-0.01009125541895628,-0.045172858983278275,-0.04034017026424408,0.010372629389166832,0.06263116747140884,0.05073840916156769,0.02155514806509018,0.05333874002099037,0.033509448170661926,0.0008005477720871568,-0.007447404786944389,0.014833892695605755,-0.062209032475948334,0.020802577957510948,0.06313664466142654,0.05444449558854103,-0.013474518433213234,-0.009893704205751419,0.028569146990776062,0.018403058871626854,-0.03677264600992203,-0.010246255435049534,0.04077805578708649,-0.1008102148771286,0.0805169865489006,-0.03170014172792435,0.023430893197655678,0.027883846312761307,-0.0022599862422794104,0.015207449905574322,0.04357914254069328,-0.02032821998000145,-0.008925518952310085,-0.028344500809907913,-0.03140023350715637,0.017862020060420036,-0.0037971509154886007,0.016595598310232162,0.016689561307430267,0.03480413556098938,0.010951057076454163,0.013767684809863567,0.012533877044916153,0.09345106035470963,-0.019885603338479996,0.01814640313386917,0.05265992134809494,0.0016943048685789108,-0.0072723389603197575,0.0193487461656332,-0.011263790540397167,-0.03145231306552887,-0.05354025587439537,-0.036564890295267105,0.014570385217666626,-0.023400161415338516,-0.06217778101563454,0.008747615851461887,-0.03502980247139931,-0.017046818509697914,0.009896867908537388,0.07123523205518723,-0.020215464755892754,0.01661493629217148,-0.029676830396056175,0.010504046455025673,-0.02555377408862114,-0.015904845669865608,-0.030292866751551628,-0.04406734183430672,0.011599177494645119,0.01338130235671997,0.014616736210882664,0.025508524850010872,-0.03902280703186989,0.02557074837386608,-0.03560306876897812,-0.014993303455412388,-0.017156541347503662,0.03971771523356438,0.03539544343948364,-0.02442530170083046,-0.034212104976177216,0.0017434997716918588,0.04015902802348137,-0.024627769365906715,-0.02195584401488304,-0.07690700888633728,0.018138866871595383,0.037401288747787476,0.02717795968055725,-0.06255581974983215,-0.03050069697201252,0.023033589124679565,-0.05221039801836014,-0.005341903306543827,-0.04988650232553482,-0.03278075531125069,-0.02491842769086361,0.014665546827018261,0.009180608205497265,0.02478376217186451,0.02263084426522255,0.029034961014986038,-0.04200972989201546,0.027227431535720825,-0.021918339654803276,0.0008454599301330745,-0.033991482108831406,0.004006970673799515,-0.007121932227164507,-0.04370088130235672,0.011443580500781536,0.021176669746637344,-0.03949160501360893,-0.02406787872314453,0.04052169993519783,0.024952327832579613,0.004479263909161091,0.015733536332845688,0.02694033645093441,0.006859261076897383,0.005520709790289402,0.04422687366604805,-0.015665164217352867,-0.08048070222139359,0.04916088655591011,0.04813211411237717,-0.043102435767650604,-0.0202940646559,0.007775343023240566,-0.018736671656370163,0.04039055109024048,-0.0349893718957901,-0.005351863335818052,0.09933993220329285,0.04984664544463158,0.021064765751361847,0.00007494611054426059,-0.017860719934105873,0.028298625722527504,-0.07739805430173874,0.008488677442073822,-0.0030652987770736217,-0.03147375211119652,-0.019780049100518227,-0.04684077575802803,-0.037082087248563766,0.032186947762966156,0.03075183928012848,-0.015394642017781734,-0.05430091172456741,0.05729072168469429,0.0025988270062953234,-0.003148695919662714,-0.011994303204119205,0.028293680399656296,0.052979957312345505,-0.02734203264117241,0.03771698474884033,-0.0006559268804267049,-0.0018988195806741714,0.014404530636966228,0.011997697874903679,-0.015640849247574806,-0.01140082161873579,0.023605434224009514,0.02495284378528595,0.008841889910399914,0.004502603784203529,0.0009462403832003474,0.05167936533689499,0.015690317377448082,0.007984793744981289,0.003541144309565425,0.042279429733753204,-0.025657273828983307,0.09462098032236099,-0.07375035434961319,0.04914037510752678,0.007567616645246744,-0.029772009700536728,-0.00789716187864542,-0.021458102390170097,0.05546751990914345,0.022051798179745674,0.004854802042245865,0.009275528602302074,-0.022134386003017426,-0.04980945587158203,0.008680945262312889,0.003913354594260454,0.031709350645542145,-0.018779965117573738,-0.038181476294994354,-0.010713929310441017,0.009100466966629028,-6.677757124358882e-33,-0.05224759876728058,-0.011232552118599415,0.006652158685028553,-0.02519497275352478,-0.0009495647973380983,-0.010132343508303165,-0.046840161085128784,-0.053221024572849274,-0.021346816793084145,0.00002202334326284472,-0.03166234865784645,-0.019850172102451324,0.02660745568573475,0.0375959612429142,0.003936918452382088,-0.03608042746782303,0.050124041736125946,0.02481856569647789,0.004418980795890093,0.02075636386871338,-0.06566347181797028,0.009744319133460522,0.007237243931740522,-0.0005265375948511064,-0.022717753425240517,0.002140604890882969,-0.052572015672922134,0.06301014125347137,0.02760172262787819,0.025689082220196724,-0.04008227959275246,-0.018954042345285416,-0.04249844327569008,0.00539476377889514,0.019846348091959953,-0.010822970420122147,-0.014650709927082062,-0.025542082265019417,0.0019362464081496,0.024570170789957047,0.03788619115948677,0.0036461330018937588,0.00815250352025032,0.016282323747873306,0.0053168837912380695,-0.010096556507050991,-0.015177298337221146,-0.005872972775250673,-0.010863915085792542,-0.02576582506299019,0.024752026423811913,0.002669602632522583,-0.022827107459306717,0.04070913419127464,0.007201749365776777,0.037838149815797806,0.02903515100479126,-0.03465763106942177,-0.011026729829609394,0.006541653070598841,-0.047812122851610184,-0.04510173201560974,0.013737475499510765,0.024836862459778786,0.03457046300172806,-0.0046910010278224945,-0.05723058432340622,0.04767056554555893,-0.06153314560651779,0.019882017746567726,-0.004883476532995701,0.020811758935451508,0.04470057040452957,-0.012704667635262012,-0.08401429653167725,0.032533615827560425,0.0545913428068161,0.005856755655258894,0.11952468752861023,0.06693708896636963,-0.03434230387210846,0.04247339069843292,0.018956562504172325,0.023891210556030273,-0.03319632261991501,-0.03720135986804962,0.007801605388522148,-0.024077434092760086,0.027149014174938202,0.0037216527853161097,0.018549978733062744,0.04757974296808243,-0.0277788657695055,0.03557557985186577,-0.0570877380669117,0.021145813167095184,0.058849237859249115,0.05877538025379181,-0.0017875327030196786,-0.04760274291038513,0.061151981353759766,0.012343424372375011,-0.00909140519797802,-0.0370614267885685,-0.013196173124015331,0.027680877596139908,-0.03785458952188492,0.011952461674809456,-0.06465018540620804,0.008038537576794624,0.027997244149446487,-0.0014964340953156352,-0.015026280656456947,-0.07687828689813614,0.01594483107328415,-0.014145282097160816,-0.011519616469740868,-0.04320474714040756,0.019211018458008766,0.04380491375923157,0.0596192330121994,0.05077315866947174,0.00772317498922348,0.024154191836714745,0.008591177873313427,-0.01228856761008501,-0.0412013866007328,0.009497787803411484,-0.009818075224757195,-0.018230421468615532,-0.001073574647307396,0.005954085849225521,2.7614083819571533e-7,0.02610882930457592,0.035053614526987076,-0.023640180006623268,0.020295076072216034,0.0049538323655724525,-0.049604158848524094,-0.034427426755428314,-0.030337819829583168,-0.0010676499223336577,-0.053346335887908936,0.027528924867510796,0.003181979525834322,-0.009410799480974674,0.043303538113832474,0.05945002660155296,-0.0381961390376091,-0.05249388888478279,-0.053282544016838074,-0.028986988589167595,0.026613764464855194,0.05266420915722847,0.024975422769784927,0.05452347546815872,0.020079871639609337,0.014507678337395191,0.03098391741514206,0.03763134777545929,0.0037601585499942303,-0.00186530826613307,-0.051796671003103256,-0.01854785718023777,-0.05338093265891075,-0.0173738244920969,-0.029917605221271515,0.016320640221238136,0.019569914788007736,-0.018575653433799744,0.022880518808960915,0.03844214975833893,0.11661411076784134,-0.011562133207917213,-0.010360299609601498,-0.019806042313575745,-0.08338026702404022,0.038659583777189255,-0.00390662020072341,0.0015139380702748895,-0.003916974179446697,-0.07050211727619171,-0.01470885518938303,-0.005344732664525509,-0.005426555871963501,-0.02484131045639515,-0.002943833824247122,0.003040607552975416,0.00994199700653553,-0.015989098697900772,0.024102402850985527,0.004423850681632757,-0.006669697817414999,-0.02380458451807499,0.004626073874533176,-0.0028702819254249334,0.010307809337973595,0.02685016393661499,-0.0048782359808683395,-0.03943968936800957,2.812573879555053e-34,0.010366647504270077,-0.048623278737068176,0.011038224212825298,-0.007755553815513849,0.03817620873451233,-0.019796524196863174,0.049722496420145035,-0.041820380836725235,0.0030836325604468584,-0.08038843423128128,-0.022571805864572525]'
SET
  @HasCustomProps_d0fc2550 = 1
SET
  @HasCustomEvents_d0fc2550 = 0
SET
  @RequiresData_d0fc2550 = 1
SET
  @DependencyCount_d0fc2550 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_d0fc2550 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_d0fc2550 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_d0fc2550 = 1
SET
  @ID_d0fc2550 = '3A79D7B7-5DCF-43A2-9233-41F44B710109'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_d0fc2550,
  @Name = @Name_d0fc2550,
  @Version = @Version_d0fc2550,
  @VersionSequence = @VersionSequence_d0fc2550,
  @Title = @Title_d0fc2550,
  @Description = @Description_d0fc2550,
  @Type = @Type_d0fc2550,
  @Status = @Status_d0fc2550,
  @DeveloperName = @DeveloperName_d0fc2550,
  @DeveloperEmail = @DeveloperEmail_d0fc2550,
  @DeveloperOrganization = @DeveloperOrganization_d0fc2550,
  @SourceRegistryID = @SourceRegistryID_d0fc2550,
  @ReplicatedAt = @ReplicatedAt_d0fc2550,
  @LastSyncedAt = @LastSyncedAt_d0fc2550,
  @Specification = @Specification_d0fc2550,
  @FunctionalRequirements = @FunctionalRequirements_d0fc2550,
  @TechnicalDesign = @TechnicalDesign_d0fc2550,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_d0fc2550,
  @TechnicalDesignVector = @TechnicalDesignVector_d0fc2550,
  @HasCustomProps = @HasCustomProps_d0fc2550,
  @HasCustomEvents = @HasCustomEvents_d0fc2550,
  @RequiresData = @RequiresData_d0fc2550,
  @DependencyCount = @DependencyCount_d0fc2550,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_d0fc2550,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_d0fc2550,
  @HasRequiredCustomProps = @HasRequiredCustomProps_d0fc2550,
  @ID = @ID_d0fc2550;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_d9178437 NVARCHAR(MAX),
@Name_d9178437 NVARCHAR(500),
@Version_d9178437 NVARCHAR(50),
@VersionSequence_d9178437 INT,
@Title_d9178437 NVARCHAR(1000),
@Description_d9178437 NVARCHAR(MAX),
@Type_d9178437 NVARCHAR(255),
@Status_d9178437 NVARCHAR(50),
@DeveloperName_d9178437 NVARCHAR(255),
@DeveloperEmail_d9178437 NVARCHAR(255),
@DeveloperOrganization_d9178437 NVARCHAR(255),
@SourceRegistryID_d9178437 UNIQUEIDENTIFIER,
@ReplicatedAt_d9178437 DATETIMEOFFSET,
@LastSyncedAt_d9178437 DATETIMEOFFSET,
@Specification_d9178437 NVARCHAR(MAX),
@FunctionalRequirements_d9178437 NVARCHAR(MAX),
@TechnicalDesign_d9178437 NVARCHAR(MAX),
@FunctionalRequirementsVector_d9178437 NVARCHAR(MAX),
@TechnicalDesignVector_d9178437 NVARCHAR(MAX),
@HasCustomProps_d9178437 BIT,
@HasCustomEvents_d9178437 BIT,
@RequiresData_d9178437 BIT,
@DependencyCount_d9178437 INT,
@TechnicalDesignVectorEmbeddingModelID_d9178437 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_d9178437 NVARCHAR(MAX),
@HasRequiredCustomProps_d9178437 BIT,
@ID_d9178437 UNIQUEIDENTIFIER
SET
  @Namespace_d9178437 = N'CRM/Dashboards'
SET
  @Name_d9178437 = N'PipelineKanban'
SET
  @Version_d9178437 = N'1.0.0'
SET
  @VersionSequence_d9178437 = 1
SET
  @Title_d9178437 = N'Pipeline Kanban'
SET
  @Description_d9178437 = N'Kanban board visualization of sales pipeline stages'
SET
  @Type_d9178437 = N'Chart'
SET
  @Status_d9178437 = N'Published'
SET
  @Specification_d9178437 = N'{"name":"PipelineKanban","namespace":"CRM/Dashboards","type":"Chart","location":"embedded","code":"// PipelineKanban Sub-component\nconst PipelineKanban = ({ stages, deals, onDealClick, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) => {\n  const getStageColor = (stageName) => {\n    const colors = {\n      ''Prospecting'': ''#6f42c1'',\n      ''Qualification'': ''#007bff'',\n      ''Proposal'': ''#17a2b8'',\n      ''Negotiation'': ''#ffc107'',\n      ''Closed Won'': ''#28a745'',\n      ''Closed Lost'': ''#dc3545''\n    };\n    return colors[stageName] || ''#6c757d'';\n  };\n\n  const handleDealClick = (deal) => {\n    if (onDealClick) {\n      onDealClick(deal);\n    } else if (callbacks?.OpenEntityRecord) {\n      callbacks.OpenEntityRecord(''Deals'', deal.id);\n    }\n  };\n\n  return (\n    <div style={{\n      display: ''flex'',\n      gap: ''15px'',\n      overflowX: ''auto'',\n      padding: ''10px'',\n      minHeight: ''400px''\n    }}>\n      {stages.map((stage, stageIndex) => (\n        <div \n          key={stage.name || stageIndex}\n          style={{\n            minWidth: ''280px'',\n            backgroundColor: ''#f8f9fa'',\n            borderRadius: ''8px'',\n            padding: ''10px'',\n            display: ''flex'',\n            flexDirection: ''column''\n          }}\n        >\n          <div style={{\n            padding: ''10px'',\n            marginBottom: ''10px'',\n            borderBottom: `3px solid $' + '{getStageColor(stage.name)}`,\n            backgroundColor: ''#fff'',\n            borderRadius: ''4px''\n          }}>\n            <h4 style={{ margin: ''0 0 5px 0'', fontSize: ''16px'' }}>{stage.name}</h4>\n            <div style={{ display: ''flex'', justifyContent: ''space-between'', fontSize: ''13px'', color: ''#666'' }}>\n              <span>{stage.count} deals</span>\n              <span>$' + '{(stage.totalValue / 1000000).toFixed(1)}M</span>\n            </div>\n          </div>\n\n          <div style={{\n            flex: 1,\n            overflowY: ''auto'',\n            display: ''flex'',\n            flexDirection: ''column'',\n            gap: ''8px''\n          }}>\n            {deals\n              .filter(deal => deal.stage === stage.name)\n              .map((deal, dealIndex) => (\n                <div\n                  key={deal.id || dealIndex}\n                  onClick={() => handleDealClick(deal)}\n                  style={{\n                    backgroundColor: ''#fff'',\n                    border: ''1px solid #e0e0e0'',\n                    borderRadius: ''6px'',\n                    padding: ''10px'',\n                    cursor: ''pointer'',\n                    transition: ''transform 0.1s, box-shadow 0.1s''\n                  }}\n                  onMouseEnter={(e) => {\n                    e.currentTarget.style.transform = ''translateY(-2px)'';\n                    e.currentTarget.style.boxShadow = ''0 4px 8px rgba(0,0,0,0.1)'';\n                  }}\n                  onMouseLeave={(e) => {\n                    e.currentTarget.style.transform = ''translateY(0)'';\n                    e.currentTarget.style.boxShadow = ''none'';\n                  }}\n                >\n                  <div style={{ fontWeight: ''500'', fontSize: ''14px'', marginBottom: ''4px'' }}>\n                    {deal.name}\n                  </div>\n                  <div style={{ fontSize: ''12px'', color: ''#666'', marginBottom: ''8px'' }}>\n                    {deal.accountName}\n                  </div>\n                  <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n                    <span style={{ fontSize: ''14px'', fontWeight: ''bold'', color: ''#333'' }}>\n                      $' + '{(deal.value / 1000).toFixed(0)}K\n                    </span>\n                    <span style={{\n                      fontSize: ''11px'',\n                      padding: ''2px 6px'',\n                      borderRadius: ''10px'',\n                      backgroundColor: deal.probability >= 70 ? ''#d4edda'' : \n                                       deal.probability >= 40 ? ''#fff3cd'' : ''#f8d7da'',\n                      color: deal.probability >= 70 ? ''#155724'' : \n                             deal.probability >= 40 ? ''#856404'' : ''#721c24''\n                    }}>\n                      {deal.probability}%\n                    </span>\n                  </div>\n                  {deal.daysInStage > 30 && (\n                    <div style={{\n                      marginTop: ''6px'',\n                      fontSize: ''11px'',\n                      color: ''#dc3545'',\n                      fontStyle: ''italic''\n                    }}>\n                      ⚠ {deal.daysInStage} days in stage\n                    </div>\n                  )}\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","functionalRequirements":"## Pipeline Kanban Board\n\n### Purpose\nDisplay deals in a Kanban board layout organized by pipeline stages.\n\n### Features\n- Column-based layout for stages\n- Deal cards in each column\n- Stage totals and counts\n- Scrollable columns\n- Color-coded stage headers\n- Deal value formatting","dataRequirements":{"mode":"views","description":"Displays deals organized in kanban columns by stage","entities":[{"name":"Deals","description":"Deal entities grouped by pipeline stage","displayFields":["ID","DealName","Amount","Stage","CloseDate","Probability","Account"],"filterFields":["Stage"],"sortFields":["Amount","CloseDate"],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Deals organized into kanban columns by stage"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Props\n- dealsByStage: Object with stages as keys, deals arrays as values\n- stages: Array of stage definitions\n- onDealClick: Callback for deal selection\n\n### Layout\n- Flexbox horizontal columns\n- Fixed height with scroll\n- Stage headers with colors","properties":[{"name":"dealsByStage","type":"Record<string, Array<{ID: string, DealName: string, Amount: number, CloseDate: string, Probability: number}>>","required":true,"description":"Deals grouped by stage key"},{"name":"stages","type":"Array<{name: string, color: string}>","required":true,"description":"Stage definitions with names and colors"},{"name":"onDealClick","type":"(deal: {ID: string, DealName: string}) => void","required":true,"description":"Callback for deal selection"}],"events":[],"dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_d9178437 = N'- Display all pipeline stages in a horizontal grid
- Show deal count and total value for each stage
- Use stage-specific colors for visual distinction
- Make each stage card clickable for drill-down
- Show hover effects on stage cards'
SET
  @TechnicalDesign_d9178437 = N'Renders a responsive grid of stage cards. Filters deals by stage and calculates metrics. Uses color-coded borders and hover animations. Formats currency values using helper function.'
SET
  @FunctionalRequirementsVector_d9178437 = N'[-0.05046190321445465,-0.02009575441479683,-0.03789020702242851,-0.031476352363824844,0.010744254104793072,0.006150152999907732,0.0073281764052808285,0.039539918303489685,-0.057039178907871246,0.0053037116304039955,-0.05538315698504448,0.035949595272541046,-0.017046969383955002,0.17773661017417908,-0.006963525898754597,-0.12075973302125931,-0.025485055521130562,0.019020317122340202,-0.030448516830801964,0.026139989495277405,0.00042042683344334364,-0.013252444565296173,-0.028162892907857895,-0.022511718794703484,-0.0046116141602396965,-0.0053951856680214405,-0.06362871825695038,0.0015703855315223336,0.014635765925049782,-0.07069076597690582,-0.02017034776508808,0.06359726935625076,-0.012931467965245247,-0.047385457903146744,0.0000017800474552132073,-0.006498460192233324,-0.03739342465996742,0.009696411900222301,0.003779459511861205,0.035850103944540024,0.02672678977251053,-0.024298354983329773,0.02901812084019184,-0.007185664493590593,0.01509926188737154,-0.08627799898386002,-0.03795177489519119,0.08366867154836655,0.025510145351290703,-0.055860865861177444,0.019757509231567383,-0.030233370140194893,-0.006919022183865309,0.001723735244013369,-0.01501520723104477,0.020588476210832596,-0.0241027120500803,-0.03470291569828987,0.06153501570224762,0.004375345539301634,0.022485461086034775,0.027266450226306915,0.020522654056549072,-0.05942745879292488,0.06684111058712006,0.03568974882364273,0.10125092417001724,-0.049026355147361755,0.02932952344417572,0.011174749583005905,-0.025259552523493767,-0.006477429065853357,-0.029416246339678764,-0.07901538163423538,-0.00866524688899517,-0.015192043967545033,-0.061243221163749695,0.029967110604047775,0.020869411528110504,-0.028125077486038208,-0.06996659189462662,0.022492432966828346,-0.027313193306326866,-0.004532279912382364,0.03518209606409073,0.017731433734297752,0.019247574731707573,-0.01204623468220234,-0.028117109090089798,-0.010116096585988998,0.012372161261737347,-0.014633879996836185,-0.024667195975780487,0.0161636620759964,-0.10783720016479492,-0.002148777712136507,0.04406265541911125,0.055002324283123016,0.022290663793683052,0.03150852024555206,0.02344074845314026,0.03511817380785942,0.030238773673772812,0.03229227289557457,0.03895595669746399,-0.004388587083667517,-0.03818317875266075,-0.034107185900211334,-0.009161976166069508,0.044860538095235825,-0.0024735252372920513,0.002303938614204526,-0.05724509060382843,0.028785111382603645,-0.07278759032487869,-0.007260029204189777,-0.01928778551518917,-0.01889852061867714,0.0022117248736321926,0.02422214299440384,0.12192307412624359,0.004558853805065155,0.025284800678491592,0.036675915122032166,0.03612500801682472,0.04030434042215347,-0.062451574951410294,-0.019992781803011894,-0.01303954143077135,0.008165247738361359,-0.030592091381549835,0.015568088740110397,0.015838472172617912,-0.01770062744617462,-0.03837333247065544,-0.0037484047934412956,0.014042078517377377,0.02073933370411396,-0.06257003545761108,0.010318578220903873,0.0345420315861702,-0.0018900326685979962,-0.046552784740924835,0.06664622575044632,-0.0029804089572280645,-0.0073148333467543125,-0.013851209543645382,0.07183681428432465,0.0086256368085742,0.02339000813663006,0.03321041539311409,-0.007708996068686247,0.010281501337885857,0.01312717329710722,-0.00008299823821289465,0.009928297251462936,-0.05918630212545395,-0.005797587800770998,0.011299354024231434,0.046051062643527985,-0.001423644251190126,-0.0489453487098217,0.045019060373306274,-0.006434889975935221,-0.04300322383642197,0.02813292108476162,0.01619577780365944,-0.025380870327353477,-0.029764195904135704,-0.016414064913988113,0.005492234602570534,-0.05574331432580948,-0.0369950532913208,0.03738238662481308,0.018340831622481346,-0.029305731877684593,0.10025197267532349,-0.034290820360183716,0.03676679730415344,0.011996210552752018,0.054337918758392334,-0.05557513236999512,0.017681509256362915,0.04902162402868271,0.05896865576505661,-0.0040465714409947395,-0.08801428228616714,-0.02707294002175331,-0.015365536324679852,0.030271396040916443,0.013009925372898579,0.032329484820365906,-0.059658344835042953,0.0018930940423160791,-0.011398718692362309,-0.008851026184856892,-0.03254812955856323,-0.020478248596191406,0.04128821939229965,-0.026030367240309715,0.022289151325821877,0.010840476490557194,0.012731545604765415,0.032741252332925797,-0.001244469778612256,-0.008660699240863323,-0.0026640240103006363,-0.030875258147716522,-0.07265930622816086,0.04030418395996094,0.03759961575269699,0.006938903126865625,-0.03128134086728096,0.020342394709587097,-0.04793926700949669,-0.049954019486904144,0.01872260496020317,-0.006171177141368389,-0.029709337279200554,-0.04483533650636673,-0.010837767273187637,-0.019467685371637344,0.05980284512042999,0.013509975746273994,0.10647815465927124,0.06544743478298187,0.018566710874438286,-0.015471262857317924,0.03316230699419975,0.016945308074355125,0.011853883974254131,-0.007768645882606506,0.053838904947042465,0.008204479701817036,-0.00332619808614254,0.05246112123131752,0.06854603439569473,0.08527586609125137,-0.0074028377421200275,0.05498812347650528,0.012225354090332985,-0.06690382957458496,-0.04996378719806671,0.005377733148634434,0.052063167095184326,-0.0490187406539917,-0.012375736609101295,0.022152451798319817,0.024194225668907166,-0.04308423772454262,-0.024777084589004517,0.03695804998278618,0.08146224915981293,-0.013817724771797657,0.027684714645147324,0.010340667329728603,0.01529192179441452,-0.02814980037510395,-0.0726393461227417,0.08461303263902664,-0.017196588218212128,-0.0019024268258363008,-0.06447826325893402,-0.0393802635371685,0.024023625999689102,-0.010564960539340973,0.061577245593070984,0.016038453206419945,-0.04311608150601387,0.01621190458536148,0.02297234535217285,0.04607975855469704,-0.012518802657723427,-0.02655717357993126,-0.017712436616420746,0.034516870975494385,-0.006444326136261225,0.033589113503694534,-0.03614313527941704,-0.01785285398364067,-0.008719081059098244,-0.03816664218902588,-0.01609930209815502,0.026356326416134834,-0.00790037214756012,0.007873991504311562,0.012313466519117355,-0.06861386448144913,-0.023191777989268303,-0.06332474201917648,0.07535504549741745,-0.023114535957574844,0.06059106066823006,-0.015616709366440773,-0.04501831904053688,0.014915883541107178,-0.07968538999557495,0.016633041203022003,-0.051306918263435364,0.05939893797039986,-0.028455957770347595,-0.013377465307712555,-0.000988760031759739,0.005789149086922407,-0.023701298981904984,0.03703394904732704,0.01885198801755905,0.012262903153896332,0.013257687911391258,0.053842298686504364,0.018344728276133537,0.02218024432659149,0.02189834602177143,-0.03419627621769905,0.008783829398453236,0.048649922013282776,0.03504734858870506,-0.007847975008189678,0.02715287357568741,0.027377454563975334,0.011972567066550255,-0.008832823485136032,-0.013422886840999126,-0.034662432968616486,-0.05401995778083801,0.012642907910048962,0.0003197329642716795,-0.02629920095205307,0.0038383060600608587,-0.015658987686038017,0.014713765121996403,-0.04504579305648804,-0.031890399754047394,-0.007916729897260666,-0.008794388733804226,0.03501085564494133,-0.011365971527993679,-0.06324318796396255,0.0006871680961921811,-0.04116394743323326,-0.03977808728814125,-0.013671714812517166,-0.03276396170258522,0.005317865405231714,0.04660896956920624,0.03403047099709511,0.0927342027425766,-0.015203148126602173,-0.12153441458940506,0.0403766930103302,0.037703994661569595,0.03583995997905731,0.023065142333507538,-0.03147853910923004,0.015104247257113457,0.09067550301551819,-0.01620408706367016,-0.013577206060290337,-0.02568059228360653,-0.03890646621584892,0.002751166932284832,0.022522538900375366,0.026903338730335236,0.020225374028086662,0.02637612447142601,0.026746701449155807,-0.009017989970743656,-0.037571314722299576,0.02580155059695244,-0.006787363905459642,-0.038863569498062134,0.027301033958792686,0.0430026613175869,0.02436858043074608,0.015229310840368271,-0.010555715300142765,0.024147776886820793,0.06365923583507538,-0.010682463645935059,0.007907350547611713,0.026011865586042404,-0.008752971887588501,0.07547277212142944,-0.03379565477371216,0.05841528996825218,0.0265040323138237,0.005607358645647764,-0.007675489876419306,-0.030632425099611282,-0.005908310879021883,-0.014073123224079609,-0.04405549541115761,-0.004701174795627594,-0.025002645328640938,0.00038829221739433706,0.020662600174546242,-0.04476405307650566,0.026892388239502907,-0.0038362694904208183,0.001030816463753581,-0.023181715980172157,0.04589204862713814,-0.027845026925206184,-0.02109086513519287,0.04358489811420441,-0.0564865916967392,-0.042370520532131195,0.020953921601176262,0.019063400104641914,-0.0465514175593853,-0.006696927361190319,-0.03214021399617195,-0.02609355002641678,-0.025098254904150963,-0.00741097005084157,-0.00449597230181098,-0.00897905882447958,0.01712769828736782,-0.005378636997193098,0.0404718816280365,-0.02920566312968731,-0.009475788101553917,-0.0009168941178359091,-0.00956515222787857,-0.008689896203577518,-0.039399709552526474,0.007560565136373043,-0.04240701347589493,-0.003374760039150715,0.016376767307519913,0.014562076888978481,0.045254066586494446,0.013409176841378212,0.04213310405611992,-0.023954836651682854,0.014598311856389046,0.011673586443066597,-0.01094090286642313,0.015203362330794334,0.004749609157443047,-0.01118608471006155,0.033536843955516815,0.024395005777478218,-0.010014373809099197,-0.027434222400188446,0.01548784226179123,0.00787078496068716,-0.015765836462378502,0.022643020376563072,-0.0034076746087521315,0.010554684326052666,-0.014239662326872349,-0.048957616090774536,0.002288290299475193,-0.011565315537154675,-0.0016885324148461223,-0.003990550525486469,-0.04237501323223114,-0.006154654547572136,-0.05815583094954491,-0.00017731603293213993,0.028343738988041878,-0.08119802176952362,0.0075817652978003025,0.007187115028500557,-0.037110861390829086,-0.05511465668678284,-0.03839462995529175,-0.02735225111246109,-0.05026918277144432,0.026875488460063934,-0.015424423851072788,-0.028961045667529106,-0.02080661617219448,0.04015642777085304,0.0426197275519371,0.04770071804523468,0.011705677025020123,0.0012246365658938885,-0.008137175813317299,-0.04234765097498894,0.04114013537764549,-0.0001839604665292427,-0.06934661418199539,0.025518659502267838,0.0472884364426136,-0.02233549952507019,-0.03275180608034134,0.012320254929363728,0.024261832237243652,0.012024850584566593,-0.042869675904512405,-0.004111339338123798,0.037758637219667435,0.016351688653230667,-0.01017126627266407,-0.04248564690351486,0.00021971407113596797,0.027733374387025833,-0.1159365251660347,-0.017856823280453682,-0.024327220395207405,-0.015426890924572945,-0.06184881553053856,-0.03887661546468735,-0.002174014924094081,0.056317560374736786,0.02897646091878414,-0.02460503950715065,0.006299302447587252,-0.006973490584641695,-0.009537158533930779,0.006638926919549704,-0.03771750628948212,0.033471040427684784,0.02466830611228943,-0.0187781173735857,0.04570643976330757,-0.007787758018821478,0.0093176094815135,0.007840202189981937,-0.006308484356850386,-0.02210760861635208,-0.018221415579319,0.038176603615283966,-0.03499529883265495,0.027282586321234703,-0.006416108924895525,-0.03716723248362541,0.023869112133979797,-0.02731855772435665,-0.007513095624744892,-0.022783812135457993,-0.0035624317824840546,-0.004982355982065201,0.021492550149559975,-0.019908064976334572,0.07760411500930786,0.006176401861011982,0.010566489771008492,-0.0626281350851059,0.007014174945652485,-0.0017758882604539394,-0.03426229581236839,-0.010995523072779179,0.024610789492726326,0.002509334124624729,-0.050284262746572495,0.017316823825240135,-0.027367668226361275,0.022328654304146767,-0.011759553104639053,-0.014006221666932106,0.031170906499028206,-0.03674345463514328,-6.060416143981818e-33,-0.06121157854795456,-0.05359234660863876,-0.02313905954360962,-0.005170888267457485,0.023311154916882515,-0.026737479493021965,0.011609007604420185,-0.02984476648271084,-0.003919909242540598,0.0200653113424778,0.003521626815199852,-0.04445769265294075,0.011691272258758545,0.013530252501368523,0.02566412091255188,0.033993422985076904,0.057186633348464966,0.007881758734583855,-0.021542273461818695,0.05002179741859436,-0.03996139019727707,0.0029108545277267694,-0.004453849978744984,0.006157143972814083,-0.014850870706140995,-0.003130972618237138,-0.016887882724404335,0.04654839634895325,0.0077469260431826115,0.03043113835155964,0.0016205678693950176,-0.060958508402109146,-0.033194150775671005,-0.03913380205631256,-0.019181977957487106,-0.0025915971491485834,-0.043941929936409,-0.02130228281021118,-0.005661911331117153,0.01872381754219532,0.04274583235383034,0.024854246526956558,0.007197204977273941,-0.0041504609398543835,0.04692806676030159,0.0050374530255794525,-0.01466861180961132,0.016633586958050728,-0.00641418294981122,-0.050777461379766464,0.006331185810267925,0.0354577973484993,-0.0025875859428197145,0.062247417867183685,-0.00830557569861412,0.015551791526377201,0.054474107921123505,-0.04103980213403702,-0.08141641318798065,0.028499294072389603,-0.010430942289531231,-0.040633950382471085,0.04483678191900253,0.03319116309285164,0.035765983164310455,-0.013745189644396305,-0.008200627751648426,0.012268926948308945,0.012562013231217861,0.05587752163410187,-0.009837240912020206,0.012814478017389774,0.020369360223412514,-0.10095716267824173,-0.013727418147027493,0.07761336117982864,0.04854805767536163,-0.001266896491870284,-0.017813432961702347,0.13159191608428955,-0.012761482037603855,0.02499786950647831,0.03546764329075813,0.024687903001904488,-0.004516278393566608,-0.06357445567846298,0.006581716239452362,0.021823139861226082,0.030481869354844093,0.023549163714051247,-0.01442879531532526,0.027773860841989517,-0.027331406250596046,0.05229637771844864,-0.03943387791514397,0.0179048590362072,0.05937579274177551,0.044694289565086365,-0.01284912507981062,-0.03896595537662506,0.06782342493534088,-0.009185883216559887,0.014796458184719086,-0.033651627600193024,0.0001622504642000422,0.018131228163838387,-0.02106899581849575,-0.002397082978859544,-0.06918901205062866,0.016175244003534317,0.016195962205529213,0.004812306724488735,-0.021712886169552803,-0.018300503492355347,-0.008367041125893593,-0.025114214047789574,-0.034161295741796494,-0.027842611074447632,0.015699423849582672,0.06257031857967377,0.011704301461577415,0.077235646545887,-0.01360348891466856,0.005025810562074184,0.061245862394571304,-0.032718475908041,-0.0379958339035511,-0.018172429874539375,0.0319582000374794,-0.0031146996188908815,-0.005676436237990856,0.04037540778517723,2.5635063138906844e-7,0.01316340547055006,0.003499699058011174,-0.03642336651682854,0.04644501581788063,0.03664456307888031,-0.044605616480112076,-0.013280853629112244,-0.06664036959409714,0.015103744342923164,-0.04255441948771477,0.02823268063366413,-0.011495236307382584,-0.0025041375774890184,0.04937133565545082,0.01134865265339613,-0.09896662831306458,0.05344907194375992,-0.04811261221766472,-0.06444725394248962,0.013215523213148117,0.0727069228887558,0.027609623968601227,0.08440511673688889,0.03152410686016083,-0.010992838069796562,0.015652881935238838,-0.00880593154579401,0.016311854124069214,0.03919157758355141,-0.0246917512267828,0.011817173101007938,-0.04159833863377571,-0.025326428934931755,0.043706391006708145,-0.01285385899245739,0.03773970901966095,-0.055591974407434464,-0.04102296009659767,0.02019210159778595,0.043195221573114395,0.010031658224761486,-0.031590405851602554,-0.020722899585962296,-0.08490987122058868,-0.01746263913810253,-0.08420991897583008,0.027542490512132645,0.006706622429192066,-0.02523188479244709,-0.012737829238176346,0.04680192470550537,0.01248200610280037,-0.008905582129955292,-0.0004716620023828,0.028869830071926117,-0.023781143128871918,-0.006007062736898661,0.0014155247481539845,0.016553301364183426,0.045214295387268066,-0.006843871437013149,-0.031910158693790436,0.005920717027038336,0.0012422793079167604,0.04804948344826698,0.006965004373341799,-0.00148093537427485,3.115929023061457e-34,0.02626926824450493,0.0038048524875193834,0.05565960332751274,0.006626415997743607,0.034853991121053696,-0.020480940118432045,0.028180211782455444,-0.013330984860658646,0.03371404856443405,-0.06851234287023544,-0.0031619484070688486]'
SET
  @TechnicalDesignVector_d9178437 = N'[-0.03587164357304573,-0.03266768157482147,-0.034077417105436325,-0.006010469980537891,0.005749057978391647,-0.001039128634147346,0.03533067926764488,0.08017700910568237,-0.07435105741024017,0.0002856557839550078,-0.01400777231901884,0.0029743178747594357,0.05589737743139267,0.16214674711227417,0.01029418595135212,-0.1183621734380722,-0.02732282318174839,0.005563556216657162,-0.014354130253195763,0.0071782274171710014,-0.008112897165119648,-0.010581335052847862,-0.025197740644216537,-0.007167803589254618,-0.014660626649856567,-0.019970685243606567,-0.046190544962882996,-0.004542807582765818,0.012353839352726936,-0.02626383677124977,-0.016831662505865097,0.016641434282064438,-0.052922461181879044,0.01536797359585762,0.0000018935323851110297,-0.029812341555953026,-0.03486555442214012,0.0034042946062982082,0.07394978404045105,0.04659127816557884,0.05998650938272476,0.038543425500392914,0.008824308402836323,0.008330078795552254,-0.000137711685965769,-0.08851267397403717,-0.05355840548872948,0.044957779347896576,0.029985910281538963,-0.03217615932226181,0.009677257388830185,-0.02603301592171192,-0.037915993481874466,0.015384085476398468,-0.024623526260256767,0.024903619661927223,-0.008424786850810051,-0.020775236189365387,0.024184998124837875,-0.01525065302848816,0.0376180075109005,0.012550625950098038,-0.0028288578614592552,-0.0506913959980011,0.028662322089076042,-0.0016056186286732554,0.07616861909627914,-0.04792747646570206,0.025171736255288124,-0.0036394407507032156,0.014001967385411263,0.018631286919116974,-0.0117958914488554,-0.01693982072174549,0.013545315712690353,0.005275776144117117,-0.03702034056186676,0.029171498492360115,0.017681580036878586,-0.034428466111421585,-0.09641116857528687,0.003980427049100399,-0.013933755457401276,-0.0346628837287426,0.03430411219596863,-0.006976548116654158,0.014674020931124687,-0.0009871816728264093,-0.08425519615411758,-0.004960902966558933,-0.009695795364677906,-0.041854944080114365,0.024164510890841484,0.028986407443881035,-0.023197785019874573,0.007430129684507847,0.012644645757973194,-0.0170359555631876,0.03074505738914013,-0.009735017083585262,0.03502434119582176,0.05041670426726341,0.02715594507753849,0.03196091577410698,0.04823886230587959,0.029168635606765747,-0.03696005418896675,-0.05557714030146599,-0.0050730942748487,0.05302321910858154,-0.01050749234855175,-0.02036508545279503,-0.027125880122184753,0.05034167692065239,-0.07862929254770279,0.030785225331783295,-0.024152714759111404,-0.0191172044724226,-0.0039781853556632996,0.05241899937391281,0.1610298603773117,0.009651514701545238,0.03273323178291321,0.051232270896434784,-0.020121440291404724,0.06021349877119064,-0.08219970017671585,-0.03333451226353645,0.029582997784018517,0.01180900540202856,-0.0029359273612499237,-0.017711132764816284,0.010047895833849907,-0.016901956871151924,-0.031122034415602684,-0.041327353566884995,0.006136083509773016,0.03313977271318436,-0.033673543483018875,-0.004304936155676842,0.002312043448910117,0.008399959653615952,-0.030819136649370193,0.005330381914973259,-0.012627637945115566,-0.007439181208610535,0.017859002575278282,0.0843517929315567,-0.0004651225171983242,0.02095414511859417,0.02169136516749859,0.010631531476974487,-0.009079087525606155,0.005838465876877308,-0.031104454770684242,0.024865102022886276,-0.005739583633840084,-0.00407334603369236,0.02701244130730629,-0.006411895155906677,0.013820779509842396,-0.036502573639154434,0.027184685692191124,-0.015917807817459106,-0.046394623816013336,0.0053188977763056755,-0.06877972185611725,-0.0003592597786337137,0.009996694512665272,-0.012834208086133003,-0.019796887412667274,-0.06692872196435928,-0.04632161557674408,0.019160332158207893,0.01897585764527321,-0.03310093283653259,0.055463094264268875,0.012537690810859203,0.01729680597782135,-0.014134525321424007,0.06304165720939636,-0.0789155513048172,0.02677394077181816,0.029537368565797806,0.08435387909412384,-0.002988530555739999,-0.0629151463508606,0.03505447506904602,-0.024370655417442322,-0.015967220067977905,0.004038546234369278,-0.00878605991601944,-0.0395943708717823,0.01244424283504486,-0.002689239801838994,0.004684755112975836,-0.029664035886526108,-0.052875909954309464,0.04649447277188301,-0.05818679928779602,0.03624431788921356,-0.033031415194272995,0.053798701614141464,0.10329075157642365,0.037333954125642776,0.0012038942659273744,0.06288692355155945,-0.04818360134959221,-0.03431592509150505,0.02097470685839653,0.039970558136701584,-0.0030005669686943293,-0.014385422691702843,0.012447492219507694,-0.022907204926013947,-0.01640230603516102,0.024966148659586906,0.045396264642477036,-0.03826773911714554,-0.010934432968497276,-0.03945662081241608,-0.03286052867770195,0.04708564281463623,0.000052599876653403044,0.1324804127216339,-0.01632070355117321,0.005844272207468748,-0.001803052262403071,0.003160940483212471,0.017182694748044014,0.007307418156415224,-0.013324251398444176,0.018469372764229774,0.049970485270023346,0.03476528078317642,0.01874512992799282,0.06244145333766937,0.043227605521678925,0.027840718626976013,0.03556060791015625,0.003936148714274168,-0.0006290041492320597,-0.019298356026411057,0.0049664038233459,0.05572957545518875,0.014246024191379547,-0.009884116239845753,0.02621942199766636,-0.009589342400431633,-0.038314301520586014,-0.010819396004080772,0.06349492818117142,0.048506785184144974,-0.011119297705590725,0.030590159818530083,-0.019290873780846596,0.054688114672899246,-0.0016168683068826795,-0.05095984414219856,0.06150060147047043,-0.004399340134114027,-0.022197475656867027,-0.0298901554197073,-0.013939175754785538,0.03557415306568146,0.005315289366990328,0.046700019389390945,0.03140369802713394,-0.037800319492816925,0.03319719433784485,-0.02410363033413887,0.03728149086236954,-0.02749432809650898,-0.009473979473114014,0.0069111669436097145,0.022983361035585403,-0.03504924103617668,0.0009013121598400176,-0.03371066972613335,0.012875167652964592,0.010161892510950565,-0.04440624639391899,-0.02042565681040287,0.007477404084056616,-0.003880574833601713,0.032403841614723206,0.015271254815161228,-0.03712095692753792,0.020216012373566628,-0.0980839878320694,-0.011059245094656944,0.004451902583241463,0.042783450335264206,-0.04830135777592659,-0.035773660987615585,0.01541353203356266,-0.08768964558839798,0.01922978274524212,-0.02851642109453678,0.031245728954672813,-0.005343038123100996,-0.03112718276679516,-0.020340410992503166,0.029241887852549553,-0.03936504200100899,0.007266705390065908,-0.008784299716353416,0.004850619472563267,0.015407675877213478,0.09734788537025452,0.026080047711730003,0.020898494869470596,-0.020549960434436798,-0.014596816152334213,0.02633662335574627,0.045214489102363586,0.020352095365524292,0.0388837605714798,0.029237564653158188,0.0244443416595459,0.02613380178809166,0.013461083173751831,-0.025977259501814842,-0.04531848430633545,-0.03983495011925697,0.04315914213657379,0.02369817905128002,-0.01579909585416317,-0.04538608714938164,-0.02597811259329319,0.0038577141240239143,-0.03628440946340561,0.03290194272994995,0.028498902916908264,-0.02307220548391342,0.0525195375084877,-0.041111692786216736,-0.13159246742725372,0.035636987537145615,-0.04552510380744934,-0.03170005977153778,-0.0185560192912817,0.0013398871524259448,0.039849430322647095,0.03245141729712486,0.0007122282404452562,0.015958162024617195,0.008505728095769882,-0.11561764031648636,0.036859940737485886,0.04178333654999733,0.027157066389918327,-0.006513278465718031,-0.016739079728722572,-0.014855075627565384,0.05615239962935448,-0.053913410753011703,-0.002190351253375411,-0.03303290158510208,-0.016945157200098038,0.02962961606681347,0.015110227279365063,0.04995543509721756,-0.003541960846632719,0.0008616558625362813,0.038732707500457764,0.030781786888837814,0.01407567784190178,-0.01256795134395361,0.014688851311802864,-0.05223855376243591,0.014384286478161812,0.026268785819411278,0.02769656665623188,0.013944840990006924,0.002798408502712846,0.001311298692598939,0.012168752029538155,0.00698557635769248,0.011074712499976158,0.058303505182266235,-0.007917661219835281,0.07276804000139236,-0.0210051778703928,0.0803045779466629,-0.0063254148699343204,-0.013223030604422092,0.02303323894739151,-0.01562114804983139,0.04575721174478531,-0.011875862255692482,-0.016177840530872345,-0.015760822221636772,-0.03770691156387329,-0.01172801572829485,0.04489879310131073,-0.00421838229522109,0.02069326676428318,0.015676574781537056,0.01223739143460989,0.006261084228754044,0.0017440889496356249,0.004038543440401554,-0.06294900923967361,0.049511317163705826,-0.02969183586537838,-0.026236657053232193,0.04864724352955818,0.023955456912517548,-0.08058799058198929,-0.06408316642045975,-0.02772372215986252,-0.023788999766111374,-0.05324936658143997,-0.0752776488661766,0.030289439484477043,-0.014682313427329063,0.017697252333164215,-0.011132405139505863,0.05227832496166229,-0.013059820979833603,0.02217351831495762,-0.01767774671316147,0.015530495904386044,0.02480216510593891,-0.00976964645087719,0.0050181313417851925,-0.04093453660607338,0.011070646345615387,0.02443286031484604,0.020645638927817345,-0.0018219987396150827,-0.014025988057255745,0.005922805517911911,-0.11083177477121353,-0.018671119585633278,-0.032335035502910614,0.05162612721323967,0.014295713976025581,-0.0227705966681242,0.007190808188170195,-0.01660686545073986,0.044351670891046524,-0.02833499200642109,-0.0354282446205616,-0.07639189064502716,0.02020561508834362,0.007488610688596964,0.0063066924922168255,-0.04021764174103737,-0.028666093945503235,-0.010812132619321346,-0.05007978528738022,-0.011298919096589088,-0.0494442954659462,-0.0307359229773283,0.023336322978138924,0.06297941505908966,0.015729468315839767,-0.001619719318114221,0.06758097559213638,0.03440224379301071,-0.04366563260555267,0.00520670460537076,0.04398301988840103,-0.003667116165161133,-0.018574921414256096,-0.028854383155703545,-0.01965094730257988,-0.05093376338481903,0.0008808110724203289,-0.00492852833122015,-0.02169657312333584,-0.01963075064122677,0.028983209282159805,0.024345817044377327,0.04303830489516258,-0.0029181824065744877,-0.0010870834812521935,-0.008977042511105537,-0.04226401075720787,0.05846770852804184,-0.042716797441244125,-0.0919756218791008,0.04480920359492302,0.027453429996967316,-0.07499200105667114,-0.03414877876639366,0.016484374180436134,-0.030445491895079613,0.010514907538890839,0.002139072399586439,0.028149249032139778,0.06588055938482285,0.01572597585618496,-0.021648570895195007,0.014322995208203793,-0.01745198294520378,-0.012377169914543629,-0.09347754716873169,-0.051706213504076004,-0.009784294292330742,0.008168692700564861,-0.03943689912557602,-0.02409813553094864,-0.04225534945726395,0.02874903753399849,-0.013401019386947155,0.0070503512397408485,-0.019084246829152107,0.034357182681560516,-0.018886085599660873,0.0043530939146876335,0.01573146879673004,0.008643613196909428,0.021619543433189392,-0.012298040091991425,0.024908052757382393,-0.04006710276007652,-0.01626517064869404,0.014903138391673565,0.02041911892592907,-0.03882341459393501,0.026018362492322922,0.051081333309412,-0.00605001300573349,0.005086018703877926,-0.01196246687322855,-0.02766798622906208,0.02414771355688572,-0.0010712576331570745,-0.022982077673077583,0.009854638017714024,-0.022113313898444176,-0.015128414146602154,0.013539685867726803,-0.03533128648996353,0.03847598657011986,-0.054039888083934784,-0.03598896414041519,-0.044836122542619705,-0.010144516825675964,0.0038363237399607897,0.013370917178690434,-0.0060428837314248085,0.015937307849526405,-0.0008042792323976755,-0.03872298076748848,0.013108421117067337,0.040826618671417236,0.019134875386953354,-0.0004872666613664478,-0.07425886392593384,0.025462519377470016,0.007476638071238995,-6.57243723862902e-33,-0.074602410197258,0.002212394028902054,0.024199731647968292,0.0013669070322066545,0.03456808626651764,-0.01898513361811638,0.0183914452791214,-0.04158846661448479,-0.0026987576857209206,0.0011736218584701419,-0.02211643196642399,-0.048374105244874954,0.021217986941337585,0.01778724230825901,-0.013027909211814404,-0.012759547680616379,0.06906106323003769,0.014177612960338593,-0.023058557882905006,-0.0036808433942496777,-0.02108580805361271,0.02155543863773346,-0.02699008770287037,-0.02373005636036396,-0.04141399264335632,-0.02644895575940609,-0.037391599267721176,0.04846929758787155,0.006876388099044561,0.012710576876997948,-0.010218098759651184,-0.0036231051199138165,-0.06897015869617462,-0.017228463664650917,0.02459108643233776,0.054341770708560944,-0.0689835399389267,-0.004946835804730654,0.02469872497022152,0.05345647409558296,0.06697347015142441,-0.0002691097615752369,-0.0003913803375326097,0.0057920487597584724,0.00667874189093709,-0.005394991021603346,0.004402217920869589,-0.0131012462079525,0.009485271759331226,-0.04941430315375328,0.025222424417734146,0.03336947783827782,-0.01692887209355831,0.05591091141104698,0.00412328727543354,0.031376902014017105,0.014795568771660328,0.004598317667841911,-0.032151415944099426,0.007050797808915377,-0.036856137216091156,-0.014997781254351139,0.012504936195909977,0.03583202511072159,0.013392648659646511,-0.003765162779018283,-0.009694620966911316,0.045647572726011276,-0.03817444667220116,0.03240882605314255,-0.00716365734115243,-0.003768815193325281,0.055157385766506195,-0.012060295790433884,-0.02812786214053631,0.01506897248327732,0.013319297693669796,0.021154196932911873,0.00948596466332674,0.08731333911418915,-0.02211363986134529,0.017376070842146873,0.03770840913057327,0.01742834597826004,-0.013494598679244518,-0.05732180178165436,-0.01673109643161297,0.006193767301738262,0.02130975015461445,0.02470220997929573,0.006878220476210117,0.01098504476249218,-0.04778685048222542,0.044089917093515396,-0.04576287418603897,-0.04579708352684975,0.07810851186513901,0.07032996416091919,-0.006218086462467909,-0.01674983650445938,0.11597320437431335,-0.030816281214356422,-0.021512191742658615,-0.04232390597462654,-0.017368687316775322,-0.008269933983683586,0.0013316944241523743,0.0051908111199736595,-0.05548212304711342,0.01550360769033432,0.04176865518093109,0.0366678312420845,-0.0010782676981762052,-0.014742132276296616,-0.013604325242340565,0.02593041956424713,-0.015114151872694492,-0.061856988817453384,0.0033257133327424526,0.0483475960791111,0.05571175739169121,0.0124820526689291,-0.04727346822619438,0.04248703271150589,0.012552976608276367,-0.05649147555232048,-0.07576502114534378,0.07213763892650604,0.030107907950878143,0.007617387920618057,-0.023659272119402885,0.014384932816028595,2.7528767532203346e-7,0.012333905324339867,0.03385232761502266,-0.06252250075340271,-0.027502551674842834,0.004469201900064945,-0.03251468390226364,-0.05576864629983902,-0.04848170280456543,0.0025851584505289793,0.015857715159654617,0.016420263797044754,-0.020923970267176628,0.02518080361187458,0.028487011790275574,0.018788350746035576,-0.07591027766466141,-0.015510080382227898,-0.05950356274843216,-0.03113674558699131,0.07952044904232025,0.0030979334842413664,0.01223678793758154,0.09117837250232697,0.01961192861199379,0.008198253810405731,-0.03871531784534454,0.02249475196003914,-0.005230598151683807,0.02855539880692959,-0.05430527776479721,-0.04172282665967941,-0.00330500234849751,-0.02777034416794777,0.002062329789623618,-0.010055427439510822,0.018178284168243408,-0.02064676024019718,0.009675058536231518,0.04477332532405853,0.11514317989349365,0.035368360579013824,-0.002438825787976384,0.004694471135735512,-0.08889580518007278,-0.013282129541039467,0.016039062291383743,0.012384655885398388,0.035988107323646545,-0.061451155692338943,-0.012568943202495575,-0.004091673064976931,-0.0014868316939100623,-0.01661800779402256,-0.03758327290415764,0.01055697537958622,-0.003445063717663288,-0.007010942324995995,0.042101114988327026,0.004928771872073412,0.011094501242041588,-0.029201271012425423,-0.014198978431522846,-0.011124520562589169,0.009645151905715466,0.04179847240447998,-0.028605833649635315,0.00237141246907413,3.0929157364904855e-34,0.025580190122127533,-0.0035889912396669388,0.004846902564167976,-0.03435538709163666,0.02375146746635437,-0.01921084150671959,0.038195475935935974,-0.02982191927731037,0.037985630333423615,-0.038373034447431564,0.0007881891215220094]'
SET
  @HasCustomProps_d9178437 = 1
SET
  @HasCustomEvents_d9178437 = 0
SET
  @RequiresData_d9178437 = 1
SET
  @DependencyCount_d9178437 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_d9178437 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_d9178437 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_d9178437 = 1
SET
  @ID_d9178437 = 'BDAF0B52-4947-42C9-BB7E-500850A5D546'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_d9178437,
  @Name = @Name_d9178437,
  @Version = @Version_d9178437,
  @VersionSequence = @VersionSequence_d9178437,
  @Title = @Title_d9178437,
  @Description = @Description_d9178437,
  @Type = @Type_d9178437,
  @Status = @Status_d9178437,
  @DeveloperName = @DeveloperName_d9178437,
  @DeveloperEmail = @DeveloperEmail_d9178437,
  @DeveloperOrganization = @DeveloperOrganization_d9178437,
  @SourceRegistryID = @SourceRegistryID_d9178437,
  @ReplicatedAt = @ReplicatedAt_d9178437,
  @LastSyncedAt = @LastSyncedAt_d9178437,
  @Specification = @Specification_d9178437,
  @FunctionalRequirements = @FunctionalRequirements_d9178437,
  @TechnicalDesign = @TechnicalDesign_d9178437,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_d9178437,
  @TechnicalDesignVector = @TechnicalDesignVector_d9178437,
  @HasCustomProps = @HasCustomProps_d9178437,
  @HasCustomEvents = @HasCustomEvents_d9178437,
  @RequiresData = @RequiresData_d9178437,
  @DependencyCount = @DependencyCount_d9178437,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_d9178437,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_d9178437,
  @HasRequiredCustomProps = @HasRequiredCustomProps_d9178437,
  @ID = @ID_d9178437;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_8cb902a3 NVARCHAR(MAX),
@Name_8cb902a3 NVARCHAR(500),
@Version_8cb902a3 NVARCHAR(50),
@VersionSequence_8cb902a3 INT,
@Title_8cb902a3 NVARCHAR(1000),
@Description_8cb902a3 NVARCHAR(MAX),
@Type_8cb902a3 NVARCHAR(255),
@Status_8cb902a3 NVARCHAR(50),
@DeveloperName_8cb902a3 NVARCHAR(255),
@DeveloperEmail_8cb902a3 NVARCHAR(255),
@DeveloperOrganization_8cb902a3 NVARCHAR(255),
@SourceRegistryID_8cb902a3 UNIQUEIDENTIFIER,
@ReplicatedAt_8cb902a3 DATETIMEOFFSET,
@LastSyncedAt_8cb902a3 DATETIMEOFFSET,
@Specification_8cb902a3 NVARCHAR(MAX),
@FunctionalRequirements_8cb902a3 NVARCHAR(MAX),
@TechnicalDesign_8cb902a3 NVARCHAR(MAX),
@FunctionalRequirementsVector_8cb902a3 NVARCHAR(MAX),
@TechnicalDesignVector_8cb902a3 NVARCHAR(MAX),
@HasCustomProps_8cb902a3 BIT,
@HasCustomEvents_8cb902a3 BIT,
@RequiresData_8cb902a3 BIT,
@DependencyCount_8cb902a3 INT,
@TechnicalDesignVectorEmbeddingModelID_8cb902a3 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_8cb902a3 NVARCHAR(MAX),
@HasRequiredCustomProps_8cb902a3 BIT,
@ID_8cb902a3 UNIQUEIDENTIFIER
SET
  @Namespace_8cb902a3 = N'CRM/Finance'
SET
  @Name_8cb902a3 = N'StatusOverview'
SET
  @Version_8cb902a3 = N'1.0.0'
SET
  @VersionSequence_8cb902a3 = 1
SET
  @Title_8cb902a3 = N'Status Overview'
SET
  @Description_8cb902a3 = N'Overview cards showing invoice status summary'
SET
  @Type_8cb902a3 = N'Other'
SET
  @Status_8cb902a3 = N'Published'
SET
  @Specification_8cb902a3 = N'{"name":"StatusOverview","namespace":"CRM/Finance","type":"Other","location":"embedded","code":"// StatusOverview Sub-component\nconst StatusOverview = ({ statusData, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) => {\n  const getStatusColor = (status) => {\n    const colors = {\n      ''Paid'': ''#28a745'',\n      ''Pending'': ''#ffc107'',\n      ''Overdue'': ''#dc3545'',\n      ''Draft'': ''#6c757d'',\n      ''Sent'': ''#17a2b8'',\n      ''Partial'': ''#fd7e14''\n    };\n    return colors[status] || ''#6c757d'';\n  };\n\n  const getStatusIcon = (status) => {\n    const icons = {\n      ''Paid'': ''✓'',\n      ''Pending'': ''⏰'',\n      ''Overdue'': ''⚠'',\n      ''Draft'': ''✎'',\n      ''Sent'': ''✉'',\n      ''Partial'': ''½''\n    };\n    return icons[status] || ''•'';\n  };\n\n  const totalAmount = Object.values(statusData || {}).reduce((sum, status) => \n    sum + (status.amount || 0), 0\n  );\n\n  return (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'',\n      gap: ''15px'',\n      padding: ''20px'',\n      backgroundColor: ''#f8f9fa'',\n      borderRadius: ''8px''\n    }}>\n      {statusData && Object.entries(statusData).map(([status, data]) => (\n        <div\n          key={status}\n          style={{\n            backgroundColor: ''#fff'',\n            borderRadius: ''6px'',\n            padding: ''15px'',\n            borderLeft: `4px solid $' + '{getStatusColor(status)}`,\n            boxShadow: ''0 2px 4px rgba(0,0,0,0.05)'',\n            transition: ''transform 0.2s, box-shadow 0.2s'',\n            cursor: ''pointer''\n          }}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n            e.currentTarget.style.boxShadow = ''0 4px 8px rgba(0,0,0,0.1)'';\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateY(0)'';\n            e.currentTarget.style.boxShadow = ''0 2px 4px rgba(0,0,0,0.05)'';\n          }}\n        >\n          <div style={{ \n            display: ''flex'', \n            alignItems: ''center'', \n            marginBottom: ''10px'' \n          }}>\n            <div style={{\n              width: ''30px'',\n              height: ''30px'',\n              borderRadius: ''50%'',\n              backgroundColor: getStatusColor(status) + ''20'',\n              color: getStatusColor(status),\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: ''16px'',\n              fontWeight: ''bold'',\n              marginRight: ''10px''\n            }}>\n              {getStatusIcon(status)}\n            </div>\n            <div>\n              <div style={{ \n                fontSize: ''14px'', \n                fontWeight: ''500'',\n                color: ''#333''\n              }}>\n                {status}\n              </div>\n              <div style={{ \n                fontSize: ''11px'', \n                color: ''#999'' \n              }}>\n                {data.count} invoices\n              </div>\n            </div>\n          </div>\n          \n          <div style={{ fontSize: ''20px'', fontWeight: ''bold'', color: ''#333'' }}>\n            $' + '{(data.amount / 1000).toFixed(1)}K\n          </div>\n          \n          <div style={{ \n            marginTop: ''8px'',\n            paddingTop: ''8px'',\n            borderTop: ''1px solid #f0f0f0''\n          }}>\n            <div style={{\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              fontSize: ''11px'',\n              color: ''#666''\n            }}>\n              <span>{((data.amount / totalAmount) * 100).toFixed(1)}% of total</span>\n              <span>{data.avgDays || 0} days avg</span>\n            </div>\n            <div style={{\n              marginTop: ''5px'',\n              height: ''4px'',\n              backgroundColor: ''#e9ecef'',\n              borderRadius: ''2px'',\n              overflow: ''hidden''\n            }}>\n              <div style={{\n                width: `$' + '{(data.amount / totalAmount) * 100}%`,\n                height: ''100%'',\n                backgroundColor: getStatusColor(status),\n                transition: ''width 0.3s''\n              }} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","functionalRequirements":"## Status Overview\n\n### Purpose\nDisplay invoice status summary cards.\n\n### Features\n- Status counts\n- Total amounts\n- Color coding\n- Percentage breakdown","dataRequirements":{"mode":"views","description":"Displays invoice status summary","entities":[{"name":"Invoices","description":"Invoice records for status summary","displayFields":["ID","Status","TotalAmount"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Status aggregation data"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Props\n- statusData: Object with status counts and amounts\n\n### Display\n- Grid of status cards\n- Semantic colors","properties":[{"name":"statusData","type":"{draft: {count: number, amount: number}, sent: {count: number, amount: number}, paid: {count: number, amount: number}, overdue: {count: number, amount: number}}","required":true,"description":"Status summary data"}],"events":[],"dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_8cb902a3 = N'## Status Overview

### Purpose
Display invoice status summary cards.

### Features
- Status counts
- Total amounts
- Color coding
- Percentage breakdown'
SET
  @TechnicalDesign_8cb902a3 = N'## Implementation

### Props
- statusData: Object with status counts and amounts

### Display
- Grid of status cards
- Semantic colors'
SET
  @FunctionalRequirementsVector_8cb902a3 = N'[-0.018059344962239265,-0.01475560013204813,-0.015605604276061058,0.024187106639146805,-0.0009699999936856329,0.03816305845975876,-0.01627638377249241,0.07985778898000717,-0.05920884385704994,0.037001919001340866,0.006041961722075939,0.007579519413411617,0.04508940875530243,0.12957896292209625,-0.043515607714653015,-0.04038476571440697,-0.04768496751785278,0.003607400692999363,-0.020287320017814636,0.014131998643279076,-0.011037026531994343,0.03781195357441902,-0.012109960429370403,-0.008455564267933369,-0.04372699186205864,0.005967313889414072,0.010321276262402534,0.017674442380666733,0.024739090353250504,-0.08083770424127579,0.005079389549791813,0.03658616170287132,-0.011531511321663857,-0.06470824033021927,0.0000020576806036842754,-0.03755888715386391,0.013524370267987251,0.019359076395630836,-0.03249581530690193,0.034952014684677124,0.002667773049324751,-0.1294020712375641,0.01798357255756855,0.0232329573482275,0.060060735791921616,-0.028431426733732224,-0.042758867144584656,0.05327950045466423,0.0008464980637654662,-0.02704419195652008,0.0040735648944973946,0.006888337898999453,-0.02325408346951008,-0.03226502239704132,0.03619309514760971,-0.03001047484576702,-0.024911979213356972,0.01316142175346613,0.053167279809713364,-0.08774013817310333,-0.030078338459134102,0.05193622410297394,0.0422176793217659,-0.02959558367729187,0.008253679610788822,0.03232857212424278,0.061226554214954376,-0.013225942850112915,0.00024035581736825407,0.00044633852667175233,0.052174393087625504,0.02759910561144352,-0.008747551590204239,-0.022361742332577705,-0.010745439678430557,-0.08508838713169098,-0.014933585189282894,0.03844910487532616,0.005890296772122383,-0.02716130204498768,-0.09336954355239868,0.11507318168878555,-0.04689135402441025,0.013892542570829391,0.008117115125060081,-0.07339607924222946,-0.004367681220173836,-0.010450518690049648,-0.04390520229935646,0.01425965316593647,0.0015430358471348882,-0.015139974653720856,-0.024298686534166336,-0.024201752617955208,-0.01161765493452549,-0.032007236033678055,0.03323610499501228,-0.04849812015891075,0.05734981223940849,-0.029041167348623276,-0.04018840938806534,0.012738254852592945,-0.06818127632141113,0.05512680113315582,0.03606948256492615,0.005737410858273506,0.004087112378329039,-0.0328032560646534,-0.042800068855285645,0.01902209408581257,0.023920701816678047,-0.016609787940979004,-0.004797399044036865,0.017513751983642578,-0.008250130340456963,0.007005609106272459,-0.0018687790725380182,-0.0473649688065052,-0.0337337851524353,-0.005282259546220303,0.10914043337106705,0.0333499051630497,0.005817366298288107,0.01596350222826004,0.013649174012243748,-0.026347877457737923,-0.035818714648485184,-0.03553749993443489,0.0023151664063334465,0.008438890799880028,0.028096679598093033,-0.012653571553528309,0.0049988385289907455,-0.012160882353782654,0.01884380914270878,-0.009601453319191933,0.021508414298295975,-0.020154541358351707,0.003452333388850093,-0.005956616718322039,0.0449715331196785,-0.026998121291399002,-0.02412347123026848,0.02978421375155449,0.00775140943005681,0.006236656568944454,0.019385581836104393,0.0934581384062767,-0.01955041103065014,0.03018980287015438,0.01552970614284277,-0.003981010522693396,-0.04042593762278557,0.01523232739418745,0.023109257221221924,0.009349510073661804,0.04583863168954849,0.0009388757753185928,0.03204347938299179,-0.029922107234597206,0.03288041055202484,-0.03426647558808327,0.0031428730580955744,-0.028671573847532272,-0.03741782158613205,0.05030832439661026,-0.07664543390274048,-0.003976619336754084,-0.03929753229022026,-0.05545413866639137,-0.022868698462843895,-0.017505671828985214,-0.00006499047594843432,0.027878474444150925,0.02888326346874237,-0.011443342082202435,0.02353588491678238,-0.054230161011219025,-0.03432675823569298,-0.002338907215744257,0.007719941437244415,-0.12813401222229004,0.030168442055583,0.015182935632765293,0.002099428791552782,0.018006090074777603,-0.0349634513258934,-0.06434549391269684,-0.03509555757045746,-0.031023580580949783,-0.029765348881483078,-0.011967193335294724,-0.036075592041015625,0.024940334260463715,0.005303309299051762,0.03539018705487251,-0.013762789778411388,-0.12446524947881699,0.012539635412395,0.01079972181469202,0.018745724111795425,-0.013319257646799088,0.02667880617082119,0.11790541559457779,0.023937169462442398,-0.00134303979575634,0.03199972212314606,-0.005237223114818335,-0.024040892720222473,0.010102675296366215,-0.0446857213973999,0.017680905759334564,-0.019697310402989388,-0.0009309237939305604,0.009487912058830261,0.01937250792980194,0.02533191815018654,-0.005836830474436283,-0.041254039853811264,-0.0010424561332911253,-0.009711320511996746,-0.025048155337572098,-0.045277420431375504,-0.000042629457311704755,0.14279283583164215,0.017346862703561783,0.03810742124915123,-0.027898753061890602,0.050238799303770065,-0.0017175328684970737,-0.011464185081422329,0.010051772929728031,0.03009766712784767,0.025172827765345573,0.034782785922288895,0.01643182896077633,0.04149717465043068,0.08491776138544083,-0.0055320686660707,0.03106851316988468,-0.0016550557920709252,-0.054911162704229355,0.0032889568246901035,0.005831556394696236,-0.020166313275694847,-0.06525816768407822,0.011501163244247437,0.0013425748329609632,0.009150088764727116,0.014943955466151237,0.005890526343137026,0.025595922023057938,0.03969518840312958,-0.02063128724694252,-0.005893905647099018,0.05744737759232521,-0.10634090006351471,-0.02250778116285801,0.0055242967791855335,0.04117988422513008,0.030014125630259514,-0.03292367234826088,-0.004040418192744255,-0.043252937495708466,0.011792314238846302,-0.006782002747058868,0.059420015662908554,-0.0366520918905735,-0.022616688162088394,0.012380196712911129,-0.05415035039186478,0.02835276909172535,0.03033384680747986,-0.015825191512703896,0.008885783143341541,0.06837160885334015,-0.08097562193870544,0.04306260496377945,-0.016693713143467903,0.011488756164908409,0.011312440037727356,-0.03780754655599594,0.006906698923557997,0.02262856997549534,0.018098175525665283,-0.01830950193107128,0.027782658115029335,-0.12003376334905624,-0.03332650661468506,-0.036210574209690094,0.0181443989276886,-0.0036497479304671288,0.02971479669213295,-0.03282848373055458,-0.031562015414237976,0.02429262362420559,-0.06319082528352737,0.0016532421577721834,0.030643563717603683,0.06168467178940773,-0.03880268707871437,0.014615555293858051,-0.025198770686984062,0.007654773071408272,-0.015075811184942722,0.028726045042276382,0.05383755639195442,-0.010193842463195324,-0.011639991775155067,0.006345281843096018,0.054598357528448105,0.014555541798472404,-0.006504585966467857,-0.07645343244075775,0.010998351499438286,0.011917296797037125,0.0332249291241169,0.040604133158922195,0.00004186874139122665,0.10099242627620697,0.04101288318634033,0.006403161212801933,-0.01688516139984131,0.030185895040631294,-0.01653447560966015,-0.008968912996351719,-0.03528650104999542,-0.02450491115450859,0.025805050507187843,-0.01905258372426033,0.0012905903859063983,0.006831381935626268,-0.018627958372235298,0.05608386918902397,-0.03372527286410332,-0.004319080617278814,0.015277662314474583,0.010848024860024452,0.002483034273609519,-0.006703236605972052,0.010561698116362095,-0.013919095508754253,0.008901906199753284,-0.06489695608615875,0.0035653680097311735,0.030492320656776428,-0.020954716950654984,-0.0047978865914046764,-0.04361514002084732,0.0415789820253849,0.010923885740339756,0.050373729318380356,0.017819613218307495,-0.01646289974451065,0.015601751394569874,-0.03017779067158699,-0.05401859059929848,-0.009303971193730831,-0.01099651399999857,-0.0899132564663887,-0.004918972030282021,-0.004119696095585823,-0.025972649455070496,0.05127648264169693,0.05934477224946022,0.017385855317115784,0.006497095804661512,0.004395715426653624,0.017766019329428673,0.023965366184711456,-0.06544438004493713,-0.01969306357204914,0.009620550088584423,0.03748203441500664,0.021158527582883835,-0.04685000702738762,0.028755929321050644,0.02516484074294567,-0.0442667081952095,0.006325140129774809,-0.018837913870811462,0.02775891125202179,0.07835191488265991,0.004369357600808144,0.030463136732578278,0.001957878703251481,-0.023181654512882233,-0.00402277335524559,0.007414453662931919,0.04391263797879219,0.00026985901058651507,0.018162135034799576,-0.07035145163536072,0.007241812068969011,-0.008362006396055222,0.021111633628606796,-0.04064767435193062,0.0018783439882099628,0.02061651460826397,-0.024454064667224884,-0.0023821317590773106,-0.05362094193696976,0.02238176017999649,0.014039863832294941,0.019402295351028442,-0.07473485916852951,0.12971000373363495,0.009557289071381092,-0.06894601136445999,-0.004466236103326082,0.04393412917852402,-0.06595808267593384,-0.018886689096689224,-0.0164486113935709,0.059189602732658386,0.007609141059219837,-0.026064565405249596,-0.04951632395386696,-0.004487208090722561,0.04663829505443573,-0.003653826890513301,0.017638972029089928,-0.026423949748277664,0.012943138368427753,0.003204206470400095,-0.033956147730350494,0.03082500398159027,-0.03928300738334656,-0.04825056344270706,0.029836246743798256,-0.0062264190055429935,0.028792908415198326,-0.03882976993918419,0.05905815586447716,-0.02479640394449234,0.06517118215560913,-0.03321121633052826,-0.00031935342121869326,-0.060357604175806046,-0.02390425279736519,-0.049398839473724365,0.016143659129738808,0.006961460690945387,-0.022043222561478615,-0.016185609623789787,0.021463142707943916,-0.015535513870418072,-0.011187458410859108,-0.04719182476401329,-0.005027043633162975,0.0056907120160758495,-0.033162057399749756,-0.03705558180809021,-0.021931884810328484,0.01671893149614334,-0.021367233246564865,-0.03257175534963608,-0.0045073446817696095,0.015799248591065407,-0.027899404987692833,0.03326880931854248,0.02641018107533455,-0.06231071054935455,-0.03314691409468651,0.04996976628899574,-0.03876581788063049,-0.007414714898914099,-0.023784101009368896,-0.013338834047317505,-0.046360209584236145,0.009384211152791977,0.00786498561501503,-0.03706994280219078,-0.014866963028907776,-0.013145406730473042,0.02338438853621483,-0.020011544227600098,0.006075518671423197,0.0560748390853405,-0.010764209553599358,-0.0184048879891634,-0.0007540101651102304,-0.00013145481352694333,-0.09179317206144333,-0.00840673130005598,0.021074464544653893,-0.034324292093515396,-0.01467353105545044,-0.001792589551769197,-0.017426112666726112,0.038601599633693695,-0.021474435925483704,-0.042949922382831573,0.09607750177383423,0.027518926188349724,0.0133922528475523,0.060658048838377,-0.038380205631256104,-0.059969741851091385,-0.029094912111759186,-0.027990860864520073,-0.008554158732295036,-0.03186943009495735,-0.02118748426437378,-0.011917431838810444,0.04511939361691475,0.044179003685712814,-0.008040430024266243,-0.021970607340335846,0.0026889571454375982,0.005798073019832373,0.017964892089366913,0.014647647738456726,-0.039692480117082596,0.014060580171644688,0.04926261678338051,-0.00045635071001015604,-0.0016897785244509578,-0.010971137322485447,-0.013307360000908375,0.021673673763871193,-0.008298584260046482,0.06902432441711426,-0.013363836333155632,0.07496405392885208,-0.024339543655514717,0.0349898487329483,-0.016312722116708755,-0.03691650554537773,0.06624022871255875,-0.04876289516687393,0.03126354515552521,0.00016158154176082462,0.03697064891457558,0.008542267605662346,0.06748803704977036,0.007355584762990475,-0.013066602870821953,-0.010320296511054039,0.00313524785451591,-0.014015882275998592,-0.022091811522841454,0.08261911571025848,0.007582700811326504,0.010111723095178604,0.0008813362219370902,0.025987956672906876,-0.05073872208595276,-0.018345756456255913,-0.006350821815431118,0.02150723896920681,-0.06616336852312088,0.00231774034909904,0.011093820445239544,-0.007765510585159063,-6.521678657876545e-33,-0.07520090043544769,-0.07957794517278671,-0.031518541276454926,0.003969109151512384,0.03546164184808731,0.044735509902238846,-0.0004318520659580827,-0.05101259425282478,0.016835946589708328,0.024904821068048477,-0.018342483788728714,-0.011025314219295979,0.033172108232975006,-0.01699911430478096,0.059244439005851746,-0.02387010119855404,0.03417576104402542,0.023357346653938293,0.029450982809066772,-0.019432971253991127,-0.05120648816227913,0.005007036495953798,0.02774410881102085,-0.09447746723890305,0.01056960690766573,0.0022473379503935575,-0.035248447209596634,0.02022712491452694,-0.016990093514323235,-0.021108705550432205,0.01967351883649826,-0.057818301022052765,0.00633243378251791,0.05203169211745262,-0.004130584187805653,0.0026477992068976164,0.000956681848037988,-0.005148008931428194,0.019402306526899338,-0.008266541175544262,0.056801047176122665,0.025869978591799736,-0.01515705231577158,0.0311870276927948,-0.017470933496952057,-0.042578764259815216,0.024882014840841293,0.005605554673820734,0.03315521031618118,0.004571173340082169,-0.027568532153964043,0.046131912618875504,-0.022536277770996094,0.005784532055258751,-0.023416968062520027,0.05202220380306244,0.020872516557574272,-0.038968589156866074,-0.05721510946750641,-0.03344227373600006,-0.014561477117240429,-0.011377481743693352,0.024168288335204124,0.0012868576450273395,0.00929657369852066,-0.006386768538504839,-0.0041427006945014,0.09594091773033142,0.029563182964920998,-0.016125522553920746,-0.03745308890938759,0.018420226871967316,0.023233650252223015,-0.05594494938850403,0.0027391554322093725,-0.01068433653563261,-0.0026843601372092962,0.033327616751194,0.01625162735581398,0.0763307735323906,0.018475878983736038,0.012773724272847176,-0.04409203305840492,0.009011567570269108,0.02510000206530094,-0.061498794704675674,-0.0022828171495348215,0.0008313123253174126,0.022372590377926826,0.03546332195401192,0.07107183337211609,0.04549367353320122,-0.0415416918694973,0.021346107125282288,-0.07677359133958817,-0.0051419660449028015,0.06463059782981873,0.07660025358200073,-0.015903092920780182,-0.0535292774438858,0.017063673585653305,0.0515383780002594,-0.024926457554101944,0.027165783569216728,-0.000909774680621922,0.005537384655326605,0.03954491764307022,-0.04876452684402466,-0.029631679877638817,0.012983364053070545,0.02361214905977249,0.035767171531915665,-0.012326410040259361,0.04951692000031471,-0.015836598351597786,0.011129090562462807,0.005869000684469938,-0.013839957304298878,-0.036632586270570755,-0.07368117570877075,0.013766797259449959,0.05446188151836395,-0.009874988347291946,0.007064128760248423,0.03858570754528046,-0.03544836863875389,-0.023105856031179428,-0.007968942634761333,0.03904252126812935,0.06337659060955048,0.0039533767849206924,0.03445078060030937,2.811826789184124e-7,0.06633443385362625,-0.0021239060442894697,0.020445149391889572,0.019247667863965034,-0.0037720154505223036,0.005623828619718552,-0.00596880167722702,-0.017846159636974335,0.002522639464586973,0.005792391486465931,0.026217345148324966,-0.0026053001638501883,0.018048668280243874,0.04156104102730751,0.002673063427209854,-0.10192166268825531,0.011419234797358513,-0.05426539108157158,-0.024561144411563873,-0.005735154263675213,0.009321513585746288,-0.01433463767170906,0.024088628590106964,0.02540968358516693,0.040954556316137314,0.0066332439891994,-0.028081851080060005,-0.0767195075750351,-0.03161844611167908,-0.025905141606926918,-0.031014923006296158,-0.010085178539156914,0.011541757732629776,-0.008561620488762856,-0.005670369137078524,0.0011932533234357834,-0.044261351227760315,-0.006979852914810181,0.024290090426802635,0.026508552953600883,-0.01867067627608776,-0.003891749307513237,-0.014977909624576569,-0.02805977314710617,-0.009659930132329464,0.0525415800511837,0.007492456119507551,-0.007357240654528141,-0.03875471279025078,-0.023086026310920715,0.058175209909677505,-0.006236721761524677,-0.04689693823456764,0.0015655116876587272,0.039602700620889664,-0.016794349998235703,-0.017024777829647064,0.031556762754917145,0.05189264938235283,0.03173505514860153,-0.04789074510335922,-0.025165624916553497,0.013958119787275791,0.0630207285284996,0.04104899615049362,0.0230255089700222,-0.015352617017924786,2.65900059357241e-34,0.03578638285398483,0.002414827700704336,0.042485907673835754,0.042467888444662094,0.02063707262277603,-0.02099819853901863,-0.05678262561559677,-0.018839897587895393,-0.007206474896520376,-0.01519709825515747,-0.027815211564302444]'
SET
  @TechnicalDesignVector_8cb902a3 = N'[-0.023666847497224808,-0.013055862858891487,-0.03234992176294327,-0.04494212195277214,0.03294379264116287,-0.026389850303530693,-0.029960857704281807,0.05777927115559578,-0.06788627058267593,0.010388483293354511,0.031064962968230247,0.012334243394434452,0.04806866496801376,0.08060836046934128,-0.017079446464776993,-0.03860689327120781,-0.020476792007684708,0.04260534793138504,-0.08364929258823395,-0.0011437749490141869,0.024690935388207436,0.0012556712608784437,0.014552030712366104,-0.026609128341078758,-0.03143254294991493,-0.036369118839502335,-0.017490895465016365,-0.0072678327560424805,0.03706001862883568,-0.07613847404718399,0.010306966491043568,0.062822125852108,-0.004282252863049507,-0.02116275019943714,0.000001545828581583919,-0.01634986884891987,-0.009576593525707722,0.04093718156218529,0.024055561050772667,-0.035180363804101944,0.019143586978316307,-0.055527642369270325,0.03129080310463905,-0.0009889558423310518,0.027894167229533195,-0.08853420615196228,-0.05103260651230812,0.003594838548451662,0.02711133100092411,-0.026053108274936676,0.014833184890449047,-0.0031726318411529064,0.04616498202085495,0.023443585261702538,0.0642627477645874,0.04267128184437752,-0.006627148017287254,0.03236447647213936,0.05275868996977806,-0.03862519934773445,-0.002812992548570037,0.0076370625756680965,0.05276888981461525,-0.021799741312861443,-0.0398532934486866,0.004385179840028286,0.14741550385951996,0.026927974075078964,0.03234405070543289,0.03445190191268921,0.0922614261507988,0.012090836651623249,-0.013664244674146175,0.014741905964910984,-0.002466128673404455,-0.05757952481508255,0.0027176307048648596,-0.005426438525319099,-0.001799742691218853,0.008767234161496162,-0.006642050575464964,0.06766053289175034,-0.048230383545160294,-0.0031950322445482016,0.027856066823005676,-0.012022558599710464,0.010425889864563942,-0.005944025237113237,-0.06399282068014145,-0.019079139456152916,0.011719249188899994,-0.018848450854420662,-0.010215465910732746,-0.00019120387150906026,-0.029671685770154,0.03008178435266018,0.027016790583729744,-0.14726833999156952,0.06642919778823853,-0.03428218513727188,-0.03049260750412941,0.06637253612279892,-0.05416949465870857,0.016755208373069763,0.07955490797758102,0.052084892988204956,0.02817823924124241,-0.02200259454548359,-0.030728209763765335,-0.041953641921281815,0.000005465628419187851,0.0020865811966359615,0.018808480352163315,0.0579049326479435,-0.026690548285841942,0.027274515479803085,-0.0579121895134449,0.0036959233693778515,0.011285343207418919,0.008241974748671055,0.016246046870946884,-0.043044786900281906,-0.03605201467871666,0.01760399527847767,0.020607247948646545,0.004172461573034525,0.0006248521385714412,-0.08407731354236603,-0.0038951768074184656,0.0353577584028244,0.033953022211790085,-0.03295275568962097,0.022671524435281754,0.011427960358560085,-0.03846044838428497,-0.0028044753707945347,0.030567413195967674,-0.02180236019194126,0.011861459352076054,-0.014044154435396194,0.023486949503421783,0.01464021299034357,0.05253353714942932,0.049374260008335114,-0.0625912994146347,0.008450666442513466,0.0415743887424469,-0.01394183374941349,-0.010993851348757744,0.04274803027510643,0.04319842904806137,-0.015940159559249878,-0.07031374424695969,0.00891035608947277,-0.04990648478269577,0.032655019313097,0.0023574468214064837,0.038823846727609634,0.0421932227909565,-0.016002895310521126,0.020023368299007416,-0.00159497931599617,0.05683889985084534,0.00794503279030323,-0.029060455039143562,0.044351641088724136,-0.11033831536769867,-0.02518313191831112,-0.0008494914509356022,-0.03293225169181824,0.002384998369961977,-0.03867032751441002,-0.04986776039004326,0.006967325694859028,0.002097324701026082,-0.018455656245350838,0.028113309293985367,-0.017623096704483032,-0.05517251789569855,-0.01274941861629486,0.0009592692949809134,-0.06374146044254303,0.02087174355983734,0.03430570662021637,0.019260013476014137,-0.0028725943993777037,-0.017113737761974335,0.002694664755836129,0.001696526538580656,-0.0077436077408492565,-0.016370823606848717,0.01302754133939743,-0.02321740798652172,-0.012013722211122513,-0.026535728946328163,-0.03123019076883793,-0.014250397682189941,-0.11534055322408676,0.028231250122189522,0.03889194875955582,0.03971248120069504,-0.031120996922254562,0.06765753030776978,0.07039041817188263,0.019759396091103554,-0.021003669127821922,-0.027857495471835136,-0.019173594191670418,-0.03461117297410965,0.021129433065652847,-0.023199673742055893,0.005434023216366768,-0.02363463304936886,0.022611724212765694,0.015392337925732136,0.014975267462432384,0.0024894503876566887,0.010705159977078438,-0.03730326145887375,0.023127013817429543,-0.032407909631729126,-0.05705642327666283,-0.0398440845310688,0.007597968447953463,0.1758185178041458,0.04511716961860657,0.006655903998762369,-0.07340949028730392,0.010151633061468601,0.006583315785974264,-0.012128711678087711,-0.028267674148082733,-0.031072085723280907,0.017459779977798462,0.01872880384325981,-0.0246335007250309,-0.016165662556886673,0.041182950139045715,0.03358310088515282,0.11854885518550873,-0.04203874617815018,0.05845535919070244,-0.022179879248142242,0.009001307189464569,0.000938733050134033,-0.03443369269371033,-0.03085489757359028,0.015189298428595066,-0.05267889425158501,0.005695836618542671,0.08115216344594955,0.05943602696061134,0.01920304447412491,-0.025868790224194527,-0.026326775550842285,-0.04150918871164322,-0.009448731318116188,-0.010137137025594711,-0.027995508164167404,0.0229521282017231,0.010039997287094593,-0.008934278972446918,0.019918983802199364,-0.001269531319849193,0.03436778113245964,-0.02122393436729908,0.06418643146753311,-0.024718977510929108,0.016482150182127953,0.010359239764511585,-0.018518123775720596,0.027354281395673752,-0.01893441565334797,-0.027705859392881393,0.02278704196214676,0.03424433618783951,0.019687075167894363,0.04749418795108795,0.00196862337179482,-0.021769657731056213,-0.023034026846289635,-0.06626015901565552,0.002223419025540352,0.01978307031095028,-0.02252664789557457,-0.014197664335370064,-0.026804301887750626,-0.06620875000953674,0.01613725908100605,-0.052087876945734024,-0.0003953567938879132,0.00597668020054698,0.048023805022239685,-0.05812225118279457,-0.030847959220409393,0.009834758006036282,0.0001289154461119324,-0.0024989524390548468,0.008851935155689716,0.05800608918070793,0.009622597135603428,-0.017768893390893936,-0.006767472717911005,-0.004656224977225065,-0.023580605164170265,0.015898698940873146,0.03039168007671833,-0.0017764472868293524,0.011692335829138756,0.03185151889920235,0.00377720152027905,0.023017069324851036,-0.00723141897469759,-0.05476020649075508,0.0018831075867637992,0.04519087076187134,0.03781375288963318,0.039822690188884735,0.005070830695331097,0.03823179379105568,0.006631600204855204,-0.034728553146123886,-0.008300731889903545,-0.020220952108502388,-0.01715548150241375,-0.004333161283284426,0.011282313615083694,-0.012529509142041206,0.04969554394483566,0.014521803706884384,0.026227323338389397,-0.04225118085741997,0.04964742809534073,0.03634677827358246,-0.022807622328400612,-0.06175941601395607,-0.036005012691020966,-0.08424548804759979,-0.002072808099910617,-0.0070199244655668736,-0.018130600452423096,-0.005871687550097704,0.005842301994562149,-0.02044288069009781,-0.03710183873772621,-0.011980080977082253,-0.10251754522323608,0.0063924165442585945,-0.04779024422168732,-0.017874715849757195,0.029537172988057137,0.03742551803588867,0.010875469073653221,0.006710764020681381,0.0015763095580041409,0.02306935004889965,0.018180062994360924,0.01759706623852253,-0.016109513118863106,-0.01252587791532278,0.03960614651441574,0.03581893444061279,0.010323386639356613,0.0415814183652401,-0.031315915286540985,0.004362793173640966,-0.00030573649564757943,0.042357057332992554,-0.02402995340526104,0.005747292656451464,-0.04103897511959076,0.00784829817712307,0.03659388795495033,0.0016843206249177456,-0.024325309321284294,0.00908669549971819,0.05408473312854767,0.023419514298439026,-0.04788719117641449,-0.004138940013945103,0.05083673819899559,-0.0018498590216040611,0.04536037519574165,0.00011877575161634013,0.024054305627942085,-0.03383280709385872,0.025642167776823044,-0.005514746066182852,0.0246402807533741,-0.011894469149410725,-0.01969561167061329,-0.08461538702249527,-0.061455726623535156,0.03573279455304146,0.012826208956539631,0.07897286862134933,0.0063949283212423325,-0.005673511419445276,0.0860728919506073,0.012165113352239132,-0.020547308027744293,0.04904922842979431,0.036459825932979584,0.016109978780150414,0.04221252351999283,-0.018454141914844513,0.048336826264858246,0.019950514659285545,0.00867694802582264,-0.0034244521521031857,0.010003991425037384,0.02124287746846676,-0.03565730154514313,-0.010707123205065727,-0.05614722892642021,-0.012987900525331497,-0.023595109581947327,-0.06224605068564415,-0.007604666519910097,0.024957280606031418,-0.05611118674278259,0.005557100288569927,0.03177523985505104,0.05107148364186287,0.019090430811047554,-0.04132424667477608,0.0037000239826738834,-0.02343185991048813,-0.04233105480670929,-0.00385468197055161,0.01610679179430008,0.020182108506560326,-0.017951807007193565,0.04429697245359421,-0.02607049234211445,-0.019303549081087112,-0.04964212328195572,0.02143040858209133,0.0579226128757,-0.03435250744223595,0.010744565166532993,-0.0017911480972543359,0.037443362176418304,-0.015523388050496578,0.02746020071208477,-0.040027789771556854,-0.039712511003017426,0.06793172657489777,0.021733926609158516,-0.007720522582530975,-0.00037688060547225177,0.012259270064532757,-0.07723905891180038,0.0008485151920467615,-0.004767507780343294,-0.04853137582540512,0.023619476705789566,0.12760597467422485,-0.0022591182496398687,0.023900719359517097,0.03172948956489563,0.03223925828933716,-0.1045592799782753,-0.02391141466796398,-0.009243070147931576,-0.06225285679101944,0.043555211275815964,-0.03100656345486641,-0.007505175657570362,-0.021858643740415573,0.021698547527194023,0.0032182566355913877,-0.028449906036257744,0.02303297445178032,0.03464663401246071,0.02834044024348259,0.00155860825907439,0.0036327752750366926,0.08939740806818008,-0.03441471606492996,-0.007391670253127813,0.007580514997243881,-0.012268297374248505,-0.10891735553741455,0.0546903982758522,-0.006478606723248959,-0.03616781160235405,-0.009284831583499908,0.007415409199893475,-0.046324022114276886,-0.011683553457260132,-0.03391193598508835,-0.03414700925350189,0.10529891401529312,0.06572683155536652,0.035525985062122345,0.015373281203210354,-0.02314138226211071,0.004341566003859043,-0.03750905022025108,-0.017988543957471848,-0.03441400080919266,-0.009934838861227036,-0.043800391256809235,-0.005964828655123711,0.011125043965876102,0.00863493699580431,0.019503289833664894,-0.02966916561126709,-0.04718582332134247,0.02726101502776146,-0.014685546047985554,-0.029516078531742096,-0.024660155177116394,0.014835781417787075,0.0969528928399086,-0.005903708748519421,0.0538531132042408,0.012751352973282337,0.013412325643002987,0.036772485822439194,-0.0071606989949941635,0.01261371560394764,-0.03933253884315491,0.08884916454553604,0.014323540963232517,0.01076902262866497,0.015700649470090866,0.02219868265092373,0.005841425154358149,0.00613124156370759,0.04179110378026962,0.006769974250346422,0.028293903917074203,0.029068438336253166,0.08835979551076889,-0.019739918410778046,0.011629253625869751,0.008114640600979328,-0.03219686448574066,-0.0637613832950592,-0.029105057939887047,0.10601674020290375,0.004615053068846464,0.037251487374305725,-0.005983513314276934,0.0015324706910178065,-0.07800036668777466,-0.01029994897544384,0.012297366745769978,0.04170997813344002,-0.021644925698637962,-0.03596406430006027,-0.003425384173169732,0.04976746812462807,-5.5221392809830455e-33,-0.058513179421424866,-0.04417268559336662,-0.006842181086540222,-0.03139583766460419,-0.00940759852528572,0.01789388619363308,-0.017874756827950478,-0.0523664616048336,0.0076507218182086945,-0.02690107561647892,-0.02418266423046589,-0.04035652428865433,0.009116756729781628,0.019458673894405365,-0.05121907591819763,-0.0062570772133767605,0.00900301057845354,0.004710825625807047,0.00424213195219636,-0.004205676261335611,-0.03614972531795502,-0.005373022984713316,0.023729661479592323,-0.058598946779966354,-0.026214974001049995,0.01012125238776207,0.009910001419484615,0.006488513201475143,-0.033529382199048996,-0.009740734472870827,-0.05222848057746887,0.005682771559804678,-0.0223737433552742,-0.0056965891271829605,0.005879370961338282,0.0774449035525322,0.011775190010666847,-0.01495353039354086,0.026343384757637978,-0.008968271315097809,0.03878593444824219,0.026857854798436165,-0.04675581306219101,-0.0002462828124407679,0.048773590475320816,0.012367830611765385,-0.04039924964308739,-0.008568979799747467,-0.019038241356611252,0.01755061373114586,0.013060569763183594,0.037002433091402054,-0.012600925751030445,0.0005121510475873947,0.0017881339881569147,-0.05730947107076645,0.07245989143848419,-0.010827005840837955,-0.022929608821868896,-0.05147710070014,-0.05903167650103569,-0.04301769286394119,0.035998038947582245,0.010441123507916927,0.025219997391104698,0.03634129837155342,0.028080211952328682,0.04503370076417923,-0.032300375401973724,0.01327445451170206,-0.01149540115147829,-0.06381159275770187,0.03390830010175705,-0.007409135811030865,-0.0013425704091787338,0.015300409868359566,-0.0501055009663105,-0.028329454362392426,-0.01579514518380165,0.0057218861766159534,0.016600748524069786,0.03238919377326965,-0.018414638936519623,0.021517274901270866,-0.04288787022233009,-0.07144100964069366,0.049753520637750626,0.020120128989219666,-0.012206610292196274,-0.0020678651053458452,-0.014386283233761787,0.036731332540512085,-0.013615948148071766,0.03336535766720772,-0.061081934720277786,-0.030678855255246162,0.03402082994580269,0.05280217528343201,-0.027090540155768394,-0.018739812076091766,0.052141472697257996,-0.01836504600942135,-0.017656711861491203,-0.007108010351657867,-0.01235344260931015,0.03725987300276756,0.023841962218284607,0.006690427660942078,-0.027916831895709038,0.03871908783912659,0.045342739671468735,0.05230552703142166,-0.039706602692604065,-0.03552544489502907,0.004629254341125488,0.011486695148050785,-0.004068904556334019,-0.011590607464313507,0.032374922186136246,0.05663605406880379,-0.03205098956823349,0.024254659190773964,-0.017769113183021545,-0.0071034240536391735,0.03625908121466637,-0.020777227357029915,-0.03363942727446556,-0.025950931012630463,0.009530945681035519,0.009313946589827538,0.035107627511024475,-0.014240567572414875,2.3732572174139932e-7,-0.01489792950451374,-0.0023572274949401617,-0.023132463917136192,-0.04570380598306656,-0.0029502601828426123,-0.02478676661849022,-0.0037024198099970818,-0.03924120217561722,0.012327892705798149,-0.07672463357448578,-0.028932224959135056,0.01127605326473713,0.00445183552801609,0.0583399198949337,-0.004453805275261402,-0.06416891515254974,0.032969675958156586,-0.028056714683771133,-0.02967340312898159,0.055101361125707626,0.010279557667672634,-0.019149890169501305,0.05505309998989105,0.010367103852331638,0.006875831168144941,0.03509106859564781,0.015071731992065907,-0.013620446436107159,0.023047013208270073,-0.04204314947128296,-0.05690351501107216,-0.004327932372689247,-0.00874647218734026,-0.010524037294089794,0.028228387236595154,0.04066459462046623,-0.01986679434776306,-0.0040816073305904865,0.02164558507502079,0.06013054773211479,0.015993701294064522,-0.00212787720374763,-0.029580477625131607,0.008983831852674484,0.016847005113959312,-0.0015036608092486858,-0.052751753479242325,0.030720695853233337,-0.02081151120364666,0.038276612758636475,-0.033585213124752045,-0.017248082906007767,-0.059939317405223846,-0.007356738671660423,0.02152612991631031,-0.03476515784859657,-0.008739104494452477,0.031116167083382607,0.008743139915168285,-0.07600023597478867,-0.009379178285598755,-0.019177939742803574,-0.008335077203810215,0.034800801426172256,0.01359078474342823,-0.008849984034895897,-0.0017782363574951887,2.5991782626088734e-34,0.04062742367386818,-0.05061306431889534,0.00811270996928215,0.015560387633740902,0.030603036284446716,-0.00868249498307705,0.037236928939819336,-0.03934771567583084,0.04239239916205406,-0.020496468991041183,-0.024860596284270287]'
SET
  @HasCustomProps_8cb902a3 = 1
SET
  @HasCustomEvents_8cb902a3 = 0
SET
  @RequiresData_8cb902a3 = 1
SET
  @DependencyCount_8cb902a3 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_8cb902a3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_8cb902a3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_8cb902a3 = 1
SET
  @ID_8cb902a3 = '0E82885F-8585-47D7-BEA6-45FF0A24A87C'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_8cb902a3,
  @Name = @Name_8cb902a3,
  @Version = @Version_8cb902a3,
  @VersionSequence = @VersionSequence_8cb902a3,
  @Title = @Title_8cb902a3,
  @Description = @Description_8cb902a3,
  @Type = @Type_8cb902a3,
  @Status = @Status_8cb902a3,
  @DeveloperName = @DeveloperName_8cb902a3,
  @DeveloperEmail = @DeveloperEmail_8cb902a3,
  @DeveloperOrganization = @DeveloperOrganization_8cb902a3,
  @SourceRegistryID = @SourceRegistryID_8cb902a3,
  @ReplicatedAt = @ReplicatedAt_8cb902a3,
  @LastSyncedAt = @LastSyncedAt_8cb902a3,
  @Specification = @Specification_8cb902a3,
  @FunctionalRequirements = @FunctionalRequirements_8cb902a3,
  @TechnicalDesign = @TechnicalDesign_8cb902a3,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_8cb902a3,
  @TechnicalDesignVector = @TechnicalDesignVector_8cb902a3,
  @HasCustomProps = @HasCustomProps_8cb902a3,
  @HasCustomEvents = @HasCustomEvents_8cb902a3,
  @RequiresData = @RequiresData_8cb902a3,
  @DependencyCount = @DependencyCount_8cb902a3,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_8cb902a3,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_8cb902a3,
  @HasRequiredCustomProps = @HasRequiredCustomProps_8cb902a3,
  @ID = @ID_8cb902a3;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_f8c12c42 NVARCHAR(MAX),
@Name_f8c12c42 NVARCHAR(500),
@Version_f8c12c42 NVARCHAR(50),
@VersionSequence_f8c12c42 INT,
@Title_f8c12c42 NVARCHAR(1000),
@Description_f8c12c42 NVARCHAR(MAX),
@Type_f8c12c42 NVARCHAR(255),
@Status_f8c12c42 NVARCHAR(50),
@DeveloperName_f8c12c42 NVARCHAR(255),
@DeveloperEmail_f8c12c42 NVARCHAR(255),
@DeveloperOrganization_f8c12c42 NVARCHAR(255),
@SourceRegistryID_f8c12c42 UNIQUEIDENTIFIER,
@ReplicatedAt_f8c12c42 DATETIMEOFFSET,
@LastSyncedAt_f8c12c42 DATETIMEOFFSET,
@Specification_f8c12c42 NVARCHAR(MAX),
@FunctionalRequirements_f8c12c42 NVARCHAR(MAX),
@TechnicalDesign_f8c12c42 NVARCHAR(MAX),
@FunctionalRequirementsVector_f8c12c42 NVARCHAR(MAX),
@TechnicalDesignVector_f8c12c42 NVARCHAR(MAX),
@HasCustomProps_f8c12c42 BIT,
@HasCustomEvents_f8c12c42 BIT,
@RequiresData_f8c12c42 BIT,
@DependencyCount_f8c12c42 INT,
@TechnicalDesignVectorEmbeddingModelID_f8c12c42 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_f8c12c42 NVARCHAR(MAX),
@HasRequiredCustomProps_f8c12c42 BIT,
@ID_f8c12c42 UNIQUEIDENTIFIER
SET
  @Namespace_f8c12c42 = N'CRM/Customer'
SET
  @Name_f8c12c42 = N'CustomerHeader'
SET
  @Version_f8c12c42 = N'1.0.0'
SET
  @VersionSequence_f8c12c42 = 1
SET
  @Title_f8c12c42 = N'Customer Header'
SET
  @Description_f8c12c42 = N'Header section with customer summary information'
SET
  @Type_f8c12c42 = N'Other'
SET
  @Status_f8c12c42 = N'Published'
SET
  @Specification_f8c12c42 = N'{"name":"CustomerHeader","namespace":"CRM/Customer","type":"Other","location":"embedded","code":"// CustomerHeader Sub-component\nconst CustomerHeader = ({ customer, metrics, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) => {\n  const handleOpenCustomer = () => {\n    if (callbacks?.OpenEntityRecord && customer?.id) {\n      callbacks.OpenEntityRecord(''Accounts'', customer.id);\n    }\n  };\n\n  return (\n    <div style={{\n      backgroundColor: ''#fff'',\n      borderRadius: ''8px'',\n      padding: ''20px'',\n      boxShadow: ''0 2px 4px rgba(0,0,0,0.05)'',\n      marginBottom: ''20px''\n    }}>\n      <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''flex-start'' }}>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: ''20px'' }}>\n          {customer?.logo ? (\n            <img \n              src={customer.logo} \n              alt={customer.name}\n              style={{\n                width: ''60px'',\n                height: ''60px'',\n                borderRadius: ''8px'',\n                objectFit: ''contain'',\n                backgroundColor: ''#f8f9fa'',\n                padding: ''5px''\n              }}\n            />\n          ) : (\n            <div style={{\n              width: ''60px'',\n              height: ''60px'',\n              borderRadius: ''8px'',\n              backgroundColor: ''#007bff'',\n              color: ''#fff'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              fontSize: ''24px'',\n              fontWeight: ''bold''\n            }}>\n              {customer?.name?.charAt(0) || ''?''}\n            </div>\n          )}\n          \n          <div>\n            <h2 style={{ margin: ''0 0 5px 0'' }}>\n              {customer?.name || ''Customer''}\n              <button\n                onClick={handleOpenCustomer}\n                style={{\n                  marginLeft: ''10px'',\n                  padding: ''2px 6px'',\n                  fontSize: ''12px'',\n                  border: ''1px solid #007bff'',\n                  borderRadius: ''3px'',\n                  background: ''#fff'',\n                  color: ''#007bff'',\n                  cursor: ''pointer''\n                }}\n                title=\"Open in Explorer\"\n              >\n                ↗\n              </button>\n            </h2>\n            <div style={{ fontSize: ''14px'', color: ''#666'' }}>\n              {customer?.industry} • {customer?.type} • {customer?.status}\n            </div>\n            <div style={{ fontSize: ''13px'', color: ''#888'', marginTop: ''5px'' }}>\n              {customer?.website && (\n                <a href={customer.website} target=\"_blank\" rel=\"noopener noreferrer\" \n                   style={{ color: ''#007bff'', textDecoration: ''none'' }}>\n                  {customer.website}\n                </a>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div style={{ display: ''flex'', gap: ''30px'' }}>\n          <div style={{ textAlign: ''center'' }}>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#28a745'' }}>\n              $' + '{(metrics?.totalRevenue / 1000000).toFixed(1)}M\n            </div>\n            <div style={{ fontSize: ''12px'', color: ''#666'' }}>Total Revenue</div>\n          </div>\n          <div style={{ textAlign: ''center'' }}>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#007bff'' }}>\n              {metrics?.dealCount || 0}\n            </div>\n            <div style={{ fontSize: ''12px'', color: ''#666'' }}>Active Deals</div>\n          </div>\n          <div style={{ textAlign: ''center'' }}>\n            <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#17a2b8'' }}>\n              {metrics?.healthScore || 0}%\n            </div>\n            <div style={{ fontSize: ''12px'', color: ''#666'' }}>Health Score</div>\n          </div>\n        </div>\n      </div>\n\n      <div style={{\n        marginTop: ''15px'',\n        paddingTop: ''15px'',\n        borderTop: ''1px solid #e9ecef'',\n        display: ''flex'',\n        gap: ''20px'',\n        fontSize: ''13px''\n      }}>\n        <div><strong>Account Manager:</strong> {customer?.accountManager || ''Unassigned''}</div>\n        <div><strong>Created:</strong> {customer?.createdDate ? new Date(customer.createdDate).toLocaleDateString() : ''N/A''}</div>\n        <div><strong>Last Activity:</strong> {customer?.lastActivity ? new Date(customer.lastActivity).toLocaleDateString() : ''N/A''}</div>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Customer Header\n\n### Purpose\nDisplay customer summary information at the top.\n\n### Features\n- Customer name and logo\n- Key metrics\n- Contact info\n- Status badges","dataRequirements":{"mode":"views","description":"Displays customer header information passed via props","entities":[{"name":"Accounts","description":"Customer/account entity for header display","displayFields":["ID","AccountName","Industry","Type","Status","Website","Phone","Email"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Customer information displayed in header section"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Props\n- customer: Customer entity\n- metrics: Key metrics object","properties":[{"name":"customer","type":"{ID: string, AccountName: string, Industry?: string, Type?: string, Status?: string, Website?: string, Phone?: string, Email?: string}","required":true,"description":"Customer/account entity"},{"name":"metrics","type":"{totalRevenue?: number, openDeals?: number, lifetime?: number, healthScore?: number}","required":true,"description":"Customer metrics summary"}],"events":[],"dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_f8c12c42 = N'## Customer Header

### Purpose
Display customer summary information at the top.

### Features
- Customer name and logo
- Key metrics
- Contact info
- Status badges'
SET
  @TechnicalDesign_f8c12c42 = N'## Implementation

### Props
- customer: Customer entity
- metrics: Key metrics object'
SET
  @FunctionalRequirementsVector_f8c12c42 = N'[0.041018612682819366,-0.07802661508321762,-0.020582133904099464,-0.01876765489578247,0.013400500640273094,0.061475951224565506,-0.02308877371251583,0.004848268814384937,-0.03853968158364296,0.03467432036995888,0.002861395012587309,-0.057573799043893814,0.052393022924661636,0.08174680918455124,-0.01287115179002285,-0.048524126410484314,-0.06402637809515,0.014805569313466549,0.01442551240324974,0.010523836128413677,0.01178247295320034,-0.005350856110453606,0.04030393064022064,-0.030278319492936134,-0.044015612453222275,0.03538926690816879,-0.005987025331705809,0.039209261536598206,0.023764321580529213,-0.0508093535900116,0.0403435118496418,0.00008013557817321271,-0.022096846252679825,-0.061274632811546326,0.0000017118715049946331,0.005831063259392977,0.0026916316710412502,0.043570276349782944,-0.1099281907081604,-0.014182536862790585,-0.019198104739189148,-0.04999113827943802,0.004816705826669931,-0.005077101290225983,0.025305522605776787,0.0654023066163063,-0.03952047973871231,0.09406942874193192,0.04301454871892929,0.009170993231236935,0.01548677310347557,-0.10501500219106674,-0.041595976799726486,-0.0007875973824411631,0.0621911883354187,0.025281840935349464,-0.02285626158118248,0.05746868997812271,-0.025010038167238235,0.013516197912395,0.006462121848016977,-0.013940212316811085,0.029451657086610794,-0.004314499441534281,0.032674651592969894,0.022143280133605003,0.0010629086755216122,-0.02697632648050785,0.0240511205047369,0.02833986096084118,0.09616614878177643,0.012370296753942966,0.0031781981233507395,-0.06347569078207016,-0.0038483350072056055,-0.126983642578125,0.007904714904725552,-0.0033401362597942352,0.005157026927918196,-0.0041473559103906155,-0.07297506928443909,0.0025320998392999172,-0.015621536411345005,-0.035185933113098145,-0.045745570212602615,-0.01960105635225773,-0.04187691584229469,-0.015312612056732178,-0.008722592145204544,0.02411551959812641,0.07579363882541656,0.036923713982105255,-0.04864627122879028,-0.007369086612015963,-0.02349715307354927,-0.01360225211828947,0.04901036620140076,-0.08520731329917908,0.04076877608895302,-0.03695468604564667,-0.007048844359815121,0.007506850175559521,-0.010241793468594551,0.033411506563425064,-0.038458194583654404,0.057720594108104706,0.04008854553103447,-0.046002596616744995,-0.026002245023846626,-0.004139757715165615,0.04072555527091026,-0.0020264803897589445,0.011464398354291916,0.04344692453742027,-0.019619576632976532,0.038543786853551865,-0.04485026001930237,0.022682690992951393,-0.012388774193823338,0.055282123386859894,0.10391643643379211,0.007656185422092676,-0.010655106976628304,0.016064129769802094,0.017717450857162476,-0.0837683156132698,-0.036487217992544174,-0.09507996588945389,-0.011610093526542187,-0.008795829489827156,-0.0039121308363974094,0.0036343643441796303,0.018290380015969276,0.007575098425149918,-0.0031258391682058573,-0.04441671445965767,0.02147863246500492,-0.03535816818475723,-0.005565534345805645,0.012891418300569057,0.023782741278409958,-0.03530949354171753,0.006243267562240362,0.04198602959513664,0.027636494487524033,0.007346722763031721,-0.02268718183040619,0.09619428217411041,0.01396467350423336,0.017396077513694763,-0.026100073009729385,-0.005897889379411936,-0.004694728180766106,0.01639760471880436,0.024230454117059708,-0.028433164581656456,0.004331730771809816,-0.0025920546613633633,-0.03814012557268143,0.05047526955604553,0.014685191214084625,0.023842450231313705,-0.030347034335136414,-0.040917329490184784,-0.04005204886198044,0.013471901416778564,-0.007597323507070541,0.011889301240444183,-0.04011542722582817,-0.032191913574934006,-0.027060484513640404,-0.0068830386735498905,0.019969213753938675,0.002763005904853344,-0.01460705790668726,-0.0006351415649987757,0.0005549745983444154,-0.03578215092420578,-0.0076977405697107315,0.03934308513998985,0.0074798837304115295,-0.0812225341796875,-0.010365433990955353,0.0004780842282343656,0.007847878150641918,0.003959746100008488,-0.08929888159036636,0.01938515715301037,-0.03706267103552818,0.015298656187951565,-0.0021286567207425833,-0.014714362099766731,-0.07503585517406464,0.025558853521943092,-0.0036328088026493788,0.016536496579647064,-0.028181685134768486,-0.10123079270124435,-0.002499846275895834,-0.008674075827002525,-0.017103789374232292,-0.004316279198974371,0.03651804476976395,0.07191140949726105,0.005770205054432154,0.03334931284189224,-0.007490350864827633,-0.024615392088890076,-0.03337081894278526,0.004319303669035435,0.07085128873586655,0.010726215317845345,-0.061195164918899536,0.019407937303185463,-0.052982766181230545,0.05649801716208458,0.018360329791903496,0.010042108595371246,-0.018944699317216873,-0.017285378649830818,0.023135608062148094,0.04247194528579712,-0.048768460750579834,0.0016585243865847588,0.09825140237808228,0.0726931020617485,0.0328972190618515,0.003665899857878685,0.05336781591176987,0.019425207749009132,-0.01262881699949503,-0.016374146565794945,0.04131825640797615,-0.007332494482398033,0.03950139880180359,0.007696227636188269,0.05629093199968338,0.05566490814089775,-0.022055838257074356,0.02414829470217228,-0.04237004369497299,-0.0018676347099244595,-0.03510409966111183,0.028125064447522163,0.00650237500667572,-0.062287602573633194,0.005129402503371239,-0.0063978685066103935,0.033657800406217575,0.041748084127902985,0.023754648864269257,-0.012911546975374222,0.05405457690358162,-0.020600195974111557,-0.030873211100697517,0.014039130881428719,-0.08695600926876068,-0.030757101252675056,-0.01924831233918667,0.025403108447790146,0.032935839146375656,-0.025587383657693863,0.004309062380343676,0.002048817928880453,-0.015650341287255287,-0.02974606119096279,0.07942064106464386,-0.07905230671167374,-0.03952819108963013,-0.0024605041835457087,-0.019034182652831078,0.021591398864984512,0.025318030267953873,-0.001806612708605826,0.004682963248342276,0.007036923430860043,-0.05195312201976776,0.0009525204077363014,-0.03357875719666481,-0.005388808902353048,0.00555933453142643,-0.07545645534992218,0.0019798297435045242,0.01856306567788124,0.004312839824706316,-0.02908775769174099,0.018655475229024887,-0.12893883883953094,0.023291422054171562,-0.10553567111492157,0.0020052555482834578,-0.036536622792482376,-0.003506049746647477,0.017005644738674164,-0.016959298402071,-0.009399873204529285,0.009258756414055824,0.039190977811813354,0.014340223744511604,0.06046076864004135,-0.07148566842079163,0.007153300568461418,-0.009356020949780941,0.01614285819232464,-0.03815628960728645,-0.011958981864154339,0.031051283702254295,-0.03679873049259186,0.033418577164411545,-0.043807778507471085,-0.00544273667037487,0.023237187415361404,-0.026624862104654312,-0.04285797104239464,0.011576573364436626,-0.017018256708979607,-0.04899069294333458,0.09036875516176224,-0.009769625030457973,0.08602097630500793,0.015234027989208698,0.01418938860297203,-0.025956304743885994,0.019679192453622818,-0.001481479499489069,0.04895133897662163,0.00150311051402241,-0.0015945659251883626,-0.004914645571261644,0.003988040145486593,0.045008957386016846,-0.010369863361120224,-0.028281595557928085,0.002911616349592805,-0.004902453627437353,0.028695592656731606,-0.017222553491592407,-0.06522534787654877,0.007870565168559551,-0.017008807510137558,-0.01832365058362484,-0.0055803703144192696,-0.00849425420165062,-0.033614397048950195,-0.01369739044457674,-0.0005797303165309131,-0.016612470149993896,-0.011283942498266697,-0.13597220182418823,-0.0014898903900757432,0.017697835341095924,-0.0042619891464710236,-0.015916984528303146,-0.0023485871497541666,0.019883079454302788,-0.04512817785143852,-0.04802321270108223,0.11180566251277924,-0.003724579466506839,-0.07563813775777817,-0.06792429834604263,-0.018416978418827057,0.0007047082181088626,0.06243522837758064,0.044121380895376205,-0.015934910625219345,-0.014354093931615353,-0.006425229366868734,0.005666659213602543,-0.022299809381365776,-0.028337717056274414,0.03966584429144859,0.059393104165792465,0.028583914041519165,0.013115980662405491,0.03739999234676361,-0.012679330073297024,0.027009693905711174,-0.04851736128330231,-0.004476612433791161,0.02865609899163246,0.014130708761513233,0.05190924182534218,0.0016455031000077724,0.032220322638750076,0.009365811944007874,0.002350212773308158,-0.0379866398870945,0.02415195107460022,0.018814336508512497,0.004788827616721392,0.028086863458156586,-0.08069006353616714,-0.0037278628442436457,-0.015021094121038914,-0.005458255764096975,-0.010159345343708992,0.0032949764281511307,0.004766344092786312,-0.03584032133221626,-0.0008735259179957211,-0.0008652928518131375,-0.036762259900569916,-0.0290010254830122,-0.0010073231533169746,-0.07325328886508942,0.08074477314949036,0.04718674719333649,0.015698038041591644,0.02668667770922184,-0.03961176425218582,-0.04360981285572052,0.03398042917251587,-0.0011288403766229749,-0.01929718442261219,-0.05720275640487671,-0.01357334479689598,-0.028610235080122948,-0.007197210099548101,0.011392902582883835,0.02395026944577694,0.012295623309910297,-0.038779117166996,-0.013871531933546066,-0.011826438829302788,-0.023758018389344215,0.04751305654644966,-0.07087333500385284,0.022772474214434624,0.020718537271022797,0.0018334140768274665,-0.0099942022934556,-0.03299533203244209,0.008138399571180344,0.04991322383284569,0.06749231368303299,0.026230551302433014,-0.0007012291462160647,-0.03974031284451485,-0.02148408442735672,0.006678021512925625,0.02855072356760502,0.0116141177713871,0.021932177245616913,-0.007996736094355583,-0.02096649445593357,-0.010011383332312107,-0.021345248445868492,-0.046941373497247696,-0.015927918255329132,0.04147043451666832,-0.08630990236997604,-0.02073267474770546,0.003932586871087551,-0.011486219242215157,-0.01563444547355175,-0.01960415579378605,0.01151470746845007,-0.016671955585479736,0.010051559656858444,0.012142717838287354,0.03025726228952408,-0.03769713267683983,0.01009129174053669,0.014361770823597908,-0.05790236219763756,0.040922146290540695,0.006290860008448362,0.02169419452548027,-0.04703653231263161,-0.007071835454553366,-0.017497818917036057,-0.01154085248708725,-0.0029647466726601124,-0.041833601891994476,-0.0022981201764196157,-0.03862845525145531,-0.018683087080717087,0.10430362075567245,-0.013398957438766956,0.022914525121450424,0.009942784905433655,0.019407648593187332,-0.07572474330663681,0.013725812546908855,0.029536351561546326,0.007875559851527214,0.027312694117426872,0.03364374488592148,-0.04697255417704582,0.0011530570918694139,-0.007740396074950695,-0.018915776163339615,0.05633290484547615,-0.03746699169278145,0.0026096024084836245,-0.008604703471064568,-0.01718156225979328,-0.10488444566726685,-0.011686603538691998,-0.032418761402368546,-0.01674923300743103,-0.010120644234120846,0.00286488002166152,0.00042603217298164964,0.00875004380941391,0.03801072761416435,-0.02607124112546444,0.001129512907937169,0.002050171373412013,-0.0017950873589143157,0.04027319699525833,0.0007129267323762178,-0.016042493283748627,0.02193130925297737,0.013409605249762535,-0.05057322606444359,0.05109622702002525,-0.03768131509423256,-0.04228505492210388,0.009483051486313343,-0.02225888893008232,0.027361229062080383,-0.0311704371124506,0.02292739413678646,-0.012545199133455753,0.051406051963567734,0.01162302028387785,-0.02162083052098751,0.06008805334568024,-0.040751244872808456,-0.04397951066493988,-0.043841652572155,0.033895984292030334,-0.037890996783971786,0.0519561767578125,0.06631536036729813,0.052564837038517,0.03602062538266182,-0.015038658864796162,-0.022205829620361328,0.0009772408520802855,0.04606219753623009,-0.000024166880393750034,0.020374268293380737,0.015964241698384285,0.007869714871048927,-0.061114031821489334,-0.013704078271985054,-0.020639974623918533,0.00023606675677001476,-0.06323912739753723,-0.031026875600218773,0.042844515293836594,0.02021164819598198,-6.155801265737308e-33,-0.0402594730257988,-0.026100875809788704,-0.06848742067813873,0.0764986053109169,-0.016742780804634094,0.031767502427101135,0.004401355050504208,-0.013416471891105175,-0.004167965147644281,-0.03377223387360573,-0.04673222079873085,0.0017756243469193578,0.035433270037174225,0.013449232093989849,-0.0174843892455101,0.006531964521855116,0.0276719368994236,0.020976141095161438,0.007280279416590929,-0.0103805772960186,-0.019331667572259903,0.012445485219359398,0.018174784258008003,-0.0653340220451355,-0.0096895145252347,-0.009169518016278744,-0.007720638997852802,0.02369661070406437,-0.008243127726018429,-0.014175121672451496,0.01759530045092106,-0.042695097625255585,-0.007810325361788273,0.027466949075460434,0.03564145043492317,0.015837041661143303,-0.028890633955597878,-0.028073275461792946,0.024115124717354774,0.03733883053064346,0.10525819659233093,0.016765698790550232,-0.020022595301270485,-0.023620590567588806,0.0023235001135617495,-0.004774349741637707,0.03506118804216385,0.011778161861002445,-0.006081906147301197,0.001106249401345849,-0.010544802062213421,0.012426164001226425,-0.011424876749515533,0.10799580067396164,0.03484944999217987,-0.02970695123076439,0.022383062168955803,-0.019739866256713867,-0.013279261998832226,-0.04088582098484039,0.025115851312875748,-0.07022373378276825,0.003685171715915203,0.07465502619743347,0.03822476044297218,0.01944991759955883,0.02863459289073944,0.1090155616402626,0.0023394215386360884,-0.049607083201408386,-0.0212593674659729,0.0049179731868207455,-0.02511759288609028,-0.04391910135746002,-0.05724151432514191,0.029535386711359024,0.014177992939949036,0.04783090949058533,0.04237987846136093,0.0712609589099884,0.00880836509168148,0.002107477281242609,-0.05401613563299179,0.00039641550392843783,0.04068514332175255,-0.04733048006892204,0.01127300038933754,0.034611478447914124,0.007245892193168402,0.039205119013786316,-0.03463027998805046,0.06270917505025864,-0.0505194328725338,0.024808833375573158,-0.018792321905493736,-0.004541755188256502,0.052472662180662155,0.0029614251106977463,-0.011603067629039288,-0.02921212464570999,0.0060693928971886635,0.029094936326146126,0.0010092835873365402,-0.03364762291312218,-0.015172560699284077,-0.005461879074573517,0.03897225484251976,-0.03357686847448349,-0.013961530290544033,0.004895917139947414,0.034648675471544266,0.053936757147312164,-0.041097138077020645,0.027135461568832397,0.0038121065590530634,0.013684369623661041,-0.011873684823513031,0.007380415685474873,-0.027532026171684265,0.004585884045809507,0.007518565282225609,0.05559905245900154,0.004360008053481579,0.015280691906809807,0.02765829488635063,-0.0076323701068758965,0.02347150258719921,-0.057019367814064026,0.10595943033695221,0.023254279047250748,-0.0029239687137305737,0.009846683591604233,2.535064425046585e-7,-0.02542473003268242,0.0006722217658534646,0.0015492679085582495,0.023037320002913475,0.0008706909138709307,0.01992001011967659,0.04287378489971161,-0.010751607827842236,-0.014008746482431889,-0.02428440935909748,0.041269272565841675,-0.005195912439376116,0.016544103622436523,-0.015615860000252724,-0.04474309831857681,-0.024104556068778038,0.068438820540905,-0.07868379354476929,-0.03292286768555641,0.031990762799978256,-0.0035990304313600063,-0.015467498451471329,0.014954251237213612,-0.01203108113259077,0.0329282209277153,0.10300315916538239,-0.021685851737856865,-0.08881361037492752,0.015203563496470451,-0.00636793440207839,0.03624911978840828,0.003713585902005434,-0.015730150043964386,0.05832930654287338,0.012045130133628845,0.02340409904718399,0.01981288380920887,0.01572459377348423,0.03202282264828682,0.03784005343914032,0.038653869181871414,0.022049879655241966,-0.02154170349240303,0.011192630976438522,0.0013776252744719386,-0.003931886982172728,-0.007679921109229326,0.004131144843995571,-0.045219093561172485,0.016525371000170708,0.010392464697360992,0.005023977719247341,-0.016741503030061722,-0.012583228759467602,0.019490042701363564,-0.03593017905950546,0.009059043601155281,-0.002198341768234968,0.05564037337899208,0.0166653823107481,-0.03159310296177864,-0.0074762930162250996,0.016249483451247215,0.040889766067266464,0.03865470364689827,0.04109175503253937,-0.006243473384529352,2.3901432246090154e-34,-0.003928712569177151,-0.03449920564889908,0.02908458188176155,-0.003859905293211341,0.021748024970293045,0.0032443974632769823,0.0023583637084811926,0.006929605267941952,-0.005466330796480179,-0.031028863042593002,-0.008841714821755886]'
SET
  @TechnicalDesignVector_f8c12c42 = N'[-0.009899402968585491,0.041830819100141525,-0.021280528977513313,-0.02776411548256874,0.04103422164916992,-0.016644278541207314,0.011328659951686859,0.009723725728690624,-0.02507617138326168,-0.01585645042359829,0.005234149284660816,-0.04865194484591484,0.04881933331489563,0.05628591030836105,0.04690856486558914,-0.05846197158098221,-0.016241561621427536,0.04898946359753609,-0.08427579700946808,0.0016700319247320294,0.00003450491567491554,0.01352984644472599,0.025375578552484512,-0.000009160016816167627,-0.038905318826436996,0.012489928863942623,0.016223393380641937,-0.03500496968626976,0.011362808756530285,-0.04637497663497925,0.027405772358179092,0.02874746546149254,-0.04923302307724953,-0.051119569689035416,0.0000016080749674074468,0.018652401864528656,-0.022036345675587654,0.040450479835271835,-0.07156237959861755,0.007456597406417131,-0.007111294195055962,-0.03654932603240013,0.046622566878795624,-0.019039297476410866,-0.011237937957048416,-0.009107919409871101,-0.05482060834765434,-0.031203122809529305,0.014276351779699326,0.046843383461236954,0.006821724120527506,-0.03381992131471634,-0.020126745104789734,0.021856965497136116,0.025659121572971344,0.019282476976513863,-0.03977430984377861,0.018535643815994263,-0.039223991334438324,0.013215144164860249,0.005515602417290211,-0.06163013353943825,0.020652011036872864,-0.0030034601222723722,0.08902368694543839,-0.0018869604682549834,0.07496211677789688,-0.01742229051887989,0.0160361435264349,-0.007617859169840813,0.14017821848392487,0.030631929636001587,0.03480583429336548,0.027302637696266174,-0.04172798991203308,-0.06983105838298798,-0.001661930582486093,-0.05702689662575722,0.01489892415702343,-0.004727252759039402,-0.06341326236724854,0.013126778416335583,0.0017115642549470067,-0.034095313400030136,0.013881897553801537,0.019784223288297653,0.008556460961699486,0.022405922412872314,-0.016950633376836777,-0.006981743033975363,-0.06485558301210403,-0.015238163061439991,-0.027996990829706192,-0.011958105489611626,-0.02019854076206684,-0.026632072404026985,0.049159493297338486,-0.0567307248711586,0.07972732931375504,-0.09595577418804169,0.050731733441352844,0.00623346446081996,0.01524836104363203,0.005222652107477188,0.028417285531759262,0.11625397950410843,0.0668313279747963,0.0017763572977855802,0.002879774197936058,-0.008994311094284058,0.009219498373568058,0.007849869318306446,0.061488229781389236,0.014650857076048851,0.05689271166920662,0.07354512065649033,-0.01522389892488718,0.03255974128842354,-0.009800494648516178,0.01894964464008808,0.07624868303537369,-0.03074021264910698,-0.023223381489515305,-0.047873713076114655,-0.02783375047147274,-0.038748424500226974,-0.04002957418560982,-0.10075534880161285,-0.046171218156814575,0.03528372570872307,0.0006073424010537565,0.002970711328089237,-0.014012017287313938,0.00026190231437794864,0.01783418469130993,-0.012062868103384972,0.055947937071323395,-0.03515028953552246,0.03221483528614044,0.024234110489487648,0.023209163919091225,0.0037520979531109333,-0.028103694319725037,-0.0008976415847428143,-0.02723100036382675,0.026383621618151665,-0.009120985865592957,-0.0619715116918087,-0.011216921731829643,0.010415255092084408,-0.023523086681962013,-0.03505516052246094,-0.0010394020937383175,0.030624382197856903,-0.05114969611167908,0.01318338792771101,-0.007299461867660284,0.04154733568429947,0.024299951270222664,-0.04099230468273163,0.022817572578787804,0.03802758455276489,0.012199517339468002,0.019003890454769135,0.0016824692720547318,-0.005250278394669294,-0.04177483916282654,-0.012784415856003761,-0.006938791833817959,-0.021066775545477867,-0.03200795501470566,-0.02585321106016636,-0.007936570793390274,0.024611564353108406,-0.008956946432590485,-0.03460175171494484,0.03588083013892174,-0.04144701361656189,-0.05415716767311096,-0.011271442286670208,-0.013479053042829037,-0.08198803663253784,-0.025523951277136803,0.005684777162969112,0.05692482739686966,-0.0015222644433379173,0.008481009863317013,0.03867325559258461,-0.0029840688221156597,-0.0011751119745895267,-0.03546953573822975,0.014141513034701347,-0.11554114520549774,-0.03300149366259575,0.011440715752542019,0.042239829897880554,-0.011606987565755844,-0.0034681917168200016,-0.011603428050875664,0.035472601652145386,0.013483697548508644,-0.0012866293545812368,0.03498762100934982,0.016383375972509384,0.035815246403217316,-0.016774896532297134,-0.03566930815577507,0.03535648062825203,-0.03884857892990112,0.02132412977516651,0.07080256193876266,-0.00939389318227768,-0.035169731825590134,0.026320461183786392,-0.004832963924854994,0.028197407722473145,-0.004673135932534933,-0.04360013082623482,-0.024482272565364838,0.01809757761657238,-0.0021211043931543827,-0.06987742334604263,0.06227445602416992,0.010230796411633492,0.05001891776919365,0.04563915356993675,0.0005295728333294392,0.00563475489616394,-0.04123987257480621,0.04006185010075569,0.02092614583671093,-0.011679916642606258,-0.02166343480348587,0.018912728875875473,0.037818193435668945,-0.03601774200797081,0.019182465970516205,0.07229064404964447,0.034146975725889206,0.0958094522356987,-0.014419566839933395,0.014684800989925861,-0.004031285177916288,0.07471788674592972,-0.004241077695041895,-0.0017116428352892399,0.0014978079125285149,-0.008004850707948208,-0.013633593916893005,0.0191362127661705,0.01005258783698082,-0.0018885089084506035,-0.02299351803958416,-0.03759940713644028,-0.01811963878571987,-0.12412664294242859,-0.06793026626110077,-0.01015494018793106,0.05345271900296211,-0.000337636360200122,-0.01584269478917122,0.02080150879919529,0.03931326046586037,0.009929724037647247,-0.006534967105835676,-0.0006098659359849989,0.008971530944108963,-0.038715608417987823,0.04826781898736954,0.019817037507891655,0.02715243771672249,0.0037879806477576494,0.039334796369075775,-0.013014636002480984,0.037931378930807114,0.03915531933307648,-0.062674880027771,0.03873476758599281,-0.006091184914112091,-0.009485103189945221,-0.008837250992655754,-0.04351021349430084,0.027907496318221092,0.010438166558742523,-0.03378770127892494,0.02233770303428173,-0.06386828422546387,0.052482664585113525,0.03835383802652359,-0.05409855395555496,0.0014210103545337915,-0.05343705415725708,0.03357207775115967,-0.023923369124531746,0.02128564938902855,-0.007471463177353144,0.06212208420038223,0.016206203028559685,-0.02004210278391838,0.053183577954769135,-0.02765355259180069,0.010359987616539001,-0.005152502097189426,-0.03768448531627655,-0.022376473993062973,-0.012774690985679626,0.007835435681045055,0.01268667634576559,0.032267019152641296,-0.015023358166217804,-0.0407925583422184,-0.003300988581031561,-0.030441518872976303,0.07512297481298447,0.004688574001193047,-0.012054478749632835,-0.011931589804589748,0.06015603616833687,0.025163251906633377,0.030760057270526886,-0.008351403288543224,0.027489010244607925,-0.03541775792837143,-0.0027956662233918905,-0.008815387263894081,0.017611287534236908,0.035594642162323,0.0046937838196754456,0.03369777649641037,0.024583665654063225,0.015040361322462559,-0.013653343543410301,0.028193477541208267,0.019539834931492805,0.05153784155845642,-0.014835719019174576,-0.025302927941083908,-0.06012127175927162,0.048752181231975555,-0.037491168826818466,-0.00520015973597765,-0.014345992356538773,-0.006458223797380924,0.023317214101552963,0.013185957446694374,-0.03172316029667854,-0.08815927058458328,0.019913367927074432,-0.06961773335933685,0.007640760391950607,-0.03819136694073677,0.00423419987782836,-0.01712140254676342,0.005901840049773455,-0.0026276083663105965,-0.0398528128862381,0.04334850609302521,0.01192079670727253,0.015264080837368965,-0.06950253993272781,0.054206207394599915,0.03403748944401741,0.0932057723402977,-0.012216613627970219,-0.044833261519670486,-0.02022877335548401,-0.02737758494913578,0.0310235433280468,-0.025877462700009346,-0.010346831753849983,-0.046115461736917496,0.03028978407382965,0.03145382180809975,0.005722173489630222,-0.006250231526792049,0.05320657044649124,0.019480524584650993,0.026232726871967316,0.03021475300192833,-0.003837661584839225,0.019566120579838753,-0.08873327076435089,0.06366688758134842,0.02423890121281147,0.04350389540195465,-0.04374100640416145,0.01811438426375389,-0.03876465559005737,0.02077733539044857,-0.003425339935347438,0.014157186262309551,-0.0005253760609775782,-0.08213221281766891,-0.049089208245277405,0.029900390654802322,0.0006430858629755676,-0.001990008167922497,-0.032232679426670074,0.07147807627916336,0.038839612156152725,-0.046748146414756775,0.08258870244026184,0.0008630236843600869,-0.006318157073110342,-0.026153981685638428,-0.023612845689058304,-0.005908047314733267,0.021125486120581627,0.08713505417108536,0.024496277794241905,-0.07287895679473877,0.06935931742191315,-0.027208440005779266,-0.0014051240868866444,-0.048252541571855545,-0.03871893882751465,-0.012480556033551693,-0.03967279568314552,0.028935246169567108,-0.04210374504327774,0.02826765924692154,-0.013006981462240219,-0.00249332538805902,-0.01328127458691597,0.029767077416181564,-0.053561970591545105,0.0208798348903656,-0.01343738753348589,0.024074211716651917,-0.015731772407889366,-0.00508594885468483,0.0008913696510717273,0.020687522366642952,0.013694568537175655,-0.0032016874756664038,-0.045586228370666504,0.008455376140773296,0.004963019397109747,0.039392635226249695,-0.02818446233868599,0.04090050607919693,-0.02265290915966034,0.040135644376277924,0.0293667484074831,-0.007924633100628853,-0.016515204682946205,-0.0381191186606884,0.06767918169498444,0.0298593882471323,-0.004267268814146519,0.03454876318573952,-0.07170877605676651,-0.016090568155050278,0.010359113104641438,0.06064153090119362,-0.05119584500789642,0.035209912806749344,0.025451652705669403,-0.08054931461811066,0.053661126643419266,0.057469241321086884,0.03437357395887375,-0.037579674273729324,0.018933378159999847,0.03569718077778816,-0.01747985929250717,0.06402281671762466,-0.06291428953409195,-0.02329196222126484,-0.011753133498132229,-0.024210961535573006,-0.0398230142891407,0.006958100479096174,0.02715306729078293,-0.013967186212539673,-0.03606212139129639,0.007560380268841982,-0.0287966039031744,0.0024994879495352507,-0.056583866477012634,-0.02430151030421257,0.044856853783130646,-0.017248550429940224,0.007968286983668804,0.023134535178542137,-0.022457856684923172,-0.015587396919727325,0.025368422269821167,-0.0040663061663508415,-0.05513409525156021,-0.03910339996218681,0.034443311393260956,-0.062133073806762695,0.06754321604967117,0.04415940120816231,0.06739789247512817,-0.0029079781379550695,-0.021570444107055664,0.038836609572172165,0.029397040605545044,-0.018189938738942146,-0.052759330719709396,0.031688667833805084,-0.06264203786849976,-0.005595597438514233,-0.0032131082843989134,-0.009091258980333805,-0.034890368580818176,-0.01179654523730278,-0.031470999121665955,-0.03232331946492195,-0.014297548681497574,0.00549990264698863,0.02306058630347252,0.00042033291538245976,0.022016353905200958,-0.03066929616034031,0.04075021296739578,0.03805526718497276,-0.057509198784828186,0.01834079809486866,0.01236836425960064,-0.011367565020918846,-0.04388373717665672,0.0842941403388977,-0.028100013732910156,0.023353951051831245,0.047467190772295,0.035767730325460434,0.03856917470693588,0.0009317760705016553,0.034843478351831436,-0.0870833545923233,0.016345124691724777,-0.022874338552355766,0.038899701088666916,0.03776371106505394,-0.005723410751670599,0.002937525976449251,-0.05365820601582527,-0.02381465770304203,0.02483775094151497,0.04462738335132599,-0.019626909866929054,-0.02210836298763752,-0.02941533923149109,0.016148781403899193,-0.04103334993124008,-0.004385932814329863,-0.07067541033029556,0.041647858917713165,-0.06066836416721344,-0.0614570751786232,-0.0008735401788726449,0.08668866008520126,-5.6667394124715875e-33,-0.03632378578186035,-0.012403611093759537,-0.03695010393857956,0.0639638900756836,-0.06033118814229965,-0.019642196595668793,0.005287713371217251,-0.06618022918701172,-0.022350767627358437,-0.06995802372694016,0.005625516176223755,-0.030030474066734314,0.015612266026437283,-0.0012554441345855594,-0.001417480525560677,0.029896205291152,0.02799203433096409,-0.053638115525245667,-0.002462836680933833,0.0067450786009430885,-0.022627603262662888,-0.02110660821199417,0.00015778855595272034,-0.04451628029346466,0.020979758352041245,0.013044190593063831,-0.024565398693084717,0.053790271282196045,-0.03287452086806297,0.011519823223352432,-0.0008712916751392186,-0.01110206637531519,-0.018410958349704742,-0.029282301664352417,0.030591243878006935,0.03705478087067604,-0.01059233769774437,0.008221608586609364,-0.007484522648155689,0.01307098101824522,0.08560040593147278,-0.024553872644901276,-0.025613892823457718,-0.011479969136416912,0.037088893353939056,-0.028474170714616776,-0.01301890891045332,0.022340038791298866,0.004725798033177853,0.005832334514707327,0.0227409265935421,-0.009245858527719975,-0.012820648029446602,0.0944751426577568,0.013193896040320396,-0.03808974474668503,0.06451192498207092,-0.0063595836982131,-0.03928713500499725,-0.03801516816020012,0.000011746886229957454,-0.005773006472736597,0.006164473481476307,0.03925178200006485,0.028952140361070633,0.017869506031274796,-0.020649544894695282,0.0017151744104921818,-0.0040404219180345535,0.003513445146381855,0.010869189165532589,-0.032961808145046234,0.0030144425109028816,0.027648014947772026,-0.03999145328998566,0.0012000503484159708,-0.033508989959955215,0.04553956165909767,-0.023633403703570366,-0.028360098600387573,0.04941234737634659,-0.0011289585381746292,-0.04203306883573532,0.018364902585744858,-0.007338230032473803,-0.09562332928180695,0.02113283984363079,0.004886443726718426,-0.04763679578900337,0.019749343395233154,0.0032089322339743376,0.05033747851848602,-0.05446265637874603,0.024109283462166786,-0.001423153793439269,-0.027016282081604004,0.08227191120386124,0.017652137205004692,0.00001307132242800435,-0.008621620945632458,0.017348745837807655,0.006823045667260885,-0.02349277399480343,0.05459976941347122,0.007102197036147118,0.023001769557595253,-0.0019448985112830997,-0.01378475409001112,-0.016743415966629982,0.02817247249186039,0.044553376734256744,0.03966943919658661,-0.05930059030652046,0.012785193510353565,0.022486330941319466,-0.015624784864485264,0.011272823438048363,0.029445834457874298,-0.02074299566447735,0.06484827399253845,0.004903172142803669,0.03873014077544212,0.01569506898522377,-0.004919942934066057,0.05957139655947685,-0.021402109414339066,-0.018178192898631096,-0.1199471578001976,0.06104978546500206,-0.0009443966555409133,-0.013173146173357964,-0.07159937918186188,2.3876543764345115e-7,-0.05251212418079376,0.06441602110862732,-0.004815279506146908,-0.025109080597758293,-0.02291826717555523,0.03751920536160469,0.0034729756880551577,-0.01955398917198181,-0.0027227301616221666,-0.06100347638130188,0.005007146392017603,-0.01165144331753254,-0.0007867589592933655,0.032771166414022446,-0.06836856156587601,0.028123699128627777,0.004490065388381481,-0.051917821168899536,-0.039503443986177444,-0.004554795566946268,-0.03122330829501152,-0.02470569871366024,0.0604531429708004,0.0012709980364888906,-0.0226269643753767,0.042945656925439835,-0.014467548578977585,-0.01865168660879135,0.0011509633623063564,0.02863484062254429,0.06289885193109512,0.0035456139594316483,0.01827690377831459,0.07595723122358322,0.0018624848453328013,0.05884746462106705,0.04892772063612938,-0.009985868819057941,0.012762322090566158,-0.013667196035385132,-0.004232391249388456,-0.007881039753556252,-0.044253211468458176,-0.03199312463402748,0.05193397402763367,0.01239723153412342,-0.04638839140534401,-0.012265477329492569,-0.016208363696932793,0.014241623692214489,-0.01575819030404091,-0.019911881536245346,-0.024453775957226753,0.0010101926745846868,0.02429056353867054,-0.04503173381090164,0.013602636754512787,0.030297376215457916,0.0034248873125761747,0.02264520525932312,-0.005408767145127058,-0.00885305181145668,0.01718962751328945,0.058342937380075455,-0.026383304968476295,0.00031469520763494074,-0.025344466790556908,2.6932010506966075e-34,-0.02345586009323597,-0.02783128432929516,0.03596013784408569,-0.027544785290956497,0.03291311115026474,-0.021607069298624992,0.026822224259376526,-0.016168879345059395,0.00840805284678936,-0.028915882110595703,-0.00940531212836504]'
SET
  @HasCustomProps_f8c12c42 = 1
SET
  @HasCustomEvents_f8c12c42 = 0
SET
  @RequiresData_f8c12c42 = 1
SET
  @DependencyCount_f8c12c42 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_f8c12c42 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_f8c12c42 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_f8c12c42 = 1
SET
  @ID_f8c12c42 = '94A07EAB-6AA6-4E71-8AE5-744EAE855FB0'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_f8c12c42,
  @Name = @Name_f8c12c42,
  @Version = @Version_f8c12c42,
  @VersionSequence = @VersionSequence_f8c12c42,
  @Title = @Title_f8c12c42,
  @Description = @Description_f8c12c42,
  @Type = @Type_f8c12c42,
  @Status = @Status_f8c12c42,
  @DeveloperName = @DeveloperName_f8c12c42,
  @DeveloperEmail = @DeveloperEmail_f8c12c42,
  @DeveloperOrganization = @DeveloperOrganization_f8c12c42,
  @SourceRegistryID = @SourceRegistryID_f8c12c42,
  @ReplicatedAt = @ReplicatedAt_f8c12c42,
  @LastSyncedAt = @LastSyncedAt_f8c12c42,
  @Specification = @Specification_f8c12c42,
  @FunctionalRequirements = @FunctionalRequirements_f8c12c42,
  @TechnicalDesign = @TechnicalDesign_f8c12c42,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_f8c12c42,
  @TechnicalDesignVector = @TechnicalDesignVector_f8c12c42,
  @HasCustomProps = @HasCustomProps_f8c12c42,
  @HasCustomEvents = @HasCustomEvents_f8c12c42,
  @RequiresData = @RequiresData_f8c12c42,
  @DependencyCount = @DependencyCount_f8c12c42,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_f8c12c42,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_f8c12c42,
  @HasRequiredCustomProps = @HasRequiredCustomProps_f8c12c42,
  @ID = @ID_f8c12c42;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_d8d30fb8 NVARCHAR(MAX),
@Name_d8d30fb8 NVARCHAR(500),
@Version_d8d30fb8 NVARCHAR(50),
@VersionSequence_d8d30fb8 INT,
@Title_d8d30fb8 NVARCHAR(1000),
@Description_d8d30fb8 NVARCHAR(MAX),
@Type_d8d30fb8 NVARCHAR(255),
@Status_d8d30fb8 NVARCHAR(50),
@DeveloperName_d8d30fb8 NVARCHAR(255),
@DeveloperEmail_d8d30fb8 NVARCHAR(255),
@DeveloperOrganization_d8d30fb8 NVARCHAR(255),
@SourceRegistryID_d8d30fb8 UNIQUEIDENTIFIER,
@ReplicatedAt_d8d30fb8 DATETIMEOFFSET,
@LastSyncedAt_d8d30fb8 DATETIMEOFFSET,
@Specification_d8d30fb8 NVARCHAR(MAX),
@FunctionalRequirements_d8d30fb8 NVARCHAR(MAX),
@TechnicalDesign_d8d30fb8 NVARCHAR(MAX),
@FunctionalRequirementsVector_d8d30fb8 NVARCHAR(MAX),
@TechnicalDesignVector_d8d30fb8 NVARCHAR(MAX),
@HasCustomProps_d8d30fb8 BIT,
@HasCustomEvents_d8d30fb8 BIT,
@RequiresData_d8d30fb8 BIT,
@DependencyCount_d8d30fb8 INT,
@TechnicalDesignVectorEmbeddingModelID_d8d30fb8 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_d8d30fb8 NVARCHAR(MAX),
@HasRequiredCustomProps_d8d30fb8 BIT,
@ID_d8d30fb8 UNIQUEIDENTIFIER
SET
  @Namespace_d8d30fb8 = N'CRM/Customer'
SET
  @Name_d8d30fb8 = N'TabNavigation'
SET
  @Version_d8d30fb8 = N'1.0.0'
SET
  @VersionSequence_d8d30fb8 = 1
SET
  @Title_d8d30fb8 = N'Tab Navigation'
SET
  @Description_d8d30fb8 = N'Tab navigation component for switching between customer views'
SET
  @Type_d8d30fb8 = N'Other'
SET
  @Status_d8d30fb8 = N'Deprecated'
SET
  @Specification_d8d30fb8 = N'{}'
SET
  @FunctionalRequirements_d8d30fb8 = N'## Tab Navigation

### Purpose
Provides tab-based navigation for switching between different views.

### Features
- Multiple tab support
- Active tab indication
- Tab change callbacks
- Responsive layout'
SET
  @TechnicalDesign_d8d30fb8 = N'## Implementation

### Props
- tabs: Array of tab configurations
- activeTab: Currently active tab
- onTabChange: Tab selection callback'
SET
  @FunctionalRequirementsVector_d8d30fb8 = N'[0.017664911225438118,-0.08271215111017227,-0.011031381785869598,-0.04867054522037506,0.009798561222851276,-0.007025119382888079,0.03994741290807724,0.019137848168611526,0.054743193089962006,-0.00462881987914443,-0.05327434092760086,-0.004624282941222191,0.05532556027173996,0.06429600715637207,0.06658780574798584,-0.03374122455716133,0.016543569043278694,-0.004219953902065754,-0.010434060357511044,0.0386255718767643,-0.01817280426621437,-0.022941166535019875,-0.059332724660634995,-0.012164980173110962,0.047102779150009155,-0.01206314004957676,-0.012006992474198341,0.029289202764630318,-0.021227477118372917,-0.04935021325945854,0.04258178174495697,0.0033772080205380917,-0.06690067052841187,0.02106478624045849,0.0000021601574644591892,0.03210015967488289,0.00751787843182683,-0.04382183402776718,-0.015637796372175217,0.0019442964112386107,0.07077556848526001,0.03714993968605995,0.046568769961595535,0.0018001154530793428,0.025057857856154442,-0.017575960606336594,-0.026135122403502464,0.06744306534528732,0.035049084573984146,0.0204123854637146,0.010842621326446533,-0.07324842363595963,-0.04493191838264465,-0.027695145457983017,0.030792944133281708,-0.01171867549419403,-0.023467285558581352,-0.02396339364349842,-0.024312490597367287,-0.06468578428030014,0.006777786184102297,0.011746874079108238,-0.007885174825787544,0.004063271451741457,0.04700085148215294,0.014439042657613754,-0.026595499366521835,-0.08354438096284866,0.023258866742253304,0.032642338424921036,0.0548546276986599,0.004922307562083006,-0.02765275537967682,-0.04776596650481224,-0.004404522478580475,0.054925840348005295,0.009178568609058857,-0.03141576051712036,-0.014607079327106476,-0.026707492768764496,-0.019735656678676605,-0.01711857318878174,0.0012758973753079772,-0.025002630427479744,0.019027389585971832,-0.06821051985025406,0.010782639496028423,0.04440709948539734,0.028820523992180824,0.0071650012396276,0.04008189216256142,0.02062845416367054,0.0043840608559548855,-0.02874794788658619,-0.06644847244024277,-0.008538189344108105,-0.0027374676428735256,-0.030631447210907936,0.018046893179416656,-0.07407304644584656,0.07422658801078796,-0.0052429563365876675,-0.041058093309402466,-0.011686064302921295,-0.006359841674566269,-0.0013385805068537593,-0.025027750059962273,-0.061008695513010025,-0.036631498485803604,0.043327704071998596,0.008291082456707954,0.023898448795080185,-0.009404649958014488,-0.007858227007091045,-0.0378824882209301,0.02575334534049034,0.012268086895346642,0.02898257225751877,-0.017221422865986824,-0.023168645799160004,0.03614872694015503,0.02153303660452366,0.03433879464864731,0.013198746368288994,0.03352954238653183,-0.01135310996323824,0.003236378077417612,-0.030705511569976807,-0.03345169499516487,0.01109641045331955,-0.001258759293705225,-0.010456952266395092,-0.047414518892765045,-0.02642597071826458,-0.037990979850292206,0.0016654658829793334,-0.06658948957920074,0.02088000439107418,-0.03647284954786301,0.050594523549079895,0.02478663995862007,0.010599874891340733,-0.04063260555267334,0.020928749814629555,-0.0051117828115820885,-0.01585930772125721,-0.021526865661144257,-0.023876002058386803,0.025147821754217148,0.0694284439086914,-0.02234884910285473,0.0035541639663279057,0.0743488222360611,0.0009059073054231703,0.0719861313700676,-0.0101799126714468,-0.061469610780477524,-0.005136449355632067,0.014036042615771294,0.013439275324344635,-0.030250374227762222,-0.029566742479801178,-0.04367908835411072,-0.024714557453989983,-0.06971273571252823,-0.011964449658989906,-0.02132607437670231,-0.03742457926273346,0.08247142285108566,-0.03607764095067978,-0.08764346688985825,0.007005566731095314,-0.017567869275808334,-0.025920353829860687,-0.001169429742731154,-0.009015150368213654,0.06533332914113998,0.029484832659363747,-0.031840819865465164,-0.013647185638546944,0.02666754275560379,-0.06939058750867844,-0.006359175778925419,-0.001701725646853447,-0.04058622568845749,-0.041152991354465485,0.0014754580333828926,0.055668577551841736,-0.04134732484817505,0.007133624516427517,0.018161145970225334,0.030427968129515648,-0.00515332818031311,-0.03419552370905876,-0.012917855754494667,-0.019395554438233376,0.007046700455248356,-0.017099834978580475,0.014679894782602787,0.005501315928995609,-0.05560513213276863,0.003655154723674059,0.003096119500696659,0.029006846249103546,0.01597125455737114,0.027810709550976753,-0.06413350254297256,-0.03575792908668518,0.023358115926384926,0.03657468408346176,0.053808730095624924,0.007709047291427851,-0.00680869584903121,0.02478574775159359,0.014235328882932663,0.024120602756738663,0.007194165140390396,0.020009879022836685,-0.0732567235827446,0.02593693695962429,-0.015413380227982998,0.015265998430550098,-0.0790620669722557,0.02995745651423931,0.020846372470259666,0.013381389901041985,0.008680220693349838,-0.0002810272853821516,-0.025552645325660706,-0.011321215890347958,-0.019447222352027893,-0.03906537964940071,0.014205419458448887,0.01887563429772854,0.12961257994174957,0.027227431535720825,0.015909647569060326,0.008149758912622929,-0.05724956840276718,0.0033319643698632717,0.020430445671081543,0.015683157369494438,-0.005382205825299025,0.02500423789024353,0.03891659528017044,-0.025429541245102882,-0.10582277923822403,-0.004816210363060236,0.024223877117037773,-0.03117392025887966,0.008038662374019623,0.015693753957748413,0.029994795098900795,0.009949777275323868,0.027518339455127716,0.03698372840881348,-0.04943707957863808,0.012314208783209324,0.00755939120426774,0.05040740221738815,0.013478823006153107,-0.017309509217739105,0.0035558564122766256,-0.002282053232192993,0.0350373201072216,0.00020790082635357976,-0.012605506926774979,0.015105347149074078,-0.008997791446745396,-0.03135957941412926,0.009931829757988453,0.05043250322341919,0.017109593376517296,-0.014440832659602165,-0.003848036052659154,0.030867235735058784,0.0442379005253315,0.011963734403252602,-0.03516112640500069,-0.0339425690472126,-0.013347428292036057,-0.006717096082866192,-0.0428263284265995,0.013592986389994621,-0.025961298495531082,-0.005142448004335165,0.04546239599585533,-0.10935229808092117,-0.016579974442720413,-0.15607279539108276,0.03954198211431503,0.04353839531540871,0.017604893073439598,0.0069329505786299706,-0.030268503352999687,0.007135945372283459,-0.04586789384484291,0.08505403250455856,-0.024709103628993034,0.051197152584791183,0.04007174074649811,-0.005085956770926714,-0.0157010518014431,0.010287514887750149,0.005332274828106165,-0.0006862660520710051,-0.046566326171159744,0.00001570980020915158,0.03634851425886154,0.03110029548406601,-0.03407082334160805,0.02623642608523369,0.011765385046601295,-0.061376217752695084,-0.00513224583119154,0.015598967671394348,0.039146244525909424,0.09927822649478912,-0.0013767322525382042,0.03359037637710571,-0.003234671428799629,0.034560274332761765,-0.01949404552578926,0.0056535108014941216,-0.03620121255517006,-0.03237226605415344,-0.01203705184161663,0.02501184679567814,0.01904912106692791,-0.01777203194797039,0.00524103781208396,0.1262626200914383,-0.06822922080755234,0.013484660536050797,0.08526387065649033,-0.01936686597764492,-0.007633143104612827,0.043308746069669724,-0.019537461921572685,0.0038089610170572996,-0.031535983085632324,0.056274350732564926,0.009389595128595829,-0.04416290298104286,0.035854339599609375,-0.03756442293524742,-0.030336502939462662,0.028657466173171997,-0.1397097110748291,0.01171636488288641,0.00046314942301250994,0.036960866302251816,0.002252745209261775,0.0013473501894623041,0.024287713691592216,-0.016658177599310875,-0.017351118847727776,-0.01036854274570942,-0.029748160392045975,-0.015459954738616943,0.014522607438266277,-0.007355845998972654,0.00000796929634816479,0.02888602949678898,0.06593484431505203,0.036787934601306915,0.04131418839097023,-0.014428087510168552,-0.02474834769964218,-0.019378269091248512,0.00002995894647028763,-0.00302100065164268,-0.0025826881173998117,0.06528757512569427,0.005877702031284571,-0.06070098653435707,-0.02159777469933033,-0.04340483248233795,0.03856215998530388,0.03347402065992355,0.059323541820049286,0.04655510559678078,0.00488040829077363,-0.052793338894844055,0.02931215800344944,0.026319406926631927,0.011753005906939507,-0.01802617684006691,0.03821497783064842,-0.006691870279610157,0.01715793088078499,0.0075590237975120544,-0.043382368981838226,0.0018232957227155566,-0.02159833535552025,0.031011059880256653,-0.022861041128635406,0.026877133175730705,-0.013088340871036053,-0.03986262157559395,0.03047967702150345,0.02661653235554695,0.0229751318693161,-0.004675579722970724,0.037958890199661255,-0.00006821673741796985,0.008130487985908985,0.008265559561550617,0.02049117721617222,-0.012763475067913532,-0.08981987833976746,-0.02033076621592045,0.009429220110177994,-0.015075634233653545,-0.03065955638885498,-0.001197868725284934,0.02929835394024849,-0.016727901995182037,-0.04069597274065018,0.030202554538846016,0.03569008409976959,0.0317697636783123,-0.010484141297638416,-0.03607259318232536,0.02485322766005993,0.013228006660938263,0.03941347822546959,-0.05354917794466019,-0.04143274948000908,-0.004289774224162102,-0.02270556427538395,-0.004755532369017601,-0.07377764582633972,-0.01554778404533863,-0.0044603049755096436,-0.013772730715572834,0.057986777275800705,-0.005120556335896254,-0.14017607271671295,-0.013864859007298946,0.038661058992147446,0.0039923167787492275,0.04935307800769806,0.03296107426285744,-0.016099965199828148,0.04308135434985161,-0.006072346121072769,-0.012456071563065052,-0.04540662467479706,-0.01704436168074608,-0.019753707572817802,-0.06188078224658966,-0.06682170927524567,0.017198041081428528,-0.05779818072915077,0.004522762261331081,0.007427087519317865,0.03882597014307976,-0.04688683897256851,0.0035477501805871725,-0.002781444229185581,0.01119871437549591,0.003094857558608055,-0.019943805411458015,0.01523978728801012,-0.04281952604651451,-0.04541892930865288,-0.008621682412922382,0.04137316346168518,0.0038116707000881433,-0.06671731919050217,-0.009732049889862537,-0.023401079699397087,-0.041106004267930984,-0.10960312932729721,-0.03808106482028961,-0.03196916729211807,0.042266085743904114,0.06282860040664673,-0.006111680995672941,-0.01336653158068657,0.011350160464644432,0.06341265887022018,0.0008134640520438552,-0.0030612109694629908,0.0005897517548874021,-0.03963260352611542,0.03264145180583,-0.005084683187305927,0.03323659300804138,0.013996238820254803,-0.0013762267772108316,0.000046633766032755375,-0.032116521149873734,0.03379511460661888,0.01493867952376604,-0.027658334001898766,0.02330106496810913,-0.03392503038048744,-0.00584314065054059,-0.03954664617776871,-0.020081786438822746,-0.04017655551433563,-0.04807121306657791,-0.023381898179650307,-0.010875197127461433,-0.03565468266606331,0.04565398022532463,-0.008110401220619678,-0.029497699812054634,-0.01667596772313118,0.01364969927817583,-0.012147019617259502,-0.08246538043022156,0.019225316122174263,0.07585828006267548,-0.002603234024718404,0.03748638182878494,0.03178197517991066,0.03006111830472946,0.03036501072347164,0.012884293682873249,-0.04110458120703697,0.005578029900789261,0.03569415584206581,-0.023845024406909943,0.03576379269361496,0.04609382152557373,-0.016921693459153175,0.05199172720313072,0.010056663304567337,-0.04034477472305298,0.029614785686135292,-0.010972186923027039,0.0177837572991848,0.044658493250608444,0.04358789324760437,0.05737358704209328,-0.03585341200232506,0.012893297709524632,0.04301523044705391,0.05360071361064911,0.010585920885205269,-0.0196157768368721,0.03327053040266037,-0.03621239587664604,-0.006081817671656609,0.021417032927274704,0.03450566530227661,-0.01204787939786911,-0.020525936037302017,-0.0392349474132061,-0.012515479698777199,0.05121658369898796,0.001336695160716772,-6.463427770005516e-33,-0.03809593245387077,0.06196863204240799,-0.03087381087243557,0.013362127356231213,-0.047691941261291504,-0.09433846175670624,0.0042319451458752155,0.0033859668765217066,-0.033314261585474014,-0.02284059301018715,0.008212840184569359,0.006477948743849993,0.01228710450232029,0.037755247205495834,0.03515346348285675,-0.014882792718708515,0.020223237574100494,-0.013322750106453896,0.012822992168366909,0.06234016269445419,-0.027840087190270424,0.003884715959429741,0.015722500160336494,-0.02616111747920513,-0.045633714646101,0.01641341671347618,0.051776885986328125,-0.025183478370308876,-0.013377067632973194,-0.03687681630253792,-0.00647396594285965,0.00961705856025219,-0.039449580013751984,-0.05918081849813461,0.0018155513098463416,0.07384607940912247,-0.014091587625443935,-0.050778236240148544,0.011592026799917221,0.08433769643306732,0.018205925822257996,0.021592676639556885,-0.015474184416234493,0.016040343791246414,0.027499064803123474,-0.023853600025177002,-0.015829388052225113,-0.04004790261387825,0.006904510781168938,0.031377531588077545,0.007316490635275841,0.02686556614935398,0.0047987038269639015,-0.015574551187455654,0.0011865291744470596,0.06601975113153458,-0.041678447276353836,-0.01605890318751335,-0.008280768059194088,-0.03286457806825638,0.008154653012752533,-0.0050957161001861095,0.0004411408444866538,0.053072988986968994,0.03131894767284393,0.01164528913795948,0.047497957944869995,0.01770893670618534,-0.0006024236208759248,0.036419373005628586,-0.03701837360858917,0.06233212724328041,-0.018590789288282394,-0.1297549605369568,-0.007427420001477003,-0.06432123482227325,0.008388950489461422,-0.021752942353487015,0.06446100771427155,0.0371633879840374,0.06734267622232437,0.010837778449058533,0.016749484464526176,0.007355798967182636,-0.011845056898891926,-0.026517000049352646,0.02426096424460411,-0.017117077484726906,0.0252901092171669,0.01542858500033617,0.048915211111307144,0.005279203411191702,-0.02447602152824402,0.0419745072722435,0.059673722833395004,-0.00689631188288331,0.03449448198080063,0.019404087215662003,-0.03510226309299469,-0.024718351662158966,-0.00014686057693324983,0.0019222948467358947,-0.050079070031642914,-0.04296538233757019,0.0247707087546587,-0.012586136348545551,-0.06065543368458748,0.00010427730740047991,-0.06522010266780853,0.006399780046194792,0.05389309674501419,-0.017672644928097725,0.016069717705249786,-0.025004329159855843,0.00914081558585167,0.005386907607316971,-0.025180913507938385,0.0906715840101242,-0.04310232400894165,-0.06477829813957214,0.04034288972616196,-0.04903008043766022,0.028829162940382957,0.05202263966202736,-0.004717143718153238,0.01759345643222332,-0.07296565920114517,0.05062277242541313,0.0032707704231142998,0.007219318766146898,-0.0037252604961395264,0.0734495148062706,2.965989551739767e-7,-0.023782366886734962,0.07965542376041412,-0.05833125114440918,0.016021061688661575,0.010446188040077686,-0.004700282588601112,0.015587718226015568,-0.029894476756453514,-0.006155848503112793,-0.02870873361825943,-0.0003464916080702096,0.002531226957216859,0.0028197162318974733,0.04828285798430443,0.009770010598003864,-0.03283556550741196,-0.010723942890763283,-0.010316520929336548,0.006650938186794519,-0.03818933293223381,0.08652385324239731,0.002727002836763859,0.011851029470562935,0.018335780128836632,0.027689728885889053,0.011042002588510513,-0.028292164206504822,0.01738295704126358,0.014928950928151608,-0.018111906945705414,0.053562480956315994,-0.009141400456428528,-0.015758926048874855,0.009533898904919624,0.048464585095644,-0.040643639862537384,0.02652410790324211,-0.02597511187195778,-0.036280471831560135,0.022393949329853058,-0.0068984078243374825,0.016440393403172493,-0.035408567637205124,-0.04811891168355942,0.032607898116111755,-0.02779114805161953,-0.01412521954625845,0.07762846350669861,-0.040552981197834015,0.03297620639204979,0.015177277848124504,0.02982678823173046,0.028246214613318443,-0.034806765615940094,0.011316527612507343,-0.030304698273539543,-0.028854701668024063,0.023215975612401962,0.03023562580347061,0.06792481988668442,0.05293631926178932,0.020591210573911667,-0.010663803666830063,-0.0278735663741827,-0.012678269296884537,0.000971166999079287,-0.01914038509130478,2.636240313793354e-34,0.05245696380734444,-0.02327040582895279,0.0622091144323349,0.015708882361650467,-0.006943002343177795,-0.0002105476160068065,-0.08165425807237625,-0.017779244109988213,-0.014552119188010693,-0.028956126421689987,0.00677209859713912]'
SET
  @TechnicalDesignVector_d8d30fb8 = N'[-0.012913649901747704,-0.04445428401231766,-0.02836626209318638,-0.07745524495840073,0.009625479578971863,-0.05894647538661957,0.02222396992146969,0.030836356803774834,0.01944774203002453,-0.01286148652434349,-0.0206051804125309,-0.03517068922519684,0.04982403293251991,0.03987172618508339,0.06352907419204712,0.026959672570228577,0.005239170975983143,0.005446420516818762,-0.10817956179380417,0.026959506794810295,0.00064200593624264,0.014315868727862835,-0.05072157457470894,0.011280074715614319,0.030744630843400955,-0.024593371897935867,-0.010875345207750797,-0.04911592975258827,-0.008237211965024471,0.028959522023797035,0.06345567852258682,0.06529475003480911,-0.061253294348716736,0.00518190348520875,0.0000015969609421517816,0.020188910886645317,0.021827224642038345,-0.021294979378581047,-0.013206093572080135,0.027210477739572525,0.051547423005104065,0.04185578599572182,0.025273405015468597,-0.001807715743780136,0.01940912753343582,-0.06765863299369812,-0.039443571120500565,-0.06488664448261261,0.016705524176359177,-0.03464754670858383,0.008530662395060062,-0.012457207776606083,0.012529243715107441,0.00047629012260586023,0.0691375732421875,-0.005015009548515081,-0.008215264417231083,-0.04687756299972534,0.00852260272949934,-0.05268761143088341,0.04131825268268585,-0.035485461354255676,-0.0003004686441272497,-0.019609231501817703,0.023176338523626328,-0.016352079808712006,0.040576621890068054,-0.02593391388654709,0.010598373599350452,0.02169584296643734,0.1339120715856552,0.002724946243688464,-0.03473123162984848,0.0030272887088358402,-0.006592380348592997,0.08055976033210754,0.004599549807608128,-0.011645201593637466,-0.03197670355439186,0.0030661325436085463,0.012453609146177769,0.0017595315584912896,-0.03363601863384247,-0.01702508144080639,0.042826686054468155,0.02125891111791134,-0.007761585526168346,0.025247996672987938,0.007975581102073193,-0.04226868227124214,0.03622794151306152,0.0284630935639143,0.007915206253528595,-0.01389487087726593,-0.0711984634399414,0.020900025963783264,0.02361490949988365,-0.09483280777931213,0.02580305002629757,-0.03733023628592491,0.0844978466629982,0.036664217710494995,-0.050467394292354584,0.0005047458107583225,0.01463659293949604,0.06576654314994812,0.023892927914857864,-0.0002435854112263769,0.003507555229589343,-0.0259503535926342,-0.019761014729738235,0.01286923699080944,0.028635583817958832,0.00927969254553318,-0.013883796520531178,0.028155231848359108,-0.013445105403661728,0.016406001523137093,-0.01697213016450405,-0.00038425822276622057,0.01058367919176817,-0.03669052943587303,-0.030179891735315323,-0.04216622933745384,0.008752448484301567,-0.009657885879278183,0.05225947126746178,-0.06995422393083572,-0.026562636718153954,0.03854793682694435,0.008103023283183575,0.000678128213621676,0.004409260582178831,-0.01727255992591381,-0.003961074631661177,-0.02278858795762062,-0.01971677504479885,-0.02443426474928856,-0.003907756879925728,0.04946856573224068,0.00885202456265688,0.010795820504426956,0.033161524683237076,0.048708606511354446,-0.013230535201728344,-0.016966642811894417,0.0049731838516891,-0.061471570283174515,-0.018619537353515625,0.05086749792098999,0.019121460616588593,0.00823184009641409,0.027507320046424866,0.008349661715328693,-0.02528737485408783,0.01000245288014412,-0.11646566540002823,0.014900109730660915,0.00568432779982686,0.019452586770057678,-0.03933217003941536,-0.004723499063402414,0.021396398544311523,0.009116720408201218,-0.025501638650894165,0.01731802523136139,-0.13428916037082672,-0.039993587881326675,0.0957450345158577,-0.0443623848259449,-0.0028975987806916237,-0.03594055026769638,-0.02357240952551365,0.0031287679448723793,0.003365887328982353,-0.043591950088739395,-0.010834410786628723,0.03280239179730415,-0.050725653767585754,-0.015736447647213936,0.029334770515561104,0.018317654728889465,0.02154632657766342,0.025181876495480537,-0.05206015706062317,0.002179795643314719,-0.0034333362709730864,0.02830357849597931,0.0020580666605383158,0.00803319737315178,-0.0017696780851110816,-0.010514110326766968,-0.0269161369651556,-0.03916921466588974,0.004016726743429899,-0.048270657658576965,-0.04355544224381447,-0.019787611439824104,0.021660655736923218,0.04688503220677376,0.017893031239509583,-0.015217205509543419,0.04913032427430153,0.019446292892098427,0.025723369792103767,-0.037860751152038574,-0.09792986512184143,-0.01702103577554226,0.028454888612031937,-0.004372701980173588,0.0033655858132988214,-0.017719950526952744,-0.005622015800327063,0.008172019384801388,0.019572364166378975,0.005573257338255644,-0.0001426228991476819,-0.006239677779376507,-0.036480795592069626,-0.008971445262432098,-0.015883728861808777,0.010864786803722382,-0.004800307564437389,0.026450781151652336,0.07258709520101547,-0.01888864114880562,-0.014969831332564354,-0.019324371591210365,0.019072115421295166,-0.03897273913025856,-0.006401348859071732,-0.03694729506969452,-0.006692866329103708,0.02517024241387844,0.06158310920000076,0.0241111870855093,-0.01906735822558403,-0.00633901497349143,-0.02290886640548706,0.09332208335399628,-0.0671352744102478,0.06377894431352615,-0.03009903058409691,0.046960312873125076,0.01204923540353775,0.010599269531667233,-0.10950804501771927,0.003924294374883175,-0.005816551856696606,-0.015152748674154282,0.013044608756899834,0.07106345146894455,-0.013699623756110668,0.001980667468160391,-0.0011789248092100024,-0.025665264576673508,-0.012645036913454533,-0.02624964714050293,0.04998170956969261,0.03520798310637474,-0.0149168586358428,0.016910450533032417,-0.0006612497381865978,0.013279002159833908,0.05699943006038666,0.040095940232276917,-0.025765392929315567,0.005201119929552078,0.05679222196340561,-0.021861543878912926,-0.0016248663887381554,-0.01597696542739868,0.021655743941664696,-0.024740777909755707,0.028704769909381866,0.025502387434244156,0.04877111315727234,0.01578570529818535,-0.008550377562642097,-0.0005101386341266334,-0.0319913774728775,-0.048733219504356384,-0.012862383387982845,0.010034317150712013,-0.01996852643787861,0.007543659768998623,-0.022092508152127266,-0.05420706421136856,-0.01995941996574402,-0.2037590742111206,0.07757093757390976,0.017294934019446373,0.002014467492699623,-0.009449941106140614,-0.038746099919080734,-0.004495104309171438,-0.03375525772571564,0.05558565631508827,-0.0072544333525002,0.04143182933330536,-0.015554798766970634,0.08183526992797852,0.014670757576823235,-0.004491363652050495,0.0008818543283268809,-0.030201993882656097,-0.02527782879769802,0.02581045776605606,0.04877568036317825,0.03865049034357071,-0.036827314645051956,0.038644563406705856,-0.018546221777796745,-0.011272811330854893,0.016078323125839233,0.018432317301630974,0.00941796787083149,0.014591519720852375,-0.037772465497255325,0.004740030970424414,-0.0131534393876791,-0.018730107694864273,-0.008565091527998447,-0.013991689309477806,-0.08769556134939194,-0.028589243069291115,0.0066948747262358665,-0.009001263417303562,0.058682844042778015,0.014848794788122177,0.011226103641092777,0.10174234211444855,-0.02873137593269348,0.028741342946887016,0.05534624680876732,-0.03183478116989136,0.009402290917932987,0.0003078374429605901,0.002722471719607711,0.04550105705857277,-0.00895460695028305,0.016725696623325348,0.00787353515625,-0.025477120652794838,0.01500974502414465,-0.009554775431752205,-0.03470056131482124,0.022187232971191406,-0.11031527072191238,-0.0029860171489417553,-0.00760448444634676,0.029846109449863434,0.00280176755040884,0.0013189745368435979,-0.016342777758836746,0.006108653731644154,0.03982171043753624,-0.03705018386244774,-0.03269881382584572,0.0036293338052928448,-0.0074488758109509945,-0.005519341677427292,0.038773100823163986,0.027018418535590172,0.020288532599806786,0.0039316932670772076,0.028424419462680817,-0.028045175597071648,0.008458282798528671,-0.02405681274831295,-0.04234886169433594,0.00547323701903224,0.029574556276202202,0.021680671721696854,-0.0048822625540196896,0.007554743904620409,0.02779054082930088,-0.010298710316419601,-0.020863711833953857,-0.026977363973855972,0.025689316913485527,-0.01067535113543272,0.011818928644061089,-0.03990858048200607,0.0021126125939190388,-0.0024879323318600655,0.039133913815021515,-0.023401256650686264,0.011184541508555412,0.01780553162097931,0.011826017871499062,-0.04868702217936516,-0.06357518583536148,0.03253956139087677,0.023565372452139854,-0.006195856723934412,0.047460634261369705,0.027969704940915108,0.045713573694229126,-0.017449725419282913,-0.007340592797845602,0.07055848091840744,0.07306259870529175,0.013763736933469772,0.0007606282597407699,-0.004534047096967697,-0.07100600004196167,-0.003490593982860446,0.025896962732076645,0.0073718116618692875,-0.04042632877826691,0.044228557497262955,-0.033187057822942734,0.018578065559267998,-0.09866666793823242,-0.000050449401896912605,0.020924502983689308,-0.04469508305191994,-0.005196043755859137,-0.02178111858665943,0.02546856552362442,0.018467526882886887,0.028287015855312347,-0.015215300023555756,0.03293653205037117,-0.011900017037987709,0.01956474967300892,-0.0030324235558509827,-0.01769731566309929,-0.016007868573069572,-0.003559966804459691,0.04102017357945442,0.01058890763670206,-0.026385102421045303,-0.07247989624738693,0.008424684405326843,0.009103512391448021,0.03151222690939903,0.03623849153518677,-0.0030443312134593725,0.06538648158311844,0.030816219747066498,0.030434375628829002,-0.009066707454621792,0.0534624382853508,0.0319855734705925,-0.01805519498884678,0.08274069428443909,0.035649824887514114,-0.03352553769946098,-0.03587721660733223,0.038372378796339035,-0.11972062289714813,0.015175331383943558,-0.03125641122460365,-0.04515564441680908,0.044878944754600525,0.12664982676506042,-0.031667109578847885,0.02056398242712021,-0.021570054814219475,0.013388154096901417,-0.0032982819247990847,-0.028278734534978867,0.004536112770438194,-0.033081427216529846,-0.06915244460105896,0.02418091893196106,-0.016144031658768654,0.02618548646569252,-0.05374772474169731,0.014471471309661865,-0.002138611627742648,0.018948806449770927,-0.06612800061702728,-0.061566002666950226,-0.03736031427979469,0.058473195880651474,0.0032903614919632673,-0.01861133798956871,-0.012025052681565285,-0.015762507915496826,-0.0408700592815876,-0.012293069623410702,0.0069526382721960545,-0.030165856704115868,-0.012625894509255886,0.05351690575480461,0.011661229655146599,0.010497803799808025,-0.0024201672058552504,-0.002531150821596384,-0.027333807200193405,-0.027825208380818367,0.04810350388288498,0.1002521961927414,-0.04011136293411255,0.0164286270737648,-0.023287920281291008,-0.03368029743432999,0.016628172248601913,-0.019988395273685455,-0.020771238952875137,0.013188254088163376,-0.023170409724116325,-0.030010560527443886,-0.03642350807785988,0.03742451220750809,-0.026692718267440796,-0.046633198857307434,-0.01626550778746605,0.029049834236502647,-0.00011459436063887551,-0.026946216821670532,0.008564678020775318,0.12282001227140427,0.002440459793433547,0.026454029604792595,0.0330367349088192,0.005692167207598686,0.027031095698475838,0.018279485404491425,-0.019723933190107346,-0.014069100841879845,0.08553127944469452,0.012577099725604057,0.035439807921648026,0.057878416031599045,0.006165007129311562,0.03981773927807808,0.05861580744385719,0.014006243087351322,-0.0071411957032978535,0.04441750794649124,0.02427046187222004,0.04237182065844536,-0.049115702509880066,0.07319186627864838,-0.01586085930466652,-0.008847223594784737,-0.013508105650544167,0.04413216561079025,0.055395565927028656,-0.007392046041786671,0.014092611148953438,-0.0470254123210907,0.016768615692853928,-0.005741158500313759,0.03000180795788765,-0.0067470502108335495,0.0016616983339190483,-0.014567884616553783,-0.039263028651475906,0.009939540177583694,0.05420764163136482,-5.641176451103034e-33,-0.031140994280576706,0.0355537086725235,0.009372018277645111,0.03448370471596718,-0.038274116814136505,-0.035371631383895874,-0.04058675095438957,-0.034253381192684174,0.01259157806634903,-0.028312230482697487,0.002994716865941882,-0.06165564805269241,0.002410792512819171,0.01518844161182642,0.016874870285391808,-0.019799871370196342,0.011970850639045238,-0.012584204785525799,-0.020909763872623444,0.04026879742741585,-0.030300498008728027,0.010624988935887814,0.033289309591054916,0.03487320616841316,-0.032238367944955826,0.0018640646012499928,0.03781565651297569,-0.02001446671783924,-0.07933825254440308,-0.005907468497753143,-0.011125956661999226,0.02368962951004505,-0.03141738474369049,-0.10166653990745544,0.028649723157286644,0.05677791312336922,0.0325947143137455,-0.013033203780651093,0.0375845842063427,0.015614145435392857,0.0535895936191082,0.006008507218211889,-0.05634757876396179,0.01793391816318035,0.040878575295209885,-0.026261886581778526,-0.01600544899702072,-0.020196763798594475,-0.0013504575472325087,0.05703303962945938,-0.011160510592162609,0.0035280543379485607,-0.0004084935935679823,-0.040194883942604065,-0.0018581491895020008,0.030243927612900734,0.02256040833890438,0.02243906259536743,-0.022878240793943405,-0.055394500494003296,-0.05615304410457611,-0.02424231916666031,0.02043248899281025,0.0351397767663002,0.02614087611436844,0.01208625640720129,0.013700728304684162,0.015199522487819195,-0.06281446665525436,0.031180603429675102,-0.06802543997764587,0.012711375020444393,-0.00939702894538641,-0.07929234206676483,0.007118572946637869,-0.02612902596592903,0.00018650959827937186,0.0066031222231686115,0.120985247194767,-0.023205872625112534,0.052327875047922134,0.0223446786403656,-0.0010075690224766731,0.027358755469322205,-0.040846046060323715,-0.03770224750041962,0.06373675167560577,0.02242628112435341,-0.034995902329683304,0.012340415269136429,0.005618079099804163,0.04600472375750542,0.012569391168653965,0.060527950525283813,0.06073635071516037,-0.025506900623440742,0.03407621383666992,0.029273463413119316,-0.02833070233464241,-0.022951094433665276,0.02026008814573288,-0.013244159519672394,-0.02906583622097969,0.01948339119553566,0.0010107489069923759,0.031822796911001205,-0.025458326563239098,0.005459775682538748,0.011277387849986553,0.02121146023273468,0.006520586553961039,0.009172779507935047,0.006781499367207289,-0.0019505711970850825,0.034035664051771164,0.043147530406713486,-0.009033957496285439,0.08041651546955109,0.011103903874754906,0.011015195399522781,-0.01890091970562935,-0.013500175438821316,0.0030232160352170467,-0.0008484008139930665,-0.012640425004065037,0.005195077508687973,-0.013772299513220787,-0.05832579731941223,-0.030445832759141922,-0.00019691091438289732,0.01344611868262291,-0.019811449572443962,2.502317499875062e-7,-0.04678448289632797,0.02074136771261692,-0.03707212209701538,-0.04295460507273674,-0.00021811241458635777,0.006377984303981066,0.019954847171902657,-0.08404725790023804,0.0002743528748396784,-0.10022595524787903,-0.00587893184274435,-0.015306409448385239,0.029949789866805077,0.03607068955898285,-0.04147936776280403,-0.06856369972229004,-0.033293213695287704,0.022383978590369225,-0.03435901179909706,-0.011365575715899467,0.024867208674550056,-0.016141870990395546,0.05216122418642044,-0.04743863269686699,-0.006340255029499531,0.039470650255680084,-0.015443774871528149,0.0368688628077507,-0.014520208351314068,0.020063864067196846,0.03813830390572548,-0.04193735867738724,-0.029241172596812248,0.02061931975185871,0.01901123858988285,0.028481652960181236,-0.004048509988933802,-0.000041411269194213673,0.019502652809023857,0.017123112455010414,0.02548251487314701,0.014244941994547844,-0.03908855468034744,-0.046100035309791565,0.034466881304979324,-0.05457254871726036,-0.043263647705316544,0.053445346653461456,-0.024496158584952354,0.04352979734539986,-0.04586024582386017,-0.024074792861938477,0.0038770041428506374,-0.023762719705700874,0.0023596580140292645,-0.04703010246157646,-0.011662364937365055,-0.01263167429715395,0.04484153538942337,0.02231932058930397,-0.002872912911698222,0.01113949529826641,0.0227506086230278,-0.028363192453980446,-0.009627529419958591,-0.028210332617163658,-0.025031818076968193,2.5237131324072653e-34,0.013603939674794674,-0.04041654244065285,0.0652766078710556,0.005248537287116051,0.012704973109066486,-0.006582709960639477,0.037661097943782806,-0.035404570400714874,-0.01027667336165905,-0.019098443910479546,-0.03484080731868744]'
SET
  @HasCustomProps_d8d30fb8 = 0
SET
  @HasCustomEvents_d8d30fb8 = 0
SET
  @RequiresData_d8d30fb8 = 0
SET
  @DependencyCount_d8d30fb8 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_d8d30fb8 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_d8d30fb8 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_d8d30fb8 = 0
SET
  @ID_d8d30fb8 = 'A4FD56DF-352D-4EA9-9619-F0318D932449'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_d8d30fb8,
  @Name = @Name_d8d30fb8,
  @Version = @Version_d8d30fb8,
  @VersionSequence = @VersionSequence_d8d30fb8,
  @Title = @Title_d8d30fb8,
  @Description = @Description_d8d30fb8,
  @Type = @Type_d8d30fb8,
  @Status = @Status_d8d30fb8,
  @DeveloperName = @DeveloperName_d8d30fb8,
  @DeveloperEmail = @DeveloperEmail_d8d30fb8,
  @DeveloperOrganization = @DeveloperOrganization_d8d30fb8,
  @SourceRegistryID = @SourceRegistryID_d8d30fb8,
  @ReplicatedAt = @ReplicatedAt_d8d30fb8,
  @LastSyncedAt = @LastSyncedAt_d8d30fb8,
  @Specification = @Specification_d8d30fb8,
  @FunctionalRequirements = @FunctionalRequirements_d8d30fb8,
  @TechnicalDesign = @TechnicalDesign_d8d30fb8,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_d8d30fb8,
  @TechnicalDesignVector = @TechnicalDesignVector_d8d30fb8,
  @HasCustomProps = @HasCustomProps_d8d30fb8,
  @HasCustomEvents = @HasCustomEvents_d8d30fb8,
  @RequiresData = @RequiresData_d8d30fb8,
  @DependencyCount = @DependencyCount_d8d30fb8,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_d8d30fb8,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_d8d30fb8,
  @HasRequiredCustomProps = @HasRequiredCustomProps_d8d30fb8,
  @ID = @ID_d8d30fb8;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_83070fb8 NVARCHAR(MAX),
@Name_83070fb8 NVARCHAR(500),
@Version_83070fb8 NVARCHAR(50),
@VersionSequence_83070fb8 INT,
@Title_83070fb8 NVARCHAR(1000),
@Description_83070fb8 NVARCHAR(MAX),
@Type_83070fb8 NVARCHAR(255),
@Status_83070fb8 NVARCHAR(50),
@DeveloperName_83070fb8 NVARCHAR(255),
@DeveloperEmail_83070fb8 NVARCHAR(255),
@DeveloperOrganization_83070fb8 NVARCHAR(255),
@SourceRegistryID_83070fb8 UNIQUEIDENTIFIER,
@ReplicatedAt_83070fb8 DATETIMEOFFSET,
@LastSyncedAt_83070fb8 DATETIMEOFFSET,
@Specification_83070fb8 NVARCHAR(MAX),
@FunctionalRequirements_83070fb8 NVARCHAR(MAX),
@TechnicalDesign_83070fb8 NVARCHAR(MAX),
@FunctionalRequirementsVector_83070fb8 NVARCHAR(MAX),
@TechnicalDesignVector_83070fb8 NVARCHAR(MAX),
@HasCustomProps_83070fb8 BIT,
@HasCustomEvents_83070fb8 BIT,
@RequiresData_83070fb8 BIT,
@DependencyCount_83070fb8 INT,
@TechnicalDesignVectorEmbeddingModelID_83070fb8 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_83070fb8 NVARCHAR(MAX),
@HasRequiredCustomProps_83070fb8 BIT,
@ID_83070fb8 UNIQUEIDENTIFIER
SET
  @Namespace_83070fb8 = N'CRM/Customer'
SET
  @Name_83070fb8 = N'OverviewTab'
SET
  @Version_83070fb8 = N'1.0.0'
SET
  @VersionSequence_83070fb8 = 1
SET
  @Title_83070fb8 = N'Overview Tab'
SET
  @Description_83070fb8 = N'Overview tab showing customer summary and key metrics'
SET
  @Type_83070fb8 = N'Other'
SET
  @Status_83070fb8 = N'Deprecated'
SET
  @Specification_83070fb8 = N'{}'
SET
  @FunctionalRequirements_83070fb8 = N'## Overview Tab

### Purpose
Displays summary information and key metrics in the overview tab.

### Features
- Summary cards
- Key metrics display
- Recent activity
- Quick actions'
SET
  @TechnicalDesign_83070fb8 = N'## Implementation

### Props
- data: Overview data object
- metrics: Key metrics to display
- onAction: Action handler'
SET
  @FunctionalRequirementsVector_83070fb8 = N'[-0.0325532965362072,-0.05697324126958847,-0.030377015471458435,-0.015313406474888325,0.048733342438936234,0.01733272150158882,0.008482708595693111,0.028397521004080772,-0.03533897548913956,0.006263118237257004,0.014177624136209488,0.024428246542811394,0.04015069454908371,0.14147692918777466,0.00007865962106734514,-0.08943329006433487,0.005961935967206955,0.0030900530982762575,-0.018042052164673805,0.045844584703445435,-0.0059953657910227776,-0.010539839044213295,0.0022640095558017492,0.005915282294154167,-0.02278762310743332,0.02551022730767727,0.02179761603474617,-0.04376718029379845,-0.002513305051252246,-0.06864901632070541,0.03751624748110771,0.004160238429903984,-0.029092393815517426,-0.04412029683589935,0.0000023382071958621964,0.005515926983207464,0.00016921515634749085,-0.015313985757529736,-0.05303238704800606,0.029594305902719498,0.06570706516504288,-0.0036369774024933577,0.06959879398345947,0.002015901729464531,0.046052590012550354,-0.03352111205458641,-0.04490584880113602,0.07318583875894547,-0.01666855998337269,-0.009770616888999939,0.00588248111307621,-0.023634927347302437,-0.049916982650756836,-0.05670289695262909,0.036825165152549744,-0.0617501363158226,-0.02180330455303192,0.06507115066051483,0.014928050339221954,-0.04472007974982262,-0.0005774227320216596,0.02739289030432701,0.0073873428627848625,0.006774113513529301,0.10732737928628922,0.035679664462804794,0.0373588427901268,-0.06437914073467255,0.042713843286037445,0.01588066667318344,0.09880837798118591,0.006272506434470415,0.007674896623939276,-0.06771756708621979,-0.007294295821338892,-0.055331334471702576,-0.04111538454890251,-0.006589036900550127,0.029005397111177444,-0.006054047029465437,-0.07281652837991714,0.011853558011353016,-0.0019457467133179307,-0.04096075892448425,-0.0036049021873623133,-0.08223425596952438,-0.0278615839779377,0.024551821872591972,-0.011118309572339058,-0.004267960321158171,0.04225796461105347,-0.015199942514300346,-0.04654356837272644,-0.011141824536025524,-0.06167445704340935,-0.020949603989720345,0.04764462634921074,-0.04706806689500809,0.0477706678211689,-0.03665298968553543,0.02729736641049385,0.023891113698482513,0.012083390727639198,0.019747858867049217,0.016411928460001945,0.07088759541511536,0.023308025673031807,-0.062127504497766495,-0.04025747999548912,0.02762368507683277,-0.009535233490169048,-0.024072427302598953,0.00710725225508213,0.07215844839811325,-0.0014152053045108914,0.028525469824671745,-0.0429355688393116,0.009303261525928974,-0.012645422481000423,-0.003894142573699355,0.10639398545026779,0.009278176352381706,0.026883181184530258,0.0025570536963641644,-0.014271375723183155,-0.03258785977959633,-0.04377250745892525,-0.033101219683885574,-0.016696589067578316,0.02935805171728134,-0.011928272433578968,-0.011639097705483437,-0.04390661418437958,-0.0011720783077180386,0.0003378398541826755,-0.012928522191941738,-0.00609208457171917,-0.03831743076443672,-0.035801008343696594,0.011796860024333,0.01755562797188759,-0.022717120125889778,-0.07202514261007309,0.010647030547261238,-0.005563926417380571,-0.009036452509462833,-0.008227999322116375,0.06664668768644333,0.0044709304347634315,0.013491444289684296,-0.03296365216374397,-0.03603197634220123,0.0005705410148948431,0.044779468327760696,0.017428265884518623,-0.011289299465715885,-0.03733867406845093,-0.0001782840263331309,-0.012595259584486485,0.021258164197206497,-0.016820011660456657,0.0031469857785850763,0.003295740345492959,-0.016044633463025093,-0.02977551333606243,-0.009020430035889149,-0.02133234031498432,-0.020357782021164894,-0.013591243885457516,-0.07493539899587631,-0.0710195004940033,-0.039973922073841095,-0.009174227714538574,0.06810291111469269,0.016218986362218857,0.0583314523100853,0.036748576909303665,-0.003121858462691307,-0.062106747180223465,-0.022902896627783775,0.0041734566912055016,-0.1452288180589676,-0.003239253768697381,0.034494318068027496,-0.007223507389426231,0.02354346215724945,0.01023121178150177,0.010735890828073025,-0.03755158185958862,-0.04722083359956741,-0.030542481690645218,0.011896658688783646,-0.08177855610847473,-0.0015813003992661834,0.026960555464029312,-0.011747962795197964,-0.016313442960381508,-0.010684416629374027,-0.014688072726130486,-0.021455762907862663,-0.00212721130810678,-0.004433241207152605,0.06257236003875732,0.02971123717725277,0.055674534291028976,-0.02095942012965679,-0.017602896317839622,-0.011378954164683819,-0.006089542526751757,-0.027200255542993546,0.06122215837240219,0.017879696562886238,-0.018339764326810837,0.011102797463536263,-0.03583308681845665,-0.005097167566418648,0.01780262216925621,0.028182489797472954,-0.02623939700424671,0.011119699105620384,0.013729852624237537,-0.02911982871592045,-0.10515033453702927,0.02310715615749359,0.06646547466516495,0.02898550033569336,0.017495399340987206,0.0059007941745221615,0.0037749717012047768,0.018653953447937965,-0.002106302883476019,-0.013605648651719093,0.050736118108034134,0.015879405662417412,0.053504668176174164,0.02987496554851532,0.0692397803068161,0.07708438485860825,-0.005119705107063055,-0.033727213740348816,-0.014837709255516529,-0.006502831820398569,0.0005988758057355881,-0.0046114311553537846,0.009584574960172176,-0.04819200187921524,-0.03804581239819527,-0.0036254683509469032,0.04655139520764351,-0.006538869347423315,-0.018219392746686935,0.03928695246577263,0.06275542825460434,-0.0014803899684920907,-0.016964510083198547,0.06290760636329651,-0.13700613379478455,0.0033511067740619183,0.007332692854106426,0.05962226167321205,0.004739022813737392,-0.03130073472857475,-0.01482413336634636,0.016004834324121475,-0.0055947988294065,0.0025185025297105312,0.022624921053647995,-0.045831333845853806,0.011098039336502552,-0.010621263645589352,0.005830675363540649,0.032378070056438446,0.03396876901388168,-0.02344368025660515,0.007180305197834969,0.03806766867637634,-0.0674910694360733,0.03253573924303055,-0.023865792900323868,-0.0043395571410655975,0.0355122908949852,0.014045179821550846,-0.02628445252776146,0.039764758199453354,0.0019909655675292015,0.020952846854925156,0.04286033660173416,-0.10892249643802643,0.03675111383199692,-0.10030964761972427,0.04317392408847809,0.0012918616412207484,0.032783761620521545,-0.000651399081107229,-0.016423232853412628,-0.014575034379959106,-0.03271612524986267,0.04060272499918938,-0.014257810078561306,0.07892126590013504,-0.005449220072478056,0.03105350211262703,-0.02993495762348175,0.009332651272416115,-0.021983567625284195,0.006134874653071165,0.004608335439115763,-0.038635239005088806,0.011006657965481281,0.01318591833114624,-0.007347093895077705,0.020490597933530807,-0.008019397966563702,-0.04713933914899826,0.005377916619181633,-0.0008119160193018615,-0.050749633461236954,0.05824564769864082,-0.017179392278194427,0.028208119794726372,-0.0023226060438901186,0.013023348525166512,-0.05826516076922417,0.0554908849298954,-0.01649225689470768,0.009058522060513496,-0.022740941494703293,0.012348278425633907,0.04571045562624931,-0.006825120188295841,0.02103668451309204,0.028138717636466026,-0.03809496760368347,0.03860693424940109,-0.026441413909196854,-0.022920550778508186,-0.013123112730681896,0.017745040357112885,-0.010132024995982647,-0.0022791780065745115,-0.017135467380285263,0.017433859407901764,-0.013543996959924698,-0.040905389934778214,0.0052076419815421104,-0.006549467798322439,-0.023885421454906464,-0.020995868369936943,-0.1055847555398941,0.025885825976729393,0.049157869070768356,0.020229162648320198,0.008743919432163239,-0.01611560396850109,0.00555972196161747,-0.07086747884750366,-0.01962568610906601,-0.01567804254591465,-0.034315116703510284,-0.06726290285587311,-0.009730563499033451,0.00915325153619051,0.018117524683475494,0.020995354279875755,0.04583040997385979,-0.009188140742480755,-0.013038035482168198,-0.018832361325621605,0.0013431223342195153,0.010836964473128319,0.0017167014302685857,0.02488585002720356,0.054823849350214005,0.08112552016973495,-0.0060811033472418785,-0.0043605319224298,-0.0010599351953715086,0.0217951238155365,-0.01823762059211731,0.039629947394132614,0.017831765115261078,0.03959577530622482,0.03148564323782921,-0.047821540385484695,0.036828115582466125,0.005856805481016636,-0.0006822975701652467,0.02093464881181717,0.0052984002977609634,-0.004353562369942665,0.012993058189749718,-0.048985619097948074,-0.09031552821397781,0.0013332037487998605,-0.0007508156122639775,-0.040265027433633804,-0.02336728386580944,0.016697008162736893,-0.009457492269575596,-0.011149611324071884,0.01688423939049244,-0.04409615322947502,0.03285769000649452,-0.00006690512964269146,-0.019788820296525955,-0.0447118878364563,-0.00011356124741723761,0.026429355144500732,-0.02609315700829029,0.04209823161363602,-0.03490062803030014,0.03947918862104416,0.010220950469374657,0.01294480636715889,0.02449089102447033,0.0015125530771911144,-0.0052460008300840855,0.012969004921615124,0.002575618913397193,0.0582856722176075,0.031198205426335335,0.0205055121332407,-0.013062341138720512,0.01304860133677721,0.028434796258807182,-0.013809035532176495,0.03545599803328514,-0.058539051562547684,-0.0026096946094185114,0.012678955681622028,0.031139036640524864,-0.004679660312831402,-0.03675560653209686,-0.02070211060345173,-0.06943555176258087,0.040583934634923935,0.001352679100818932,-0.006024445407092571,-0.0692664384841919,0.012954291887581348,0.01690894365310669,0.0324263833463192,0.01640307903289795,-0.0038384548388421535,0.005221698433160782,0.019636353477835655,0.01074338611215353,-0.0628582015633583,-0.01744380034506321,-0.008428572677075863,-0.0020079852547496557,-0.030308512970805168,-0.029754668474197388,0.004636051133275032,-0.006636106409132481,-0.007362981326878071,0.061540763825178146,-0.012518584728240967,-0.015538089908659458,-0.04514465481042862,0.04249172285199165,0.02691676840186119,-0.04387825354933739,-0.03534715995192528,0.04227631911635399,0.04223194718360901,-0.04890173673629761,0.01714533567428589,0.02318303845822811,-0.0382431261241436,-0.03333743289113045,-0.004076222889125347,-0.02251024730503559,-0.04262702167034149,-0.10007065534591675,-0.049258701503276825,-0.037782423198223114,-0.056449174880981445,0.045629069209098816,-0.024341894313693047,0.005711926147341728,0.03179696574807167,0.035286031663417816,-0.05809207633137703,-0.039785273373126984,-0.028750747442245483,-0.02398289367556572,0.02110937610268593,0.02190382219851017,0.045398447662591934,0.007956994697451591,0.010642540641129017,-0.03304968774318695,0.04739230126142502,-0.027857983484864235,0.03273818641901016,-0.01279413141310215,-0.07402294129133224,-0.09787684679031372,-0.02390318550169468,-0.020901434123516083,0.0034089733380824327,-0.006969178561121225,-0.0832553505897522,-0.014551065862178802,-0.019044948741793633,0.015588301233947277,-0.014393282122910023,-0.0289166197180748,0.013423268683254719,0.002657541073858738,0.036483101546764374,0.009622280485928059,-0.0261384267359972,0.01689469814300537,0.0892670750617981,0.01247867476195097,0.041827403008937836,-0.03425263240933418,-0.032485950738191605,0.016457658261060715,0.013972829096019268,0.010265516117215157,-0.016865845769643784,0.04741518199443817,-0.025601498782634735,0.03127880394458771,-0.0038796099834144115,-0.0244307778775692,0.0814516469836235,-0.04744982346892357,0.005136641673743725,0.02147020772099495,0.008935623802244663,-0.002241884358227253,0.04542601481080055,0.07622706890106201,0.06761431694030762,-0.036855682730674744,-0.010413283482193947,-0.0064115580171346664,0.0075011239387094975,0.06112765893340111,0.00825494434684515,0.005542824510484934,-0.024856459349393845,-0.003133792197331786,-0.01371164433658123,0.008213755674660206,-0.03952820599079132,-0.005037971306592226,-0.08123700320720673,-0.08458913862705231,0.0818871408700943,0.014260084368288517,-7.121974970166686e-33,-0.03184870257973671,0.011918224394321442,-0.04035956412553787,-0.0006757040973752737,-0.033128585666418076,-0.024721834808588028,0.0012860451824963093,-0.012338698841631413,-0.04315096512436867,-0.025053417310118675,-0.014385882765054703,0.004901938606053591,0.004916175734251738,-0.015035544522106647,0.036685340106487274,-0.00207090238109231,0.04606052115559578,0.016051828861236572,0.010039497166872025,0.0011418667854741216,-0.008131536655128002,-0.006927732843905687,0.030188189819455147,-0.03765622153878212,-0.027711734175682068,0.02740626595914364,0.004840271547436714,0.035541143268346786,-0.0063162995502352715,-0.018590664491057396,-0.00040121941128745675,-0.0337434820830822,-0.024879587814211845,-0.027253730222582817,-0.01724858768284321,0.010796706192195415,0.016468167304992676,-0.04413536563515663,0.044493891298770905,0.020299583673477173,0.06506270915269852,-0.020591985434293747,-0.03613802045583725,0.03240988776087761,-0.0026225585024803877,-0.05125939100980759,0.020737404003739357,-0.006525027099996805,-0.0050901975482702255,-0.008744243532419205,0.020965784788131714,0.003949242178350687,-0.003999702632427216,0.058257441967725754,-0.005870492663234472,0.035110194236040115,-0.0142088383436203,-0.046041738241910934,0.015259315259754658,-0.0017024470726028085,0.0917859897017479,-0.0027788153383880854,0.012088654562830925,0.06256958842277527,0.0461433082818985,0.04680229723453522,-0.015508875250816345,0.0612458735704422,-0.026615016162395477,0.013802354224026203,-0.041202936321496964,0.06655405461788177,0.02335568517446518,-0.09198605269193649,-0.025233233347535133,-0.0004480638599488884,-0.009600353427231312,0.016782505437731743,0.001697656698524952,0.061591483652591705,0.0008231264655478299,0.025432026013731956,-0.048154473304748535,0.01578330434858799,0.011569401249289513,-0.01285356655716896,-0.025313034653663635,0.013991888612508774,0.019671522080898285,0.04944474622607231,0.02824384532868862,0.051501162350177765,-0.07444716989994049,-0.003789358539506793,0.07913539558649063,0.0038343120831996202,0.08615726232528687,-0.011536017060279846,-0.011431556195020676,-0.04126455634832382,-0.016521116718649864,0.024146223440766335,0.0032928253058344126,0.07266067713499069,-0.012736815959215164,0.018292641267180443,-0.010333972983062267,-0.01962091401219368,-0.029058318585157394,0.0024016443639993668,0.03564601391553879,0.007794341072440147,-0.013051243498921394,-0.03692866489291191,-0.030385183170437813,0.04502105340361595,-0.024620555341243744,0.09588231891393661,-0.05355629697442055,-0.03909418731927872,0.02214997634291649,0.008038721047341824,0.032453473657369614,-0.002466413425281644,0.053420186042785645,-0.024910632520914078,-0.05802267789840698,-0.010052787140011787,0.09979192167520523,0.04775266721844673,-0.01462145522236824,0.032450806349515915,3.0633140113422996e-7,-0.008129775524139404,0.03266584500670433,0.009428679943084717,0.013022314757108688,-0.012322905473411083,0.012696027755737305,0.03203219547867775,0.0030072235967963934,0.005296085029840469,0.01539174560457468,0.054466910660266876,0.010109329596161842,0.010054524056613445,0.04061554744839668,0.019846314564347267,-0.08287803828716278,-0.0001964105322258547,-0.05964098498225212,-0.05945541709661484,0.0016589692095294595,0.07083426415920258,-0.015527875162661076,0.021206796169281006,0.04581610858440399,0.03789697214961052,-0.03375229239463806,-0.05078691989183426,-0.02059660106897354,-0.016565199941396713,-0.009050833061337471,0.0371379628777504,0.06691540032625198,-0.026622837409377098,-0.004082262050360441,0.007828634232282639,0.001453980104997754,0.004534317180514336,0.006286463234573603,0.02070237323641777,-0.004031422547996044,-0.01488660741597414,0.0011750083649531007,-0.03391069918870926,-0.02042507752776146,0.01543701533228159,-0.034445539116859436,0.04804627224802971,0.0368441604077816,-0.03159608691930771,0.006616458762437105,0.0072905137203633785,0.0027484477031975985,0.051493190228939056,-0.009835785254836082,0.02057458646595478,-0.006952744908630848,-0.016382822766900063,0.009125938639044762,0.03192056342959404,0.09024137258529663,-0.00277518667280674,-0.010150228627026081,0.02452053315937519,0.009455960243940353,0.03317353129386902,-0.024368641898036003,-0.03179009631276131,2.9604198448198033e-34,0.0037878495641052723,-0.03457525372505188,0.03021496720612049,-0.03342703729867935,0.030242063105106354,0.0023901774547994137,-0.09097042679786682,-0.02325327694416046,0.017716603353619576,-0.053143031895160675,-0.025350764393806458]'
SET
  @TechnicalDesignVector_83070fb8 = N'[-0.05261015146970749,0.0068922946229577065,-0.012910447083413601,-0.039564650505781174,-0.014319738373160362,-0.0030376105569303036,-0.009615093469619751,0.07853111624717712,-0.01331858616322279,-0.042209479957818985,0.02738657407462597,-0.01946065202355385,0.041734687983989716,0.11962947994470596,0.0500660315155983,-0.08571106195449829,-0.007031070068478584,0.06749895215034485,-0.07822055369615555,-0.006661972030997276,0.02304990589618683,-0.027356628328561783,-0.0037558202166110277,0.008385651744902134,0.015809470787644386,-0.03858043625950813,-0.0024889709893614054,-0.062363170087337494,0.0619899220764637,-0.03573916107416153,0.016844209283590317,0.06912066787481308,-0.01820448972284794,-0.01491586584597826,0.0000018042898091152892,-0.019403580576181412,0.02599315531551838,0.03917664289474487,-0.019611075520515442,0.0006959577440284193,0.04513687640428543,-0.039198968559503555,0.05227363109588623,-0.00852261669933796,0.01376622635871172,-0.06255842745304108,-0.04909908398985863,0.021871034055948257,0.008734933100640774,0.030846452340483665,-0.012915384955704212,-0.016775021329522133,0.00677639851346612,-0.0046933842822909355,0.05367492511868477,0.04032304510474205,-0.019829178228974342,-0.01976013369858265,0.003722983645275235,0.001117811305448413,-0.006005213595926762,-0.026785241439938545,0.013464842922985554,-0.017196960747241974,0.016806233674287796,-0.029111923649907112,0.07409702241420746,-0.008272804319858551,0.0031092322897166014,0.00913265161216259,0.1263488382101059,-0.005794548895210028,0.0349297933280468,-0.016892271116375923,-0.049807317554950714,-0.03908708691596985,-0.01732053980231285,-0.07717916369438171,0.00014941018889658153,0.012321395799517632,-0.02361038513481617,0.008325295522809029,-0.006514998618513346,-0.014283704571425915,0.04801134765148163,-0.018244661390781403,-0.020095573738217354,0.03712581843137741,-0.049852658063173294,0.01706383004784584,0.028719939291477203,-0.03540913760662079,0.006960631348192692,-0.011601552367210388,-0.039831772446632385,0.016918469220399857,0.04916511848568916,-0.10746439546346664,0.04484080150723457,-0.15549896657466888,0.0315934494137764,0.05847301334142685,-0.0265351589769125,-0.0037617243360728025,0.032919492572546005,0.15705808997154236,0.019099440425634384,0.000515164399985224,-0.02091352269053459,0.015193083323538303,-0.03750823810696602,0.003745131427422166,0.050921909511089325,0.06147685647010803,-0.015814702957868576,0.01893887296319008,-0.05762462317943573,-0.004570052959024906,-0.050015244632959366,0.0012994012795388699,0.05460372939705849,-0.037672869861125946,0.008595001883804798,-0.009349309839308262,-0.028610290959477425,0.037471868097782135,0.01826048083603382,-0.10238978266716003,-0.024448212236166,0.041136957705020905,0.01804450713098049,-0.004743044264614582,0.03520064055919647,0.032261382788419724,-0.014440324157476425,0.02876012772321701,0.008180548436939716,-0.029759220778942108,0.02725399099290371,0.024819636717438698,0.03427109122276306,-0.0011305747320875525,-0.018386023119091988,-0.0032927922438830137,0.0003788221802096814,0.024032188579440117,0.024378642439842224,-0.05513548478484154,-0.02851255051791668,0.023906057700514793,0.0029981269035488367,-0.028513140976428986,0.005299561191350222,0.006946871988475323,-0.07340274006128311,0.023560700938105583,0.0027105864137411118,0.05099382624030113,0.0068527702242136,0.003504591528326273,0.002785197924822569,0.036345046013593674,0.06726967543363571,0.014906279742717743,-0.014468679204583168,0.02923891320824623,-0.0899750292301178,-0.02065047062933445,0.0024586624931544065,-0.03575871139764786,-0.010346782393753529,-0.048129405826330185,-0.06106148660182953,0.03693654388189316,-0.0025184659752994776,-0.010719776153564453,0.041136980056762695,-0.01908181421458721,-0.06706103682518005,0.007671183906495571,0.01205905806273222,-0.085198312997818,0.007473265752196312,0.017559710890054703,0.03302477300167084,-0.021589187905192375,-0.030112994834780693,0.01581883616745472,0.02347959578037262,-0.03220915421843529,-0.05188171938061714,0.012171415612101555,-0.09104161709547043,-0.00389822106808424,-0.02539977803826332,-0.011430294252932072,-0.03508389741182327,0.006590844597667456,-0.0004232994688209146,0.04215057194232941,0.052078474313020706,-0.01545169297605753,0.05937527120113373,0.047687120735645294,0.05079880356788635,0.01438115630298853,-0.04110025241971016,0.011282159015536308,0.027915237471461296,-0.01987478695809841,0.04100831598043442,-0.011601067148149014,0.007034813053905964,0.026468686759471893,0.005382065661251545,-0.019449470564723015,0.005144865717738867,-0.0005259906174615026,-0.044559188187122345,0.02507500723004341,-0.03509727120399475,-0.02788510173559189,-0.000006630620646319585,-0.0018968632211908698,0.1181521862745285,0.01089867576956749,0.023406988009810448,-0.021294590085744858,0.00709570711478591,0.01363955158740282,0.030436480417847633,-0.0204246137291193,-0.012917219661176205,0.04962602257728577,0.06691146641969681,0.007530955132097006,0.04169474542140961,-0.01898702047765255,0.017744706943631172,0.07019009441137314,-0.0196011271327734,0.03631066903471947,-0.022345058619976044,0.057073790580034256,-0.010704612359404564,-0.024815594777464867,-0.018379101529717445,0.010350216180086136,-0.028205448761582375,-0.002660657512024045,0.021773161366581917,0.07036145776510239,0.006942868232727051,-0.03530804067850113,-0.009177076630294323,-0.06477639079093933,0.03955666348338127,0.0006192001164890826,0.007396026514470577,0.04239543527364731,0.014318476431071758,0.004263261333107948,0.026903457939624786,0.01009430829435587,-0.0033663755748420954,0.006864652037620544,0.06181199476122856,-0.008880430832505226,0.017235349863767624,0.004689964931458235,0.02411348931491375,0.013729309663176537,0.024839522317051888,-0.0176059752702713,0.032061539590358734,-0.00447115721181035,-0.013964401558041573,0.054438553750514984,-0.0008816952467896044,-0.03814268112182617,0.004630225710570812,-0.027119534090161324,0.026513414457440376,0.02861976809799671,-0.017493154853582382,0.021035565063357353,0.010114671662449837,0.007707574870437384,0.040865398943424225,-0.11080990731716156,0.0020842021331191063,0.00020343009964562953,0.028996331617236137,-0.05516558513045311,0.002763225929811597,-0.029766608029603958,0.03022877126932144,0.027666527777910233,-0.01676182635128498,0.058985061943531036,-0.002115716226398945,0.010105893015861511,-0.03902909904718399,-0.02431328035891056,-0.05095026642084122,0.0080229127779603,-0.012510566040873528,0.015902971848845482,0.04160061478614807,0.03598594292998314,-0.00363061111420393,0.0222184881567955,-0.03151857852935791,-0.038345783948898315,-0.011894075199961662,-0.011165156960487366,-0.03366827592253685,0.011053483933210373,-0.03171980008482933,0.05053508281707764,-0.017862502485513687,-0.018465593457221985,-0.03608570620417595,0.012767978012561798,-0.032144274562597275,0.008051665499806404,0.045349568128585815,-0.007983498275279999,0.10549796372652054,0.04976822808384895,0.015217572450637817,-0.044876035302877426,0.017070338129997253,0.05775775387883186,0.005639519076794386,0.0187554731965065,-0.039528947323560715,-0.0732233077287674,0.024062160402536392,0.005467382725328207,-0.017333807423710823,-0.011330156587064266,0.016947660595178604,-0.008488284423947334,0.001029438921250403,-0.0654778704047203,-0.12865111231803894,0.009975017048418522,-0.07680114358663559,0.0037168185226619244,0.02104164846241474,0.02135777659714222,0.013657021336257458,-0.009994268417358398,-0.02248433604836464,-0.002240172354504466,0.019067808985710144,-0.014321766793727875,-0.023770451545715332,-0.028056906536221504,0.043825943022966385,0.04808904975652695,0.10887197405099869,-0.021046211943030357,-0.031068410724401474,0.04781627655029297,0.014593924395740032,0.03795613721013069,0.003924292977899313,-0.03279649466276169,-0.01399955339729786,0.0005171720404177904,0.040857359766960144,0.0020509925670921803,-0.016640281304717064,-0.005916299298405647,0.020403729751706123,0.003973778337240219,-0.035259030759334564,-0.010337982326745987,0.04282032325863838,-0.04177573695778847,0.027040153741836548,-0.0014828824205324054,0.042646054178476334,-0.06227404624223709,0.026939645409584045,0.026096101850271225,0.0021265463437885046,0.03390290588140488,-0.015392790548503399,-0.0189714003354311,-0.06806037575006485,-0.02699238434433937,0.04941212013363838,-0.015994451940059662,-0.03387397155165672,-0.000925494940020144,0.047356124967336655,0.0026405206881463528,-0.011147632263600826,0.08647122234106064,0.008356892503798008,-0.01820976845920086,0.0004903945373371243,-0.06409352272748947,-0.015234091319143772,0.04179472476243973,0.05852333456277847,0.05889800563454628,-0.06612592935562134,0.019270841032266617,-0.042711298912763596,-0.009171518497169018,-0.07196521759033203,-0.0021359389647841454,-0.0006897957064211369,-0.07347003370523453,0.021748371422290802,0.028874864801764488,-0.029322264716029167,-0.04233066737651825,0.005124453920871019,0.02582732029259205,0.015513087622821331,-0.024796387180685997,0.011936385184526443,-0.005544907413423061,-0.035779040306806564,-0.033142901957035065,0.029177473857998848,0.0011936428491026163,0.02268034592270851,0.005374770145863295,-0.06558552384376526,-0.0335068553686142,-0.04751398041844368,0.006162246689200401,0.005588347092270851,-0.03568480536341667,0.0461249016225338,-0.013512231409549713,0.0772835910320282,0.008001784794032574,-0.004807490389794111,-0.07535433024168015,0.006565281189978123,0.03836192935705185,0.06918013840913773,-0.0074834153056144714,-0.0002313664590474218,-0.036479827016592026,-0.08324796706438065,0.022789238020777702,0.023429423570632935,-0.06901969015598297,0.07531527429819107,0.04397166892886162,-0.050942935049533844,0.028485065326094627,0.03883545845746994,0.03828728199005127,-0.024456040933728218,-0.0015164912911131978,0.016568783670663834,0.030840039253234863,0.042094677686691284,-0.019521629437804222,0.01312539353966713,0.009878190234303474,-0.020850174129009247,-0.02364615723490715,-0.02438962273299694,0.022664573043584824,-0.017153963446617126,-0.0201767235994339,-0.0040357341058552265,-0.02436494082212448,0.0037305110599845648,-0.05004683881998062,-0.008471870794892311,0.03335326910018921,-0.03266686573624611,-0.07914451509714127,0.009191726334393024,-0.0502401664853096,0.015098316594958305,0.02301603928208351,-0.014780481345951557,-0.0002002964320126921,-0.03282169997692108,0.010351927950978279,-0.03714122623205185,0.11141867190599442,0.045777950435876846,0.00844434555619955,-0.03480762988328934,-0.008745953440666199,0.014039576053619385,0.0007727013435214758,0.011270424351096153,-0.011679480783641338,0.014360884204506874,-0.0670437291264534,0.02891038917005062,-0.014219217002391815,-0.023035436868667603,0.01419546827673912,-0.0019707432948052883,-0.030587205663323402,0.00023763641365803778,0.007629960309714079,-0.023454660549759865,0.05474201589822769,-0.009718497283756733,0.09553101658821106,-0.03291911631822586,0.0343666672706604,0.05440901592373848,-0.06101303920149803,0.011320880614221096,0.01726824976503849,0.016740864142775536,-0.05962605029344559,0.07863713055849075,-0.001632380299270153,0.02559906616806984,0.04215533658862114,-0.0010167284635826945,0.02363518252968788,0.0018277463968843222,0.012090291827917099,-0.032987695187330246,0.007885272614657879,0.0038130839820951223,0.03301510959863663,0.030659757554531097,0.0004979821969754994,0.004142135847359896,-0.0558280386030674,-0.029905913397669792,-0.017073260620236397,0.010294286534190178,-0.014131349511444569,-0.0045783803798258305,-0.059166379272937775,0.022270331159234047,-0.05652850866317749,0.058580074459314346,0.005597743671387434,0.014365426264703274,-0.03170288726687431,-0.057083889842033386,0.010939490050077438,0.06648233532905579,-5.7900506065827686e-33,-0.013952684588730335,-0.008446970954537392,-0.0218169204890728,0.017770633101463318,-0.061825431883335114,-0.026692809537053108,-0.030897539108991623,-0.054506417363882065,-0.018804065883159637,-0.04648665711283684,-0.009047526866197586,-0.03397999703884125,-0.0036414775531738997,-0.017276465892791748,-0.025444315746426582,-0.017018219456076622,0.017683612182736397,-0.0020251318346709013,-0.051985807716846466,0.027225231751799583,0.008313494734466076,-0.03076968528330326,0.008565552532672882,0.018405238166451454,-0.007785008754581213,0.023274634033441544,-0.022177936509251595,0.05226456746459007,-0.04380020499229431,0.019246654585003853,-0.02677091956138611,0.00706466706469655,-0.011330505833029747,-0.022764557972550392,0.018673421815037727,0.07988472282886505,-0.03459357097744942,-0.042856618762016296,0.054493632167577744,0.015775376930832863,0.06330440938472748,0.026734888553619385,-0.013686194084584713,0.012048768810927868,0.0058832974173128605,-0.029307695105671883,-0.03377794846892357,0.02473314292728901,-0.0023023111280053854,0.039128340780735016,-0.014193595387041569,0.03149692714214325,-0.011718607507646084,0.05711288005113602,-0.0218153428286314,0.03702833503484726,0.054914720356464386,-0.007019458804279566,-0.012834088876843452,-0.022188806906342506,0.01638833060860634,-0.004265476483851671,0.02553148940205574,0.08032692968845367,0.06404107064008713,0.033543091267347336,-0.003404816146939993,0.014870615676045418,-0.035695284605026245,0.05751405283808708,-0.0002936424862127751,-0.008504116907715797,0.02378310076892376,0.043116066604852676,-0.0022400214802473783,0.007308553904294968,-0.03688764199614525,0.005895865149796009,0.001397997490130365,-0.015813251957297325,0.025465024635195732,0.052609506994485855,-0.02762151136994362,0.020642613992094994,-0.010541300289332867,-0.03014633245766163,0.03318267688155174,-0.012089108116924763,-0.02889317087829113,0.03493935987353325,-0.0382332019507885,0.09173089265823364,-0.03230925649404526,0.023111630231142044,-0.0028660716488957405,-0.01883079670369625,0.06023900583386421,0.034991346299648285,-0.006993458606302738,-0.02923000417649746,0.03178999572992325,-0.019173510372638702,-0.026945719495415688,0.035129155963659286,-0.00686546741053462,0.012121385894715786,-0.059672657400369644,0.01634693145751953,0.003795343218371272,0.036421291530132294,0.013644946739077568,-0.005868612788617611,-0.04863833263516426,-0.028732633218169212,0.016551822423934937,0.012792857363820076,0.027340730652213097,0.018198570236563683,-0.012532168067991734,0.03152613714337349,0.007698388304561377,0.007016513030976057,-0.011740747839212418,0.022138148546218872,-0.00033727087429724634,-0.03541630879044533,-0.051686469465494156,-0.06585586816072464,0.060827042907476425,-0.03336925804615021,0.012111885473132133,-0.015244659967720509,2.6074309289469966e-7,-0.06647828221321106,-0.0036578113213181496,-0.027824213728308678,-0.03825680539011955,-0.021421553567051888,-0.004344607703387737,0.004819439724087715,-0.030067913234233856,0.045927975326776505,-0.06182507053017616,0.004439899697899818,-0.005897935479879379,0.020951181650161743,0.031085899099707603,-0.0576799213886261,-0.029028454795479774,0.0043389806523919106,-0.04893059283494949,-0.04840323328971863,0.03724382445216179,-0.033368758857250214,-0.0012791664339601994,0.07487071305513382,-0.00535757839679718,0.011170938611030579,0.03562929481267929,0.002215126296505332,-0.006087548565119505,-0.011695903725922108,-0.0023724737111479044,0.011110961437225342,-0.012116490863263607,-0.020073089748620987,0.0017977009993046522,-0.005228812340646982,0.027791989967226982,0.03236042335629463,-0.006296124309301376,0.01615273766219616,0.002681715413928032,-0.02385714277625084,-0.04145195707678795,-0.028996475040912628,-0.04728787764906883,0.04567630961537361,-0.00036263366928324103,-0.05908321216702461,0.039060428738594055,-0.010871443897485733,0.007161226589232683,-0.07105395197868347,-0.029384708032011986,-0.014799603261053562,-0.02089083194732666,0.014659405685961246,-0.02550613135099411,-0.022298181429505348,0.035997167229652405,0.018855754286050797,-0.004024764522910118,-0.00010305645264452323,-0.032734259963035583,0.014559970237314701,0.03541836515069008,0.007025906816124916,-0.033224742859601974,-0.042896706610918045,2.587834053357217e-34,-0.013571430929005146,-0.04857112839818001,-0.004701829981058836,-0.013938351534307003,0.018631167709827423,-0.01662852056324482,0.03495600447058678,-0.029543297365307808,0.04285672679543495,-0.022510213777422905,-0.02260674349963665]'
SET
  @HasCustomProps_83070fb8 = 0
SET
  @HasCustomEvents_83070fb8 = 0
SET
  @RequiresData_83070fb8 = 0
SET
  @DependencyCount_83070fb8 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_83070fb8 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_83070fb8 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_83070fb8 = 0
SET
  @ID_83070fb8 = '6D3868E3-E374-42F5-88E3-315183ED141D'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_83070fb8,
  @Name = @Name_83070fb8,
  @Version = @Version_83070fb8,
  @VersionSequence = @VersionSequence_83070fb8,
  @Title = @Title_83070fb8,
  @Description = @Description_83070fb8,
  @Type = @Type_83070fb8,
  @Status = @Status_83070fb8,
  @DeveloperName = @DeveloperName_83070fb8,
  @DeveloperEmail = @DeveloperEmail_83070fb8,
  @DeveloperOrganization = @DeveloperOrganization_83070fb8,
  @SourceRegistryID = @SourceRegistryID_83070fb8,
  @ReplicatedAt = @ReplicatedAt_83070fb8,
  @LastSyncedAt = @LastSyncedAt_83070fb8,
  @Specification = @Specification_83070fb8,
  @FunctionalRequirements = @FunctionalRequirements_83070fb8,
  @TechnicalDesign = @TechnicalDesign_83070fb8,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_83070fb8,
  @TechnicalDesignVector = @TechnicalDesignVector_83070fb8,
  @HasCustomProps = @HasCustomProps_83070fb8,
  @HasCustomEvents = @HasCustomEvents_83070fb8,
  @RequiresData = @RequiresData_83070fb8,
  @DependencyCount = @DependencyCount_83070fb8,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_83070fb8,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_83070fb8,
  @HasRequiredCustomProps = @HasRequiredCustomProps_83070fb8,
  @ID = @ID_83070fb8;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_3ea5231e NVARCHAR(MAX),
@Name_3ea5231e NVARCHAR(500),
@Version_3ea5231e NVARCHAR(50),
@VersionSequence_3ea5231e INT,
@Title_3ea5231e NVARCHAR(1000),
@Description_3ea5231e NVARCHAR(MAX),
@Type_3ea5231e NVARCHAR(255),
@Status_3ea5231e NVARCHAR(50),
@DeveloperName_3ea5231e NVARCHAR(255),
@DeveloperEmail_3ea5231e NVARCHAR(255),
@DeveloperOrganization_3ea5231e NVARCHAR(255),
@SourceRegistryID_3ea5231e UNIQUEIDENTIFIER,
@ReplicatedAt_3ea5231e DATETIMEOFFSET,
@LastSyncedAt_3ea5231e DATETIMEOFFSET,
@Specification_3ea5231e NVARCHAR(MAX),
@FunctionalRequirements_3ea5231e NVARCHAR(MAX),
@TechnicalDesign_3ea5231e NVARCHAR(MAX),
@FunctionalRequirementsVector_3ea5231e NVARCHAR(MAX),
@TechnicalDesignVector_3ea5231e NVARCHAR(MAX),
@HasCustomProps_3ea5231e BIT,
@HasCustomEvents_3ea5231e BIT,
@RequiresData_3ea5231e BIT,
@DependencyCount_3ea5231e INT,
@TechnicalDesignVectorEmbeddingModelID_3ea5231e NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_3ea5231e NVARCHAR(MAX),
@HasRequiredCustomProps_3ea5231e BIT,
@ID_3ea5231e UNIQUEIDENTIFIER
SET
  @Namespace_3ea5231e = N'CRM/Customer'
SET
  @Name_3ea5231e = N'TimelineTab'
SET
  @Version_3ea5231e = N'1.0.0'
SET
  @VersionSequence_3ea5231e = 1
SET
  @Title_3ea5231e = N'Timeline Tab'
SET
  @Description_3ea5231e = N'Timeline tab showing customer interaction history'
SET
  @Type_3ea5231e = N'Other'
SET
  @Status_3ea5231e = N'Deprecated'
SET
  @Specification_3ea5231e = N'{}'
SET
  @FunctionalRequirements_3ea5231e = N'## Timeline Tab

### Purpose
Displays chronological timeline of events and activities.

### Features
- Chronological event display
- Event filtering
- Date range selection
- Event type icons'
SET
  @TechnicalDesign_3ea5231e = N'## Implementation

### Props
- events: Array of timeline events
- dateRange: Date filter range
- filters: Event type filters'
SET
  @FunctionalRequirementsVector_3ea5231e = N'[-0.04182244837284088,-0.019174203276634216,-0.029235634952783585,0.002063729800283909,-0.008402097970247269,-0.0024884387385100126,0.056443024426698685,0.03674282878637314,0.05174438655376434,0.014263384975492954,0.013627348467707634,0.010142670944333076,0.006990269757807255,0.13236890733242035,-0.044464971870183945,-0.09032860398292542,0.014338438399136066,-0.019568543881177902,-0.0019309602212160826,0.017524639144539833,-0.029596667736768723,0.008165027014911175,-0.06148736923933029,0.006650769151747227,-0.0004599522799253464,0.004348068032413721,-0.015481497161090374,-0.03076406940817833,-0.034488365054130554,-0.08567917346954346,-0.020348038524389267,-0.005782215390354395,0.013718110509216785,-0.02978312410414219,0.00000181682764832658,-0.005363865289837122,-0.004691999405622482,-0.02625712752342224,-0.058749716728925705,0.041801899671554565,-0.030857713893055916,0.024391518905758858,0.04589727148413658,-0.028965899720788002,0.018020149320364,0.009905536659061909,-0.03337936848402023,0.04603951424360275,-0.04032182693481445,0.02221798151731491,0.013886543922126293,0.004209122620522976,0.03867512196302414,-0.04571279138326645,0.09312624484300613,-0.04907142370939255,-0.0012175862211734056,0.020857136696577072,0.0983259379863739,0.019087053835392,0.031018415465950966,-0.006181636825203896,-0.007284508086740971,0.009112903848290443,0.09659850597381592,0.03570033237338066,-0.02107135020196438,-0.07919985055923462,0.03337561711668968,-0.0021334087941795588,0.1163184866309166,-0.038969095796346664,0.005027031060308218,-0.03620394691824913,-0.0023088373709470034,-0.019815169274806976,-0.051495615392923355,-0.0005928380414843559,0.007004353683441877,-0.012035034596920013,0.037413083016872406,0.04013703018426895,-0.0034177876077592373,0.008285727351903915,0.03967094421386719,-0.02983948588371277,0.00010438966273795813,0.011235319077968597,-0.04537958651781082,-0.028012774884700775,0.00906533282250166,-0.0191393680870533,0.02518613077700138,-0.002446828642860055,-0.021139133721590042,-0.03992100805044174,0.010932831093668938,0.0813450887799263,0.0035035705659538507,0.01811525970697403,-0.0033205917570739985,0.017880244180560112,0.0042893607169389725,0.02268199436366558,0.03359505534172058,0.0544593371450901,-0.013193589635193348,-0.06556270271539688,-0.015164480544626713,0.050932884216308594,-0.014678850769996643,0.03506402671337128,0.00760192796587944,0.016635099425911903,-0.02720121666789055,0.05373796820640564,-0.006573014426976442,0.01974194496870041,0.0013942727819085121,0.009305927902460098,0.049982331693172455,0.008210602216422558,-0.027276702225208282,0.0017412309534847736,-0.04355413466691971,-0.054475799202919006,-0.04531414061784744,-0.025447657331824303,-0.017397424206137657,0.006444270722568035,-0.013622128404676914,0.0008977399556897581,0.026326635852456093,0.002278299070894718,-0.024477103725075722,-0.022114412859082222,-0.06085772067308426,-0.024500835686922073,-0.039068568497896194,0.0037041623145341873,0.021746139973402023,0.03307528793811798,-0.029538879171013832,0.025921259075403214,-0.04581163451075554,-0.0322907492518425,-0.010262846946716309,0.04445580765604973,0.016629815101623535,0.007547619752585888,-0.0481187105178833,-0.003509600879624486,-0.0013364433543756604,0.03545796126127243,0.02157857082784176,0.0023885476402938366,-0.035346414893865585,-0.051058635115623474,0.03683166578412056,0.02655831351876259,-0.003829074325039983,0.01692037656903267,-0.010347072966396809,-0.021444140002131462,-0.05708270147442818,-0.03349648043513298,-0.10655628144741058,-0.008907032199203968,0.018817497417330742,-0.00010927316907327622,-0.06612896919250488,-0.056431759148836136,0.006608004681766033,-0.0069462573155760765,0.019546963274478912,-0.01998741924762726,-0.00419997051358223,0.02424132637679577,0.004930461291223764,-0.02307766117155552,0.010219692252576351,-0.08895277231931686,0.0023988864850252867,0.03422399237751961,0.051452334970235825,-0.03971868380904198,-0.08285631239414215,-0.02195286937057972,-0.020540673285722733,-0.017655057832598686,0.019250057637691498,-0.00202800496481359,0.008413507603108883,0.0017282109474763274,0.011386140249669552,-0.05260530859231949,-0.023473726585507393,-0.030951298773288727,-0.010625201277434826,0.030376628041267395,0.01271729450672865,0.00929575227200985,0.04637497290968895,0.0653839260339737,0.02007802203297615,-0.0652458667755127,-0.019349487498402596,-0.0006685314583592117,0.04716342315077782,0.012923897244036198,0.06631873548030853,-0.00964000727981329,-0.04629215970635414,0.0069099594838917255,-0.04166054725646973,0.018180642277002335,-0.01700558140873909,0.026174498721957207,-0.013408705592155457,0.03492625430226326,-0.012497399002313614,0.01637330837547779,-0.07371202856302261,0.019819350913167,-0.027091922238469124,-0.0046624247916042805,-0.04184839501976967,0.0022895587608218193,-0.010694403201341629,0.008697851561009884,0.012633229605853558,-0.001492675393819809,0.03484250605106354,-0.02006607875227928,0.06620620936155319,0.0749688446521759,0.025824587792158127,0.034045811742544174,-0.007739600259810686,-0.0008273761486634612,-0.006124220322817564,0.005810951814055443,-0.0033654167782515287,-0.019534951075911522,0.06035367399454117,0.048011068254709244,-0.08444181829690933,0.004273350816220045,-0.009002028964459896,0.0002960351121146232,-0.04139147326350212,0.01799367368221283,0.04432884231209755,-0.004350718110799789,-0.025917835533618927,0.05012401193380356,-0.05012357980012894,0.005242888815701008,-0.03534572944045067,0.031022027134895325,0.07219896465539932,-0.0025287785101681948,-0.02026062272489071,0.012961785309016705,-0.026895921677350998,-0.0016495049931108952,-0.0034392066299915314,-0.044802017509937286,-0.024294432252645493,-0.027831977233290672,-0.009261290542781353,0.016204167157411575,0.009045900776982307,-0.009997581131756306,-0.013202722184360027,0.03374876081943512,-0.028024714440107346,-0.018767140805721283,0.008347075432538986,0.023417364805936813,0.03005739115178585,0.008171599358320236,-0.031778380274772644,0.03126230463385582,-0.0065617370419204235,0.020546944811940193,0.04146169498562813,-0.10659656673669815,0.04791250079870224,-0.1064160093665123,0.029650242999196053,0.004953901283442974,0.014670957811176777,0.01996104046702385,0.005075152963399887,0.011183185502886772,-0.03065851703286171,0.09844167530536652,0.02059696614742279,0.09989982098340988,-0.02987425960600376,-0.024810273200273514,-0.001384818577207625,0.01659143529832363,-0.032480765134096146,0.06321725249290466,-0.002566733630374074,0.037488069385290146,0.0041406783275306225,-0.005487571470439434,0.016338389366865158,0.03307739272713661,-0.01791202835738659,-0.0740114226937294,-0.011593411676585674,0.029004056006669998,-0.006762811914086342,0.01781069114804268,-0.06630546599626541,0.014602910727262497,-0.025649603456258774,0.013235241174697876,-0.037456829100847244,0.027374237775802612,-0.026005549356341362,0.035966742783784866,-0.061133209615945816,-0.04548902064561844,-0.0019056679448112845,0.031746264547109604,-0.006739942356944084,0.015617229975759983,-0.06890995800495148,-0.006585031282156706,0.03256085142493248,0.016829418018460274,-0.036353304982185364,0.04681655019521713,-0.01848585158586502,-0.04076223820447922,-0.022777162492275238,0.02779960446059704,-0.03460891544818878,-0.09091538935899734,0.03792833536863327,0.00860269833356142,-0.07745867222547531,0.04097140207886696,-0.1263519525527954,0.0013202581321820617,-0.037302166223526,0.03424176573753357,-0.005462927278131247,0.006292038131505251,0.015392337925732136,0.02377515286207199,-0.027893470600247383,-0.010750737972557545,-0.07232755422592163,-0.005514967255294323,-0.0010758321732282639,-0.03486093133687973,0.023648859933018684,-0.0026951206382364035,0.0046374183148145676,0.018312744796276093,-0.012552537955343723,-0.008872834034264088,0.0048963408917188644,0.022563043981790543,0.04952779412269592,0.0371522530913353,0.061025913804769516,0.04284657910466194,-0.014165662229061127,-0.015212449245154858,0.01292533427476883,0.06514330953359604,0.0007776088896207511,0.022930024191737175,-0.0044741458259522915,0.02710445038974285,0.02055242843925953,-0.04241764545440674,0.008421804755926132,-0.0028480016626417637,-0.014452502131462097,-0.011637252755463123,0.06823226064443588,-0.026898182928562164,0.008213098160922527,0.012995162978768349,-0.04565037414431572,-0.0028452088590711355,-0.015046050772070885,-0.021093156188726425,-0.04749195650219917,0.01679929532110691,-0.00744818476960063,-0.006129771005362272,0.007145562209188938,-0.062091924250125885,-0.02562841586768627,0.04747650399804115,0.027229581028223038,0.014418281614780426,-0.02885107509791851,0.04580200836062431,-0.024030722677707672,0.028369056060910225,-0.08407879620790482,0.010172266513109207,0.0507039800286293,-0.004701933823525906,-0.021035686135292053,0.031897444278001785,0.01644764468073845,0.0040942043997347355,0.04824944958090782,0.05408351123332977,-0.028966043144464493,-0.00017939420649781823,0.04123322665691376,-0.014858681708574295,0.013687585480511189,0.0068357898853719234,0.0000947095250012353,-0.012832987122237682,-0.04151512682437897,-0.00455599557608366,0.025615472346544266,0.019930260255932808,-0.023870034143328667,-0.004337633959949017,-0.04247824847698212,-0.006626053713262081,-0.01305165234953165,0.01016410905867815,-0.07209420204162598,0.0004276149848010391,-0.006755447946488857,-0.014275937341153622,0.006973473820835352,-0.047376420348882675,0.016051732003688812,0.01899714022874832,-0.003826179774478078,-0.03723530471324921,0.017545755952596664,-0.011209536343812943,-0.03261726349592209,0.007270572241395712,-0.05918484926223755,-0.059737253934144974,-0.019831756129860878,-0.01172209158539772,0.08651960641145706,-0.011560986749827862,0.02227582223713398,-0.016448061913251877,-0.04983702674508095,0.014882359653711319,-0.015928398817777634,0.003034688765183091,0.0731118842959404,-0.009722831659018993,-0.02513933554291725,0.08274508267641068,-0.033453717827796936,-0.037661366164684296,-0.014652261510491371,0.0021137192379683256,-0.015569205395877361,-0.03901242837309837,-0.010573485866189003,-0.05515015125274658,-0.00592565443366766,-0.042949192225933075,0.0021648218389600515,-0.020683802664279938,-0.017432531341910362,0.07717671245336533,0.04185935854911804,-0.0612419918179512,-0.0059697735123336315,0.0009978252928704023,-0.001314105000346899,0.026911944150924683,0.0211494117975235,0.014991876669228077,0.010001755319535732,-0.024177558720111847,-0.049745287746191025,-0.008032568730413914,-0.030203137546777725,0.04412025213241577,-0.06522923707962036,-0.0201338492333889,-0.027076048776507378,0.016765788197517395,-0.050352003425359726,0.03611134737730026,-0.011332560330629349,0.02088109590113163,-0.016498496755957603,-0.02755250595510006,-0.015929481014609337,0.009956559166312218,-0.045156583189964294,0.0405084453523159,0.028909672051668167,-0.023194508627057076,-0.0450047142803669,0.05993153899908066,0.06037304922938347,0.021831296384334564,0.0711735412478447,0.0019105697283521295,-0.013015283271670341,0.016793575137853622,0.012622199021279812,-0.013965129852294922,0.05991479381918907,0.019145963713526726,0.017554370686411858,0.004616254474967718,-0.004446942824870348,-0.017121383920311928,-0.029668232426047325,0.05818629264831543,0.02023719996213913,-0.012357993051409721,0.09991572052240372,0.04641716554760933,-0.0007235935190692544,0.010329277254641056,0.03099876455962658,0.005320316180586815,-0.025011012330651283,0.010492983274161816,-0.004552486352622509,0.06715831160545349,0.10704979300498962,-0.0303062591701746,-0.014407415874302387,-0.01785697601735592,-0.026654338464140892,-0.0204007625579834,0.023314787074923515,-0.0120785441249609,0.009733954444527626,-0.0185549259185791,-0.018719593062996864,0.014839653857052326,-0.0515284426510334,-6.0500402022839035e-33,-0.020052216947078705,-0.016876421868801117,-0.019111819565296173,0.044666439294815063,0.007653702050447464,-0.005037836264818907,0.017323093488812447,-0.058956388384103775,-0.014381276443600655,-0.009916046634316444,-0.004088482819497585,-0.0038031854201108217,0.015231267549097538,-0.06451111286878586,0.02444847859442234,-0.0336013101041317,0.04811199754476547,-0.06179237365722656,0.018102694302797318,0.029913894832134247,-0.010311217047274113,-0.008251451887190342,-0.0047764852643013,0.006570314522832632,-0.03594323620200157,0.029157066717743874,0.07076039910316467,-0.006968820933252573,0.08541923016309738,-0.008832570165395737,0.002838773187249899,-0.021039895713329315,0.0020224200561642647,-0.06339482963085175,0.01322902925312519,-0.02902330830693245,-0.0014493275666609406,-0.026170222088694572,0.0027088839560747147,-0.013742513954639435,0.07480224967002869,-0.016018252819776535,-0.06665105372667313,0.01276832353323698,-0.00001282129596802406,-0.036733388900756836,0.012398593127727509,-0.035172540694475174,-0.027357380837202072,0.010717974975705147,0.006577810272574425,0.028874123468995094,0.001679301611147821,0.03423946723341942,0.043747786432504654,0.002594960620626807,0.04259273782372475,0.004586375318467617,-0.0465388223528862,-0.012742243707180023,-0.09020800143480301,0.01496271975338459,-0.05037679150700569,-0.0031698239035904408,0.0069710081443190575,0.035942982882261276,-0.06324341893196106,0.0960240513086319,-0.0198773555457592,0.09623005241155624,-0.029803596436977386,0.09528401494026184,-0.019535887986421585,-0.07322639971971512,0.00497012585401535,0.006892039906233549,-0.04009125009179115,0.0046105473302304745,0.027522481977939606,0.012334857136011124,-0.03261604532599449,0.025604762136936188,-0.010604865849018097,0.025831904262304306,0.020880691707134247,0.050848376005887985,-0.01438362430781126,0.046067945659160614,0.00498812273144722,0.02158624678850174,0.0498589426279068,0.056119516491889954,-0.040425777435302734,0.04335436224937439,-0.023067569360136986,0.054721664637327194,0.021640537306666374,-0.003586807753890753,0.005751567892730236,0.005939030554145575,-0.04549669101834297,-0.01707526296377182,-0.007826709188520908,-0.013047276996076107,0.02803334966301918,-0.0012948077637702227,-0.028713569045066833,-0.004735194146633148,-0.01640089973807335,-0.015910880640149117,0.032080668956041336,-0.018399005755782127,0.018326522782444954,-0.04454144090414047,-0.00532881636172533,-0.0034907960798591375,-0.017519347369670868,0.11332009732723236,-0.021640893071889877,0.007901625707745552,0.030060159042477608,-0.07216335833072662,-0.011111929081380367,0.01926547661423683,0.034284383058547974,-0.0020326273515820503,-0.06985370069742203,0.08997036516666412,-0.0205497145652771,0.03427097573876381,0.002921091625466943,0.03283786028623581,2.5185377694469935e-7,-0.0516371987760067,0.05492548644542694,0.034562867134809494,0.12630532681941986,0.026998823508620262,-0.03937413915991783,-0.00019289838382974267,0.009479005821049213,-0.016391728073358536,0.022536935284733772,0.010936280712485313,0.022930288687348366,0.023991702124476433,0.04594041779637337,0.06177390366792679,-0.07318369299173355,-0.014870858751237392,-0.00804782472550869,-0.06786588579416275,-0.02344481647014618,0.12621891498565674,0.002818430308252573,0.035784054547548294,0.05903710797429085,0.00773673877120018,-0.024237407371401787,-0.002616075100377202,0.0028730956837534904,-0.06408078968524933,-0.007489876355975866,0.02863480895757675,0.02904912270605564,-0.043455395847558975,0.023837357759475708,-0.014010865241289139,-0.015569055452942848,-0.02675361931324005,-0.030635667964816093,0.00463527487590909,0.01757015287876129,-0.003234084229916334,0.015585141256451607,-0.044398851692676544,0.015397493727505207,0.04039781540632248,0.001728641800582409,0.019914038479328156,0.07499298453330994,-0.0047212764620780945,0.03217313066124916,-0.001476826029829681,0.028291745111346245,0.03898751363158226,-0.0073159500025212765,0.01963435299694538,-0.0145040825009346,0.0018821904668584466,0.009320620447397232,0.01854926533997059,-0.014030768536031246,-0.00177306542173028,0.024530066177248955,-0.03363782912492752,-0.0295114628970623,0.0032456594053655863,0.03817697614431381,0.017174050211906433,2.774985381388847e-34,0.010255279950797558,0.017975037917494774,0.0008321843342855573,-0.04083679988980293,0.009485575370490551,0.011097352020442486,-0.029299184679985046,-0.025707192718982697,0.02089327946305275,-0.012405225075781345,-0.008261356502771378]'
SET
  @TechnicalDesignVector_3ea5231e = N'[-0.04904043301939964,0.018781187012791634,-0.024396443739533424,-0.026990553364157677,-0.008757907897233963,-0.05447929725050926,0.020361432805657387,0.03153441846370697,0.037432242184877396,0.005976022221148014,0.04998180642724037,-0.002908962545916438,-0.020694654434919357,0.12569817900657654,-0.043276652693748474,-0.09489155560731888,0.024921054020524025,0.020436296239495277,-0.026388373225927353,0.005429394077509642,0.0022801985032856464,-0.0032021095976233482,-0.04821564257144928,0.007984696887433529,0.043066367506980896,-0.011197681538760662,-0.003664628602564335,-0.01827380061149597,0.009140411391854286,-0.026321206241846085,-0.015390134416520596,0.013821320608258247,0.011051246896386147,0.005507082678377628,0.0000014230830629458069,0.010230893269181252,-0.03593842685222626,-0.014623543247580528,0.019879531115293503,0.013486018404364586,-0.011173062957823277,0.030319035053253174,0.012535162270069122,-0.003498465521261096,-0.009864951483905315,-0.045789021998643875,-0.06326296180486679,-0.011605821549892426,0.007604092359542847,0.013399616815149784,-0.00932699628174305,0.0009368923492729664,0.05659133940935135,0.008692256174981594,0.0450277142226696,0.0010003888746723533,-0.004258379340171814,-0.08097152411937714,0.10658236593008041,0.014716830104589462,0.04493894428014755,-0.045882388949394226,0.0008891306351870298,-0.004277472849935293,0.07598692923784256,-0.011142674833536148,0.013291086070239544,-0.03623149171471596,-0.001061991206370294,-0.04228133335709572,0.10088510811328888,-0.021932341158390045,-0.00311740068718791,0.0332065150141716,-0.04154472053050995,-0.021762561053037643,-0.013086497783660889,-0.00936307292431593,-0.029850147664546967,0.032996393740177155,0.036099787801504135,0.07480143010616302,-0.02851215936243534,0.009468795731663704,0.031078262254595757,0.048867981880903244,0.0216524675488472,0.04918016865849495,-0.07148139923810959,-0.07042259722948074,0.025948086753487587,-0.04258216917514801,0.05122024565935135,-0.017750106751918793,-0.011181322857737541,-0.033629160374403,0.02445542998611927,0.03709264472126961,0.002300416585057974,-0.05600355565547943,-0.0033433802891522646,0.04137646406888962,0.03892553597688675,0.012255122885107994,0.05705306679010391,0.04045890271663666,0.01892799884080887,-0.039258766919374466,-0.011904168874025345,-0.012496438808739185,-0.0041866786777973175,0.011401671916246414,0.023432064801454544,0.034972190856933594,-0.0352165624499321,0.04192627966403961,-0.035736460238695145,-0.01841827481985092,-0.028907597064971924,-0.027373015880584717,-0.020356612280011177,-0.027171459048986435,-0.03191939741373062,-0.025936184450984,-0.00627510529011488,0.02260892651975155,-0.022778866812586784,-0.05396648496389389,-0.02843005768954754,-0.0012737041106447577,0.0006792792119085789,0.01482305582612753,0.07121621817350388,-0.014429907314479351,-0.023177487775683403,-0.01415208075195551,-0.025786597281694412,-0.030741989612579346,-0.0028016057331115007,-0.014682354405522346,0.03792744129896164,0.04794934019446373,0.013386556878685951,0.037540607154369354,-0.0591232068836689,-0.022746654227375984,0.022504614666104317,-0.004046405199915171,-0.024415332823991776,0.030982447788119316,-0.03727184608578682,-0.006142258178442717,0.015116850845515728,0.033495862036943436,-0.026511386036872864,0.029142895713448524,-0.03176424279808998,0.008673458360135555,0.06484014540910721,-0.02439694106578827,-0.0033521491568535566,0.014203200116753578,0.03157300129532814,0.0028153483290225267,-0.027962271124124527,-0.026333652436733246,-0.1842508465051651,-0.05585202947258949,-0.00524321710690856,-0.03500671312212944,-0.0014244351768866181,-0.05536670982837677,0.00408107228577137,0.01627475768327713,0.005115813110023737,-0.05652487650513649,0.02460065297782421,0.009518216364085674,-0.009153502993285656,-0.04973826929926872,0.03560427948832512,-0.056552059948444366,0.0031629097647964954,-0.02901993691921234,0.056147512048482895,-0.030438559129834175,-0.04033026844263077,0.0008321556379087269,0.03181224688887596,0.004030060954391956,-0.014024689793586731,0.02544480934739113,-0.04200342297554016,-0.03230297565460205,-0.01145948190242052,-0.036540593951940536,-0.03986070677638054,-0.0006575912702828646,-0.002984283259138465,0.009502957575023174,0.044314347207546234,0.011806531809270382,0.05487970635294914,0.054529424756765366,0.036079417914152145,-0.04168537259101868,-0.025648988783359528,0.012869378551840782,0.031973253935575485,-0.0054614730179309845,0.010147671215236187,0.002164148259907961,0.014184054918587208,0.011207159608602524,-0.006565277464687824,0.0006445164326578379,-0.018666181713342667,-0.006247870158404112,-0.03445489704608917,0.015332473441958427,-0.038365721702575684,-0.00946623831987381,0.0034648077562451363,-0.014062047004699707,0.008267916738986969,0.011289493180811405,-0.03734617680311203,-0.019876278936862946,0.0056912037543952465,0.007991397753357887,0.013135104440152645,0.02164353057742119,-0.00762456888332963,-0.030374184250831604,0.09588819742202759,0.04252549633383751,0.0020749468822032213,-0.007290207780897617,0.018225450068712234,0.0308475773781538,-0.02089494839310646,0.04013307765126228,-0.006795704364776611,0.006445649545639753,0.02075459249317646,0.042730215936899185,-0.06344442814588547,0.02091250568628311,-0.01157329697161913,0.008140288293361664,-0.015210823155939579,0.025905102491378784,-0.01935683749616146,-0.017591405659914017,-0.04961780086159706,-0.09340047836303711,0.0006346435402520001,-0.0017036751378327608,0.03987796977162361,0.019175546243786812,0.05554838851094246,0.027464089915156364,-0.0441289022564888,0.03047299198806286,0.02249220758676529,-0.005671285092830658,-0.002612483222037554,-0.04736233875155449,0.00821099616587162,0.005435663741081953,-0.01887434534728527,0.024728791788220406,0.026534996926784515,0.00807100534439087,0.04593655839562416,0.0326111875474453,-0.02267828769981861,-0.0030781638342887163,0.0077717602252960205,0.006569027900695801,-0.0030129568185657263,-0.05330854654312134,-0.001551804249174893,-0.0005825480329804122,-0.057335853576660156,0.05657700449228287,-0.011569586582481861,-0.05475415661931038,0.05786190927028656,-0.09190864861011505,0.009195217862725258,0.005111054517328739,0.021614402532577515,-0.016587018966674805,-0.013260371051728725,-0.023621344938874245,-0.0015919506549835205,0.047891389578580856,0.042342327535152435,0.044459018856287,0.002507399069145322,-0.01894981972873211,0.001078526838682592,0.008202595636248589,-0.037486497312784195,0.05842562019824982,0.0029030954465270042,0.0537516213953495,0.011239441111683846,0.02805905230343342,-0.02648361772298813,0.04108051210641861,-0.05548637732863426,-0.012219459749758244,-0.018425961956381798,0.010808671824634075,0.014205914922058582,-0.05801307410001755,-0.032434627413749695,-0.004540211986750364,-0.05796526372432709,-0.014734139665961266,0.0007060724310576916,0.0002458264643792063,-0.043260637670755386,0.00943090207874775,-0.01945817843079567,-0.07680284231901169,0.024996047839522362,0.009002883918583393,0.020592140033841133,-0.07165941596031189,-0.001962375594303012,-0.010916898027062416,-0.018755629658699036,0.011447594501078129,-0.01408350933343172,0.005449032410979271,-0.02244303934276104,0.001305376528762281,0.011666825041174889,0.005893190857023001,-0.03676069155335426,-0.049431223422288895,0.03230128437280655,0.0078154057264328,-0.10347166657447815,0.06400151550769806,-0.10616791248321533,0.026499958708882332,-0.034157462418079376,0.021787475794553757,0.013835401274263859,0.014293949119746685,-0.01737746223807335,0.041044119745492935,-0.008117271587252617,-0.005417824722826481,-0.024828603491187096,0.023006530478596687,0.07788902521133423,0.0022058170288801193,0.12808936834335327,0.015078827738761902,-0.04000838100910187,0.03386605530977249,0.03550165519118309,0.0060713752172887325,0.021156493574380875,-0.028394708409905434,0.05064060911536217,0.005371109116822481,0.03281453624367714,-0.0053434912115335464,-0.025471698492765427,-0.024023959413170815,0.03889232501387596,0.03059384413063526,0.03860370069742203,-0.013390679843723774,-0.003639868926256895,0.021593907848000526,0.03275373578071594,-0.001586377271451056,0.007950205355882645,-0.049608681350946426,0.033921778202056885,-0.045637086033821106,0.02258334681391716,-0.01898934133350849,0.030597180128097534,-0.01961391605436802,-0.057381436228752136,-0.011707114987075329,0.004577270243316889,0.025003693997859955,-0.022516129538416862,-0.0042750234715640545,0.013600642792880535,0.01885892078280449,-0.02580241858959198,0.038176678121089935,-0.048336539417505264,0.02119925245642662,0.006252450868487358,-0.029025806114077568,-0.042571160942316055,0.03149592876434326,0.0018889483762905002,0.06152540072798729,-0.027938703075051308,-0.012210527434945107,-0.015819324180483818,-0.006784313824027777,-0.09780789911746979,-0.007817025296390057,0.007769327145069838,-0.016687365248799324,0.07900874316692352,0.025225305929780006,-0.05172960087656975,-0.0352359414100647,0.0814446359872818,0.0033865836448967457,0.03732582554221153,-0.019864965230226517,0.00852076057344675,-0.013744251802563667,0.004492861684411764,-0.026956062763929367,0.04227432236075401,0.04886903241276741,0.03248525783419609,0.00030177939333952963,-0.04391634091734886,-0.02846347540616989,-0.01844601333141327,0.02536189928650856,-0.003847939893603325,-0.011456916108727455,0.015932777896523476,-0.016464222222566605,0.013964706100523472,-0.05228286236524582,0.0241935346275568,0.03521711751818657,-0.0049026720225811005,0.024295831099152565,0.08211229741573334,-0.023917991667985916,0.010805537924170494,0.003124603535979986,-0.03849338740110397,-0.056422747671604156,0.05826306343078613,-0.04178884997963905,0.142079696059227,0.052933067083358765,-0.03862781822681427,0.06379585713148117,-0.02059580385684967,0.024813929572701454,0.02176588959991932,-0.0000920880411285907,0.05215831100940704,0.008304551243782043,0.03488578274846077,0.05026480183005333,-0.0197768397629261,0.03352475166320801,-0.01796845719218254,-0.02543642185628414,0.019283654168248177,0.025805611163377762,0.04396606236696243,-0.07844261080026627,0.02469928003847599,0.0059600938111543655,0.0028985412791371346,0.003264126367866993,-0.037490472197532654,0.08021856099367142,-0.015698270872235298,-0.058454740792512894,0.014598265290260315,-0.04026789963245392,-0.01490552257746458,0.025721823796629906,-0.024267377331852913,-0.0075581916607916355,-0.03951065614819527,-0.01675531640648842,-0.0406898632645607,0.01976582407951355,-0.001268734922632575,0.05170309543609619,0.013911677524447441,0.024969471618533134,-0.025115089491009712,-0.03266862779855728,-0.02027123048901558,-0.007346095517277718,-0.00676089059561491,0.03540002182126045,-0.03427077457308769,-0.06342694163322449,-0.033010758459568024,0.018987979739904404,-0.011919704265892506,-0.00401380704715848,-0.006202080752700567,-0.04824988543987274,-0.1057182252407074,0.05731593817472458,0.008021829649806023,-0.023678680881857872,0.018506400287151337,-0.015062535181641579,0.03479170799255371,-0.01887076161801815,0.015123407356441021,0.017759183421730995,0.020092781633138657,-0.012188270688056946,0.0850696787238121,0.04738239198923111,-0.010463934391736984,-0.0002235315478174016,-0.00026132873608730733,0.03605015203356743,0.05088451877236366,0.03755023702979088,0.016436642035841942,0.029550304636359215,0.006388979498296976,-0.019724516198039055,-0.03447939082980156,-0.01310922484844923,0.004238880705088377,-0.014761405996978283,-0.07535211741924286,0.05677441507577896,0.051604919135570526,-0.06562713533639908,-0.008944128639996052,-0.07528214901685715,-0.0031236077193170786,-0.011347481049597263,0.042528506368398666,-0.00046388391638174653,0.0497235432267189,-0.008323471061885357,0.031127363443374634,-0.013257144019007683,0.021908225491642952,-5.8658376661161586e-33,0.008140409365296364,0.007911242544651031,0.0015538547886535525,-0.04470222815871239,-0.03899417817592621,-0.01908976025879383,-0.014861141331493855,-0.09486638009548187,-0.007860363461077213,-0.05520397424697876,0.013811116106808186,-0.02056857757270336,0.012211006134748459,-0.029683107510209084,-0.008604672737419605,-0.00032495587947778404,0.052927494049072266,-0.028638966381549835,-0.005495723336935043,0.0474456362426281,0.025624416768550873,0.02415439486503601,-0.018161047250032425,0.02488386072218418,-0.05364297330379486,0.024167921394109726,0.0032333731651306152,0.03378172591328621,0.02048949897289276,0.006883293855935335,-0.010232930071651936,-0.015519541688263416,0.00204249145463109,-0.05101970210671425,0.017803067341446877,-0.023474493995308876,0.014613618142902851,-0.032195769250392914,-0.008692337200045586,-0.0387752391397953,0.0873146802186966,-0.016255564987659454,-0.0006223834934644401,-0.0012819343246519566,0.03871456906199455,-0.05182918533682823,-0.05469752848148346,0.01723463460803032,-0.00668324064463377,0.031198475509881973,0.04609376937150955,0.050344087183475494,-0.01702742651104927,0.0546349473297596,-0.004872666671872139,0.030769851058721542,0.06897637993097305,0.04669392108917236,0.0012737771030515432,0.001008176594041288,-0.09792463481426239,-0.00016604678239673376,-0.01853037066757679,-0.01614511013031006,0.01745542511343956,0.025376811623573303,-0.05465540289878845,0.061933428049087524,-0.05070620775222778,0.0707080140709877,0.000020167577531537972,0.03756988048553467,-0.013945240527391434,0.022989697754383087,0.02360420487821102,0.02842474728822708,-0.05909885838627815,0.015331543982028961,-0.03404160216450691,0.014312490820884705,-0.042716994881629944,0.051886528730392456,0.015000113286077976,0.028033167123794556,-0.010154304094612598,-0.032385338097810745,0.025487050414085388,0.055112142115831375,-0.01704421080648899,-0.009033005684614182,0.0071036783047020435,0.08691110461950302,-0.010243653319776058,0.06699015200138092,-0.030644085258245468,0.017062734812498093,0.001592088956385851,0.025238558650016785,0.025368480011820793,0.04819761961698532,0.03682944178581238,-0.044898126274347305,0.0012591092381626368,-0.021015889942646027,0.030263185501098633,0.024518264457583427,-0.01840866170823574,0.017850179225206375,-0.0014548483304679394,-0.00446280837059021,0.018374405801296234,0.0020355882588773966,-0.029035011306405067,-0.049861639738082886,0.045946840196847916,0.031703513115644455,0.028540367260575294,0.028498871251940727,0.001044064061716199,0.1008072942495346,0.024855144321918488,-0.049826666712760925,0.0013188094599172473,0.08732672780752182,0.03821125999093056,-0.028171585872769356,-0.07537274062633514,-0.00275012687779963,-0.0013501460198312998,-0.009053545072674751,0.003510261420160532,-0.024079469963908195,2.309508317921427e-7,-0.06280047446489334,0.012211842462420464,-0.006823807489126921,0.0857706367969513,-0.02012043260037899,-0.00860945787280798,0.001191528863273561,-0.026956213638186455,-0.04575006291270256,0.007185033522546291,-0.010403009131550789,0.02156231552362442,0.03881152719259262,0.04015341028571129,0.00036026412271894515,-0.07708427309989929,-0.0421023964881897,-0.03165416046977043,-0.0809328556060791,-0.01616966351866722,0.07081067562103271,0.02209133468568325,0.1002286821603775,0.003330016741529107,-0.019693225622177124,-0.00403026444837451,0.021009281277656555,0.00422004796564579,-0.07148085534572601,-0.009981866925954819,0.006186821963638067,-0.06539801508188248,-0.023028723895549774,0.01552257128059864,-0.018097618594765663,0.03136587515473366,-0.004104387015104294,-0.015598231926560402,-0.009016253985464573,-0.004588003735989332,0.020181601867079735,0.033492494374513626,-0.04532837122678757,-0.05371718108654022,0.05644435063004494,0.030622128397226334,-0.03571326285600662,0.03618627041578293,0.017559921368956566,0.06296226382255554,-0.048282135277986526,-0.04065800830721855,-0.033265214413404465,0.012589473277330399,0.00597524456679821,-0.03207515552639961,0.01885467767715454,-0.014774088747799397,0.011934960260987282,-0.02855214849114418,0.0031823483295738697,-0.005719668697565794,-0.03061150759458542,0.03129316866397858,0.004979094956070185,0.007410569582134485,0.008989015594124794,2.8277529095375268e-34,-0.007837256416678429,-0.00564195541664958,-0.0131925567984581,-0.04067598655819893,0.01716640405356884,-0.02299349755048752,0.03959835320711136,0.00338944629766047,0.03736979141831398,-0.022563597187399864,-0.007063445169478655]'
SET
  @HasCustomProps_3ea5231e = 0
SET
  @HasCustomEvents_3ea5231e = 0
SET
  @RequiresData_3ea5231e = 0
SET
  @DependencyCount_3ea5231e = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_3ea5231e = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_3ea5231e = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_3ea5231e = 0
SET
  @ID_3ea5231e = '36FF4254-CA53-48F8-8B5A-D56124A9890A'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_3ea5231e,
  @Name = @Name_3ea5231e,
  @Version = @Version_3ea5231e,
  @VersionSequence = @VersionSequence_3ea5231e,
  @Title = @Title_3ea5231e,
  @Description = @Description_3ea5231e,
  @Type = @Type_3ea5231e,
  @Status = @Status_3ea5231e,
  @DeveloperName = @DeveloperName_3ea5231e,
  @DeveloperEmail = @DeveloperEmail_3ea5231e,
  @DeveloperOrganization = @DeveloperOrganization_3ea5231e,
  @SourceRegistryID = @SourceRegistryID_3ea5231e,
  @ReplicatedAt = @ReplicatedAt_3ea5231e,
  @LastSyncedAt = @LastSyncedAt_3ea5231e,
  @Specification = @Specification_3ea5231e,
  @FunctionalRequirements = @FunctionalRequirements_3ea5231e,
  @TechnicalDesign = @TechnicalDesign_3ea5231e,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_3ea5231e,
  @TechnicalDesignVector = @TechnicalDesignVector_3ea5231e,
  @HasCustomProps = @HasCustomProps_3ea5231e,
  @HasCustomEvents = @HasCustomEvents_3ea5231e,
  @RequiresData = @RequiresData_3ea5231e,
  @DependencyCount = @DependencyCount_3ea5231e,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_3ea5231e,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_3ea5231e,
  @HasRequiredCustomProps = @HasRequiredCustomProps_3ea5231e,
  @ID = @ID_3ea5231e;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_141a6fb7 NVARCHAR(MAX),
@Name_141a6fb7 NVARCHAR(500),
@Version_141a6fb7 NVARCHAR(50),
@VersionSequence_141a6fb7 INT,
@Title_141a6fb7 NVARCHAR(1000),
@Description_141a6fb7 NVARCHAR(MAX),
@Type_141a6fb7 NVARCHAR(255),
@Status_141a6fb7 NVARCHAR(50),
@DeveloperName_141a6fb7 NVARCHAR(255),
@DeveloperEmail_141a6fb7 NVARCHAR(255),
@DeveloperOrganization_141a6fb7 NVARCHAR(255),
@SourceRegistryID_141a6fb7 UNIQUEIDENTIFIER,
@ReplicatedAt_141a6fb7 DATETIMEOFFSET,
@LastSyncedAt_141a6fb7 DATETIMEOFFSET,
@Specification_141a6fb7 NVARCHAR(MAX),
@FunctionalRequirements_141a6fb7 NVARCHAR(MAX),
@TechnicalDesign_141a6fb7 NVARCHAR(MAX),
@FunctionalRequirementsVector_141a6fb7 NVARCHAR(MAX),
@TechnicalDesignVector_141a6fb7 NVARCHAR(MAX),
@HasCustomProps_141a6fb7 BIT,
@HasCustomEvents_141a6fb7 BIT,
@RequiresData_141a6fb7 BIT,
@DependencyCount_141a6fb7 INT,
@TechnicalDesignVectorEmbeddingModelID_141a6fb7 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_141a6fb7 NVARCHAR(MAX),
@HasRequiredCustomProps_141a6fb7 BIT,
@ID_141a6fb7 UNIQUEIDENTIFIER
SET
  @Namespace_141a6fb7 = N'CRM/Customer'
SET
  @Name_141a6fb7 = N'ContactsTab'
SET
  @Version_141a6fb7 = N'1.0.0'
SET
  @VersionSequence_141a6fb7 = 1
SET
  @Title_141a6fb7 = N'Contacts Tab'
SET
  @Description_141a6fb7 = N'Contacts tab showing related contacts and roles'
SET
  @Type_141a6fb7 = N'Table'
SET
  @Status_141a6fb7 = N'Deprecated'
SET
  @Specification_141a6fb7 = N'{}'
SET
  @FunctionalRequirements_141a6fb7 = N'## Contacts Tab

### Purpose
Displays and manages contact information in a tabular format.

### Features
- Contact list display
- Search and filter
- Sort by columns
- Contact details view'
SET
  @TechnicalDesign_141a6fb7 = N'## Implementation

### Props
- contacts: Array of contact records
- onContactSelect: Contact selection handler
- filters: Active filters'
SET
  @FunctionalRequirementsVector_141a6fb7 = N'[-0.003118578577414155,-0.07748958468437195,-0.010691193863749504,-0.021297739818692207,0.060910239815711975,0.03104013204574585,0.02691049501299858,0.038904353976249695,0.08101935684680939,0.03729264810681343,-0.034589026123285294,-0.04793538525700569,0.04222152754664421,0.06214221566915512,0.007544213905930519,-0.026017948985099792,-0.005175190046429634,0.027623146772384644,-0.0027347318828105927,0.038291867822408676,-0.004198630806058645,-0.009445390664041042,0.018393540754914284,-0.026617590337991714,0.014019258320331573,0.0429837666451931,-0.014845924451947212,-0.001174324657768011,0.0039338404312729836,-0.015843767672777176,-0.006708879955112934,0.02006734348833561,0.00988524779677391,-0.04848718270659447,0.0000019119618173135677,0.029223427176475525,-0.03441561013460159,0.019065160304307938,-0.015142745338380337,0.0009477653075009584,0.03956931084394455,-0.0031400476582348347,0.01513759233057499,0.022865397855639458,-0.007241617888212204,-0.03121705912053585,-0.048035308718681335,0.025119546800851822,0.01598874107003212,0.05205846205353737,0.030727893114089966,-0.004596972372382879,-0.010068379342556,-0.025504397228360176,0.07008155435323715,-0.007938321679830551,0.0016115837497636676,-0.01639590971171856,0.03799137845635414,-0.013908726163208485,0.0480448454618454,0.022688185796141624,-0.010275219567120075,-0.04504167661070824,0.05276576429605484,0.030148688703775406,0.02071116678416729,-0.039515238255262375,0.07328278571367264,0.01288163848221302,0.10103609412908554,-0.005414538085460663,0.006956980098038912,-0.01670214906334877,0.034381769597530365,-0.02776542492210865,0.010661367326974869,-0.022198550403118134,-0.015082251280546188,0.00833748560398817,-0.08749469369649887,0.028026100248098373,-0.004689052235335112,-0.015070752240717411,-0.03369465842843056,-0.044977448880672455,-0.04188884049654007,-0.014758003875613213,0.010021578520536423,-0.009655177593231201,0.10030529648065567,0.019582154229283333,-0.004312680568546057,0.02345675230026245,-0.020621219649910927,-0.057078685611486435,0.059125564992427826,-0.02452637068927288,0.029453575611114502,-0.004652954172343016,0.007346908561885357,-0.031963080167770386,0.010717680677771568,-0.02109537087380886,0.013301083818078041,-0.032039012759923935,0.003847771557047963,-0.06703043729066849,0.0032213195227086544,0.009837467223405838,-0.005917574279010296,-0.009706983342766762,-0.02494673617184162,0.057163212448358536,-0.018193965777754784,0.08698751777410507,-0.00751783512532711,-0.004533892963081598,-0.04992440715432167,-0.001807900727726519,0.04661400988698006,0.01655372604727745,0.06943180412054062,0.017161766067147255,-0.020904790610074997,-0.026126230135560036,-0.026442987844347954,-0.04414251446723938,-0.016928086057305336,-0.04527100548148155,0.004786392208188772,-0.008141345344483852,0.03360849246382713,-0.012918461114168167,-0.006011098623275757,-0.011623644270002842,-0.006633990444242954,-0.04864346235990524,-0.07562512159347534,0.0243881493806839,0.02747376076877117,0.027310404926538467,-0.059065043926239014,0.018835365772247314,0.01109850313514471,-0.042622484266757965,-0.03675081953406334,0.011095359921455383,0.02244030125439167,0.03888143599033356,-0.028780020773410797,0.0374874547123909,-0.0438273623585701,0.04403070732951164,0.05919486656785011,-0.024268625304102898,0.03717636689543724,-0.06305024027824402,-0.016832463443279266,0.010734288953244686,-0.035841066390275955,-0.010405737906694412,0.04571579396724701,-0.04571826756000519,-0.00941239669919014,0.0076361848041415215,-0.018987901508808136,-0.005199836567044258,0.007528184913098812,-0.024113398045301437,-0.036459680646657944,0.006699309218674898,-0.048420704901218414,0.013060000725090504,0.021738223731517792,-0.008580531924962997,0.024511000141501427,0.06956701725721359,-0.011766261421144009,0.012690536677837372,0.03266572952270508,-0.08393922448158264,-0.043314870446920395,0.026618560776114464,-0.03567400202155113,-0.03950263187289238,-0.011185466311872005,0.04116571322083473,-0.02425968274474144,-0.001576241455040872,0.047004446387290955,0.014821515418589115,0.02631884440779686,-0.000202092676772736,-0.0230166707187891,0.004732443951070309,0.02009173110127449,-0.01043753232806921,0.027424458414316177,-0.03468502312898636,-0.021359404549002647,-0.0108208442106843,0.05131770297884941,0.1039443090558052,-0.014174915850162506,-0.016931910067796707,-0.04098230600357056,-0.032651256769895554,0.026472918689250946,-0.03551662340760231,0.012220609933137894,-0.004620309919118881,-0.02396067976951599,0.023663168773055077,-0.008040281012654305,0.06246455758810043,-0.021276704967021942,0.020060725510120392,0.015887226909399033,-0.012970559298992157,0.01440440583974123,0.0013990565203130245,-0.0665321797132492,0.0031091272830963135,0.0969407930970192,0.07096921652555466,-0.015683438628911972,0.02955045737326145,-0.016079597175121307,0.03311995044350624,-0.014023642987012863,0.0037133253645151854,0.05103366822004318,0.012837657704949379,0.06575388461351395,-0.06252674013376236,0.02479388937354088,0.07711871713399887,-0.03188536688685417,0.025817204266786575,-0.007461381144821644,-0.03436904400587082,-0.018728841096162796,0.03397620469331741,-0.0029283843468874693,-0.025353580713272095,-0.01695280708372593,0.005599012598395348,0.02869877591729164,-0.0032990756444633007,0.03297210857272148,0.022698411718010902,0.04345783591270447,-0.010068194009363651,-0.00726406741887331,0.05886102840304375,-0.03142276778817177,-0.010275212116539478,-0.05883167311549187,0.07420287281274796,0.028341608121991158,-0.026512043550610542,-0.004104514140635729,0.009699825197458267,0.01273055374622345,0.04225420206785202,-0.0272616408765316,-0.07744687795639038,-0.030363842844963074,0.007170444820076227,-0.052342478185892105,0.005861310288310051,0.05482473969459534,-0.016880128532648087,-0.017552999779582024,0.001444031484425068,-0.006112998817116022,0.011089927516877651,-0.03244307264685631,0.0019210894824936986,0.028403490781784058,-0.07735301554203033,-0.05700027570128441,0.033075083047151566,-0.007045326288789511,-0.043678950518369675,0.014777411706745625,-0.10084085911512375,-0.00432145269587636,-0.1378014236688614,0.0029700289014726877,0.025629986077547073,0.03762701153755188,-0.017605073750019073,-0.0072083259001374245,-0.02840285561978817,-0.06614119559526443,0.05449540540575981,0.03339366242289543,0.11313724517822266,-0.03309183940291405,0.038141485303640366,-0.01454288698732853,0.03499259427189827,0.004463476594537497,0.03420664370059967,-0.002583447378128767,-0.056987226009368896,0.014566374011337757,-0.019321853294968605,-0.013694601133465767,0.024543397128582,-0.0011735869338735938,-0.04333590343594551,0.02941751480102539,0.009131621569395065,0.003997538238763809,0.06412151455879211,-0.028956661000847816,0.013990514911711216,-0.009092024527490139,0.004009215626865625,-0.0005371575825847685,0.0020739848259836435,-0.002039034618064761,0.03152090683579445,-0.07742574065923691,0.018383296206593513,0.03217998519539833,-0.0046796053647994995,-0.01722225360572338,0.029643185436725616,-0.045825257897377014,-0.007047721650451422,0.04044078662991524,0.0010748557979241014,0.0009269584552384913,0.05900504067540169,0.028840601444244385,-0.009898259304463863,-0.014632920734584332,-0.0057672010734677315,0.0013432875275611877,-0.11304673552513123,0.03329041972756386,0.02830645814538002,-0.015226421877741814,-0.014856318011879921,-0.08349910378456116,-0.029974952340126038,0.040008146315813065,0.05099746584892273,-0.011906569823622704,0.016311006620526314,0.002145893406122923,0.003183840773999691,-0.04639066383242607,0.007457951549440622,-0.028342269361019135,-0.008442363701760769,0.0008901212713681161,-0.01767740584909916,-0.09861577302217484,-0.005100167356431484,0.019863547757267952,0.00960827898234129,-0.03558439016342163,-0.018342001363635063,-0.030468594282865524,-0.01690233312547207,-0.03171294182538986,0.01440208125859499,0.017999596893787384,0.051811497658491135,-0.018091043457388878,0.0002833657490555197,-0.01235007494688034,0.0039040965493768454,-0.002863088622689247,0.035415444523096085,0.04591168835759163,0.06688381731510162,0.07334630936384201,-0.01728302799165249,0.04793176427483559,0.027792764827609062,-0.031094109639525414,0.021029941737651825,0.004717264790087938,-0.01394437812268734,0.001865406520664692,0.007711401674896479,-0.1284344345331192,-0.03551938757300377,-0.03412725403904915,-0.010465680621564388,-0.03697630390524864,0.04551158845424652,0.00685330992564559,-0.029372351244091988,-0.017456715926527977,0.06940385699272156,0.05400056019425392,-0.0013474319130182266,-0.01601349376142025,0.032841477543115616,0.0451493114233017,0.06213909760117531,-0.00852467305958271,0.0006273052422329783,-0.06321658939123154,0.06044743210077286,0.007762413006275892,-0.0037638824433088303,0.002790014958009124,0.006338614970445633,0.01473625935614109,-0.0006732335896231234,-0.0479280911386013,0.02455897256731987,0.0037985772360116243,0.015819845721125603,-0.021338587626814842,-0.01492396555840969,0.05029390752315521,0.02649296261370182,0.0682748556137085,-0.06103729456663132,-0.02425798587501049,0.04903145134449005,0.009589710272848606,0.032142747193574905,-0.02969551831483841,0.0005344097153283656,0.025042301043868065,0.05267713591456413,0.029801754280924797,-0.02553255669772625,-0.06666070967912674,-0.004689035937190056,-0.00242824200540781,0.04184688627719879,-0.018475566059350967,0.0041732038371264935,-0.024410225450992584,0.02074735052883625,0.006943168118596077,0.01456838846206665,-0.056984275579452515,0.023871812969446182,0.013370614498853683,-0.054203059524297714,-0.06497000902891159,-0.025840051472187042,-0.038959331810474396,0.017210250720381737,-0.0520811527967453,0.03531895950436592,0.0016966306138783693,-0.042775239795446396,-0.022423574700951576,0.012704485096037388,-0.027059897780418396,-0.03197404742240906,-0.01480770017951727,-0.1083100214600563,0.004270486533641815,-0.04362437501549721,-0.015897978097200394,-0.038455672562122345,-0.05039772391319275,0.034865014255046844,0.0012272682506591082,-0.0010134107433259487,-0.02855180948972702,-0.05250287801027298,-0.06970388442277908,-0.06118204444646835,0.013700660318136215,0.014855857007205486,-0.011558295227587223,0.059193164110183716,0.04935239255428314,-0.08983765542507172,-0.050109121948480606,-0.0009219683124683797,-0.023296575993299484,0.01620013266801834,0.03031054325401783,0.00006856397521914914,0.013845229521393776,0.033596206456422806,-0.006157460156828165,0.003359629539772868,0.011038701981306076,0.07217428088188171,0.027742240577936172,0.013775113970041275,-0.0784594938158989,-0.01629796251654625,-0.0054032932966947556,-0.013766254298388958,-0.018570220097899437,-0.003311936976388097,-0.010665535926818848,0.03278924524784088,-0.008931152522563934,-0.012066238559782505,-0.026808008551597595,-0.040790196508169174,0.018309464678168297,0.01008387841284275,-0.030387457460165024,-0.08974499255418777,-0.02298925630748272,0.04076410457491875,-0.061388954520225525,0.06777447462081909,-0.031019901856780052,0.02690022625029087,-0.00404442148283124,0.005179773084819317,0.0007949642022140324,-0.00582494679838419,0.022996122017502785,-0.05952863395214081,0.032327715307474136,0.008376885205507278,-0.03723108395934105,0.062017105519771576,0.0072625260800123215,-0.03923147916793823,0.04629109427332878,-0.034925445914268494,0.017350828275084496,0.04303603991866112,0.057632893323898315,0.05933595821261406,-0.009538287296891212,-0.010942201130092144,0.04638557508587837,0.004820425994694233,0.05718868970870972,0.018706828355789185,-0.016827130690217018,0.00416270736604929,-0.007008869666606188,-0.009001987986266613,-0.021263152360916138,0.05680830776691437,-0.031220942735671997,-0.0016089084092527628,0.06762690097093582,0.01315176859498024,0.01994181051850319,-6.260114267087293e-33,-0.08006717264652252,0.019920529797673225,-0.026836492121219635,-0.014020778238773346,-0.04004900902509689,0.00010535799810895696,0.01068588625639677,-0.00865335762500763,-0.03900328651070595,-0.0007337979041039944,0.006174106616526842,0.021274542436003685,0.004895518533885479,-0.02329465001821518,0.008580241352319717,0.001682745642028749,0.012135372497141361,0.016889575868844986,0.0516827329993248,0.008539162576198578,-0.03476746380329132,0.027498969808220863,-0.0033823600970208645,-0.024473058059811592,-0.052194125950336456,0.007767802104353905,0.0050450824201107025,0.0282786525785923,0.007639851421117783,-0.0028461378533393145,-0.003868676954880357,-0.029155556112527847,-0.005068966653198004,-0.024764833971858025,0.026865527033805847,0.06694768369197845,-0.0712522640824318,-0.018621055409312248,-0.034230269491672516,0.0034577553160488605,0.08407595753669739,0.03932083025574684,-0.028085317462682724,-0.032794833183288574,-0.0017928858287632465,0.003993761260062456,0.04029802232980728,-0.021926604211330414,-0.010309654287993908,0.07951520383358002,0.04742586240172386,0.0214976966381073,0.01035565696656704,0.028224797919392586,0.01404441799968481,0.0021356770303100348,-0.0091661112383008,0.024280641227960587,-0.035812538117170334,-0.07424680143594742,0.038750212639570236,0.004718627315014601,-0.023825421929359436,0.03561140224337578,0.012083306908607483,-0.00994136743247509,0.07124674320220947,0.043487176299095154,-0.06155330687761307,-0.047384828329086304,-0.05783872306346893,0.024074038490653038,-0.053338438272476196,-0.054377708584070206,-0.09702576696872711,-0.022356824949383736,-0.034670885652303696,0.026497190818190575,0.03519120439887047,0.015414156019687653,-0.02203650400042534,0.0012181116035208106,-0.023429229855537415,-0.01598472148180008,0.03626774623990059,-0.019886549562215805,0.004501154646277428,0.0109765799716115,-0.0056295511312782764,0.03126344457268715,0.024094266816973686,0.039137180894613266,-0.062440358102321625,0.008928395807743073,0.005166270770132542,-0.0036834992934018373,0.005598573014140129,-0.003352602943778038,-0.01793612167239189,-0.024456113576889038,-0.009450833313167095,0.0010077988263219595,-0.017326882109045982,-0.0781383067369461,-0.003395246574655175,0.04374513402581215,0.03690188378095627,-0.06105250120162964,-0.044221799820661545,-0.02934890054166317,0.003615981200709939,0.046361032873392105,0.00835917703807354,0.020083466544747353,-0.04123929142951965,0.02269504778087139,-0.005662116687744856,0.06153392419219017,0.004070095717906952,0.017691077664494514,0.023874755948781967,-0.016543475911021233,0.03125772252678871,-0.00863745529204607,0.04864368587732315,-0.007360850926488638,-0.036063455045223236,0.0014222918543964624,0.01842745766043663,0.041815135627985,-0.00659866351634264,0.03952804580330849,2.6353953330726654e-7,-0.006709589157253504,0.0036308960989117622,-0.008732782676815987,-0.004105051513761282,-0.015258608385920525,-0.02808642014861107,0.0435088574886322,-0.002509054262191057,-0.028216378763318062,-0.051920801401138306,0.0657624900341034,-0.012742089107632637,0.026851510629057884,0.01096196100115776,-0.03400780260562897,-0.044273052364587784,-0.001975888619199395,-0.09706547856330872,-0.05437628924846649,0.00680696964263916,-0.0047502764500677586,0.012821833603084087,0.01759045384824276,0.03455378860235214,0.019953971728682518,0.0720142051577568,-0.01888568513095379,-0.05837458372116089,0.04453832656145096,-0.002268792362883687,0.05068560317158699,-0.016866300255060196,-0.025464186444878578,0.057707320898771286,-0.004687706008553505,-0.009073097258806229,-0.0006457310519181192,0.00868123210966587,0.002261473797261715,0.05390845984220505,0.04335235431790352,-0.053523533046245575,-0.04436921328306198,-0.06305758655071259,-0.02243959903717041,0.032729823142290115,0.02386949397623539,0.10307668894529343,-0.023004164919257164,0.021745027974247932,-0.0005574999959208071,0.0052840192802250385,-0.0008346558315679431,-0.034177105873823166,0.021795939654111862,-0.05531834810972214,-0.006796118803322315,0.011415763758122921,0.030284246429800987,0.017200354486703873,0.012491025030612946,-0.01614275574684143,-0.004671530798077583,-0.04527122527360916,0.0621936097741127,0.04699520766735077,0.0072386618703603745,2.561136785857868e-34,-0.017496151849627495,-0.019187524914741516,0.0681813657283783,0.0065937829203903675,0.033271145075559616,-0.012591531500220299,-0.0654466524720192,-0.015805086120963097,0.014184449799358845,-0.04938969388604164,-0.002414529677480459]'
SET
  @TechnicalDesignVector_141a6fb7 = N'[0.002121919533237815,-0.023147448897361755,-0.02681218832731247,-0.06129060685634613,0.02281692624092102,-0.051172442734241486,0.021850697696208954,0.021585719659924507,0.11036768555641174,0.015010878443717957,0.013159070163965225,-0.04260937497019768,0.02335590310394764,0.030588356778025627,-0.004873586352914572,0.012086217291653156,-0.019554730504751205,0.01012325193732977,-0.023153241723775864,-0.026243044063448906,-0.00772501016035676,-0.006796296685934067,-0.007605128455907106,0.018441900610923767,0.030814403668045998,-0.008529072627425194,0.014304008334875107,-0.02314203977584839,-0.002324750181287527,-0.013447367586195469,-0.012843435630202293,0.031511347740888596,-0.009916679002344608,-0.033198270946741104,0.000001301890506510972,0.004170692525804043,-0.017907017841935158,-0.016242466866970062,0.009842457249760628,0.010837370529770851,-0.01307445578277111,-0.029187140986323357,0.01573854312300682,-0.008782532066106796,-0.0412418507039547,-0.017095256596803665,-0.0840441957116127,-0.046612296253442764,0.00189578824210912,0.004733167123049498,0.014588607475161552,0.057996079325675964,0.01589885726571083,-0.005958418361842632,0.01171194389462471,0.06616958230733871,0.019604263827204704,-0.04270188510417938,0.0771404579281807,-0.04857616499066353,0.03989560529589653,-0.0514201782643795,-0.018592342734336853,-0.06417391449213028,0.03497559204697609,-0.02349022962152958,0.07141968607902527,0.012619317509233952,0.062281761318445206,-0.02485138364136219,0.06450139731168747,0.04436233267188072,0.02268088050186634,-0.00475488044321537,-0.017911864444613457,-0.025125762447714806,0.018803687766194344,-0.04162147268652916,-0.07292332500219345,0.018904009833931923,-0.04559043049812317,0.030901681631803513,0.008927748538553715,0.0032254806719720364,0.019064024090766907,0.02291266992688179,-0.014446008019149303,0.0003774400393012911,0.034073565155267715,-0.00591930141672492,0.06658795475959778,-0.010346160270273685,0.07665212452411652,-0.019621940329670906,-0.020304827019572258,-0.03803775832056999,0.021269401535391808,-0.039265211671590805,0.009846637956798077,-0.043335385620594025,-0.03743689879775047,-0.0004593637422658503,0.0253332257270813,-0.006025492679327726,0.040670253336429596,-0.029276106506586075,0.02550005353987217,-0.04870924353599548,-0.018504338338971138,-0.028788093477487564,-0.03362641856074333,0.019033674150705338,-0.006945023778825998,0.0845038965344429,-0.00473710335791111,0.023341437801718712,-0.04606661573052406,-0.02829916588962078,-0.05619192495942116,-0.041664011776447296,-0.012552976608276367,-0.04343521222472191,0.009659173898398876,-0.004128005355596542,-0.005405867006629705,0.02612612210214138,0.016094746068120003,-0.08235343545675278,-0.03133032098412514,-0.0307154543697834,0.03247060254216194,-0.01922750100493431,0.05058060213923454,-0.03456955775618553,-0.01302378624677658,0.024435877799987793,-0.026047829538583755,-0.04396592825651169,-0.02826894447207451,0.019605448469519615,0.03860156610608101,0.052149172872304916,0.043440356850624084,0.058701276779174805,-0.042583417147397995,-0.020886994898319244,0.028895331546664238,-0.10016847401857376,-0.032063014805316925,0.024015728384256363,-0.0015545611968263984,-0.011427812278270721,0.006766599137336016,0.029759114608168602,0.012830352410674095,0.010309730656445026,-0.004797349683940411,0.01993691362440586,0.028878172859549522,-0.01868133246898651,0.018352344632148743,0.009944705292582512,0.08735088258981705,0.02108370140194893,0.004983892664313316,0.019660716876387596,-0.11312153190374374,-0.015401247888803482,-0.0037109877448529005,-0.03160383179783821,0.030706830322742462,-0.006938779726624489,-0.086453877389431,0.02577035315334797,0.00620523514226079,-0.04081841930747032,0.0462167002260685,0.05542345345020294,-0.03306133300065994,-0.017266377806663513,0.021788451820611954,-0.03744521737098694,-0.01045268401503563,0.005054833367466927,-0.016564534977078438,-0.03174825385212898,-0.006219831295311451,0.018730316311120987,0.02188223786652088,0.01509753055870533,0.014107627794146538,0.011298487894237041,-0.012621751055121422,-0.040375981479883194,0.0007724813767708838,-0.0015124629717320204,-0.008725963532924652,0.011316822841763496,0.01110412273555994,0.020640842616558075,0.010310919024050236,-0.029152100905776024,0.043134696781635284,0.027022434398531914,0.026370609179139137,-0.0006732263136655092,-0.043985046446323395,-0.026466989889740944,-0.0141374496743083,-0.018673457205295563,-0.027613867074251175,-0.016660191118717194,0.01119986642152071,0.031994353979825974,0.03256075829267502,0.017756972461938858,-0.033489491790533066,-0.01584058254957199,-0.009790538810193539,0.0037829054053872824,-0.029722869396209717,0.0026931054890155792,0.014991122297942638,-0.002856631064787507,0.1302795559167862,0.04324189946055412,0.003762525739148259,0.00019221589900553226,0.02031724527478218,-0.029818136245012283,0.010120022110641003,-0.01837935857474804,-0.013850866816937923,-0.0009699872462078929,0.1000327542424202,-0.061169277876615524,0.00718444399535656,0.026371361687779427,-0.029422638937830925,0.04209648817777634,-0.039910703897476196,-0.019181212410330772,-0.00902568455785513,0.04091913253068924,-0.06613455712795258,-0.0006191759603098035,-0.009006290696561337,0.02378196269273758,0.004897707141935825,0.02280781790614128,0.0454191155731678,0.058462683111429214,-0.01993924379348755,-0.014202706515789032,-0.04122273623943329,-0.04405314847826958,0.03908221051096916,0.006411099806427956,-0.0320926196873188,0.02158522419631481,0.03676572069525719,0.010172094218432903,0.005623620934784412,0.013413379900157452,0.05081717297434807,0.01251284684985876,-0.019678104668855667,-0.05594819039106369,0.0047302041202783585,0.023279156535863876,-0.029816247522830963,-0.0314922034740448,0.037389595061540604,0.0013865908840671182,0.04484034329652786,0.041458021849393845,0.03299965336918831,0.024520820006728172,-0.04041098803281784,-0.01804470829665661,-0.03252264857292175,-0.053772881627082825,-0.02644938975572586,0.01268412172794342,-0.028906065970659256,0.007054752204567194,-0.0014148983173072338,-0.012062592431902885,0.004512096755206585,-0.1752040535211563,-0.019523121416568756,0.022366827353835106,0.006765318568795919,-0.04562525451183319,0.008948254399001598,-0.035398270934820175,-0.10641424357891083,0.08365926891565323,0.024704577401280403,0.04906819015741348,-0.00871366448700428,0.031567394733428955,0.023266015574336052,0.010177883319556713,0.011979220435023308,0.0016178394434973598,-0.012263771146535873,0.051322851330041885,0.007780926767736673,0.044546015560626984,-0.034541040658950806,0.04107275232672691,-0.0024426253512501717,-0.04065708443522453,0.016402695327997208,0.024784009903669357,0.014641202986240387,-0.02355008013546467,-0.034707747399806976,0.020444219931960106,-0.027381105348467827,-0.055740099400281906,0.058668654412031174,-0.018623577430844307,-0.04408929869532585,-0.045878082513809204,-0.04608944058418274,-0.003301810473203659,0.021886738017201424,0.022307608276605606,-0.028765952214598656,-0.010065711103379726,0.005051497835665941,0.01891196519136429,-0.02009383775293827,-0.02721555344760418,0.006460146047174931,0.03975415229797363,0.009995751082897186,0.024171216413378716,-0.005107813980430365,-0.01688714511692524,-0.00579180708155036,-0.031152870506048203,-0.01938619278371334,0.015405881218612194,-0.009036739356815815,0.006542297545820475,-0.05189879238605499,-0.003866231068968773,-0.015049311332404613,0.02506444603204727,0.006663103587925434,0.011685268022119999,-0.004112533759325743,0.027809608727693558,-0.024695398285984993,0.01872093230485916,-0.0075901467353105545,0.008364916779100895,0.022373078390955925,-0.015307808294892311,0.05044064298272133,-0.003604739671573043,-0.013926876708865166,0.03621687367558479,0.02477368712425232,-0.03970777988433838,0.015109721571207047,-0.04467371851205826,-0.023494087159633636,0.01659235917031765,0.01831270381808281,-0.00027467741165310144,-0.023455310612916946,-0.05872833728790283,0.03556002676486969,0.029801271855831146,-0.008220439776778221,-0.025620117783546448,0.04226638749241829,0.03216749057173729,0.03252726048231125,0.01831142045557499,0.024309609085321426,-0.014436527155339718,0.031151816248893738,-0.0022594942711293697,-0.03370708227157593,-0.005955651868134737,0.01984192244708538,0.0016666463343426585,-0.06348875164985657,-0.014969061128795147,0.0024419869296252728,0.0052079977467656136,0.011966582387685776,0.02351151406764984,0.02936338633298874,-0.02839999832212925,-0.05409405753016472,0.1347011923789978,0.056032516062259674,0.016610438004136086,-0.009018278680741787,-0.02177446335554123,-0.00752907944843173,0.07997966557741165,0.03445790708065033,0.03494228795170784,0.025101158767938614,-0.01913578063249588,-0.02570102922618389,-0.03218311071395874,-0.08576074242591858,0.00019441785116214305,0.024772973731160164,-0.045077309012413025,0.01190023310482502,0.004529373720288277,-0.029486505314707756,0.007042017299681902,0.008446251973509789,-0.0018880522111430764,0.04501218721270561,0.013942419551312923,0.03770188242197037,0.00951078999787569,-0.0017500297399237752,-0.028792820870876312,-0.015188726596534252,0.03793498873710632,0.01813487336039543,0.04489077627658844,0.052868202328681946,0.01528669148683548,0.022953640669584274,0.0033526639454066753,0.009472029283642769,-0.01220807433128357,0.041245073080062866,0.03279181569814682,0.010811018757522106,0.026643866673111916,-0.008540383540093899,0.06096874177455902,-0.02357615903019905,0.13843221962451935,0.03268098458647728,-0.010844175703823566,-0.002756956499069929,-0.03178505599498749,-0.0368170440196991,-0.019433720037341118,-0.003486671717837453,-0.021317945793271065,-0.009363988414406776,0.11024710536003113,0.0019377839053049684,0.05184675008058548,-0.03096120059490204,0.028855979442596436,-0.007245693821460009,-0.030241621658205986,-0.012188142165541649,-0.1064353808760643,-0.0046821292489767075,-0.030297724530100822,-0.0098975645378232,0.03622975945472717,-0.002012448152527213,-0.006758298724889755,0.033591121435165405,0.032865971326828,0.021534662693738937,-0.058304332196712494,-0.01164337620139122,-0.07156387716531754,-0.09169445931911469,-0.04905017092823982,-0.026244597509503365,0.07943461835384369,0.012259362265467644,-0.02362413890659809,-0.005935772322118282,-0.0024576536379754543,0.049420736730098724,0.072024405002594,-0.00013558905629906803,-0.019055087119340897,-0.03281422331929207,0.04402749985456467,-0.021570418030023575,0.006451164837926626,0.015705298632383347,0.09095311909914017,0.07867617160081863,0.023435305804014206,-0.03651700168848038,-0.019941722974181175,0.023623289540410042,-0.02536117285490036,-0.008946184068918228,0.04809929057955742,0.0039881146512925625,-0.012341278605163097,-0.03843359649181366,0.05556841567158699,-0.023277724161744118,-0.022852953523397446,-0.019612791016697884,-0.055325720459222794,-0.06559166312217712,0.012897980399429798,-0.012747680768370628,0.03435894101858139,-0.010829266160726547,-0.0007392464904114604,0.04005138948559761,-0.00855278130620718,0.023775335401296616,0.006656310986727476,-0.003298106137663126,-0.03393017500638962,0.06357067078351974,-0.012538042850792408,-0.0036246601957827806,-0.002915250137448311,0.04758632183074951,0.04483462870121002,-0.02733864076435566,-0.021386481821537018,-0.024461816996335983,0.0071426257491111755,0.019808895885944366,0.019058533012866974,0.023094352334737778,0.04648257791996002,0.0028298760298639536,-0.019033282995224,-0.019391512498259544,0.011835210025310516,0.04615691304206848,-0.06004638597369194,-0.014646675437688828,-0.07623721659183502,0.07478080689907074,-0.02833828702569008,0.022014502435922623,0.029537344351410866,0.0016620960086584091,-0.0019287136383354664,0.047291938215494156,0.0001684852468315512,0.05752698704600334,-4.965424421749641e-33,0.002834621351212263,0.03863171860575676,-0.025394445285201073,0.006339316722005606,-0.07217884808778763,-0.013882866129279137,-0.02591925673186779,-0.0466667115688324,-0.027150804176926613,-0.034582991153001785,-0.0016838957089930773,-0.002686305670067668,-0.003669267985969782,0.01357984822243452,-0.017976604402065277,0.02804166078567505,0.029809920117259026,0.005312380846589804,0.02551134303212166,0.042770370841026306,-0.010257624089717865,0.03752234950661659,-0.058183133602142334,0.011683889664709568,-0.07516620308160782,0.009731343947350979,0.014693054370582104,0.03683091327548027,-0.07550956308841705,0.042163196951150894,-0.020780527964234352,-0.026135874912142754,-0.015308975242078304,-0.035324010998010635,0.05477983504533768,0.020040500909090042,-0.011259911581873894,-0.04198906943202019,-0.03348197415471077,-0.00554042449221015,0.12938831746578217,0.012116438709199429,-0.014614113606512547,-0.002364991931244731,0.04526853561401367,0.00012305506970733404,0.013042192906141281,-0.01296230498701334,-0.07685098797082901,0.04019307345151901,0.008467906154692173,0.01843695342540741,-0.024324454367160797,0.06267435103654861,0.0066819218918681145,-0.00706345122307539,0.009020448662340641,0.04861317574977875,-0.046806059777736664,-0.06583471596240997,-0.06486932188272476,-0.010532028041779995,-0.023275984451174736,0.01805889792740345,0.013477887958288193,0.02702750824391842,0.024094238877296448,-0.022282294929027557,-0.04927057772874832,-0.038634609431028366,-0.06354706734418869,-0.007265119813382626,-0.03430572524666786,0.04134797304868698,-0.028307029977440834,-0.05108850821852684,-0.04968651011586189,-0.03144164755940437,0.03945248946547508,0.011224989779293537,-0.01813436672091484,0.034981731325387955,0.04088357463479042,-0.009125135838985443,-0.01761934719979763,-0.036478862166404724,0.047451213002204895,-0.01893780566751957,-0.06352467089891434,0.014595882035791874,-0.020048975944519043,0.0809195414185524,-0.021518535912036896,0.046216826885938644,-0.017160551622509956,-0.03925596922636032,-0.019618066027760506,0.04668697714805603,-0.004983815830200911,0.01781410165131092,-0.012334669008851051,-0.06659955531358719,-0.03356119245290756,-0.06617183983325958,-0.006489316932857037,0.06296969950199127,0.02360771782696247,-0.043378766626119614,0.008802356198430061,-0.0018738850485533476,0.006196616683155298,0.03560509532690048,-0.053349677473306656,0.030749456956982613,0.019696028903126717,0.04711219668388367,0.011671842075884342,0.018921276554465294,0.028207508847117424,0.06656545400619507,-0.016675924882292747,-0.030501743778586388,0.02772182784974575,0.03846340999007225,0.0007791605312377214,-0.020421603694558144,-0.03469601646065712,-0.02799682319164276,-0.02520495466887951,-0.016678208485245705,0.016093403100967407,-0.017198044806718826,2.221813701908104e-7,-0.048817042261362076,-0.04116372391581535,-0.08098291605710983,0.0035397098399698734,0.005359631963074207,-0.0050615244545042515,0.01713584177196026,-0.053985346108675,0.014433935284614563,-0.06494052708148956,0.0148747768253088,0.005709825549274683,0.0631202682852745,0.04914936423301697,-0.09468528628349304,-0.016614310443401337,0.021031050011515617,-0.06242978945374489,-0.040607139468193054,0.007169701624661684,-0.013950197026133537,0.03306606039404869,0.07338375598192215,-0.002402558457106352,-0.007206982467323542,0.05368051305413246,0.024689799174666405,-0.036900594830513,0.01263115368783474,-0.015600566752254963,0.04784277454018593,-0.05518437922000885,-0.021935738623142242,0.06919962167739868,0.0046025835908949375,0.01333309430629015,0.03743123263120651,0.0146494684740901,0.0014049927704036236,0.010619109496474266,0.048628680408000946,-0.01571005955338478,-0.02501632273197174,-0.043631333857774734,0.0343533530831337,-0.007299383636564016,0.011497252620756626,0.07232112437486649,0.013290919363498688,0.023837339133024216,-0.03904898837208748,-0.04096488282084465,-0.03111094981431961,-0.03248406574130058,0.02411537617444992,-0.011455000378191471,0.008374416269361973,0.019166763871908188,0.03977087140083313,0.01612957939505577,0.010016744956374168,-0.06862274557352066,0.0166883934289217,-0.02534838579595089,0.051073107868433,0.0376783162355423,-0.015045758336782455,2.3720426779050157e-34,-0.022824611514806747,-0.028642769902944565,0.019988983869552612,0.025884713977575302,0.03664432093501091,-0.02540070004761219,0.07045117765665054,-0.017562108114361763,0.02907264232635498,-0.03511419519782066,0.0011927330633625388]'
SET
  @HasCustomProps_141a6fb7 = 0
SET
  @HasCustomEvents_141a6fb7 = 0
SET
  @RequiresData_141a6fb7 = 0
SET
  @DependencyCount_141a6fb7 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_141a6fb7 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_141a6fb7 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_141a6fb7 = 0
SET
  @ID_141a6fb7 = '9F9D8195-FFAB-4373-A081-4DB11AD4B313'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_141a6fb7,
  @Name = @Name_141a6fb7,
  @Version = @Version_141a6fb7,
  @VersionSequence = @VersionSequence_141a6fb7,
  @Title = @Title_141a6fb7,
  @Description = @Description_141a6fb7,
  @Type = @Type_141a6fb7,
  @Status = @Status_141a6fb7,
  @DeveloperName = @DeveloperName_141a6fb7,
  @DeveloperEmail = @DeveloperEmail_141a6fb7,
  @DeveloperOrganization = @DeveloperOrganization_141a6fb7,
  @SourceRegistryID = @SourceRegistryID_141a6fb7,
  @ReplicatedAt = @ReplicatedAt_141a6fb7,
  @LastSyncedAt = @LastSyncedAt_141a6fb7,
  @Specification = @Specification_141a6fb7,
  @FunctionalRequirements = @FunctionalRequirements_141a6fb7,
  @TechnicalDesign = @TechnicalDesign_141a6fb7,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_141a6fb7,
  @TechnicalDesignVector = @TechnicalDesignVector_141a6fb7,
  @HasCustomProps = @HasCustomProps_141a6fb7,
  @HasCustomEvents = @HasCustomEvents_141a6fb7,
  @RequiresData = @RequiresData_141a6fb7,
  @DependencyCount = @DependencyCount_141a6fb7,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_141a6fb7,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_141a6fb7,
  @HasRequiredCustomProps = @HasRequiredCustomProps_141a6fb7,
  @ID = @ID_141a6fb7;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_10fc6de3 NVARCHAR(MAX),
@Name_10fc6de3 NVARCHAR(500),
@Version_10fc6de3 NVARCHAR(50),
@VersionSequence_10fc6de3 INT,
@Title_10fc6de3 NVARCHAR(1000),
@Description_10fc6de3 NVARCHAR(MAX),
@Type_10fc6de3 NVARCHAR(255),
@Status_10fc6de3 NVARCHAR(50),
@DeveloperName_10fc6de3 NVARCHAR(255),
@DeveloperEmail_10fc6de3 NVARCHAR(255),
@DeveloperOrganization_10fc6de3 NVARCHAR(255),
@SourceRegistryID_10fc6de3 UNIQUEIDENTIFIER,
@ReplicatedAt_10fc6de3 DATETIMEOFFSET,
@LastSyncedAt_10fc6de3 DATETIMEOFFSET,
@Specification_10fc6de3 NVARCHAR(MAX),
@FunctionalRequirements_10fc6de3 NVARCHAR(MAX),
@TechnicalDesign_10fc6de3 NVARCHAR(MAX),
@FunctionalRequirementsVector_10fc6de3 NVARCHAR(MAX),
@TechnicalDesignVector_10fc6de3 NVARCHAR(MAX),
@HasCustomProps_10fc6de3 BIT,
@HasCustomEvents_10fc6de3 BIT,
@RequiresData_10fc6de3 BIT,
@DependencyCount_10fc6de3 INT,
@TechnicalDesignVectorEmbeddingModelID_10fc6de3 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_10fc6de3 NVARCHAR(MAX),
@HasRequiredCustomProps_10fc6de3 BIT,
@ID_10fc6de3 UNIQUEIDENTIFIER
SET
  @Namespace_10fc6de3 = N'CRM/Customer'
SET
  @Name_10fc6de3 = N'DealsTab'
SET
  @Version_10fc6de3 = N'1.0.0'
SET
  @VersionSequence_10fc6de3 = 1
SET
  @Title_10fc6de3 = N'Deals Tab'
SET
  @Description_10fc6de3 = N'Deals tab showing customer opportunities and pipeline'
SET
  @Type_10fc6de3 = N'Table'
SET
  @Status_10fc6de3 = N'Deprecated'
SET
  @Specification_10fc6de3 = N'{}'
SET
  @FunctionalRequirements_10fc6de3 = N'## Deals Tab

### Purpose
Displays and manages deal/opportunity information.

### Features
- Deal pipeline view
- Deal value and stage
- Progress tracking
- Quick actions'
SET
  @TechnicalDesign_10fc6de3 = N'## Implementation

### Props
- deals: Array of deal records
- onDealSelect: Deal selection handler
- viewMode: Display mode (list/cards)'
SET
  @FunctionalRequirementsVector_10fc6de3 = N'[-0.02196677401661873,0.03701046109199524,-0.006565859541296959,-0.06346628814935684,0.014735844917595387,0.008915109559893608,0.029300298541784286,0.005990240257233381,-0.030581526458263397,-0.006485257297754288,-0.07424316555261612,0.03143661096692085,0.040261395275592804,0.19404377043247223,0.01418193057179451,-0.024534836411476135,0.02606533095240593,-0.015229456126689911,-0.025621535256505013,0.013272391632199287,-0.0030715889297425747,-0.0010441620834171772,-0.027780702337622643,0.021625200286507607,-0.042514119297266006,-0.00969885103404522,-0.01927368715405464,-0.016561388969421387,0.00015036649710964411,-0.07333528250455856,-0.0014605936594307423,0.03334130346775055,-0.044779255986213684,-0.059433355927467346,0.0000021993432710587513,0.00024495690013282,-0.019480593502521515,0.004048049915581942,-0.08072029799222946,0.04816840589046478,0.041116565465927124,-0.031053656712174416,0.0140367541462183,0.006627536844462156,0.0038723330944776535,-0.024416225031018257,0.0031211827881634235,0.0559631884098053,-0.02147672139108181,-0.0005118761910125613,-0.005108147859573364,0.015557970851659775,0.014952030032873154,-0.0419229231774807,0.09150989353656769,-0.09984312951564789,0.016939254477620125,-0.04253534972667694,0.05376793071627617,-0.009928346611559391,-0.0059482641518116,0.002131182234734297,0.0026934260968118906,-0.03961293026804924,0.07427230477333069,0.05743354558944702,0.0695129930973053,-0.07598300278186798,-0.00494635384529829,0.008455288596451283,0.09788147360086441,0.026207299903035164,-0.012451387010514736,-0.0768643170595169,-0.026010211557149887,-0.029504025354981422,-0.041070468723773956,0.048028480261564255,0.00597500242292881,-0.02400074154138565,-0.028464313596487045,-0.0022087267134338617,-0.01061085145920515,0.011492975056171417,-0.0009350189357064664,-0.02819189988076687,0.0008731488487683237,0.02554796263575554,-0.03024057112634182,-0.0004447909304872155,0.009595345705747604,-0.0516430102288723,-0.027432214468717575,0.004570370074361563,-0.07186774909496307,-0.026856528595089912,0.010735920630395412,0.03351368010044098,-0.0020366120152175426,-0.0040572951547801495,-0.009267115034162998,-0.007345012854784727,-0.006333175115287304,0.030252957716584206,0.041227567940950394,0.008421037346124649,-0.04008309915661812,-0.06799246370792389,-0.021639419719576836,0.03479393571615219,-0.00515703996643424,0.016485119238495827,-0.010886912234127522,0.056964464485645294,-0.03662979602813721,0.007920239120721817,-0.048565808683633804,0.005445194896310568,-0.040893808007240295,0.036758556962013245,0.1294805258512497,0.0011467200238257647,0.012248405255377293,0.013504435308277607,-0.03288527578115463,-0.03344738483428955,-0.01954779401421547,-0.01755615696310997,-0.013158891350030899,0.0371919646859169,-0.0315515473484993,-0.014830232597887516,0.00399682717397809,-0.04858926311135292,0.0020107850432395935,0.03682995215058327,0.009397977963089943,-0.001446800073608756,-0.019662469625473022,-0.0021350125316530466,0.0168345607817173,0.01083740871399641,-0.06656397879123688,0.01988217979669571,-0.03343760222196579,-0.009693925268948078,-0.02864709123969078,0.021645769476890564,-0.0001994110643863678,0.04309476539492607,-0.04125044867396355,-0.007580691948533058,-0.007563849911093712,0.02239910699427128,-0.03031006269156933,-0.008499497547745705,-0.046996213495731354,-0.06301286071538925,-0.004205403383821249,0.05520287901163101,-0.016243908554315567,-0.03315649926662445,0.00971968099474907,0.0033569918014109135,-0.04384353384375572,0.003716221312060952,0.010441322810947895,0.0020166998729109764,0.06424868851900101,-0.04826449230313301,-0.02913508377969265,-0.04163900017738342,-0.023415418341755867,0.05065781623125076,0.04894022271037102,0.007419907953590155,0.07648392021656036,0.01316624041646719,-0.04218634217977524,0.007992254570126534,-0.0030399297829717398,-0.16039998829364777,-0.007468697149306536,0.07030481845140457,0.026696929708123207,-0.037642404437065125,-0.06592714041471481,0.019878549501299858,-0.0010744801256805658,0.01662013866007328,0.0011028769658878446,0.006120639853179455,-0.04810838773846626,0.034221842885017395,-0.022188909351825714,-0.022182775661349297,-0.057273849844932556,-0.04656599834561348,0.028656087815761566,0.03371240198612213,-0.00840319599956274,-0.031067583709955215,0.0227573923766613,0.047793760895729065,0.04128076881170273,-0.02048666588962078,-0.007796627469360828,-0.037414565682411194,-0.09689350426197052,-0.022244522348046303,0.08272147923707962,-0.020322632044553757,-0.04578344523906708,0.03539931774139404,-0.032266758382320404,-0.017085324972867966,0.0027149785310029984,0.03310349956154823,-0.043292924761772156,0.010713959112763405,-0.03835231065750122,0.05126544460654259,-0.00203139241784811,0.02685372345149517,0.06933946907520294,-0.0013609430752694607,0.02457965537905693,-0.006456257309764624,0.0010032281279563904,-0.003778239479288459,0.009142052382230759,-0.012865467928349972,0.04359382390975952,0.027447747066617012,0.06431755423545837,0.035220399498939514,0.046391937881708145,0.08896338939666748,-0.0032751569524407387,0.03677048534154892,-0.03309302777051926,-0.029960960149765015,-0.012016993947327137,0.022942019626498222,0.03501615300774574,-0.04071803763508797,-0.13952384889125824,0.004276892635971308,0.018926605582237244,-0.006778267677873373,-0.00354800489731133,0.017331037670373917,0.058362990617752075,0.030986789613962173,-0.012341056019067764,0.07763852179050446,-0.09491480886936188,0.0010708170011639595,0.014107326976954937,0.0902629867196083,0.02240542508661747,-0.025308221578598022,0.0035356800071895123,0.004354177042841911,0.016188494861125946,0.005612858571112156,0.012214606627821922,-0.01188273262232542,0.007763031870126724,0.018903041258454323,0.005306922364979982,0.021379048004746437,0.025305937975645065,-0.0298171229660511,-0.010931257158517838,0.054551899433135986,-0.006272558122873306,0.03342214226722717,-0.031052546575665474,0.0014402688248082995,0.013189536519348621,-0.017638780176639557,-0.04566553980112076,0.030348382890224457,0.0014504427090287209,-0.006991541013121605,0.03550412505865097,-0.07691548764705658,-0.05819240212440491,-0.0956404060125351,0.05469327047467232,-0.026422711089253426,0.039730317890644073,-0.003129516029730439,-0.03375981003046036,0.0047491020523011684,-0.07619809359312057,0.029492376372218132,-0.03333861008286476,0.07392655313014984,-0.01542401872575283,-0.0038005001842975616,-0.014023126102983952,-0.004184601828455925,-0.007468057330697775,0.01845410279929638,0.0022283587604761124,0.006813928950577974,0.0320461131632328,0.07169757038354874,0.024666666984558105,0.01313342060893774,0.011062772013247013,-0.029518643394112587,0.014309093356132507,0.0018858216935768723,0.0036413040943443775,0.058258432894945145,-0.024974972009658813,0.048791009932756424,-0.006320820190012455,-0.009410985745489597,-0.01677647978067398,0.003843125654384494,-0.026012243703007698,0.005918403621762991,-0.052209269255399704,-0.01682690903544426,-0.0049849022179841995,-0.042432818561792374,0.008014090359210968,0.011495357379317284,-0.06252118200063705,-0.025172201916575432,0.06884142011404037,0.008625374175608158,-0.0065972935408353806,0.029525602236390114,0.01789012737572193,0.0025270143523812294,-0.03130663186311722,0.03013913705945015,-0.027878135442733765,-0.09038692712783813,0.02858157828450203,0.005943526513874531,0.03460931032896042,-0.006576832849532366,-0.12714314460754395,0.017590587958693504,0.036287907510995865,0.04581991583108902,-0.024862786754965782,-0.023613879457116127,-0.0019839629530906677,-0.03888901695609093,-0.017239613458514214,-0.04784267395734787,0.010447178035974503,-0.06131993979215622,0.014758608303964138,-0.0015777491498738527,-0.013933517038822174,0.061199259012937546,0.04355470463633537,0.04619305208325386,-0.00864606536924839,-0.03013344295322895,0.016219623386859894,0.010506867431104183,-0.008710969239473343,0.009905596263706684,0.0009411119390279055,0.04441690817475319,0.0029678181745111942,-0.007153901271522045,0.036256156861782074,0.022996876388788223,-0.021271957084536552,0.004356912802904844,0.04214576631784439,-0.016678811982274055,0.0545310340821743,-0.035964976996183395,0.037726450711488724,0.03796689957380295,-0.022549746558070183,-0.014444483444094658,0.01868237927556038,0.028745198622345924,-0.004843603353947401,0.02778538316488266,-0.051785390824079514,0.01678743213415146,0.000021449457562994212,-0.011741737835109234,-0.02025177888572216,0.03631652891635895,-0.02950596623122692,0.0035762565676122904,-0.008148516528308392,0.11707274615764618,0.04874490201473236,-0.00011539939441718161,-0.010916261002421379,-0.02557585947215557,0.016939233988523483,0.015349386259913445,0.0144901592284441,0.032021086663007736,-0.0782209187746048,-0.012783324345946312,0.010543126612901688,0.024306021630764008,0.035881463438272476,0.003976268693804741,-0.0022013692650943995,-0.011344071477651596,-0.008479960262775421,-0.006740797311067581,-0.030367916449904442,-0.0014035168569535017,0.014317546971142292,-0.014816702343523502,0.011900536715984344,-0.016148703172802925,0.010694732889533043,-0.07183129340410233,-0.008038448169827461,0.0024952541571110487,-0.017866946756839752,0.029429443180561066,-0.013755222782492638,-0.0011005459818989038,0.00851296354085207,0.013702081516385078,0.037261418998241425,0.009187144227325916,-0.033786218613386154,-0.010049478150904179,-0.019208112731575966,0.04417678341269493,0.03784865140914917,-0.006163461599498987,-0.0002118493284797296,0.0022261738777160645,-0.010893261060118675,-0.0030932596419006586,-0.007309740409255028,-0.009873743169009686,-0.017482934519648552,-0.028903979808092117,-0.01116054505109787,0.010876392014324665,-0.044887881726026535,-0.0335310734808445,0.009845229797065258,-0.06311842054128647,-0.011910291388630867,-0.04922211915254593,0.0056946901604533195,0.02979755774140358,-0.05852267146110535,0.028759688138961792,0.010509688407182693,-0.09955035895109177,-0.0829744040966034,-0.0271610114723444,0.01025045569986105,-0.019808700308203697,0.041061583906412125,-0.006371170748025179,-0.036462463438510895,-0.021130472421646118,-0.012789019383490086,0.005274428520351648,-0.028135720640420914,0.03332539275288582,0.06725496798753738,0.00506955198943615,-0.038964588195085526,0.03508491441607475,0.01797381415963173,-0.08140414953231812,-0.016640806570649147,0.03934423625469208,-0.003163072979077697,0.034341149032115936,0.009350268170237541,-0.0016027609817683697,0.039172496646642685,-0.03556617721915245,-0.0059268539771437645,0.05422085523605347,0.010695533826947212,0.0705355554819107,-0.025756239891052246,-0.028027763590216637,-0.02428531087934971,-0.04425957798957825,-0.013496545143425465,0.01888233609497547,0.010975719429552555,-0.030273018404841423,-0.0072317845188081264,-0.013848323374986649,-0.02129039727151394,0.015497964806854725,-0.045236412435770035,-0.020336993038654327,0.0584568977355957,0.0029130063485354185,0.017162052914500237,-0.08515223115682602,0.04807297885417938,0.13200640678405762,-0.0013033922296017408,0.03979877382516861,-0.01494213193655014,-0.00875746738165617,0.03318968787789345,-0.01319912914186716,0.004517595749348402,-0.013037891127169132,0.048512764275074005,-0.030265232548117638,0.02833615243434906,-0.025086654350161552,-0.022052351385354996,0.05970100685954094,-0.009984557516872883,0.01430315151810646,-0.04609138146042824,0.033831849694252014,0.0051420642994344234,0.048157792538404465,0.012451249174773693,0.061483997851610184,-0.023452438414096832,0.023059997707605362,0.01971464417874813,0.023764289915561676,-0.0067500947043299675,-0.03580806404352188,0.001357512199319899,-0.008725865744054317,-0.009382647462189198,-0.020192211493849754,-0.009663115255534649,0.0017012212192639709,0.014571324922144413,-0.05369676649570465,0.01463591679930687,0.006069262977689505,-0.04078809544444084,-6.779421222657686e-33,-0.01991870440542698,-0.02764584869146347,-0.0252525731921196,-0.03131265938282013,0.009027470834553242,-0.019910166040062904,0.004132281523197889,-0.04202171787619591,-0.008187459781765938,0.004204702563583851,-0.0031750802882015705,-0.00978356134146452,0.015556191094219685,-0.0055761379189789295,0.045122772455215454,-0.02210860699415207,0.06108684465289116,-0.01662980578839779,0.01964637264609337,0.01592073403298855,-0.051638733595609665,0.004683209117501974,0.06109258532524109,0.02557113766670227,-0.031377729028463364,0.02039148099720478,-0.02059187740087509,0.01414618268609047,0.04451250657439232,0.014556815847754478,-0.007650192826986313,-0.037825848907232285,-0.020432310178875923,-0.0622839517891407,-0.0016933076549321413,0.012734943069517612,-0.02168361470103264,-0.018452264368534088,-0.014669563621282578,0.0017934495117515326,0.042602431029081345,-0.00012356565275695175,-0.0022138450294733047,0.004969255533069372,-0.024808591231703758,-0.020178167149424553,-0.002126450650393963,0.0016604687552899122,0.030304450541734695,0.013815442100167274,-0.04398910701274872,-0.008642523549497128,0.007123436313122511,0.0298747755587101,0.07994002848863602,0.02280852384865284,0.04195660352706909,-0.029717812314629555,-0.04318869113922119,-0.03106566332280636,-0.033398933708667755,-0.0049698930233716965,0.03182189539074898,0.002216341905295849,0.01998080313205719,0.02469591796398163,-0.024639906361699104,0.0498410202562809,0.013648731634020805,-0.010018402710556984,-0.018878675997257233,0.06653641909360886,0.0065116421319544315,-0.10717316716909409,-0.04626693204045296,0.046127449721097946,-0.001446490059606731,0.02545407973229885,0.029040317982435226,0.0798068642616272,-0.016736594960093498,0.012806318700313568,0.006810834631323814,0.04230125620961189,0.006970764137804508,-0.03893548995256424,-0.004435832612216473,0.017935067415237427,0.030954962596297264,-0.004736640956252813,0.031004348769783974,0.04175001382827759,-0.03456223011016846,0.014180862344801426,-0.03106466680765152,0.022537605836987495,0.03547227010130882,0.04353532940149307,-0.023642586544156075,-0.03461581841111183,-0.025902383029460907,0.03584839776158333,0.03795986250042915,-0.038441166281700134,0.029525533318519592,0.052917394787073135,-0.01845650188624859,-0.0037105095107108355,-0.05335530638694763,-0.0007448701653629541,0.01736300252377987,0.0465908981859684,-0.02723347768187523,-0.03436237573623657,-0.0017911227187141776,-0.020649246871471405,-0.01053018681704998,0.03490506112575531,0.008559633046388626,0.023715797811746597,0.01251667644828558,0.02209433726966381,0.009615710005164146,0.036062177270650864,0.04346153140068054,-0.007002428639680147,-0.020045358687639236,-0.027022602036595345,0.0858059749007225,0.0027244319207966328,0.004083841107785702,0.02023487724363804,2.934922065378487e-7,-0.03175676241517067,0.07181454449892044,0.016692977398633957,0.08416985720396042,0.0060165212489664555,0.030530979856848717,-0.0032609004992991686,-0.010264157317578793,-0.013817849569022655,-0.07217516750097275,0.030801896005868912,-0.03360116481781006,0.024456046521663666,0.04499421641230583,0.03814275935292244,-0.07909951359033585,-0.02474132366478443,-0.008633140474557877,-0.05853154510259628,-0.05566646531224251,0.04918275028467178,0.027750162407755852,0.047667939215898514,0.01763385534286499,0.011974419467151165,0.07003463059663773,-0.01921050250530243,-0.04349125176668167,-0.012880808673799038,0.007909882813692093,-0.001874903799034655,-0.04879414662718773,-0.002124269027262926,-0.0002703212376218289,-0.003000690368935466,0.011877741664648056,-0.010831001214683056,-0.02933688648045063,0.010941647924482822,0.01808128133416176,-0.028660878539085388,-0.03931671380996704,-0.009730043821036816,-0.04970579221844673,0.02635977976024151,-0.04948177561163902,0.0039951251819729805,-0.0248277448117733,-0.010644711554050446,-0.006339972838759422,0.01837405003607273,0.024455076083540916,0.038244929164648056,-0.007538449484854937,0.029041584581136703,0.0053010680712759495,-0.015765096992254257,0.010944832116365433,0.04508478567004204,0.016092946752905846,-0.009028851054608822,0.054088935256004333,0.008530119433999062,-0.055380094796419144,0.043994393199682236,-0.024160923436284065,-0.006031390279531479,3.1915711661819095e-34,0.005698622670024633,-0.05225755646824837,0.030727585777640343,0.051484614610672,0.03193139657378197,-0.008634136989712715,-0.01581960916519165,-0.015341314487159252,0.008260431699454784,-0.05416237562894821,-0.04674656689167023]'
SET
  @TechnicalDesignVector_10fc6de3 = N'[-0.004953077994287014,-0.002947951899841428,-0.010760997422039509,-0.05494510754942894,0.027943652123212814,-0.028457047417759895,0.04042171314358711,0.05492458492517471,0.04881403222680092,-0.02828385680913925,-0.0004891972057521343,0.033918626606464386,0.04846927896142006,0.07037194818258286,0.017469177022576332,-0.01690691150724888,-0.0033691830467432737,0.02365851029753685,0.008372657001018524,-0.009573293849825859,0.03278070688247681,-0.038263950496912,-0.033330097794532776,-0.010386727750301361,0.021608490496873856,-0.04439253360033035,-0.0008246478391811252,-0.025617877021431923,0.04344962537288666,-0.08571095019578934,-0.014639860019087791,0.016286566853523254,0.0018887080950662494,-0.06710338592529297,0.0000014911742027834407,0.006902444642037153,0.0004512302402872592,-0.011865015141665936,-0.0050571756437420845,-0.022859549149870872,-0.01192102674394846,-0.011324000544846058,0.038908232003450394,-0.031944166868925095,-0.01680837571620941,-0.1284174621105194,-0.04021512344479561,0.052426137030124664,0.003596343332901597,0.005983627401292324,0.005327932070940733,0.028844114392995834,0.04570917412638664,-0.02310657501220703,0.06459611654281616,0.0558185949921608,0.03008003532886505,-0.09017760306596756,0.055636726319789886,0.013341856189072132,0.0011548104230314493,-0.03464796394109726,0.011808689683675766,-0.03750530630350113,0.008931227959692478,0.010833833366632462,0.09032845497131348,0.05542968958616257,0.01918375864624977,-0.01701093465089798,0.0548570342361927,0.025253351777791977,0.02381192333996296,-0.02166455239057541,0.0010992957977578044,-0.05564695969223976,0.024747435003519058,-0.003289473010227084,-0.02580212987959385,-0.005731835495680571,0.023234477266669273,0.012094016186892986,0.00830058939754963,-0.00891964789479971,0.01843675598502159,0.011293369345366955,0.010897958651185036,0.0013006575172767043,-0.02779979072511196,-0.03301794454455376,-0.024241415783762932,-0.02619124762713909,0.008099841885268688,-0.03043402172625065,-0.06222671642899513,0.012243798933923244,0.01696806587278843,-0.09883339703083038,0.009605196304619312,-0.029449868947267532,0.0023685276973992586,0.01968289539217949,0.037168949842453,-0.027934420853853226,0.07526278495788574,0.014131608419120312,-0.010538465343415737,-0.030902672559022903,-0.07658540457487106,0.020619219169020653,-0.027621982619166374,-0.0011774690356105566,0.008460666052997112,0.07551193237304688,-0.0037780865095555782,0.004730071406811476,-0.04751889407634735,-0.045036766678094864,-0.011358583346009254,-0.004481644835323095,0.03330814465880394,-0.026082098484039307,-0.0198627058416605,0.017463751137256622,-0.001972644357010722,0.030195578932762146,-0.021356258541345596,-0.09135115146636963,-0.00987315271049738,0.05735784396529198,0.014915390871465206,-0.024906350299715996,0.008297234773635864,-0.031666964292526245,-0.04301254823803902,0.01047430094331503,-0.0033070493955165148,-0.003253560746088624,0.020511608570814133,0.03502432256937027,-0.013062562793493271,0.01047299150377512,0.05454551801085472,0.04571990296244621,-0.06249881163239479,0.026164622977375984,0.04020807892084122,-0.08284049481153488,0.002748821396380663,0.035728368908166885,0.0051553635857999325,-0.0006037646089680493,-0.010738644748926163,0.0012873056111857295,-0.024727636948227882,0.042517274618148804,0.008415831252932549,-0.009676248766481876,0.06552403420209885,-0.021356433629989624,0.013078472577035427,-0.002545870142057538,0.14257125556468964,0.045588795095682144,-0.009262450970709324,-0.0023216961417347193,-0.08494152128696442,-0.02454432286322117,0.0023262735921889544,-0.01209503784775734,0.012692522257566452,-0.02722843550145626,-0.08129159361124039,-0.02277650311589241,0.033458586782217026,0.019426818937063217,0.06424127519130707,0.04711095616221428,-0.055091001093387604,-0.013156297616660595,0.014828222803771496,-0.05186420679092407,0.016826365143060684,0.03763299062848091,0.026085155084729195,-0.015047447755932808,-0.02854505181312561,-0.02421165071427822,0.021588174626231194,0.0016149957664310932,-0.015854693949222565,-0.021749552339315414,-0.01882321946322918,-0.017901979386806488,-0.021872924640774727,-0.008517877198755741,-0.020142771303653717,0.01937689259648323,0.02220791205763817,0.05032780021429062,-0.004898830782622099,-0.011764010414481163,0.03755607455968857,0.013035009615123272,0.02381918765604496,0.02352413535118103,-0.004465699195861816,-0.042784951627254486,-0.1048819050192833,-0.002469400642439723,0.015957685187458992,-0.0034083821810781956,-0.04587951675057411,0.027185967192053795,0.02486974373459816,-0.0022787684574723244,-0.00683249719440937,0.025508858263492584,-0.047169238328933716,0.0015378488460555673,-0.06073899194598198,-0.05451548472046852,0.05470011383295059,-0.00656129140406847,0.1041645035147667,-0.023158572614192963,0.0002487962774466723,-0.05371616408228874,0.020777061581611633,-0.06584568321704865,-0.008044490590691566,-0.04871981963515282,0.00948100071400404,-0.004810959566384554,0.11528316885232925,-0.007746879942715168,-0.03995509818196297,-0.01210072822868824,-0.008999125100672245,-0.01898127608001232,-0.045915570110082626,0.024791525676846504,0.004122774116694927,0.024287119507789612,-0.018397094681859016,-0.03482428193092346,-0.08839912712574005,0.0246694628149271,-0.04585006833076477,0.004065539687871933,0.03127448260784149,0.06452725827693939,0.05557126924395561,-0.01225389912724495,-0.032007697969675064,0.0036668465472757816,-0.013548292219638824,0.02219557948410511,-0.006331020500510931,0.02191922813653946,0.023465676233172417,0.024472836405038834,0.0032908818684518337,0.01826714724302292,0.04622803255915642,0.007723745424300432,0.002897159894928336,-0.06934094429016113,-0.006130389869213104,-0.0010517450282350183,-0.000184185933903791,-0.025086652487516403,0.007549989502876997,-0.013169210404157639,0.025299742817878723,0.03842202574014664,0.018876057118177414,0.03227801248431206,-0.00484682759270072,-0.018970677629113197,-0.026301933452486992,-0.025487257167696953,0.009013809263706207,0.015127431601285934,-0.010138561017811298,0.023943929001688957,-0.013415242545306683,0.03670231252908707,0.002716987393796444,-0.0980609655380249,0.0007661103154532611,-0.012339995242655277,0.022480936720967293,-0.037055522203445435,-0.021991722285747528,-0.008555964566767216,-0.07379618287086487,0.04768751561641693,0.021500976756215096,0.043675292283296585,0.005606362130492926,0.0014954793732613325,-0.018927499651908875,-0.013521414250135422,0.03180824592709541,0.010900638997554779,-0.04213201254606247,0.04933367297053337,0.020085657015442848,0.13726986944675446,-0.0026954433415085077,0.05400816723704338,0.012476243078708649,-0.07023587822914124,0.030061008408665657,0.021750759333372116,0.00716213695704937,0.010719159618020058,-0.03700825944542885,0.030756967142224312,-0.009674281813204288,-0.045958079397678375,0.04129725694656372,0.00037925789365544915,-0.03318031504750252,-0.042180538177490234,0.04352356493473053,0.006000582594424486,0.03022271767258644,0.05101405829191208,-0.005907032638788223,-0.02266884595155716,0.03113030083477497,0.04507560282945633,-0.018861301243305206,-0.036467745900154114,-0.010633692145347595,0.024549953639507294,0.0031433110125362873,0.011303664185106754,-0.04965542256832123,-0.030115673318505287,-0.022762015461921692,-0.04133685678243637,-0.021578913554549217,-0.02196638658642769,0.029251549392938614,-0.015347795560956001,-0.09402897208929062,0.0025160943623632193,0.013308092951774597,0.01641063392162323,0.005239355843514204,-0.008200560696423054,0.003490114351734519,0.022030694410204887,0.01401881966739893,0.02163063921034336,0.007147504016757011,-0.0075660995207726955,0.006050450727343559,0.050943534821271896,0.07605145871639252,0.04096570238471031,-0.024088852107524872,0.07593467831611633,0.03142153099179268,-0.043937090784311295,0.003433970035985112,0.0064740609377622604,-0.04974500089883804,0.030511461198329926,0.006901261396706104,-0.019456446170806885,-0.030315374955534935,-0.05848681181669235,0.03918519988656044,0.03222634270787239,-0.014313320629298687,-0.0062955766916275024,0.07397554814815521,-0.03185776248574257,0.024963384494185448,-0.023178914561867714,0.01969040185213089,-0.004622660577297211,0.025799743831157684,-0.017382431775331497,-0.03938515856862068,0.01834156922996044,-0.023259177803993225,0.018961841240525246,-0.03860023245215416,0.010877863503992558,0.019191693514585495,0.03827008605003357,0.04012216627597809,0.04995504766702652,0.00086336670210585,-0.009163792245090008,-0.03385695815086365,0.12489999830722809,0.09754769504070282,0.0002822758397087455,0.03803813084959984,-0.04417784884572029,-0.013033485971391201,0.04248464107513428,0.03304703161120415,-0.0013167810393497348,-0.09885051101446152,-0.04507247358560562,-0.040890876203775406,-0.01370391994714737,-0.06416290998458862,-0.008608994074165821,0.017008965834975243,-0.02675728313624859,0.002206576056778431,-0.014687109738588333,-0.05033005774021149,0.004110171925276518,0.0265163853764534,0.034755874425172806,0.029835928231477737,0.0007283426239155233,-0.017463039606809616,-0.02826775796711445,-0.034309111535549164,-0.026395883411169052,0.0015658728079870343,0.026091106235980988,-0.011738228611648083,0.022538818418979645,0.025188634172081947,-0.0206577368080616,-0.026395786553621292,0.04323101416230202,0.08934163302183151,-0.0187710989266634,0.03214140981435776,-0.00027885971940122545,0.03404368460178375,-0.011381637305021286,0.017894886434078217,-0.002253290032967925,-0.026328817009925842,0.09540297091007233,0.024444034323096275,-0.008969425223767757,-0.054779719561338425,0.00140423234552145,-0.049744002521038055,0.010401717387139797,-0.06814922392368317,-0.039369065314531326,0.004457144532352686,0.10492789000272751,0.01497796643525362,0.027687717229127884,0.01715647056698799,0.028470078483223915,-0.027918366715312004,-0.016195207834243774,0.011807886883616447,-0.07036050409078598,0.0039610425010323524,-0.006931854411959648,0.010681326501071453,0.02012326940894127,0.017735641449689865,-0.010129966773092747,-0.012512829154729843,0.02762719802558422,0.01274019479751587,0.027866965159773827,-0.027325060218572617,-0.04460019990801811,-0.02372242510318756,-0.02942521683871746,-0.005895983427762985,0.029301907867193222,-0.022850433364510536,-0.093576580286026,0.03750566765666008,-0.005339690949767828,0.011211083270609379,0.026452969759702682,-0.008914683014154434,-0.03203342482447624,-0.007313985843211412,0.02121139131486416,-0.03206750378012657,0.08841004222631454,0.026205504313111305,0.057880789041519165,0.023654114454984665,0.022113008424639702,0.052869733422994614,-0.09001730382442474,-0.008901048451662064,-0.020878246054053307,0.027386222034692764,0.007754460442811251,-0.006937489844858646,-0.015337368473410606,-0.04149515554308891,0.04948148503899574,-0.03984317183494568,-0.048316746950149536,0.04423831030726433,-0.05766581743955612,-0.01486927829682827,0.01852942816913128,0.018363535404205322,0.12891994416713715,0.00747023755684495,-0.016780640929937363,0.004733367823064327,-0.022613829001784325,0.04053090140223503,-0.007845500484108925,-0.0218875240534544,-0.03305837884545326,0.08099164813756943,0.007700077258050442,0.0217584278434515,0.009359348565340042,0.051091086119413376,0.019728420302271843,-0.001843966543674469,0.018743474036455154,0.005703690927475691,0.028932832181453705,-0.0015967697836458683,0.07032272964715958,0.00662227813154459,0.012127097696065903,-0.0055784303694963455,-0.031673602759838104,-0.007583281956613064,0.047966018319129944,0.03204676881432533,-0.053823430091142654,0.009748132899403572,-0.03955138847231865,0.025642333552241325,-0.05065639689564705,0.005261050071567297,-0.0034093710128217936,0.008725413121283054,-0.007964466698467731,0.02134142443537712,-0.019539954140782356,0.011476908810436726,-5.333586681033289e-33,-0.0034009034279733896,-0.014344415627419949,-0.0041318912990391254,-0.038158565759658813,-0.013921686448156834,-0.026474863290786743,-0.014682326465845108,-0.02370689995586872,0.024138623848557472,0.019371993839740753,-0.021359862759709358,-0.06403166800737381,-0.0014082276029512286,0.020828288048505783,-0.002071512397378683,-0.05371598154306412,0.023804519325494766,-0.003031326923519373,0.007914562709629536,0.02971567027270794,-0.01855326071381569,0.011497963219881058,0.014252450317144394,0.04502305015921593,-0.028953101485967636,-0.03482876718044281,0.005392587743699551,0.01856471225619316,-0.08629564195871353,0.0349254235625267,-0.04563288018107414,-0.016694050282239914,-0.02831953950226307,-0.05423928424715996,0.016754241660237312,0.01629006676375866,0.00696804141625762,-0.0250288937240839,-0.004946899600327015,0.020199444144964218,0.08334747701883316,0.026020215824246407,-0.030444804579019547,0.02158241532742977,0.014872495085000992,-0.009196599014103413,0.004093950614333153,-0.0095381373539567,-0.036002349108457565,-0.028105391189455986,0.011834101751446724,0.019572848454117775,-0.01045065838843584,-0.0014489262830466032,0.03543269261717796,-0.02522343210875988,0.05268017575144768,-0.010720004327595234,-0.05615846440196037,-0.010591494850814342,-0.002811380662024021,-0.04022432118654251,0.0395478755235672,-0.023842135444283485,-0.005195705685764551,0.0646744892001152,0.019872836768627167,-0.01785527728497982,0.021975651383399963,-0.004068831447511911,-0.06449133902788162,-0.002455895533785224,0.0003265373525209725,0.007077161222696304,0.03542792424559593,0.046348169445991516,-0.04005914553999901,-0.01834246888756752,-0.005988781806081533,0.035873401910066605,-0.023836780339479446,0.050546322017908096,0.014656249433755875,0.022295255213975906,-0.010784872807562351,-0.038639165461063385,0.06325540691614151,-0.020520847290754318,-0.048306483775377274,-0.011941363103687763,-0.005140254274010658,0.052662018686532974,0.005700388457626104,0.0058206962421536446,-0.06997492909431458,-0.012597069144248962,0.033172450959682465,0.05486183613538742,0.013539440929889679,-0.014709481038153172,0.027681715786457062,-0.026751216500997543,-0.010584195144474506,-0.02805407904088497,-0.03302915394306183,0.03853693976998329,-0.010187949985265732,-0.01980891451239586,-0.0025062288623303175,0.015657711774110794,0.04118999093770981,-0.0038849711418151855,-0.05246686562895775,0.013046298176050186,0.02736462838947773,0.01797746866941452,-0.005870291497558355,-0.05267247557640076,0.04053201526403427,0.029911424964666367,-0.04306480661034584,0.034123413264751434,-0.021803542971611023,0.024615421891212463,0.0442841574549675,0.019679956138134003,-0.04462075233459473,-0.05005721002817154,-0.001198758720420301,-0.025554588064551353,0.05169043689966202,0.004833786748349667,2.423885803182202e-7,-0.029894862323999405,0.001944846473634243,-0.053419530391693115,-0.030584830790758133,0.009941685944795609,0.025075366720557213,-0.02153361402451992,-0.045476894825696945,0.02605348639190197,-0.11953981220722198,0.0027874759398400784,-0.00849221833050251,0.06453408300876617,0.0784032866358757,-0.031835105270147324,-0.002312067896127701,0.0032959519885480404,-0.00991178210824728,-0.008375055156648159,0.006314542144536972,-0.0021973031107336283,-0.029420090839266777,0.03175954148173332,0.0008875861531123519,0.0100857550278306,0.08715417236089706,0.043255988508462906,-0.054300952702760696,-0.021609898656606674,-0.038688402622938156,0.04565145820379257,-0.0555458664894104,-0.0008622062159702182,0.009733112528920174,0.0053213248029351234,-0.011398397386074066,-0.0029550327453762293,0.008607925847172737,0.04686330258846283,0.0635686069726944,-0.008508372120559216,-0.014907811768352985,-0.01617070659995079,-0.020910102874040604,0.01727413572371006,-0.05666010454297066,-0.0036519740242511034,0.0051298923790454865,-0.030677899718284607,0.0013777886051684618,-0.05223208665847778,-0.03187005966901779,0.03107711486518383,-0.018974669277668,0.020468708127737045,-0.022458476945757866,-0.014286983758211136,0.035795070230960846,-0.010104091838002205,0.003293079324066639,-0.01062147505581379,-0.022567804902791977,0.017105286940932274,-0.03393762558698654,0.07087766379117966,-0.04460085183382034,-0.032938096672296524,2.4497991037357657e-34,0.001953249564394355,-0.05118227377533913,-0.023831216618418694,0.07133331149816513,0.016429344192147255,-0.016753455623984337,0.07900072634220123,-0.04000111296772957,0.039227500557899475,-0.04898257926106453,-0.012933487072587013]'
SET
  @HasCustomProps_10fc6de3 = 0
SET
  @HasCustomEvents_10fc6de3 = 0
SET
  @RequiresData_10fc6de3 = 0
SET
  @DependencyCount_10fc6de3 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_10fc6de3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_10fc6de3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_10fc6de3 = 0
SET
  @ID_10fc6de3 = 'F07042F2-82E7-4B5F-B308-CE32A0B55D65'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_10fc6de3,
  @Name = @Name_10fc6de3,
  @Version = @Version_10fc6de3,
  @VersionSequence = @VersionSequence_10fc6de3,
  @Title = @Title_10fc6de3,
  @Description = @Description_10fc6de3,
  @Type = @Type_10fc6de3,
  @Status = @Status_10fc6de3,
  @DeveloperName = @DeveloperName_10fc6de3,
  @DeveloperEmail = @DeveloperEmail_10fc6de3,
  @DeveloperOrganization = @DeveloperOrganization_10fc6de3,
  @SourceRegistryID = @SourceRegistryID_10fc6de3,
  @ReplicatedAt = @ReplicatedAt_10fc6de3,
  @LastSyncedAt = @LastSyncedAt_10fc6de3,
  @Specification = @Specification_10fc6de3,
  @FunctionalRequirements = @FunctionalRequirements_10fc6de3,
  @TechnicalDesign = @TechnicalDesign_10fc6de3,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_10fc6de3,
  @TechnicalDesignVector = @TechnicalDesignVector_10fc6de3,
  @HasCustomProps = @HasCustomProps_10fc6de3,
  @HasCustomEvents = @HasCustomEvents_10fc6de3,
  @RequiresData = @RequiresData_10fc6de3,
  @DependencyCount = @DependencyCount_10fc6de3,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_10fc6de3,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_10fc6de3,
  @HasRequiredCustomProps = @HasRequiredCustomProps_10fc6de3,
  @ID = @ID_10fc6de3;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_be6cb105 NVARCHAR(MAX),
@Name_be6cb105 NVARCHAR(500),
@Version_be6cb105 NVARCHAR(50),
@VersionSequence_be6cb105 INT,
@Title_be6cb105 NVARCHAR(1000),
@Description_be6cb105 NVARCHAR(MAX),
@Type_be6cb105 NVARCHAR(255),
@Status_be6cb105 NVARCHAR(50),
@DeveloperName_be6cb105 NVARCHAR(255),
@DeveloperEmail_be6cb105 NVARCHAR(255),
@DeveloperOrganization_be6cb105 NVARCHAR(255),
@SourceRegistryID_be6cb105 UNIQUEIDENTIFIER,
@ReplicatedAt_be6cb105 DATETIMEOFFSET,
@LastSyncedAt_be6cb105 DATETIMEOFFSET,
@Specification_be6cb105 NVARCHAR(MAX),
@FunctionalRequirements_be6cb105 NVARCHAR(MAX),
@TechnicalDesign_be6cb105 NVARCHAR(MAX),
@FunctionalRequirementsVector_be6cb105 NVARCHAR(MAX),
@TechnicalDesignVector_be6cb105 NVARCHAR(MAX),
@HasCustomProps_be6cb105 BIT,
@HasCustomEvents_be6cb105 BIT,
@RequiresData_be6cb105 BIT,
@DependencyCount_be6cb105 INT,
@TechnicalDesignVectorEmbeddingModelID_be6cb105 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_be6cb105 NVARCHAR(MAX),
@HasRequiredCustomProps_be6cb105 BIT,
@ID_be6cb105 UNIQUEIDENTIFIER
SET
  @Namespace_be6cb105 = N'CRM/Customer'
SET
  @Name_be6cb105 = N'InsightsTab'
SET
  @Version_be6cb105 = N'1.0.0'
SET
  @VersionSequence_be6cb105 = 1
SET
  @Title_be6cb105 = N'Insights Tab'
SET
  @Description_be6cb105 = N'Insights tab with AI-powered recommendations and analytics'
SET
  @Type_be6cb105 = N'Other'
SET
  @Status_be6cb105 = N'Deprecated'
SET
  @Specification_be6cb105 = N'{}'
SET
  @FunctionalRequirements_be6cb105 = N'## Insights Tab

### Purpose
Provides analytical insights and recommendations.

### Features
- AI-generated insights
- Trend analysis
- Recommendations
- Performance metrics'
SET
  @TechnicalDesign_be6cb105 = N'## Implementation

### Props
- insights: Array of insight items
- metrics: Performance metrics
- onInsightAction: Action handler for insights'
SET
  @FunctionalRequirementsVector_be6cb105 = N'[-0.02594558708369732,0.04721026122570038,-0.030519574880599976,-0.036546770483255386,0.04154852777719498,-0.030793610960245132,-0.010228556580841541,0.014011874794960022,-0.006122463848441839,0.00019692546629812568,0.0284542515873909,0.05795746669173241,0.04055820778012276,0.1946699321269989,-0.007843389175832272,0.006482032593339682,-0.014362530782818794,-0.01346979197114706,-0.03350050374865532,0.017434382811188698,-0.009830913506448269,-0.010038903914391994,0.0027350690215826035,0.020810889080166817,-0.036549728363752365,0.021831592544913292,0.018426179885864258,-0.00029620813438668847,-0.0008191118249669671,-0.03782285377383232,0.013789059594273567,-0.021779339760541916,-0.026220591738820076,0.03443075716495514,0.000002077076032946934,-0.00442963233217597,-0.039699092507362366,0.005620396230369806,-0.014711439609527588,0.0031949400436133146,0.08712143450975418,0.007667593192309141,0.023185426369309425,0.010090190917253494,0.01748836040496826,0.03533704951405525,0.009145602583885193,-0.029256649315357208,-0.013605840504169464,-0.008016598410904408,-0.004807581659406424,-0.007236968260258436,-0.022395886480808258,-0.0317520909011364,0.023922082036733627,-0.059106651693582535,-0.013956163078546524,-0.016978828236460686,0.033216625452041626,-0.06481531262397766,0.002121294615790248,0.021500207483768463,-0.001261865603737533,-0.05228150263428688,0.12588495016098022,0.034812554717063904,-0.000357452459866181,-0.07961659133434296,0.0029127115849405527,0.008801453746855259,0.08192402869462967,0.001737537793815136,-0.024731673300266266,-0.05210340395569801,-0.009068546816706657,-0.05658058449625969,-0.02800147235393524,-0.022500013932585716,0.01678384654223919,0.007154825609177351,-0.06667058169841766,0.019850922748446465,-0.024208741262555122,-0.0159938745200634,-0.011819462291896343,0.023780936375260353,-0.021500688046216965,0.005444714799523354,0.016411984339356422,-0.007511999923735857,0.07252256572246552,0.02179850824177265,0.011045748367905617,-0.008941929787397385,-0.07841359078884125,-0.05129221826791763,0.05817820131778717,-0.017058242112398148,0.015948984771966934,-0.014048184268176556,0.10467929393053055,0.033369749784469604,0.021344775334000587,0.03889411687850952,-0.005470852833241224,0.00489255553111434,0.03343413770198822,-0.06929350644350052,-0.03035837598145008,0.005682667717337608,-0.031786929816007614,0.012109086848795414,0.004900086205452681,0.03284955397248268,0.025444814935326576,0.007716480642557144,-0.04259602725505829,0.03295440226793289,-0.03551645204424858,0.032778091728687286,0.04184133559465408,0.030253568664193153,0.019850175827741623,0.010721705853939056,-0.03606457635760307,-0.010333653539419174,-0.05531199648976326,-0.008007671684026718,-0.009461465291678905,-0.014884592965245247,-0.0028205467388033867,-0.005381195805966854,-0.013178464025259018,0.011906679719686508,0.05397260561585426,-0.01994888111948967,-0.009780309163033962,-0.037310272455215454,-0.06383956968784332,-0.021755382418632507,0.06459277123212814,-0.0014436159981414676,-0.04477625712752342,0.05457969009876251,0.009514113888144493,-0.037324097007513046,-0.006706479005515575,0.040356557816267014,-0.008200201205909252,0.001851312117651105,-0.04323083907365799,-0.010807189159095287,-0.03278325870633125,0.03565637394785881,0.008073330856859684,-0.015216381289064884,0.002357881749048829,0.06434942036867142,-0.00469953753054142,0.06156466528773308,0.01513507030904293,-0.025892257690429688,-0.026112569496035576,0.011407931335270405,-0.007960204966366291,0.0037903895135968924,-0.08123317360877991,0.007285263855010271,-0.04166717082262039,0.00017394658061675727,-0.02600676380097866,-0.027216114103794098,0.006203087046742439,0.05436042323708534,0.015543841756880283,0.07931417226791382,0.07109572738409042,0.017043104395270348,0.0008014274062588811,-0.02638838067650795,-0.009899488650262356,-0.17656271159648895,0.02321953885257244,0.04489225894212723,0.009073755703866482,-0.016357140615582466,0.033904846757650375,0.05540907755494118,-0.006183112971484661,-0.01794297993183136,0.023421945050358772,0.001975392922759056,-0.05163545534014702,0.029882313683629036,0.00032101539545692503,-0.07024548947811127,-0.0017873388715088367,-0.11008492857217789,0.007332294713705778,0.00479107303544879,-0.04649561643600464,-0.03004109486937523,0.0555841289460659,0.0679769515991211,0.05246176943182945,-0.0454290509223938,-0.004996710456907749,-0.045870136469602585,-0.019878923892974854,-0.04522240161895752,0.019790295511484146,-0.001648295670747757,-0.0435822568833828,0.02975732646882534,-0.03118896670639515,0.025043129920959473,0.012366022914648056,0.024439938366413116,-0.03571721538901329,0.03896423429250717,-0.04419946298003197,0.025437599048018456,-0.10892224311828613,0.01337607391178608,0.035971079021692276,0.04528229683637619,0.060606855899095535,-0.022927986457943916,0.030711406841874123,0.04408295825123787,-0.0096967201679945,0.009515023790299892,0.03867044672369957,-0.022075628861784935,0.020918460562825203,0.009942039847373962,0.08600360155105591,0.13567489385604858,-0.02189670503139496,-0.023626413196325302,-0.021046608686447144,-0.030868927016854286,-0.01237481739372015,0.03139971196651459,0.04223645105957985,-0.06843540817499161,-0.02599538117647171,-0.01545687485486269,-0.013295095413923264,-0.03712129220366478,0.015423518605530262,0.033775657415390015,0.02807711251080036,-0.017045971006155014,-0.04124797135591507,-0.006995914503931999,-0.11469288170337677,-0.014250577427446842,0.03696246072649956,0.10039805620908737,0.0037724447902292013,-0.020629052072763443,-0.0019162989920005202,0.029412617906928062,-0.010683291591703892,-0.015541092492640018,0.038878362625837326,-0.030461613088846207,-0.010337309911847115,0.020032713189721107,-0.006888957228511572,-0.02238493412733078,0.020459776744246483,-0.02514698915183544,-0.006692798808217049,0.05176807940006256,-0.045384831726551056,-0.014111801981925964,-0.04548555985093117,-0.014442128129303455,0.02945048362016678,-0.02231239341199398,-0.0243824552744627,0.021862881258130074,-0.02002781443297863,0.030651476234197617,0.0547950342297554,-0.055210813879966736,-0.005736472085118294,-0.12347017973661423,0.029324263334274292,-0.0020537828095257282,-0.0032918762881308794,0.004888373892754316,-0.014928082004189491,-0.021166574209928513,-0.04740719124674797,0.07363475859165192,-0.000038136946386657655,0.06062554568052292,-0.00021810999896842986,0.026086296886205673,-0.018553245812654495,0.004252003971487284,-0.02519189566373825,0.03534374758601189,0.05761224031448364,-0.002838490530848503,0.034289415925741196,-0.018726766109466553,-0.005257979966700077,0.01362855825573206,-0.0187606830149889,0.039764534682035446,-0.022435111925005913,-0.02200232818722725,-0.04997480660676956,0.029343141242861748,0.0029719562735408545,0.0950075164437294,0.02478547766804695,-0.022250471636652946,0.007742014247924089,0.031748365610837936,-0.01171832624822855,-0.051601458340883255,-0.0681154653429985,-0.01304467674344778,-0.019956577569246292,-0.022716552019119263,0.01852869987487793,-0.005690956022590399,0.005626434460282326,0.026941560208797455,-0.033982157707214355,0.00045798273640684783,-0.04410602152347565,0.035610806196928024,0.016006281599402428,-0.018866416066884995,0.025935743004083633,0.02418467402458191,-0.003377640852704644,-0.021506458520889282,0.010225176811218262,0.003660752670839429,0.03484047204256058,-0.044624000787734985,-0.10468967258930206,0.015524856746196747,0.0305230263620615,0.0512799471616745,-0.011854870244860649,-0.030103618279099464,0.013074521906673908,-0.07452348619699478,-0.02369227632880211,-0.012489430606365204,-0.01456533744931221,-0.013798444531857967,0.04527108371257782,0.01647843047976494,-0.0022236774675548077,-0.025232406333088875,-0.03766736388206482,0.007065447513014078,0.010231170803308487,-0.012973497621715069,0.03760778158903122,0.0028856152202934027,-0.023429565131664276,-0.011300870217382908,0.014669878408312798,0.03937247022986412,0.01841103285551071,-0.035723526030778885,0.011462765745818615,-0.027875415980815887,0.030158989131450653,0.009434537030756474,0.036489199846982956,-0.025608133524656296,0.02721434086561203,0.007678091526031494,0.06295875459909439,-0.033990394324064255,-0.014537524431943893,-0.01811014860868454,-0.03359547629952431,0.04207184910774231,-0.004385748878121376,0.0006404718733392656,-0.09865555167198181,-0.0607144795358181,0.005966390948742628,-0.04092106968164444,-0.04715336114168167,-0.016850192099809647,-0.032063309103250504,0.01733313873410225,0.0074043250642716885,-0.04035177081823349,-0.019275136291980743,-0.016689976677298546,-0.0034773533698171377,0.004039684776216745,0.0878344178199768,0.009942728094756603,-0.04075085371732712,0.01990462839603424,-0.059442199766635895,-0.0005823422106914222,0.027354469522833824,-0.016633166000247,0.017919261008501053,-0.05287109687924385,0.030757999047636986,0.024138756096363068,0.03814447671175003,0.012556375935673714,0.055983658879995346,0.04300721362233162,0.053019654005765915,-0.019497370347380638,0.013344882056117058,-0.04792298376560211,0.05323658138513565,-0.05050092563033104,0.023590324446558952,0.04774017259478569,-0.003605007426813245,0.03705978766083717,-0.04288742318749428,0.00404334207996726,-0.04034348577260971,-0.009736292995512486,0.006244964431971312,-0.010770254768431187,-0.06740608811378479,0.005917321890592575,-0.00647489121183753,0.025475049391388893,0.0059142401441931725,-0.021727826446294785,0.056533485651016235,-0.033338513225317,-0.002931663766503334,-0.026804061606526375,-0.02526184543967247,0.04259287938475609,0.03325378894805908,-0.03923630714416504,-0.04839436709880829,0.021184632554650307,-0.004357528872787952,-0.025187097489833832,0.06877860426902771,0.001908434322103858,-0.032945964485406876,0.0020418912172317505,0.05107090249657631,0.035822004079818726,-0.02394520305097103,0.012251826003193855,0.019784482195973396,0.028298186138272285,0.01566126197576523,-0.012558549642562866,-0.03473985940217972,-0.006580181419849396,-0.0043098656460642815,-0.009635175578296185,-0.01847642846405506,-0.01169738918542862,-0.03399323299527168,-0.031073011457920074,-0.042620763182640076,-0.013866320252418518,-0.000567976210732013,-0.0066925836727023125,-0.036803219467401505,0.013585024513304234,-0.006783623248338699,-0.05460884049534798,-0.01897774077951908,0.022588709369301796,0.022755548357963562,0.02446712926030159,-0.008904555812478065,0.025312699377536774,-0.007740485947579145,-0.029140718281269073,-0.029560981318354607,0.04380211979150772,-0.03079710714519024,0.005990417208522558,-0.04810304567217827,0.0112122418358922,-0.05039995163679123,0.037194348871707916,-0.019919462502002716,0.0034330470953136683,0.007578924763947725,-0.05667008087038994,-0.018992820754647255,0.03575132042169571,0.0008170517394319177,-0.0008762673242017627,-0.002909790026023984,0.0059081814251840115,0.007495983503758907,0.0480363704264164,-0.022612715139985085,-0.02478766441345215,0.023751275613904,0.024972736835479736,0.01508726179599762,0.038352642208337784,-0.020263556391000748,-0.01697271130979061,0.015032309107482433,0.028477609157562256,0.05339109152555466,-0.004823978058993816,0.09122412651777267,-0.019586067646741867,0.017025701701641083,-0.029378915205597878,0.00863646250218153,0.05865488573908806,-0.04460563138127327,0.009993950836360455,-0.02456608973443508,0.0071393330581486225,-0.008377627469599247,0.019246475771069527,0.06872456520795822,0.08722177892923355,-0.037642475217580795,0.020947379991412163,0.017710590735077858,0.00915650837123394,-0.0013058122713118792,-0.0027404706925153732,-0.0010473014554008842,-0.038800179958343506,-0.010571567341685295,0.02070419117808342,0.03396514058113098,-0.005292057991027832,-0.011098765768110752,-0.05803455039858818,-0.1009422317147255,0.030474446713924408,0.01732354797422886,-7.197362361620796e-33,-0.020118890330195427,-0.0003377273678779602,-0.03106391802430153,0.025997376069426537,-0.05080270767211914,-0.04545298218727112,0.01678774319589138,-0.04155333340167999,-0.0018644441151991487,-0.011053861118853092,-0.03946349024772644,-0.0037769977934658527,0.01585942693054676,-0.022153187543153763,0.05073441192507744,0.013109716586768627,0.004918419290333986,0.009571710601449013,0.015922756865620613,0.04193497821688652,-0.017526116222143173,0.058384157717227936,-0.010289214551448822,-0.01360594853758812,-0.009716514497995377,0.03382943570613861,-0.005601588170975447,0.013399203307926655,0.025194887071847916,-0.0017466003773733974,0.011657580733299255,-0.02611718140542507,-0.01281848642975092,-0.06635808199644089,-0.005207083187997341,-0.010788134299218655,0.018088411539793015,-0.017092611640691757,0.0060624317266047,-0.014432613737881184,0.040224358439445496,0.010065621696412563,0.00809921883046627,-0.0005984583985991776,-0.021095607429742813,0.00308878137730062,0.04570440202951431,-0.004170311614871025,-0.0017557427054271102,-0.04652682691812515,-0.013280375860631466,0.029166419059038162,-0.039456672966480255,0.07897443324327469,0.026810992509126663,0.042298588901758194,0.021260129287838936,-0.0018041223520413041,-0.02742808498442173,-0.029083022847771645,0.009865189902484417,0.026358501985669136,0.005010289140045643,0.05866766721010208,-0.024296129122376442,0.03858735039830208,0.015232950448989868,-0.007494283840060234,0.017996028065681458,0.025498097762465477,-0.004912871401757002,0.030921265482902527,-0.003281340701505542,-0.10725676268339157,-0.029412509873509407,-0.019595002755522728,-0.03338434547185898,0.05835124850273132,0.057583119720220566,0.03962947055697441,0.012855388224124908,-0.008947913534939289,-0.020559288561344147,0.027894137427210808,0.02619633637368679,-0.036081165075302124,-0.03335917741060257,0.012445817701518536,0.0062805949710309505,0.03300526365637779,-0.014441520906984806,0.0411306656897068,-0.03332863375544548,-0.022262990474700928,0.09634623676538467,-0.023006265982985497,0.0025722594000399113,0.025135021656751633,0.005959414876997471,-0.0011439092922955751,-0.029594412073493004,0.01320969220250845,-0.04253384470939636,0.0065574548207223415,0.023007385432720184,-0.021739087998867035,0.008160613477230072,0.007354456000030041,-0.03301607072353363,-0.01075109001249075,0.03266957029700279,0.058850906789302826,-0.02216753363609314,-0.07650979608297348,-0.011135630309581757,0.036175064742565155,-0.005788796115666628,0.10552529990673065,0.006590023636817932,0.10690277069807053,0.03856224566698074,-0.029903948307037354,0.01177201047539711,0.01731696166098118,-0.009714381769299507,-0.018499324098229408,-0.013849155977368355,-0.05363965779542923,0.0681634247303009,0.0021463665179908276,-0.027208782732486725,-0.012813654728233814,2.897174908866873e-7,0.00683539267629385,0.07011453807353973,-0.0450238436460495,0.005324130412191153,-0.0011447443393990397,0.029398228973150253,0.013066391460597515,-0.007785262539982796,-0.009888929314911366,0.015014761127531528,0.04231121018528938,-0.015590467490255833,0.010704717598855495,0.04064426198601723,0.009179873391985893,-0.11211015284061432,-0.020389709621667862,-0.006848124787211418,-0.07894208282232285,-0.0032952541951090097,-0.013814752921462059,0.031447090208530426,0.03769306093454361,-0.008104223757982254,0.022190390154719353,-0.004686727654188871,-0.03687511011958122,-0.032276641577482224,-0.02186741679906845,0.03619366139173508,0.06279748678207397,0.03423736244440079,-0.0298053789883852,-0.009843176230788231,-0.022803260013461113,0.03195108100771904,-0.04295911267399788,-0.02716294303536415,0.01063799299299717,0.004344891756772995,0.01387388352304697,-0.0025853437837213278,0.004591198638081551,-0.04727106913924217,0.07204584032297134,0.014612414874136448,-0.011612657457590103,-0.03896923363208771,-0.02442251890897751,-0.0013198093511164188,0.014252482913434505,-0.015381485223770142,0.018438158556818962,-0.002706031547859311,-0.0015241806395351887,-0.007686365861445665,-0.022329572588205338,-0.001914540072903037,0.0631188154220581,-0.016749117523431778,0.0005613231332972646,-0.0010826969519257545,-0.021939590573310852,0.03142302855849266,0.010215600952506065,-0.011173550970852375,0.01629910245537758,3.0431666115117785e-34,0.025421753525733948,-0.015745660290122032,0.026642799377441406,-0.00395746948197484,0.0438888818025589,-0.01708952523767948,-0.09869684278964996,-0.013899825513362885,0.03012247011065483,-0.03398386761546135,-0.02809237875044346]'
SET
  @TechnicalDesignVector_be6cb105 = N'[-0.023597044870257378,0.023422392085194588,-0.020967354997992516,-0.04260045289993286,-0.010563045740127563,-0.029442904517054558,-0.0038470872677862644,0.05211665481328964,-0.006676728371530771,-0.021530119702219963,0.026488224044442177,0.05576334521174431,0.037452276796102524,0.09047798067331314,0.008916536346077919,-0.018399571999907494,0.030673302710056305,0.04490382969379425,-0.04797978326678276,0.011278850957751274,0.013335274532437325,-0.010602813214063644,-0.010919437743723392,0.041435472667217255,0.008359791710972786,-0.06126641482114792,-0.0003318596282042563,-0.010481879115104675,0.03876481205224991,-0.05729789286851883,-0.007580802775919437,0.06011320650577545,-0.039191167801618576,-0.003220529528334737,0.0000017946584875971894,-0.011375289410352707,0.015430187806487083,0.02432260848581791,-0.011601951904594898,-0.009874510578811169,0.010799172334372997,-0.047676391899585724,0.03940585255622864,-0.00940830446779728,0.005138805601745844,-0.03928675130009651,-0.0487065352499485,0.004491305910050869,-0.018195318058133125,-0.006071416661143303,-0.00196271319873631,0.02053292654454708,0.02750368043780327,0.01050308346748352,0.06692633032798767,0.014788256958127022,-0.008852634578943253,-0.08650100231170654,0.015522942878305912,-0.0048334538005292416,-0.0004485842655412853,-0.004888361785560846,0.021291684359312057,-0.024416999891400337,0.0684652253985405,-0.014286567457020283,0.06031285226345062,-0.009268577210605145,-0.01025962084531784,-0.05172015726566315,0.07210984826087952,0.034840378910303116,-0.014093205332756042,-0.023473186418414116,-0.03005501814186573,-0.034394748508930206,-0.029549309983849525,-0.06024052947759628,-0.00871654599905014,0.01078454963862896,-0.005006145685911179,0.012137467972934246,-0.01183263584971428,0.001995096681639552,0.032519515603780746,0.013270529918372631,-0.008176148869097233,0.012982118874788284,-0.035666536539793015,-0.002619416220113635,0.030530698597431183,-0.030195001512765884,0.009396935813128948,-0.01600668579339981,-0.05351637676358223,-0.0069954730570316315,0.05112481489777565,-0.04967489093542099,0.022384459152817726,-0.07493568956851959,0.10439436137676239,0.05931831896305084,-0.0017830688739195466,0.0035488244611769915,0.023523777723312378,0.08538691699504852,0.04071495682001114,-0.014787034131586552,-0.030711179599165916,-0.006509716622531414,-0.024613911285996437,0.016447728499770164,0.05599769949913025,0.06792021542787552,0.00808664970099926,0.0065699792467057705,-0.056049082428216934,-0.008294234052300453,-0.03756394237279892,0.007824297063052654,-0.007408930920064449,-0.025905650109052658,-0.006712041795253754,-0.014765956439077854,-0.006251065991818905,0.008645103313028812,0.0012403973378241062,-0.07362454384565353,-0.021565373986959457,0.03310875594615936,0.0015076597919687629,0.0007298446726053953,0.017539797350764275,0.019842665642499924,0.012162171304225922,-0.022857051342725754,0.0024702041409909725,-0.041575901210308075,0.01456591859459877,-0.0032327950466424227,0.052821557968854904,0.005694424733519554,-0.014513621106743813,0.020247487351298332,-0.005855537950992584,0.010187252424657345,0.0015009294729679823,-0.012913437560200691,-0.03446326404809952,0.032169777899980545,-0.010530814528465271,-0.03064853511750698,0.013807391747832298,-0.007966289296746254,-0.05126863718032837,0.04496241360902786,0.028379639610648155,0.07417409121990204,0.031999118626117706,0.008721129968762398,0.0007996602216735482,0.00978978630155325,0.03660391643643379,0.009889116510748863,-0.021789418533444405,0.023249344900250435,-0.11368235945701599,-0.00657689617946744,-0.031130654737353325,-0.009654095396399498,-0.036536067724227905,-0.036344997584819794,-0.027111105620861053,0.09574830532073975,0.014666328206658363,0.05351985618472099,0.03195526823401451,0.02315695397555828,-0.07068739086389542,-0.03524221107363701,0.0035972101613879204,-0.09629742056131363,0.011698245070874691,0.05530449002981186,0.02125202864408493,-0.02727162465453148,0.02149966172873974,0.02576064132153988,0.016883263364434242,-0.02565336972475052,-0.02879031002521515,0.02325906604528427,-0.10000115633010864,0.003942703362554312,-0.033326681703329086,-0.039468150585889816,0.003394617000594735,-0.0398680716753006,-0.014019983820617199,0.029454395174980164,0.05268210172653198,-0.01101643592119217,0.03853611648082733,0.0465349406003952,0.06853575259447098,-0.024522913619875908,-0.013983700424432755,-0.0026062328834086657,-0.09589975327253342,-0.026383571326732635,-0.01351596973836422,-0.0032400640193372965,-0.030543183907866478,0.02667493373155594,-0.014153542928397655,0.006104704923927784,0.025374406948685646,-0.016916749998927116,-0.05480976402759552,0.032568834722042084,-0.05704941228032112,0.015645258128643036,-0.01253551710397005,0.012966986745595932,0.09296292811632156,0.02039399743080139,0.05187408998608589,-0.04478637874126434,0.030418235808610916,0.017013590782880783,0.013583919033408165,-0.030045395717024803,-0.011983729898929596,0.018218953162431717,0.01772499270737171,0.01908179000020027,0.02645212784409523,0.0437127947807312,0.020233748480677605,0.06975008547306061,-0.011206618510186672,0.01746181771159172,0.019471904262900352,0.04175325110554695,-0.0008735507726669312,-0.015597263351082802,-0.04968629777431488,-0.017188819125294685,-0.06561948359012604,-0.014251893386244774,0.0007672387291677296,0.07261557877063751,-0.02062763087451458,-0.023982930928468704,-0.03638552874326706,-0.08308222889900208,-0.03479503095149994,-0.013175811618566513,0.07798881828784943,0.05503955855965614,-0.0167621411383152,-0.015144591219723225,0.027698857709765434,0.005065918900072575,-0.007201821077615023,0.016180390492081642,0.040226276963949203,-0.055908698588609695,0.028074806556105614,-0.0035114299971610308,-0.005986317992210388,-0.018748221918940544,0.03129677474498749,0.0006494679255411029,0.04762342572212219,0.03918756544589996,-0.011357168667018414,0.04263700917363167,0.002288117539137602,-0.02707488462328911,0.004325463902205229,-0.04118717461824417,0.013642207719385624,0.025244709104299545,-0.022645657882094383,0.03145498409867287,-0.011248874478042126,-0.017786500975489616,0.0367913581430912,-0.13575699925422668,-0.0021095769479870796,-0.0013455516891553998,0.023373469710350037,-0.039165813475847244,-0.0006839799461886287,-0.04173361510038376,-0.05228433012962341,0.04507966339588165,0.016352875158190727,0.07398954778909683,0.012705162167549133,0.036488477140665054,-0.0191540215164423,-0.003882009070366621,-0.02302694320678711,0.060312602669000626,-0.023034928366541862,0.03714645281434059,0.05388327315449715,0.004889496602118015,-0.011855127289891243,0.011862989515066147,-0.013228384777903557,-0.029190126806497574,-0.02384011633694172,-0.03973589092493057,-0.0143162552267313,-0.004651715978980064,-0.026326820254325867,0.050059475004673004,-0.0036870641633868217,-0.03728252649307251,-0.013011161237955093,-0.0016430146060883999,-0.04669587314128876,-0.06143747270107269,0.013345513492822647,-0.017388014122843742,0.07355063408613205,0.007968711666762829,0.032271672040224075,-0.06522548198699951,0.035064682364463806,0.057430561631917953,-0.005906496662646532,0.004756974056363106,-0.03448645398020744,-0.0011139820562675595,0.01892351545393467,0.005641162861138582,0.01602354645729065,-0.0038338862359523773,0.006643427070230246,0.02223314344882965,0.00830077100545168,-0.01809328980743885,-0.09359440207481384,-0.026008933782577515,-0.07646260410547256,0.0028504496440291405,0.04619743302464485,0.038275230675935745,-0.005722999107092619,-0.02743285521864891,-0.007716128136962652,-0.06330541521310806,0.0006923707551322877,-0.02339271269738674,-0.02350422367453575,0.014451464638113976,0.050759635865688324,0.04715823382139206,0.09999507665634155,-0.02123168483376503,-0.016071990132331848,0.010247575119137764,0.053476978093385696,0.0006025768234394491,0.025906937196850777,-0.003342957701534033,0.03459449112415314,0.00850021280348301,-0.01012843381613493,0.036516040563583374,0.014621022157371044,-0.06334023922681808,0.022919530048966408,0.020122643560171127,-0.014263080433011055,0.00321298954077065,0.027019212022423744,-0.044560711830854416,0.01146998256444931,-0.006138179916888475,0.040633365511894226,-0.06089790537953377,0.010004626587033272,-0.0007514755707234144,-0.025555642321705818,0.04012429714202881,-0.005106586497277021,0.019285283982753754,-0.07719939202070236,-0.017748655751347542,0.03932132199406624,0.02286781743168831,-0.020212093368172646,-0.00994973536580801,0.03512130305171013,0.03241320699453354,-0.0015838255640119314,0.04492177069187164,0.020591190084815025,-0.045546237379312515,-0.013759125955402851,-0.05110979080200195,0.039620354771614075,0.020973389968276024,0.03500795364379883,0.08126851171255112,-0.05917564779520035,-0.01431957259774208,-0.02096574567258358,-0.03757597878575325,-0.07173646986484528,-0.033831365406513214,0.023259462788701057,-0.045314524322748184,0.05477182939648628,0.0032048472203314304,-0.02357436530292034,-0.0038565651047974825,0.055765848606824875,-0.006473501678556204,0.05562925711274147,-0.07490438967943192,-0.021995706483721733,-0.026371033862233162,-0.0045774998143315315,-0.011463896371424198,-0.01609968952834606,0.047524191439151764,0.00484230974689126,0.013855669647455215,-0.07522232085466385,-0.0398963987827301,-0.015339864417910576,0.03222966194152832,0.00699972128495574,-0.035333000123500824,0.021269191056489944,-0.0031321761198341846,0.07038281857967377,0.0019210448954254389,0.021166019141674042,-0.07512594759464264,0.017309565097093582,0.05039600282907486,0.01256671454757452,0.00847785547375679,-0.00425317557528615,-0.002723569516092539,-0.03795984759926796,0.005214985925704241,0.04175613820552826,-0.06397490203380585,0.07007545977830887,0.06925886124372482,-0.04132965952157974,0.0576452873647213,0.03968891128897667,0.04048981890082359,-0.02581046149134636,-0.007064092438668013,-0.010807923041284084,0.03480709344148636,0.017444996163249016,0.010205326601862907,0.012431096285581589,0.04121359437704086,0.005277303978800774,-0.01892983540892601,-0.005695797502994537,0.02985912561416626,-0.0015599321341142058,-0.01624147780239582,-0.014177516102790833,-0.011048253625631332,-0.06840401142835617,-0.04920130968093872,-0.0423615500330925,0.039755839854478836,-0.0482814721763134,-0.0532027967274189,0.036359384655952454,0.007638617884367704,0.005419067107141018,0.017824893817305565,-0.004244947340339422,-0.013657815754413605,-0.010608729906380177,-0.005644326563924551,-0.0429576076567173,0.15707767009735107,0.042479485273361206,0.006701350677758455,-0.030162891373038292,0.02444775402545929,-0.00522089097648859,0.0052605583332479,-0.020472094416618347,-0.002031489508226514,-0.00530329579487443,-0.0617518350481987,-0.002224989701062441,-0.014397884719073772,-0.027733998373150826,0.03400874137878418,-0.008058282546699047,-0.012505922466516495,0.00531419925391674,0.009981515817344189,-0.0497874841094017,-0.002411929424852133,0.020117735490202904,0.07917486131191254,-0.03543168678879738,0.046483200043439865,0.032432202249765396,-0.05006727576255798,0.016851570457220078,0.018793966621160507,0.029520198702812195,-0.06722576916217804,0.09330413490533829,0.0017038860823959112,0.019789939746260643,0.027636703103780746,-0.03363446891307831,0.03355226293206215,-0.10212268680334091,0.030156690627336502,-0.04429352656006813,0.0005379357608035207,0.008927705697715282,0.030792851001024246,0.007839870639145374,0.03299548104405403,0.0035501241218298674,-0.03496547043323517,-0.03417046740651131,0.029065469279885292,0.009365477599203587,-0.01850246451795101,0.034749966114759445,-0.0505637489259243,0.007544936146587133,-0.04064725711941719,0.026836007833480835,-0.01049783080816269,0.02347281016409397,-0.06437224894762039,-0.1565420925617218,-0.015457388013601303,0.024433540180325508,-6.121227405485732e-33,0.005648758262395859,-0.012438980862498283,-0.027275970205664635,-0.05294440686702728,-0.01602310873568058,-0.04506680741906166,-0.01521032489836216,-0.04973721504211426,-0.0037390722427517176,-0.029399413615465164,-0.026776202023029327,-0.048118412494659424,0.003521460108458996,0.004972690716385841,0.024169640615582466,0.026986008509993553,0.0235595703125,-0.000616846198681742,-0.01887625828385353,0.045605700463056564,0.0346408374607563,-0.006541373208165169,-0.0008088944014161825,0.02609134092926979,-0.025378450751304626,0.00853935070335865,-0.010632556863129139,0.0653822124004364,-0.01697222702205181,0.004671597387641668,-0.018222065642476082,-0.0356544628739357,-0.006994087249040604,-0.008521782234311104,0.05042695626616478,0.05530543252825737,0.0010295013198629022,-0.03691518306732178,0.02439608797430992,-0.006089537404477596,0.0626223012804985,0.005926421377807856,-0.01724632829427719,0.028670869767665863,-0.0081837959587574,-0.03216399997472763,-0.01854521781206131,0.033326406031847,0.005824871826916933,-0.019073357805609703,-0.039082057774066925,0.019688986241817474,-0.01100882887840271,0.043940506875514984,-0.001396808074787259,0.023092549294233322,0.04864770919084549,-0.026173606514930725,-0.035925693809986115,-0.048357751220464706,-0.04964030534029007,0.01806136779487133,0.017066914588212967,0.07667171210050583,0.011861470527946949,0.04177173972129822,0.018031321465969086,-0.003638296853750944,0.021817056462168694,0.07418164610862732,0.014076284132897854,-0.02502288483083248,0.04822155088186264,0.0015888308407738805,0.025206148624420166,0.008997345343232155,-0.028850702568888664,0.0372915081679821,0.07084927707910538,0.002801292110234499,0.02549312449991703,0.03381018340587616,-0.03041483275592327,0.027132293209433556,0.015766629949212074,-0.08010593056678772,0.019327085465192795,-0.009891626425087452,-0.05490579083561897,0.009876377880573273,-0.028855642303824425,0.07401654869318008,-0.0021608390379697084,0.047372572124004364,0.01737981103360653,-0.01762917824089527,0.04164038598537445,0.056653715670108795,0.00680113397538662,-0.016299016773700714,-0.024616992101073265,-0.03494517132639885,-0.021453069522976875,0.036664076149463654,-0.00024683785159140825,-0.0014569261111319065,0.00741052208468318,0.015800461173057556,-0.014969097450375557,0.007204602938145399,0.002780107082799077,0.05616863816976547,-0.05980532988905907,-0.03227432072162628,0.009121976792812347,0.005197688937187195,0.010531523264944553,0.048360757529735565,-0.009001359343528748,0.052545420825481415,-0.015199730172753334,0.038426320999860764,-0.009026724845170975,0.005360051058232784,0.010982119478285313,-0.01735394075512886,-0.044239550828933716,-0.08219408243894577,0.03465881198644638,-0.03402530774474144,0.01126664225012064,0.015223214402794838,2.646824839303008e-7,-0.07245365530252457,0.030898170545697212,-0.01342565007507801,-0.0458085797727108,0.024569230154156685,0.04986833408474922,-0.00018877613183576614,-0.023093558847904205,0.03141455352306366,-0.05025738850235939,0.0061990050598979,-0.01848718337714672,0.023564636707305908,0.055755022913217545,-0.024778181686997414,-0.1188206672668457,0.025430288165807724,-0.014480913989245892,-0.08508139103651047,0.04291117936372757,-0.0469069667160511,-0.006463854108005762,0.054104845970869064,-0.009787213057279587,0.020593974739313126,0.00552704930305481,0.0015668991254642606,-0.00209296983666718,-0.014160268940031528,-0.005435062572360039,0.022313088178634644,-0.011666637845337391,-0.012731964699923992,-0.03420041501522064,-0.0022766003385186195,0.027424560859799385,-0.03726410120725632,-0.00532990088686347,0.015183651819825172,-0.00910833477973938,-0.033658552914857864,0.01233298797160387,-0.029332876205444336,-0.060951266437768936,0.06756192445755005,0.027145832777023315,-0.053758956491947174,-0.00552381481975317,0.015179420821368694,0.02657957561314106,-0.06528863310813904,-0.0018759709782898426,-0.01806466281414032,0.0031655575148761272,0.014114524237811565,-0.0031309761106967926,-0.01505272462964058,0.012700194492936134,0.035753119736909866,0.002982205478474498,-0.009111887775361538,-0.02973242662847042,0.004492581356316805,-0.006449636071920395,-0.003808950772508979,-0.03466112166643143,-0.03318515792489052,2.9413065821819213e-34,-0.021614419296383858,-0.037495192140340805,0.01998344250023365,0.004546309821307659,0.024140220135450363,-0.028429098427295685,-0.02408643253147602,-0.019642705097794533,0.06832337379455566,-0.02366856299340725,-0.017052849754691124]'
SET
  @HasCustomProps_be6cb105 = 0
SET
  @HasCustomEvents_be6cb105 = 0
SET
  @RequiresData_be6cb105 = 0
SET
  @DependencyCount_be6cb105 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_be6cb105 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_be6cb105 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_be6cb105 = 0
SET
  @ID_be6cb105 = 'FF789802-937E-432F-8640-566B9765C7D3'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_be6cb105,
  @Name = @Name_be6cb105,
  @Version = @Version_be6cb105,
  @VersionSequence = @VersionSequence_be6cb105,
  @Title = @Title_be6cb105,
  @Description = @Description_be6cb105,
  @Type = @Type_be6cb105,
  @Status = @Status_be6cb105,
  @DeveloperName = @DeveloperName_be6cb105,
  @DeveloperEmail = @DeveloperEmail_be6cb105,
  @DeveloperOrganization = @DeveloperOrganization_be6cb105,
  @SourceRegistryID = @SourceRegistryID_be6cb105,
  @ReplicatedAt = @ReplicatedAt_be6cb105,
  @LastSyncedAt = @LastSyncedAt_be6cb105,
  @Specification = @Specification_be6cb105,
  @FunctionalRequirements = @FunctionalRequirements_be6cb105,
  @TechnicalDesign = @TechnicalDesign_be6cb105,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_be6cb105,
  @TechnicalDesignVector = @TechnicalDesignVector_be6cb105,
  @HasCustomProps = @HasCustomProps_be6cb105,
  @HasCustomEvents = @HasCustomEvents_be6cb105,
  @RequiresData = @RequiresData_be6cb105,
  @DependencyCount = @DependencyCount_be6cb105,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_be6cb105,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_be6cb105,
  @HasRequiredCustomProps = @HasRequiredCustomProps_be6cb105,
  @ID = @ID_be6cb105;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_dba1560b NVARCHAR(MAX),
@Name_dba1560b NVARCHAR(500),
@Version_dba1560b NVARCHAR(50),
@VersionSequence_dba1560b INT,
@Title_dba1560b NVARCHAR(1000),
@Description_dba1560b NVARCHAR(MAX),
@Type_dba1560b NVARCHAR(255),
@Status_dba1560b NVARCHAR(50),
@DeveloperName_dba1560b NVARCHAR(255),
@DeveloperEmail_dba1560b NVARCHAR(255),
@DeveloperOrganization_dba1560b NVARCHAR(255),
@SourceRegistryID_dba1560b UNIQUEIDENTIFIER,
@ReplicatedAt_dba1560b DATETIMEOFFSET,
@LastSyncedAt_dba1560b DATETIMEOFFSET,
@Specification_dba1560b NVARCHAR(MAX),
@FunctionalRequirements_dba1560b NVARCHAR(MAX),
@TechnicalDesign_dba1560b NVARCHAR(MAX),
@FunctionalRequirementsVector_dba1560b NVARCHAR(MAX),
@TechnicalDesignVector_dba1560b NVARCHAR(MAX),
@HasCustomProps_dba1560b BIT,
@HasCustomEvents_dba1560b BIT,
@RequiresData_dba1560b BIT,
@DependencyCount_dba1560b INT,
@TechnicalDesignVectorEmbeddingModelID_dba1560b NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_dba1560b NVARCHAR(MAX),
@HasRequiredCustomProps_dba1560b BIT,
@ID_dba1560b UNIQUEIDENTIFIER
SET
  @Namespace_dba1560b = N'CRM/Finance'
SET
  @Name_dba1560b = N'KPIGauges'
SET
  @Version_dba1560b = N'1.0.0'
SET
  @VersionSequence_dba1560b = 1
SET
  @Title_dba1560b = N'KPI Gauges'
SET
  @Description_dba1560b = N'Gauge charts showing key performance indicators'
SET
  @Type_dba1560b = N'Chart'
SET
  @Status_dba1560b = N'Published'
SET
  @Specification_dba1560b = N'{"name":"KPIGauges","namespace":"CRM/Finance","type":"Chart","location":"embedded","code":"// KPIGauges Sub-component\nconst KPIGauges = ({ kpis, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) => {\n  const gaugeRefs = useRef([]);\n  const chartInstances = useRef([]);\n\n  useEffect(() => {\n    if (!kpis || kpis.length === 0 || !window.ApexCharts) return;\n\n    // Clear existing charts\n    chartInstances.current.forEach(chart => {\n      if (chart) chart.destroy();\n    });\n    chartInstances.current = [];\n\n    kpis.forEach((kpi, index) => {\n      if (!gaugeRefs.current[index]) return;\n\n      const percentage = (kpi.actual / kpi.target) * 100;\n      const color = percentage >= 100 ? ''#28a745'' : \n                    percentage >= 75 ? ''#ffc107'' : ''#dc3545'';\n\n      const options = {\n        chart: {\n          type: ''radialBar'',\n          height: 200,\n          sparkline: {\n            enabled: true\n          }\n        },\n        series: [Math.min(percentage, 150)],\n        plotOptions: {\n          radialBar: {\n            startAngle: -90,\n            endAngle: 90,\n            track: {\n              background: ''#e7e7e7'',\n              strokeWidth: ''97%'',\n              margin: 5\n            },\n            dataLabels: {\n              name: {\n                show: true,\n                fontSize: ''12px'',\n                fontWeight: 400,\n                offsetY: -10\n              },\n              value: {\n                show: true,\n                fontSize: ''20px'',\n                fontWeight: ''bold'',\n                offsetY: 5,\n                formatter: function() {\n                  return `$' + '{percentage.toFixed(0)}%`;\n                }\n              }\n            },\n            hollow: {\n              margin: 0,\n              size: ''60%''\n            }\n          }\n        },\n        colors: [color],\n        labels: [kpi.name]\n      };\n\n      const chart = new window.ApexCharts(gaugeRefs.current[index], options);\n      chart.render();\n      chartInstances.current.push(chart);\n    });\n\n    return () => {\n      chartInstances.current.forEach(chart => {\n        if (chart) chart.destroy();\n      });\n      chartInstances.current = [];\n    };\n  }, [kpis]);\n\n  return (\n    <div style={{\n      display: ''grid'',\n      gridTemplateColumns: ''repeat(auto-fit, minmax(200px, 1fr))'',\n      gap: ''20px'',\n      padding: ''20px'',\n      backgroundColor: ''#fff'',\n      borderRadius: ''8px''\n    }}>\n      {kpis && kpis.map((kpi, index) => (\n        <div key={kpi.id || index} style={{ textAlign: ''center'' }}>\n          <div \n            ref={el => gaugeRefs.current[index] = el}\n            style={{ height: ''200px'' }}\n          />\n          <div style={{ marginTop: ''10px'' }}>\n            <div style={{ fontSize: ''18px'', fontWeight: ''bold'' }}>\n              $' + '{(kpi.actual / 1000).toFixed(0)}K\n            </div>\n            <div style={{ fontSize: ''12px'', color: ''#666'' }}>\n              Target: $' + '{(kpi.target / 1000).toFixed(0)}K\n            </div>\n            {kpi.trend && (\n              <div style={{\n                fontSize: ''11px'',\n                color: kpi.trend > 0 ? ''#28a745'' : ''#dc3545'',\n                marginTop: ''5px''\n              }}>\n                {kpi.trend > 0 ? ''↑'' : ''↓''} {Math.abs(kpi.trend)}% vs last period\n              </div>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","functionalRequirements":"## KPI Gauges\n\n### Purpose\nDisplay key financial metrics as gauge charts.\n\n### Features\n- Multiple gauge displays\n- Target vs actual\n- Color coding by performance\n- Percentage indicators","dataRequirements":{"mode":"views","queries":[]},"technicalDesign":"## Implementation\n\n### Props\n- kpis: Array of KPI data\n\n### Display\n- ApexCharts radial gauges\n- Dynamic colors","properties":[{"name":"kpis","type":"Array<{name: string, value: number, target: number, unit: string, color?: string}>","required":true,"description":"KPI metrics data"}],"events":[],"dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_dba1560b = N'## KPI Gauges

### Purpose
Display key financial metrics as gauge charts.

### Features
- Multiple gauge displays
- Target vs actual
- Color coding by performance
- Percentage indicators'
SET
  @TechnicalDesign_dba1560b = N'## Implementation

### Props
- kpis: Array of KPI data

### Display
- ApexCharts radial gauges
- Dynamic colors'
SET
  @FunctionalRequirementsVector_dba1560b = N'[-0.0496038943529129,0.02171553298830986,-0.032591644674539566,-0.05414888635277748,0.004955470096319914,0.02019253559410572,0.05273790657520294,0.05410289019346237,-0.04947264865040779,0.030558733269572258,-0.010601529851555824,0.007731841877102852,0.043042682111263275,0.17268508672714233,-0.005755606107413769,-0.07764003425836563,-0.031046532094478607,0.0355493538081646,0.07882436364889145,0.00250224769115448,0.008831730112433434,-0.006475231144577265,-0.021008828654885292,0.004943513311445713,-0.11136072129011154,-0.023485960438847542,0.02104671113193035,-0.01279416959732771,0.006720446050167084,-0.07326971739530563,0.02163056842982769,0.02417031116783619,-0.07730641961097717,-0.024228638038039207,0.00000169748057032848,-0.045261185616254807,-0.008103710599243641,0.027052724733948708,-0.014861001633107662,0.039731401950120926,0.03304987773299217,-0.05155320465564728,0.04319491982460022,-0.005363670643419027,0.007277580443769693,0.007413516286760569,-0.028127115219831467,0.016708681359887123,0.0010942441876977682,-0.011236627586185932,0.004311421420425177,0.03905066102743149,-0.023749761283397675,-0.009653246030211449,0.0018350339960306883,-0.033791281282901764,-0.006260810419917107,0.0772644653916359,0.0021227309480309486,0.025452125817537308,-0.039173323661088943,0.016788803040981293,0.03328462317585945,-0.0008474942296743393,0.05170641466975212,0.017444362863898277,0.06395094096660614,-0.05662921816110611,-0.012512408196926117,0.02859492413699627,0.08547065407037735,0.017763124778866768,0.036685001105070114,-0.07873924821615219,-0.0025141097139567137,-0.08631781488656998,0.004418529570102692,-0.013525920920073986,-0.00817082915455103,-0.023517366498708725,-0.10281047224998474,0.07314307242631912,-0.031688056886196136,-0.028776364400982857,-0.020588090643286705,-0.02043861709535122,0.00833340734243393,-0.024641895666718483,-0.004663321189582348,0.015958016738295555,-0.05911944806575775,-0.02111586183309555,-0.017420073971152306,-0.019162610173225403,-0.015752429142594337,-0.008263345807790756,0.03139909729361534,-0.08371932059526443,0.054812826216220856,-0.006603880785405636,-0.028897473588585854,0.0463922955095768,0.004489900544285774,0.034334778785705566,0.02194431982934475,0.12433773279190063,0.029793189838528633,-0.005985571537166834,-0.022058360278606415,0.033061690628528595,-0.009095286019146442,-0.003031536005437374,0.03139732778072357,-0.009298533201217651,0.012431851588189602,0.012597611173987389,-0.0636696070432663,0.012984391301870346,-0.03671444579958916,0.027953699231147766,0.15168152749538422,-0.013388054445385933,-0.0018090613884851336,0.00447018863633275,0.030886484310030937,0.03510541096329689,-0.04827244579792023,-0.040274400264024734,-0.022434769198298454,0.03037191741168499,-0.018106048926711082,-0.020892437547445297,-0.018864085897803307,-0.01841551624238491,-0.0038458819035440683,0.030461767688393593,0.034681882709264755,0.02143067680299282,0.018161023035645485,-0.02460266463458538,0.014180311933159828,0.01593649573624134,-0.03263966366648674,0.06193338334560394,-0.006482258904725313,-0.007849845103919506,0.008024295791983604,-0.011297447606921196,0.0005977548426017165,-0.014020816422998905,0.011996847577393055,0.008844783529639244,0.009092101827263832,0.005860448349267244,-0.01938067376613617,-0.01734401099383831,-0.08052756637334824,0.024269696325063705,-0.009469323791563511,-0.005746936425566673,0.04216129332780838,-0.011935781687498093,-0.019031880423426628,-0.003580691060051322,-0.008047262206673622,-0.008256034925580025,-0.02014923468232155,-0.034018587321043015,0.009677305817604065,-0.04772036895155907,0.002575458725914359,-0.03400570526719093,0.008316955529153347,-0.01822805032134056,0.03452346846461296,0.07525873184204102,0.12610523402690887,-0.01811976358294487,-0.04524441063404083,0.023881694301962852,0.012514199130237103,-0.13739405572414398,0.018338896334171295,-0.025769248604774475,0.019413433969020844,0.027937091886997223,-0.023312466219067574,0.026095231994986534,-0.0316569060087204,-0.005584130063652992,-0.02376360259950161,0.036812521517276764,-0.05862375721335411,-0.01620395854115486,0.0031912364065647125,0.007462135050445795,0.009169613011181355,-0.08982879668474197,0.03520340099930763,0.013138076290488243,0.0019108798587694764,-0.014585189521312714,0.008655382320284843,0.01250696275383234,-0.001255080453120172,-0.021331487223505974,0.0329211987555027,0.0201149620115757,-0.04974000155925751,0.009205278940498829,-0.005073883570730686,-0.00833334494382143,-0.0375153012573719,-0.009278088808059692,-0.008539285510778427,0.01675092615187168,0.01821170002222061,-0.0018670185236260295,-0.07451315224170685,0.024406390264630318,-0.02837413363158703,-0.0502672977745533,0.01911396160721779,-0.001964313443750143,0.06568299233913422,0.028199514374136925,0.04128708690404892,-0.033221740275621414,0.015279468148946762,0.011117871850728989,-0.013642297126352787,0.0072485171258449554,-0.008801034651696682,0.01636102795600891,0.014615523628890514,0.029673883691430092,0.05791150778532028,0.08792222291231155,0.019557684659957886,0.06603650003671646,0.005386953242123127,-0.09126162528991699,-0.014259775169193745,0.01559516042470932,0.024554170668125153,-0.007584837265312672,-0.02777082286775112,0.002452450804412365,-0.04646578058600426,0.017683451995253563,0.0062630195170640945,0.005851210560649633,0.05974235758185387,-0.01329619437456131,0.0043626343831419945,-0.03460480645298958,0.012829169631004333,-0.013733116909861565,-0.039856646209955215,0.09886127710342407,-0.0010018752655014396,-0.010526730678975582,0.017610300332307816,-0.008177058771252632,0.005892800632864237,-0.011608735658228397,0.07979947328567505,-0.037235233932733536,-0.01276846881955862,0.021304167807102203,-0.00893363170325756,0.03397464379668236,-0.019595427438616753,-0.008886348456144333,0.0017179686110466719,0.04745761305093765,-0.08880002796649933,0.05181068927049637,-0.011951284483075142,-0.03180087357759476,-0.00196186825633049,0.01407391857355833,0.020161351189017296,0.006152509246021509,-0.0127220768481493,0.03359927237033844,0.02925294265151024,0.02408803626894951,0.02082011103630066,-0.026484698057174683,0.021698642522096634,-0.03109227679669857,0.021542543545365334,-0.0315658338367939,-0.015812063589692116,0.0043877665884792805,0.025261763483285904,0.07693168520927429,-0.008938119746744633,0.07484941929578781,-0.08134342730045319,-0.03580601140856743,-0.031379085034132004,0.013803503476083279,-0.008742759935557842,0.06776062399148941,0.058862388134002686,-0.001210650778375566,0.033106930553913116,0.04947314038872719,0.01927449367940426,-0.01382962055504322,-0.0562979020178318,0.006774574983865023,-0.01694357953965664,0.0032411187421530485,-0.07470087707042694,0.036602918058633804,0.023185070604085922,0.05802937597036362,0.010926089249551296,0.0015666023828089237,-0.022613437846302986,0.016951970756053925,-0.02609737403690815,0.0016904643271118402,-0.029441744089126587,0.019925592467188835,-0.032444026321172714,-0.009800502099096775,-0.019211307168006897,-0.0677470788359642,-0.0002698478056117892,0.015051300637423992,0.0671694353222847,0.00487686088308692,-0.030539141967892647,-0.020586954429745674,-0.008341330103576183,-0.01518811285495758,0.01466547604650259,0.019919762387871742,-0.018293743953108788,-0.04530220478773117,0.04503713548183441,-0.03365510702133179,-0.046206094324588776,-0.014874747022986412,-0.060132335871458054,0.027279667556285858,0.006802378688007593,-0.04015054553747177,-0.0034514961298555136,-0.00149909732863307,0.010253057815134525,0.0027500672731548548,-0.05835166200995445,-0.052154045552015305,-0.02351658046245575,-0.07134165614843369,0.022655624896287918,0.015207534655928612,-0.04749813303351402,0.055865757167339325,-0.0026242125313729048,0.018966088071465492,-0.016570061445236206,0.005671828985214233,0.004473749082535505,-0.007844899781048298,-0.009651729837059975,0.04471209645271301,0.006488568615168333,0.010571694932878017,-0.01974719576537609,-0.019970690831542015,0.0069536189548671246,0.014957099221646786,0.04963190481066704,-0.019977157935500145,0.006256422959268093,0.0026026738341897726,0.08142933249473572,-0.02265830710530281,0.05891171470284462,-0.0241597481071949,-0.010895504616200924,-0.012538657523691654,-0.018064500764012337,-0.032309018075466156,0.024630369618535042,0.01969502866268158,0.004109709523618221,-0.04943780228495598,0.010205239057540894,0.014380783773958683,0.010330249555408955,-0.005835434887558222,0.03335001692175865,0.01257444079965353,0.012529832310974598,-0.055212147533893585,-0.09380537271499634,-0.03223029896616936,0.05436503142118454,-0.08438286185264587,0.02649119310081005,0.009323559701442719,-0.03037222847342491,-0.05069081485271454,-0.06104705110192299,-0.024014363065361977,-0.011953203938901424,-0.021306093782186508,0.037812490016222,0.005099005065858364,-0.025623925030231476,-0.025231922045350075,0.0246354378759861,0.04759228974580765,0.01196797750890255,0.009621666744351387,-0.029559755697846413,0.010465258732438087,0.010205208323895931,0.005867532454431057,-0.007164645008742809,-0.06256277114152908,-0.00035914056934416294,0.01949572004377842,-0.016832398250699043,0.007901565171778202,-0.06207028031349182,0.04935327544808388,-0.050987690687179565,-0.0053915707394480705,0.003331174608319998,-0.018046364188194275,-0.04029853269457817,-0.00940512865781784,0.011772609315812588,0.0012786894803866744,0.0694744661450386,0.017043685540556908,-0.0521492138504982,-0.034527894109487534,-0.03584936261177063,0.0007293722592294216,0.023911187425255775,-0.03524863347411156,0.030705837532877922,-0.04007083177566528,-0.015136215835809708,0.018932068720459938,-0.014059267938137054,-0.055196523666381836,0.036984868347644806,-0.06209881603717804,-0.015410869382321835,0.02664308436214924,0.05733237788081169,0.03928036615252495,-0.10479049384593964,-0.03218797966837883,0.0375761054456234,-0.016126561909914017,-0.047606538981199265,-0.026331575587391853,0.03960438072681427,-0.06066620349884033,0.03077554702758789,-0.01743743196129799,-0.04971301555633545,0.007362924516201019,0.029929881915450096,0.023086516186594963,0.037721745669841766,0.014776966534554958,0.028469601646065712,-0.03599104657769203,0.008303140290081501,0.04527096450328827,0.04263610020279884,-0.07204259932041168,0.017906922847032547,-0.008015867322683334,-0.016072314232587814,0.0022715332452207804,-0.0021534161642193794,-0.03986581414937973,0.031511012464761734,0.004112670663744211,-0.0696420818567276,0.03039778210222721,0.038912102580070496,0.006450518034398556,-0.1017172709107399,-0.05140925943851471,0.0025592579040676355,0.020991506054997444,-0.03256256878376007,-0.025213593617081642,0.0001687798066996038,-0.05479971319437027,0.011504010297358036,0.020062590017914772,0.052822813391685486,0.0015705002006143332,0.013611134141683578,0.0024026616010814905,0.010478288866579533,0.010913640260696411,-0.0389222726225853,-0.004319216590374708,0.04699993506073952,0.016492832452058792,-0.029480116441845894,0.05056719854474068,-0.027320444583892822,-0.01714063622057438,-0.00976537261158228,-0.020185701549053192,0.017483726143836975,0.027797801420092583,0.07301322370767593,0.00981784239411354,0.013271273113787174,-0.03511679545044899,-0.007033901289105415,0.005928474478423595,-0.028809629380702972,-0.026912162080407143,-0.05638962611556053,0.012702174484729767,-0.016709718853235245,0.06775220483541489,0.056629057973623276,0.02646103873848915,0.01270550861954689,-0.007704623509198427,-0.04456032067537308,0.015298252925276756,0.0702391266822815,-0.018364017829298973,0.0016987101407721639,0.023450063541531563,0.007553258910775185,-0.05001172050833702,0.009158001281321049,-0.01606363244354725,0.06774092465639114,-0.09259114414453506,-0.04113013297319412,0.012747611850500107,-0.019481321796774864,-6.227506788479452e-33,-0.03807317093014717,-0.05555130913853645,-0.05806519463658333,0.01076169777661562,-0.02886953391134739,-0.006983639672398567,0.045807793736457825,-0.052035897970199585,0.026494259014725685,-0.00990681629627943,-0.013949775137007236,-0.004917600657790899,0.012722454965114594,-0.012072188779711723,0.020229825749993324,0.013052767142653465,0.04470155015587807,0.006016191095113754,-0.014697207137942314,-0.0024249416310340166,-0.005057679023593664,0.028472846373915672,0.006329867523163557,-0.01810128055512905,-0.019570987671613693,0.034367635846138,-0.016338735818862915,0.0016252348432317376,0.014958192594349384,0.023046964779496193,0.007820921950042248,0.010258533991873264,0.008053245022892952,0.04907221719622612,-0.03569973260164261,0.01135545689612627,-0.008482099510729313,-0.0668119564652443,0.0003262595855630934,0.0031196661293506622,0.05738432705402374,0.023669566959142685,0.011036034673452377,-0.031383443623781204,-0.00596527149900794,-0.04667643457651138,0.01814364455640316,0.030331281945109367,0.003824790706858039,0.025859108194708824,0.04387474060058594,0.002428643172606826,0.01798059791326523,0.12264864146709442,-0.016439219936728477,0.011616431176662445,0.02262670360505581,0.009206165559589863,-0.02620202675461769,-0.010870593599975109,0.0033778026700019836,-0.02041739597916603,-0.02429402805864811,0.07901446521282196,0.05390525236725807,0.02471202425658703,-0.056821875274181366,0.021495912224054337,-0.008820004761219025,-0.02261202782392502,0.011152143590152264,-0.040992725640535355,0.031124139204621315,-0.0695648342370987,-0.015538773499429226,-0.028132325038313866,-0.00574398972094059,0.021893473342061043,-0.0008818840724416077,0.03590770065784454,-0.00936886202543974,0.01168835535645485,-0.03150123357772827,0.00021157691662665457,0.006216608453541994,-0.02984776720404625,-0.014463622123003006,-0.00412073964253068,0.04854360967874527,0.010090277530252934,-0.011307846754789352,0.05601150169968605,-0.016300883144140244,0.025049768388271332,-0.00162926921620965,0.013957664370536804,0.05472920462489128,0.03539757803082466,-0.008332982659339905,-0.03350880742073059,0.03590983524918556,0.04109862819314003,0.04235200956463814,0.02564806304872036,0.018216529861092567,-0.011370946653187275,-0.04779117554426193,-0.03815248981118202,-0.04936445876955986,0.02425629086792469,0.0264382753521204,0.019101139158010483,0.0021481767762452364,-0.03304430469870567,0.012532325461506844,0.004754205700010061,-0.015813522040843964,0.01041833870112896,-0.0026207678020000458,0.013552263379096985,-0.017252597957849503,0.018474031239748,-0.02142578735947609,0.00867149606347084,0.016695043072104454,-0.04799402132630348,0.009327827952802181,-0.021169880405068398,0.004128274507820606,0.014101186767220497,-0.0052967919036746025,0.003617261303588748,2.5523215185785375e-7,-0.0015851834323257208,0.01000777818262577,-0.02396801859140396,0.02884686179459095,-0.0017454555490985513,-0.015751928091049194,-0.041365690529346466,0.010566736571490765,0.004171690903604031,-0.06276445835828781,0.009572665207087994,0.020528197288513184,-0.019985675811767578,0.03874952346086502,0.05765216052532196,-0.024920109659433365,0.042072050273418427,-0.026806989684700966,-0.04873325303196907,0.021162834018468857,0.041116587817668915,-0.030515102669596672,0.05305235832929611,0.020075706765055656,0.04089341685175896,-0.03628002107143402,0.011016659438610077,-0.006900626700371504,0.01990925334393978,0.008065948262810707,0.06473833322525024,0.027800723910331726,0.017361106351017952,0.07987644523382187,0.010995513759553432,0.015344033017754555,-0.014710175804793835,-0.03388349711894989,-0.009706396609544754,0.04167714715003967,-0.04114101082086563,0.0565573126077652,-0.005392111837863922,-0.009578465484082699,0.027285322546958923,0.034167733043432236,-0.000798783905338496,-0.01002609170973301,-0.04707019031047821,0.01644137129187584,0.036721836775541306,0.005680502392351627,-0.021027013659477234,0.010723327286541462,0.025897692888975143,0.04711928218603134,0.02466776967048645,0.039473921060562134,0.016824821010231972,-0.0057749575935304165,-0.020818447694182396,-0.02244281955063343,-0.0007298875716514885,0.12383859604597092,0.046361424028873444,-0.04517042636871338,-0.03113817796111107,3.3517230879318304e-34,0.008133409544825554,-0.06666195392608643,0.03196602314710617,0.019292563199996948,0.002082895254716277,0.0015157159650698304,-0.0987117812037468,-0.003752350341528654,0.040856145322322845,-0.06874363124370575,-0.002086036140099168]'
SET
  @TechnicalDesignVector_dba1560b = N'[-0.009257723577320576,-0.0157561507076025,-0.05835382640361786,-0.05430019274353981,-0.008200269192457199,-0.025745615363121033,-0.0003428729251027107,0.05362257733941078,-0.029981248080730438,0.017881467938423157,0.020252298563718796,0.051406536251306534,0.04591915011405945,0.08171610534191132,-0.0026306670624762774,-0.06258635967969894,-0.03464503213763237,0.04595812037587166,0.06077868491411209,-0.013432405889034271,0.021495908498764038,-0.01096448302268982,-0.013306386768817902,0.011319337412714958,-0.06508706510066986,-0.05053213983774185,0.009548530913889408,-0.02596099302172661,0.016627395525574684,-0.06271815299987793,0.01611289568245411,0.04879161715507507,-0.03928679972887039,-0.03158118575811386,0.0000013849772813046002,-0.008790427818894386,0.014756725169718266,0.027364391833543777,0.0066476017236709595,-0.012920672073960304,0.07040353119373322,-0.028426989912986755,0.04395611211657524,-0.03377949446439743,0.04102625325322151,-0.056842610239982605,-0.04220576956868172,0.004121061880141497,0.015495282597839832,-0.03645380958914757,0.0178300142288208,0.00758838327601552,0.009504304267466068,0.05923596769571304,0.040790483355522156,0.01813194528222084,0.0028580569196492434,-0.014009269885718822,0.02815542183816433,0.052512750029563904,-0.01953757554292679,-0.003322562435641885,0.046057332307100296,0.018776006996631622,0.03346064314246178,0.0058279181830585,0.044743526726961136,0.03165992349386215,-0.01003231666982174,0.04655070602893829,0.06481301039457321,-0.006400094833225012,0.013177299872040749,0.0158546082675457,0.003179435385391116,-0.07854151725769043,0.001402572263032198,-0.012801207602024078,-0.05172320082783699,-0.042454492300748825,-0.05981770530343056,0.05080154910683632,-0.05367779731750488,-0.007239526603370905,0.010026651434600353,-0.00617112684994936,0.020490828901529312,-0.026365624740719795,-0.026235591620206833,-0.030259471386671066,-0.02774440310895443,-0.0063544465228915215,-0.004902015905827284,-0.0081190075725317,0.009675191715359688,0.02072560414671898,0.005438672378659248,-0.08291640132665634,0.058136239647865295,-0.06845056265592575,0.05810092017054558,0.013119673356413841,0.04723001644015312,0.0006690610898658633,0.0360502153635025,0.11520852148532867,0.0446404367685318,0.045246921479701996,-0.01932675391435623,-0.005865462590008974,-0.04834157973527908,-0.013126577250659466,0.048181939870119095,-0.006018996704369783,0.036383673548698425,0.0390605553984642,-0.04788946732878685,-0.000709300918970257,-0.009639132767915726,0.02537037990987301,0.05982218310236931,-0.01791902258992195,-0.021977128461003304,-0.007802803069353104,0.020327504724264145,0.05231441557407379,-0.009446089155972004,-0.07052208483219147,-0.027017561718821526,0.06616166979074478,-0.00632210960611701,-0.020752079784870148,0.017314812168478966,0.0037123700603842735,-0.0375945121049881,0.02731924131512642,0.01961311511695385,0.020305078476667404,0.014818818308413029,-0.03803665190935135,-0.0010102781234309077,0.0478789247572422,0.001960654044523835,0.03953639790415764,-0.024197420105338097,0.007635818794369698,0.02889923006296158,-0.016772298142313957,-0.008103087544441223,0.02198195829987526,-0.0044263144955039024,0.017892206087708473,-0.004085177555680275,0.007739355321973562,-0.052170202136039734,-0.006227734964340925,-0.035990118980407715,0.04490787908434868,0.019859980791807175,-0.038016531616449356,0.009214204736053944,-0.008061099797487259,0.0011834644246846437,0.007739347405731678,-0.03561323508620262,-0.005683888681232929,-0.12496403604745865,-0.05522066727280617,-0.014155261218547821,-0.00411322433501482,0.028750093653798103,-0.048335082828998566,-0.016630135476589203,0.009357407689094543,0.01196335069835186,0.050793953239917755,0.05221331864595413,-0.00622957106679678,-0.04338650777935982,-0.00040470343083143234,0.01310032606124878,-0.0908665806055069,0.011396538466215134,-0.00006386698805727065,0.033749379217624664,0.01264268346130848,-0.05759664997458458,0.022323409095406532,-0.009029969573020935,-0.0019957225304096937,-0.034473638981580734,0.04148706793785095,-0.034385472536087036,-0.017560580745339394,0.008828576654195786,0.0033584933262318373,0.023260531947016716,-0.10565672069787979,0.016391215845942497,0.012027658522129059,0.03658207505941391,0.01022360846400261,0.006672351621091366,0.01738894358277321,-0.0040472326800227165,-0.009819766506552696,-0.002540919231250882,0.004563997965306044,-0.05087185278534889,-0.0006497690919786692,-0.013231937773525715,-0.0065786512568593025,-0.0457286611199379,-0.0013849533861503005,0.022294169291853905,-0.003781608073040843,-0.00007771274249535054,-0.004813627805560827,-0.05157279223203659,0.04594273120164871,-0.024559149518609047,-0.0843128189444542,-0.028747834265232086,-0.03634808957576752,0.061579763889312744,0.015815068036317825,0.028829095885157585,-0.045781999826431274,0.01582203432917595,0.0037974936421960592,-0.02080024592578411,0.0007554310723207891,-0.02132420986890793,-0.009530751965939999,0.05320581793785095,0.019575659185647964,0.011443891562521458,-0.06123407930135727,0.008248241618275642,0.09886854141950607,-0.0185658298432827,-0.04348471015691757,-0.012919194996356964,0.005212666466832161,0.012542587704956532,0.00035217776894569397,-0.05080254748463631,0.009122715331614017,-0.058034323155879974,0.0004561367677524686,0.0020177788101136684,0.009327134117484093,-0.00043438022839836776,-0.023551110178232193,-0.0153331458568573,-0.07297904789447784,0.05744069442152977,-0.010143544524908066,-0.03710279241204262,0.0232145506888628,-0.01764994114637375,0.014932897873222828,0.014539610594511032,-0.015230863355100155,0.030692286789417267,-0.0061329868622124195,0.06919784843921661,-0.01532293576747179,-0.0035332092083990574,0.03015187568962574,-0.054463863372802734,0.018973559141159058,-0.03427067771553993,-0.010264319367706776,0.013392660766839981,0.05153854563832283,-0.015952827408909798,0.05047513172030449,-0.006894413847476244,-0.026624472811818123,-0.03769800439476967,-0.03676876425743103,0.034994713962078094,0.01342089008539915,-0.02513413317501545,0.034086305648088455,-0.010788888670504093,0.08140409737825394,0.036270253360271454,-0.08193277567625046,-0.029810728505253792,-0.01794726587831974,0.03982726112008095,-0.06534972786903381,-0.03651506081223488,0.0124690942466259,0.01650310680270195,0.06283697485923767,0.007946910336613655,0.032235223799943924,-0.023821573704481125,-0.026594292372465134,0.006563024595379829,0.017147840932011604,-0.018556470051407814,0.061078991740942,0.06481369584798813,-0.013154840096831322,0.04678714647889137,0.10658657550811768,0.0320584662258625,0.0071145324036479,-0.04136157035827637,-0.015818912535905838,0.009101582691073418,0.010988062247633934,-0.06875704228878021,0.01121186651289463,-0.014925929717719555,-0.006488218437880278,-0.01305575855076313,-0.005177872255444527,0.019958486780524254,0.0035347326193004847,-0.017102891579270363,-0.024553995579481125,-0.004229924641549587,0.010779963806271553,-0.030587920919060707,0.03321453556418419,0.002361403778195381,-0.05449412018060684,0.06815006583929062,0.04770320653915405,0.06466146558523178,-0.03423546627163887,-0.014624316245317459,-0.04661336541175842,0.021717097610235214,-0.00636734813451767,0.026411009952425957,0.008666864596307278,-0.01741969585418701,-0.001525683212094009,0.008549700491130352,-0.07239644974470139,-0.05855717882514,-0.00171132932882756,-0.038064781576395035,-0.025698017328977585,0.04848890006542206,-0.012607650831341743,-0.007041595876216888,0.015245281159877777,0.007662907242774963,0.008956372737884521,-0.019323451444506645,-0.0392913855612278,-0.04580427706241608,-0.010537485592067242,0.07732722163200378,0.029271602630615234,0.06480710208415985,0.04198596999049187,-0.039092227816581726,0.009228569455444813,-0.03795735910534859,0.014963915571570396,-0.005718260537832975,-0.022318094968795776,0.007447516545653343,0.05181597173213959,0.011330384761095047,-0.031107736751437187,-0.03533380851149559,-0.03553926199674606,0.02098841965198517,0.012963739223778248,0.04344690963625908,-0.021032091230154037,0.015121572650969028,0.03284445032477379,0.06654003262519836,0.0034930070396512747,0.02275044284760952,-0.09494800865650177,0.014613183215260506,-0.044773489236831665,-0.04654954746365547,-0.01951405592262745,0.024460123851895332,-0.06335650384426117,-0.05614597350358963,0.01085174735635519,0.0098574198782444,0.09520021826028824,0.051057882606983185,0.013817859813570976,0.06193086877465248,0.011208930984139442,0.009496359154582024,-0.002316635102033615,-0.03208957985043526,0.0017847968265414238,0.0619097575545311,-0.06884884089231491,-0.049983538687229156,0.010142887011170387,0.008328406140208244,0.017260203137993813,-0.0950029119849205,-0.014556036330759525,-0.005353305488824844,-0.009291773661971092,-0.021092625334858894,0.014828404411673546,-0.01478106901049614,-0.06571736931800842,-0.008190548978745937,0.03350388631224632,-0.017123937606811523,0.030609561130404472,0.02046913281083107,0.018639763817191124,0.02033919468522072,-0.025750918313860893,-0.018832504749298096,-0.046652644872665405,-0.019155457615852356,-0.006290252320468426,0.00032383340294472873,0.011042376980185509,-0.0653037577867508,0.03127974644303322,-0.0561123788356781,-0.03921252861618996,-0.011990777216851711,0.006224195938557386,0.054727014154195786,-0.009161138907074928,0.04767870903015137,0.004272352904081345,0.04652354493737221,0.024162638932466507,-0.011297352612018585,-0.003023372730240226,-0.02286793477833271,0.05418052151799202,0.017669597640633583,-0.015568416565656662,-0.004762799013406038,-0.012363840825855732,-0.03935784474015236,0.014891812577843666,0.0016546412371098995,-0.033072322607040405,0.017001572996377945,0.040539227426052094,-0.009357118047773838,0.03175787627696991,0.06522355228662491,0.026616085320711136,-0.05445485934615135,-0.026143878698349,-0.004167136270552874,0.06492827087640762,0.025099821388721466,0.012740222737193108,0.024880412966012955,-0.04910558834671974,0.0727652981877327,0.0062399571761488914,-0.023306813091039658,0.005351687781512737,0.03432858735322952,0.016880730167031288,0.010201594792306423,0.043661292642354965,0.009059864096343517,-0.04861412197351456,0.026082264259457588,0.005457358434796333,0.015374363400042057,-0.09657131880521774,0.06305056810379028,-0.06131722405552864,-0.013565056957304478,-0.001096181571483612,0.0008638599538244307,-0.032853223383426666,-0.006686586420983076,0.036423083394765854,-0.05561279132962227,0.04245705157518387,0.0986936166882515,0.0219452902674675,-0.03919374942779541,-0.02381216548383236,0.0680084377527237,-0.003966896329075098,-0.017755579203367233,-0.02338504232466221,-0.02933093160390854,-0.04213671386241913,-0.02475423738360405,-0.006298888009041548,0.04491305723786354,0.016817694529891014,-0.027966946363449097,-0.030212022364139557,0.004113859497010708,-0.008990871720016003,-0.07405070960521698,-0.011035866104066372,0.03473592549562454,0.04835661128163338,-0.05954504758119583,0.06044081971049309,-0.02267899364233017,-0.0013364895712584257,0.006727035157382488,-0.010524038225412369,0.0069879889488220215,0.008287745527923107,0.11307700723409653,0.07016244530677795,0.02655971236526966,-0.016107534989714622,0.0054292697459459305,0.007078759837895632,0.034378763288259506,-0.0022187745198607445,-0.05630495771765709,0.011212712153792381,-0.0015864078886806965,0.10135940462350845,-0.00738169252872467,-0.009366537444293499,0.0223200973123312,-0.002571864752098918,-0.03693521022796631,-0.010392156429588795,0.069312185049057,-0.05230221152305603,0.01898839697241783,0.0011067863088101149,0.0015021184226498008,-0.07841118425130844,0.0065245372243225574,0.0010597362415865064,0.06912370026111603,-0.04454173520207405,-0.052227552980184555,-0.03484243527054787,0.04775463417172432,-5.353301190664517e-33,-0.007890928536653519,0.004511811770498753,-0.05880660563707352,0.011944637633860111,-0.04766200855374336,-0.03733355924487114,0.03303833678364754,-0.03345523402094841,0.030077829957008362,-0.011301436461508274,-0.005228915251791477,-0.057272251695394516,-0.005346722900867462,0.022541876882314682,0.02338225394487381,-0.004685244522988796,0.010171055793762207,0.015355730429291725,0.019355351105332375,0.004867371637374163,0.008918162435293198,0.040971655398607254,0.019641796126961708,-0.013798396103084087,-0.03386525437235832,0.06201804056763649,-0.004168468993157148,0.03114878572523594,-0.04233695939183235,0.004758649505674839,-0.014591146260499954,0.04216492548584938,0.0019174085464328527,0.05175613984465599,-0.020167408511042595,0.043098703026771545,0.015605232678353786,-0.06310471147298813,0.013924467377364635,0.008646177127957344,0.02785767987370491,-0.0017906016437336802,0.016465000808238983,-0.05553487688302994,0.04461778327822685,-0.03925982490181923,-0.02727719396352768,0.004305041395127773,0.00041659301496110857,0.04935788735747337,0.05287092179059982,0.00312228687107563,0.017948217689990997,0.04946110025048256,-0.02374674193561077,-0.018192710354924202,0.02349676936864853,0.0032125860452651978,-0.03959117829799652,-0.019068948924541473,-0.06221918761730194,-0.05001329258084297,-0.018166573718190193,0.05976172909140587,0.08376066386699677,0.002329951385036111,-0.0028818410355597734,0.03395337238907814,-0.07303529977798462,-0.008436226285994053,0.006950900424271822,-0.07381676137447357,0.03625790402293205,-0.019119422882795334,0.027133887633681297,-0.03382135182619095,-0.017669623717665672,-0.015984756872057915,0.009917134419083595,0.007784309796988964,-0.022441256791353226,-0.003068729070946574,-0.03983289375901222,0.007972032763063908,-0.021197063848376274,-0.09672088176012039,0.01809088885784149,-0.025452209636569023,0.007266263011842966,-0.00969678070396185,-0.002660832367837429,0.016434919089078903,-0.026931900531053543,0.039241332560777664,0.008058295585215092,0.005931298714131117,0.04083860293030739,0.04732584208250046,0.010361727327108383,-0.03873082622885704,0.033893685787916183,0.030503608286380768,-0.02520195208489895,0.02001884952187538,-0.006086730398237705,0.02522314339876175,-0.012797066010534763,-0.023572538048028946,-0.012482203543186188,0.023856146261096,0.04758799076080322,0.032571472227573395,0.0036158482544124126,-0.01587359793484211,0.025232603773474693,0.004519534297287464,-0.0023612985387444496,0.005422548390924931,0.049899764358997345,0.07658296823501587,-0.02792387828230858,-0.015677856281399727,-0.012966073118150234,0.008449295535683632,0.01797483116388321,-0.04418046399950981,-0.057128410786390305,-0.07073929905891418,-0.07123111188411713,-0.003999176900833845,0.03168235719203949,-0.056862231343984604,2.352685868345361e-7,-0.06049714982509613,-0.02359914407134056,-0.037153471261262894,0.00349335465580225,-0.012679008767008781,-0.03437185660004616,-0.01546719390898943,-0.015577373094856739,0.005130326841026545,-0.09725502133369446,-0.018636347725987434,-0.0010062956716865301,0.021889882162213326,0.06512659043073654,-0.02051013708114624,-0.03938213735818863,-0.020659063011407852,-0.0241626538336277,-0.016985181719064713,0.024859067052602768,-0.0006313581252470613,-0.015199484303593636,0.08680755645036697,0.02123490907251835,-0.003401827998459339,-0.016308404505252838,0.0396713986992836,-0.003497208235785365,0.04143098369240761,-0.04276139661669731,0.02380000613629818,-0.01663646288216114,0.009441660717129707,0.06865537166595459,0.029038235545158386,0.03206753730773926,-0.03411276638507843,-0.013670210726559162,0.004745420068502426,0.03928660973906517,0.043157756328582764,0.035931896418333054,0.01892879232764244,-0.04867996647953987,0.0296498853713274,0.014130886644124985,-0.0192218367010355,0.06811492890119553,0.03761279582977295,0.023968271911144257,-0.021950392052531242,-0.03926749899983406,-0.031062616035342216,-0.008339297957718372,0.0018620617920532823,-0.0012574309948831797,0.021290631964802742,0.038437649607658386,0.019078237935900688,0.01672038808465004,-0.0355074405670166,-0.02259921282529831,-0.00926903821527958,0.0872548297047615,0.03970285505056381,0.016069918870925903,-0.009079227223992348,2.9533615981738405e-34,-0.001102030393667519,-0.06852907687425613,0.020333070307970047,-0.0057003069669008255,-0.01273023709654808,-0.001881050644442439,-0.0009518458973616362,-0.003059252630919218,0.07317939400672913,-0.0592087022960186,-0.006886303424835205]'
SET
  @HasCustomProps_dba1560b = 1
SET
  @HasCustomEvents_dba1560b = 0
SET
  @RequiresData_dba1560b = 1
SET
  @DependencyCount_dba1560b = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_dba1560b = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_dba1560b = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_dba1560b = 1
SET
  @ID_dba1560b = '5B3FEB25-06D4-4D3E-A291-60B2DD7A1A80'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_dba1560b,
  @Name = @Name_dba1560b,
  @Version = @Version_dba1560b,
  @VersionSequence = @VersionSequence_dba1560b,
  @Title = @Title_dba1560b,
  @Description = @Description_dba1560b,
  @Type = @Type_dba1560b,
  @Status = @Status_dba1560b,
  @DeveloperName = @DeveloperName_dba1560b,
  @DeveloperEmail = @DeveloperEmail_dba1560b,
  @DeveloperOrganization = @DeveloperOrganization_dba1560b,
  @SourceRegistryID = @SourceRegistryID_dba1560b,
  @ReplicatedAt = @ReplicatedAt_dba1560b,
  @LastSyncedAt = @LastSyncedAt_dba1560b,
  @Specification = @Specification_dba1560b,
  @FunctionalRequirements = @FunctionalRequirements_dba1560b,
  @TechnicalDesign = @TechnicalDesign_dba1560b,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_dba1560b,
  @TechnicalDesignVector = @TechnicalDesignVector_dba1560b,
  @HasCustomProps = @HasCustomProps_dba1560b,
  @HasCustomEvents = @HasCustomEvents_dba1560b,
  @RequiresData = @RequiresData_dba1560b,
  @DependencyCount = @DependencyCount_dba1560b,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_dba1560b,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_dba1560b,
  @HasRequiredCustomProps = @HasRequiredCustomProps_dba1560b,
  @ID = @ID_dba1560b;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_6fa9c9d2 NVARCHAR(MAX),
@Name_6fa9c9d2 NVARCHAR(500),
@Version_6fa9c9d2 NVARCHAR(50),
@VersionSequence_6fa9c9d2 INT,
@Title_6fa9c9d2 NVARCHAR(1000),
@Description_6fa9c9d2 NVARCHAR(MAX),
@Type_6fa9c9d2 NVARCHAR(255),
@Status_6fa9c9d2 NVARCHAR(50),
@DeveloperName_6fa9c9d2 NVARCHAR(255),
@DeveloperEmail_6fa9c9d2 NVARCHAR(255),
@DeveloperOrganization_6fa9c9d2 NVARCHAR(255),
@SourceRegistryID_6fa9c9d2 UNIQUEIDENTIFIER,
@ReplicatedAt_6fa9c9d2 DATETIMEOFFSET,
@LastSyncedAt_6fa9c9d2 DATETIMEOFFSET,
@Specification_6fa9c9d2 NVARCHAR(MAX),
@FunctionalRequirements_6fa9c9d2 NVARCHAR(MAX),
@TechnicalDesign_6fa9c9d2 NVARCHAR(MAX),
@FunctionalRequirementsVector_6fa9c9d2 NVARCHAR(MAX),
@TechnicalDesignVector_6fa9c9d2 NVARCHAR(MAX),
@HasCustomProps_6fa9c9d2 BIT,
@HasCustomEvents_6fa9c9d2 BIT,
@RequiresData_6fa9c9d2 BIT,
@DependencyCount_6fa9c9d2 INT,
@TechnicalDesignVectorEmbeddingModelID_6fa9c9d2 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_6fa9c9d2 NVARCHAR(MAX),
@HasRequiredCustomProps_6fa9c9d2 BIT,
@ID_6fa9c9d2 UNIQUEIDENTIFIER
SET
  @Namespace_6fa9c9d2 = N'CRM/Finance'
SET
  @Name_6fa9c9d2 = N'DetailsPanel'
SET
  @Version_6fa9c9d2 = N'1.0.0'
SET
  @VersionSequence_6fa9c9d2 = 1
SET
  @Title_6fa9c9d2 = N'Details Panel'
SET
  @Description_6fa9c9d2 = N'Slide-out panel with detailed financial breakdowns'
SET
  @Type_6fa9c9d2 = N'Other'
SET
  @Status_6fa9c9d2 = N'Deprecated'
SET
  @Specification_6fa9c9d2 = N'{}'
SET
  @FunctionalRequirements_6fa9c9d2 = N'## Details Panel

### Purpose
Slide-out panel for displaying detailed information.

### Features
- Slide-in/out animation
- Tabbed content
- Close button
- Responsive layout'
SET
  @TechnicalDesign_6fa9c9d2 = N'## Implementation

### Props
- data: Detail data object
- isOpen: Panel open state
- onClose: Close handler'
SET
  @FunctionalRequirementsVector_6fa9c9d2 = N'[0.012311059981584549,-0.07279972732067108,-0.007135430350899696,-0.01994180679321289,-0.007103734649717808,0.024216819554567337,0.04620402678847313,0.056966014206409454,-0.10178573429584503,0.03467485308647156,-0.04307996481657028,0.03155812621116638,0.04845134913921356,0.10820016264915466,0.03119562566280365,-0.11280543357133865,-0.02713555097579956,0.029565177857875824,0.005048132501542568,0.0319061242043972,0.00906939897686243,-0.018861103802919388,-0.03423373028635979,-0.017508525401353836,-0.0013987456914037466,-0.02623891830444336,-0.06364883482456207,0.006101536098867655,-0.01719888299703598,-0.03552774712443352,-0.0019222702831029892,0.03943030908703804,-0.06912549585103989,-0.05132220685482025,0.0000017464698203184525,-0.008032056502997875,0.021656882017850876,-0.014870407059788704,-0.04843728616833687,0.05687202513217926,-0.008823596872389317,-0.007282922975718975,0.05132140964269638,-0.011186833493411541,0.030522339046001434,-0.0541941337287426,-0.012981288135051727,0.09889060258865356,0.02991396375000477,0.02463168278336525,0.001163248554803431,-0.0029057397041469812,0.017784008756279945,-0.03763751685619354,0.0877741351723671,-0.04463134706020355,-0.011819553561508656,-0.04024823382496834,0.06427621096372604,-0.05633743852376938,0.025908568874001503,-0.027647918090224266,0.03832972049713135,-0.026804136112332344,0.0344405472278595,0.016544349491596222,-0.0016728341579437256,-0.12644030153751373,0.02816508337855339,0.05785100907087326,0.10773394256830215,0.004340479150414467,-0.01495438814163208,-0.064771369099617,0.02316087856888771,0.03304824233055115,-0.03745681792497635,0.002083227736875415,-0.024624204263091087,0.008162757381796837,-0.06227459758520126,0.00028107516118325293,-0.03001929260790348,-0.0077332137152552605,0.020700013265013695,-0.021242382004857063,-0.01832803152501583,-0.003855249611660838,-0.0165318101644516,-0.016905205324292183,0.08576707541942596,-0.005260310135781765,0.0071280235424637794,0.03269801288843155,-0.03858614340424538,-0.035091567784547806,0.03435792773962021,-0.036672357469797134,0.021226966753602028,0.004859698936343193,-0.044572602957487106,0.02101934887468815,0.008698518387973309,0.03775526210665703,0.018519341945648193,0.1028238907456398,-0.02042163722217083,-0.02826114557683468,-0.03461349755525589,0.030066872015595436,0.01846073940396309,0.01691542938351631,-0.01588556356728077,0.05592748522758484,-0.02018621936440468,0.01358960010111332,-0.0014498105738312006,0.025773046538233757,0.011644534766674042,0.043392665684223175,0.11726514995098114,0.013044902123510838,-0.02113989368081093,-0.020517654716968536,0.03472650796175003,0.011420841328799725,-0.03967633098363876,-0.06621453166007996,0.0024033281952142715,-0.01585576683282852,-0.023229457437992096,0.009747415781021118,0.00844535417854786,0.008054794743657112,-0.028393438085913658,0.01991277001798153,-0.01786786876618862,0.016743110492825508,-0.02753743715584278,0.03205545246601105,0.02012377791106701,-0.04786614328622818,-0.07136115431785583,0.024222249165177345,-0.006713357288390398,0.021115869283676147,-0.046768900007009506,-0.015591981820762157,0.04089350625872612,0.027567047625780106,-0.016780581325292587,-0.0478457547724247,-0.011217237450182438,0.04606053605675697,0.0006887810304760933,0.03181950002908707,-0.025194622576236725,-0.017458109185099602,0.01345064677298069,0.08928851783275604,-0.01836038939654827,0.008098440244793892,0.028945686295628548,0.011125406250357628,-0.06492822617292404,0.013112305663526058,-0.023968514055013657,-0.011550365947186947,0.013300018385052681,-0.07204683125019073,-0.05382620915770531,-0.02886100299656391,-0.03107493929564953,0.03373701125383377,-0.011428751051425934,-0.005632706917822361,0.025310367345809937,0.029121188446879387,-0.07214637100696564,0.046255066990852356,0.03564510866999626,-0.055524792522192,-0.005717284511774778,0.014213750138878822,0.02229100838303566,-0.0005977048422209918,0.011110048741102219,0.02019670233130455,-0.07248155027627945,-0.011246954090893269,-0.015851609408855438,0.033184170722961426,-0.0033844688441604376,0.009645786136388779,0.012860030867159367,-0.006398471537977457,-0.05098104476928711,0.03824101388454437,0.026428069919347763,0.028116779401898384,0.003993441350758076,0.035444680601358414,0.03277286887168884,0.07954900711774826,-0.005842717830091715,-0.007213822100311518,-0.035364460200071335,-0.014739376492798328,0.05222050100564957,0.02835492044687271,0.08666910976171494,0.018661944195628166,-0.017999276518821716,0.026683472096920013,-0.04972982779145241,-0.025750765576958656,0.026210658252239227,0.029406270012259483,-0.02877483144402504,-0.004692046903073788,-0.004081659950315952,0.027070842683315277,-0.01564324088394642,0.02915511280298233,0.03146960958838463,0.002879466861486435,0.017160674557089806,-0.022466829046607018,0.021882306784391403,0.03181488439440727,-0.011834424920380116,-0.012518818490207195,0.0287970919162035,0.03223124146461487,0.027957763522863388,0.06006714329123497,0.008169335313141346,-0.00009491354285273701,-0.03472388535737991,0.014545374549925327,-0.0024433359503746033,-0.07343810051679611,-0.04129405319690704,0.02025776356458664,0.020523786544799805,-0.03310560807585716,-0.045377153903245926,-0.010461103171110153,0.041296783834695816,-0.022809427231550217,-0.017652807757258415,0.023523405194282532,0.08279479295015335,-0.014726235531270504,-0.0004669399932026863,0.0550604909658432,-0.04392750933766365,0.025226721540093422,-0.022348497062921524,0.030432473868131638,0.03289065137505531,-0.0574694387614727,-0.04508425295352936,-0.012986823916435242,0.029451856389641762,0.008211684413254261,0.06777337193489075,0.02162698097527027,-0.017635613679885864,-0.016766900196671486,0.014908132143318653,0.03052426129579544,0.044697076082229614,-0.043795254081487656,-0.013687343336641788,0.013300593942403793,-0.017759406939148903,0.03191855549812317,-0.008394497446715832,-0.029483048245310783,0.03733466565608978,0.013945761136710644,-0.01745333895087242,0.0333242267370224,0.019053447991609573,0.00041881485958583653,0.0062449099496006966,-0.0897207036614418,-0.0037079118192195892,-0.04573153704404831,0.04792250692844391,0.01696029305458069,0.0440046563744545,-0.01585867442190647,-0.015671538189053535,0.007593057118356228,-0.06874006241559982,-0.0036194617860019207,-0.03106573410332203,0.10421635955572128,-0.026320114731788635,0.04292663559317589,0.0007317431154660881,0.045347653329372406,-0.038577478379011154,0.03103618510067463,0.0022131511941552162,-0.010001392103731632,0.003710190998390317,0.01911734975874424,0.03294304385781288,0.060261070728302,-0.005367047153413296,-0.06244559958577156,0.01652715727686882,-0.004608215764164925,0.05192575603723526,0.0051255919970571995,-0.00583019619807601,0.06919049471616745,-0.025118568912148476,0.018289661034941673,-0.006518416106700897,-0.02341371588408947,-0.020260382443666458,0.035960666835308075,-0.018659479916095734,0.02491288259625435,0.034760482609272,0.002671764697879553,0.01820356957614422,0.04642055928707123,-0.04432499781250954,0.005540256388485432,0.01985352300107479,-0.003780149621888995,-0.010816172696650028,-0.06737568974494934,0.017253324389457703,-0.013484617695212364,0.007065350189805031,-0.00952821969985962,-0.01690029911696911,-0.054748035967350006,0.034061167389154434,-0.024231286719441414,-0.0993877574801445,-0.009787453338503838,-0.1426875740289688,0.03988787531852722,0.04156069830060005,0.038641054183244705,-0.033988989889621735,0.018309375271201134,-0.0010348813375458121,0.00749747920781374,-0.010395914316177368,0.0245395265519619,-0.030336763709783554,-0.05595169588923454,0.009231370873749256,0.013475117273628712,-0.014219728298485279,0.07018990069627762,0.06904669851064682,-0.013027260079979897,-0.0170134324580431,-0.014484078623354435,-0.011142236180603504,-0.03205771744251251,0.04110771417617798,0.02329779975116253,0.03763522207736969,0.06783072650432587,-0.02951652556657791,-0.04387893155217171,0.0054564522579312325,0.01895262859761715,-0.0044264886528253555,0.015831056982278824,0.05510019138455391,0.033227238804101944,0.054895106703042984,-0.03403307497501373,0.03471533954143524,0.044443294405937195,0.013452420942485332,0.006497270427644253,0.02567288465797901,0.006960675586014986,-0.008619820699095726,0.00885428860783577,-0.07840963453054428,-0.037273723632097244,-0.03836388885974884,-0.025912810117006302,-0.01049644872546196,0.0007390687824226916,0.004717535339295864,-0.024256287142634392,-0.005217770114541054,0.01679851859807968,-0.04124404489994049,-0.009805922396481037,0.03970536217093468,-0.05126574635505676,0.027834510430693626,0.0007013919530436397,-0.0067679183557629585,-0.0005304042715579271,-0.046025350689888,0.015306995250284672,-0.0007074240711517632,-0.006351650692522526,-0.008072971366345882,0.018537715077400208,-0.011050357483327389,-0.042067136615514755,0.018822098150849342,0.07366547733545303,-0.014668343588709831,-0.020652426406741142,0.014967259019613266,-0.039746519178152084,0.006080367136746645,-0.007345154415816069,0.0021241654176265,-0.06344080716371536,0.006666952278465033,0.03648645430803299,-0.013139389455318451,0.0048179468140006065,-0.04949336126446724,-0.017971552908420563,-0.009391382336616516,0.026731083169579506,-0.02089875191450119,-0.03255763649940491,-0.006497320719063282,0.014478372409939766,-0.007389707490801811,0.001164733781479299,0.043499547988176346,0.0018448586342856288,-0.01734193228185177,-0.007979292422533035,-0.003463850589469075,-0.00164279795717448,-0.040185362100601196,0.05086619034409523,-0.05794942006468773,0.008063928224146366,-0.04234171658754349,-0.018811125308275223,-0.04458317533135414,-0.010101576335728168,-0.053160227835178375,0.012849616818130016,-0.026689724996685982,-0.041961658746004105,-0.025050342082977295,0.03595960885286331,0.005170346237719059,-0.02144830860197544,0.04642479121685028,0.058422576636075974,-0.020342130213975906,-0.057706575840711594,-0.03013691119849682,-0.04135546833276749,-0.008799169212579727,0.0009805717272683978,-0.0169963575899601,-0.06399285793304443,-0.06184577941894531,-0.024699512869119644,-0.046469420194625854,-0.0033093763049691916,0.013272392563521862,0.008413901552557945,-0.003931617364287376,0.007199378218501806,0.04058094322681427,-0.1546224057674408,0.002543024020269513,0.03523769602179527,-0.031581465154886246,-0.003135326551273465,0.045868974179029465,0.016182851046323776,0.011693153530359268,-0.019167738035321236,0.004524341318756342,0.043301329016685486,0.03860696032643318,0.02218981273472309,-0.07117224484682083,-0.01640588417649269,-0.09009569138288498,-0.05947986617684364,-0.055388495326042175,-0.0032689571380615234,0.001105539733543992,0.011317041702568531,-0.0426885150372982,-0.0450601801276207,-0.005313883535563946,0.04982138052582741,-0.022398700937628746,0.01136345136910677,0.018852252513170242,0.013058414682745934,-0.010393835604190826,-0.05233190953731537,-0.024341637268662453,0.10542821884155273,-0.05715833231806755,0.03519688546657562,-0.002232298022136092,0.025105031207203865,0.001880101510323584,0.0029534504283219576,-0.006396040320396423,-0.022197000682353973,-0.000060271398979239166,-0.03874971345067024,0.05603785440325737,0.03795592486858368,-0.04266002029180527,0.02820136770606041,0.03238575533032417,-0.007293208502233028,0.037773214280605316,-0.005237612407654524,-0.0009702796232886612,0.058984946459531784,-0.0061148591339588165,0.05052721127867699,-0.052349306643009186,-0.02429388277232647,-0.023023055866360664,0.027387764304876328,-0.018921630457043648,0.007533845957368612,0.036823008209466934,0.01966097205877304,-0.0033932181540876627,-0.02208789251744747,0.005383836105465889,-0.020482415333390236,-0.007488853298127651,-0.0628160834312439,-0.0165992584079504,0.02507445029914379,-0.013389943167567253,-5.9611250749037364e-33,-0.032385922968387604,-0.010021470487117767,-0.022894268855452538,0.09283219277858734,0.02662728540599346,-0.07871659100055695,-0.02117646299302578,-0.03196939826011658,-0.03448297455906868,-0.000694524496793747,-0.019959066063165665,-0.018326595425605774,0.014071744866669178,0.034167394042015076,-0.007247811648994684,-0.002207845449447632,0.03692915290594101,-0.020244568586349487,0.009083413518965244,0.04187324270606041,-0.03541164472699165,6.855313472442504e-7,0.03127553313970566,-0.038251783698797226,-0.03920074924826622,0.0019439293537288904,0.008488374762237072,0.02928147464990616,0.03306914493441582,0.007999719120562077,-0.028167786076664925,-0.025614887475967407,-0.009538557380437851,-0.028046291321516037,0.02615983411669731,0.02328886091709137,-0.042325399816036224,-0.04550202190876007,-0.0031424120534211397,0.06961701065301895,0.03620990738272667,-0.017576009035110474,0.014382682740688324,-0.012698117643594742,-0.004188918508589268,-0.038347337394952774,0.01989792101085186,0.023468289524316788,0.03677653521299362,0.03143943101167679,-0.015662070363759995,0.007988152094185352,-0.023775869980454445,-0.008154256269335747,0.006363656371831894,0.013390406966209412,-0.0007199872634373605,-0.034170329570770264,-0.03844566270709038,-0.047119490802288055,0.05276375636458397,-0.011151371523737907,0.019731173291802406,0.02207477204501629,0.04397452622652054,0.026263488456606865,-0.007336199749261141,0.06030801683664322,-0.04295639321208,0.008668655529618263,-0.018943287432193756,0.07741975784301758,0.0014056965010240674,-0.11575134843587875,0.012954553589224815,0.026493389159440994,-0.009148444049060345,0.0033851382322609425,-0.0017003484535962343,0.11178071051836014,0.030438624322414398,0.010183105245232582,0.01492026261985302,-0.0034947223030030727,0.00855935737490654,-0.012619046494364738,-0.0018004506127908826,-0.032105669379234314,0.0079259742051363,0.021702446043491364,0.02878805808722973,0.03380541130900383,-0.047026801854372025,0.04899837076663971,-0.009317558258771896,0.06756199896335602,0.031149404123425484,-0.001303631579503417,-0.021571146324276924,-0.049370355904102325,-0.013544747605919838,-0.0513053759932518,-0.05690606310963631,0.0047455644235014915,-0.011727821081876755,0.005542250350117683,-0.012236914597451687,0.008442584425210953,-0.03122083656489849,0.0021820322144776583,0.0012133694253861904,-0.004749335814267397,0.0011668303050100803,-0.008148708380758762,-0.046038076281547546,-0.008391178213059902,-0.047557514160871506,0.007107092067599297,-0.024838367477059364,-0.0026313301641494036,0.01678379252552986,-0.02927030250430107,0.018555941060185432,0.015051707625389099,0.04700687155127525,-0.028882505372166634,-0.024009844288229942,0.03227606788277626,0.027326423674821854,0.0361047238111496,0.0026312002446502447,0.05597061663866043,2.6080076054313395e-7,-0.03465539962053299,0.012510096654295921,0.009070574305951595,0.03116309456527233,0.023288194090127945,-0.06940843909978867,-0.007399403490126133,-0.026040706783533096,-0.030954251065850258,-0.10266310721635818,0.04900524765253067,0.039202261716127396,-0.004760758485645056,0.06361358612775803,0.03015195205807686,-0.0051608881913125515,0.023052586242556572,-0.0516323521733284,-0.07662979513406754,-0.006391186732798815,0.07993645966053009,0.0015459480928257108,0.051681142300367355,0.03211037069559097,0.0210153516381979,0.0365804098546505,-0.026937618851661682,0.02282385341823101,0.036399099975824356,-0.0010185114806517959,0.0543801374733448,0.02500949613749981,0.008769196458160877,-0.005161144770681858,0.02095801755785942,-0.009524812921881676,0.023930197581648827,0.0020114327780902386,0.035561952739953995,0.033134859055280685,0.032334648072719574,-0.004541206639260054,-0.041363224387168884,-0.03837793692946434,0.0026483924593776464,-0.0019204242853447795,-0.0008056824444793165,0.033778026700019836,-0.06267152726650238,0.01000270340591669,0.00920635461807251,0.03602802753448486,0.07816977798938751,-0.018647857010364532,0.023179221898317337,-0.056391000747680664,-0.048772428184747696,0.03840763494372368,-0.000776815926656127,0.01303069107234478,-0.038869407027959824,0.04428867995738983,-0.01603047363460064,-0.022334611043334007,0.004428062587976456,-0.015834221616387367,-0.0025549866259098053,2.721761890001743e-34,0.008256752043962479,-0.02559646964073181,0.018580054864287376,0.023617582395672798,0.015215657651424408,0.02408907189965248,-0.03370590880513191,-0.028476150706410408,-0.024049129337072372,-0.04451937600970268,0.006539472844451666]'
SET
  @TechnicalDesignVector_6fa9c9d2 = N'[-0.03399002179503441,0.019803332164883614,-0.010052165016531944,-0.04056549444794655,0.005159142427146435,-0.0621381513774395,0.06350959837436676,0.042882006615400314,-0.0004959867801517248,-0.0009455949766561389,-0.01482346374541521,-0.011743745766580105,0.05634317547082901,0.06428930163383484,0.045624736696481705,-0.07210073620080948,0.005031811073422432,0.05765734240412712,-0.05818871408700943,-0.03621913120150566,0.014803961850702763,0.003188032191246748,-0.012359497137367725,0.03208789974451065,0.04576405882835388,-0.048435356467962265,0.0038623339496552944,-0.027590280398726463,0.026615582406520844,-0.028784770518541336,0.007404683623462915,0.03998461365699768,-0.03792952001094818,-0.020336370915174484,0.0000012609276609509834,-0.008836367167532444,0.02616046369075775,0.021543513983488083,-0.04139070585370064,-0.00356949376873672,-0.0003647529811132699,-0.024161694571375847,0.04440928250551224,0.017345545813441277,0.02772725746035576,-0.11729509383440018,-0.007297932170331478,-0.030140800401568413,0.046874430030584335,0.01298881322145462,-0.004721369594335556,0.04005909338593483,0.08687510341405869,0.004630625247955322,0.06125148385763168,-0.03722352907061577,-0.018987057730555534,-0.03928409144282341,0.0032659817952662706,-0.03626054525375366,-0.01575271412730217,-0.05418336018919945,0.03753690794110298,0.0035865898244082928,-0.010640512220561504,0.0015863444423303008,0.023162012919783592,-0.006861754227429628,-0.008679310791194439,0.014313003048300743,0.16612154245376587,0.01422791462391615,-0.004271776415407658,0.02732015959918499,-0.009602745063602924,0.005522416904568672,0.005970794707536697,-0.01673920638859272,-0.03214778006076813,0.07082075625658035,0.024847451597452164,0.024282652884721756,-0.043947529047727585,0.007086081895977259,0.02360040880739689,0.0389891192317009,-0.027529390528798103,0.013256428763270378,0.006791289895772934,-0.03514547646045685,0.020542316138744354,0.01522300485521555,-0.0016472501447424293,-0.010754459537565708,-0.00276301265694201,0.004148394800722599,0.027251318097114563,-0.10069184750318527,-0.010765564627945423,-0.02290920726954937,-0.056446805596351624,0.04678966850042343,-0.015223180875182152,0.014013956300914288,0.04671661555767059,0.0659109503030777,0.031187210232019424,0.017467767000198364,0.008634553290903568,-0.039325911551713943,-0.026919594034552574,0.017734354361891747,0.021939724683761597,0.033672869205474854,-0.03136340156197548,0.023514287546277046,-0.0026417593471705914,-0.023287523537874222,0.014043331146240234,0.006264049094170332,0.05486590042710304,-0.02557455748319626,-0.023571858182549477,-0.04817263036966324,0.006776060443371534,0.029852844774723053,0.00565487053245306,-0.08249020576477051,0.007682150695472956,0.05025786533951759,0.01830926351249218,0.01614459790289402,0.020000485703349113,0.017641844227910042,-0.012000376358628273,0.046099647879600525,-0.011583558283746243,-0.010594858787953854,-0.0054212650284171104,0.012989215552806854,0.02676345780491829,-0.015194122679531574,-0.031682949513196945,0.025915008038282394,0.00011881285172421485,0.023263372480869293,0.0054969340562820435,-0.09329236298799515,0.007131712045520544,0.050685152411460876,0.0031467077787965536,-0.02133481577038765,-0.05099107697606087,0.005620014853775501,-0.09065969288349152,0.023683253675699234,-0.00045482764835469425,-0.012942628934979439,-0.015562117099761963,0.00923184584826231,0.003854507813230157,0.036843277513980865,0.04777868837118149,0.01973935030400753,-0.039568498730659485,0.025489626452326775,-0.10395137965679169,-0.031830765306949615,0.0020985675510019064,-0.054239820688962936,-0.003917982801795006,-0.023096879944205284,-0.04139577969908714,0.03645598143339157,-0.02014758065342903,-0.02771957963705063,0.022573040798306465,0.009794036857783794,-0.1299087554216385,0.05838716775178909,-0.01080853771418333,-0.05298956483602524,0.000012627350770344492,0.008364686742424965,0.024665672332048416,-0.024413393810391426,-0.023884156718850136,0.012827319093048573,0.023677052929997444,-0.015237766318023205,-0.03277994692325592,0.01590597629547119,-0.029011191800236702,-0.0012392621720209718,-0.021252527832984924,-0.0042075421661138535,0.00761841656640172,0.07674682885408401,0.031067773699760437,0.07813460379838943,-0.0030124345794320107,-0.027267539873719215,0.030947860330343246,0.024404099211096764,-0.009290071204304695,-0.009834189899265766,-0.06257963180541992,0.0088458601385355,0.02441524527966976,-0.03416381776332855,0.019549496471881866,-0.013377741910517216,0.005423677619546652,0.02800406888127327,0.01027964148670435,0.008273698389530182,0.03369089961051941,0.019595392048358917,-0.06546825915575027,0.0066811759024858475,-0.03552508354187012,-0.002133584814146161,0.06168215349316597,0.02599172666668892,0.07556157559156418,-0.013785379938781261,0.03160468861460686,-0.006226124707609415,-0.020019959658384323,-0.000534466584213078,0.024025773629546165,-0.045762404799461365,-0.01138385385274887,0.03864783048629761,0.05258815735578537,0.030225513502955437,-0.009510061703622341,-0.04727613553404808,0.004128005355596542,0.07657226920127869,-0.04249877482652664,0.043473295867443085,-0.021849941462278366,0.04054361209273338,-0.0344851054251194,0.0041681318543851376,-0.002523858565837145,-0.036368731409311295,-0.01760365627706051,-0.01728660799562931,0.005144716240465641,0.014631596393883228,0.02107703685760498,-0.04812265932559967,-0.0008775026071816683,-0.012298276647925377,0.09882185608148575,0.051920317113399506,0.02486218325793743,-0.012957588769495487,0.018452242016792297,-0.002346322638913989,0.03355865180492401,0.009156412445008755,0.0594230480492115,0.02255099266767502,0.05282397195696831,0.02257591485977173,0.049055419862270355,-0.025268593803048134,-0.0034742311108857393,-0.025437703356146812,-0.006732265464961529,-0.025577712804079056,0.030676836147904396,0.0155976926907897,0.060079608112573624,0.05580497905611992,-0.016805289313197136,-0.024647342041134834,0.013822742737829685,-0.041237786412239075,0.0286276713013649,0.03530457615852356,-0.002297793747857213,-0.019964532926678658,-0.027664072811603546,0.042630817741155624,0.022722918540239334,-0.0760175809264183,0.02516401931643486,0.011577812023460865,0.017802579328417778,-0.018191037699580193,-0.013806071132421494,-0.015793757513165474,-0.018592987209558487,-0.00511882733553648,-0.03728533163666725,0.03201235085725784,0.03507542237639427,0.062039926648139954,0.0012955801794305444,0.0104645611718297,0.009334711357951164,0.014134904369711876,-0.042074594646692276,0.013342907652258873,0.0357847586274147,0.039178673177957535,0.00361239118501544,0.04446273669600487,0.01083043310791254,-0.02761903405189514,-0.004369421396404505,-0.027115071192383766,0.015332183800637722,-0.0021275177132338285,-0.04948155954480171,0.04836473986506462,-0.023389330133795738,-0.03379662334918976,0.009359813295304775,-0.021744979545474052,-0.07510931044816971,0.026026425883173943,0.010698861442506313,-0.05131258815526962,0.1407419741153717,-0.001215259893797338,0.030209580436348915,0.009943706914782524,-0.018365072086453438,0.0315537303686142,0.07069658488035202,-0.02897961437702179,-0.012737549841403961,-0.07746872305870056,0.01775452308356762,0.0023321271874010563,0.011357533745467663,-0.012903195805847645,-0.011566681787371635,-0.022525399923324585,-0.030221186578273773,-0.05621418356895447,-0.1383536159992218,0.005117511376738548,-0.060145966708660126,0.011704330332577229,-0.014051830396056175,0.007733473554253578,-0.013195731677114964,-0.002091798232868314,-0.011661889962852001,0.026988187804818153,0.04214997962117195,-0.03588302060961723,-0.027209129184484482,-0.03124966099858284,0.0616159550845623,-0.001932015991769731,0.02440209873020649,0.04024725779891014,0.016404233872890472,0.005591950379312038,0.009140098467469215,0.042952630668878555,-0.020733753219246864,-0.03904636949300766,0.015713907778263092,-0.005861563608050346,0.014254670590162277,0.0071952431462705135,-0.038222432136535645,-0.053053051233291626,0.006963683757930994,-0.02284965291619301,-0.02468716725707054,-0.008413268253207207,0.03727908059954643,0.0380433164536953,0.02874397486448288,-0.030644213780760765,0.059624314308166504,-0.014105686917901039,0.021258922293782234,-0.007246729917824268,0.04534497857093811,0.00855395570397377,-0.04640822112560272,-0.03598664700984955,-0.05135023221373558,0.012075192295014858,0.023747172206640244,-0.014903489500284195,0.022693868726491928,0.004824305418878794,0.05269133299589157,-0.018826588988304138,0.0058790589682757854,0.14140665531158447,0.0394965223968029,-0.01177815068513155,0.0008276046137325466,0.022244209423661232,-0.06711848825216293,0.017440784722566605,0.037271998822689056,0.0477924719452858,-0.02632204256951809,0.024406246840953827,-0.042024724185466766,0.005880592856556177,-0.06945011019706726,0.026956308633089066,0.025265397503972054,-0.0755235031247139,0.0041708261705935,0.04521875083446503,-0.03165692836046219,-0.005080824717879295,0.0025905792135745287,-0.008529468439519405,0.012823188677430153,-0.01568576879799366,-0.000721139193046838,-0.03914487361907959,0.001006640843115747,-0.011469095945358276,-0.012579760514199734,0.03587467595934868,0.03231978788971901,-0.005003356374800205,-0.049356330186128616,-0.027323942631483078,-0.02990964613854885,-0.036603476852178574,0.026775473728775978,-0.0036065480671823025,0.029798511415719986,-0.02185608446598053,0.07284016907215118,-0.00015846242604311556,0.009377803653478622,-0.06573539972305298,0.014558102935552597,0.10600149631500244,0.03485581651329994,-0.015669794753193855,-0.034344956278800964,0.0003926086355932057,-0.061956994235515594,-0.004346923436969519,-0.018786214292049408,-0.07813658565282822,0.03874771669507027,0.0672961175441742,-0.020240049809217453,0.02809089608490467,-0.0670481026172638,0.01999567821621895,0.0015922479797154665,0.0011864525731652975,0.024045703932642937,-0.012809772975742817,-0.006836571265012026,-0.00446300208568573,-0.016054846346378326,0.015391948632895947,-0.030801545828580856,-0.008191769942641258,-0.0072944276034832,0.021408837288618088,-0.004662295803427696,-0.034477349370718,-0.027143683284521103,-0.03495265915989876,-0.03290224075317383,-0.010639946907758713,0.02369590848684311,-0.00844300165772438,-0.041898615658283234,-0.07918062806129456,0.0068638683296740055,-0.03630813956260681,0.03911154344677925,0.012621894478797913,-0.004545954521745443,0.0034256023354828358,-0.004097398370504379,-0.0103153670206666,-0.02040436677634716,0.06536746025085449,0.10555449873209,0.05460239201784134,-0.04088335111737251,-0.02506924979388714,-0.02760573849081993,0.0244862399995327,-0.031553350389003754,-0.004117033910006285,-0.01845376193523407,-0.02568751946091652,-0.0011778450571000576,-0.027303224429488182,-0.037138089537620544,0.030205577611923218,-0.018566707149147987,-0.03616352379322052,0.0015134508721530437,-0.02902698703110218,-0.018571611493825912,0.027671227231621742,-0.004528604913502932,0.09727996587753296,-0.03800935298204422,0.022348908707499504,0.005413797218352556,-0.04726063087582588,0.002293170429766178,0.022076541557908058,-0.008335988037288189,-0.03737965226173401,0.04317447543144226,-0.011590234003961086,0.033593930304050446,0.04072137922048569,-0.01912810280919075,-0.006810852326452732,0.03441796824336052,0.02530812844634056,-0.035073380917310715,0.013492044061422348,0.016572825610637665,0.09049806743860245,-0.03197924792766571,-0.006457473151385784,0.007445008028298616,-0.033023495227098465,-0.011986852623522282,0.03231765702366829,-0.045779112726449966,0.00023021944798529148,0.04664178937673569,0.003739922773092985,0.006479069124907255,-0.05412893369793892,0.014450169168412685,-0.01598343625664711,0.008737930096685886,-0.030190639197826385,0.0437285415828228,0.015367225743830204,-0.0034927804954349995,-4.601642715632729e-33,-0.007010378874838352,-0.019963165745139122,-0.006967688445001841,0.07590783387422562,-0.056143756955862045,-0.04221880063414574,-0.05985967814922333,-0.012394826859235764,0.014965403825044632,-0.06246725469827652,-0.003550382796674967,-0.062124695628881454,-0.00772517966106534,0.010939471423625946,-0.005218974780291319,-0.006041432730853558,0.021973686292767525,0.0012556033907458186,-0.018777579069137573,0.029738685116171837,-0.01633533090353012,0.00459556607529521,0.004644036293029785,-0.017552988603711128,-0.03435957431793213,-0.006273208651691675,-0.008925065398216248,0.04481152072548866,-0.019927063956856728,-0.010473871603608131,-0.022492041811347008,0.0011123138247057796,-0.004892083816230297,-0.03458978235721588,0.03325619548559189,0.0778319388628006,-0.006386108230799437,0.004632787313312292,0.03548641875386238,0.0017219793517142534,0.054656583815813065,0.017230689525604248,-0.010351662524044514,0.004802008159458637,0.030705906450748444,0.0024098006542772055,-0.017192145809531212,0.019076351076364517,0.02082221210002899,0.07515309751033783,0.004008644260466099,0.017394613474607468,0.010007320903241634,-0.02365492843091488,-0.01970060169696808,0.02828044258058071,0.0403912290930748,-0.007799450308084488,0.00788963958621025,-0.022522682324051857,0.007403742056339979,-0.03461795300245285,0.023755822330713272,0.0633084774017334,0.04321790486574173,0.031881287693977356,0.0297724399715662,0.014426149427890778,-0.07744481414556503,0.018335388973355293,0.01139543391764164,0.005596201866865158,-0.021753866225481033,-0.01718018762767315,-0.007561291567981243,-0.027158204466104507,-0.0078497976064682,-0.006242439150810242,-0.01215901505202055,0.0070479814894497395,0.032211240381002426,0.028087979182600975,0.015674512833356857,0.036250319331884384,-0.03985191881656647,-0.022773774340748787,0.07349580526351929,-0.014984182082116604,-0.026337090879678726,0.016095712780952454,-0.027481917291879654,0.012552372179925442,-0.026352303102612495,0.06591615825891495,0.015935169532895088,-0.05735401064157486,0.08653444051742554,0.015521174296736717,-0.030549298971891403,-0.032355986535549164,0.017113178968429565,-0.043124839663505554,-0.05820656940340996,-0.014025608077645302,0.009853173978626728,0.02285180427134037,-0.05931870639324188,0.02411780133843422,0.0016897802706807852,0.03849092498421669,0.013511532917618752,-0.013430268503725529,-0.01156521588563919,0.007111492566764355,0.004166789818555117,0.01871219277381897,0.01896471157670021,0.03941577300429344,0.016814734786748886,0.06134280189871788,-0.0781930461525917,-0.021179748699069023,0.026018450036644936,-0.00044652397627942264,0.011299260891973972,-0.015906168147921562,-0.03382955119013786,-0.09874909371137619,-0.0040922318585217,0.005578760523349047,0.02587338350713253,-0.014520255848765373,2.2410843314446538e-7,-0.05943984538316727,-0.015450632199645042,-0.04189865663647652,-0.01582106202840805,-0.015417490154504776,-0.042038362473249435,-0.049444202333688736,-0.025585036724805832,-0.009127724915742874,-0.14917750656604767,0.03264845907688141,-0.02675505168735981,0.028806820511817932,0.08923888951539993,-0.08583535999059677,0.011913455091416836,0.020683467388153076,-0.015751570463180542,-0.054517798125743866,-0.0022947066463530064,0.019241226837038994,-0.02482154592871666,0.06256216019392014,-0.03788717836141586,0.019578799605369568,0.08007631450891495,0.010334608145058155,0.01611006259918213,-0.0013113049790263176,-0.01734459027647972,0.02556621842086315,0.0006621451466344297,0.006012583617120981,-0.04035213217139244,0.05180419981479645,0.046773288398981094,-0.005207654554396868,0.011411834508180618,0.03545146808028221,-0.042726147919893265,0.03307708352804184,-0.005527165252715349,-0.0570577010512352,-0.01168033480644226,0.03315684199333191,0.003002196317538619,-0.02850756049156189,0.073285311460495,-0.00890408270061016,0.03238166868686676,-0.04710957780480385,-0.013458662666380405,0.01680091582238674,-0.028143707662820816,-0.01744888722896576,-0.06008349359035492,0.006826890166848898,0.0517042838037014,-0.008504092693328857,-0.014836679212749004,-0.04663321003317833,0.005617566406726837,0.024475401267409325,-0.04459719732403755,-0.029330415651202202,-0.043490614742040634,-0.048952460289001465,2.1361278493571944e-34,-0.012858480215072632,-0.047963134944438934,-0.015256921760737896,0.03542568162083626,-0.005339287221431732,0.010433072224259377,0.05728675797581673,-0.013528425246477127,-0.0244700126349926,-0.005042554810643196,-0.0027947810012847185]'
SET
  @HasCustomProps_6fa9c9d2 = 0
SET
  @HasCustomEvents_6fa9c9d2 = 0
SET
  @RequiresData_6fa9c9d2 = 0
SET
  @DependencyCount_6fa9c9d2 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_6fa9c9d2 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_6fa9c9d2 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_6fa9c9d2 = 0
SET
  @ID_6fa9c9d2 = '2A325BAF-B1B7-4494-B73C-0C158B58B3B6'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_6fa9c9d2,
  @Name = @Name_6fa9c9d2,
  @Version = @Version_6fa9c9d2,
  @VersionSequence = @VersionSequence_6fa9c9d2,
  @Title = @Title_6fa9c9d2,
  @Description = @Description_6fa9c9d2,
  @Type = @Type_6fa9c9d2,
  @Status = @Status_6fa9c9d2,
  @DeveloperName = @DeveloperName_6fa9c9d2,
  @DeveloperEmail = @DeveloperEmail_6fa9c9d2,
  @DeveloperOrganization = @DeveloperOrganization_6fa9c9d2,
  @SourceRegistryID = @SourceRegistryID_6fa9c9d2,
  @ReplicatedAt = @ReplicatedAt_6fa9c9d2,
  @LastSyncedAt = @LastSyncedAt_6fa9c9d2,
  @Specification = @Specification_6fa9c9d2,
  @FunctionalRequirements = @FunctionalRequirements_6fa9c9d2,
  @TechnicalDesign = @TechnicalDesign_6fa9c9d2,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_6fa9c9d2,
  @TechnicalDesignVector = @TechnicalDesignVector_6fa9c9d2,
  @HasCustomProps = @HasCustomProps_6fa9c9d2,
  @HasCustomEvents = @HasCustomEvents_6fa9c9d2,
  @RequiresData = @RequiresData_6fa9c9d2,
  @DependencyCount = @DependencyCount_6fa9c9d2,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_6fa9c9d2,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_6fa9c9d2,
  @HasRequiredCustomProps = @HasRequiredCustomProps_6fa9c9d2,
  @ID = @ID_6fa9c9d2;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_f337eac6 NVARCHAR(MAX),
@Name_f337eac6 NVARCHAR(500),
@Version_f337eac6 NVARCHAR(50),
@VersionSequence_f337eac6 INT,
@Title_f337eac6 NVARCHAR(1000),
@Description_f337eac6 NVARCHAR(MAX),
@Type_f337eac6 NVARCHAR(255),
@Status_f337eac6 NVARCHAR(50),
@DeveloperName_f337eac6 NVARCHAR(255),
@DeveloperEmail_f337eac6 NVARCHAR(255),
@DeveloperOrganization_f337eac6 NVARCHAR(255),
@SourceRegistryID_f337eac6 UNIQUEIDENTIFIER,
@ReplicatedAt_f337eac6 DATETIMEOFFSET,
@LastSyncedAt_f337eac6 DATETIMEOFFSET,
@Specification_f337eac6 NVARCHAR(MAX),
@FunctionalRequirements_f337eac6 NVARCHAR(MAX),
@TechnicalDesign_f337eac6 NVARCHAR(MAX),
@FunctionalRequirementsVector_f337eac6 NVARCHAR(MAX),
@TechnicalDesignVector_f337eac6 NVARCHAR(MAX),
@HasCustomProps_f337eac6 BIT,
@HasCustomEvents_f337eac6 BIT,
@RequiresData_f337eac6 BIT,
@DependencyCount_f337eac6 INT,
@TechnicalDesignVectorEmbeddingModelID_f337eac6 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_f337eac6 NVARCHAR(MAX),
@HasRequiredCustomProps_f337eac6 BIT,
@ID_f337eac6 UNIQUEIDENTIFIER
SET
  @Namespace_f337eac6 = N'CRM/Analytics'
SET
  @Name_f337eac6 = N'OverviewCards'
SET
  @Version_f337eac6 = N'1.0.0'
SET
  @VersionSequence_f337eac6 = 1
SET
  @Title_f337eac6 = N'Overview Cards'
SET
  @Description_f337eac6 = N'Overview cards showing win/loss summary metrics'
SET
  @Type_f337eac6 = N'Other'
SET
  @Status_f337eac6 = N'Deprecated'
SET
  @Specification_f337eac6 = N'{}'
SET
  @FunctionalRequirements_f337eac6 = N'## Overview Cards

### Purpose
Displays summary information in card format.

### Features
- Multiple metric cards
- Color-coded indicators
- Trend arrows
- Click actions'
SET
  @TechnicalDesign_f337eac6 = N'## Implementation

### Props
- cards: Array of card configurations
- onCardClick: Card click handler'
SET
  @FunctionalRequirementsVector_f337eac6 = N'[-0.05151059851050377,-0.027823524549603462,-0.03717657923698425,-0.004955667071044445,0.013597381301224232,0.04708975926041603,0.01926765963435173,0.06831236928701401,-0.01920303702354431,0.00804942287504673,0.012955895625054836,0.06935055553913116,0.03200170770287514,0.13386797904968262,-0.03104642778635025,-0.103378064930439,-0.012567085213959217,0.017916221171617508,-0.029670462012290955,0.01085734087973833,-0.032962944358587265,-0.009246323257684708,-0.004924891050904989,0.012130960822105408,-0.044534120708703995,-0.015747472643852234,-0.015256499871611595,-0.03814737871289253,0.01572343148291111,-0.10650942474603653,0.05419685319066048,0.033283937722444534,-0.02986411564052105,-0.026783745735883713,0.000002178415797970956,-0.02550327777862549,-0.0062909722328186035,0.002252081176266074,0.020572034642100334,0.0025431769900023937,0.037387266755104065,-0.08200746774673462,0.08021732419729233,-0.008757836185395718,0.03171370178461075,-0.10571552813053131,-0.009608916006982327,0.08162455260753632,-0.0025635226629674435,-0.048781704157590866,0.008722209371626377,-0.02030017040669918,-0.04764833673834801,-0.030416812747716904,0.008142635226249695,-0.004276522900909185,-0.0034564435482025146,0.05072970688343048,-0.00802627019584179,-0.02122485265135765,-0.011187737807631493,0.03546888753771782,0.01653931848704815,-0.01747143641114235,0.08377057313919067,0.027473444119095802,0.10306251049041748,-0.055085815489292145,0.017685193568468094,0.03484885022044182,0.0503055676817894,0.011827144771814346,-0.0009705271804705262,-0.05359814316034317,-0.019832884892821312,-0.08774817734956741,-0.04157384857535362,-0.010179225355386734,0.04149585962295532,-0.0423118993639946,-0.060951001942157745,0.061490848660469055,-0.03748738765716553,-0.02814500778913498,0.001810014364309609,-0.00180466054007411,-0.009850372560322285,0.005818885751068592,-0.02269957773387432,-0.004413815680891275,0.05313529819250107,0.004089700058102608,-0.025531725957989693,-0.026537112891674042,-0.04534502327442169,-0.01727474480867386,0.05701463669538498,-0.051778096705675125,0.06687486916780472,-0.0035018506459891796,0.05781789869070053,0.045940980315208435,0.024576889351010323,0.03606277331709862,0.0307854562997818,0.029811598360538483,0.015043986961245537,-0.06557967513799667,-0.06469805538654327,0.06132351607084274,-0.01898811385035515,-0.011240952648222446,0.005317959003150463,0.038871392607688904,-0.029165301471948624,0.013680635020136833,-0.05003940314054489,0.003621085314080119,-0.03317281976342201,0.000981156132183969,0.10294771939516068,-0.0005764537490904331,0.03512757644057274,0.030330952256917953,-0.024698592722415924,0.05913590267300606,-0.07612251490354538,-0.009551292285323143,0.0027305162511765957,0.07407497614622116,-0.01934175379574299,0.002684122882783413,-0.004165543243288994,-0.031155042350292206,-0.003823988838121295,-0.03673273324966431,0.02488027513027191,-0.05118928104639053,-0.016817385330796242,0.0033834667410701513,0.05252806097269058,-0.0003749580937437713,-0.009604637511074543,0.03232938051223755,0.01021722611039877,-0.0009965472854673862,0.02715831622481346,0.13012373447418213,-0.0019447860540822148,0.00019117904594168067,-0.018347520381212234,-0.003695929888635874,0.002712079556658864,0.03175763413310051,0.023073064163327217,0.009758791886270046,0.016839731484651566,0.008461453951895237,-0.0028476601000875235,0.029075274243950844,0.0024513257667422295,-0.045839399099349976,-0.01734219677746296,0.0013542830711230636,-0.03863157331943512,0.012275275774300098,-0.018407903611660004,-0.011026074178516865,-0.015407652594149113,-0.016822241246700287,-0.006859908811748028,-0.04385727643966675,-0.041145484894514084,0.02249174192547798,0.02294417843222618,0.03726409003138542,0.06521889567375183,-0.005398549139499664,-0.013121248222887516,-0.020352281630039215,0.002046791138127446,-0.1520569920539856,0.03346634656190872,0.040678463876247406,0.0345880463719368,0.023982038721442223,-0.024897314608097076,-0.0069938707165420055,-0.01320183277130127,-0.033864110708236694,-0.013088854029774666,-0.0256370697170496,-0.027132133021950722,-0.024929508566856384,-0.013294653035700321,-0.013216618448495865,-0.014850437641143799,-0.032600462436676025,0.002702668309211731,-0.0034694657661020756,-0.032795269042253494,-0.012817996554076672,0.04115752875804901,0.037739578634500504,0.03363671153783798,-0.005623501725494862,0.006554931867867708,-0.050996895879507065,-0.06810673326253891,0.014078417792916298,0.042083099484443665,0.018599817529320717,-0.06366442143917084,-0.016705559566617012,-0.032504912465810776,0.027156366035342216,0.020334959030151367,0.018298346549272537,-0.0420178547501564,0.02290513925254345,-0.046920713037252426,0.02226853184401989,-0.06365931034088135,0.008766593411564827,0.09526647627353668,0.01837860234081745,0.03536204621195793,0.009101086296141148,0.03462875261902809,0.009582104161381721,-0.005521781742572784,-0.03297816962003708,0.0413564033806324,-0.0015338719822466373,0.023410817608237267,0.014163524843752384,0.03489219397306442,0.06951852887868881,0.000961353478487581,-0.022983120754361153,-0.01988205499947071,-0.02627705968916416,-0.007754383608698845,0.0026229864452034235,0.02482953853905201,-0.055667486041784286,-0.01944834180176258,0.021731197834014893,0.009659811854362488,-0.005625459365546703,0.004374963231384754,0.06149488314986229,0.05475679039955139,-0.03517724573612213,-0.010281211696565151,0.05024545639753342,-0.035474661737680435,0.006535414606332779,-0.009819959290325642,0.07457782328128815,0.005946748424321413,-0.009338242933154106,-0.048623986542224884,0.001110445591621101,0.02085590735077858,-0.024289574474096298,0.035937003791332245,-0.004880734719336033,-0.029324064031243324,0.02585936151444912,0.023542307317256927,0.017440343275666237,-0.014172953553497791,-0.014258471317589283,0.00480094738304615,0.05173594132065773,-0.07763706892728806,-0.004166490398347378,-0.03963937610387802,0.004226223099976778,0.02594745345413685,-0.022450728341937065,0.008666370995342731,0.020452994853258133,-0.003919872455298901,0.02483769878745079,0.049396343529224396,-0.09833839535713196,0.01662265881896019,-0.08958248049020767,0.04054204374551773,-0.0346270315349102,0.029042923822999,-0.00910020899027586,-0.02978459745645523,-0.0014848976861685514,-0.05746966227889061,0.03527044504880905,0.015938475728034973,0.08822841197252274,-0.009135762229561806,0.027306407690048218,-0.03774126246571541,0.020043784752488136,-0.011873943731188774,0.05836576595902443,0.03708226978778839,-0.02857349067926407,0.028714487329125404,0.04429762065410614,0.02076147310435772,0.021852655336260796,-0.00171816220972687,-0.10117840021848679,0.013254200108349323,0.027507318183779716,-0.04656295105814934,-0.009669901803135872,0.014083943329751492,0.050707463175058365,0.04153456911444664,-0.012319426983594894,-0.04447520896792412,0.050704654306173325,-0.04274697229266167,-0.0268650334328413,-0.013818965293467045,0.004032177850604057,0.021703949198126793,0.0015206928364932537,0.03632301092147827,0.0067574381828308105,-0.0009799981489777565,0.014194580726325512,-0.08638706058263779,-0.028161363676190376,-0.006126700900495052,-0.05123278871178627,-0.00676683196797967,-0.0030932235531508923,-0.032749708741903305,0.01572120189666748,0.002756592584773898,0.013767755590379238,0.0030859229154884815,-0.012562913820147514,0.028579939156770706,-0.027225278317928314,-0.09459920972585678,0.04627787321805954,0.017935246229171753,0.006864041090011597,0.0033258595503866673,-0.02744358777999878,0.01854120008647442,-0.0010125011904165149,-0.006096092518419027,0.00488685816526413,-0.02713012509047985,-0.06132339686155319,0.009478039108216763,-0.02042567916214466,-0.017146550118923187,0.006996865384280682,-0.023658106103539467,0.031502217054367065,0.008659540675580502,0.009107515215873718,0.012872566469013691,-0.02280518226325512,-0.053725484758615494,0.02249271422624588,0.04195573180913925,0.0464712493121624,0.018073398619890213,-0.02338395081460476,0.0017575508682057261,0.02525762841105461,0.0043395585380494595,0.013075461611151695,0.02308957464993,-0.011179639957845211,0.05038034915924072,-0.04608553647994995,0.051831331104040146,-0.0316401906311512,0.0015541116008535028,0.008816806599497795,-0.05498401075601578,0.033089529722929,-0.007683790288865566,-0.05310758575797081,-0.07212080806493759,-0.013146684505045414,-0.03365521505475044,0.021614663302898407,-0.026534970849752426,0.014776681549847126,0.01736808754503727,-0.029346460476517677,0.015536860562860966,-0.0592086985707283,0.05016244947910309,-0.012410762719810009,0.051766205579042435,-0.0540863499045372,0.02826523594558239,0.05685025081038475,-0.028639206662774086,-0.04929907247424126,-0.04184505343437195,-0.022534487769007683,-0.012392770498991013,-0.0404483862221241,-0.0037348405458033085,-0.012580831535160542,-0.019365806132555008,0.02247796021401882,0.0255424827337265,0.03322211280465126,0.014222035184502602,0.021825164556503296,-0.010764704085886478,0.015025454573333263,-0.025953322649002075,-0.03474963828921318,0.027847180142998695,-0.05961133912205696,0.011371523141860962,-0.00034669137676246464,0.014017965644598007,0.01423824205994606,-0.029672866687178612,0.04783571884036064,-0.05259072408080101,0.031078947708010674,-0.035341836512088776,0.018976645544171333,-0.02524038963019848,0.005042837467044592,-0.002379318932071328,-0.011506885290145874,0.036642808467149734,-0.008874258026480675,-0.003296400187537074,0.009320528246462345,-0.011859098449349403,-0.009458644315600395,0.017883066087961197,-0.01252727024257183,-0.014763261191546917,-0.026215923950076103,-0.06368203461170197,0.028541645035147667,0.037191104143857956,-0.01485435664653778,0.0705023929476738,-0.022127680480480194,0.036277975887060165,-0.014120828360319138,0.08165255934000015,0.03414872661232948,-0.08336304128170013,-0.00008052353950915858,0.05575283244252205,-0.024061456322669983,0.03898804634809494,0.011426182463765144,0.0013655639486387372,-0.04269763082265854,0.019986333325505257,-0.010770824737846851,-0.034750137478113174,-0.01529055368155241,-0.009032880887389183,-0.03613034263253212,-0.005819081794470549,-0.07668041437864304,-0.011135993525385857,-0.043214038014411926,-0.021681038662791252,-0.004971254616975784,-0.026401462033391,-0.07300561666488647,-0.02918534353375435,0.02763785608112812,0.0013805062044411898,-0.014199831523001194,0.009603852406144142,0.01951821707189083,-0.012134015560150146,0.006163515150547028,-0.047814223915338516,0.0668826475739479,-0.009780188091099262,-0.018129833042621613,-0.0018383264541625977,-0.03194107487797737,-0.055857934057712555,-0.009412148967385292,-0.06135375425219536,-0.025415631011128426,-0.019963448867201805,-0.09105534851551056,-0.024626435711979866,0.0032062367536127567,0.04289449378848076,0.02932680770754814,0.0013030455447733402,0.02638409473001957,0.03272605314850807,-0.01396945770829916,0.0054254187270998955,0.02892826311290264,0.028636999428272247,0.02420266531407833,-0.021164944395422935,0.007133488077670336,-0.030310163274407387,-0.044729359447956085,0.00959826074540615,0.03882269561290741,0.02449040114879608,-0.007824661210179329,0.07278553396463394,0.027421684935688972,0.02439979650080204,-0.024797745048999786,0.010988324880599976,0.04080076143145561,-0.1074993908405304,0.025311648845672607,0.005702740512788296,0.013146587647497654,-0.03631467744708061,0.014395441859960556,0.06864586472511292,0.02328311651945114,-0.034406282007694244,-0.03574695810675621,-0.015136830508708954,0.018724307417869568,0.07652836292982101,0.015361354686319828,0.0024250680580735207,0.0044573270715773106,0.004498523660004139,-0.0594964362680912,0.039783310145139694,-0.028742270544171333,0.035431694239377975,-0.05530204996466637,-0.10242891311645508,0.05758928880095482,-0.030923858284950256,-7.091733908623844e-33,-0.05095690116286278,-0.01983252540230751,-0.02802925929427147,-0.05489105358719826,0.009732034057378769,-0.014317176304757595,0.011133936233818531,-0.01106608659029007,-0.01870303973555565,0.004256266634911299,-0.010306495241820812,-0.03930603712797165,0.015223132446408272,-0.009985997341573238,0.012788623571395874,0.028091805055737495,0.033353131264448166,-0.024359583854675293,0.028776222839951515,0.014531083405017853,-0.014627620577812195,-0.01740851253271103,-0.018366739153862,-0.0713050439953804,-0.02624177373945713,0.0063804578967392445,-0.017840716987848282,0.017035428434610367,0.0010205829748883843,0.024227870628237724,-0.007512628100812435,-0.06733637303113937,-0.03095591440796852,-0.006614926736801863,-0.005735259968787432,0.021046629175543785,-0.03359333425760269,-0.03189341351389885,0.0024110525846481323,0.02739732153713703,0.08889354020357132,-0.0073681725189089775,-0.018636584281921387,0.05344618111848831,-0.00782621931284666,-0.0003624624805524945,0.019164709374308586,-0.0013147675199434161,-0.03206348419189453,-0.02397431619465351,0.016551008448004723,0.018631095066666603,-0.020553937181830406,0.10497566312551498,-0.07475239783525467,0.02262151427567005,0.020880352705717087,0.002026223810389638,0.0017307499656453729,0.017881592735648155,0.06634502857923508,-0.019133402034640312,0.032501477748155594,0.04967827722430229,0.04842328652739525,0.052311692386865616,-0.02861921675503254,0.05768721178174019,0.03551872819662094,0.03764979913830757,-0.0018936244305223227,0.008077193982899189,0.007545857224613428,-0.052263468503952026,0.02652585692703724,0.0096001410856843,0.0012609780533239245,0.01774081587791443,0.025704752653837204,0.08310947567224503,0.04350873455405235,0.02336421236395836,-0.00037252562469802797,0.03015807271003723,0.00028383114840835333,-0.04038519784808159,-0.03513728454709053,0.027026886120438576,0.03815143182873726,0.05725706368684769,0.016871489584445953,0.06068240478634834,-0.04755312204360962,-0.00040607107803225517,-0.004484879318624735,-0.010288268327713013,0.05597468093037605,0.016412945464253426,-0.0005990760400891304,-0.03492303937673569,0.005118118599057198,-0.023419564589858055,0.01111599337309599,0.026723258197307587,-0.006058681756258011,0.01195216178894043,0.008086448535323143,-0.04225441813468933,-0.08491102606058121,-0.009577683173120022,0.03773003816604614,0.028998441994190216,-0.042486995458602905,-0.07395792007446289,-0.00585595378652215,0.0069478899240493774,-0.012294631451368332,0.01191081665456295,-0.02665853314101696,0.020379239693284035,0.02520713582634926,-0.027725007385015488,-0.024092869833111763,0.029602298513054848,0.05049039423465729,-0.038587287068367004,-0.03963745757937431,0.002583128632977605,0.07037221640348434,0.013271794654428959,0.017165975645184517,0.03233913332223892,2.977014617044915e-7,-0.0011709483806043863,0.05793646723031998,-0.03521725907921791,-0.010402618907392025,0.012092268094420433,-0.015869054943323135,-0.01374728512018919,-0.039585523307323456,-0.006025584880262613,0.036888085305690765,0.03819732740521431,0.013469074852764606,-0.010441239923238754,0.019502827897667885,0.012155890464782715,-0.008774463087320328,0.03372667729854584,-0.04237176850438118,-0.06314204633235931,0.018699675798416138,0.06830491125583649,0.023945162072777748,0.03369518369436264,0.028849512338638306,0.009130283258855343,-0.023738890886306763,-0.02731299214065075,-0.02940412238240242,-0.001152880722656846,-0.049784284085035324,0.004989359062165022,0.028092626482248306,-0.03170919790863991,0.0008250465034507215,0.01749822497367859,0.013742409646511078,-0.03757934644818306,-0.020099544897675514,0.04697516933083534,0.02050628326833248,0.013934804126620293,0.033786576241254807,-0.03425948694348335,-0.017748156562447548,0.0034769438207149506,-0.03151516616344452,0.03067970462143421,-0.01690029911696911,-0.06781590729951859,0.019402075558900833,0.012995172291994095,-0.023402677848935127,0.02021990902721882,0.006470249965786934,0.03591210022568703,-0.031214646995067596,0.015726925805211067,0.012103486806154251,0.03953339904546738,0.02372405305504799,0.009218566119670868,-0.05507461726665497,0.02337872050702572,0.06696374714374542,0.05617190897464752,-0.01959041692316532,-0.032798998057842255,3.4163064006049377e-34,0.021968306973576546,-0.03537935018539429,-0.0010336630512028933,0.007157253101468086,0.03334881365299225,-0.04431305453181267,-0.026904426515102386,-0.003941063769161701,0.05521295964717865,-0.0522947795689106,-0.0032202359288930893]'
SET
  @TechnicalDesignVector_f337eac6 = N'[-0.007876815274357796,-0.03111838921904564,-0.029570594429969788,-0.012332605198025703,0.022633766755461693,-0.017780380323529243,0.022143887355923653,0.04114903137087822,0.013730532489717007,-0.022017233073711395,0.011945124715566635,0.025421328842639923,0.06309042125940323,0.09129249304533005,0.05769065394997597,-0.006851457990705967,-0.002551926299929619,0.02940571866929531,-0.07597732543945312,0.00243086158297956,-0.010379078797996044,-0.00428582401946187,-0.004375629127025604,0.019680917263031006,0.029957370832562447,-0.04238974675536156,-0.007205897942185402,-0.04507264494895935,0.008168320171535015,-0.021921634674072266,0.021455109119415283,0.04251983389258385,-0.03057626262307167,-0.01076133456081152,0.0000012819233461414115,0.011929181404411793,0.020845657214522362,0.01207352802157402,0.014554147608578205,-0.01976906880736351,-0.029470134526491165,0.000413763482356444,0.05951353535056114,0.01432242151349783,0.01930946856737137,-0.12345753610134125,-0.047868818044662476,0.012630227021872997,-0.01644912362098694,-0.052131928503513336,-0.008851852267980576,-0.051498156040906906,0.03890605643391609,0.003971859812736511,0.04488518089056015,0.08042755722999573,-0.005328206345438957,-0.067942313849926,0.03834178298711777,-0.005418284330517054,0.027455458417534828,-0.019296757876873016,0.04295611009001732,-0.021540949121117592,0.03319264575839043,-0.02990374155342579,0.11162927746772766,0.036730676889419556,0.01569945737719536,0.021724093705415726,0.0666266605257988,0.019780447706580162,0.011389147490262985,-0.0028241111431270838,-0.01676027849316597,-0.041287679225206375,0.02596978098154068,-0.008284522220492363,-0.008665168657898903,-0.016368428245186806,0.010290124453604221,0.01098777074366808,-0.02096489630639553,-0.020884983241558075,0.06010091304779053,0.030791770666837692,-0.001598422066308558,0.018583666533231735,-0.03686530143022537,-0.0285356268286705,0.01925085298717022,0.0008972681243903935,0.014783156104385853,-0.03777753934264183,-0.03333508223295212,0.0414307564496994,0.009473953396081924,-0.08655165880918503,0.036201126873493195,-0.04528995230793953,0.057276804000139236,0.060507141053676605,-0.015215707942843437,-0.007050447165966034,0.05229762941598892,0.01825699210166931,0.00849988590925932,0.010949550196528435,-0.04926811531186104,0.027516942471265793,-0.034232765436172485,-0.012004820629954338,0.013400530442595482,0.06100592017173767,-0.0725567415356636,0.01686430349946022,-0.07369009405374527,-0.000820938206743449,0.015751931816339493,-0.010329336859285831,-0.00043373293010517955,-0.01840478740632534,0.003058144124224782,0.0035011200234293938,-0.009293383918702602,0.036532118916511536,0.00978934857994318,-0.10350813716650009,-0.014109714888036251,0.04935857653617859,0.01011932734400034,0.0012517274590209126,0.016612868756055832,0.0020035705529153347,-0.012267468497157097,-0.018663352355360985,-0.0041487920098006725,-0.032445766031742096,0.033653806895017624,0.04205283150076866,0.02554238773882389,0.012827602215111256,0.021776670590043068,0.02031637728214264,-0.013762641698122025,0.033315908163785934,0.01189432293176651,0.027071455493569374,-0.008525444194674492,0.044505681842565536,-0.002634539268910885,0.011271907016634941,0.02504337765276432,0.0034542896319180727,-0.020690592005848885,0.034350693225860596,-0.012451310642063618,0.0076898024417459965,0.03149626404047012,-0.057170651853084564,-0.005011844448745251,0.02354380115866661,0.07372917234897614,0.04286019131541252,-0.016074901446700096,0.01840464398264885,-0.06683699786663055,-0.04616345092654228,0.04181114584207535,-0.014408438466489315,-0.004723007790744305,-0.018323803320527077,-0.09363191574811935,0.029308568686246872,-0.01007392629981041,-0.03419988229870796,0.01682841032743454,0.009083125740289688,-0.00018083408940583467,-0.03269718214869499,0.006364156026393175,-0.030857684090733528,-0.01889512874186039,0.047500334680080414,0.0022001750767230988,0.006668491289019585,-0.024042177945375443,-0.00692759407684207,0.013355975970625877,-0.020871171727776527,-0.03657786175608635,-0.020810598507523537,-0.04110508784651756,-0.0668792650103569,-0.011281442828476429,-0.01456555724143982,-0.04346847161650658,0.005197916645556688,-0.015990018844604492,0.038182951509952545,0.019997725263237953,-0.02851041965186596,0.04822009429335594,0.022519906982779503,0.044205695390701294,0.014721785672008991,0.011557669378817081,-0.022218691185116768,-0.10336298495531082,-0.012195656076073647,-0.001928709913045168,0.016991890966892242,0.019740605726838112,0.021192297339439392,0.009091421030461788,-0.004134010523557663,-0.004343653563410044,0.01101574394851923,-0.044046930968761444,0.003485310822725296,-0.03026294708251953,-0.006027138326317072,0.022721676155924797,0.019111955538392067,0.09127279371023178,-0.04105934128165245,0.0008906115544959903,-0.029982032254338264,0.007023123558610678,-0.022329170256853104,0.004933143500238657,-0.03181588277220726,-0.0005385050317272544,0.005165337584912777,0.08693300187587738,0.00020970747573301196,-0.043433405458927155,-0.03446868807077408,0.011132883839309216,0.03283076733350754,-0.0421510674059391,0.04187566787004471,0.0007572929607704282,0.01542205922305584,0.017026841640472412,-0.01866087131202221,-0.03459954634308815,0.01198792178183794,-0.044440001249313354,-0.006257329136133194,0.008468132466077805,0.08330735564231873,-0.010188273154199123,-0.024863971397280693,0.013007057830691338,-0.03776976093649864,0.0717754140496254,0.009781702421605587,-0.001932853483594954,-0.010282067582011223,-0.007721027825027704,0.021818524226546288,-0.020749704912304878,0.00669099809601903,0.039347317069768906,0.00554942712187767,0.004426480270922184,-0.008812024258077145,-0.010458530858159065,-0.0006289062439464033,-0.016209442168474197,-0.005538520868867636,-0.01818533055484295,-0.013420242816209793,0.03228690102696419,0.04192366451025009,0.02305718883872032,0.03086918778717518,0.0006244245450943708,-0.008745137602090836,-0.019734149798750877,-0.04852720722556114,0.01852337457239628,0.021480316296219826,-0.022043708711862564,-0.0014096786035224795,-0.03859728202223778,-0.02356957271695137,0.014117606915533543,-0.14758358895778656,0.01643674261868,0.02511565014719963,0.021424302831292152,-0.04864449426531792,-0.011811894364655018,-0.010330871678888798,-0.046306364238262177,0.003365360898897052,-0.031129252165555954,-0.003972411621361971,0.014002596028149128,0.02115277759730816,-0.026453165337443352,-0.010148082859814167,0.015737563371658325,-0.019678223878145218,-0.03768492117524147,0.008734955452382565,0.04550328105688095,0.09630384296178818,-0.004221152979880571,0.07003973424434662,-0.0234221238642931,-0.06796417385339737,0.04114945977926254,0.0190263818949461,-0.014399697072803974,-0.044072479009628296,0.001767264329828322,0.008001361042261124,-0.009317578747868538,-0.04665038734674454,-0.0029823228251188993,-0.02166144736111164,-0.05068555101752281,-0.037071842700242996,0.07908753305673599,0.006913411896675825,0.10099158436059952,0.03780525177717209,0.02770387753844261,0.01373804546892643,0.03417952358722687,0.04069444164633751,-0.03427860885858536,-0.010556399822235107,0.003326945938169956,-0.04050571098923683,0.020987797528505325,0.027154572308063507,-0.01617937721312046,0.012011603452265263,-0.005180092994123697,0.01665474846959114,-0.014756196178495884,-0.029461277648806572,-0.03194969892501831,0.006946888752281666,-0.09675432741641998,0.021837953478097916,0.007068149279803038,0.02885991893708706,0.020097212865948677,0.0002689208777155727,-0.0068829720839858055,0.012921086512506008,0.036591265350580215,0.021101003512740135,-0.016644611954689026,-0.007274293340742588,0.022527998313307762,0.0239548496901989,0.0721474289894104,-0.022838057950139046,-0.04734223708510399,0.03405505418777466,0.04133760929107666,0.01201589871197939,0.01942424103617668,-0.032215602695941925,-0.04091168940067291,0.020351886749267578,0.004356583580374718,-0.01613905467092991,0.00021740685042459518,-0.018892690539360046,0.02202809974551201,0.015560091473162174,-0.0013789708027616143,0.0028532149735838175,0.05223710834980011,-0.03530142828822136,0.015978923067450523,-0.022332530468702316,0.021449625492095947,-0.026256904006004333,0.03116629831492901,-0.013715697452425957,-0.04646703600883484,0.017582276836037636,-0.0037594828754663467,-0.04978356882929802,-0.12225928902626038,0.0493912547826767,-0.015883632004261017,0.04660795256495476,0.025903411209583282,0.034545332193374634,0.04094982147216797,-0.022368885576725006,-0.029024433344602585,0.10178285837173462,0.07210638374090195,-0.027326548472046852,0.03276187926530838,-0.01593143492937088,-0.05596345290541649,0.004492206033319235,0.04269788786768913,-0.02764241211116314,-0.0506206750869751,-0.020115863531827927,-0.04311821982264519,-0.001255543204024434,-0.10470721870660782,-0.016930293291807175,0.021932758390903473,-0.03467129170894623,-0.011457881890237331,-0.02555953711271286,-0.05664028599858284,-0.018349139019846916,0.0037691285833716393,0.030286435037851334,0.04617941007018089,-0.03706883266568184,0.015400896780192852,-0.001295491703785956,-0.015081885270774364,-0.0403120182454586,0.014024741016328335,0.0359579436480999,0.01755347102880478,0.006334811449050903,-0.031259387731552124,-0.004664546810090542,-0.047095295041799545,0.049218837171792984,0.0876183733344078,-0.026901382952928543,0.07101035863161087,-0.02685566432774067,0.024944161996245384,-0.022682365030050278,0.01608196645975113,-0.011201892979443073,-0.018204806372523308,0.08700330555438995,0.05289052054286003,-0.020525597035884857,-0.034017834812402725,0.0029115641955286264,-0.10383761674165726,0.015332377515733242,0.0008717417949810624,-0.0476565845310688,0.09891737997531891,0.13273093104362488,-0.008725974708795547,0.011850389651954174,0.023426098749041557,0.027509741485118866,-0.038512177765369415,-0.023404045030474663,0.0359896719455719,-0.040728211402893066,0.035280779004096985,0.007452900521457195,-0.011788764037191868,0.012719637714326382,0.016688985750079155,-0.020613940432667732,-0.021246913820505142,0.03631316497921944,-0.01109550055116415,-0.009214750491082668,-0.019002724438905716,-0.04488309100270271,-0.01179034449160099,-0.03827110677957535,-0.03091241419315338,-0.006718841381371021,-0.07644621282815933,-0.03401262313127518,0.017243852838873863,-0.03595754876732826,-0.006973726209253073,0.03060447983443737,-0.006439668126404285,-0.024951379746198654,-0.026158247143030167,0.03525550290942192,-0.030611518770456314,-0.012858127243816853,0.03653719648718834,0.04308369755744934,0.049426283687353134,0.018308963626623154,0.03322058543562889,-0.06868945062160492,-0.031044257804751396,-0.035118840634822845,-0.013762431219220161,-0.03205849602818489,-0.036531612277030945,-0.04252990707755089,-0.013189141638576984,0.04138118401169777,-0.03285093605518341,-0.051996853202581406,-0.015306676737964153,-0.032732125371694565,-0.014368654228746891,0.04086333140730858,0.019774118438363075,0.07063105702400208,0.003719036001712084,0.003918582573533058,-0.018163904547691345,-0.04099729284644127,0.02995149977505207,0.029071712866425514,-0.020665615797042847,-0.002450475236400962,0.09088195115327835,0.05474729463458061,0.018729545176029205,0.02563564106822014,0.020347457379102707,-0.01364095788449049,-0.03387425094842911,0.04811486229300499,-0.024944650009274483,0.0230005644261837,0.024423494935035706,0.05056527256965637,-0.006722979713231325,0.049923256039619446,-0.034057263284921646,-0.04489908367395401,-0.03564561903476715,0.005047290585935116,0.05541384965181351,-0.010297921486198902,0.018081799149513245,-0.04254194721579552,0.04492617025971413,-0.057674769312143326,0.03935103863477707,-0.012390355579555035,0.02673194371163845,0.019955309107899666,-0.028212793171405792,0.018530242145061493,0.038224805146455765,-4.902249681916605e-33,-0.02281677909195423,0.008253386244177818,-0.00040710813482291996,-0.0057937270030379295,-0.011180175468325615,-0.014275875873863697,-0.045011602342128754,-0.019622987136244774,0.010751543566584587,-0.035929661244153976,0.0031115601304918528,-0.07996054738759995,-0.006012069061398506,0.017762117087841034,-0.0036393709015101194,-0.008331372402608395,0.010367347858846188,-0.021918952465057373,-0.0017592980293557048,0.003201127517968416,-0.005679755005985498,-0.027162199839949608,0.011853674426674843,-0.02381596900522709,-0.024381710216403008,-0.03896138444542885,-0.029003039002418518,0.03646647557616234,-0.06680308282375336,0.027755560353398323,-0.0533272847533226,0.002890069270506501,-0.054649122059345245,-0.06257934868335724,0.0399002805352211,0.0967085212469101,0.009290249086916447,-0.016754459589719772,0.040279094129800797,0.026968328282237053,0.06388011574745178,0.013752187602221966,-0.018855126574635506,0.013718889094889164,0.025659918785095215,-0.004975206218659878,-0.024022014811635017,0.01902160234749317,-0.013237843289971352,-0.005941435229033232,-0.011226153932511806,0.03474434092640877,0.008822346106171608,0.047384150326251984,-0.039315879344940186,-0.0391051284968853,0.04033955931663513,0.008458465337753296,-0.06025790423154831,-0.016087530180811882,-0.002804598305374384,-0.07116656750440598,0.04335499554872513,0.021041087806224823,0.033954232931137085,0.06341835856437683,0.022359387949109077,0.0006093536503612995,-0.02171836979687214,0.07033990323543549,-0.010399977676570415,-0.03448177129030228,0.03005216270685196,0.031112561002373695,0.057625848799943924,-0.018650058656930923,-0.031330887228250504,-0.01709611713886261,0.06325352936983109,0.007313658948987722,0.03984861820936203,0.057629477232694626,0.014190656132996082,0.021389594301581383,-0.05078794062137604,-0.09461785107851028,0.05918583646416664,0.0049118464812636375,-0.043155815452337265,0.03467516601085663,0.009871232323348522,0.06675148755311966,-0.0021642439533025026,0.047967053949832916,-0.00842834822833538,-0.01585162989795208,0.08129628002643585,0.05602014809846878,-0.025755714625120163,-0.017693275585770607,0.02367750182747841,-0.07835038006305695,-0.029238123446702957,-0.013585538603365421,-0.02366754226386547,0.02652185969054699,-0.010690703988075256,0.004247436299920082,-0.028615083545446396,0.022512247785925865,0.03117370791733265,0.025323329493403435,-0.044105492532253265,-0.011831045150756836,0.023913657292723656,0.016071617603302002,0.0012051474768668413,-0.07203806191682816,0.014785652048885822,0.07219939678907394,-0.030357135459780693,0.005980758462101221,-0.032951004803180695,0.03663310408592224,0.06291966885328293,0.011962922289967537,-0.06496313214302063,-0.03081955388188362,-0.004085815977305174,0.006020009517669678,0.052761469036340714,-0.0151276970282197,2.118535746831185e-7,-0.03988180309534073,0.012057351879775524,-0.06512141972780228,-0.11691965907812119,0.0007970124715939164,0.016164712607860565,0.005343166645616293,-0.05779261514544487,0.0033422992564737797,-0.08363986015319824,-0.020121196284890175,0.002600736217573285,0.02414684370160103,0.04592973738908768,-0.0875042974948883,-0.0001899388007586822,-0.006504660472273827,0.012069279327988625,-0.018184058368206024,0.037366755306720734,-0.0021497108973562717,0.025156887248158455,0.04806319996714592,0.0036999185103923082,0.014292524196207523,0.038567084819078445,0.01619577407836914,0.014434811659157276,-0.00009093479457078502,-0.04792614281177521,-0.052852313965559006,-0.027030134573578835,-0.02013510651886463,0.019963381811976433,0.012197923846542835,0.044049978256225586,-0.0011350014247000217,-0.001367631834000349,0.030503422021865845,0.03494575247168541,0.016697227954864502,0.008799838833510876,-0.025829004123806953,-0.04080292582511902,0.003987960983067751,-0.027825098484754562,-0.01369729544967413,0.03389951214194298,-0.0171454306691885,0.027519116178154945,-0.045330069959163666,-0.036033015698194504,0.016753461211919785,-0.008391098119318485,0.007470786105841398,-0.07012021541595459,-0.009825794957578182,0.017034398391842842,0.01132452767342329,0.0262935608625412,0.01585621014237404,-0.042808108031749725,0.018066098913550377,-0.017071163281798363,0.020667115226387978,-0.018317101523280144,-0.020245352759957314,2.084230003357131e-34,-0.01787681318819523,-0.0630112960934639,0.015561711974442005,-0.0010665424633771181,0.03868454322218895,-0.014154418371617794,0.07035313546657562,-0.01735226809978485,0.052830301225185394,-0.005847726948559284,-0.015990912914276123]'
SET
  @HasCustomProps_f337eac6 = 0
SET
  @HasCustomEvents_f337eac6 = 0
SET
  @RequiresData_f337eac6 = 0
SET
  @DependencyCount_f337eac6 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_f337eac6 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_f337eac6 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_f337eac6 = 0
SET
  @ID_f337eac6 = '2D19BF47-4E7A-4AA1-B2B9-60501E059A52'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_f337eac6,
  @Name = @Name_f337eac6,
  @Version = @Version_f337eac6,
  @VersionSequence = @VersionSequence_f337eac6,
  @Title = @Title_f337eac6,
  @Description = @Description_f337eac6,
  @Type = @Type_f337eac6,
  @Status = @Status_f337eac6,
  @DeveloperName = @DeveloperName_f337eac6,
  @DeveloperEmail = @DeveloperEmail_f337eac6,
  @DeveloperOrganization = @DeveloperOrganization_f337eac6,
  @SourceRegistryID = @SourceRegistryID_f337eac6,
  @ReplicatedAt = @ReplicatedAt_f337eac6,
  @LastSyncedAt = @LastSyncedAt_f337eac6,
  @Specification = @Specification_f337eac6,
  @FunctionalRequirements = @FunctionalRequirements_f337eac6,
  @TechnicalDesign = @TechnicalDesign_f337eac6,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_f337eac6,
  @TechnicalDesignVector = @TechnicalDesignVector_f337eac6,
  @HasCustomProps = @HasCustomProps_f337eac6,
  @HasCustomEvents = @HasCustomEvents_f337eac6,
  @RequiresData = @RequiresData_f337eac6,
  @DependencyCount = @DependencyCount_f337eac6,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_f337eac6,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_f337eac6,
  @HasRequiredCustomProps = @HasRequiredCustomProps_f337eac6,
  @ID = @ID_f337eac6;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_fb2aee44 NVARCHAR(MAX),
@Name_fb2aee44 NVARCHAR(500),
@Version_fb2aee44 NVARCHAR(50),
@VersionSequence_fb2aee44 INT,
@Title_fb2aee44 NVARCHAR(1000),
@Description_fb2aee44 NVARCHAR(MAX),
@Type_fb2aee44 NVARCHAR(255),
@Status_fb2aee44 NVARCHAR(50),
@DeveloperName_fb2aee44 NVARCHAR(255),
@DeveloperEmail_fb2aee44 NVARCHAR(255),
@DeveloperOrganization_fb2aee44 NVARCHAR(255),
@SourceRegistryID_fb2aee44 UNIQUEIDENTIFIER,
@ReplicatedAt_fb2aee44 DATETIMEOFFSET,
@LastSyncedAt_fb2aee44 DATETIMEOFFSET,
@Specification_fb2aee44 NVARCHAR(MAX),
@FunctionalRequirements_fb2aee44 NVARCHAR(MAX),
@TechnicalDesign_fb2aee44 NVARCHAR(MAX),
@FunctionalRequirementsVector_fb2aee44 NVARCHAR(MAX),
@TechnicalDesignVector_fb2aee44 NVARCHAR(MAX),
@HasCustomProps_fb2aee44 BIT,
@HasCustomEvents_fb2aee44 BIT,
@RequiresData_fb2aee44 BIT,
@DependencyCount_fb2aee44 INT,
@TechnicalDesignVectorEmbeddingModelID_fb2aee44 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_fb2aee44 NVARCHAR(MAX),
@HasRequiredCustomProps_fb2aee44 BIT,
@ID_fb2aee44 UNIQUEIDENTIFIER
SET
  @Namespace_fb2aee44 = N'CRM/Analytics'
SET
  @Name_fb2aee44 = N'WinRateByOwner'
SET
  @Version_fb2aee44 = N'1.0.0'
SET
  @VersionSequence_fb2aee44 = 1
SET
  @Title_fb2aee44 = N'Win Rate By Owner'
SET
  @Description_fb2aee44 = N'Chart showing win rates by deal owner'
SET
  @Type_fb2aee44 = N'Chart'
SET
  @Status_fb2aee44 = N'Deprecated'
SET
  @Specification_fb2aee44 = N'{}'
SET
  @FunctionalRequirements_fb2aee44 = N'## Win Rate By Owner

### Purpose
Visualize win rates by deal owner/sales rep.

### Features
- Bar chart visualization
- Owner performance comparison
- Win/loss ratios
- Sortable by metrics'
SET
  @TechnicalDesign_fb2aee44 = N'## Implementation

### Props
- ownerData: Array of owner performance metrics
- sortBy: Sort field
- onOwnerClick: Owner selection handler'
SET
  @FunctionalRequirementsVector_fb2aee44 = N'[-0.03812288120388985,0.050292275846004486,-0.027070892974734306,0.004236504435539246,0.007630296051502228,-0.009902616031467915,-0.01650252752006054,-0.014731167815625668,-0.04729238152503967,-0.020501112565398216,-0.05802654102444649,0.013544626533985138,0.016980087384581566,0.14380395412445068,-0.010601316578686237,-0.028615573421120644,-0.04100910201668739,0.018243925645947456,0.06649719923734665,0.0026844502426683903,0.011775800958275795,-0.009498477913439274,-0.018746836110949516,-0.0006750606116838753,-0.041967492550611496,0.014347297139465809,-0.01641278900206089,0.0017469694139435887,0.016527827829122543,-0.11633197218179703,0.018485812470316887,0.0010752647649496794,-0.02343212254345417,-0.0014280128525570035,0.000002191828343711677,-0.04290711507201195,-0.04920515790581703,0.018506193533539772,0.0032259905710816383,0.07533250004053116,0.10184599459171295,0.014263017103075981,0.01936410553753376,0.004336478654295206,-0.03351331502199173,-0.02801026590168476,-0.02370486781001091,0.037176478654146194,0.016892297193408012,0.014018036425113678,0.005122435744851828,0.04519420489668846,-0.030345428735017776,-0.028794754296541214,0.003345942124724388,-0.08392023295164108,-0.012860278598964214,0.02795443870127201,-0.01660659909248352,-0.08858051151037216,-0.06815754622220993,0.011257809586822987,0.005882237572222948,-0.009595273993909359,0.06421862542629242,0.02944408543407917,0.04502306878566742,0.00016648047312628478,-0.036704592406749725,-0.003320559859275818,0.05974990874528885,0.03950474038720131,0.010830383747816086,-0.055291809141635895,0.013893133029341698,-0.057292189449071884,-0.006529445294290781,0.06669141352176666,0.023457951843738556,-0.0001846779341576621,-0.1203048825263977,0.11675505340099335,-0.025507472455501556,-0.011127262376248837,-0.010448452085256577,-0.004376925062388182,-0.010664478875696659,0.016939137130975723,-0.01249051745980978,0.018061310052871704,0.008412937633693218,-0.018869493156671524,-0.025828609243035316,-0.007899814285337925,-0.048790931701660156,-0.009619333781301975,0.042924486100673676,0.050246335566043854,0.026666715741157532,-0.07660720497369766,0.014231957495212555,-0.010832453146576881,0.0037860258016735315,-0.007666565477848053,0.0008748782565817237,-0.0307945366948843,0.011046341620385647,-0.024319421499967575,-0.011158082634210587,0.029622068628668785,0.00568263977766037,-0.009343691170215607,0.03990023583173752,0.007994908839464188,-0.00618761545047164,0.007273857947438955,-0.08469834178686142,-0.024395480751991272,-0.01100032776594162,0.03487926721572876,0.09429294615983963,0.0033276225440204144,0.04487528279423714,0.024049559608101845,-0.02298167161643505,-0.029418248683214188,-0.047803785651922226,0.0013527036644518375,0.009328906424343586,0.016426047310233116,0.026619426906108856,-0.0037381143774837255,-0.017362946644425392,-0.05595841631293297,0.01421448029577732,-0.009681961499154568,0.022410156205296516,-0.0009249660652130842,-0.011980713345110416,0.0014400689397007227,0.013726511038839817,0.007086671888828278,-0.07017727941274643,-0.02233240380883217,-0.005008370149880648,-0.04382907971739769,0.001022500335238874,0.010344188660383224,-0.013135349377989769,0.0040291245095431805,-0.01325049065053463,-0.007531026843935251,-0.06580504029989243,0.014504004269838333,0.008704587817192078,-0.013101067394018173,0.007653292268514633,-0.015598686411976814,0.04210013151168823,0.05151573568582535,0.018335461616516113,-0.018519677221775055,-0.017167869955301285,-0.012875908985733986,-0.015109687112271786,0.018664909526705742,-0.006643868517130613,-0.005804979708045721,0.005324663128703833,-0.03488781303167343,0.013841917738318443,-0.038310687988996506,-0.04037414863705635,-0.009861917234957218,0.058844611048698425,-0.004202086478471756,0.07571300864219666,0.016338519752025604,-0.04775496944785118,-0.01489934604614973,-0.028740402311086655,-0.14169926941394806,-0.0028804924804717302,0.006975463125854731,0.05881686136126518,-0.007977301254868507,-0.051230285316705704,0.015271475538611412,0.007018814329057932,0.022390495985746384,0.024679142981767654,0.02666274644434452,-0.025276130065321922,0.055915020406246185,-0.01725388690829277,-0.0007727665361016989,0.022485923022031784,-0.013875188305974007,0.023061957210302353,-0.0027629220858216286,-0.025330904871225357,-0.031526386737823486,-0.0000660490695736371,0.009308424778282642,-0.0038805841468274593,0.0028555935714393854,0.05613282322883606,0.004578497260808945,-0.05540230870246887,-0.008915554732084274,0.059796564280986786,0.03258867561817169,-0.006025881972163916,0.005156412720680237,-0.02320064976811409,0.018704451620578766,0.01478532049804926,0.031214876100420952,-0.06088176742196083,0.009350496344268322,-0.0022710170596837997,0.031624823808670044,-0.04851849749684334,-0.0027989386580884457,0.12046970427036285,0.0048324731178581715,0.005381166469305754,-0.027518372982740402,-0.019194088876247406,0.004507326986640692,0.004444113001227379,-0.015019911341369152,0.03856239467859268,0.02027936652302742,-0.016106463968753815,0.015615885145962238,0.06207524612545967,0.03506584092974663,-0.0017833648016676307,-0.0011083297431468964,-0.0032493905164301395,-0.046959951519966125,-0.036152925342321396,0.014332657679915428,-0.010559446178376675,-0.06660080701112747,-0.042709920555353165,0.011090144515037537,-0.007199023384600878,0.02367173507809639,0.0013920930214226246,-0.007193561643362045,0.0732642337679863,-0.008902286179363728,-0.0006675844779238105,0.02403155341744423,-0.09052664786577225,0.0066489577293396,-0.021681047976017,0.07286257296800613,0.016969487071037292,-0.021289173513650894,-0.016690803691744804,-0.018785709515213966,0.04174168035387993,-0.02549951709806919,0.08026989549398422,-0.03129174932837486,0.013230795972049236,0.01602010801434517,0.03302330896258354,0.0024028641637414694,0.006459953263401985,-0.02669084258377552,-0.01321736816316843,0.038107678294181824,-0.08818412572145462,-0.00827822182327509,-0.015549217350780964,0.025433678179979324,-0.003615964436903596,-0.05765862762928009,-0.03041684813797474,-0.005598395597189665,-0.005959935020655394,-0.03243347257375717,0.026834260672330856,0.05342083424329758,-0.05941437929868698,-0.040899112820625305,-0.00019402828183956444,-0.022498058155179024,0.028370223939418793,-0.0014745841035619378,-0.022278761491179466,0.016470422968268394,-0.0794561356306076,0.033604513853788376,-0.025617221370339394,0.0815994143486023,0.0024280238430947065,-0.04764113202691078,-0.0307961106300354,-0.004661049228161573,0.0091348085552454,-0.020728038623929024,0.01116245798766613,-0.028041653335094452,0.014224251732230186,0.05804266408085823,0.03630013018846512,0.018309835344552994,-0.0007849074900150299,-0.0406988300383091,0.01647322066128254,-0.03017953224480152,-0.014838076196610928,0.0493883416056633,-0.025863543152809143,0.06799772381782532,0.02767825499176979,-0.02135470323264599,-0.020539777353405952,0.010788939893245697,-0.016581162810325623,0.02631039172410965,-0.03080597147345543,-0.031048104166984558,-0.02344670705497265,0.014923539943993092,-0.022510917857289314,-0.04765671119093895,-0.04586268216371536,-0.012409932911396027,-0.02256051078438759,0.06011192873120308,-0.015211610123515129,-0.013288578949868679,0.014380334876477718,-0.038114000111818314,-0.02130180411040783,0.011075473390519619,0.006159255746752024,-0.07905600965023041,0.005421720445156097,-0.05418480932712555,0.11819102615118027,-0.007277469616383314,-0.04733188450336456,0.0006664821412414312,0.07143197953701019,-0.03795432299375534,-0.012238528579473495,-0.04997154697775841,0.02957991138100624,0.04118505120277405,-0.01570068672299385,-0.013413121923804283,0.03131590783596039,-0.05981534719467163,-0.007107474375516176,0.035547178238630295,0.013624241575598717,0.07026071846485138,-0.0005626772763207555,0.041934944689273834,-0.000744205026421696,-0.01661614328622818,0.03424564003944397,-0.02072698436677456,-0.010136263445019722,0.005500181578099728,0.0830635353922844,0.0159013569355011,0.016866125166416168,0.017052853479981422,0.03277069330215454,-0.0016896745655685663,0.05688594654202461,-0.01601438596844673,0.029626356437802315,-0.047299034893512726,0.07949726283550262,-0.04341932013630867,0.05501796677708626,-0.0007832063711248338,-0.046410612761974335,-0.007521941792219877,-0.04219755530357361,-0.01899533160030842,-0.01022437121719122,0.010365284979343414,0.002952583134174347,-0.025570863857865334,-0.019935043528676033,-0.08564496785402298,-0.06723929941654205,0.031806960701942444,-0.027500472962856293,0.016473928466439247,0.010983453132212162,0.016103653237223625,0.09104107320308685,0.0007600620738230646,-0.023690564557909966,-0.057198431342840195,0.06843150407075882,0.050481099635362625,0.006609885487705469,0.029833244159817696,-0.10514097660779953,0.013767441734671593,0.01236949022859335,0.002879114355891943,0.10097676515579224,-0.03916221857070923,0.0071406010538339615,-0.01582842506468296,-0.001253308611921966,0.048676926642656326,0.07606524229049683,0.0602424181997776,0.017069006338715553,0.035685062408447266,-0.009408336132764816,0.029868945479393005,-0.01628151535987854,-0.027773773297667503,0.00028734718216583133,0.03622671961784363,-0.007026928011327982,0.03802108019590378,-0.029161840677261353,0.019414542242884636,-0.007610323838889599,-0.10539735853672028,-0.014913594350218773,0.07126530259847641,0.015598492696881294,-0.02190551348030567,-0.05746027082204819,0.0036458123940974474,0.010390606708824635,-0.025196420028805733,0.01791803166270256,-0.05724447965621948,0.002973779570311308,-0.02744031697511673,-0.028889456763863564,-0.05099160224199295,-0.0019172625616192818,-0.012733408249914646,0.05090079829096794,0.0417603924870491,-0.006673374678939581,-0.010103580541908741,-0.02801121398806572,-0.01597648859024048,0.008674566633999348,-0.028260335326194763,0.07396954298019409,0.02385040745139122,-0.06211521103978157,0.03561771288514137,-0.014214573428034782,-0.08715274930000305,-0.022596823051571846,-0.04879622533917427,-0.014544932171702385,-0.02430116757750511,0.00314914807677269,-0.005656829569488764,-0.009947015903890133,0.012983809225261211,0.032629065215587616,0.004109105560928583,-0.02313445881009102,0.050145938992500305,0.09331417083740234,0.006590815726667643,-0.022296741604804993,0.032947566360235214,-0.01583102159202099,-0.08110030740499496,0.016256244853138924,0.016506414860486984,-0.03418103978037834,0.038453858345746994,0.00003685828414745629,0.00684703141450882,0.023033233359456062,-0.028688624501228333,-0.03706890344619751,0.05034715309739113,0.02316783368587494,0.0061643910594284534,-0.03024381771683693,0.013165490701794624,0.0008540862472727895,0.0021848941687494516,-0.01791004277765751,0.027514617890119553,0.005286048166453838,-0.008363963104784489,0.01629374921321869,0.06361137330532074,0.03591788560152054,-0.03767573833465576,-0.000858581333886832,-0.03440360352396965,0.061222244054079056,0.006675757002085447,0.03883107751607895,-0.06194571778178215,0.06872975081205368,-0.0015960856107994914,0.008175574243068695,-0.006913057528436184,0.02010555937886238,0.00005783631786471233,0.027561703696846962,0.002445099875330925,-0.01345511432737112,-0.0320398285984993,0.08508787304162979,-0.08381155133247375,0.023341845721006393,-0.012459845282137394,0.009119591675698757,0.050665467977523804,0.058227743953466415,-0.02313961088657379,-0.0537339486181736,0.028082916513085365,0.006258189212530851,0.05722634866833687,0.08105722069740295,0.03385600075125694,-0.029313471168279648,-0.039788439869880676,-0.04583043232560158,0.011908430606126785,-0.005096543580293655,-0.016720514744520187,0.04613109305500984,0.003940919879823923,0.013616228476166725,-0.03668787702918053,-0.02619258314371109,0.040688011795282364,0.010048391297459602,-0.020329462364315987,0.0027293518651276827,-0.005893387366086245,-0.04810649901628494,-6.858116161341423e-33,-0.022512316703796387,-0.05410756170749664,-0.01529019232839346,-0.01603475958108902,-0.0007722924929112196,-0.07383671402931213,0.023686787113547325,-0.015938913449645042,0.007430391386151314,0.029053684324026108,-0.043699972331523895,-0.013141581788659096,0.032567765563726425,0.0077753253281116486,0.05346480384469032,-0.00595161784440279,0.025450585409998894,-0.004963394720107317,-0.00007046434620860964,0.008157925680279732,-0.04178481176495552,0.06321195513010025,0.027116835117340088,-0.06887651234865189,-0.03522557020187378,0.02704295888543129,-0.019061211496591568,0.008475570939481258,-0.005916460417211056,-0.026445217430591583,0.021892255172133446,-0.008148636668920517,-0.00710297841578722,-0.032266486436128616,0.017432531341910362,-0.04735863581299782,0.029063651338219643,-0.029897227883338928,0.015028921887278557,0.017200272530317307,0.0723133385181427,0.031490009278059006,0.03281655162572861,0.01208059024065733,0.02734457701444626,-0.037528570741415024,0.04976736754179001,-0.003473574062809348,-0.008361882530152798,0.019633585587143898,0.023787276819348335,0.03144470229744911,-0.015628673136234283,0.005618244409561157,0.0496804341673851,0.02809419482946396,0.01933860220015049,0.016733258962631226,-0.04697882756590843,-0.0036857742816209793,-0.034213852137327194,0.008455708622932434,0.0028488587122410536,0.02179465815424919,-0.005606879014521837,0.024273118004202843,-0.012688057497143745,0.04247207194566727,0.04117927327752113,-0.0548287034034729,-0.032980430871248245,0.05727412551641464,-0.022333690896630287,-0.05604701489210129,0.007185602094978094,0.05916924774646759,0.014614780433475971,0.024087127298116684,0.04555493965744972,-0.01224588043987751,-0.04122801125049591,0.015086732804775238,-0.03388979285955429,0.030866242945194244,0.025400981307029724,-0.04632052779197693,-0.003572715213522315,-0.047086965292692184,0.035936761647462845,-0.015128779225051403,0.0002703779609873891,0.048338305205106735,-0.028570592403411865,0.018197041004896164,-0.08935632556676865,-0.020767683163285255,0.05578577518463135,0.05040035396814346,-0.04371558502316475,-0.047177936881780624,0.007259257137775421,0.06742741912603378,-0.012730566784739494,-0.01818511262536049,0.009126849472522736,0.016547035425901413,0.013945185579359531,-0.03505190461874008,-0.025102509185671806,-0.0016467528184875846,0.033031731843948364,-0.014855783432722092,-0.038070257753133774,-0.010548857972025871,-0.022926101461052895,-0.014710008166730404,-0.016003955155611038,0.00040052528493106365,0.006658099126070738,0.013499352149665356,0.0008902290719561279,0.01406188029795885,-0.02824404649436474,-0.027199696749448776,0.04240997135639191,-0.01389868464320898,0.005719680339097977,-0.027371473610401154,0.0033003664575517178,-0.010807683691382408,-0.030535195022821426,-0.08192990720272064,3.0034837550374505e-7,0.03821267932653427,0.04436170309782028,-0.03709767386317253,0.02994406223297119,-0.03920987620949745,0.025676997378468513,-0.010146061889827251,0.013988908380270004,0.0009762358968146145,-0.07550064474344254,0.03993598371744156,0.010904739610850811,0.035893164575099945,0.027258101850748062,0.017661623656749725,-0.0656726062297821,0.004710920620709658,-0.05743483453989029,-0.018579838797450066,-0.03858756273984909,0.056567803025245667,0.015847597271203995,0.056486304849386215,0.006391039118170738,0.04316285252571106,0.062303025275468826,-0.015027926303446293,-0.04878324270248413,-0.009980697184801102,0.03134727478027344,0.0026229191571474075,-0.05776417627930641,-0.0768476352095604,-0.008170663379132748,-0.008280056528747082,0.03022831864655018,0.0002899692626670003,-0.04919378459453583,0.0309581495821476,0.01687580719590187,-0.027170507237315178,-0.009584439918398857,-0.016351131722331047,0.0033840842079371214,-0.008380274288356304,-0.07057848572731018,-0.008669351227581501,0.00863922480493784,-0.06737568974494934,0.00354826170951128,0.03540968894958496,-0.01906445063650608,0.011185325682163239,0.025149907916784286,0.007788155693560839,0.017507964745163918,-0.007624378893524408,0.03376000002026558,0.0025714931543916464,0.007400995586067438,0.01334851048886776,0.005195640493184328,-0.00800890289247036,0.02962535433471203,0.010986590757966042,0.00968099758028984,-0.019218996167182922,2.9259953090849803e-34,0.008063633926212788,-0.007872680202126503,0.018891863524913788,0.0551394447684288,0.0432889461517334,-0.018065284937620163,-0.030242644250392914,-0.017601031810045242,-0.00017482071416452527,0.0006210710853338242,-0.0070508746430277824]'
SET
  @TechnicalDesignVector_fb2aee44 = N'[-0.010903800837695599,0.06901761889457703,-0.017576344311237335,-0.0116586210206151,0.011754415929317474,-0.03353755176067352,0.014884642325341702,0.027833711355924606,0.022655582055449486,-0.034387167543172836,-0.017571361735463142,0.027550702914595604,0.034739114344120026,0.006500659044831991,-0.014193224720656872,-0.013338671997189522,-0.022708486765623093,0.03308756276965141,-0.0419282428920269,-0.028055576607584953,0.009484208188951015,-0.05383859947323799,-0.021029312163591385,0.008597793988883495,0.03686137869954109,0.0002998037380166352,0.04239673912525177,-0.05606114864349365,0.048403799533843994,-0.04112771525979042,-0.020111264660954475,0.06598205864429474,-0.01879672147333622,0.044445350766181946,0.0000015720244164185715,-0.024569232016801834,0.020721765235066414,0.0616430789232254,0.025869041681289673,-0.02393924444913864,0.08535011857748032,0.0607566274702549,0.006912332493811846,0.004273178055882454,0.009812045842409134,-0.05412883684039116,-0.03918933495879173,0.02766249142587185,0.00100138655398041,-0.007323163561522961,0.02037162333726883,0.014203268103301525,0.05491034686565399,-0.004571673460304737,0.06304193288087845,0.05347868427634239,-0.02458892948925495,-0.04057607054710388,0.059493329375982285,0.0174157302826643,-0.016877103596925735,-0.029349511489272118,0.03014550730586052,-0.01918322592973709,0.04510961100459099,-0.026660535484552383,0.036859504878520966,0.0010977439815178514,0.004391329828649759,0.03245266526937485,0.1263284534215927,0.04939546808600426,0.01633622497320175,0.012084032408893108,-0.01661914400756359,0.0016065692761912942,0.01697709783911705,-0.013465155847370625,-0.021175185218453407,0.0185485128313303,-0.008270448073744774,0.05857992544770241,-0.04185003414750099,0.002152965636923909,0.0066665224730968475,0.09103498607873917,-0.022244591265916824,0.008374405093491077,-0.029871569946408272,-0.026963163167238235,0.0557599775493145,0.009893078356981277,0.04592868685722351,-0.026993457227945328,-0.0107350405305624,-0.033138878643512726,0.02530849352478981,-0.0703732967376709,0.02676844596862793,-0.11931411921977997,0.006687454879283905,0.0197127815335989,-0.044990528374910355,-0.0064669945277273655,0.03296535089612007,0.04282362759113312,0.016030900180339813,0.012544576078653336,-0.006191874388605356,-0.013471203856170177,-0.042386118322610855,0.0024846859741955996,0.06225615739822388,0.018901992589235306,-0.004938523750752211,0.033931512385606766,-0.08714307844638824,-0.031037012115120888,-0.007444464135915041,0.019529713317751884,0.01397868525236845,-0.03464095667004585,0.032516930252313614,0.005638163536787033,-0.018432535231113434,-0.03370869532227516,0.0023211746010929346,-0.08833444118499756,-0.006506161764264107,0.021165205165743828,0.04573456197977066,-0.030835002660751343,0.03658246994018555,-0.00820786040276289,-0.040639445185661316,0.03428502380847931,0.0034703705459833145,-0.034634944051504135,0.023300034925341606,0.0018823265563696623,0.008205797523260117,0.031005246564745903,-0.027898751199245453,0.046034298837184906,-0.005008093547075987,0.020320042967796326,0.02208109200000763,-0.06456121802330017,-0.009600818157196045,0.023414496332406998,-0.017665935680270195,-0.018094748258590698,-0.03191100060939789,0.015894781798124313,-0.021816357970237732,0.01661291904747486,-0.04974761977791786,-0.020686037838459015,0.03965931013226509,-0.008648056536912918,0.0008972047362476587,0.039909712970256805,0.032478854060173035,-0.004133709706366062,-0.07731921970844269,0.012498563155531883,-0.07867235690355301,-0.04813874885439873,-0.07542779296636581,0.00903963204473257,0.026465509086847305,-0.018530823290348053,-0.039183784276247025,0.019075358286499977,0.028378527611494064,0.0001430574047844857,0.02759343758225441,0.005349967163056135,-0.06455771625041962,0.04038974642753601,-0.016497785225510597,-0.02993849106132984,-0.0008989918860606849,0.01767413318157196,0.0298264529556036,-0.06052635610103607,-0.01034784410148859,0.025757525116205215,0.055772531777620316,0.007928667590022087,0.0023152614012360573,-0.015673335641622543,-0.05415893346071243,0.012558436952531338,0.0028050716500729322,-0.03265390917658806,0.02790685184299946,-0.019939923658967018,0.020056020468473434,0.010206861421465874,0.031673189252614975,-0.02235618606209755,0.01014675386250019,0.07326637208461761,-0.005749638192355633,-0.019301436841487885,0.002506058430299163,0.03166842833161354,-0.0146297262981534,-0.08232294768095016,-0.006465045735239983,0.006072023883461952,-0.028702054172754288,0.02352430671453476,0.005946924444288015,0.038696493953466415,-0.013446717523038387,0.03155161067843437,-0.0817146822810173,0.0011465795105323195,0.02388348989188671,-0.026086797937750816,-0.032946374267339706,0.0005946006858721375,0.12092702835798264,0.0045664445497095585,0.008426239714026451,-0.04700757563114166,-0.02936120145022869,-0.02608105167746544,-0.011788933537900448,0.0034614969044923782,-0.0038339728489518166,0.022840021178126335,0.04355583339929581,0.016143066808581352,0.010626882314682007,0.007335234899073839,-0.015506494790315628,0.08546783030033112,0.003722972236573696,0.04446062445640564,-0.04429440572857857,0.03730057179927826,-0.012919623404741287,0.013338160701096058,-0.0879487693309784,0.0022835417184978724,-0.027191568166017532,0.025792038068175316,-0.015097045339643955,0.03576037287712097,0.02794906310737133,-0.0109983766451478,-0.012885810807347298,-0.03459463268518448,0.09413811564445496,-0.005724211223423481,-0.036176666617393494,0.013079185038805008,0.016981786116957664,0.00882385578006506,0.002874195110052824,0.012537423521280289,0.023909807205200195,0.008524312637746334,0.012182976119220257,-0.030187470838427544,-0.007426164578646421,0.01789604127407074,-0.017304474487900734,-0.04589596763253212,0.03497804328799248,0.005923515651375055,0.03792509436607361,0.01882612146437168,-0.004409341141581535,0.056989822536706924,-0.007868506945669651,-0.024165499955415726,-0.03562149778008461,-0.04096756875514984,-0.0008797756163403392,0.020521113649010658,-0.053246669471263885,-0.018213054165244102,-0.011371025815606117,0.08423663675785065,0.015138007700443268,-0.11334085464477539,-0.0424162857234478,0.0555206723511219,0.03384654223918915,0.004664973821491003,-0.0027767731808125973,-0.007618088740855455,-0.06643306463956833,0.07026750594377518,0.024620208889245987,0.06616335362195969,0.028602616861462593,0.02509125880897045,-0.014131405390799046,-0.023493850603699684,0.0343204028904438,-0.008138986304402351,-0.0030551098752766848,0.020872192457318306,0.05004033446311951,0.042089883238077164,-0.02843548357486725,0.018495282158255577,-0.041246190667152405,-0.022761432453989983,-0.03142274171113968,0.022747967392206192,0.02771371603012085,-0.029049040749669075,-0.03071269765496254,0.06436250358819962,-0.025298092514276505,-0.014662111178040504,0.0362418070435524,-0.018505524843931198,-0.010959922336041927,0.005269272718578577,0.012920640408992767,-0.009829471819102764,0.06391890347003937,0.04945218563079834,0.04047563299536705,-0.06459909677505493,0.02867266908288002,0.03662222623825073,0.004279755521565676,0.03080885484814644,-0.016268277540802956,-0.026517489925026894,0.013892264105379581,0.008701079525053501,0.007143719587475061,-0.032002829015254974,0.02370283380150795,-0.0894944965839386,-0.01053606253117323,-0.03774183616042137,-0.0645725205540657,-0.012752034701406956,-0.004270572680979967,-0.030242303386330605,0.048310279846191406,0.036175698041915894,-0.007017470430582762,0.0058343978598713875,0.007651372347027063,-0.00020451513410080224,-0.044780243188142776,-0.0022666321601718664,-0.00794914085417986,0.010957404039800167,0.022456776350736618,0.03899204358458519,0.16005481779575348,-0.02400227263569832,-0.03258803114295006,0.025381559506058693,0.013514976017177105,-0.008777385577559471,-0.021840794011950493,-0.06691168993711472,0.005454948637634516,0.0185540821403265,0.02324984408915043,-0.0021511821541935205,-0.025002500042319298,0.027007441967725754,0.05165008455514908,0.021365219727158546,-0.0081543680280447,-0.033428553491830826,0.04458604007959366,-0.009215040132403374,0.015080423094332218,-0.011861119419336319,0.04113875329494476,-0.05173919349908829,-0.011763782240450382,0.0028832005336880684,-0.021771317347884178,0.017142225056886673,-0.04397457838058472,-0.006846014875918627,-0.04014936089515686,-0.03493623062968254,0.007936030626296997,-0.020777015015482903,-0.06954889744520187,0.024257944896817207,0.04303225129842758,0.03167608380317688,-0.017030972987413406,0.12837855517864227,0.03575437515974045,0.024108942598104477,-0.026631919667124748,-0.048380110412836075,0.016227837651968002,0.022955551743507385,0.0368279367685318,0.008989032357931137,-0.09697356820106506,-0.029903752729296684,-0.03789180517196655,0.0036651117261499166,-0.0567631833255291,-0.041003212332725525,0.016835393384099007,-0.05261670798063278,-0.004013204015791416,0.05139758437871933,-0.006512550171464682,0.00003380616908543743,-0.03301551938056946,0.007156085222959518,0.03410760313272476,0.00949133187532425,0.008163643069565296,-0.01364399679005146,-0.007793341297656298,-0.027725700289011,0.010416178032755852,0.038720935583114624,0.004764113109558821,0.008716479875147343,-0.020987005904316902,-0.05348680540919304,-0.042070068418979645,0.03607054427266121,0.018118616193532944,-0.04102853313088417,-0.0075948722660541534,0.0032835593447089195,0.0011632114183157682,-0.011514410376548767,0.011109907180070877,0.011695219203829765,-0.02253139019012451,0.043435193598270416,0.0528285913169384,0.018956637009978294,-0.03922156244516373,0.006415412761271,-0.034502141177654266,0.09391085803508759,0.034024231135845184,-0.039505865424871445,0.02501794509589672,0.12298715114593506,-0.031338948756456375,0.05691267549991608,0.04457695037126541,0.02455035224556923,-0.06889260560274124,0.007014134898781776,-0.01913337968289852,-0.05152973532676697,-0.023243900388479233,-0.018223684281110764,-0.01743200235068798,-0.012358083389699459,-0.01487677451223135,-0.01696348562836647,0.0002622559550218284,0.01524296123534441,0.041250377893447876,-0.051826491951942444,-0.026765301823616028,-0.02527550980448723,-0.000786220480222255,-0.03847391530871391,0.023185016587376595,0.02498532459139824,-0.05480734631419182,-0.03599981963634491,-0.012388534843921661,0.002520972164347768,0.016193626448512077,0.01437221560627222,-0.022121431306004524,-0.004352221265435219,-0.010215350426733494,0.028429411351680756,-0.03627629205584526,0.05232921987771988,0.027852054685354233,0.031776126474142075,0.021240267902612686,0.06572599709033966,0.005503428168594837,-0.05499279499053955,-0.0007877875468693674,-0.025322172790765762,-0.01878739893436432,-0.013151546008884907,0.03747987002134323,0.03370725363492966,-0.02262098714709282,0.010953250341117382,-0.015927262604236603,-0.012970673851668835,-0.0011515148216858506,0.009504029527306557,-0.057915061712265015,0.042095690965652466,0.025462880730628967,0.02965271659195423,-0.06408471614122391,-0.022530006244778633,0.054467298090457916,-0.03491842746734619,0.04472675174474716,0.0007067088154144585,-0.018455883488059044,-0.03073049522936344,0.09038951247930527,-0.041263967752456665,0.01311913225799799,0.03711998090147972,0.04169977456331253,0.03927168622612953,0.0397297665476799,0.014154678210616112,-0.030292009934782982,0.016883108764886856,0.030164893716573715,0.03953870013356209,0.013113511726260185,-0.025784054771065712,0.020888676866889,-0.07358460128307343,-0.026711774989962578,0.01831847056746483,-0.00802130252122879,-0.04641300067305565,0.024545583873987198,-0.09714118391275406,0.019236793741583824,-0.06420573592185974,-0.002128918655216694,0.024342386052012444,0.001850586268119514,-0.10239198803901672,-0.017696982249617577,-0.035100046545267105,0.03888247162103653,-5.627669653670101e-33,-0.023553919047117233,-0.023710763081908226,-0.01671079359948635,-0.02507500909268856,-0.029185591265559196,-0.06453248858451843,-0.01824765093624592,-0.025335753336548805,-0.013457001186907291,-0.06719677895307541,-0.010767834261059761,-0.056149132549762726,0.008754580281674862,0.028389008715748787,0.009541794657707214,0.011901223100721836,0.006448627449572086,-0.029863912612199783,0.011274111457169056,-0.008071639575064182,-0.006053267978131771,0.012239275500178337,0.0050155725330114365,0.016484612599015236,-0.016229189932346344,0.019894825294613838,-0.002498271642252803,0.031758762896060944,-0.09707628935575485,0.017701182514429092,-0.0019396085990592837,0.001701014582067728,-0.010153668001294136,-0.04066081717610359,0.05343610793352127,0.057073384523391724,0.0017085396684706211,-0.04093229025602341,-0.005938252899795771,0.0012730163289234042,0.09474626183509827,0.06795205175876617,0.0020609023049473763,0.020399590954184532,0.017607307061553,-0.010002571158111095,-0.017976542934775352,0.011548928916454315,-0.02779918909072876,0.011404807679355145,0.022816795855760574,0.04412512853741646,0.033956341445446014,-0.020557742565870285,0.06040200591087341,0.030865319073200226,0.04456813633441925,-0.03782450407743454,-0.04191819578409195,-0.04196030646562576,0.01791374944150448,0.015355968847870827,-0.003990058321505785,0.09235287457704544,0.02236063964664936,0.034271884709596634,0.052414171397686005,0.007399389054626226,-0.057088129222393036,-0.015175746753811836,-0.026351002976298332,0.0020677160937339067,-0.006413396913558245,0.021345244720578194,0.033842410892248154,0.020792212337255478,-0.053872447460889816,0.030399274080991745,0.0005479617393575609,-0.024345170706510544,0.006746476981788874,0.010175187140703201,0.004539928864687681,-0.003969411365687847,-0.06758379191160202,-0.07615945488214493,0.056844983249902725,-0.013514265418052673,-0.028659433126449585,-0.011529610492289066,-0.056622691452503204,0.007540388032793999,-0.012648677453398705,0.0631277784705162,-0.09182412177324295,-0.06648410856723785,0.02313009649515152,0.048763301223516464,-0.0458051823079586,0.0021216953173279762,-0.015101288445293903,-0.004371182061731815,-0.034228816628456116,0.011172694154083729,0.010970269329845905,0.03235041722655296,-0.010189012624323368,-0.02012050151824951,0.0022997178602963686,0.024287866428494453,0.04381299018859863,0.01960275135934353,-0.0747331753373146,0.03069745935499668,0.009431179612874985,0.008805762976408005,0.008319123648107052,0.026944972574710846,0.03295587748289108,0.06386449187994003,-0.00726822717115283,0.022929614409804344,0.00011588655615923926,-0.006778647657483816,0.02509082295000553,-0.008535439148545265,-0.00156970729585737,-0.021626358851790428,-0.024408375844359398,-0.025276491418480873,-0.0015395957743749022,-0.06895247101783752,2.493526949365332e-7,-0.04311112314462662,0.0006875281687825918,-0.02440524846315384,-0.05183294042944908,-0.04628473147749901,0.025516651570796967,-0.0070384833961725235,-0.00303132482804358,0.012211346998810768,-0.0916079506278038,0.013251653872430325,0.025215204805135727,0.05120658874511719,0.03235979378223419,-0.028536101803183556,-0.08613741397857666,0.007183449808508158,0.011799165047705173,-0.005419476889073849,0.008884858340024948,0.010197732597589493,-0.018877867609262466,0.037714261561632156,0.004784999415278435,0.032073624432086945,0.048032790422439575,0.025893867015838623,-0.021233906969428062,-0.0020563018042594194,-0.02263038605451584,0.02949179895222187,-0.05857456848025322,-0.05563068389892578,-0.0019259247928857803,0.035798050463199615,-0.010488457977771759,0.017642799764871597,-0.028094705194234848,0.0014400631189346313,-0.01030711643397808,0.05413990840315819,0.010374395176768303,-0.03675611689686775,0.007701466791331768,0.007229385431855917,0.005658777430653572,-0.06911345571279526,0.0693659782409668,-0.0033705360256135464,-0.0008536047535017133,-0.09172432869672775,-0.039382342249155045,0.011500894092023373,-0.028884083032608032,-0.0014046166324988008,-0.03531022369861603,-0.032724399119615555,0.0322914756834507,0.00298697710968554,0.003661430673673749,0.021729614585638046,-0.06681344658136368,0.00942972581833601,-0.004838357213884592,-0.004707867279648781,0.04497459903359413,-0.025410054251551628,2.638732269981601e-34,0.002291115466505289,0.007004701066762209,-0.008787556551396847,0.0010390274692326784,0.05067261680960655,0.004913799464702606,0.01938551664352417,-0.002158715855330229,0.018668172881007195,-0.01097570639103651,-0.007219857536256313]'
SET
  @HasCustomProps_fb2aee44 = 0
SET
  @HasCustomEvents_fb2aee44 = 0
SET
  @RequiresData_fb2aee44 = 0
SET
  @DependencyCount_fb2aee44 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_fb2aee44 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_fb2aee44 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_fb2aee44 = 0
SET
  @ID_fb2aee44 = '3B4C4BAF-DECE-4CBB-B8C0-7D1855B74248'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_fb2aee44,
  @Name = @Name_fb2aee44,
  @Version = @Version_fb2aee44,
  @VersionSequence = @VersionSequence_fb2aee44,
  @Title = @Title_fb2aee44,
  @Description = @Description_fb2aee44,
  @Type = @Type_fb2aee44,
  @Status = @Status_fb2aee44,
  @DeveloperName = @DeveloperName_fb2aee44,
  @DeveloperEmail = @DeveloperEmail_fb2aee44,
  @DeveloperOrganization = @DeveloperOrganization_fb2aee44,
  @SourceRegistryID = @SourceRegistryID_fb2aee44,
  @ReplicatedAt = @ReplicatedAt_fb2aee44,
  @LastSyncedAt = @LastSyncedAt_fb2aee44,
  @Specification = @Specification_fb2aee44,
  @FunctionalRequirements = @FunctionalRequirements_fb2aee44,
  @TechnicalDesign = @TechnicalDesign_fb2aee44,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_fb2aee44,
  @TechnicalDesignVector = @TechnicalDesignVector_fb2aee44,
  @HasCustomProps = @HasCustomProps_fb2aee44,
  @HasCustomEvents = @HasCustomEvents_fb2aee44,
  @RequiresData = @RequiresData_fb2aee44,
  @DependencyCount = @DependencyCount_fb2aee44,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_fb2aee44,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_fb2aee44,
  @HasRequiredCustomProps = @HasRequiredCustomProps_fb2aee44,
  @ID = @ID_fb2aee44;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_e1f84f56 NVARCHAR(MAX),
@Name_e1f84f56 NVARCHAR(500),
@Version_e1f84f56 NVARCHAR(50),
@VersionSequence_e1f84f56 INT,
@Title_e1f84f56 NVARCHAR(1000),
@Description_e1f84f56 NVARCHAR(MAX),
@Type_e1f84f56 NVARCHAR(255),
@Status_e1f84f56 NVARCHAR(50),
@DeveloperName_e1f84f56 NVARCHAR(255),
@DeveloperEmail_e1f84f56 NVARCHAR(255),
@DeveloperOrganization_e1f84f56 NVARCHAR(255),
@SourceRegistryID_e1f84f56 UNIQUEIDENTIFIER,
@ReplicatedAt_e1f84f56 DATETIMEOFFSET,
@LastSyncedAt_e1f84f56 DATETIMEOFFSET,
@Specification_e1f84f56 NVARCHAR(MAX),
@FunctionalRequirements_e1f84f56 NVARCHAR(MAX),
@TechnicalDesign_e1f84f56 NVARCHAR(MAX),
@FunctionalRequirementsVector_e1f84f56 NVARCHAR(MAX),
@TechnicalDesignVector_e1f84f56 NVARCHAR(MAX),
@HasCustomProps_e1f84f56 BIT,
@HasCustomEvents_e1f84f56 BIT,
@RequiresData_e1f84f56 BIT,
@DependencyCount_e1f84f56 INT,
@TechnicalDesignVectorEmbeddingModelID_e1f84f56 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_e1f84f56 NVARCHAR(MAX),
@HasRequiredCustomProps_e1f84f56 BIT,
@ID_e1f84f56 UNIQUEIDENTIFIER
SET
  @Namespace_e1f84f56 = N'CRM/Analytics'
SET
  @Name_e1f84f56 = N'LossReasons'
SET
  @Version_e1f84f56 = N'1.0.0'
SET
  @VersionSequence_e1f84f56 = 1
SET
  @Title_e1f84f56 = N'Loss Reasons'
SET
  @Description_e1f84f56 = N'Chart analyzing common reasons for lost deals'
SET
  @Type_e1f84f56 = N'Chart'
SET
  @Status_e1f84f56 = N'Deprecated'
SET
  @Specification_e1f84f56 = N'{}'
SET
  @FunctionalRequirements_e1f84f56 = N'## Loss Reasons

### Purpose
Analyze and display reasons for lost deals.

### Features
- Categorized loss reasons
- Frequency analysis
- Pie/bar chart options
- Drill-down capability'
SET
  @TechnicalDesign_e1f84f56 = N'## Implementation

### Props
- lossData: Array of loss reason categories
- chartType: Chart display type
- onReasonClick: Reason selection handler'
SET
  @FunctionalRequirementsVector_e1f84f56 = N'[-0.05018993467092514,0.035927627235651016,-0.005921334493905306,-0.02064446546137333,0.020753376185894012,0.007111846003681421,-0.0013471221318468451,-0.006043419241905212,-0.09584349393844604,0.013181298971176147,0.035071961581707,-0.01657206378877163,0.023545555770397186,0.13958589732646942,-0.016272911801934242,-0.0464385561645031,0.006571241654455662,0.012364717200398445,0.0022312700748443604,0.013426905497908592,0.006809665355831385,0.001134037971496582,0.008541129529476166,0.028327813372015953,-0.05279211327433586,-0.013160807080566883,-0.023344634100794792,0.03689788654446602,0.025469057261943817,-0.12322759628295898,0.027300314977765083,-0.010639982298016548,-0.006047246512025595,-0.044857751578092575,0.000002195149363615201,-0.003269015345722437,-0.057854585349559784,0.008384667336940765,-0.042214881628751755,0.10918933153152466,-0.01746656559407711,-0.011983508244156837,0.027253301814198494,0.008540919050574303,0.010276568122208118,-0.0054743667133152485,0.006135766860097647,0.0710064023733139,0.056640155613422394,0.03886664658784866,0.02551194839179516,0.015641983598470688,-0.04174695536494255,-0.02835848368704319,0.052934691309928894,-0.07447227090597153,-0.015891576185822487,0.027124950662255287,-0.009525002911686897,-0.042409028857946396,-0.017807716503739357,-0.020091691985726357,0.009167065843939781,-0.047828759998083115,0.033694468438625336,0.0059455689042806625,0.052524078637361526,-0.03695427626371384,0.009837069548666477,-0.0007886216626502573,0.07145604491233826,-0.028329426422715187,0.0117232296615839,-0.05754195153713226,-0.014300825074315071,-0.07878214120864868,-0.049153778702020645,0.00409534340724349,-0.010845932178199291,0.02335035614669323,-0.018120378255844116,0.06791731715202332,-0.020414074882864952,-0.02659607119858265,-0.0054522911086678505,-0.06703043729066849,-0.022425483912229538,-0.016112346202135086,-0.0015592057025060058,-0.00978819653391838,-0.032455235719680786,0.03158104419708252,-0.025815503671765327,-0.011795014142990112,-0.07430814951658249,0.0049316491931676865,0.04103011265397072,0.02397865615785122,0.028158366680145264,-0.03296686336398125,0.033974871039390564,0.016265742480754852,0.0005814944161102176,0.017967484891414642,0.02319633774459362,-0.020071661099791527,-0.020180299878120422,-0.028897905722260475,-0.026392720639705658,0.021380925551056862,-0.022372042760252953,-0.016306793317198753,-0.006369396578520536,0.05020967125892639,0.028813373297452927,0.007295798044651747,-0.035523638129234314,-0.01347613986581564,-0.08532523363828659,0.003714318387210369,0.056863706558942795,0.022918879985809326,-0.010145623236894608,-0.02061769925057888,-0.008688914589583874,-0.02873806655406952,-0.02146921306848526,-0.0031997491605579853,0.0056336610578000546,0.03903329744935036,-0.04062508046627045,-0.019171863794326782,0.026218241080641747,-0.015562123619019985,0.005361610557883978,0.01350383460521698,0.044348616153001785,0.0010503900703042746,-0.09910190850496292,-0.0358952134847641,0.054899659007787704,0.0014931936748325825,-0.07783519476652145,0.016569359228014946,-0.045919019728899,-0.0571664460003376,-0.018946627154946327,0.01767849735915661,-0.0014784893719479442,0.012691260315477848,-0.0011632826644927263,0.003947238437831402,-0.03216514363884926,0.03543029725551605,-0.006201955024152994,-0.006817154586315155,0.03276452049612999,0.01352136954665184,-0.028557781130075455,0.002682079328224063,0.0017507510492578149,-0.04683222249150276,0.00576002337038517,-0.018838591873645782,0.02227441780269146,-0.00036028368049301207,-0.06721239537000656,-0.01685498096048832,-0.0454796627163887,-0.0274979155510664,0.03942156210541725,-0.026729442179203033,-0.022209154441952705,0.017816999927163124,0.006126333028078079,0.03849605470895767,0.12096402794122696,0.0496191680431366,-0.024370187893509865,-0.036555204540491104,-0.044272031635046005,-0.121242456138134,0.0009943313198164105,-0.0002829113800544292,0.0035938858054578304,-0.00708343368023634,-0.042182281613349915,-0.025188768282532692,-0.02917969971895218,-0.010109540075063705,-0.005900037474930286,0.0319858156144619,-0.03652423620223999,0.013349712826311588,-0.022915935143828392,0.019320165738463402,0.00728601822629571,-0.021892188116908073,0.012895052321255207,0.01406214851886034,-0.018384164199233055,-0.028508514165878296,0.025818251073360443,0.02112800069153309,0.01847841963171959,-0.0445810928940773,-0.0021725744009017944,-0.0011964001460000873,0.005230192095041275,-0.0023139819968491793,0.040285952389240265,0.0018051828956231475,-0.00850618164986372,0.01737252250313759,-0.03159173205494881,0.02272503450512886,0.048374224454164505,0.033606041222810745,-0.09700009971857071,0.01116884034126997,-0.044346362352371216,-0.0022180103696882725,-0.08219094574451447,0.014966567978262901,0.08482877910137177,0.022786421701312065,0.044883742928504944,0.0002090548223350197,-0.004973743110895157,0.022404663264751434,0.014386446215212345,0.02628682553768158,0.027003128081560135,-0.018954621627926826,-0.011941267177462578,0.011876683682203293,0.06557983160018921,0.09617098420858383,-0.0059949480928480625,-0.02652394399046898,0.01327100396156311,-0.03090856224298477,-0.03421756252646446,-0.005216597579419613,0.022056955844163895,-0.11993493884801865,-0.016776109114289284,-0.010653622448444366,0.030062397941946983,-0.0018726503476500511,0.014935612678527832,0.006405921187251806,0.041968461126089096,0.010753343813121319,-0.01123049110174179,-0.017660418525338173,-0.11428986489772797,0.038370244204998016,-0.03848862275481224,0.09121120721101761,0.06429270654916763,-0.07156302034854889,0.0055230967700481415,0.01180628314614296,-0.0009002253063954413,-0.015132216736674309,0.09169647097587585,0.03685641288757324,0.026313142850995064,0.014700619503855705,0.046691667288541794,0.023643774911761284,0.012411248870193958,-0.011948279105126858,-0.019112540408968925,0.02665306068956852,-0.05961807817220688,-0.01469950657337904,0.003769893664866686,0.019434427842497826,-0.0015389409381896257,-0.053753070533275604,0.01426008716225624,0.009048504754900932,0.0020209054928272963,0.027330581098794937,0.007495617028325796,-0.011918243020772934,-0.0869658812880516,-0.007218607235699892,0.00945905689150095,-0.07816145569086075,0.03236711397767067,-0.03806617483496666,-0.04033082351088524,-0.015231804922223091,-0.08032549917697906,0.059865716844797134,-0.011547322385013103,0.1213848665356636,-0.039536576718091965,0.019394660368561745,-0.05257192626595497,-0.01575799286365509,-0.05022270604968071,0.039599768817424774,0.04250870272517204,-0.03401034697890282,0.005670058540999889,0.008172325789928436,0.012437133118510246,0.014786873012781143,-0.0050620585680007935,0.00488827470690012,0.02063075266778469,-0.006585595663636923,-0.03752968832850456,-0.010742940939962864,-0.013051130808889866,0.1204538345336914,0.030219603329896927,-0.010237963870167732,-0.005356328096240759,0.0505494624376297,0.015093312598764896,-0.03335670754313469,-0.08017321676015854,-0.03318064287304878,0.024250390008091927,-0.06210073083639145,0.008043699897825718,0.039228107780218124,-0.08512912690639496,0.009053549729287624,-0.013211238197982311,0.06246500834822655,-0.024826616048812866,-0.011977293528616428,-0.030845601111650467,-0.028778553009033203,-0.003876748960465193,0.06419108062982559,0.016946030780673027,-0.035545848309993744,0.06425265222787857,-0.02960139513015747,0.029313314706087112,0.013357932679355145,-0.06189845874905586,0.029686415567994118,0.001793576404452324,-0.008796926587820053,-0.013935626484453678,-0.027742570266127586,0.042331092059612274,0.008463372476398945,-0.052155978977680206,-0.015784302726387978,0.03127099201083183,-0.06427615135908127,0.05313596501946449,0.0012506232596933842,0.030602794140577316,0.04653358832001686,0.0016257353127002716,0.03807070851325989,-0.0212471392005682,-0.004583943635225296,0.02183723635971546,-0.030286479741334915,0.029856212437152863,-0.03290353715419769,0.014297940768301487,0.0029877470806241035,0.013823789544403553,-0.019321946427226067,0.05371732637286186,0.012619690969586372,0.04275790601968765,-0.008435115218162537,-0.0036754272878170013,-0.01221409160643816,0.0561223030090332,-0.011506050825119019,0.06828814744949341,0.014956745319068432,-0.0030149086378514767,-0.01877690479159355,-0.012397735379636288,0.015052377246320248,0.0038958534132689238,-0.0028044257778674364,-0.030134929344058037,-0.07025570422410965,-0.04561033099889755,-0.09237615019083023,-0.008926156908273697,-0.004370325710624456,-0.012986273504793644,-0.004204469732940197,0.0506446398794651,-0.008036548271775246,-0.04659672826528549,-0.03151314705610275,0.014807372353971004,0.0028378921560943127,0.015388275496661663,0.04572382569313049,0.015873711556196213,0.012649443931877613,0.022014696151018143,-0.03322479873895645,0.02223529852926731,-0.026380551978945732,0.07903241366147995,0.0324183814227581,-0.009234600700438023,0.01081206277012825,0.060521580278873444,0.009367726743221283,0.014243845827877522,0.00713755376636982,0.051324695348739624,-0.028745518997311592,-0.033166710287332535,-0.016224294900894165,0.017436910420656204,-0.013608681969344616,-0.004090010654181242,0.06066190451383591,-0.018383415415883064,-0.01804248057305813,-0.012492603622376919,-0.009183594956994057,-0.03409985080361366,-0.005210166331380606,0.02716168761253357,0.010546361096203327,-0.06502469629049301,0.006073456723242998,-0.03751559928059578,0.011108962818980217,0.07919830083847046,-0.011603022925555706,0.020999658852815628,-0.01958683505654335,0.002420738572254777,-0.02773100696504116,0.009518871083855629,0.04026919975876808,0.009148217737674713,-0.008869071491062641,0.06753063946962357,-0.04557701200246811,0.006606348790228367,-0.020104175433516502,-0.05480196326971054,-0.05803927034139633,-0.025026734918355942,-0.016933623701334,0.02595757320523262,0.04956084117293358,-0.01742505468428135,0.005742364097386599,-0.020060507580637932,-0.07044526934623718,0.008147728629410267,0.002937957178801298,-0.039030034095048904,0.005003250669687986,-0.02938392385840416,-0.019187867641448975,-0.001339375739917159,0.008359347470104694,0.026509499177336693,-0.018430743366479874,0.0036572578828781843,0.03841292858123779,0.06531502306461334,0.017856841906905174,-0.019716007634997368,0.018492771312594414,0.009007577784359455,-0.1519230306148529,-0.010897330939769745,0.04742618650197983,-0.004604896530508995,0.01264164038002491,-0.001823382219299674,0.06339114904403687,0.04225693270564079,-0.05621262267231941,-0.01804565079510212,-0.008290432393550873,0.00510773528367281,-0.031785428524017334,0.018060391768813133,0.006960191298276186,-0.011929907836019993,0.016879582777619362,0.0024149457458406687,0.03413759171962738,-0.0020619304850697517,-0.03730509430170059,0.009637373499572277,0.05512968823313713,0.011056346818804741,0.014729554764926434,0.00002035049874393735,-0.01979619264602661,0.02630394510924816,-0.008241048082709312,0.0018730502342805266,-0.08471714705228806,0.03197378292679787,-0.036023203283548355,-0.010437988676130772,0.02592378854751587,0.017402831465005875,-0.032348617911338806,0.015469028614461422,0.03685957193374634,0.05973406136035919,-0.029348375275731087,0.07448788732290268,-0.03181340545415878,0.015870535746216774,-0.028349364176392555,-0.01709785684943199,0.04084762558341026,0.03236984461545944,-0.006630328483879566,-0.07596980035305023,0.0272336658090353,0.0036288260016590357,0.04878964275121689,0.08292442560195923,0.068328358232975,-0.020137831568717957,0.01206167507916689,-0.06062942370772362,0.01650436781346798,0.0052235322073102,-0.026545047760009766,0.00489245867356658,-0.028850393369793892,-0.004127406049519777,-0.044405244290828705,-0.005133288446813822,0.09193027764558792,0.06845673173666,-0.05790651589632034,-0.07987359166145325,0.007492417469620705,0.0015898316632956266,-6.751222582549398e-33,-0.02367163449525833,-0.0943659096956253,-0.030589386820793152,0.03295760974287987,-0.03384988009929657,-0.010697311721742153,0.008189628832042217,-0.0210750550031662,0.028681974858045578,0.009263173677027225,0.0062872557900846004,0.03226091340184212,0.021831020712852478,0.02139984257519245,0.025654248893260956,-0.006940250750631094,0.01679011806845665,0.04464462026953697,0.013696135953068733,0.049939852207899094,-0.006368995178490877,0.03442908823490143,0.01658748649060726,-0.04930261895060539,-0.040213342756032944,0.048667918890714645,-0.01326814852654934,0.03527223691344261,0.007809692993760109,0.007188825868070126,0.003387242555618286,-0.01214424055069685,-0.020656995475292206,-0.009972777217626572,-0.012090976350009441,-0.05319565534591675,0.00311864516697824,-0.029550792649388313,0.009985901415348053,-0.027073873206973076,0.08795178681612015,0.006309493910521269,0.005233469884842634,0.025104422122240067,0.014616300351917744,-0.021100834012031555,0.03274764120578766,0.011883138678967953,-0.05855436995625496,0.05710059031844139,-0.01833001896739006,0.032791782170534134,-0.03157331794500351,0.015415891073644161,-0.018438801169395447,0.04296768084168434,0.009468477219343185,-0.015015809796750546,-0.009617568925023079,-0.00319453002884984,-0.026171274483203888,-0.02276718243956566,0.001884795492514968,-0.009008320979773998,-0.028941616415977478,0.03693125769495964,-0.007169862277805805,0.04892594739794731,0.01734577678143978,-0.047301821410655975,-0.044249776750802994,0.07564946264028549,0.023885492235422134,-0.06997732073068619,0.019898131489753723,0.013788800686597824,-0.002151808235794306,0.03739795833826065,-0.029910361394286156,0.07070586830377579,-0.005990671459585428,0.044798821210861206,-0.025863448157906532,-0.001062187715433538,0.016118546947836876,-0.021350806578993797,-0.021696846932172775,-0.020888393744826317,0.008583267219364643,0.010296444408595562,-0.03177272900938988,0.0989212691783905,-0.049137651920318604,0.0026905881240963936,0.006244421936571598,0.005222950596362352,0.06222868338227272,-0.005055679474025965,-0.026909910142421722,-0.034234125167131424,0.013099760748445988,0.02717600390315056,0.0056746238842606544,-0.008681176230311394,0.03457188233733177,-0.01737259142100811,0.0441058874130249,0.0033466012682765722,-0.03443114832043648,0.007646332494914532,0.0023064748384058475,-0.041771579533815384,-0.050767555832862854,-0.003868130501359701,-0.008768418803811073,-0.0009910863591358066,-0.001482007559388876,0.03715694695711136,0.004201607778668404,0.029697831720113754,-0.012360721826553345,-0.001653425395488739,-0.009175173938274384,0.03203032165765762,0.04162271320819855,-0.015308673493564129,-0.018941480666399002,-0.07606218010187149,0.031688492745161057,-0.02255406230688095,-0.013060160912573338,-0.011940635740756989,2.913787966463133e-7,-0.0060720606707036495,0.03541528433561325,0.0076620555482804775,0.030981987714767456,0.0071960026398301125,0.025364581495523453,-0.021970754489302635,-0.0004937364719808102,-0.03168452903628349,-0.00222619972191751,0.071078360080719,-0.05157418176531792,0.030516017228364944,0.022007249295711517,0.02120489999651909,-0.02823437564074993,0.02288762293756008,-0.035341255366802216,-0.061697132885456085,-0.035084716975688934,0.04369964078068733,0.011344876140356064,0.024836108088493347,-0.03250318765640259,0.02709568850696087,0.03575372323393822,-0.022523578256368637,-0.03602977842092514,-0.022745124995708466,-0.023820608854293823,0.023953573778271675,0.02753167599439621,-0.002679852768778801,0.011492550373077393,-0.010884704068303108,0.016918499022722244,-0.007998512126505375,-0.03066440299153328,0.01960398070514202,-0.022154921665787697,-0.02651751972734928,0.014522858895361423,-0.017723077908158302,-0.02103983424603939,0.0036231123376637697,-0.03698950633406639,-0.02800176478922367,-0.003049885854125023,0.019438862800598145,-0.007436848245561123,0.03838996961712837,-0.01395691279321909,0.02720283344388008,-0.020961156114935875,-0.0185158159583807,0.007374643348157406,0.03308844193816185,0.0016733369557186961,0.040003832429647446,0.06477199494838715,0.026068495586514473,-0.001028854283504188,-0.01474714558571577,0.05066758394241333,0.08990513533353806,0.0031386318150907755,-0.04465499520301819,3.0844721513849794e-34,0.019471537321805954,-0.024716438725590706,0.009394622407853603,0.048581819981336594,0.013710401020944118,-0.014413926750421524,-0.025202153250575066,-0.007266530301421881,0.03154206648468971,-0.021146539598703384,-0.012342451140284538]'
SET
  @TechnicalDesignVector_e1f84f56 = N'[-0.023480596020817757,0.005498281680047512,-0.012884046882390976,-0.017621761187911034,0.028069308027625084,-0.015093110501766205,0.04030429571866989,0.02297629602253437,-0.025630906224250793,-0.016464199870824814,0.020334579050540924,0.013470284640789032,0.045604683458805084,0.026120277121663094,0.007756141945719719,-0.09518691152334213,-0.026926901191473007,0.040202297270298004,0.020307568833231926,-0.02253485843539238,0.010926840826869011,0.00014923895651008934,-0.04058781638741493,0.04689532890915871,0.01470525749027729,-0.06985385715961456,0.007945049554109573,-0.01709544099867344,0.017576497048139572,-0.10559124499559402,0.04345223307609558,0.030960651114583015,0.002575527410954237,-0.0323684997856617,0.0000016780826399553916,-0.02908666618168354,0.019153831526637077,-0.000989103107713163,-0.012746486812829971,-0.012629697099328041,-0.00623882282525301,-0.023534312844276428,0.049497105181217194,-0.02310016192495823,0.03917384520173073,-0.08401838690042496,-0.011251366697251797,-0.013025413267314434,0.05762935057282448,0.0009791048942133784,0.02441236563026905,-0.03276277706027031,0.01399814523756504,-0.018472714349627495,0.021355874836444855,0.029620563611388206,-0.007074835244566202,-0.008267651312053204,0.03822031989693642,0.01325294841080904,-0.02194860763847828,-0.04121563583612442,0.019222436472773552,-0.006346369627863169,0.0364295169711113,-0.014551931992173195,0.09515080600976944,-0.033818308264017105,0.02644650824368,0.04049650952219963,0.12147524952888489,0.006600954104214907,0.013668394647538662,0.01555322203785181,-0.022953907027840614,-0.03794249892234802,-0.007876330986618996,-0.0011255756253376603,-0.03896637260913849,0.016359852626919746,0.032205164432525635,0.03876630216836929,-0.02711704932153225,-0.004104869905859232,0.047956060618162155,-0.029821468517184258,-0.017478080466389656,0.01621342822909355,-0.00903825368732214,-0.03746131807565689,-0.02337232232093811,-0.014730691909790039,-0.003901489544659853,-0.04192743077874184,-0.04020528867840767,0.025051524862647057,0.025676079094409943,-0.0656355693936348,0.024618249386548996,-0.0826762467622757,0.061132896691560745,0.04666556045413017,-0.015502311289310455,-0.0009866863256320357,0.06253660470247269,0.05939258262515068,0.011454177089035511,-0.006423123646527529,-0.048265017569065094,-0.020494502037763596,-0.010577687062323093,0.014719638042151928,0.02598409913480282,0.04923177510499954,0.01569373719394207,0.0038924713153392076,-0.06639127433300018,-0.019161280244588852,-0.05625401809811592,-0.0009536587749607861,0.04979069530963898,-0.015803564339876175,-0.03788674250245094,-0.02445869706571102,-0.026623275130987167,0.01867781952023506,0.022030172869563103,-0.037929780781269073,-0.004383336286991835,0.03891173005104065,0.012131686322391033,0.012152090668678284,0.054809559136629105,-0.013982237316668034,-0.04502885043621063,0.08677010238170624,-0.016678564250469208,0.004498322028666735,-0.048897504806518555,-0.02129458449780941,0.003765113651752472,0.040467243641614914,0.02032066136598587,0.02260376326739788,-0.02501785196363926,-0.005465182475745678,0.05722471699118614,-0.05972966179251671,0.00007623122655786574,0.05119873583316803,0.018934210762381554,0.009019101969897747,-0.018686234951019287,-0.006648009177297354,-0.010075818747282028,0.027235984802246094,-0.07097305357456207,0.017422638833522797,0.023019175976514816,-0.006207150872796774,0.00851980596780777,0.0028016811702400446,0.050937000662088394,-0.008136255666613579,-0.020229214802384377,0.023694900795817375,-0.15213121473789215,-0.050206203013658524,-0.0954810231924057,0.00013445509830489755,0.09361560642719269,-0.04858949035406113,-0.08268316090106964,-0.0018413932994008064,-0.0028499567415565252,0.04220811650156975,0.14017821848392487,0.035991180688142776,-0.05500675365328789,-0.020397214218974113,-0.011990165337920189,-0.030900588259100914,0.016007473692297935,0.04519280046224594,0.015485287643969059,0.0034693365450948477,-0.007339742034673691,-0.03800961747765541,0.015771446749567986,-0.009128639474511147,-0.03310484439134598,0.021954789757728577,-0.042646702378988266,-0.045697618275880814,-0.03027607873082161,-0.007538278587162495,-0.0044026607647538185,-0.010548427700996399,-0.009826013818383217,0.0445774681866169,0.01961415819823742,0.0065796044655144215,0.0695817843079567,0.014773119240999222,-0.00043927764636464417,-0.010938827879726887,-0.03490673750638962,-0.011446857824921608,0.014134950935840607,-0.045366574078798294,0.01582740619778633,-0.015017793513834476,0.014062377624213696,-0.014355754479765892,0.014199738390743732,0.04165147244930267,0.022595969960093498,0.02587433159351349,-0.06863929331302643,0.036363713443279266,-0.029239995405077934,-0.06737599521875381,0.0004832652921322733,-0.02350790426135063,0.12817922234535217,-0.009347311221063137,0.009233755059540272,-0.049341075122356415,0.02195495180785656,-0.029706887900829315,0.01255412120372057,-0.005175815429538488,-0.011860967613756657,-0.0006673599709756672,0.016955718398094177,0.015435404144227505,-0.03444797173142433,-0.04034421592950821,-0.0012395522790029645,0.018127955496311188,-0.011405437253415585,0.010738616809248924,-0.045813605189323425,0.009078181348741055,0.004992639645934105,-0.0460287481546402,-0.08818057924509048,0.008353463374078274,-0.06050417199730873,0.022264469414949417,0.02202180214226246,0.04206477850675583,0.007889759726822376,-0.015377678908407688,-0.011200462467968464,-0.08352603763341904,0.022521892562508583,0.0273271631449461,-0.05320501700043678,0.013516697101294994,0.05627775937318802,0.02938603237271309,0.045327167958021164,0.023463496938347816,0.03438682109117508,0.008143660612404346,0.05492328107357025,0.014162812381982803,0.028345279395580292,0.008269940502941608,-0.005888108164072037,-0.0033943234011530876,-0.03462182357907295,-0.028682488948106766,0.01046373974531889,0.022820504382252693,-0.0030077535193413496,-0.016067760065197945,0.017458129674196243,0.015839362516999245,-0.03342485800385475,-0.009118233807384968,0.006896098144352436,0.009481712244451046,-0.009830569848418236,0.0067047555930912495,-0.027415568009018898,0.07923650741577148,0.01375836692750454,-0.07749076932668686,-0.00009776233491720632,0.0277934018522501,0.025428196415305138,-0.03401264175772667,-0.018137183040380478,0.00277643627487123,-0.043015290051698685,0.05654355138540268,0.004357049707323313,0.09746254980564117,-0.029248226433992386,0.04347218573093414,0.0027465494349598885,-0.020373525097966194,-0.03103589080274105,0.023421553894877434,0.016830118373036385,-0.0278545543551445,0.0016793436370790005,0.06086478754878044,0.03147166594862938,0.004604763351380825,-0.004509453661739826,-0.020295262336730957,-0.000849735108204186,0.047359365969896317,-0.09266787767410278,-0.030458146706223488,-0.010573680512607098,0.06704694777727127,-0.004349136259406805,-0.03046022541821003,0.016840320080518723,-0.017704907804727554,-0.027862584218382835,-0.03929467871785164,0.005882195197045803,-0.03604866564273834,0.05157846584916115,-0.015709977596998215,0.011375032365322113,0.00512325344607234,0.009499413892626762,0.03503119945526123,0.017877407371997833,0.04030590504407883,-0.03809411823749542,-0.012257850728929043,-0.017551397904753685,0.002109021646901965,0.0034094415605068207,0.030824225395917892,-0.003610480111092329,-0.017732206732034683,0.0013240257976576686,-0.06430219858884811,-0.06926678121089935,0.024794701486825943,-0.02042245678603649,-0.03606504574418068,0.010337445884943008,0.03568197041749954,0.022708969190716743,-0.0031253318302333355,-0.0018199676414951682,0.059640128165483475,0.015078301541507244,0.018929671496152878,-0.019177455455064774,-0.026519760489463806,0.06877494603395462,0.044003020972013474,0.03076227195560932,0.018805405125021935,-0.07616336643695831,0.04873206838965416,0.023113934323191643,0.014941073022782803,0.02099555917084217,-0.05295808985829353,0.03096805512905121,-0.0014738676836714149,0.06319048255681992,-0.014818351715803146,-0.05201824754476547,-0.04831098020076752,0.05315084010362625,0.05320277437567711,-0.006571254227310419,-0.00907300878316164,0.009757245890796185,-0.034827638417482376,0.008959000930190086,0.017780669033527374,0.06608497351408005,-0.03325948119163513,0.022936813533306122,-0.009533083066344261,-0.011810574680566788,0.0379788763821125,-0.011662011034786701,0.00682247756049037,-0.028782574459910393,0.004576354753226042,0.003477580612525344,-0.004891911521553993,-0.010660254396498203,-0.009728563018143177,0.05112459138035774,-0.015200328081846237,0.02431943640112877,0.05638201907277107,-0.00362021173350513,-0.013561395928263664,0.038792796432971954,0.0023376077879220247,-0.011069370433688164,0.061139144003391266,0.03069549798965454,0.0013705271994695067,0.01846114918589592,-0.09993018954992294,-0.029496632516384125,-0.004741034470498562,-0.027547718957066536,0.04892728105187416,0.00652359751984477,-0.03335537016391754,0.04332662373781204,0.006185977719724178,-0.029588732868433,-0.005149131175130606,0.018586749210953712,0.014274260960519314,0.016232002526521683,-0.03393569216132164,-0.024509316310286522,-0.008982236497104168,-0.02874074876308441,0.011526302434504032,0.03342488408088684,0.038958143442869186,-0.012816202826797962,-0.01310262642800808,-0.0280053298920393,0.020891880616545677,-0.03631211072206497,0.046997468918561935,-0.012522227130830288,-0.04458567872643471,0.04478022828698158,-0.038225047290325165,0.04476417973637581,-0.0212178323417902,-0.014501663856208324,-0.007371817249804735,-0.0295632965862751,0.0803709402680397,0.07961295545101166,0.0013335066614672542,-0.027398832142353058,0.04520957171916962,-0.021129494532942772,-0.0036661718040704727,-0.01190087292343378,-0.08370836824178696,0.01391941960901022,0.08623702824115753,-0.018246721476316452,-0.029256412759423256,0.005416288040578365,0.034758929163217545,-0.013270480558276176,-0.03606832027435303,-0.016275722533464432,0.0018894262611865997,0.03318893536925316,0.06067882478237152,-0.0061207981780171394,0.04723714292049408,0.033231381326913834,-0.02981456369161606,-0.008280487731099129,0.031419023871421814,0.05094437673687935,-0.02958836406469345,-0.024886479601264,0.016585689038038254,0.0015731389867141843,-0.03267116844654083,-0.02335500344634056,0.030448706820607185,-0.026122424751520157,-0.10600394755601883,0.012025407515466213,-0.03706643357872963,0.024771373718976974,0.03878448158502579,-0.0119473310187459,-0.014268162660300732,0.008664600551128387,-0.02754581905901432,-0.05088619515299797,-0.006829024758189917,0.07530921697616577,0.01772565394639969,-0.014435851946473122,0.011160345748066902,0.05463657155632973,-0.002788538346067071,-0.013530129566788673,-0.005925364326685667,0.004867349751293659,-0.028301533311605453,-0.013868899084627628,0.014951852150261402,-0.004029570613056421,0.0634113997220993,-0.01700953021645546,-0.019574997946619987,0.03412579372525215,-0.01589938811957836,-0.042810481041669846,-0.038153328001499176,0.0465368889272213,0.007023622281849384,0.0032606744207441807,-0.0360679030418396,0.042148083448410034,-0.012679810635745525,0.023191379383206367,0.013954823836684227,0.03659311681985855,-0.03425721079111099,0.09667205810546875,0.0483631007373333,0.015579290688037872,0.017295200377702713,-0.012002511881291866,0.02775149792432785,0.022888876497745514,0.017968548461794853,-0.06166538968682289,0.05405353009700775,0.025631656870245934,0.05262474715709686,-0.010303247720003128,0.03395603597164154,0.011218792758882046,-0.030804725363850594,-0.033710263669490814,-0.021774565801024437,0.05011822655797005,-0.05441737547516823,0.043599825352430344,-0.04645615443587303,0.03227721154689789,-0.05142788216471672,-0.009132255800068378,0.05358413979411125,0.052545271813869476,-0.04162641987204552,-0.0685204565525055,-0.013381202705204487,0.02396300807595253,-5.698608901032303e-33,-0.0035606292076408863,-0.015471569262444973,-0.016314856708049774,-0.04040908068418503,-0.023282790556550026,-0.050295040011405945,-0.024999000132083893,-0.04081019386649132,0.0052369399927556515,-0.0004931591101922095,0.018401140347123146,-0.0589451938867569,-0.009019619785249233,0.02018427476286888,-0.011604392901062965,-0.040499720722436905,0.018145287409424782,0.02049858868122101,-0.006109021604061127,0.008677322417497635,0.026795238256454468,0.0031950788106769323,0.0014677528524771333,-0.04218403622508049,-0.02000255696475506,0.07227727770805359,-0.012537839822471142,0.044222574681043625,-0.03473256528377533,0.0009426416363567114,-0.05040520802140236,0.028974326327443123,-0.024140140041708946,-0.028292201459407806,-0.0050832838751375675,0.04125156253576279,-0.016464978456497192,-0.05150871351361275,0.019878579303622246,-0.008724669925868511,0.07825294137001038,-0.002748102182522416,0.007627004757523537,0.030097080394625664,0.04611647129058838,-0.03164846450090408,-0.036466874182224274,-0.01204742956906557,-0.0394960418343544,0.07174175977706909,0.018048753961920738,0.04247291013598442,0.005944449920207262,-0.04175504297018051,-0.002153582638129592,0.05660969391465187,0.04254794120788574,0.05310414731502533,-0.04639304801821709,-0.014564785175025463,-0.09846822172403336,-0.034975357353687286,0.01733590103685856,0.002931601135060191,0.007531453389674425,0.06805278360843658,0.021824868395924568,-0.008680147118866444,-0.04145019128918648,-0.008668709546327591,-0.03927728533744812,-0.006068502087146044,0.027351779863238335,-0.003933353815227747,0.045614439994096756,-0.061966340988874435,-0.02889634296298027,0.005621399264782667,-0.10303819179534912,-0.028393123298883438,-0.011347761377692223,0.04771275073289871,-0.02541598118841648,-0.020717527717351913,-0.031517982482910156,-0.0635937750339508,0.03230341151356697,0.012471475638449192,-0.028102844953536987,0.008423781022429466,-0.007041941396892071,0.08653829991817474,-0.0417187437415123,0.04960477352142334,-0.010222483426332474,-0.023658541962504387,0.03634916618466377,0.028142306953668594,-0.004799348302185535,-0.06967729330062866,0.01348151359707117,-0.046882811933755875,-0.03677310794591904,0.01897536590695381,0.003712486010044813,0.05335558205842972,0.007826424203813076,-0.007241265382617712,-0.012946231290698051,0.003396936459466815,-0.01559425052255392,-0.027373742312192917,-0.03240630403161049,0.0012358003295958042,0.00902029313147068,0.033885154873132706,-0.0012067861389368773,0.02063712291419506,0.01654299907386303,0.067154660820961,-0.04339747503399849,0.013737315312027931,-0.04969891905784607,0.0209332387894392,0.035130634903907776,-0.012749035842716694,-0.019275471568107605,-0.04088611900806427,-0.040384743362665176,-0.0445544496178627,0.0225684717297554,-0.07605461776256561,2.5727609909154125e-7,-0.027651218697428703,-0.02695801481604576,-0.02132389508187771,-0.03070990927517414,0.0028282925486564636,0.010175400413572788,-0.013026050291955471,-0.039890486747026443,-0.014286337420344353,-0.0857633650302887,-0.011547374539077282,0.0076176878064870834,0.03504548966884613,0.07554501295089722,-0.056457050144672394,-0.02763557806611061,0.03636489063501358,-0.0012802666751667857,-0.026262221857905388,0.025749359279870987,0.05200253799557686,-0.015890123322606087,0.08174579590559006,-0.03182559832930565,0.012536384165287018,0.03996167331933975,0.01888624206185341,0.011697961017489433,0.01645679399371147,-0.054706089198589325,0.011097854003310204,0.0023575294762849808,-0.018233947455883026,0.0010506625985726714,-0.009233015589416027,0.00200166879221797,-0.007237344514578581,-0.01590907759964466,0.01735585369169712,0.021284444257616997,0.013168968260288239,0.06323744356632233,-0.01672464795410633,0.0015449458733201027,0.015744708478450775,-0.022129876539111137,-0.05285470187664032,0.04109436273574829,0.03243037313222885,0.05410162732005119,-0.04400288686156273,-0.045765142887830734,0.0018102347385138273,-0.05125395581126213,-0.01039531547576189,-0.006208263337612152,0.017448924481868744,0.0294913612306118,0.03427192196249962,0.036459628492593765,0.005234197713434696,-0.05177928879857063,0.0006867432384751737,0.04113045334815979,0.03760853409767151,-0.015701275318861008,-0.03535900264978409,2.757517122075895e-34,0.02401268109679222,-0.03119264543056488,-0.02152896486222744,0.016808491200208664,0.02445690706372261,-0.025483692064881325,0.064176045358181,-0.013532387092709541,0.0535399466753006,0.02281147614121437,-0.021725228056311607]'
SET
  @HasCustomProps_e1f84f56 = 0
SET
  @HasCustomEvents_e1f84f56 = 0
SET
  @RequiresData_e1f84f56 = 0
SET
  @DependencyCount_e1f84f56 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_e1f84f56 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_e1f84f56 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_e1f84f56 = 0
SET
  @ID_e1f84f56 = 'DB21D074-FF07-45FE-A4E4-A49FF3E834B6'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_e1f84f56,
  @Name = @Name_e1f84f56,
  @Version = @Version_e1f84f56,
  @VersionSequence = @VersionSequence_e1f84f56,
  @Title = @Title_e1f84f56,
  @Description = @Description_e1f84f56,
  @Type = @Type_e1f84f56,
  @Status = @Status_e1f84f56,
  @DeveloperName = @DeveloperName_e1f84f56,
  @DeveloperEmail = @DeveloperEmail_e1f84f56,
  @DeveloperOrganization = @DeveloperOrganization_e1f84f56,
  @SourceRegistryID = @SourceRegistryID_e1f84f56,
  @ReplicatedAt = @ReplicatedAt_e1f84f56,
  @LastSyncedAt = @LastSyncedAt_e1f84f56,
  @Specification = @Specification_e1f84f56,
  @FunctionalRequirements = @FunctionalRequirements_e1f84f56,
  @TechnicalDesign = @TechnicalDesign_e1f84f56,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_e1f84f56,
  @TechnicalDesignVector = @TechnicalDesignVector_e1f84f56,
  @HasCustomProps = @HasCustomProps_e1f84f56,
  @HasCustomEvents = @HasCustomEvents_e1f84f56,
  @RequiresData = @RequiresData_e1f84f56,
  @DependencyCount = @DependencyCount_e1f84f56,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_e1f84f56,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_e1f84f56,
  @HasRequiredCustomProps = @HasRequiredCustomProps_e1f84f56,
  @ID = @ID_e1f84f56;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_b3b7d769 NVARCHAR(MAX),
@Name_b3b7d769 NVARCHAR(500),
@Version_b3b7d769 NVARCHAR(50),
@VersionSequence_b3b7d769 INT,
@Title_b3b7d769 NVARCHAR(1000),
@Description_b3b7d769 NVARCHAR(MAX),
@Type_b3b7d769 NVARCHAR(255),
@Status_b3b7d769 NVARCHAR(50),
@DeveloperName_b3b7d769 NVARCHAR(255),
@DeveloperEmail_b3b7d769 NVARCHAR(255),
@DeveloperOrganization_b3b7d769 NVARCHAR(255),
@SourceRegistryID_b3b7d769 UNIQUEIDENTIFIER,
@ReplicatedAt_b3b7d769 DATETIMEOFFSET,
@LastSyncedAt_b3b7d769 DATETIMEOFFSET,
@Specification_b3b7d769 NVARCHAR(MAX),
@FunctionalRequirements_b3b7d769 NVARCHAR(MAX),
@TechnicalDesign_b3b7d769 NVARCHAR(MAX),
@FunctionalRequirementsVector_b3b7d769 NVARCHAR(MAX),
@TechnicalDesignVector_b3b7d769 NVARCHAR(MAX),
@HasCustomProps_b3b7d769 BIT,
@HasCustomEvents_b3b7d769 BIT,
@RequiresData_b3b7d769 BIT,
@DependencyCount_b3b7d769 INT,
@TechnicalDesignVectorEmbeddingModelID_b3b7d769 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_b3b7d769 NVARCHAR(MAX),
@HasRequiredCustomProps_b3b7d769 BIT,
@ID_b3b7d769 UNIQUEIDENTIFIER
SET
  @Namespace_b3b7d769 = N'CRM/Analytics'
SET
  @Name_b3b7d769 = N'FactorAnalysis'
SET
  @Version_b3b7d769 = N'1.0.0'
SET
  @VersionSequence_b3b7d769 = 1
SET
  @Title_b3b7d769 = N'Factor Analysis'
SET
  @Description_b3b7d769 = N'Analysis of factors contributing to wins and losses'
SET
  @Type_b3b7d769 = N'Chart'
SET
  @Status_b3b7d769 = N'Deprecated'
SET
  @Specification_b3b7d769 = N'{}'
SET
  @FunctionalRequirements_b3b7d769 = N'## Factor Analysis

### Purpose
Analyze factors contributing to wins and losses.

### Features
- Multi-factor comparison
- Correlation analysis
- Heat map visualization
- Statistical insights'
SET
  @TechnicalDesign_b3b7d769 = N'## Implementation

### Props
- factors: Array of factor data
- correlations: Correlation matrix
- onFactorSelect: Factor selection handler'
SET
  @FunctionalRequirementsVector_b3b7d769 = N'[-0.05084000527858734,0.02230830304324627,-0.039748795330524445,-0.015299505554139614,-0.002158655086532235,0.024005498737096786,-0.007848968729376793,0.00430502463132143,-0.055538423359394073,-0.013135039247572422,0.023883147165179253,0.010200967080891132,0.06799207627773285,0.13949480652809143,0.021426113322377205,-0.015106207691133022,-0.05385411158204079,-0.023214299231767654,-0.011172432452440262,0.013073431327939034,-0.006887566298246384,-0.02098901756107807,-0.019894883036613464,0.013991263695061207,-0.04968848079442978,-0.008475632406771183,-0.005806070286780596,0.01991015486419201,0.027295483276247978,-0.08758009970188141,-0.0056245275773108006,-0.015440619550645351,-0.03508838266134262,-0.053357549011707306,0.0000019040197685171734,-0.03742619603872299,-0.030932670459151268,-0.003937226720154285,0.04574120044708252,0.05609387904405594,0.013971738517284393,0.04836150258779526,0.05502641946077347,0.024483725428581238,-0.025772282853722572,-0.020005151629447937,0.0036992880050092936,0.04575805738568306,0.00656725000590086,0.018825501203536987,-0.0016162795946002007,0.01962503418326378,-0.07533029466867447,-0.003523453837260604,-0.048027440905570984,-0.03879377990961075,-0.015646830201148987,-0.011047708801925182,-0.05047508329153061,-0.09624558687210083,-0.02152717486023903,0.008854426443576813,-0.024253424257040024,0.01962199993431568,0.01762842945754528,-0.005822883453220129,0.045541126281023026,-0.02335791289806366,0.00010489695705473423,0.014985289424657822,0.026188669726252556,-0.0013489800039678812,0.012240536510944366,-0.024044161662459373,0.024901291355490685,-0.016170771792531013,-0.02055096998810768,0.007943091914057732,0.023120751604437828,0.0038174951914697886,-0.0442289374768734,0.06429992616176605,-0.03843911364674568,-0.055160827934741974,0.02096991054713726,-0.026517750695347786,0.008338573388755322,-0.004013953730463982,-0.030847270041704178,0.0017959243850782514,0.0421297550201416,-0.0023360284976661205,0.030135152861475945,-0.03164773806929588,-0.032362304627895355,-0.0079888217151165,0.0720236599445343,-0.011070121079683304,0.013347315602004528,-0.059739790856838226,0.058757055550813675,0.023949583992362022,-0.007838156074285507,-0.017476694658398628,-0.009437461383640766,0.0037706533912569284,-0.011024358682334423,-0.016861477866768837,-0.05303725600242615,0.05286197364330292,-0.056578055024147034,-0.002886817790567875,0.05560221150517464,0.007026822306215763,0.04964568093419075,0.04611537605524063,-0.07159239798784256,-0.017430482432246208,-0.029894011095166206,0.02969011850655079,0.05580093711614609,0.017772670835256577,0.09276872128248215,0.04055684059858322,-0.033752430230379105,0.021004293113946915,-0.06999994814395905,0.015244904905557632,-0.022412942722439766,0.005333172157406807,-0.011691338382661343,0.0005932730273343623,-0.010446068830788136,-0.02427086979150772,0.026494497433304787,0.026821313425898552,0.020988818258047104,-0.014742372557520866,-0.048154134303331375,0.0004629770410247147,0.034569282084703445,-0.056457411497831345,-0.03296760097146034,-0.007515772245824337,-0.007571550086140633,-0.04615665227174759,-0.011951792053878307,0.06631752103567123,0.00612855888903141,-0.00578734464943409,-0.02962067909538746,-0.013244877569377422,0.007983407936990261,0.018814627081155777,0.012822882272303104,0.013921782374382019,0.028405550867319107,0.010854681022465229,0.006156202405691147,0.01272435300052166,0.0001922659284900874,-0.030749252066016197,-0.017076674848794937,0.000802094116806984,-0.002491575665771961,0.008823161944746971,-0.07111018896102905,0.0006476418348029256,-0.0013288127956911922,-0.019566945731639862,-0.03711319342255592,-0.03192589804530144,-0.014677355997264385,0.0601186603307724,0.04827897623181343,0.022403117269277573,0.07152059674263,0.062331631779670715,-0.01830110140144825,-0.060042012482881546,0.015031811781227589,-0.12087591737508774,-0.010952800512313843,0.00444718636572361,0.040199629962444305,0.04069702327251434,-0.0020283525809645653,0.03272971883416176,-0.03924333676695824,-0.006018323823809624,0.012476198375225067,0.007847552187740803,-0.011528964154422283,0.03135232627391815,-0.01678885705769062,-0.03350182622671127,-0.012939689680933952,-0.09949245303869247,-0.004998566582798958,0.0012989018578082323,-0.03514670580625534,-0.014611749909818172,0.028278611600399017,-0.0010953786550089717,-0.021473631262779236,-0.0449364110827446,0.009870997630059719,-0.031104676425457,-0.0010078748455271125,-0.05044248700141907,0.028397979214787483,0.05029357224702835,0.010856201872229576,0.020848441869020462,-0.013869908638298512,0.06250074505805969,0.024670634418725967,0.03170588240027428,-0.07290324568748474,0.05136285722255707,-0.02975965477526188,0.0796683058142662,-0.04595935344696045,0.006438414100557566,0.07438231259584427,-0.010335197672247887,0.02179712802171707,-0.022307628765702248,0.03568389639258385,0.040167320519685745,-0.0012730681337416172,0.008724273182451725,0.04011828452348709,0.0046216086484491825,-0.030146950855851173,0.07360830903053284,0.11898746341466904,0.08045189827680588,-0.018092382699251175,-0.034306347370147705,-0.0002724246005527675,-0.01882786490023136,-0.029170604422688484,0.02330336719751358,0.04980125650763512,-0.009396830573678017,-0.019097864627838135,0.05037064105272293,0.011710003949701786,-0.005095102824270725,0.004437137395143509,0.0016522434307262301,0.023594962432980537,-0.006240450777113438,0.0029527940787374973,-0.03308190405368805,-0.10314495861530304,-0.0075002205558121204,-0.04030496999621391,0.06125256046652794,-0.01351678092032671,-0.0454879067838192,-0.02227461338043213,-0.007141917943954468,0.035082343965768814,-0.04143952578306198,0.04004531726241112,-0.0186177808791399,0.019998738542199135,0.029301855713129044,0.02728147618472576,0.017535189166665077,-0.04367521032691002,-0.035596467554569244,-0.013668111525475979,0.03619103133678436,-0.09408270567655563,-0.003874174552038312,0.005662356503307819,0.031045949086546898,-0.0008912609191611409,-0.01084131095558405,-0.009659988805651665,-0.01141884084790945,-0.024819497019052505,0.0581209771335125,0.03334633633494377,0.0030527240596711636,-0.0465584471821785,0.040550582110881805,-0.01597166806459427,-0.046935372054576874,0.040675997734069824,0.003971490077674389,-0.02551443874835968,0.00897008366882801,-0.037555962800979614,0.06965780258178711,-0.01150435395538807,0.0639200210571289,-0.001688196207396686,-0.05213508754968643,-0.0019322388106957078,0.006621291860938072,-0.023953434079885483,0.027288518846035004,-0.0007066649850457907,-0.027445653453469276,-0.016323735937476158,0.009893650189042091,0.059914734214544296,0.01228269375860691,0.010117406956851482,0.024161329492926598,-0.002178492257371545,-0.03745289519429207,-0.0548425018787384,-0.012496128678321838,-0.022134773433208466,0.06236161291599274,0.03827201947569847,0.004677259363234043,-0.02393588051199913,0.03787844255566597,0.03606606647372246,-0.0462258905172348,-0.013836522586643696,0.012116122990846634,0.004313861019909382,-0.040485117584466934,-0.005238270852714777,-0.03645018860697746,-0.020557936280965805,0.019558122381567955,-0.06638102978467941,0.04786510765552521,-0.03772086277604103,-0.0345645509660244,0.009711206890642643,-0.02703244239091873,-0.0018556390423327684,0.06084884703159332,-0.006018584128469229,0.02357194758951664,-0.012011783197522163,-0.05853874608874321,0.03665678948163986,0.006960839964449406,-0.08970723301172256,-0.03341322019696236,0.07210326939821243,-0.05740324407815933,-0.039147116243839264,-0.03154974430799484,0.03349609673023224,0.032859351485967636,0.011239401064813137,0.023361241444945335,0.03289536014199257,-0.07387785613536835,0.027899669483304024,-0.017892079427838326,-0.006014569196850061,0.0002719920012168586,0.0008668488007970154,0.035039566457271576,-0.004917302168905735,-0.004721322562545538,-0.026393597945570946,-0.025651302188634872,0.03906094282865524,-0.013791623525321484,0.03550463542342186,0.016495484858751297,0.01133231446146965,0.022753283381462097,0.03542577102780342,0.007118252571672201,0.03063829243183136,-0.015654463320970535,0.03877396881580353,-0.04318007081747055,0.039970654994249344,-0.007055293302983046,0.026913486421108246,-0.048348259180784225,0.00912970956414938,0.011998976580798626,-0.029675636440515518,0.0012432847870513797,-0.020342130213975906,0.030988648533821106,-0.05399445816874504,-0.04598724842071533,-0.024304645135998726,-0.09604906290769577,-0.04806230962276459,-0.015255510807037354,-0.00426937872543931,0.011474080383777618,0.025628579780459404,-0.01971425488591194,-0.008123118430376053,-0.007556010037660599,-0.01752614788711071,-0.044657595455646515,-0.02266623079776764,0.02053404226899147,-0.035629868507385254,0.0011041833786293864,-0.04683592543005943,-0.02023659087717533,0.02600647322833538,-0.005330630112439394,0.1023392453789711,-0.014189704321324825,-0.02181808091700077,-0.05140150338411331,0.03263936564326286,0.04922977089881897,0.05638021603226662,0.06558357924222946,0.014762002043426037,0.027752073481678963,-0.04210727661848068,0.026999784633517265,0.011139786802232265,-0.0356113463640213,0.02113296091556549,0.00644270982593298,-0.03461970388889313,0.005605379119515419,-0.017373323440551758,0.023317553102970123,-0.026210740208625793,-0.0651518702507019,-0.04659070074558258,0.07473818957805634,0.027694832533597946,0.023885739967226982,0.0051030791364610195,0.044637907296419144,0.027849096804857254,-0.00682001793757081,0.053021423518657684,-0.0902179405093193,0.015534088015556335,-0.039592575281858444,0.017759598791599274,0.03789732605218887,-0.0037618447095155716,0.059500548988580704,0.04067602753639221,-0.005235528107732534,-0.010976864024996758,-0.01703059859573841,-0.012557036243379116,-0.04503015801310539,0.022339902818202972,0.018795741721987724,0.09645946323871613,0.0236069206148386,-0.10461907833814621,0.03816523030400276,0.0021105497144162655,-0.015303274616599083,-0.02319059520959854,-0.02233404479920864,-0.018002957105636597,-0.011684801429510117,-0.004536774475127459,0.0026391572318971157,-0.008303827606141567,0.03645006939768791,0.017842892557382584,0.010841190814971924,-0.004179989919066429,0.01587754674255848,0.0064916349947452545,0.000082045080489479,0.005135570652782917,0.08615889400243759,-0.0006442042649723589,-0.05341462045907974,-0.03338369354605675,0.026260286569595337,-0.04010867699980736,0.024035437032580376,0.010510144755244255,-0.009908814914524555,-0.005664883181452751,0.042179908603429794,-0.04384399577975273,-0.02465025894343853,-0.014141904190182686,-0.017184367403388023,-0.013025171123445034,0.05910557880997658,-0.0016424122732132673,0.04287247359752655,-0.02846546843647957,0.0401773564517498,-0.005635440349578857,-0.01370276603847742,-0.017289111390709877,0.029741650447249413,0.011070141568779945,-0.009965039789676666,0.006570606026798487,-0.042938679456710815,-0.0022553533781319857,0.009292304515838623,0.021710755303502083,0.028617488220334053,0.02640504390001297,-0.022672805935144424,0.0020470190793275833,-0.0478786937892437,0.01726486161351204,-0.0061226156540215015,0.021535666659474373,0.022647587582468987,0.02248154580593109,-0.03166431933641434,0.11555114388465881,-0.0010227130260318518,0.016893191263079643,-0.031494319438934326,-0.006787962280213833,0.006879266817122698,0.06195180118083954,-0.0008198781288228929,-0.040530815720558167,0.028580671176314354,0.0007034236332401633,0.03789239004254341,0.10292377322912216,0.1012754887342453,-0.05794679746031761,-0.016903867945075035,-0.0721898078918457,0.02100965566933155,-0.0015107319923117757,-0.02543933130800724,0.03291656821966171,0.0006493150722235441,-0.014128264039754868,-0.045697059482336044,0.014942207373678684,0.020661814138293266,-0.0063639068976044655,-0.012121162377297878,-0.019414560869336128,-0.050542201846838,0.007166837342083454,-6.487756094963722e-33,0.012440568767488003,-0.04249805212020874,-0.005977342836558819,0.041371315717697144,-0.06187262758612633,-0.05876018479466438,0.0009055173140950501,0.032852813601493835,-0.03231991082429886,0.008264563046395779,-0.037573155015707016,-0.006946786306798458,0.01942295767366886,0.008494446985423565,0.053715839982032776,-0.060529522597789764,-0.009493239223957062,-0.0003106201475020498,0.02698577381670475,-0.019396129995584488,-0.024020589888095856,0.06309781968593597,0.03624850884079933,-0.06526124477386475,-0.022919416427612305,0.004734768532216549,-0.06057795509696007,0.005209769122302532,0.009169832803308964,-0.014646796509623528,0.0022306260652840137,-0.03574628382921219,-0.012392015196383,-0.05728894844651222,0.02373684011399746,-0.06695582717657089,0.02116152085363865,-0.021275511011481285,0.03326862305402756,-0.005839320831000805,0.07562677562236786,0.019734272733330727,0.02093035727739334,0.03684408217668533,0.026950104162096977,-0.05633588135242462,0.026743698865175247,-0.0020708346273750067,0.02325979620218277,0.020276710391044617,0.013842198066413403,0.03440746292471886,-0.03301261365413666,0.09147302806377411,0.015972746536135674,0.0674341544508934,-0.006882570218294859,-0.015442965552210808,-0.044862374663352966,0.011756393127143383,-0.05503974109888077,0.013054436072707176,-0.005195949226617813,0.024742664769291878,0.001581988180987537,-0.008365655317902565,-0.019087880849838257,0.027920007705688477,-0.04182422161102295,-0.07780247181653976,0.008942191489040852,0.012953479774296284,0.030582215636968613,-0.017723513767123222,0.0011836769990622997,-0.0018458901904523373,-0.029470929875969887,0.0008328870171681046,-0.005277249962091446,0.017902618274092674,-0.03353030979633331,0.009779694490134716,-0.026922548189759254,0.011548739857971668,-0.02319123037159443,-0.005323576740920544,-0.03175561875104904,0.00220278138294816,0.042896248400211334,-0.02373400516808033,-0.034562528133392334,0.047150492668151855,-0.032259587198495865,0.02295892871916294,0.06994260847568512,-0.006504078861325979,0.040108975023031235,0.03617237135767937,-0.0344419963657856,-0.046974554657936096,0.017162812873721123,0.00363143696449697,-0.03584926202893257,0.03237159922719002,0.03466394171118736,-0.04701526090502739,-0.03046596422791481,-0.01343214139342308,-0.042232610285282135,-0.008526203222572803,0.062148384749889374,-0.018936920911073685,-0.008775305934250355,-0.040878262370824814,-0.03645025193691254,-0.017950991168618202,0.0075637879781425,0.018820088356733322,0.04435410350561142,0.06903301924467087,-0.03198344632983208,0.0003542188787832856,0.012610011734068394,-0.015537523664534092,0.04135280102491379,-0.0010077578481286764,-0.011809955351054668,-0.015263629145920277,0.030280422419309616,0.0068786717019975185,-0.026174314320087433,-0.052399758249521255,2.6145792730858375e-7,0.01953284628689289,0.09922362864017487,-0.07273074984550476,-0.020146097987890244,-0.0309807937592268,0.05113370716571808,-0.021965179592370987,0.00981004536151886,0.037524253129959106,0.024584945291280746,0.08545178920030594,0.017111191526055336,-0.019485047087073326,0.016893818974494934,0.04313056543469429,-0.10287545621395111,0.015606294386088848,-0.027211077511310577,-0.01964537985622883,-0.015007986687123775,0.04497786983847618,0.00947756040841341,0.06862430274486542,0.010401957668364048,0.0003936132707167417,0.017978496849536896,-0.034799639135599136,-0.0007666097953915596,0.003425278002396226,-0.00009524112101644278,0.032697830349206924,-0.03701857477426529,-0.05844593048095703,0.03801627457141876,-0.02074914239346981,0.02023393101990223,0.017509635537862778,-0.028043847531080246,0.04299478605389595,0.007416284643113613,-0.03397378325462341,0.06231602653861046,-0.0003424897731747478,-0.050520919263362885,0.044132500886917114,-0.08010122925043106,-0.05203946679830551,-0.05361507087945938,-0.04950609430670738,0.018553918227553368,0.07913149148225784,-0.0013369203079491854,0.018310926854610443,0.03963049501180649,-0.0123039735481143,0.023901764303445816,0.029336242005228996,0.014813373796641827,-0.008511165156960487,0.03664155676960945,-0.0005727262469008565,0.0160624161362648,-0.0006707105785608292,0.04937456175684929,0.05370381847023964,-0.019920483231544495,-0.016823142766952515,2.510280354384236e-34,-0.009301816113293171,-0.018545765429735184,0.028665047138929367,-0.009700477123260498,0.02412700094282627,-0.02308305725455284,-0.07238104939460754,-0.0049128225073218346,0.03054593876004219,-0.02995057962834835,0.001736848265863955]'
SET
  @TechnicalDesignVector_b3b7d769 = N'[-0.03143906220793724,0.022288303822278976,-0.02334754914045334,-0.02154294028878212,0.0033548094797879457,0.0010433696443215013,0.053255412727594376,0.015090569853782654,0.02114083617925644,-0.0023344990331679583,-0.02626178227365017,0.003466937458142638,0.030082810670137405,0.0566856674849987,-0.02022063173353672,0.016049355268478394,-0.0025590963196009398,0.005288798362016678,-0.049472179263830185,-0.008543609641492367,-0.0216069333255291,-0.0075401864014565945,-0.02307024598121643,-0.005873562302440405,-0.02361348271369934,-0.04412240535020828,-0.0096270851790905,-0.029867127537727356,0.042109932750463486,0.01785476692020893,-0.011220308020710945,0.07004716992378235,-0.05767234414815903,-0.04936203733086586,0.0000016422864064224996,-0.04228094965219498,0.023800699040293694,0.028884634375572205,0.02060440368950367,-0.021683469414711,0.0010855983709916472,0.03237057477235794,0.03639310970902443,-0.030884649604558945,-0.029735002666711807,-0.0744866281747818,-0.03468151018023491,0.010500683449208736,0.017866307869553566,-0.007758717518299818,0.01149380300194025,0.058449748903512955,0.04065820574760437,0.0010749847861006856,0.08440191298723221,0.0196238923817873,0.027268368750810623,-0.04502011463046074,0.039366431534290314,0.04709131270647049,0.009832617826759815,-0.049509499222040176,-0.03356225788593292,-0.0335414856672287,0.06598272174596786,-0.011026878841221333,0.026957765221595764,-0.02915809489786625,0.010648603551089764,0.036437638103961945,0.16999535262584686,0.0006678662612102926,0.03848574683070183,0.02036190964281559,-0.036260172724723816,0.04076364263892174,0.0003610323474276811,-0.03401428088545799,-0.03987893834710121,0.002333612646907568,0.0934319943189621,0.055642738938331604,-0.032811325043439865,-0.012422068044543266,0.03744780272245407,0.07335320115089417,0.016324875876307487,0.011526019312441349,-0.04716949164867401,-0.03953910246491432,0.0797019898891449,-0.015386479906737804,0.030433041974902153,-0.04465574398636818,-0.0745319202542305,-0.030042989179491997,0.01815451681613922,-0.13562698662281036,0.02222568728029728,-0.08032947778701782,-0.01819853112101555,0.03040001355111599,0.002642605919390917,0.06395675241947174,0.036612145602703094,0.05121197551488876,-0.0317835696041584,-0.02508402056992054,-0.02930597960948944,-0.014005150645971298,-0.044748105108737946,0.018122941255569458,0.027741556987166405,0.04654031991958618,0.024326471611857414,0.01684291660785675,-0.0428304523229599,-0.004947215784341097,-0.02647104486823082,-0.01362766232341528,0.03317287191748619,-0.046760909259319305,-0.009229715913534164,0.006230645347386599,0.018861722201108932,0.06854233890771866,0.005780216306447983,-0.08556559681892395,-0.04543740302324295,0.00248444895260036,-0.007126157637685537,0.011490616016089916,0.06284148246049881,-0.059918712824583054,0.01339906919747591,0.022996878251433372,0.03738222271203995,-0.0636451467871666,0.09015166759490967,0.0055337827652692795,0.007300931960344315,0.004695374518632889,0.007805356755852699,0.00248684617690742,0.0186711847782135,0.025311490520834923,0.011610649526119232,-0.016319992020726204,-0.02993885986506939,0.03397926688194275,-0.03233330324292183,0.027799265459179878,0.024792643263936043,-0.01612507738173008,-0.036522820591926575,0.0054227993823587894,0.007208679802715778,0.03125033155083656,-0.03999069705605507,-0.008215826004743576,0.0010695906821638346,0.014451110735535622,0.0960325300693512,-0.006723100785166025,-0.010564183816313744,-0.0008465668652206659,-0.10954880714416504,-0.015595373697578907,0.047349464148283005,-0.021913273259997368,0.0027885257732123137,-0.010562130250036716,-0.025161338970065117,0.04288017749786377,0.028519198298454285,0.03394119068980217,0.06818964332342148,0.1122327372431755,-0.03261886164546013,-0.030993051826953888,0.013147748075425625,-0.09367915242910385,-0.004253358580172062,0.05023561045527458,-0.04666401818394661,-0.018707668408751488,-0.045712947845458984,0.077718086540699,-0.012115863151848316,-0.003426311071962118,-0.02043616771697998,0.006938598118722439,-0.07033690810203552,-0.02298959158360958,0.02170099876821041,-0.025925787165760994,-0.010266887955367565,-0.09465111047029495,0.033332280814647675,-0.010299756191670895,0.008216114714741707,0.019581569358706474,0.08117890357971191,0.019034361466765404,0.04163792356848717,-0.011191689409315586,-0.026531033217906952,-0.009977749548852444,-0.006414931267499924,-0.06817947328090668,-0.01600661873817444,0.011329389177262783,-0.0007847361848689616,0.0026481677778065205,-0.0009504260960966349,0.02869304083287716,-0.0019103927770629525,-0.018698804080486298,-0.0896630734205246,0.018799372017383575,-0.04588432237505913,0.048907432705163956,0.026736149564385414,-0.025926416739821434,0.0378219410777092,0.02710375189781189,0.020200105383992195,-0.020317845046520233,0.050959039479494095,0.008175807073712349,0.0065001570619642735,-0.031818732619285583,0.016683775931596756,-0.024081239476799965,0.028271598741412163,-0.02510991133749485,0.02981504425406456,0.013389457948505878,0.0005556202377192676,0.024446025490760803,-0.0251441840082407,0.009280911646783352,-0.005696035455912352,0.0417666994035244,0.053734198212623596,0.008903734385967255,-0.05136564001441002,0.025108542293310165,-0.03934895619750023,-0.003782279323786497,0.033142246305942535,0.06355184316635132,0.006873881444334984,-0.026538478210568428,-0.047071170061826706,-0.0030026931781321764,-0.013845756649971008,-0.026012307032942772,0.01854240708053112,0.026714252308011055,-0.007578016724437475,0.0012699677608907223,0.012251580134034157,-0.008434807881712914,0.01436611358076334,0.011712231673300266,0.0035398397594690323,0.00976514257490635,0.0557866096496582,0.03285016864538193,-0.0017407059203833342,-0.0068029616959393024,-0.02768242545425892,0.007354606408625841,0.05765734612941742,0.014911039732396603,0.005855252034962177,0.0012679587816819549,-0.009361570701003075,-0.028291290625929832,-0.021354226395487785,-0.04533291608095169,-0.007799191866070032,-0.011933290399610996,-0.020464960485696793,0.03038242645561695,0.006071109790354967,-0.0018060737056657672,0.002070023212581873,-0.061667297035455704,-0.01885274425148964,-0.021942080929875374,-0.01487674843519926,-0.00447977427393198,-0.0254841186106205,-0.04715707525610924,0.0012392085045576096,0.07561630755662918,0.019450437277555466,0.04842345789074898,-0.011383994482457638,0.029582364484667778,0.003912537824362516,-0.0027385118883103132,-0.02613614872097969,0.05094035342335701,-0.006985642947256565,0.025407472625374794,0.031126709654927254,0.04973999038338661,-0.01396085973829031,-0.008146809414029121,-0.003634243505075574,-0.02191888727247715,0.010328657925128937,-0.002732108114287257,-0.009574885480105877,-0.04325186833739281,-0.04476822167634964,0.005791863426566124,0.00893557257950306,-0.02242572046816349,0.010900485329329967,0.012221365235745907,-0.03459396958351135,-0.03666996955871582,-0.0008093055803328753,0.015669943764805794,0.027221176773309708,-0.0025338532868772745,-0.015360544435679913,-0.07658830285072327,0.05009801685810089,0.04303362965583801,-0.01344862300902605,0.00023105180298443884,-0.05969289690256119,0.000843954854644835,0.05506482720375061,0.010047927498817444,0.008369888179004192,-0.014317242428660393,-0.008994857780635357,0.03132430091500282,-0.03061951883137226,-0.02268759161233902,-0.05758880451321602,-0.0063943564891815186,-0.03573579713702202,-0.0011208392679691315,0.04197211191058159,-0.012842736206948757,0.0007572966278530657,0.0029008276760578156,-0.01927844062447548,0.018009986728429794,0.009676197543740273,0.020835300907492638,-0.009127154015004635,-0.02046222798526287,0.0467512272298336,0.04042256623506546,0.015295681543648243,-0.04651793837547302,-0.04244639351963997,0.017065269872546196,0.045064207166433334,0.04162895679473877,-0.016730213537812233,-0.051505230367183685,0.001497866353020072,0.006226144265383482,0.013076269067823887,-0.020036330446600914,0.007441625464707613,-0.09651042520999908,0.02772369608283043,0.001756250043399632,0.02986496314406395,0.028338374570012093,0.04022974893450737,0.0005390841979533434,0.027957776561379433,0.03397785872220993,-0.01993704028427601,-0.019432466477155685,0.014866255223751068,0.02107493206858635,-0.023233992978930473,0.0369010865688324,-0.006829140707850456,0.053685422986745834,-0.09637361764907837,-0.03268815949559212,0.025923969224095345,-0.05686914548277855,-0.011972518637776375,0.03287891671061516,0.006612613797187805,0.014950974844396114,-0.02096637897193432,0.08339228481054306,0.02697802148759365,-0.015492360107600689,0.03712134808301926,-0.010573174804449081,-0.06004900112748146,0.03997385874390602,-0.00010903582005994394,-0.077177032828331,-0.04914652928709984,-0.07472125440835953,-0.020791959017515182,-0.05797981470823288,-0.017376111820340157,-0.004387404303997755,-0.02283296547830105,-0.0886368602514267,0.06200725585222244,0.005724901799112558,-0.020322078838944435,-0.03213832899928093,0.05960286036133766,0.018743358552455902,0.010674106888473034,0.007722975220531225,0.013761899434030056,-0.040608495473861694,0.008836278691887856,-0.027852321043610573,-0.03765806183218956,0.035819366574287415,0.03807086870074272,0.008769047446548939,0.006577353458851576,-0.10850504040718079,-0.02801883965730667,0.035101160407066345,0.0573604442179203,-0.029613105580210686,0.03476490452885628,0.03406549245119095,0.05030464008450508,-0.0379568450152874,0.013123804703354836,-0.0931166559457779,0.0008280219626612961,0.052345965057611465,0.050132010132074356,0.01564474031329155,-0.007838542573153973,0.02143668755888939,-0.017775781452655792,0.007867873646318913,-0.02891561947762966,-0.04086272418498993,0.07338878512382507,0.0052212816663086414,-0.00936440285295248,0.06093724071979523,0.08149295300245285,0.03218040242791176,-0.026492729783058167,-0.00003684996045194566,0.011949462816119194,-0.06017250567674637,0.0030850654002279043,-0.06272703409194946,0.02950524538755417,-0.031469836831092834,-0.04684527963399887,0.008508100174367428,-0.003968739416450262,0.03394800424575806,0.02662874199450016,-0.009793572127819061,0.051287028938531876,-0.027013935148715973,-0.010718418285250664,0.001781557803042233,-0.0061563472263514996,0.09307146817445755,-0.001892190077342093,0.006623951252549887,-0.008694889955222607,0.015068176202476025,-0.019685758277773857,0.035135604441165924,-0.019139260053634644,0.020379668101668358,-0.03580313175916672,0.05039981007575989,-0.040266454219818115,0.008506705053150654,0.02407272346317768,0.023180101066827774,0.025079909712076187,-0.006315445993095636,-0.02330675721168518,0.004188550170511007,0.034633323550224304,0.007660225033760071,0.022183174267411232,0.0002993506786879152,0.03654875606298447,-0.03042162023484707,-0.02818397618830204,0.024926023557782173,-0.0022194150369614363,-0.03116467036306858,-0.03305725380778313,-0.024065187200903893,-0.04961353540420532,-0.001889313803985715,-0.0012544379569590092,-0.009896996431052685,-0.008036484010517597,0.016016144305467606,0.05920560657978058,-0.04213673621416092,-0.002214306266978383,-0.01501922495663166,0.029850291088223457,-0.028898175805807114,0.0849279910326004,0.03559387847781181,0.015819260850548744,-0.03414369374513626,0.020956508815288544,0.03067047894001007,-0.013677618466317654,0.003647839417681098,-0.03685915097594261,-0.0025313985534012318,-0.0007555671618320048,0.05444345250725746,0.03942651301622391,-0.010352232493460178,-0.04263172298669815,-0.08097817003726959,-0.08545729517936707,-0.026848500594496727,0.022515051066875458,-0.029680555686354637,0.010131322778761387,-0.02514539286494255,0.010097538121044636,-0.051186125725507736,0.02347998507320881,0.003171666758134961,0.016643507406115532,-0.03832535073161125,-0.024191785603761673,-0.043608665466308594,0.050819460302591324,-6.22831787958152e-33,0.013144205324351788,0.028478257358074188,-0.011897800490260124,0.058810487389564514,-0.05588255822658539,-0.016877103596925735,0.016904378309845924,-0.005957873072475195,0.02036433480679989,-0.005162954796105623,-0.024909865111112595,-0.021505091339349747,-0.0033301429357379675,0.0015003943117335439,0.0346132293343544,0.0050092474557459354,-0.007460994645953178,-0.009885120205581188,0.030800074338912964,0.030293839052319527,0.03623185306787491,0.02353082224726677,0.019373811781406403,-0.021854061633348465,-0.05791851878166199,-0.005252834875136614,0.012227704748511314,0.031940117478370667,-0.06099168211221695,0.04160885512828827,-0.021931322291493416,-0.013071033172309399,-0.022736718878149986,-0.019386552274227142,0.01672794111073017,-0.033059000968933105,-0.050495248287916183,-0.02270265482366085,0.03873281553387642,0.00561590027064085,0.045627374202013016,-0.0002998574636876583,-0.041945844888687134,0.008621511049568653,0.022169673815369606,0.0029500904493033886,0.009745685383677483,0.030778517946600914,-0.04490325227379799,0.02576667256653309,0.006494048051536083,0.02274281345307827,-0.008894775062799454,0.09118559211492538,0.014477265067398548,0.06555696576833725,0.015081758610904217,-0.027636488899588585,-0.05834049731492996,-0.0055391183122992516,-0.055902399122714996,-0.009683013893663883,-0.0150000536814332,0.059159040451049805,0.048471029847860336,0.03222813829779625,0.010485176928341389,-0.010382245294749737,-0.046704456210136414,-0.013438282534480095,-0.014989377930760384,0.01435831468552351,-0.003878173651173711,0.08374977111816406,0.04535198211669922,0.00023873626196291298,-0.02208530157804489,-0.0012259675422683358,0.015282495878636837,-0.00670830300077796,-0.024011703208088875,0.01586121693253517,0.01284729689359665,0.023290760815143585,-0.04071032255887985,0.04234232380986214,-0.018472572788596153,-0.024539828300476074,-0.05226700380444527,0.006140363402664661,-0.07465492933988571,0.05502547323703766,-0.005916362162679434,0.028721578419208527,-0.003574285190552473,0.011029382236301899,-0.0002415792114334181,0.029023222625255585,0.016333991661667824,-0.04393575340509415,-0.0032578103709965944,-0.013774072751402855,-0.004888330120593309,-0.005435845348984003,0.00862812902778387,0.016762806102633476,0.005406588315963745,-0.02298375591635704,-0.05236022174358368,-0.006992574781179428,0.035848550498485565,0.02322922646999359,-0.024756010621786118,-0.026867637410759926,0.05172276869416237,0.0009456262341700494,0.014469178393483162,-0.00129635666962713,0.05623021349310875,0.11262669414281845,-0.035094548016786575,0.012957540340721607,0.003997519612312317,0.015523185953497887,0.03702224791049957,-0.018706636503338814,-0.08145388215780258,-0.05930393189191818,0.014219054020941257,-0.06477786600589752,-0.00779108889400959,-0.018014051020145416,2.6326722490921384e-7,-0.05452124401926994,0.023865099996328354,-0.0565389059484005,-0.08441193401813507,0.004556480795145035,-0.002222699113190174,0.011341175995767117,-0.004719893913716078,0.053717050701379776,-0.04183090105652809,0.03817654773592949,0.011418234556913376,0.02046714723110199,0.020962761715054512,-0.020076151937246323,0.0006539174355566502,0.040335919708013535,-0.02843901887536049,-0.053382113575935364,-0.03394953906536102,-0.0363391637802124,0.012305433861911297,0.06991083920001984,-0.005826814100146294,0.01207506563514471,0.06713671237230301,0.050532080233097076,-0.00938851572573185,-0.00211176835000515,-0.03310331702232361,-0.020449480041861534,-0.0954226553440094,-0.04667046666145325,0.035549093037843704,0.008579974994063377,0.024721264839172363,-0.01703234203159809,0.011668063700199127,0.024982783943414688,0.0064274612814188,0.018764734268188477,0.04169287532567978,-0.029434068128466606,-0.01984170265495777,0.059575505554676056,-0.005220703314989805,-0.04531926289200783,-0.05366767942905426,-0.03384777531027794,0.03640192374587059,-0.03959789499640465,-0.021383261308073997,0.0071717905811965466,0.005123880226165056,0.003527489025145769,-0.008014148101210594,0.005135130602866411,0.03517523407936096,0.04053725302219391,0.038288217037916183,-0.021349888294935226,-0.05176739767193794,0.025405187159776688,-0.006617537699639797,0.06530095636844635,0.022247033193707466,-0.007832258008420467,3.1602208236809753e-34,0.0035174803342670202,-0.021175334230065346,0.024442477151751518,0.010671190917491913,0.011652233079075813,-0.05182180181145668,-0.05444864556193352,0.007957179099321365,0.05894528329372406,-0.06191403791308403,-0.029602790251374245]'
SET
  @HasCustomProps_b3b7d769 = 0
SET
  @HasCustomEvents_b3b7d769 = 0
SET
  @RequiresData_b3b7d769 = 0
SET
  @DependencyCount_b3b7d769 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_b3b7d769 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_b3b7d769 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_b3b7d769 = 0
SET
  @ID_b3b7d769 = 'BA8D5132-64E5-412B-A1B1-F5BC1D64F938'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_b3b7d769,
  @Name = @Name_b3b7d769,
  @Version = @Version_b3b7d769,
  @VersionSequence = @VersionSequence_b3b7d769,
  @Title = @Title_b3b7d769,
  @Description = @Description_b3b7d769,
  @Type = @Type_b3b7d769,
  @Status = @Status_b3b7d769,
  @DeveloperName = @DeveloperName_b3b7d769,
  @DeveloperEmail = @DeveloperEmail_b3b7d769,
  @DeveloperOrganization = @DeveloperOrganization_b3b7d769,
  @SourceRegistryID = @SourceRegistryID_b3b7d769,
  @ReplicatedAt = @ReplicatedAt_b3b7d769,
  @LastSyncedAt = @LastSyncedAt_b3b7d769,
  @Specification = @Specification_b3b7d769,
  @FunctionalRequirements = @FunctionalRequirements_b3b7d769,
  @TechnicalDesign = @TechnicalDesign_b3b7d769,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_b3b7d769,
  @TechnicalDesignVector = @TechnicalDesignVector_b3b7d769,
  @HasCustomProps = @HasCustomProps_b3b7d769,
  @HasCustomEvents = @HasCustomEvents_b3b7d769,
  @RequiresData = @RequiresData_b3b7d769,
  @DependencyCount = @DependencyCount_b3b7d769,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_b3b7d769,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_b3b7d769,
  @HasRequiredCustomProps = @HasRequiredCustomProps_b3b7d769,
  @ID = @ID_b3b7d769;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_73021178 NVARCHAR(MAX),
@Name_73021178 NVARCHAR(500),
@Version_73021178 NVARCHAR(50),
@VersionSequence_73021178 INT,
@Title_73021178 NVARCHAR(1000),
@Description_73021178 NVARCHAR(MAX),
@Type_73021178 NVARCHAR(255),
@Status_73021178 NVARCHAR(50),
@DeveloperName_73021178 NVARCHAR(255),
@DeveloperEmail_73021178 NVARCHAR(255),
@DeveloperOrganization_73021178 NVARCHAR(255),
@SourceRegistryID_73021178 UNIQUEIDENTIFIER,
@ReplicatedAt_73021178 DATETIMEOFFSET,
@LastSyncedAt_73021178 DATETIMEOFFSET,
@Specification_73021178 NVARCHAR(MAX),
@FunctionalRequirements_73021178 NVARCHAR(MAX),
@TechnicalDesign_73021178 NVARCHAR(MAX),
@FunctionalRequirementsVector_73021178 NVARCHAR(MAX),
@TechnicalDesignVector_73021178 NVARCHAR(MAX),
@HasCustomProps_73021178 BIT,
@HasCustomEvents_73021178 BIT,
@RequiresData_73021178 BIT,
@DependencyCount_73021178 INT,
@TechnicalDesignVectorEmbeddingModelID_73021178 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_73021178 NVARCHAR(MAX),
@HasRequiredCustomProps_73021178 BIT,
@ID_73021178 UNIQUEIDENTIFIER
SET
  @Namespace_73021178 = N'CRM/Analytics'
SET
  @Name_73021178 = N'InsightsPanel'
SET
  @Version_73021178 = N'1.0.0'
SET
  @VersionSequence_73021178 = 1
SET
  @Title_73021178 = N'Insights Panel'
SET
  @Description_73021178 = N'AI-powered insights panel with recommendations'
SET
  @Type_73021178 = N'Other'
SET
  @Status_73021178 = N'Deprecated'
SET
  @Specification_73021178 = N'{}'
SET
  @FunctionalRequirements_73021178 = N'## Insights Panel

### Purpose
Display actionable insights and recommendations.

### Features
- AI-generated recommendations
- Priority ranking
- Action items
- Success metrics'
SET
  @TechnicalDesign_73021178 = N'## Implementation

### Props
- insights: Array of insight items
- priority: Priority filter
- onActionClick: Action handler'
SET
  @FunctionalRequirementsVector_73021178 = N'[0.017052266746759415,0.023877760395407677,-0.021156612783670425,-0.0672345906496048,0.05003688856959343,-0.002713550813496113,0.0027057540137320757,0.034052763134241104,0.04263507202267647,0.0032153453212231398,0.01966950297355652,0.07371525466442108,0.029102006927132607,0.18146823346614838,-0.0012845239834859967,-0.04181569814682007,-0.008215420879423618,-0.0007663553114980459,0.016454782336950302,0.00123286759480834,0.010983194224536419,0.024084314703941345,-0.016038859263062477,0.049450457096099854,-0.03472616523504257,0.007126198150217533,0.001994311809539795,-0.007345879916101694,0.05278228595852852,-0.03412772715091705,0.0005374374450184405,0.015965329483151436,-0.03833993151783943,-0.006598360370844603,0.0000022174535843078047,-0.02979690581560135,-0.014294194057583809,-0.008163043297827244,-0.033423371613025665,-0.02761221118271351,0.00759102264419198,-0.02433016709983349,0.03665267676115036,-0.012447848916053772,0.024162517860531807,0.013491162098944187,-0.018302079290151596,0.03538549318909645,-0.006730159744620323,0.0004154804046265781,-0.012919898144900799,0.05346178263425827,-0.023435086011886597,-0.039209913462400436,0.014217142947018147,-0.028255537152290344,-0.0040236832574009895,-0.0359036922454834,0.03388523682951927,0.00335774221457541,0.031695231795310974,-0.0294366255402565,-0.025169478729367256,-0.055889394134283066,0.06708601862192154,0.0235429797321558,0.023886781185865402,-0.11946012824773788,0.03346560150384903,0.031644828617572784,0.10631511360406876,-0.0010174933122470975,-0.010304349474608898,-0.06244339793920517,0.01942320540547371,-0.018228944391012192,-0.024430228397250175,0.01041347160935402,0.014791346155107021,0.029981989413499832,-0.05435902997851372,-0.00527590699493885,0.002532482845708728,-0.010686865076422691,0.005511320196092129,0.03204861655831337,-0.03566739708185196,0.003999908920377493,-0.009885820560157299,0.013116888701915741,0.05882478877902031,-0.005875390954315662,0.026299091055989265,-0.002471401821821928,-0.11221840977668762,-0.05077007785439491,0.03601193055510521,-0.003707220545038581,0.03213980421423912,-0.018366442993283272,0.049255937337875366,0.03391432762145996,-0.00376548757776618,0.03727931156754494,0.00962719228118658,0.05495254695415497,0.007228540722280741,-0.010042054578661919,-0.06202055513858795,0.01589745655655861,-0.018097897991538048,0.016373811289668083,0.017326125875115395,0.07275527715682983,-0.010565225966274738,-0.013099119998514652,-0.060197614133358,0.008082667365670204,-0.05969615280628204,0.03498555347323418,0.08268807828426361,0.034449514001607895,0.020031891763210297,0.008292284794151783,-0.020772237330675125,0.03899133577942848,-0.04714943468570709,0.0017635889817029238,-0.03546881303191185,0.01733792945742607,0.014136426150798798,0.00535807479172945,-0.016467956826090813,0.02782285585999489,0.021168839186429977,-0.0016431898111477494,0.008969026617705822,-0.02839522995054722,-0.002436186419799924,-0.006486228201538324,0.07065995782613754,-0.005608921404927969,-0.055385150015354156,0.0263828095048666,0.0003194869786966592,-0.032883066684007645,0.0073829712346196175,0.033336903899908066,0.011885842308402061,0.01777615211904049,-0.026677822694182396,-0.04613699018955231,-0.0012770158937200904,0.031422656029462814,-0.01684844121336937,0.011017603799700737,0.04629622772336006,0.03463868051767349,0.011737862601876259,0.09048867225646973,0.012546309269964695,0.018021252006292343,0.03628651052713394,-0.0019792469684034586,-0.02463006041944027,0.025973474606871605,-0.025156736373901367,-0.009266157634556293,-0.02981332503259182,0.007258963771164417,-0.04058156907558441,-0.0200149305164814,-0.0006071897805668414,0.03647065907716751,0.020341461524367332,0.06571613252162933,0.055358100682497025,0.025434177368879318,-0.029698999598622322,0.017280887812376022,-0.0070830523036420345,-0.16138389706611633,0.026150820776820183,0.04276800900697708,0.007881814613938332,-0.03503138944506645,0.00868750549852848,0.043555885553359985,-0.008835436776280403,-0.033280644565820694,0.0067480155266821384,0.01697186566889286,-0.08235853910446167,0.04076666384935379,-0.012047518976032734,-0.02003057301044464,-0.020404966548085213,-0.060875579714775085,-0.004008871968835592,0.008801587857306004,-0.02662893943488598,-0.04065346717834473,0.08258047699928284,0.09709946066141129,0.025084789842367172,-0.03496457263827324,-0.011745074763894081,-0.027092499658465385,-0.011495512910187244,-0.019800178706645966,0.020672617480158806,-0.005235160235315561,-0.05518877133727074,0.032647762447595596,-0.055531661957502365,0.027759578078985214,0.02869517356157303,0.03543921560049057,-0.035530731081962585,0.049997083842754364,-0.07120300084352493,0.02440529689192772,-0.0867825597524643,0.0005706176161766052,0.03485936298966408,0.08241412788629532,0.06117851659655571,-0.0009634791640564799,0.04006480053067207,0.04703007638454437,0.002558418083935976,0.0055990517139434814,0.028563547879457474,0.01214197464287281,-0.0412505567073822,0.02805227041244507,0.07617931067943573,0.10493713617324829,-0.011404772289097309,-0.02863575704395771,0.0009128632373176515,-0.004432475659996271,-0.0010870638070628047,0.035138290375471115,0.03300534561276436,-0.0175110325217247,-0.04283784329891205,0.009071312844753265,-0.017344240099191666,-0.01095994096249342,0.011931666173040867,0.028646929189562798,0.04097572714090347,-0.018298208713531494,-0.06529658287763596,-0.009556322358548641,-0.10282660275697708,-0.02020243927836418,-0.006820047274231911,0.09165018051862717,-0.007942578755319118,-0.03125488758087158,-0.01809271238744259,0.026682822033762932,0.03496430814266205,-0.01598719321191311,0.032789990305900574,-0.0491521991789341,-0.0272060539573431,0.01481733750551939,-0.020634997636079788,-0.016094038262963295,0.04271818697452545,-0.0020337761379778385,-0.0038725321646779776,0.021524006500840187,-0.06991312652826309,0.02173146978020668,-0.013080227188766003,-0.02882183901965618,0.04838089644908905,0.015793239697813988,-0.015075395815074444,0.04801688715815544,-0.005319274961948395,0.03557442128658295,0.056108005344867706,-0.05178822949528694,0.018997758626937866,-0.09712237119674683,0.014673889614641666,-0.01575346849858761,0.0029099376406520605,-0.012507466599345207,-0.0038739927113056183,-0.0416361466050148,-0.06762910634279251,0.0406760610640049,0.007495712488889694,0.0866951271891594,-0.013201680034399033,0.060701679438352585,-0.034625403583049774,-0.010957892052829266,-0.03671763092279434,0.05469997972249985,0.030065741389989853,-0.009966895915567875,0.025209296494722366,-0.03610823675990105,0.008504312485456467,0.01982150599360466,-0.025429580360651016,0.035139139741659164,-0.011044454760849476,-0.031259335577487946,-0.06690526753664017,-0.005398161709308624,-0.022374967113137245,0.10526935011148453,0.007059223484247923,-0.0000715908026904799,-0.02259589172899723,0.0396432988345623,-0.014577591791749,-0.034626882523298264,-0.044991131871938705,-0.016794079914689064,-0.02346772886812687,0.0015874268719926476,0.02597452700138092,-0.06860537827014923,-0.003910444211214781,0.022344477474689484,0.003933953121304512,-0.027228238061070442,-0.04309529811143875,0.00021126007777638733,-0.011665903963148594,-0.021625014021992683,0.032412320375442505,-0.0057235779240727425,-0.005927191115915775,-0.014918895438313484,0.007658037822693586,-0.01492640282958746,-0.0303554255515337,-0.03951776400208473,-0.09972742944955826,0.023428108543157578,0.03074253723025322,0.05004735663533211,0.000458572874777019,-0.03452805429697037,0.021827466785907745,-0.04327914118766785,0.004672711249440908,0.0015034822281450033,-0.03377135097980499,0.011745043098926544,0.02221434935927391,0.05289371311664581,-0.03036603145301342,-0.03364025801420212,-0.021588923409581184,0.015556267462670803,0.03348065912723541,0.0068130092695355415,0.016187254339456558,-0.01680445671081543,-0.008112439885735512,0.019166506826877594,0.017142945900559425,0.055820316076278687,0.01576095074415207,-0.06198408082127571,0.038493234664201736,0.00042657816084101796,-0.002254085848107934,-0.0018641581991687417,0.036302972584962845,-0.020857857540249825,0.03710963577032089,0.025431787595152855,0.029481053352355957,-0.02106344699859619,-0.005543851759284735,-0.0020534906070679426,-0.01248798705637455,0.055377546697854996,-0.023785578086972237,0.02239874191582203,-0.08002980798482895,-0.04766951501369476,0.010095982812345028,-0.057999137789011,-0.05182201787829399,-0.03621813282370567,-0.0073964400216937065,0.010411631315946579,-0.006448130123317242,-0.009163682349026203,-0.01753581315279007,-0.026849063113331795,0.02858095057308674,0.004258681554347277,0.12392027676105499,0.04336785897612572,0.001369766891002655,0.06267399340867996,-0.0711245909333229,0.007139621302485466,0.018607664853334427,-0.0057150572538375854,0.006794947665184736,-0.029178544878959656,0.021479126065969467,-0.03602997586131096,0.051225826144218445,0.0009882611921057105,0.011988595128059387,0.025993525981903076,0.036371130496263504,-0.010508198291063309,-0.0024875171948224306,-0.05780059099197388,0.0644870400428772,-0.05352095887064934,-0.011172544211149216,0.017293348908424377,-0.011254068464040756,0.05907542631030083,-0.03513514623045921,0.003293621353805065,-0.08190441131591797,-0.06746676564216614,-0.008809501305222511,-0.023613937199115753,-0.009278479032218456,-0.015540193766355515,-0.041488781571388245,0.01299135759472847,0.03916803374886513,-0.006961296312510967,0.002568985568359494,-0.04661363363265991,0.018636714667081833,0.043157536536455154,-0.000877712678629905,0.030592164024710655,0.021421892568469048,-0.059706393629312515,-0.07329235225915909,-0.008666167967021465,-0.030861470848321915,-0.043672483414411545,0.009521017782390118,0.002783879404887557,-0.0050374469719827175,0.0021077755372971296,0.08132610470056534,0.038712769746780396,-0.050262175500392914,-0.012086231261491776,0.024760538712143898,0.05328322574496269,0.013433856889605522,-0.014565630815923214,-0.005417564418166876,-0.011828714050352573,0.047826725989580154,-0.005199654959142208,-0.0028034758288413286,-0.03471781685948372,-0.007714707404375076,-0.014454838819801807,-0.009955091401934624,-0.030482245609164238,-0.05604729801416397,0.005312297958880663,-0.025040296837687492,0.03280847519636154,-0.009684153832495213,-0.06887907534837723,-0.027255278080701828,0.019699662923812866,-0.002464997349306941,0.017397712916135788,-0.01671096682548523,0.049050815403461456,0.018434880301356316,-0.019300583750009537,-0.025389162823557854,0.06654927134513855,-0.02958027273416519,0.01717197336256504,-0.07652249932289124,0.0069026523269712925,-0.07511670887470245,0.043818023055791855,-0.005478033795952797,0.015293530188500881,0.02081475965678692,-0.027095463126897812,0.0059151919558644295,0.0020953661296516657,-0.009418283589184284,-0.003897326532751322,0.007094503380358219,-0.018307913094758987,0.007124669384211302,0.061014242470264435,-0.027432184666395187,-0.05817636102437973,0.01778826303780079,0.08940984308719635,-0.008695289492607117,0.021024253219366074,0.01693587750196457,-0.05348539724946022,0.001893904060125351,0.0160274226218462,0.030958572402596474,-0.003416998079046607,0.02073417231440544,-0.02697093039751053,0.03498348966240883,-0.0030288391280919313,0.016523772850632668,0.05282687395811081,-0.09423099458217621,-0.010928546078503132,0.007089417893439531,-0.009021475911140442,-0.026119181886315346,-0.013844785280525684,0.013521227985620499,0.062007442116737366,-0.028231726959347725,0.010855602100491524,0.000014266810467233881,0.007152393460273743,-0.02401922084391117,-0.0262192003428936,-0.0064958855509757996,-0.01805402711033821,-0.0345611609518528,0.0015185923548415303,0.03826747462153435,-0.0028604785911738873,-0.013254153542220592,-0.10365786403417587,-0.11935336142778397,0.016162825748324394,-0.00352448970079422,-6.843942638206383e-33,-0.013895641081035137,-0.0348195843398571,-0.039263103157281876,-0.0054787578992545605,-0.023035114631056786,-0.05332115665078163,0.024780170992016792,-0.030703017488121986,-0.0153607577085495,0.03880758211016655,-0.021093811839818954,-0.0018094381084665656,0.009142959490418434,-0.010672873817384243,0.032236479222774506,0.025329910218715668,0.03053581528365612,0.009264207445085049,0.00649127084761858,0.043248292058706284,-0.002801559865474701,0.011489709839224815,-0.039490390568971634,-0.035130247473716736,-0.034586042165756226,0.026870040223002434,-0.022210489958524704,0.033921387046575546,-0.009036621078848839,0.024752894416451454,0.01179577223956585,-0.00961950235068798,0.004461457021534443,-0.05198704078793526,0.026607682928442955,-0.00922728143632412,-0.002481922274455428,-0.022286629304289818,0.01562411431223154,0.00540365232154727,0.024375978857278824,-0.021844998002052307,-0.025371160358190536,0.013534932397305965,-0.03876848146319389,-0.00400376133620739,0.05375734344124794,0.00622730003669858,-0.014960919506847858,-0.009358295239508152,-0.04331037402153015,0.0008481935947202146,-0.04286199063062668,0.08795005083084106,-0.029627203941345215,0.1012112945318222,0.012396400794386864,0.026751521974802017,-0.018920935690402985,-0.02993851527571678,-0.014131910167634487,0.04173479601740837,-0.0038855657912790775,0.0410822331905365,-0.039277639240026474,0.04678982496261597,-0.016625460237264633,-0.010057833045721054,0.0071747745387256145,0.05814891681075096,-0.011207868345081806,0.012533511035144329,-0.015849413350224495,-0.06855796277523041,-0.07067173719406128,0.026387261226773262,-0.02497408725321293,0.03395841643214226,0.021593984216451645,0.043035831302404404,0.030477289110422134,0.025452101603150368,-0.02383638173341751,0.01636366918683052,0.023081708699464798,-0.0313229113817215,-0.05515590310096741,0.0018159551545977592,-0.005254706367850304,0.05305655300617218,-0.024806946516036987,0.045058589428663254,-0.04779022932052612,0.010408489964902401,0.02762199379503727,0.022440852597355843,0.009232408367097378,-0.017307676374912262,0.015616248361766338,0.0033519971184432507,-0.03312884271144867,0.027186201885342598,-0.00867601577192545,0.015667004510760307,-0.0011752924183383584,0.007164950482547283,0.0012021111324429512,-0.017793754115700722,-0.0221449863165617,0.01236012764275074,0.011604253202676773,0.03734014928340912,-0.033839721232652664,-0.038816530257463455,-0.014169338159263134,-0.008173043839633465,0.003248706692829728,0.0911024883389473,-0.002397330245003104,0.06619665771722794,0.03039749339222908,-0.003062724368646741,-0.01895175129175186,-0.022627927362918854,-0.030985133722424507,-0.03186682611703873,-0.037518035620450974,-0.0005401601665653288,0.05252492055296898,-0.042015381157398224,-0.03098100982606411,0.010605928488075733,2.954405999844312e-7,-0.046351999044418335,0.04315125569701195,-0.04195006191730499,-0.023681459948420525,0.009610345587134361,0.03487372770905495,0.023547137156128883,0.011037657968699932,0.03269965946674347,0.04808773472905159,0.034910570830106735,-0.009712427854537964,-0.02863011322915554,0.02365124225616455,-0.031139273196458817,-0.051304277032613754,-0.00369314500130713,-0.032225076109170914,-0.083491250872612,-0.00420554680749774,-0.016645222902297974,0.04291406646370888,0.035286687314510345,0.00923516508191824,0.03233465552330017,0.007079336792230606,-0.03949177637696266,-0.03277282416820526,-0.02663920633494854,0.005446251481771469,0.07347127795219421,0.017834050580859184,-0.02519168332219124,-0.01779182441532612,-0.02111000195145607,-0.02245035208761692,-0.0402706079185009,-0.015137811191380024,0.01534420158714056,-0.03814813867211342,-0.023399027064442635,0.019003544002771378,0.0004188302846159786,-0.011696012690663338,0.05050639808177948,0.019552744925022125,-0.01367064006626606,0.00332074286416173,-0.04425535723567009,0.007525393273681402,-0.012855163775384426,-0.013148761354386806,0.016677869483828545,-0.0006559517350979149,0.025468574836850166,0.01853262446820736,-0.011427871882915497,0.006223006173968315,0.04975191131234169,-0.06092040240764618,-0.013286036439239979,-0.018726283684372902,-0.006728029809892178,0.053743600845336914,0.008055069483816624,-0.03509842976927757,0.00705530634149909,2.952095416270562e-34,-0.004118952434509993,0.010732199065387249,0.019640861079096794,-0.008826326578855515,0.025728778913617134,-0.01863199658691883,-0.09380078315734863,0.014070888049900532,0.054088786244392395,-0.023488599807024002,-0.04199197515845299]'
SET
  @TechnicalDesignVector_73021178 = N'[-0.023684782907366753,0.011028353124856949,-0.02278871461749077,-0.04051423445343971,0.009664553217589855,-0.033065613359212875,0.005320628639310598,0.05347071960568428,0.01307141873985529,-0.03816986456513405,0.008953442797064781,0.055114369839429855,0.011651379056274891,0.09755098819732666,0.02588649094104767,-0.009960644878447056,0.02274075523018837,0.04332631453871727,-0.018215643242001534,-0.010888556949794292,0.017723331227898598,-0.014929029159247875,-0.0028733613435178995,0.05202832072973251,0.06017855927348137,-0.036117635667324066,0.01713448576629162,-0.04388349503278732,0.06762649118900299,-0.021907467395067215,-0.00027847354067489505,0.06218323856592178,-0.02785249799489975,-0.0025235298089683056,0.0000013607203754872899,-0.002185967518016696,0.015007426962256432,0.003425652626901865,0.019397899508476257,-0.05846081301569939,-0.04889298230409622,-0.03037341684103012,0.0394400879740715,-0.0507502444088459,-0.020942630246281624,-0.0426296629011631,-0.05015464499592781,0.02739294059574604,-0.01663476787507534,-0.007774213794618845,-0.012715060263872147,-0.0003851048822980374,0.04757935181260109,0.00027492144727148116,0.06296121329069138,0.0047590164467692375,0.01244058832526207,-0.0959751084446907,0.0472138412296772,0.019397547468543053,0.019986413419246674,-0.027867641299962997,0.026233259588479996,-0.024896422401070595,0.038343317806720734,-0.02731621079146862,0.10531079024076462,-0.010996383614838123,0.008544094860553741,-0.013384057208895683,0.05851724371314049,0.032992009073495865,0.0012162079801782966,-0.009516469202935696,-0.016285490244627,-0.038648463785648346,0.012998474761843681,-0.012014074251055717,-0.01818906143307686,0.024075772613286972,0.06037549301981926,-0.014983247965574265,-0.013268934562802315,0.029239827767014503,0.021563217043876648,0.05202127620577812,-0.03129090368747711,0.026606349274516106,-0.030110390856862068,-0.01872352324426174,0.029150236397981644,-0.006995667237788439,0.04042386636137962,-0.029011642560362816,-0.05582357570528984,0.0015411756467074156,0.012999535538256168,-0.05478528141975403,-0.004789054859429598,-0.06316318362951279,0.07037955522537231,0.04966903477907181,0.01834729313850403,-0.015909496694803238,0.047508902847766876,0.0894835814833641,0.02126641757786274,0.025591060519218445,-0.036221519112586975,0.020901935175061226,-0.024970175698399544,0.021623173728585243,0.04115249216556549,0.10012343525886536,-0.03738772124052048,0.020785467699170113,-0.0680776908993721,-0.033606138080358505,-0.0561804324388504,-0.005934725981205702,-0.009545070119202137,-0.02883094735443592,-0.005640378687530756,-0.043310392647981644,-0.0005078301182948053,0.030650097876787186,0.02145533449947834,-0.062382183969020844,-0.029579022899270058,0.05400780215859413,0.024199653416872025,-0.001805637264624238,0.0076429531909525394,0.020419003441929817,-0.013898132368922234,-0.01140544842928648,0.00005569818677031435,-0.03638039901852608,0.012033332139253616,0.012687435373663902,0.04004565626382828,0.01923420839011669,-0.015093958005309105,0.06562547385692596,-0.03264148533344269,0.003610242623835802,0.009241913445293903,-0.052092406898736954,-0.02673545852303505,0.048561375588178635,-0.022714383900165558,-0.015060195699334145,0.04278937727212906,-0.021297747269272804,-0.06928274780511856,0.03890571370720863,0.02356400527060032,0.04781864583492279,0.00981779396533966,-0.020544489845633507,-0.00993733387440443,0.035414621233940125,0.05771203339099884,0.008265827782452106,-0.03695184737443924,0.015134917572140694,-0.13459694385528564,-0.015006382949650288,-0.0383073091506958,-0.02327914349734783,0.046277862042188644,-0.03846283257007599,-0.04306131228804588,0.05046664550900459,0.024358605965971947,0.010932783596217632,0.0021020835265517235,-0.003741802182048559,-0.05379036068916321,-0.026943083852529526,-0.021778378635644913,-0.048072099685668945,-0.013622922822833061,0.03954291716217995,0.026645531877875328,-0.030897090211510658,-0.04036187753081322,0.011514007113873959,0.037089359015226364,-0.024577157571911812,-0.025540899485349655,0.03540462255477905,-0.07581736892461777,-0.02659042738378048,-0.03609717637300491,-0.014150808565318584,-0.025878963991999626,-0.002406950341537595,-0.018817972391843796,0.06540423631668091,0.025041043758392334,-0.03467556834220886,0.04804857820272446,0.02386292815208435,0.04026856645941734,-0.032053880393505096,-0.01176639273762703,-0.005405066069215536,-0.07323814928531647,-0.0391419492661953,-0.036833327263593674,-0.00750378891825676,-0.00291759567335248,0.012365876697003841,-0.006400370970368385,0.0014085028087720275,0.008254588581621647,-0.007812109310179949,-0.08567783236503601,0.00903999898582697,-0.05819154530763626,0.05917327105998993,0.0050473823212087154,0.012094774283468723,0.1141594648361206,-0.014473803341388702,0.04364398121833801,-0.02205328829586506,0.03835444152355194,0.002740259515121579,0.019431322813034058,-0.02975371666252613,-0.008792534470558167,0.017711983993649483,0.05580367520451546,-0.004368365276604891,0.002414508257061243,0.01908786967396736,0.0018517267890274525,0.05170075595378876,-0.050653792917728424,0.06646381318569183,0.011254046112298965,0.044303614646196365,-0.03751734271645546,0.005506258457899094,-0.05652962625026703,-0.009959321469068527,-0.04948674514889717,0.016179369762539864,0.0035944636911153793,0.05183780565857887,-0.0143275773152709,-0.04197130724787712,0.00034955269074998796,-0.033934980630874634,-0.01854950375854969,-0.02168986015021801,0.02990131452679634,0.04496699571609497,0.0018914052052423358,-0.008534766733646393,0.0052367341704666615,0.006492300424724817,0.044114116579294205,0.04310081526637077,0.03570645675063133,0.00872182659804821,0.0043505895882844925,-0.005901915952563286,-0.03213325887918472,-0.020319541916251183,0.012000289745628834,0.0001402000052621588,0.0324290506541729,0.015701774507761,0.01332440972328186,0.049909260123968124,0.0038020103238523006,-0.04533243924379349,0.002884811256080866,-0.017526332288980484,0.002923501655459404,0.03812712803483009,-0.015587729401886463,0.008000939153134823,0.0005945549928583205,-0.011994442902505398,0.04802500829100609,-0.12679918110370636,0.018411315977573395,0.026618678122758865,0.019743017852306366,-0.040393661707639694,0.0034493273124098778,-0.046601004898548126,-0.07140322029590607,0.0471968799829483,0.0003348005993757397,0.05936046317219734,0.0317031666636467,0.0490761436522007,-0.008905187249183655,0.004490751773118973,-0.02681143395602703,0.07583564519882202,-0.04826416075229645,0.024442609399557114,0.057407621294260025,0.07347062975168228,-0.008078470826148987,0.026548665016889572,-0.016729891300201416,-0.03340785577893257,-0.02538289688527584,-0.01498283352702856,-0.02729523368179798,-0.040362946689128876,-0.043829455971717834,0.05709482729434967,-0.02559567801654339,-0.025440258905291557,-0.015744967386126518,0.011364514008164406,-0.05201844871044159,-0.05616232752799988,0.032047875225543976,-0.012993686832487583,0.059726566076278687,0.03570817410945892,0.040878694504499435,-0.028045540675520897,0.02568732760846615,0.01329556293785572,-0.026710931211709976,0.02776055969297886,-0.00817199982702732,0.02737690508365631,-0.001459261286072433,0.03742049261927605,-0.003214408876374364,-0.012022665701806545,-0.016044195741415024,-0.007300470024347305,-0.01696041226387024,-0.023662619292736053,-0.051202237606048584,-0.018412981182336807,-0.07223562896251678,0.026273343712091446,0.02907954901456833,0.04235238581895828,0.011026968248188496,-0.0346214585006237,-0.010644866153597832,0.015173736028373241,0.01996816322207451,-0.024776535108685493,-0.034950073808431625,0.01472137775272131,0.07749781012535095,0.03037923574447632,0.11824968457221985,-0.017415719106793404,-0.03864043951034546,0.05385591834783554,0.05789519473910332,0.01820177212357521,0.029219120740890503,-0.03153156489133835,0.007612651214003563,0.04112362861633301,0.0036531370133161545,0.0020901618991047144,-0.01849348098039627,-0.062096960842609406,0.033824190497398376,0.02077162265777588,-0.03426649793982506,-0.003374851541593671,0.0274828914552927,-0.011484237387776375,0.016403410583734512,0.007840988226234913,0.02767520770430565,-0.04309193789958954,0.01611481048166752,-0.01582995243370533,-0.004812438506633043,0.032322630286216736,-0.03556646779179573,-0.024221904575824738,-0.0958092138171196,0.026767224073410034,0.0303962305188179,0.004209035541862249,-0.009647532366216183,-0.005967718083411455,0.032420068979263306,-0.008570985868573189,-0.027480868622660637,0.13270099461078644,0.04467112571001053,-0.015095737762749195,0.012286219745874405,-0.05613403022289276,-0.0020382567308843136,0.01408250629901886,0.03992591053247452,0.07953829318284988,-0.030656641349196434,-0.028377916663885117,-0.032563675194978714,-0.024050846695899963,-0.10616797208786011,-0.025508156046271324,0.030247749760746956,-0.045119330286979675,0.025939373299479485,0.016877293586730957,-0.06674657762050629,-0.014214730821549892,0.015471122227609158,0.00026335305301472545,0.036259207874536514,-0.052837125957012177,0.004686320200562477,-0.03623342514038086,-0.012216967530548573,-0.03326516970992088,0.003900178475305438,0.0680372565984726,0.023389242589473724,-0.00882862787693739,-0.06275526434183121,-0.06386075913906097,-0.009313328191637993,0.019358064979314804,0.007160068489611149,-0.031465303152799606,0.01701158657670021,-0.00993653479963541,0.05876636505126953,-0.011030159890651703,-0.0006266965065151453,-0.03138822317123413,0.014945300295948982,0.11538054794073105,0.03227124735713005,0.014916359446942806,-0.03447702154517174,-0.0012258446076884866,-0.046223148703575134,-0.0005158536368981004,0.01750383898615837,-0.07439539581537247,0.06858160346746445,0.13905957341194153,-0.00399480015039444,0.04328892007470131,-0.006232012528926134,0.03415224701166153,-0.022844647988677025,0.005013955291360617,0.007681229151785374,0.015193666331470013,0.011464223265647888,0.025575483217835426,-0.003910352010279894,0.06807392835617065,-0.016817526891827583,-0.03246244043111801,0.010486535727977753,0.028535155579447746,0.01952509954571724,-0.019581904634833336,0.007588893640786409,-0.06108067184686661,-0.09985993057489395,-0.031224485486745834,-0.026062222197651863,0.04275894537568092,-0.03644257038831711,-0.008331297896802425,-0.0059091211296617985,-0.009863799437880516,0.005146968178451061,0.05050478130578995,-0.004290595650672913,0.007777440827339888,-0.009071280248463154,0.010844352655112743,-0.03237498179078102,0.09695962071418762,0.033398691564798355,-0.010301588103175163,-0.012108445167541504,0.03339756652712822,-0.006302032619714737,-0.01608157530426979,-0.0059968251734972,-0.009291859343647957,0.0008986194734461606,-0.009655398316681385,0.010334918275475502,-0.024288443848490715,-0.030750783160328865,0.052917804569005966,-0.0342010073363781,-0.029933763667941093,-0.017347799614071846,0.008479908108711243,-0.07298047095537186,0.04176681116223335,0.02093641087412834,0.052020322531461716,0.002011004136875272,-0.001365669653750956,0.015720175579190254,-0.04703738912940025,0.02578609436750412,0.03326131030917168,0.021702658385038376,-0.027430346235632896,0.072993703186512,0.03651832416653633,0.020807601511478424,0.028135016560554504,0.01324936281889677,0.008766543120145798,-0.0635574609041214,0.02462690882384777,-0.01964236982166767,0.002143429359421134,0.01509135402739048,0.0035446719266474247,-0.008044334128499031,0.028953365981578827,-0.006521815434098244,-0.030444419011473656,-0.016811560839414597,0.009521137923002243,-0.023465672507882118,-0.03743492811918259,0.01567269116640091,-0.07964686304330826,0.012831326574087143,-0.04204981029033661,0.0402873195707798,0.005188046954572201,0.009794444777071476,-0.06037140265107155,-0.11023784428834915,-0.00403008284047246,0.0303329024463892,-5.610173522284065e-33,0.018724806606769562,0.017294317483901978,-0.020583996549248695,-0.05148931220173836,0.02060689777135849,-0.017944928258657455,-0.02291737124323845,-0.0314929261803627,-0.013485300354659557,-0.03136806562542915,-0.01713341660797596,-0.06245174631476402,-0.005920074414461851,0.006238054484128952,-0.006441866979002953,0.024580497294664383,0.005235778633505106,-0.01462193951010704,-0.012729030102491379,0.027186891064047813,0.021551864221692085,-0.015849675983190536,-0.02478286810219288,0.06788405776023865,-0.038823895156383514,0.011898473836481571,-0.03561031445860863,0.04749954864382744,-0.07224386185407639,0.033874042332172394,-0.05198223516345024,-0.011024883948266506,-0.013522944413125515,-0.07515314221382141,0.04600603133440018,0.04711809754371643,0.000047146397264441475,-0.03885685279965401,0.02146325260400772,-0.005947057623416185,0.05294099450111389,0.013976401649415493,-0.002723264740779996,0.04284040629863739,-0.006210248917341232,0.01665540412068367,-0.018454616889357567,0.02632259577512741,0.004213705658912659,0.014758361503481865,-0.04038873687386513,0.03564165532588959,-0.015861865133047104,0.03834502026438713,0.0030907243490219116,0.04723131284117699,0.05404305458068848,-0.021441062912344933,-0.025039365515112877,-0.02270590327680111,-0.05895427614450455,0.00048162179882638156,0.019859539344906807,0.07490269094705582,0.008374466560781002,0.03890576958656311,0.0066878898069262505,-0.012229877524077892,-0.0013532774755731225,0.07412393391132355,-0.011441645212471485,-0.012848460115492344,0.0112451845780015,0.014120819047093391,0.008815698325634003,0.02254411205649376,-0.0459892563521862,0.007190041244029999,0.024976972490549088,0.013487095944583416,0.019366389140486717,0.044075801968574524,-0.007961422204971313,0.046682678163051605,-0.0013585129054263234,-0.05597008764743805,0.03018982708454132,0.007422521244734526,-0.03945650905370712,0.02002776972949505,-0.030362457036972046,0.05724344775080681,-0.01086626760661602,0.06617551296949387,-0.013640075922012329,-0.026659781113266945,0.01041543111205101,0.043643444776535034,-0.002119127893820405,-0.0010502669028937817,-0.019603753462433815,-0.044402651488780975,-0.03379190340638161,0.002505207434296608,-0.018789660185575485,0.0273129940032959,-0.025405364111065865,0.0066060153767466545,0.0035032916348427534,0.0058104428462684155,0.02028096839785576,0.04584098234772682,-0.0367879644036293,0.005172243341803551,0.00818850938230753,-0.0015203250804916024,0.022162271663546562,0.019562287256121635,0.002902494976297021,0.04113904759287834,-0.0048918528482317924,0.035294972360134125,-0.03191807493567467,0.050137631595134735,0.016288364306092262,-0.015294568613171577,-0.06548099964857101,-0.030710605904459953,-0.009757890366017818,-0.03464250639081001,0.02032334916293621,-0.014168985188007355,2.3786533631664497e-7,-0.06504610180854797,-0.023015731945633888,-0.04606058821082115,-0.03294427692890167,-0.0013295408571138978,0.037276409566402435,0.03050100803375244,-0.02096019685268402,0.019084937870502472,-0.05540197342634201,-0.0037754089571535587,-0.0020099813118577003,0.01375009585171938,0.04569665342569351,-0.05631905421614647,-0.09848552942276001,0.028098544105887413,0.0028596294578164816,-0.04771142080426216,0.03936533257365227,-0.03393160179257393,0.035897575318813324,0.04539352282881737,-0.008495884016156197,0.012640470638871193,0.03907798230648041,-0.0048871091566979885,0.014770961366593838,0.0010707752080634236,-0.016372036188840866,0.002624745015054941,-0.05321463197469711,-0.0483841747045517,0.0002331974101252854,0.01390750054270029,0.0195122379809618,-0.014460223726928234,0.0020099894609302282,0.0022276933304965496,-0.029462452977895737,-0.0007385849603451788,0.004206801764667034,-0.004406726453453302,-0.07513637095689774,0.04788215458393097,-0.00696125254034996,-0.05052511394023895,0.044128768146038055,0.007935824804008007,0.024601174518465996,-0.0589236281812191,-0.024994412437081337,-0.020613165572285652,-0.020009392872452736,0.0025967988185584545,-0.026355233043432236,-0.026489675045013428,0.013728034682571888,0.046240441501140594,-0.028033556416630745,0.002417746465653181,-0.02885374426841736,0.016626255586743355,-0.022868763655424118,-0.000455173576483503,-0.002826955635100603,-0.03511065989732742,2.496206794186764e-34,-0.027206284925341606,-0.055390022695064545,-0.002571824472397566,0.008600075729191303,0.03442999720573425,-0.012002854607999325,-0.016153229400515556,0.004611706826835871,0.06581766903400421,-0.03588252514600754,-0.011905264109373093]'
SET
  @HasCustomProps_73021178 = 0
SET
  @HasCustomEvents_73021178 = 0
SET
  @RequiresData_73021178 = 0
SET
  @DependencyCount_73021178 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_73021178 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_73021178 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_73021178 = 0
SET
  @ID_73021178 = '9790872E-55C5-4ED9-9F4A-55078EC02359'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_73021178,
  @Name = @Name_73021178,
  @Version = @Version_73021178,
  @VersionSequence = @VersionSequence_73021178,
  @Title = @Title_73021178,
  @Description = @Description_73021178,
  @Type = @Type_73021178,
  @Status = @Status_73021178,
  @DeveloperName = @DeveloperName_73021178,
  @DeveloperEmail = @DeveloperEmail_73021178,
  @DeveloperOrganization = @DeveloperOrganization_73021178,
  @SourceRegistryID = @SourceRegistryID_73021178,
  @ReplicatedAt = @ReplicatedAt_73021178,
  @LastSyncedAt = @LastSyncedAt_73021178,
  @Specification = @Specification_73021178,
  @FunctionalRequirements = @FunctionalRequirements_73021178,
  @TechnicalDesign = @TechnicalDesign_73021178,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_73021178,
  @TechnicalDesignVector = @TechnicalDesignVector_73021178,
  @HasCustomProps = @HasCustomProps_73021178,
  @HasCustomEvents = @HasCustomEvents_73021178,
  @RequiresData = @RequiresData_73021178,
  @DependencyCount = @DependencyCount_73021178,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_73021178,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_73021178,
  @HasRequiredCustomProps = @HasRequiredCustomProps_73021178,
  @ID = @ID_73021178;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_76a721d7 NVARCHAR(MAX),
@Name_76a721d7 NVARCHAR(500),
@Version_76a721d7 NVARCHAR(50),
@VersionSequence_76a721d7 INT,
@Title_76a721d7 NVARCHAR(1000),
@Description_76a721d7 NVARCHAR(MAX),
@Type_76a721d7 NVARCHAR(255),
@Status_76a721d7 NVARCHAR(50),
@DeveloperName_76a721d7 NVARCHAR(255),
@DeveloperEmail_76a721d7 NVARCHAR(255),
@DeveloperOrganization_76a721d7 NVARCHAR(255),
@SourceRegistryID_76a721d7 UNIQUEIDENTIFIER,
@ReplicatedAt_76a721d7 DATETIMEOFFSET,
@LastSyncedAt_76a721d7 DATETIMEOFFSET,
@Specification_76a721d7 NVARCHAR(MAX),
@FunctionalRequirements_76a721d7 NVARCHAR(MAX),
@TechnicalDesign_76a721d7 NVARCHAR(MAX),
@FunctionalRequirementsVector_76a721d7 NVARCHAR(MAX),
@TechnicalDesignVector_76a721d7 NVARCHAR(MAX),
@HasCustomProps_76a721d7 BIT,
@HasCustomEvents_76a721d7 BIT,
@RequiresData_76a721d7 BIT,
@DependencyCount_76a721d7 INT,
@TechnicalDesignVectorEmbeddingModelID_76a721d7 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_76a721d7 NVARCHAR(MAX),
@HasRequiredCustomProps_76a721d7 BIT,
@ID_76a721d7 UNIQUEIDENTIFIER
SET
  @Namespace_76a721d7 = N'CRM/Dashboard'
SET
  @Name_76a721d7 = N'PipelineMetricsCards'
SET
  @Version_76a721d7 = N'1.0.0'
SET
  @VersionSequence_76a721d7 = 1
SET
  @Title_76a721d7 = N'Pipeline Metrics Cards'
SET
  @Description_76a721d7 = N'Displays key pipeline metrics in a grid of interactive cards'
SET
  @Type_76a721d7 = N'Other'
SET
  @Status_76a721d7 = N'Published'
SET
  @Specification_76a721d7 = N'{"name":"PipelineMetricsCards","location":"embedded","code":"function PipelineMetricsCards({ metrics, deals, onCardClick }) {\n  const formatCurrency = (amount) => {\n    if (amount >= 1000000) return `$$' + '{(amount / 1000000).toFixed(1)}M`;\n    if (amount >= 1000) return `$$' + '{(amount / 1000).toFixed(0)}K`;\n    return `$$' + '{amount.toFixed(0)}`;\n  };\n\n  return (\n    <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(auto-fit, minmax(150px, 1fr))'', gap: ''12px'', marginBottom: ''20px'' }}>\n      <div \n        style={{ \n          padding: ''16px'', \n          backgroundColor: ''white'', \n          borderRadius: ''8px'', \n          border: ''1px solid #E5E7EB'',\n          cursor: ''pointer'',\n          transition: ''transform 0.2s, box-shadow 0.2s''\n        }}\n        onClick={() => onCardClick(''All Pipeline Deals'', deals, ''all'', null)}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.transform = ''translateY(-2px)'';\n          e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)'';\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.transform = ''translateY(0)'';\n          e.currentTarget.style.boxShadow = ''none'';\n        }}\n      >\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Pipeline Value</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {formatCurrency(metrics.totalValue)}\n        </div>\n      </div>\n      \n      <div \n        style={{ \n          padding: ''16px'', \n          backgroundColor: ''white'', \n          borderRadius: ''8px'', \n          border: ''1px solid #E5E7EB'',\n          cursor: ''pointer'',\n          transition: ''transform 0.2s, box-shadow 0.2s''\n        }}\n        onClick={() => {\n          const activeDeals = deals.filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage));\n          onCardClick(''Active Deals'', activeDeals, ''active'', null);\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.transform = ''translateY(-2px)'';\n          e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)'';\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.transform = ''translateY(0)'';\n          e.currentTarget.style.boxShadow = ''none'';\n        }}\n      >\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Active Deals</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {metrics.activeCount}\n        </div>\n      </div>\n      \n      <div \n        style={{ \n          padding: ''16px'', \n          backgroundColor: ''white'', \n          borderRadius: ''8px'', \n          border: ''1px solid #E5E7EB'',\n          cursor: ''pointer'',\n          transition: ''transform 0.2s, box-shadow 0.2s''\n        }}\n        onClick={() => {\n          const wonDeals = deals.filter(d => d.Stage === ''Closed Won'');\n          onCardClick(''Won Deals'', wonDeals, ''won'', null);\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.transform = ''translateY(-2px)'';\n          e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0,0,0,0.1)'';\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.transform = ''translateY(0)'';\n          e.currentTarget.style.boxShadow = ''none'';\n        }}\n      >\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Win Rate</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#10B981'' }}>\n          {metrics.winRate.toFixed(0)}%\n        </div>\n      </div>\n      \n      <div style={{ padding: ''16px'', backgroundColor: ''white'', borderRadius: ''8px'', border: ''1px solid #E5E7EB'' }}>\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Avg Deal Size</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {formatCurrency(metrics.avgDealSize)}\n        </div>\n      </div>\n      \n      <div style={{ padding: ''16px'', backgroundColor: ''white'', borderRadius: ''8px'', border: ''1px solid #E5E7EB'' }}>\n        <div style={{ fontSize: ''12px'', color: ''#6B7280'', marginBottom: ''4px'' }}>Avg Cycle</div>\n        <div style={{ fontSize: ''24px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {metrics.avgCycleTime.toFixed(0)} days\n        </div>\n      </div>\n    </div>\n  );\n}","description":"Displays key pipeline metrics in a grid of interactive cards","category":"Metrics","type":"metrics","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"],"permissions":["read"]}]},"properties":[{"name":"metrics","type":"object","description":"Object containing totalValue, activeCount, winRate, avgDealSize, avgCycleTime","required":true},{"name":"deals","type":"array","description":"Array of deal objects","required":true},{"name":"onCardClick","type":"function","description":"Callback when a metric card is clicked","required":true}],"events":[{"name":"onMetricClick","description":"Fired when a metric card is clicked","parameters":[{"name":"metricType","type":"string","description":"Type of metric clicked (pipeline, active, won)"},{"name":"deals","type":"array","description":"Filtered deals for the metric"}]}],"usageExample":"```javascript\n<PipelineMetricsCards \n  metrics={calculatedMetrics}\n  deals={allDeals}\n  onCardClick={(title, deals, type) => handleDrillDown(title, deals, type)}\n/>\n```","functionalRequirements":"- Display 5 key metrics: Pipeline Value, Active Deals, Win Rate, Avg Deal Size, Avg Cycle Time\n- Make Pipeline Value, Active Deals, and Win Rate cards clickable\n- Format currency values appropriately (K/M notation)\n- Show hover effects on clickable cards\n- Pass filtered deals to callback on click","technicalDesign":"Component renders a responsive grid of metric cards. Uses formatCurrency helper for value formatting. Implements hover states with transform and shadow effects. Filters deals based on metric type before passing to callback."}'
SET
  @FunctionalRequirements_76a721d7 = N'- Display 5 key metrics: Pipeline Value, Active Deals, Win Rate, Avg Deal Size, Avg Cycle Time
- Make Pipeline Value, Active Deals, and Win Rate cards clickable
- Format currency values appropriately (K/M notation)
- Show hover effects on clickable cards
- Pass filtered deals to callback on click'
SET
  @TechnicalDesign_76a721d7 = N'Component renders a responsive grid of metric cards. Uses formatCurrency helper for value formatting. Implements hover states with transform and shadow effects. Filters deals based on metric type before passing to callback.'
SET
  @FunctionalRequirementsVector_76a721d7 = N'[-0.03366594389081001,-0.008202067576348782,-0.02954839915037155,-0.020700877532362938,0.00924068596214056,0.01137195061892271,-0.018101638182997704,0.03474848344922066,-0.02806342951953411,-0.0022590302396565676,-0.03640585020184517,0.022494450211524963,0.026494989171624184,0.22247235476970673,-0.006629858165979385,-0.06073356047272682,-0.01753549836575985,0.012965572066605091,-0.010390004143118858,0.009076261892914772,0.00033163788612000644,-0.02447494864463806,-0.013960858806967735,0.00209344201721251,0.025762513279914856,-0.015339872799813747,-0.03934120759367943,-0.00845291092991829,-0.01744372397661209,-0.09175541251897812,-0.021187111735343933,0.038165055215358734,-0.05537775158882141,-0.0018464471213519573,0.0000018075913885695627,-0.029472602531313896,-0.021947598084807396,0.014768731780350208,-0.001809559646062553,0.03123549185693264,0.05524513125419617,-0.04057657718658447,0.06637824326753616,0.011214314959943295,-0.003218661295250058,-0.06922796368598938,-0.035981278866529465,0.05442284792661667,-0.004070137161761522,-0.03161819279193878,0.011899116449058056,0.017918964847922325,-0.01895415410399437,-0.011111593805253506,-0.03637518733739853,-0.05421818420290947,-0.006657938472926617,-0.019568515941500664,0.01295576523989439,-0.032985009253025055,-0.025271032005548477,0.0013638387899845839,0.008494267240166664,-0.0625978410243988,0.04867583513259888,-0.008232150226831436,0.05028841271996498,-0.033601973205804825,-0.0064186411909759045,0.008462716825306416,-0.0011826895643025637,-0.00006376248347805813,0.011756678111851215,-0.09078645706176758,-0.020123180001974106,-0.09679677337408066,-0.03250696510076523,0.024494023993611336,0.05576315522193909,-0.019854774698615074,-0.06258510798215866,0.05736445263028145,-0.004034225828945637,0.007263348437845707,0.010987966321408749,0.022117547690868378,-0.012635532766580582,0.01864500530064106,-0.0018321173265576363,0.03531993553042412,0.027550918981432915,-0.018736187368631363,-0.0009296059142798185,-0.011700328439474106,-0.1165890246629715,0.0005173998652026057,0.04805905744433403,0.06462173163890839,0.03259481489658356,-0.012928401120007038,-0.0009471048251725733,0.02793043851852417,0.045069918036460876,0.0266706682741642,0.03719522804021835,0.013094929978251457,-0.02289227396249771,-0.014841798692941666,-0.03498842939734459,0.04970507323741913,0.011602635495364666,-0.02297409065067768,0.004236664157360792,0.02668454684317112,-0.03133177012205124,-0.0029668204952031374,-0.09388530254364014,0.0052530188113451,-0.008437084965407848,0.03206411376595497,0.11507979780435562,-0.01699688844382763,0.0497094951570034,0.03110758773982525,-0.0005641361349262297,0.026357686147093773,-0.02927296981215477,-0.018805015832185745,-0.008672591298818588,0.016698481515049934,-0.02754923142492771,-0.004089255351573229,-0.031528133898973465,-0.042827993631362915,0.0053561716340482235,0.011153743602335453,0.03819722309708595,0.04482389613986015,0.004384604748338461,-0.013232972472906113,0.03794412314891815,0.0024496796540915966,-0.03815850242972374,0.03278346359729767,-0.002894375240430236,0.015877729281783104,-0.0019840530585497618,0.06171770021319389,-0.015342370606958866,0.014464312233030796,0.002709371969103813,0.02994942106306553,0.056617751717567444,0.004914631601423025,-0.04272514209151268,-0.010039735585451126,0.01625450886785984,0.00032909499714151025,-0.01448389608412981,0.03380967676639557,0.03490068390965462,-0.014915850013494492,0.006192243658006191,-0.008660626597702503,0.01125393807888031,0.01753954403102398,0.01102406345307827,0.012284388765692711,0.013584673404693604,-0.030565660446882248,0.041852351278066635,-0.036205973476171494,-0.045838452875614166,-0.011075674556195736,0.040992990136146545,-0.01590493693947792,0.08411909639835358,-0.06185782700777054,0.009334482252597809,-0.021472450345754623,0.025043539702892303,-0.08446104824542999,0.003679436631500721,0.018694614991545677,0.07154054194688797,0.008735504001379013,-0.0689685046672821,0.021418096497654915,-0.017743399366736412,0.022634079679846764,-0.012130087241530418,0.006059880834072828,-0.022363340482115746,0.012064280919730663,0.002564329421147704,-0.010627533309161663,-0.027773192152380943,-0.0353408120572567,0.04415467381477356,0.03644991293549538,0.009282475337386131,-0.051611002534627914,-0.003277685260400176,-0.007957832887768745,0.036605510860681534,0.033453118056058884,0.05592641979455948,-0.03192972019314766,-0.15259112417697906,0.019690068438649178,0.05686409771442413,0.00454719690605998,-0.05149398744106293,0.03108377195894718,-0.037761472165584564,0.020657019689679146,0.01957276649773121,0.017687790095806122,-0.040223926305770874,-0.01627393625676632,-0.03359268978238106,0.02008664608001709,0.02031059004366398,0.01021443959325552,0.1365799903869629,0.019889134913682938,0.013036121614277363,-0.025379665195941925,0.036546699702739716,0.006796920206397772,0.03746770694851875,-0.009677470661699772,0.008039137348532677,0.0496426485478878,-0.005245836917310953,0.05426322668790817,0.046590615063905716,0.1223396509885788,0.0075345635414123535,0.04865512624382973,0.023617621511220932,-0.026381488889455795,-0.02005758136510849,0.015878330916166306,0.015912700444459915,-0.017190266400575638,-0.048799775540828705,-0.0021565931383520365,0.013761715963482857,-0.0009788734605535865,-0.009492949582636356,0.041201312094926834,0.04746760055422783,-0.006552726496011019,0.02817183919250965,-0.00011876192002091557,-0.018503427505493164,-0.018178734928369522,-0.0734652578830719,0.0747222974896431,0.0014207526110112667,-0.010506379418075085,-0.031324852257966995,-0.02708989940583706,0.03877944126725197,-0.01863708347082138,0.04835948348045349,-0.010583228431642056,0.009268388152122498,0.018946737051010132,0.01624240353703499,0.013958120718598366,-0.010568344965577126,0.010738784447312355,-0.012187897227704525,0.04702167585492134,-0.09785207360982895,0.03783006593585014,-0.010283897630870342,-0.005868622567504644,-0.018420346081256866,-0.0032905032858252525,-0.02087104506790638,0.005012559704482555,0.013384987600147724,0.027187583968043327,0.021400948986411095,-0.0024992702528834343,-0.017713721841573715,-0.04975550249218941,0.052988745272159576,-0.038222022354602814,0.03890319913625717,-0.016034118831157684,-0.04709557443857193,0.051828593015670776,-0.08810529112815857,0.04951867461204529,-0.052750688046216965,0.04610786586999893,-0.0453428253531456,-0.022172579541802406,-0.02556401491165161,-0.021774934604763985,-0.03307710960507393,0.01139871310442686,0.016957798972725868,0.024097619578242302,0.045445144176483154,0.08467476814985275,-0.008508219383656979,0.009660794399678707,0.01884852722287178,-0.051554180681705475,0.012112338095903397,-0.006391902919858694,-0.035680994391441345,0.04241357371211052,-0.00004851421545026824,0.0294639952480793,0.03283210098743439,-0.01421211939305067,-0.04963571950793266,-0.0025751187931746244,-0.05087071657180786,0.006412061862647533,-0.0005395616171881557,-0.026932446286082268,-0.022802243009209633,-0.0017986284801736474,-0.003444655565544963,-0.09178048372268677,-0.027439897879958153,-0.0014805838000029325,-0.025088293477892876,0.04126862436532974,-0.033167704939842224,-0.029889142140746117,0.035172056406736374,-0.01743404008448124,-0.03412657603621483,-0.0034259818494319916,-0.029788849875330925,0.009842061437666416,0.03736107051372528,-0.00798969529569149,0.11638463288545609,-0.0026023853570222855,-0.06931757181882858,0.039015788584947586,0.06958965212106705,0.02801920846104622,-0.01675686240196228,-0.03562760725617409,0.005632944405078888,0.04347415640950203,-0.01940959319472313,-0.02823714353144169,-0.013184694573283195,-0.05958417057991028,0.0056435344740748405,0.05276460945606232,0.011849489994347095,-0.00019319518469274044,0.0049954974092543125,0.06115345656871796,0.0088972682133317,-0.020844504237174988,0.021368401125073433,-0.0025837367866188288,-0.0689232274889946,0.020398568361997604,0.04968501627445221,-0.005391913931816816,0.012217644602060318,-0.0340464822947979,0.014893398620188236,0.022875821217894554,-0.014252224937081337,-0.023349350318312645,0.052610043436288834,-0.01789889484643936,0.07331736385822296,-0.03831315413117409,0.07705464959144592,-0.028216591104865074,-0.033211641013622284,-0.01471906527876854,-0.0759616494178772,0.002281897235661745,-0.001524262479506433,-0.010637895204126835,-0.030391108244657516,-0.040184516459703445,-0.02556472271680832,-0.04210111126303673,0.004159437492489815,0.048452526330947876,0.006896074395626783,0.012288463301956654,-0.007542312610894442,0.04710637032985687,0.00551201868802309,-0.01866110973060131,0.02808835357427597,-0.06515992432832718,-0.0050181071273982525,0.037273209542036057,0.0316152460873127,-0.024600431323051453,-0.07285597175359726,-0.03148362413048744,-0.03466223180294037,-0.05099528282880783,0.017901869490742683,-0.004382624756544828,-0.006112049799412489,-0.0225272998213768,0.007020419929176569,0.014056299813091755,-0.001101627596653998,-0.005647049285471439,-0.010570446960628033,0.033916398882865906,-0.026149174198508263,0.0038255809340626,0.004302050918340683,-0.022006576880812645,0.027535628527402878,0.003778755897656083,-0.007836074568331242,0.04441813379526138,0.012187328189611435,0.004205305594950914,-0.0486350879073143,-0.09207848459482193,-0.02370123192667961,0.048898983746767044,-0.0017238546861335635,-0.023830413818359375,-0.0021006532479077578,-0.016240572556853294,0.06183170527219772,-0.005952929146587849,0.01658402755856514,0.015822185203433037,0.004003825597465038,0.006068313028663397,0.04161740466952324,-0.03754638880491257,-0.024813814088702202,-0.010602192021906376,0.016118953004479408,0.024733347818255424,-0.0352669432759285,-0.04840970039367676,0.07550571113824844,-0.050885699689388275,-0.007760823704302311,-0.02304312214255333,0.006314061116427183,0.04606965556740761,-0.08499068021774292,0.0003746383881662041,0.01890808530151844,-0.09891737252473831,-0.0218088049441576,-0.07003768533468246,-0.017810380086302757,-0.02423560619354248,0.03940277919173241,-0.015089056454598904,-0.03262825682759285,-0.013681960292160511,0.04140885919332504,0.027972031384706497,0.007124562747776508,-0.018658354878425598,0.03629448264837265,-0.010163144208490849,0.0038778996095061302,-0.010476507246494293,-0.011742915026843548,-0.08734150230884552,0.01578911393880844,0.04392746463418007,-0.04447426274418831,0.002843281254172325,-0.01419342216104269,0.0026465808041393757,0.009770643897354603,0.0028619172517210245,-0.030208030715584755,-0.029468849301338196,0.014508156105875969,-0.028770219534635544,-0.032211750745773315,-0.03188985958695412,-0.01761232689023018,-0.04478567838668823,-0.01517381239682436,-0.009106484241783619,0.01919257640838623,-0.04962867870926857,-0.025710226967930794,0.010866944678127766,0.04533186927437782,-0.0235618744045496,-0.001179203507490456,-0.022518634796142578,0.06146005541086197,-0.034964822232723236,0.0010759925935417414,0.019322454929351807,0.04895724728703499,0.016075527295470238,-0.025810299441218376,0.022381329908967018,-0.01940147951245308,-0.02942311204969883,0.016623375937342644,0.027358898892998695,-0.034883514046669006,-0.004520968999713659,0.09486201405525208,-0.05088014528155327,0.02196088619530201,-0.013765819370746613,0.0027171429246664047,0.022799232974648476,-0.054909005761146545,-0.013853595592081547,-0.016335921362042427,-0.003197403158992529,-0.00130406953394413,0.026161011308431625,0.04256906732916832,0.06601478159427643,-0.022285183891654015,0.002996673807501793,-0.048473138362169266,0.023424701765179634,0.003966976888477802,-0.011110254563391209,-0.013949218206107616,0.014370497316122055,0.009046843275427818,-0.014254283159971237,0.004882785025984049,0.022078394889831543,0.013042321428656578,0.004592969082295895,-0.043624065816402435,0.024215975776314735,-0.02848254144191742,-6.363606993785595e-33,-0.035433050245046616,-0.035357363522052765,-0.028448229655623436,0.026683367788791656,0.02107638120651245,-0.011671910062432289,0.024718152359128,-0.0425587072968483,0.012613242492079735,0.0040429215878248215,-0.007030779030174017,-0.03689419850707054,0.03035309910774231,-0.007589881774038076,0.007079288829118013,0.010467059910297394,0.03773672878742218,-0.023230278864502907,-0.014049909077584743,0.032088134437799454,-0.028818583115935326,0.00024445902090519667,-0.005680826026946306,-0.02738737128674984,0.00971366185694933,0.018333353102207184,-0.03312711790204048,0.03968535736203194,-0.013314172625541687,0.024851541966199875,-0.0102351950481534,-0.00842284131795168,-0.0431792289018631,-0.05672531947493553,-0.007175017613917589,-0.0605926588177681,-0.026081988587975502,-0.018009206280112267,0.013414270244538784,0.041933443397283554,0.10197135806083679,0.008012923412024975,0.05461021885275841,0.02466871775686741,0.010881857015192509,-0.021662740036845207,0.00863177515566349,0.018085215240716934,-0.016841260716319084,-0.06562075018882751,0.02159808576107025,0.0388256274163723,0.007097663823515177,0.07181672006845474,0.03328113257884979,0.015234684571623802,0.028395896777510643,0.031040074303746223,-0.08938658982515335,0.011268028989434242,-0.033554013818502426,-0.01698189042508602,0.024791091680526733,0.02797645330429077,0.03895385190844536,0.0029363136272877455,-0.01980714313685894,0.03273218497633934,0.026346923783421516,0.02010834403336048,-0.004883299116045237,-0.017175782471895218,0.04721783846616745,-0.06851513683795929,-0.0027661295607686043,0.053433049470186234,0.03296651691198349,0.002747234655544162,0.017558760941028595,0.060440029948949814,0.01297786831855774,0.0029560010880231857,-0.006786814425140619,0.022441072389483452,0.018733125180006027,-0.10619208961725235,0.007324875798076391,-0.016109639778733253,0.014279527589678764,0.05325592681765556,0.012439655140042305,0.05697953328490257,-0.039559461176395416,0.055354438722133636,-0.05073096603155136,-0.000052393326768651605,0.07332947105169296,0.09387973695993423,-0.03453613817691803,-0.08113250136375427,0.07800973951816559,0.021380634978413582,-0.01582229882478714,-0.04883768409490585,0.00923015084117651,0.010221867822110653,-0.012725614942610264,-0.011099684052169323,-0.04046114161610603,0.0068968599662184715,0.02060088701546192,0.043906450271606445,-0.009326926432549953,0.005659603979438543,-0.029672347009181976,-0.014083566144108772,-0.025461332872509956,-0.035251133143901825,0.004628665745258331,0.004877408966422081,0.01019279845058918,0.028769318014383316,-0.007499071769416332,0.04065566882491112,0.04555836692452431,-0.02213078923523426,-0.009742539376020432,0.02328861877322197,0.024665676057338715,0.009857949800789356,-0.011591902934014797,-0.014710667543113232,2.7342423436493846e-7,0.0034590072464197874,0.027900516986846924,-0.08128717541694641,0.04683137312531471,-0.026873819530010223,0.0029199665877968073,-0.0196624044328928,-0.03161802142858505,0.056685470044612885,-0.02686878852546215,0.007867410778999329,-0.009812532924115658,0.01375360693782568,0.042289648205041885,-0.011766341514885426,-0.044955044984817505,0.011568823829293251,-0.04704512655735016,0.00721977511420846,-0.011141365393996239,-0.005877562332898378,0.04089810326695442,0.0866844579577446,0.013746625743806362,0.011203288100659847,-0.010612222366034985,-0.011971419677138329,-0.03825536370277405,-0.021781403571367264,-0.014413777738809586,0.055999238044023514,-0.041954491287469864,-0.031393349170684814,0.061899758875370026,-0.014049064368009567,0.03880273550748825,-0.00959315150976181,-0.028777530416846275,0.03622139245271683,0.045312605798244476,-0.028218988329172134,-0.05418839305639267,-0.002348418114706874,-0.06860719621181488,-0.009953782893717289,-0.05202013999223709,0.01349868718534708,-0.03373373672366142,0.01587863825261593,-0.031927645206451416,0.02867051772773266,0.005093545652925968,0.029337523505091667,-0.016131818294525146,0.029391182586550713,-0.00015125064237508923,0.01676711067557335,0.023272167891263962,-0.015765560790896416,0.00871970970183611,0.012665333226323128,-0.032647740095853806,0.012457973323762417,-0.004148904234170914,0.04922104626893997,-0.041695915162563324,-0.0006432901718653738,3.742582536008674e-34,0.02640668675303459,-0.0019090641289949417,0.03877263516187668,0.03110954351723194,0.04044434428215027,-0.020868495106697083,0.038850076496601105,0.006946945562958717,0.025360697880387306,-0.05754600092768669,-0.012350989505648613]'
SET
  @TechnicalDesignVector_76a721d7 = N'[-0.06404464691877365,-0.01750602014362812,-0.00023732306726742536,-0.03969447314739227,0.0030684235971421003,-0.03415140509605408,0.014187621884047985,0.08132240176200867,-0.07675319910049438,-0.030888155102729797,0.0016157974023371935,0.02067660540342331,0.03138909488916397,0.13743238151073456,0.010157879441976547,-0.10134099423885345,-0.020308967679739,0.02339351363480091,-0.07447830587625504,0.010560283437371254,0.014809999614953995,-0.013044106774032116,-0.028326762840151787,-0.02739088237285614,-0.017710546031594276,-0.03281679004430771,0.008968072943389416,-0.008430742658674717,0.004660375416278839,0.01046844944357872,0.011116872541606426,0.03518972173333168,-0.07196429371833801,0.004332667216658592,0.000001828654717428435,-0.023045873269438744,-0.043356724083423615,0.0440652072429657,0.07258307188749313,-0.011726302094757557,0.030346328392624855,-0.03029416874051094,0.036788418889045715,0.001376610016450286,-0.025061901658773422,-0.10031715780496597,-0.04038581997156143,0.026816310361027718,0.025370631366968155,-0.04042553901672363,0.0058715748600661755,0.02156226895749569,-0.006593399681150913,0.02804466150701046,-0.017161579802632332,0.10655101388692856,-0.01919787935912609,0.011088008992373943,0.0260186605155468,-0.013215679675340652,0.004696772433817387,-0.004251046571880579,-0.0015910929068922997,-0.06816862523555756,0.032806772738695145,-0.01884390600025654,0.04913049563765526,0.0004417684976942837,0.004729104693979025,-0.010239515453577042,0.030092468485236168,0.014064747840166092,0.0010630289325490594,-0.00856660958379507,-0.02774631232023239,0.023251129314303398,-0.010145153850317001,-0.019044695422053337,0.013079085387289524,-0.01727810874581337,-0.053632549941539764,0.025726046413183212,-0.014827730134129524,-0.042912907898426056,-0.002409743843600154,0.054458893835544586,0.025561191141605377,-0.0038496332708746195,-0.06824136525392532,0.010899132117629051,0.025457778945565224,-0.02129601128399372,0.02383490838110447,-0.0011475211940705776,-0.030671430751681328,0.0047005112282931805,0.003729887306690216,-0.0689593032002449,0.05141761898994446,0.045833926647901535,0.04677926376461983,0.053966835141181946,-0.014297658577561378,0.016082890331745148,0.04276029393076897,0.05723981559276581,-0.014364575035870075,-0.09375777840614319,-0.031415943056344986,-0.009105891920626163,0.04020266234874725,-0.033262014389038086,0.019166523590683937,0.02474280819296837,-0.057922665029764175,0.02567736990749836,-0.02498345822095871,-0.0043361736461520195,-0.013975325040519238,0.03145419433712959,0.10732080042362213,-0.01966249570250511,-0.0011345292441546917,-0.014555314555764198,-0.014460024423897266,0.07929733395576477,0.005745980888605118,-0.07611332088708878,-0.003877539886161685,0.032282162457704544,-0.004489615559577942,-0.0034100471530109644,0.008869805373251438,-0.0335388258099556,-0.019009128212928772,-0.024575481191277504,-0.006395178381353617,0.039287202060222626,0.018118347972631454,0.028448013588786125,0.013018060475587845,0.049553029239177704,0.01500125415623188,0.031960196793079376,-0.04723811894655228,0.015321880578994751,0.038580819964408875,0.002204423537477851,-0.0027881718706339598,0.044852644205093384,0.041079550981521606,0.01629493571817875,-0.02411235310137272,-0.014257175847887993,-0.0376172810792923,-0.005812032613903284,0.03626599162817001,-0.004847600124776363,0.012771881185472012,-0.01579705812036991,0.030939459800720215,-0.0597081258893013,0.05848987028002739,0.0292685404419899,-0.015928072854876518,-0.00881052017211914,-0.07461010664701462,0.007625124882906675,0.012358000501990318,-0.026692459359765053,-0.012835637666285038,-0.0306185744702816,-0.03192754089832306,0.009673475287854671,0.014628099277615547,-0.04320129007101059,0.05270257219672203,0.019353823736310005,0.007500827312469482,-0.022450536489486694,0.009630812332034111,-0.06564071029424667,0.028666703030467033,0.021790239959955215,0.06862739473581314,0.007360938470810652,-0.02117534913122654,0.053797174245119095,-0.03145310655236244,-0.026862865313887596,-0.02217414416372776,0.0014119144761934876,0.0003519004094414413,-0.013032064773142338,0.021996252238750458,0.027094023302197456,-0.027768036350607872,0.0038063949905335903,0.03240393474698067,0.010591919533908367,0.013918956741690636,-0.04168017581105232,0.03662433102726936,0.048416342586278915,0.053042590618133545,-0.0166607778519392,0.011836857534945011,-0.06007492542266846,-0.044178806245326996,0.019405657425522804,0.0025189772713929415,0.004899906925857067,-0.011985705234110355,0.019066672772169113,0.012292884290218353,-0.004439562559127808,0.037173036485910416,0.01902838982641697,-0.060466039925813675,-0.0058029210194945335,-0.048102449625730515,-0.03282935172319412,0.08633867651224136,0.01228630356490612,0.18245156109333038,-0.018851717934012413,0.042951226234436035,-0.024147160351276398,-0.0017874866025522351,-0.01574586145579815,0.012079566717147827,-0.037262849509716034,-0.018292604014277458,0.03271805867552757,0.022498538717627525,-0.02574002556502819,-0.009665438905358315,0.05878658592700958,0.027747346088290215,0.007697900757193565,0.004562399350106716,-0.007853078655898571,-0.0296800434589386,-0.0032760014291852713,0.007905866019427776,0.012412214651703835,-0.07568328082561493,0.017441144213080406,-0.0393422432243824,-0.019626373425126076,0.03502500802278519,0.0603402778506279,0.008076218888163567,-0.054133493453264236,0.01928086392581463,-0.05404640734195709,0.09609019011259079,-0.01886550337076187,0.017718350514769554,0.027435302734375,-0.030791109427809715,-0.00048350318684242666,-0.029843773692846298,-0.018184492364525795,0.04366045072674751,0.024637946859002113,0.052659980952739716,0.012506147846579552,0.0014085144503042102,0.02566465735435486,0.0026196171529591084,0.02402748167514801,0.03255392238497734,0.01357701513916254,0.009018369019031525,-0.009903854690492153,-0.07378780841827393,0.036940086632966995,-0.023620743304491043,0.010609093122184277,-0.014449098147451878,-0.035295188426971436,0.017443304881453514,-0.0006189118721522391,-0.016933854669332504,0.013913550414144993,-0.006282500457018614,-0.013262763619422913,-0.007149763870984316,-0.06403326988220215,0.02692360058426857,0.0033353278413414955,0.014745237305760384,-0.027463609352707863,-0.0367945060133934,0.016488613560795784,0.010315940715372562,0.07516123354434967,-0.0026183566078543663,0.015320440754294395,-0.007091295439749956,-0.010036381892859936,-0.00620140228420496,0.0030087099876254797,-0.0509905107319355,0.03282017633318901,0.015172856859862804,0.022137535735964775,0.048443183302879333,0.07100477069616318,-0.052349649369716644,0.03279361501336098,0.01991996541619301,-0.032491154968738556,0.025090886279940605,0.059997495263814926,0.04252058267593384,0.0004899456980638206,0.021122902631759644,0.02941562421619892,0.025808338075876236,-0.033171188086271286,-0.012397498823702335,-0.042018819600343704,-0.06763414293527603,0.07481858879327774,0.01800389587879181,-0.012803660705685616,-0.03960626572370529,-0.008760332129895687,-0.039743490517139435,-0.02846444398164749,0.029382914304733276,0.04277258366346359,-0.0055197542533278465,0.002730059437453747,-0.04584687575697899,-0.032143350690603256,0.00782944168895483,-0.04157815873622894,-0.028081273660063744,-0.050270404666662216,-0.003175677265971899,0.0661567896604538,0.0781712532043457,0.004094697535037994,0.00024661762290634215,-0.011892784386873245,-0.05939770117402077,0.024850646033883095,0.030912872403860092,0.026815876364707947,-0.008092941716313362,-0.03261236101388931,0.01182610634714365,0.038833972066640854,-0.03116631507873535,-0.047114983201026917,-0.016282059252262115,0.01263341773301363,0.002487249905243516,0.05659349635243416,0.046197790652513504,-0.027204886078834534,-0.032481513917446136,0.022594688460230827,0.07333292067050934,0.043002501130104065,-0.008767214603722095,-0.019366901367902756,-0.05071946606040001,0.021157048642635345,0.00041698841960169375,-0.012146231718361378,-0.013303104788064957,-0.03406485915184021,-0.005187592469155788,-0.03043520450592041,0.0324818454682827,0.03881674259901047,0.08208158612251282,-0.034899063408374786,0.05466172844171524,-0.028882881626486778,0.09319839626550674,-0.04367981478571892,-0.001214181655086577,0.03301190212368965,0.004380202852189541,0.033775776624679565,-0.019059613347053528,0.0011260318569839,-0.030446162447333336,-0.03458184376358986,0.020494164898991585,0.0480244979262352,0.011121942661702633,-0.016041012480854988,0.012654253281652927,0.010751358233392239,-0.003179319202899933,0.037132907658815384,0.03981815651059151,-0.06378179043531418,0.06882677227258682,-0.037118248641490936,-0.021684395149350166,0.042339157313108444,0.042207133024930954,-0.05231337249279022,-0.09230849146842957,-0.04155914485454559,-0.052542734891176224,-0.07578185200691223,-0.08329091221094131,0.00027274145395495,-0.018988600000739098,-0.01877075433731079,0.021637864410877228,0.04067216068506241,0.004959318321198225,0.0016839192248880863,0.0011277245357632637,-0.006162992678582668,0.051556140184402466,-0.0033197805751115084,-0.04423726350069046,-0.02197261154651642,-0.02830045484006405,-0.016797395423054695,0.01855485513806343,0.007519069127738476,-0.024951204657554626,0.0019138796487823129,-0.0024660294875502586,-0.06837934255599976,-0.0701388418674469,0.037570931017398834,-0.010614322498440742,-0.012207752093672752,0.060735270380973816,-0.04618703946471214,0.04816276207566261,-0.01796216517686844,-0.04369649663567543,-0.05911923572421074,-0.02453649416565895,0.035633910447359085,0.04616572707891464,-0.07065888494253159,-0.026620466262102127,0.011783582158386707,-0.01529962569475174,0.03234683349728584,-0.03702917695045471,-0.052069082856178284,0.0012636692263185978,0.04202082380652428,-0.0004994076443836093,0.030630847439169884,0.0799182802438736,0.036108408123254776,-0.011419261805713177,0.005299899727106094,0.024634631350636482,-0.05742749944329262,0.049069877713918686,-0.07724309712648392,-0.037675388157367706,-0.005593983456492424,-0.009657067246735096,0.002337314188480377,-0.0404374860227108,-0.026090577244758606,-0.007189082447439432,0.031545449048280716,-0.019966842606663704,-0.0539579838514328,0.027217306196689606,-0.015129976905882359,-0.025364182889461517,0.04109468311071396,-0.033355772495269775,-0.0030527664348483086,0.04098477587103844,0.006792009342461824,-0.05870269238948822,-0.04205954074859619,-0.006100326776504517,0.010019856505095959,-0.017135368660092354,-0.0010200204560533166,-0.012882745824754238,0.04862581938505173,0.03401670977473259,-0.0021409697365015745,-0.01209659967571497,0.015974685549736023,-0.05358780920505524,-0.03883443400263786,-0.023941008374094963,-0.02537064254283905,0.0171955693513155,-0.024872956797480583,0.006402821280062199,-0.005024989601224661,-0.005282432306557894,0.019136827439069748,0.011771932244300842,-0.017639491707086563,0.02389616332948208,-0.00295976921916008,-0.02644416317343712,0.033016353845596313,-0.001323231728747487,0.0305696502327919,-0.053874317556619644,0.022044681012630463,-0.010761057958006859,-0.027797982096672058,0.03267625719308853,0.02635319158434868,-0.019856750965118408,0.021764012053608894,0.06972239166498184,-0.005455478094518185,0.0065384055487811565,0.005371421109884977,0.014052379876375198,0.010152210481464863,-0.0642150342464447,-0.037578728049993515,0.00298811262473464,-0.03583718463778496,0.014187457971274853,0.039117325097322464,-0.01985023356974125,0.016307227313518524,-0.005363186355680227,-0.05779186636209488,-0.060879580676555634,0.013668510131537914,0.018511326983571053,0.013160760514438152,-0.0027487208135426044,-0.01788984425365925,0.040917329490184784,-0.030863840132951736,0.022952241823077202,0.032450661063194275,0.02215711586177349,-0.001142551889643073,-0.04729627072811127,0.0057023437693715096,0.013346327468752861,-6.580320397619223e-33,-0.0652722716331482,0.020615192130208015,-0.012648796662688255,0.008109391666948795,0.01999029703438282,-0.03345372900366783,0.038066986948251724,-0.02889271080493927,0.015150826424360275,-0.016790980473160744,-0.016225382685661316,-0.05098194256424904,0.011676731519401073,0.02028738148510456,-0.03609014302492142,0.005144243128597736,0.047996968030929565,0.021097738295793533,-0.008030613884329796,0.021462928503751755,-0.05262352526187897,-0.005771625321358442,-0.012411846779286861,-0.07790175825357437,-0.03653411939740181,-0.015325983986258507,-0.00012963030894752592,0.03619173914194107,-0.020526297390460968,0.013422501273453236,-0.01004568301141262,0.018738629296422005,-0.05755893513560295,-0.018994903191924095,0.02861483208835125,0.07086855918169022,-0.0846896544098854,-0.033550143241882324,0.04410875588655472,0.04587305709719658,0.10305804759263992,0.0039622546173632145,-0.014485249295830727,0.019225088879466057,0.020964136347174644,-0.018129052594304085,-0.02209295518696308,0.011938049457967281,-0.012524296529591084,-0.08616430312395096,0.03634406998753548,0.026147611439228058,-0.038300562649965286,0.02617647871375084,-0.017007190734148026,0.0194147527217865,0.05040624365210533,0.0645868182182312,-0.04451398551464081,-0.021245507523417473,-0.031865041702985764,-0.024685269221663475,0.026895567774772644,0.05074327811598778,0.0592501200735569,0.0023872232995927334,0.0014724680222570896,0.052716780453920364,-0.05062605440616608,0.018847579136490822,0.004528608173131943,-0.0543861985206604,0.05834420770406723,-0.00546406302601099,0.02384309656918049,0.024827849119901657,0.03955143317580223,0.0018377251690253615,-0.004298289772123098,0.05430314689874649,-0.012037466280162334,0.03576412796974182,0.026693910360336304,0.014958173036575317,-0.0019975551404058933,-0.07904558628797531,0.015580852515995502,-0.004937336780130863,-0.004756968934088945,0.02104586362838745,0.023348474875092506,0.05564830079674721,-0.032350506633520126,0.06173905357718468,-0.015749454498291016,-0.06940766423940659,0.04987872764468193,0.06014544889330864,-0.02611350081861019,-0.023439284414052963,0.1262361705303192,-0.0477616973221302,-0.034892965108156204,0.012736291624605656,-0.015789182856678963,0.010844271630048752,0.007431748788803816,-0.01076882891356945,-0.08120907098054886,0.030588192865252495,0.036237604916095734,0.03498055040836334,-0.005498878192156553,-0.026195788756012917,-0.007813793607056141,0.043497681617736816,-0.011668486520648003,-0.005343151744455099,0.011961466632783413,0.02202272042632103,0.022624965757131577,-0.056062906980514526,-0.052995841950178146,0.04426553100347519,0.0009801421547308564,-0.04769115149974823,-0.03824499621987343,0.039794016629457474,0.03194647654891014,0.011364328674972057,-0.012168954126536846,0.00597608694806695,2.836667079009203e-7,0.03136453777551651,0.029125135391950607,-0.051113348454236984,-0.021532755345106125,0.009739280678331852,-0.04427440091967583,0.004118893761187792,-0.05233538895845413,0.020238390192389488,0.0009647268452681601,-0.005892250221222639,-0.04798654094338417,0.034608036279678345,0.018581751734018326,-0.01676851697266102,-0.0016896106535568833,0.012708217836916447,-0.048953574150800705,-0.016588261350989342,0.06130343675613403,-0.001027520396746695,-0.016960201784968376,0.06409242004156113,0.0005382371600717306,-0.004372291266918182,0.011729583144187927,0.024857191368937492,-0.026475630700588226,0.039334241300821304,-0.046217549592256546,0.02271612361073494,-0.007796269841492176,0.0030344813130795956,0.014782247133553028,0.003197040408849716,0.011993211694061756,-0.003605625359341502,0.01942554861307144,0.014582710340619087,0.07876129448413849,0.022763853892683983,-0.008580949157476425,-0.018096745014190674,-0.07052655518054962,0.005907893646508455,0.008911186829209328,-0.018836019560694695,-0.01694038324058056,-0.08511470258235931,0.004576621111482382,-0.04028520733118057,-0.015621349215507507,-0.0018650325946509838,-0.018470464274287224,0.031313858926296234,0.008995374664664268,-0.01039352547377348,0.03200757876038551,-0.0244805458933115,-0.011559652164578438,-0.004801060073077679,-0.022162405773997307,-0.015039261430501938,-0.035458873957395554,0.025530850514769554,0.021320641040802002,-0.05032860487699509,3.858490411597079e-34,0.03783934563398361,-0.022042619064450264,-0.0007382748299278319,0.07126644253730774,0.042362943291664124,-0.033400099724531174,0.04135972633957863,0.0039322408847510815,0.044804565608501434,-0.03004308231174946,-0.002330233110114932]'
SET
  @HasCustomProps_76a721d7 = 1
SET
  @HasCustomEvents_76a721d7 = 1
SET
  @RequiresData_76a721d7 = 0
SET
  @DependencyCount_76a721d7 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_76a721d7 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_76a721d7 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_76a721d7 = 1
SET
  @ID_76a721d7 = '58241649-8AA4-493D-AFC1-1E33B1B68847'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_76a721d7,
  @Name = @Name_76a721d7,
  @Version = @Version_76a721d7,
  @VersionSequence = @VersionSequence_76a721d7,
  @Title = @Title_76a721d7,
  @Description = @Description_76a721d7,
  @Type = @Type_76a721d7,
  @Status = @Status_76a721d7,
  @DeveloperName = @DeveloperName_76a721d7,
  @DeveloperEmail = @DeveloperEmail_76a721d7,
  @DeveloperOrganization = @DeveloperOrganization_76a721d7,
  @SourceRegistryID = @SourceRegistryID_76a721d7,
  @ReplicatedAt = @ReplicatedAt_76a721d7,
  @LastSyncedAt = @LastSyncedAt_76a721d7,
  @Specification = @Specification_76a721d7,
  @FunctionalRequirements = @FunctionalRequirements_76a721d7,
  @TechnicalDesign = @TechnicalDesign_76a721d7,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_76a721d7,
  @TechnicalDesignVector = @TechnicalDesignVector_76a721d7,
  @HasCustomProps = @HasCustomProps_76a721d7,
  @HasCustomEvents = @HasCustomEvents_76a721d7,
  @RequiresData = @RequiresData_76a721d7,
  @DependencyCount = @DependencyCount_76a721d7,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_76a721d7,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_76a721d7,
  @HasRequiredCustomProps = @HasRequiredCustomProps_76a721d7,
  @ID = @ID_76a721d7;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_0a74a897 NVARCHAR(MAX),
@Name_0a74a897 NVARCHAR(500),
@Version_0a74a897 NVARCHAR(50),
@VersionSequence_0a74a897 INT,
@Title_0a74a897 NVARCHAR(1000),
@Description_0a74a897 NVARCHAR(MAX),
@Type_0a74a897 NVARCHAR(255),
@Status_0a74a897 NVARCHAR(50),
@DeveloperName_0a74a897 NVARCHAR(255),
@DeveloperEmail_0a74a897 NVARCHAR(255),
@DeveloperOrganization_0a74a897 NVARCHAR(255),
@SourceRegistryID_0a74a897 UNIQUEIDENTIFIER,
@ReplicatedAt_0a74a897 DATETIMEOFFSET,
@LastSyncedAt_0a74a897 DATETIMEOFFSET,
@Specification_0a74a897 NVARCHAR(MAX),
@FunctionalRequirements_0a74a897 NVARCHAR(MAX),
@TechnicalDesign_0a74a897 NVARCHAR(MAX),
@FunctionalRequirementsVector_0a74a897 NVARCHAR(MAX),
@TechnicalDesignVector_0a74a897 NVARCHAR(MAX),
@HasCustomProps_0a74a897 BIT,
@HasCustomEvents_0a74a897 BIT,
@RequiresData_0a74a897 BIT,
@DependencyCount_0a74a897 INT,
@TechnicalDesignVectorEmbeddingModelID_0a74a897 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_0a74a897 NVARCHAR(MAX),
@HasRequiredCustomProps_0a74a897 BIT,
@ID_0a74a897 UNIQUEIDENTIFIER
SET
  @Namespace_0a74a897 = N'CRM/Dashboard'
SET
  @Name_0a74a897 = N'DealCards'
SET
  @Version_0a74a897 = N'1.0.0'
SET
  @VersionSequence_0a74a897 = 1
SET
  @Title_0a74a897 = N'Deal Cards'
SET
  @Description_0a74a897 = N'Displays deals in an interactive card layout with open action'
SET
  @Type_0a74a897 = N'Other'
SET
  @Status_0a74a897 = N'Published'
SET
  @Specification_0a74a897 = N'{"name":"DealCards","location":"embedded","code":"function DealCards({ deals, stageColors = {}, onDealClick, onOpenClick }) {\n  return (\n    <div style={{ display: ''grid'', gap: ''12px'' }}>\n      {deals.map((deal, index) => (\n        <div\n          key={deal.ID || index}\n          style={{\n            padding: ''16px'',\n            backgroundColor: ''#F9FAFB'',\n            borderRadius: ''8px'',\n            border: ''1px solid #E5E7EB'',\n            cursor: ''pointer'',\n            transition: ''all 0.2s''\n          }}\n          onClick={() => onDealClick && onDealClick(deal)}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.backgroundColor = ''#F3F4F6'';\n            e.currentTarget.style.transform = ''translateY(-2px)'';\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.backgroundColor = ''#F9FAFB'';\n            e.currentTarget.style.transform = ''translateY(0)'';\n          }}\n        >\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', marginBottom: ''8px'' }}>\n            <div style={{ fontWeight: ''bold'', flex: 1 }}>{deal.DealName}</div>\n            <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n              <div style={{ fontWeight: ''bold'', color: ''#059669'' }}>\n                $' + '{((deal.Amount || 0) / 1000).toFixed(0)}K\n              </div>\n              {onOpenClick && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenClick(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }]);\n                  }}\n                  style={{\n                    background: ''none'',\n                    border: ''none'',\n                    color: ''#6B7280'',\n                    cursor: ''pointer'',\n                    padding: ''2px'',\n                    fontSize: ''14px''\n                  }}\n                  title=\"Open in Explorer\"\n                >\n                  <i className=\"fa-solid fa-up-right-from-square\"></i>\n                </button>\n              )}\n            </div>\n          </div>\n          <div style={{ fontSize: ''14px'', color: ''#6B7280'', marginBottom: ''4px'' }}>\n            {deal.AccountName || ''No Account''}\n          </div>\n          <div style={{ display: ''flex'', justifyContent: ''space-between'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n            <span>Close: {deal.CloseDate ? new Date(deal.CloseDate).toLocaleDateString() : ''TBD''}</span>\n            <span>{deal.Probability || 0}% probability</span>\n          </div>\n          {deal.Stage && stageColors[deal.Stage] && (\n            <div style={{ \n              marginTop: ''8px'',\n              padding: ''4px 8px'',\n              backgroundColor: stageColors[deal.Stage] || ''#6B7280'',\n              color: ''white'',\n              borderRadius: ''4px'',\n              fontSize: ''11px'',\n              display: ''inline-block''\n            }}>\n              {deal.Stage}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}","description":"Displays deals in an interactive card layout with open action","category":"Deals","type":"cards","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"]}]},"properties":[{"name":"deals","type":"array","description":"Array of deal objects to display","required":true},{"name":"stageColors","type":"object","description":"Optional object mapping stage names to colors","required":true},{"name":"onDealClick","type":"function","description":"Callback when a deal card is clicked","required":true},{"name":"onOpenClick","type":"function","description":"Callback when the open icon is clicked, receives entityName and primaryKey array","required":true}],"events":[{"name":"onDealSelect","description":"Fired when a deal card is clicked","parameters":[{"name":"deal","type":"object","description":"The deal object that was clicked"}]},{"name":"onDealOpen","description":"Fired when the open icon is clicked","parameters":[{"name":"entityName","type":"string","description":"Name of the entity (Deals)"},{"name":"primaryKey","type":"array","description":"Array of key-value pairs for composite primary key"}]}],"usageExample":"```javascript\n<DealCards\n  deals={filteredDeals}\n  stageColors={stageColors}\n  onDealClick={(deal) => console.log(''Deal clicked:'', deal)}\n  onOpenClick={(entityName, primaryKey) => callbacks.OpenEntityRecord(entityName, primaryKey)}\n/>\n```","functionalRequirements":"- Display deal cards in a responsive grid\n- Show deal name, amount, account, close date, probability, and stage\n- Format currency values appropriately\n- Include open icon button for external navigation\n- Show hover effects on cards\n- Color-code stage badges","technicalDesign":"Renders deal information in card format with hover states. Uses formatCurrency for amounts. Includes Font Awesome icon for opening deals externally. Stage badges use dynamic colors from stageColors prop."}'
SET
  @FunctionalRequirements_0a74a897 = N'- Display deal cards in a responsive grid
- Show deal name, amount, account, close date, probability, and stage
- Format currency values appropriately
- Include open icon button for external navigation
- Show hover effects on cards
- Color-code stage badges'
SET
  @TechnicalDesign_0a74a897 = N'Renders deal information in card format with hover states. Uses formatCurrency for amounts. Includes Font Awesome icon for opening deals externally. Stage badges use dynamic colors from stageColors prop.'
SET
  @FunctionalRequirementsVector_0a74a897 = N'[-0.010120376944541931,-0.018447402864694595,-0.013489312492311,-0.026303905993700027,0.022069651633501053,0.016718324273824692,0.045063164085149765,0.07693605870008469,-0.04200735688209534,-0.025223586708307266,-0.02470339648425579,0.01369867566972971,0.021452879533171654,0.18218736350536346,-0.01091085746884346,-0.08094757050275803,-0.016070937737822533,-0.02761564590036869,0.023877177387475967,0.014828415587544441,-0.03000529296696186,-0.02490789070725441,-0.02520141936838627,-0.0003720677923411131,0.03685994818806648,-0.01354319415986538,-0.06121775880455971,0.02014048770070076,-0.0023046359419822693,-0.07537636905908585,-0.011226105503737926,0.038751691579818726,-0.05054233968257904,-0.04189620912075043,0.0000018042545661955955,-0.032556381076574326,-0.0085072610527277,-0.004793067928403616,0.015233729965984821,0.028072750195860863,0.035698939114809036,0.004295636899769306,0.06024094298481941,0.012833804823458195,0.006973532028496265,-0.14594009518623352,-0.026805030182003975,0.11662957817316055,-0.01841866783797741,-0.036126744002103806,0.006717746611684561,-0.027098121121525764,0.002371865091845393,-0.013220536522567272,0.023465491831302643,0.013277861289680004,0.007986471988260746,-0.041779935359954834,-0.013887089677155018,-0.01197837758809328,0.01807939074933529,-0.005887174978852272,0.033902574330568314,-0.02854429930448532,0.024519966915249825,0.028568971902132034,0.013400241732597351,-0.0019523632945492864,0.007203134708106518,-0.02170448750257492,0.0043708644807338715,0.013000180944800377,-0.02806011028587818,-0.052235860377550125,0.006694726180285215,-0.0092129185795784,-0.018184177577495575,0.049044013023376465,0.046707235276699066,-0.01831611432135105,-0.030639462172985077,-0.0015843649161979556,-0.017384439706802368,-0.003499366343021393,0.030629608780145645,0.003713333047926426,0.025994226336479187,-0.0008581613656133413,-0.015467946417629719,-0.0064565143547952175,-0.015963690355420113,-0.020183177664875984,-0.030588552355766296,-0.01899401657283306,-0.04577116295695305,-0.0028607791755348444,0.022898033261299133,0.03437552601099014,0.014811725355684757,0.03614823892712593,-0.027819138020277023,0.027242502197623253,0.05169186741113663,0.007877591997385025,0.05535832792520523,-0.004999141208827496,-0.028127005323767662,-0.016405392438173294,-0.027605459094047546,0.07711722701787949,0.03618696331977844,0.007061703596264124,-0.021224694326519966,0.051331426948308945,-0.094889335334301,-0.02186795137822628,-0.038535814732313156,-0.004248379729688168,0.060359831899404526,0.02476806938648224,0.1405821591615677,0.014362828806042671,-0.00825873576104641,0.027966761961579323,0.003058236325159669,0.020185044035315514,-0.04441225156188011,-0.03536245971918106,0.024187691509723663,0.040640417486429214,-0.02214221842586994,0.008167019113898277,-0.012249826453626156,-0.025299884378910065,-0.025115853175520897,-0.021225063130259514,0.03849773481488228,0.028494512662291527,-0.009339598938822746,0.014718718826770782,-0.004439693875610828,0.007026744540780783,-0.015574543736875057,0.011572287417948246,-0.016814587637782097,0.02889104001224041,-0.00972343236207962,0.05936391279101372,0.023722080513834953,0.027070514857769012,0.003694789484143257,-0.007822927087545395,0.004737428855150938,-0.005546298809349537,-0.050396375358104706,0.023969003930687904,-0.0005294679431244731,-0.06175490841269493,0.01198903564363718,0.02668716013431549,0.001491780043579638,-0.045452605932950974,0.0387556292116642,0.013011069037020206,-0.057309720665216446,-0.003051724284887314,0.005999316461384296,-0.020858976989984512,0.044236160814762115,-0.005770325195044279,0.0006314472993835807,-0.013502644374966621,-0.061523180454969406,0.014356194995343685,0.015131290070712566,-0.021043799817562103,0.04509530961513519,-0.025752613320946693,-0.03152278810739517,-0.03769027069211006,0.05772726237773895,-0.07383282482624054,0.021251030266284943,0.013932966627180576,0.06655222177505493,0.006071928888559341,-0.049852121621370316,0.006038007792085409,-0.007192679215222597,-0.0017467226134613156,-0.01240033470094204,-0.012345192953944206,-0.04106319323182106,0.011839876882731915,-0.010678702034056187,-0.018689025193452835,-0.0546441376209259,-0.04646959528326988,0.056600652635097504,-0.011942722834646702,-0.00819210521876812,-0.048080358654260635,0.0035557271912693977,0.04673147201538086,0.06586915254592896,0.056239064782857895,0.048110559582710266,-0.063761867582798,-0.10915853083133698,0.05044756457209587,0.060059648007154465,0.008715135045349598,-0.05356255918741226,0.01074740756303072,-0.03728139400482178,0.0027397177182137966,0.012923418544232845,0.03929828107357025,-0.021224703639745712,-0.030514497309923172,-0.029069531708955765,0.012172927148640156,0.038998525589704514,0.005960521753877401,0.1634872555732727,-0.03889398276805878,-0.006415798328816891,-0.031553372740745544,0.04136752709746361,0.006206999532878399,-0.005406523123383522,-0.03014097735285759,0.017753735184669495,0.023138271644711494,0.040432218462228775,0.027614999562501907,0.02202737145125866,0.03686351329088211,0.020706312730908394,0.038503874093294144,-0.01771317794919014,-0.005541480612009764,-0.004309036303311586,0.026648610830307007,0.01946987211704254,-0.008218592964112759,-0.015087692067027092,-0.002457072027027607,0.008882999420166016,0.018386509269475937,-0.007502453867346048,0.04617738351225853,0.08032730221748352,-0.015407441183924675,0.022100117057561874,0.04803499951958656,-0.015557087026536465,-0.0029871338047087193,-0.05104236677289009,0.047815948724746704,0.006052977405488491,-0.025878215208649635,-0.03487199917435646,-0.02418138086795807,0.03340279683470726,-0.009977279230952263,0.057767536491155624,-0.01073934230953455,-0.0100385257974267,0.01584615185856819,0.014859577640891075,0.028344938531517982,0.009188851341605186,-0.02786652185022831,-0.003987564705312252,0.060623183846473694,-0.037823520600795746,0.010820056311786175,-0.01099469792097807,0.0051114363595843315,0.010400347411632538,-0.04851411655545235,-0.010020778514444828,0.015491005033254623,0.002560768974944949,0.0002995130780618638,0.017925744876265526,-0.05600651726126671,0.01629059575498104,-0.041993360966444016,0.056166503578424454,-0.010228795930743217,0.039050403982400894,-0.03490264713764191,-0.06149744242429733,0.025983942672610283,-0.05638726055622101,0.0193528663367033,-0.05673735961318016,0.010732520371675491,-0.030274342745542526,-0.04608312249183655,-0.03259141743183136,0.008703636936843395,-0.010049257427453995,-0.02028404362499714,-0.02545078471302986,-0.007330887019634247,0.01908986270427704,0.08569806069135666,0.013411051593720913,0.045221392065286636,0.029061565175652504,-0.07278364151716232,0.011452686041593552,0.00796772912144661,-0.001937731052748859,0.05267813801765442,0.0012245997786521912,0.016595665365457535,0.009200495667755604,-0.025737406685948372,-0.007772084791213274,-0.024781346321105957,-0.04789811000227928,0.008948015980422497,0.014414781704545021,-0.0108853280544281,0.0052428292110562325,-0.03245101496577263,0.014069040305912495,0.011783894151449203,-0.010103580541908741,-0.031106770038604736,-0.04240941256284714,0.022496910765767097,-0.020824074745178223,-0.08943013101816177,0.04801882058382034,-0.028297530487179756,-0.04918989911675453,-0.01665511168539524,-0.014931212179362774,-0.01489074807614088,0.05580531805753708,0.007498395163565874,0.0849313735961914,0.014816822484135628,-0.13726691901683807,0.054411668330430984,0.04322154447436333,0.03346028923988342,-0.011461079120635986,-0.018757561221718788,0.019253330305218697,0.025283867493271828,-0.002472060266882181,-0.011973229236900806,-0.014683551155030727,-0.05812665447592735,-0.021680837497115135,0.007713068276643753,0.0258480254560709,-0.0032352048438042402,0.02874169684946537,0.05623854696750641,0.02360313944518566,-0.018437476828694344,0.022604873403906822,0.014864642173051834,-0.03444560244679451,0.02030581794679165,0.038563065230846405,0.04859394207596779,-0.005192715208977461,-0.014700174331665039,0.0005662078037858009,0.013771574944257736,-0.015551800839602947,-0.0018181126797571778,0.06363991647958755,-0.025748230516910553,0.07855785638093948,-0.03815215453505516,0.07629154622554779,0.03050120919942856,0.0065024239011108875,0.018291572108864784,-0.037654269486665726,0.016246821731328964,-0.0029031888116151094,-0.0047153206542134285,-0.03171350434422493,0.03157832473516464,-0.039424508810043335,0.026249246671795845,0.01666591688990593,0.038646817207336426,-0.02229120582342148,-0.014285106211900711,-0.029557639732956886,0.04567401856184006,0.06055627763271332,-0.024461979046463966,0.040575459599494934,-0.03512421250343323,-0.055660881102085114,0.02216007187962532,0.03622875362634659,-0.08154700696468353,-0.07706058025360107,-0.047707974910736084,-0.018673740327358246,-0.033134136348962784,-0.04704609140753746,0.0012113346019759774,0.011765772476792336,-0.010011618956923485,0.000680931843817234,0.01395114790648222,-0.04185215011239052,-0.0029162114951759577,0.0018982859328389168,0.00738472118973732,-0.003226678119972348,-0.02130155824124813,-0.0285484679043293,-0.07470148056745529,0.009026442654430866,0.021903978660702705,0.025420239195227623,-0.006994524970650673,-0.015057006850838661,0.03706737607717514,-0.03662513941526413,0.04636944457888603,-0.044068798422813416,0.05811285600066185,0.008939234539866447,-0.002359276870265603,-0.02526233159005642,-0.012644819915294647,0.029212357476353645,-0.0025891626719385386,-0.04295767843723297,-0.07397231459617615,0.013043835759162903,0.019060956314206123,0.031290508806705475,-0.05873614177107811,-0.05429287999868393,0.02187219075858593,-0.019857805222272873,-0.017513178288936615,-0.05194784328341484,-0.0290619395673275,0.004467392340302467,0.05235845595598221,0.006397934630513191,-0.01807541400194168,0.025828633457422256,0.0332481674849987,-0.0437786690890789,0.032883282750844955,0.02382139302790165,-0.09344244003295898,-0.015650980174541473,-0.041242826730012894,-0.012832235544919968,-0.009550217539072037,0.03996790945529938,0.005442813038825989,-0.046600259840488434,-0.034861791878938675,0.02181103080511093,-0.0006922230822965503,0.031118756160140038,-0.00572747690603137,-0.0010206528240814805,0.001065511372871697,0.0037839249707758427,0.026363473385572433,-0.016301091760396957,-0.12087797373533249,0.010716118849813938,0.06744701415300369,-0.04400307312607765,-0.023378588259220123,0.020352046936750412,-0.013063146732747555,0.033450428396463394,0.01999557390809059,0.015395707450807095,0.036621518433094025,0.0135642783716321,-0.005051656160503626,-0.025965232402086258,-0.01206960342824459,-0.002963168080896139,-0.06049412116408348,-0.04651356860995293,-0.02277805656194687,-0.017096756026148796,-0.039109889417886734,-0.034598641097545624,-0.03780779987573624,0.030640456825494766,0.019930696114897728,-0.038493938744068146,-0.02296360395848751,0.05626535788178444,-0.04296899959445,-0.002938550431281328,-0.019096896052360535,0.018975041806697845,0.07530320435762405,-0.026228995993733406,0.04074929654598236,-0.05498020723462105,-0.01133575290441513,0.022422078996896744,0.011148236691951752,-0.05657975375652313,0.016954194754362106,0.05559491738677025,0.012046393938362598,0.0395389087498188,-0.015735242515802383,-0.006528656464070082,0.017971761524677277,-0.034571144729852676,0.015781095251441002,0.0014815578470006585,0.012061966583132744,-0.0002943613799288869,0.025292104110121727,-0.00838978961110115,0.08757274597883224,-0.014099746942520142,-0.02237556129693985,-0.03866427391767502,0.028247999027371407,0.05007863789796829,0.013312768191099167,0.003399487119168043,0.035799749195575714,-0.028724990785121918,-0.06485455483198166,0.01604866236448288,0.0009136152802966535,0.00883589219301939,0.008384657092392445,-0.060242775827646255,0.03849000111222267,-0.06180701404809952,-6.1057659813525725e-33,-0.051354698836803436,-0.033716652542352676,-0.013375104404985905,0.013248913921415806,0.030241308733820915,-0.0006035066326148808,-0.007949955761432648,-0.03789062798023224,0.011872704140841961,0.013821749947965145,0.004575959872454405,-0.06417933851480484,0.022503862157464027,0.014540770091116428,0.0029431588482111692,-0.032408457249403,0.029749508947134018,-0.001535358838737011,0.013919185847043991,0.005839931778609753,-0.045825108885765076,0.01745305396616459,0.005090989638119936,0.0015939142322167754,-0.03553901985287666,-0.06730742007493973,-0.0007320953300222754,0.025959568098187447,0.04212457686662674,0.03656082600355148,-0.02718958631157875,-0.017187684774398804,-0.06364887952804565,-0.03650021553039551,0.029245873913168907,0.012295873835682869,-0.011214091442525387,-0.013155803084373474,0.011025398969650269,0.04391897842288017,0.08351285755634308,-0.0003103805356658995,0.01679898612201214,0.007629636209458113,-0.011860344558954239,0.008307046256959438,-0.004860320128500462,-0.0070626200176775455,-0.0062585435807704926,-0.060939282178878784,0.0028945954982191324,0.020661626011133194,0.020294222980737686,0.04620034992694855,0.0018082361202687025,-0.013439121656119823,0.04649992659687996,-0.049439381808042526,-0.009262689389288425,0.030077580362558365,-0.03255057334899902,-0.040595218539237976,0.044580765068531036,0.006110501475632191,0.020746393129229546,0.02036510407924652,-0.03551763668656349,0.018887117505073547,0.005911724641919136,0.018637841567397118,-0.008771922439336777,0.002222125418484211,0.03030207008123398,-0.026898253709077835,-0.017335129901766777,0.07226114720106125,0.02831476740539074,0.0003363005816936493,0.03894044831395149,0.11381959915161133,-0.007038474082946777,0.023031217977404594,-0.0018473248928785324,0.02483871579170227,-0.0058613973669707775,-0.03772244229912758,0.003040322568267584,-0.010804388672113419,0.053355198353528976,0.02211637794971466,0.005788980983197689,0.04959632083773613,-0.024718450382351875,0.018269797787070274,-0.04790190979838371,-0.013687578029930592,0.10028482973575592,0.051612257957458496,-0.02531055174767971,-0.05460475757718086,0.05298732966184616,-0.04975870996713638,0.02337491139769554,-0.05619043484330177,-0.02058175392448902,-0.0058667403645813465,-0.021113356575369835,-0.012744160369038582,-0.0513550266623497,0.0005802058731205761,0.027743453159928322,0.02013392187654972,-0.005560616962611675,-0.02970086969435215,-0.010489202104508877,-0.005618324503302574,-0.030926957726478577,-0.049667466431856155,0.016506964340806007,0.041072744876146317,0.01769363507628441,0.022185135632753372,-0.009889796376228333,0.0071158939972519875,0.08036623895168304,-0.00782497227191925,-0.01800508424639702,0.02840329334139824,-0.013942018151283264,0.019569572061300278,-0.006642986088991165,0.04285138100385666,2.7268947633274365e-7,0.018503300845623016,0.03714417293667793,-0.04678940400481224,-0.014371694065630436,0.0019845818169414997,-0.04928351566195488,-0.01878325827419758,-0.06703163683414459,0.03140907362103462,-0.03435351699590683,0.021482938900589943,0.004561669658869505,0.019570011645555496,0.05608101934194565,0.01577063463628292,-0.024044623598456383,0.012265687808394432,-0.05021393299102783,-0.036761168390512466,0.03960176184773445,0.06205699220299721,0.015437157824635506,0.058231521397829056,0.03104090876877308,-0.006133714225143194,-0.019241565838456154,0.010175052098929882,-0.02183976210653782,-0.007470421027392149,-0.053745221346616745,-0.044973213225603104,0.02495872974395752,-0.03484894707798958,0.010206547565758228,0.025927459821105003,0.021708426997065544,0.0021998437587171793,-0.012214180082082748,0.057313960045576096,0.07185041159391403,0.02030772715806961,-0.04306309297680855,-0.02055775374174118,-0.06293563544750214,-0.010036849416792393,-0.05857156217098236,0.0054516904056072235,0.014003234915435314,-0.045215729624032974,-0.009307682514190674,0.022689852863550186,-0.009885682724416256,0.04664352908730507,-0.03835677728056908,0.01169843040406704,-0.009319714270532131,-0.03417652100324631,0.03997499495744705,-0.015171995386481285,0.028979774564504623,0.004884229972958565,-0.013784256763756275,0.02348451316356659,-0.037469055503606796,0.043681319802999496,-0.0651186853647232,-0.001957037951797247,3.368117101528474e-34,0.03711235150694847,-0.02312791347503662,0.002601711545139551,0.05142795667052269,0.024141492322087288,-0.028239518404006958,0.09713214635848999,-0.03242029622197151,0.015913458541035652,-0.084006667137146,-0.011438394896686077]'
SET
  @TechnicalDesignVector_0a74a897 = N'[-0.019101090729236603,-0.027092644944787025,-0.00958795566111803,-0.010615847073495388,-0.00492442399263382,0.0014313248684629798,0.005125262308865786,0.08388848602771759,-0.11490485817193985,-0.0511668398976326,0.0027269364800304174,0.017376156523823738,0.03763362020254135,0.18132953345775604,0.01001681387424469,-0.10222528874874115,-0.03485143184661865,-0.014804111793637276,0.009113348089158535,0.009142868220806122,0.017401577904820442,-0.0069245509803295135,-0.039739467203617096,-0.013526336289942265,-0.014126171357929707,-0.044865645468235016,-0.04610813781619072,0.016914164647459984,0.024793947115540504,-0.06376935541629791,0.0005608114297501743,0.04532945528626442,-0.058602459728717804,-0.02080174721777439,0.0000017933715525941807,-0.028771549463272095,0.0018014343222603202,0.01110685896128416,-0.004120388999581337,0.03578661382198334,0.05046427622437477,-0.007749105338007212,0.05492933467030525,-0.0035126798320561647,0.003539344295859337,-0.1584225296974182,-0.003955972380936146,0.10570627450942993,0.04434845596551895,-0.010072261095046997,0.008143569342792034,0.009762639179825783,-0.0030919003766030073,0.006764302961528301,0.011913060210645199,0.07398895919322968,0.010504767298698425,-0.049078550189733505,0.013841959647834301,0.0213854368776083,0.012682930566370487,-0.0181503277271986,0.006469324231147766,-0.027599532157182693,0.017750360071659088,0.01998061127960682,-0.0007509596180170774,0.013878093101084232,0.004196378868073225,0.025314277037978172,0.04572967067360878,0.022027548402547836,-0.02397347427904606,-0.011069021187722683,-0.009529581293463707,-0.027317272499203682,-0.007711725775152445,0.029012514278292656,0.0027338939253240824,-0.024146709591150284,-0.04849632456898689,-0.013089070096611977,-0.02106633596122265,-0.01833377592265606,0.025737354531884193,0.0260077603161335,0.031090933829545975,-0.008100748062133789,-0.038584548979997635,-0.012863804586231709,-0.022232715040445328,-0.03626267611980438,-0.05034728720784187,0.020905643701553345,-0.010071733966469765,-0.005576280411332846,0.005010711960494518,0.01946619153022766,0.014024519361555576,0.04099513590335846,0.0035077505744993687,0.06371234357357025,-0.07383240759372711,0.024103811010718346,0.05481063947081566,0.016401736065745354,-0.026625949889421463,-0.049897510558366776,-0.01339910738170147,0.03753875195980072,0.008456015028059483,0.00015803561836946756,-0.03464650735259056,0.04116025194525719,-0.06736660748720169,-0.009968669153749943,-0.015414267778396606,-0.021560367196798325,-0.002286452567204833,0.028050947934389114,0.14798639714717865,-0.007780816406011581,-0.0008208574145101011,0.022982165217399597,-0.0017008924623951316,0.03478153422474861,-0.03792470693588257,-0.04090390354394913,0.031039921566843987,0.02039797604084015,-0.02267453633248806,-0.011036060750484467,0.016251176595687866,-0.02775825746357441,-0.031979307532310486,-0.037078067660331726,0.014320552349090576,0.030514493584632874,-0.005942950956523418,0.033609453588724136,0.0356883779168129,0.02464982308447361,-0.031353410333395004,0.015307284891605377,-0.019059401005506516,0.00924508273601532,0.008494599722325802,-0.006744306068867445,-0.007121620699763298,0.0030428178142756224,0.020390314981341362,0.015430513769388199,-0.05708104744553566,-0.006906741764396429,-0.08105610311031342,0.0037847196217626333,-0.02185169793665409,-0.01428203284740448,-0.015756266191601753,0.026556346565485,0.0001619177928660065,-0.04860817641019821,0.051602598279714584,0.0207310039550066,-0.038428205996751785,0.015324645675718784,-0.07855740189552307,-0.019972242414951324,0.025393368676304817,-0.022352442145347595,-0.020701201632618904,-0.008476353250443935,-0.03921155631542206,-0.014988596551120281,0.013910139910876751,-0.0666976049542427,0.05700892582535744,-0.026829233393073082,-0.03453955426812172,-0.005048263818025589,0.08385533094406128,-0.11740227043628693,0.03162556141614914,0.014338649809360504,0.043697334825992584,-0.0016818840522319078,-0.09553882479667664,0.004470860585570335,-0.01753540150821209,-0.015494701452553272,-0.04930251091718674,-0.0029836201574653387,-0.00947667472064495,0.023901667445898056,-0.017008734866976738,-0.006683304440230131,-0.03335988521575928,-0.015539972111582756,0.0661887526512146,0.00841455440968275,0.021978918462991714,-0.013974678702652454,0.03549277037382126,0.09121201932430267,0.03488431125879288,0.029816802591085434,0.043510161340236664,-0.053406473249197006,-0.08833107352256775,0.05479066073894501,0.020047646015882492,-0.01175073441118002,-0.009027468971908092,-0.009952208027243614,-0.029838865622878075,-0.04462025314569473,0.042346417903900146,0.015232274308800697,-0.0650617927312851,0.0005359801580198109,-0.02934339828789234,0.0029167947359383106,0.06483541429042816,-0.006521956529468298,0.1764581799507141,-0.040059566497802734,0.009817440994083881,-0.03318757563829422,0.04071573540568352,0.014849048107862473,-0.04043669253587723,-0.024224966764450073,0.005643360782414675,0.013630696572363377,0.0271050576120615,0.06829802691936493,0.061813030391931534,0.022541293874382973,0.03343266621232033,-0.0005563791492022574,-0.03155273199081421,-0.015496491454541683,-0.025496911257505417,-0.012149497866630554,-0.009164783172309399,-0.02120424434542656,-0.022638674825429916,0.0017281301552429795,-0.026681626215577126,0.009521040134131908,0.04181458801031113,0.058762192726135254,0.0375431552529335,-0.0449848547577858,-0.010167496278882027,0.03406462445855141,0.06418293714523315,-0.01611226610839367,-0.029663581401109695,0.020402472466230392,-0.0195383932441473,-0.0047697885893285275,-0.018429357558488846,-0.043094757944345474,0.012200628407299519,-0.0025034782011061907,0.08370325714349747,0.004127217456698418,-0.010484986007213593,0.001023240271024406,0.008843389339745045,0.026121603325009346,-0.0011665973579511046,-0.023126645013689995,0.010915400460362434,0.01609184220433235,-0.039831649512052536,-0.011966231279075146,-0.02128816582262516,0.005494200624525547,0.0013632334303110838,-0.04116780310869217,-0.023022692650556564,0.02231871336698532,0.017890876159071922,-0.004373136907815933,-0.01328031625598669,-0.02563193067908287,-0.006499962415546179,-0.08960913866758347,0.02599431201815605,-0.023975662887096405,0.01964261755347252,-0.036578468978405,-0.03604564070701599,-0.0017753832507878542,-0.03379097208380699,0.02232498861849308,-0.011980203911662102,0.029368510469794273,-0.03189043328166008,-0.05482323095202446,0.0029782422352582216,0.001402715570293367,-0.0004808855301234871,0.02294284664094448,-0.01685907505452633,0.0057082949206233025,0.023653944954276085,0.11062245815992355,0.013833969831466675,0.025133812800049782,-0.008891352452337742,-0.045917168259620667,0.006804193835705519,0.006399034522473812,-0.006061261519789696,0.06296157836914062,0.0241891760379076,0.055847857147455215,0.028446964919567108,-0.016708627343177795,-0.018950704485177994,-0.034344471991062164,-0.022215822711586952,0.038869328796863556,0.008058561012148857,-0.01886053942143917,-0.04753204807639122,-0.016780344769358635,0.0011396438349038363,-0.006827940233051777,0.006295949220657349,0.02662692219018936,-0.01364453136920929,0.019502978771924973,-0.016330109909176826,-0.08956976979970932,0.03133230283856392,-0.016431836411356926,-0.025258265435695648,-0.024637063965201378,-0.0023235823027789593,-0.010423139669001102,0.038140617311000824,-0.010407607071101665,0.015393972396850586,0.018156027421355247,-0.10222733020782471,0.05384154990315437,0.020109158009290695,0.033932823687791824,0.00861155241727829,-0.01978057436645031,0.017139406874775887,0.05738360434770584,-0.026557324454188347,-0.02467627450823784,0.002176170004531741,-0.05391139164566994,-0.057588424533605576,0.010940843261778355,0.05198613181710243,0.04583005607128143,0.006811534985899925,0.052445851266384125,0.029277540743350983,0.0020905155688524246,0.010750923305749893,-0.001117792446166277,-0.052221834659576416,0.028003912419080734,0.05000476539134979,0.062252044677734375,-0.0029454512987285852,-0.01803399622440338,0.020442191511392593,0.006643252447247505,-0.040139660239219666,0.0005135972169227898,0.03008481301367283,-0.09136562049388885,0.07279583066701889,-0.034146614372730255,0.05641687288880348,0.019037609919905663,-0.017479373142123222,0.03889383375644684,0.03075694851577282,-0.02314538136124611,-0.012012442573904991,-0.02394135296344757,-0.008335773833096027,0.029044583439826965,-0.011499786749482155,0.022389205172657967,0.010166984051465988,0.0006534225540235639,0.0017725544748827815,0.008047820068895817,0.012158122844994068,0.0599382109940052,0.01893014647066593,-0.002205935074016452,0.06719028204679489,-0.0070085362531244755,-0.028772413730621338,0.026026081293821335,-0.005735515151172876,-0.06070459261536598,-0.06324417144060135,-0.0587318018078804,-0.0017227291828021407,-0.036190666258335114,-0.07396232336759567,0.0022431877441704273,-0.03326285630464554,-0.01196568924933672,0.0325203612446785,0.034696076065301895,-0.021386126056313515,0.010793972760438919,-0.020138463005423546,0.005886160768568516,-0.016351407393813133,-0.04135206341743469,-0.05903824418783188,-0.04353808984160423,0.015130843967199326,0.008914592675864697,0.024974340572953224,0.006310094613581896,-0.037057410925626755,0.021506140008568764,-0.012636328116059303,-0.0006426934851333499,-0.036545827984809875,0.08189044147729874,0.02804902009665966,-0.021183596923947334,-0.028560344129800797,-0.023739006370306015,0.022128086537122726,-0.025965312495827675,-0.028724435716867447,-0.055744439363479614,-0.006446952000260353,0.02447289414703846,0.07253657281398773,-0.06843286007642746,-0.033098381012678146,0.019874174147844315,-0.04865489900112152,-0.006802757270634174,-0.025736821815371513,-0.049901265650987625,0.008017895743250847,0.02439502254128456,0.009816006757318974,0.02742963470518589,0.04244523495435715,0.03200248256325722,-0.044966720044612885,0.017644371837377548,0.0016184046398848295,-0.0031582252122461796,-0.0008579886634834111,0.022707289084792137,0.0009969923412427306,-0.023821856826543808,-0.001826025079935789,0.016777342185378075,-0.043960969895124435,-0.02447287179529667,0.04614928364753723,0.02537466585636139,0.011022436432540417,0.038628995418548584,0.009335434064269066,0.0023224824108183384,0.016881706193089485,0.02106572315096855,-0.029347654432058334,-0.051905516535043716,0.03658867999911308,0.051556751132011414,-0.029105212539434433,-0.019450679421424866,0.0013607572764158249,-0.024217937141656876,0.03833009675145149,-0.01178067922592163,0.006328725256025791,0.07402242720127106,0.044627752155065536,0.010817119851708412,-0.013623231090605259,0.015748197212815285,0.023720648139715195,-0.06652938574552536,-0.005480973515659571,-0.023819154128432274,-0.015816224738955498,-0.035453375428915024,-0.05292193964123726,-0.02555861882865429,0.03497988358139992,0.03854464367032051,-0.015855584293603897,-0.016023900359869003,0.06726505607366562,0.00045840427628718317,0.03510234132409096,-0.009872865863144398,0.02564903348684311,0.07962319254875183,-0.021432189270853996,0.018301285803318024,-0.01458002720028162,-0.01978115364909172,0.025118334218859673,-0.002279919106513262,-0.007948643527925014,0.002650592476129532,0.030890680849552155,0.04994216933846474,0.019083654507994652,-0.007178702391684055,-0.007398296147584915,0.04909743741154671,-0.04007769748568535,0.04655488580465317,0.009068013168871403,0.048210106790065765,-0.014786120504140854,0.060395147651433945,-0.06279461830854416,0.051469165831804276,-0.001347999437712133,-0.016922371461987495,-0.038536712527275085,-0.017459720373153687,0.06787177920341492,0.0016157920472323895,0.018764572218060493,0.014357739128172398,-0.008461665362119675,-0.06270269304513931,0.014846510253846645,-0.008797766640782356,0.042976949363946915,0.0035064888652414083,-0.07155817002058029,0.016470076516270638,-0.014499503187835217,-6.455081025430708e-33,-0.04815444350242615,-0.013733386993408203,-0.0116862952709198,-0.006719882134348154,0.002162246499210596,0.019858507439494133,-0.03128250315785408,-0.04223056137561798,-0.01528015173971653,0.027248511090874672,-0.017075566574931145,-0.045476626604795456,0.018190883100032806,0.04266982525587082,-0.0020511189941316843,-0.027057234197854996,0.030363403260707855,0.036727651953697205,0.009248005226254463,0.0008598252898082137,-0.050104547291994095,-0.002691016998142004,0.028961023315787315,-0.042696595191955566,-0.025431068614125252,-0.057307060807943344,-0.024945726618170738,0.05262398719787598,0.026965202763676643,0.04083450883626938,-0.028851928189396858,-0.0008416505879722536,-0.051213596016168594,0.005538449622690678,0.037087880074977875,0.005755409132689238,0.011511960998177528,-0.026649734005331993,0.023191899061203003,0.0145426569506526,0.06511847674846649,-0.011942491866648197,-0.0027737109921872616,0.02992221526801586,0.0017495612846687436,0.009625762701034546,-0.00352524034678936,0.0010918662883341312,-0.021296042948961258,-0.047616973519325256,0.014723792672157288,0.018664363771677017,-0.023846939206123352,0.042471181601285934,-0.01374933309853077,-0.006373843643814325,0.03263159468770027,-0.039324238896369934,-0.01844996213912964,0.003317157970741391,-0.059198684990406036,-0.05317660793662071,0.013280948624014854,0.038261789828538895,0.0447993129491806,0.014304730109870434,-0.0383281409740448,0.06446003168821335,-0.017301693558692932,0.037500251084566116,-0.0015387932071462274,0.00018901364819612354,0.05040021613240242,-0.016173314303159714,-0.07303865253925323,0.042112693190574646,0.06617185473442078,0.0055583445355296135,0.11658108979463577,0.0795949399471283,-0.009180876426398754,0.0370149239897728,0.0060768271796405315,0.026932524517178535,-0.03601187467575073,-0.03619324415922165,0.011079664342105389,-0.005907441955059767,0.020555198192596436,0.01937808282673359,0.02693670056760311,0.05398790165781975,-0.02694418653845787,0.04398602992296219,-0.03187976032495499,-0.006880598608404398,0.05838129296898842,0.06605564802885056,-0.015202982351183891,-0.04991336539387703,0.051172539591789246,-0.00476630125194788,-0.01162664033472538,-0.03231438621878624,-0.02378246560692787,0.006525435484945774,-0.009726046584546566,0.002050559502094984,-0.06085667759180069,0.0012981436448171735,0.028790706768631935,0.0036446747835725546,-0.02796490117907524,-0.07693705707788467,0.012849402613937855,-0.0006366000161506236,-0.015363967977464199,-0.06019566208124161,0.012610681354999542,0.04445091634988785,0.050565533339977264,0.027513042092323303,-0.005444523878395557,0.013212250545620918,0.019916564226150513,-0.01566215418279171,-0.035296931862831116,-0.020250972360372543,-0.007482501212507486,-0.0069068619050085545,-0.0002182276948587969,0.015796255320310593,2.7738366270568804e-7,0.01731915771961212,0.046484336256980896,-0.014697222039103508,0.00608266843482852,0.017952026799321175,-0.04685404151678085,-0.022295111790299416,-0.034509483724832535,-0.00040885520866140723,-0.04474804177880287,0.006389707792550325,0.010245689190924168,0.002032411517575383,0.03306052088737488,0.043941281735897064,-0.022000545635819435,-0.0542871356010437,-0.06407566368579865,-0.03289264440536499,0.02438640594482422,0.04780813306570053,0.00726458290591836,0.05860893055796623,0.02334582805633545,0.010948327369987965,0.0014981915010139346,0.04073002561926842,-0.005159256514161825,0.0028675682842731476,-0.05080030485987663,-0.01544075645506382,-0.017914239317178726,-0.020650064572691917,-0.013856901787221432,0.03408404439687729,0.004832059610635042,-0.004843336064368486,0.014843042008578777,0.04861925169825554,0.10473566502332687,0.002138793235644698,-0.008976894430816174,-0.023013202473521233,-0.05072007700800896,0.04000917449593544,0.022398730739951134,-0.0031280312687158585,-0.04937261343002319,-0.08038656413555145,-0.017306417226791382,-0.01812249980866909,-0.01797219179570675,0.005858137737959623,-0.0019387690117582679,0.010255496017634869,0.0011301558697596192,-0.008634976111352444,0.02850327640771866,-0.0024376569781452417,-0.016218507662415504,-0.018659083172678947,-0.020662998780608177,-0.0023949698079377413,0.0017301946645602584,0.04336782544851303,-0.031503282487392426,-0.02658892050385475,2.9660530341541344e-34,0.023081405088305473,-0.038118015974760056,-0.017180582508444786,0.0169250275939703,0.02150743082165718,-0.0224233977496624,0.05557572841644287,-0.03700984641909599,0.0072332220152020454,-0.0796363353729248,-0.012964085675776005]'
SET
  @HasCustomProps_0a74a897 = 1
SET
  @HasCustomEvents_0a74a897 = 1
SET
  @RequiresData_0a74a897 = 0
SET
  @DependencyCount_0a74a897 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_0a74a897 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_0a74a897 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_0a74a897 = 1
SET
  @ID_0a74a897 = '7DF575B5-271A-44D2-B580-20E15C5561D1'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_0a74a897,
  @Name = @Name_0a74a897,
  @Version = @Version_0a74a897,
  @VersionSequence = @VersionSequence_0a74a897,
  @Title = @Title_0a74a897,
  @Description = @Description_0a74a897,
  @Type = @Type_0a74a897,
  @Status = @Status_0a74a897,
  @DeveloperName = @DeveloperName_0a74a897,
  @DeveloperEmail = @DeveloperEmail_0a74a897,
  @DeveloperOrganization = @DeveloperOrganization_0a74a897,
  @SourceRegistryID = @SourceRegistryID_0a74a897,
  @ReplicatedAt = @ReplicatedAt_0a74a897,
  @LastSyncedAt = @LastSyncedAt_0a74a897,
  @Specification = @Specification_0a74a897,
  @FunctionalRequirements = @FunctionalRequirements_0a74a897,
  @TechnicalDesign = @TechnicalDesign_0a74a897,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_0a74a897,
  @TechnicalDesignVector = @TechnicalDesignVector_0a74a897,
  @HasCustomProps = @HasCustomProps_0a74a897,
  @HasCustomEvents = @HasCustomEvents_0a74a897,
  @RequiresData = @RequiresData_0a74a897,
  @DependencyCount = @DependencyCount_0a74a897,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_0a74a897,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_0a74a897,
  @HasRequiredCustomProps = @HasRequiredCustomProps_0a74a897,
  @ID = @ID_0a74a897;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_4a339689 NVARCHAR(MAX),
@Name_4a339689 NVARCHAR(500),
@Version_4a339689 NVARCHAR(50),
@VersionSequence_4a339689 INT,
@Title_4a339689 NVARCHAR(1000),
@Description_4a339689 NVARCHAR(MAX),
@Type_4a339689 NVARCHAR(255),
@Status_4a339689 NVARCHAR(50),
@DeveloperName_4a339689 NVARCHAR(255),
@DeveloperEmail_4a339689 NVARCHAR(255),
@DeveloperOrganization_4a339689 NVARCHAR(255),
@SourceRegistryID_4a339689 UNIQUEIDENTIFIER,
@ReplicatedAt_4a339689 DATETIMEOFFSET,
@LastSyncedAt_4a339689 DATETIMEOFFSET,
@Specification_4a339689 NVARCHAR(MAX),
@FunctionalRequirements_4a339689 NVARCHAR(MAX),
@TechnicalDesign_4a339689 NVARCHAR(MAX),
@FunctionalRequirementsVector_4a339689 NVARCHAR(MAX),
@TechnicalDesignVector_4a339689 NVARCHAR(MAX),
@HasCustomProps_4a339689 BIT,
@HasCustomEvents_4a339689 BIT,
@RequiresData_4a339689 BIT,
@DependencyCount_4a339689 INT,
@TechnicalDesignVectorEmbeddingModelID_4a339689 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_4a339689 NVARCHAR(MAX),
@HasRequiredCustomProps_4a339689 BIT,
@ID_4a339689 UNIQUEIDENTIFIER
SET
  @Namespace_4a339689 = N'CRM/Dashboard'
SET
  @Name_4a339689 = N'DealList'
SET
  @Version_4a339689 = N'1.0.0'
SET
  @VersionSequence_4a339689 = 1
SET
  @Title_4a339689 = N'Deal List'
SET
  @Description_4a339689 = N'Displays deals in a sortable table format with open action'
SET
  @Type_4a339689 = N'Other'
SET
  @Status_4a339689 = N'Published'
SET
  @Specification_4a339689 = N'{"name":"DealList","location":"embedded","code":"function DealList({ deals, stageColors = {}, onDealClick, onOpenClick }) {\n  return (\n    <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n      <thead>\n        <tr style={{ borderBottom: ''2px solid #E5E7EB'' }}>\n          <th style={{ padding: ''8px'', textAlign: ''left'', fontSize: ''12px'', color: ''#6B7280'' }}>Deal</th>\n          <th style={{ padding: ''8px'', textAlign: ''left'', fontSize: ''12px'', color: ''#6B7280'' }}>Stage</th>\n          <th style={{ padding: ''8px'', textAlign: ''right'', fontSize: ''12px'', color: ''#6B7280'' }}>Amount</th>\n          <th style={{ padding: ''8px'', width: ''30px'' }}></th>\n        </tr>\n      </thead>\n      <tbody>\n        {deals.map((deal, index) => (\n          <tr\n            key={deal.ID || index}\n            style={{\n              borderBottom: ''1px solid #F3F4F6'',\n              cursor: ''pointer'',\n              transition: ''background-color 0.2s''\n            }}\n            onClick={() => onDealClick && onDealClick(deal)}\n            onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F9FAFB''}\n            onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}\n          >\n            <td style={{ padding: ''12px 8px'' }}>\n              <div style={{ fontWeight: ''500'' }}>{deal.DealName}</div>\n              <div style={{ fontSize: ''12px'', color: ''#9CA3AF'' }}>{deal.AccountName}</div>\n            </td>\n            <td style={{ padding: ''12px 8px'' }}>\n              {deal.Stage && (\n                <span style={{\n                  padding: ''2px 6px'',\n                  backgroundColor: stageColors[deal.Stage] || ''#6B7280'',\n                  color: ''white'',\n                  borderRadius: ''3px'',\n                  fontSize: ''11px''\n                }}>\n                  {deal.Stage}\n                </span>\n              )}\n            </td>\n            <td style={{ padding: ''12px 8px'', textAlign: ''right'', fontWeight: ''500'' }}>\n              $' + '{((deal.Amount || 0) / 1000).toFixed(0)}K\n            </td>\n            <td style={{ padding: ''12px 8px'', textAlign: ''center'' }}>\n              {onOpenClick && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onOpenClick(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }]);\n                  }}\n                  style={{\n                    background: ''none'',\n                    border: ''none'',\n                    color: ''#6B7280'',\n                    cursor: ''pointer'',\n                    padding: ''2px'',\n                    fontSize: ''14px''\n                  }}\n                  title=\"Open in Explorer\"\n                >\n                  <i className=\"fa-solid fa-up-right-from-square\"></i>\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}","description":"Displays deals in a sortable table format with open action","category":"Deals","type":"list","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"],"permissions":["read"]}]},"properties":[{"name":"deals","Type":"array","description":"Array of deal objects to display","required":true},{"name":"stageColors","Type":"object","description":"Optional object mapping stage names to colors","required":true},{"name":"onDealClick","Type":"function","description":"Callback when a deal row is clicked","required":true},{"name":"onOpenClick","Type":"function","description":"Callback when the open icon is clicked, receives entityName and primaryKey array","required":true}],"events":[{"name":"onDealSelect","description":"Fired when a deal row is clicked","parameters":[{"name":"deal","type":"object","description":"The deal object that was clicked"}]},{"name":"onDealOpen","description":"Fired when the open icon is clicked","parameters":[{"name":"entityName","type":"string","description":"Name of the entity (Deals)"},{"name":"primaryKey","type":"array","description":"Array of key-value pairs for composite primary key"}]}],"usageExample":"```javascript\n<DealList\n  deals={filteredDeals}\n  stageColors={stageColors}\n  onDealClick={(deal) => console.log(''Deal clicked:'', deal)}\n  onOpenClick={(entityName, primaryKey) => callbacks.OpenEntityRecord(entityName, primaryKey)}\n/>\n```","functionalRequirements":"- Display deals in a clean table format\n- Show deal name, account, stage, and amount\n- Include open icon button for external navigation\n- Show hover effects on rows\n- Color-code stage badges\n- Support row click for selection","technicalDesign":"Renders deals in table format with hover states. Formats currency values. Includes Font Awesome icon for opening deals externally. Stage badges use dynamic colors from stageColors prop."}'
SET
  @FunctionalRequirements_4a339689 = N'- Display deals in a clean table format
- Show deal name, account, stage, and amount
- Include open icon button for external navigation
- Show hover effects on rows
- Color-code stage badges
- Support row click for selection'
SET
  @TechnicalDesign_4a339689 = N'Renders deals in table format with hover states. Formats currency values. Includes Font Awesome icon for opening deals externally. Stage badges use dynamic colors from stageColors prop.'
SET
  @FunctionalRequirementsVector_4a339689 = N'[-0.016335902735590935,-0.011102886870503426,-0.003450617892667651,-0.019292565062642097,-0.004948796704411507,0.01774371601641178,0.04201719909906387,0.07556761801242828,-0.05159278213977814,-0.01005236990749836,-0.057116638869047165,0.04299014061689377,0.00539042241871357,0.163469597697258,0.03003486804664135,-0.039362113922834396,-0.0059814415872097015,-0.013580190017819405,0.026883581653237343,0.0028878962621092796,0.00215995404869318,-0.01921059936285019,-0.03732959181070328,-0.028172943741083145,-0.008736500516533852,0.0032292641699314117,-0.06515305489301682,0.012350806966423988,-0.012710771523416042,-0.04588688537478447,-0.003850493812933564,0.06910521537065506,-0.03621552512049675,-0.028808295726776123,0.0000015999952438505716,-0.010601614601910114,-0.0610225610435009,-0.019446661695837975,-0.04182935133576393,0.047603365033864975,0.05435223504900932,-0.03758974373340607,0.07096466422080994,-0.025119606405496597,-0.0022549047134816647,-0.07083858549594879,-0.027918145060539246,0.13116049766540527,-0.0016834697453305125,-0.0382409505546093,0.02514818124473095,-0.004385680425912142,-0.007128222845494747,-0.005598888732492924,0.015401680022478104,0.007940003648400307,-0.0007397494628094137,0.0013325369218364358,0.002059685066342354,0.0004960674559697509,-0.011667621321976185,-0.021313946694135666,0.026670217514038086,-0.01449519395828247,0.055235207080841064,0.010116605088114738,-0.002053056377917528,-0.0008893141057342291,0.011158877983689308,0.0027333139441907406,0.009761538356542587,-0.009840377606451511,-0.01023157499730587,-0.06839977204799652,0.007616215851157904,-0.05367337912321091,-0.013195645064115524,0.0279233381152153,0.027187909930944443,-0.030750438570976257,-0.018827080726623535,-0.01265876553952694,-0.017162464559078217,0.024358579888939857,-0.007389206904917955,-0.04166075959801674,0.0016102754743769765,-0.024701446294784546,0.023833144456148148,-0.017989832907915115,-0.004451217129826546,-0.012718956917524338,-0.017858488485217094,0.002774889813736081,-0.10009325295686722,-0.019348325207829475,0.04178794473409653,0.056288786232471466,0.018405234441161156,0.036993078887462616,-0.020062074065208435,0.04731287434697151,0.04394104704260826,0.005700556095689535,0.009680957533419132,0.012487397529184818,-0.04191073775291443,0.007930368185043335,-0.02627888135612011,0.05621904879808426,0.0242209043353796,0.02869095467031002,-0.054241422563791275,0.05709656700491905,-0.07013754546642303,-0.015634508803486824,-0.03822788968682289,-0.02446332387626171,0.0030022559221833944,0.0228717140853405,0.13446521759033203,0.018776562064886093,-0.010544711723923683,0.0056067262776196,0.03550148382782936,-0.05285263806581497,-0.04200547933578491,-0.031287092715501785,-0.00948880985379219,0.00758550688624382,-0.040722280740737915,-0.01130077987909317,0.018525997176766396,-0.03879297524690628,-0.017093194648623466,0.009903847239911556,-0.0008210355881601572,0.045024044811725616,0.010586796328425407,0.023463981226086617,-0.011701657436788082,0.004057744983583689,-0.028116904199123383,0.04406760260462761,-0.006418162025511265,0.019477033987641335,-0.018980899825692177,0.01629803329706192,0.03426934778690338,0.01408823300153017,0.025181293487548828,0.0038648119661957026,0.0056035020388662815,-0.0034265120048075914,-0.044224631041288376,0.018834812566637993,-0.03927773982286453,-0.06529740244150162,-0.0027309334836900234,0.03896224498748779,-0.005789532326161861,-0.021980958059430122,0.06426248699426651,0.007916079834103584,-0.037713754922151566,-0.010703049600124359,-0.01435515284538269,0.006381116807460785,0.014161359518766403,-0.023645520210266113,0.00900493748486042,-0.01669894903898239,-0.03556210175156593,-0.002989121712744236,0.013073655776679516,0.0023941670078784227,0.07952429354190826,0.03211800754070282,-0.03272470086812973,-0.01997535303235054,0.0836409255862236,-0.08680291473865509,0.015009279362857342,0.012349646538496017,0.08770282566547394,-0.019331926479935646,-0.061751239001750946,-0.0009726016432978213,0.004155140835791826,0.020832009613513947,-0.006111852824687958,0.019438903778791428,-0.04497276991605759,0.009644533507525921,-0.02420586533844471,-0.021753385663032532,-0.03516031801700592,-0.08093102276325226,0.04980101436376572,-0.006153782829642296,-0.015484871342778206,-0.03509870171546936,-0.01135027315467596,0.03140048682689667,0.020620232447981834,0.04878854751586914,-0.003233636263757944,-0.057054631412029266,-0.0802660658955574,0.024000076577067375,0.03649228438735008,-0.017066584900021553,-0.05246751010417938,0.01515043806284666,-0.03675012290477753,0.039268411695957184,0.00046958812163211405,0.011461068876087666,-0.036031175404787064,-0.02804267778992653,-0.016474854201078415,-0.03425765037536621,0.02114751935005188,0.023688683286309242,0.16085857152938843,0.008871466852724552,0.03242466226220131,-0.04051421955227852,0.06755267828702927,0.006418991833925247,0.034946247935295105,-0.03743675351142883,0.026727579534053802,0.012595344334840775,0.04924757406115532,0.031472522765398026,0.020526420325040817,0.05198841169476509,-0.03514767065644264,0.051273804157972336,-0.028476567938923836,-0.024612806737422943,-0.02418503351509571,0.003244581166654825,0.006068394985049963,-0.020044662058353424,-0.052855007350444794,-0.013771863654255867,0.005494642537087202,0.0036817514337599277,0.011871731840074062,0.04577544704079628,0.10284610837697983,-0.034628380089998245,-0.006331952754408121,0.04146197810769081,-0.029675062745809555,0.0008410770096816123,-0.057500336319208145,0.0725814625620842,-0.02016710676252842,-0.03152353689074516,0.0042794751934707165,-0.023122111335396767,0.04894070327281952,-0.0016889972612261772,0.07888071984052658,-0.05135685205459595,-0.015977634117007256,0.011436659842729568,0.0017347383545711637,0.015840718522667885,-0.010181053541600704,-0.01164200622588396,-0.03940223529934883,0.041109923273324966,0.014651085250079632,0.01408921368420124,-0.010157130658626556,-0.006707454100251198,-0.02561033144593239,-0.02849740907549858,-0.031981874257326126,0.023906705901026726,0.007028417196124792,-0.02642352320253849,0.005319282412528992,-0.04585420712828636,-0.0006538263987749815,-0.03166530653834343,0.049316443502902985,0.0028180815279483795,0.044239308685064316,-0.020374838262796402,-0.04483634606003761,0.03234298527240753,-0.07934488356113434,0.04551002383232117,-0.05548418313264847,0.05146188661456108,-0.03822071850299835,-0.014898194000124931,-0.003758581355214119,0.004380588885396719,0.009241423569619656,0.052037499845027924,0.043257322162389755,0.006951809860765934,0.024285070598125458,0.04428964480757713,0.014747888781130314,0.040065448731184006,0.04103011265397072,-0.08621875941753387,0.014493130147457123,0.017063330858945847,-0.04295489564538002,0.07320861518383026,-0.015222758054733276,0.035147059708833694,-0.012442406266927719,-0.016049416735768318,-0.02459191158413887,-0.010098949074745178,-0.018783720210194588,0.03906938433647156,-0.009014452807605267,-0.00037757272366434336,-0.013181951828300953,0.008532779291272163,-0.0005734013975597918,-0.034456539899110794,-0.0027222854550927877,-0.01633111760020256,0.018918229267001152,0.04663964360952377,-0.0006888869684189558,0.010647378861904144,0.047054219990968704,-0.011500073596835136,-0.051500361412763596,-0.035625290125608444,-0.006985757499933243,-0.07977599650621414,0.04930964857339859,-0.000758553680498153,0.08868400752544403,0.0005969586200080812,-0.06835616379976273,0.0355059839785099,0.0562683530151844,0.03608636558055878,-0.005725464317947626,-0.024305911734700203,0.014887298457324505,0.02248152531683445,-0.03988587111234665,-0.016057083383202553,-0.024472614750266075,-0.07840286940336227,-0.034853070974349976,0.013609320856630802,-0.00889330543577671,0.04334639757871628,0.025295089930295944,0.05549297481775284,0.006909397896379232,-0.018044697120785713,0.007548853289335966,-0.0013379791053012013,-0.06448971480131149,0.018696025013923645,0.0358598493039608,0.03880181163549423,-0.04195500910282135,-0.04105130583047867,0.01483237836509943,0.02114275097846985,-0.01972208544611931,-0.01009155809879303,0.05553784221410751,-0.05844554305076599,0.09045305848121643,-0.06102028861641884,0.026731789112091064,0.014164360240101814,0.0031973840668797493,0.0019260846311226487,-0.021660562604665756,-0.013776580803096294,-0.01613549143075943,-0.029154153540730476,-0.01889055222272873,0.0574994757771492,-0.0035344085190445185,0.008341563865542412,0.0223942119628191,0.06785524636507034,-0.025873228907585144,0.016642380505800247,-0.035325780510902405,0.08051197230815887,0.02652488835155964,-0.012522964738309383,0.04979296028614044,-0.042519111186265945,-0.025161046534776688,0.03423580527305603,0.022572726011276245,-0.02826167456805706,-0.037802934646606445,-0.041087109595537186,-0.028873968869447708,-0.022957153618335724,0.0029578437097370625,0.03787604346871376,0.00030899528064765036,-0.025273408740758896,-0.027109390124678612,0.03310012072324753,-0.0402059368789196,-0.00710925692692399,0.0022287508472800255,0.004230516497045755,0.008721552789211273,0.02903124876320362,-0.0311404000967741,-0.08841324597597122,0.0031045617070049047,0.009152657352387905,0.016881726682186127,-0.005611129570752382,-0.0031690888572484255,0.021085428074002266,-0.02831428125500679,0.048467300832271576,0.01898866891860962,0.0006354081560857594,0.01676570437848568,-0.000662906386423856,-0.0384545773267746,0.03608482703566551,0.05457963049411774,-0.0072747268714010715,-0.01964256912469864,-0.05553551763296127,-0.004692623391747475,0.04682200774550438,-0.011361546814441681,-0.04015304893255234,-0.0561927929520607,0.04105165973305702,0.01330725196748972,-0.021345404908061028,-0.06099234148859978,-0.01621834747493267,-0.06690460443496704,0.06585146486759186,0.02814149670302868,-0.01314791664481163,-0.007793497294187546,0.033543508499860764,-0.055966105312108994,0.02658158726990223,0.0223837997764349,-0.10280616581439972,-0.04429135099053383,-0.024168863892555237,-0.016212860122323036,-0.0400705523788929,0.04451391473412514,0.009256976656615734,-0.04193010553717613,-0.04012979194521904,0.022277729585766792,0.04220247641205788,-0.000717713322956115,-0.0207198578864336,0.032023217529058456,-0.002025764901190996,-0.021248457953333855,0.04502580314874649,0.03542681038379669,-0.1455930471420288,0.027193764224648476,0.05783639848232269,-0.046204593032598495,-0.010396303609013557,0.02081250585615635,0.02727494016289711,0.0410759337246418,0.0008972997311502695,-0.018144721165299416,0.05384243652224541,0.028916988521814346,0.022710662335157394,-0.07740067690610886,-0.004026513546705246,-0.0175849050283432,-0.08226660639047623,-0.028935985639691353,-0.016143890097737312,-0.0413469597697258,-0.008981898427009583,-0.009301531128585339,-0.032785478979349136,0.03106585331261158,0.06062140688300133,-0.04816022142767906,-0.02594326063990593,0.051132991909980774,-0.0063490839675068855,-0.009445500560104847,0.02288343757390976,0.022064434364438057,0.020356589928269386,-0.038057390600442886,0.03629877418279648,-0.02173980325460434,0.028081437572836876,0.02045910619199276,0.0059557450003921986,-0.026439184322953224,-0.0004901132779195905,0.048861630260944366,0.004007868934422731,0.02773268148303032,-0.0223289392888546,0.014604407362639904,0.028155332431197166,-0.012093170545995235,-0.014422552660107613,0.009607053361833096,-0.005484732799232006,-0.01001857127994299,0.06744617223739624,-0.0005649449885822833,0.04116560146212578,0.008361662738025188,-0.007121196482330561,-0.016132038086652756,0.02073306031525135,0.009983697906136513,-0.007699721492826939,-0.011656048707664013,0.00947642419487238,0.0008242411422543228,-0.03652334585785866,0.006363390479236841,0.002172489184886217,0.0038129782769829035,-0.026018092408776283,-0.016386376693844795,-0.0032448386773467064,-0.05746082589030266,-5.7608417760167426e-33,-0.019033992663025856,-0.02916085347533226,-0.03697991743683815,-0.005071945954114199,0.027979254722595215,-0.02563299983739853,-0.005669379606842995,-0.04499358311295509,-0.0052234213799238205,0.0065216259099543095,0.0032523476984351873,-0.016544075682759285,0.015677064657211304,0.020360087975859642,0.026243189349770546,-0.009839286096394062,0.029104573652148247,-0.012166556902229786,0.01737244799733162,0.026929687708616257,-0.0670425221323967,0.008898591622710228,-0.0011820433428511024,0.04415055736899376,-0.03115740790963173,-0.028049886226654053,-0.024977490305900574,0.021200386807322502,0.01133792009204626,0.034832265228033066,-0.04296807199716568,-0.032822053879499435,-0.03065633773803711,-0.023225367069244385,0.014756342396140099,-0.0417875200510025,-0.024679411202669144,-0.022194834426045418,-0.023426029831171036,0.04055633395910263,0.07244555652141571,0.007817860692739487,0.028468981385231018,-0.010675651021301746,-0.012669337913393974,0.0035835495218634605,-0.015880916267633438,-0.009609327651560307,-0.0038742967881262302,-0.026668710634112358,-0.020959075540304184,0.009092709049582481,0.025000371038913727,0.02974742278456688,0.03290907293558121,0.025295164436101913,0.0468856506049633,-0.07433655858039856,-0.03084130398929119,-0.02457268163561821,-0.013606295920908451,-0.04218388721346855,0.017149269580841064,0.01721923053264618,0.026102213189005852,-0.006656909827142954,-0.019401397556066513,0.00914708897471428,0.0027434041257947683,-0.022148236632347107,-0.029484888538718224,0.038604456931352615,0.03153819218277931,-0.03485482558608055,-0.02765592373907566,0.0936485081911087,0.0216195248067379,-0.00310015631839633,0.00040478588198311627,0.08995939046144485,-0.010613979771733284,0.010364856570959091,0.006752875167876482,0.009927457198500633,0.02549006976187229,-0.05862241983413696,0.015548070892691612,0.010180969722568989,0.03900973126292229,0.005838518496602774,0.03600659593939781,0.06183579936623573,-0.03532510623335838,0.04658188670873642,-0.06874531507492065,0.012969255447387695,0.0495590977370739,0.056774649769067764,-0.006398428697139025,-0.05504770576953888,0.0225047767162323,-0.006017850246280432,-0.01819196343421936,-0.04647476598620415,-0.008704868145287037,0.010124698281288147,-0.004723747726529837,-0.04542124643921852,-0.061741527169942856,0.0019249279284849763,0.017126087099313736,0.019218159839510918,-0.01451066043227911,-0.04038483276963234,-0.013576838187873363,-0.024592699483036995,-0.03839658573269844,-0.003095532301813364,0.02397981658577919,-0.0049774376675486565,0.01888852007687092,0.02221318520605564,0.0038306687492877245,-0.008226705715060234,0.08056878298521042,-0.007260344456881285,0.010284285992383957,0.04152819514274597,0.0076858876273036,0.012269321829080582,0.004748755134642124,0.041454508900642395,2.4709422064006503e-7,0.015465090982615948,0.03589751943945885,-0.040567632764577866,0.009182233363389969,-0.010214796289801598,-0.043315548449754715,0.006997642107307911,-0.040301207453012466,-0.000010844082680705469,-0.08413419127464294,0.020335223525762558,0.012124153785407543,0.04919818788766861,0.06034629046916962,0.05872721970081329,-0.041988059878349304,0.008852161467075348,-0.06611508876085281,-0.052742816507816315,0.010708063840866089,0.05284295231103897,0.006850747857242823,0.036651454865932465,0.01805512048304081,-0.01328680757433176,0.01203983649611473,0.01774180680513382,-0.030514942482113838,-0.006312008015811443,-0.04278842359781265,0.032357145100831985,-0.03820503503084183,-0.033656686544418335,0.046868376433849335,0.0188001561909914,0.01601245440542698,-0.010208952240645885,-0.01584390364587307,0.026173558086156845,0.08887991309165955,0.034006401896476746,-0.049590736627578735,-0.013646971434354782,-0.06327756494283676,0.022834820672869682,-0.07480151951313019,0.0035716574639081955,0.025130175054073334,0.005557081196457148,0.022675780579447746,0.039757099002599716,0.003202663967385888,0.03185373544692993,-0.03739621490240097,0.015456752851605415,0.00713930232450366,-0.03130931779742241,0.03873647749423981,0.006167643703520298,0.06934874504804611,0.006230455823242664,-0.0030100210569798946,0.02735086902976036,-0.025569334626197815,0.043009012937545776,-0.04889156296849251,-0.010231988504529,3.282434354024328e-34,0.02017393708229065,-0.053742773830890656,0.05671018362045288,0.06731041520833969,0.03728818520903587,-0.012518145143985748,0.06863189488649368,-0.025874299928545952,0.025454619899392128,-0.08231765776872635,-0.012588605284690857]'
SET
  @TechnicalDesignVector_4a339689 = N'[0.0026493053883314133,-0.026035482063889503,-0.012299398891627789,-0.0067767854779958725,-0.01966853253543377,-0.010475614108145237,0.011791545897722244,0.07584792375564575,-0.11751160770654678,-0.027594681829214096,-0.02493472769856453,0.029898691922426224,0.02842581644654274,0.18918295204639435,0.02773907594382763,-0.12115631997585297,-0.011944974772632122,-0.003432471537962556,-0.01369750127196312,0.002561393426731229,0.012534905225038528,-0.007360001560300589,-0.03050883300602436,-0.02831524796783924,-0.001950749778188765,-0.020628513768315315,-0.052994001656770706,0.011259255930781364,0.025989724323153496,-0.052284952253103256,-0.02062450908124447,0.027192385867238045,-0.030427034944295883,-0.03262975066900253,0.0000018704735111896298,-0.026783326640725136,-0.031293947249650955,0.007417531218379736,-0.013585052452981472,0.04616139456629753,0.05121175944805145,-0.00897609256207943,0.02799384295940399,0.007935723289847374,-0.003323847893625498,-0.14080391824245453,-0.006592897232621908,0.10192585736513138,0.049845047295093536,-0.002112966263666749,0.013724632561206818,0.02859046496450901,-0.04454657807946205,0.005331892054527998,0.011485571041703224,0.00230377446860075,0.01651860401034355,-0.06889868527650833,0.008977510035037994,0.018554219976067543,0.002216799883171916,-0.015917383134365082,-0.00273928907699883,-0.018103066831827164,0.019666556268930435,0.028813697397708893,0.014571795240044594,-0.008173031732439995,-0.00337875890545547,0.016589103266596794,0.03892636299133301,0.014695688150823116,-0.023936297744512558,-0.003080811584368348,-0.015430258587002754,-0.02491004765033722,-0.012135526165366173,0.025767920538783073,0.006259887013584375,-0.01704411953687668,-0.06346163898706436,-0.002757477341219783,-0.029617521911859512,-0.00742162624374032,0.015868758782744408,0.016138941049575806,0.011787374503910542,-0.01113480981439352,-0.04415113478899002,-0.004761149175465107,-0.022971220314502716,-0.04531695693731308,-0.028383715078234673,0.032033368945121765,-0.014914884231984615,-0.010695219971239567,0.03023175336420536,0.03512367606163025,0.006596802733838558,0.034186288714408875,-0.02369796857237816,0.06457912176847458,-0.06715379655361176,0.032307762652635574,0.039337851107120514,-0.013952617533504963,-0.01879979483783245,-0.04026108980178833,-0.0017120101256296039,0.043362200260162354,0.023538226261734962,0.017409389838576317,-0.05524083599448204,0.03836708888411522,-0.05331175774335861,-0.014120670966804028,-0.02810320444405079,-0.01919165626168251,0.010915318503975868,0.05311524495482445,0.15997178852558136,0.008397601544857025,0.0038408543914556503,0.02191634103655815,-0.00040984724182635546,0.017708536237478256,-0.03625790402293205,-0.02138429321348667,0.0361417755484581,0.020899396389722824,-0.02583797462284565,-0.024159668013453484,0.02765347622334957,-0.03579089418053627,-0.033634066581726074,-0.02596897818148136,0.00016194859927054495,0.024776997044682503,-0.009307267144322395,0.04746437445282936,0.016795089468359947,0.02307109162211418,-0.06293193995952606,0.03800911083817482,-0.013715236447751522,-0.00691209314391017,0.013168751262128353,-0.023421425372362137,-0.02755456231534481,-0.000735902285668999,0.030785374343395233,0.0050016301684081554,-0.02479562535881996,-0.0011176305124536157,-0.0795854851603508,0.008755224756896496,-0.057312700897455215,-0.01792866550385952,-0.002973617985844612,0.05853987857699394,-0.00544659374281764,-0.044651489704847336,0.03996748477220535,0.011044522747397423,-0.03552444279193878,0.029101915657520294,-0.050184980034828186,-0.013222992420196533,0.020397644490003586,-0.04542439430952072,-0.03049338422715664,-0.03976208344101906,-0.0257580429315567,0.008393026888370514,0.007549908943474293,-0.06413621455430984,0.04603848606348038,-0.017627069726586342,-0.02603031136095524,0.0015747572761029005,0.08608188480138779,-0.11955375969409943,0.03416812792420387,0.0016561602242290974,0.07495120912790298,-0.017900804057717323,-0.07519640028476715,0.028040876612067223,-0.015548106282949448,-0.009439811110496521,-0.025108300149440765,0.01600104384124279,0.01186800841242075,0.04948408529162407,-0.020938696339726448,-0.003381239017471671,-0.03890122100710869,-0.028917504474520683,0.044305894523859024,0.00932855624705553,0.03855357691645622,-0.02525562047958374,0.01053418219089508,0.08968988060951233,0.017844324931502342,0.018373379483819008,0.046345729380846024,-0.03465212136507034,-0.05689748004078865,0.046247221529483795,0.013864917680621147,-0.0016410649986937642,0.0024340692907571793,0.003021366661414504,-0.036236003041267395,-0.02313970774412155,0.02818223275244236,0.004829922690987587,-0.04558711126446724,-0.018178358674049377,-0.032572679221630096,-0.019240833818912506,0.07434955984354019,-0.019187888130545616,0.17197009921073914,-0.017476998269557953,0.013387242332100868,-0.013932903297245502,0.04756801202893257,0.011753915809094906,-0.014052770100533962,-0.013011286966502666,0.025055309757590294,0.04522307962179184,0.03186402842402458,0.05284663662314415,0.08410050719976425,0.030490750446915627,0.032991450279951096,0.01955881528556347,-0.04738163948059082,-0.02161644585430622,-0.036338869482278824,-0.004086840432137251,0.013898910023272038,-0.003681297181174159,-0.0445140041410923,0.022814715281128883,-0.016274936497211456,0.011905117891728878,0.02791474387049675,0.06098025664687157,0.038886237889528275,-0.049690332263708115,-0.01498280931264162,0.034266140311956406,0.04896702989935875,-0.0021076486445963383,-0.03425520658493042,0.04846703261137009,-0.02602652832865715,-0.022887980565428734,-0.03163350000977516,-0.04643683508038521,0.020275752991437912,0.013577856123447418,0.07479280233383179,-0.010059872642159462,-0.006262552924454212,0.004919953178614378,-0.008629067800939083,0.029960548505187035,0.0019266594899818301,-0.031142262741923332,0.006122330203652382,0.0018792608752846718,-0.020381446927785873,0.013935464434325695,-0.036357030272483826,-0.00039048190228641033,-0.0005315020680427551,-0.044068846851587296,-0.02731928601861,0.032211948186159134,0.009302513673901558,-0.01674579456448555,-0.022407209500670433,-0.02489943988621235,-0.016214042901992798,-0.09070655703544617,-0.0010275908280164003,-0.0030379206873476505,0.026824645698070526,-0.0628235712647438,-0.038324810564517975,-0.004339537583291531,-0.022380415350198746,0.0038768108934164047,-0.016772259026765823,0.049229443073272705,-0.01257449109107256,-0.041225776076316833,0.0032693948596715927,-0.002029647585004568,-0.0031932913698256016,0.021189717575907707,-0.002972561400383711,-0.008152117021381855,0.0325617715716362,0.0957038626074791,0.04488210007548332,0.03244652971625328,-0.021600311622023582,-0.032596126198768616,0.022446556016802788,0.011408437974750996,0.012219035066664219,0.08949805796146393,0.012264503166079521,0.0560002438724041,0.016362017020583153,0.009487774223089218,-0.012571313418447971,-0.026923656463623047,-0.00501906918361783,0.021460693329572678,-0.002647634595632553,-0.02183307148516178,-0.05342560634016991,-0.03453105315566063,0.012376422062516212,-0.044842030853033066,0.0081058694049716,0.027443470433354378,0.003827579552307725,0.010009486228227615,-0.03042007051408291,-0.051311202347278595,0.01766127720475197,-0.022369667887687683,-0.00960969552397728,-0.033440910279750824,0.007839098572731018,-0.05338286608457565,0.014577269554138184,-0.009198981337249279,0.010395179502665997,0.030856551602482796,-0.061919864267110825,0.038353871554136276,0.033736277371644974,0.05186277627944946,0.0025498338509351015,-0.02099216729402542,-0.009448069147765636,0.06930205225944519,-0.027562033385038376,-0.03910703584551811,-0.01009125541895628,-0.045172858983278275,-0.04034017026424408,0.010372629389166832,0.06263116747140884,0.05073840916156769,0.02155514806509018,0.05333874002099037,0.033509448170661926,0.0008005477720871568,-0.007447404786944389,0.014833892695605755,-0.062209032475948334,0.020802577957510948,0.06313664466142654,0.05444449558854103,-0.013474518433213234,-0.009893704205751419,0.028569146990776062,0.018403058871626854,-0.03677264600992203,-0.010246255435049534,0.04077805578708649,-0.1008102148771286,0.0805169865489006,-0.03170014172792435,0.023430893197655678,0.027883846312761307,-0.0022599862422794104,0.015207449905574322,0.04357914254069328,-0.02032821998000145,-0.008925518952310085,-0.028344500809907913,-0.03140023350715637,0.017862020060420036,-0.0037971509154886007,0.016595598310232162,0.016689561307430267,0.03480413556098938,0.010951057076454163,0.013767684809863567,0.012533877044916153,0.09345106035470963,-0.019885603338479996,0.01814640313386917,0.05265992134809494,0.0016943048685789108,-0.0072723389603197575,0.0193487461656332,-0.011263790540397167,-0.03145231306552887,-0.05354025587439537,-0.036564890295267105,0.014570385217666626,-0.023400161415338516,-0.06217778101563454,0.008747615851461887,-0.03502980247139931,-0.017046818509697914,0.009896867908537388,0.07123523205518723,-0.020215464755892754,0.01661493629217148,-0.029676830396056175,0.010504046455025673,-0.02555377408862114,-0.015904845669865608,-0.030292866751551628,-0.04406734183430672,0.011599177494645119,0.01338130235671997,0.014616736210882664,0.025508524850010872,-0.03902280703186989,0.02557074837386608,-0.03560306876897812,-0.014993303455412388,-0.017156541347503662,0.03971771523356438,0.03539544343948364,-0.02442530170083046,-0.034212104976177216,0.0017434997716918588,0.04015902802348137,-0.024627769365906715,-0.02195584401488304,-0.07690700888633728,0.018138866871595383,0.037401288747787476,0.02717795968055725,-0.06255581974983215,-0.03050069697201252,0.023033589124679565,-0.05221039801836014,-0.005341903306543827,-0.04988650232553482,-0.03278075531125069,-0.02491842769086361,0.014665546827018261,0.009180608205497265,0.02478376217186451,0.02263084426522255,0.029034961014986038,-0.04200972989201546,0.027227431535720825,-0.021918339654803276,0.0008454599301330745,-0.033991482108831406,0.004006970673799515,-0.007121932227164507,-0.04370088130235672,0.011443580500781536,0.021176669746637344,-0.03949160501360893,-0.02406787872314453,0.04052169993519783,0.024952327832579613,0.004479263909161091,0.015733536332845688,0.02694033645093441,0.006859261076897383,0.005520709790289402,0.04422687366604805,-0.015665164217352867,-0.08048070222139359,0.04916088655591011,0.04813211411237717,-0.043102435767650604,-0.0202940646559,0.007775343023240566,-0.018736671656370163,0.04039055109024048,-0.0349893718957901,-0.005351863335818052,0.09933993220329285,0.04984664544463158,0.021064765751361847,0.00007494611054426059,-0.017860719934105873,0.028298625722527504,-0.07739805430173874,0.008488677442073822,-0.0030652987770736217,-0.03147375211119652,-0.019780049100518227,-0.04684077575802803,-0.037082087248563766,0.032186947762966156,0.03075183928012848,-0.015394642017781734,-0.05430091172456741,0.05729072168469429,0.0025988270062953234,-0.003148695919662714,-0.011994303204119205,0.028293680399656296,0.052979957312345505,-0.02734203264117241,0.03771698474884033,-0.0006559268804267049,-0.0018988195806741714,0.014404530636966228,0.011997697874903679,-0.015640849247574806,-0.01140082161873579,0.023605434224009514,0.02495284378528595,0.008841889910399914,0.004502603784203529,0.0009462403832003474,0.05167936533689499,0.015690317377448082,0.007984793744981289,0.003541144309565425,0.042279429733753204,-0.025657273828983307,0.09462098032236099,-0.07375035434961319,0.04914037510752678,0.007567616645246744,-0.029772009700536728,-0.00789716187864542,-0.021458102390170097,0.05546751990914345,0.022051798179745674,0.004854802042245865,0.009275528602302074,-0.022134386003017426,-0.04980945587158203,0.008680945262312889,0.003913354594260454,0.031709350645542145,-0.018779965117573738,-0.038181476294994354,-0.010713929310441017,0.009100466966629028,-6.677757124358882e-33,-0.05224759876728058,-0.011232552118599415,0.006652158685028553,-0.02519497275352478,-0.0009495647973380983,-0.010132343508303165,-0.046840161085128784,-0.053221024572849274,-0.021346816793084145,0.00002202334326284472,-0.03166234865784645,-0.019850172102451324,0.02660745568573475,0.0375959612429142,0.003936918452382088,-0.03608042746782303,0.050124041736125946,0.02481856569647789,0.004418980795890093,0.02075636386871338,-0.06566347181797028,0.009744319133460522,0.007237243931740522,-0.0005265375948511064,-0.022717753425240517,0.002140604890882969,-0.052572015672922134,0.06301014125347137,0.02760172262787819,0.025689082220196724,-0.04008227959275246,-0.018954042345285416,-0.04249844327569008,0.00539476377889514,0.019846348091959953,-0.010822970420122147,-0.014650709927082062,-0.025542082265019417,0.0019362464081496,0.024570170789957047,0.03788619115948677,0.0036461330018937588,0.00815250352025032,0.016282323747873306,0.0053168837912380695,-0.010096556507050991,-0.015177298337221146,-0.005872972775250673,-0.010863915085792542,-0.02576582506299019,0.024752026423811913,0.002669602632522583,-0.022827107459306717,0.04070913419127464,0.007201749365776777,0.037838149815797806,0.02903515100479126,-0.03465763106942177,-0.011026729829609394,0.006541653070598841,-0.047812122851610184,-0.04510173201560974,0.013737475499510765,0.024836862459778786,0.03457046300172806,-0.0046910010278224945,-0.05723058432340622,0.04767056554555893,-0.06153314560651779,0.019882017746567726,-0.004883476532995701,0.020811758935451508,0.04470057040452957,-0.012704667635262012,-0.08401429653167725,0.032533615827560425,0.0545913428068161,0.005856755655258894,0.11952468752861023,0.06693708896636963,-0.03434230387210846,0.04247339069843292,0.018956562504172325,0.023891210556030273,-0.03319632261991501,-0.03720135986804962,0.007801605388522148,-0.024077434092760086,0.027149014174938202,0.0037216527853161097,0.018549978733062744,0.04757974296808243,-0.0277788657695055,0.03557557985186577,-0.0570877380669117,0.021145813167095184,0.058849237859249115,0.05877538025379181,-0.0017875327030196786,-0.04760274291038513,0.061151981353759766,0.012343424372375011,-0.00909140519797802,-0.0370614267885685,-0.013196173124015331,0.027680877596139908,-0.03785458952188492,0.011952461674809456,-0.06465018540620804,0.008038537576794624,0.027997244149446487,-0.0014964340953156352,-0.015026280656456947,-0.07687828689813614,0.01594483107328415,-0.014145282097160816,-0.011519616469740868,-0.04320474714040756,0.019211018458008766,0.04380491375923157,0.0596192330121994,0.05077315866947174,0.00772317498922348,0.024154191836714745,0.008591177873313427,-0.01228856761008501,-0.0412013866007328,0.009497787803411484,-0.009818075224757195,-0.018230421468615532,-0.001073574647307396,0.005954085849225521,2.7614083819571533e-7,0.02610882930457592,0.035053614526987076,-0.023640180006623268,0.020295076072216034,0.0049538323655724525,-0.049604158848524094,-0.034427426755428314,-0.030337819829583168,-0.0010676499223336577,-0.053346335887908936,0.027528924867510796,0.003181979525834322,-0.009410799480974674,0.043303538113832474,0.05945002660155296,-0.0381961390376091,-0.05249388888478279,-0.053282544016838074,-0.028986988589167595,0.026613764464855194,0.05266420915722847,0.024975422769784927,0.05452347546815872,0.020079871639609337,0.014507678337395191,0.03098391741514206,0.03763134777545929,0.0037601585499942303,-0.00186530826613307,-0.051796671003103256,-0.01854785718023777,-0.05338093265891075,-0.0173738244920969,-0.029917605221271515,0.016320640221238136,0.019569914788007736,-0.018575653433799744,0.022880518808960915,0.03844214975833893,0.11661411076784134,-0.011562133207917213,-0.010360299609601498,-0.019806042313575745,-0.08338026702404022,0.038659583777189255,-0.00390662020072341,0.0015139380702748895,-0.003916974179446697,-0.07050211727619171,-0.01470885518938303,-0.005344732664525509,-0.005426555871963501,-0.02484131045639515,-0.002943833824247122,0.003040607552975416,0.00994199700653553,-0.015989098697900772,0.024102402850985527,0.004423850681632757,-0.006669697817414999,-0.02380458451807499,0.004626073874533176,-0.0028702819254249334,0.010307809337973595,0.02685016393661499,-0.0048782359808683395,-0.03943968936800957,2.812573879555053e-34,0.010366647504270077,-0.048623278737068176,0.011038224212825298,-0.007755553815513849,0.03817620873451233,-0.019796524196863174,0.049722496420145035,-0.041820380836725235,0.0030836325604468584,-0.08038843423128128,-0.022571805864572525]'
SET
  @HasCustomProps_4a339689 = 1
SET
  @HasCustomEvents_4a339689 = 1
SET
  @RequiresData_4a339689 = 0
SET
  @DependencyCount_4a339689 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_4a339689 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_4a339689 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_4a339689 = 1
SET
  @ID_4a339689 = '7FDE3B05-BE26-4E6C-881D-A352690DCC31'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_4a339689,
  @Name = @Name_4a339689,
  @Version = @Version_4a339689,
  @VersionSequence = @VersionSequence_4a339689,
  @Title = @Title_4a339689,
  @Description = @Description_4a339689,
  @Type = @Type_4a339689,
  @Status = @Status_4a339689,
  @DeveloperName = @DeveloperName_4a339689,
  @DeveloperEmail = @DeveloperEmail_4a339689,
  @DeveloperOrganization = @DeveloperOrganization_4a339689,
  @SourceRegistryID = @SourceRegistryID_4a339689,
  @ReplicatedAt = @ReplicatedAt_4a339689,
  @LastSyncedAt = @LastSyncedAt_4a339689,
  @Specification = @Specification_4a339689,
  @FunctionalRequirements = @FunctionalRequirements_4a339689,
  @TechnicalDesign = @TechnicalDesign_4a339689,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_4a339689,
  @TechnicalDesignVector = @TechnicalDesignVector_4a339689,
  @HasCustomProps = @HasCustomProps_4a339689,
  @HasCustomEvents = @HasCustomEvents_4a339689,
  @RequiresData = @RequiresData_4a339689,
  @DependencyCount = @DependencyCount_4a339689,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_4a339689,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_4a339689,
  @HasRequiredCustomProps = @HasRequiredCustomProps_4a339689,
  @ID = @ID_4a339689;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_fb4da8e3 NVARCHAR(MAX),
@Name_fb4da8e3 NVARCHAR(500),
@Version_fb4da8e3 NVARCHAR(50),
@VersionSequence_fb4da8e3 INT,
@Title_fb4da8e3 NVARCHAR(1000),
@Description_fb4da8e3 NVARCHAR(MAX),
@Type_fb4da8e3 NVARCHAR(255),
@Status_fb4da8e3 NVARCHAR(50),
@DeveloperName_fb4da8e3 NVARCHAR(255),
@DeveloperEmail_fb4da8e3 NVARCHAR(255),
@DeveloperOrganization_fb4da8e3 NVARCHAR(255),
@SourceRegistryID_fb4da8e3 UNIQUEIDENTIFIER,
@ReplicatedAt_fb4da8e3 DATETIMEOFFSET,
@LastSyncedAt_fb4da8e3 DATETIMEOFFSET,
@Specification_fb4da8e3 NVARCHAR(MAX),
@FunctionalRequirements_fb4da8e3 NVARCHAR(MAX),
@TechnicalDesign_fb4da8e3 NVARCHAR(MAX),
@FunctionalRequirementsVector_fb4da8e3 NVARCHAR(MAX),
@TechnicalDesignVector_fb4da8e3 NVARCHAR(MAX),
@HasCustomProps_fb4da8e3 BIT,
@HasCustomEvents_fb4da8e3 BIT,
@RequiresData_fb4da8e3 BIT,
@DependencyCount_fb4da8e3 INT,
@TechnicalDesignVectorEmbeddingModelID_fb4da8e3 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_fb4da8e3 NVARCHAR(MAX),
@HasRequiredCustomProps_fb4da8e3 BIT,
@ID_fb4da8e3 UNIQUEIDENTIFIER
SET
  @Namespace_fb4da8e3 = N'CRM/Dashboard'
SET
  @Name_fb4da8e3 = N'DrillDownPanel'
SET
  @Version_fb4da8e3 = N'1.0.0'
SET
  @VersionSequence_fb4da8e3 = 1
SET
  @Title_fb4da8e3 = N'Drill Down Panel'
SET
  @Description_fb4da8e3 = N'Slide-out panel for drilling down into deal details with filtering and sorting'
SET
  @Type_fb4da8e3 = N'Other'
SET
  @Status_fb4da8e3 = N'Published'
SET
  @Specification_fb4da8e3 = N'{"name":"DrillDownPanel","location":"embedded","code":"function DrillDownPanel({ isOpen, drillDownData, stageColors = {}, onClose, onOpenDeal, components }) {\n  const [localFilter, setLocalFilter] = useState('''');\n  const [localSort, setLocalSort] = useState(''Amount'');\n  const [displayMode, setDisplayMode] = useState(''cards'');\n  \n  if (!drillDownData) return null;\n  \n  // Get sub-components from registry\n  const DealCards = components?.[''DealCards''];\n  const DealList = components?.[''DealList''];\n  \n  const filteredDeals = drillDownData.deals.filter(deal => \n    deal.DealName?.toLowerCase().includes(localFilter.toLowerCase()) ||\n    deal.AccountName?.toLowerCase().includes(localFilter.toLowerCase())\n  );\n  \n  const sortedDeals = [...filteredDeals].sort((a, b) => {\n    switch (localSort) {\n      case ''Amount'':\n        return (b.Amount || 0) - (a.Amount || 0);\n      case ''CloseDate'':\n        return new Date(b.CloseDate || 0) - new Date(a.CloseDate || 0);\n      case ''Probability'':\n        return (b.Probability || 0) - (a.Probability || 0);\n      default:\n        return 0;\n    }\n  });\n  \n  const formatCurrency = (amount) => {\n    if (amount >= 1000000) return `$$' + '{(amount / 1000000).toFixed(1)}M`;\n    if (amount >= 1000) return `$$' + '{(amount / 1000).toFixed(0)}K`;\n    return `$$' + '{amount.toFixed(0)}`;\n  };\n  \n  return (\n    <div\n      style={{\n        position: ''fixed'',\n        right: isOpen ? 0 : ''-500px'',\n        top: ''75px'',\n        bottom: 0,\n        width: ''500px'',\n        backgroundColor: ''#fff'',\n        boxShadow: ''-4px 0 20px rgba(0,0,0,0.1)'',\n        zIndex: 1000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        transition: ''right 0.3s ease''\n      }}\n    >\n      <div style={{\n        padding: ''20px'',\n        borderBottom: ''1px solid #E5E7EB'',\n        backgroundColor: drillDownData.type === ''stage'' ? stageColors[drillDownData.metadata] : ''#3B82F6'',\n        color: ''white''\n      }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n          <h3 style={{ margin: 0 }}>{drillDownData.title}</h3>\n          <button\n            onClick={onClose}\n            style={{\n              background: ''none'',\n              border: ''none'',\n              color: ''white'',\n              fontSize: ''24px'',\n              cursor: ''pointer''\n            }}\n          >\n            ×\n          </button>\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''14px'', opacity: 0.9 }}>\n          {sortedDeals.length} deals • {formatCurrency(sortedDeals.reduce((sum, d) => sum + (d.Amount || 0), 0))}\n        </div>\n      </div>\n      \n      <div style={{ padding: ''16px'', borderBottom: ''1px solid #E5E7EB'' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Filter deals...\"\n          value={localFilter}\n          onChange={(e) => setLocalFilter(e.target.value)}\n          style={{\n            width: ''100%'',\n            padding: ''8px 12px'',\n            border: ''1px solid #D1D5DB'',\n            borderRadius: ''6px'',\n            marginBottom: ''12px''\n          }}\n        />\n        <div style={{ display: ''flex'', gap: ''8px'' }}>\n          <button\n            onClick={() => setDisplayMode(''cards'')}\n            style={{\n              padding: ''6px 12px'',\n              backgroundColor: displayMode === ''cards'' ? ''#3B82F6'' : ''#F3F4F6'',\n              color: displayMode === ''cards'' ? ''white'' : ''#374151'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer''\n            }}\n          >\n            Cards\n          </button>\n          <button\n            onClick={() => setDisplayMode(''list'')}\n            style={{\n              padding: ''6px 12px'',\n              backgroundColor: displayMode === ''list'' ? ''#3B82F6'' : ''#F3F4F6'',\n              color: displayMode === ''list'' ? ''white'' : ''#374151'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer''\n            }}\n          >\n            List\n          </button>\n          <select\n            value={localSort}\n            onChange={(e) => setLocalSort(e.target.value)}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px'',\n              flex: 1\n            }}\n          >\n            <option value=\"Amount\">Sort by Amount</option>\n            <option value=\"CloseDate\">Sort by Close Date</option>\n            <option value=\"Probability\">Sort by Probability</option>\n          </select>\n        </div>\n      </div>\n      \n      <div style={{ flex: 1, overflowY: ''auto'', padding: ''16px'' }}>\n        {displayMode === ''cards'' ? (\n          <DealCards \n            deals={sortedDeals} \n            stageColors={stageColors}\n            onOpenClick={onOpenDeal}\n          />\n        ) : (\n          <DealList \n            deals={sortedDeals}\n            stageColors={stageColors}\n            onOpenClick={onOpenDeal}\n          />\n        )}\n      </div>\n    </div>\n  );\n}","description":"Slide-out panel for drilling down into deal details with filtering and sorting","category":"Panel","type":"panel","properties":[{"name":"isOpen","type":"boolean","description":"Whether the panel is open","required":true},{"name":"drillDownData","type":"object","description":"Object containing title, deals array, type, and metadata","required":true},{"name":"stageColors","type":"object","description":"Object mapping stage names to colors","required":true},{"name":"onClose","type":"function","description":"Callback when panel is closed","required":true},{"name":"onOpenDeal","type":"function","description":"Callback to open a deal in external app","required":true}],"events":[{"name":"onPanelClose","description":"Fired when the panel is closed","parameters":[]},{"name":"onDealOpen","description":"Fired when a deal open action is triggered","parameters":[{"name":"entityName","type":"string","description":"Name of the entity"},{"name":"primaryKey","type":"array","description":"Primary key array"}]}],"dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["ID","Dealname","Accountname","Stage","Amount","CloseDate","Probability","Owner","CreatedAt"],"filterFields":["CloseDate","Stage","Owner"],"sortFields":["CloseDate","Amount","Probability"],"permissions":["read"]}]},"usageExample":"```javascript\n<DrillDownPanel\n  isOpen={isPanelOpen}\n  drillDownData={drillDownData}\n  stageColors={stageColors}\n  onClose={() => setIsPanelOpen(false)}\n  onOpenDeal={(entityName, pk) => callbacks.OpenEntityRecord(entityName, pk)}\n/>\n```","functionalRequirements":"- Slide in from right side at top: 75px\n- Display title and deal count/value summary\n- Allow filtering deals by text search\n- Support sorting by Amount, CloseDate, Probability\n- Toggle between card and list views\n- Include close button in header\n- Use appropriate background color based on drill-down type","technicalDesign":"Fixed position panel with CSS transitions. Contains local state for filter text, sort order, and display mode. Reuses DealCards and DealList components for display. Header color determined by drillDownData type/metadata."}'
SET
  @FunctionalRequirements_fb4da8e3 = N'- Slide in from right side at top: 75px
- Display title and deal count/value summary
- Allow filtering deals by text search
- Support sorting by Amount, CloseDate, Probability
- Toggle between card and list views
- Include close button in header
- Use appropriate background color based on drill-down type'
SET
  @TechnicalDesign_fb4da8e3 = N'Fixed position panel with CSS transitions. Contains local state for filter text, sort order, and display mode. Reuses DealCards and DealList components for display. Header color determined by drillDownData type/metadata.'
SET
  @FunctionalRequirementsVector_fb4da8e3 = N'[0.013854253105819225,0.005382989067584276,-0.005613735411316156,-0.030959494411945343,-0.011081614531576633,0.005692694801837206,0.02739526890218258,0.036794669926166534,0.009900320321321487,-0.03854367136955261,-0.04020577669143677,0.02201698161661625,-0.010341433808207512,0.11547282338142395,-0.027207382023334503,-0.09386280179023743,-0.028217582032084465,-0.0025043252389878035,0.02682581916451454,0.0033802019897848368,0.02932383120059967,-0.019063888117671013,-0.013358029536902905,-0.04360978305339813,0.050406429916620255,0.013199003413319588,-0.06295102089643478,0.05191640555858612,-0.024141421541571617,-0.07118473201990128,0.0010641904082149267,0.03755873814225197,-0.039792124181985855,-0.024957533925771713,0.0000018496032225812087,-0.020202655345201492,-0.0024730751756578684,-0.020455410704016685,-0.01678813248872757,0.04731862246990204,0.029003281146287918,-0.033720120787620544,0.07275702059268951,0.0009605941013433039,-0.017942339181900024,-0.090433269739151,-0.050184208899736404,0.10002341866493225,0.006503256503492594,-0.01595727913081646,0.01567786931991577,-0.0436844639480114,-0.009153748862445354,-0.045956578105688095,0.10275334119796753,-0.02536643296480179,0.008940530940890312,-0.022638658061623573,0.06356339156627655,-0.013625923544168472,0.023170506581664085,0.007894757203757763,0.0034116690512746572,-0.04933180287480354,0.01212639082223177,0.022914251312613487,0.004802908282727003,-0.05808570235967636,-0.0178704671561718,-0.03234754502773285,0.020876819267868996,-0.01909385435283184,-0.017690440639853477,-0.04976166412234306,-0.02256125584244728,-0.06897825002670288,-0.044710222631692886,0.033955786377191544,0.02329559437930584,-0.02517235092818737,0.01367232296615839,0.05584373697638512,-0.03133620321750641,0.0019171817693859339,0.017917849123477936,-0.005672857630997896,-0.008314707316458225,-0.036374837160110474,0.013876049779355526,0.005298983305692673,0.0669078454375267,0.011079045943915844,-0.0342923067510128,-0.0027870533522218466,-0.07053516060113907,-0.02775152027606964,0.052825670689344406,0.06258770823478699,0.04260433837771416,-0.0052625276148319244,-0.07007891684770584,0.030040448531508446,0.07635375112295151,0.03300388157367706,0.03610548749566078,-0.03174290060997009,-0.01171281561255455,-0.0344415046274662,-0.07969867438077927,0.06283384561538696,0.036325935274362564,0.008639300242066383,-0.0071479557082057,0.028446340933442116,-0.04753217101097107,-0.040832631289958954,-0.0021919505670666695,-0.016371840611100197,0.03412601351737976,0.006724962033331394,0.08397747576236725,0.02136245369911194,0.024538539350032806,0.0248247180134058,0.001308472827076912,-0.03932199999690056,-0.015973880887031555,-0.05958076938986778,-0.001071344711817801,0.002543517155572772,-0.03289816156029701,0.02744871936738491,-0.0022146841511130333,-0.027517596259713173,0.008772377856075764,-0.040517259389162064,-0.00043017163989134133,0.024713044986128807,-0.050299420952796936,0.0445728525519371,0.03501233458518982,0.029731417074799538,-0.05227615311741829,0.055190231651067734,0.0029710072558373213,0.012647487223148346,-0.03600979968905449,0.054386939853429794,0.005840768106281757,0.020428812131285667,-0.01672181859612465,0.010982201434671879,-0.0009831358911469579,0.016339875757694244,0.013278283178806305,0.0051967678591609,0.005551985464990139,-0.01264229603111744,-0.06524886190891266,0.05167273059487343,0.007932780310511589,-0.02418377622961998,0.032097265124320984,0.013318437151610851,-0.04673684760928154,0.016048366203904152,-0.016844145953655243,-0.008336924947798252,-0.04323659837245941,0.011279198341071606,0.003470005700364709,0.014290472492575645,-0.04049934074282646,0.032698482275009155,0.025990305468440056,0.013649346306920052,0.09520319104194641,-0.017400028184056282,-0.0025647126603871584,0.002094532363116741,0.04220466688275337,-0.06756722927093506,-0.014609037898480892,-0.0031777743715792894,0.009080998599529266,0.011284722946584225,-0.07310976833105087,-0.03559932857751846,-0.008873156271874905,0.014503156766295433,-0.0028579258359968662,0.02365405485033989,0.029753023758530617,0.02006515860557556,-0.023469677194952965,0.009023641236126423,-0.007165633141994476,-0.04652482271194458,0.02549515664577484,0.0076878126710653305,-0.01696670986711979,-0.03209304064512253,0.0439436249434948,0.06804783642292023,0.05367976054549217,0.025358593091368675,0.04011879861354828,-0.03747503086924553,-0.07598592340946198,0.049838289618492126,0.11307002604007721,-0.0014987706672400236,-0.07435495406389236,-0.009751263074576855,-0.029680956155061722,0.017926987260580063,0.03279957175254822,0.021730035543441772,-0.019168807193636894,-0.01973564550280571,-0.011113300919532776,0.02627532370388508,0.046945665031671524,0.02082012966275215,0.11051195859909058,-0.0019066629465669394,0.02580215595662594,0.005295002367347479,0.02643103525042534,-0.0008543080184608698,0.018737182021141052,-0.01505933329463005,0.023311613127589226,0.021051550284028053,0.034920286387205124,0.02019936591386795,0.01326174195855856,0.09515691548585892,0.006367370020598173,-0.00042116770055145025,0.0074808537028729916,-0.04591793194413185,-0.014756141230463982,0.03295564651489258,-0.02808041125535965,-0.017788639292120934,-0.014680294319987297,-0.003696073079481721,0.01418840978294611,-0.02982426807284355,-0.001871279557235539,0.010668045841157436,0.09683552384376526,0.006675302516669035,0.010265578515827656,0.08580853790044785,-0.06985938549041748,-0.0009351861081086099,-0.05732681229710579,0.05720335617661476,-0.017856230959296227,-0.03117532469332218,-0.004800992086529732,-0.025235207751393318,0.05878453329205513,-0.008344972506165504,0.07269993424415588,-0.030218616127967834,-0.012919723987579346,-0.007497115526348352,-0.012525185942649841,0.030926698818802834,0.04741434380412102,-0.029989443719387054,-0.012958218343555927,0.040501225739717484,-0.02224893867969513,-0.008635449223220348,-0.030308661982417107,0.005202017724514008,0.027785878628492355,-0.0192117877304554,-0.05548074468970299,0.026302486658096313,0.012908924371004105,-0.02635910175740719,0.029321717098355293,-0.04913303256034851,-0.014861495234072208,-0.0531255342066288,0.06712841242551804,-0.028682386502623558,0.062173034995794296,0.007962523028254509,-0.04431641101837158,-0.024516675621271133,-0.08830345422029495,0.07049179822206497,0.013840197585523129,0.03362739458680153,-0.03435249999165535,-0.0007269299239851534,-0.004132185131311417,0.016495289281010628,-0.010454573668539524,0.059015240520238876,0.010027405805885792,-0.0108981654047966,-0.014273186214268208,0.06496129930019379,0.0021628662943840027,0.02997344546020031,0.030465928837656975,-0.08508188277482986,0.011332894675433636,-0.011317447759211063,-0.032241884618997574,0.052487585693597794,-0.010072414763271809,0.08420421928167343,0.02197764441370964,-0.031137609854340553,-0.028886504471302032,0.003491931362077594,-0.01116885058581829,-0.011112219654023647,-0.037124667316675186,-0.025059422478079796,0.012060604989528656,-0.0025359694845974445,0.00945232156664133,-0.047485604882240295,-0.0139321843162179,-0.013945274986326694,0.017983566969633102,0.03479960560798645,-0.009496056474745274,0.008316392078995705,-0.014167862944304943,-0.04564623162150383,-0.07014813274145126,0.017093554139137268,-0.02857723832130432,-0.0806347206234932,-0.001523716957308352,-0.020127370953559875,0.1079559251666069,0.03847208246588707,-0.13005481660366058,0.05510605126619339,0.04755660146474838,0.061453014612197876,-0.0013080476783216,-0.027745787054300308,0.02275235764682293,-0.03288775682449341,-0.04412902146577835,-0.035737015306949615,-0.03279872238636017,-0.04807112365961075,-0.00011138407717226073,-0.02071845345199108,-0.006650171708315611,0.0550568513572216,0.029860207810997963,0.024553507566452026,0.02462867647409439,0.00988699495792389,-0.005927639547735453,0.003917251247912645,-0.08519802987575531,0.057074885815382004,0.04625702276825905,0.04021012783050537,0.002689640736207366,-0.041440609842538834,-0.010275213979184628,-0.0016035318840295076,-0.008243396878242493,0.005166756454855204,0.028596987947821617,0.022316791117191315,0.04304214194417,-0.02695334702730179,0.0590936616063118,0.008548103272914886,-0.02971409633755684,-0.02972828596830368,-0.003336692927405238,0.004585593473166227,-0.012085235677659512,0.006263385992497206,0.036845602095127106,-0.0032417166512459517,-0.07243014872074127,-0.03617732971906662,0.008402160368859768,0.05586623772978783,-0.06974218040704727,-0.024429408833384514,-0.023206479847431183,0.013580095954239368,0.06883867084980011,-0.003057558089494705,0.04467011243104935,-0.07783190160989761,-0.0005138833075761795,0.03952844813466072,0.02305840700864792,-0.027037493884563446,-0.07444614171981812,-0.039822064340114594,0.0003506327047944069,-0.03618576005101204,0.012053463608026505,-0.034258242696523666,0.02459513023495674,-0.002608009148389101,0.002954520285129547,0.0343111976981163,0.010115005075931549,-0.0033550614025443792,-0.042857199907302856,0.005505810491740704,-0.019775955006480217,-0.012015650980174541,-0.00484042102470994,-0.0412394143640995,0.012144266627728939,0.0498194694519043,0.002246866701170802,0.026447895914316177,-0.05473680421710014,0.015472481027245522,0.05240882188081741,-0.024848636239767075,-0.00258884159848094,-0.007621795404702425,0.0030905595049262047,0.013028859160840511,-0.011834326200187206,-0.03832263872027397,-0.003146532690152526,0.015298813581466675,-0.031668007373809814,-0.042429935187101364,0.01976124197244644,0.006177348084747791,-0.04895283654332161,-0.002598621416836977,-0.01827789470553398,-0.04143819957971573,0.03338806331157684,0.0490824393928051,-0.06537256389856339,-0.01465863361954689,0.02573172003030777,0.0003818661207333207,0.030368607491254807,-0.04043765366077423,0.02446524053812027,0.037466756999492645,-0.06750275194644928,-0.01821478269994259,0.03041166625916958,-0.07856075465679169,-0.0021263491362333298,-0.024387631565332413,-0.03793655335903168,-0.03437209501862526,0.012722049839794636,0.018890324980020523,-0.029783112928271294,-0.04490954801440239,-0.021043363958597183,-0.03781736642122269,-0.03525343909859657,-0.007490646559745073,0.045212674885988235,0.0117427883669734,0.017812427133321762,0.014466670341789722,0.01414403971284628,-0.0960608497262001,0.03171800822019577,0.07655028253793716,-0.03194967657327652,-0.04197628051042557,0.04042913019657135,0.0010756428819149733,0.050346359610557556,-0.0027238549664616585,0.0047587002627551556,0.05983676761388779,-0.0044621555134654045,0.001130425138399005,-0.009668609127402306,-0.026884766295552254,-0.05195300653576851,-0.08956891298294067,0.005686200223863125,-0.009873691946268082,-0.012491079047322273,-0.035460129380226135,-0.03179080784320831,0.003382874419912696,0.025526493787765503,0.017589066177606583,-0.03569970652461052,-0.024858597666025162,0.031860850751399994,-0.013456654734909534,-0.026649339124560356,-0.08963928371667862,0.03141806274652481,0.0494421012699604,-0.06610769033432007,-0.02293735183775425,-0.01568727381527424,0.011275320313870907,0.025225596502423286,0.0023059966042637825,-0.004944751970469952,0.005821445491164923,0.04145136475563049,-0.03250713273882866,0.051182836294174194,0.003366079181432724,-0.025189869105815887,0.048887211829423904,-0.07514730095863342,-0.02004064992070198,0.0447012223303318,0.005092144012451172,-0.019971054047346115,0.03103385865688324,0.02647729404270649,0.05555923655629158,0.010643238201737404,-0.04959242418408394,-0.05844123661518097,0.051718518137931824,0.012426353991031647,-0.016567710787057877,0.0076334523037076,0.030844364315271378,-0.013601780869066715,-0.014426072128117085,-0.015074942260980606,0.022658471018075943,0.004144817590713501,-0.034067027270793915,-0.03787783160805702,0.02369241788983345,-0.04902122542262077,-5.963979322124327e-33,-0.01896035298705101,-0.00824685674160719,-0.023843150585889816,0.02242804318666458,0.07241825759410858,-0.06349443644285202,0.0031704844441264868,-0.019426947459578514,0.016213487833738327,0.005330175161361694,0.0025620919186621904,-0.04762395843863487,0.02142815850675106,-0.01182903815060854,0.02050194889307022,0.008851666934788227,0.0004123516846448183,-0.012121643871068954,0.02666892111301422,-0.010366559028625488,-0.10391417890787125,0.009339514188468456,-0.024492856115102768,0.02636650763452053,-0.05100810155272484,-0.029589960351586342,-0.01910370960831642,0.029826927930116653,0.0014076005900278687,0.018178096041083336,-0.0063478522934019566,-0.03853057697415352,-0.03347767889499664,0.01376901101320982,0.02857339382171631,-0.032930951565504074,-0.012831812724471092,0.009048179723322392,0.0227451603859663,0.018492640927433968,0.08318041265010834,0.040537137538194656,0.009780650958418846,0.0005304858786985278,0.011935625225305557,0.007322148885577917,0.0080938208848238,-0.02043217234313488,-0.015965236350893974,-0.009767516516149044,0.005389707628637552,0.0179591067135334,0.00027363075059838593,-0.009347100742161274,0.028682401403784752,0.030094927176833153,0.028829319402575493,-0.015269782394170761,-0.026336930692195892,0.027838055044412613,-0.004908856935799122,-0.054615214467048645,0.0010513331508263946,-0.03427174687385559,0.040536846965551376,0.008040842600166798,0.01605905033648014,-0.0007790587260387838,0.042350251227617264,-0.0173233263194561,-0.02181590348482132,0.03385340794920921,0.00911932997405529,-0.027312660589814186,0.030023744329810143,0.06844915449619293,0.03214934468269348,0.020590486004948616,0.02672831155359745,0.10527394711971283,-0.01298051793128252,0.028537079691886902,-0.005679656285792589,0.014242265373468399,0.0281640887260437,-0.04786181449890137,-0.007589914835989475,-0.0434340238571167,0.037594985216856,0.03898205980658531,-0.034735262393951416,0.004868031479418278,-0.05055885761976242,0.04405791684985161,-0.043363336473703384,0.0037895268760621548,0.04909748584032059,0.03427927568554878,-0.003981880843639374,-0.08087197691202164,0.025255603715777397,-0.018391111865639687,-0.006898860447108746,-0.04825243726372719,-0.03749517723917961,0.0036382500547915697,-0.0009300647070631385,-0.004933255724608898,-0.019890569150447845,0.005433722864836454,0.05118647590279579,0.0022552029695361853,0.007561059668660164,-0.012079182080924511,-0.029187088832259178,-0.006349058821797371,-0.03753698617219925,-0.014237532392144203,0.009659131988883018,-0.015114235691726208,0.022581137716770172,-0.00628381734713912,0.03086909092962742,-0.0021319701336324215,0.04531287029385567,-0.020075252279639244,0.022488977760076523,-0.028163475915789604,0.044442228972911835,0.012041970156133175,-0.010491307824850082,0.04099084809422493,2.7302601779410907e-7,0.023127753287553787,0.02042999304831028,-0.03890606015920639,0.05172170326113701,0.017232021316885948,-0.040858980268239975,0.0033716396428644657,-0.02297583594918251,0.008986230008304119,-0.07513667643070221,0.053894516080617905,0.01957007497549057,0.03546608239412308,0.035800155252218246,-0.028582220897078514,-0.032270126044750214,0.05089538171887398,-0.08239661157131195,-0.012616772204637527,-0.006351808086037636,0.040911342948675156,0.020490139722824097,0.03594021871685982,0.019883418455719948,0.03692714497447014,0.018147582188248634,-0.016264060512185097,-0.0790407806634903,0.018130844458937645,-0.03324175253510475,0.02153661660850048,-0.0018800186226144433,-0.004816022701561451,-0.01568150334060192,0.027918178588151932,-0.014264950528740883,0.02601088583469391,0.013650789856910706,0.036889784038066864,0.03724948689341545,0.007731430232524872,-0.07315048575401306,0.003143695881590247,-0.08995478600263596,-0.032363902777433395,-0.025452150031924248,0.057882629334926605,-0.023106733337044716,-0.04677262529730797,-0.019644392654299736,0.036344632506370544,0.000046219618525356054,0.049869880080223083,-0.024911418557167053,0.021244261413812637,-0.013693340122699738,-0.0026963946875184774,0.04226883128285408,0.016775954514741898,0.002638325560837984,0.002971677342429757,-0.010317688807845116,0.008831621147692204,-0.022058656439185143,0.006879099179059267,-0.001092221005819738,0.011678204871714115,2.7531804203585744e-34,0.049318842589855194,0.0164343174546957,0.035344403237104416,0.038464922457933426,0.02862096019089222,-0.01607651263475418,0.0072648609057068825,-0.029846124351024628,0.0177561454474926,-0.0652979388833046,-0.0018112461548298597]'
SET
  @TechnicalDesignVector_fb4da8e3 = N'[0.009236537851393223,-0.00621275557205081,0.006890708580613136,-0.051591359078884125,-0.01940242573618889,-0.0012250171275809407,0.042895179241895676,0.06434503197669983,-0.013213284313678741,-0.04813307523727417,-0.00969556625932455,0.010361826978623867,0.04762771725654602,0.11141957342624664,0.00201439275406301,-0.05405646562576294,-0.039730772376060486,0.05856456235051155,0.015018340200185776,0.010571555234491825,0.024275215342640877,-0.0359090231359005,-0.06021186709403992,-0.03157321363687515,0.012785524129867554,-0.014045397751033306,-0.07307058572769165,0.019936643540859222,0.02489442192018032,-0.03592069074511528,0.030093306675553322,0.06219314783811569,-0.060953326523303986,0.004347304347902536,0.000001909288812385057,-0.020270105451345444,-0.02487645111978054,-0.0038595751393586397,-0.002050223993137479,0.021086793392896652,-0.015944402664899826,0.019519273191690445,0.01688479818403721,-0.0038494188338518143,0.00773937301710248,-0.1021188274025917,-0.020556848496198654,0.05472409725189209,0.05587112158536911,-0.00614059017971158,0.020897869020700455,-0.012670084834098816,-0.02308814786374569,0.0038288491778075695,0.015220253728330135,0.04254292696714401,0.02769521065056324,0.01854815147817135,0.06510040163993835,0.0015598965110257268,0.007445840630680323,-0.0158980805426836,-0.006466065067797899,-0.04568193107843399,-0.04198026284575462,0.003962111193686724,-0.011355377733707428,-0.05530250072479248,0.004615345038473606,0.025321675464510918,0.07527274638414383,-0.04124342277646065,0.005166445858776569,-0.05533246323466301,0.007286270149052143,0.009949639439582825,0.0000526107796758879,0.031045252457261086,-0.007012347225099802,0.008367315866053104,-0.02876139245927334,0.026970433071255684,-0.014380118809640408,-0.027845347300171852,-0.0497535765171051,0.10679028183221817,-0.005826619453728199,-0.011999176815152168,-0.075060173869133,-0.020510904490947723,0.11559354513883591,-0.02098006382584572,-0.028533946722745895,0.018547791987657547,-0.03498091176152229,0.008747615851461887,0.02593449130654335,-0.015619306825101376,0.008245663717389107,0.019853714853525162,-0.06626472622156143,0.04039308428764343,0.031412843614816666,0.021750837564468384,0.050027571618556976,0.030437298119068146,0.01256526354700327,-0.012854129076004028,-0.05412574112415314,0.012979480437934399,0.01837945356965065,0.010203290730714798,0.005101500079035759,0.026108117774128914,-0.006159614305943251,-0.028850296512246132,-0.00954144075512886,0.0015390539774671197,0.00719040259718895,0.06211462616920471,0.08352071046829224,0.022689402103424072,-0.0009647788247093558,-0.030340297147631645,0.036287110298871994,-0.004137933719903231,0.018084844574332237,-0.08315763622522354,0.03395975008606911,-0.028927689418196678,-0.021275639533996582,-0.03395991772413254,-0.00534779392182827,-0.011054771952331066,-0.047083303332328796,-0.05802669748663902,-0.010297904722392559,0.03382240608334541,0.007332597393542528,0.0761597603559494,0.018303802236914635,0.017292577773332596,-0.03985355794429779,0.10369453579187393,-0.01647128164768219,0.053395871073007584,-0.0003261901729274541,-0.02187797799706459,0.008027832955121994,0.02015146054327488,0.000747570360545069,-0.00015697737399023026,-0.008897943422198296,0.01046060025691986,-0.04180976748466492,0.02134443074464798,0.029983943328261375,0.0022499843034893274,-0.007842409424483776,0.07839769124984741,0.018029771745204926,-0.052603334188461304,0.02171989344060421,0.028268450871109962,-0.048318784683942795,-0.014559008181095123,-0.09343277662992477,-0.020329266786575317,-0.06312904506921768,-0.08101804554462433,-0.019805908203125,-0.06198529154062271,0.007443833164870739,-0.005588192492723465,0.005674560088664293,0.009262179024517536,0.12612631916999817,-0.0007720084977336228,-0.07158450037240982,0.03528852015733719,0.04678112268447876,-0.045327283442020416,0.02195698395371437,-0.005429049488157034,0.01564813405275345,-0.027828125283122063,-0.05664690583944321,0.015183073468506336,-0.02458248659968376,0.023903487250208855,-0.026811886578798294,0.05067038536071777,0.0047986325807869434,0.03910824656486511,-0.03452055901288986,0.006114010699093342,-0.01730879209935665,0.03259814903140068,0.034866247326135635,0.04610776528716087,-0.016917981207370758,0.0012715680059045553,0.028388751670718193,0.07325001806020737,0.025811458006501198,-0.03623633459210396,-0.0028342348523437977,-0.037366971373558044,0.031522925943136215,0.07388769835233688,0.03511812165379524,0.02017715759575367,-0.07122179865837097,0.020372537896037102,-0.05313164368271828,-0.013975894078612328,0.033705033361911774,0.0239468552172184,-0.04986048862338066,-0.028415288776159286,-0.007036952767521143,0.0758342370390892,0.03656725585460663,0.025208251550793648,0.12357241660356522,0.0252686757594347,-0.01935398578643799,-0.03018997795879841,0.02617611549794674,-0.02638106979429722,-0.00886486191302538,-0.0016218391247093678,0.024963706731796265,0.0718437060713768,0.02697066217660904,0.017941730096936226,0.006470027845352888,0.03499215468764305,0.0070617529563605785,0.03494888171553612,0.04043000563979149,0.003224015235900879,-0.06331183016300201,0.010941947810351849,-0.0011151486542075872,-0.03354862332344055,-0.057260945439338684,0.01096357498317957,-0.020535549148917198,0.008547896519303322,0.031318068504333496,0.0296584814786911,0.06430229544639587,-0.05557963252067566,-0.010516747832298279,0.06140351668000221,0.005267948377877474,0.009342866018414497,-0.02052585780620575,0.06296515464782715,0.04585718736052513,-0.06040046736598015,-0.015930144116282463,-0.030432233586907387,0.01099275890737772,-0.004744141362607479,0.0626368448138237,0.004380217753350735,-0.004656320903450251,-0.012415563687682152,0.00520352041348815,0.03004341945052147,0.006744985468685627,-0.017416218295693398,-0.004349318332970142,-0.002906311536207795,-0.0019006526563316584,0.04419272765517235,-0.03945852816104889,-0.014606581069529057,0.009970786981284618,-0.029025757685303688,-0.044949375092983246,0.01757424883544445,0.035095974802970886,0.008740333840250969,-0.02310352772474289,-0.09040471166372299,-0.04642032831907272,0.004251196049153805,0.029238909482955933,-0.012817468494176865,0.03308315575122833,-0.031015796586871147,-0.0244189091026783,-0.003339241025969386,-0.06881102919578552,0.09734772145748138,0.0422905758023262,0.03241748735308647,-0.07897919416427612,-0.015562884509563446,-0.012658742256462574,0.020969262346625328,-0.023099273443222046,0.09012533724308014,0.002820901572704315,0.0004645136359613389,0.00397495785728097,0.06772484630346298,-0.020103422924876213,0.03364617004990578,-0.0010403568157926202,0.014437957666814327,0.00769937364384532,0.029460933059453964,0.004747365135699511,0.04319845512509346,-0.023781824856996536,0.06980805844068527,-0.01810932531952858,0.005260968115180731,-0.02172655239701271,-0.015611161477863789,-0.03116529807448387,0.045339327305555344,-0.02258525975048542,-0.026846183463931084,-0.04812879115343094,0.00604909798130393,-0.003967771772295237,-0.04140410199761391,-0.014367109164595604,-0.017016533762216568,0.017612233757972717,-0.0022592730820178986,-0.04422256723046303,-0.011897306889295578,0.01213398203253746,0.012452342547476292,-0.053767088800668716,-0.027233581990003586,-0.05423221364617348,-0.0062837316654622555,0.04773576930165291,0.004574889782816172,0.042165666818618774,0.02168649435043335,-0.12583290040493011,0.05721842870116234,0.04274370148777962,0.06510311365127563,-0.004402677528560162,0.017327092587947845,-0.017025653272867203,0.019340863451361656,-0.040964629501104355,0.018100135028362274,-0.03782516345381737,-0.008012240752577782,-0.018127622082829475,0.04750094935297966,-0.0007699657580815256,0.012815771624445915,0.01761220023036003,-0.01479009073227644,0.049405958503484726,-0.01578911580145359,-0.00851080659776926,-0.03705992549657822,-0.032180558890104294,0.026472918689250946,0.046857379376888275,0.03489426523447037,-0.019023295491933823,-0.05459028482437134,0.006355104502290487,0.0036128289066255093,0.00862104818224907,0.01006622426211834,0.029421169310808182,0.005852094851434231,0.05111875757575035,-0.031711895018815994,0.0066744922660291195,0.04360217601060867,-0.01797361671924591,-0.023519955575466156,0.022855523973703384,0.0005909103783778846,0.007913162931799889,-0.050753675401210785,0.06809788197278976,0.04695015773177147,-0.03361603617668152,0.025676682591438293,-0.011117508634924889,0.034199900925159454,-0.004680909216403961,0.010830149054527283,0.0012410677736625075,0.017489027231931686,-0.0017600503051653504,-0.006599299609661102,0.08895322680473328,-0.0018857362447306514,-0.02754119597375393,0.047974180430173874,-0.01381414383649826,-0.048102766275405884,-0.0319896936416626,-0.08503948152065277,0.00911001581698656,-0.03808733820915222,-0.04308437928557396,-0.032696813344955444,-0.022264430299401283,-0.039431266486644745,0.0015058601275086403,0.07150506228208542,0.020440053194761276,-0.01193638052791357,-0.0011453956831246614,-0.03572079539299011,0.03093530982732773,-0.006987002678215504,-0.034434471279382706,-0.06930118799209595,-0.007244134787470102,0.025919124484062195,-0.01071257796138525,0.012917054817080498,-0.07353916764259338,0.015058694407343864,0.020990785211324692,-0.05156252160668373,-0.036449383944272995,0.0014707992086187005,-0.004394934047013521,-0.008605034090578556,-0.004583200439810753,-0.0425272099673748,0.030850503593683243,0.005886806640774012,-0.012898655608296394,-0.1079130694270134,-0.003628307254984975,-0.005241276230663061,-0.01282794214785099,-0.03759822994470596,-0.00948914885520935,0.013352730311453342,-0.042685367166996,0.018085122108459473,-0.0598607137799263,-0.04234471544623375,0.003799556288868189,0.028125949203968048,-0.0032104705460369587,-0.002656647004187107,0.008107378147542477,0.03533543646335602,-0.061157356947660446,-0.018834559246897697,0.01312921941280365,-0.03190019354224205,-0.007359954994171858,0.008142597042024136,-0.020491642877459526,-0.04742308333516121,-0.0454915314912796,-0.0046333130449056625,-0.038052670657634735,-0.012954963371157646,-0.012602587230503559,0.00968744233250618,-0.03577696159482002,0.02373233437538147,0.01796623319387436,0.01586047187447548,-0.0022191551979631186,-0.023639453575015068,0.011767885647714138,-0.11560327559709549,0.043267760425806046,0.07324239611625671,-0.04973100870847702,-0.019075972959399223,-0.010266650468111038,0.029740165919065475,0.032706182450056076,-0.02714873105287552,0.005305920727550983,0.1070534735918045,0.033051490783691406,0.04142434895038605,0.027714336290955544,-0.005387955345213413,-0.08181313425302505,-0.0683683529496193,-0.020100895315408707,-0.007364221848547459,0.0017045167041942477,0.03540629521012306,0.002631004434078932,0.0325097031891346,0.015844834968447685,0.07758872956037521,0.03089899942278862,-0.0010513578308746219,0.004900365136563778,0.05891698598861694,-0.03460656479001045,-0.025714438408613205,0.011963623575866222,0.04883759096264839,-0.024365346878767014,0.01538971159607172,0.0128680020570755,0.03236342594027519,0.02214045077562332,0.025597555562853813,-0.009971929714083672,0.0452868826687336,-0.0013177491491660476,-0.07333580404520035,0.05375320836901665,-0.004140309989452362,0.035876329988241196,0.04233303293585777,0.04024338349699974,-0.05147083103656769,-0.01582878641784191,-0.02402598410844803,-0.01484511699527502,0.0475614108145237,-0.03922424465417862,0.04842618852853775,-0.013535398058593273,-0.04196520894765854,-0.09593060612678528,-0.001659683301113546,0.013188334181904793,-0.009307191707193851,0.02666747011244297,0.006496086250990629,0.0010378058068454266,-0.017323050647974014,0.027775418013334274,-0.0009903225582093,-0.001019056304357946,-0.042431700974702835,-0.04827864468097687,0.012501053512096405,-0.025064555928111076,-6.401501992920228e-33,-0.05308801308274269,-0.021768953651189804,-0.0415193997323513,0.01705881953239441,0.01946358196437359,-0.05835047364234924,-0.003180930856615305,-0.021945619955658913,0.012464611791074276,-0.004192324820905924,-0.02951701544225216,0.001083202543668449,0.014292840845882893,0.007895325310528278,-0.06953715533018112,-0.03509600833058357,0.007373272906988859,0.018068810924887657,-0.008808252401649952,0.012134852819144726,-0.037771210074424744,0.018974225968122482,-0.004980915691703558,0.014518835581839085,-0.06809316575527191,-0.01279121171683073,0.01935955323278904,-0.008645079098641872,-0.06229083985090256,-0.0048985774628818035,-0.012040268629789352,-0.03237937390804291,-0.01918507181107998,0.002063607797026634,0.04883689805865288,-0.028584061190485954,-0.009731574915349483,-0.004091788548976183,0.04457475244998932,0.0556974783539772,0.07562661170959473,0.048905450850725174,0.009148535318672657,0.013173752464354038,0.003055238164961338,-0.0026896395720541477,0.013580786064267159,-0.03176295384764671,-0.020106658339500427,-0.001875082845799625,0.040480680763721466,0.007931572385132313,-0.02740408666431904,0.01952836476266384,0.00849838089197874,0.022898662835359573,0.043754592537879944,0.03841803967952728,-0.013754214160144329,-0.0009210772113874555,0.04022476449608803,0.011734000407159328,0.024271737784147263,0.03307490795850754,0.035722024738788605,0.059053223580121994,0.013770967721939087,0.0557122528553009,-0.04593781754374504,-0.0317489318549633,-0.02012971229851246,0.0070864250883460045,0.015864236280322075,-0.07756395637989044,-0.0014386314433068037,0.029004713520407677,0.01921038329601288,-0.009161720052361488,0.003806469962000847,0.08482131361961365,-0.018605558201670647,0.04253730922937393,0.010682511143386364,0.01787804439663887,-0.003964050207287073,0.0282070804387331,0.01599663309752941,-0.04803844913840294,0.02811584807932377,0.032848671078681946,-0.045599162578582764,0.014865316450595856,-0.03623109683394432,0.03801074996590614,-0.038804374635219574,0.01650376431643963,0.029869675636291504,0.004791004117578268,-0.026239527389407158,-0.048683132976293564,0.02634187787771225,0.018773404881358147,-0.006682899314910173,-0.01328154094517231,-0.05539313331246376,0.010790655389428139,-0.01510827336460352,0.017924413084983826,-0.036871448159217834,0.009189530275762081,0.0008969003683887422,-0.022833190858364105,-0.03591460362076759,-0.017139829695224762,-0.016513250768184662,0.004849444609135389,-0.0397857129573822,-0.001522490056231618,0.03629090264439583,0.010818523354828358,0.04475657269358635,-0.011031342670321465,-0.03611275181174278,-0.0015774376224726439,0.044135842472314835,-0.027726512402296066,-0.024199513718485832,0.01190547551959753,0.006143874954432249,-0.01689440757036209,0.01931217685341835,0.01970767229795456,2.8032613386130834e-7,0.0262107253074646,0.0021255870815366507,0.0022702498827129602,0.007321276236325502,0.0838397815823555,-0.0708330050110817,-0.026864588260650635,-0.03193892911076546,0.02681286260485649,-0.1440916508436203,0.0014942414127290249,-0.013514728285372257,0.03772351145744324,0.005321654956787825,-0.026212573051452637,-0.03850371763110161,0.031576428562402725,-0.06514721363782883,-0.02928187884390354,-0.0025642248801887035,0.028149932622909546,-0.006611800752580166,0.02337745577096939,0.024494508281350136,0.006806185003370047,0.00669733015820384,0.014386304654181004,0.0034980271011590958,0.030465109273791313,-0.02085970528423786,0.07187405973672867,-0.018757961690425873,-0.025091174989938736,-0.019010761752724648,0.023496011272072792,0.004423070233315229,-0.007498804945498705,0.015429338440299034,0.04160699620842934,0.06144874170422554,-0.03401917219161987,-0.023044049739837646,-0.017995651811361313,-0.01938002184033394,0.03897700086236,-0.01799619197845459,0.027542952448129654,0.012559725902974606,-0.07121507078409195,-0.01924150250852108,-0.017401156947016716,0.038602761924266815,0.005262637045234442,-0.009778453037142754,0.000017838305211625993,-0.026644540950655937,-0.01609986461699009,0.0029035075567662716,-0.041079163551330566,-0.06404361873865128,-0.04079604148864746,-0.01694084331393242,-0.020383313298225403,-0.020407062023878098,0.0152540048584342,0.021474994719028473,-0.05273834988474846,3.1444405007874072e-34,0.04331027343869209,-0.00035499854129739106,-0.004102964419871569,0.033488061279058456,0.022568251937627792,-0.01771186664700508,0.01042516902089119,-0.009034975431859493,0.017618725076317787,-0.04984389618039131,0.007431535515934229]'
SET
  @HasCustomProps_fb4da8e3 = 1
SET
  @HasCustomEvents_fb4da8e3 = 1
SET
  @RequiresData_fb4da8e3 = 0
SET
  @DependencyCount_fb4da8e3 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_fb4da8e3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_fb4da8e3 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_fb4da8e3 = 1
SET
  @ID_fb4da8e3 = '42690037-7F0B-49F4-9617-182D7567BB64'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_fb4da8e3,
  @Name = @Name_fb4da8e3,
  @Version = @Version_fb4da8e3,
  @VersionSequence = @VersionSequence_fb4da8e3,
  @Title = @Title_fb4da8e3,
  @Description = @Description_fb4da8e3,
  @Type = @Type_fb4da8e3,
  @Status = @Status_fb4da8e3,
  @DeveloperName = @DeveloperName_fb4da8e3,
  @DeveloperEmail = @DeveloperEmail_fb4da8e3,
  @DeveloperOrganization = @DeveloperOrganization_fb4da8e3,
  @SourceRegistryID = @SourceRegistryID_fb4da8e3,
  @ReplicatedAt = @ReplicatedAt_fb4da8e3,
  @LastSyncedAt = @LastSyncedAt_fb4da8e3,
  @Specification = @Specification_fb4da8e3,
  @FunctionalRequirements = @FunctionalRequirements_fb4da8e3,
  @TechnicalDesign = @TechnicalDesign_fb4da8e3,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_fb4da8e3,
  @TechnicalDesignVector = @TechnicalDesignVector_fb4da8e3,
  @HasCustomProps = @HasCustomProps_fb4da8e3,
  @HasCustomEvents = @HasCustomEvents_fb4da8e3,
  @RequiresData = @RequiresData_fb4da8e3,
  @DependencyCount = @DependencyCount_fb4da8e3,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_fb4da8e3,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_fb4da8e3,
  @HasRequiredCustomProps = @HasRequiredCustomProps_fb4da8e3,
  @ID = @ID_fb4da8e3;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_69a113c8 NVARCHAR(MAX),
@Name_69a113c8 NVARCHAR(500),
@Version_69a113c8 NVARCHAR(50),
@VersionSequence_69a113c8 INT,
@Title_69a113c8 NVARCHAR(1000),
@Description_69a113c8 NVARCHAR(MAX),
@Type_69a113c8 NVARCHAR(255),
@Status_69a113c8 NVARCHAR(50),
@DeveloperName_69a113c8 NVARCHAR(255),
@DeveloperEmail_69a113c8 NVARCHAR(255),
@DeveloperOrganization_69a113c8 NVARCHAR(255),
@SourceRegistryID_69a113c8 UNIQUEIDENTIFIER,
@ReplicatedAt_69a113c8 DATETIMEOFFSET,
@LastSyncedAt_69a113c8 DATETIMEOFFSET,
@Specification_69a113c8 NVARCHAR(MAX),
@FunctionalRequirements_69a113c8 NVARCHAR(MAX),
@TechnicalDesign_69a113c8 NVARCHAR(MAX),
@FunctionalRequirementsVector_69a113c8 NVARCHAR(MAX),
@TechnicalDesignVector_69a113c8 NVARCHAR(MAX),
@HasCustomProps_69a113c8 BIT,
@HasCustomEvents_69a113c8 BIT,
@RequiresData_69a113c8 BIT,
@DependencyCount_69a113c8 INT,
@TechnicalDesignVectorEmbeddingModelID_69a113c8 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_69a113c8 NVARCHAR(MAX),
@HasRequiredCustomProps_69a113c8 BIT,
@ID_69a113c8 UNIQUEIDENTIFIER
SET
  @Namespace_69a113c8 = N'CRM/Customer'
SET
  @Name_69a113c8 = N'Customer360Overview'
SET
  @Version_69a113c8 = N'1.0.0'
SET
  @VersionSequence_69a113c8 = 1
SET
  @Title_69a113c8 = N'Customer 360 Overview'
SET
  @Description_69a113c8 = N'Overview tab showing customer summary and key metrics'
SET
  @Type_69a113c8 = N'Report'
SET
  @Status_69a113c8 = N'Published'
SET
  @Specification_69a113c8 = N'{"name":"Customer360Overview","location":"embedded","code":"function Customer360Overview({ account, contacts, deals, engagementScore }) {\n  // Ensure arrays are defined\n  const safeDeals = deals || [];\n  const safeContacts = contacts || [];\n  const safeEngagementScore = engagementScore || 0;\n  \n  const formatCurrency = (value) => {\n    if (!value) return ''$0'';\n    if (value >= 1000000) return `$$' + '{(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$$' + '{(value / 1000).toFixed(0)}K`;\n    return `$$' + '{value.toFixed(0)}`;\n  };\n\n  const getEngagementColor = (score) => {\n    if (score >= 70) return ''#10B981'';\n    if (score >= 40) return ''#F59E0B'';\n    return ''#EF4444'';\n  };\n\n  const totalRevenue = safeDeals\n    .filter(d => d.Stage === ''Closed Won'')\n    .reduce((sum, d) => sum + (d.Amount || 0), 0);\n  \n  const activeDeals = safeDeals.filter(d => ![''Closed Won'', ''Closed Lost''].includes(d.Stage));\n\n  return (\n    <div style={{ display: ''grid'', gridTemplateColumns: ''repeat(auto-fit, minmax(250px, 1fr))'', gap: ''20px'' }}>\n      <div style={{\n        padding: ''20px'',\n        backgroundColor: ''white'',\n        borderRadius: ''8px'',\n        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n      }}>\n        <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''14px'', color: ''#6B7280'' }}>Engagement Score</h3>\n        <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: getEngagementColor(safeEngagementScore) }}>\n          {safeEngagementScore}%\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n          {safeEngagementScore >= 70 ? ''Highly Engaged'' : safeEngagementScore >= 40 ? ''Moderately Engaged'' : ''Low Engagement''}\n        </div>\n      </div>\n\n      <div style={{\n        padding: ''20px'',\n        backgroundColor: ''white'',\n        borderRadius: ''8px'',\n        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n      }}>\n        <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''14px'', color: ''#6B7280'' }}>Lifetime Value</h3>\n        <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {formatCurrency(totalRevenue)}\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n          {safeDeals.filter(d => d.Stage === ''Closed Won'').length} closed deals\n        </div>\n      </div>\n\n      <div style={{\n        padding: ''20px'',\n        backgroundColor: ''white'',\n        borderRadius: ''8px'',\n        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n      }}>\n        <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''14px'', color: ''#6B7280'' }}>Active Opportunities</h3>\n        <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: ''#4F46E5'' }}>\n          {activeDeals.length}\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n          Worth {formatCurrency(activeDeals.reduce((sum, d) => sum + (d.Amount || 0), 0))}\n        </div>\n      </div>\n\n      <div style={{\n        padding: ''20px'',\n        backgroundColor: ''white'',\n        borderRadius: ''8px'',\n        boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n      }}>\n        <h3 style={{ margin: ''0 0 16px 0'', fontSize: ''14px'', color: ''#6B7280'' }}>Contacts</h3>\n        <div style={{ fontSize: ''32px'', fontWeight: ''bold'', color: ''#111827'' }}>\n          {safeContacts.length}\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n          Key relationships\n        </div>\n      </div>\n    </div>\n  );\n}","description":"Overview tab showing customer summary and key metrics","category":"Customer","type":"overview","dataRequirements":{"mode":"views","entities":[{"name":"Accounts","displayFields":["AccountName","Industry","AnnualRevenue","CreatedAt"],"filterFields":["ID"]},{"name":"Contacts","displayFields":["FirstName","LastName","Email","Phone","AccountID"],"filterFields":["AccountID"]},{"name":"Deals","displayFields":["DealName","Stage","Amount","CloseDate","AccountID"],"filterFields":["AccountID"]},{"name":"Activities","displayFields":["Subject","Type","CreatedAt","AccountID"],"filterFields":["AccountID"]}]},"properties":[{"name":"account","type":"object","required":true,"description":"Account entity object"},{"name":"contacts","type":"array","required":true,"description":"Array of contact objects"},{"name":"deals","type":"array","required":true,"description":"Array of deal objects"},{"name":"engagementScore","type":"number","required":true,"description":"Calculated engagement score (0-100)"}],"usageExample":"```javascript\n<Customer360Overview\n  account={account}\n  contacts={contacts}\n  deals={deals}\n  engagementScore={engagementScore}\n/>\n```","functionalRequirements":"- Display customer key information\n- Show engagement score with color coding\n- Display total revenue and active deals\n- Show number of contacts\n- Calculate and display customer lifetime value\n- Use color-coded metrics based on values","technicalDesign":"Renders metric cards in a grid layout. Calculates lifetime value from deals. Color codes engagement score (green/yellow/red). Uses formatCurrency helper for monetary values."}'
SET
  @FunctionalRequirements_69a113c8 = N'- Display customer key information
- Show engagement score with color coding
- Display total revenue and active deals
- Show number of contacts
- Calculate and display customer lifetime value
- Use color-coded metrics based on values'
SET
  @TechnicalDesign_69a113c8 = N'Renders metric cards in a grid layout. Calculates lifetime value from deals. Color codes engagement score (green/yellow/red). Uses formatCurrency helper for monetary values.'
SET
  @FunctionalRequirementsVector_69a113c8 = N'[0.03847891092300415,-0.015357354655861855,-0.028180982917547226,-0.027031609788537025,-0.01650710590183735,0.042794421315193176,0.02821091189980507,0.01703835278749466,-0.05390351638197899,-0.008452780544757843,-0.033518530428409576,-0.048156045377254486,0.04319809749722481,0.2031991183757782,-0.036120083183050156,-0.06535444408655167,-0.0665198266506195,0.010873544029891491,0.007734478916972876,0.034422650933265686,0.013379329815506935,0.002586754271760583,0.004626867827028036,-0.044036705046892166,-0.0500834621489048,0.01564943976700306,-0.03628142923116684,0.01063421182334423,0.011410785838961601,-0.06621119379997253,0.005454525351524353,0.04435084015130997,-0.06692858785390854,-0.04718351736664772,0.0000014216020645108074,-0.05351828783750534,-0.06414315104484558,0.024976082146167755,-0.05353591963648796,0.0374486967921257,0.07722501456737518,0.007896595634520054,0.07158012688159943,0.007295905612409115,-0.010007702745497227,0.02452715113759041,-0.020980218425393105,0.07135964184999466,0.0181577168405056,-0.01355171762406826,0.018055066466331482,-0.030481724068522453,-0.04717378690838814,0.01971917599439621,-0.04854843020439148,0.015466750599443913,0.008934352546930313,0.04613477364182472,0.02384408749639988,-0.04531855136156082,-0.010828775353729725,-0.008803050965070724,0.02462089993059635,-0.024314871057868004,0.06861412525177002,0.009926443919539452,0.04810110479593277,-0.01671718806028366,-0.015427285805344582,0.0009036191622726619,0.039242539554834366,0.05054038390517235,0.005127763841301203,-0.013853914104402065,-0.011527147144079208,-0.08647470921278,-0.0055042291060090065,-0.014519497752189636,0.03156207501888275,-0.015092575922608376,-0.10320176929235458,0.027894800528883934,-0.04186699166893959,-0.025613022968173027,-0.03710757568478584,-0.03821186348795891,0.004090305417776108,-0.02981487661600113,-0.0029499344527721405,0.00918550044298172,0.025737334042787552,0.01947328820824623,0.0139452014118433,0.005520197097212076,-0.03777756541967392,-0.028384318575263023,0.05096779763698578,0.0223858542740345,0.03147072717547417,-0.05814477801322937,0.01303263008594513,0.0214130450040102,0.0012189493281766772,0.047823965549468994,0.003208523616194725,0.04818644002079964,0.022675640881061554,-0.06606054306030273,-0.033117495477199554,0.031206291168928146,0.017212187871336937,-0.023363962769508362,0.01619110256433487,0.05398077517747879,0.014983640983700752,0.03696597367525101,-0.07824400067329407,0.010422889143228531,-0.009653545916080475,0.04149681702256203,0.10830358415842056,0.037694431841373444,0.038707610219717026,0.003918157424777746,0.009702087379992008,-0.05469973012804985,-0.03515158221125603,-0.06203805282711983,-0.0127676697447896,-0.03085099719464779,0.033661313354969025,0.003511467482894659,-0.005187878850847483,-0.006649242248386145,0.005087333731353283,0.011760466732084751,0.04598003998398781,0.031619176268577576,-0.05923732742667198,-0.024840282276272774,0.014376163482666016,0.01526737678796053,-0.017432736232876778,0.02802850306034088,-0.02124376781284809,0.016292521730065346,-0.048578836023807526,0.04258622229099274,-0.012637173756957054,0.002369941445067525,-0.004025413654744625,-0.0001771566312527284,-0.03501024842262268,0.018929265439510345,-0.03343783691525459,-0.024145886301994324,0.07998760044574738,-0.03619034215807915,-0.02093726396560669,-0.013933968730270863,1.239382072526496e-7,-0.023985793814063072,0.004675215110182762,-0.0020249199587851763,-0.029513409361243248,0.007989456877112389,-0.020772740244865417,0.0007466074312105775,0.002111956011503935,-0.0674038976430893,-0.03652947023510933,-0.02680209092795849,-0.008340374566614628,0.007555969059467316,-0.009989139623939991,-0.04718168452382088,0.020947696641087532,-0.06466854363679886,-0.010051045566797256,-0.0400894358754158,0.04807965084910393,-0.04822114482522011,0.03740094602108002,0.02807234227657318,0.0007107539568096399,-0.02646155282855034,-0.06810324639081955,0.018686704337596893,-0.029756898060441017,0.010943861678242683,0.013666114769876003,0.012504540383815765,0.03746528923511505,0.03772633895277977,-0.007741635665297508,0.01715257577598095,0.017249392345547676,-0.032699793577194214,0.025998560711741447,-0.02183082140982151,-0.009631803259253502,-0.05058782920241356,0.010695393197238445,0.04736674576997757,0.01864149235188961,0.04209650680422783,0.006244505289942026,-0.02977093495428562,-0.037400614470243454,0.015788240358233452,0.04786607250571251,-0.008143948391079903,-0.05797836184501648,0.004709212109446526,-0.021193288266658783,0.025464149191975594,0.028146501630544662,-0.0005191699601709843,-0.0343191958963871,-0.00794093869626522,-0.02349107153713703,0.014576775953173637,0.0038547709118574858,-0.011719745583832264,0.07979295402765274,0.04892433434724808,0.017492732033133507,0.023176049813628197,0.048018794506788254,0.06185254082083702,0.01853036694228649,0.0037355211097747087,0.016243113204836845,0.007675775792449713,0.025957103818655014,0.036454785615205765,0.06598366051912308,0.11638402938842773,0.027217183262109756,0.05589701980352402,-0.03917671740055084,-0.05580052733421326,-0.013109961524605751,0.02451104111969471,-0.008253353647887707,-0.0258779339492321,-0.010248349979519844,0.004824575502425432,0.018132252618670464,0.014714901335537434,0.012833677232265472,0.011153362691402435,0.02533838152885437,-0.03327800706028938,0.013144627213478088,0.008925997652113438,-0.0765601322054863,-0.014596808701753616,-0.04407976195216179,0.06446678191423416,-0.04296112805604935,-0.018538063392043114,-0.0037257056683301926,-0.04622636362910271,-0.002730373525992036,-0.02758592925965786,0.09500706195831299,-0.01144956424832344,0.0019359966972842813,0.028959183022379875,-0.021979687735438347,0.031208980828523636,0.026451462879776955,-0.0030455603264272213,-0.01676810160279274,0.029903369024395943,-0.07600859552621841,0.0014916346408426762,-0.009132402949035168,-0.005160901695489883,-0.009862305596470833,-0.06440072506666183,0.00901636853814125,0.014804279431700706,-0.0008204735931940377,-0.005367353558540344,0.033088456839323044,-0.06949105858802795,0.03709177300333977,-0.0477062463760376,0.021325521171092987,-0.03961581736803055,0.017083238810300827,-0.01450788602232933,-0.03498410806059837,0.017173966392874718,0.015798887237906456,0.02216903679072857,-0.009251573123037815,0.01901044324040413,-0.09774377942085266,-0.05092742294073105,0.0227147676050663,0.0026802727952599525,-0.03802064433693886,0.012094257399439812,0.0628456175327301,-0.05561046302318573,0.04295158386230469,0.014726883731782436,-0.006976958829909563,-0.004411766771227121,0.0009083254844881594,-0.04879861697554588,0.020470239222049713,-0.02867189422249794,-0.05046028643846512,0.021621687337756157,-0.022750934585928917,0.03845934942364693,0.010387387126684189,0.024620722979307175,-0.03494836017489433,0.02889847569167614,0.014403453096747398,0.04947536066174507,-0.02901596389710903,0.007231420371681452,-0.0325692854821682,0.004946866538375616,-0.0003027603088412434,-0.040784914046525955,-0.021398305892944336,0.02775787189602852,-0.028172176331281662,0.04694957286119461,-0.030500497668981552,0.0029994212090969086,0.022608567029237747,-0.08042709529399872,-0.027422260493040085,0.02373221144080162,-0.02284928411245346,-0.008821181021630764,0.029865533113479614,-0.008273882791399956,0.025001930072903633,0.04965714365243912,-0.05344090610742569,0.02662910521030426,0.0256377961486578,-0.016604728996753693,-0.021688783541321754,0.027501245960593224,0.03805701807141304,0.0004971014568582177,-0.06722718477249146,0.019935140386223793,-0.021527810022234917,-0.09829721599817276,-0.013651409186422825,0.018809907138347626,-0.08444518595933914,0.03699377551674843,0.007505868095904589,0.02143622189760208,-0.01056827325373888,-0.008675255812704563,0.012347106821835041,-0.0014711307594552636,-0.03597128018736839,0.031889479607343674,0.0923549085855484,0.02597714401781559,-0.002052917145192623,-0.05631573498249054,-0.007945403456687927,-0.00997479073703289,-0.09770487993955612,-0.009291802532970905,0.02321504056453705,-0.026653021574020386,0.10159733891487122,-0.02197982743382454,0.03376337140798569,0.00039299787022173405,-0.0062347473576664925,-0.02496485412120819,-0.019009839743375778,-0.01471254788339138,0.005944339092820883,0.027652960270643234,-0.048447880893945694,0.02797641046345234,-0.007206960581243038,-0.022771073505282402,0.006333177909255028,0.01794362999498844,0.02879062108695507,0.0013410462997853756,-0.004033911973237991,-0.011384192854166031,-0.038194216787815094,-0.018380140885710716,0.027772556990385056,-0.08012215793132782,0.053048182278871536,0.04532124102115631,-0.0037591340951621532,-0.008662152104079723,-0.024844735860824585,0.017985399812459946,0.014076081104576588,-0.031556110829114914,0.04251768812537193,0.005582732148468494,0.0038893003948032856,0.027072736993432045,0.03627802059054375,0.03731410950422287,0.022676074877381325,0.0009510718518868089,-0.01639373227953911,0.007506102789193392,0.00675642816349864,0.016488632187247276,0.00930300448089838,-0.05670630931854248,0.0019033979624509811,0.04129062220454216,-0.0315249003469944,-0.0105521185323596,-0.05127681791782379,0.055960770696401596,-0.03456171229481697,-0.018184639513492584,-0.02432057447731495,-0.008360512554645538,-0.009214171208441257,0.014291181229054928,0.022616634145379066,0.04201517999172211,0.019435744732618332,0.019260888919234276,-0.03906567767262459,-0.06785537302494049,-0.017123401165008545,0.048076651990413666,-0.048052266240119934,-0.03705394268035889,0.04234807565808296,-0.049075815826654434,0.019788913428783417,-0.025449469685554504,-0.0649200975894928,-0.03364291042089462,-0.14041370153427124,0.01275599468499422,-0.0033293545711785555,0.028432490304112434,0.03261496126651764,0.03296574950218201,-0.04770107567310333,0.005255816970020533,-0.008745764382183552,-0.10926663130521774,0.027765536680817604,-0.003285144455730915,-0.02974364347755909,-0.07146399468183517,0.047638341784477234,-0.0056340014562010765,-0.007346218917518854,-0.0013582872925326228,-0.004779432900249958,0.019299382343888283,-0.010693604126572609,-0.02940603904426098,0.027516981586813927,-0.0033662039786577225,0.026226885616779327,0.028176961466670036,0.0513417012989521,-0.05243844911456108,0.018535397946834564,0.015852520242333412,-0.026232590898871422,-0.020829619839787483,-0.006774717941880226,-0.007684210781008005,0.011649621650576591,0.05583557114005089,-0.010203389450907707,0.00784016028046608,0.0273065734654665,-0.052904143929481506,-0.04226743057370186,0.007476663216948509,0.03610773757100105,0.00024494691751897335,-0.02255004085600376,-0.012060035951435566,-0.008111964911222458,-0.0275055430829525,-0.00021226117678452283,0.015781385824084282,0.05202106386423111,0.015493439510464668,-0.031844887882471085,0.016018785536289215,0.04639177769422531,0.027196144685149193,0.009802293963730335,-0.005058398470282555,0.03675448149442673,0.011470184661448002,-0.020797355100512505,0.07396815717220306,-0.04314054548740387,-0.04536538943648338,-0.0025022337213158607,-0.010989803820848465,-0.0036355112679302692,0.018417954444885254,0.07309829443693161,-0.04808395355939865,0.034496814012527466,-0.0034333723597228527,-0.04350600391626358,0.03289462998509407,0.009784527122974396,-0.048058271408081055,-0.07540390640497208,-0.020276110619306564,-0.03305552899837494,0.0639609843492508,0.07702794671058655,0.021496448665857315,0.014605743810534477,0.029526935890316963,-0.031033238396048546,0.00284015410579741,0.10487741231918335,-0.030178366228938103,0.010230695828795433,0.0043189190328121185,0.0098657151684165,-0.05021287128329277,-0.013264939188957214,0.036456722766160965,-0.0024085224140435457,-0.0076734633184969425,-0.03357286378741264,0.02618582360446453,0.021564804017543793,-5.776585686136084e-33,-0.040070075541734695,-0.038030076771974564,-0.05632786080241203,0.058144811540842056,-0.02033851109445095,0.02530904859304428,0.028238005936145782,-0.035692404955625534,0.00287625496275723,0.007824860513210297,-0.01164374127984047,-0.03377458453178406,0.017741326242685318,0.0017855967162176967,-0.0011427111458033323,-0.013676606118679047,0.03981718793511391,0.015264992602169514,-0.0002627511275932193,-0.03316542133688927,-0.07874487340450287,0.02838830277323723,-0.0064345598220825195,-0.04515937715768814,-0.011998158879578114,0.04443001374602318,-0.0168747641146183,0.03791138529777527,-0.009399117901921272,0.03279498592019081,0.011275401338934898,-0.0620078407227993,0.0008877392974682152,0.038934074342250824,0.007207660470157862,-0.0046632844023406506,-0.05416440591216087,-0.009293756447732449,0.03524767607450485,0.03832101821899414,0.007022118661552668,0.02105545625090599,0.02198673225939274,-0.036214109510183334,-0.02604065090417862,-0.002028335817158222,0.005857049487531185,-0.02123972401022911,-0.023152437061071396,0.008961588144302368,0.04653998836874962,0.009105143137276173,0.023075764998793602,0.10497838258743286,-0.006362568587064743,0.010977332480251789,0.0023236111737787724,0.013791556470096111,-0.05054683983325958,-0.020218804478645325,-0.009491733275353909,-0.04195258021354675,-0.012562313117086887,0.06615700572729111,0.05392889305949211,-0.02455584891140461,-0.04344018176198006,0.00037436693673953414,-0.0019224704010412097,-0.012427671812474728,-0.052606161683797836,-0.008702930994331837,0.05251671373844147,-0.04270875081419945,-0.09650998562574387,0.017828766256570816,0.05674092099070549,0.012588524259626865,0.026552116498351097,0.002580860862508416,0.015214674174785614,-0.012603902257978916,-0.020327165722846985,-0.0019474892178550363,0.07236043363809586,0.001205773325636983,-0.028307413682341576,-0.012433084659278393,0.0358181856572628,0.028470713645219803,-0.05553736537694931,0.06994614750146866,-0.016146395355463028,0.007587905041873455,-0.04327499121427536,0.006372272036969662,0.0783541351556778,0.052067652344703674,0.004439700394868851,-0.05516728758811951,-0.002181531861424446,0.04471048712730408,-0.04640286788344383,-0.04835599288344383,-0.018999315798282623,0.005058911629021168,0.005648448597639799,-0.03968286141753197,-0.018943769857287407,0.021169662475585938,0.05302794277667999,0.019948164001107216,0.010377290658652782,-0.018099883571267128,-0.003063499229028821,-0.018937155604362488,-0.007442086469382048,0.02521817944943905,-0.0015852592187002301,-0.03342195227742195,0.015084655955433846,-0.0527188703417778,0.0046223001554608345,-0.03961749002337456,0.0046968464739620686,-0.025817198678851128,0.015155783854424953,-0.07857384532690048,-0.03311169892549515,0.020087799057364464,-0.00783542264252901,-0.004699129611253738,2.3056645659380592e-7,0.03117937222123146,-0.0011884557316079736,-0.03529730066657066,0.0593641996383667,0.0011682851472869515,-0.03738420084118843,0.018966618925333023,-0.026134932413697243,0.08164553344249725,-0.048929210752248764,0.02703842893242836,-0.017736077308654785,0.009331293404102325,0.03388575464487076,0.012585533782839775,-0.01555198896676302,0.04565319046378136,-0.08191720396280289,-0.00747256213799119,0.042213764041662216,0.03959580883383751,0.0009497032151557505,0.03960132226347923,0.01411021314561367,0.026937223970890045,0.020397162064909935,0.02348426729440689,-0.03259926661849022,0.02933374233543873,-0.007616343908011913,0.02198600582778454,0.021344412118196487,-0.008259548805654049,0.07012932747602463,-0.001517535070888698,0.034509021788835526,-0.001403388916514814,0.005815685261040926,0.04557834938168526,0.05458379164338112,0.056578923016786575,-0.03839683532714844,-0.0031751750502735376,0.0005145915201865137,0.025203434750437737,0.026356348767876625,-0.009951728396117687,-0.01854383572936058,0.01009723637253046,0.0016527487896382809,0.018529247492551804,0.024714931845664978,-0.035330288112163544,-0.024735627695918083,0.01576603390276432,0.004529457073658705,-0.019291918724775314,0.054314274340867996,0.007232350762933493,0.011981620453298092,-0.012301168404519558,-0.017623137682676315,0.02421831339597702,0.06596316397190094,0.04731244593858719,0.026482276618480682,-0.023880453780293465,2.7090500206235537e-34,0.025603678077459335,-0.04355168715119362,0.07036048918962479,0.045686446130275726,-0.022564992308616638,0.0008339339401572943,0.011603315360844135,-0.024982362985610962,0.023266514763236046,-0.052737269550561905,-0.018710467964410782]'
SET
  @TechnicalDesignVector_69a113c8 = N'[-0.011010770685970783,-0.006105659995228052,-0.003765055676922202,-0.022738458588719368,0.002820073626935482,0.05494347959756851,0.01732812076807022,0.0830555111169815,-0.04512916877865791,-0.004167133942246437,-0.004988443572074175,0.031337764114141464,0.0338805615901947,0.19112366437911987,-0.05160607397556305,-0.04470337927341461,-0.02554536983370781,-0.001037711394019425,0.007015143986791372,0.011424041353166103,0.012289810925722122,-0.01899011991918087,-0.029567735269665718,-0.0119656752794981,-0.0899268090724945,-0.019123930484056473,-0.038372136652469635,0.007568372879177332,-0.021421857178211212,-0.034499213099479675,0.009222904220223427,0.03388095647096634,-0.07681651413440704,0.008681477047502995,0.0000017257722220165306,-0.025663573294878006,-0.03467714414000511,0.014375942759215832,0.05208897963166237,0.012604055926203728,0.040761880576610565,-0.015594204887747765,0.055408164858818054,0.004004843533039093,-0.025126444175839424,-0.05577607825398445,-0.0019817512948065996,0.043839309364557266,0.0383712500333786,-0.025575362145900726,0.0091449785977602,-0.007237348239868879,-0.03998275101184845,0.0007957892958074808,-0.04279521852731705,0.030413469299674034,-0.022463461384177208,0.07270263880491257,0.0025317047256976366,-0.03374648466706276,0.0030558109283447266,0.0005744460504502058,0.02560468576848507,-0.06651085615158081,0.060557685792446136,0.008689661510288715,0.058480482548475266,-0.01198625098913908,0.013061301782727242,-0.00011218897998332977,0.0485045462846756,0.04711711406707764,-0.019596563652157784,-0.031115848571062088,-0.010575116612017155,-0.11891154199838638,0.01831226609647274,-0.0022493875585496426,0.018440470099449158,-0.03110516630113125,-0.07687029242515564,0.010673614218831062,-0.04361772537231445,-0.022740192711353302,-0.007755523081868887,0.009189227595925331,0.017014911398291588,-0.029775673523545265,-0.05633869767189026,0.03169960901141167,0.03953612223267555,-0.017874334007501602,-0.0163737703114748,-0.0016916696913540363,-0.05039019137620926,-0.015898942947387695,0.015511324629187584,-0.021357210353016853,0.028301164507865906,0.025548886507749557,0.014079008251428604,0.05514224246144295,0.03638714179396629,0.052493318915367126,0.04502730071544647,0.045046113431453705,-0.0007662174175493419,-0.05664343759417534,-0.04980531334877014,0.04460090026259422,-0.017793666571378708,-0.01266129594296217,-0.010119485668838024,0.07805662602186203,-0.05320540443062782,-0.014461408369243145,-0.04079124704003334,-0.020251404494047165,-0.0012230881256982684,0.04072798416018486,0.14799794554710388,0.024020858108997345,0.02146526239812374,0.03070279024541378,-0.04192988574504852,0.01627521403133869,-0.05065842345356941,-0.041291967034339905,0.008084448054432869,0.014147205278277397,-0.0071302191354334354,0.01713438704609871,-0.02376825176179409,-0.03122703731060028,-0.0043259067460894585,-0.04417072981595993,0.015758294612169266,0.03520645201206207,0.0062847076915204525,-0.009667007252573967,0.02348853461444378,-0.0019309550989419222,-0.009562773630023003,-0.001417868072167039,-0.007285254076123238,0.024694615975022316,0.003889826126396656,0.03038262389600277,0.01143527589738369,-0.009884198196232319,-0.004780706018209457,0.037557777017354965,-0.014338606968522072,0.019175568595528603,-0.03984178975224495,-0.005523061379790306,0.07608655840158463,-0.003375454805791378,0.007782171480357647,-0.012132166884839535,0.018600596114993095,-0.011751842685043812,0.02142329514026642,0.002248072298243642,-0.05880086123943329,-0.0003483288164716214,-0.01358681172132492,0.0290632713586092,0.026423435658216476,0.002452534157782793,-0.0008465650607831776,-0.008817236870527267,-0.04302721470594406,0.044943373650312424,0.015568476170301437,-0.017552359029650688,0.0808832198381424,-0.030680302530527115,-0.017501695081591606,-0.050459831953048706,0.06380078196525574,-0.1440158188343048,0.004072804469615221,0.024845823645591736,0.05884793773293495,0.011910365894436836,-0.04512631893157959,0.024141043424606323,-0.009800301864743233,-0.03205576911568642,-0.006584720686078072,-0.026049779728055,0.053185589611530304,0.00833989679813385,0.016962097957730293,0.008813180029392242,-0.0335969403386116,-0.057217128574848175,0.01944897323846817,-0.04619402810931206,-0.013814212754368782,-0.03497635945677757,0.0700550377368927,0.07107385993003845,0.04968030005693436,0.016465414315462112,0.05068254470825195,-0.04260465130209923,-0.09435997903347015,0.042440690100193024,0.0310197863727808,-0.01135923620313406,-0.028824521228671074,0.0015716427005827427,-0.03301391005516052,-0.00721164932474494,0.03339853882789612,0.03150944784283638,-0.014682034030556679,-0.029180264100432396,-0.05033965781331062,0.035204049199819565,-0.006901844404637814,0.012460797093808651,0.12410590797662735,-0.013387499377131462,0.028733881190419197,-0.005914400797337294,0.038971804082393646,0.03633463382720947,-0.00845653098076582,0.0020210733637213707,-0.0077719902619719505,0.018825596198439598,0.0129295838996768,0.020490676164627075,0.04664985463023186,0.0897325873374939,0.055609092116355896,0.045091938227415085,-0.043014150112867355,-0.04967699199914932,-0.010488482192158699,0.010420219972729683,-0.00818279106169939,0.000046148539695423096,-0.04866914451122284,0.003849754808470607,-0.019153110682964325,0.004602694418281317,-0.002119881333783269,0.03304002434015274,0.05645747482776642,-0.01048923097550869,0.005447880364954472,-0.002863314701244235,-0.03408234938979149,0.007628495804965496,-0.025580748915672302,0.05881572887301445,-0.0398588553071022,-0.008312374353408813,0.009463204070925713,-0.03904300183057785,0.05977265536785126,-0.02869374491274357,0.06020483002066612,0.03306363523006439,-0.01292870007455349,0.02477595955133438,0.00608852319419384,0.041442710906267166,-0.03144286572933197,0.002269685734063387,-0.012251995503902435,0.03331667557358742,-0.05174517259001732,0.0032072525937110186,-0.017334548756480217,0.001569318468682468,-0.010769573971629143,0.017272505909204483,0.008425191976130009,0.03265738859772682,-0.0034882407635450363,0.014756549149751663,0.013204236514866352,-0.012297620996832848,-0.015990687534213066,-0.0732426568865776,0.01808059588074684,-0.024953309446573257,0.03346608579158783,-0.039851486682891846,-0.02372419275343418,0.022578390315175056,-0.024485494941473007,0.04055849835276604,-0.01934541016817093,0.005091887433081865,-0.03910626843571663,-0.04460745304822922,-0.000685912265907973,-0.0048486716113984585,0.007892316207289696,0.012083983048796654,0.028865812346339226,0.005668522324413061,-0.00021203850337769836,0.07470922917127609,-0.01700214110314846,0.030753523111343384,-0.01638910174369812,-0.05605287477374077,0.02993321605026722,0.0021600043401122093,-0.009868962690234184,0.0418054535984993,0.013814845122396946,0.06512175500392914,0.02703753486275673,-0.0007162922411225736,-0.018982795998454094,-0.004219955764710903,-0.026601260527968407,0.018679844215512276,0.00423076469451189,-0.013468031771481037,-0.05167262628674507,0.010064700618386269,-0.007752294186502695,-0.0369332991540432,0.020438237115740776,0.01765243336558342,-0.0468972884118557,0.017565341666340828,-0.03414571285247803,-0.02128269523382187,0.033668726682662964,-0.048179108649492264,-0.052597906440496445,0.0022431709803640842,0.002525140531361103,0.03677431866526604,0.020227717235684395,0.027888894081115723,0.008926915004849434,0.03285973519086838,-0.07758624106645584,0.045495495200157166,0.05561361834406853,0.010069760493934155,-0.02613079734146595,-0.00772591819986701,0.015249580144882202,0.03932929039001465,-0.05263914540410042,-0.0449921116232872,-0.0031423361506313086,-0.08041253685951233,-0.0324377678334713,0.011000498197972775,-0.08179112523794174,0.029994098469614983,-0.01395346038043499,0.039049070328474045,0.025527451187372208,0.02103109285235405,-0.0000070683754529454745,0.002849266631528735,-0.07222559303045273,0.025760965421795845,0.011522178538143635,0.02967911958694458,0.012490162625908852,-0.042556557804346085,-0.01742376945912838,-0.014112423174083233,0.006874910090118647,0.014419486746191978,0.04506099969148636,-0.06520868837833405,0.09548319876194,-0.027164991945028305,0.08068523555994034,-0.016625240445137024,-0.01749398373067379,0.006992193404585123,-0.05680077522993088,-0.016864139586687088,-0.0003725635469891131,-0.01769249141216278,-0.04177926480770111,0.02758023701608181,-0.04216447472572327,0.0032800715416669846,0.02771054022014141,0.020180463790893555,0.018444139510393143,0.010408284142613411,-0.010972664691507816,0.004297973122447729,0.05913340300321579,-0.029268886893987656,0.03332486003637314,-0.05514848232269287,0.0593005008995533,0.06728697568178177,0.016733020544052124,-0.09102483838796616,-0.06829265505075455,0.03228074684739113,-0.03594226390123367,-0.055979687720537186,-0.02671930007636547,-0.0273739080876112,-0.012949342839419842,0.04640331119298935,0.027895018458366394,0.012155098840594292,0.014379401691257954,0.019329624250531197,-0.023886656388640404,0.02018146589398384,0.04533744603395462,0.009342419914901257,-0.03002600558102131,-0.02631755731999874,0.003563291858881712,0.024013686925172806,-0.004365605767816305,-0.033952318131923676,-0.03767501935362816,0.03682083263993263,-0.0649050921201706,-0.03355405107140541,-0.054664045572280884,0.015823910012841225,0.008781779557466507,0.003107293276116252,0.00009199060878017917,0.009078607894480228,0.03951708599925041,-0.021587233990430832,-0.053900960832834244,-0.11643962562084198,-0.024714911356568336,0.016559913754463196,0.014126821421086788,-0.04020220413804054,-0.0013930597342550755,-0.05598965659737587,-0.016801895573735237,0.0042135389521718025,-0.043257422745227814,-0.025583835318684578,0.008111312985420227,0.05612117052078247,0.02786617912352085,0.014738403260707855,0.071236751973629,0.0367562361061573,-0.042337194085121155,0.0020920669194310904,0.03621205314993858,-0.12458349019289017,0.04454224929213524,-0.025735484436154366,-0.01126067154109478,-0.05006575956940651,0.042218148708343506,-0.02406884729862213,-0.015961458906531334,-0.027600698173046112,0.024425482377409935,0.023160578683018684,0.023604724556207657,-0.004674914292991161,0.04905064031481743,0.0025130475405603647,0.007837793789803982,-0.0066804420202970505,-0.012600190937519073,-0.06392645835876465,0.017499227076768875,0.028692346066236496,-0.07848774641752243,-0.045030780136585236,-0.015050963498651981,-0.04179701581597328,0.01999497599899769,0.02136261947453022,0.007456985767930746,0.05191097408533096,0.013622931204736233,0.044038135558366776,0.013246884569525719,-0.009629189036786556,0.012048783712089062,-0.041601985692977905,-0.010088018141686916,-0.05062311887741089,0.005127917975187302,-0.08701319992542267,-0.03386439383029938,-0.0025219465605914593,0.036306772381067276,0.002003704197704792,-0.008518200367689133,0.026997815817594528,0.05772046744823456,0.0005745915113948286,0.03268638998270035,-0.013668500818312168,0.04270460084080696,0.028267877176404,-0.04875592514872551,0.01569289341568947,-0.04724067077040672,-0.01172063872218132,-0.002318510552868247,0.004863511770963669,-0.005836193915456533,0.016971342265605927,0.06092324107885361,0.0019752264488488436,0.03806692734360695,-0.010702948085963726,0.007790791802108288,0.04990510642528534,-0.07558436691761017,-0.011836727149784565,0.014053999446332455,-0.020992232486605644,-0.030594320967793465,0.050485529005527496,0.016506828367710114,0.043787166476249695,-0.05232168734073639,-0.04907739534974098,-0.07679660618305206,0.012986238114535809,0.036513425409793854,0.023809557780623436,-0.02382883056998253,0.02438565157353878,-0.00801997259259224,-0.019952405244112015,0.0010985431727021933,0.03875122591853142,0.020880671218037605,0.01022674236446619,-0.08158626407384872,0.023412903770804405,0.002456768648698926,-6.206826904112611e-33,-0.06210290640592575,-0.022428520023822784,0.012738277204334736,0.026914792135357857,0.037751853466033936,0.006181510630995035,0.015198545530438423,-0.04118574038147926,0.007297111209481955,0.024922622367739677,-0.00846006628125906,-0.05128660798072815,0.016274409368634224,0.016785606741905212,0.0030144706834107637,-0.007003026083111763,0.044498518109321594,0.00581918191164732,-0.01241154596209526,-0.030001381412148476,-0.06397973746061325,0.001403852947987616,-0.006018207874149084,-0.056840382516384125,-0.02877688780426979,0.002473314292728901,-0.015174808911979198,0.04114791005849838,-0.004716354887932539,0.0530514270067215,0.002926142420619726,-0.04518459737300873,-0.055504005402326584,0.02349858172237873,0.02947888895869255,0.0013187769800424576,-0.0903538390994072,0.03258804976940155,0.020586654543876648,0.025617925450205803,0.052898868918418884,-0.005821065977215767,-0.0007150396704673767,-0.0000182224866875913,-0.021228613331913948,-0.02394477277994156,-0.008023465052247047,-0.008750105276703835,-0.04529277980327606,-0.05796787515282631,0.01206210721284151,0.018360869958996773,-0.001712149940431118,0.05794357508420944,-0.0021881372667849064,-0.04057798534631729,-0.006190898362547159,0.02410059981048107,-0.03186681866645813,0.0023213541135191917,-0.014017220586538315,-0.047708190977573395,-0.00032318339799530804,0.015634236857295036,0.027264416217803955,-0.01046897191554308,-0.006245474796742201,0.03315284103155136,-0.011908398941159248,-0.04470360279083252,-0.03176897391676903,-0.039176277816295624,0.05885348096489906,-0.013427705504000187,-0.04115751385688782,0.051617953926324844,0.04787389561533928,-0.009863053448498249,0.053473927080631256,0.07471638172864914,-0.0020979016553610563,0.02297724038362503,0.009037219919264317,0.017814654856920242,0.020930280908942223,-0.04613080248236656,-0.02468354068696499,-0.02154511772096157,0.011159997433423996,0.04041193798184395,0.0008840722148306668,0.01790229231119156,-0.026331480592489243,0.016748905181884766,0.016678474843502045,0.003097357926890254,0.08000466972589493,0.05337473377585411,-0.02335665002465248,-0.030767008662223816,0.02612435072660446,-0.0006828674813732505,-0.024320879951119423,-0.03142299875617027,-0.006624581757932901,-0.010281791910529137,0.026352237910032272,-0.030064040794968605,-0.07095607370138168,0.005331104621291161,0.03173638880252838,0.023552563041448593,-0.011170404963195324,-0.01337621733546257,-0.03566273674368858,-0.010714003816246986,-0.010187184438109398,-0.04127206280827522,0.009645283222198486,0.002831476042047143,0.04032275080680847,-0.023503616452217102,0.01849573478102684,-0.009373701177537441,0.03551388904452324,-0.04254607483744621,-0.030484257265925407,0.008746959269046783,0.038319721817970276,0.05283753573894501,-0.016615288332104683,0.00477964524179697,2.5897040245581593e-7,0.04101948067545891,0.056474316865205765,-0.04738743230700493,-0.033161137253046036,-0.0009631402790546417,-0.03828763589262962,0.009567715227603912,-0.03895450383424759,0.013794534839689732,0.009258603677153587,0.02977321296930313,-0.006407776847481728,0.026582220569252968,0.009021908044815063,0.015602939762175083,0.010878600180149078,-0.0002670438261702657,-0.07976612448692322,-0.02098028175532818,0.017149543389678,0.012033797800540924,0.006434777285903692,0.053067397326231,0.023977914825081825,0.038416679948568344,0.010140698403120041,0.02605890855193138,-0.001939689158461988,0.011092840693891048,-0.06815069913864136,0.0038772018160670996,-0.01286325789988041,0.0013229296309873462,0.01888785883784294,0.02181878127157688,0.007670808583498001,0.022174380719661713,0.03328874707221985,0.022659193724393845,0.0672844648361206,0.010371898300945759,-0.02250383421778679,-0.0096283545717597,-0.04417085647583008,0.0064950366504490376,0.05254904180765152,0.007831760682165623,-0.04325718432664871,-0.08760221302509308,-0.008291480131447315,0.010232469998300076,0.005516007076948881,0.0009107623482123017,-0.01138990093022585,0.03559303283691406,0.012393953278660774,-0.013292646035552025,0.055394839495420456,0.007722618989646435,-0.016274411231279373,-0.022651057690382004,-0.02691340632736683,0.019959570840001106,0.0868617370724678,0.04370550811290741,-0.05679786205291748,-0.031913332641124725,3.0024848642462307e-34,0.019530344754457474,-0.024130817502737045,0.015924964100122452,0.04644451662898064,0.034862011671066284,-0.018034562468528748,0.002828762400895357,-0.03205794468522072,0.03703015670180321,-0.06708493828773499,-0.0010091132717207074]'
SET
  @HasCustomProps_69a113c8 = 1
SET
  @HasCustomEvents_69a113c8 = 0
SET
  @RequiresData_69a113c8 = 0
SET
  @DependencyCount_69a113c8 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_69a113c8 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_69a113c8 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_69a113c8 = 1
SET
  @ID_69a113c8 = 'D8B66E3D-AA5E-4C28-90CB-343F8A223AF3'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_69a113c8,
  @Name = @Name_69a113c8,
  @Version = @Version_69a113c8,
  @VersionSequence = @VersionSequence_69a113c8,
  @Title = @Title_69a113c8,
  @Description = @Description_69a113c8,
  @Type = @Type_69a113c8,
  @Status = @Status_69a113c8,
  @DeveloperName = @DeveloperName_69a113c8,
  @DeveloperEmail = @DeveloperEmail_69a113c8,
  @DeveloperOrganization = @DeveloperOrganization_69a113c8,
  @SourceRegistryID = @SourceRegistryID_69a113c8,
  @ReplicatedAt = @ReplicatedAt_69a113c8,
  @LastSyncedAt = @LastSyncedAt_69a113c8,
  @Specification = @Specification_69a113c8,
  @FunctionalRequirements = @FunctionalRequirements_69a113c8,
  @TechnicalDesign = @TechnicalDesign_69a113c8,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_69a113c8,
  @TechnicalDesignVector = @TechnicalDesignVector_69a113c8,
  @HasCustomProps = @HasCustomProps_69a113c8,
  @HasCustomEvents = @HasCustomEvents_69a113c8,
  @RequiresData = @RequiresData_69a113c8,
  @DependencyCount = @DependencyCount_69a113c8,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_69a113c8,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_69a113c8,
  @HasRequiredCustomProps = @HasRequiredCustomProps_69a113c8,
  @ID = @ID_69a113c8;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_376651df NVARCHAR(MAX),
@Name_376651df NVARCHAR(500),
@Version_376651df NVARCHAR(50),
@VersionSequence_376651df INT,
@Title_376651df NVARCHAR(1000),
@Description_376651df NVARCHAR(MAX),
@Type_376651df NVARCHAR(255),
@Status_376651df NVARCHAR(50),
@DeveloperName_376651df NVARCHAR(255),
@DeveloperEmail_376651df NVARCHAR(255),
@DeveloperOrganization_376651df NVARCHAR(255),
@SourceRegistryID_376651df UNIQUEIDENTIFIER,
@ReplicatedAt_376651df DATETIMEOFFSET,
@LastSyncedAt_376651df DATETIMEOFFSET,
@Specification_376651df NVARCHAR(MAX),
@FunctionalRequirements_376651df NVARCHAR(MAX),
@TechnicalDesign_376651df NVARCHAR(MAX),
@FunctionalRequirementsVector_376651df NVARCHAR(MAX),
@TechnicalDesignVector_376651df NVARCHAR(MAX),
@HasCustomProps_376651df BIT,
@HasCustomEvents_376651df BIT,
@RequiresData_376651df BIT,
@DependencyCount_376651df INT,
@TechnicalDesignVectorEmbeddingModelID_376651df NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_376651df NVARCHAR(MAX),
@HasRequiredCustomProps_376651df BIT,
@ID_376651df UNIQUEIDENTIFIER
SET
  @Namespace_376651df = N'CRM/Customer'
SET
  @Name_376651df = N'Customer360Timeline'
SET
  @Version_376651df = N'1.0.0'
SET
  @VersionSequence_376651df = 1
SET
  @Title_376651df = N'Customer 360 Timeline'
SET
  @Description_376651df = N'Timeline view of customer activities and interactions'
SET
  @Type_376651df = N'Report'
SET
  @Status_376651df = N'Published'
SET
  @Specification_376651df = N'{"name":"Customer360Timeline","location":"embedded","code":"function Customer360Timeline({ activities, onActivityClick }) {\n  const getActivityIcon = (type) => {\n    const icons = {\n      ''Call'': ''📞'',\n      ''Email'': ''✉️'',\n      ''Meeting'': ''🤝'',\n      ''Task'': ''✅'',\n      ''Note'': ''📝''\n    };\n    return icons[type] || ''📌'';\n  };\n\n  const getActivityColor = (type) => {\n    const colors = {\n      ''Call'': ''#3B82F6'',\n      ''Email'': ''#8B5CF6'',\n      ''Meeting'': ''#10B981'',\n      ''Task'': ''#F59E0B'',\n      ''Note'': ''#6B7280''\n    };\n    return colors[type] || ''#9CA3AF'';\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '''';\n    const date = new Date(dateString);\n    return date.toLocaleDateString(''en-US'', { month: ''short'', day: ''numeric'', year: ''numeric'' });\n  };\n\n  if (!activities || activities.length === 0) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'', color: ''#9CA3AF'' }}>\n        No activities found for this customer\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ position: ''relative'', paddingLeft: ''40px'' }}>\n      {/* Timeline line */}\n      <div style={{\n        position: ''absolute'',\n        left: ''20px'',\n        top: ''0'',\n        bottom: ''0'',\n        width: ''2px'',\n        backgroundColor: ''#E5E7EB''\n      }} />\n\n      {activities.map((activity, index) => (\n        <div\n          key={activity.ID || index}\n          onClick={() => onActivityClick && onActivityClick(activity)}\n          style={{\n            position: ''relative'',\n            marginBottom: ''24px'',\n            cursor: onActivityClick ? ''pointer'' : ''default''\n          }}\n        >\n          {/* Timeline dot */}\n          <div style={{\n            position: ''absolute'',\n            left: ''-26px'',\n            top: ''8px'',\n            width: ''12px'',\n            height: ''12px'',\n            borderRadius: ''50%'',\n            backgroundColor: getActivityColor(activity.Type),\n            border: ''2px solid white'',\n            boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)''\n          }} />\n\n          {/* Activity card */}\n          <div style={{\n            padding: ''16px'',\n            backgroundColor: ''white'',\n            borderRadius: ''8px'',\n            boxShadow: ''0 1px 3px rgba(0, 0, 0, 0.1)'',\n            transition: ''transform 0.2s, box-shadow 0.2s'',\n            '':hover'': {\n              transform: ''translateX(4px)'',\n              boxShadow: ''0 4px 6px rgba(0, 0, 0, 0.1)''\n            }\n          }}\n          onMouseEnter={(e) => {\n            if (onActivityClick) {\n              e.currentTarget.style.transform = ''translateX(4px)'';\n              e.currentTarget.style.boxShadow = ''0 4px 6px rgba(0, 0, 0, 0.1)'';\n            }\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = ''translateX(0)'';\n            e.currentTarget.style.boxShadow = ''0 1px 3px rgba(0, 0, 0, 0.1)'';\n          }}>\n            <div style={{ display: ''flex'', alignItems: ''center'', gap: ''12px'', marginBottom: ''8px'' }}>\n              <span style={{ fontSize: ''20px'' }}>{getActivityIcon(activity.Type)}</span>\n              <span style={{ \n                fontWeight: ''bold'', \n                color: ''#111827'',\n                flex: 1\n              }}>\n                {activity.Subject || `$' + '{activity.Type} Activity`}\n              </span>\n              <span style={{ fontSize: ''12px'', color: ''#9CA3AF'' }}>\n                {formatDate(activity.CreatedAt)}\n              </span>\n            </div>\n            <div style={{ \n              display: ''inline-block'',\n              padding: ''4px 8px'',\n              backgroundColor: getActivityColor(activity.Type) + ''20'',\n              color: getActivityColor(activity.Type),\n              borderRadius: ''4px'',\n              fontSize: ''12px'',\n              fontWeight: ''500''\n            }}>\n              {activity.Type}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","description":"Timeline view of customer activities and interactions","category":"Customer","type":"timeline","dataRequirements":{"mode":"views","entities":[{"name":"Accounts","displayFields":["AccountName","Industry","AnnualRevenue","CreatedAt"],"filterFields":["ID"]},{"name":"Contacts","displayFields":["FirstName","LastName","Email","Phone","AccountID"],"filterFields":["AccountID"]},{"name":"Deals","displayFields":["DealName","Stage","Amount","CloseDate","AccountID"],"filterFields":["AccountID"]},{"name":"Activities","displayFields":["Subject","Type","CreatedAt","AccountID"],"filterFields":["AccountID"]}]},"properties":[{"name":"activities","type":"array","required":true,"description":"Array of activity objects sorted by date"},{"name":"onActivityClick","type":"function","required":true,"description":"Callback when an activity is clicked"}],"events":[{"name":"onActivitySelect","description":"Fired when an activity is selected","parameters":[{"name":"activity","type":"object","description":"The selected activity object"}]}],"usageExample":"```javascript\n<Customer360Timeline\n  activities={activities}\n  onActivityClick={(activity) => handleActivityClick(activity)}\n/>\n```","functionalRequirements":"- Display activities in chronological order\n- Show activity type with appropriate icons\n- Format dates in readable format\n- Use different colors for activity types\n- Support click interaction on activities\n- Show activity subject and type","technicalDesign":"Renders vertical timeline with activity items. Uses type-based icons and colors. Formats dates using toLocaleDateString. Implements hover effects for interactive items."}'
SET
  @FunctionalRequirements_376651df = N'- Display activities in chronological order
- Show activity type with appropriate icons
- Format dates in readable format
- Use different colors for activity types
- Support click interaction on activities
- Show activity subject and type'
SET
  @TechnicalDesign_376651df = N'Renders vertical timeline with activity items. Uses type-based icons and colors. Formats dates using toLocaleDateString. Implements hover effects for interactive items.'
SET
  @FunctionalRequirementsVector_376651df = N'[0.012211167253553867,-0.07890826463699341,-0.02399766631424427,0.023037225008010864,0.02611944079399109,-0.017313053831458092,0.043996673077344894,0.03884359076619148,-0.038396015763282776,-0.013562552630901337,-0.0010822988115251064,0.015730123966932297,-0.008063911460340023,0.1034841388463974,-0.03663733974099159,-0.10329868644475937,-0.04022722318768501,-0.021019646897912025,0.044137585908174515,0.04448872059583664,0.0005900525720790029,-0.013042052276432514,-0.007374716456979513,-0.018406542018055916,0.05517631769180298,-0.008027981035411358,-0.07645070552825928,0.011641093529760838,-0.011334430426359177,-0.058217428624629974,-0.02611047588288784,0.036031972616910934,-0.022782694548368454,-0.017247464507818222,0.000001333070485998178,-0.014506341889500618,0.021734677255153656,-0.017172597348690033,0.011583458632230759,0.06151933595538139,0.01840442419052124,-0.021051427349448204,0.07051311433315277,-0.0329713374376297,0.005934778600931168,-0.015196111984550953,-0.00445972615852952,0.06407181173563004,0.031648844480514526,-0.0021433366928249598,0.000839622225612402,0.04294149950146675,0.032860323786735535,-0.013345200568437576,0.041281960904598236,0.09306081384420395,-0.007242627441883087,0.03318638354539871,0.07927732914686203,0.12004511058330536,0.06795922666788101,-0.04988550394773483,0.000982197467237711,0.039307206869125366,-0.018372001126408577,-0.0029084382113069296,0.060024552047252655,-0.007724299095571041,0.025703608989715576,0.0015006707981228828,0.04117104038596153,-0.0013319659046828747,-0.006767340935766697,-0.02590145356953144,0.015116231516003609,-0.03352099657058716,-0.022207919508218765,0.004933161195367575,0.03155576437711716,-0.046335842460393906,0.03966864198446274,0.05684928223490715,-0.034707821905612946,-0.0061622136272490025,0.06045571342110634,-0.06488370895385742,0.001331825158558786,-0.014162804000079632,-0.02809157967567444,0.00020915431377943605,0.08755042403936386,0.012406307272613049,0.03344712406396866,-0.04200064390897751,-0.05596202239394188,-0.03805607557296753,-0.004922942724078894,0.013232656754553318,0.00740074785426259,-0.023740945383906364,0.01878291368484497,0.040523260831832886,0.06127040460705757,-0.00316910189576447,0.03380979970097542,0.025440337136387825,-0.013805048540234566,-0.032378509640693665,-0.048781003803014755,0.06089602783322334,0.038949742913246155,0.005722747649997473,-0.05135064199566841,0.04256255179643631,-0.03852500021457672,0.023670686408877373,-0.05036917328834534,0.03849475458264351,0.001350473496131599,-0.04382358863949776,0.1127014309167862,0.0224575474858284,-0.036932628601789474,-0.01865803264081478,-0.030419524759054184,-0.056484464555978775,-0.01319397334009409,0.018956385552883148,-0.00566562544554472,0.027635226026177406,-0.002356910612434149,-0.027459461241960526,0.007179350592195988,-0.04250103607773781,-0.022719545289874077,-0.007095314562320709,-0.020093334838747978,0.02276764251291752,-0.06130526587367058,-0.019344890490174294,0.03097577765583992,0.03356092423200607,-0.07021395117044449,-0.0008380518411286175,0.001593410619534552,-0.006817333400249481,-0.05348897725343704,0.04882758483290672,-0.007620464079082012,-0.019494591280817986,-0.005181971937417984,-0.012491385452449322,-0.015423435717821121,0.027772082015872,-0.02868597023189068,0.016550123691558838,-0.02548931911587715,-0.045609526336193085,-0.0032055480405688286,0.04196150600910187,0.0047498359344899654,0.00792200118303299,0.021012339740991592,0.0018273795722052455,-0.05693100020289421,0.008154082112014294,0.02896846830844879,-0.055346593260765076,-0.017204659059643745,-0.025288447737693787,0.0000855706530273892,-0.014731223694980145,-0.022959204390645027,-0.027317184954881668,0.03238823264837265,-0.025739995762705803,-0.003034521359950304,-0.016297325491905212,0.05064002424478531,-0.039754610508680344,0.07095647603273392,-0.03865364193916321,0.00921674631536007,0.02793440967798233,0.035855021327733994,-0.02686917409300804,-0.10775265842676163,0.01807999052107334,-0.028318045660853386,-0.003233289113268256,-0.005999978166073561,0.013930005021393299,0.04691055789589882,-0.02202448435127735,0.017606237903237343,-0.014175161719322205,-0.001643429510295391,0.012950808741152287,-0.02971833385527134,0.019365394487977028,-0.015339185483753681,0.013846976682543755,-0.0038924887776374817,0.0509183369576931,-0.028967441990971565,0.02002323605120182,-0.046706974506378174,-0.01080008689314127,0.04265359789133072,0.01903158240020275,0.010132258757948875,0.013553798198699951,0.0024760598316788673,-0.009257032535970211,-0.05741192027926445,0.0015997873852029443,0.01772806979715824,0.01877860352396965,-0.05626041814684868,-0.016505060717463493,0.02308201789855957,-0.016605732962489128,-0.09293551743030548,0.001373595790937543,0.057656195014715195,-0.005725536495447159,0.014738590456545353,-0.014480099081993103,0.04519255459308624,0.05675148591399193,0.03360079601407051,-0.010661812499165535,0.04418351501226425,-0.025174463167786598,0.030066847801208496,0.07291416823863983,-0.002529221586883068,0.0530054084956646,-0.01196657121181488,0.008648325689136982,0.01597527787089348,-0.05495763570070267,-0.006320081651210785,-0.051259785890579224,-0.03401227295398712,0.056625284254550934,0.022715594619512558,0.017446698620915413,0.04520491138100624,0.02981419861316681,-0.05494057387113571,0.02315714955329895,0.04310399666428566,-0.029520146548748016,0.01228677574545145,0.09190080314874649,-0.01493871584534645,-0.030371569097042084,-0.09845918416976929,-0.0065720234997570515,-0.0024679708294570446,-0.05452895909547806,-0.022219184786081314,-0.033465683460235596,0.01549640204757452,-0.004300215281546116,0.03135136142373085,-0.059632591903209686,-0.026445304974913597,-0.02809124067425728,0.0016054537845775485,0.021006975322961807,0.010641951113939285,-0.004851240199059248,-0.03826408088207245,0.02789655700325966,-0.0030914158560335636,-0.0037823314778506756,0.05167018622159958,-0.007671280764043331,0.010130888782441616,0.020065149292349815,0.015261503867805004,0.016362136229872704,-0.040864408016204834,-0.036428555846214294,0.03541706129908562,-0.010073651559650898,0.0021996547002345324,0.02545088715851307,0.07250301539897919,0.0032110537867993116,0.018751652911305428,-0.017300063744187355,-0.0041311923414468765,0.007361631374806166,0.03520685434341431,0.059570666402578354,-0.012281985022127628,0.06496026366949081,-0.0008879572269506752,0.004267731215804815,0.020959502086043358,-0.022451460361480713,-0.0076039014384150505,0.05904700607061386,-0.0008998681441880763,-0.05921459197998047,0.0006967582739889622,0.04263513535261154,0.0017083524726331234,0.043808624148368835,0.021071404218673706,-0.05867511406540871,-0.03437720984220505,0.04102221131324768,0.024260224774479866,-0.02795417606830597,-0.02248181775212288,0.01641635037958622,-0.03717555105686188,0.010897500440478325,0.0005607163766399026,0.022863199934363365,-0.02581741474568844,0.020900940522551537,-0.021688077598810196,0.003284408478066325,0.026923811063170433,0.026256300508975983,0.009747069329023361,0.02067066915333271,-0.01980196312069893,-0.01402960903942585,0.020278647541999817,0.10783033818006516,-0.0064909434877336025,0.015206302516162395,-0.006433235015720129,-0.03521711379289627,-0.07208463549613953,-0.027010010555386543,-0.005088033154606819,-0.04660642519593239,0.08034320920705795,-0.017007336020469666,-0.03854341804981232,0.026093078777194023,-0.07758591324090958,0.0243854857981205,0.019012125208973885,0.003294293535873294,-0.0002664624189492315,0.012469077482819557,0.027104506269097328,0.03911629691720009,-0.025632817298173904,0.007275216281414032,-0.11643058806657791,-0.05601518973708153,-0.04596288874745369,0.018009386956691742,-0.0405382364988327,-0.02794635109603405,-0.014053471386432648,-0.03038814291357994,0.029934925958514214,0.00517665408551693,-0.014173814095556736,0.013405713252723217,0.07876850664615631,0.010122654028236866,0.06457584351301193,0.03754265233874321,-0.03876769170165062,-0.06832610070705414,-0.0027051917277276516,0.026377985253930092,-0.03840947151184082,0.02073039300739765,0.009971627965569496,0.023417426273226738,0.06080062687397003,-0.08958522975444794,-0.016149861738085747,0.0069992514327168465,0.010823266580700874,0.034791648387908936,0.02712266705930233,-0.04602932557463646,0.007403910625725985,-0.06882471591234207,-0.017652997747063637,-0.010071557946503162,-0.02955833449959755,-0.055193327367305756,-0.04611894488334656,0.007736110594123602,0.0027638734318315983,-0.0016924400115385652,-0.03014725260436535,0.017427334561944008,-0.0037637974601238966,0.0066879563964903355,0.0239276010543108,0.012709669768810272,-0.023862037807703018,0.027828296646475792,-0.041873980313539505,-0.020750921219587326,-0.050327807664871216,0.022747667506337166,-0.0195335540920496,-0.017627961933612823,-0.023882189765572548,0.04129612818360329,0.01567390188574791,-0.017939742654561996,0.03496289998292923,0.016136951744556427,-0.023437703028321266,-0.008091618306934834,0.03848365694284439,-0.011144472286105156,0.033221516758203506,-0.02098950184881687,-0.09039235860109329,0.013528670184314251,-0.031731877475976944,-0.045390043407678604,0.014578762464225292,0.011337937787175179,-0.036171942949295044,0.041367582976818085,-0.006050861440598965,-0.02231811173260212,-0.045667607337236404,-0.025487292557954788,-0.010602711699903011,0.023232266306877136,-0.03463434427976608,-0.004709317814558744,0.03689742833375931,0.01813356950879097,-0.005960009526461363,0.0020387896802276373,0.0067612300626933575,-0.025248778983950615,0.007794416043907404,0.07382133603096008,-0.01601211540400982,0.017253631725907326,-0.09536157548427582,0.003087169025093317,-0.022803394123911858,0.02046145871281624,-0.040376465767621994,0.01141059584915638,0.02044898271560669,-0.03573239594697952,0.03174944967031479,0.012871037237346172,-0.029529277235269547,-0.010781027376651764,0.06933749467134476,-0.07641614228487015,-0.01822531782090664,0.06429994106292725,-0.04119470342993736,-0.010410794056952,0.024481890723109245,0.021370775997638702,-0.029538268223404884,-0.03698784485459328,-0.019730517640709877,-0.04237348586320877,-0.009088321588933468,-0.11404372751712799,-0.07369586080312729,-0.01722061261534691,0.016181165352463722,0.045702382922172546,0.02171078883111477,-0.08731388300657272,0.0019132747547701001,-0.0305743720382452,-0.04315129667520523,-0.01594093069434166,-0.003337747883051634,0.09208308160305023,0.030916452407836914,0.03000665083527565,-0.008234936743974686,0.04469556733965874,0.02405915968120098,-0.018913237378001213,-0.06295005977153778,0.042804472148418427,0.002962944796308875,0.0024492463562637568,0.006600479129701853,-0.0011514389188960195,-0.0402013324201107,0.029154451563954353,-0.009503294713795185,-0.016689106822013855,-0.0096295066177845,0.029632696881890297,-0.04588751122355461,0.051540475338697433,0.0037109595723450184,0.019343949854373932,-0.005704021546989679,0.08352850377559662,0.0009618732728995383,0.014658231288194656,0.0035719568841159344,-0.0031398360151797533,0.03803360089659691,0.0004071446310263127,0.025115249678492546,0.018764639273285866,0.04897274821996689,0.028760122135281563,0.05167338624596596,0.012477799318730831,0.023282811045646667,0.013834688812494278,-0.033880867063999176,0.060879096388816833,-0.0705920159816742,-0.02504575438797474,0.06524151563644409,-0.050344765186309814,0.015508842654526234,-0.000904193555470556,-0.0016010717954486609,0.04725164547562599,-0.03075176291167736,-0.017646102234721184,-0.01555715687572956,0.0166238471865654,0.026308149099349976,-0.023544365540146828,0.00451192632317543,0.0266791433095932,-0.017087412998080254,-0.0036234103608876467,0.01937178522348404,0.020126642659306526,-0.005836315918713808,-0.05710689350962639,-0.05625809356570244,0.010861562564969063,-0.05644999444484711,-5.058348719550081e-33,0.0039568799547851086,-0.03557785600423813,-0.04694657027721405,0.015500699169933796,0.03624887391924858,0.03785719349980354,-0.030419059097766876,0.006420545279979706,-0.0021966653876006603,-0.0006526827346533537,0.009241882711648941,-0.039121951907873154,0.0068257092498242855,-0.06433656066656113,0.05115407332777977,0.07884347438812256,0.04252735152840614,-0.03228551149368286,0.03362704813480377,-0.01274576224386692,-0.001586913364008069,-0.030503250658512115,-0.050148576498031616,-0.020630765706300735,0.002230958081781864,0.024059420451521873,0.025405529886484146,0.02127307653427124,-0.0005613354733213782,0.012856760062277317,-0.02394273318350315,-0.035521186888217926,0.027124980464577675,0.07186803966760635,0.0003452697128523141,-0.0454133115708828,-0.0286655705422163,-0.010954715311527252,0.009528030641376972,0.020083539187908173,-0.023123327642679214,0.00903053767979145,-0.010595500469207764,-0.026265284046530724,0.004903176333755255,0.008546682074666023,0.012612694874405861,-0.02875305525958538,-0.03244972601532936,-0.021826302632689476,-0.01592501625418663,0.03442245349287987,0.04096490144729614,0.022645430639386177,-0.007891750894486904,-0.00186245352961123,0.044929321855306625,-0.0507834292948246,-0.07499416917562485,0.01668837107717991,-0.09696049988269806,-0.006119149271398783,-0.023999610915780067,0.03849691525101662,0.02588285505771637,-0.023638185113668442,-0.08780752122402191,0.062341608107089996,-0.04014771804213524,0.04978165403008461,-0.011468961834907532,0.06633669137954712,0.009952631779015064,-0.03684882074594498,-0.004355801269412041,0.014467360451817513,0.03508744761347771,-0.02431667223572731,0.07703276723623276,-0.0002504987351130694,-0.052133988589048386,0.057955801486968994,-0.008417308330535889,0.021251972764730453,0.044140879064798355,0.039151325821876526,0.01731485314667225,-0.037130944430828094,0.03488365188241005,0.018926601856946945,-0.03663916140794754,0.03111313097178936,-0.03507154807448387,0.023975443094968796,-0.020684855058789253,0.010369489900767803,0.047359008342027664,0.028703870251774788,-0.011188839562237263,-0.008233617059886456,-0.02184908092021942,-0.0493461899459362,-0.03802211955189705,0.006990950088948011,-0.0335833840072155,0.002507432596758008,-0.013680472038686275,-0.005884886719286442,0.0197230763733387,-0.018885591998696327,0.013109056279063225,-0.017293278127908707,0.012160261161625385,-0.03526948019862175,0.011662005446851254,-0.05267804116010666,-0.0512017086148262,0.08415602892637253,-0.014241041615605354,-0.06444215029478073,0.013182728551328182,-0.02754349075257778,0.030007096007466316,-0.03192926570773125,0.045445505529642105,-0.05414308235049248,-0.04883867874741554,0.05020188167691231,-0.012578238733112812,0.0514962375164032,-0.009941810742020607,0.04837053641676903,2.2527548537709663e-7,0.002411162480711937,-0.028517836704850197,-0.0227932408452034,0.0731097161769867,0.013355928473174572,-0.035319119691848755,0.020559880882501602,-0.047563258558511734,0.026065053418278694,0.02614264376461506,0.027101466432213783,0.020390585064888,0.0032515483908355236,0.058397602289915085,0.022382106631994247,-0.03295589238405228,0.07504699379205704,-0.05884662643074989,-0.03142068162560463,0.02030637115240097,0.11433499306440353,0.019392255693674088,0.04445852339267731,0.0745307058095932,0.01280251145362854,-0.04474598541855812,0.01235633622854948,0.015983527526259422,0.020603297278285027,-0.023796018213033676,-0.01755288802087307,-0.019931118935346603,-0.05122802034020424,0.0375455804169178,-0.014316575601696968,-0.02654438465833664,0.021372618153691292,0.019182316958904266,-0.015794184058904648,0.016666671261191368,0.04603685438632965,-0.021615274250507355,-0.008414474315941334,0.01060777623206377,-0.009585030376911163,-0.020041517913341522,0.009523121640086174,0.04606601223349571,-0.009581380523741245,0.03726637735962868,-0.005542644765228033,0.008695336058735847,0.003101554000750184,-0.025748318061232567,0.014440510421991348,-0.02626480907201767,-0.06501854956150055,0.028149889782071114,-0.011843690648674965,0.00647503137588501,0.010267992503941059,-0.02448527328670025,-0.017041128128767014,0.03043917380273342,0.06024400517344475,0.0046028802171349525,-0.003156692488119006,2.5786222643263494e-34,-0.015948200598359108,0.0033634318970143795,0.04948488250374794,0.05486052483320236,-0.006137983873486519,0.013657472096383572,0.02547886036336422,-0.01704171672463417,0.004052130505442619,-0.0015529680531471968,-0.029281863942742348]'
SET
  @TechnicalDesignVector_376651df = N'[0.0009291453752666712,-0.0555485375225544,-0.01931607723236084,-0.030600549653172493,-0.04267116263508797,-0.015581866726279259,0.08650736510753632,0.09911440312862396,-0.030169757083058357,-0.008889972232282162,0.05358172580599785,0.009103190153837204,0.00619936641305685,0.12350541353225708,-0.035701148211956024,-0.11874794960021973,-0.034058090299367905,0.003490177448838949,-0.01812005043029785,0.023450033739209175,-0.009773023426532745,0.00022641010582447052,-0.0385160818696022,-0.047944411635398865,0.006685111206024885,-0.03797312080860138,-0.03468136116862297,0.0005685251671820879,0.011332673020660877,-0.05883859470486641,-0.014359546825289726,0.021495111286640167,-0.04946805536746979,0.020151928067207336,0.0000016065416730270954,-0.0184711292386055,0.009086711332201958,0.004222139250487089,0.03181927651166916,0.02901390753686428,0.030277861282229424,0.015277853235602379,0.043202824890613556,-0.009855903685092926,-0.02398599684238434,-0.03961535915732384,-0.031543534249067307,0.04698261246085167,0.0031399133149534464,-0.026089642196893692,0.003715133760124445,0.0576508603990078,0.03626735880970955,-0.006092799361795187,0.07249277830123901,0.09866141527891159,-0.025584395974874496,0.026787955313920975,0.08166525512933731,0.06120783090591431,0.04380066692829132,-0.00026716708089224994,0.009093278087675571,0.010492457076907158,-0.000652473361697048,-0.002710508881136775,0.020885929465293884,-0.023002970963716507,0.015315131284296513,-0.014350437559187412,0.08119024336338043,-0.006398720201104879,-0.02374027483165264,0.042756278067827225,-0.021036777645349503,-0.04528399184346199,-0.006232629530131817,-0.014944254420697689,-0.0013419330352917314,-0.04154516011476517,-0.027568913996219635,0.025175346061587334,-0.034209318459033966,-0.023564394563436508,0.0349813736975193,-0.0441155843436718,0.033169373869895935,-0.006257679779082537,-0.0321907103061676,-0.012749558314681053,0.09165120869874954,-0.039229925721883774,0.033300403505563736,-0.0018279296346008778,-0.014263972640037537,-0.03650088608264923,0.01440400630235672,0.0005210735253058374,0.011693604290485382,0.0049393498338758945,0.046770211309194565,0.05513692647218704,-0.026148615404963493,0.011678584851324558,0.038044918328523636,0.0729714184999466,-0.02847851999104023,-0.11003835499286652,-0.03841932490468025,0.010279671289026737,0.024238483980298042,-0.00990495178848505,0.006139594130218029,-0.0009748101001605392,-0.06137635186314583,0.032948318868875504,-0.006341403350234032,-0.00143711781129241,0.00738063408061862,0.014722592197358608,0.036365386098623276,0.023104995489120483,-0.019024919718503952,0.006641404237598181,-0.02951895445585251,-0.00938181858509779,-0.004503883887082338,-0.024909326806664467,0.0036927189212292433,0.0015992078697308898,-0.00785999745130539,-0.015969013795256615,0.008315172977745533,-0.003346869256347418,-0.02475857362151146,-0.029856182634830475,-0.04151664301753044,0.023577794432640076,-0.03557242453098297,0.009179249405860901,0.00353240966796875,0.048390571027994156,-0.019273309037089348,0.006242513656616211,-0.013975972309708595,-0.013323095627129078,-0.02141864411532879,-0.005781679879873991,0.0017500331159681082,0.005685882642865181,0.014487509615719318,-0.013806682080030441,-0.05897646024823189,0.009506477043032646,-0.07130412012338638,0.016314318403601646,-0.0006081392639316618,-0.03516991063952446,0.047091610729694366,0.07584311068058014,0.0001267401676159352,-0.02076885849237442,-0.008891231380403042,0.015627974644303322,-0.05835028737783432,0.016245035454630852,-0.12784378230571747,-0.008002696558833122,-0.03529279679059982,-0.05407530069351196,-0.028259119018912315,-0.004868058022111654,0.0012964725028723478,-0.024833986535668373,0.026523826643824577,-0.02448735013604164,-0.0031946077942848206,-0.0032217204570770264,-0.005470493342727423,-0.05390331894159317,0.06057950481772423,-0.11285760253667831,0.02866317890584469,0.014029666781425476,0.0074805268086493015,-0.02095111273229122,-0.09448797255754471,0.031365495175123215,-0.03436615690588951,-0.04175982251763344,-0.05701266974210739,0.029201453551650047,0.049690164625644684,0.022409114986658096,0.007617397699505091,0.003970786929130554,0.006408573128283024,-0.01864372193813324,0.01973138563334942,0.024787459522485733,0.019783353433012962,0.04292658716440201,0.06597481667995453,0.10667640715837479,0.009129391983151436,0.021429598331451416,0.005151892546564341,-0.02498992159962654,-0.0024524314794689417,0.09284567087888718,-0.00012237839109729975,-0.010223004966974258,-0.00867703091353178,0.01863567717373371,-0.035247862339019775,0.00694582425057888,0.018625391647219658,0.0311322882771492,-0.054822348058223724,0.014150405302643776,-0.006084194872528315,-0.07634995132684708,0.00002077274075418245,-0.0051601049490273,0.06710910052061081,-0.012313988991081715,0.002217225031927228,-0.014198753982782364,0.030737191438674927,0.024180162698030472,-0.010985204018652439,-0.0393792986869812,-0.0021849959157407284,-0.02409496158361435,0.024969829246401787,0.05542837455868721,0.05517074093222618,0.07203010469675064,0.012397801503539085,-0.014344040304422379,-0.003218370722606778,-0.0214714165776968,-0.011908345855772495,-0.017804058268666267,-0.041224155575037,0.05628080666065216,-0.00526771042495966,0.018280088901519775,-0.03174290806055069,-0.0007188737508840859,0.03704528883099556,0.028844047337770462,0.014615201391279697,-0.07572498172521591,-0.03105243667960167,0.06634487956762314,0.03020372800529003,-0.03938308358192444,-0.021033303812146187,0.031135668978095055,-0.005257183685898781,-0.021858222782611847,-0.04279981926083565,-0.0415511429309845,0.030975963920354843,-0.020972389727830887,0.017893724143505096,-0.042217377573251724,-0.01652287133038044,-0.012800232507288456,0.015149648301303387,0.011427285149693489,0.03240899369120598,-0.00017848059360403568,-0.020847948268055916,-0.006384608335793018,-0.02862769179046154,-0.012757373973727226,0.030819864943623543,-0.002978104166686535,0.0034743251744657755,0.0014346725074574351,0.010530276224017143,0.005203327164053917,-0.023280609399080276,0.010612765327095985,-0.01463586650788784,-0.05905893072485924,0.019713275134563446,-0.034989360719919205,-0.004024080000817776,-0.003193123731762171,0.01121484488248825,0.0011794536840170622,0.014234963804483414,0.03200065717101097,0.06229917332530022,0.09331406652927399,0.006104311440140009,0.018455613404512405,-0.027877027168869972,-0.044669754803180695,-0.0024830864276736975,0.02736791782081127,-0.004151723347604275,0.05616685748100281,-0.004427007399499416,-0.02212829887866974,-0.005932503845542669,0.0645964965224266,-0.007001598831266165,0.04423333704471588,0.004534142557531595,-0.05196597799658775,-0.016803134232759476,0.02929668314754963,0.05457747355103493,0.01754196546971798,0.010164950974285603,0.04182392358779907,-0.012502726167440414,-0.01662019081413746,-0.024779535830020905,-0.05014016479253769,-0.02591565251350403,0.060736283659935,-0.026080943644046783,-0.01715395599603653,0.009912063367664814,0.009226491674780846,-0.02235824428498745,0.017147246748209,-0.0008922602864913642,0.03846104070544243,0.01211527269333601,-0.016375266015529633,-0.047697581350803375,-0.007666115183383226,-0.02995285764336586,-0.06495167315006256,-0.014365418814122677,-0.03489916771650314,-0.00693167932331562,0.01771845854818821,0.08709124475717545,-0.0024475217796862125,-0.0932258814573288,0.022794904187321663,-0.06712999194860458,0.03998681902885437,-0.026039572432637215,0.051536887884140015,0.008198384195566177,0.0016841072356328368,0.010759229771792889,0.034486085176467896,-0.03657734766602516,-0.02328439988195896,-0.06591875851154327,0.0219715628772974,-0.037235062569379807,0.019357718527317047,0.07254845649003983,-0.01156825665384531,-0.008369752205908298,0.047984082251787186,0.017832333222031593,0.03172457963228226,-0.02003040537238121,-0.010073128156363964,0.03558792918920517,0.04081695154309273,0.03717900812625885,0.04440334811806679,-0.04172781482338905,-0.08832238614559174,0.0069866240955889225,0.007525725290179253,-0.01747153140604496,0.023595349863171577,0.029008638113737106,-0.015197628177702427,0.061850398778915405,-0.04948651045560837,0.01480801310390234,-0.001415529870428145,-0.008969459682703018,0.03143444284796715,0.04650396108627319,-0.04631097987294197,-0.0023758516181260347,-0.013752823695540428,0.022961456328630447,-0.004922626540064812,-0.009093429893255234,0.008703771978616714,0.03397272154688835,-0.03331539407372475,-0.01058342307806015,0.011200904846191406,0.010450325906276703,-0.01094204280525446,-0.012138609774410725,0.03777248039841652,0.07230884581804276,-0.0074105579406023026,0.008720390498638153,0.031311504542827606,-0.00238005886785686,0.013615096919238567,-0.1189277246594429,0.03188322111964226,0.020810529589653015,-0.042076628655195236,-0.07840810716152191,0.04161037877202034,-0.016864771023392677,-0.009512918069958687,0.05396198853850365,0.044817354530096054,0.0016507247928529978,0.014291017316281796,0.014209466986358166,-0.010176783427596092,0.06202330067753792,-0.008182479068636894,-0.04902789369225502,-0.016465183347463608,-0.023696929216384888,-0.023074081167578697,0.02038111351430416,0.01806875318288803,-0.034477345645427704,0.0034076001029461622,-0.022372540086507797,-0.06764756143093109,-0.03908473998308182,0.005145781207829714,-0.018865438178181648,0.0018992485711351037,-0.03202686458826065,-0.0075811599381268024,0.06277855485677719,-0.010237853974103928,-0.02092882990837097,-0.08506017923355103,-0.008147538639605045,-0.02079308032989502,0.03584149107336998,-0.015978166833519936,-0.0211598239839077,0.06357813626527786,-0.042951539158821106,-0.02246999368071556,-0.03060903772711754,-0.032898373901844025,0.043082986027002335,-0.0067039979621768,0.02553347498178482,0.010126546956598759,0.03611806035041809,0.03639698401093483,-0.0075526125729084015,0.021386677399277687,0.06709524244070053,0.054732128977775574,0.005857314448803663,0.09940848499536514,-0.0027978913858532906,-0.0520077645778656,-0.0007513312739320099,0.020775865763425827,-0.02376483753323555,-0.06338296085596085,0.011006992310285568,0.008351819589734077,0.007268402725458145,-0.023298852145671844,-0.01988915726542473,-0.025950103998184204,-0.028922853991389275,0.05663300305604935,0.01828647218644619,-0.05580676347017288,0.046101164072752,0.022975917905569077,-0.04276306554675102,-0.01585165597498417,-0.005047771148383617,0.022948825731873512,-0.007476877886801958,-0.03082966059446335,-0.0055604069493710995,0.05826163291931152,0.03190033882856369,0.0021318793296813965,-0.03276027366518974,-0.006949993781745434,-0.045350585132837296,0.0018933407263830304,-0.03235336020588875,-0.019911471754312515,-0.01988307014107704,0.03165508061647415,-0.04614132270216942,0.009961896575987339,0.0023248696234077215,0.031093791127204895,-0.038606539368629456,0.04736477509140968,-0.0019242704147472978,0.01302642934024334,-0.04231835529208183,0.07997182011604309,0.012972868047654629,0.017330190166831017,0.005959653295576572,-0.017712945118546486,0.027279671281576157,-0.00723238056525588,0.02761484682559967,0.022329747676849365,-0.02402964048087597,0.018914159387350082,0.04062819108366966,-0.0022802145686000586,0.012152819894254208,0.020610688254237175,-0.003338062670081854,0.03872384876012802,-0.036373868584632874,0.007305870298296213,0.1000656709074974,0.004993909504264593,-0.005062255077064037,-0.0002192782994825393,0.002872064709663391,-0.003944702912122011,0.009401747956871986,-0.025655055418610573,-0.04760605841875076,0.008047964423894882,0.11142891645431519,-0.01956404373049736,0.01881321147084236,0.0017695499118417501,-0.020559221506118774,-0.010800612159073353,0.029971182346343994,-0.020621338859200478,0.041507430374622345,-0.023935725912451744,-0.08482228964567184,-0.008937445469200611,-0.05874909088015556,-6.671352149514839e-33,-0.03952469304203987,-0.010788889601826668,-0.03156903758645058,0.015413827262818813,-0.0031556084286421537,0.037967246025800705,-0.01188522670418024,-0.03219360113143921,-0.019615354016423225,0.00933052133768797,-0.04211006313562393,-0.029466873034834862,0.02949887327849865,-0.015456592664122581,-0.006359753664582968,0.03223199024796486,0.03249196708202362,-0.0012812067288905382,0.010615496896207333,-0.002544922986999154,-0.0017553423531353474,-0.020502477884292603,-0.01139296218752861,-0.04780068248510361,-0.03444236144423485,-0.009992745704948902,0.01505860686302185,0.041884444653987885,0.03043360635638237,0.03350367769598961,-0.02277650311589241,-0.005324012599885464,-0.017154527828097343,0.07443848252296448,0.027239089831709862,-0.019294828176498413,-0.0790235623717308,-0.02820134535431862,0.034040991216897964,0.0009743876289576292,0.03592866659164429,-0.012444836087524891,-0.023294582962989807,0.008156711235642433,0.0036959461867809296,-0.0030609448440372944,-0.01010581199079752,-0.031122399494051933,-0.04763862118124962,-0.032814327627420425,0.03435540571808815,0.011612176895141602,0.007489978335797787,0.005795089993625879,-0.018489321693778038,0.004870455712080002,0.04569339379668236,-0.029515478760004044,-0.08941586315631866,-0.00655439542606473,-0.12260248512029648,-0.0032098388765007257,-0.001263818354345858,0.0414777547121048,0.0329134501516819,0.02840528078377247,-0.00987874437123537,0.07380769401788712,-0.05702357739210129,0.0432095043361187,-0.016807133331894875,0.0004470167332328856,0.0408477857708931,-0.028969675302505493,0.008906248025596142,0.03545546531677246,0.05445651710033417,-0.00907980278134346,0.0937894880771637,0.05710393562912941,-0.03137651085853577,0.026091571897268295,-0.0015524143818765879,0.031470514833927155,-0.0026016971096396446,-0.018745804205536842,0.0071605537086725235,-0.07917609065771103,0.027073705568909645,0.027169350534677505,0.010407678782939911,0.02676299214363098,-0.02114756777882576,0.05679606273770332,0.004601880442351103,-0.01318686455488205,0.04451974853873253,0.04420742392539978,-0.016039511188864708,-0.0018081102753058076,0.05761310085654259,-0.010218401439487934,-0.02846510335803032,-0.004583356902003288,-0.02239394746720791,-0.015745854005217552,0.018543334677815437,0.03029833547770977,-0.05911785364151001,0.0006963520427234471,0.011364621110260487,0.009585028514266014,-0.003541582962498069,-0.04711800441145897,0.014934939332306385,-0.007202556822448969,-0.024283278733491898,0.09493014961481094,-0.001328253885731101,0.006051233038306236,0.06837043911218643,-0.09310445189476013,-0.000039943046431289986,0.015869949012994766,-0.013322542421519756,-0.017387237399816513,-0.07373763620853424,0.03065323457121849,-0.04797707125544548,0.013510419055819511,-0.003366300603374839,0.042030688375234604,2.5696547822917637e-7,-0.023476876318454742,0.022531529888510704,0.008766405284404755,0.037070538848638535,0.036866843700408936,-0.0763774961233139,0.010057365521788597,-0.033356521278619766,-0.015101770870387554,0.0015922135207802057,0.016253087669610977,-0.00188489502761513,0.02512308955192566,0.05689423531293869,0.06206539273262024,-0.04921097308397293,0.039812035858631134,-0.08162623643875122,-0.04581877216696739,0.06338409334421158,0.12360092252492905,-0.01191550400108099,0.08071278780698776,0.027177972719073296,-0.015874136239290237,-0.049445681273937225,0.04554593935608864,-0.011849047616124153,-0.011914178729057312,-0.033502012491226196,-0.00801246240735054,0.0056938594207167625,-0.01699363812804222,-0.021500403061509132,0.007926259189844131,-0.03387456387281418,-0.03488435223698616,0.018124094232916832,-0.008139836601912975,0.042617589235305786,0.023702412843704224,0.0030095966067165136,-0.024376265704631805,0.007458739914000034,0.02082981914281845,0.04150776192545891,-0.016574613749980927,0.027160178869962692,-0.015791840851306915,0.03444423899054527,-0.03688656911253929,0.0115470290184021,-0.011936679482460022,-0.02821166440844536,0.03030266799032688,0.0013343599857762456,-0.03135490044951439,0.016015544533729553,-0.024491602554917336,-0.034747835248708725,-0.016529111191630363,-0.0026901275850832462,-0.029250187799334526,0.02935868687927723,0.005920608062297106,0.007638886570930481,-0.051929015666246414,3.2395708249588068e-34,0.029256165027618408,-0.01973746530711651,-0.0004523085372056812,0.009829769842326641,0.009456506930291653,0.01208979357033968,0.047152481973171234,-0.027313223108649254,0.01757727563381195,-0.07016053795814514,-0.006016232073307037]'
SET
  @HasCustomProps_376651df = 1
SET
  @HasCustomEvents_376651df = 1
SET
  @RequiresData_376651df = 0
SET
  @DependencyCount_376651df = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_376651df = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_376651df = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_376651df = 1
SET
  @ID_376651df = '8E9F75DF-F187-45E7-A15B-424946217C1F'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_376651df,
  @Name = @Name_376651df,
  @Version = @Version_376651df,
  @VersionSequence = @VersionSequence_376651df,
  @Title = @Title_376651df,
  @Description = @Description_376651df,
  @Type = @Type_376651df,
  @Status = @Status_376651df,
  @DeveloperName = @DeveloperName_376651df,
  @DeveloperEmail = @DeveloperEmail_376651df,
  @DeveloperOrganization = @DeveloperOrganization_376651df,
  @SourceRegistryID = @SourceRegistryID_376651df,
  @ReplicatedAt = @ReplicatedAt_376651df,
  @LastSyncedAt = @LastSyncedAt_376651df,
  @Specification = @Specification_376651df,
  @FunctionalRequirements = @FunctionalRequirements_376651df,
  @TechnicalDesign = @TechnicalDesign_376651df,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_376651df,
  @TechnicalDesignVector = @TechnicalDesignVector_376651df,
  @HasCustomProps = @HasCustomProps_376651df,
  @HasCustomEvents = @HasCustomEvents_376651df,
  @RequiresData = @RequiresData_376651df,
  @DependencyCount = @DependencyCount_376651df,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_376651df,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_376651df,
  @HasRequiredCustomProps = @HasRequiredCustomProps_376651df,
  @ID = @ID_376651df;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_868babd5 NVARCHAR(MAX),
@Name_868babd5 NVARCHAR(500),
@Version_868babd5 NVARCHAR(50),
@VersionSequence_868babd5 INT,
@Title_868babd5 NVARCHAR(1000),
@Description_868babd5 NVARCHAR(MAX),
@Type_868babd5 NVARCHAR(255),
@Status_868babd5 NVARCHAR(50),
@DeveloperName_868babd5 NVARCHAR(255),
@DeveloperEmail_868babd5 NVARCHAR(255),
@DeveloperOrganization_868babd5 NVARCHAR(255),
@SourceRegistryID_868babd5 UNIQUEIDENTIFIER,
@ReplicatedAt_868babd5 DATETIMEOFFSET,
@LastSyncedAt_868babd5 DATETIMEOFFSET,
@Specification_868babd5 NVARCHAR(MAX),
@FunctionalRequirements_868babd5 NVARCHAR(MAX),
@TechnicalDesign_868babd5 NVARCHAR(MAX),
@FunctionalRequirementsVector_868babd5 NVARCHAR(MAX),
@TechnicalDesignVector_868babd5 NVARCHAR(MAX),
@HasCustomProps_868babd5 BIT,
@HasCustomEvents_868babd5 BIT,
@RequiresData_868babd5 BIT,
@DependencyCount_868babd5 INT,
@TechnicalDesignVectorEmbeddingModelID_868babd5 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_868babd5 NVARCHAR(MAX),
@HasRequiredCustomProps_868babd5 BIT,
@ID_868babd5 UNIQUEIDENTIFIER
SET
  @Namespace_868babd5 = N'CRM/Analytics'
SET
  @Name_868babd5 = N'SalesFunnelVisualization'
SET
  @Version_868babd5 = N'1.0.0'
SET
  @VersionSequence_868babd5 = 1
SET
  @Title_868babd5 = N'Sales Funnel Visualization'
SET
  @Description_868babd5 = N'Interactive sales funnel visualization with conversion metrics and drill-down capabilities'
SET
  @Type_868babd5 = N'Chart'
SET
  @Status_868babd5 = N'Published'
SET
  @Specification_868babd5 = N'{"name":"SalesFunnelVisualization","namespace":"CRM/Analytics","type":"Chart","location":"embedded","code":"function SalesFunnelVisualization({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract AIInsightsPanel from components\n  const AIInsightsPanel = components?.AIInsightsPanel;\n  \n  if (!AIInsightsPanel) {\n    console.warn(''AIInsightsPanel component not available'');\n  }\n\n  const [deals, setDeals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedStage, setSelectedStage] = useState(null);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || ''count'');\n  const [timeFilter, setTimeFilter] = useState(savedUserSettings?.timeFilter || ''quarter'');\n  const [startDate, setStartDate] = useState(savedUserSettings?.startDate || null);\n  const [endDate, setEndDate] = useState(savedUserSettings?.endDate || null);\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n  \n  // AI Insights state\n  const [aiInsights, setAiInsights] = useState(null);\n  const [loadingInsights, setLoadingInsights] = useState(false);\n  const [insightsError, setInsightsError] = useState(null);\n\n  // Load sub-components from registry\n  const FunnelChart = components[''SalesFunnelChart''];\n  const StagePanel = components[''SalesFunnelStagePanel''];\n\n  // Define pipeline stages in order\n  const pipelineStages = [\n    { name: ''Lead'', color: ''#3B82F6'' },\n    { name: ''Qualified'', color: ''#6366F1'' },\n    { name: ''Proposal'', color: ''#8B5CF6'' },\n    { name: ''Negotiation'', color: ''#A855F7'' },\n    { name: ''Closed Won'', color: ''#10B981'' },\n    { name: ''Closed Lost'', color: ''#EF4444'' }\n  ];\n\n  useEffect(() => {\n    loadDeals();\n  }, [timeFilter, startDate, endDate]);\n\n  const loadDeals = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const dateFilter = getDateFilter();\n      const result = await utilities.rv.RunView({\n        EntityName: ''Deals'',\n        ExtraFilter: dateFilter,\n        OrderBy: ''CloseDate DESC''\n      });\n\n      if (result.Success) {\n        setDeals(result.Results || []);\n      } else {\n        setError(result.ErrorMessage || ''Failed to load deals'');\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDateFilter = () => {\n    // If custom dates are set, use them\n    if (startDate && endDate) {\n      return `CloseDate >= ''$' + '{startDate}'' AND CloseDate <= ''$' + '{endDate}''`;\n    }\n    \n    // Otherwise use preset filter\n    const now = new Date();\n    let filterStart;\n    \n    switch (timeFilter) {\n      case ''month'':\n        filterStart = new Date(now);\n        filterStart.setMonth(now.getMonth() - 1);\n        break;\n      case ''quarter'':\n        filterStart = new Date(now);\n        filterStart.setMonth(now.getMonth() - 3);\n        break;\n      case ''year'':\n        filterStart = new Date(now);\n        filterStart.setFullYear(now.getFullYear() - 1);\n        break;\n      case ''all'':\n        return '''';\n      default:\n        return '''';\n    }\n    \n    return filterStart ? `CloseDate >= ''$' + '{filterStart.toISOString().split(''T'')[0]}''` : '''';\n  };\n  \n  const handleDateRangeChange = (start, end) => {\n    setStartDate(start);\n    setEndDate(end);\n    setTimeFilter(''custom'');\n    if (onSaveUserSettings) {\n      onSaveUserSettings({ \n        ...savedUserSettings, \n        startDate: start, \n        endDate: end,\n        timeFilter: ''custom''\n      });\n    }\n  };\n  \n  const handlePresetChange = (preset) => {\n    setTimeFilter(preset);\n    setStartDate(null);\n    setEndDate(null);\n    if (onSaveUserSettings) {\n      onSaveUserSettings({ \n        ...savedUserSettings, \n        timeFilter: preset,\n        startDate: null,\n        endDate: null\n      });\n    }\n  };\n\n  const calculateFunnelData = () => {\n    const funnelData = [];\n    const closedLost = { count: 0, value: 0 };\n    \n    // Calculate metrics for each stage\n    pipelineStages.forEach((stage, index) => {\n      let stageDeals;\n      \n      if (stage.name === ''Closed Lost'') {\n        stageDeals = deals.filter(d => d.Stage === ''Closed Lost'');\n        closedLost.count = stageDeals.length;\n        closedLost.value = stageDeals.reduce((sum, d) => sum + (d.Amount || 0), 0);\n      } else if (stage.name === ''Closed Won'') {\n        stageDeals = deals.filter(d => d.Stage === ''Closed Won'');\n      } else {\n        // For other stages, include all deals at or after this stage (except closed lost)\n        stageDeals = deals.filter(d => {\n          if (d.Stage === ''Closed Lost'') return false;\n          const dealStageIndex = pipelineStages.findIndex(s => s.name === d.Stage);\n          return dealStageIndex >= index;\n        });\n      }\n      \n      if (stage.name !== ''Closed Lost'') {\n        const totalValue = stageDeals.reduce((sum, d) => sum + (d.Amount || 0), 0);\n        const prevStageCount = index > 0 ? funnelData[index - 1].count : 0;\n        const conversionRate = prevStageCount > 0 ? (stageDeals.length / prevStageCount) * 100 : 100;\n        \n        funnelData.push({\n          stage: stage.name,\n          count: stageDeals.length,\n          value: totalValue,\n          color: stage.color,\n          width: Math.max(30, 100 - (index * 15)), // Visual width for funnel effect\n          conversionRate,\n          deals: stageDeals\n        });\n      }\n    });\n    \n    return { funnelData, closedLost };\n  };\n\n  const handleStageClick = (stageData) => {\n    setSelectedStage({\n      ...stageData,\n      title: `$' + '{stageData.stage} Stage`\n    });\n    setIsPanelOpen(true);\n  };\n\n  const formatCurrency = (amount) => {\n    if (amount >= 1000000) {\n      return `$$' + '{(amount / 1000000).toFixed(1)}M`;\n    } else if (amount >= 1000) {\n      return `$$' + '{(amount / 1000).toFixed(0)}K`;\n    }\n    return `$$' + '{amount.toFixed(0)}`;\n  };\n\n  const formatNumber = (num) => {\n    if (num >= 1000000) return `$' + '{(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `$' + '{(num / 1000).toFixed(0)}K`;\n    return num.toString();\n  };\n  \n  // Format insights text using marked library for proper markdown rendering\n\n  const generateAIInsights = async () => {\n    setLoadingInsights(true);\n    setInsightsError(null);\n    \n    try {\n      const { funnelData, closedLost } = calculateFunnelData();\n      const totalDeals = deals.length;\n      const totalValue = deals.reduce((sum, d) => sum + (d.Amount || 0), 0);\n      const avgDealSize = totalDeals > 0 ? totalValue / totalDeals : 0;\n      const winRate = totalDeals > 0 ? \n        (deals.filter(d => d.Stage === ''Closed Won'').length / totalDeals * 100) : 0;\n      \n      const prompt = `Analyze this sales funnel data and provide insights:\n\nTime Filter: $' + '{timeFilter}$' + '{startDate && endDate ? ` ($' + '{startDate} to $' + '{endDate})` : ''''}\nTotal Deals: $' + '{totalDeals}\nTotal Value: $' + '{formatCurrency(totalValue)}\nWin Rate: $' + '{winRate.toFixed(1)}%\nAverage Deal Size: $' + '{formatCurrency(avgDealSize)}\n\nFunnel Stage Breakdown:\n$' + '{funnelData.map(stage => `$' + '{stage.stage}: $' + '{stage.count} deals ($' + '{formatCurrency(stage.value)}) - $' + '{stage.conversionRate.toFixed(1)}% conversion`).join(''\\n'')}\n\nClosed Lost: $' + '{closedLost.count} deals ($' + '{formatCurrency(closedLost.value)})\n\nConversion Analysis:\n$' + '{funnelData.map((stage, index) => {\n  if (index === 0) return `$' + '{stage.stage}: Entry point`;\n  const prevStage = funnelData[index - 1];\n  const dropoff = prevStage.count - stage.count;\n  const dropoffRate = prevStage.count > 0 ? (dropoff / prevStage.count * 100) : 0;\n  return `$' + '{prevStage.stage} → $' + '{stage.stage}: $' + '{dropoff} deals lost ($' + '{dropoffRate.toFixed(1)}% drop-off)`;\n}).join(''\\n'')}\n\nProvide:\n1. Sales funnel performance analysis and trends\n2. Conversion rate analysis between stages\n3. Identification of bottlenecks and drop-off points\n4. Win rate and deal velocity insights\n5. Specific recommendations to improve conversion rates\n6. Strategies to reduce drop-offs at critical stages\n7. Deal size and value optimization opportunities\n\nFocus on actionable recommendations to improve sales performance and funnel efficiency.`;\n      \n      const result = await utilities.ai.ExecutePrompt({\n        systemPrompt: ''You are an expert sales analyst with deep knowledge of sales funnels, conversion optimization, and revenue growth strategies. Provide clear, actionable insights with specific recommendations. Format your response in clear markdown.'',\n        messages: prompt,\n        preferredModels: [''GPT-OSS-120B'', ''Qwen3 32B''],\n        modelPower: ''high'',\n        temperature: 0.7,\n        maxTokens: 1500\n      });\n      \n      if (result?.success && result?.result) {\n        setAiInsights(result.result);\n      } else {\n        setInsightsError(''Failed to generate insights. Please try again.'');\n      }\n    } catch (error) {\n      setInsightsError(error.message || ''Failed to generate AI insights'');\n    } finally {\n      setLoadingInsights(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#6B7280'' }}>Loading sales funnel data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: ''40px'', textAlign: ''center'' }}>\n        <div style={{ fontSize: ''18px'', color: ''#EF4444'' }}>Error: {error}</div>\n      </div>\n    );\n  }\n\n  const { funnelData, closedLost } = calculateFunnelData();\n  const totalDeals = deals.length;\n  const totalValue = deals.reduce((sum, d) => sum + (d.Amount || 0), 0);\n  const avgDealSize = totalDeals > 0 ? totalValue / totalDeals : 0;\n  const winRate = totalDeals > 0 ? \n    (deals.filter(d => d.Stage === ''Closed Won'').length / totalDeals * 100) : 0;\n\n  return (\n    <div style={{ display: ''flex'', flexDirection: ''column'', height: ''100%'', backgroundColor: ''#F3F4F6'' }}>\n      <style>{`\n        @keyframes fadeInUp {\n          from { \n            opacity: 0;\n            transform: translateY(20px);\n          }\n          to { \n            opacity: 1;\n            transform: translateY(0);\n          }\n        }\n        @keyframes fadeIn {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n      `}</style>\n      <style>{`\n        .ai-insights-content h1, .ai-insights-content h2, .ai-insights-content h3 {\n          margin-top: 16px;\n          margin-bottom: 8px;\n          color: #111827;\n        }\n        .ai-insights-content h1 { font-size: 1.5em; }\n        .ai-insights-content h2 { font-size: 1.3em; }\n        .ai-insights-content h3 { font-size: 1.1em; }\n        .ai-insights-content p {\n          margin: 8px 0;\n          line-height: 1.6;\n          color: #374151;\n        }\n        .ai-insights-content ul, .ai-insights-content ol {\n          margin: 8px 0;\n          padding-left: 24px;\n        }\n        .ai-insights-content li {\n          margin: 4px 0;\n          color: #374151;\n        }\n        .ai-insights-content strong {\n          color: #111827;\n          font-weight: 600;\n        }\n        .ai-insights-content code {\n          background: #F3F4F6;\n          padding: 2px 6px;\n          border-radius: 3px;\n          font-size: 0.9em;\n        }\n        .ai-insights-content blockquote {\n          border-left: 4px solid #10B981;\n          padding-left: 16px;\n          margin: 12px 0;\n          color: #4B5563;\n        }\n      `}</style>\n      \n      <div style={{ padding: ''20px'', borderBottom: ''1px solid #E5E7EB'', backgroundColor: ''white'' }}>\n        <div style={{ marginBottom: ''16px'' }}>\n          <h2 style={{ margin: 0, fontSize: ''24px'', fontWeight: ''bold'' }}>Sales Funnel</h2>\n        </div>\n        \n        <div style={{ display: ''flex'', gap: ''8px'', alignItems: ''center'', flexWrap: ''wrap'' }}>\n          <select\n            value={timeFilter}\n            onChange={(e) => handlePresetChange(e.target.value)}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px''\n            }}\n          >\n            <option value=\"month\">Last Month</option>\n            <option value=\"quarter\">Last Quarter</option>\n            <option value=\"year\">Last Year</option>\n            <option value=\"all\">All Time</option>\n            <option value=\"custom\">Custom Range</option>\n          </select>\n          \n          {timeFilter === ''custom'' && (\n            <>\n              <input\n                type=\"date\"\n                value={startDate || ''''}\n                onChange={(e) => handleDateRangeChange(e.target.value, endDate)}\n                style={{\n                  padding: ''6px 12px'',\n                  border: ''1px solid #D1D5DB'',\n                  borderRadius: ''6px''\n                }}\n              />\n              <span>to</span>\n              <input\n                type=\"date\"\n                value={endDate || ''''}\n                onChange={(e) => handleDateRangeChange(startDate, e.target.value)}\n                style={{\n                  padding: ''6px 12px'',\n                  border: ''1px solid #D1D5DB'',\n                  borderRadius: ''6px''\n                }}\n              />\n            </>\n          )}\n          \n          <button\n            onClick={() => {\n              setViewMode(viewMode === ''count'' ? ''value'' : ''count'');\n              onSaveUserSettings({ ...savedUserSettings, viewMode: viewMode === ''count'' ? ''value'' : ''count'' });\n            }}\n            style={{\n              padding: ''6px 12px'',\n              backgroundColor: ''#3B82F6'',\n              color: ''white'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer''\n            }}\n          >\n            Show {viewMode === ''count'' ? ''Values'' : ''Counts''}\n          </button>\n          \n          {/* AI Insights Button */}\n          <button\n            onClick={generateAIInsights}\n            disabled={loadingInsights || loading}\n            style={{\n              padding: ''6px 12px'',\n              backgroundColor: ''#10B981'',\n              color: ''white'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: loadingInsights || loading ? ''not-allowed'' : ''pointer'',\n              display: ''flex'',\n              alignItems: ''center'',\n              gap: ''8px'',\n              opacity: loadingInsights || loading ? 0.6 : 1\n            }}\n          >\n            <i className={`fa-solid fa-$' + '{loadingInsights ? ''spinner fa-spin'' : ''wand-magic-sparkles''}`}></i>\n            {loadingInsights ? ''Analyzing...'' : ''Get AI Insights''}\n          </button>\n        </div>\n        \n        <div style={{ marginTop: ''16px'', display: ''grid'', gridTemplateColumns: ''repeat(4, 1fr)'', gap: ''12px'' }}>\n          <div style={{ padding: ''12px'', backgroundColor: ''#F9FAFB'', borderRadius: ''8px'' }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Total Deals</div>\n            <div style={{ fontSize: ''20px'', fontWeight: ''bold'' }}>\n              {totalDeals}\n            </div>\n          </div>\n          <div style={{ padding: ''12px'', backgroundColor: ''#F9FAFB'', borderRadius: ''8px'' }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Total Value</div>\n            <div style={{ fontSize: ''20px'', fontWeight: ''bold'' }}>\n              {formatCurrency(totalValue)}\n            </div>\n          </div>\n          <div style={{ padding: ''12px'', backgroundColor: ''#F9FAFB'', borderRadius: ''8px'' }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Win Rate</div>\n            <div style={{ fontSize: ''20px'', fontWeight: ''bold'' }}>\n              {winRate.toFixed(1)}%\n            </div>\n          </div>\n          <div style={{ padding: ''12px'', backgroundColor: ''#F9FAFB'', borderRadius: ''8px'' }}>\n            <div style={{ fontSize: ''12px'', color: ''#6B7280'' }}>Avg Deal Size</div>\n            <div style={{ fontSize: ''20px'', fontWeight: ''bold'' }}>\n              {formatCurrency(avgDealSize)}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* AI Insights Panel - Outside header to preserve funnel width */}\n      <AIInsightsPanel\n        utilities={utilities}\n        styles={styles}\n        components={components}\n        callbacks={callbacks}\n        savedUserSettings={savedUserSettings?.aiInsights}\n        onSaveUserSettings={(settings) => onSaveUserSettings?.({\n          ...savedUserSettings,\n          aiInsights: settings\n        })}\n        insights={aiInsights}\n        loading={loadingInsights}\n        error={insightsError}\n        onGenerate={generateAIInsights}\n        title=\"Sales Funnel Insights\"\n        icon=\"fa-wand-magic-sparkles\"\n        iconColor={styles?.colors?.primary || ''#8B5CF6''}\n        position=\"top\"\n        onClose={() => {\n          setAiInsights(null);\n          setInsightsError(null);\n        }}\n      />\n      \n      {FunnelChart && (\n        <FunnelChart \n          funnelData={funnelData}\n          viewMode={viewMode}\n          onStageClick={handleStageClick}\n          closedLost={closedLost}\n          formatCurrency={formatCurrency}\n        />\n      )}\n      \n      {StagePanel && (\n        <StagePanel\n          isOpen={isPanelOpen}\n          stageData={selectedStage}\n          onClose={() => {\n            setIsPanelOpen(false);\n            setSelectedStage(null);\n          }}\n          components={components}\n          callbacks={callbacks}\n          formatCurrency={formatCurrency}\n        />\n      )}\n      \n    </div>\n  );\n}","functionalRequirements":"## Sales Funnel Visualization\n\n### Purpose\nVisualize the sales pipeline as an interactive funnel showing conversion rates and deal values at each stage.\n\n### Core Features\n- **Interactive Funnel Chart**: Visual representation of deal flow through stages\n- **Dual View Modes**: \n  - Count view: Number of deals at each stage\n  - Value view: Total deal value at each stage\n- **Conversion Metrics**: Show conversion rates between stages\n- **Time Period Filtering**: Filter by date ranges (month, quarter, year)\n- **Slide-out Details Panel**: Click stage to see deals list\n- **Card/List View Toggle**: For deals display\n- **Sorting & Filtering**: Sort by value, date, probability\n\n### Visual Design\n- Animated funnel segments using Framer Motion\n- Color-coded stages with gradients\n- Percentage labels and value annotations\n- Smooth transitions between views\n- Side panel slides in from right","dataRequirements":{"mode":"views","entities":[{"name":"Deals","displayFields":["DealName","Stage","Amount","CloseDate","Probability","AccountID"],"filterFields":["Stage","CloseDate"],"sortFields":["Amount","CloseDate","Probability"],"fields":[{"name":"ID","type":"string","description":"Unique identifier"},{"name":"DealName","type":"string","description":"Name of the deal"},{"name":"Stage","type":"string","description":"Current stage in pipeline"},{"name":"Amount","type":"number","description":"Deal value"},{"name":"CloseDate","type":"date","description":"Expected close date"},{"name":"Probability","type":"number","description":"Win probability percentage"}]}]},"technicalDesign":"## Implementation Details\n\n### Component Architecture\n- Main component: SalesFunnelVisualization\n- Sub-components:\n  - FunnelChart: Renders the funnel visualization\n  - StageDetailsPanel: Slide-out panel for stage details\n  - DealCard: Card view for individual deals\n  - FilterBar: Time period and view mode controls\n\n### Animation Strategy\n- Framer Motion for smooth transitions\n- Stagger animations for funnel segments\n- Spring physics for panel slide\n- Opacity transitions for view changes\n\n### State Management\n- deals: Array of all deals\n- selectedStage: Currently selected stage\n- viewMode: ''count'' or ''value''\n- displayMode: ''cards'' or ''list''\n- timeFilter: Selected time period\n- sortBy: Current sort field\n- filterBy: Active filters","properties":[],"events":[{"name":"OpenEntityRecord","description":"Open deal record in explorer"}],"dependencies":[{"name":"SalesFunnelChart","namespace":"CRM/Analytics","type":"Chart","location":"embedded","code":"function SalesFunnelChart({ funnelData, viewMode, onStageClick, closedLost, formatCurrency }) {\n  return (\n    <div style={{ \n      flex: 1, \n      display: ''flex'', \n      justifyContent: ''center'',\n      alignItems: ''center'',\n      padding: ''40px 20px'',\n      width: ''100%'',\n      overflow: ''hidden''\n    }}>\n      <div style={{\n        display: ''flex'',\n        flexDirection: ''column'',\n        alignItems: ''center'',\n        width: ''650px'',\n        maxWidth: ''90%''\n      }}>\n      {funnelData.map((stage, index) => (\n        <div\n          key={stage.stage}\n          className=\"funnel-stage\"\n          style={{\n            width: `$' + '{stage.width}%`,\n            marginBottom: ''4px'',\n            position: ''relative'',\n            cursor: ''pointer'',\n            opacity: 0,\n            transform: ''translateY(20px)'',\n            animation: `fadeInUp 0.5s $' + '{index * 0.1}s forwards`,\n            transition: ''transform 0.2s ease''\n          }}\n          onClick={() => onStageClick(stage)}\n          onMouseEnter={(e) => e.currentTarget.style.transform = ''scale(1.02)''}\n          onMouseLeave={(e) => e.currentTarget.style.transform = ''scale(1)''}\n          onMouseDown={(e) => e.currentTarget.style.transform = ''scale(0.98)''}\n          onMouseUp={(e) => e.currentTarget.style.transform = ''scale(1.02)''}\n        >\n          <div\n            style={{\n              background: `linear-gradient(135deg, $' + '{stage.color}dd, $' + '{stage.color}99)`,\n              padding: ''20px'',\n              borderRadius: ''8px'',\n              boxShadow: ''0 2px 8px rgba(0,0,0,0.1)'',\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''center'',\n              minHeight: ''60px''\n            }}\n          >\n            <div style={{ color: ''white'' }}>\n              <div style={{ fontSize: ''14px'', opacity: 0.9 }}>{stage.stage}</div>\n              <div style={{ fontSize: ''20px'', fontWeight: ''bold'' }}>\n                {viewMode === ''count'' ? stage.count : formatCurrency(stage.value)}\n              </div>\n            </div>\n            {index > 0 && (\n              <div style={{ color: ''white'', textAlign: ''right'' }}>\n                <div style={{ fontSize: ''12px'', opacity: 0.8 }}>Conversion</div>\n                <div style={{ fontSize: ''16px'', fontWeight: ''bold'' }}>\n                  {stage.conversionRate.toFixed(1)}%\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      ))}\n      \n      {/* Lost deals indicator */}\n      {closedLost.count > 0 && (\n        <div\n          style={{\n            marginTop: ''20px'',\n            padding: ''12px 20px'',\n            backgroundColor: ''#FEE2E2'',\n            borderRadius: ''8px'',\n            color: ''#991B1B'',\n            opacity: 0,\n            animation: ''fadeIn 0.5s 0.5s forwards''\n          }}\n        >\n          <div style={{ fontSize: ''14px'' }}>Lost Deals</div>\n          <div style={{ fontSize: ''18px'', fontWeight: ''bold'' }}>\n            {closedLost.count} deals ({formatCurrency(closedLost.value)})\n          </div>\n        </div>\n      )}\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Sales Funnel Chart Sub-Component\n\n### Purpose\nDisplay the visual funnel representation of deal stages with interactive elements.\n\n### Core Features\n- **Funnel Visualization**: Animated funnel stages\n- **Stage Metrics**: Count and value per stage\n- **Conversion Rates**: Between stages\n- **Interactive Stages**: Click to drill down\n- **View Mode Toggle**: Count vs value display","dataRequirements":{"mode":"views","description":"Visualizes sales funnel with deal stages","entities":[{"name":"Deals","description":"Deal records for funnel visualization","displayFields":["ID","Name","Amount","Stage","Probability"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Funnel stage data passed via props"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Visual Design\n- Animated funnel with gradient colors\n- Responsive width based on data\n- Hover effects and transitions\n- Lost deals indicator\n\n### Interaction\n- Click handlers for drill-down\n- Smooth animations on load","properties":[{"name":"funnelData","type":"Array<{stage: string, count: number, value: number, percentage: number, color: string}>","description":"Array of stage data with metrics","required":true},{"name":"viewMode","type":"''count'' | ''value''","description":"Display mode: ''count'' or ''value''","required":true},{"name":"onStageClick","type":"(stage: string) => void","description":"Handler for stage click events","required":true},{"name":"closedLost","type":"{count: number, value: number}","description":"Closed lost deals data","required":true}],"events":[],"dependencies":[],"libraries":[]},{"name":"SalesFunnelStagePanel","namespace":"CRM/Analytics","type":"Panel","location":"embedded","code":"function SalesFunnelStagePanel({ isOpen, stageData, onClose, components, callbacks, formatCurrency }) {\n  const [localSortBy, setLocalSortBy] = useState(''Amount'');\n  const [localFilterText, setLocalFilterText] = useState('''');\n  const [localDisplayMode, setLocalDisplayMode] = useState(''cards'');\n  \n  if (!isOpen || !stageData) return null;\n  \n  const DealCard = components[''SalesFunnelDealCard''];\n  const DealList = components[''SalesFunnelDealList''];\n  \n  const filteredDeals = stageData.deals.filter(deal => \n    !localFilterText || deal.DealName?.toLowerCase().includes(localFilterText.toLowerCase())\n  );\n  \n  const sortedDeals = [...filteredDeals].sort((a, b) => {\n    switch (localSortBy) {\n      case ''Amount'':\n        return (b.Amount || 0) - (a.Amount || 0);\n      case ''CloseDate'':\n        return new Date(b.CloseDate || 0) - new Date(a.CloseDate || 0);\n      case ''Probability'':\n        return (b.Probability || 0) - (a.Probability || 0);\n      default:\n        return 0;\n    }\n  });\n  \n  return (\n    <div\n      style={{\n        position: ''fixed'',\n        right: isOpen ? 0 : ''-500px'',\n        top: ''75px'',\n        bottom: 0,\n        width: ''500px'',\n        backgroundColor: ''white'',\n        boxShadow: ''-4px 0 20px rgba(0,0,0,0.1)'',\n        zIndex: 1000,\n        display: ''flex'',\n        flexDirection: ''column'',\n        transition: ''right 0.3s ease''\n      }}\n    >\n      <div style={{\n        padding: ''20px'',\n        borderBottom: ''1px solid #E5E7EB'',\n        backgroundColor: stageData.color || ''#3B82F6'',\n        color: ''white''\n      }}>\n        <div style={{ display: ''flex'', justifyContent: ''space-between'', alignItems: ''center'' }}>\n          <h3 style={{ margin: 0, fontSize: ''20px'' }}>{stageData.title || stageData.stage}</h3>\n          <button\n            onClick={onClose}\n            style={{\n              background: ''none'',\n              border: ''none'',\n              color: ''white'',\n              fontSize: ''24px'',\n              cursor: ''pointer''\n            }}\n          >\n            ×\n          </button>\n        </div>\n        <div style={{ marginTop: ''8px'', fontSize: ''14px'', opacity: 0.9 }}>\n          {stageData.deals.length} deals • {formatCurrency(stageData.deals.reduce((sum, d) => sum + (d.Amount || 0), 0))}\n        </div>\n      </div>\n      \n      <div style={{ padding: ''16px'', borderBottom: ''1px solid #E5E7EB'' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Filter deals...\"\n          value={localFilterText}\n          onChange={(e) => setLocalFilterText(e.target.value)}\n          style={{\n            width: ''100%'',\n            padding: ''8px 12px'',\n            border: ''1px solid #D1D5DB'',\n            borderRadius: ''6px'',\n            marginBottom: ''12px''\n          }}\n        />\n        <div style={{ display: ''flex'', gap: ''8px'' }}>\n          <button\n            onClick={() => setLocalDisplayMode(''cards'')}\n            style={{\n              padding: ''6px 12px'',\n              backgroundColor: localDisplayMode === ''cards'' ? ''#3B82F6'' : ''#F3F4F6'',\n              color: localDisplayMode === ''cards'' ? ''white'' : ''#374151'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer''\n            }}\n          >\n            Cards\n          </button>\n          <button\n            onClick={() => setLocalDisplayMode(''list'')}\n            style={{\n              padding: ''6px 12px'',\n              backgroundColor: localDisplayMode === ''list'' ? ''#3B82F6'' : ''#F3F4F6'',\n              color: localDisplayMode === ''list'' ? ''white'' : ''#374151'',\n              border: ''none'',\n              borderRadius: ''6px'',\n              cursor: ''pointer''\n            }}\n          >\n            List\n          </button>\n          <select\n            value={localSortBy}\n            onChange={(e) => setLocalSortBy(e.target.value)}\n            style={{\n              padding: ''6px 12px'',\n              border: ''1px solid #D1D5DB'',\n              borderRadius: ''6px'',\n              flex: 1\n            }}\n          >\n            <option value=\"Amount\">Sort by Amount</option>\n            <option value=\"CloseDate\">Sort by Close Date</option>\n            <option value=\"Probability\">Sort by Probability</option>\n          </select>\n        </div>\n      </div>\n      \n      <div style={{ flex: 1, overflowY: ''auto'', padding: ''16px'' }}>\n        {localDisplayMode === ''cards'' ? (\n          <div style={{ display: ''grid'', gap: ''12px'' }}>\n            {sortedDeals.map(deal => (\n              <DealCard \n                key={deal.ID} \n                deal={deal} \n                callbacks={callbacks}\n                formatCurrency={formatCurrency}\n              />\n            ))}\n          </div>\n        ) : (\n          <DealList \n            deals={sortedDeals} \n            callbacks={callbacks}\n            formatCurrency={formatCurrency}\n          />\n        )}\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Stage Details Panel Sub-Component\n\n### Purpose\nSlide-out panel showing detailed information for a selected stage.\n\n### Core Features\n- **Stage Overview**: Count, value, conversion metrics\n- **Deal List**: Filtered deals for the stage\n- **Search & Filter**: Local search within stage\n- **Sort Options**: Multiple sort criteria\n- **View Modes**: Card or list display","dataRequirements":{"mode":"views","description":"Shows detailed information for a selected stage","entities":[{"name":"Deals","description":"Deal records for stage details","displayFields":["ID","Name","Amount","Probability","Stage","CloseDate","Account"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Stage-filtered deal display"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Panel Behavior\n- Fixed positioning with slide animation\n- Local state for search and sort\n- Uses DealCard and DealList sub-components","properties":[{"name":"isOpen","type":"boolean","description":"Panel visibility state","required":true},{"name":"stageData","type":"{stage: string, count: number, value: number, deals: Array<any>}","description":"Selected stage data including deals","required":false},{"name":"onClose","type":"() => void","description":"Handler to close the panel","required":true},{"name":"formatCurrency","type":"(value: number) => string","description":"Currency formatting function","required":true}],"events":[],"dependencies":[{"name":"SalesFunnelDealCard","namespace":"CRM/Analytics","type":"Card","location":"embedded","code":"function SalesFunnelDealCard({ deal, callbacks, formatCurrency }) {\n  return (\n    <div\n      style={{\n        padding: ''16px'',\n        backgroundColor: ''#F9FAFB'',\n        borderRadius: ''8px'',\n        border: ''1px solid #E5E7EB'',\n        cursor: ''pointer'',\n        transition: ''all 0.2s''\n      }}\n      onClick={() => {\n        if (callbacks?.OpenEntityRecord) {\n          callbacks.OpenEntityRecord(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }]);\n        }\n      }}\n      onMouseEnter={(e) => {\n        e.currentTarget.style.backgroundColor = ''#F3F4F6'';\n        e.currentTarget.style.transform = ''translateY(-2px)'';\n      }}\n      onMouseLeave={(e) => {\n        e.currentTarget.style.backgroundColor = ''#F9FAFB'';\n        e.currentTarget.style.transform = ''translateY(0)'';\n      }}\n    >\n      <div style={{ display: ''flex'', justifyContent: ''space-between'', marginBottom: ''8px'' }}>\n        <div style={{ fontWeight: ''bold'', flex: 1 }}>{deal.DealName}</div>\n        <div style={{ display: ''flex'', alignItems: ''center'', gap: ''8px'' }}>\n          <div style={{ fontWeight: ''bold'', color: ''#059669'' }}>\n            {formatCurrency(deal.Amount)}\n          </div>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              if (callbacks?.OpenEntityRecord) {\n                callbacks.OpenEntityRecord(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }]);\n              }\n            }}\n            style={{\n              background: ''none'',\n              border: ''none'',\n              color: ''#6B7280'',\n              cursor: ''pointer'',\n              padding: ''2px'',\n              fontSize: ''14px''\n            }}\n            title=\"Open in Explorer\"\n          >\n            <i className=\"fa-solid fa-up-right-from-square\"></i>\n          </button>\n        </div>\n      </div>\n      <div style={{ fontSize: ''14px'', color: ''#6B7280'', marginBottom: ''4px'' }}>\n        {deal.AccountName || ''No Account''}\n      </div>\n      <div style={{ display: ''flex'', justifyContent: ''space-between'', fontSize: ''12px'', color: ''#9CA3AF'' }}>\n        <span>Close: {deal.CloseDate ? new Date(deal.CloseDate).toLocaleDateString() : ''TBD''}</span>\n        <span>{deal.Probability}% probability</span>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Deal Card Sub-Component\n\n### Purpose\nDisplay individual deal information in a card format.\n\n### Core Features\n- **Deal Information**: Name, account, amount\n- **Visual Indicators**: Stage colors and status\n- **Interactive Elements**: Click to open deal\n- **Responsive Layout**: Adapts to container","dataRequirements":{"mode":"views","description":"Displays individual deal information","entities":[{"name":"Deals","description":"Deal entity data","displayFields":["ID","Name","Amount","Stage","AccountID","Account"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Individual deal card display"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Card Layout\n- Flexbox for responsive design\n- Hover effects for interactivity\n- Click handlers for navigation","properties":[{"name":"deal","type":"{ID: string, Name: string, Amount: number, Stage: string, Account: string}","description":"Deal entity data","required":true},{"name":"formatCurrency","type":"(value: number) => string","description":"Currency formatting function","required":true}],"events":[],"dependencies":[],"libraries":[]},{"name":"SalesFunnelDealList","namespace":"CRM/Analytics","type":"List","location":"embedded","code":"function SalesFunnelDealList({ deals, callbacks, formatCurrency }) {\n  return (\n    <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n      <thead>\n        <tr style={{ borderBottom: ''1px solid #E5E7EB'' }}>\n          <th style={{ padding: ''8px'', textAlign: ''left'', fontSize: ''12px'', color: ''#6B7280'' }}>Deal</th>\n          <th style={{ padding: ''8px'', textAlign: ''right'', fontSize: ''12px'', color: ''#6B7280'' }}>Amount</th>\n          <th style={{ padding: ''8px'', textAlign: ''right'', fontSize: ''12px'', color: ''#6B7280'' }}>Prob</th>\n          <th style={{ padding: ''8px'', width: ''30px'' }}></th>\n        </tr>\n      </thead>\n      <tbody>\n        {deals.map((deal, index) => (\n          <tr\n            key={deal.ID || index}\n            style={{\n              borderBottom: ''1px solid #F3F4F6'',\n              cursor: ''pointer'',\n              transition: ''background-color 0.2s''\n            }}\n            onClick={() => {\n              if (callbacks?.OpenEntityRecord) {\n                callbacks.OpenEntityRecord(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }]);\n              }\n            }}\n            onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F9FAFB''}\n            onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}\n          >\n            <td style={{ padding: ''12px 8px'' }}>\n              <div style={{ fontWeight: ''500'' }}>{deal.DealName}</div>\n              <div style={{ fontSize: ''12px'', color: ''#9CA3AF'' }}>{deal.AccountName}</div>\n            </td>\n            <td style={{ padding: ''12px 8px'', textAlign: ''right'', fontWeight: ''500'' }}>\n              {formatCurrency(deal.Amount)}\n            </td>\n            <td style={{ padding: ''12px 8px'', textAlign: ''right'', fontSize: ''14px'' }}>\n              {deal.Probability}%\n            </td>\n            <td style={{ padding: ''12px 8px'', textAlign: ''center'' }}>\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  if (callbacks?.OpenEntityRecord) {\n                    callbacks.OpenEntityRecord(''Deals'', [{ FieldName: ''ID'', Value: deal.ID }]);\n                  }\n                }}\n                style={{\n                  background: ''none'',\n                  border: ''none'',\n                  color: ''#6B7280'',\n                  cursor: ''pointer'',\n                  padding: ''2px'',\n                  fontSize: ''14px''\n                }}\n                title=\"Open in Explorer\"\n              >\n                <i className=\"fa-solid fa-up-right-from-square\"></i>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}","functionalRequirements":"## Deal List Sub-Component\n\n### Purpose\nDisplay deals in a compact table format.\n\n### Core Features\n- **Tabular Display**: Compact list view\n- **Key Metrics**: Amount, probability, dates\n- **Interactive Rows**: Click to open deals\n- **Responsive Design**: Fits container width","dataRequirements":{"mode":"views","description":"Displays deals in a compact table format","entities":[{"name":"Deals","description":"Deal records for list display","displayFields":["ID","Name","Amount","Probability","CloseDate","Account"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Deal list display"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Table Structure\n- Responsive table layout\n- Hover effects on rows\n- Optimized for scanning","properties":[{"name":"deals","type":"Array<{ID: string, Name: string, Amount: number, Probability: number, CloseDate: string, Account: string}>","description":"Array of deal entities","required":true},{"name":"formatCurrency","type":"(value: number) => string","description":"Currency formatting function","required":true}],"events":[],"dependencies":[],"libraries":[]}],"libraries":[]},{"name":"AIInsightsPanel","location":"registry","namespace":"Generic/UI/AI","version":"^1.0.0"}],"libraries":[{"name":"dayjs","version":"^1.11.10","globalVariable":"dayjs"}]}'
SET
  @FunctionalRequirements_868babd5 = N'## Sales Funnel Visualization

### Purpose
Visualize the sales pipeline as an interactive funnel showing conversion rates and deal values at each stage.

### Core Features
- **Interactive Funnel Chart**: Visual representation of deal flow through stages
- **Dual View Modes**: 
  - Count view: Number of deals at each stage
  - Value view: Total deal value at each stage
- **Conversion Metrics**: Show conversion rates between stages
- **Time Period Filtering**: Filter by date ranges (month, quarter, year)
- **Slide-out Details Panel**: Click stage to see deals list
- **Card/List View Toggle**: For deals display
- **Sorting & Filtering**: Sort by value, date, probability

### Visual Design
- Animated funnel segments using Framer Motion
- Color-coded stages with gradients
- Percentage labels and value annotations
- Smooth transitions between views
- Side panel slides in from right'
SET
  @TechnicalDesign_868babd5 = N'## Implementation Details

### Component Architecture
- Main component: SalesFunnelVisualization
- Sub-components:
  - FunnelChart: Renders the funnel visualization
  - StageDetailsPanel: Slide-out panel for stage details
  - DealCard: Card view for individual deals
  - FilterBar: Time period and view mode controls

### Animation Strategy
- Framer Motion for smooth transitions
- Stagger animations for funnel segments
- Spring physics for panel slide
- Opacity transitions for view changes

### State Management
- deals: Array of all deals
- selectedStage: Currently selected stage
- viewMode: ''count'' or ''value''
- displayMode: ''cards'' or ''list''
- timeFilter: Selected time period
- sortBy: Current sort field
- filterBy: Active filters'
SET
  @FunctionalRequirementsVector_868babd5 = N'[-0.002227198565378785,-0.014755385927855968,-0.04086282104253769,-0.08990203589200974,0.004513751715421677,0.010710869915783405,0.009932121261954308,0.00196011527441442,-0.08380730450153351,0.002506187418475747,-0.05731147900223732,0.012120639905333519,0.03435728698968887,0.1634455919265747,-0.04742829501628876,-0.10072588175535202,-0.03442169725894928,-0.014470158144831657,0.022299442440271378,0.025510013103485107,0.028247009962797165,-0.009473307989537716,-0.030685167759656906,-0.005632140673696995,-0.01863880455493927,-0.04124903678894043,-0.01860428974032402,0.0041253152303397655,0.00865900982171297,-0.11269388347864151,-0.006766557693481445,0.015242923982441425,0.00606179516762495,0.0005588745116256177,0.0000024247112833108986,-0.0025451770052313805,-0.016375690698623657,0.006818937137722969,-0.08455250412225723,0.01982937566936016,0.10454131662845612,-0.06141657382249832,0.02746761217713356,0.006262786686420441,0.003580376273021102,-0.0025197979994118214,-0.03546585142612457,0.06726017594337463,0.02292819134891033,-0.0183296836912632,0.005480462685227394,-0.040257930755615234,-0.023712407797574997,0.02039259672164917,-0.019032204523682594,0.025742096826434135,-0.02932191640138626,-0.025092838332057,0.009273188188672066,-0.03290583938360214,-0.02486109547317028,0.003912787884473801,0.025824157521128654,-0.037818554788827896,0.05272678658366203,0.026127923280000687,0.06640738993883133,-0.030584251508116722,-0.011957158334553242,-0.0031176938209682703,0.011986170895397663,0.01061915047466755,-0.0256364643573761,-0.0441398099064827,-0.004565965849906206,-0.05656983703374863,-0.039729055017232895,0.028592145070433617,0.018687309697270393,-0.009697525762021542,-0.1120934709906578,0.058068469166755676,-0.048702675849199295,-0.0381406806409359,-0.00019062665523961186,0.007147002499550581,0.0004058276826981455,-0.00999909546226263,-0.01833866350352764,-0.012499786913394928,0.08614328503608704,-0.007689306512475014,-0.012696731835603714,-0.02330482378602028,-0.0621289424598217,-0.027154749259352684,0.03329090029001236,0.030163725838065147,0.013965504243969917,-0.043085116893053055,-0.014336919412016869,0.005495448596775532,0.059408530592918396,0.018383774906396866,0.041655708104372025,-0.009843990206718445,0.01100478321313858,-0.008305791765451431,-0.05783351883292198,0.05911386385560036,0.016723021864891052,0.02953578531742096,-0.02187669649720192,-0.0011465977877378464,-0.05982203781604767,-0.0007549260626547039,-0.0668569952249527,-0.038835667073726654,-0.01321957167237997,0.01358355488628149,0.06023460626602173,0.023572053760290146,0.014966308139264584,0.04156384989619255,0.018481848761439323,0.06199343875050545,-0.0278541948646307,-0.033422261476516724,-0.01216962095350027,0.04039108753204346,0.0014632303500548005,0.005569311790168285,0.011305220425128937,-0.03502502664923668,-0.031465593725442886,0.011667548678815365,0.004622886423021555,0.03616156429052353,-0.02065560221672058,-0.01121990941464901,0.03768821805715561,0.018710458651185036,-0.017069000750780106,0.04292318969964981,0.021197833120822906,-0.015181131660938263,-0.02599860168993473,0.07959990203380585,0.023678777739405632,0.032048843801021576,0.002099326578900218,-0.0016645347932353616,0.024100814014673233,0.027508022263646126,0.0023541359696537256,-0.030918274074792862,-0.008840205147862434,-0.011723709292709827,0.03042571060359478,0.07775305956602097,-0.028188081458210945,-0.07671913504600525,0.04026293009519577,0.023485355079174042,-0.07555695623159409,0.02234397456049919,-0.0484994538128376,-0.027249842882156372,-0.05687330663204193,-0.03709916025400162,0.032759930938482285,-0.022651441395282745,-0.02608485519886017,0.016646910458803177,0.023302508518099785,-0.031992193311452866,0.1217246949672699,-0.07662104070186615,0.014275661669671535,0.03461107239127159,-0.008875103667378426,-0.13648273050785065,0.03306329995393753,0.012054973281919956,0.04581855237483978,-0.01240655966103077,-0.0828198790550232,0.021220503374934196,-0.013679597526788712,0.034497570246458054,-0.0018266383558511734,0.03426920250058174,-0.0416092611849308,0.01451361458748579,-0.02291691303253174,-0.0043862792663276196,-0.00512907188385725,-0.00908579956740141,0.03075365163385868,0.023605432361364365,-0.02791668474674225,0.021063894033432007,-0.04771954566240311,-0.013601160608232021,0.014858609065413475,0.04242527112364769,0.019409241154789925,-0.06915434449911118,-0.0888618603348732,0.013218913227319717,-0.00776949618011713,-0.0007079180795699358,-0.07674553990364075,0.02209603041410446,0.0038688655477017164,0.019472636282444,0.0006973319686949253,0.027333121746778488,-0.047962795943021774,-0.023366626352071762,-0.020486239343881607,0.0020810544956475496,0.028880193829536438,0.014929846860468388,0.1018635481595993,0.07401763647794724,0.00875886995345354,-0.013794239610433578,0.029527392238378525,0.002581480424851179,-0.020142093300819397,-0.0012572823325172067,0.046239014714956284,0.013354803435504436,0.0512603260576725,0.09414152055978775,0.050466980785131454,0.0710340067744255,-0.010891636833548546,0.02389528416097164,-0.01438035536557436,-0.09091245383024216,-0.023928478360176086,0.02426011487841606,0.041134756058454514,-0.03528853878378868,-0.04116465151309967,0.018663156777620316,0.036945048719644547,-0.015426629222929478,0.017254989594221115,0.007065156940370798,0.03337627649307251,-0.012494191527366638,-0.01434988435357809,0.023224735632538795,-0.07083961367607117,-0.005981779657304287,0.014012421481311321,0.0812499076128006,-0.009527641348540783,-0.028688332065939903,-0.04529203847050667,-0.042509544640779495,0.011292942799627781,-0.046218305826187134,0.05688153952360153,0.03360959142446518,-0.017594901844859123,0.024680765345692635,0.015523552894592285,0.03462960571050644,-0.029154911637306213,0.0063747079111635685,-0.03416290879249573,0.049663856625556946,-0.03863467276096344,0.028267255052924156,-0.02344275265932083,-0.027345504611730576,-0.0010085060494020581,-0.03074702061712742,0.023539315909147263,0.031147047877311707,-0.022454354912042618,0.010854070074856281,0.06280093640089035,-0.05179540812969208,-0.05117594078183174,-0.049913447350263596,0.041000496596097946,-0.023793036118149757,0.022612489759922028,0.016194259747862816,-0.04921894147992134,0.035097669810056686,0.0013303076848387718,0.01152263954281807,0.019490541890263557,-0.001840887009166181,-0.0015488435747101903,-0.04871643707156181,-0.012574461288750172,0.018093368038535118,-0.03396894410252571,0.04052310809493065,0.007169321179389954,-0.015219192951917648,0.036538951098918915,0.04264121502637863,0.016823936253786087,0.0024764344561845064,0.02300422452390194,-0.07182461023330688,-0.012562056072056293,0.013331204652786255,-0.003643817501142621,0.026586147025227547,0.005209529306739569,0.05007534474134445,0.009656512178480625,-0.009249276481568813,-0.022202620282769203,-0.012332616373896599,-0.045084148645401,0.01087717805057764,-0.03384222462773323,-0.032194584608078,-0.0770159587264061,0.006614317651838064,-0.009048297069966793,-0.04562825709581375,-0.024855442345142365,0.026445306837558746,0.022134389728307724,-0.023370424285531044,-0.007042146287858486,0.03329618647694588,-0.00639081746339798,-0.0303597841411829,-0.03850746527314186,0.0021877968683838844,-0.059227798134088516,-0.0481114499270916,0.028597336262464523,-0.003011515364050865,0.05609293654561043,0.005025817081332207,-0.1422884464263916,0.04167885333299637,0.032914064824581146,0.023740770295262337,0.0002094142691930756,-0.01209383923560381,0.02866196073591709,-0.009390609338879585,-0.033972665667533875,0.008624913170933723,0.0030971704982221127,-0.09304031729698181,0.029882006347179413,0.03572521731257439,-0.00008688748494023457,0.06801121681928635,-0.015073668211698532,-0.017307177186012268,0.022435981780290604,-0.008224107325077057,0.07577735930681229,0.0020942026749253273,0.027929220348596573,0.05829111114144325,0.011137319728732109,0.027718693017959595,-0.01504456251859665,-0.08805452287197113,0.01896706596016884,0.011235098354518414,0.024042490869760513,0.008763592690229416,0.0398784764111042,-0.02095378190279007,0.10752785205841064,-0.017497366294264793,0.0468159057199955,0.007938831113278866,0.019958142191171646,-0.019417796283960342,-0.034645840525627136,0.02605883590877056,0.017112959176301956,-0.000379802193492651,0.004561679903417826,-0.003162666456773877,-0.02527455799281597,0.03623608872294426,0.0341196209192276,0.01352132111787796,-0.005566739942878485,-0.0027109109796583652,-0.0007715524989180267,-0.01285416167229414,0.023439966142177582,-0.007903135381639004,0.03476035222411156,-0.07791858911514282,-0.004873093217611313,0.027564657852053642,-0.017851905897259712,-0.02082482911646366,-0.05578490346670151,-0.013523535802960396,0.014559037052094936,-0.0037839701399207115,0.02093845047056675,0.011365288868546486,0.01070457324385643,0.017931628972291946,0.024104107171297073,-0.0058927820064127445,-0.0021406570449471474,0.0292138010263443,0.02778584137558937,0.00492812180891633,0.004410180728882551,-0.025624070316553116,0.035663120448589325,-0.10906615108251572,-0.003266842570155859,0.0037851755041629076,-0.01508694514632225,0.040005408227443695,-0.044109512120485306,0.06006375700235367,-0.01287124864757061,-0.022079112008213997,0.03700551763176918,0.028470946475863457,-0.017493071034550667,0.021403448656201363,0.040296345949172974,0.02385890483856201,0.03578056022524834,-0.013638480566442013,0.006896308157593012,-0.011872781440615654,-0.01975105330348015,0.053314823657274246,0.028907906264066696,-0.03537525609135628,0.039581652730703354,-0.06546417623758316,0.03180316463112831,-0.04961426183581352,-0.023457437753677368,-0.02263461798429489,-0.003405587049201131,-0.06950398534536362,0.018094131723046303,-0.03214609995484352,0.023854240775108337,0.005995774641633034,-0.03913794457912445,0.0288820993155241,0.02832627296447754,-0.07075242698192596,-0.04843945801258087,-0.021487683057785034,-0.03774654492735863,-0.05036021023988724,0.07315557450056076,-0.009027727879583836,-0.04715120047330856,0.023950638249516487,0.016289519146084785,0.03740982338786125,-0.019699912518262863,0.02814405970275402,0.0803428515791893,0.022323409095406532,-0.01691054366528988,0.05249379947781563,0.03265013173222542,-0.08454307913780212,0.010202886536717415,0.035154443234205246,-0.01587941125035286,-0.024641361087560654,-0.018310341984033585,-0.03265009820461273,0.02868618071079254,-0.02714012935757637,0.0034735072404146194,0.00669501256197691,0.016983171924948692,-0.02464638091623783,-0.023848287761211395,0.01668139360845089,0.0651252344250679,-0.0008170082583092153,-0.03764967992901802,-0.025540614500641823,0.025191299617290497,-0.06129271537065506,-0.024267764762043953,0.04006560519337654,0.03824928030371666,0.051200855523347855,-0.03262656554579735,0.016591938212513924,0.024647897109389305,0.008856624364852905,0.028055699542164803,-0.018462179228663445,0.049622561782598495,-0.033776815980672836,-0.0173990149050951,0.017056820914149284,-0.012260610237717628,-0.008301972411572933,0.017942121252417564,-0.012635341845452785,-0.025932500138878822,-0.02160353772342205,0.01387950498610735,-0.037040263414382935,0.028693081811070442,-0.023816516622900963,-0.018761157989501953,0.029937967658042908,-0.012069673277437687,-0.0009217659826390445,-0.04362722858786583,0.004274431150406599,-0.0169126745313406,0.03617185354232788,0.0026680727023631334,0.07201754301786423,0.03782154247164726,0.0018943079048767686,-0.061087336391210556,0.013276664540171623,0.0024772020988166332,-0.0581078864634037,0.023118624463677406,0.009602141566574574,-0.011317478492856026,-0.05020955204963684,-0.0348813496530056,-0.026673048734664917,0.005578432697802782,-0.03216034919023514,0.06974879652261734,0.013343024998903275,-0.09175000339746475,-7.098763364841761e-33,-0.009788233786821365,-0.025649163872003555,-0.020083865150809288,-0.029058920219540596,-0.019793430343270302,-0.04828279837965965,0.033329613506793976,-0.01709723472595215,-0.006450981833040714,0.01921015791594982,-0.032360732555389404,-0.048079077154397964,0.018051359802484512,0.01890268735587597,0.017577815800905228,0.0455288328230381,0.025534192100167274,-0.01829530857503414,-0.006966201588511467,0.010169710963964462,-0.047890834510326385,0.034266259521245956,0.025149276480078697,-0.012525280006229877,-0.050100941210985184,0.028007328510284424,-0.014883468858897686,0.00638851011171937,-0.009902509860694408,-0.008354314602911472,0.035701435059309006,-0.02581210620701313,-0.01962689310312271,-0.02596166916191578,-0.009115203283727169,-0.022846238687634468,0.0047834780998528,-0.017611831426620483,-0.014664415270090103,0.018858835101127625,0.030296647921204567,0.02536039985716343,0.019728947430849075,-0.026529232040047646,0.020870115607976913,0.004997896030545235,0.019189802929759026,-0.009497779421508312,-0.0035849648993462324,0.0008435675990767777,-0.01842251978814602,0.025055790320038795,-0.002018956933170557,0.023439781740307808,0.053865946829319,0.0869276151061058,0.04961899667978287,-0.037809379398822784,-0.04981280490756035,0.0428282767534256,-0.009203275665640831,-0.06358695030212402,0.010963204316794872,0.027820955961942673,0.02184222638607025,0.020658858120441437,0.008941239677369595,0.012962629087269306,0.027554968371987343,0.02249395288527012,-0.00015507660282310098,-0.0055248429998755455,-0.0024325503036379814,-0.07799189537763596,-0.0009187209652736783,0.05496220663189888,0.03307081758975983,-0.00023234551190398633,-0.0279881339520216,0.06631201505661011,-0.014825623482465744,0.013228784315288067,0.006030184682458639,0.00859442912042141,-0.003627315629273653,-0.036093227565288544,-0.006584850139915943,-0.0013717180117964745,0.025161368772387505,0.0058192783035337925,-0.0162774957716465,0.0128420265391469,-0.026231320574879646,0.04747172072529793,-0.0797986164689064,-0.013232419267296791,0.052705131471157074,0.04152489826083183,-0.011976792477071285,-0.01698330231010914,0.018476001918315887,0.007048880681395531,-0.0015895565738901496,-0.05167115852236748,-0.003591196844354272,0.02521134354174137,0.031089380383491516,-0.04908766970038414,-0.033989693969488144,0.012574643827974796,0.03560999780893326,0.04559075087308884,-0.02987935207784176,0.0015003795269876719,0.006105830892920494,-0.024943875148892403,-0.019582975655794144,-0.013248040340840816,-0.01414569467306137,-0.010577049106359482,0.0048340242356061935,0.019782232120633125,-0.027225350961089134,0.01916196197271347,0.004279068671166897,0.0007285251631401479,-0.011952397413551807,-0.0692412331700325,0.022400690242648125,-0.027312975376844406,0.02481512352824211,0.00869033019989729,3.3184667813657143e-7,0.02236335165798664,0.025275003165006638,-0.03651377931237221,0.06428899616003036,0.020343776792287827,0.009457462467253208,-0.00853735487908125,-0.03929255157709122,0.04778694733977318,-0.018164560198783875,0.0034772679209709167,-0.014575778506696224,-0.00047726044431328773,0.05151892453432083,0.005220592487603426,-0.08883105963468552,0.023048847913742065,-0.052226196974515915,-0.030367283150553703,-0.0034791743382811546,0.0317094586789608,0.05166248604655266,0.06338295340538025,0.0013711977517232299,0.015823693946003914,0.0786135345697403,-0.020040279254317284,-0.04163813218474388,0.02677740715444088,0.0023783680517226458,-0.033654626458883286,-0.06899843364953995,-0.002128973137587309,0.03493513911962509,-0.002114324364811182,0.008701639249920845,-0.03575245663523674,-0.040230412036180496,0.008345810696482658,0.013083899393677711,0.009841181337833405,0.015746844932436943,-0.02692767046391964,-0.058542244136333466,0.001539499149657786,-0.0766628310084343,-0.02073422074317932,-0.024897532537579536,-0.031586822122335434,0.029889926314353943,0.012196407653391361,0.034386973828077316,-0.011982683092355728,0.0055951024405658245,0.038769081234931946,0.01890965923666954,0.0029791125562042,0.037348177284002304,0.022057078778743744,-0.02250114642083645,-0.015725981444120407,0.024377215653657913,0.015267463400959969,0.06314384192228317,-0.005432168487459421,0.027076097205281258,0.0054833185859024525,4.0540462946483475e-34,0.02739712968468666,-0.008598262444138527,0.0670909583568573,0.015647513791918755,0.0481383390724659,-0.0107494555413723,0.08937379717826843,-0.006999049335718155,0.013660887256264687,-0.04910748079419136,-0.007038600277155638]'
SET
  @TechnicalDesignVector_868babd5 = N'[-0.0027369402814656496,0.0004573173064272851,-0.013671659864485264,-0.08583221584558487,0.021986011415719986,-0.019124140962958336,0.024317389354109764,0.021154776215553284,-0.07047702372074127,0.02215028554201126,-0.019588666036725044,0.03278669714927673,0.052096933126449585,0.15330421924591064,-0.02574939653277397,-0.05254887416958809,-0.01346023753285408,0.033798906952142715,-0.013109992258250713,0.01519815158098936,0.02415982261300087,-0.02034030482172966,-0.01600397564470768,-0.01203979179263115,0.020041538402438164,-0.057157739996910095,-0.0284828320145607,-0.0019296703394502401,0.05967129021883011,-0.09686565399169922,0.010355626232922077,0.029285874217748642,-0.0016140651423484087,-0.01119576208293438,0.000002126934532498126,-0.003996700048446655,0.0005951427156105638,-0.003791447263211012,-0.028945107012987137,0.016631893813610077,0.051867738366127014,-0.04583533853292465,0.038258664309978485,0.008815520443022251,-0.0014115009689703584,-0.055890873074531555,-0.06913827359676361,0.10151945799589157,0.04895307496190071,-0.02492726594209671,-0.013133542612195015,-0.01945894956588745,-0.0034469198435544968,0.019248291850090027,-0.029218874871730804,0.06762919574975967,0.012893524020910263,-0.08080653846263885,0.09851841628551483,-0.037186507135629654,-0.020961105823516846,0.005325783509761095,0.035174887627363205,-0.05081674084067345,0.056124623864889145,-0.009144952520728111,0.06439851969480515,-0.009534375742077827,-0.010840469971299171,0.000100915422081016,0.0705554410815239,0.006866291631013155,-0.020003868266940117,-0.04561302065849304,-0.004552803467959166,-0.0027145850472152233,-0.015149599872529507,0.011522837914526463,0.02942751534283161,-0.012402752414345741,-0.020108263939619064,0.054518211632966995,-0.0491226427257061,-0.0469946414232254,-0.00913800485432148,0.07442940026521683,0.004664937034249306,-0.02109600603580475,-0.042492300271987915,-0.031571950763463974,0.09352552890777588,-0.019820479676127434,0.011791504919528961,0.016045499593019485,-0.0888528823852539,-0.009861662983894348,0.02216515503823757,-0.024317454546689987,0.004850475583225489,-0.030614731833338737,-0.0063164448365569115,0.024913230910897255,0.082026906311512,0.017183929681777954,0.08202285319566727,0.035787761211395264,-0.006432367954403162,-0.01764332875609398,-0.060011621564626694,0.03240763396024704,-0.012313851155340672,0.017623601481318474,0.008536403998732567,0.05872755125164986,-0.05017201602458954,-0.013813291676342487,-0.05827458202838898,-0.016153935343027115,0.0014611006481572986,0.0036752717569470406,0.04692436754703522,-0.026313109323382378,0.009274173527956009,0.03515166789293289,0.04371828958392143,0.04691815748810768,-0.0037867857608944178,-0.05687326192855835,-0.016251515597105026,0.045181754976511,-0.02677903138101101,-0.013314640149474144,0.014716976322233677,-0.03959256783127785,-0.032364439219236374,-0.02706032618880272,0.0013592294417321682,0.010607240721583366,-0.004748214967548847,-0.0033296174369752407,0.013211078941822052,0.022123001515865326,-0.0380195677280426,0.04755206033587456,-0.012344736605882645,0.0016438968013972044,0.01492476649582386,0.065984345972538,0.008554617874324322,0.022245662286877632,0.0018394326325505972,-0.027743523940443993,0.03109603561460972,0.028693048283457756,-0.06296446919441223,0.0032376463059335947,0.04985326528549194,-0.009081459604203701,0.04315830394625664,0.03282005339860916,-0.02002522721886635,-0.02820615842938423,0.10987664014101028,0.0467151403427124,-0.07564438879489899,0.029066719114780426,-0.07253643125295639,-0.04699930176138878,-0.035873960703611374,-0.03948056325316429,0.02095654420554638,-0.034857578575611115,-0.053217556327581406,0.06576680392026901,0.002324505243450403,-0.05511239543557167,0.10181297361850739,-0.037906378507614136,-0.030645599588751793,0.0030180439352989197,0.024243488907814026,-0.07680075615644455,0.03757641464471817,0.004582440014928579,0.04564030095934868,-0.04350980743765831,-0.07632949948310852,0.02058577723801136,-0.016719747334718704,0.014468347653746605,0.008281825110316277,-0.0010069546988233924,-0.04986538365483284,-0.0028882555197924376,-0.01294721569865942,0.020482495427131653,-0.026302605867385864,-0.004926696419715881,0.04870886355638504,0.02590791881084442,0.003809600370004773,0.03991427645087242,-0.019661350175738335,0.04412328079342842,0.033320698887109756,0.011319446377456188,0.00813879631459713,-0.03226396441459656,-0.07853730022907257,-0.0019706906750798225,0.001317526213824749,-0.0005778514896519482,-0.05063329637050629,0.042321834713220596,0.015154310502111912,0.005949446465820074,0.014935506507754326,0.02046165056526661,-0.06149487569928169,-0.04047810658812523,-0.07016780227422714,0.0420270673930645,0.05408317595720291,0.006497765891253948,0.06976830959320068,0.03518419340252876,0.009503364562988281,-0.04376702383160591,0.05483768880367279,-0.015049026347696781,-0.007251054514199495,-0.03775697201490402,0.025654800236225128,0.009502002969384193,0.03409257158637047,0.085955910384655,0.02007569745182991,0.013897396624088287,0.008425229229032993,0.02486904338002205,-0.004963735118508339,-0.035652562975883484,-0.0313519686460495,-0.009042216464877129,0.015505097806453705,-0.018677175045013428,-0.06397835165262222,0.044600751250982285,0.02252105250954628,-0.023512808606028557,0.028706707060337067,0.03904534876346588,0.006649103481322527,-0.023946063593029976,-0.01596425659954548,-0.0009466690244153142,-0.05737363174557686,-0.005582697689533234,0.011453215032815933,0.06327436864376068,0.01707165502011776,-0.008529146201908588,-0.0629987046122551,-0.039261594414711,0.02104165218770504,-0.020082049071788788,0.03062944859266281,0.014646496623754501,-0.020794589072465897,0.0352570004761219,0.0005843264516443014,0.0116554731503129,0.009242351166903973,-0.004750354681164026,0.0178099125623703,0.0530150942504406,-0.0061149587854743,0.02664068154990673,-0.033058129251003265,-0.03265664726495743,-0.015838678926229477,-0.048686571419239044,0.01592901721596718,0.03192674741148949,-0.01658458821475506,0.02285539172589779,0.033137280493974686,-0.04152689129114151,-0.018830345943570137,-0.10031038522720337,0.03557055443525314,-0.017726583406329155,0.008908078074455261,-0.02090219408273697,-0.059984005987644196,0.018597785383462906,-0.021764010190963745,0.018658889457583427,-0.0018254760652780533,0.02161717414855957,-0.019137008115649223,-0.021527236327528954,-0.012602441012859344,0.005147244315594435,-0.028892934322357178,0.04488383233547211,-0.03967094048857689,0.02901495061814785,0.047605227679014206,0.0935945063829422,0.0008463347912766039,0.03368791192770004,-0.00021225365344434977,-0.06064935773611069,0.00754528446123004,0.0031803424935787916,0.05014719069004059,-0.010734638199210167,-0.012658338993787766,0.024016518145799637,0.012212365865707397,-0.007456888910382986,0.0012829042971134186,-0.014065048657357693,-0.0563177689909935,0.008374732919037342,-0.013803139328956604,-0.027232887223362923,-0.05207177624106407,0.020029865205287933,-0.007729344069957733,-0.02213417924940586,-0.002060264814645052,0.01602916233241558,0.01952459290623665,-0.041045624762773514,-0.01645880937576294,-0.017090030014514923,0.009101822040975094,-0.015946468338370323,-0.021958986297249794,-0.00437531853094697,-0.0501333624124527,-0.01945096254348755,0.01751301996409893,-0.005086771212518215,0.03993210196495056,0.0023494367487728596,-0.16362768411636353,0.015421093441545963,0.041508935391902924,0.05132832005620003,-0.01248056162148714,-0.015521506778895855,0.009593402035534382,-0.016041239723563194,-0.0007633741479367018,0.009782526642084122,0.028296226635575294,-0.07597698271274567,0.06854255497455597,0.02262360043823719,0.0720771998167038,0.05018724873661995,-0.005236389115452766,0.010747515596449375,0.041647057980298996,-0.028039563447237015,0.00949596706777811,-0.030437352135777473,0.017367511987686157,0.03435402363538742,0.007578677032142878,0.025120960548520088,-0.0024736057966947556,-0.06529641896486282,0.04737848415970802,0.016482479870319366,0.02639814279973507,0.014844239689409733,0.05739988386631012,-0.004934098571538925,0.1054089143872261,-0.011505482718348503,0.061713118106126785,-0.01057695597410202,0.047959212213754654,-0.028357839211821556,-0.0394684262573719,0.04088740423321724,0.02199322171509266,-0.024719154462218285,-0.016668934375047684,0.007412703242152929,-0.009525259956717491,0.025490177795290947,0.03516826778650284,0.03852282837033272,-0.00023434567265212536,0.0012918765423819423,-0.026088399812579155,0.03800474479794502,0.02930006943643093,0.00122583017218858,0.0848195031285286,-0.029650015756487846,-0.07560572773218155,0.02074917033314705,0.018315346911549568,-0.007998730055987835,-0.018866054713726044,-0.0575563870370388,-0.006008742842823267,-0.052231576293706894,-0.05027933046221733,0.00517316535115242,-0.012851722538471222,-0.01111887488514185,0.018601465970277786,0.007995480671525002,-0.03501809388399124,0.008075651712715626,0.01684848964214325,0.004096767399460077,0.012360595166683197,-0.030939359217882156,-0.0006360586849041283,-0.08718548715114594,-0.018419964239001274,0.001017450587823987,-0.013848747126758099,0.04050604999065399,0.001886176411062479,0.021569551900029182,0.0050749871879816055,-0.031806912273168564,-0.014865278266370296,0.06799601018428802,0.032779037952423096,0.008414505049586296,0.039282362908124924,-0.02118571661412716,0.05202511325478554,-0.011170096695423126,0.02296494133770466,-0.028316430747509003,-0.03259127959609032,0.05918129161000252,0.005416139494627714,-0.029375871643424034,0.010155383497476578,-0.0353909432888031,-0.004531333688646555,-0.0504521019756794,-0.047305259853601456,-0.06311056017875671,-0.04474522918462753,0.026535524055361748,-0.024955131113529205,0.0227814894169569,0.016378603875637054,0.027185937389731407,0.000271285796770826,-0.019404688850045204,0.01950840838253498,-0.022501923143863678,-0.008916543796658516,-0.009258674457669258,-0.013634376227855682,-0.001566590159200132,0.03323201835155487,-0.013471916317939758,-0.04653841257095337,0.02432865835726261,0.030158283188939095,0.024938974529504776,-0.01811579242348671,-0.004233813378959894,0.012694637291133404,-0.0210425928235054,0.019883815199136734,0.031644657254219055,0.004476903472095728,-0.10472693294286728,0.03449447080492973,0.025027891620993614,-0.016191815957427025,-0.030360454693436623,0.00019332970259711146,-0.007631649263203144,0.01088755764067173,0.004446583334356546,-0.009113792330026627,0.03883930668234825,0.016422158107161522,0.009893864393234253,0.030247751623392105,0.01223151758313179,0.014437174424529076,-0.06539634615182877,-0.03780394047498703,-0.02097354643046856,0.04017667472362518,-0.022873183712363243,-0.009707602672278881,-0.006352015305310488,0.02548242174088955,0.07177503407001495,-0.03582349792122841,0.004755109548568726,-0.005272513721138239,-0.0163645651191473,-0.03588120639324188,-0.00593772204592824,0.026721931993961334,0.04430611804127693,-0.05537043884396553,0.003783425083383918,0.04201187193393707,-0.012335455976426601,0.029184984043240547,-0.0024815616197884083,-0.03891081362962723,-0.04160977527499199,0.05742715299129486,-0.018566537648439407,0.010426796041429043,-0.007946652360260487,-0.0007867435924708843,0.0362665019929409,0.0011660157470032573,0.007909323088824749,-0.024625228717923164,-0.0005204094341024756,-0.015512234531342983,0.036531105637550354,-0.049341440200805664,0.039576977491378784,0.005038614850491285,-0.023895561695098877,-0.1163763627409935,0.0406532809138298,0.04319974035024643,-0.03750572353601456,0.03163759410381317,-0.02568398043513298,0.005283604841679335,-0.10376933962106705,-0.0031832517124712467,0.03179303556680679,0.023279454559087753,-0.07475260645151138,0.06827910989522934,-0.01764214038848877,-0.017604036256670952,-6.868846220712522e-33,-0.032855574041604996,-0.0025415963027626276,-0.007813820615410805,-0.034790121018886566,-0.04535290598869324,-0.04026677459478378,-0.013383557088673115,-0.03926993906497955,-0.0015943702310323715,-0.0024146137293428183,-0.007451202720403671,-0.051729682832956314,0.006452295463532209,0.01797487586736679,0.010419128462672234,-0.02423533983528614,0.021356023848056793,0.01398850791156292,-0.011901413090527058,0.027530811727046967,-0.043305784463882446,0.030222347006201744,0.015928324311971664,-0.00407462939620018,-0.05504705756902695,0.015492021106183529,-0.022349625825881958,0.022538863122463226,-0.06757409870624542,0.0248112715780735,-0.009204918518662453,-0.03408801183104515,-0.031988855451345444,-0.0371200330555439,0.026355793699622154,-0.006787967402487993,0.01970226876437664,-0.03545377776026726,0.014383157715201378,0.03550273925065994,0.06203856319189072,-0.007558158133178949,0.004944855347275734,0.0053947726264595985,0.013276842422783375,-0.01207844540476799,0.009455225430428982,0.001237149816006422,0.0014860598603263497,-0.037750743329524994,-0.026816515251994133,0.010247549042105675,-0.015545657835900784,0.008402232080698013,0.01733163557946682,0.06803381443023682,0.06665728241205215,0.019550858065485954,-0.02636413462460041,0.0338030569255352,-0.025100892409682274,-0.06277070939540863,0.021940892562270164,0.02333616465330124,0.05139085650444031,0.025118861347436905,-0.001308934180997312,0.017398670315742493,-0.027691740542650223,0.019689014181494713,-0.009554616175591946,-0.02248028852045536,0.03099016845226288,-0.06542889028787613,0.024909980595111847,0.03162552788853645,0.02249942533671856,-0.020544782280921936,-0.041356515139341354,0.07683854550123215,-0.024870609864592552,0.047223612666130066,0.007526569068431854,0.01961367577314377,-0.019064530730247498,-0.05595387890934944,0.018970344215631485,0.027081869542598724,-0.024404173716902733,0.007913676090538502,0.01722150668501854,-0.005145936738699675,-0.05271587893366814,0.05717255175113678,-0.10046233981847763,-0.011438076384365559,0.05134309455752373,0.057590000331401825,0.002419354859739542,-0.012723410502076149,0.0006366668967530131,-0.009542291983962059,-0.0012961250031366944,-0.012540215626358986,-0.023999454453587532,0.021043118089437485,0.031910721212625504,0.005740813910961151,-0.02534218318760395,0.0015843190485611558,0.045810766518116,0.01598435640335083,-0.02428450994193554,-0.011619048193097115,0.02072717249393463,-0.014109616167843342,-0.014858459122478962,-0.058860961347818375,0.024358438327908516,0.006780117284506559,0.018312357366085052,0.046446722000837326,0.0012468736385926604,0.013985887169837952,0.04330437257885933,0.024188870564103127,-0.042144499719142914,-0.017653942108154297,0.010050456039607525,-0.058845654129981995,0.022923558950424194,-0.00046191472210921347,3.1462025162909413e-7,-0.007306163664907217,0.030614472925662994,-0.07472337037324905,-0.005716011859476566,0.05497971177101135,-0.009092153050005436,-0.036740757524967194,-0.06787952780723572,-0.004791344050318003,-0.031675148755311966,0.023175787180662155,0.008567199110984802,0.022617699578404427,0.01816490851342678,0.001970083685591817,-0.016187777742743492,-0.006582527421414852,-0.03140519931912422,-0.04597758874297142,-0.02726088836789131,0.018277248367667198,0.025854535400867462,0.08177269250154495,0.0048890672624111176,-0.01448094379156828,0.07703623920679092,0.012129394337534904,-0.009953557513654232,0.03349427506327629,-0.037610746920108795,-0.01222500391304493,-0.017183538526296616,-0.005864337552338839,-0.009448209777474403,-0.005367364268749952,0.03803131356835365,-0.04679393395781517,-0.041275739669799805,0.01843603327870369,0.033365461975336075,0.02193037047982216,0.012434251606464386,-0.04144512861967087,-0.019619032740592957,0.0162778589874506,-0.09379162639379501,-0.018362000584602356,-0.04096997529268265,-0.05175750330090523,0.03730649873614311,-0.015216237865388393,0.03938562795519829,-0.015698328614234924,0.014645854011178017,0.033508867025375366,-0.006015254650264978,-0.01702013984322548,0.03592747077345848,0.015087698586285114,0.023545948788523674,-0.02391405589878559,0.010478179901838303,0.01821216568350792,0.05982431024312973,0.01957959309220314,-0.025745635852217674,-0.00849553756415844,4.259871682057484e-34,0.04311143234372139,-0.039834845811128616,0.034627821296453476,0.026267269626259804,0.036929599940776825,-0.03821453079581261,0.07301803678274155,-0.002409765962511301,0.04357133433222771,-0.07263003289699554,-0.009751275181770325]'
SET
  @HasCustomProps_868babd5 = 0
SET
  @HasCustomEvents_868babd5 = 1
SET
  @RequiresData_868babd5 = 1
SET
  @DependencyCount_868babd5 = 2
SET
  @TechnicalDesignVectorEmbeddingModelID_868babd5 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_868babd5 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_868babd5 = 0
SET
  @ID_868babd5 = '50E31AC5-B851-4927-821D-CFFCC13EA9A0'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_868babd5,
  @Name = @Name_868babd5,
  @Version = @Version_868babd5,
  @VersionSequence = @VersionSequence_868babd5,
  @Title = @Title_868babd5,
  @Description = @Description_868babd5,
  @Type = @Type_868babd5,
  @Status = @Status_868babd5,
  @DeveloperName = @DeveloperName_868babd5,
  @DeveloperEmail = @DeveloperEmail_868babd5,
  @DeveloperOrganization = @DeveloperOrganization_868babd5,
  @SourceRegistryID = @SourceRegistryID_868babd5,
  @ReplicatedAt = @ReplicatedAt_868babd5,
  @LastSyncedAt = @LastSyncedAt_868babd5,
  @Specification = @Specification_868babd5,
  @FunctionalRequirements = @FunctionalRequirements_868babd5,
  @TechnicalDesign = @TechnicalDesign_868babd5,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_868babd5,
  @TechnicalDesignVector = @TechnicalDesignVector_868babd5,
  @HasCustomProps = @HasCustomProps_868babd5,
  @HasCustomEvents = @HasCustomEvents_868babd5,
  @RequiresData = @RequiresData_868babd5,
  @DependencyCount = @DependencyCount_868babd5,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_868babd5,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_868babd5,
  @HasRequiredCustomProps = @HasRequiredCustomProps_868babd5,
  @ID = @ID_868babd5;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_27c0078a NVARCHAR(MAX),
@Name_27c0078a NVARCHAR(500),
@Version_27c0078a NVARCHAR(50),
@VersionSequence_27c0078a INT,
@Title_27c0078a NVARCHAR(1000),
@Description_27c0078a NVARCHAR(MAX),
@Type_27c0078a NVARCHAR(255),
@Status_27c0078a NVARCHAR(50),
@DeveloperName_27c0078a NVARCHAR(255),
@DeveloperEmail_27c0078a NVARCHAR(255),
@DeveloperOrganization_27c0078a NVARCHAR(255),
@SourceRegistryID_27c0078a UNIQUEIDENTIFIER,
@ReplicatedAt_27c0078a DATETIMEOFFSET,
@LastSyncedAt_27c0078a DATETIMEOFFSET,
@Specification_27c0078a NVARCHAR(MAX),
@FunctionalRequirements_27c0078a NVARCHAR(MAX),
@TechnicalDesign_27c0078a NVARCHAR(MAX),
@FunctionalRequirementsVector_27c0078a NVARCHAR(MAX),
@TechnicalDesignVector_27c0078a NVARCHAR(MAX),
@HasCustomProps_27c0078a BIT,
@HasCustomEvents_27c0078a BIT,
@RequiresData_27c0078a BIT,
@DependencyCount_27c0078a INT,
@TechnicalDesignVectorEmbeddingModelID_27c0078a NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_27c0078a NVARCHAR(MAX),
@HasRequiredCustomProps_27c0078a BIT,
@ID_27c0078a UNIQUEIDENTIFIER
SET
  @Namespace_27c0078a = N'CRM/Analytics'
SET
  @Name_27c0078a = N'SalesFunnelChart'
SET
  @Version_27c0078a = N'1.0.0'
SET
  @VersionSequence_27c0078a = 1
SET
  @Title_27c0078a = N'Sales Funnel Chart'
SET
  @Description_27c0078a = N'Funnel chart visualization sub-component for displaying sales pipeline stages'
SET
  @Type_27c0078a = N'Chart'
SET
  @Status_27c0078a = N'Published'
SET
  @Specification_27c0078a = N'{"name":"SalesFunnelChart","namespace":"CRM/Analytics","type":"Chart","location":"embedded","code":"function SalesFunnelChart({ funnelData, viewMode, onStageClick, closedLost, formatCurrency }) {\n  return (\n    <div style={{ \n      flex: 1, \n      display: ''flex'', \n      justifyContent: ''center'',\n      alignItems: ''center'',\n      padding: ''40px 20px'',\n      width: ''100%'',\n      overflow: ''hidden''\n    }}>\n      <div style={{\n        display: ''flex'',\n        flexDirection: ''column'',\n        alignItems: ''center'',\n        width: ''650px'',\n        maxWidth: ''90%''\n      }}>\n      {funnelData.map((stage, index) => (\n        <div\n          key={stage.stage}\n          className=\"funnel-stage\"\n          style={{\n            width: `$' + '{stage.width}%`,\n            marginBottom: ''4px'',\n            position: ''relative'',\n            cursor: ''pointer'',\n            opacity: 0,\n            transform: ''translateY(20px)'',\n            animation: `fadeInUp 0.5s $' + '{index * 0.1}s forwards`,\n            transition: ''transform 0.2s ease''\n          }}\n          onClick={() => onStageClick(stage)}\n          onMouseEnter={(e) => e.currentTarget.style.transform = ''scale(1.02)''}\n          onMouseLeave={(e) => e.currentTarget.style.transform = ''scale(1)''}\n          onMouseDown={(e) => e.currentTarget.style.transform = ''scale(0.98)''}\n          onMouseUp={(e) => e.currentTarget.style.transform = ''scale(1.02)''}\n        >\n          <div\n            style={{\n              background: `linear-gradient(135deg, $' + '{stage.color}dd, $' + '{stage.color}99)`,\n              padding: ''20px'',\n              borderRadius: ''8px'',\n              boxShadow: ''0 2px 8px rgba(0,0,0,0.1)'',\n              display: ''flex'',\n              justifyContent: ''space-between'',\n              alignItems: ''center'',\n              minHeight: ''60px''\n            }}\n          >\n            <div style={{ color: ''white'' }}>\n              <div style={{ fontSize: ''14px'', opacity: 0.9 }}>{stage.stage}</div>\n              <div style={{ fontSize: ''20px'', fontWeight: ''bold'' }}>\n                {viewMode === ''count'' ? stage.count : formatCurrency(stage.value)}\n              </div>\n            </div>\n            {index > 0 && (\n              <div style={{ color: ''white'', textAlign: ''right'' }}>\n                <div style={{ fontSize: ''12px'', opacity: 0.8 }}>Conversion</div>\n                <div style={{ fontSize: ''16px'', fontWeight: ''bold'' }}>\n                  {stage.conversionRate.toFixed(1)}%\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      ))}\n      \n      {/* Lost deals indicator */}\n      {closedLost.count > 0 && (\n        <div\n          style={{\n            marginTop: ''20px'',\n            padding: ''12px 20px'',\n            backgroundColor: ''#FEE2E2'',\n            borderRadius: ''8px'',\n            color: ''#991B1B'',\n            opacity: 0,\n            animation: ''fadeIn 0.5s 0.5s forwards''\n          }}\n        >\n          <div style={{ fontSize: ''14px'' }}>Lost Deals</div>\n          <div style={{ fontSize: ''18px'', fontWeight: ''bold'' }}>\n            {closedLost.count} deals ({formatCurrency(closedLost.value)})\n          </div>\n        </div>\n      )}\n      </div>\n    </div>\n  );\n}","functionalRequirements":"## Sales Funnel Chart Sub-Component\n\n### Purpose\nDisplay the visual funnel representation of deal stages with interactive elements.\n\n### Core Features\n- **Funnel Visualization**: Animated funnel stages\n- **Stage Metrics**: Count and value per stage\n- **Conversion Rates**: Between stages\n- **Interactive Stages**: Click to drill down\n- **View Mode Toggle**: Count vs value display","dataRequirements":{"mode":"views","description":"Visualizes sales funnel with deal stages","entities":[{"name":"Deals","description":"Deal records for funnel visualization","displayFields":["ID","Name","Amount","Stage","Probability"],"filterFields":[],"sortFields":[],"fieldMetadata":[],"permissionLevelNeeded":["read"],"usageContext":"Funnel stage data passed via props"}],"queries":[]},"technicalDesign":"## Implementation\n\n### Visual Design\n- Animated funnel with gradient colors\n- Responsive width based on data\n- Hover effects and transitions\n- Lost deals indicator\n\n### Interaction\n- Click handlers for drill-down\n- Smooth animations on load","properties":[{"name":"funnelData","type":"Array<{stage: string, count: number, value: number, percentage: number, color: string}>","description":"Array of stage data with metrics","required":true},{"name":"viewMode","type":"''count'' | ''value''","description":"Display mode: ''count'' or ''value''","required":true},{"name":"onStageClick","type":"(stage: string) => void","description":"Handler for stage click events","required":true},{"name":"closedLost","type":"{count: number, value: number}","description":"Closed lost deals data","required":true}],"events":[],"dependencies":[],"libraries":[]}'
SET
  @FunctionalRequirements_27c0078a = N'## Funnel Chart Sub-Component

### Purpose
Render the visual funnel chart with interactive stages.

### Core Features
- **Funnel Visualization**: Trapezoid shapes for each stage
- **Dynamic Sizing**: Width based on conversion rates
- **Clickable Stages**: Trigger drill-down panels
- **Metrics Display**: Count and value per stage
- **Conversion Rates**: Show between stages
- **Closed Lost Indicator**: Separate indicator for lost deals'
SET
  @TechnicalDesign_27c0078a = N'## Implementation

### Visual Rendering
- SVG-based funnel segments
- Dynamic path calculations
- Gradient fills for depth
- Hover animations

### Interaction
- Click handlers on each segment
- Tooltip on hover
- Smooth transitions'
SET
  @FunctionalRequirementsVector_27c0078a = N'[-0.006173957139253616,-0.039799101650714874,-0.04099912941455841,-0.0760890394449234,0.000370627676602453,0.011427550576627254,-0.009132263250648975,0.013405359350144863,-0.08278952538967133,0.03001685068011284,-0.06444615870714188,0.005809566471725702,0.018237434327602386,0.17291763424873352,-0.014817553572356701,-0.08664092421531677,-0.04823384806513786,0.025596721097826958,0.00030089638312347233,0.020991327241063118,0.023986008018255234,0.00005288639658829197,-0.03661550208926201,0.014777006581425667,-0.03671357035636902,-0.01565651036798954,-0.04812014102935791,-0.008587955497205257,0.0007247930625453591,-0.1155119389295578,0.02696802094578743,0.0020859413780272007,-0.004484996199607849,0.031369369477033615,0.000002308593593625119,-0.002134686568751931,-0.023118549957871437,-0.012667953968048096,-0.1072959452867508,0.04200104624032974,0.053884703665971756,-0.07862573117017746,0.005825988482683897,-0.004511323757469654,0.028552070260047913,-0.052931953221559525,-0.0357503704726696,0.0781521201133728,0.031246015802025795,-0.03009929321706295,0.0015723214019089937,-0.003877057693898678,-0.036489088088274,-0.006228884682059288,-0.04066551849246025,0.009299754165112972,-0.011287498287856579,-0.007720367517322302,-0.007168564014136791,-0.017556803300976753,-0.010896965861320496,0.006564450915902853,0.02071317471563816,-0.02181062661111355,0.03391651809215546,0.010864194482564926,0.08214283734560013,-0.07247647643089294,-0.01236184872686863,0.01117632631212473,0.03396959602832794,-0.02921433560550213,-0.02911791391670704,-0.050754643976688385,-0.01089358888566494,-0.04148455336689949,-0.05915389209985733,-0.0000884226246853359,0.014613797888159752,-0.023009605705738068,-0.0611698217689991,0.05501992255449295,-0.05296431854367256,-0.0420803427696228,0.03033709153532982,0.0007435866282321513,-0.018632372841238976,-0.026934931054711342,-0.027633417397737503,-0.01595505140721798,0.05975555256009102,-0.007457181811332703,-0.02762307971715927,-0.02392415516078472,-0.058839987963438034,-0.01798240654170513,0.04096783697605133,-0.010781696066260338,0.019955694675445557,-0.043341439217329025,0.032161857932806015,0.021553030237555504,0.06399384886026382,0.012722844257950783,0.05330275744199753,0.0069936057552695274,0.020773015916347504,-0.037325140088796616,-0.038628991693258286,0.02343769371509552,0.0014735395088791847,0.022524874657392502,-0.04245173558592796,-0.011855493299663067,-0.026576092466711998,0.0018441046122461557,-0.06660913676023483,-0.011272835545241833,-0.025810690596699715,-0.0003740716783795506,0.08554115891456604,0.008117735385894775,-0.008605970069766045,0.020875494927167892,0.029785387217998505,0.0649649053812027,-0.056566640734672546,-0.015984490513801575,-0.01770317740738392,0.009586554020643234,-0.005494727287441492,0.01626368798315525,0.026609642431139946,-0.03795752301812172,-0.027440393343567848,0.015410475432872772,0.008465020917356014,0.009295176714658737,-0.047120191156864166,-0.006795428693294525,0.006415672600269318,0.022790707647800446,-0.05356530845165253,0.03843902423977852,0.026888657361268997,-0.036664929240942,-0.01997220888733864,0.08075492829084396,0.012326370924711227,0.01470131054520607,0.01377775240689516,0.0006058403523638844,0.0474436916410923,0.02811780571937561,-0.021851489320397377,-0.029741337522864342,-0.021640950813889503,0.002180274575948715,0.018526699393987656,0.08762813359498978,0.0023968995083123446,-0.05670711025595665,0.00917031429708004,0.012445563450455666,-0.07994527369737625,0.03915410861372948,-0.04603103548288345,-0.038113560527563095,-0.07654394209384918,-0.021703297272324562,0.01608904078602791,-0.0447293296456337,-0.027834586799144745,0.019425202161073685,0.031597353518009186,-0.008969063870608807,0.12512966990470886,-0.058608390390872955,0.001313496264629066,0.051143378019332886,-0.006277814973145723,-0.11316930502653122,0.02667251229286194,-0.017010468989610672,0.0554811991751194,-0.025418858975172043,-0.07802577316761017,0.004051545634865761,-0.007212341297417879,0.007692103274166584,-0.0017686132341623306,0.06260073930025101,-0.07478611916303635,-0.01014049630612135,-0.01841079071164131,0.017560601234436035,-0.00817257072776556,-0.02658105082809925,0.021973704919219017,0.022229254245758057,-0.0007922633085399866,0.044920481741428375,-0.03193610534071922,-0.03663864731788635,0.01026130560785532,-0.0004985966952517629,0.009567362256348133,-0.014661929570138454,-0.0803302526473999,0.01445124950259924,0.006637527607381344,0.0037093053106218576,-0.06609781086444855,0.01957011967897415,-0.014272832311689854,0.017969001084566116,0.019324814900755882,-0.004945718217641115,-0.02701699174940586,-0.012891024351119995,-0.04085284471511841,-0.0008589352946728468,0.07060922682285309,0.0166939664632082,0.13738137483596802,0.039880815893411636,0.02514895424246788,0.003046800848096609,0.05497380718588829,0.009667234495282173,-0.004332880489528179,-0.011560999788343906,0.05153504014015198,0.0006646687397733331,-0.006957147736102343,0.06671865284442902,0.08183540403842926,-0.002615425968542695,0.00237295008264482,0.024887697771191597,-0.0026188690681010485,-0.09513252973556519,-0.04226956516504288,0.017350630834698677,0.0562312975525856,-0.05825053155422211,-0.0024571383837610483,0.013259772211313248,0.00751338480040431,-0.031402841210365295,0.0035908864811062813,0.006699107587337494,0.023351969197392464,-0.017234396189451218,-0.017537062987685204,-0.002088258508592844,-0.044966645538806915,0.017101846635341644,0.02535608969628811,0.09786713868379593,-0.020359745249152184,-0.011281048879027367,-0.03203804790973663,-0.011417031288146973,0.004209509585052729,-0.04424462839961052,0.048034701496362686,0.0849611908197403,0.0109908701851964,0.03240138292312622,0.020982058718800545,0.029829462990164757,-0.02429298870265484,0.0015313051408156753,-0.022583136335015297,0.04334097355604172,-0.008791382424533367,0.029867330566048622,-0.040647100657224655,-0.032095473259687424,-0.02539539337158203,0.005776914302259684,0.013978414237499237,0.022636698558926582,0.004811685997992754,0.0034054205752909184,0.05487348884344101,-0.025371527299284935,-0.007939538918435574,-0.07349790632724762,0.04592428356409073,-0.0402497872710228,0.03602968528866768,-0.04889000579714775,-0.05616025626659393,0.029009532183408737,-0.01075179036706686,-0.02741163969039917,-0.010524320416152477,0.019204730167984962,-0.04051079601049423,-0.019109496846795082,-0.013968081213533878,0.0019059277838096023,-0.057973671704530716,0.0435192734003067,0.006106153596192598,-0.0169756431132555,0.030462630093097687,0.050505004823207855,0.05978789180517197,0.0016273300861939788,0.002379874000325799,-0.033435139805078506,-0.005507269408553839,0.033563144505023956,-0.03242536634206772,0.02350713312625885,-0.00495237298309803,0.029876042157411575,0.0066287936642766,-0.020817896351218224,-0.013587789610028267,-0.0006277855136431754,-0.03465403616428375,0.01376143004745245,-0.04598721116781235,-0.03920988366007805,-0.060245580971241,0.0005837531061843038,0.00162960693705827,0.009899075143039227,-0.038340818136930466,0.02669251337647438,0.09569041430950165,-0.028540758416056633,-0.0053492262959480286,0.004772664047777653,0.024456456303596497,-0.04681604355573654,0.003006404498592019,0.0036521160509437323,-0.062151480466127396,-0.020138531923294067,0.023302720859646797,-0.017327304929494858,0.07074619084596634,0.0010981840314343572,-0.15310929715633392,0.017202328890562057,0.022851794958114624,0.01619264855980873,0.015275450423359871,-0.03396881744265556,0.022776175290346146,0.03359602019190788,-0.04637197405099869,0.03177490085363388,0.0032026655972003937,-0.07905063033103943,0.04489968344569206,0.0485440194606781,-0.015164795331656933,0.036617476493120193,-0.0030191668774932623,0.0036636684089899063,0.048020247370004654,0.026950575411319733,0.07228352129459381,-0.012365327216684818,0.011169161647558212,0.043782833963632584,0.04362061247229576,0.023135093972086906,-0.018200086429715157,-0.0420021191239357,0.024139713495969772,0.020958032459020615,0.05189990624785423,0.019155031070113182,0.005875950679183006,-0.016364289447665215,0.07875245809555054,-0.006966239772737026,0.06894925981760025,-0.0073041170835494995,0.03483886271715164,-0.025793874636292458,-0.049306582659482956,0.04471699893474579,0.022336119785904884,0.0027192740235477686,0.050390489399433136,-0.030546285212039948,-0.011444062925875187,0.018742961809039116,0.01831704191863537,0.021918203681707382,-0.00061564811039716,-0.012873667292296886,0.015128185972571373,-0.054318688809871674,-0.007206016685813665,-0.02784811146557331,0.03529689833521843,-0.014745881780982018,-0.08081136643886566,0.059522394090890884,0.0013961459044367075,0.014269117265939713,-0.04157950356602669,-0.05190015211701393,0.006801279727369547,-0.003173800650984049,0.02239583060145378,0.03342204540967941,-0.0058696274645626545,-0.018118010833859444,0.028572924435138702,-0.0011576954275369644,0.003725616494193673,0.02836279198527336,0.0070913261733949184,-0.003581744385883212,0.011466440744698048,-0.03884178772568703,0.0491994246840477,-0.08065605163574219,-0.0005365149700082839,0.038934376090765,-0.010094931349158287,0.03990447148680687,-0.027396807447075844,0.021688317880034447,-0.04475342482328415,-0.0031445729546248913,0.042113590985536575,0.006131812930107117,-0.06812186539173126,0.007883950136601925,0.05125230550765991,0.008462331257760525,0.04040661081671715,-0.006489162798970938,0.007310580462217331,-0.022375265136361122,-0.010777761228382587,0.0495632030069828,0.008473114110529423,-0.028479209169745445,0.033551137894392014,-0.06669970601797104,0.052678611129522324,-0.051118314266204834,-0.044962987303733826,-0.021471336483955383,-0.010505061596632004,-0.09547565132379532,-0.002827867167070508,-0.014857512898743153,0.028664428740739822,0.012453717179596424,-0.01176619715988636,-0.0004175215435680002,0.011120982468128204,-0.04491046071052551,-0.05609174072742462,0.011787048541009426,-0.023759933188557625,-0.027313660830259323,0.06557916849851608,-0.01492334995418787,-0.03278171271085739,0.03540316969156265,0.052550457417964935,0.027212543413043022,-0.0156855545938015,0.007546133361756802,0.037449922412633896,0.012258727103471756,-0.02191053330898285,0.020627103745937347,0.003578413976356387,-0.07470722496509552,0.016911108046770096,0.02332278899848461,0.021107496693730354,-0.033699940890073776,-0.010063535533845425,-0.02756432071328163,0.03186309337615967,-0.04866508021950722,-0.0064213634468615055,0.010979126207530499,-0.003332319436594844,0.0068380446173250675,-0.026621606200933456,0.017814692109823227,0.04227782413363457,0.0015290947631001472,-0.01818247325718403,-0.012341838330030441,0.03407057747244835,-0.07712473720312119,-0.032628536224365234,0.02920466847717762,0.042216598987579346,0.020420072600245476,-0.0279611274600029,-0.013012384995818138,0.017294641584157944,0.013461682014167309,0.04142320901155472,-0.0008657844155095518,0.037339068949222565,-0.05954021215438843,-0.03626302629709244,0.027600783854722977,-0.0012392036151140928,-0.026820532977581024,-0.0000999676703941077,0.02384011819958687,-0.006473493296653032,-0.034742049872875214,0.03126078099012375,-0.03365307301282883,0.02462168224155903,-0.016620587557554245,-0.01136212982237339,0.0207326989620924,0.011668788269162178,-0.019266143441200256,-0.029748234897851944,0.009896705858409405,-0.01703273318707943,0.04687793552875519,-0.045369286090135574,0.10246272385120392,0.022928260266780853,0.00149733352009207,-0.06946581602096558,0.014181693084537983,-0.01781505160033703,-0.027756130322813988,0.023023175075650215,0.005831090267747641,0.017416568472981453,-0.07115872949361801,-0.01158579345792532,-0.01849641650915146,0.01689927838742733,-0.05056576430797577,0.05238794907927513,0.025205716490745544,-0.04301780089735985,-6.922120359375758e-33,-0.0014992482028901577,-0.03270729258656502,-0.052968721836805344,-0.005099795293062925,-0.058241959661245346,-0.00947744119912386,0.019487325102090836,-0.026098746806383133,0.022148245945572853,0.0005263957427814603,-0.0052678752690553665,-0.012561224400997162,0.010839897207915783,0.022522445768117905,0.049422092735767365,0.04535812884569168,0.04914580285549164,0.0017946060979738832,-0.009830333292484283,0.01307369489222765,-0.03658762201666832,0.04144559055566788,0.003228495130315423,-0.03791069611907005,-0.020903777331113815,0.03471226990222931,-0.018008682876825333,0.03682543337345123,0.010024410672485828,0.020437516272068024,0.01652911677956581,0.01319905649870634,-0.021199703216552734,-0.009369729086756706,-0.008570133708417416,0.010548700578510761,-0.008026855066418648,-0.04028308764100075,-0.007538400590419769,0.021917037665843964,0.03257138282060623,0.025282345712184906,0.02650616690516472,-0.01230216957628727,0.021879063919186592,0.003167599905282259,0.002232963452115655,-0.017153300344944,-0.007781502790749073,0.027804575860500336,-0.019322950392961502,0.027324849739670753,-0.012865375727415085,0.02460048906505108,0.027148375287652016,0.09951739013195038,0.060636427253484726,-0.017238792032003403,-0.03928573802113533,0.03096633218228817,-0.04302142933011055,-0.06046472117304802,0.00426092091947794,0.04027676582336426,0.008309413678944111,0.028075365349650383,0.004828732460737228,0.02919016033411026,-0.021042976528406143,0.01552526094019413,-0.019663095474243164,0.022440269589424133,0.025595838204026222,-0.07021424174308777,-0.00597215723246336,0.023834651336073875,0.045594245195388794,0.019920077174901962,0.004939813632518053,0.029869578778743744,-0.018849391490221024,0.013626600615680218,-0.022311732172966003,-0.00905951764434576,0.011157117784023285,-0.01782318949699402,-0.016549795866012573,0.005639898125082254,0.017494922503829002,0.01906406320631504,0.00011894308408955112,-0.008199870586395264,-0.06187306344509125,0.051368582993745804,-0.015423431061208248,-0.026726311072707176,0.07238879799842834,0.02830997295677662,0.0017410346772521734,-0.05301125720143318,-0.002388965105637908,0.007826294749975204,-0.017742054536938667,-0.028266925364732742,-0.003307676175609231,-0.00855999905616045,0.008990875445306301,-0.0049156304448843,-0.03727618604898453,0.015706801787018776,0.02491145394742489,0.01322978176176548,-0.012198398821055889,-0.007868736051023006,0.02136310003697872,-0.02314814366400242,-0.01593967340886593,-0.04477977007627487,0.018264302983880043,-0.024381758645176888,0.03196810558438301,0.004106316715478897,-0.01634192280471325,0.022193577140569687,0.015326552093029022,-0.002551828743889928,-0.027425013482570648,-0.05334770679473877,0.0127547113224864,-0.057542797178030014,0.005046498030424118,-0.0004572523757815361,3.1834088076720946e-7,0.011545569635927677,0.05450425669550896,-0.021157754585146904,0.029365912079811096,0.01691349968314171,0.007812689058482647,-0.04238828271627426,-0.02797003649175167,-0.0010601493995636702,0.0030685279052704573,0.012553609907627106,-0.01905854605138302,0.022833585739135742,0.07237373292446136,0.0031630094163119793,-0.03659379482269287,0.007876098155975342,-0.05881438031792641,-0.052185945212841034,0.0325738787651062,0.04084297642111778,0.07382936030626297,0.08243890851736069,-0.01946147531270981,-0.0029889754951000214,0.07529108971357346,-0.0415654294192791,-0.00779332360252738,0.0349174439907074,0.004654180258512497,-0.037795986980199814,0.012039000168442726,-0.01795734092593193,0.016214661300182343,-0.020874876528978348,0.01652023009955883,-0.021072255447506905,-0.06424278020858765,0.019411787390708923,0.03184971213340759,0.02278372272849083,-0.004599153064191341,-0.027450524270534515,-0.05062834918498993,-0.005760543048381805,-0.07453721016645432,0.007834114134311676,0.028777895495295525,0.004824768286198378,0.03072182461619377,-0.004344860091805458,-0.0017987574683502316,-0.032553110271692276,-0.0026440657675266266,0.03618793562054634,0.009756820276379585,0.01081022433936596,0.03494122251868248,0.037608060985803604,0.028295433148741722,-0.026672935113310814,-0.0036655189469456673,0.01621938683092594,0.08237869292497635,-0.004966442938894033,0.035568226128816605,0.00864491518586874,3.6585441030632367e-34,0.029696665704250336,-0.025183171033859253,0.053167302161455154,-0.00016168550064321607,0.012546020559966564,-0.020865531638264656,0.08935225754976273,-0.016279149800539017,0.019008982926607132,-0.06585333496332169,-0.007676187437027693]'
SET
  @TechnicalDesignVector_27c0078a = N'[0.000035943430702900514,-0.04983002319931984,-0.01588280312716961,-0.012410424649715424,-0.038235198706388474,-0.04031461849808693,0.035369839519262314,0.04631694778800011,-0.13048090040683746,-0.03503125160932541,0.010164101608097553,0.035858169198036194,0.030503539368510246,0.1370999962091446,0.004989870358258486,-0.1519252359867096,-0.07650326192378998,-0.013170124962925911,-0.11524911969900131,-0.012782545760273933,0.02858078107237816,0.005225321277976036,-0.025462139397859573,-0.01936815306544304,0.005626865662634373,-0.027328282594680786,-0.06278719753026962,0.022582100704312325,0.04180622100830078,-0.05864841118454933,-0.0034032566472887993,0.037184275686740875,-0.030873753130435944,0.010848223231732845,0.0000017213012597494526,-0.02433539368212223,0.006905353162437677,0.049920737743377686,0.02057703025639057,0.011352377012372017,0.022602565586566925,-0.06184165179729462,0.04371540620923042,-0.02084648609161377,0.02087416872382164,0.043934982270002365,-0.04529675096273422,0.08903088420629501,0.06233644858002663,-0.05318007990717888,0.0007722445297986269,-0.012996843084692955,0.001621878589503467,0.02452961541712284,0.036900635808706284,0.05741066485643387,-0.005988718010485172,0.014449906535446644,0.03358560428023338,0.0064732846803963184,-0.01960141211748123,0.03288824483752251,0.02615334279835224,-0.03131747618317604,0.07792163640260696,-0.0002807966957334429,0.09093085676431656,-0.07228534668684006,-0.01947616972029209,0.04166499897837639,-0.012859093025326729,0.021115683019161224,0.013790412805974483,-0.002909330651164055,-0.0324762798845768,-0.013278073631227016,-0.029743585735559464,-0.023229816928505898,0.007167053874582052,-0.032982151955366135,-0.07255998253822327,-0.031107153743505478,-0.057462386786937714,-0.0382101833820343,0.0859232172369957,0.023257015272974968,0.02058424986898899,0.004496402572840452,-0.0031100253108888865,0.014888624660670757,0.02360808290541172,-0.047188255935907364,0.03917968273162842,-0.015168833546340466,-0.024048451334238052,-0.014806955121457577,-0.01007605530321598,0.011223582550883293,0.018169550225138664,0.021638575941324234,0.13753661513328552,0.027523484081029892,0.025227824226021767,0.034784745424985886,0.0041906400583684444,0.006696792319417,-0.05652680993080139,-0.06726512312889099,-0.011396585032343864,0.05187373235821724,0.020638858899474144,0.02362707443535328,-0.04012969508767128,0.01755630224943161,-0.07529232650995255,0.04122906178236008,-0.010271728970110416,0.029042428359389305,0.013428130187094212,0.006217195186764002,0.05128588527441025,-0.0070381490513682365,0.007274634670466185,0.0034497659653425217,-0.016121193766593933,-0.038616593927145004,-0.04140789434313774,-0.02536243014037609,-0.013201439753174782,0.06265582889318466,0.01203819178044796,0.010282444767653942,0.013476993888616562,-0.00753229483962059,0.014750846661627293,0.005193432327359915,-0.019336212426424026,0.012715703807771206,-0.02108185552060604,-0.02495560795068741,0.024819940328598022,0.0073660556226968765,-0.04321505129337311,-0.013048994354903698,0.01896815001964569,-0.02614774741232395,-0.0017165900208055973,0.08410234749317169,0.01905590109527111,0.031048081815242767,0.025527779012918472,-0.034240033477544785,-0.010521650314331055,0.008815350010991096,-0.016040511429309845,0.02854940854012966,-0.010509387589991093,-0.006108162458986044,0.033047471195459366,0.057226333767175674,-0.016329573467373848,-0.036788780242204666,0.0033149428199976683,-0.004605796653777361,-0.04552139714360237,0.06230327486991882,-0.04898450896143913,-0.017984719946980476,-0.057477597147226334,0.012690878473222256,0.039319299161434174,0.02161666564643383,-0.057779550552368164,-0.06897590309381485,-0.016269680112600327,0.03940366953611374,0.023105397820472717,0.02305794693529606,0.03232162818312645,-0.004560214001685381,0.024645494297146797,-0.042061831802129745,0.03094710037112236,-0.006475306581705809,0.03376387804746628,-0.013643025420606136,-0.09791013598442078,0.06587834656238556,-0.03081684000790119,-0.01839817874133587,0.0009034447139129043,0.034876879304647446,0.006865836214274168,-0.040356796234846115,0.017550909891724586,0.0012241782387718558,-0.027840903028845787,-0.054823264479637146,0.015927555039525032,0.00896509550511837,0.0010677175596356392,0.04377155378460884,-0.012969143688678741,0.011757123284041882,0.0013784648617729545,0.02711675874888897,-0.03890039399266243,-0.03813491761684418,-0.006072621792554855,0.04448472708463669,-0.011503919959068298,0.025235410779714584,-0.008161811158061028,0.025601405650377274,0.01825076714158058,-0.001158496248535812,0.020255694165825844,0.04217149317264557,-0.05057601258158684,-0.0039895763620734215,-0.01754324696958065,-0.03324119374155998,0.009837101213634014,0.03766939043998718,0.06446929275989532,0.072709821164608,-0.004999180324375629,-0.0313066802918911,0.03591782972216606,0.02841385453939438,0.01279121357947588,-0.05362432822585106,0.005513079930096865,0.035610634833574295,-0.005553177557885647,0.02525552734732628,0.05367662012577057,0.027669820934534073,0.0028104279190301895,-0.045562826097011566,-0.032023411244153976,-0.05613422393798828,-0.027146825566887856,0.03496053069829941,0.010530940257012844,0.014213026501238346,-0.011281965300440788,0.03621983900666237,0.01754269003868103,-0.006051330827176571,-0.003911533392965794,0.044852275401353836,-0.023335197940468788,-0.03212638571858406,0.007369460538029671,0.001324548851698637,0.09858060628175735,-0.0025815656408667564,-0.057758163660764694,0.007677328772842884,-0.02346460334956646,-0.021919909864664078,-0.03001982346177101,-0.03959214314818382,-0.008890367113053799,-0.022005567327141762,0.047798849642276764,-0.009428688324987888,-0.07435935735702515,0.03206437826156616,0.02255638875067234,0.0033552933018654585,-0.0018857002723962069,0.003971587400883436,0.03929934650659561,0.04466714709997177,-0.02840578742325306,0.029315609484910965,-0.039621900767087936,-0.03179357573390007,-0.007560734171420336,-0.03754015266895294,-0.0016676202649250627,0.010434374213218689,-0.02847353182733059,-0.007485377136617899,0.03417258709669113,-0.06132930889725685,-0.040369272232055664,-0.08739796280860901,-0.013877863995730877,0.011698585003614426,0.018065769225358963,-0.055066123604774475,-0.037144217640161514,0.04802025109529495,-0.014722499065101147,0.07715138047933578,-0.0426020473241806,0.007907062768936157,0.0006086765206418931,0.007711295038461685,0.005933557171374559,0.02163107879459858,-0.03670670837163925,0.07300698012113571,-0.0019936026073992252,0.021998142823576927,0.045873552560806274,0.04621254280209541,0.01969710737466812,0.027277914807200432,0.038424380123615265,-0.0723225399851799,-0.010160810314118862,-0.012600964866578579,0.030639220029115677,-0.05037173256278038,0.029885340481996536,0.040582504123449326,-0.007691801525652409,-0.008045462891459465,-0.005170694086700678,-0.04135223105549812,-0.07794566452503204,0.04489561542868614,0.003437306731939316,0.008597319945693016,0.01411093957722187,0.0008553750230930746,0.01864507421851158,0.008649556897580624,-0.009731142781674862,0.04009705409407616,0.036392804235219955,0.017367655411362648,-0.017932036891579628,-0.024911371991038322,0.009494173340499401,-0.034402113407850266,-0.007154327351599932,-0.044909730553627014,-0.043769124895334244,0.020996030420064926,0.014466850087046623,-0.007887674495577812,0.016137151047587395,-0.046620484441518784,-0.03481437638401985,0.07719995826482773,0.018378721550107002,0.032541848719120026,0.013833662495017052,-0.016448549926280975,0.005395449232310057,0.01243259571492672,-0.01282127108424902,0.002328071743249893,-0.07851850241422653,-0.027475373819470406,0.04671118035912514,0.04198131710290909,0.12277482450008392,-0.010557657107710838,-0.03793976083397865,0.03216204047203064,0.04153115674853325,-0.0013273534132167697,0.023789923638105392,-0.045123808085918427,0.027241721749305725,-0.006025584880262613,0.02570115216076374,0.014026683755218983,-0.009865284897387028,-0.0373103953897953,0.01477764081209898,0.017514631152153015,0.020202679559588432,0.009012934751808643,0.05437389761209488,-0.06204691529273987,0.05651423707604408,-0.007120345253497362,0.018206138163805008,-0.005256918724626303,0.014586900360882282,0.03316202387213707,0.0066522639244794846,0.08701713383197784,0.01369453128427267,0.053837940096855164,-0.0012503217440098524,-0.05828254297375679,0.029095172882080078,0.04025920107960701,-0.03543991222977638,0.009615513496100903,-0.0010181630495935678,-0.006307098548859358,0.011940780095756054,-0.003673712257295847,-0.04219619184732437,0.004721078556030989,0.0509285032749176,-0.09442038834095001,-0.002014555037021637,0.041190698742866516,0.022998303174972534,-0.00200688187032938,0.018413901329040527,-0.03075757436454296,0.013902208767831326,-0.039114128798246384,0.006875543389469385,0.009042920544743538,0.021350597962737083,-0.0027137198485434055,0.035600584000349045,0.019544057548046112,0.003038294380530715,-0.020294973626732826,0.0027513462118804455,-0.02093357965350151,0.011749009601771832,-0.04778733476996422,0.004908675793558359,-0.07577591389417648,-0.01874116249382496,-0.01795637607574463,-0.010575230233371258,0.0001813965936889872,-0.0033671404235064983,0.02037781849503517,-0.0031422669999301434,-0.060150619596242905,-0.05524621903896332,0.018897367641329765,-0.0319536030292511,-0.03097166307270527,0.037012387067079544,0.010217714123427868,0.06884361058473587,-0.002913692267611623,-0.04640928655862808,-0.009995593689382076,-0.014446797780692577,0.007621380966156721,0.02696099318563938,-0.020633509382605553,-0.014667991548776627,-0.029540322721004486,-0.03155094385147095,-0.017198659479618073,-0.016143033280968666,-0.06407501548528671,0.0004765284829773009,-0.033137645572423935,-0.026598412543535233,0.025267183780670166,0.01376529410481453,0.029484795406460762,-0.010676924139261246,-0.041266657412052155,0.028642214834690094,0.015749406069517136,-0.017437109723687172,0.04659460484981537,-0.009725484065711498,0.002133717527613044,0.07720666378736496,0.011787677183747292,-0.038282524794340134,-0.03034970536828041,-0.02106444537639618,0.01018091943114996,-0.022058235481381416,-0.04083293303847313,-0.008608062751591206,-0.027028575539588928,-0.01747029274702072,0.06289774179458618,0.001559355529025197,0.0335778146982193,0.007835425436496735,0.04007188230752945,0.02038029208779335,-0.02695423550903797,-0.05281354486942291,0.038069531321525574,-0.02896345965564251,-0.007247596047818661,0.024264492094516754,0.030528347939252853,0.03550763800740242,-0.049527235329151154,-0.06385426968336105,0.022827697917819023,0.001849647960625589,-0.026627467945218086,-0.03891918435692787,-0.01589527167379856,0.023087264969944954,-0.02193961851298809,-0.052785392850637436,-0.001996445469558239,0.0276787169277668,0.02712354063987732,-0.016178356483578682,-0.008084605447947979,-0.02048325724899769,0.01971895806491375,-0.02403182163834572,0.02305811457335949,-0.025230851024389267,0.017832856625318527,0.011000141501426697,0.038389693945646286,0.03664611279964447,-0.052660126239061356,0.005152364727109671,0.02933354303240776,-0.012247140519320965,-0.017401590943336487,0.023764370009303093,-0.008974322117865086,0.02183370850980282,0.009572331793606281,-0.024748435243964195,-0.004438066855072975,-0.05011872202157974,-0.01939685456454754,0.03443944826722145,-0.043391063809394836,0.024584712460637093,0.032975468784570694,0.0013716088142246008,0.039921198040246964,0.011286184191703796,-0.06582861393690109,-0.031213779002428055,-0.02405048906803131,-0.006587350741028786,-0.011305616237223148,0.04325523227453232,0.021773412823677063,0.039326589554548264,-0.02547501213848591,0.0065231011249125,0.006832419894635677,0.015374050475656986,-0.10006795823574066,0.006851435173302889,-0.03386003524065018,-0.01882409304380417,-6.624881919090957e-33,-0.0039062215946614742,0.020116250962018967,-0.0748245120048523,0.02844138815999031,-0.07227683812379837,-0.03278222307562828,0.019293788820505142,-0.005329708568751812,0.00520023237913847,-0.006958463229238987,-0.0005380792426876724,-0.0453905425965786,0.0017941002734005451,0.013560999184846878,-0.06307841092348099,0.012912949547171593,0.054366424679756165,0.02898215316236019,-0.017985133454203606,0.019994469359517097,-0.050168778747320175,0.014025332406163216,-0.02113179676234722,-0.05679498240351677,-0.02601650170981884,0.01680806465446949,0.001535367569886148,0.005802704021334648,0.0065583535470068455,0.027242625132203102,-0.014363545924425125,-0.018948735669255257,-0.04373926296830177,0.041167739778757095,0.014829246327280998,-0.004400533623993397,-0.05542982742190361,-0.0193342175334692,0.016090447083115578,0.024851346388459206,-0.010517197661101818,0.02747613936662674,0.03313291445374489,0.005420423112809658,0.018792416900396347,-0.013817179016768932,0.015637319535017014,0.021446479484438896,0.013258276507258415,-0.02950126864016056,-0.0280431117862463,0.042228683829307556,-0.03070530667901039,-0.004449567291885614,0.040116071701049805,0.004376209806650877,0.06855707615613937,-0.03838679939508438,-0.05831287056207657,-0.010630430653691292,-0.041525665670633316,-0.03929312899708748,-0.02444656752049923,0.06390924751758575,0.045552726835012436,0.05658063665032387,0.0003016761620528996,0.017244825139641762,-0.018721694126725197,0.08335135877132416,0.00348748080432415,0.005716471467167139,0.027636926621198654,-0.10603779554367065,0.015432212501764297,0.042546577751636505,0.04268118366599083,-0.016417959704995155,-0.007109234109520912,0.046710867434740067,0.025683322921395302,0.025596903637051582,-0.00513766473159194,0.003085910342633724,-0.02503456361591816,-0.10588870197534561,0.0032603153958916664,-0.008630131371319294,0.002352176234126091,0.014226756989955902,0.0030079553835093975,0.05810985714197159,-0.03588235750794411,0.089946448802948,-0.015859505161643028,-0.07113277912139893,0.0410291850566864,0.04485052078962326,0.0078551284968853,-0.045198775827884674,0.07528338581323624,-0.026852846145629883,-0.0768096074461937,-0.05743930861353874,0.003947623539716005,-0.0030234085861593485,-0.040252309292554855,-0.006603620946407318,-0.02448185160756111,0.017757488414645195,0.00691376905888319,0.01916508935391903,-0.006436475086957216,0.02809906005859375,0.001508257002569735,-0.04222797974944115,-0.023119229823350906,0.07410233467817307,-0.006084818858653307,0.0542258657515049,-0.011611237190663815,-0.0023016969207674265,-0.044446032494306564,0.017342394217848778,-0.02090928703546524,-0.022483892738819122,0.004436152055859566,0.009058455936610699,0.053917672485113144,-0.03569785878062248,-0.00035954322083853185,0.04566243663430214,2.696575620575459e-7,-0.027196628972887993,0.05528785288333893,-0.03916006535291672,0.001069617341272533,-0.0023705658968538046,-0.038201335817575455,-0.009489689022302628,-0.05588093027472496,0.017720988020300865,-0.047054026275873184,0.007726526819169521,0.011604693718254566,0.024202194064855576,0.04120226204395294,-0.008743928745388985,-0.07197805494070053,0.03641820698976517,-0.036945316940546036,-0.027636321261525154,0.04978545755147934,-0.002567327581346035,0.020893823355436325,0.11786440014839172,0.040125053375959396,-0.01959044486284256,0.05622662603855133,-0.0058427839539945126,0.04022405296564102,0.06216663122177124,0.013216872699558735,-0.014302870258688927,-0.0008968778420239687,-0.007587323430925608,-0.0011596591211855412,-0.007562263403087854,0.00477558420971036,0.019555266946554184,-0.006182712968438864,-0.01931583695113659,0.053490009158849716,0.043319910764694214,0.00795773509889841,-0.029476620256900787,-0.05976405739784241,-0.00781742762774229,-0.03427954390645027,-0.03770802542567253,0.000014069280950934626,0.00787756685167551,0.00890397746115923,0.0005653315456584096,0.008003671653568745,-0.04068887233734131,-0.019932549446821213,0.024337902665138245,0.0019332545343786478,-0.009901704266667366,0.02601103112101555,0.034251999109983444,0.03564661368727684,-0.029097922146320343,-0.05455947667360306,0.029555050656199455,0.03944399952888489,0.003831905545666814,0.013895547017455101,-0.04305107519030571,3.3965877124586342e-34,0.05473055690526962,-0.021516766399145126,0.010606667026877403,0.05396175757050514,0.04562143236398697,-0.0049976566806435585,0.05994580313563347,-0.0037064175121486187,0.016030699014663696,-0.057661112397909164,-0.03923642635345459]'
SET
  @HasCustomProps_27c0078a = 1
SET
  @HasCustomEvents_27c0078a = 0
SET
  @RequiresData_27c0078a = 1
SET
  @DependencyCount_27c0078a = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_27c0078a = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_27c0078a = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_27c0078a = 1
SET
  @ID_27c0078a = 'ECAEA5F2-8E3B-4C25-B896-3132AFE8F477'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_27c0078a,
  @Name = @Name_27c0078a,
  @Version = @Version_27c0078a,
  @VersionSequence = @VersionSequence_27c0078a,
  @Title = @Title_27c0078a,
  @Description = @Description_27c0078a,
  @Type = @Type_27c0078a,
  @Status = @Status_27c0078a,
  @DeveloperName = @DeveloperName_27c0078a,
  @DeveloperEmail = @DeveloperEmail_27c0078a,
  @DeveloperOrganization = @DeveloperOrganization_27c0078a,
  @SourceRegistryID = @SourceRegistryID_27c0078a,
  @ReplicatedAt = @ReplicatedAt_27c0078a,
  @LastSyncedAt = @LastSyncedAt_27c0078a,
  @Specification = @Specification_27c0078a,
  @FunctionalRequirements = @FunctionalRequirements_27c0078a,
  @TechnicalDesign = @TechnicalDesign_27c0078a,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_27c0078a,
  @TechnicalDesignVector = @TechnicalDesignVector_27c0078a,
  @HasCustomProps = @HasCustomProps_27c0078a,
  @HasCustomEvents = @HasCustomEvents_27c0078a,
  @RequiresData = @RequiresData_27c0078a,
  @DependencyCount = @DependencyCount_27c0078a,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_27c0078a,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_27c0078a,
  @HasRequiredCustomProps = @HasRequiredCustomProps_27c0078a,
  @ID = @ID_27c0078a;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_db175272 NVARCHAR(MAX),
@Name_db175272 NVARCHAR(500),
@Version_db175272 NVARCHAR(50),
@VersionSequence_db175272 INT,
@Title_db175272 NVARCHAR(1000),
@Description_db175272 NVARCHAR(MAX),
@Type_db175272 NVARCHAR(255),
@Status_db175272 NVARCHAR(50),
@DeveloperName_db175272 NVARCHAR(255),
@DeveloperEmail_db175272 NVARCHAR(255),
@DeveloperOrganization_db175272 NVARCHAR(255),
@SourceRegistryID_db175272 UNIQUEIDENTIFIER,
@ReplicatedAt_db175272 DATETIMEOFFSET,
@LastSyncedAt_db175272 DATETIMEOFFSET,
@Specification_db175272 NVARCHAR(MAX),
@FunctionalRequirements_db175272 NVARCHAR(MAX),
@TechnicalDesign_db175272 NVARCHAR(MAX),
@FunctionalRequirementsVector_db175272 NVARCHAR(MAX),
@TechnicalDesignVector_db175272 NVARCHAR(MAX),
@HasCustomProps_db175272 BIT,
@HasCustomEvents_db175272 BIT,
@RequiresData_db175272 BIT,
@DependencyCount_db175272 INT,
@TechnicalDesignVectorEmbeddingModelID_db175272 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_db175272 NVARCHAR(MAX),
@HasRequiredCustomProps_db175272 BIT,
@ID_db175272 UNIQUEIDENTIFIER
SET
  @Namespace_db175272 = N'AI/Analytics'
SET
  @Name_db175272 = N'AIPromptsCluster'
SET
  @Version_db175272 = N'1.0.0'
SET
  @VersionSequence_db175272 = 1
SET
  @Title_db175272 = N'AI Prompts Cluster Visualization'
SET
  @Description_db175272 = N'Interactive clustering visualization of AI prompts using semantic embeddings to discover patterns and relationships'
SET
  @Type_db175272 = N'Dashboard'
SET
  @Status_db175272 = N'Published'
SET
  @Specification_db175272 = N'{"name":"AIPromptsCluster","title":"AI Prompts Cluster Visualization","description":"Interactive clustering visualization of AI prompts using semantic embeddings to discover patterns and relationships","type":"dashboard","location":"embedded","code":"function AIPromptsCluster({ \n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings,\n  data \n}) {\n  // Extract AIInsightsPanel from components\n  const AIInsightsPanel = components?.AIInsightsPanel;\n  \n  if (!AIInsightsPanel) {\n    console.warn(''AIInsightsPanel component not available'');\n  }\n\n  // Load sub-components\n  const ClusterGraph = components[''AIPromptsClusterGraph''];\n  const ClusterControls = components[''AIPromptsClusterControls''];\n  const ClusterDetails = components[''AIPromptsClusterDetails''];\n  const DataExportPanel = components[''DataExportPanel''];\n  \n  console.log(''🔍 [AIPromptsCluster] Component loading check:'');\n  console.log(''  - ClusterGraph:'', !!ClusterGraph);\n  console.log(''  - ClusterControls:'', !!ClusterControls);\n  console.log(''  - ClusterDetails:'', !!ClusterDetails);\n  console.log(''  - DataExportPanel:'', !!DataExportPanel);\n  console.log(''  - All components object:'', Object.keys(components || {}));\n  console.log(''  - DataExportPanel type:'', typeof DataExportPanel);\n  \n  // Debug when DataExportPanel changes\n  useEffect(() => {\n    console.log(''📌 [AIPromptsCluster] DataExportPanel updated:'', !!DataExportPanel);\n    if (DataExportPanel) {\n      console.log(''  - DataExportPanel is a:'', typeof DataExportPanel);\n      console.log(''  - DataExportPanel.toString():'', DataExportPanel.toString().substring(0, 100));\n    }\n  }, [DataExportPanel]);\n\n  // State management\n  const [prompts, setPrompts] = useState([]);\n  const [embeddings, setEmbeddings] = useState({});\n  \n  // Ref for cluster visualization\n  const clusterGraphRef = useRef(null);\n  const [clusters, setClusters] = useState([]);\n  const [selectedPrompt, setSelectedPrompt] = useState(null);\n  const [filters, setFilters] = useState({\n    search: '''',\n    category: null,\n    type: null,\n    status: ''Active'',\n    role: null\n  });\n  const [clusterCount, setClusterCount] = useState(5);\n  const [similarityThreshold, setSimilarityThreshold] = useState(0.7);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [highlightCluster, setHighlightCluster] = useState(null);\n  const [clusterNames, setClusterNames] = useState({});\n  \n  // AI Insights state\n  const [aiInsights, setAiInsights] = useState(null);\n  const [loadingInsights, setLoadingInsights] = useState(false);\n  const [insightsError, setInsightsError] = useState(null);\n\n  // Load AI Prompts data on mount\n  useEffect(() => {\n    loadPrompts();\n  }, []);\n\n  // Load prompts from database\n  const loadPrompts = async () => {\n    try {\n      setIsProcessing(true);\n      setError(null);\n      \n      const result = await utilities.rv.RunView({\n        EntityName: ''AI Prompts'',\n        OrderBy: ''Name'',\n        ResultType: ''entity_object''\n      });\n      \n      if (result.Success && result.Results) {\n        setPrompts(result.Results);\n        // Load saved embeddings if available\n        const savedEmbeddings = savedUserSettings?.embeddings || {};\n        setEmbeddings(savedEmbeddings);\n      } else {\n        setError(''Failed to load AI Prompts'');\n      }\n    } catch (err) {\n      setError(`Error loading prompts: $' + '{err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Generate embeddings for prompts that don''t have them\n  const generateEmbeddings = async () => {\n    try {\n      setIsProcessing(true);\n      setError(null);\n      \n      // Filter prompts that need embeddings\n      const promptsNeedingEmbeddings = filteredPrompts.filter(\n        p => !embeddings[p.ID] && p.TemplateText && p.TemplateText.length > 0\n      );\n      \n      if (promptsNeedingEmbeddings.length === 0) {\n        // All prompts already have embeddings\n        performClustering();\n        return;\n      }\n      \n      // Batch process embeddings\n      const batchSize = 10;\n      const newEmbeddings = { ...embeddings };\n      \n      for (let i = 0; i < promptsNeedingEmbeddings.length; i += batchSize) {\n        const batch = promptsNeedingEmbeddings.slice(i, i + batchSize);\n        const texts = batch.map(p => p.TemplateText);\n        \n        try {\n          const result = await utilities.ai.EmbedText({\n            textToEmbed: texts,\n            modelSize: ''small''\n          });\n          \n          // Store embeddings\n          batch.forEach((prompt, idx) => {\n            newEmbeddings[prompt.ID] = result.result[idx];\n          });\n          \n          // Update state incrementally\n          setEmbeddings(newEmbeddings);\n        } catch (err) {\n          console.error(''Error generating embeddings for batch:'', err);\n        }\n      }\n      \n      // Save embeddings to user settings\n      onSaveUserSettings({\n        ...savedUserSettings,\n        embeddings: newEmbeddings\n      });\n      \n      // Perform clustering with new embeddings\n      performClustering(newEmbeddings);\n      \n    } catch (err) {\n      setError(`Error generating embeddings: $' + '{err.message}`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Perform clustering on embeddings\n  const performClustering = (embeddingsToUse = embeddings) => {\n    try {\n      const promptsWithEmbeddings = filteredPrompts.filter(\n        p => embeddingsToUse[p.ID]\n      );\n      \n      if (promptsWithEmbeddings.length < 2) {\n        setError(''Need at least 2 prompts with embeddings to perform clustering'');\n        return;\n      }\n      \n      // Prepare data for clustering\n      const vectors = promptsWithEmbeddings.map(p => embeddingsToUse[p.ID]);\n      const vectorService = utilities.ai.VectorService;\n      \n      // Perform k-means clustering\n      // First load vectors into the service\n      const vectorMap = new Map();\n      promptsWithEmbeddings.forEach((prompt, idx) => {\n        vectorMap.set(prompt.ID, embeddingsToUse[prompt.ID]);\n      });\n      vectorService.LoadVectors(vectorMap);\n      \n      // Then perform clustering\n      const clusterResult = vectorService.KMeansCluster(\n        Math.min(clusterCount, promptsWithEmbeddings.length),\n        100, // max iterations\n        ''cosine'' // distance metric\n      );\n      \n      // Map cluster assignments back to prompts\n      const clusteredPrompts = promptsWithEmbeddings.map((prompt) => {\n        // Find which cluster this prompt belongs to\n        let assignedCluster = 0;\n        clusterResult.clusters.forEach((members, clusterId) => {\n          if (members.includes(prompt.ID)) {\n            assignedCluster = clusterId;\n          }\n        });\n        \n        // Store the original prompt entity along with cluster data\n        return {\n          entity: prompt,  // Keep the original entity object\n          cluster: assignedCluster,\n          embedding: embeddingsToUse[prompt.ID],\n          // Expose commonly used properties for convenience\n          ID: prompt.ID,\n          Name: prompt.Name,\n          Category: prompt.Category,\n          Type: prompt.Type,\n          Description: prompt.Description,\n          Status: prompt.Status,\n          TemplateText: prompt.TemplateText\n        };\n      });\n      \n      setClusters(clusteredPrompts);\n      \n      // Generate names for clusters\n      generateClusterNames(clusteredPrompts);\n      \n    } catch (err) {\n      setError(`Error performing clustering: $' + '{err.message}`);\n    }\n  };\n  \n  // Generate AI-powered names for clusters\n  const generateClusterNames = async (clusteredPrompts) => {\n    try {\n      // Group prompts by cluster\n      const clusterGroups = {};\n      clusteredPrompts.forEach(prompt => {\n        if (!clusterGroups[prompt.cluster]) {\n          clusterGroups[prompt.cluster] = [];\n        }\n        clusterGroups[prompt.cluster].push(prompt);\n      });\n      \n      // Prepare cluster summaries for AI\n      const clusterSummaries = {};\n      Object.entries(clusterGroups).forEach(([clusterId, prompts]) => {\n        // Get unique categories and types\n        const categories = [...new Set(prompts.map(p => p.Category).filter(Boolean))];\n        const types = [...new Set(prompts.map(p => p.Type).filter(Boolean))];\n        \n        // Sample prompt names (up to 5)\n        const sampleNames = prompts.slice(0, 5).map(p => p.Name);\n        \n        // Sample template texts (first 150 chars, up to 3 prompts)\n        const templateSamples = prompts\n          .slice(0, 3)\n          .map(p => p.TemplateText ? p.TemplateText.substring(0, 150) + ''...'' : '''')\n          .filter(Boolean);\n        \n        clusterSummaries[clusterId] = {\n          promptCount: prompts.length,\n          sampleNames,\n          categories,\n          types,\n          templateSamples\n        };\n      });\n      \n      // Create a single prompt for all clusters\n      const namingPrompt = `Analyze these clusters of AI prompts and generate concise, descriptive names (2-4 words) for each cluster based on their common themes or purposes.\n\n$' + '{Object.entries(clusterSummaries).map(([id, summary]) => `\nCluster $' + '{parseInt(id) + 1}:\n- $' + '{summary.promptCount} prompts total\n- Sample names: $' + '{summary.sampleNames.join('', '')}\n- Categories: $' + '{summary.categories.length > 0 ? summary.categories.join('', '') : ''Various''}\n- Types: $' + '{summary.types.length > 0 ? summary.types.join('', '') : ''Various''}\n- Template samples: $' + '{summary.templateSamples.length > 0 ? summary.templateSamples[0].substring(0, 100) : ''N/A''}\n`).join(''\\n'')}\n\nReturn a JSON object with cluster numbers as keys and descriptive names as values. Example format:\n{\n  \"0\": \"Data Analysis Tools\",\n  \"1\": \"User Communication\",\n  \"2\": \"System Administration\"\n}\n\nOnly return the JSON object, nothing else.`;\n      \n      // Call AI to generate names using ExecutePrompt\n      const result = await utilities.ai.ExecutePrompt({\n        systemPrompt: namingPrompt,\n        modelPower: ''lowest'' // This is a simple task, use the cheapest/fastest model\n      });\n      \n      if (result && result.success && result.result) {\n        try {\n          // Parse the JSON response - ExecutePrompt may already parse it for us\n          const names = result.resultObject || JSON.parse(result.result);\n          setClusterNames(names);\n          \n          // Optionally save to user settings\n          if (onSaveUserSettings) {\n            onSaveUserSettings({\n              ...savedUserSettings,\n              clusterNames: names\n            });\n          }\n        } catch (parseErr) {\n          console.error(''Failed to parse cluster names:'', parseErr);\n          // Fall back to numbered clusters\n          const fallbackNames = {};\n          Object.keys(clusterSummaries).forEach(id => {\n            fallbackNames[id] = `Cluster $' + '{parseInt(id) + 1}`;\n          });\n          setClusterNames(fallbackNames);\n        }\n      }\n    } catch (err) {\n      console.error(''Error generating cluster names:'', err);\n      // Don''t let this break the clustering - just use numbers\n    }\n  };\n\n  // Filter prompts based on current filters\n  const filteredPrompts = useMemo(() => {\n    return prompts.filter(prompt => {\n      // Search filter\n      if (filters.search) {\n        const searchLower = filters.search.toLowerCase();\n        const matchesSearch = \n          prompt.Name?.toLowerCase().includes(searchLower) ||\n          prompt.Description?.toLowerCase().includes(searchLower) ||\n          prompt.TemplateText?.toLowerCase().includes(searchLower);\n        if (!matchesSearch) return false;\n      }\n      \n      // Category filter\n      if (filters.category && prompt.CategoryID !== filters.category) {\n        return false;\n      }\n      \n      // Type filter\n      if (filters.type && prompt.TypeID !== filters.type) {\n        return false;\n      }\n      \n      // Status filter\n      if (filters.status && prompt.Status !== filters.status) {\n        return false;\n      }\n      \n      // Role filter\n      if (filters.role && prompt.PromptRole !== filters.role) {\n        return false;\n      }\n      \n      return true;\n    });\n  }, [prompts, filters]);\n\n  // Get unique categories and types for filters\n  const categories = useMemo(() => {\n    const uniqueCategories = new Map();\n    prompts.forEach(p => {\n      if (p.CategoryID && p.Category) {\n        uniqueCategories.set(p.CategoryID, p.Category);\n      }\n    });\n    return Array.from(uniqueCategories, ([id, name]) => ({ id, name }));\n  }, [prompts]);\n\n  const types = useMemo(() => {\n    const uniqueTypes = new Map();\n    prompts.forEach(p => {\n      if (p.TypeID && p.Type) {\n        uniqueTypes.set(p.TypeID, p.Type);\n      }\n    });\n    return Array.from(uniqueTypes, ([id, name]) => ({ id, name }));\n  }, [prompts]);\n\n  // Format insights text using marked library for proper markdown rendering\n\n  const generateAIInsights = async () => {\n    if (clusters.length === 0) {\n      setInsightsError(''Please generate clusters first'');\n      return;\n    }\n    \n    setLoadingInsights(true);\n    setInsightsError(null);\n    \n    try {\n      // Prepare cluster analysis data\n      const clusterAnalysis = clusters.map((cluster, idx) => {\n        const clusterPrompts = filteredPrompts.filter(p => \n          embeddings[p.ID] && cluster.members.includes(p.ID)\n        );\n        \n        return {\n          id: idx,\n          name: clusterNames[idx] || `Cluster $' + '{idx + 1}`,\n          size: clusterPrompts.length,\n          prompts: clusterPrompts.slice(0, 3).map(p => p.Name), // Sample prompts\n          categories: [...new Set(clusterPrompts.map(p => p.Category).filter(Boolean))],\n          types: [...new Set(clusterPrompts.map(p => p.Type).filter(Boolean))],\n          roles: [...new Set(clusterPrompts.map(p => p.PromptRole).filter(Boolean))]\n        };\n      });\n      \n      const prompt = `Analyze this AI prompts clustering data and provide insights:\n\nCluster Analysis:\n$' + '{JSON.stringify(clusterAnalysis, null, 2)}\n\nTotal Prompts: $' + '{prompts.length}\nFiltered Prompts: $' + '{filteredPrompts.length}\nNumber of Clusters: $' + '{clusters.length}\nSimilarity Threshold: $' + '{similarityThreshold}\n\nPlease provide:\n1. **Cluster Quality Assessment** - How well-defined and coherent are the clusters?\n2. **Thematic Patterns** - What themes or patterns emerge from the clustering?\n3. **Distribution Analysis** - How are prompts distributed across clusters?\n4. **Outliers and Anomalies** - Any unusual patterns or isolated prompts?\n5. **Optimization Suggestions** - How could the clustering be improved?\n6. **Business Insights** - What does this clustering reveal about the prompt library?\n7. **Recommendations** - Specific actions to improve prompt organization\n\nFormat your response in clear markdown with headers and bullet points.`;\n      \n      const result = await utilities.ai.ExecutePrompt({\n        systemPrompt: ''You are an expert in natural language processing, clustering analysis, and prompt engineering. Analyze the clustering results and provide actionable insights about the AI prompt library organization.'',\n        messages: prompt,\n        preferredModels: [''GPT-OSS-120B'', ''Qwen3 32B''],\n        modelPower: ''high'',\n        temperature: 0.7,\n        maxTokens: 1500\n      });\n      \n      if (result?.success && result?.result) {\n        setAiInsights(result.result);\n      } else {\n        setInsightsError(''Failed to generate insights. Please try again.'');\n      }\n    } catch (error) {\n      setInsightsError(error.message || ''Failed to generate AI insights'');\n    } finally {\n      setLoadingInsights(false);\n    }\n  };\n  \n  // Calculate similar prompts for selected prompt\n  const similarPrompts = useMemo(() => {\n    if (!selectedPrompt || !embeddings[selectedPrompt.ID]) return [];\n    \n    const selectedEmbedding = embeddings[selectedPrompt.ID];\n    const vectorService = utilities.ai.VectorService;\n    \n    // Calculate similarities to all other prompts with embeddings\n    const similarities = filteredPrompts\n      .filter(p => p.ID !== selectedPrompt.ID && embeddings[p.ID])\n      .map(prompt => {\n        // Use CalculateDistance with cosine metric and convert to similarity\n        const distance = vectorService.CalculateDistance(\n          selectedEmbedding,\n          embeddings[prompt.ID],\n          ''cosine''\n        );\n        return {\n          prompt,\n          similarity: 1 - distance // Convert distance to similarity\n        };\n      })\n      .sort((a, b) => b.similarity - a.similarity)\n      .slice(0, 5); // Top 5 similar prompts\n    \n    return similarities;\n  }, [selectedPrompt, embeddings, filteredPrompts]);\n\n  // Get cluster info for selected prompt\n  const clusterInfo = useMemo(() => {\n    if (!selectedPrompt || clusters.length === 0) return null;\n    \n    const clusteredPrompt = clusters.find(p => p.ID === selectedPrompt.ID);\n    if (!clusteredPrompt) return null;\n    \n    const clusterMembers = clusters.filter(p => p.cluster === clusteredPrompt.cluster);\n    \n    return {\n      clusterIndex: clusteredPrompt.cluster,\n      clusterSize: clusterMembers.length,\n      clusterMembers: clusterMembers.slice(0, 10).map(member => ({\n        ...member,\n        // Ensure entity is available for navigation\n        entity: member.entity\n      }))\n    };\n  }, [selectedPrompt, clusters]);\n\n  // Event handlers\n  const handlePromptSelect = (promptOrClusteredPrompt) => {\n    // If it''s a clustered prompt object, extract the entity\n    // Otherwise use the prompt as-is\n    const prompt = promptOrClusteredPrompt?.entity || promptOrClusteredPrompt;\n    setSelectedPrompt(prompt);\n    setHighlightCluster(null);\n  };\n\n  const handleClusterSelect = (clusterIndex) => {\n    setHighlightCluster(clusterIndex);\n    setSelectedPrompt(null);\n  };\n\n  const handleRecalculate = () => {\n    generateEmbeddings();\n  };\n\n  // Prepare export data for DataExportPanel\n  const prepareExportData = () => {\n    console.log(''🔍 [AIPromptsCluster] prepareExportData called'');\n    console.log(''🔍 [AIPromptsCluster] clusters:'', clusters);\n    console.log(''🔍 [AIPromptsCluster] clusters length:'', clusters?.length);\n    console.log(''🔍 [AIPromptsCluster] clusterNames:'', clusterNames);\n    \n    // Return empty array if no clusters\n    if (!clusters || clusters.length === 0) {\n      console.log(''⚠️ [AIPromptsCluster] No clusters available for export'');\n      return [];\n    }\n    \n    const exportData = clusters.map(prompt => ({\n      ID: prompt.ID || '''',\n      Name: prompt.Name || '''',\n      Category: prompt.Category || '''',\n      Type: prompt.Type || '''',\n      // Use the LLM-generated cluster name if available, otherwise fall back to numbered cluster\n      ClusterName: clusterNames[prompt.cluster] || `Cluster $' + '{prompt.cluster + 1}`,\n      Status: prompt.Status || '''',\n      PromptRole: prompt.PromptRole || '''',\n      ResponseFormat: prompt.ResponseFormat || ''''\n    }));\n    \n    console.log(''🔍 [AIPromptsCluster] exportData prepared:'', exportData);\n    console.log(''🔍 [AIPromptsCluster] exportData length:'', exportData?.length);\n    console.log(''🔍 [AIPromptsCluster] Sample export row:'', exportData[0]);\n    \n    return exportData;\n  };\n\n  // Define export columns - DataExportPanel expects key/label not field/header\n  const getExportColumns = () => {\n    const columns = [\n      { key: ''ID'', label: ''ID'' },\n      { key: ''Name'', label: ''Name'' },\n      { key: ''Category'', label: ''Category'' },\n      { key: ''Type'', label: ''Type'' },\n      { key: ''ClusterName'', label: ''Cluster'' },  // Only export cluster name, not redundant number\n      { key: ''Status'', label: ''Status'' },\n      { key: ''PromptRole'', label: ''Role'' },\n      { key: ''ResponseFormat'', label: ''Response Format'' }\n    ];\n    console.log(''🔍 [AIPromptsCluster] Export columns defined:'', columns);\n    return columns;\n  };\n\n  const handleEditPrompt = (promptId) => {\n    callbacks.OpenEntityRecord(''AI Prompts'', [\n      { FieldName: ''ID'', Value: promptId }\n    ]);\n  };\n  \n  // Function to get the cluster visualization element for PDF export\n  // Using a callback function to ensure we get the element at export time\n  const getClusterVisualization = useCallback(() => {\n    console.log(''🎨 [AIPromptsCluster] Getting cluster visualization for PDF export'');\n    if (!clusterGraphRef.current) {\n      console.warn(''⚠️ Cluster graph ref not available'');\n      return null;\n    }\n    \n    // Return the container div which html2canvas can handle better\n    // html2canvas has issues with standalone SVG elements from React components\n    console.log(''📦 Returning cluster graph container for capture'');\n    console.log(''  - Container dimensions:'', {\n      width: clusterGraphRef.current.offsetWidth,\n      height: clusterGraphRef.current.offsetHeight,\n      hasContent: clusterGraphRef.current.children.length > 0\n    });\n    \n    // Return the container which includes the SVG/canvas in context\n    return clusterGraphRef.current;\n  }, []);\n\n  // Render component\n  return (\n    <div style={{\n      display: ''flex'',\n      flexDirection: ''column'',\n      height: ''100%'',\n      padding: styles.spacing?.md || ''16px'',\n      backgroundColor: styles.colors?.background || ''#f5f5f5'',\n      fontFamily: styles.fonts?.body || ''system-ui, -apple-system, sans-serif''\n    }}>\n      {/* Header */}\n      <div style={{\n        marginBottom: styles.spacing?.md || ''16px''\n      }}>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''flex-start''\n        }}>\n          <div>\n            <h2 style={{\n              fontSize: styles.fonts?.sizes?.xl || ''24px'',\n              fontWeight: ''bold'',\n              color: styles.colors?.text?.primary || ''#333'',\n              margin: 0\n            }}>\n              AI Prompts Cluster Analysis\n            </h2>\n            <p style={{\n              fontSize: styles.fonts?.sizes?.sm || ''14px'',\n              color: styles.colors?.text?.secondary || ''#666'',\n              marginTop: styles.spacing?.xs || ''4px''\n            }}>\n              Discover patterns and relationships in your AI prompts through semantic clustering\n            </p>\n          </div>\n          \n          {/* Export and AI Insights buttons */}\n          <div style={{\n            display: ''flex'',\n            gap: ''12px'',\n            alignItems: ''center''\n          }}>\n            {/* Export Button */}\n            {DataExportPanel && clusters.length > 0 && (\n              <DataExportPanel\n                data={prepareExportData()}\n                columns={getExportColumns()}\n                filename={`ai-prompts-clusters-$' + '{new Date().toISOString().split(''T'')[0]}`}\n                formats={[''csv'', ''excel'', ''pdf'']}\n                buttonStyle=\"dropdown\"\n                buttonText=\"Export\"\n                icon=\"fa-download\"\n                getHtmlElement={getClusterVisualization}  // Provide cluster viz for PDF\n                pdfOptions={{\n                  orientation: ''landscape'',  // Better for wide cluster visualization\n                  pageSize: ''a4'',\n                  margins: { top: 60, bottom: 40, left: 40, right: 40 }\n                }}\n                onExportStart={() => {\n                  console.log(''🎯 [AIPromptsCluster] Export started!'');\n                }}\n                onExportComplete={(format) => {\n                  console.log(''✅ [AIPromptsCluster] Export completed!'', format);\n                }}\n                onExportError={(error) => {\n                  console.error(''❌ [AIPromptsCluster] Export error:'', error);\n                }}\n                customStyles={{\n                  button: {\n                    padding: ''8px 16px'',\n                    fontSize: ''14px'',\n                    fontWeight: ''600'',\n                    border: ''2px solid #e2e8f0'',\n                    borderRadius: ''8px'',\n                    backgroundColor: ''white'',\n                    color: ''#4a5568'',\n                    cursor: ''pointer'',\n                    display: ''flex'',\n                    alignItems: ''center'',\n                    gap: ''8px'',\n                    transition: ''all 0.2s'',\n                    boxShadow: ''0 1px 3px rgba(0,0,0,0.1)''\n                  }\n                }}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            )}\n            \n            {/* AI Insights Panel */}\n            <AIInsightsPanel\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings?.aiInsights}\n              onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                ...savedUserSettings,\n                aiInsights: settings\n              })}\n              insights={aiInsights}\n              loading={loadingInsights}\n              error={insightsError}\n              onGenerate={generateAIInsights}\n              title=\"AI Prompts Cluster Analysis\"\n              icon=\"fa-wand-magic-sparkles\"\n              iconColor={styles?.colors?.primary || ''#8B5CF6''}\n              position=\"bottom\"\n              onClose={() => {\n                setAiInsights(null);\n                setInsightsError(null);\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Error display */}\n      {error && (\n        <div style={{\n          padding: styles.spacing?.sm || ''8px'',\n          backgroundColor: ''#fee'',\n          color: ''#c00'',\n          borderRadius: styles.borders?.radius || ''4px'',\n          marginBottom: styles.spacing?.md || ''16px''\n        }}>\n          {error}\n        </div>\n      )}\n\n      {/* Main content area */}\n      <div style={{\n        display: ''flex'',\n        flex: 1,\n        gap: styles.spacing?.md || ''16px'',\n        overflow: ''hidden''\n      }}>\n        {/* Left panel - Controls */}\n        <div style={{\n          width: ''280px'',\n          display: ''flex'',\n          flexDirection: ''column'',\n          gap: styles.spacing?.sm || ''8px''\n        }}>\n          <ClusterControls\n            categories={categories}\n            types={types}\n            currentFilters={filters}\n            clusterCount={clusterCount}\n            similarityThreshold={similarityThreshold}\n            isProcessing={isProcessing}\n            onSearchChange={(search) => setFilters({ ...filters, search })}\n            onFilterChange={setFilters}\n            onClusterCountChange={setClusterCount}\n            onSimilarityThresholdChange={setSimilarityThreshold}\n            onRecalculate={handleRecalculate}\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n          />\n        </div>\n\n        {/* Center - Graph */}\n        <div \n          ref={clusterGraphRef}\n          id=\"cluster-graph-container\"\n          style={{\n            flex: 1,\n            backgroundColor: styles.colors?.surface || ''white'',\n            borderRadius: styles.borders?.radius || ''4px'',\n            padding: styles.spacing?.sm || ''8px'',\n            position: ''relative'',\n            // Ensure proper rendering for export\n            minHeight: ''400px'',\n            overflow: ''visible''\n          }}>\n          {clusters.length > 0 ? (\n            <ClusterGraph\n              prompts={clusters}\n              clusters={clusters}\n              clusterNames={clusterNames}\n              selectedPromptId={selectedPrompt?.ID}\n              similarityThreshold={similarityThreshold}\n              highlightCluster={highlightCluster}\n              onNodeClick={handlePromptSelect}\n              onNodeHover={() => {}}\n              onClusterSelect={handleClusterSelect}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings}\n              onSaveUserSettings={onSaveUserSettings}\n            />\n          ) : (\n            <div style={{\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              height: ''100%'',\n              color: styles.colors?.text?.secondary || ''#666''\n            }}>\n              {isProcessing ? (\n                <div>Generating embeddings and clustering...</div>\n              ) : (\n                <div style={{\n                  textAlign: ''center''\n                }}>\n                  <div style={{\n                    marginBottom: styles.spacing?.sm || ''8px''\n                  }}>\n                    No clusters generated yet\n                  </div>\n                  <div style={{\n                    fontSize: styles.fonts?.sizes?.sm || ''14px''\n                  }}>\n                    Use the \"Generate Clusters\" button in the controls panel to begin\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Right panel - Details */}\n        <div style={{\n          width: ''320px'',\n          backgroundColor: styles.colors?.surface || ''white'',\n          borderRadius: styles.borders?.radius || ''4px'',\n          padding: styles.spacing?.md || ''16px'',\n          overflowY: ''auto''\n        }}>\n          <ClusterDetails\n            selectedPrompt={selectedPrompt}\n            allPrompts={filteredPrompts}\n            clusterInfo={clusterInfo}\n            similarPrompts={similarPrompts}\n            onPromptNavigate={(promptId) => {\n              const prompt = prompts.find(p => p.ID === promptId);\n              if (prompt) handlePromptSelect(prompt);\n            }}\n            onEditPrompt={handleEditPrompt}\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"Load all AI prompts, generate embeddings from TemplateText, perform clustering analysis, visualize clusters in interactive graph, show prompt details on selection, provide filtering and search capabilities","technicalDesign":"Main orchestrator that loads AI prompts data, manages embeddings generation and caching, coordinates sub-components for visualization and interaction, uses D3.js for graph rendering and SimpleVectorService for clustering","dataRequirements":{"mode":"views","entities":[{"name":"AI Prompts","displayFields":["Name","Description","TemplateText","CategoryID","Category","TypeID","Type","Status","PromptRole","ResponseFormat","Template"],"filterFields":["Status","CategoryID","TypeID","PromptRole"],"sortFields":["Name","CreatedAt","UpdatedAt"],"permissions":["read"]}]},"properties":[],"events":[{"name":"onPromptSelect","description":"Fired when a prompt is selected in the visualization","parameters":[{"name":"prompt","type":"object","description":"The selected AI prompt entity"}]}],"dependencies":[{"name":"AIPromptsClusterGraph","title":"AI Prompts Cluster Graph","description":"D3.js force-directed graph visualization showing prompt clusters based on semantic similarity","type":"chart","location":"embedded","code":"function AIPromptsClusterGraph({\n  prompts,\n  clusters,\n  clusterNames = {},\n  selectedPromptId,\n  similarityThreshold = 0.7,\n  highlightCluster,\n  onNodeClick,\n  onNodeHover,\n  onClusterSelect,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const currentTransform = useRef(null);\n  \n  // Initialize zoom behavior once, outside useEffect\n  const zoomBehavior = useRef(null);\n  if (!zoomBehavior.current && typeof d3 !== ''undefined'') {\n    zoomBehavior.current = d3.zoom()\n      .scaleExtent([0.1, 10])\n      .on(''zoom'', (event) => {\n        currentTransform.current = event.transform;\n        if (containerRef.current) {\n          containerRef.current.attr(''transform'', event.transform);\n        }\n      });\n  }\n  \n  // Modern gradient color palette for clusters\n  const clusterColors = [\n    ''linear-gradient(135deg, #667eea 0%, #764ba2 100%)'',\n    ''linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'',\n    ''linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)'',\n    ''linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)'',\n    ''linear-gradient(135deg, #fa709a 0%, #fee140 100%)'',\n    ''linear-gradient(135deg, #30cfd0 0%, #330867 100%)'',\n    ''linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)'',\n    ''linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)'',\n    ''linear-gradient(135deg, #fbc2eb 0%, #a6c1ee 100%)'',\n    ''linear-gradient(135deg, #fdcbf1 0%, #e6dee9 100%)''\n  ];\n  \n  // Solid colors for D3 (gradients will be defined in defs)\n  const solidColors = [\n    ''#667eea'', ''#f093fb'', ''#4facfe'', ''#43e97b'', ''#fa709a'',\n    ''#30cfd0'', ''#a8edea'', ''#ff9a9e'', ''#fbc2eb'', ''#fdcbf1''\n  ];\n\n  // Update dimensions on mount and resize\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (svgRef.current && svgRef.current.parentElement) {\n        const { width, height } = svgRef.current.parentElement.getBoundingClientRect();\n        setDimensions({ width, height });\n      }\n    };\n\n    updateDimensions();\n    window.addEventListener(''resize'', updateDimensions);\n    return () => window.removeEventListener(''resize'', updateDimensions);\n  }, []);\n\n  // Create D3 visualization\n  useEffect(() => {\n    if (!prompts || prompts.length === 0 || !svgRef.current) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(''*'').remove(); // Clear previous visualization\n\n    const width = dimensions.width;\n    const height = dimensions.height;\n\n    // Create container for zoom/pan first\n    const container = svg.append(''g'');\n    containerRef.current = container;\n    \n    // Apply zoom behavior to svg (it''s already initialized in component)\n    if (zoomBehavior.current) {\n      // Update the zoom handler to use the new container\n      zoomBehavior.current.on(''zoom'', (event) => {\n        currentTransform.current = event.transform;\n        container.attr(''transform'', event.transform);\n      });\n      \n      svg.call(zoomBehavior.current);\n    }\n    \n    // Apply saved transform if it exists\n    if (currentTransform.current) {\n      svg.call(zoomBehavior.current.transform, currentTransform.current);\n      container.attr(''transform'', currentTransform.current);\n    }\n    \n    // Add gradient definitions\n    const defs = svg.append(''defs'');\n    \n    // Create gradients for each cluster\n    solidColors.forEach((color, i) => {\n      const gradient = defs.append(''radialGradient'')\n        .attr(''id'', `cluster-gradient-$' + '{i}`)\n        .attr(''cx'', ''30%'')\n        .attr(''cy'', ''30%'');\n      \n      gradient.append(''stop'')\n        .attr(''offset'', ''0%'')\n        .attr(''stop-color'', color)\n        .attr(''stop-opacity'', 0.8);\n      \n      gradient.append(''stop'')\n        .attr(''offset'', ''100%'')\n        .attr(''stop-color'', d3.color(color).darker(0.5))\n        .attr(''stop-opacity'', 1);\n    });\n    \n    // Add glow filter\n    const filter = defs.append(''filter'')\n      .attr(''id'', ''glow'');\n    \n    filter.append(''feGaussianBlur'')\n      .attr(''stdDeviation'', ''3'')\n      .attr(''result'', ''coloredBlur'');\n    \n    const feMerge = filter.append(''feMerge'');\n    feMerge.append(''feMergeNode'')\n      .attr(''in'', ''coloredBlur'');\n    feMerge.append(''feMergeNode'')\n      .attr(''in'', ''SourceGraphic'');\n    \n    // Add strong glow for selection\n    const selectionFilter = defs.append(''filter'')\n      .attr(''id'', ''selection-glow'')\n      .attr(''width'', ''300%'')\n      .attr(''height'', ''300%'')\n      .attr(''x'', ''-100%'')\n      .attr(''y'', ''-100%'');\n    \n    selectionFilter.append(''feGaussianBlur'')\n      .attr(''stdDeviation'', ''8'')\n      .attr(''result'', ''coloredBlur'');\n    \n    const selectionMerge = selectionFilter.append(''feMerge'');\n    selectionMerge.append(''feMergeNode'')\n      .attr(''in'', ''coloredBlur'');\n    selectionMerge.append(''feMergeNode'')\n      .attr(''in'', ''SourceGraphic'');\n\n    // Calculate similarities between all nodes\n    const links = [];\n    const vectorService = utilities.ai.VectorService;\n    \n    // Load vectors into the service for similarity calculations\n    const vectorMap = new Map();\n    prompts.forEach(prompt => {\n      if (prompt.embedding) {\n        vectorMap.set(prompt.ID, prompt.embedding);\n      }\n    });\n    vectorService.LoadVectors(vectorMap);\n    \n    for (let i = 0; i < prompts.length; i++) {\n      for (let j = i + 1; j < prompts.length; j++) {\n        if (prompts[i].embedding && prompts[j].embedding) {\n          // Use CalculateDistance with cosine metric (returns distance, so we need to convert to similarity)\n          const distance = vectorService.CalculateDistance(\n            prompts[i].embedding,\n            prompts[j].embedding,\n            ''cosine''\n          );\n          const similarity = 1 - distance; // Convert distance to similarity\n          \n          if (similarity >= similarityThreshold) {\n            links.push({\n              source: prompts[i].ID,\n              target: prompts[j].ID,\n              value: similarity\n            });\n          }\n        }\n      }\n    }\n\n    // Create force simulation\n    const simulation = d3.forceSimulation(prompts)\n      .force(''link'', d3.forceLink(links)\n        .id(d => d.ID)\n        .distance(d => 100 * (1 - d.value)) // Distance inversely proportional to similarity\n        .strength(d => d.value * 0.5))\n      .force(''charge'', d3.forceManyBody()\n        .strength(-200)\n        .distanceMax(300))\n      .force(''center'', d3.forceCenter(width / 2, height / 2))\n      .force(''collision'', d3.forceCollide().radius(25))\n      .force(''cluster'', forceCluster()); // Custom clustering force\n\n    // Custom force to pull nodes toward their cluster center\n    function forceCluster() {\n      const strength = 0.2;\n      let nodes;\n      \n      function force(alpha) {\n        const centroids = d3.rollup(\n          nodes,\n          v => ({\n            x: d3.mean(v, d => d.x),\n            y: d3.mean(v, d => d.y),\n            count: v.length\n          }),\n          d => d.cluster\n        );\n        \n        nodes.forEach(node => {\n          const centroid = centroids.get(node.cluster);\n          if (centroid && centroid.count > 1) {\n            node.vx -= (node.x - centroid.x) * strength * alpha;\n            node.vy -= (node.y - centroid.y) * strength * alpha;\n          }\n        });\n      }\n      \n      force.initialize = function(_) {\n        nodes = _;\n      };\n      \n      return force;\n    }\n\n    // Draw links with modern styling\n    const link = container.append(''g'')\n      .attr(''class'', ''links'')\n      .selectAll(''line'')\n      .data(links)\n      .enter().append(''line'')\n      .attr(''stroke'', ''url(#link-gradient)'')\n      .attr(''stroke-opacity'', d => d.value * 0.2)\n      .attr(''stroke-width'', d => Math.max(0.5, d.value * 2))\n      .attr(''stroke-linecap'', ''round'');\n    \n    // Add gradient for links\n    const linkGradient = defs.append(''linearGradient'')\n      .attr(''id'', ''link-gradient'')\n      .attr(''gradientUnits'', ''userSpaceOnUse'');\n    \n    linkGradient.append(''stop'')\n      .attr(''offset'', ''0%'')\n      .attr(''stop-color'', ''#e0e0e0'')\n      .attr(''stop-opacity'', 0.3);\n    \n    linkGradient.append(''stop'')\n      .attr(''offset'', ''50%'')\n      .attr(''stop-color'', ''#c0c0c0'')\n      .attr(''stop-opacity'', 0.5);\n    \n    linkGradient.append(''stop'')\n      .attr(''offset'', ''100%'')\n      .attr(''stop-color'', ''#e0e0e0'')\n      .attr(''stop-opacity'', 0.3);\n\n    // Create node groups\n    const node = container.append(''g'')\n      .attr(''class'', ''nodes'')\n      .selectAll(''g'')\n      .data(prompts)\n      .enter().append(''g'')\n      .attr(''cursor'', ''pointer'')\n      .call(d3.drag()\n        .on(''start'', dragstarted)\n        .on(''drag'', dragged)\n        .on(''end'', dragended));\n\n    // Add shadow circles\n    node.append(''circle'')\n      .attr(''r'', d => {\n        const textLength = d.TemplateText?.length || 0;\n        return Math.min(25, Math.max(12, Math.sqrt(textLength / 40))) + 2;\n      })\n      .attr(''fill'', ''black'')\n      .attr(''opacity'', 0.1)\n      .attr(''transform'', ''translate(2, 2)'');\n    \n    // Add main circles for nodes with modern styling\n    node.append(''circle'')\n      .attr(''class'', ''node-circle'')\n      .attr(''r'', d => {\n        // Size based on template text length\n        const textLength = d.TemplateText?.length || 0;\n        return Math.min(25, Math.max(12, Math.sqrt(textLength / 40)));\n      })\n      .attr(''fill'', d => {\n        if (highlightCluster !== null && d.cluster !== highlightCluster) {\n          return ''#f5f5f5'';\n        }\n        return `url(#cluster-gradient-$' + '{d.cluster % solidColors.length})`;\n      })\n      .attr(''stroke'', d => {\n        if (d.ID === selectedPromptId) return ''#00ff88''; // Neon green for selection\n        if (d.ID === hoveredNode) return solidColors[d.cluster % solidColors.length];\n        return ''white'';\n      })\n      .attr(''stroke-width'', d => {\n        if (d.ID === selectedPromptId) return 5;\n        if (d.ID === hoveredNode) return 3;\n        return 2;\n      })\n      .attr(''opacity'', d => {\n        if (highlightCluster !== null && d.cluster !== highlightCluster) {\n          return 0.2;\n        }\n        return 1;\n      })\n      .attr(''filter'', d => {\n        if (d.ID === selectedPromptId) return ''url(#selection-glow)'';\n        if (d.ID === hoveredNode) return ''url(#glow)'';\n        return null;\n      })\n      .style(''transition'', ''all 0.3s ease'');\n\n    // Add labels with modern typography\n    const labels = node.append(''foreignObject'')\n      .attr(''x'', -45)\n      .attr(''y'', -40)\n      .attr(''width'', 90)\n      .attr(''height'', 28)\n      .attr(''pointer-events'', ''none'');\n    \n    labels.append(''xhtml:div'')\n      .style(''text-align'', ''center'')\n      .style(''font-size'', ''12px'')\n      .style(''font-weight'', ''500'')\n      .style(''color'', ''#2d3748'')\n      .style(''line-height'', ''14px'')\n      .style(''overflow'', ''hidden'')\n      .style(''text-overflow'', ''ellipsis'')\n      .style(''display'', ''-webkit-box'')\n      .style(''-webkit-line-clamp'', ''2'')\n      .style(''-webkit-box-orient'', ''vertical'')\n      .style(''text-shadow'', ''0 1px 2px rgba(255,255,255,0.8)'')\n      .text(d => d.Name || ''Unnamed'');\n\n    // Add modern tooltips\n    const tooltip = d3.select(''body'').append(''div'')\n      .attr(''class'', ''graph-tooltip'')\n      .style(''opacity'', 0)\n      .style(''position'', ''absolute'')\n      .style(''padding'', ''12px'')\n      .style(''background'', ''linear-gradient(135deg, rgba(255,255,255,0.98) 0%, rgba(249,250,251,0.98) 100%)'')\n      .style(''color'', ''#2d3748'')\n      .style(''border-radius'', ''12px'')\n      .style(''pointer-events'', ''none'')\n      .style(''font-size'', ''13px'')\n      .style(''max-width'', ''320px'')\n      .style(''box-shadow'', ''0 10px 40px rgba(0,0,0,0.15), 0 2px 10px rgba(0,0,0,0.1)'')\n      .style(''border'', ''1px solid rgba(255,255,255,0.8)'')\n      .style(''backdrop-filter'', ''blur(10px)'');\n\n    // Node interactions\n    node\n      .on(''click'', (event, d) => {\n        event.stopPropagation();\n        onNodeClick(d);\n      })\n      .on(''mouseover'', (event, d) => {\n        setHoveredNode(d.ID);\n        onNodeHover(d);\n        \n        tooltip.transition()\n          .duration(200)\n          .style(''opacity'', .9);\n        \n        tooltip.html(`\n          <div style=\"font-weight: 600; margin-bottom: 8px; color: #1a202c; font-size: 14px;\">$' + '{d.Name}</div>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 8px;\">\n            <span style=\"padding: 2px 8px; background: #edf2f7; border-radius: 4px; font-size: 11px;\">\n              $' + '{d.Category || ''No Category''}\n            </span>\n            <span style=\"padding: 2px 8px; background: #edf2f7; border-radius: 4px; font-size: 11px;\">\n              $' + '{d.Type || ''No Type''}\n            </span>\n            <span style=\"padding: 2px 8px; background: $' + '{solidColors[d.cluster % solidColors.length]}20; border-radius: 4px; font-size: 11px; color: $' + '{solidColors[d.cluster % solidColors.length]};\">\n              Cluster $' + '{d.cluster + 1}\n            </span>\n          </div>\n          $' + '{d.Description ? `<div style=\"font-size: 12px; color: #4a5568; line-height: 1.4;\">$' + '{d.Description.substring(0, 120)}$' + '{d.Description.length > 120 ? ''...'' : ''''}</div>` : ''''}\n        `)\n          .style(''left'', (event.pageX + 10) + ''px'')\n          .style(''top'', (event.pageY - 28) + ''px'');\n      })\n      .on(''mouseout'', () => {\n        setHoveredNode(null);\n        tooltip.transition()\n          .duration(500)\n          .style(''opacity'', 0);\n      });\n\n    // Click on background to deselect\n    svg.on(''click'', () => {\n      onNodeClick(null);\n    });\n\n    // Update positions on simulation tick\n    simulation.on(''tick'', () => {\n      link\n        .attr(''x1'', d => d.source.x)\n        .attr(''y1'', d => d.source.y)\n        .attr(''x2'', d => d.target.x)\n        .attr(''y2'', d => d.target.y);\n\n      node.attr(''transform'', d => `translate($' + '{d.x},$' + '{d.y})`);\n    });\n\n    // Drag functions\n    function dragstarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n\n    function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n\n    // Cleanup on unmount\n    return () => {\n      simulation.stop();\n      tooltip.remove();\n    };\n  }, [prompts, clusters, selectedPromptId, similarityThreshold, highlightCluster, dimensions]);\n\n  // Zoom control functions - don''t use useCallback to ensure we have current refs\n  const handleZoomIn = () => {\n    if (!svgRef.current || !zoomBehavior.current) {\n      console.warn(''Zoom in - refs not ready'');\n      return;\n    }\n    \n    const svg = d3.select(svgRef.current);\n    const currentZoom = currentTransform.current ? currentTransform.current.k : 1;\n    const newZoom = Math.min(currentZoom * 1.5, 10);\n    \n    svg.transition()\n      .duration(300)\n      .call(zoomBehavior.current.scaleTo, newZoom);\n  };\n  \n  const handleZoomOut = () => {\n    if (!svgRef.current || !zoomBehavior.current) {\n      console.warn(''Zoom out - refs not ready'');\n      return;\n    }\n    \n    const svg = d3.select(svgRef.current);\n    const currentZoom = currentTransform.current ? currentTransform.current.k : 1;\n    const newZoom = Math.max(currentZoom / 1.5, 0.1);\n    \n    svg.transition()\n      .duration(300)\n      .call(zoomBehavior.current.scaleTo, newZoom);\n  };\n  \n  const handleResetZoom = () => {\n    if (!svgRef.current || !zoomBehavior.current) {\n      console.warn(''Reset zoom - refs not ready'');\n      return;\n    }\n    \n    const svg = d3.select(svgRef.current);\n    svg.transition()\n      .duration(300)\n      .call(zoomBehavior.current.transform, d3.zoomIdentity);\n    currentTransform.current = d3.zoomIdentity;\n  };\n  \n  // Cluster legend\n  const uniqueClusters = useMemo(() => {\n    if (!clusters || clusters.length === 0) return [];\n    const clusterSet = new Set(clusters.map(p => p.cluster));\n    return Array.from(clusterSet).sort((a, b) => a - b);\n  }, [clusters]);\n\n  return (\n    <div style={{ \n      width: ''100%'', \n      height: ''100%'', \n      position: ''relative'',\n      background: ''linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)'',\n      borderRadius: ''16px'',\n      overflow: ''hidden''\n    }}>\n      <svg\n        ref={svgRef}\n        width={dimensions.width}\n        height={dimensions.height}\n        style={{ width: ''100%'', height: ''100%'' }}\n      />\n      \n      {/* Modern Zoom Controls */}\n      <div style={{\n        position: ''absolute'',\n        top: ''20px'',\n        left: ''20px'',\n        display: ''flex'',\n        flexDirection: ''column'',\n        gap: ''8px'',\n        zIndex: 10\n      }}>\n        <button\n          onClick={handleZoomIn}\n          style={{\n            width: ''40px'',\n            height: ''40px'',\n            borderRadius: ''10px'',\n            border: ''none'',\n            backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n            color: ''#4a5568'',\n            cursor: ''pointer'',\n            fontSize: ''18px'',\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            boxShadow: ''0 2px 8px rgba(0,0,0,0.1)'',\n            transition: ''all 0.2s ease''\n          }}\n          onMouseEnter={e => e.currentTarget.style.transform = ''scale(1.1)''}\n          onMouseLeave={e => e.currentTarget.style.transform = ''scale(1)''}\n          title=\"Zoom In\"\n        >\n          <i className=\"fa-solid fa-plus\"></i>\n        </button>\n        \n        <button\n          onClick={handleZoomOut}\n          style={{\n            width: ''40px'',\n            height: ''40px'',\n            borderRadius: ''10px'',\n            border: ''none'',\n            backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n            color: ''#4a5568'',\n            cursor: ''pointer'',\n            fontSize: ''18px'',\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            boxShadow: ''0 2px 8px rgba(0,0,0,0.1)'',\n            transition: ''all 0.2s ease''\n          }}\n          onMouseEnter={e => e.currentTarget.style.transform = ''scale(1.1)''}\n          onMouseLeave={e => e.currentTarget.style.transform = ''scale(1)''}\n          title=\"Zoom Out\"\n        >\n          <i className=\"fa-solid fa-minus\"></i>\n        </button>\n        \n        <button\n          onClick={handleResetZoom}\n          style={{\n            width: ''40px'',\n            height: ''40px'',\n            borderRadius: ''10px'',\n            border: ''none'',\n            backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n            color: ''#4a5568'',\n            cursor: ''pointer'',\n            fontSize: ''16px'',\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            boxShadow: ''0 2px 8px rgba(0,0,0,0.1)'',\n            transition: ''all 0.2s ease''\n          }}\n          onMouseEnter={e => e.currentTarget.style.transform = ''scale(1.1)''}\n          onMouseLeave={e => e.currentTarget.style.transform = ''scale(1)''}\n          title=\"Reset View\"\n        >\n          <i className=\"fa-solid fa-expand\"></i>\n        </button>\n      </div>\n      \n      {/* Modern Cluster Legend */}\n      <div style={{\n        position: ''absolute'',\n        top: ''20px'',\n        right: ''20px'',\n        backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n        padding: ''16px'',\n        borderRadius: ''12px'',\n        fontSize: ''13px'',\n        boxShadow: ''0 4px 12px rgba(0,0,0,0.08)'',\n        backdropFilter: ''blur(10px)'',\n        minWidth: ''200px'',\n        maxWidth: ''280px''\n      }}>\n        <div style={{ \n          fontWeight: ''600'', \n          marginBottom: ''12px'',\n          color: ''#2d3748'',\n          fontSize: ''14px''\n        }}>\n          Clusters\n        </div>\n        {uniqueClusters.map(cluster => {\n          const clusterName = clusterNames[cluster] || `Cluster $' + '{cluster + 1}`;\n          return (\n            <div\n              key={cluster}\n              style={{\n                display: ''flex'',\n                alignItems: ''flex-start'',\n                marginBottom: ''10px'',\n                cursor: ''pointer'',\n                opacity: highlightCluster !== null && highlightCluster !== cluster ? 0.4 : 1,\n                transition: ''all 0.2s ease'',\n                padding: ''6px 8px'',\n                borderRadius: ''6px'',\n                backgroundColor: highlightCluster === cluster ? `$' + '{solidColors[cluster % solidColors.length]}15` : ''transparent''\n              }}\n              onClick={() => onClusterSelect(cluster)}\n              onMouseEnter={e => e.currentTarget.style.backgroundColor = `$' + '{solidColors[cluster % solidColors.length]}10`}\n              onMouseLeave={e => e.currentTarget.style.backgroundColor = highlightCluster === cluster ? `$' + '{solidColors[cluster % solidColors.length]}15` : ''transparent''}\n              title={clusterName}\n            >\n              <div\n                style={{\n                  width: ''16px'',\n                  height: ''16px'',\n                  background: `linear-gradient(135deg, $' + '{solidColors[cluster % solidColors.length]} 0%, $' + '{d3.color(solidColors[cluster % solidColors.length]).darker(0.3)} 100%)`,\n                  marginRight: ''10px'',\n                  marginTop: ''2px'',\n                  borderRadius: ''50%'',\n                  border: ''2px solid white'',\n                  boxShadow: ''0 2px 4px rgba(0,0,0,0.1)'',\n                  flexShrink: 0\n                }}\n              />\n              <span style={{ \n                color: ''#4a5568'', \n                fontWeight: ''500'',\n                display: ''block'',\n                lineHeight: ''1.3'',\n                wordWrap: ''break-word'',\n                whiteSpace: ''normal''\n              }}>\n                {clusterName}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n      \n      {/* Modern Instructions */}\n      <div style={{\n        position: ''absolute'',\n        bottom: ''20px'',\n        left: ''50%'',\n        transform: ''translateX(-50%)'',\n        backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n        padding: ''8px 16px'',\n        borderRadius: ''20px'',\n        fontSize: ''12px'',\n        color: ''#718096'',\n        boxShadow: ''0 2px 8px rgba(0,0,0,0.08)'',\n        backdropFilter: ''blur(10px)'',\n        display: ''flex'',\n        gap: ''16px'',\n        alignItems: ''center''\n      }}>\n        <span><i className=\"fa-solid fa-hand\" style={{ marginRight: ''4px'' }}></i>Drag to pan</span>\n        <span>•</span>\n        <span><i className=\"fa-solid fa-magnifying-glass\" style={{ marginRight: ''4px'' }}></i>Scroll to zoom</span>\n        <span>•</span>\n        <span><i className=\"fa-solid fa-pointer\" style={{ marginRight: ''4px'' }}></i>Click to select</span>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"Render interactive force-directed graph with prompts as nodes, display clusters with different colors, show similarity connections between prompts, support zoom/pan navigation, highlight on hover, animate transitions","technicalDesign":"Uses D3.js force simulation for node positioning, implements clustering visualization with color coding, draws edges based on similarity threshold, handles mouse interactions for selection and tooltips","dataRequirements":{"mode":"views","entities":[{"name":"AI Prompts","displayFields":["Name","Description","TemplateText","CategoryID","Category","TypeID","Type","Status","PromptRole","ResponseFormat","Template"],"filterFields":["Status","CategoryID","TypeID","PromptRole"],"sortFields":["Name","CreatedAt","UpdatedAt"],"permissions":["read"]}]},"properties":[{"name":"prompts","type":"array","required":true,"description":"Array of AI prompt entities with embeddings"},{"name":"clusters","type":"array","required":true,"description":"Array of cluster assignments from clustering algorithm"},{"name":"selectedPromptId","type":"string","required":false,"description":"ID of currently selected prompt"},{"name":"similarityThreshold","type":"number","required":false,"description":"Threshold for showing similarity connections (0-1)"},{"name":"highlightCluster","type":"number","required":false,"description":"Cluster index to highlight"}],"events":[{"name":"onNodeClick","description":"Fired when a node is clicked","parameters":[{"name":"prompt","type":"object","description":"The clicked prompt entity"}]},{"name":"onNodeHover","description":"Fired when hovering over a node","parameters":[{"name":"prompt","type":"object","description":"The hovered prompt entity"}]},{"name":"onClusterSelect","description":"Fired when a cluster is selected","parameters":[{"name":"clusterIndex","type":"number","description":"Index of the selected cluster"}]}],"libraries":[{"name":"d3","version":"7.8.5","globalVariable":"d3"}],"usageExample":"<AIPromptsClusterGraph prompts={prompts} clusters={clusters} />","version":"1.0.0"},{"name":"AIPromptsClusterControls","title":"AI Prompts Cluster Controls","description":"Control panel for filtering, searching, and adjusting clustering parameters","type":"panel","location":"embedded","code":"function AIPromptsClusterControls({\n  categories,\n  types,\n  currentFilters,\n  clusterCount,\n  similarityThreshold,\n  isProcessing,\n  onSearchChange,\n  onFilterChange,\n  onClusterCountChange,\n  onSimilarityThresholdChange,\n  onRecalculate,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  const [localSearch, setLocalSearch] = useState(currentFilters.search || '''');\n  const searchTimeout = useRef(null);\n\n  // Debounce search input\n  const handleSearchChange = (value) => {\n    setLocalSearch(value);\n    \n    if (searchTimeout.current) {\n      clearTimeout(searchTimeout.current);\n    }\n    \n    searchTimeout.current = setTimeout(() => {\n      onSearchChange(value);\n    }, 300);\n  };\n\n  // Modern style helpers\n  const inputStyle = {\n    width: ''100%'',\n    padding: ''10px 12px'',\n    fontSize: ''14px'',\n    border: ''2px solid transparent'',\n    borderRadius: ''10px'',\n    backgroundColor: ''rgba(255, 255, 255, 0.9)'',\n    backdropFilter: ''blur(10px)'',\n    transition: ''all 0.3s ease'',\n    outline: ''none'',\n    color: ''#2d3748''\n  };\n\n  const labelStyle = {\n    display: ''block'',\n    marginBottom: ''6px'',\n    fontSize: ''13px'',\n    fontWeight: ''600'',\n    color: ''#4a5568'',\n    letterSpacing: ''0.025em'',\n    textTransform: ''uppercase''\n  };\n\n  const sectionStyle = {\n    marginBottom: ''20px'',\n    padding: ''16px'',\n    background: ''linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(249,250,251,0.95) 100%)'',\n    borderRadius: ''16px'',\n    boxShadow: ''0 4px 12px rgba(0,0,0,0.05)'',\n    backdropFilter: ''blur(10px)'',\n    border: ''1px solid rgba(255,255,255,0.8)''\n  };\n\n  const buttonStyle = {\n    width: ''100%'',\n    padding: ''12px 16px'',\n    fontSize: ''14px'',\n    fontWeight: ''600'',\n    border: ''none'',\n    borderRadius: ''12px'',\n    cursor: isProcessing ? ''not-allowed'' : ''pointer'',\n    transition: ''all 0.3s ease'',\n    background: ''linear-gradient(135deg, #667eea 0%, #764ba2 100%)'',\n    color: ''white'',\n    boxShadow: ''0 4px 12px rgba(102, 126, 234, 0.3)''\n  };\n\n  return (\n    <div style={{ height: ''100%'', overflowY: ''auto'' }}>\n      {/* Search */}\n      <div style={sectionStyle}>\n        <label style={labelStyle}>\n          <i className=\"fa-solid fa-magnifying-glass\" style={{ marginRight: ''6px'' }}></i>\n          Search\n        </label>\n        <div style={{ position: ''relative'' }}>\n          <input\n            type=\"text\"\n            value={localSearch}\n            onChange={(e) => handleSearchChange(e.target.value)}\n            placeholder=\"Search prompts...\"\n            style={{\n              ...inputStyle,\n              paddingLeft: ''40px''\n            }}\n            onFocus={(e) => {\n              e.target.style.borderColor = ''#667eea'';\n              e.target.style.boxShadow = ''0 0 0 3px rgba(102, 126, 234, 0.1)'';\n            }}\n            onBlur={(e) => {\n              e.target.style.borderColor = ''transparent'';\n              e.target.style.boxShadow = ''none'';\n            }}\n            disabled={isProcessing}\n          />\n          <i className=\"fa-solid fa-magnifying-glass\" style={{\n            position: ''absolute'',\n            left: ''14px'',\n            top: ''50%'',\n            transform: ''translateY(-50%)'',\n            color: ''#a0aec0'',\n            fontSize: ''14px''\n          }}></i>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div style={sectionStyle}>\n        <h4 style={{\n          margin: ''0 0 16px 0'',\n          fontSize: ''15px'',\n          fontWeight: ''600'',\n          color: ''#2d3748'',\n          display: ''flex'',\n          alignItems: ''center''\n        }}>\n          <i className=\"fa-solid fa-filter\" style={{ marginRight: ''8px'', color: ''#667eea'' }}></i>\n          Filters\n        </h4>\n\n        {/* Category filter */}\n        <div style={{ marginBottom: styles.spacing?.sm || ''8px'' }}>\n          <label style={labelStyle}>Category</label>\n          <select\n            value={currentFilters.category || ''''}\n            onChange={(e) => onFilterChange({\n              ...currentFilters,\n              category: e.target.value || null\n            })}\n            style={inputStyle}\n            disabled={isProcessing}\n          >\n            <option value=\"\">All Categories</option>\n            {categories.map(cat => (\n              <option key={cat.id} value={cat.id}>{cat.name}</option>\n            ))}\n          </select>\n        </div>\n\n        {/* Type filter */}\n        <div style={{ marginBottom: styles.spacing?.sm || ''8px'' }}>\n          <label style={labelStyle}>Type</label>\n          <select\n            value={currentFilters.type || ''''}\n            onChange={(e) => onFilterChange({\n              ...currentFilters,\n              type: e.target.value || null\n            })}\n            style={inputStyle}\n            disabled={isProcessing}\n          >\n            <option value=\"\">All Types</option>\n            {types.map(type => (\n              <option key={type.id} value={type.id}>{type.name}</option>\n            ))}\n          </select>\n        </div>\n\n        {/* Status filter */}\n        <div style={{ marginBottom: styles.spacing?.sm || ''8px'' }}>\n          <label style={labelStyle}>Status</label>\n          <select\n            value={currentFilters.status || ''''}\n            onChange={(e) => onFilterChange({\n              ...currentFilters,\n              status: e.target.value || null\n            })}\n            style={inputStyle}\n            disabled={isProcessing}\n          >\n            <option value=\"\">All Statuses</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Pending\">Pending</option>\n            <option value=\"Disabled\">Disabled</option>\n          </select>\n        </div>\n\n        {/* Role filter */}\n        <div>\n          <label style={labelStyle}>Prompt Role</label>\n          <select\n            value={currentFilters.role || ''''}\n            onChange={(e) => onFilterChange({\n              ...currentFilters,\n              role: e.target.value || null\n            })}\n            style={inputStyle}\n            disabled={isProcessing}\n          >\n            <option value=\"\">All Roles</option>\n            <option value=\"System\">System</option>\n            <option value=\"User\">User</option>\n            <option value=\"Assistant\">Assistant</option>\n            <option value=\"SystemOrUser\">System or User</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Clustering Parameters */}\n      <div style={sectionStyle}>\n        <h4 style={{\n          margin: ''0 0 16px 0'',\n          fontSize: ''15px'',\n          fontWeight: ''600'',\n          color: ''#2d3748'',\n          display: ''flex'',\n          alignItems: ''center''\n        }}>\n          <i className=\"fa-solid fa-diagram-project\" style={{ marginRight: ''8px'', color: ''#667eea'' }}></i>\n          Clustering\n        </h4>\n\n        {/* Number of clusters */}\n        <div style={{ marginBottom: styles.spacing?.sm || ''8px'' }}>\n          <label style={{...labelStyle, display: ''flex'', justifyContent: ''space-between'', marginBottom: ''10px''}}>\n            <span>Clusters</span>\n            <span style={{\n              background: ''linear-gradient(135deg, #667eea 0%, #764ba2 100%)'',\n              color: ''white'',\n              padding: ''2px 8px'',\n              borderRadius: ''6px'',\n              fontSize: ''12px'',\n              fontWeight: ''600''\n            }}>{clusterCount}</span>\n          </label>\n          <input\n            type=\"range\"\n            min=\"2\"\n            max=\"15\"\n            value={clusterCount}\n            onChange={(e) => onClusterCountChange(parseInt(e.target.value))}\n            style={{ width: ''100%'' }}\n            disabled={isProcessing}\n          />\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            fontSize: styles.fonts?.sizes?.xs || ''10px'',\n            color: styles.colors?.text?.secondary || ''#666''\n          }}>\n            <span>2</span>\n            <span>15</span>\n          </div>\n        </div>\n\n        {/* Similarity threshold */}\n        <div>\n          <label style={{...labelStyle, display: ''flex'', justifyContent: ''space-between'', marginBottom: ''10px''}}>\n            <span>Similarity</span>\n            <span style={{\n              background: ''linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)'',\n              color: ''white'',\n              padding: ''2px 8px'',\n              borderRadius: ''6px'',\n              fontSize: ''12px'',\n              fontWeight: ''600''\n            }}>{(similarityThreshold * 100).toFixed(0)}%</span>\n          </label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={similarityThreshold * 100}\n            onChange={(e) => onSimilarityThresholdChange(parseInt(e.target.value) / 100)}\n            style={{ width: ''100%'' }}\n            disabled={isProcessing}\n          />\n          <div style={{\n            display: ''flex'',\n            justifyContent: ''space-between'',\n            fontSize: styles.fonts?.sizes?.xs || ''10px'',\n            color: styles.colors?.text?.secondary || ''#666''\n          }}>\n            <span>0%</span>\n            <span>100%</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Actions */}\n      <div style={sectionStyle}>\n        <button\n          onClick={onRecalculate}\n          disabled={isProcessing}\n          style={{\n            ...buttonStyle,\n            opacity: isProcessing ? 0.6 : 1,\n            marginBottom: ''12px''\n          }}\n          onMouseEnter={e => !isProcessing && (e.currentTarget.style.transform = ''translateY(-2px)'')}\n          onMouseLeave={e => e.currentTarget.style.transform = ''translateY(0)''}\n        >\n          {isProcessing ? (\n            <>\n              <i className=\"fa-solid fa-spinner fa-spin\" style={{ marginRight: ''8px'' }}></i>\n              Processing...\n            </>\n          ) : (\n            <>\n              <i className=\"fa-solid fa-wand-magic-sparkles\" style={{ marginRight: ''8px'' }}></i>\n              Generate Clusters\n            </>\n          )}\n        </button>\n      </div>\n\n      {/* Statistics */}\n      <div style={{\n        ...sectionStyle,\n        fontSize: styles.fonts?.sizes?.xs || ''12px'',\n        color: styles.colors?.text?.secondary || ''#666''\n      }}>\n        <h4 style={{\n          margin: `0 0 $' + '{styles.spacing?.xs || ''4px''} 0`,\n          fontSize: styles.fonts?.sizes?.sm || ''14px'',\n          color: styles.colors?.text?.primary || ''#333''\n        }}>\n          Statistics\n        </h4>\n        <div>Categories: {categories.length}</div>\n        <div>Types: {types.length}</div>\n        <div>Active Filters: {\n          Object.values(currentFilters).filter(v => v).length\n        }</div>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"Provide search input for finding prompts, filter by category/type/status, adjust clustering parameters, control similarity threshold, toggle view options, export cluster assignments","technicalDesign":"React component with controlled inputs for various filters and parameters, emits change events to parent component for re-clustering or re-filtering","dataRequirements":{"mode":"views","entities":[{"name":"AI Prompts","displayFields":["Name","Description","TemplateText","CategoryID","Category","TypeID","Type","Status","PromptRole","ResponseFormat","Template"],"filterFields":["Status","CategoryID","TypeID","PromptRole"],"sortFields":["Name","CreatedAt","UpdatedAt"],"permissions":["read"]}]},"properties":[{"name":"categories","type":"array","required":true,"description":"Available prompt categories for filtering"},{"name":"types","type":"array","required":true,"description":"Available prompt types for filtering"},{"name":"currentFilters","type":"object","required":true,"description":"Current filter state"},{"name":"clusterCount","type":"number","required":true,"description":"Number of clusters to generate"},{"name":"similarityThreshold","type":"number","required":true,"description":"Current similarity threshold"},{"name":"isProcessing","type":"boolean","required":true,"description":"Whether embeddings are being generated"}],"events":[{"name":"onSearchChange","description":"Fired when search text changes","parameters":[{"name":"searchText","type":"string","description":"The search query"}]},{"name":"onFilterChange","description":"Fired when filters are updated","parameters":[{"name":"filters","type":"object","description":"Updated filter object"}]},{"name":"onClusterCountChange","description":"Fired when cluster count is adjusted","parameters":[{"name":"count","type":"number","description":"New cluster count"}]},{"name":"onSimilarityThresholdChange","description":"Fired when similarity threshold changes","parameters":[{"name":"threshold","type":"number","description":"New threshold value"}]},{"name":"onRecalculate","description":"Fired when user requests recalculation","parameters":[]},{"name":"onExport","description":"Fired when user wants to export clusters","parameters":[]}],"libraries":[],"usageExample":"<AIPromptsClusterControls categories={categories} onFilterChange={handleFilterChange} />","version":"1.0.0"},{"name":"AIPromptsClusterDetails","title":"AI Prompts Cluster Details","description":"Detail panel showing selected prompt information and similar prompts","type":"panel","location":"embedded","code":"function AIPromptsClusterDetails({\n  selectedPrompt,\n  allPrompts,\n  clusterInfo,\n  similarPrompts,\n  onPromptNavigate,\n  onEditPrompt,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  const [expandedSection, setExpandedSection] = useState(''details'');\n  const [showFullTemplate, setShowFullTemplate] = useState(false);\n\n  // Modern style helpers\n  const sectionStyle = {\n    marginBottom: ''20px'',\n    padding: ''16px'',\n    background: ''linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(249,250,251,0.95) 100%)'',\n    borderRadius: ''16px'',\n    boxShadow: ''0 4px 12px rgba(0,0,0,0.05)'',\n    backdropFilter: ''blur(10px)'',\n    border: ''1px solid rgba(255,255,255,0.8)''\n  };\n\n  const headerStyle = {\n    fontSize: ''15px'',\n    fontWeight: ''600'',\n    color: ''#2d3748'',\n    marginBottom: ''12px'',\n    cursor: ''pointer'',\n    display: ''flex'',\n    alignItems: ''center'',\n    justifyContent: ''space-between'',\n    padding: ''8px'',\n    borderRadius: ''8px'',\n    transition: ''all 0.2s ease''\n  };\n\n  const labelStyle = {\n    fontSize: ''12px'',\n    fontWeight: ''600'',\n    color: ''#718096'',\n    marginBottom: ''6px'',\n    textTransform: ''uppercase'',\n    letterSpacing: ''0.025em''\n  };\n\n  const valueStyle = {\n    fontSize: ''14px'',\n    color: ''#2d3748'',\n    marginBottom: ''12px'',\n    lineHeight: ''1.5''\n  };\n\n  const badgeStyle = {\n    display: ''inline-block'',\n    padding: ''4px 10px'',\n    fontSize: ''12px'',\n    fontWeight: ''600'',\n    borderRadius: ''8px'',\n    marginRight: ''8px''\n  };\n\n  // Format template text with basic syntax highlighting\n  const formatTemplateText = (text) => {\n    if (!text) return ''No template text'';\n    \n    // Truncate if needed\n    const displayText = showFullTemplate \n      ? text \n      : text.length > 500 ? text.substring(0, 500) + ''...'' : text;\n    \n    // Basic syntax highlighting for variables\n    const highlighted = displayText.replace(\n      /\\{\\{([^}]+)\\}\\}/g,\n      ''<span style=\"color: #0066cc; font-weight: bold;\">{{$1}}</span>''\n    );\n    \n    return (\n      <div style={{ position: ''relative'' }}>\n        <pre style={{\n          whiteSpace: ''pre-wrap'',\n          wordWrap: ''break-word'',\n          fontFamily: ''monospace'',\n          fontSize: styles.fonts?.sizes?.xs || ''12px'',\n          backgroundColor: styles.colors?.surface || ''white'',\n          padding: styles.spacing?.sm || ''8px'',\n          borderRadius: styles.borders?.radius || ''4px'',\n          border: `1px solid $' + '{styles.colors?.border || ''#ddd''}`,\n          maxHeight: showFullTemplate ? ''none'' : ''200px'',\n          overflow: ''hidden''\n        }} dangerouslySetInnerHTML={{ __html: highlighted }} />\n        \n        {text.length > 500 && (\n          <button\n            onClick={() => setShowFullTemplate(!showFullTemplate)}\n            style={{\n              marginTop: styles.spacing?.xs || ''4px'',\n              padding: `2px 8px`,\n              fontSize: styles.fonts?.sizes?.xs || ''12px'',\n              backgroundColor: styles.colors?.primary || ''#007bff'',\n              color: ''white'',\n              border: ''none'',\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: ''pointer''\n            }}\n          >\n            {showFullTemplate ? ''Show Less'' : ''Show More''}\n          </button>\n        )}\n      </div>\n    );\n  };\n\n  if (!selectedPrompt) {\n    return (\n      <div style={{\n        display: ''flex'',\n        alignItems: ''center'',\n        justifyContent: ''center'',\n        height: ''100%'',\n        color: styles.colors?.text?.secondary || ''#666'',\n        fontSize: styles.fonts?.sizes?.sm || ''14px'',\n        textAlign: ''center''\n      }}>\n        Select a prompt from the graph to view details\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {/* Modern Header */}\n      <div style={{\n        marginBottom: ''24px'',\n        padding: ''20px'',\n        background: ''linear-gradient(135deg, #667eea 0%, #764ba2 100%)'',\n        borderRadius: ''16px'',\n        boxShadow: ''0 8px 24px rgba(102, 126, 234, 0.2)'',\n        position: ''relative''\n      }}>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''flex-start''\n        }}>\n          <div style={{ flex: 1 }}>\n            <h3 style={{\n              fontSize: ''20px'',\n              fontWeight: ''600'',\n              color: ''white'',\n              margin: 0,\n              marginBottom: ''8px''\n            }}>\n              {selectedPrompt.Name}\n            </h3>\n            <div style={{ display: ''flex'', gap: ''8px'', flexWrap: ''wrap'' }}>\n              {selectedPrompt.Category && (\n                <span style={{\n                  padding: ''3px 10px'',\n                  background: ''rgba(255,255,255,0.2)'',\n                  borderRadius: ''6px'',\n                  fontSize: ''12px'',\n                  color: ''white'',\n                  fontWeight: ''500''\n                }}>\n                  {selectedPrompt.Category}\n                </span>\n              )}\n              {selectedPrompt.Type && (\n                <span style={{\n                  padding: ''3px 10px'',\n                  background: ''rgba(255,255,255,0.2)'',\n                  borderRadius: ''6px'',\n                  fontSize: ''12px'',\n                  color: ''white'',\n                  fontWeight: ''500''\n                }}>\n                  {selectedPrompt.Type}\n                </span>\n              )}\n              {selectedPrompt.Status && (\n                <span style={{\n                  padding: ''3px 10px'',\n                  background: selectedPrompt.Status === ''Active'' \n                    ? ''rgba(72, 187, 120, 0.3)'' \n                    : ''rgba(255,255,255,0.2)'',\n                  borderRadius: ''6px'',\n                  fontSize: ''12px'',\n                  color: ''white'',\n                  fontWeight: ''500''\n                }}>\n                  {selectedPrompt.Status}\n                </span>\n              )}\n            </div>\n          </div>\n          \n          {/* Action button */}\n          <button\n            onClick={() => onEditPrompt(selectedPrompt.ID)}\n            style={{\n              width: ''40px'',\n              height: ''40px'',\n              backgroundColor: ''rgba(255,255,255,0.2)'',\n              backdropFilter: ''blur(10px)'',\n              color: ''white'',\n              fontSize: ''16px'',\n              border: ''none'',\n              borderRadius: ''10px'',\n              cursor: ''pointer'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              transition: ''all 0.2s ease''\n            }}\n            onMouseEnter={e => {\n              e.currentTarget.style.backgroundColor = ''rgba(255,255,255,0.3)'';\n              e.currentTarget.style.transform = ''scale(1.05)'';\n            }}\n            onMouseLeave={e => {\n              e.currentTarget.style.backgroundColor = ''rgba(255,255,255,0.2)'';\n              e.currentTarget.style.transform = ''scale(1)'';\n            }}\n            title=\"Open Prompt Record\"\n          >\n            <i className=\"fa-solid fa-arrow-up-right-from-square\"></i>\n          </button>\n        </div>\n      </div>\n\n      {/* Prompt Details */}\n      <div style={sectionStyle}>\n        <div style={headerStyle} onClick={() => setExpandedSection(expandedSection === ''details'' ? null : ''details'')}>\n          <span>Prompt Details</span>\n          <span>{expandedSection === ''details'' ? ''▼'' : ''▶''}</span>\n        </div>\n        \n        {expandedSection === ''details'' && (\n          <div>\n            {selectedPrompt.Description && (\n              <>\n                <div style={labelStyle}>Description</div>\n                <div style={valueStyle}>{selectedPrompt.Description}</div>\n              </>\n            )}\n            \n            <div style={{ display: ''flex'', gap: styles.spacing?.md || ''16px'' }}>\n              <div style={{ flex: 1 }}>\n                <div style={labelStyle}>Category</div>\n                <div style={valueStyle}>{selectedPrompt.Category || ''None''}</div>\n              </div>\n              \n              <div style={{ flex: 1 }}>\n                <div style={labelStyle}>Type</div>\n                <div style={valueStyle}>{selectedPrompt.Type || ''None''}</div>\n              </div>\n            </div>\n            \n            <div style={{ display: ''flex'', gap: styles.spacing?.md || ''16px'' }}>\n              <div style={{ flex: 1 }}>\n                <div style={labelStyle}>Status</div>\n                <div style={{\n                  ...badgeStyle,\n                  backgroundColor: selectedPrompt.Status === ''Active'' \n                    ? ''#d4edda'' \n                    : selectedPrompt.Status === ''Disabled'' \n                    ? ''#f8d7da'' \n                    : ''#fff3cd'',\n                  color: selectedPrompt.Status === ''Active'' \n                    ? ''#155724'' \n                    : selectedPrompt.Status === ''Disabled'' \n                    ? ''#721c24'' \n                    : ''#856404''\n                }}>\n                  {selectedPrompt.Status}\n                </div>\n              </div>\n              \n              <div style={{ flex: 1 }}>\n                <div style={labelStyle}>Role</div>\n                <div style={valueStyle}>{selectedPrompt.PromptRole || ''None''}</div>\n              </div>\n            </div>\n            \n            <div style={labelStyle}>Response Format</div>\n            <div style={valueStyle}>{selectedPrompt.ResponseFormat || ''Text''}</div>\n          </div>\n        )}\n      </div>\n\n      {/* Template Text */}\n      <div style={sectionStyle}>\n        <div style={headerStyle} onClick={() => setExpandedSection(expandedSection === ''template'' ? null : ''template'')}>\n          <span>Template Text</span>\n          <span>{expandedSection === ''template'' ? ''▼'' : ''▶''}</span>\n        </div>\n        \n        {expandedSection === ''template'' && (\n          <div>\n            {formatTemplateText(selectedPrompt.TemplateText)}\n          </div>\n        )}\n      </div>\n\n      {/* Cluster Information */}\n      {clusterInfo && (\n        <div style={sectionStyle}>\n          <div style={headerStyle} onClick={() => setExpandedSection(expandedSection === ''cluster'' ? null : ''cluster'')}>\n            <span>Cluster Information</span>\n            <span>{expandedSection === ''cluster'' ? ''▼'' : ''▶''}</span>\n          </div>\n          \n          {expandedSection === ''cluster'' && (\n            <div>\n              <div style={labelStyle}>Cluster</div>\n              <div style={valueStyle}>\n                Cluster {clusterInfo.clusterIndex + 1} ({clusterInfo.clusterSize} members)\n              </div>\n              \n              <div style={labelStyle}>Other Members</div>\n              <div style={{\n                maxHeight: ''150px'',\n                overflowY: ''auto'',\n                fontSize: styles.fonts?.sizes?.sm || ''14px''\n              }}>\n                {clusterInfo.clusterMembers\n                  .filter(p => p.ID !== selectedPrompt.ID)\n                  .map(prompt => (\n                    <div\n                      key={prompt.ID}\n                      style={{\n                        padding: styles.spacing?.xs || ''4px'',\n                        marginBottom: ''2px'',\n                        backgroundColor: styles.colors?.surface || ''white'',\n                        borderRadius: styles.borders?.radius || ''4px'',\n                        cursor: ''pointer'',\n                        '':hover'': {\n                          backgroundColor: styles.colors?.hover || ''#f0f0f0''\n                        }\n                      }}\n                      onClick={() => onPromptNavigate(prompt.ID)}\n                    >\n                      {prompt.Name}\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Similar Prompts */}\n      {similarPrompts && similarPrompts.length > 0 && (\n        <div style={sectionStyle}>\n          <div style={headerStyle} onClick={() => setExpandedSection(expandedSection === ''similar'' ? null : ''similar'')}>\n            <span>Similar Prompts</span>\n            <span>{expandedSection === ''similar'' ? ''▼'' : ''▶''}</span>\n          </div>\n          \n          {expandedSection === ''similar'' && (\n            <div>\n              {similarPrompts.map(({ prompt, similarity }) => (\n                <div\n                  key={prompt.ID}\n                  style={{\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center'',\n                    padding: styles.spacing?.xs || ''4px'',\n                    marginBottom: ''2px'',\n                    backgroundColor: styles.colors?.surface || ''white'',\n                    borderRadius: styles.borders?.radius || ''4px'',\n                    cursor: ''pointer''\n                  }}\n                  onClick={() => onPromptNavigate(prompt.ID)}\n                >\n                  <div>\n                    <div style={{ fontSize: styles.fonts?.sizes?.sm || ''14px'' }}>\n                      {prompt.Name}\n                    </div>\n                    <div style={{\n                      fontSize: styles.fonts?.sizes?.xs || ''12px'',\n                      color: styles.colors?.text?.secondary || ''#666''\n                    }}>\n                      {prompt.Category || ''No category''}\n                    </div>\n                  </div>\n                  <div style={{\n                    ...badgeStyle,\n                    backgroundColor: similarity > 0.9 ? ''#d4edda'' \n                      : similarity > 0.7 ? ''#fff3cd'' \n                      : ''#f8f8f8'',\n                    color: similarity > 0.9 ? ''#155724'' \n                      : similarity > 0.7 ? ''#856404'' \n                      : ''#666''\n                  }}>\n                    {(similarity * 100).toFixed(0)}%\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","functionalRequirements":"Display selected prompt details including name, description, template text, show similar prompts based on vector similarity, display cluster membership info, provide navigation to prompt editor","technicalDesign":"React component that displays prompt entity details, calculates and shows top similar prompts using vector service, formats template text with syntax highlighting","dataRequirements":{"mode":"views","entities":[{"name":"AI Prompts","displayFields":["Name","Description","TemplateText","CategoryID","Category","TypeID","Type","Status","PromptRole","ResponseFormat","Template"],"filterFields":["Status","CategoryID","TypeID","PromptRole"],"sortFields":["Name","CreatedAt","UpdatedAt"],"permissions":["read"]}]},"properties":[{"name":"selectedPrompt","type":"object","required":false,"description":"Currently selected prompt entity"},{"name":"allPrompts","type":"array","required":true,"description":"All prompts for similarity calculation"},{"name":"clusterInfo","type":"object","required":false,"description":"Cluster information for selected prompt"},{"name":"similarPrompts","type":"array","required":false,"description":"List of similar prompts with similarity scores"}],"events":[{"name":"onPromptNavigate","description":"Fired when user wants to navigate to a prompt","parameters":[{"name":"promptId","type":"string","description":"ID of prompt to navigate to"}]},{"name":"onEditPrompt","description":"Fired when user wants to edit the prompt","parameters":[{"name":"promptId","type":"string","description":"ID of prompt to edit"}]}],"libraries":[],"usageExample":"<AIPromptsClusterDetails selectedPrompt={prompt} allPrompts={prompts} />","version":"1.0.0"},{"name":"DataExportPanel","location":"registry","namespace":"Generic/UI/Export","version":"^1.0.0"},{"name":"AIInsightsPanel","location":"registry","namespace":"Generic/UI/AI","version":"^1.0.0"}],"libraries":[{"name":"d3","version":"7.8.5","globalVariable":"d3"},{"name":"lodash","version":"4.17.21","globalVariable":"_"}],"usageExample":"<AIPromptsCluster />","version":"1.0.0"}'
SET
  @FunctionalRequirements_db175272 = N'Load all AI prompts, generate embeddings from TemplateText, perform clustering analysis, visualize clusters in interactive graph, show prompt details on selection, provide filtering and search capabilities'
SET
  @TechnicalDesign_db175272 = N'Main orchestrator that loads AI prompts data, manages embeddings generation and caching, coordinates sub-components for visualization and interaction, uses D3.js for graph rendering and SimpleVectorService for clustering'
SET
  @FunctionalRequirementsVector_db175272 = N'[-0.004244554787874222,-0.04344490170478821,-0.03652302920818329,-0.04865433648228645,0.011556217446923256,0.005743979010730982,0.047427695244550705,-0.00015924812760204077,0.045152872800827026,0.008994841948151588,-0.002214152365922928,0.03703438863158226,0.009325794875621796,0.08945076167583466,-0.008880415931344032,-0.0665559321641922,-0.0026057036593556404,-0.02315664291381836,0.0280894972383976,-0.021416250616312027,-0.03004479594528675,0.01294723991304636,-0.0070998091250658035,0.017161432653665543,-0.02415972389280796,-0.03344093635678291,-0.034113019704818726,-0.019525114446878433,0.05428424850106239,-0.03725589066743851,-0.06894727051258087,0.04717474430799484,0.00044726350461132824,-0.0022182392422109842,0.00000181453333425452,-0.06192007288336754,-0.03609997779130936,0.02934376895427704,-0.055215321481227875,0.022498376667499542,0.11483531445264816,0.04928926005959511,0.046591419726610184,0.001191278686746955,-0.036338403820991516,0.022631045430898666,0.017012525349855423,-0.011621282435953617,0.035690754652023315,-0.016285501420497894,-0.0025179290678352118,0.06328072398900986,-0.019208554178476334,-0.011685773730278015,-0.032458968460559845,0.004772876854985952,-0.010586784221231937,-0.04211398959159851,0.0837453082203865,-0.003429869655519724,0.007597758900374174,0.004055307246744633,0.00040796148823574185,-0.02654450200498104,0.058468807488679886,0.05265074595808983,-0.00958765298128128,-0.08348965644836426,0.0280048456043005,0.030384555459022522,0.09154577553272247,0.0040030525997281075,-0.005193512886762619,-0.023971814662218094,-0.009601837024092674,0.007899312302470207,-0.03397652879357338,-0.0047220452688634396,-0.02483683079481125,-0.009574285708367825,0.028918994590640068,-0.0024937321431934834,-0.01636769436299801,-0.03387947753071785,-0.0413120873272419,0.04980432987213135,0.010436822660267353,-0.04991612955927849,-0.022221188992261887,0.002160710748285055,0.013142709620296955,-0.00040680886013433337,0.023695070296525955,0.007372832391411066,-0.11713103204965591,-0.023799527436494827,0.015997670590877533,-0.02098255231976509,0.0025720272678881884,0.06599438190460205,0.09656655788421631,0.03714338690042496,0.011696608737111092,0.03998120501637459,0.020763978362083435,0.02841668762266636,0.020793557167053223,-0.016338175162672997,-0.02470529079437256,0.009891447611153126,-0.043485693633556366,-0.011065295897424221,-0.043303098529577255,0.02539239265024662,-0.010271950624883175,-0.013947511091828346,0.00018601029296405613,0.05825669318437576,-0.03376567363739014,0.033837515860795975,0.036001481115818024,0.019101856276392937,-0.009625193662941456,0.05981897935271263,-0.0024198342580348253,-0.05504404753446579,-0.07552246749401093,-0.009811402298510075,-0.009608350694179535,-0.01858755573630333,-0.0017413515597581863,0.026121463626623154,0.015327224507927895,-0.006873947102576494,-0.0047357999719679356,-0.0043225400149822235,0.0264299176633358,-0.028155533596873283,-0.013014103285968304,-0.020927557721734047,0.03480693697929382,-0.01782155968248844,-0.010744626633822918,-0.01659732684493065,0.02147603966295719,0.009681780822575092,-0.01767764985561371,0.03920063376426697,-0.02269251085817814,0.010950434021651745,-0.033224672079086304,0.04796886444091797,0.00019827384676318616,0.015919797122478485,-0.006828015670180321,-0.043036047369241714,-0.0008390721632167697,0.03213776648044586,-0.048744190484285355,0.03406282886862755,0.04051591455936432,0.0032800158951431513,0.027351491153240204,0.01872759684920311,-0.021905288100242615,0.0027378443628549576,-0.06749606132507324,0.013396660797297955,-0.014880788512527943,0.0073343850672245026,-0.0038543965201824903,-0.03209026902914047,-0.023171421140432358,0.022453997284173965,-0.02318922057747841,0.12180302292108536,0.0544406995177269,0.0046926625072956085,0.04661553353071213,0.011165657080709934,0.039712704718112946,-0.018827170133590698,-0.014950990676879883,0.0180586576461792,-0.022738493978977203,-0.01672728918492794,0.0202631838619709,0.049478501081466675,-0.005719443783164024,0.0032141897827386856,0.012694546021521091,0.020959563553333282,-0.002902056323364377,0.002729833358898759,0.030317699536681175,-0.004686357919126749,0.006657536141574383,-0.09081532806158066,0.029096780344843864,-0.01700032316148281,-0.025353237986564636,-0.0033596756402403116,0.035198163241147995,0.06877383589744568,0.0641167014837265,-0.047017160803079605,-0.005632758606225252,0.006165211088955402,-0.022951805964112282,0.00684193754568696,0.04421567544341087,-0.020509283989667892,-0.05189163610339165,0.0014007430290803313,-0.05515259504318237,0.0023473617620766163,-0.00912339985370636,0.022245202213525772,-0.054698288440704346,0.019210994243621826,-0.03628595918416977,-0.007259013131260872,-0.030517734587192535,0.012062249705195427,0.039024583995342255,-0.007719120476394892,0.030516600236296654,0.023787133395671844,0.036403920501470566,0.04282474145293236,-0.026968345046043396,-0.010350829921662807,0.06123587489128113,0.011271628551185131,-0.00021607763483189046,0.02789643593132496,-0.00042699225014075637,-0.0007337767165154219,-0.03419068455696106,-0.02036443166434765,-0.016944460570812225,-0.04136018827557564,-0.021305933594703674,-0.009948186576366425,-0.026359936222434044,-0.047587800770998,0.032599590718746185,0.005497137550264597,0.019015632569789886,-0.026697177439928055,0.004006102681159973,-0.03288721665740013,0.05304466187953949,0.0029390621930360794,0.005252343602478504,0.09973714500665665,0.022370101884007454,-0.017893731594085693,-0.10794806480407715,0.06089837849140167,0.0056809489615261555,0.000010150814887310844,-0.007597268559038639,0.002327751135453582,0.015302789397537708,-0.0031696795485913754,0.039505939930677414,-0.13136449456214905,-0.04745182394981384,-0.009439483284950256,-0.014098184183239937,0.016411155462265015,0.008087349124252796,-0.005451392848044634,-0.02138473652303219,0.03357890620827675,0.008685837499797344,-0.02398480847477913,0.024575883522629738,-0.013313931412994862,-0.009180919267237186,0.026379257440567017,0.00020737263548653573,0.004112365189939737,-0.05019516125321388,0.024170247837901115,0.07845859974622726,-0.012575100176036358,-0.010637436993420124,0.013587388209998608,0.005050725769251585,0.013598580844700336,0.030146747827529907,0.02631743997335434,0.006555237807333469,-0.014385423623025417,-0.013054725714027882,0.13130539655685425,-0.027279667556285858,0.06406009942293167,-0.008535698987543583,0.03835586830973625,-0.01706762984395027,0.02330702915787697,-0.017633723095059395,0.1010083556175232,0.034876998513936996,0.019306262955069542,0.05254140496253967,-0.008244256488978863,0.012523651123046875,0.0013178737135604024,-0.025039365515112877,0.006628484930843115,-0.011503943242132664,-0.04256979748606682,-0.05892552062869072,-0.032697517424821854,-0.03093934990465641,0.06915228068828583,0.0022119858767837286,-0.03840320557355881,0.056646090000867844,-0.013462451286613941,-0.014691218733787537,-0.043879102915525436,-0.05555952340364456,0.0008184752077795565,-0.040349312126636505,0.023158153519034386,0.02880125492811203,-0.03496018797159195,-0.010047439485788345,-0.014385126531124115,0.043877795338630676,0.005525116343051195,-0.012154086492955685,-0.0049081649631261826,0.014846869744360447,-0.03583504259586334,0.015318055637180805,-0.008136183954775333,-0.023868123069405556,0.0025299754925072193,0.02125805802643299,0.021528827026486397,0.04350828006863594,-0.0564221628010273,-0.0557393915951252,0.0046815695241093636,0.03267534449696541,0.038304079324007034,-0.026652004569768906,-0.010511117987334728,0.013745786622166634,0.021831588819622993,-0.004594770260155201,0.011015700176358223,-0.04176349565386772,-0.020411115139722824,0.0346938855946064,0.02090691588819027,0.02658129669725895,-0.02649475634098053,-0.00812061782926321,0.043179139494895935,0.009257117286324501,-0.05590411648154259,-0.028747349977493286,-0.0038461056537926197,-0.021646909415721893,0.005601505283266306,0.01112041063606739,0.07097499072551727,0.039675530046224594,-0.1231275349855423,-0.003063655225560069,-0.050437621772289276,-0.020508887246251106,0.006302318535745144,0.04629375413060188,-0.026591602712869644,0.050246596336364746,0.020004771649837494,0.0468534380197525,-0.016609815880656242,-0.02470099739730358,0.03127901256084442,-0.09283778071403503,0.06918002665042877,-0.009679491631686687,-0.05955017730593681,-0.004652082454413176,-0.06327662616968155,-0.0187752153724432,-0.04807458817958832,-0.04846828430891037,-0.006506037898361683,-0.02717878855764866,0.03468836471438408,-0.002125212224200368,0.01357976719737053,0.0010845258366316557,0.0009486036142334342,0.015580370090901852,0.001723665976896882,0.053259119391441345,0.05648023262619972,-0.010397532023489475,-0.03026673011481762,-0.048004571348428726,0.040666352957487106,0.013129291124641895,-0.07351360470056534,0.04054185003042221,-0.012037712149322033,-0.005646350793540478,-0.003955841530114412,0.03710595518350601,0.0385085865855217,0.0005627128412015736,-0.0060548316687345505,0.09515420347452164,-0.02168331667780876,0.00615842267870903,-0.019918978214263916,-0.004597481805831194,-0.020619714632630348,0.013371845707297325,0.02605951763689518,-0.02300507016479969,0.0489899180829525,-0.033969905227422714,0.022391516715288162,0.03939099609851837,-0.02317516691982746,-0.021623173728585243,-0.014081623405218124,0.02346566691994667,-0.030702345073223114,-0.044136956334114075,0.08303071558475494,0.10195677727460861,0.010914755053818226,-0.027142975479364395,-0.05093979462981224,-0.011880571022629738,-0.054342109709978104,0.02114425227046013,-0.020391376689076424,0.005642967764288187,-0.004946460481733084,-0.01121160201728344,0.01799999736249447,0.0036981317680329084,-0.04994067922234535,-0.03860054537653923,0.09018411487340927,-0.05631440877914429,0.011062201112508774,0.010780228301882744,0.03372712805867195,0.006797103676944971,-0.04459523782134056,-0.033344801515340805,0.1324574053287506,-0.007434477563947439,-0.020041048526763916,-0.013837961480021477,-0.020484767854213715,-0.0004401137412060052,-0.0007949640275910497,-0.011792697012424469,-0.024939337745308876,0.0015498230932280421,-0.0028479385655373335,-0.02387368492782116,0.025731932371854782,-0.07410477101802826,0.00014122037100605667,0.08704149723052979,0.010515496134757996,0.028418712317943573,-0.07052245736122131,-0.025785518810153008,0.033105719834566116,0.006497681140899658,0.00732245622202754,-0.0008005965501070023,0.04808533936738968,-0.029449300840497017,0.002436179667711258,0.025187835097312927,0.022940276190638542,-0.01782405748963356,-0.015592108480632305,-0.10019869357347488,0.010448931716382504,0.01179528795182705,0.03778521716594696,0.019194480031728745,-0.0030380378011614084,-0.00978593435138464,-0.026299044489860535,0.0021472161170095205,0.04316040873527527,0.006518804933875799,0.033910997211933136,-0.008264726027846336,0.02174997329711914,-0.0019546395633369684,0.02786671370267868,-0.05302504822611809,-0.05549495667219162,-0.011566237546503544,0.027878277003765106,-0.028804918751120567,-0.00859825685620308,-0.04084094986319542,-0.03542807325720787,0.0013987936545163393,0.01359361782670021,-0.011527699418365955,0.03201964497566223,0.03838106617331505,0.006623575929552317,0.04401513561606407,-0.0087906364351511,0.01116126962006092,0.05315543711185455,-0.054002221673727036,0.036346010863780975,0.01222472358494997,-0.022096918895840645,-0.06481369584798813,-0.012142032384872437,0.05905952677130699,0.07094138860702515,-0.007733186706900597,0.018284769728779793,-0.010170375928282738,-0.03613923862576485,0.013008087873458862,-0.04160553216934204,-0.06790343672037125,-0.04081097990274429,0.030886532738804817,0.01889471709728241,0.017558228224515915,0.03668773174285889,-0.002452189102768898,-0.02017849311232567,-0.08151540905237198,-0.038399770855903625,-0.01944664679467678,-6.1057259410762476e-33,-0.02704242803156376,-0.04831662029027939,-0.011615735478699207,-0.028781594708561897,-0.027294641360640526,-0.04315279796719551,0.02051687240600586,0.0058338455855846405,-0.0007907442050054669,0.02868042327463627,-0.04771046340465546,-0.024038447067141533,0.013020787388086319,-0.008158295415341854,-0.011507104150950909,0.03392073139548302,0.02899479866027832,0.004357054829597473,-0.02412448264658451,0.046585895121097565,0.022639570757746696,0.04175087437033653,-0.04983561486005783,-0.006960396654903889,-0.006332915276288986,0.05786053091287613,0.04739638790488243,0.010529118590056896,-0.047637999057769775,0.03631691262125969,-0.016475167125463486,0.004252840299159288,-0.01337690930813551,0.0016314872773364186,-0.008299052715301514,0.015643540769815445,-0.014410530216991901,-0.06854283809661865,0.025518089532852173,-0.007673160172998905,-0.008664402179419994,-0.051806505769491196,0.004568784032016993,-0.008062710054218769,-0.006075494922697544,0.04529116675257683,0.059883736073970795,0.011458306573331356,-0.040835727006196976,0.02405339479446411,-0.059119999408721924,0.014072064310312271,-0.0012339695822447538,0.06589818745851517,0.025419479236006737,0.07580765336751938,0.01284726895391941,0.06203603744506836,-0.02428048849105835,0.009766376577317715,-0.010954683646559715,-0.005536707118153572,0.028179632499814034,-0.010855309665203094,0.0525205172598362,0.007581834681332111,-0.031119506806135178,-0.034644994884729385,-0.044308844953775406,-0.04787643253803253,0.0034955742303282022,0.06076566502451897,0.011682586744427681,-0.06062225252389908,-0.07204446941614151,0.007415688596665859,0.03274979069828987,0.014899523928761482,0.005141646601259708,0.032498374581336975,0.04060899838805199,-0.001585177262313664,-0.045213483273983,-0.013928445056080818,-0.012181391008198261,-0.08329420536756516,-0.05104450508952141,-0.0009815660305321217,0.0045966338366270065,0.003517181146889925,-0.08304549753665924,-0.043274227529764175,-0.02536717802286148,-0.0029668372590094805,0.07987679541110992,-0.0012839857954531908,0.0261358842253685,0.01973080448806286,0.0282882172614336,0.005520686972886324,-0.03001842275261879,0.002284088172018528,0.0016966009279713035,-0.015532261691987514,0.03461111709475517,-0.0013997094938531518,-0.022835930809378624,-0.004923162516206503,-0.06707983464002609,-0.013495631515979767,-0.0007671497296541929,-0.01193444337695837,0.003896725131198764,-0.019644614309072495,0.0519963763654232,-0.006803268101066351,-0.0005916113150306046,0.027602043002843857,0.038363829255104065,0.014242587611079216,0.005284944083541632,-0.017214586958289146,-0.006707631051540375,-0.039869844913482666,-0.020135585218667984,0.008385981433093548,-0.03473731130361557,-0.0017233553808182478,0.05608585104346275,0.008505431935191154,-0.02414519526064396,-0.0031328992918133736,2.4883632931960165e-7,-0.011604543775320053,0.07298018038272858,-0.03643353283405304,-0.02462770789861679,0.03211783617734909,-0.001638706075027585,0.021418238058686256,-0.023051217198371887,0.0279096569865942,0.014081604778766632,0.04032107815146446,0.027922959998250008,0.02191760577261448,0.030091388151049614,-0.05654596537351608,0.005307568237185478,-0.013335000723600388,0.000995025155134499,-0.07006552070379257,0.0035178917460143566,0.0247364304959774,0.057979878038167953,-0.004856540821492672,0.01764555089175701,0.028674902394413948,-0.07429302483797073,-0.02669363282620907,0.0022481330670416355,0.022879965603351593,-0.040835749357938766,0.011580049060285091,0.024225592613220215,-0.02065693587064743,0.050304148346185684,-0.02097533643245697,0.02360633574426174,-0.03098803199827671,0.020058205351233482,0.020161466673016548,0.009719629772007465,0.05738876387476921,-0.03442857414484024,0.015907350927591324,-0.04436609521508217,0.05735451355576515,-0.05780617892742157,-0.03728627413511276,-0.024663904681801796,0.022411420941352844,-0.04980923607945442,0.0025064123328775167,-0.031173069030046463,0.06115734204649925,0.004643005784600973,-0.0026233065873384476,-0.007732168771326542,-0.008462410420179367,-0.015298216603696346,0.02545890398323536,-0.021129107102751732,-0.03380598500370979,-0.07101539522409439,0.0012082625180482864,0.0330781415104866,0.0682135596871376,-0.015121053904294968,0.02051638811826706,3.431911317700844e-34,0.038172587752342224,0.022616256028413773,0.029833899810910225,0.04766323044896126,0.013248251751065254,-0.027070220559835434,-0.053503233939409256,0.009008028544485569,0.07018773257732391,-0.15694038569927216,-0.019814912229776382]'
SET
  @TechnicalDesignVector_db175272 = N'[0.002090536057949066,-0.06863752752542496,-0.031085945665836334,-0.03823060542345047,0.024490999057888985,0.013093551620841026,0.05924415960907936,-0.01240526419132948,0.006409179884940386,-0.0131445974111557,0.03063809871673584,0.03283477574586868,0.016223926097154617,0.1356956511735916,0.000866025104187429,-0.039938367903232574,0.007223542779684067,-0.009813100099563599,-0.02718953788280487,-0.02328425832092762,0.013408147729933262,-0.02710922248661518,0.014295336790382862,-0.03044508770108223,-0.033604416996240616,-0.013202015310525894,-0.05511854216456413,0.011060339398682117,0.02195199392735958,-0.04063168913125992,-0.006069163326174021,0.0202726311981678,-0.007062676828354597,0.043978918343782425,0.0000020056368157383986,-0.001447078539058566,-0.02675868384540081,0.007663946133106947,0.019198736175894737,0.015547486022114754,0.062493257224559784,-0.05378995090723038,0.02889770269393921,-0.018301410600543022,-0.00850007589906454,-0.008552376180887222,0.04754507169127464,0.003779704449698329,0.06344437599182129,-0.04449967294931412,-0.007270519156008959,0.04688359797000885,-0.03656892478466034,0.03621158376336098,-0.10013118386268616,0.08937466889619827,-0.00906355306506157,0.060838647186756134,0.04273897409439087,0.006497121881693602,-0.04432088881731033,-0.0003680057998280972,0.00976246502250433,-0.01864556036889553,0.10112231224775314,0.030738452449440956,-0.0019623073749244213,-0.07097992300987244,-0.000771791790612042,0.029566070064902306,0.11152604222297668,0.01996334083378315,0.03304063901305199,0.0005453912308439612,-0.03996706008911133,-0.011216264218091965,-0.03484056890010834,-0.02356971800327301,0.02348981238901615,-0.029788175597786903,0.02995864674448967,0.010680997744202614,-0.029211897403001785,-0.04905164986848831,0.0007489528506994247,0.01165375579148531,0.02945202961564064,-0.005572027526795864,-0.07207810878753662,-0.010592312552034855,0.01117047481238842,-0.02751055546104908,0.011089540086686611,-0.0015625995583832264,-0.07145719975233078,-0.03135677054524422,-0.0023681435268372297,-0.06505747139453888,0.011347622610628605,0.039343781769275665,0.05499650910496712,0.01407868042588234,0.004158943425863981,0.043111760169267654,0.06309159845113754,0.04183698818087578,-0.0145730497315526,-0.04201676324009895,0.018943853676319122,0.013777163811028004,-0.02100694365799427,-0.006988853681832552,-0.0033514341339468956,0.04431510344147682,-0.013153034262359142,-0.0331214964389801,-0.00994952954351902,0.05784713476896286,-0.008059249259531498,0.008063966408371925,0.03413309529423714,0.029361605644226074,0.015406152233481407,0.06252628564834595,0.012561424635350704,0.00369473360478878,-0.03424208238720894,-0.00737062469124794,0.013967123813927174,-0.027907488867640495,0.005673577077686787,0.010846287943422794,0.02819119207561016,0.004205020610243082,-0.007957437075674534,0.006693995092064142,0.06500587612390518,0.001834916532970965,0.008548512123525143,-0.03416503220796585,0.04765136539936066,-0.04437482729554176,-0.05303814262151718,-0.020912906154990196,0.01584043726325035,-0.017638836055994034,-0.003016205271705985,0.04298800975084305,-0.002048959955573082,-0.02887529693543911,-0.021482447162270546,-0.009668770246207714,-0.07471031695604324,0.011233269236981869,-0.02532939426600933,-0.001226718071848154,0.0587572380900383,0.01260044053196907,-0.021064842119812965,0.007701387163251638,0.025650527328252792,0.0032594159711152315,0.04884754866361618,0.015643460676074028,-0.024539124220609665,0.02729617804288864,0.014185036532580853,0.010855510830879211,-0.0786878764629364,0.011121828109025955,0.005008109845221043,0.004343092441558838,-0.03277246281504631,-0.011041182093322277,0.034246720373630524,0.06371534615755081,0.04477247595787048,-0.007331886328756809,-0.0014501105761155486,0.011311111971735954,0.0447118766605854,-0.04939824715256691,-0.017433037981390953,0.05136778578162193,0.07794567942619324,-0.00828823633491993,-0.026862792670726776,0.07098562270402908,-0.0043161953799426556,0.00042266337550245225,0.0008312046993523836,-0.011366686783730984,-0.020597875118255615,-0.017968351021409035,0.03736495599150658,-0.011879312805831432,-0.038350507616996765,-0.09334458410739899,0.0026817715261131525,-0.02034735679626465,-0.02171308360993862,0.019697468727827072,0.004201886244118214,0.04100249707698822,0.055685777217149734,-0.0026308491360396147,-0.07497093826532364,-0.0009041886660270393,0.012557091191411018,0.029338687658309937,0.037523575127124786,-0.006590175908058882,-0.022796321660280228,0.00747524481266737,-0.03381059691309929,-0.007256062235683203,0.031633082777261734,0.02617417834699154,-0.06358630210161209,-0.012612679973244667,-0.08367592841386795,0.0027084045577794313,0.011312440037727356,-0.0003010575019288808,-0.02861175127327442,0.029182877391576767,-0.013180608861148357,-0.010208142921328545,0.022442998364567757,0.035707734525203705,-0.0299682579934597,-0.021190067753195763,0.04660855606198311,0.039946429431438446,0.023699074983596802,0.07099435478448868,0.05335932970046997,0.04484078660607338,-0.008886788971722126,0.03658456727862358,0.008794998750090599,-0.020977353677153587,-0.02208903804421425,-0.03473343327641487,0.04906419664621353,-0.04189196601510048,-0.007277659140527248,0.022840159013867378,-0.009898493997752666,-0.03332379832863808,0.04540801793336868,0.02205861173570156,-0.005507888272404671,-0.05943004786968231,-0.02401389554142952,0.0054748025722801685,0.008957275189459324,0.03138537332415581,-0.037855543196201324,0.04853222146630287,-0.0006864861934445798,-0.011571935378015041,-0.0031921672634780407,-0.012361506000161171,-0.007007427513599396,-0.027886666357517242,0.08885142207145691,-0.0886375829577446,-0.020395677536725998,0.009396523237228394,0.013940504752099514,0.029978159815073013,0.03304382786154747,0.010029248893260956,-0.018007250502705574,0.047686781734228134,0.04110870882868767,0.008287125267088413,0.0009687034762464464,-0.02556445635855198,-0.039926063269376755,-0.04130140319466591,0.012747606262564659,-0.0006584572256542742,-0.013622635044157505,0.02764475904405117,0.03201358765363693,-0.024325791746377945,0.022657277062535286,-0.0440855547785759,-0.03582078590989113,0.01766081340610981,0.019919056445360184,-0.03646305948495865,-0.01475654635578394,0.021500088274478912,0.004466483369469643,0.10805061459541321,-0.04712095856666565,0.0668402686715126,-0.0104334382340312,-0.05285027623176575,0.003394646104425192,-0.018968839198350906,-0.033091649413108826,0.07718067616224289,-0.025124046951532364,0.010680249892175198,-0.0021624902728945017,0.05117064341902733,0.03295561298727989,0.0021229013800621033,-0.02349884994328022,-0.004893945064395666,0.0011316068703308702,-0.003519879886880517,0.004127375781536102,-0.03485274314880371,-0.03941171243786812,0.08856721967458725,-0.0066235605627298355,-0.011120175011456013,0.03009319119155407,-0.019459843635559082,-0.032379183918237686,0.008814417757093906,-0.0485168881714344,-0.03059319220483303,-0.060980528593063354,-0.021649103611707687,0.017991619184613228,-0.06689044088125229,-0.023819273337721825,-0.007241431623697281,0.029387185350060463,0.011240188032388687,-0.04458172246813774,-0.10640858858823776,0.030701857060194016,-0.043530210852622986,0.004425164312124252,-0.02299761027097702,-0.012027746997773647,0.11229310184717178,0.012052864767611027,0.00021163008932489902,-0.0014198903227224946,-0.025976868346333504,-0.07284141331911087,-0.00014565588207915425,0.0389891192317009,0.047438845038414,-0.024950820952653885,-0.0024073165841400623,-0.009905814193189144,0.041783060878515244,-0.030705036595463753,0.04066813364624977,-0.03067546710371971,-0.03783133998513222,0.06255622953176498,0.026419246569275856,0.011659163981676102,-0.045653149485588074,-0.06565719842910767,0.021305454894900322,0.03530785068869591,-0.00863213837146759,-0.029942959547042847,-0.02329227142035961,0.01654784567654133,0.006699923891574144,0.0019598398357629776,0.014697964303195477,-0.011432358995079994,-0.07389068603515625,0.0204064529389143,0.012992320582270622,-0.023636890575289726,0.028872817754745483,0.054453831166028976,-0.07523715496063232,0.04824666306376457,0.00020206444605719298,0.06591980904340744,-0.03546362370252609,-0.02309475839138031,0.02637244388461113,-0.022030480206012726,0.1017727479338646,0.0013336521806195378,-0.04244041442871094,0.0003685837727971375,-0.06466946750879288,0.003850863315165043,-0.047983791679143906,-0.0379490852355957,-0.005792984738945961,0.0042447191663086414,0.015528491698205471,0.013918766751885414,0.013826243579387665,-0.011873878538608551,-0.04281861335039139,-0.0075100259855389595,0.018726257607340813,0.0012743024853989482,0.02327987365424633,-0.00100097490940243,0.01726352982223034,-0.0071823978796601295,0.08149891346693039,-0.021377775818109512,-0.04344361647963524,-0.010828224010765553,-0.0035831958521157503,0.0037877014838159084,-0.03626816347241402,0.022945795208215714,0.01408736128360033,0.01016581617295742,-0.026423728093504906,0.05440047010779381,-0.027067523449659348,0.024739157408475876,-0.03785714507102966,0.0036221477203071117,-0.010698435828089714,-0.015436430461704731,0.011171371676027775,-0.006906719412654638,-0.005735922604799271,0.017867732793092728,0.03568757697939873,0.03614689037203789,-0.04600288346409798,-0.014428936876356602,-0.0023150495253503323,0.0058274585753679276,-0.022812645882368088,-0.004775387234985828,0.0017521368572488427,0.07684387266635895,0.030784694477915764,-0.006119659636169672,-0.0214331466704607,-0.0407349169254303,-0.04857886582612991,-0.01381779182702303,0.03987405449151993,0.03061981499195099,0.013648118823766708,-0.0039216941222548485,-0.0095260851085186,-0.03355041518807411,-0.02862556092441082,-0.059140633791685104,0.004790411796420813,-0.04192236438393593,0.09627057611942291,0.050764620304107666,0.03621092811226845,-0.0022404154296964407,0.01805144175887108,-0.028222432360053062,0.06607759743928909,0.060145653784275055,-0.08322221040725708,0.03168870881199837,-0.03580061346292496,-0.00520637771114707,-0.014412692748010159,-0.02287488617002964,-0.029227837920188904,0.026120495051145554,0.017552223056554794,-0.01800243742763996,0.016023987904191017,0.027586985379457474,-0.019977208226919174,0.04894570633769035,0.011256115511059761,0.014809091575443745,-0.03350048512220383,-0.009548215195536613,-0.011466283351182938,-0.012175659649074078,-0.0009053868125192821,-0.026646025478839874,0.03458638861775398,-0.03730568662285805,-0.011473754420876503,0.024801844730973244,0.11008785665035248,0.0703863725066185,-0.015926511958241463,-0.023204978555440903,0.011609180830419064,0.03880496323108673,-0.03900843858718872,0.010098302736878395,0.026478812098503113,0.012662200257182121,0.01714688166975975,-0.018990930169820786,0.033192284405231476,-0.01632101833820343,-0.030797308310866356,0.0021536697167903185,-0.03308617323637009,-0.008341317065060139,-0.0016170792514458299,-0.056654516607522964,-0.0035688914358615875,-0.0018448494374752045,0.0021908441558480263,-0.035341985523700714,0.056173499673604965,0.045187413692474365,-0.04232899844646454,0.013134797103703022,0.007038072682917118,0.005567176267504692,-0.02627391554415226,0.07363837957382202,-0.019841810688376427,0.020169012248516083,0.006119573954492807,0.0500335656106472,0.012969808652997017,0.02587902545928955,0.004987066145986319,-0.021929709240794182,-0.03806784376502037,-0.04439552128314972,0.04824333265423775,0.044145066291093826,0.10344401001930237,-0.018964573740959167,-0.018556125462055206,-0.0500420406460762,-0.022579466924071312,-0.0517503060400486,0.006244273856282234,-0.020970670506358147,-0.03209199756383896,-0.01449933834373951,-0.029264124110341072,0.059235021471977234,0.01574154756963253,0.010096891783177853,-0.02244452014565468,-0.1367940902709961,-0.055121347308158875,0.056430328637361526,-6.840104649150948e-33,0.0010598043445497751,-0.0569809228181839,0.02033896930515766,-0.044756535440683365,-0.08203921467065811,0.023223809897899628,0.0054578520357608795,-0.02235308289527893,-0.006195741705596447,-0.002776838606223464,0.0016424382338300347,0.009835515171289444,0.005599696189165115,-0.008620266802608967,-0.01372372917830944,0.05415952950716019,0.011693079955875874,-0.015070305205881596,-0.04204203933477402,0.036640480160713196,0.01033874787390232,0.0419820137321949,-0.050572719424963,-0.02982363849878311,-0.014125030487775803,-0.002567601390182972,0.03484518453478813,0.013102211989462376,-0.06166180223226547,0.03148765116930008,-0.029864517971873283,-0.008442115038633347,-0.030696803703904152,0.06354531645774841,0.0065689547918736935,-0.0005256662261672318,-0.05642368644475937,-0.01958511769771576,0.03504583239555359,0.008493093773722649,-0.044370315968990326,-0.01480791624635458,0.025785863399505615,-0.02836320362985134,-0.0006302039255388081,-0.004537992645055056,0.03354696184396744,0.021816708147525787,-0.04176628217101097,0.000841316010337323,-0.018977370113134384,0.02068847417831421,-0.024720491841435432,0.08054786175489426,0.052631452679634094,0.00894477404654026,0.02629994973540306,0.045193303376436234,-0.046214304864406586,0.03279365599155426,-0.10863099992275238,-0.06657152622938156,-0.000747060461435467,0.01818244718015194,0.043686557561159134,0.031648900359869,-0.021032271906733513,0.028446007519960403,-0.04080592095851898,0.0022000472526997328,-0.0018197284080088139,0.06670117378234863,0.016996055841445923,-0.07344276458024979,-0.06552895158529282,0.02824615128338337,0.041784435510635376,-0.026951903477311134,-0.018468430265784264,0.00016884869546629488,0.004091221839189529,-0.009831779636442661,-0.0005858354852534831,-0.0036796380300074816,0.01145358756184578,-0.0797860249876976,-0.017234548926353455,-0.012572082690894604,0.017274875193834305,0.01098706852644682,-0.05304655432701111,-0.008053245954215527,-0.012490453198552132,-0.041111771017313004,0.08806739747524261,0.016114724799990654,0.011981342919170856,0.027571910992264748,0.0035320480819791555,-0.014735032804310322,0.014427248388528824,0.009167877957224846,-0.03774041309952736,-0.007602549623697996,0.015630275011062622,-0.022239800542593002,-0.01070394180715084,-0.005810528062283993,-0.029290691018104553,0.020796243101358414,0.008338802494108677,0.022338896989822388,0.003926515579223633,-0.043890148401260376,0.001136760343797505,-0.011383919976651669,0.021775778383016586,-0.005325873848050833,0.054537683725357056,0.06145462021231651,0.04337713122367859,-0.05001465603709221,-0.03323404863476753,-0.010404102504253387,-0.007905155420303345,0.02135651558637619,-0.05985988304018974,0.03002350963652134,0.02026829868555069,0.0023933856282383204,-0.017328813672065735,-0.004174755420535803,2.7306094807499903e-7,-0.04222062975168228,0.09436627477407455,-0.012698831968009472,-0.04513437673449516,0.03146466612815857,-0.0163279939442873,0.026954349130392075,-0.016689734533429146,-0.010547541081905365,0.03260941058397293,0.0030246993992477655,0.03541489318013191,0.02861439809203148,0.00765950046479702,-0.02255364879965782,0.005156099796295166,-0.035694919526576996,-0.03415866568684578,-0.05119062587618828,-0.011683231219649315,-0.025570610538125038,0.023497572168707848,0.0676804929971695,0.0009176506428048015,0.005923005752265453,-0.009070809930562973,-0.011525971814990044,0.05387814715504646,0.017033006995916367,-0.03127829730510712,0.006355527322739363,0.04673467203974724,-0.022297143936157227,-0.0033156685531139374,-0.01025021355599165,-0.0005776557954959571,-0.05453391373157501,-0.03438691422343254,-0.001386944204568863,0.06264656782150269,0.07150429487228394,-0.03810115531086922,-0.03183594346046448,0.001402208348736167,0.021159127354621887,-0.022210177034139633,-0.05146602913737297,0.0017223197501152754,-0.017629623413085938,-0.045540954917669296,-0.004363212734460831,-0.03932485729455948,0.021600715816020966,-0.0076415883377194405,-0.02450631372630596,-0.03057152032852173,0.012004509568214417,0.04421414062380791,0.04661862552165985,0.007254393305629492,0.001740007777698338,-0.08782205730676651,0.01144592184573412,0.08950815349817276,0.06598208844661713,0.011951695196330547,-0.013864550739526749,3.6256814595293207e-34,0.03630221635103226,-0.015003262087702751,0.004022917244583368,0.06513942778110504,0.012355023063719273,-0.05414979159832001,-0.0012839436531066895,-0.018741589039564133,0.02537745237350464,-0.10047098249197006,-0.025848286226391792]'
SET
  @HasCustomProps_db175272 = 0
SET
  @HasCustomEvents_db175272 = 0
SET
  @RequiresData_db175272 = 0
SET
  @DependencyCount_db175272 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_db175272 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_db175272 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_db175272 = 0
SET
  @ID_db175272 = '913FC220-BE2B-4EE6-AFF5-8DD9B4C6C7E4'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_db175272,
  @Name = @Name_db175272,
  @Version = @Version_db175272,
  @VersionSequence = @VersionSequence_db175272,
  @Title = @Title_db175272,
  @Description = @Description_db175272,
  @Type = @Type_db175272,
  @Status = @Status_db175272,
  @DeveloperName = @DeveloperName_db175272,
  @DeveloperEmail = @DeveloperEmail_db175272,
  @DeveloperOrganization = @DeveloperOrganization_db175272,
  @SourceRegistryID = @SourceRegistryID_db175272,
  @ReplicatedAt = @ReplicatedAt_db175272,
  @LastSyncedAt = @LastSyncedAt_db175272,
  @Specification = @Specification_db175272,
  @FunctionalRequirements = @FunctionalRequirements_db175272,
  @TechnicalDesign = @TechnicalDesign_db175272,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_db175272,
  @TechnicalDesignVector = @TechnicalDesignVector_db175272,
  @HasCustomProps = @HasCustomProps_db175272,
  @HasCustomEvents = @HasCustomEvents_db175272,
  @RequiresData = @RequiresData_db175272,
  @DependencyCount = @DependencyCount_db175272,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_db175272,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_db175272,
  @HasRequiredCustomProps = @HasRequiredCustomProps_db175272,
  @ID = @ID_db175272;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_3ba5bb73 NVARCHAR(MAX),
@Name_3ba5bb73 NVARCHAR(500),
@Version_3ba5bb73 NVARCHAR(50),
@VersionSequence_3ba5bb73 INT,
@Title_3ba5bb73 NVARCHAR(1000),
@Description_3ba5bb73 NVARCHAR(MAX),
@Type_3ba5bb73 NVARCHAR(255),
@Status_3ba5bb73 NVARCHAR(50),
@DeveloperName_3ba5bb73 NVARCHAR(255),
@DeveloperEmail_3ba5bb73 NVARCHAR(255),
@DeveloperOrganization_3ba5bb73 NVARCHAR(255),
@SourceRegistryID_3ba5bb73 UNIQUEIDENTIFIER,
@ReplicatedAt_3ba5bb73 DATETIMEOFFSET,
@LastSyncedAt_3ba5bb73 DATETIMEOFFSET,
@Specification_3ba5bb73 NVARCHAR(MAX),
@FunctionalRequirements_3ba5bb73 NVARCHAR(MAX),
@TechnicalDesign_3ba5bb73 NVARCHAR(MAX),
@FunctionalRequirementsVector_3ba5bb73 NVARCHAR(MAX),
@TechnicalDesignVector_3ba5bb73 NVARCHAR(MAX),
@HasCustomProps_3ba5bb73 BIT,
@HasCustomEvents_3ba5bb73 BIT,
@RequiresData_3ba5bb73 BIT,
@DependencyCount_3ba5bb73 INT,
@TechnicalDesignVectorEmbeddingModelID_3ba5bb73 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_3ba5bb73 NVARCHAR(MAX),
@HasRequiredCustomProps_3ba5bb73 BIT,
@ID_3ba5bb73 UNIQUEIDENTIFIER
SET
  @Namespace_3ba5bb73 = N'AI/Analytics'
SET
  @Name_3ba5bb73 = N'AIPromptsClusterGraph'
SET
  @Version_3ba5bb73 = N'1.0.0'
SET
  @VersionSequence_3ba5bb73 = 1
SET
  @Title_3ba5bb73 = N'AI Prompts Cluster Graph'
SET
  @Description_3ba5bb73 = N'D3.js force-directed graph visualization showing prompt clusters based on semantic similarity'
SET
  @Type_3ba5bb73 = N'Chart'
SET
  @Status_3ba5bb73 = N'Published'
SET
  @Specification_3ba5bb73 = N'{"name":"AIPromptsClusterGraph","title":"AI Prompts Cluster Graph","description":"D3.js force-directed graph visualization showing prompt clusters based on semantic similarity","type":"chart","location":"embedded","code":"function AIPromptsClusterGraph({\n  prompts,\n  clusters,\n  clusterNames = {},\n  selectedPromptId,\n  similarityThreshold = 0.7,\n  highlightCluster,\n  onNodeClick,\n  onNodeHover,\n  onClusterSelect,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const currentTransform = useRef(null);\n  \n  // Initialize zoom behavior once, outside useEffect\n  const zoomBehavior = useRef(null);\n  if (!zoomBehavior.current && typeof d3 !== ''undefined'') {\n    zoomBehavior.current = d3.zoom()\n      .scaleExtent([0.1, 10])\n      .on(''zoom'', (event) => {\n        currentTransform.current = event.transform;\n        if (containerRef.current) {\n          containerRef.current.attr(''transform'', event.transform);\n        }\n      });\n  }\n  \n  // Modern gradient color palette for clusters\n  const clusterColors = [\n    ''linear-gradient(135deg, #667eea 0%, #764ba2 100%)'',\n    ''linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'',\n    ''linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)'',\n    ''linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)'',\n    ''linear-gradient(135deg, #fa709a 0%, #fee140 100%)'',\n    ''linear-gradient(135deg, #30cfd0 0%, #330867 100%)'',\n    ''linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)'',\n    ''linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)'',\n    ''linear-gradient(135deg, #fbc2eb 0%, #a6c1ee 100%)'',\n    ''linear-gradient(135deg, #fdcbf1 0%, #e6dee9 100%)''\n  ];\n  \n  // Solid colors for D3 (gradients will be defined in defs)\n  const solidColors = [\n    ''#667eea'', ''#f093fb'', ''#4facfe'', ''#43e97b'', ''#fa709a'',\n    ''#30cfd0'', ''#a8edea'', ''#ff9a9e'', ''#fbc2eb'', ''#fdcbf1''\n  ];\n\n  // Update dimensions on mount and resize\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (svgRef.current && svgRef.current.parentElement) {\n        const { width, height } = svgRef.current.parentElement.getBoundingClientRect();\n        setDimensions({ width, height });\n      }\n    };\n\n    updateDimensions();\n    window.addEventListener(''resize'', updateDimensions);\n    return () => window.removeEventListener(''resize'', updateDimensions);\n  }, []);\n\n  // Create D3 visualization\n  useEffect(() => {\n    if (!prompts || prompts.length === 0 || !svgRef.current) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(''*'').remove(); // Clear previous visualization\n\n    const width = dimensions.width;\n    const height = dimensions.height;\n\n    // Create container for zoom/pan first\n    const container = svg.append(''g'');\n    containerRef.current = container;\n    \n    // Apply zoom behavior to svg (it''s already initialized in component)\n    if (zoomBehavior.current) {\n      // Update the zoom handler to use the new container\n      zoomBehavior.current.on(''zoom'', (event) => {\n        currentTransform.current = event.transform;\n        container.attr(''transform'', event.transform);\n      });\n      \n      svg.call(zoomBehavior.current);\n    }\n    \n    // Apply saved transform if it exists\n    if (currentTransform.current) {\n      svg.call(zoomBehavior.current.transform, currentTransform.current);\n      container.attr(''transform'', currentTransform.current);\n    }\n    \n    // Add gradient definitions\n    const defs = svg.append(''defs'');\n    \n    // Create gradients for each cluster\n    solidColors.forEach((color, i) => {\n      const gradient = defs.append(''radialGradient'')\n        .attr(''id'', `cluster-gradient-$' + '{i}`)\n        .attr(''cx'', ''30%'')\n        .attr(''cy'', ''30%'');\n      \n      gradient.append(''stop'')\n        .attr(''offset'', ''0%'')\n        .attr(''stop-color'', color)\n        .attr(''stop-opacity'', 0.8);\n      \n      gradient.append(''stop'')\n        .attr(''offset'', ''100%'')\n        .attr(''stop-color'', d3.color(color).darker(0.5))\n        .attr(''stop-opacity'', 1);\n    });\n    \n    // Add glow filter\n    const filter = defs.append(''filter'')\n      .attr(''id'', ''glow'');\n    \n    filter.append(''feGaussianBlur'')\n      .attr(''stdDeviation'', ''3'')\n      .attr(''result'', ''coloredBlur'');\n    \n    const feMerge = filter.append(''feMerge'');\n    feMerge.append(''feMergeNode'')\n      .attr(''in'', ''coloredBlur'');\n    feMerge.append(''feMergeNode'')\n      .attr(''in'', ''SourceGraphic'');\n    \n    // Add strong glow for selection\n    const selectionFilter = defs.append(''filter'')\n      .attr(''id'', ''selection-glow'')\n      .attr(''width'', ''300%'')\n      .attr(''height'', ''300%'')\n      .attr(''x'', ''-100%'')\n      .attr(''y'', ''-100%'');\n    \n    selectionFilter.append(''feGaussianBlur'')\n      .attr(''stdDeviation'', ''8'')\n      .attr(''result'', ''coloredBlur'');\n    \n    const selectionMerge = selectionFilter.append(''feMerge'');\n    selectionMerge.append(''feMergeNode'')\n      .attr(''in'', ''coloredBlur'');\n    selectionMerge.append(''feMergeNode'')\n      .attr(''in'', ''SourceGraphic'');\n\n    // Calculate similarities between all nodes\n    const links = [];\n    const vectorService = utilities.ai.VectorService;\n    \n    // Load vectors into the service for similarity calculations\n    const vectorMap = new Map();\n    prompts.forEach(prompt => {\n      if (prompt.embedding) {\n        vectorMap.set(prompt.ID, prompt.embedding);\n      }\n    });\n    vectorService.LoadVectors(vectorMap);\n    \n    for (let i = 0; i < prompts.length; i++) {\n      for (let j = i + 1; j < prompts.length; j++) {\n        if (prompts[i].embedding && prompts[j].embedding) {\n          // Use CalculateDistance with cosine metric (returns distance, so we need to convert to similarity)\n          const distance = vectorService.CalculateDistance(\n            prompts[i].embedding,\n            prompts[j].embedding,\n            ''cosine''\n          );\n          const similarity = 1 - distance; // Convert distance to similarity\n          \n          if (similarity >= similarityThreshold) {\n            links.push({\n              source: prompts[i].ID,\n              target: prompts[j].ID,\n              value: similarity\n            });\n          }\n        }\n      }\n    }\n\n    // Create force simulation\n    const simulation = d3.forceSimulation(prompts)\n      .force(''link'', d3.forceLink(links)\n        .id(d => d.ID)\n        .distance(d => 100 * (1 - d.value)) // Distance inversely proportional to similarity\n        .strength(d => d.value * 0.5))\n      .force(''charge'', d3.forceManyBody()\n        .strength(-200)\n        .distanceMax(300))\n      .force(''center'', d3.forceCenter(width / 2, height / 2))\n      .force(''collision'', d3.forceCollide().radius(25))\n      .force(''cluster'', forceCluster()); // Custom clustering force\n\n    // Custom force to pull nodes toward their cluster center\n    function forceCluster() {\n      const strength = 0.2;\n      let nodes;\n      \n      function force(alpha) {\n        const centroids = d3.rollup(\n          nodes,\n          v => ({\n            x: d3.mean(v, d => d.x),\n            y: d3.mean(v, d => d.y),\n            count: v.length\n          }),\n          d => d.cluster\n        );\n        \n        nodes.forEach(node => {\n          const centroid = centroids.get(node.cluster);\n          if (centroid && centroid.count > 1) {\n            node.vx -= (node.x - centroid.x) * strength * alpha;\n            node.vy -= (node.y - centroid.y) * strength * alpha;\n          }\n        });\n      }\n      \n      force.initialize = function(_) {\n        nodes = _;\n      };\n      \n      return force;\n    }\n\n    // Draw links with modern styling\n    const link = container.append(''g'')\n      .attr(''class'', ''links'')\n      .selectAll(''line'')\n      .data(links)\n      .enter().append(''line'')\n      .attr(''stroke'', ''url(#link-gradient)'')\n      .attr(''stroke-opacity'', d => d.value * 0.2)\n      .attr(''stroke-width'', d => Math.max(0.5, d.value * 2))\n      .attr(''stroke-linecap'', ''round'');\n    \n    // Add gradient for links\n    const linkGradient = defs.append(''linearGradient'')\n      .attr(''id'', ''link-gradient'')\n      .attr(''gradientUnits'', ''userSpaceOnUse'');\n    \n    linkGradient.append(''stop'')\n      .attr(''offset'', ''0%'')\n      .attr(''stop-color'', ''#e0e0e0'')\n      .attr(''stop-opacity'', 0.3);\n    \n    linkGradient.append(''stop'')\n      .attr(''offset'', ''50%'')\n      .attr(''stop-color'', ''#c0c0c0'')\n      .attr(''stop-opacity'', 0.5);\n    \n    linkGradient.append(''stop'')\n      .attr(''offset'', ''100%'')\n      .attr(''stop-color'', ''#e0e0e0'')\n      .attr(''stop-opacity'', 0.3);\n\n    // Create node groups\n    const node = container.append(''g'')\n      .attr(''class'', ''nodes'')\n      .selectAll(''g'')\n      .data(prompts)\n      .enter().append(''g'')\n      .attr(''cursor'', ''pointer'')\n      .call(d3.drag()\n        .on(''start'', dragstarted)\n        .on(''drag'', dragged)\n        .on(''end'', dragended));\n\n    // Add shadow circles\n    node.append(''circle'')\n      .attr(''r'', d => {\n        const textLength = d.TemplateText?.length || 0;\n        return Math.min(25, Math.max(12, Math.sqrt(textLength / 40))) + 2;\n      })\n      .attr(''fill'', ''black'')\n      .attr(''opacity'', 0.1)\n      .attr(''transform'', ''translate(2, 2)'');\n    \n    // Add main circles for nodes with modern styling\n    node.append(''circle'')\n      .attr(''class'', ''node-circle'')\n      .attr(''r'', d => {\n        // Size based on template text length\n        const textLength = d.TemplateText?.length || 0;\n        return Math.min(25, Math.max(12, Math.sqrt(textLength / 40)));\n      })\n      .attr(''fill'', d => {\n        if (highlightCluster !== null && d.cluster !== highlightCluster) {\n          return ''#f5f5f5'';\n        }\n        return `url(#cluster-gradient-$' + '{d.cluster % solidColors.length})`;\n      })\n      .attr(''stroke'', d => {\n        if (d.ID === selectedPromptId) return ''#00ff88''; // Neon green for selection\n        if (d.ID === hoveredNode) return solidColors[d.cluster % solidColors.length];\n        return ''white'';\n      })\n      .attr(''stroke-width'', d => {\n        if (d.ID === selectedPromptId) return 5;\n        if (d.ID === hoveredNode) return 3;\n        return 2;\n      })\n      .attr(''opacity'', d => {\n        if (highlightCluster !== null && d.cluster !== highlightCluster) {\n          return 0.2;\n        }\n        return 1;\n      })\n      .attr(''filter'', d => {\n        if (d.ID === selectedPromptId) return ''url(#selection-glow)'';\n        if (d.ID === hoveredNode) return ''url(#glow)'';\n        return null;\n      })\n      .style(''transition'', ''all 0.3s ease'');\n\n    // Add labels with modern typography\n    const labels = node.append(''foreignObject'')\n      .attr(''x'', -45)\n      .attr(''y'', -40)\n      .attr(''width'', 90)\n      .attr(''height'', 28)\n      .attr(''pointer-events'', ''none'');\n    \n    labels.append(''xhtml:div'')\n      .style(''text-align'', ''center'')\n      .style(''font-size'', ''12px'')\n      .style(''font-weight'', ''500'')\n      .style(''color'', ''#2d3748'')\n      .style(''line-height'', ''14px'')\n      .style(''overflow'', ''hidden'')\n      .style(''text-overflow'', ''ellipsis'')\n      .style(''display'', ''-webkit-box'')\n      .style(''-webkit-line-clamp'', ''2'')\n      .style(''-webkit-box-orient'', ''vertical'')\n      .style(''text-shadow'', ''0 1px 2px rgba(255,255,255,0.8)'')\n      .text(d => d.Name || ''Unnamed'');\n\n    // Add modern tooltips\n    const tooltip = d3.select(''body'').append(''div'')\n      .attr(''class'', ''graph-tooltip'')\n      .style(''opacity'', 0)\n      .style(''position'', ''absolute'')\n      .style(''padding'', ''12px'')\n      .style(''background'', ''linear-gradient(135deg, rgba(255,255,255,0.98) 0%, rgba(249,250,251,0.98) 100%)'')\n      .style(''color'', ''#2d3748'')\n      .style(''border-radius'', ''12px'')\n      .style(''pointer-events'', ''none'')\n      .style(''font-size'', ''13px'')\n      .style(''max-width'', ''320px'')\n      .style(''box-shadow'', ''0 10px 40px rgba(0,0,0,0.15), 0 2px 10px rgba(0,0,0,0.1)'')\n      .style(''border'', ''1px solid rgba(255,255,255,0.8)'')\n      .style(''backdrop-filter'', ''blur(10px)'');\n\n    // Node interactions\n    node\n      .on(''click'', (event, d) => {\n        event.stopPropagation();\n        onNodeClick(d);\n      })\n      .on(''mouseover'', (event, d) => {\n        setHoveredNode(d.ID);\n        onNodeHover(d);\n        \n        tooltip.transition()\n          .duration(200)\n          .style(''opacity'', .9);\n        \n        tooltip.html(`\n          <div style=\"font-weight: 600; margin-bottom: 8px; color: #1a202c; font-size: 14px;\">$' + '{d.Name}</div>\n          <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 8px;\">\n            <span style=\"padding: 2px 8px; background: #edf2f7; border-radius: 4px; font-size: 11px;\">\n              $' + '{d.Category || ''No Category''}\n            </span>\n            <span style=\"padding: 2px 8px; background: #edf2f7; border-radius: 4px; font-size: 11px;\">\n              $' + '{d.Type || ''No Type''}\n            </span>\n            <span style=\"padding: 2px 8px; background: $' + '{solidColors[d.cluster % solidColors.length]}20; border-radius: 4px; font-size: 11px; color: $' + '{solidColors[d.cluster % solidColors.length]};\">\n              Cluster $' + '{d.cluster + 1}\n            </span>\n          </div>\n          $' + '{d.Description ? `<div style=\"font-size: 12px; color: #4a5568; line-height: 1.4;\">$' + '{d.Description.substring(0, 120)}$' + '{d.Description.length > 120 ? ''...'' : ''''}</div>` : ''''}\n        `)\n          .style(''left'', (event.pageX + 10) + ''px'')\n          .style(''top'', (event.pageY - 28) + ''px'');\n      })\n      .on(''mouseout'', () => {\n        setHoveredNode(null);\n        tooltip.transition()\n          .duration(500)\n          .style(''opacity'', 0);\n      });\n\n    // Click on background to deselect\n    svg.on(''click'', () => {\n      onNodeClick(null);\n    });\n\n    // Update positions on simulation tick\n    simulation.on(''tick'', () => {\n      link\n        .attr(''x1'', d => d.source.x)\n        .attr(''y1'', d => d.source.y)\n        .attr(''x2'', d => d.target.x)\n        .attr(''y2'', d => d.target.y);\n\n      node.attr(''transform'', d => `translate($' + '{d.x},$' + '{d.y})`);\n    });\n\n    // Drag functions\n    function dragstarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n\n    function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n\n    // Cleanup on unmount\n    return () => {\n      simulation.stop();\n      tooltip.remove();\n    };\n  }, [prompts, clusters, selectedPromptId, similarityThreshold, highlightCluster, dimensions]);\n\n  // Zoom control functions - don''t use useCallback to ensure we have current refs\n  const handleZoomIn = () => {\n    if (!svgRef.current || !zoomBehavior.current) {\n      console.warn(''Zoom in - refs not ready'');\n      return;\n    }\n    \n    const svg = d3.select(svgRef.current);\n    const currentZoom = currentTransform.current ? currentTransform.current.k : 1;\n    const newZoom = Math.min(currentZoom * 1.5, 10);\n    \n    svg.transition()\n      .duration(300)\n      .call(zoomBehavior.current.scaleTo, newZoom);\n  };\n  \n  const handleZoomOut = () => {\n    if (!svgRef.current || !zoomBehavior.current) {\n      console.warn(''Zoom out - refs not ready'');\n      return;\n    }\n    \n    const svg = d3.select(svgRef.current);\n    const currentZoom = currentTransform.current ? currentTransform.current.k : 1;\n    const newZoom = Math.max(currentZoom / 1.5, 0.1);\n    \n    svg.transition()\n      .duration(300)\n      .call(zoomBehavior.current.scaleTo, newZoom);\n  };\n  \n  const handleResetZoom = () => {\n    if (!svgRef.current || !zoomBehavior.current) {\n      console.warn(''Reset zoom - refs not ready'');\n      return;\n    }\n    \n    const svg = d3.select(svgRef.current);\n    svg.transition()\n      .duration(300)\n      .call(zoomBehavior.current.transform, d3.zoomIdentity);\n    currentTransform.current = d3.zoomIdentity;\n  };\n  \n  // Cluster legend\n  const uniqueClusters = useMemo(() => {\n    if (!clusters || clusters.length === 0) return [];\n    const clusterSet = new Set(clusters.map(p => p.cluster));\n    return Array.from(clusterSet).sort((a, b) => a - b);\n  }, [clusters]);\n\n  return (\n    <div style={{ \n      width: ''100%'', \n      height: ''100%'', \n      position: ''relative'',\n      background: ''linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)'',\n      borderRadius: ''16px'',\n      overflow: ''hidden''\n    }}>\n      <svg\n        ref={svgRef}\n        width={dimensions.width}\n        height={dimensions.height}\n        style={{ width: ''100%'', height: ''100%'' }}\n      />\n      \n      {/* Modern Zoom Controls */}\n      <div style={{\n        position: ''absolute'',\n        top: ''20px'',\n        left: ''20px'',\n        display: ''flex'',\n        flexDirection: ''column'',\n        gap: ''8px'',\n        zIndex: 10\n      }}>\n        <button\n          onClick={handleZoomIn}\n          style={{\n            width: ''40px'',\n            height: ''40px'',\n            borderRadius: ''10px'',\n            border: ''none'',\n            backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n            color: ''#4a5568'',\n            cursor: ''pointer'',\n            fontSize: ''18px'',\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            boxShadow: ''0 2px 8px rgba(0,0,0,0.1)'',\n            transition: ''all 0.2s ease''\n          }}\n          onMouseEnter={e => e.currentTarget.style.transform = ''scale(1.1)''}\n          onMouseLeave={e => e.currentTarget.style.transform = ''scale(1)''}\n          title=\"Zoom In\"\n        >\n          <i className=\"fa-solid fa-plus\"></i>\n        </button>\n        \n        <button\n          onClick={handleZoomOut}\n          style={{\n            width: ''40px'',\n            height: ''40px'',\n            borderRadius: ''10px'',\n            border: ''none'',\n            backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n            color: ''#4a5568'',\n            cursor: ''pointer'',\n            fontSize: ''18px'',\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            boxShadow: ''0 2px 8px rgba(0,0,0,0.1)'',\n            transition: ''all 0.2s ease''\n          }}\n          onMouseEnter={e => e.currentTarget.style.transform = ''scale(1.1)''}\n          onMouseLeave={e => e.currentTarget.style.transform = ''scale(1)''}\n          title=\"Zoom Out\"\n        >\n          <i className=\"fa-solid fa-minus\"></i>\n        </button>\n        \n        <button\n          onClick={handleResetZoom}\n          style={{\n            width: ''40px'',\n            height: ''40px'',\n            borderRadius: ''10px'',\n            border: ''none'',\n            backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n            color: ''#4a5568'',\n            cursor: ''pointer'',\n            fontSize: ''16px'',\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center'',\n            boxShadow: ''0 2px 8px rgba(0,0,0,0.1)'',\n            transition: ''all 0.2s ease''\n          }}\n          onMouseEnter={e => e.currentTarget.style.transform = ''scale(1.1)''}\n          onMouseLeave={e => e.currentTarget.style.transform = ''scale(1)''}\n          title=\"Reset View\"\n        >\n          <i className=\"fa-solid fa-expand\"></i>\n        </button>\n      </div>\n      \n      {/* Modern Cluster Legend */}\n      <div style={{\n        position: ''absolute'',\n        top: ''20px'',\n        right: ''20px'',\n        backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n        padding: ''16px'',\n        borderRadius: ''12px'',\n        fontSize: ''13px'',\n        boxShadow: ''0 4px 12px rgba(0,0,0,0.08)'',\n        backdropFilter: ''blur(10px)'',\n        minWidth: ''200px'',\n        maxWidth: ''280px''\n      }}>\n        <div style={{ \n          fontWeight: ''600'', \n          marginBottom: ''12px'',\n          color: ''#2d3748'',\n          fontSize: ''14px''\n        }}>\n          Clusters\n        </div>\n        {uniqueClusters.map(cluster => {\n          const clusterName = clusterNames[cluster] || `Cluster $' + '{cluster + 1}`;\n          return (\n            <div\n              key={cluster}\n              style={{\n                display: ''flex'',\n                alignItems: ''flex-start'',\n                marginBottom: ''10px'',\n                cursor: ''pointer'',\n                opacity: highlightCluster !== null && highlightCluster !== cluster ? 0.4 : 1,\n                transition: ''all 0.2s ease'',\n                padding: ''6px 8px'',\n                borderRadius: ''6px'',\n                backgroundColor: highlightCluster === cluster ? `$' + '{solidColors[cluster % solidColors.length]}15` : ''transparent''\n              }}\n              onClick={() => onClusterSelect(cluster)}\n              onMouseEnter={e => e.currentTarget.style.backgroundColor = `$' + '{solidColors[cluster % solidColors.length]}10`}\n              onMouseLeave={e => e.currentTarget.style.backgroundColor = highlightCluster === cluster ? `$' + '{solidColors[cluster % solidColors.length]}15` : ''transparent''}\n              title={clusterName}\n            >\n              <div\n                style={{\n                  width: ''16px'',\n                  height: ''16px'',\n                  background: `linear-gradient(135deg, $' + '{solidColors[cluster % solidColors.length]} 0%, $' + '{d3.color(solidColors[cluster % solidColors.length]).darker(0.3)} 100%)`,\n                  marginRight: ''10px'',\n                  marginTop: ''2px'',\n                  borderRadius: ''50%'',\n                  border: ''2px solid white'',\n                  boxShadow: ''0 2px 4px rgba(0,0,0,0.1)'',\n                  flexShrink: 0\n                }}\n              />\n              <span style={{ \n                color: ''#4a5568'', \n                fontWeight: ''500'',\n                display: ''block'',\n                lineHeight: ''1.3'',\n                wordWrap: ''break-word'',\n                whiteSpace: ''normal''\n              }}>\n                {clusterName}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n      \n      {/* Modern Instructions */}\n      <div style={{\n        position: ''absolute'',\n        bottom: ''20px'',\n        left: ''50%'',\n        transform: ''translateX(-50%)'',\n        backgroundColor: ''rgba(255, 255, 255, 0.95)'',\n        padding: ''8px 16px'',\n        borderRadius: ''20px'',\n        fontSize: ''12px'',\n        color: ''#718096'',\n        boxShadow: ''0 2px 8px rgba(0,0,0,0.08)'',\n        backdropFilter: ''blur(10px)'',\n        display: ''flex'',\n        gap: ''16px'',\n        alignItems: ''center''\n      }}>\n        <span><i className=\"fa-solid fa-hand\" style={{ marginRight: ''4px'' }}></i>Drag to pan</span>\n        <span>•</span>\n        <span><i className=\"fa-solid fa-magnifying-glass\" style={{ marginRight: ''4px'' }}></i>Scroll to zoom</span>\n        <span>•</span>\n        <span><i className=\"fa-solid fa-pointer\" style={{ marginRight: ''4px'' }}></i>Click to select</span>\n      </div>\n    </div>\n  );\n}","functionalRequirements":"Render interactive force-directed graph with prompts as nodes, display clusters with different colors, show similarity connections between prompts, support zoom/pan navigation, highlight on hover, animate transitions","technicalDesign":"Uses D3.js force simulation for node positioning, implements clustering visualization with color coding, draws edges based on similarity threshold, handles mouse interactions for selection and tooltips","dataRequirements":{"mode":"views","entities":[{"name":"AI Prompts","displayFields":["Name","Description","TemplateText","CategoryID","Category","TypeID","Type","Status","PromptRole","ResponseFormat","Template"],"filterFields":["Status","CategoryID","TypeID","PromptRole"],"sortFields":["Name","CreatedAt","UpdatedAt"],"permissions":["read"]}]},"properties":[{"name":"prompts","type":"array","required":true,"description":"Array of AI prompt entities with embeddings"},{"name":"clusters","type":"array","required":true,"description":"Array of cluster assignments from clustering algorithm"},{"name":"selectedPromptId","type":"string","required":false,"description":"ID of currently selected prompt"},{"name":"similarityThreshold","type":"number","required":false,"description":"Threshold for showing similarity connections (0-1)"},{"name":"highlightCluster","type":"number","required":false,"description":"Cluster index to highlight"}],"events":[{"name":"onNodeClick","description":"Fired when a node is clicked","parameters":[{"name":"prompt","type":"object","description":"The clicked prompt entity"}]},{"name":"onNodeHover","description":"Fired when hovering over a node","parameters":[{"name":"prompt","type":"object","description":"The hovered prompt entity"}]},{"name":"onClusterSelect","description":"Fired when a cluster is selected","parameters":[{"name":"clusterIndex","type":"number","description":"Index of the selected cluster"}]}],"libraries":[{"name":"d3","version":"7.8.5","globalVariable":"d3"}],"usageExample":"<AIPromptsClusterGraph prompts={prompts} clusters={clusters} />","version":"1.0.0"}'
SET
  @FunctionalRequirements_3ba5bb73 = N'Render interactive force-directed graph with prompts as nodes, display clusters with different colors, show similarity connections between prompts, support zoom/pan navigation, highlight on hover, animate transitions'
SET
  @TechnicalDesign_3ba5bb73 = N'Uses D3.js force simulation for node positioning, implements clustering visualization with color coding, draws edges based on similarity threshold, handles mouse interactions for selection and tooltips'
SET
  @FunctionalRequirementsVector_3ba5bb73 = N'[-0.04671674221754074,-0.09743408858776093,0.004109947010874748,-0.04221409186720848,-0.026122882962226868,-0.05038025230169296,0.058606307953596115,0.048433300107717514,0.018493374809622765,0.013779154978692532,-0.02812085673213005,0.042181797325611115,-0.01523626409471035,0.06335627287626266,0.0008980111451819539,-0.14029432833194733,-0.015212996862828732,-0.030862635001540184,-0.034563515335321426,-0.028941165655851364,-0.0015229583950713277,-0.009451521560549736,-0.008456192910671234,-0.015013947151601315,-0.012299459427595139,-0.021520594134926796,-0.04664463549852371,0.03270632028579712,0.057877156883478165,-0.08684640377759933,-0.08219818770885468,0.06622088700532913,-0.04430675506591797,0.0056446935050189495,0.0000016769032527008676,-0.032118991017341614,-0.018781473860144615,0.008641302585601807,0.015765724703669548,0.006144918501377106,0.08870850503444672,-0.0062813241966068745,0.06601675599813461,-0.02808847837150097,0.0265085157006979,-0.04176139086484909,-0.00023828331904951483,-0.001596714137122035,0.051047876477241516,-0.04118454456329346,0.011870871298015118,0.03540172800421715,-0.01360233873128891,0.031337179243564606,-0.103905588388443,0.10928521305322647,-0.0035977899096906185,-0.031753797084093094,0.07141514867544174,0.007422784809023142,-0.04450032487511635,-0.03571668267250061,0.011033611372113228,-0.021155966445803642,0.04237113520503044,0.01052093505859375,0.07197892665863037,-0.03181462734937668,-0.02871214970946312,0.034649480134248734,-0.04234696924686432,-0.018302250653505325,0.005509435199201107,-0.05962642282247543,-0.009353597648441792,0.08494636416435242,-0.03801592066884041,-0.03013300709426403,-0.0258453581482172,-0.02710942178964615,-0.07386229932308197,-0.005892392713576555,-0.010053939186036587,-0.05792820826172829,0.041132960468530655,-0.01365809328854084,0.05256853625178337,-0.03185516223311424,-0.012161115184426308,0.013258058577775955,0.021907396614551544,-0.019911862909793854,0.057017430663108826,0.014607940800487995,-0.08070222288370132,-0.024784773588180542,0.03035544417798519,0.023338407278060913,0.026595408096909523,0.06437034904956818,0.11540335416793823,-0.028629612177610397,-0.01681102253496647,0.030626488849520683,0.01636495813727379,-0.017032528296113014,-0.013889533467590809,-0.029864905402064323,-0.01742742583155632,0.02745327539741993,-0.00020500148821156472,0.02784540317952633,-0.023182744160294533,0.020573319867253304,-0.03018297255039215,0.009392356500029564,0.01395509298890829,0.03717835620045662,-0.013016377575695515,0.03591185063123703,0.032937027513980865,-0.00640275189653039,0.0017603308660909534,-0.007500224746763706,0.013178414665162563,0.039152439683675766,-0.06983907520771027,-0.026917994022369385,0.002519282279536128,0.020307261496782303,-0.017992204055190086,0.004089311696588993,0.040197379887104034,0.028996720910072327,-0.008165473118424416,0.05432681366801262,0.009500968270003796,0.008537281304597855,-0.03465760126709938,-0.036030370742082596,-0.0177373755723238,0.04743245616555214,-0.0238876361399889,-0.011273386888206005,0.0016199358506128192,-0.021922452375292778,0.008864741772413254,0.03415537253022194,0.010983304120600224,0.02121453732252121,0.021555284038186073,0.012710370123386383,-0.04597518965601921,-0.011768260039389133,-0.04243023321032524,0.002211915561929345,-0.0334831103682518,-0.022877145558595657,-0.07211024314165115,0.01292453519999981,0.02024146541953087,-0.03855747729539871,0.059215646237134933,-0.0014762700302526355,-0.04445715248584747,0.026387419551610947,-0.04574562981724739,-0.03261723741889,0.022033745422959328,-0.011007090099155903,-0.012537913396954536,-0.0026163689326494932,-0.04818689823150635,-0.05372078716754913,0.030889974907040596,0.058690838515758514,0.05195050686597824,-0.028488662093877792,-0.012471817433834076,-0.01013175118714571,0.03661090135574341,-0.024682238698005676,0.015202156268060207,0.0048043811693787575,-0.012212873436510563,-0.009001434780657291,-0.03240782767534256,0.053100112825632095,-0.020435987040400505,0.013507712632417679,0.020278871059417725,0.031301774084568024,0.03968888148665428,0.007455682847648859,0.04632238298654556,0.001608115155249834,-0.01808859407901764,-0.09637521207332611,0.04239344969391823,-0.026822414249181747,-0.00529798399657011,0.05610004439949989,-0.006646154914051294,0.06330674886703491,-0.01495313923805952,0.0008073398494161665,-0.07534634321928024,-0.012687250971794128,0.033318646252155304,0.050921887159347534,-0.01681271381676197,0.0020623253658413887,-0.016954420134425163,0.006384000647813082,-0.009212754666805267,-0.006570825353264809,0.008892225101590157,0.024176405742764473,-0.07304451614618301,-0.044336698949337006,-0.0347403958439827,-0.004567399621009827,-0.004262362606823444,0.002061402890831232,0.08905787765979767,0.08623285591602325,-0.014033976942300797,-0.02634243667125702,0.01558547280728817,0.06272409856319427,0.001611121348105371,-0.026931412518024445,-0.010649556294083595,0.01991940662264824,0.03577905520796776,0.02487415261566639,0.02040032297372818,0.031502917408943176,-0.029257623478770256,-0.0382423996925354,0.005216139368712902,-0.05691232532262802,-0.026476185768842697,-0.017264164984226227,-0.027041450142860413,-0.007312064524739981,0.0412042960524559,0.021070143207907677,-0.014074797742068768,-0.025665294378995895,0.02209237776696682,0.0022403174079954624,0.0063606188632547855,-0.020540637895464897,0.007194232661277056,0.03191179409623146,0.1521698534488678,-0.01867210865020752,-0.10398217290639877,0.03784331679344177,-0.010653841309249401,-0.0013877246528863907,-0.011720518581569195,-0.007557499222457409,-0.008381277322769165,-0.020911704748868942,0.05469243600964546,-0.06778869032859802,-0.0674816146492958,-0.004490959923714399,0.004380329977720976,0.03519018739461899,0.01040501520037651,0.000018298165741725825,-0.018226196989417076,0.03714817762374878,0.030232425779104233,0.013966592028737068,0.008910668082535267,-0.03039846569299698,-0.021473353728652,-0.05266168713569641,-0.009487583301961422,-0.007627786137163639,-0.04347327724099159,-0.00015191907004918903,0.06165274977684021,-0.006279666908085346,0.01425307895988226,-0.04217186197638512,0.017182106152176857,0.015629449859261513,0.0032419722992926836,0.022223856300115585,-0.00866309180855751,0.032880790531635284,0.022063424810767174,0.0810851901769638,-0.009280526079237461,0.03115370124578476,-0.0015037745470181108,-0.0616864375770092,0.0018934181425720453,0.02818084880709648,-0.060113731771707535,0.06453831493854523,0.009444787167012691,0.017594143748283386,0.08275679498910904,-0.014126107096672058,0.034173157066106796,-0.012364893220365047,0.009535055607557297,-0.07516611367464066,-0.008705086074769497,0.03998732194304466,0.05177964270114899,-0.023329105228185654,0.032150402665138245,0.0020450314041227102,-0.021752208471298218,-0.0017209596699103713,0.01653755083680153,-0.042521972209215164,-0.01284805964678526,0.06906313449144363,-0.051703549921512604,0.01607428304851055,0.0032704186160117388,0.03019499033689499,0.012278840877115726,0.013919515535235405,-0.00950948428362608,0.018537061288952827,0.05952242761850357,0.03079235926270485,-0.013296701945364475,-0.023558834567666054,0.0052132816053926945,-0.07161673903465271,-0.0028514175210148096,-0.03598517179489136,0.004559290129691362,0.016360273584723473,0.054609935730695724,0.010320895351469517,0.02968752197921276,-0.021747026592493057,0.019597532227635384,0.015018983744084835,-0.0071320002898573875,0.01696573570370674,-0.0007974510081112385,0.0008510230109095573,0.018024977296590805,0.02852063812315464,-0.06781458109617233,0.04701033607125282,-0.048291876912117004,-0.05861734226346016,-0.00036430402542464435,0.03629721328616142,0.009638144634664059,-0.036676183342933655,-0.03173371031880379,0.043194301426410675,0.0228384118527174,-0.03786963224411011,0.0015838203253224492,-0.009826578199863434,0.0022884162608534098,0.01214549969881773,0.020064370706677437,0.008647688664495945,-0.007497364189475775,-0.11560065299272537,0.02408120594918728,-0.009599985554814339,0.0033550525549799204,-0.010647258721292019,0.04349410906434059,-0.019217705354094505,0.04479457437992096,-0.03078574687242508,0.03636164218187332,-0.04818450286984444,-0.015130434185266495,0.055289167910814285,-0.09109510481357574,0.040415603667497635,-0.007194032892584801,-0.026965871453285217,0.02281143330037594,-0.06330474466085434,0.008371054194867611,0.06196046620607376,-0.016785677522420883,0.002308152848854661,-0.0037493743002414703,0.002955011557787657,0.00119980878662318,0.026372617110610008,-0.0016586281126365066,-0.031832512468099594,0.05807477608323097,-0.008923711255192757,-0.04067545756697655,0.015192441642284393,-0.02076561748981476,0.012007580138742924,-0.01569151133298874,0.05468475818634033,-0.003591478569433093,-0.05134858191013336,-0.016558239236474037,0.009148143231868744,0.02699955925345421,-0.035869941115379333,0.014406517148017883,0.10308004170656204,-0.03684670850634575,-0.014626502059400082,0.037276241928339005,-0.002853692974895239,-0.004028928931802511,-0.014554320834577084,0.004970279522240162,-0.045383207499980927,-0.003089963225647807,-0.00003249667497584596,0.007001077756285667,0.009592758491635323,-0.040429484099149704,0.05920657515525818,0.04500100389122963,-0.0335070826113224,-0.062196359038352966,0.012188545428216457,0.03864143043756485,-0.015478753484785557,0.03631268069148064,0.014063835144042969,0.0779004842042923,0.004530987702310085,-0.05465095862746239,-0.04309797286987305,-0.03877031058073044,-0.031186463311314583,0.05290229991078377,-0.017056135460734367,-0.05563536286354065,-0.05125794932246208,-0.03030203841626644,-0.00426449254155159,-0.0095820976421237,-0.024637596681714058,0.007853055372834206,0.025332555174827576,-0.022186145186424255,-0.012334763072431087,0.026181668043136597,0.015490629710257053,0.03480276092886925,-0.009112468920648098,-0.00017590209608897567,0.08562687039375305,0.050133347511291504,-0.010487264953553677,-0.009839121252298355,-0.0005376358749344945,0.003317656461149454,0.012163503095507622,-0.05410796031355858,-0.06412430852651596,0.05013462156057358,0.03874185308814049,0.019629811868071556,0.004359010607004166,-0.0612921416759491,-0.002675676252692938,0.009097968228161335,0.07607359439134598,0.03890164941549301,-0.0089751360937953,0.001478388556279242,-0.002203357173129916,-0.020754467695951462,-0.014341589994728565,-0.011436466127634048,0.015276660211384296,-0.013220064342021942,-0.01888549141585827,0.019774876534938812,0.0016205210704356432,0.04157104715704918,-0.046248726546764374,-0.0908336341381073,0.026544323191046715,0.054247211664915085,-0.01899626851081848,-0.0012856501853093505,-0.02200143225491047,0.00731757003813982,-0.01282469555735588,-0.03596576303243637,-0.006829382386058569,0.044690076261758804,0.009692845866084099,0.025564858689904213,0.0010096642654389143,0.006304674316197634,-0.000015237784282362554,-0.06008871644735336,-0.011527106165885925,-0.03651037812232971,0.03759021311998367,-0.010380597785115242,0.05495584383606911,-0.003048431593924761,-0.044326301664114,0.010050131008028984,0.019783059135079384,-0.043138034641742706,0.023764755576848984,-0.005260355770587921,0.042152322828769684,0.038038864731788635,0.03261926397681236,0.036812297999858856,0.0006787125021219254,-0.0782114714384079,-0.0025945885572582483,0.05387232080101967,-0.061397451907396317,-0.004160975571721792,-0.0046385652385652065,0.02482844889163971,0.06859428435564041,0.02779284119606018,-0.027473460882902145,-0.05372944101691246,0.023646993562579155,0.029894975945353508,0.0025791777297854424,-0.004879686050117016,0.03442343696951866,0.048166994005441666,-0.07457303255796432,0.01773114688694477,0.01306172739714384,0.04386122152209282,0.002794192172586918,-0.01433570496737957,-0.058905407786369324,0.009965787641704082,-6.066331084618362e-33,-0.04362541064620018,-0.06412096321582794,-0.04107902571558952,0.011671515181660652,-0.025334462523460388,-0.03968898206949234,-0.008588298223912716,0.007022052071988583,-0.0021265798714011908,0.032934028655290604,-0.006822829134762287,-0.04672664776444435,-0.004168983548879623,0.05025192350149155,-0.04888157919049263,0.02387363649904728,0.04729469493031502,0.03576011583209038,-0.009463323280215263,0.04424593970179558,0.0015031833900138736,0.018135854974389076,-0.03350268676877022,0.03633048012852669,-0.011043335311114788,0.025166187435388565,0.03606116771697998,0.0077356440015137196,-0.005391159560531378,0.0071151102893054485,-0.017008431255817413,0.037765007466077805,-0.034683164209127426,-0.009136746637523174,0.0007408979581668973,0.03656291589140892,0.0034420897718518972,-0.053296010941267014,0.0037145374808460474,-0.008544890210032463,-0.019658531993627548,-0.0032591139897704124,0.019237343221902847,0.0033926733303815126,0.024878084659576416,0.0052817887626588345,0.03342486917972565,0.017824389040470123,-0.047944292426109314,0.05576348677277565,0.013214875012636185,0.02363535948097706,-0.008569507859647274,0.040797147899866104,-0.026272078976035118,0.04323524609208107,0.03563539683818817,0.005675835069268942,0.007116743829101324,0.016636237502098083,-0.015042606741189957,-0.007566507440060377,-0.01773008517920971,0.06835350394248962,0.07264126092195511,0.00916046928614378,0.041898131370544434,-0.0012147474335506558,-0.046989716589450836,0.06590050458908081,0.01643381267786026,-0.006133952643722296,0.05151396617293358,-0.03471316024661064,-0.05262215435504913,0.022180330008268356,0.012104835361242294,-0.0527312308549881,-0.025494929403066635,0.009709619916975498,-0.005969901569187641,0.03256142884492874,0.013517949730157852,-0.018337950110435486,0.008212460204958916,-0.0968085378408432,0.012856491841375828,-0.017306609079241753,0.016702966764569283,-0.010699416510760784,-0.0304952971637249,-0.007948276586830616,-0.02162383869290352,0.06840776652097702,-0.0040952586568892,-0.014041369780898094,0.03145834803581238,0.08278228342533112,-0.007850122638046741,-0.04063386470079422,0.034398987889289856,-0.011663656681776047,-0.02859829179942608,-0.04787742719054222,-0.01291231345385313,0.00015985006757546216,-0.03520049899816513,-0.01791468635201454,-0.028033332899212837,0.017725778743624687,0.0318242609500885,-0.02491581253707409,-0.012032645754516125,-0.07904616743326187,0.04767318814992905,-0.022440951317548752,0.0003671603335533291,0.05661536380648613,0.0059343366883695126,0.005770863965153694,0.004136539530009031,0.008120161481201649,-0.055303119122982025,-0.04408229887485504,0.021806471049785614,-0.010103587061166763,-0.01941283419728279,0.0031767685431987047,-0.017773885279893875,-0.018855974078178406,-0.03219147026538849,0.009023765102028847,2.5241737944270426e-7,-0.037237219512462616,0.05779360234737396,-0.0030893778894096613,-0.0121650705114007,-0.0075207785703241825,-0.0828109160065651,0.032564427703619,-0.012539715506136417,0.02222718670964241,-0.00884549506008625,-0.0028715922962874174,0.02157781645655632,-0.03326429799199104,0.07392522692680359,-0.011472519487142563,0.018015924841165543,-0.030827799811959267,-0.03337157145142555,-0.051310714334249496,0.024395912885665894,0.03671551123261452,-0.011799532920122147,0.07856747508049011,0.056025441735982895,0.008538341149687767,-0.0051153297536075115,0.025571219623088837,-0.01104671973735094,0.052114229649305344,-0.05795731022953987,0.009067036211490631,-0.026036377996206284,-0.03993967920541763,0.048313114792108536,0.010347045958042145,-0.007201454136520624,-0.017461949959397316,-0.038250211626291275,0.019128669053316116,0.003386334516108036,0.05063793808221817,0.00480699073523283,-0.0009843872394412756,-0.03551403060555458,-0.003266355488449335,-0.05316147208213806,-0.022947508841753006,0.05616920068860054,-0.026916058734059334,-0.030661456286907196,-0.0017732797423377633,-0.02049854025244713,0.005825328174978495,-0.004911299794912338,-0.0050283633172512054,0.01739446260035038,-0.013428273610770702,0.03404345363378525,0.010472746565937996,0.011326074600219727,-0.004104021470993757,-0.06219722703099251,-0.005279490724205971,0.0664624497294426,-0.01035398431122303,0.018731649965047836,-0.004355370067059994,3.533496988485929e-34,0.019304877147078514,-0.0008200593874789774,0.0441068559885025,-0.016662973910570145,0.005057191476225853,0.009365297853946686,-0.021822012960910797,0.007214449346065521,0.0815337598323822,-0.10434750467538834,-0.018688073381781578]'
SET
  @TechnicalDesignVector_3ba5bb73 = N'[-0.01928911730647087,-0.11240977793931961,-0.029324615374207497,-0.05927392840385437,-0.019617922604084015,-0.06658537685871124,0.051757294684648514,0.04194172844290733,-0.04908546805381775,-0.019058430567383766,0.026671696454286575,0.06527809798717499,0.007504678796976805,0.061102285981178284,0.014838754199445248,-0.07219871878623962,-0.01874273270368576,0.008030527271330357,-0.015600712038576603,-0.04236651584506035,0.01191572193056345,-0.033622242510318756,-0.010954447090625763,0.0027042117435485125,-0.04307328909635544,-0.00673591298982501,-0.06796673685312271,0.029564138501882553,0.0368216373026371,-0.07286862283945084,-0.01373400166630745,0.08790329098701477,-0.04677669703960419,0.042288657277822495,0.0000015927290633044322,-0.028536511585116386,-0.002190655330196023,0.01626088283956051,0.05031101405620575,0.019164180383086205,0.0688256174325943,-0.016362454742193222,0.02791482023894787,-0.04813452437520027,0.04045068845152855,-0.015547064132988453,0.03628886863589287,-0.025412743911147118,0.015836142003536224,-0.07154365628957748,0.012934308499097824,0.06682166457176208,0.007126715034246445,0.04308272525668144,-0.02767200395464897,0.09365096688270569,-0.009521406143903732,0.06184016913175583,0.06720589101314545,0.0008151522488333285,-0.016065705567598343,0.005322284996509552,-0.02213210240006447,-0.05560868978500366,0.0770215317606926,0.010457221418619156,0.03094581514596939,-0.028399784117937088,-0.03616173937916756,0.018932675942778587,-0.018976055085659027,-0.002065907698124647,0.0042366269044578075,-0.01901116967201233,-0.03580474108457565,0.04112629592418671,-0.02444743551313877,-0.04182346910238266,0.01805134303867817,-0.056199051439762115,-0.07273278385400772,0.020579520612955093,-0.007784819230437279,-0.061986956745386124,0.03842136636376381,0.0188177190721035,0.02645607478916645,-0.01746995374560356,-0.02628501132130623,0.006796612404286861,0.02752397209405899,-0.012887008488178253,0.06752290576696396,-0.028975587338209152,-0.008905463851988316,-0.04087338224053383,0.04082838445901871,0.0046382988803088665,0.06090785562992096,0.010382923297584057,0.10935301333665848,0.007786772213876247,0.021812688559293747,0.04184429347515106,0.035878024995326996,-0.03307069465517998,-0.020645933225750923,0.02003951370716095,-0.010312356986105442,0.02771770767867565,-0.006082004867494106,0.0029405115637928247,0.009810525923967361,-0.01709652505815029,0.0007068503764458001,0.026989642530679703,0.02354099415242672,0.03565189614892006,-0.0038559723179787397,-0.01887460984289646,0.029467299580574036,0.008906851522624493,0.010696315206587315,0.015327096916735172,-0.01225260179489851,-0.008204294368624687,-0.054580383002758026,-0.014136550948023796,0.009697417728602886,0.03625478968024254,0.017769580706954002,-0.005931959953159094,0.023879539221525192,-0.01365467719733715,-0.02462020143866539,0.03674866631627083,0.02367768995463848,-0.002695919945836067,-0.02428528293967247,0.009872050024569035,-0.003857935545966029,0.05055425688624382,0.011437326669692993,-0.017791150137782097,0.02039976231753826,-0.028413141146302223,0.008393688127398491,0.037474263459444046,0.0009017103002406657,-0.004852792248129845,0.03892192989587784,0.025383155792951584,-0.11699990928173065,0.01775282621383667,-0.02436903677880764,-0.008218993432819843,-0.004429581109434366,-0.03356023505330086,-0.03809829428792,0.022682830691337585,0.017766069620847702,-0.02115379087626934,-0.005150396842509508,-0.010759112425148487,-0.034737106412649155,0.015890955924987793,-0.05086878687143326,-0.021451899781823158,-0.022392377257347107,0.01821032539010048,0.009230057708919048,-0.05946137383580208,-0.028970731422305107,-0.07773630321025848,0.06325408816337585,0.12076926976442337,0.02655913308262825,-0.0014559613773599267,-0.03106844611465931,0.027932023629546165,0.016326364129781723,-0.038507044315338135,-0.006154133006930351,0.023967446759343147,-0.034582022577524185,-0.012242067605257034,-0.06081214174628258,0.06494444608688354,-0.013851210474967957,0.024500079452991486,0.0075619276612997055,0.010625484399497509,0.0409088097512722,-0.03374384343624115,0.002249723067507148,-0.012936237268149853,0.04192826524376869,-0.05900264158844948,0.038884103298187256,-0.010949387215077877,-0.05501458793878555,0.04018552601337433,-0.011321976780891418,0.02369365096092224,0.006634981371462345,-0.03845648840069771,-0.06311061978340149,-0.010468686930835247,0.013444478623569012,0.03732989355921745,-0.016501620411872864,0.02531457133591175,-0.06525223702192307,0.013096502982079983,-0.050893861800432205,0.0006164785590954125,0.0210858341306448,0.04999331012368202,-0.043522752821445465,-0.01573328487575054,-0.045530274510383606,-0.04460084065794945,0.006886160932481289,-0.001785485539585352,0.10271627455949783,0.09970016777515411,-0.025952855125069618,-0.03211047500371933,0.010490820743143559,0.02766023948788643,-0.022233515977859497,-0.0560481883585453,0.05247453972697258,0.03910087049007416,0.03595219552516937,0.013855507597327232,0.057073209434747696,0.03785818815231323,0.014961834996938705,-0.037858862429857254,-0.01886708103120327,-0.01349237747490406,-0.0032914066687226295,0.0024390178732573986,0.009672042913734913,-0.011616530828177929,-0.009751707315444946,0.005086945835500956,-0.0063092983327806,-0.07593711465597153,0.0035453394521027803,0.028469065204262733,0.03617432713508606,-0.03169970214366913,0.013852349482476711,0.014419308863580227,0.06614243984222412,-0.0006416160031221807,-0.04115338996052742,0.0516422763466835,0.008549095131456852,-0.023166455328464508,0.013651528395712376,0.01448099222034216,0.033548753708601,-0.0015819023828953505,0.0584886372089386,-0.03267912566661835,-0.017574090510606766,0.01763826236128807,-0.009122254326939583,0.023937152698636055,-0.0025878017768263817,-0.0051071238704025745,-0.013424129225313663,0.017317961901426315,-0.02195393480360508,-0.01968085765838623,-0.03822310268878937,0.004288400057703257,-0.057883370667696,-0.06520703434944153,-0.0004844570648856461,-0.0019358117133378983,-0.028313882648944855,-0.006094801239669323,0.04792425036430359,-0.007404360454529524,0.042957864701747894,0.031649451702833176,-0.02060704305768013,0.03878294676542282,0.035235919058322906,0.023377371951937675,-0.00338846817612648,0.028887281194329262,-0.0381162092089653,0.04326128214597702,-0.014154155738651752,0.01926032453775406,0.01377219520509243,0.009016751311719418,-0.01694604381918907,0.001461603445932269,-0.041603296995162964,0.09509626775979996,-0.005035903304815292,-0.020342543721199036,-0.006158352363854647,0.03327502682805061,0.029804738238453865,-0.014508472755551338,0.03582678362727165,-0.04438195005059242,0.036788459867239,0.034330304712057114,-0.0037200190126895905,-0.002878383966162801,0.0022440284956246614,0.07236409187316895,-0.06096119061112404,-0.030078250914812088,0.05737626552581787,-0.05481649562716484,-0.028126049786806107,0.059259481728076935,-0.02795260213315487,0.009516936726868153,0.009685883298516273,-0.010533702559769154,-0.005843627732247114,-0.011913895606994629,0.0038428097032010555,0.020317984744906425,0.04338303208351135,0.054250918328762054,-0.030057519674301147,-0.08046884089708328,0.04369798302650452,-0.010716351680457592,-0.02315114252269268,-0.03810405358672142,0.02661016210913658,0.0358424186706543,0.07535268366336823,0.016258221119642258,0.03302975371479988,-0.007467821706086397,-0.015471793711185455,0.038324058055877686,0.03454703465104103,0.039681773632764816,0.002625374821946025,-0.01849418692290783,-0.0024486565962433815,0.05524367094039917,-0.07938014715909958,0.030474459752440453,-0.05947153642773628,-0.018528666347265244,-0.01911226101219654,0.05620905011892319,0.004126611165702343,-0.02324831672012806,-0.10998934507369995,0.03330950811505318,0.020163916051387787,-0.0029721595346927643,-0.0018398206448182464,-0.04708985984325409,0.005393640138208866,0.022943967953324318,0.05250116065144539,0.019304871559143066,-0.028329074382781982,-0.08390361070632935,0.01280204113572836,-0.026279056444764137,0.0025661704130470753,0.023737065494060516,0.02532294951379299,-0.04616517946124077,0.031983036547899246,-0.03575066849589348,0.013142047449946404,-0.014178499579429626,-0.01688312366604805,0.07228464633226395,-0.03445034101605415,0.058686889708042145,-0.00606795446947217,-0.01678907684981823,-0.012751627713441849,-0.023162376135587692,-0.012999109923839569,0.07599237561225891,-0.031876757740974426,-0.006595917046070099,0.025800511240959167,0.0009971141116693616,0.0025678901001811028,0.010220506228506565,-0.04908356815576553,0.027860088273882866,0.033519431948661804,-0.024009549990296364,0.002729024039581418,0.034636955708265305,0.021843580529093742,-0.0036734705790877342,-0.00540449284017086,0.004690871108323336,-0.021706953644752502,-0.04559270665049553,-0.027257656678557396,0.009865108877420425,0.02501204051077366,-0.021745268255472183,-0.0027609297540038824,0.04978460446000099,-0.009448466822504997,-0.020879123359918594,0.05524599552154541,0.0026525426656007767,0.013479377143085003,-0.049226708710193634,0.00406050868332386,-0.03228188678622246,-0.029871098697185516,0.03357742354273796,-0.013690432533621788,-0.022165991365909576,-0.040952567011117935,0.05271116644144058,0.08475887030363083,-0.03866410255432129,-0.04896173253655434,0.00886830035597086,0.022854728624224663,-0.011739365756511688,0.028005581349134445,0.0024657929316163063,0.040592506527900696,0.015454431995749474,-0.03249197453260422,-0.060547493398189545,-0.05682598054409027,-0.008470342494547367,0.020020203664898872,0.039592619985342026,-0.032602980732917786,0.05152566730976105,0.01840152032673359,0.016241570934653282,-0.010414726100862026,-0.029015595093369484,0.020837783813476562,0.06290603429079056,-0.02379099279642105,-0.025754038244485855,0.04369882121682167,0.027831191197037697,0.0004228103789500892,-0.030551381409168243,-0.01208339910954237,-0.018796326592564583,0.039333876222372055,-0.008602604269981384,-0.02382219210267067,-0.01617983542382717,-0.0002910624025389552,0.008015818893909454,-0.022450778633356094,-0.013033349998295307,0.054024696350097656,-0.004431675188243389,-0.04359040409326553,-0.048052649945020676,-0.07020892202854156,-0.0008793069864623249,-0.003606887999922037,0.0590052604675293,0.03902539983391762,0.008245013654232025,0.005870752036571503,0.018644794821739197,0.020663101226091385,-0.017345882952213287,-0.01592756062746048,0.00810426939278841,-0.026708874851465225,-0.06466492265462875,0.0331549309194088,0.03917562589049339,0.04102576524019241,-0.06185765191912651,-0.01026867888867855,0.03353842720389366,-0.002254944760352373,0.03331398591399193,0.0036699657794088125,-0.014732172712683678,0.010525749064981937,0.0260317325592041,-0.026281820610165596,0.043609391897916794,0.0065058013424277306,-0.0420265793800354,0.02029818296432495,-0.04536529257893562,0.01280975341796875,0.011804535053670406,-0.04744939133524895,0.02665645442903042,-0.019951654598116875,-0.01937853731215,0.024999119341373444,0.08204318583011627,0.027830881997942924,-0.01919928379356861,0.007049696519970894,0.028955623507499695,-0.028293905779719353,-0.009784785099327564,0.04891322925686836,-0.026268621906638145,0.03273558244109154,-0.0016764044994488358,0.03150311857461929,-0.01590777188539505,-0.010726439766585827,-0.04923884570598602,-0.003634991589933634,-0.08359245210886002,-0.0045080408453941345,-0.010588095523416996,0.038309406489133835,0.09289953112602234,0.005841242149472237,-0.041821837425231934,-0.04401347041130066,-0.01882835477590561,-0.0051801507361233234,0.01143068540841341,0.052094947546720505,0.016540179029107094,0.035294290632009506,-0.01846780814230442,-0.013073987327516079,0.007281196303665638,0.036360256373882294,-0.03120269998908043,-0.014483398757874966,-0.012796569615602493,0.00918755866587162,-5.879212220434624e-33,-0.019872473552823067,-0.056995343416929245,-0.06684178858995438,0.03121279925107956,-0.032222989946603775,-0.05440083146095276,0.001449225703254342,0.006205612327903509,0.006985381245613098,0.03157733380794525,0.03431740403175354,-0.05676715075969696,-0.005606745835393667,0.010942347347736359,-0.0353703498840332,0.06181986257433891,-0.008349350653588772,-0.0012066063936799765,-0.0022523333318531513,0.007186890579760075,0.006126470398157835,0.049363601952791214,-0.014821702614426613,0.022076768800616264,-0.04934139922261238,-0.0013636284274980426,0.03936724737286568,-0.009657783433794975,-0.050448693335056305,0.009363426826894283,0.004600605461746454,0.009175785817205906,-0.05269327014684677,0.05783476680517197,-0.008357946760952473,-0.04607999324798584,-0.05449207127094269,-0.013869457878172398,0.010199937969446182,-0.0176993515342474,0.016852501779794693,0.02323787845671177,0.0439130999147892,-0.003912993241101503,-0.02378752827644348,-0.016168061643838882,0.03573431819677353,-0.018033824861049652,-0.07266426086425781,-0.02702629379928112,0.0219570379704237,0.04651856794953346,-0.035855989903211594,0.010688351467251778,-0.010471287183463573,0.023626891896128654,0.07122614979743958,-0.02400786243379116,-0.04361102357506752,0.019851844757795334,-0.04618435725569725,-0.03906474635004997,-0.008892832323908806,0.02089792862534523,0.05992712453007698,0.04906824231147766,0.03178379684686661,0.012028313241899014,-0.01529163308441639,0.014016075059771538,0.029410196468234062,-0.006795319262892008,0.04003976657986641,-0.06758174300193787,-0.03902892768383026,0.026927214115858078,0.016666345298290253,-0.0049422853626310825,-0.0524931401014328,0.015859168022871017,0.023513000458478928,0.017822179943323135,0.007064519450068474,-0.02140405774116516,0.031092535704374313,-0.09227965027093887,0.002457704395055771,-0.03604966402053833,0.016232945024967194,-0.012007396668195724,-0.06634803861379623,0.040708836168050766,-0.0690079927444458,0.023598097264766693,0.02319427579641342,-0.02945387177169323,0.0029696908313781023,0.1015852689743042,-0.02694365754723549,-0.06898826360702515,0.032593775540590286,-0.035842958837747574,-0.09914641827344894,-0.028876744210720062,-0.011498057283461094,-0.024626435711979866,-0.028016023337841034,-0.04164055362343788,-0.03272321820259094,0.04424390569329262,0.013258513063192368,0.007491417229175568,-0.04177605360746384,-0.08109138906002045,0.02581106685101986,-0.05124656483530998,0.021930960938334465,0.006453018169850111,0.04156581312417984,0.029136881232261658,0.018880780786275864,-0.011905810795724392,-0.07332226634025574,0.010775377973914146,0.05583541840314865,-0.004828632343560457,-0.033851440995931625,0.04233715310692787,0.006835174281150103,0.021426960825920105,-0.013984289951622486,-0.04074971750378609,2.3591728393057565e-7,0.012210010550916195,0.07136446237564087,0.014712237752974033,-0.026447346433997154,0.023179301992058754,-0.06328746676445007,-0.000728350190911442,-0.0011611590161919594,0.020410696044564247,-0.030088642612099648,0.00815676525235176,0.02199270948767662,0.02556908316910267,0.03256905451416969,-0.01952226646244526,0.019105376675724983,-0.013436834327876568,-0.013288216665387154,-0.027818048372864723,0.026744218543171883,-0.043207209557294846,-0.00043510031537152827,0.08887585997581482,0.01040200237184763,-0.01966596208512783,-0.028807833790779114,0.006179782561957836,-0.03789343684911728,0.07755306363105774,-0.011765857227146626,0.010784853249788284,-0.030490253120660782,-0.06053820252418518,0.031135186553001404,-0.004196684341877699,-0.0012418554397299886,-0.02820783294737339,-0.020410379394888878,-0.011764060705900192,0.09730604290962219,0.08350873738527298,-0.06386762857437134,-0.004127965774387121,0.006288702599704266,-0.011191710829734802,-0.009535163640975952,-0.012266571633517742,0.03153917193412781,0.0037409483920782804,-0.0341038815677166,0.014990882016718388,-0.024817906320095062,0.020130567252635956,-0.038629647344350815,-0.050848692655563354,-0.015377064235508442,0.010067862458527088,0.05132032930850983,0.009341122582554817,0.07100395858287811,-0.0031520756892859936,-0.08253738284111023,0.003083242569118738,0.043030597269535065,0.012173764407634735,0.018377376720309258,-0.030067022889852524,3.0892299188521845e-34,0.05150848999619484,0.0006547427619807422,0.02246961183845997,0.03391508013010025,0.0008731161360628903,-0.029609359800815582,0.06787388771772385,-0.02012147195637226,0.030134471133351326,0.0027886326424777508,-0.03369176387786865]'
SET
  @HasCustomProps_3ba5bb73 = 0
SET
  @HasCustomEvents_3ba5bb73 = 0
SET
  @RequiresData_3ba5bb73 = 0
SET
  @DependencyCount_3ba5bb73 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_3ba5bb73 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_3ba5bb73 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_3ba5bb73 = 0
SET
  @ID_3ba5bb73 = '33E6440F-7E2E-42C0-88F2-470E93CC951E'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_3ba5bb73,
  @Name = @Name_3ba5bb73,
  @Version = @Version_3ba5bb73,
  @VersionSequence = @VersionSequence_3ba5bb73,
  @Title = @Title_3ba5bb73,
  @Description = @Description_3ba5bb73,
  @Type = @Type_3ba5bb73,
  @Status = @Status_3ba5bb73,
  @DeveloperName = @DeveloperName_3ba5bb73,
  @DeveloperEmail = @DeveloperEmail_3ba5bb73,
  @DeveloperOrganization = @DeveloperOrganization_3ba5bb73,
  @SourceRegistryID = @SourceRegistryID_3ba5bb73,
  @ReplicatedAt = @ReplicatedAt_3ba5bb73,
  @LastSyncedAt = @LastSyncedAt_3ba5bb73,
  @Specification = @Specification_3ba5bb73,
  @FunctionalRequirements = @FunctionalRequirements_3ba5bb73,
  @TechnicalDesign = @TechnicalDesign_3ba5bb73,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_3ba5bb73,
  @TechnicalDesignVector = @TechnicalDesignVector_3ba5bb73,
  @HasCustomProps = @HasCustomProps_3ba5bb73,
  @HasCustomEvents = @HasCustomEvents_3ba5bb73,
  @RequiresData = @RequiresData_3ba5bb73,
  @DependencyCount = @DependencyCount_3ba5bb73,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_3ba5bb73,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_3ba5bb73,
  @HasRequiredCustomProps = @HasRequiredCustomProps_3ba5bb73,
  @ID = @ID_3ba5bb73;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_e6e35f47 NVARCHAR(MAX),
@Name_e6e35f47 NVARCHAR(500),
@Version_e6e35f47 NVARCHAR(50),
@VersionSequence_e6e35f47 INT,
@Title_e6e35f47 NVARCHAR(1000),
@Description_e6e35f47 NVARCHAR(MAX),
@Type_e6e35f47 NVARCHAR(255),
@Status_e6e35f47 NVARCHAR(50),
@DeveloperName_e6e35f47 NVARCHAR(255),
@DeveloperEmail_e6e35f47 NVARCHAR(255),
@DeveloperOrganization_e6e35f47 NVARCHAR(255),
@SourceRegistryID_e6e35f47 UNIQUEIDENTIFIER,
@ReplicatedAt_e6e35f47 DATETIMEOFFSET,
@LastSyncedAt_e6e35f47 DATETIMEOFFSET,
@Specification_e6e35f47 NVARCHAR(MAX),
@FunctionalRequirements_e6e35f47 NVARCHAR(MAX),
@TechnicalDesign_e6e35f47 NVARCHAR(MAX),
@FunctionalRequirementsVector_e6e35f47 NVARCHAR(MAX),
@TechnicalDesignVector_e6e35f47 NVARCHAR(MAX),
@HasCustomProps_e6e35f47 BIT,
@HasCustomEvents_e6e35f47 BIT,
@RequiresData_e6e35f47 BIT,
@DependencyCount_e6e35f47 INT,
@TechnicalDesignVectorEmbeddingModelID_e6e35f47 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_e6e35f47 NVARCHAR(MAX),
@HasRequiredCustomProps_e6e35f47 BIT,
@ID_e6e35f47 UNIQUEIDENTIFIER
SET
  @Namespace_e6e35f47 = N'AI/Analytics'
SET
  @Name_e6e35f47 = N'AIPromptsClusterDetails'
SET
  @Version_e6e35f47 = N'1.0.0'
SET
  @VersionSequence_e6e35f47 = 1
SET
  @Title_e6e35f47 = N'AI Prompts Cluster Details'
SET
  @Description_e6e35f47 = N'Detail panel showing selected prompt information and similar prompts'
SET
  @Type_e6e35f47 = N'Other'
SET
  @Status_e6e35f47 = N'Published'
SET
  @Specification_e6e35f47 = N'{"name":"AIPromptsClusterDetails","title":"AI Prompts Cluster Details","description":"Detail panel showing selected prompt information and similar prompts","type":"panel","location":"embedded","code":"function AIPromptsClusterDetails({\n  selectedPrompt,\n  allPrompts,\n  clusterInfo,\n  similarPrompts,\n  onPromptNavigate,\n  onEditPrompt,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  const [expandedSection, setExpandedSection] = useState(''details'');\n  const [showFullTemplate, setShowFullTemplate] = useState(false);\n\n  // Modern style helpers\n  const sectionStyle = {\n    marginBottom: ''20px'',\n    padding: ''16px'',\n    background: ''linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(249,250,251,0.95) 100%)'',\n    borderRadius: ''16px'',\n    boxShadow: ''0 4px 12px rgba(0,0,0,0.05)'',\n    backdropFilter: ''blur(10px)'',\n    border: ''1px solid rgba(255,255,255,0.8)''\n  };\n\n  const headerStyle = {\n    fontSize: ''15px'',\n    fontWeight: ''600'',\n    color: ''#2d3748'',\n    marginBottom: ''12px'',\n    cursor: ''pointer'',\n    display: ''flex'',\n    alignItems: ''center'',\n    justifyContent: ''space-between'',\n    padding: ''8px'',\n    borderRadius: ''8px'',\n    transition: ''all 0.2s ease''\n  };\n\n  const labelStyle = {\n    fontSize: ''12px'',\n    fontWeight: ''600'',\n    color: ''#718096'',\n    marginBottom: ''6px'',\n    textTransform: ''uppercase'',\n    letterSpacing: ''0.025em''\n  };\n\n  const valueStyle = {\n    fontSize: ''14px'',\n    color: ''#2d3748'',\n    marginBottom: ''12px'',\n    lineHeight: ''1.5''\n  };\n\n  const badgeStyle = {\n    display: ''inline-block'',\n    padding: ''4px 10px'',\n    fontSize: ''12px'',\n    fontWeight: ''600'',\n    borderRadius: ''8px'',\n    marginRight: ''8px''\n  };\n\n  // Format template text with basic syntax highlighting\n  const formatTemplateText = (text) => {\n    if (!text) return ''No template text'';\n    \n    // Truncate if needed\n    const displayText = showFullTemplate \n      ? text \n      : text.length > 500 ? text.substring(0, 500) + ''...'' : text;\n    \n    // Basic syntax highlighting for variables\n    const highlighted = displayText.replace(\n      /\\{\\{([^}]+)\\}\\}/g,\n      ''<span style=\"color: #0066cc; font-weight: bold;\">{{$1}}</span>''\n    );\n    \n    return (\n      <div style={{ position: ''relative'' }}>\n        <pre style={{\n          whiteSpace: ''pre-wrap'',\n          wordWrap: ''break-word'',\n          fontFamily: ''monospace'',\n          fontSize: styles.fonts?.sizes?.xs || ''12px'',\n          backgroundColor: styles.colors?.surface || ''white'',\n          padding: styles.spacing?.sm || ''8px'',\n          borderRadius: styles.borders?.radius || ''4px'',\n          border: `1px solid $' + '{styles.colors?.border || ''#ddd''}`,\n          maxHeight: showFullTemplate ? ''none'' : ''200px'',\n          overflow: ''hidden''\n        }} dangerouslySetInnerHTML={{ __html: highlighted }} />\n        \n        {text.length > 500 && (\n          <button\n            onClick={() => setShowFullTemplate(!showFullTemplate)}\n            style={{\n              marginTop: styles.spacing?.xs || ''4px'',\n              padding: `2px 8px`,\n              fontSize: styles.fonts?.sizes?.xs || ''12px'',\n              backgroundColor: styles.colors?.primary || ''#007bff'',\n              color: ''white'',\n              border: ''none'',\n              borderRadius: styles.borders?.radius || ''4px'',\n              cursor: ''pointer''\n            }}\n          >\n            {showFullTemplate ? ''Show Less'' : ''Show More''}\n          </button>\n        )}\n      </div>\n    );\n  };\n\n  if (!selectedPrompt) {\n    return (\n      <div style={{\n        display: ''flex'',\n        alignItems: ''center'',\n        justifyContent: ''center'',\n        height: ''100%'',\n        color: styles.colors?.text?.secondary || ''#666'',\n        fontSize: styles.fonts?.sizes?.sm || ''14px'',\n        textAlign: ''center''\n      }}>\n        Select a prompt from the graph to view details\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {/* Modern Header */}\n      <div style={{\n        marginBottom: ''24px'',\n        padding: ''20px'',\n        background: ''linear-gradient(135deg, #667eea 0%, #764ba2 100%)'',\n        borderRadius: ''16px'',\n        boxShadow: ''0 8px 24px rgba(102, 126, 234, 0.2)'',\n        position: ''relative''\n      }}>\n        <div style={{\n          display: ''flex'',\n          justifyContent: ''space-between'',\n          alignItems: ''flex-start''\n        }}>\n          <div style={{ flex: 1 }}>\n            <h3 style={{\n              fontSize: ''20px'',\n              fontWeight: ''600'',\n              color: ''white'',\n              margin: 0,\n              marginBottom: ''8px''\n            }}>\n              {selectedPrompt.Name}\n            </h3>\n            <div style={{ display: ''flex'', gap: ''8px'', flexWrap: ''wrap'' }}>\n              {selectedPrompt.Category && (\n                <span style={{\n                  padding: ''3px 10px'',\n                  background: ''rgba(255,255,255,0.2)'',\n                  borderRadius: ''6px'',\n                  fontSize: ''12px'',\n                  color: ''white'',\n                  fontWeight: ''500''\n                }}>\n                  {selectedPrompt.Category}\n                </span>\n              )}\n              {selectedPrompt.Type && (\n                <span style={{\n                  padding: ''3px 10px'',\n                  background: ''rgba(255,255,255,0.2)'',\n                  borderRadius: ''6px'',\n                  fontSize: ''12px'',\n                  color: ''white'',\n                  fontWeight: ''500''\n                }}>\n                  {selectedPrompt.Type}\n                </span>\n              )}\n              {selectedPrompt.Status && (\n                <span style={{\n                  padding: ''3px 10px'',\n                  background: selectedPrompt.Status === ''Active'' \n                    ? ''rgba(72, 187, 120, 0.3)'' \n                    : ''rgba(255,255,255,0.2)'',\n                  borderRadius: ''6px'',\n                  fontSize: ''12px'',\n                  color: ''white'',\n                  fontWeight: ''500''\n                }}>\n                  {selectedPrompt.Status}\n                </span>\n              )}\n            </div>\n          </div>\n          \n          {/* Action button */}\n          <button\n            onClick={() => onEditPrompt(selectedPrompt.ID)}\n            style={{\n              width: ''40px'',\n              height: ''40px'',\n              backgroundColor: ''rgba(255,255,255,0.2)'',\n              backdropFilter: ''blur(10px)'',\n              color: ''white'',\n              fontSize: ''16px'',\n              border: ''none'',\n              borderRadius: ''10px'',\n              cursor: ''pointer'',\n              display: ''flex'',\n              alignItems: ''center'',\n              justifyContent: ''center'',\n              transition: ''all 0.2s ease''\n            }}\n            onMouseEnter={e => {\n              e.currentTarget.style.backgroundColor = ''rgba(255,255,255,0.3)'';\n              e.currentTarget.style.transform = ''scale(1.05)'';\n            }}\n            onMouseLeave={e => {\n              e.currentTarget.style.backgroundColor = ''rgba(255,255,255,0.2)'';\n              e.currentTarget.style.transform = ''scale(1)'';\n            }}\n            title=\"Open Prompt Record\"\n          >\n            <i className=\"fa-solid fa-arrow-up-right-from-square\"></i>\n          </button>\n        </div>\n      </div>\n\n      {/* Prompt Details */}\n      <div style={sectionStyle}>\n        <div style={headerStyle} onClick={() => setExpandedSection(expandedSection === ''details'' ? null : ''details'')}>\n          <span>Prompt Details</span>\n          <span>{expandedSection === ''details'' ? ''▼'' : ''▶''}</span>\n        </div>\n        \n        {expandedSection === ''details'' && (\n          <div>\n            {selectedPrompt.Description && (\n              <>\n                <div style={labelStyle}>Description</div>\n                <div style={valueStyle}>{selectedPrompt.Description}</div>\n              </>\n            )}\n            \n            <div style={{ display: ''flex'', gap: styles.spacing?.md || ''16px'' }}>\n              <div style={{ flex: 1 }}>\n                <div style={labelStyle}>Category</div>\n                <div style={valueStyle}>{selectedPrompt.Category || ''None''}</div>\n              </div>\n              \n              <div style={{ flex: 1 }}>\n                <div style={labelStyle}>Type</div>\n                <div style={valueStyle}>{selectedPrompt.Type || ''None''}</div>\n              </div>\n            </div>\n            \n            <div style={{ display: ''flex'', gap: styles.spacing?.md || ''16px'' }}>\n              <div style={{ flex: 1 }}>\n                <div style={labelStyle}>Status</div>\n                <div style={{\n                  ...badgeStyle,\n                  backgroundColor: selectedPrompt.Status === ''Active'' \n                    ? ''#d4edda'' \n                    : selectedPrompt.Status === ''Disabled'' \n                    ? ''#f8d7da'' \n                    : ''#fff3cd'',\n                  color: selectedPrompt.Status === ''Active'' \n                    ? ''#155724'' \n                    : selectedPrompt.Status === ''Disabled'' \n                    ? ''#721c24'' \n                    : ''#856404''\n                }}>\n                  {selectedPrompt.Status}\n                </div>\n              </div>\n              \n              <div style={{ flex: 1 }}>\n                <div style={labelStyle}>Role</div>\n                <div style={valueStyle}>{selectedPrompt.PromptRole || ''None''}</div>\n              </div>\n            </div>\n            \n            <div style={labelStyle}>Response Format</div>\n            <div style={valueStyle}>{selectedPrompt.ResponseFormat || ''Text''}</div>\n          </div>\n        )}\n      </div>\n\n      {/* Template Text */}\n      <div style={sectionStyle}>\n        <div style={headerStyle} onClick={() => setExpandedSection(expandedSection === ''template'' ? null : ''template'')}>\n          <span>Template Text</span>\n          <span>{expandedSection === ''template'' ? ''▼'' : ''▶''}</span>\n        </div>\n        \n        {expandedSection === ''template'' && (\n          <div>\n            {formatTemplateText(selectedPrompt.TemplateText)}\n          </div>\n        )}\n      </div>\n\n      {/* Cluster Information */}\n      {clusterInfo && (\n        <div style={sectionStyle}>\n          <div style={headerStyle} onClick={() => setExpandedSection(expandedSection === ''cluster'' ? null : ''cluster'')}>\n            <span>Cluster Information</span>\n            <span>{expandedSection === ''cluster'' ? ''▼'' : ''▶''}</span>\n          </div>\n          \n          {expandedSection === ''cluster'' && (\n            <div>\n              <div style={labelStyle}>Cluster</div>\n              <div style={valueStyle}>\n                Cluster {clusterInfo.clusterIndex + 1} ({clusterInfo.clusterSize} members)\n              </div>\n              \n              <div style={labelStyle}>Other Members</div>\n              <div style={{\n                maxHeight: ''150px'',\n                overflowY: ''auto'',\n                fontSize: styles.fonts?.sizes?.sm || ''14px''\n              }}>\n                {clusterInfo.clusterMembers\n                  .filter(p => p.ID !== selectedPrompt.ID)\n                  .map(prompt => (\n                    <div\n                      key={prompt.ID}\n                      style={{\n                        padding: styles.spacing?.xs || ''4px'',\n                        marginBottom: ''2px'',\n                        backgroundColor: styles.colors?.surface || ''white'',\n                        borderRadius: styles.borders?.radius || ''4px'',\n                        cursor: ''pointer'',\n                        '':hover'': {\n                          backgroundColor: styles.colors?.hover || ''#f0f0f0''\n                        }\n                      }}\n                      onClick={() => onPromptNavigate(prompt.ID)}\n                    >\n                      {prompt.Name}\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Similar Prompts */}\n      {similarPrompts && similarPrompts.length > 0 && (\n        <div style={sectionStyle}>\n          <div style={headerStyle} onClick={() => setExpandedSection(expandedSection === ''similar'' ? null : ''similar'')}>\n            <span>Similar Prompts</span>\n            <span>{expandedSection === ''similar'' ? ''▼'' : ''▶''}</span>\n          </div>\n          \n          {expandedSection === ''similar'' && (\n            <div>\n              {similarPrompts.map(({ prompt, similarity }) => (\n                <div\n                  key={prompt.ID}\n                  style={{\n                    display: ''flex'',\n                    justifyContent: ''space-between'',\n                    alignItems: ''center'',\n                    padding: styles.spacing?.xs || ''4px'',\n                    marginBottom: ''2px'',\n                    backgroundColor: styles.colors?.surface || ''white'',\n                    borderRadius: styles.borders?.radius || ''4px'',\n                    cursor: ''pointer''\n                  }}\n                  onClick={() => onPromptNavigate(prompt.ID)}\n                >\n                  <div>\n                    <div style={{ fontSize: styles.fonts?.sizes?.sm || ''14px'' }}>\n                      {prompt.Name}\n                    </div>\n                    <div style={{\n                      fontSize: styles.fonts?.sizes?.xs || ''12px'',\n                      color: styles.colors?.text?.secondary || ''#666''\n                    }}>\n                      {prompt.Category || ''No category''}\n                    </div>\n                  </div>\n                  <div style={{\n                    ...badgeStyle,\n                    backgroundColor: similarity > 0.9 ? ''#d4edda'' \n                      : similarity > 0.7 ? ''#fff3cd'' \n                      : ''#f8f8f8'',\n                    color: similarity > 0.9 ? ''#155724'' \n                      : similarity > 0.7 ? ''#856404'' \n                      : ''#666''\n                  }}>\n                    {(similarity * 100).toFixed(0)}%\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","functionalRequirements":"Display selected prompt details including name, description, template text, show similar prompts based on vector similarity, display cluster membership info, provide navigation to prompt editor","technicalDesign":"React component that displays prompt entity details, calculates and shows top similar prompts using vector service, formats template text with syntax highlighting","dataRequirements":{"mode":"views","entities":[{"name":"AI Prompts","displayFields":["Name","Description","TemplateText","CategoryID","Category","TypeID","Type","Status","PromptRole","ResponseFormat","Template"],"filterFields":["Status","CategoryID","TypeID","PromptRole"],"sortFields":["Name","CreatedAt","UpdatedAt"],"permissions":["read"]}]},"properties":[{"name":"selectedPrompt","type":"object","required":false,"description":"Currently selected prompt entity"},{"name":"allPrompts","type":"array","required":true,"description":"All prompts for similarity calculation"},{"name":"clusterInfo","type":"object","required":false,"description":"Cluster information for selected prompt"},{"name":"similarPrompts","type":"array","required":false,"description":"List of similar prompts with similarity scores"}],"events":[{"name":"onPromptNavigate","description":"Fired when user wants to navigate to a prompt","parameters":[{"name":"promptId","type":"string","description":"ID of prompt to navigate to"}]},{"name":"onEditPrompt","description":"Fired when user wants to edit the prompt","parameters":[{"name":"promptId","type":"string","description":"ID of prompt to edit"}]}],"libraries":[],"usageExample":"<AIPromptsClusterDetails selectedPrompt={prompt} allPrompts={prompts} />","version":"1.0.0"}'
SET
  @FunctionalRequirements_e6e35f47 = N'Display selected prompt details including name, description, template text, show similar prompts based on vector similarity, display cluster membership info, provide navigation to prompt editor'
SET
  @TechnicalDesign_e6e35f47 = N'React component that displays prompt entity details, calculates and shows top similar prompts using vector service, formats template text with syntax highlighting'
SET
  @FunctionalRequirementsVector_e6e35f47 = N'[-0.04377761855721474,-0.08697464317083359,-0.01669113151729107,-0.03190318122506142,0.010670472867786884,-0.0034533857833594084,0.05526202172040939,0.05574878305196762,-0.052021659910678864,0.009781105443835258,-0.030483296141028404,0.028501778841018677,0.018211061134934425,0.036892686039209366,-0.035861413925886154,-0.1538928896188736,0.01927696354687214,-0.02285437472164631,0.01276758685708046,-0.026943108066916466,0.0027003095019608736,-0.007596606854349375,-0.024862242862582207,0.0027988695073872805,0.003241717116907239,-0.041145071387290955,-0.008935871534049511,0.017435826361179352,0.04767586290836334,-0.06403966248035431,-0.05691060796380043,0.0743376612663269,-0.010349681600928307,-0.034082140773534775,0.0000015713835637143347,-0.041968364268541336,-0.03022913821041584,0.01203388161957264,-0.05430127680301666,0.021688196808099747,0.05790657177567482,0.015825016424059868,0.05044369027018547,-0.03556051850318909,0.04732108861207962,-0.044820934534072876,-0.012887089513242245,0.05727383494377136,0.042977720499038696,-0.05482836067676544,0.028459614142775536,0.038511723279953,-0.028986547142267227,-0.0071135046891868114,-0.07373445481061935,0.05585698410868645,-0.01744299940764904,-0.04416549578309059,0.08486445993185043,0.049179717898368835,-0.007134018465876579,-0.007772255223244429,-0.0010990294395014644,-0.011084683239459991,0.0067428406327962875,0.04410881549119949,-0.0023485543206334114,-0.04266922175884247,-0.005158080253750086,0.012735706754028797,0.05710377171635628,-0.018335439264774323,0.015025683678686619,-0.07202986627817154,-0.016128355637192726,0.02201620116829872,-0.022991742938756943,0.0020909039303660393,-0.031933195888996124,-0.016194237396121025,0.011166064999997616,0.005601165350526571,-0.03855273127555847,-0.044405173510313034,0.024928754195570946,0.05310218036174774,0.0312104020267725,-0.029090195894241333,-0.043391671031713486,-0.01742643490433693,0.011119352653622627,-0.03456801176071167,0.014270239509642124,0.006682014558464289,-0.12581315636634827,-0.014045258983969688,0.01690863072872162,-0.05290033668279648,0.03542623296380043,0.08160719275474548,0.07993834465742111,0.037261784076690674,-0.02846171334385872,0.028846658766269684,0.009085073135793209,0.06808777153491974,0.004895805846899748,0.042695190757513046,-0.01854122430086136,0.008024545386433601,-0.03810711205005646,0.006396339740604162,-0.013429349288344383,0.03037135675549507,-0.02537449635565281,0.016629187390208244,0.0016012376872822642,0.04165353998541832,-0.014096708036959171,0.04028211534023285,0.039258599281311035,-0.01106629241257906,-0.015952279791235924,-0.009152138605713844,-0.011423647403717041,-0.05063449963927269,-0.06012590974569321,-0.06641470640897751,-0.020145198330283165,-0.03657699376344681,0.0028558121994137764,-0.005807116627693176,0.02563679777085781,0.019460301846265793,-0.03793491795659065,0.004277462139725685,0.01790539175271988,-0.0023088238667696714,0.008230654522776604,-0.0016393207479268312,0.014433812350034714,0.012577244080603123,-0.039618346840143204,0.010163814760744572,0.035397715866565704,0.03800090774893761,-0.014399627223610878,0.011186454445123672,0.0014516542432829738,0.007399866823107004,-0.018438756465911865,0.03387359902262688,-0.025633884593844414,-0.0002778139023575932,0.030383775010704994,0.021320605650544167,0.015290132723748684,-0.05021558701992035,-0.10353413224220276,0.0030807408038526773,0.012928174808621407,0.003103731432929635,0.04271372780203819,-0.020193977281451225,-0.03322146087884903,0.008379862643778324,-0.07154862582683563,0.01642155833542347,0.07204266637563705,-0.017023373395204544,-0.0047134519554674625,-0.005824240390211344,-0.0012219015043228865,0.02163514494895935,0.007596455514431,0.0753825306892395,0.04842137545347214,-0.020061541348695755,0.014173316769301891,0.020158831030130386,0.0022977476473897696,0.0017899447120726109,0.016401372849941254,0.004266320262104273,-0.069827601313591,-0.006106584798544645,-0.004497703164815903,0.0006102548795752227,-0.008184830658137798,0.05345521494746208,0.012237267568707466,0.012651422061026096,-0.07059543579816818,-0.00875526200979948,0.02191786840558052,-0.007557820528745651,-0.019143426790833473,-0.02529413253068924,0.07771667838096619,0.01457840483635664,0.0034694476053118706,0.046616241335868835,0.05697254836559296,-0.008633580058813095,0.023907717317342758,-0.029751591384410858,-0.060861796140670776,-0.008882843889296055,0.03534179925918579,0.017358100041747093,0.061406463384628296,-0.00901459064334631,-0.05582650378346443,0.026009928435087204,-0.05496964603662491,0.012272302992641926,-0.0054853204637765884,0.029103165492415428,-0.07081936299800873,-0.02961760386824608,-0.005296576302498579,0.03972858563065529,-0.03126703202724457,0.012097029946744442,0.07882526516914368,0.027584293857216835,-0.0014824523823335767,0.01859329640865326,0.02269812487065792,0.02319374307990074,-0.013687234371900558,-0.02213526889681816,0.05161387100815773,0.006548193283379078,-0.0020442293025553226,0.048262178897857666,-0.0026631031651049852,-0.002306712558493018,-0.06575086712837219,-0.0023838477209210396,-0.003039722330868244,-0.06539327651262283,-0.038643404841423035,-0.019109029322862625,-0.039053693413734436,-0.024890869855880737,-0.029590005055069923,0.01267057005316019,0.03281869739294052,-0.017778081819415092,-0.02097601629793644,-0.006268246565014124,0.0625367984175682,0.0002892014745157212,0.05113133788108826,0.14227987825870514,0.06321048736572266,-0.026305463165044785,-0.13171179592609406,0.06814935803413391,0.00023584086738992482,-0.016116812825202942,-0.029181018471717834,0.01125848013907671,0.0035935486666858196,0.020188743248581886,0.03735952079296112,-0.04066459462046623,-0.0356062687933445,-0.009902392514050007,0.024358592927455902,0.044788017868995667,0.023640451952815056,-0.019922012463212013,-0.017135322093963623,0.029167091473937035,-0.016994526609778404,0.028654571622610092,0.012044144794344902,-0.006330572068691254,0.01086342055350542,-0.01049149502068758,0.013277817517518997,0.011067967861890793,-0.029039809480309486,0.004850953817367554,0.024011723697185516,-0.016915639862418175,-0.007252085022628307,-0.010209077037870884,0.005422923713922501,0.012682236731052399,0.02677120454609394,0.0398067943751812,-0.013996196910738945,0.002062486484646797,0.012054838240146637,0.0757407397031784,0.0035166372545063496,0.03623397275805473,-0.04286053031682968,0.03488018363714218,-0.006379141006618738,0.010505156591534615,-0.04569411277770996,0.06205315142869949,0.05401600897312164,0.029762335121631622,0.08060398697853088,-0.015737581998109818,0.028427869081497192,0.026207761839032173,0.002745043719187379,-0.01374670397490263,-0.006229087710380554,0.030823996290564537,-0.03716101869940758,-0.033025242388248444,-0.019286928698420525,0.07845664769411087,-0.007262593600898981,-0.004420085810124874,0.04709816724061966,-0.03937191516160965,-0.018604744225740433,0.03340595215559006,-0.040912192314863205,0.00975604634732008,-0.042512234300374985,0.025307759642601013,0.03706565126776695,-0.01109924167394638,-0.015271754004061222,-0.010829085484147072,0.025395575910806656,0.03633645549416542,0.018328748643398285,-0.040302131325006485,0.004140782169997692,-0.049955811351537704,-0.04550119489431381,-0.030681394040584564,-0.011140359565615654,-0.001158165861852467,0.05336335673928261,0.02632215805351734,0.014190953224897385,0.0325511209666729,-0.050401028245687485,0.020265940576791763,0.0494687482714653,0.027548741549253464,-0.00954116228967905,0.016679445281624794,-0.0061250366270542145,0.023086873814463615,-0.038696032017469406,0.003701180452480912,-0.04693596065044403,-0.07659702748060226,-0.034088294953107834,0.01810741052031517,0.005761137697845697,0.013077901676297188,0.0332406647503376,0.021614495664834976,-0.0009139978792518377,-0.07973309606313705,-0.03217324987053871,0.008530178107321262,-0.013722117058932781,-0.003174748970195651,0.02865075320005417,0.055801864713430405,-0.008590368553996086,-0.06876801699399948,0.003125989343971014,-0.01011994294822216,-0.025901280343532562,0.016240740194916725,0.040713001042604446,0.048034876585006714,0.06073204427957535,-0.022832458838820457,0.04186957702040672,-0.028070909902453423,-0.017865361645817757,0.021903444081544876,-0.012197521515190601,-0.005898785777390003,-0.005026145838201046,-0.0707559883594513,-0.07018686830997467,-0.02284044399857521,-0.00048340499051846564,0.016455477103590965,-0.05092868581414223,0.03949742764234543,-0.0027029006741940975,-0.00028807332273572683,0.006565629038959742,0.01111884880810976,-0.02176753804087639,-0.0009572299313731492,0.01040753535926342,0.010198201984167099,0.03720424696803093,0.012881388887763023,-0.012733855284750462,-0.03904632478952408,-0.09927721321582794,0.02065098099410534,0.009642732329666615,-0.06194112077355385,-0.03353307023644447,-0.01164246816188097,-0.0069906930439174175,-0.01728147827088833,0.028742019087076187,0.0845797136425972,-0.026173580437898636,-0.013152592815458775,0.026785751804709435,-0.015425506979227066,0.006877478212118149,0.002658536657691002,0.008670661598443985,0.007532414980232716,0.017502982169389725,0.03149566799402237,0.03347156196832657,0.01715019904077053,-0.03038584440946579,0.02752954699099064,0.08918122947216034,0.012330600060522556,-0.05106697604060173,-0.004838095977902412,0.011037994176149368,0.000040995866584125906,0.03225310519337654,0.050474051386117935,0.09854210913181305,0.012363290414214134,-0.015755685046315193,-0.04925494268536568,-0.02763490192592144,-0.013630981557071209,0.025295639410614967,-0.04481356590986252,-0.0301944762468338,-0.04558251053094864,0.023465583100914955,0.0027142250910401344,-0.011065397411584854,-0.049811601638793945,-0.0470309816300869,0.05381684750318527,-0.04476659372448921,-0.007300711236894131,0.009925390593707561,0.020632127299904823,0.03042975813150406,-0.02536688558757305,-0.013509252108633518,0.07619951665401459,-0.031182099133729935,0.008640948683023453,-0.027982594445347786,-0.054705388844013214,-0.006438509561121464,-0.011235019192099571,-0.028665468096733093,-0.01177563238888979,0.033470988273620605,0.0002833187463693321,-0.043115124106407166,0.05899793654680252,-0.0896543562412262,-0.005236068274825811,0.06167227402329445,0.04519914090633392,0.01954454369843006,-0.07691866904497147,-0.016814522445201874,0.023359108716249466,0.010918519459664822,-0.0023296938743442297,0.04562373831868172,0.05017790570855141,-0.049381010234355927,-0.009331081993877888,0.018009105697274208,0.025794656947255135,-0.015082997269928455,0.04649590700864792,-0.09915228188037872,0.024281058460474014,-0.015787137672305107,0.004877712111920118,0.03582937642931938,-0.02628527395427227,-0.023807892575860023,0.003941431641578674,0.012784689664840698,0.031436361372470856,-0.015088106505572796,0.05997612327337265,0.023556489497423172,0.023981427773833275,0.017813652753829956,0.00021741083764936775,-0.030505796894431114,-0.039240751415491104,-0.014816481620073318,0.041130002588033676,-0.028217501938343048,0.027574216946959496,-0.052292972803115845,-0.044375281780958176,0.010201475583016872,-0.03887465223670006,-0.010422543622553349,0.029343629255890846,0.008877179585397243,0.05877622589468956,0.035020023584365845,0.014520004391670227,0.00953112356364727,0.019540688022971153,-0.09637445956468582,0.003925866447389126,0.02655930072069168,-0.041040461510419846,-0.04876621440052986,0.03762204572558403,0.044096145778894424,0.1251879185438156,-0.011729591526091099,0.00889687892049551,-0.04372354969382286,0.060661766678094864,0.06267756968736649,-0.03667709231376648,-0.0548558346927166,-0.033822644501924515,0.02976182848215103,-0.05534571036696434,0.005513230804353952,0.03593960404396057,0.017778713256120682,-0.0024559132289141417,-0.03578018769621849,-0.012650378979742527,0.0013077340554445982,-5.272734277227096e-33,-0.04680875688791275,-0.029362373054027557,-0.07204589247703552,0.005523547530174255,-0.002093286020681262,-0.040954072028398514,-0.0018999690655618906,-0.02145414799451828,0.011279191821813583,0.015828460454940796,-0.005796931684017181,-0.06103606894612312,0.003987746778875589,0.011251437477767467,-0.017182886600494385,0.009462804533541203,0.049916915595531464,0.021846473217010498,-0.03773254156112671,0.04509536176919937,0.013821152970194817,0.0304449163377285,0.027988240122795105,0.004477949347347021,0.008161792531609535,0.007247339002788067,0.0671040415763855,0.02166822738945484,-0.03066953271627426,-0.0023268701042979956,-0.0016701804706826806,0.012080718763172626,-0.02479476109147072,-0.04337841644883156,-0.01676000840961933,0.02913612872362137,0.004865085240453482,-0.02960261143743992,-0.014431692659854889,-0.0006295533385127783,0.025696715340018272,-0.0075662946328520775,-0.06026756763458252,0.0005233290139585733,0.023140914738178253,0.03303796797990799,0.009712113067507744,0.017274048179388046,-0.05418255180120468,0.047416798770427704,-0.018884185701608658,0.00983272772282362,-0.006432348862290382,0.033409759402275085,0.00566505454480648,0.0319732129573822,0.018235674127936363,0.0569346658885479,-0.032535091042518616,-0.005352635867893696,0.057237304747104645,0.02880067005753517,0.031802840530872345,0.02308688312768936,0.03728397935628891,-0.011725249700248241,0.032958947122097015,-0.00938505120575428,-0.029544496908783913,-0.0034875560086220503,-0.029324719682335854,0.028729934245347977,0.02277107909321785,-0.05249837413430214,-0.06279120594263077,0.0019229116151109338,0.06435347348451614,-0.006251789163798094,-0.04618865251541138,0.02356097288429737,0.0345086045563221,-0.007044667843729258,-0.01303972490131855,-0.031115198507905006,0.004706611856818199,-0.0958855077624321,-0.0033045569434762,0.021432142704725266,0.02662629261612892,-0.031630951911211014,-0.06389255821704865,0.009314439259469509,-0.02897178940474987,0.06249461695551872,0.028066091239452362,-0.021908562630414963,0.048394881188869476,0.019749855622649193,-0.04130291938781738,-0.026300884783267975,-0.04477030038833618,-0.01788732409477234,0.025938846170902252,-0.0077080740593373775,-0.018560508266091347,-0.018790794536471367,-0.015941808000206947,-0.008761834353208542,-0.05737984552979469,0.0276210755109787,0.019815893843770027,-0.020532768219709396,0.0071600256487727165,-0.03227021545171738,0.04083704948425293,-0.020127402618527412,0.016557123512029648,0.012292248196899891,0.024882672354578972,-0.0809844359755516,0.018740514293313026,-0.023791776970028877,-0.011617246083915234,-0.035139042884111404,0.0172128863632679,0.011018317192792892,-0.032080914825201035,0.01191722135990858,0.0544174388051033,0.06863114982843399,-0.011568913236260414,0.010714797303080559,2.2514582553867513e-7,-0.013212506659328938,0.038612306118011475,0.0033649441320449114,-0.026707252487540245,0.028151554986834526,-0.032203491777181625,0.03275579214096069,0.0027029893826693296,0.021122988313436508,-0.04388076066970825,0.006002139765769243,-0.013095649890601635,0.021704182028770447,0.03625977411866188,-0.04473942518234253,0.010634755715727806,-0.060595039278268814,0.007828223519027233,-0.07912193238735199,0.011492352001369,0.07022646069526672,-0.014606739394366741,0.017408711835741997,0.013177137821912766,0.03745311126112938,0.0468980073928833,-0.003954828716814518,0.0068776560947299,0.044734202325344086,-0.00954701378941536,0.059320949018001556,-0.024715187028050423,-0.0135783851146698,0.07073047012090683,0.007321098819375038,-0.0015639333287253976,-0.04046542942523956,0.004200716502964497,0.05610235780477524,0.03244733437895775,0.044096097350120544,-0.009778264909982681,-0.02044440619647503,-0.017841093242168427,-0.0035323502961546183,-0.09175949543714523,0.026942403987050056,0.002038937993347645,-0.026952238753437996,-0.03884507715702057,-0.017950601875782013,0.0005289992550387979,0.04211624339222908,-0.012490908615291119,0.0015942435711622238,0.0062677329406142235,-0.0372730977833271,0.02741144970059395,0.009787056595087051,0.02066260203719139,-0.0256221741437912,-0.06609415262937546,0.006818730384111404,0.028507398441433907,0.03838175907731056,-0.0445062518119812,-0.01919197291135788,3.332136413311254e-34,-0.017688095569610596,0.04457651078701019,0.0030527657363563776,0.01703396812081337,-0.017254944890737534,-0.014809169806540012,-0.03313108906149864,-0.012274493463337421,0.03937183693051338,-0.09719649702310562,-0.01646299660205841]'
SET
  @TechnicalDesignVector_e6e35f47 = N'[-0.025229381397366524,-0.024553490802645683,-0.026998937129974365,-0.05494336038827896,0.0016450077528133988,-0.028412293642759323,0.02636510506272316,0.0794660747051239,-0.071292445063591,-0.03411727771162987,0.01420179195702076,-0.01153256744146347,0.04404459893703461,0.08518620580434799,0.0054608602076768875,-0.06778869777917862,-0.0004385033680591732,0.023520061746239662,0.01037469319999218,0.0038517597131431103,0.07656364142894745,0.010537508875131607,-0.018513549119234085,0.0077146803960204124,0.0073886653408408165,-0.015442794188857079,-0.004265558440238237,0.00826320517808199,0.07790633291006088,-0.05074984207749367,-0.03149031102657318,0.059462521225214005,-0.017686590552330017,-0.037274714559316635,0.0000013398531564234872,-0.06047452613711357,-0.03638887777924538,0.029180312529206276,-0.03844870254397392,-0.024499788880348206,0.023073652759194374,0.017143601551651955,0.011293403804302216,0.027661647647619247,0.015753373503684998,-0.08586600422859192,0.024354340508580208,0.02561960555613041,0.0811217799782753,-0.014676030725240707,0.01652349904179573,0.011867541819810867,0.03705044463276863,0.023795608431100845,-0.006637196522206068,0.05141857638955116,-0.00929037295281887,-0.05702158063650131,0.022233473137021065,0.006509524770081043,0.009396756999194622,-0.03183567151427269,0.02323102205991745,-0.029654406011104584,-0.0135270357131958,0.05677398666739464,0.0869797021150589,0.05393927916884422,-0.029957976192235947,0.04420829564332962,0.06463375687599182,0.042591556906700134,-0.003295866772532463,-0.038848888128995895,-0.06167244538664818,-0.018997985869646072,-0.01608431339263916,0.03017183393239975,-0.06098561733961105,-0.0029997671954333782,0.04755833372473717,0.006293743383139372,-0.06446937471628189,-0.030007075518369675,0.025215134024620056,0.03169397637248039,0.02623572200536728,-0.031565044075250626,-0.046993106603622437,-0.02780933491885662,0.037450965493917465,-0.029881514608860016,0.03381110355257988,0.015425417572259903,-0.06116635352373123,0.01781691424548626,0.032946787774562836,-0.16563944518566132,0.0663403794169426,0.03566667065024376,0.13783466815948486,0.08175662159919739,-0.058931827545166016,0.016269944608211517,0.029327785596251488,0.11391349881887436,-0.000431006628787145,-0.03879965469241142,-0.023627696558833122,0.01415775716304779,0.008499056100845337,-0.020666634663939476,0.006064224988222122,0.036452874541282654,-0.038345351815223694,0.03128795325756073,-0.042488228529691696,-0.028229016810655594,-0.02378961630165577,0.041113439947366714,0.04066793993115425,-0.04434018209576607,-0.04611102491617203,-0.009839262813329697,-0.008196824230253696,0.009104503318667412,-0.018654819577932358,-0.07894492894411087,-0.0037716790102422237,-0.01618533581495285,0.013292372226715088,-0.00842453632503748,0.037225257605314255,0.0016406439244747162,-0.05317484959959984,-0.011892675422132015,-0.0040581803768873215,0.01464023906737566,0.012183708138763905,-0.018482081592082977,0.002908562310039997,0.05171273648738861,-0.0025214117486029863,-0.0046400041319429874,0.007321937475353479,0.018622849136590958,-0.00012363346468191594,-0.023092133924365044,0.018360476940870285,0.05638548731803894,0.030651880428195,0.012012267485260963,-0.027982614934444427,-0.028968146070837975,-0.04374904930591583,0.0018303422257304192,0.05406297370791435,-0.03192118555307388,-0.04300990328192711,-0.02591807022690773,-0.008274847641587257,0.027580756694078445,0.07895057648420334,0.04091985151171684,-0.03736106678843498,-0.007211930584162474,-0.11217351257801056,-0.010962458327412605,0.017066795378923416,-0.0009306096471846104,0.02764999493956566,-0.006880962755531073,-0.007998834364116192,0.017596952617168427,0.001132313976995647,-0.007626032456755638,-0.031113578006625175,0.026197858154773712,-0.010358069092035294,0.05786861106753349,0.016622522845864296,-0.034776099026203156,0.026761744171380997,0.013376956805586815,0.002754566492512822,0.00019228635937906802,-0.03437802195549011,0.03401954472064972,0.0050536999478936195,0.01900722272694111,-0.0028611698653548956,-0.005422010086476803,-0.04676298424601555,0.007747040130198002,0.016125807538628578,-0.018934674561023712,-0.051413994282484055,0.03374410793185234,0.06783616542816162,-0.006202711258083582,0.01055699959397316,-0.009505003690719604,0.02456163801252842,0.06342025101184845,0.021681150421500206,-0.03411734849214554,-0.0009813136421144009,-0.013593753799796104,0.010928281582891941,0.02610143832862377,-0.006468313280493021,0.005751691292971373,-0.01798500306904316,-0.00896442774683237,-0.01560820359736681,-0.03307094797492027,0.009653277695178986,0.035650499165058136,-0.08152381330728531,-0.04045145958662033,-0.0026823964435607195,0.03633540868759155,0.041510455310344696,0.019274940714240074,0.13753142952919006,-0.0050389934331178665,-0.004044953268021345,-0.0009115132270380855,0.018243608996272087,0.015125926584005356,-0.01874651573598385,0.0005758063634857535,-0.015393977053463459,-0.01601633056998253,0.013640361838042736,0.005383829120546579,-0.03745819628238678,-0.033740460872650146,-0.019447773694992065,0.03229343518614769,-0.02852630615234375,-0.0015668704872950912,-0.03216522932052612,-0.004096520598977804,-0.06652871519327164,-0.053331244736909866,-0.04956599324941635,0.017623012885451317,-0.0049529834650456905,0.023443149402737617,0.016876641660928726,-0.026315104216337204,0.06076009199023247,-0.026358872652053833,0.04126882925629616,0.02329694665968418,0.02828262746334076,-0.024342546239495277,-0.05453765019774437,0.012696840800344944,-0.01879114657640457,-0.0003378826368134469,0.0016529769636690617,0.007382995914667845,0.026592589914798737,-0.005041162949055433,0.04092713072896004,-0.05952007323503494,-0.03723474591970444,0.007056003902107477,0.010948147624731064,0.024506166577339172,0.007870467379689217,-0.01596773788332939,-0.001672686543315649,-0.021507764235138893,-0.041660722345113754,0.023566585034132004,0.012614540755748749,-0.004003454465419054,-0.004365411587059498,-0.06528642773628235,0.0013439370086416602,0.006175028160214424,-0.04601655900478363,0.014822466298937798,-0.0021627291571348906,-0.009247093461453915,-0.04753263667225838,-0.029649486765265465,0.011371401138603687,0.007402239833027124,0.004508758895099163,0.005362385418266058,-0.0052923220209777355,0.00492582144215703,0.11565481126308441,0.015475562773644924,0.0036746615078300238,-0.003872836008667946,-0.015276945196092129,-0.011494699865579605,-0.04142773896455765,0.001720501109957695,-0.03416500985622406,0.05076128989458084,0.02134023606777191,-0.0151895172894001,0.046909723430871964,0.03498496115207672,0.01759509928524494,0.02688993513584137,-0.011882311664521694,0.009551389142870903,0.0028204675763845444,0.0626610741019249,-0.01915704272687435,0.008715217933058739,-0.04287811368703842,0.039366379380226135,0.0038687163032591343,-0.03747660666704178,0.03338976204395294,-0.031002385541796684,-0.010375705547630787,0.015811029821634293,0.027326975017786026,-0.025981010869145393,-0.03588614985346794,0.029654663056135178,0.010658029466867447,-0.01718287356197834,0.0008309516706503928,0.012749187648296356,0.06439627707004547,0.023672066628932953,-0.024425482377409935,0.004053134936839342,-0.013551564887166023,-0.04015784338116646,-0.02249002829194069,-0.05623609945178032,-0.006124784238636494,0.01184610091149807,0.03664455935359001,-0.022303590551018715,-0.020197128877043724,0.03793534263968468,-0.03092072531580925,0.018597502261400223,0.037757936865091324,0.04933089017868042,0.007746689487248659,-0.01219987589865923,-0.01290079578757286,0.04447050392627716,-0.0325704962015152,-0.020365776494145393,-0.0084465891122818,-0.035750001668930054,0.00518814055249095,0.04073323681950569,0.1012573391199112,0.021867381408810616,0.027594689279794693,0.019821632653474808,0.04996747523546219,-0.016752060502767563,-0.010312775149941444,0.04823065176606178,-0.036094315350055695,-0.009199054911732674,0.019433381035923958,0.05323838070034981,0.00992040615528822,-0.02714298479259014,0.012874865904450417,-0.025060467422008514,-0.055837247520685196,0.006691810209304094,0.057110320776700974,-0.01632852852344513,0.10700415819883347,0.00960058718919754,0.04236803203821182,-0.02094889245927334,-0.01738772541284561,-0.009441775269806385,-0.00006778612441848963,-0.01516939327120781,-0.0343402624130249,-0.006908542010933161,-0.03597339242696762,0.005266869440674782,0.04080324247479439,0.07227693498134613,-0.04225461557507515,0.00510735297575593,0.057257141917943954,0.0015188533579930663,-0.015583147294819355,0.02656569518148899,0.023530643433332443,0.003553940448909998,-0.003021430689841509,-0.014840968884527683,0.029148241505026817,0.0198484119027853,-0.013911017216742039,-0.017688943073153496,-0.07420587539672852,-0.06939633190631866,-0.026309728622436523,-0.0552479512989521,-0.096931092441082,-0.00414276123046875,-0.0036666220985352993,-0.0606832355260849,0.04303744062781334,0.06241094321012497,-0.05781780183315277,0.006778503302484751,0.017035679891705513,-0.0022639217786490917,0.06103349104523659,-0.02302045002579689,-0.016995780169963837,-0.021138178184628487,-0.011717023327946663,-0.005308490712195635,-0.016635708510875702,-0.0035922639071941376,-0.02660446986556053,0.05923349782824516,0.03412362560629845,-0.03261549398303032,-0.045086171478033066,0.009492114186286926,0.03172517567873001,-0.03375231847167015,0.04944222420454025,-0.005205084569752216,0.07442189753055573,-0.007090955972671509,-0.03916638717055321,-0.031711332499980927,-0.025329558178782463,0.055394601076841354,0.02992759458720684,-0.03497462347149849,0.035872265696525574,-0.037630192935466766,-0.02655991166830063,0.010108492337167263,-0.02138798125088215,-0.0680297389626503,-0.046002909541130066,0.04562155902385712,-0.005688015837222338,0.038965854793787,0.005971717182546854,0.0198396984487772,-0.0036052470095455647,0.00564220454543829,-0.015980742871761322,-0.00442212400957942,0.037891995161771774,-0.030864689499139786,-0.007101076655089855,-0.05242917686700821,0.005461402237415314,-0.015981994569301605,-0.0381653867661953,-0.034797847270965576,0.0394803062081337,0.013033979572355747,0.0002277549501741305,0.05524018779397011,-0.07207712531089783,0.03499256819486618,0.05507193133234978,0.07067616283893585,-0.019231297075748444,-0.013757571578025818,-0.00521943811327219,-0.005290020722895861,0.003997483756393194,-0.0068102674558758736,-0.004878181964159012,-0.01007047202438116,-0.0353090763092041,-0.018088381737470627,-0.012370061129331589,0.06674505770206451,0.06048702448606491,0.05219963192939758,-0.08952666074037552,0.02537441998720169,-0.05439087003469467,-0.028255224227905273,0.005328424274921417,-0.05516998469829559,-0.016971876844763756,-0.017822302877902985,-0.003531348891556263,0.005454849451780319,-0.002697395160794258,0.07716067135334015,-0.008798045106232166,-0.024506740272045135,0.002280930755659938,0.02131620980799198,0.00527364294975996,-0.040118832141160965,-0.03901444748044014,0.056305937469005585,-0.031096618622541428,0.03389182314276695,-0.03035978227853775,-0.05171630531549454,0.021116042509675026,0.00281690526753664,0.010499406605958939,0.020356658846139908,0.043240610510110855,0.07091354578733444,0.0476389080286026,0.030958013609051704,-0.015231406316161156,0.024214502424001694,-0.008076840080320835,0.03223011642694473,0.008832988329231739,-0.020071273669600487,-0.022950507700443268,0.05010633543133736,-0.02032366581261158,0.06730415672063828,0.022564876824617386,-0.04835685342550278,-0.06439990550279617,0.057383906096220016,0.06309956312179565,0.022919779643416405,-0.011997812427580357,-0.012754571624100208,0.02901414781808853,-0.040847960859537125,-0.018190594390034676,-0.011045991443097591,0.02359139733016491,0.024364523589611053,-0.0031239658128470182,-0.015073074027895927,0.013643370941281319,-5.2781937138026964e-33,-0.056338489055633545,-0.004816878121346235,-0.031871430575847626,0.056820034980773926,0.007463808637112379,0.002282726811245084,-0.010159896686673164,-0.052168797701597214,0.03889094293117523,-0.026168210431933403,0.007963288575410843,-0.08251495659351349,0.016083577647805214,0.005967617500573397,-0.05042221397161484,-0.004453475587069988,0.045682139694690704,0.028942173346877098,-0.02531576342880726,0.02103453502058983,-0.02457559108734131,0.014573388732969761,0.06993450969457626,-0.0424950048327446,-0.031010137870907784,0.002890540286898613,0.02499062567949295,0.01666504144668579,-0.038483161479234695,0.02321799285709858,0.011377080343663692,0.04008374735713005,-0.02647978998720646,-0.0764017328619957,-0.024432972073554993,0.0584375225007534,-0.051355525851249695,-0.04790002107620239,0.015288546681404114,-0.01719069294631481,0.010596697218716145,-0.004242224618792534,-0.014959932304918766,-0.008777907118201256,0.02171388454735279,0.0292710792273283,0.01647157408297062,-0.006675635930150747,0.0005450132302939892,-0.04940896853804588,-0.010341153480112553,0.009867027401924133,-0.008008117787539959,0.05035741254687309,-0.026934288442134857,0.04063643142580986,0.06393887847661972,0.02552715688943863,-0.050911903381347656,-0.024261359125375748,-0.012633430771529675,-0.006041713524609804,0.025005530565977097,0.04165981337428093,0.013811270706355572,0.003339652204886079,0.07459086924791336,-0.0018800682155415416,-0.0735919177532196,-0.0012231497094035149,0.0058461385779082775,-0.05658626928925514,0.06456150114536285,-0.010435283184051514,-0.012316773645579815,0.023671887814998627,0.0007473238511011004,0.0185931958258152,0.019272183999419212,0.04995960742235184,0.06437226384878159,0.027580680325627327,-0.01076301746070385,-0.017756309360265732,-0.04114453122019768,-0.030277332291007042,0.014265443198382854,0.034782830625772476,-0.0021726565901190042,-0.019664473831653595,-0.04238137602806091,-0.004215036053210497,-0.011994131840765476,0.06951223313808441,-0.049406085163354874,-0.022193338721990585,0.04572340101003647,0.04272906482219696,-0.04364924877882004,-0.027882883325219154,-0.02677871286869049,-0.026140792295336723,-0.011782580055296421,-0.01494643185287714,0.0002392558235442266,0.00020665368356276304,-0.026834463700652122,-0.010387794114649296,-0.08596646785736084,0.04518332704901695,0.017566874623298645,0.029447611421346664,-0.017439238727092743,-0.0023473447654396296,0.042533211410045624,-0.022269047796726227,-0.004938273690640926,0.0058664726093411446,0.015738215297460556,-0.06162819638848305,-0.02121480368077755,0.01394014060497284,0.030300693586468697,0.013046612031757832,0.001449615228921175,-0.00033579824957996607,-0.012089922092854977,-0.05037012696266174,0.026117177680134773,0.01840546354651451,-0.006422908045351505,0.040853243321180344,2.1976745756546734e-7,0.006316007114946842,0.0261367317289114,0.007885534316301346,0.0015959602314978838,0.03495636582374573,0.004153511952608824,0.031827595084905624,-0.010186857543885708,-0.0034849951043725014,-0.07263556867837906,-0.003617793321609497,-0.023633675649762154,0.016236845403909683,0.06377393007278442,-0.0028315403033047915,-0.002854730701074004,-0.09083568304777145,-0.02341223880648613,-0.07194315642118454,0.029396861791610718,0.07558456063270569,0.0090132812038064,0.03338661789894104,0.005473389755934477,0.04519708454608917,0.05972903594374657,0.0064567080698907375,-0.009090693667531013,0.04061221703886986,-0.021017717197537422,0.009368827566504478,-0.05633563548326492,-0.016340767964720726,0.04810330271720886,0.03281378000974655,0.006161059252917767,0.003166930517181754,0.037685275077819824,0.05209065601229668,0.10681851953268051,0.06485927104949951,0.007639020215719938,-0.017538737505674362,-0.06237673759460449,0.02114086225628853,-0.03283434361219406,-0.004697869997471571,-0.03728059306740761,-0.03732897713780403,-0.015713969245553017,-0.006999890320003033,0.008558269590139389,-0.0190923772752285,-0.000491326383780688,-0.00982245896011591,-0.03412219136953354,-0.03670797497034073,0.0021638034377247095,-0.058114465326070786,-0.016209209337830544,-0.03346770256757736,-0.02860509231686592,-0.04639091715216637,0.02670099213719368,-0.008855555206537247,-0.06942418217658997,-0.037767112255096436,3.1776714046609167e-34,-0.012598773464560509,-0.0366918183863163,-0.019118940457701683,0.04335504025220871,0.009387214668095112,0.013939492404460907,-0.011851893737912178,0.019064730033278465,-0.004306364804506302,-0.061065424233675,-0.03391743451356888]'
SET
  @HasCustomProps_e6e35f47 = 0
SET
  @HasCustomEvents_e6e35f47 = 0
SET
  @RequiresData_e6e35f47 = 0
SET
  @DependencyCount_e6e35f47 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_e6e35f47 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_e6e35f47 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_e6e35f47 = 0
SET
  @ID_e6e35f47 = '7E51E1BF-E118-4EA3-8B71-E2098F5CF11E'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_e6e35f47,
  @Name = @Name_e6e35f47,
  @Version = @Version_e6e35f47,
  @VersionSequence = @VersionSequence_e6e35f47,
  @Title = @Title_e6e35f47,
  @Description = @Description_e6e35f47,
  @Type = @Type_e6e35f47,
  @Status = @Status_e6e35f47,
  @DeveloperName = @DeveloperName_e6e35f47,
  @DeveloperEmail = @DeveloperEmail_e6e35f47,
  @DeveloperOrganization = @DeveloperOrganization_e6e35f47,
  @SourceRegistryID = @SourceRegistryID_e6e35f47,
  @ReplicatedAt = @ReplicatedAt_e6e35f47,
  @LastSyncedAt = @LastSyncedAt_e6e35f47,
  @Specification = @Specification_e6e35f47,
  @FunctionalRequirements = @FunctionalRequirements_e6e35f47,
  @TechnicalDesign = @TechnicalDesign_e6e35f47,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_e6e35f47,
  @TechnicalDesignVector = @TechnicalDesignVector_e6e35f47,
  @HasCustomProps = @HasCustomProps_e6e35f47,
  @HasCustomEvents = @HasCustomEvents_e6e35f47,
  @RequiresData = @RequiresData_e6e35f47,
  @DependencyCount = @DependencyCount_e6e35f47,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_e6e35f47,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_e6e35f47,
  @HasRequiredCustomProps = @HasRequiredCustomProps_e6e35f47,
  @ID = @ID_e6e35f47;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_76acbd85 NVARCHAR(MAX),
@Name_76acbd85 NVARCHAR(500),
@Version_76acbd85 NVARCHAR(50),
@VersionSequence_76acbd85 INT,
@Title_76acbd85 NVARCHAR(1000),
@Description_76acbd85 NVARCHAR(MAX),
@Type_76acbd85 NVARCHAR(255),
@Status_76acbd85 NVARCHAR(50),
@DeveloperName_76acbd85 NVARCHAR(255),
@DeveloperEmail_76acbd85 NVARCHAR(255),
@DeveloperOrganization_76acbd85 NVARCHAR(255),
@SourceRegistryID_76acbd85 UNIQUEIDENTIFIER,
@ReplicatedAt_76acbd85 DATETIMEOFFSET,
@LastSyncedAt_76acbd85 DATETIMEOFFSET,
@Specification_76acbd85 NVARCHAR(MAX),
@FunctionalRequirements_76acbd85 NVARCHAR(MAX),
@TechnicalDesign_76acbd85 NVARCHAR(MAX),
@FunctionalRequirementsVector_76acbd85 NVARCHAR(MAX),
@TechnicalDesignVector_76acbd85 NVARCHAR(MAX),
@HasCustomProps_76acbd85 BIT,
@HasCustomEvents_76acbd85 BIT,
@RequiresData_76acbd85 BIT,
@DependencyCount_76acbd85 INT,
@TechnicalDesignVectorEmbeddingModelID_76acbd85 NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_76acbd85 NVARCHAR(MAX),
@HasRequiredCustomProps_76acbd85 BIT,
@ID_76acbd85 UNIQUEIDENTIFIER
SET
  @Namespace_76acbd85 = N'Generic/UI/AI'
SET
  @Name_76acbd85 = N'AIInsightsPanel'
SET
  @Version_76acbd85 = N'1.0.0'
SET
  @VersionSequence_76acbd85 = 1
SET
  @Title_76acbd85 = N'AI Insights Panel'
SET
  @Description_76acbd85 = N'A reusable AI insights panel component with markdown rendering, copy/export functionality, and collapsible UI'
SET
  @Type_76acbd85 = N'Widget'
SET
  @Status_76acbd85 = N'Published'
SET
  @Specification_76acbd85 = N'{"name":"AIInsightsPanel","code":"function AIInsightsPanel({ \n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings,\n  // Required props\n  insights,\n  loading,\n  error,\n  onGenerate,\n  // Optional props with defaults\n  title = ''AI Insights'',\n  icon = ''fa-wand-magic-sparkles'',\n  iconColor = ''#8B5CF6'',\n  maxHeight = ''400px'',\n  showRefresh = true,\n  showExport = true,\n  showCopy = true,\n  position = ''top'',\n  defaultCollapsed = false,\n  onClose,\n  customButtons = []\n}) {\n  const { useState, useEffect, useRef } = React;\n  \n  // State\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const [copyFeedback, setCopyFeedback] = useState(false);\n  \n  // Load marked library if available\n  const marked = window.marked;\n  \n  // Format insights using marked if available, otherwise fallback to plain text\n  const formatInsights = (text) => {\n    if (!text) return null;\n    \n    // If marked is available, use it for markdown rendering\n    if (marked && marked.parse) {\n      try {\n        const htmlContent = marked.parse(text);\n        return (\n          <div \n            className=\"markdown-insights\"\n            dangerouslySetInnerHTML={{ __html: htmlContent }}\n            style={{\n              color: ''#374151'',\n              lineHeight: ''1.6''\n            }}\n          />\n        );\n      } catch (err) {\n        console.warn(''Failed to parse markdown:'', err);\n      }\n    }\n    \n    // Fallback to plain text with basic formatting\n    return (\n      <div style={{ whiteSpace: ''pre-wrap'', color: ''#374151'', lineHeight: ''1.6'' }}>\n        {text}\n      </div>\n    );\n  };\n  \n  // Copy to clipboard functionality\n  const copyToClipboard = async () => {\n    if (!insights) return;\n    \n    try {\n      await navigator.clipboard.writeText(insights);\n      setCopyFeedback(true);\n      setTimeout(() => setCopyFeedback(false), 2000);\n    } catch (err) {\n      console.error(''Failed to copy:'', err);\n    }\n  };\n  \n  // Export as markdown functionality\n  const exportAsMarkdown = () => {\n    if (!insights) return;\n    \n    const timestamp = new Date().toISOString().split(''T'')[0];\n    const markdownContent = `# $' + '{title}\n\nGenerated: $' + '{new Date().toLocaleString()}\n\n---\n\n$' + '{insights}`;\n    \n    const blob = new Blob([markdownContent], { type: ''text/markdown'' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(''a'');\n    a.href = url;\n    a.download = `ai-insights-$' + '{timestamp}.md`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  // Don''t render if no insights and no error\n  if (!insights && !error && !loading) {\n    return null;\n  }\n  \n  const panelStyles = {\n    marginBottom: position === ''top'' ? (styles?.spacing?.lg || ''20px'') : 0,\n    marginTop: position === ''bottom'' ? (styles?.spacing?.lg || ''20px'') : 0,\n    padding: styles?.spacing?.lg || ''20px'',\n    backgroundColor: styles?.colors?.surface || ''white'',\n    borderRadius: styles?.borders?.radius || ''8px'',\n    border: `1px solid $' + '{styles?.colors?.border || ''#E5E7EB''}`,\n    boxShadow: ''0 2px 4px rgba(0, 0, 0, 0.1)'',\n    background: ''linear-gradient(135deg, #ffffff 0%, #f9fafb 100%)'',\n    transition: ''all 0.3s ease'',\n    cursor: ''default''\n  };\n  \n  return (\n    <div \n      onDoubleClick={() => setCollapsed(!collapsed)}\n      style={panelStyles}\n    >\n      {/* Header */}\n      <div style={{\n        display: ''flex'',\n        justifyContent: ''space-between'',\n        alignItems: ''center'',\n        marginBottom: collapsed ? 0 : (styles?.spacing?.md || ''16px'')\n      }}>\n        {/* Title with icon */}\n        <h3 style={{\n          margin: 0,\n          fontSize: ''18px'',\n          fontWeight: ''600'',\n          color: styles?.colors?.text || ''#111827'',\n          display: ''flex'',\n          alignItems: ''center'',\n          gap: styles?.spacing?.sm || ''8px''\n        }}>\n          <i className={`fa-solid $' + '{icon}`} style={{ color: iconColor }}></i>\n          {title}\n        </h3>\n        \n        {/* Button group */}\n        <div style={{ \n          display: ''flex'', \n          gap: styles?.spacing?.sm || ''8px'', \n          alignItems: ''center'' \n        }}>\n          {/* Collapse/Expand button - always first */}\n          <button\n            onClick={() => setCollapsed(!collapsed)}\n            style={{\n              background: ''none'',\n              border: `1px solid $' + '{styles?.colors?.border || ''#E5E7EB''}`,\n              borderRadius: ''6px'',\n              color: styles?.colors?.textSecondary || ''#6B7280'',\n              cursor: ''pointer'',\n              padding: ''6px 10px'',\n              fontSize: ''14px'',\n              display: ''flex'',\n              alignItems: ''center'',\n              gap: ''4px'',\n              transition: ''all 0.2s''\n            }}\n            title={collapsed ? ''Expand'' : ''Collapse''}\n            onMouseEnter={(e) => {\n              e.currentTarget.style.backgroundColor = ''#F9FAFB'';\n            }}\n            onMouseLeave={(e) => {\n              e.currentTarget.style.backgroundColor = ''transparent'';\n            }}\n          >\n            <i className={`fa-solid fa-chevron-$' + '{collapsed ? ''down'' : ''up''}`}></i>\n          </button>\n          \n          {/* Copy button */}\n          {showCopy && insights && (\n            <button\n              onClick={copyToClipboard}\n              style={{\n                background: copyFeedback ? ''#10B981'' : ''none'',\n                border: `1px solid $' + '{copyFeedback ? ''#10B981'' : styles?.colors?.border || ''#E5E7EB''}`,\n                borderRadius: ''6px'',\n                color: copyFeedback ? ''white'' : (styles?.colors?.textSecondary || ''#6B7280''),\n                cursor: ''pointer'',\n                padding: ''6px 10px'',\n                fontSize: ''14px'',\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: ''4px'',\n                transition: ''all 0.2s''\n              }}\n              title={copyFeedback ? ''Copied!'' : ''Copy to clipboard''}\n            >\n              <i className={`fa-solid fa-$' + '{copyFeedback ? ''check'' : ''copy''}`}></i>\n              {copyFeedback && <span style={{ fontSize: ''12px'' }}>Copied!</span>}\n            </button>\n          )}\n          \n          {/* Export button */}\n          {showExport && insights && (\n            <button\n              onClick={exportAsMarkdown}\n              style={{\n                background: ''none'',\n                border: `1px solid $' + '{styles?.colors?.border || ''#E5E7EB''}`,\n                borderRadius: ''6px'',\n                color: styles?.colors?.textSecondary || ''#6B7280'',\n                cursor: ''pointer'',\n                padding: ''6px 10px'',\n                fontSize: ''14px'',\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: ''4px'',\n                transition: ''all 0.2s''\n              }}\n              title=\"Export as Markdown\"\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = ''#F9FAFB'';\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = ''transparent'';\n              }}\n            >\n              <i className=\"fa-solid fa-download\"></i>\n            </button>\n          )}\n          \n          {/* Refresh button */}\n          {showRefresh && onGenerate && (\n            <button\n              onClick={() => {\n                setCollapsed(false);\n                onGenerate();\n              }}\n              disabled={loading}\n              style={{\n                background: ''none'',\n                border: `1px solid $' + '{styles?.colors?.border || ''#E5E7EB''}`,\n                borderRadius: ''6px'',\n                padding: ''6px 10px'',\n                cursor: loading ? ''not-allowed'' : ''pointer'',\n                color: styles?.colors?.textSecondary || ''#6B7280'',\n                fontSize: ''14px'',\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: ''4px'',\n                opacity: loading ? 0.5 : 1,\n                transition: ''all 0.2s''\n              }}\n              title=\"Refresh insights\"\n            >\n              <i className={`fa-solid fa-$' + '{loading ? ''spinner fa-spin'' : ''arrows-rotate''}`}></i>\n            </button>\n          )}\n          \n          {/* Custom buttons */}\n          {customButtons.map((button, index) => (\n            <button\n              key={index}\n              onClick={button.onClick}\n              disabled={button.disabled}\n              style={{\n                background: ''none'',\n                border: `1px solid $' + '{styles?.colors?.border || ''#E5E7EB''}`,\n                borderRadius: ''6px'',\n                padding: ''6px 10px'',\n                cursor: button.disabled ? ''not-allowed'' : ''pointer'',\n                color: styles?.colors?.textSecondary || ''#6B7280'',\n                fontSize: ''14px'',\n                display: ''flex'',\n                alignItems: ''center'',\n                gap: ''4px'',\n                opacity: button.disabled ? 0.5 : 1,\n                ...button.style\n              }}\n              title={button.title}\n            >\n              {button.icon && <i className={button.icon}></i>}\n              {button.label && <span>{button.label}</span>}\n            </button>\n          ))}\n          \n          {/* Close button */}\n          {onClose && (\n            <button\n              onClick={onClose}\n              style={{\n                background: ''none'',\n                border: ''none'',\n                fontSize: ''20px'',\n                cursor: ''pointer'',\n                color: styles?.colors?.textSecondary || ''#6B7280'',\n                padding: ''4px'',\n                transition: ''all 0.2s''\n              }}\n              title=\"Close\"\n              onMouseEnter={(e) => {\n                e.currentTarget.style.color = ''#EF4444'';\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.color = styles?.colors?.textSecondary || ''#6B7280'';\n              }}\n            >\n              ×\n            </button>\n          )}\n        </div>\n      </div>\n      \n      {/* Content - only show when not collapsed */}\n      {!collapsed && (\n        <div>\n          {/* Loading state */}\n          {loading && (\n            <div style={{\n              padding: ''24px'',\n              textAlign: ''center'',\n              color: styles?.colors?.textSecondary || ''#6B7280'',\n              backgroundColor: ''#F9FAFB'',\n              borderRadius: ''6px''\n            }}>\n              <i className=\"fa-solid fa-spinner fa-spin\" style={{ fontSize: ''24px'', marginBottom: ''12px'' }}></i>\n              <div>Generating AI insights...</div>\n            </div>\n          )}\n          \n          {/* Error state */}\n          {error && !loading && (\n            <div style={{\n              color: styles?.colors?.error || ''#EF4444'',\n              padding: ''12px'',\n              backgroundColor: ''#FEE2E2'',\n              borderRadius: ''6px'',\n              border: ''1px solid #FECACA'',\n              display: ''flex'',\n              alignItems: ''start'',\n              gap: ''8px''\n            }}>\n              <i className=\"fa-solid fa-exclamation-triangle\" style={{ marginTop: ''2px'' }}></i>\n              <div>{error}</div>\n            </div>\n          )}\n          \n          {/* Insights content */}\n          {insights && !loading && (\n            <div style={{\n              maxHeight: maxHeight,\n              overflowY: ''auto'',\n              padding: ''12px'',\n              backgroundColor: ''#F9FAFB'',\n              borderRadius: ''6px''\n            }}>\n              {formatInsights(insights)}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Add styles for markdown content */}\n      <style>{`\n        .markdown-insights h1 { font-size: 20px; font-weight: 600; color: #111827; margin: 16px 0 12px 0; }\n        .markdown-insights h2 { font-size: 18px; font-weight: 600; color: #1F2937; margin: 14px 0 10px 0; }\n        .markdown-insights h3 { font-size: 16px; font-weight: 600; color: #374151; margin: 12px 0 8px 0; }\n        .markdown-insights h4 { font-size: 14px; font-weight: 600; color: #4B5563; margin: 10px 0 6px 0; }\n        .markdown-insights p { margin: 8px 0; color: #374151; line-height: 1.6; }\n        .markdown-insights ul, .markdown-insights ol { margin: 8px 0; padding-left: 24px; color: #374151; }\n        .markdown-insights li { margin: 4px 0; line-height: 1.5; }\n        .markdown-insights strong { font-weight: 600; color: #1F2937; }\n        .markdown-insights em { font-style: italic; }\n        .markdown-insights code { background: #F3F4F6; padding: 2px 4px; border-radius: 3px; font-family: monospace; font-size: 0.9em; }\n        .markdown-insights blockquote { border-left: 3px solid $' + '{iconColor}; padding-left: 12px; margin: 12px 0; color: #4B5563; }\n        .markdown-insights hr { border: none; border-top: 1px solid #E5E7EB; margin: 16px 0; }\n        .markdown-insights a { color: $' + '{iconColor}; text-decoration: none; }\n        .markdown-insights a:hover { text-decoration: underline; }\n        .markdown-insights table { border-collapse: collapse; width: 100%; margin: 12px 0; }\n        .markdown-insights th, .markdown-insights td { border: 1px solid #E5E7EB; padding: 8px; text-align: left; }\n        .markdown-insights th { background: #F9FAFB; font-weight: 600; }\n        .markdown-insights pre { background: #1F2937; color: #F9FAFB; padding: 12px; border-radius: 6px; overflow-x: auto; }\n      `}</style>\n    </div>\n  );\n}\n\nreturn AIInsightsPanel;","namespace":"Generic/UI/AI","title":"AI Insights Panel","type":"Widget","version":"1.0.0","description":"A reusable AI insights panel component with markdown rendering, copy/export functionality, and collapsible UI","properties":[{"name":"insights","type":"string","description":"The AI-generated insights content (supports markdown)","required":true},{"name":"loading","type":"boolean","description":"Whether the insights are currently being generated","required":true},{"name":"error","type":"string","description":"Error message to display if insights generation failed","required":true},{"name":"onGenerate","type":"function","description":"Callback function to generate/refresh insights","required":true},{"name":"title","type":"string","description":"Title text for the panel header","default":"AI Insights"},{"name":"icon","type":"string","description":"Font Awesome icon class for the title","default":"fa-wand-magic-sparkles"},{"name":"iconColor","type":"string","description":"Color for the title icon","default":"#8B5CF6"},{"name":"maxHeight","type":"string","description":"Maximum height for the content area with scroll","default":"400px"},{"name":"showRefresh","type":"boolean","description":"Whether to show the refresh button","default":true},{"name":"showExport","type":"boolean","description":"Whether to show the export to markdown button","default":true},{"name":"showCopy","type":"boolean","description":"Whether to show the copy to clipboard button","default":true},{"name":"position","type":"string","description":"Position of the panel (''top'' or ''bottom'') affects margin","default":"top"},{"name":"defaultCollapsed","type":"boolean","description":"Whether the panel starts in collapsed state","default":false},{"name":"onClose","type":"function","description":"Optional callback when close button is clicked"},{"name":"customButtons","type":"array","description":"Array of custom button configurations to add to the button bar","default":[]}],"events":[{"name":"onToggleCollapse","description":"Fired when the panel is collapsed or expanded","parameters":[{"name":"collapsed","type":"boolean","description":"The new collapsed state"}]},{"name":"onCopy","description":"Fired when content is copied to clipboard","parameters":[]},{"name":"onExport","description":"Fired when content is exported as markdown","parameters":[]}],"libraries":[{"name":"marked","version":"11.1.1","globalVariable":"marked"}],"usageExample":"// Basic usage\n<AIInsightsPanel\n  insights={aiInsights}\n  loading={loadingInsights}\n  error={insightsError}\n  onGenerate={generateInsights}\n  title=\"Sales Analysis Insights\"\n  iconColor=\"#10B981\"\n/>\n\n// With custom buttons\n<AIInsightsPanel\n  insights={aiInsights}\n  loading={loadingInsights}\n  error={insightsError}\n  onGenerate={generateInsights}\n  onClose={() => setShowInsights(false)}\n  customButtons={[\n    {\n      icon: ''fa-solid fa-share'',\n      title: ''Share'',\n      onClick: handleShare\n    }\n  ]}\n/>","functionalRequirements":"• Display AI-generated insights with markdown formatting support\n• Provide collapsible interface with double-click and button toggle\n• Support copy to clipboard with visual feedback\n• Enable export to markdown file with timestamp\n• Show loading and error states appropriately\n• Allow refresh/regeneration of insights\n• Support customizable title, icon, and colors\n• Provide extensibility through custom buttons\n• Maintain responsive design across devices\n• Persist collapsed state during session","technicalDesign":"The component uses React hooks for state management and provides a flexible, reusable panel for displaying AI insights. It conditionally loads the marked library for markdown rendering with a fallback to plain text. The panel features a header with title/icon and a button bar with collapse, copy, export, refresh, and optional close/custom buttons. Content area supports scrolling with configurable max height. All interactions provide visual feedback through hover states and transitions. The component integrates with the standard MJ component props (utilities, styles, callbacks) while accepting additional configuration props for customization."}'
SET
  @FunctionalRequirements_76acbd85 = N'Display AI-generated insights with markdown formatting support, provide collapsible interface with double-click and button toggle, support copy to clipboard with visual feedback, enable export to markdown file with timestamp, show loading and error states appropriately, allow refresh/regeneration of insights, support customizable title icon and colors, provide extensibility through custom buttons, maintain responsive design across devices, persist collapsed state during session'
SET
  @TechnicalDesign_76acbd85 = N'The component uses React hooks for state management and provides a flexible reusable panel for displaying AI insights. It conditionally loads the marked library for markdown rendering with a fallback to plain text. The panel features a header with title/icon and a button bar with collapse copy export refresh and optional close/custom buttons. Content area supports scrolling with configurable max height. All interactions provide visual feedback through hover states and transitions. The component integrates with the standard MJ component props while accepting additional configuration props for customization.'
SET
  @FunctionalRequirementsVector_76acbd85 = N'[-0.012225770391523838,0.052288301289081573,-0.023698195815086365,-0.03761351853609085,-0.010423174127936363,-0.013348930515348911,0.042691197246313095,0.027093783020973206,-0.000285039161099121,-0.03353053331375122,-0.005179636646062136,0.08737129718065262,-0.006758536212146282,0.15025703608989716,-0.006869975011795759,-0.0637788400053978,-0.016684487462043762,0.011598625220358372,0.03427712246775627,0.031150737777352333,0.028557443991303444,0.0066782021895051,-0.039103735238313675,0.028260067105293274,0.012778778560459614,-0.03730401769280434,-0.04864129796624184,-0.008312935009598732,-0.02207084372639656,-0.06966779381036758,-0.0746086984872818,0.028317565098404884,-0.054601576179265976,-0.0076815905049443245,0.000002533437282181694,-0.0354326032102108,-0.03413296118378639,0.009906616061925888,0.0007899634656496346,0.014994283206760883,0.032339420169591904,-0.01438377145677805,0.01676213927567005,-0.008462531492114067,-0.0238371342420578,-0.044084515422582626,0.020154358819127083,0.06634119153022766,0.03402329236268997,-0.015951305627822876,-0.0063736289739608765,0.03942699357867241,-0.0003714453487191349,-0.006674913689494133,0.034036505967378616,-0.031743116676807404,-0.011672855354845524,-0.027233723551034927,0.050220634788274765,-0.018850907683372498,0.051203399896621704,0.011037795804440975,-0.022827109321951866,-0.055143486708402634,-0.005862622521817684,0.04803173243999481,0.016733583062887192,-0.11995114386081696,-0.007146159652620554,-0.03678516298532486,0.10097182542085648,-0.028309736400842667,-0.02947014383971691,-0.01631285808980465,0.006506810430437326,0.0368579737842083,-0.05249727889895439,-0.014180954545736313,0.026672882959246635,0.009854321368038654,-0.021322088316082954,0.018013305962085724,-0.02393115870654583,-0.03507588431239128,0.011135035194456577,-0.016342543065547943,-0.007633432280272245,0.010068821720778942,0.012626158073544502,0.03116544336080551,0.055694956332445145,-0.034672148525714874,0.00967399962246418,0.0358344204723835,-0.041150420904159546,-0.044206246733665466,-0.016832826659083366,-0.04708322510123253,-0.003051474690437317,0.058324918150901794,0.08602485060691833,0.04134721681475639,0.047174639999866486,0.018093014135956764,0.034603606909513474,0.03095216676592827,0.030468059703707695,-0.03451986983418465,-0.01492973230779171,-0.006914717610925436,-0.028372542932629585,-0.00979825109243393,-0.025739068165421486,0.05006379634141922,0.03391093388199806,-0.033691905438899994,0.0258841160684824,0.030964534729719162,0.0024079184513539076,0.0369226336479187,0.0405745729804039,0.017886867746710777,-0.007464083377271891,0.02534874528646469,-0.017826944589614868,-0.016976991668343544,-0.047677185386419296,-0.017319567501544952,0.020058665424585342,-0.04613809287548065,0.001392126432619989,0.00649301940575242,0.012390196323394775,0.00911783892661333,-0.027338474988937378,0.003199275815859437,0.007755468133836985,0.008213706314563751,-0.0876154750585556,-0.02055245079100132,0.04541977494955063,-0.0046355086378753185,-0.03625580295920372,-0.010275492444634438,0.0445377454161644,0.02316424436867237,-0.04232697933912277,-0.010528001934289932,0.004300865810364485,-0.0061279525980353355,-0.00209492864087224,-0.011405431665480137,-0.07489944994449615,0.015820512548089027,-0.018086683005094528,0.0013537651393562555,0.0545848123729229,0.052491337060928345,0.0050477827899158,0.017821054905653,0.03862542659044266,-0.02447836473584175,0.026522135362029076,-0.00005123417577124201,-0.004718637093901634,-0.015741290524601936,-0.014748925343155861,0.02623935043811798,-0.0539843887090683,-0.012814145535230637,-0.026195848360657692,-0.027769312262535095,-0.012650003656744957,0.06892390549182892,0.06211615353822708,0.06752844899892807,0.05587127432227135,0.014729336835443974,-0.056100279092788696,-0.028860455378890038,0.05675550177693367,-0.06123116984963417,-0.007460255641490221,0.04768463224172592,0.026731787249445915,-0.015603777021169662,-0.0015244934475049376,0.015079149976372719,0.008715461939573288,-0.030405456200242043,-0.0371854268014431,0.024706244468688965,-0.04644070938229561,0.027205869555473328,0.00938344094902277,-0.00993360299617052,0.02920505404472351,-0.010375076904892921,-0.0017284005880355835,-0.005819971673190594,-0.022648071870207787,-0.05709933862090111,0.056975461542606354,0.03397195413708687,0.05021126940846443,-0.05358855798840523,-0.015619831159710884,-0.034369491040706635,-0.06454434990882874,0.03208908438682556,0.10777602344751358,-0.010065714828670025,-0.025401689112186432,0.028817595914006233,-0.03786919638514519,-0.03968866541981697,0.04372159764170647,-0.018223101273179054,-0.021960873156785965,0.04289738088846207,-0.03573665767908096,0.0013023398350924253,-0.014998079277575016,0.02056245505809784,0.10311800986528397,-0.01874147169291973,0.002783697796985507,-0.00321895070374012,0.03869146853685379,0.05087454617023468,-0.013350745663046837,0.028525983914732933,0.06292259693145752,-0.011658204719424248,-0.023265734314918518,0.023376813158392906,0.03727798908948898,0.07369954138994217,-0.01061109360307455,-0.018358826637268066,0.05473880469799042,0.02274778112769127,0.005933686159551144,0.02042413130402565,-0.0043724533170461655,-0.028619134798645973,0.0784391462802887,0.01919829100370407,-0.0044405716471374035,-0.028116920962929726,-0.02026982419192791,-0.0044072153978049755,0.018268266692757607,-0.0102439746260643,-0.028978627175092697,0.027744067832827568,-0.06945174932479858,-0.03211881220340729,0.01464884914457798,0.08288861811161041,0.041638173162937164,-0.015626335516572,-0.04501289129257202,-0.006370678544044495,0.018371114507317543,-0.018841048702597618,0.06427137553691864,-0.08028458058834076,-0.04644943028688431,-0.0039253681898117065,0.025843869894742966,0.057807568460702896,0.037665851414203644,-0.00022291959612630308,0.025260278955101967,0.0188228078186512,-0.011899036355316639,0.024236265569925308,-0.0009184019872918725,-0.0036271095741540194,0.04503699392080307,0.08051919937133789,-0.03693170100450516,0.01373775489628315,-0.021323464810848236,0.005289895925670862,0.07324638217687607,-0.06629212945699692,0.005394048523157835,0.01667034812271595,0.013241584412753582,0.0055640037171542645,0.030265115201473236,0.004362395964562893,0.0019897769670933485,-0.055318307131528854,-0.07709880918264389,0.07329366356134415,-0.027691898867487907,0.07976458221673965,0.010176312178373337,0.01898261345922947,-0.020964890718460083,0.00804778840392828,-0.0005165039910934865,0.06977865099906921,0.03051355481147766,-0.017388874664902687,0.04652051255106926,-0.01624595746397972,0.03632023558020592,0.03238070011138916,0.012751065194606781,0.057705286890268326,-0.011421369388699532,-0.011828061193227768,0.009350440464913845,-0.012421987019479275,-0.004126713145524263,0.06369755417108536,0.01392210740596056,-0.0589340515434742,0.02034863457083702,-0.031918466091156006,-0.023507701233029366,-0.01953873783349991,-0.04347041994333267,-0.030303308740258217,0.018669208511710167,-0.03365519270300865,0.005448826588690281,-0.005757476203143597,0.001969729783013463,0.01238949317485094,0.004621569532901049,-0.004395694471895695,-0.013508586212992668,-0.013089528307318687,-0.01879429630935192,-0.014696591533720493,-0.03128734976053238,-0.0035983528941869736,0.0405796617269516,-0.002392886206507683,0.011390290223062038,-0.031130628660321236,0.07586564868688583,-0.03431771695613861,-0.03969703987240791,0.00813867338001728,0.07916800677776337,0.04537932202219963,-0.009856834076344967,-0.03284169360995293,0.03785882145166397,-0.012533874250948429,-0.040879927575588226,0.004814798012375832,-0.01184126827865839,0.0002092647919198498,0.017453407868742943,0.049107491970062256,0.028715932741761208,0.0063505712896585464,0.016024742275476456,-0.01205484475940466,0.049631912261247635,0.012207514606416225,-0.0018995029386132956,-0.020805835723876953,0.02926378697156906,-0.030610816553235054,0.0059846811927855015,0.04878208413720131,0.007043733727186918,-0.059830501675605774,0.008017023093998432,-0.03278842568397522,-0.0010008803801611066,0.02452552132308483,0.05003143474459648,0.002587112132459879,0.007293112576007843,0.006935438606888056,0.073748379945755,-0.013828680850565434,-0.04420163482427597,0.015487728640437126,-0.06524139642715454,-0.023488719016313553,-0.03353016451001167,-0.04898429661989212,-0.0026169412303715944,-0.05203663930296898,0.00004114795592613518,-0.0018897365080192685,-0.04264488443732262,0.01225686352699995,-0.040806837379932404,0.032264675945043564,-0.0052290065214037895,-0.07552293688058853,-0.027049049735069275,-0.015604161657392979,0.05604376271367073,0.012013576924800873,0.14221511781215668,0.06035826727747917,-0.005712435580790043,0.022263793274760246,-0.051815081387758255,-0.005313647445291281,0.019405780360102654,-0.06452589482069016,0.006075740326195955,-0.008637205697596073,-0.0022643194533884525,0.007578977383673191,0.06380614638328552,0.05959806218743324,0.02969500981271267,0.015084655024111271,0.036046478897333145,-0.04003145545721054,-0.01883869245648384,-0.05307682231068611,-0.042639512568712234,-0.03567688539624214,0.01292496919631958,0.06493140012025833,-0.005773940123617649,-0.015851644799113274,-0.03802013769745827,0.009644616395235062,-0.06955796480178833,-0.07270462810993195,-0.022967305034399033,0.01684289239346981,-0.02263316884636879,-0.04097229242324829,-0.07783500850200653,0.06595449149608612,0.02662752941250801,0.00019609085575211793,-0.04662759229540825,-0.06220933794975281,0.041266702115535736,-0.01757124438881874,-0.031134262681007385,0.041904617100954056,-0.03027362748980522,-0.0049275183118879795,-0.03308485820889473,0.04797426611185074,-0.011147054843604565,0.0013174060732126236,0.03720548376441002,0.04679742455482483,-0.014653905294835567,-0.00483467523008585,0.07564061135053635,0.028948193415999413,-0.003476232523098588,0.014944813214242458,-0.0072339437901973724,0.028334753587841988,0.029361555352807045,-0.01384082343429327,-0.014374502003192902,-0.02404804714024067,0.07550074905157089,-0.0006890202639624476,-0.021617786958813667,-0.06247851252555847,-0.0500117763876915,-0.028819214552640915,-0.013235491700470448,-0.0022409779485315084,0.004412504844367504,0.013000880368053913,0.04601829871535301,0.004710292909294367,0.018355820327997208,-0.015793779864907265,0.01639472506940365,0.014704575762152672,-0.0342164970934391,-0.009524530731141567,-0.02422601543366909,0.03235121816396713,-0.01954738050699234,0.0016854956047609448,0.020167356356978416,0.1055319756269455,-0.0060035111382603645,-0.06585674732923508,-0.0897381603717804,0.06878112256526947,-0.02802068181335926,0.014911789447069168,0.012253805994987488,0.011680681258440018,-0.05072712153196335,-0.0009548870148137212,-0.017598869279026985,0.011023549363017082,-0.01735420897603035,0.049997638911008835,-0.030479509383440018,-0.011530031450092793,0.04480352625250816,0.023013945668935776,-0.05623910203576088,-0.062125615775585175,-0.01390071026980877,0.06737438589334488,-0.04302816838026047,0.023857036605477333,0.02420084923505783,-0.023603469133377075,-0.005239144898951054,0.01796599291265011,0.00048305359086953104,0.054231416434049606,0.027316970750689507,-0.02484257146716118,0.015337024815380573,-0.002263797679916024,-0.042236097157001495,0.05304213613271713,-0.0798250138759613,0.004635839257389307,-0.01432793214917183,-0.0158245712518692,-0.040901828557252884,0.014185605570673943,0.04938630387187004,0.058849696069955826,-0.02560180053114891,-0.03803426772356033,-0.06076851114630699,-0.0049431840889155865,0.009177163243293762,0.0010179629316553473,-0.007428166922181845,-0.018117062747478485,-0.029503826051950455,0.005521208513528109,0.03370583802461624,-0.023664044216275215,-0.02299186773598194,-0.038678430020809174,-0.11961119621992111,0.004310435149818659,-0.023635096848011017,-7.050997151896098e-33,-0.034458182752132416,-0.03297857195138931,-0.04357856884598732,-0.012378223240375519,-0.016115693375468254,-0.02510805055499077,-0.035555649548769,0.015010700561106205,-0.014883587136864662,0.01763664186000824,-0.015503020025789738,-0.057944461703300476,0.0118565009906888,-0.00871696975082159,0.023223666474223137,0.007792959921061993,0.02438812330365181,-0.010284957475960255,-0.01702476292848587,0.05059367045760155,0.008115071803331375,0.003064204938709736,-0.02851022221148014,-0.060801245272159576,-0.0020958713721483946,0.004675103817135096,0.02426048368215561,-0.020634016022086143,-0.004007273819297552,0.019716262817382812,-0.011030193418264389,-0.024801043793559074,0.0014951686607673764,0.021603573113679886,-0.016126831993460655,0.0453619547188282,-0.017814109101891518,-0.028164027258753777,0.0020164342131465673,0.0020335973240435123,-0.022868791595101357,-0.012912312522530556,0.03647632151842117,0.0027890163473784924,-0.005066318437457085,0.010749551467597485,0.014042641036212444,-0.010295776650309563,0.006380143109709024,-0.07991332560777664,-0.043442003428936005,0.005872341804206371,-0.01486153993755579,0.0452875979244709,-0.006936888676136732,0.061744507402181625,0.024225546047091484,0.008461046032607555,-0.07753001153469086,-0.011629898101091385,-0.01016791258007288,0.022461703047156334,0.04417053237557411,0.025790199637413025,0.03146734461188316,0.01080101728439331,-0.018791325390338898,-0.031466878950595856,-0.05778627470135689,0.016531504690647125,0.02696126140654087,0.02543751150369644,0.06600445508956909,-0.06692519783973694,-0.04731694981455803,0.019419033080339432,0.03619585558772087,0.022922832518815994,0.03344449773430824,0.04869433864951134,0.004593915306031704,0.02502613514661789,-0.02554379403591156,0.011362464167177677,0.05778176710009575,-0.051097456365823746,-0.045343995094299316,-0.01711391843855381,0.019539931789040565,-0.007720679976046085,-0.054677508771419525,0.02894332818686962,-0.037246767431497574,0.011623242869973183,0.01503667887300253,-0.018662242218852043,0.02833528071641922,0.03338529169559479,-0.02554306946694851,-0.06324119865894318,-0.0020732202101498842,0.03990621492266655,-0.06513027101755142,0.01862550899386406,0.052926696836948395,-0.04004931449890137,-0.018898090347647667,0.0427062027156353,-0.04941084235906601,-0.01974533498287201,-0.006703019142150879,0.04581919312477112,0.017352569848299026,-0.11352763324975967,-0.009411068633198738,-0.04561289772391319,-0.012169871479272842,0.01665852591395378,0.0061757988296449184,0.018444431945681572,0.03511921688914299,0.009826317429542542,0.014271740801632404,-0.059851743280887604,0.01596810668706894,-0.03769512102007866,-0.0253005251288414,0.0029058465734124184,0.0310632586479187,0.0031077268067747355,-0.027841215953230858,0.018689554184675217,3.2114920145431824e-7,0.010748859494924545,0.04048451781272888,-0.013252448290586472,-0.008244441822171211,0.04554425925016403,0.013213500380516052,-0.02286543697118759,-0.029694192111492157,0.0035695794504135847,-0.016308972612023354,0.016239657998085022,0.025897474959492683,0.030970288440585136,0.0844055563211441,0.006982422433793545,-0.06484297662973404,0.036242660135030746,-0.05740673094987869,-0.051614195108413696,0.004604977089911699,0.07740507274866104,-0.012252933345735073,0.03569183126091957,0.03589658439159393,0.03861115872859955,-0.014361721463501453,-0.03999437019228935,-0.019892312586307526,0.04046459123492241,0.02039414271712303,-0.010443754494190216,0.040971387177705765,-0.042030222713947296,-0.06832703202962875,-0.018368758261203766,-0.027798950672149658,-0.02565874718129635,0.04006221145391464,0.018219780176877975,0.02139333076775074,0.02042750082910061,-0.08066828548908234,0.01902620680630207,-0.05610416457056999,0.050248291343450546,-0.02654006890952587,-0.01567237637937069,-0.014112114906311035,-0.03476123884320259,-0.013935876078903675,-0.003234382253140211,-0.010120894759893417,0.02322390489280224,-0.004406521562486887,-0.025799507275223732,-0.013030240312218666,-0.03952696546912193,0.0174570269882679,0.002644471824169159,-0.023108160123229027,-0.01925380527973175,-0.013396711088716984,-0.01798584684729576,0.020543521270155907,-0.0034402641467750072,-0.047936927527189255,-0.02175597846508026,3.6143572244980788e-34,-0.01758079044520855,0.014391904696822166,0.01256275363266468,0.024154823273420334,0.04061635211110115,-0.003021880518645048,0.00728748319670558,-0.03166254982352257,0.04366227239370346,-0.06215865910053253,-0.010101680643856525]'
SET
  @TechnicalDesignVector_76acbd85 = N'[-0.04355240613222122,-0.026075152680277824,-0.0013087427942082286,-0.08555308729410172,-0.022951826453208923,-0.04744209721684456,0.03771546110510826,0.07351572066545486,0.03244924172759056,-0.027221107855439186,-0.0053596156649291515,0.06608090549707413,0.05582832172513008,0.13546568155288696,0.013321940787136555,-0.03997472673654556,-0.0071859415620565414,0.05464719235897064,-0.007643301505595446,0.032018132507801056,0.035357337445020676,-0.012552154250442982,-0.052688177675008774,0.016729282215237617,-0.033927418291568756,-0.043244827538728714,-0.05541938170790672,-0.030124882236123085,0.04837356135249138,-0.012817737646400928,0.00635620066896081,0.02496146783232689,-0.03529061749577522,0.02608819492161274,0.0000024137266336765606,-0.00768183683976531,0.023012055084109306,0.014071358367800713,0.02690764330327511,-0.02240952104330063,0.017947958782315254,-0.013821889646351337,0.013209717348217964,0.00807602796703577,0.016214804723858833,-0.09072592854499817,0.01447139773517847,0.020776493474841118,0.05704513564705849,-0.005136464722454548,0.01262592151761055,0.032172828912734985,0.022010652348399162,0.016381781548261642,0.03538885340094566,0.01334812119603157,0.026946794241666794,-0.018427273258566856,0.051725465804338455,-0.04440432786941528,0.006444993428885937,-0.011413383297622204,-0.00787759106606245,-0.06306323409080505,0.0068708970211446285,0.031693048775196075,0.07756460458040237,-0.06384920328855515,-0.00525624817237258,-0.005329717416316271,0.13037323951721191,-0.014296004548668861,0.005943410564213991,-0.05028507485985756,0.017812121659517288,0.04715413227677345,-0.02898668311536312,-0.03225468844175339,-0.02060495875775814,-0.01260882057249546,-0.0025980889331549406,-0.014004250057041645,-0.02874181605875492,-0.04651342332363129,0.01975470408797264,0.03614407405257225,0.004525615368038416,0.00022268282191362232,-0.03926360607147217,0.02041376754641533,0.10622774809598923,-0.025180324912071228,0.028364211320877075,0.036555103957653046,0.002682389924302697,0.028608975932002068,0.004297289531677961,-0.15342959761619568,-0.012522893957793713,-0.015689007937908173,0.02369830198585987,0.030374698340892792,0.008539119735360146,0.03922556713223457,0.06593959778547287,0.066466324031353,-0.007707016076892614,-0.04286317527294159,0.020219171419739723,0.008674360811710358,-0.0012290725717321038,-0.030704675242304802,-0.004183245822787285,0.0381631925702095,-0.03132511302828789,-0.02820616401731968,-0.00407634861767292,0.005528885871171951,-0.026709124445915222,0.025582674890756607,0.04862995073199272,-0.02724583074450493,-0.010380107909440994,-0.021059297025203705,-0.03951415792107582,0.0692245289683342,-0.003937213681638241,-0.061503056436777115,0.0073182666674256325,-0.004172805696725845,-0.0014264056226238608,0.005232835188508034,0.012482217513024807,0.0036695082671940327,-0.039304863661527634,0.006024565082043409,0.000697445182595402,0.023374974727630615,-0.011120573617517948,0.027449501678347588,-0.0005807995912618935,0.010969293303787708,-0.031091680750250816,0.04328106716275215,0.00733171496540308,0.008084564469754696,-0.003547558095306158,-0.08245932310819626,0.003036237321794033,0.04001615568995476,0.036833398044109344,-0.038784224539995193,-0.027915064245462418,-0.0009876055410131812,-0.0485110767185688,0.016546322032809258,-0.008608990348875523,0.009945564903318882,-0.006498388946056366,0.06811720877885818,0.029675010591745377,-0.025510720908641815,0.0818001851439476,0.016514915972948074,-0.026151200756430626,-0.03178025782108307,-0.0744551345705986,-0.011468244716525078,-0.05831208452582359,-0.005285003688186407,-0.027817435562610626,-0.07879994809627533,0.0022418058943003416,0.03743089362978935,0.021675247699022293,-0.012400374747812748,0.01764783449470997,0.02494121715426445,-0.05376958101987839,0.04061906412243843,0.06336203962564468,-0.057986777275800705,0.008014037273824215,0.0742085799574852,-0.014630790799856186,-0.02119494415819645,-0.05061211436986923,0.027599064633250237,0.0006819349946454167,-0.04871826618909836,-0.028413474559783936,-0.002665832871571183,-0.0527786947786808,0.03415922820568085,0.01860620640218258,-0.006477657239884138,-0.029062699526548386,-0.039927173405885696,0.034545641392469406,0.007014226168394089,-0.0103671345859766,-0.0005226286011748016,0.04988427460193634,0.06664852052927017,0.04263290762901306,-0.05486651137471199,0.01260286197066307,-0.018827026709914207,-0.024765918031334877,0.033864568918943405,0.06163853406906128,-0.0026460520457476377,0.0036097767297178507,0.0305485837161541,-0.042665887624025345,-0.03115933947265148,0.041542258113622665,0.027334166690707207,-0.0714663416147232,0.016280103474855423,-0.034441009163856506,0.037750426679849625,0.03877401351928711,0.033291108906269073,0.10633441060781479,-0.0013830566313117743,-0.0071500325575470924,-0.0005109424819238484,0.02495500259101391,0.01752823032438755,0.0021135718561708927,-0.019227925688028336,0.01968366652727127,0.016246670857071877,-0.01802036166191101,0.009448292665183544,0.022657550871372223,0.027705088257789612,0.005114767700433731,-0.0027700336650013924,0.028292341157794,0.030601760372519493,-0.02469833381474018,0.002972750458866358,0.01235036738216877,-0.024001451209187508,0.0030000475235283375,0.050935134291648865,-0.029707245528697968,-0.05156198516488075,-0.01486190501600504,0.02014937996864319,0.010528271086513996,-0.020594093948602676,-0.017153386026620865,-0.043106697499752045,0.007761355023831129,-0.01687435992062092,0.018116435036063194,0.009288735687732697,-0.0164533369243145,0.00008960279956227168,-0.016639428213238716,-0.017336871474981308,-0.005471549462527037,0.012425928376615047,0.06714776903390884,0.010549118742346764,-0.021535724401474,-0.007977031171321869,0.015085596591234207,0.02248632349073887,0.012218900956213474,-0.017077500000596046,-0.009097563102841377,0.008212336339056492,0.007117670029401779,0.002752946689724922,-0.025207092985510826,-0.011851679533720016,0.027999520301818848,0.025166193023324013,0.0029630791395902634,0.015406421385705471,-0.002694547874853015,0.008775473572313786,0.04380432888865471,-0.06787313520908356,0.004348272457718849,-0.01941797509789467,-0.000432447821367532,-0.022106623277068138,-0.0018462793668732047,-0.022186456248164177,0.0024293996393680573,-0.016095120459794998,-0.03382190316915512,0.06713151931762695,-0.04075252637267113,0.0361643061041832,0.031648267060518265,0.005393269006162882,-0.018936123698949814,0.019483989104628563,0.01361869927495718,0.08112003654241562,-0.02187449485063553,0.023684829473495483,0.05070452764630318,0.026590971276164055,-0.020216863602399826,0.02808796986937523,0.0000070366977524827234,0.014060364104807377,-0.002540197689086199,0.04826439544558525,0.01635509356856346,-0.0022239999379962683,-0.029662905260920525,0.05769694596529007,0.02378237061202526,-0.0381728820502758,0.019419733434915543,-0.04179059714078903,-0.04747834801673889,0.03269924595952034,0.01188324298709631,-0.0330522283911705,0.030803756788372993,-0.010231323540210724,-0.032529160380363464,-0.02894534170627594,0.010908960364758968,0.03712750971317291,0.05710823833942413,-0.0074426219798624516,-0.016153931617736816,-0.0440373532474041,-0.01769835315644741,-0.01438930630683899,-0.03121112287044525,-0.009451920166611671,0.008052431046962738,0.08017504960298538,-0.016956891864538193,-0.06672192364931107,0.021050794050097466,-0.011026003398001194,-0.06565026938915253,0.0373687818646431,0.06533617526292801,0.05766145884990692,-0.005576818250119686,0.0017598698614165187,0.008765972219407558,-0.004893842153251171,-0.011525798588991165,-0.0061205425299704075,0.0004927128902636468,0.023335279896855354,-0.009044025093317032,0.036203932017087936,0.0011004299158230424,-0.036685116589069366,0.004641133826225996,-0.011201143264770508,0.06467282772064209,0.029628975316882133,0.00925812590867281,-0.010292652063071728,0.015511096455156803,-0.04170561581850052,0.03557301312685013,0.004006511531770229,-0.00739705003798008,-0.07587669044733047,-0.00825502909719944,-0.014325959607958794,0.0014728326350450516,0.034374985843896866,0.07826805859804153,-0.024534014984965324,0.023809868842363358,-0.014790787361562252,0.06655445694923401,-0.009241295978426933,-0.011447039432823658,0.040845077484846115,-0.010306140407919884,0.01015842892229557,-0.03608512505888939,-0.060142792761325836,-0.02162168174982071,-0.03287344425916672,0.038338255137205124,0.006365333218127489,-0.022954314947128296,0.003888188861310482,0.008636200800538063,0.017455587163567543,-0.025592178106307983,0.03228900209069252,-0.005356122739613056,-0.07357455044984818,0.10916726291179657,0.033884964883327484,-0.0067947800271213055,0.029002809897065163,0.013123612850904465,0.019176974892616272,-0.017065489664673805,-0.054814886301755905,0.005030715372413397,-0.0756622850894928,-0.06278011202812195,0.00581235159188509,-0.02172229066491127,-0.09312961250543594,0.02017092891037464,0.0949682891368866,0.03034510836005211,0.012909852899610996,0.03303242102265358,-0.0517880879342556,0.022096926346421242,-0.03466679900884628,-0.062385741621255875,-0.046550121158361435,-0.0027516204863786697,0.0548681914806366,0.0016003279015421867,-0.03576597571372986,-0.024015767499804497,-0.023211687803268433,-0.03535380959510803,-0.05042823776602745,-0.060048725455999374,-0.014398051425814629,-0.0003068684018217027,-0.032360371202230453,-0.0012075925478711724,0.028201203793287277,0.04165574535727501,-0.00858868844807148,-0.034235887229442596,-0.09704025089740753,0.03560153767466545,0.010657715611159801,0.0025628048460930586,0.01463382225483656,-0.015334220603108406,0.023816175758838654,-0.0472312793135643,0.059721410274505615,-0.061900801956653595,-0.0567520335316658,0.0085832504555583,0.06581084430217743,-0.017503025010228157,0.017032435163855553,0.048688311129808426,0.007596928160637617,-0.013883567415177822,0.007772156968712807,-0.014297773130238056,-0.025505689904093742,0.037494927644729614,-0.04808829352259636,-0.012806080281734467,-0.013440320268273354,0.0136893130838871,-0.011775536462664604,-0.03893640264868736,-0.049761928617954254,-0.035440340638160706,0.001228861976414919,0.0018847761675715446,0.03494487702846527,-0.03513290360569954,0.0017576523823663592,0.04424204304814339,-0.04561947286128998,-0.019188687205314636,-0.01701635681092739,0.016101393848657608,0.02815355360507965,0.00012467695341911167,-0.006567661184817553,-0.027129217982292175,0.01635999046266079,-0.004131673369556665,-0.04453514143824577,0.017288077622652054,0.12462150305509567,0.05866112932562828,0.03508402779698372,-0.045298848301172256,0.09348943829536438,-0.10021349042654037,0.03767906501889229,-0.016386859118938446,-0.005986085627228022,-0.009082374162971973,-0.002938152989372611,-0.024751467630267143,0.02145983651280403,-0.0140737509354949,0.03634149953722954,-0.010286514647305012,-0.04607377201318741,-0.022224362939596176,0.012746398337185383,-0.03639886900782585,0.020942308008670807,-0.004515320528298616,0.15338283777236938,-0.025585470721125603,0.06302294880151749,0.050699274986982346,-0.02328740619122982,0.0043170214630663395,0.03485274314880371,-0.017657404765486717,0.022627800703048706,0.02379203774034977,-0.002802904462441802,0.03769586607813835,0.031246446073055267,-0.02053310163319111,0.007794388569891453,-0.009267101064324379,-0.015180764719843864,0.02313591167330742,-0.018320661038160324,-0.001445692963898182,0.027034061029553413,0.015960926190018654,0.08108169585466385,-0.010251217521727085,-0.05476045981049538,-0.09436666965484619,0.0146421417593956,0.0039285398088395596,0.021921731531620026,-0.013519358821213245,-0.041380781680345535,-0.013006404042243958,-0.03268065303564072,0.04723307490348816,-0.0016288155457004905,0.013426338322460651,-0.01419292762875557,-0.09411168843507767,0.04427560046315193,0.005283948499709368,-6.674697900310867e-33,-0.04286659136414528,-0.023694755509495735,-0.009304560720920563,0.028268542140722275,-0.040945686399936676,-0.026211010292172432,-0.030865401029586792,-0.03006271831691265,-0.006987670436501503,-0.0028851160313934088,-0.029349153861403465,-0.05471846088767052,0.0007906017708592117,0.00199911929666996,-0.029613280668854713,0.02083209529519081,0.02390626259148121,0.026845885440707207,-0.013616647571325302,0.05126366764307022,-0.0110772168263793,0.004451341927051544,0.009452151134610176,-0.03908426687121391,-0.04015553742647171,-0.0331917405128479,0.0420088991522789,-0.014288077130913734,-0.04486880451440811,0.015777379274368286,-0.0048951380886137486,0.022205019369721413,-0.006694843526929617,0.025676479563117027,0.030464813113212585,0.05170704051852226,-0.03665084019303322,-0.03691316395998001,0.015282711014151573,0.050244156271219254,0.06309347599744797,-0.00995591003447771,0.02331279031932354,0.01806105300784111,-0.014359365217387676,0.027941858395934105,0.04188043996691704,-0.021165551617741585,-0.023915505036711693,-0.05803445726633072,0.015094760805368423,0.017171325162053108,-0.04208284616470337,0.027749570086598396,-0.015774741768836975,0.031198354437947273,0.058554507791996,0.04291761666536331,-0.05473383888602257,-0.03874494880437851,-0.04818294197320938,0.0050895181484520435,0.037793200463056564,0.05186578631401062,0.07729502022266388,0.0171420369297266,0.012805294245481491,0.02489461377263069,-0.0846148282289505,0.022856084629893303,0.03740142285823822,-0.03504212945699692,0.07375805824995041,0.009385772980749607,0.01681654527783394,-0.008886277675628662,0.02462637610733509,-0.004008150193840265,0.08049561083316803,0.07386387139558792,-0.004158583004027605,0.045752231031656265,-0.022092429921030998,0.01589546538889408,-0.0006505316123366356,-0.03647526726126671,0.014003708958625793,-0.030372096225619316,-0.010852416045963764,0.02540096826851368,-0.005729218479245901,-0.0025846746284514666,-0.04725920036435127,0.02409213036298752,0.02953326888382435,-0.007583620958030224,0.029633766040205956,0.051468376070261,-0.022559262812137604,-0.07675977051258087,0.00783699844032526,-0.0007142392569221556,-0.035529568791389465,-0.014361879788339138,-0.011682924814522266,-0.02944941259920597,-0.05289793759584427,0.008273452520370483,-0.03446193411946297,0.01263202354311943,-0.0035347642842680216,-0.009523219428956509,0.017891278490424156,-0.05038781091570854,0.008513912558555603,-0.028207292780280113,-0.01943483203649521,-0.0071879904717206955,0.007515717763453722,0.030589448288083076,0.022583624348044395,-0.029478488489985466,-0.042339589446783066,-0.02802441082894802,0.016071708872914314,-0.028532173484563828,-0.042103201150894165,0.05934155732393265,0.00032431655563414097,-0.043128788471221924,-0.011829660274088383,0.021097226068377495,3.276138613728108e-7,-0.01868448033928871,0.01813453994691372,0.002762989141047001,-0.04050147905945778,0.039856161922216415,-0.025681423023343086,-0.030789708718657494,-0.06089380010962486,-0.01581619866192341,-0.066337950527668,0.013119932264089584,-0.0006396004464477301,0.04280097782611847,0.028606833890080452,-0.00638697249814868,0.02030913159251213,-0.015454218722879887,-0.04970536753535271,-0.05653439834713936,0.02568742260336876,0.017054997384548187,-0.04383508861064911,0.03691040351986885,0.0069241649471223354,0.05181596800684929,0.027747679501771927,-0.017464715987443924,0.048763174563646317,0.05896922945976257,-0.007283375132828951,0.019550958648324013,0.02150193229317665,-0.04576839506626129,-0.05746307969093323,0.02695956453680992,-0.01816842518746853,-0.03450019285082817,0.03671994432806969,0.009382196702063084,0.05622759833931923,0.024983853101730347,0.043445318937301636,-0.023956356570124626,-0.003804172854870558,0.025908853858709335,-0.0042057824321091175,-0.0033065483439713717,-0.021704813465476036,-0.05215444415807724,-0.03186170011758804,-0.022925909608602524,0.013539315201342106,0.027415504679083824,-0.007001233287155628,-0.016922658309340477,-0.06010179966688156,-0.0342947281897068,0.027430690824985504,-0.013783239759504795,-0.07008329033851624,-0.03674555569887161,-0.015723465010523796,-0.06092696636915207,-0.04809598624706268,-0.028002580627799034,-0.021918678656220436,-0.04628017544746399,3.3746153812366136e-34,-0.007609191816300154,-0.03764404356479645,-0.027560008689761162,0.03236515447497368,0.012458828277885914,0.0009475266560912132,0.03350285068154335,0.0002450040483381599,0.020420627668499947,-0.03894634544849396,0.00007628128514625132]'
SET
  @HasCustomProps_76acbd85 = 0
SET
  @HasCustomEvents_76acbd85 = 0
SET
  @RequiresData_76acbd85 = 0
SET
  @DependencyCount_76acbd85 = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_76acbd85 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_76acbd85 = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_76acbd85 = 0
SET
  @ID_76acbd85 = '89F60F0B-31C3-4676-B6DD-F3D2258C416A'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_76acbd85,
  @Name = @Name_76acbd85,
  @Version = @Version_76acbd85,
  @VersionSequence = @VersionSequence_76acbd85,
  @Title = @Title_76acbd85,
  @Description = @Description_76acbd85,
  @Type = @Type_76acbd85,
  @Status = @Status_76acbd85,
  @DeveloperName = @DeveloperName_76acbd85,
  @DeveloperEmail = @DeveloperEmail_76acbd85,
  @DeveloperOrganization = @DeveloperOrganization_76acbd85,
  @SourceRegistryID = @SourceRegistryID_76acbd85,
  @ReplicatedAt = @ReplicatedAt_76acbd85,
  @LastSyncedAt = @LastSyncedAt_76acbd85,
  @Specification = @Specification_76acbd85,
  @FunctionalRequirements = @FunctionalRequirements_76acbd85,
  @TechnicalDesign = @TechnicalDesign_76acbd85,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_76acbd85,
  @TechnicalDesignVector = @TechnicalDesignVector_76acbd85,
  @HasCustomProps = @HasCustomProps_76acbd85,
  @HasCustomEvents = @HasCustomEvents_76acbd85,
  @RequiresData = @RequiresData_76acbd85,
  @DependencyCount = @DependencyCount_76acbd85,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_76acbd85,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_76acbd85,
  @HasRequiredCustomProps = @HasRequiredCustomProps_76acbd85,
  @ID = @ID_76acbd85;

-- Save MJ: Components (core SP call only)
DECLARE @Namespace_5b80318f NVARCHAR(MAX),
@Name_5b80318f NVARCHAR(500),
@Version_5b80318f NVARCHAR(50),
@VersionSequence_5b80318f INT,
@Title_5b80318f NVARCHAR(1000),
@Description_5b80318f NVARCHAR(MAX),
@Type_5b80318f NVARCHAR(255),
@Status_5b80318f NVARCHAR(50),
@DeveloperName_5b80318f NVARCHAR(255),
@DeveloperEmail_5b80318f NVARCHAR(255),
@DeveloperOrganization_5b80318f NVARCHAR(255),
@SourceRegistryID_5b80318f UNIQUEIDENTIFIER,
@ReplicatedAt_5b80318f DATETIMEOFFSET,
@LastSyncedAt_5b80318f DATETIMEOFFSET,
@Specification_5b80318f NVARCHAR(MAX),
@FunctionalRequirements_5b80318f NVARCHAR(MAX),
@TechnicalDesign_5b80318f NVARCHAR(MAX),
@FunctionalRequirementsVector_5b80318f NVARCHAR(MAX),
@TechnicalDesignVector_5b80318f NVARCHAR(MAX),
@HasCustomProps_5b80318f BIT,
@HasCustomEvents_5b80318f BIT,
@RequiresData_5b80318f BIT,
@DependencyCount_5b80318f INT,
@TechnicalDesignVectorEmbeddingModelID_5b80318f NVARCHAR(MAX),
@FunctionalRequirementsVectorEmbeddingModelID_5b80318f NVARCHAR(MAX),
@HasRequiredCustomProps_5b80318f BIT,
@ID_5b80318f UNIQUEIDENTIFIER
SET
  @Namespace_5b80318f = N'Generic/UI/Export'
SET
  @Name_5b80318f = N'DataExportPanel'
SET
  @Version_5b80318f = N'1.0.0'
SET
  @VersionSequence_5b80318f = 1
SET
  @Title_5b80318f = N'Data Export Panel'
SET
  @Description_5b80318f = N'Reusable component for exporting data to CSV, Excel (XLSX), and PDF formats with optional UI'
SET
  @Type_5b80318f = N'Widget'
SET
  @Status_5b80318f = N'Published'
SET
  @Specification_5b80318f = N'{"name":"DataExportPanel","namespace":"Generic/UI/Export","location":"embedded","code":"function DataExportPanel({ \n  mode = ''ui'',\n  data = [],\n  columns = [],\n  filename = ''export'',\n  formats = [''csv'', ''excel'', ''pdf''],\n  position = ''inline'',\n  buttonStyle = ''dropdown'',\n  buttonText = ''Export'',\n  icon = ''fa-download'',\n  showPreview = false,\n  allowColumnSelection = true,\n  includeHeaders = true,\n  dateFormat = ''YYYY-MM-DD'',\n  numberFormat = { decimals: 2, thousandsSeparator: '','', decimalSeparator: ''.'' },\n  pdfOptions = { orientation: ''portrait'', pageSize: ''a4'', margins: { top: 40, bottom: 40, left: 40, right: 40 } },\n  excelOptions = { sheetName: ''Data'', includeFilters: true, autoWidth: true },\n  getHtmlElement = null,  // Function to get element at export time\n  aiInsightsText = null,  // Raw markdown text for AI insights\n  onExportStart = () => {},\n  onExportComplete = () => {},\n  onExportError = () => {},\n  customStyles = {},\n  visible = true,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n  const [isExporting, setIsExporting] = React.useState(false);\n  const [exportProgress, setExportProgress] = React.useState(0);\n  \n  // Validate and normalize columns on initialization\n  const validateColumns = (cols) => {\n    if (!cols || cols.length === 0) {\n      console.warn(''⚠️ [DataExportPanel] No columns provided for export'');\n      return [];\n    }\n    \n    return cols.map((col, index) => {\n      // Check for required properties\n      if (!col.key && !col.field) {\n        console.warn(`⚠️ [DataExportPanel] Column at index $' + '{index} missing ''key'' property. Expected format: { key: ''fieldName'', label: ''Display Name'' }. Got:`, col);\n      }\n      if (!col.label && !col.header && !col.name) {\n        console.warn(`⚠️ [DataExportPanel] Column at index $' + '{index} missing ''label'' property. Will fallback to key/field value.`);\n      }\n      \n      const key = col.key || col.field;\n      const label = col.label || col.header || col.name || key;\n      \n      if (!key) {\n        console.error(`❌ [DataExportPanel] Column at index $' + '{index} has no valid key identifier. This will cause export to fail. Column:`, col);\n      }\n      \n      return {\n        ...col,\n        key: key,\n        label: label,\n        selected: true\n      };\n    });\n  };\n  \n  const [selectedColumns, setSelectedColumns] = React.useState(\n    validateColumns(columns)\n  );\n  const [showColumnSelector, setShowColumnSelector] = React.useState(false);\n  const [showPreviewDialog, setShowPreviewDialog] = React.useState(false);\n  const [previewFormat, setPreviewFormat] = React.useState(null);\n  \n  const exportRef = React.useRef(null);\n  const dropdownRef = React.useRef(null);\n  \n  // Re-validate columns if they change\n  React.useEffect(() => {\n    setSelectedColumns(validateColumns(columns));\n  }, [columns]);\n  \n  // Merge default styles with custom styles\n  const panelStyles = {\n    container: {\n      position: position === ''floating'' ? ''fixed'' : ''relative'',\n      display: position === ''inline'' ? ''inline-block'' : ''block'',\n      ...customStyles.container\n    },\n    button: {\n      padding: ''8px 16px'',\n      backgroundColor: styles?.colors?.primary || ''#3B82F6'',\n      color: ''white'',\n      border: ''none'',\n      borderRadius: ''6px'',\n      cursor: ''pointer'',\n      display: ''flex'',\n      alignItems: ''center'',\n      gap: ''8px'',\n      fontSize: ''14px'',\n      fontWeight: ''500'',\n      transition: ''all 0.2s'',\n      ...customStyles.button\n    },\n    dropdown: {\n      position: ''absolute'',\n      top: ''100%'',\n      right: 0,\n      marginTop: ''4px'',\n      backgroundColor: ''white'',\n      border: ''1px solid #E5E7EB'',\n      borderRadius: ''8px'',\n      boxShadow: ''0 4px 6px rgba(0, 0, 0, 0.1)'',\n      zIndex: 1000,\n      minWidth: ''200px'',\n      ...customStyles.dropdown\n    },\n    dropdownItem: {\n      padding: ''10px 16px'',\n      cursor: ''pointer'',\n      display: ''flex'',\n      alignItems: ''center'',\n      gap: ''10px'',\n      fontSize: ''14px'',\n      transition: ''background-color 0.15s'',\n      borderBottom: ''1px solid #F3F4F6'',\n      ...customStyles.dropdownItem\n    },\n    progressBar: {\n      position: ''absolute'',\n      bottom: 0,\n      left: 0,\n      right: 0,\n      height: ''3px'',\n      backgroundColor: ''#E5E7EB'',\n      borderRadius: ''0 0 6px 6px'',\n      overflow: ''hidden'',\n      ...customStyles.progressBar\n    },\n    progressFill: {\n      height: ''100%'',\n      backgroundColor: styles?.colors?.success || ''#10B981'',\n      transition: ''width 0.3s ease'',\n      ...customStyles.progressFill\n    }\n  };\n  \n  // Format value based on type\n  const formatValue = (value, type) => {\n    if (value == null) return '''';\n    \n    if (type === ''date'' && dayjs) {\n      return dayjs(value).format(dateFormat);\n    }\n    \n    if (type === ''number'' && numberFormat) {\n      const num = parseFloat(value);\n      if (!isNaN(num)) {\n        const parts = num.toFixed(numberFormat.decimals).split(''.'');\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, numberFormat.thousandsSeparator);\n        return parts.join(numberFormat.decimalSeparator);\n      }\n    }\n    \n    if (type === ''currency'' && numberFormat) {\n      const num = parseFloat(value);\n      if (!isNaN(num)) {\n        const formatted = formatValue(num, ''number'');\n        return `$$' + '{formatted}`;\n      }\n    }\n    \n    return String(value);\n  };\n  \n  // Prepare data for export\n  const prepareData = () => {\n    const activeColumns = allowColumnSelection \n      ? selectedColumns.filter(col => col.selected)\n      : selectedColumns; // Use validated selectedColumns instead of raw columns\n      \n    if (!data || data.length === 0) {\n      console.warn(''⚠️ [DataExportPanel] No data to export'');\n      return { headers: [], rows: [] };\n    }\n    \n    // Validate data structure\n    if (data.length > 0) {\n      const sampleRow = data[0];\n      activeColumns.forEach(col => {\n        if (!(col.key in sampleRow)) {\n          console.warn(`⚠️ [DataExportPanel] Data missing key ''$' + '{col.key}'' that was defined in columns. First row keys:`, Object.keys(sampleRow));\n        }\n      });\n    }\n    \n    const headers = activeColumns.map(col => col.label || col.key);\n    const rows = data.map((row, rowIndex) => \n      activeColumns.map(col => {\n        if (!(col.key in row) && rowIndex === 0) {\n          console.warn(`⚠️ [DataExportPanel] Row $' + '{rowIndex} missing value for key ''$' + '{col.key}''`);\n        }\n        return formatValue(row[col.key], col.type);\n      })\n    );\n    \n    console.log(`✅ [DataExportPanel] Prepared $' + '{rows.length} rows with $' + '{headers.length} columns for export`);\n    \n    return { headers, rows };\n  };\n  \n  // Export to CSV\n  const exportToCSV = async () => {\n    try {\n      setIsExporting(true);\n      setExportProgress(10);\n      onExportStart(''csv'');\n      \n      const { headers, rows } = prepareData();\n      setExportProgress(30);\n      \n      // Build CSV content\n      let csvContent = '''';\n      \n      if (includeHeaders) {\n        csvContent += headers.map(h => `\"$' + '{h}\"`).join('','') + ''\\n'';\n      }\n      \n      setExportProgress(50);\n      \n      // Process rows in chunks for large datasets\n      const chunkSize = 1000;\n      for (let i = 0; i < rows.length; i += chunkSize) {\n        const chunk = rows.slice(i, i + chunkSize);\n        csvContent += chunk.map(row => \n          row.map(cell => `\"$' + '{cell.replace(/\"/g, ''\"\"'')}\"`).join('','')\n        ).join(''\\n'');\n        \n        if (i + chunkSize < rows.length) {\n          csvContent += ''\\n'';\n        }\n        \n        setExportProgress(50 + (i / rows.length) * 40);\n      }\n      \n      setExportProgress(90);\n      \n      // Create and download file\n      const blob = new Blob([csvContent], { type: ''text/csv;charset=utf-8;'' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(''a'');\n      link.href = url;\n      link.download = `$' + '{filename}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      \n      setExportProgress(100);\n      onExportComplete(''csv'', `$' + '{filename}.csv`);\n      \n      setTimeout(() => {\n        setIsExporting(false);\n        setExportProgress(0);\n      }, 500);\n      \n    } catch (error) {\n      console.error(''CSV export failed:'', error);\n      onExportError(error);\n      setIsExporting(false);\n      setExportProgress(0);\n    }\n  };\n  \n  // Export to Excel\n  const exportToExcel = async () => {\n    try {\n      setIsExporting(true);\n      setExportProgress(10);\n      onExportStart(''excel'');\n      \n      const { headers, rows } = prepareData();\n      setExportProgress(30);\n      \n      // Create workbook and worksheet\n      const wb = XLSX.utils.book_new();\n      \n      // Combine headers and rows\n      const worksheetData = includeHeaders ? [headers, ...rows] : rows;\n      setExportProgress(50);\n      \n      const ws = XLSX.utils.aoa_to_sheet(worksheetData);\n      \n      // Apply column widths if autoWidth is enabled\n      if (excelOptions.autoWidth && selectedColumns) {\n        const colWidths = selectedColumns\n          .filter(col => !allowColumnSelection || col.selected)\n          .map(col => ({ wch: col.width ? col.width / 7 : 15 }));\n        ws[''!cols''] = colWidths;\n      }\n      \n      setExportProgress(70);\n      \n      // Add filters if enabled\n      if (excelOptions.includeFilters && includeHeaders) {\n        ws[''!autofilter''] = { \n          ref: XLSX.utils.encode_range({\n            s: { r: 0, c: 0 },\n            e: { r: worksheetData.length - 1, c: headers.length - 1 }\n          })\n        };\n      }\n      \n      setExportProgress(80);\n      \n      // Add worksheet to workbook\n      XLSX.utils.book_append_sheet(wb, ws, excelOptions.sheetName || ''Data'');\n      \n      // Generate file\n      const wbout = XLSX.write(wb, { bookType: ''xlsx'', type: ''binary'' });\n      \n      // Convert to blob\n      const buf = new ArrayBuffer(wbout.length);\n      const view = new Uint8Array(buf);\n      for (let i = 0; i < wbout.length; i++) {\n        view[i] = wbout.charCodeAt(i) & 0xFF;\n      }\n      \n      setExportProgress(90);\n      \n      const blob = new Blob([buf], { type: ''application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(''a'');\n      link.href = url;\n      link.download = `$' + '{filename}.xlsx`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      \n      setExportProgress(100);\n      onExportComplete(''excel'', `$' + '{filename}.xlsx`);\n      \n      setTimeout(() => {\n        setIsExporting(false);\n        setExportProgress(0);\n      }, 500);\n      \n    } catch (error) {\n      console.error(''Excel export failed:'', error);\n      onExportError(error);\n      setIsExporting(false);\n      setExportProgress(0);\n    }\n  };\n  \n  // Export to PDF\n  const exportToPDF = async () => {\n    // Get elements at export time\n    const exportHtmlElement = getHtmlElement ? getHtmlElement() : null;\n    \n    console.log(''=== PDF Export Debug ==='');\n    console.log(''getHtmlElement provided:'', !!getHtmlElement);\n    console.log(''exportHtmlElement:'', !!exportHtmlElement, exportHtmlElement);\n    console.log(''aiInsightsText provided:'', !!aiInsightsText);\n    console.log(''pdfOptions:'', pdfOptions);\n    console.log(''data length:'', data?.length || 0);\n    \n    try {\n      setIsExporting(true);\n      setExportProgress(10);\n      onExportStart(''pdf'');\n      \n      const { jsPDF } = jspdf;\n      const doc = new jsPDF({\n        orientation: pdfOptions.orientation || ''portrait'',\n        unit: ''mm'',\n        format: pdfOptions.pageSize || ''a4'',\n        compress: true  // Enable PDF compression\n      });\n      \n      setExportProgress(20);\n      \n      if (exportHtmlElement) {\n        console.log(''HTML element path - capturing dashboard'');\n        console.log(''exportHtmlElement dimensions:'', {\n          scrollWidth: exportHtmlElement.scrollWidth,\n          scrollHeight: exportHtmlElement.scrollHeight,\n          clientWidth: exportHtmlElement.clientWidth,\n          clientHeight: exportHtmlElement.clientHeight\n        });\n        \n        // Capture HTML element as image (for charts, dashboards, etc.)\n        setExportProgress(30);\n        \n        // Add title and metadata\n        doc.setFontSize(16);\n        doc.text(pdfOptions.title || filename, pdfOptions.margins.left, pdfOptions.margins.top - 10);\n        \n        doc.setFontSize(10);\n        doc.text(\n          `Generated: $' + '{dayjs().format(''YYYY-MM-DD HH:mm'')}`,\n          pdfOptions.margins.left,\n          pdfOptions.margins.top - 5\n        );\n        \n        setExportProgress(40);\n        \n        // Wait longer for ApexCharts to fully render\n        console.log(''Waiting 1000ms for charts to render...'');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        console.log(''Wait complete, starting html2canvas...'');\n        \n        // Capture the element with better options for dashboards\n        let canvas = null;\n        let imgData = null;\n        try {\n          canvas = await html2canvas(exportHtmlElement, {\n            scale: 2,\n            logging: false,\n            useCORS: true,\n            backgroundColor: ''#ffffff'',\n            windowWidth: exportHtmlElement.scrollWidth,\n            windowHeight: exportHtmlElement.scrollHeight,\n            ignoreElements: (element) => {\n              // Ignore elements that shouldn''t be in the PDF\n              return element.classList?.contains(''no-print'') || \n                     element.tagName === ''BUTTON'';\n            }\n          });\n          console.log(''Dashboard canvas captured successfully'');\n          imgData = canvas.toDataURL(''image/jpeg'', 0.95);  // Use JPEG for better compression\n        } catch (canvasError) {\n          console.error(''Error capturing dashboard canvas:'', canvasError);\n          console.warn(''⚠️ Continuing PDF export without visualization - will include data table only'');\n          // Don''t throw - continue with data table export\n          canvas = null;\n          imgData = null;\n        }\n        \n        setExportProgress(60);\n        \n        // Calculate proper aspect ratio\n        const pageWidth = doc.internal.pageSize.getWidth();\n        const pageHeight = doc.internal.pageSize.getHeight();\n        const marginLeft = pdfOptions.margins.left || 20;\n        const marginRight = pdfOptions.margins.right || 20;\n        const marginTop = pdfOptions.margins.top || 20;\n        const marginBottom = pdfOptions.margins.bottom || 20;\n        \n        const maxWidth = pageWidth - marginLeft - marginRight;\n        const maxHeight = pageHeight - marginTop - marginBottom - 10;\n        \n        // Only process image if canvas was captured successfully\n        if (canvas && imgData) {\n          // Calculate dimensions maintaining aspect ratio\n          const canvasAspectRatio = canvas.width / canvas.height;\n          const pageAspectRatio = maxWidth / maxHeight;\n          \n          let imgWidth, imgHeight;\n          \n          if (canvasAspectRatio > pageAspectRatio) {\n            // Image is wider than page ratio - fit to width\n            imgWidth = maxWidth;\n            imgHeight = maxWidth / canvasAspectRatio;\n          } else {\n            // Image is taller than page ratio - fit to height\n            imgHeight = maxHeight;\n            imgWidth = maxHeight * canvasAspectRatio;\n          }\n          \n          // For cluster visualization, maximize the image size on the first page\n          // since we''ll put the data table on subsequent pages\n          if (exportHtmlElement && exportHtmlElement.id === ''cluster-graph-container'') {\n            console.log(''Detected cluster graph - maximizing image size for PDF'');\n            // Use more of the page for the visualization\n            const availableHeight = pageHeight - marginTop - marginBottom;\n            const availableWidth = pageWidth - marginLeft - marginRight;\n            \n            // Recalculate to use full available space\n            if (canvasAspectRatio > (availableWidth / availableHeight)) {\n              imgWidth = availableWidth;\n              imgHeight = availableWidth / canvasAspectRatio;\n            } else {\n              imgHeight = availableHeight;\n              imgWidth = availableHeight * canvasAspectRatio;\n            }\n          }\n          \n          console.log(''Image sizing:'', {\n            canvas: { width: canvas.width, height: canvas.height, ratio: canvasAspectRatio },\n            page: { maxWidth, maxHeight, ratio: pageAspectRatio },\n            final: { width: imgWidth, height: imgHeight }\n          });\n          \n          // Skip AI Insights canvas capture - we only want the markdown text\n          // The aiInsightsText parameter provides the markdown content directly\n          \n          // Image data and dimensions are already calculated above\n          let yPosition = marginTop;\n          const bottomMargin = pageHeight - marginBottom;\n          \n          // Check if we need multi-page support for tall dashboards\n          if (pdfOptions.multiPage && imgHeight > bottomMargin - yPosition) {\n            console.log(''Using multi-page mode for tall dashboard'');\n            // Split the image across multiple pages\n            const pageHeight = bottomMargin - yPosition;\n            let remainingHeight = imgHeight;\n            let currentY = 0;\n          \n          while (remainingHeight > 0) {\n            const currentPageHeight = Math.min(pageHeight, remainingHeight);\n            \n            // Create a temporary canvas for this page''s portion\n            const pageCanvas = document.createElement(''canvas'');\n            pageCanvas.width = canvas.width;\n            pageCanvas.height = (currentPageHeight / imgWidth) * canvas.width;\n            \n            const ctx = pageCanvas.getContext(''2d'');\n            ctx.drawImage(\n              canvas,\n              0, currentY * (canvas.height / imgHeight),\n              canvas.width, pageCanvas.height * (canvas.height / imgHeight),\n              0, 0,\n              pageCanvas.width, pageCanvas.height\n            );\n            \n            const pageImgData = pageCanvas.toDataURL(''image/png'');\n            \n            doc.addImage(\n              pageImgData,\n              ''PNG'',\n              pdfOptions.margins.left,\n              yPosition,\n              imgWidth,\n              currentPageHeight\n            );\n            \n            remainingHeight -= currentPageHeight;\n            currentY += currentPageHeight;\n            \n            if (remainingHeight > 0) {\n              doc.addPage();\n              yPosition = pdfOptions.margins.top;\n            }\n          }\n          } else if (yPosition + imgHeight > bottomMargin) {\n            // Single page mode - scale to fit\n          const maxHeight = bottomMargin - yPosition;\n          const scaledWidth = (maxHeight * canvas.width) / canvas.height;\n          \n          doc.addImage(\n            imgData, \n            ''PNG'', \n            pdfOptions.margins.left, \n            yPosition, \n            scaledWidth > imgWidth ? imgWidth : scaledWidth,\n            scaledWidth > imgWidth ? imgHeight : maxHeight\n          );\n          } else {\n            // Center the image horizontally if it''s narrower than the page\n            const xPosition = marginLeft + Math.max(0, (maxWidth - imgWidth) / 2);\n            \n            doc.addImage(\n              imgData, \n              ''JPEG'', \n              xPosition, \n              yPosition, \n              imgWidth, \n              imgHeight\n            );\n            \n            // For cluster graphs, always put data table on next page for better layout\n            if (exportHtmlElement && exportHtmlElement.id === ''cluster-graph-container'') {\n              console.log(''Cluster graph exported - data table will be on next page'');\n              // Force data table to next page by setting a flag\n              doc.addPage();\n            }\n          }\n        } else {\n          // No image captured - add a note\n          doc.setFontSize(10);\n          doc.setTextColor(150, 150, 150);\n          doc.text(''Note: Visualization could not be captured'', pageWidth / 2, marginTop + 20, { align: ''center'' });\n        }\n        \n        // Add AI Insights on a new page - only use markdown text\n        if (aiInsightsText) {\n          console.log(''Adding AI Insights to PDF on new page'');\n          doc.addPage();\n          \n          // Add AI Insights header\n          doc.setFontSize(16);\n          doc.setFont(undefined, ''bold'');\n          doc.text(''AI-Generated Insights'', marginLeft, marginTop);\n          \n          doc.setFontSize(10);\n          doc.setFont(undefined, ''normal'');\n          doc.setTextColor(100);\n          doc.text(\n            `Generated: $' + '{dayjs().format(''YYYY-MM-DD HH:mm'')}`,\n            marginLeft,\n            marginTop + 7\n          );\n          doc.setTextColor(0);\n          \n          if (aiInsightsText) {\n            // Render markdown as text\n            let yPos = marginTop + 20;\n            const lineHeight = 5;\n            const maxLineWidth = pageWidth - marginLeft - marginRight;\n            \n            // Clean the markdown text to handle special characters\n            let cleanText = aiInsightsText\n              .replace(/[\"\"]/g, ''\"'')  // Smart quotes to regular quotes\n              .replace(/['''']/g, \"''\")  // Smart apostrophes to regular apostrophes\n              .replace(/—/g, ''-'')     // Em dash to hyphen\n              .replace(/–/g, ''-'')     // En dash to hyphen\n              .replace(/…/g, ''...'')   // Ellipsis\n              .replace(/•/g, ''* '')    // Bullet points\n              .replace(/\\u200B/g, '''') // Zero-width space\n              .replace(/\\u00A0/g, '' '') // Non-breaking space\n              .replace(/[\\u2000-\\u206F]/g, '''') // Various Unicode spaces and formatting\n              .replace(/[\\u2070-\\u209F]/g, '''') // Superscripts and subscripts\n              .replace(/[\\u20A0-\\u20CF]/g, '''') // Currency symbols (except common ones)\n              .replace(/[\\u2100-\\u214F]/g, '''') // Letterlike symbols\n              .replace(/[\\uFE00-\\uFE0F]/g, '''') // Variation selectors\n              .replace(/[^\\x00-\\x7F\\u0080-\\u00FF]/g, ''''); // Remove other non-ASCII chars except Latin-1\n            \n            // Parse markdown to extract structure\n            const lines = cleanText.split(''\\n'');\n            \n            for (const line of lines) {\n              // Check if we need a new page\n              if (yPos > pageHeight - marginBottom - 10) {\n                doc.addPage();\n                yPos = marginTop;\n              }\n              \n              // Handle different markdown elements\n              if (line.startsWith(''# '')) {\n                // H1 heading\n                doc.setFontSize(14);\n                doc.setFont(undefined, ''bold'');\n                const text = line.substring(2).trim();\n                doc.text(text, marginLeft, yPos);\n                yPos += lineHeight * 1.5;\n                doc.setFont(undefined, ''normal'');\n                doc.setFontSize(10);\n              } else if (line.startsWith(''## '')) {\n                // H2 heading\n                doc.setFontSize(12);\n                doc.setFont(undefined, ''bold'');\n                const text = line.substring(3).trim();\n                doc.text(text, marginLeft, yPos);\n                yPos += lineHeight * 1.3;\n                doc.setFont(undefined, ''normal'');\n                doc.setFontSize(10);\n              } else if (line.startsWith(''### '')) {\n                // H3 heading\n                doc.setFontSize(11);\n                doc.setFont(undefined, ''bold'');\n                const text = line.substring(4).trim();\n                doc.text(text, marginLeft, yPos);\n                yPos += lineHeight * 1.2;\n                doc.setFont(undefined, ''normal'');\n                doc.setFontSize(10);\n              } else if (line.startsWith(''- '') || line.startsWith(''* '')) {\n                // Bullet point\n                const text = line.substring(2).trim();\n                const bulletX = marginLeft + 5;\n                doc.text(''•'', marginLeft, yPos);\n                const splitText = doc.splitTextToSize(text, maxLineWidth - 5);\n                doc.text(splitText, bulletX, yPos);\n                yPos += lineHeight * splitText.length;\n              } else if (line.startsWith(''**'') && line.endsWith(''**'')) {\n                // Bold text\n                doc.setFont(undefined, ''bold'');\n                const text = line.substring(2, line.length - 2).trim();\n                const splitText = doc.splitTextToSize(text, maxLineWidth);\n                doc.text(splitText, marginLeft, yPos);\n                yPos += lineHeight * splitText.length;\n                doc.setFont(undefined, ''normal'');\n              } else if (line.trim() === '''') {\n                // Empty line\n                yPos += lineHeight * 0.5;\n              } else {\n                // Regular text - also strip inline markdown formatting for now\n                // Remove bold markers and other inline formatting\n                let processedLine = line\n                  .replace(/\\*\\*(.*?)\\*\\*/g, ''$1'')  // Remove bold markers\n                  .replace(/\\*(.*?)\\*/g, ''$1'')      // Remove italic markers\n                  .replace(/`(.*?)`/g, ''$1'');       // Remove inline code markers\n                \n                const splitText = doc.splitTextToSize(processedLine, maxLineWidth);\n                doc.text(splitText, marginLeft, yPos);\n                yPos += lineHeight * splitText.length;\n              }\n            }\n          }\n        }\n        \n        // Optionally add data table below the image if both are provided\n        if (pdfOptions.includeDataTable && data && data.length > 0) {\n          console.log(''Adding data table to PDF on new page'');\n          doc.addPage();\n          \n          // Add table title\n          doc.setFontSize(14);\n          doc.text(''Data Table'', pdfOptions.margins.left, pdfOptions.margins.top);\n          \n          // Generate the data table on the new page\n          const { headers, rows } = prepareData();\n          let tableY = pdfOptions.margins.top + 10;\n          \n          // Add headers\n          doc.setFontSize(10);\n          doc.setFont(undefined, ''bold'');\n          \n          if (includeHeaders) {\n            const colWidth = (doc.internal.pageSize.getWidth() - (pdfOptions.margins.left + pdfOptions.margins.right)) / headers.length;\n            headers.forEach((header, i) => {\n              doc.text(\n                header, \n                pdfOptions.margins.left + (i * colWidth), \n                tableY,\n                { maxWidth: colWidth - 2 }\n              );\n            });\n            tableY += 7;\n            \n            // Add separator line\n            doc.line(\n              pdfOptions.margins.left,\n              tableY - 2,\n              doc.internal.pageSize.getWidth() - pdfOptions.margins.right,\n              tableY - 2\n            );\n          }\n          \n          // Add all data rows\n          doc.setFont(undefined, ''normal'');\n          rows.forEach((row) => {\n            // Check if we need a new page\n            if (tableY > doc.internal.pageSize.getHeight() - pdfOptions.margins.bottom - 10) {\n              doc.addPage();\n              tableY = pdfOptions.margins.top;\n              \n              // Re-add headers on new page\n              doc.setFont(undefined, ''bold'');\n              const headerColWidth = (doc.internal.pageSize.getWidth() - (pdfOptions.margins.left + pdfOptions.margins.right)) / headers.length;\n              headers.forEach((header, i) => {\n                doc.text(\n                  header,\n                  pdfOptions.margins.left + (i * headerColWidth),\n                  tableY,\n                  { maxWidth: headerColWidth - 2 }\n                );\n              });\n              tableY += 10;\n              doc.setFont(undefined, ''normal'');\n            }\n            \n            const colWidth = (doc.internal.pageSize.getWidth() - (pdfOptions.margins.left + pdfOptions.margins.right)) / row.length;\n            row.forEach((cell, i) => {\n              doc.text(\n                String(cell),\n                pdfOptions.margins.left + (i * colWidth),\n                tableY,\n                { maxWidth: colWidth - 2 }\n              );\n            });\n            tableY += 6;\n          });\n        }\n        \n        setExportProgress(90);\n        \n      } else {\n        console.log(''No HTML element provided - using data table only path'');\n        // Generate table from data\n        const { headers, rows } = prepareData();\n        setExportProgress(30);\n        \n        // Add title\n        doc.setFontSize(16);\n        doc.text(filename, pdfOptions.margins.left, pdfOptions.margins.top - 10);\n        \n        // Add date\n        doc.setFontSize(10);\n        doc.text(\n          `Generated: $' + '{dayjs().format(''YYYY-MM-DD HH:mm'')}`,\n          pdfOptions.margins.left,\n          pdfOptions.margins.top - 5\n        );\n        \n        setExportProgress(40);\n        \n        // Calculate column widths\n        const pageWidth = doc.internal.pageSize.getWidth() - (pdfOptions.margins.left + pdfOptions.margins.right);\n        const colWidth = pageWidth / headers.length;\n        \n        // Add headers\n        let y = pdfOptions.margins.top + 5;\n        doc.setFontSize(11);\n        doc.setFont(undefined, ''bold'');\n        \n        if (includeHeaders) {\n          headers.forEach((header, i) => {\n            doc.text(\n              header, \n              pdfOptions.margins.left + (i * colWidth), \n              y,\n              { maxWidth: colWidth - 2 }\n            );\n          });\n          y += 10;\n          \n          // Add separator line\n          doc.line(\n            pdfOptions.margins.left,\n            y - 3,\n            doc.internal.pageSize.getWidth() - pdfOptions.margins.right,\n            y - 3\n          );\n        }\n        \n        setExportProgress(60);\n        \n        // Add data rows\n        doc.setFont(undefined, ''normal'');\n        doc.setFontSize(10);\n        \n        const pageHeight = doc.internal.pageSize.getHeight();\n        const bottomMargin = pageHeight - pdfOptions.margins.bottom;\n        \n        for (let rowIdx = 0; rowIdx < rows.length; rowIdx++) {\n          const row = rows[rowIdx];\n          \n          // Check if we need a new page\n          if (y > bottomMargin) {\n            doc.addPage();\n            y = pdfOptions.margins.top;\n            \n            // Re-add headers on new page\n            if (includeHeaders) {\n              doc.setFont(undefined, ''bold'');\n              headers.forEach((header, i) => {\n                doc.text(\n                  header,\n                  pdfOptions.margins.left + (i * colWidth),\n                  y,\n                  { maxWidth: colWidth - 2 }\n                );\n              });\n              doc.setFont(undefined, ''normal'');\n              y += 10;\n              doc.line(\n                pdfOptions.margins.left,\n                y - 3,\n                doc.internal.pageSize.getWidth() - pdfOptions.margins.right,\n                y - 3\n              );\n            }\n          }\n          \n          row.forEach((cell, i) => {\n            doc.text(\n              String(cell),\n              pdfOptions.margins.left + (i * colWidth),\n              y,\n              { maxWidth: colWidth - 2 }\n            );\n          });\n          \n          y += 7;\n          setExportProgress(60 + (rowIdx / rows.length) * 30);\n        }\n        \n        setExportProgress(90);\n      }\n      \n      // Save the PDF\n      doc.save(`$' + '{filename}.pdf`);\n      \n      setExportProgress(100);\n      onExportComplete(''pdf'', `$' + '{filename}.pdf`);\n      \n      setTimeout(() => {\n        setIsExporting(false);\n        setExportProgress(0);\n      }, 500);\n      \n    } catch (error) {\n      console.error(''PDF export failed:'', error);\n      onExportError(error);\n      setIsExporting(false);\n      setExportProgress(0);\n    }\n  };\n  \n  // Export methods for headless mode\n  React.useImperativeHandle(exportRef, () => ({\n    exportToCSV,\n    exportToExcel,\n    exportToPDF,\n    setData: (newData) => { data = newData; },\n    setColumns: (newColumns) => { \n      columns = newColumns;\n      setSelectedColumns(newColumns.map(col => ({ ...col, selected: true })));\n    }\n  }));\n  \n  // Handle export based on format\n  const handleExport = (format) => {\n    console.log(''🎯 [DataExportPanel] handleExport called with format:'', format);\n    console.log(''  - data:'', data);\n    console.log(''  - data length:'', data?.length);\n    console.log(''  - columns:'', columns);\n    setIsDropdownOpen(false);\n    \n    if (showPreview) {\n      setPreviewFormat(format);\n      setShowPreviewDialog(true);\n    } else {\n      switch (format) {\n        case ''csv'':\n          exportToCSV();\n          break;\n        case ''excel'':\n          exportToExcel();\n          break;\n        case ''pdf'':\n          exportToPDF();\n          break;\n      }\n    }\n  };\n  \n  // Close dropdown when clicking outside\n  React.useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsDropdownOpen(false);\n      }\n    };\n    \n    document.addEventListener(''mousedown'', handleClickOutside);\n    return () => document.removeEventListener(''mousedown'', handleClickOutside);\n  }, []);\n  \n  // Column selector dialog\n  const renderColumnSelector = () => {\n    if (!showColumnSelector) return null;\n    \n    return (\n      <div style={{\n        position: ''fixed'',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: ''rgba(0, 0, 0, 0.5)'',\n        display: ''flex'',\n        alignItems: ''center'',\n        justifyContent: ''center'',\n        zIndex: 2000\n      }}>\n        <div style={{\n          backgroundColor: ''white'',\n          borderRadius: ''12px'',\n          padding: ''20px'',\n          maxWidth: ''400px'',\n          width: ''90%'',\n          maxHeight: ''70vh'',\n          overflow: ''auto''\n        }}>\n          <h3 style={{ marginTop: 0, marginBottom: ''16px'' }}>Select Columns to Export</h3>\n          \n          <div style={{ marginBottom: ''16px'' }}>\n            {selectedColumns.map((col, idx) => (\n              <label key={col.key} style={{\n                display: ''flex'',\n                alignItems: ''center'',\n                padding: ''8px'',\n                cursor: ''pointer'',\n                borderRadius: ''4px'',\n                transition: ''background-color 0.15s''\n              }}\n              onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F3F4F6''}\n              onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}>\n                <input\n                  type=\"checkbox\"\n                  checked={col.selected}\n                  onChange={(e) => {\n                    const updated = [...selectedColumns];\n                    updated[idx].selected = e.target.checked;\n                    setSelectedColumns(updated);\n                  }}\n                  style={{ marginRight: ''10px'' }}\n                />\n                <span>{col.label || col.key}</span>\n              </label>\n            ))}\n          </div>\n          \n          <div style={{ display: ''flex'', gap: ''10px'', justifyContent: ''flex-end'' }}>\n            <button\n              onClick={() => setShowColumnSelector(false)}\n              style={{\n                padding: ''8px 16px'',\n                border: ''1px solid #D1D5DB'',\n                borderRadius: ''6px'',\n                backgroundColor: ''white'',\n                cursor: ''pointer''\n              }}\n            >\n              Cancel\n            </button>\n            <button\n              onClick={() => setShowColumnSelector(false)}\n              style={{\n                padding: ''8px 16px'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                backgroundColor: styles?.colors?.primary || ''#3B82F6'',\n                color: ''white'',\n                cursor: ''pointer''\n              }}\n            >\n              Apply\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  // Preview dialog\n  const renderPreviewDialog = () => {\n    if (!showPreviewDialog) return null;\n    \n    const { headers, rows } = prepareData();\n    const previewRows = rows.slice(0, 10);\n    \n    return (\n      <div style={{\n        position: ''fixed'',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        backgroundColor: ''rgba(0, 0, 0, 0.5)'',\n        display: ''flex'',\n        alignItems: ''center'',\n        justifyContent: ''center'',\n        zIndex: 2000\n      }}>\n        <div style={{\n          backgroundColor: ''white'',\n          borderRadius: ''12px'',\n          padding: ''20px'',\n          maxWidth: ''90%'',\n          width: ''800px'',\n          maxHeight: ''80vh'',\n          display: ''flex'',\n          flexDirection: ''column''\n        }}>\n          <h3 style={{ marginTop: 0, marginBottom: ''16px'' }}>\n            Preview Export - {previewFormat?.toUpperCase()} Format\n          </h3>\n          \n          <div style={{\n            flex: 1,\n            overflow: ''auto'',\n            border: ''1px solid #E5E7EB'',\n            borderRadius: ''6px'',\n            padding: ''10px'',\n            marginBottom: ''16px''\n          }}>\n            <table style={{ width: ''100%'', borderCollapse: ''collapse'' }}>\n              {includeHeaders && (\n                <thead>\n                  <tr>\n                    {headers.map((header, idx) => (\n                      <th key={idx} style={{\n                        padding: ''8px'',\n                        borderBottom: ''2px solid #E5E7EB'',\n                        textAlign: ''left'',\n                        fontWeight: ''600''\n                      }}>\n                        {header}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n              )}\n              <tbody>\n                {previewRows.map((row, rowIdx) => (\n                  <tr key={rowIdx}>\n                    {row.map((cell, cellIdx) => (\n                      <td key={cellIdx} style={{\n                        padding: ''8px'',\n                        borderBottom: ''1px solid #F3F4F6''\n                      }}>\n                        {cell}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            {rows.length > 10 && (\n              <p style={{ textAlign: ''center'', color: ''#6B7280'', marginTop: ''10px'' }}>\n                ... and {rows.length - 10} more rows\n              </p>\n            )}\n          </div>\n          \n          <div style={{ display: ''flex'', gap: ''10px'', justifyContent: ''flex-end'' }}>\n            <button\n              onClick={() => {\n                setShowPreviewDialog(false);\n                setPreviewFormat(null);\n              }}\n              style={{\n                padding: ''8px 16px'',\n                border: ''1px solid #D1D5DB'',\n                borderRadius: ''6px'',\n                backgroundColor: ''white'',\n                cursor: ''pointer''\n              }}\n            >\n              Cancel\n            </button>\n            <button\n              onClick={() => {\n                setShowPreviewDialog(false);\n                handleExport(previewFormat);\n                setPreviewFormat(null);\n              }}\n              style={{\n                padding: ''8px 16px'',\n                border: ''none'',\n                borderRadius: ''6px'',\n                backgroundColor: styles?.colors?.primary || ''#3B82F6'',\n                color: ''white'',\n                cursor: ''pointer''\n              }}\n            >\n              Export\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  // Render UI based on button style\n  const renderButton = () => {\n    if (buttonStyle === ''icon'') {\n      return (\n        <button\n          onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n          style={{\n            ...panelStyles.button,\n            padding: ''8px'',\n            borderRadius: ''50%'',\n            width: ''36px'',\n            height: ''36px'',\n            display: ''flex'',\n            alignItems: ''center'',\n            justifyContent: ''center''\n          }}\n          disabled={isExporting}\n        >\n          <i className={`fa-solid $' + '{icon}`}></i>\n        </button>\n      );\n    }\n    \n    if (buttonStyle === ''menu'') {\n      return (\n        <div style={{ display: ''flex'', gap: ''4px'' }}>\n          {formats.includes(''csv'') && (\n            <button\n              onClick={() => handleExport(''csv'')}\n              style={{ ...panelStyles.button, fontSize: ''12px'', padding: ''6px 12px'' }}\n              disabled={isExporting}\n            >\n              CSV\n            </button>\n          )}\n          {formats.includes(''excel'') && (\n            <button\n              onClick={() => handleExport(''excel'')}\n              style={{ ...panelStyles.button, fontSize: ''12px'', padding: ''6px 12px'' }}\n              disabled={isExporting}\n            >\n              Excel\n            </button>\n          )}\n          {formats.includes(''pdf'') && (\n            <button\n              onClick={() => handleExport(''pdf'')}\n              style={{ ...panelStyles.button, fontSize: ''12px'', padding: ''6px 12px'' }}\n              disabled={isExporting}\n            >\n              PDF\n            </button>\n          )}\n        </div>\n      );\n    }\n    \n    // Default dropdown or button style\n    return (\n      <button\n        onClick={() => {\n          console.log(''🖱️ [DataExportPanel] Button clicked!'');\n          console.log(''  - buttonStyle:'', buttonStyle);\n          console.log(''  - formats:'', formats);\n          console.log(''  - isDropdownOpen:'', isDropdownOpen);\n          console.log(''  - data at click:'', data);\n          console.log(''  - data length at click:'', data?.length);\n          \n          if (buttonStyle === ''dropdown'') {\n            setIsDropdownOpen(!isDropdownOpen);\n          } else if (formats.length === 1) {\n            handleExport(formats[0]);\n          } else {\n            setIsDropdownOpen(!isDropdownOpen);\n          }\n        }}\n        style={panelStyles.button}\n        disabled={isExporting}\n      >\n        <i className={`fa-solid $' + '{icon}`}></i>\n        <span>{buttonText}</span>\n        {buttonStyle === ''dropdown'' && formats.length > 1 && (\n          <i className=\"fa-solid fa-chevron-down\" style={{ fontSize: ''10px'' }}></i>\n        )}\n      </button>\n    );\n  };\n  \n  // Headless mode - no UI\n  if (mode === ''headless'') {\n    return <div ref={exportRef} style={{ display: ''none'' }} />;\n  }\n  \n  // UI mode\n  if (!visible) {\n    return null;\n  }\n  \n  return (\n    <div ref={dropdownRef} style={panelStyles.container}>\n      {renderButton()}\n      \n      {isExporting && (\n        <div style={panelStyles.progressBar}>\n          <div style={{\n            ...panelStyles.progressFill,\n            width: `$' + '{exportProgress}%`\n          }} />\n        </div>\n      )}\n      \n      {isDropdownOpen && buttonStyle === ''dropdown'' && (\n        <div style={panelStyles.dropdown}>\n          {allowColumnSelection && (\n            <div\n              style={{\n                ...panelStyles.dropdownItem,\n                backgroundColor: ''#F9FAFB''\n              }}\n              onClick={() => {\n                setShowColumnSelector(true);\n                setIsDropdownOpen(false);\n              }}\n            >\n              <i className=\"fa-solid fa-columns\" style={{ width: ''16px'' }}></i>\n              <span>Select Columns...</span>\n            </div>\n          )}\n          \n          {formats.includes(''csv'') && (\n            <div\n              style={panelStyles.dropdownItem}\n              onClick={() => handleExport(''csv'')}\n              onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F3F4F6''}\n              onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}\n            >\n              <i className=\"fa-solid fa-file-csv\" style={{ width: ''16px'', color: ''#10B981'' }}></i>\n              <span>Export as CSV</span>\n            </div>\n          )}\n          \n          {formats.includes(''excel'') && (\n            <div\n              style={panelStyles.dropdownItem}\n              onClick={() => handleExport(''excel'')}\n              onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F3F4F6''}\n              onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}\n            >\n              <i className=\"fa-solid fa-file-excel\" style={{ width: ''16px'', color: ''#059669'' }}></i>\n              <span>Export as Excel</span>\n            </div>\n          )}\n          \n          {formats.includes(''pdf'') && (\n            <div\n              style={{\n                ...panelStyles.dropdownItem,\n                borderBottom: ''none''\n              }}\n              onClick={() => handleExport(''pdf'')}\n              onMouseEnter={(e) => e.currentTarget.style.backgroundColor = ''#F3F4F6''}\n              onMouseLeave={(e) => e.currentTarget.style.backgroundColor = ''transparent''}\n            >\n              <i className=\"fa-solid fa-file-pdf\" style={{ width: ''16px'', color: ''#DC2626'' }}></i>\n              <span>Export as PDF</span>\n            </div>\n          )}\n        </div>\n      )}\n      \n      {renderColumnSelector()}\n      {renderPreviewDialog()}\n    </div>\n  );\n}","description":"Reusable component for exporting data to CSV, Excel (XLSX), and PDF formats with optional UI","category":"Utility","type":"panel","properties":[{"name":"mode","type":"string","description":"Display mode: ''ui'' for visible interface, ''headless'' for programmatic-only usage","default":"ui"},{"name":"data","type":"array","description":"Array of objects to export (for table data)"},{"name":"columns","type":"array","description":"Column configuration: [{key: ''field'', label: ''Display Name'', width: 100}]"},{"name":"filename","type":"string","description":"Base filename for exports (without extension)","default":"export"},{"name":"formats","type":"array","description":"Available export formats: [''csv'', ''excel'', ''pdf'']","default":["csv","excel","pdf"]},{"name":"position","type":"string","description":"UI position: ''top'', ''bottom'', ''inline'', ''floating''","default":"inline"},{"name":"buttonStyle","type":"string","description":"Button style: ''button'', ''icon'', ''dropdown'', ''menu''","default":"dropdown"},{"name":"buttonText","type":"string","description":"Custom button text","default":"Export"},{"name":"icon","type":"string","description":"Font Awesome icon class for the export button","default":"fa-download"},{"name":"showPreview","type":"boolean","description":"Show preview before export (UI mode only)","default":false},{"name":"allowColumnSelection","type":"boolean","description":"Allow users to select which columns to export","default":true},{"name":"includeHeaders","type":"boolean","description":"Include column headers in export","default":true},{"name":"dateFormat","type":"string","description":"Date format for date values","default":"YYYY-MM-DD"},{"name":"numberFormat","type":"object","description":"Number formatting options: {decimals: 2, thousandsSeparator: '','', decimalSeparator: ''.''}"},{"name":"pdfOptions","type":"object","description":"PDF-specific options: {orientation: ''portrait''|''landscape'', pageSize: ''a4''|''letter'', margins: {top: 40, bottom: 40, left: 40, right: 40}, title: ''Custom Title'', includeDataTable: boolean, multiPage: boolean, includeAIInsights: boolean}"},{"name":"excelOptions","type":"object","description":"Excel-specific options: {sheetName: ''Data'', includeFilters: true, autoWidth: true}"},{"name":"getHtmlElement","type":"function","description":"Function that returns the HTML element to capture for PDF export (alternative to data array)"},{"name":"getAiInsightsElement","type":"function","description":"Function that returns the AI insights element to include in PDF export (optional)"},{"name":"aiInsightsText","type":"string","description":"Raw markdown text of AI insights to render as text in PDF (preferred over element capture)"},{"name":"onExportStart","type":"function","description":"Callback fired when export begins"},{"name":"onExportComplete","type":"function","description":"Callback fired when export completes successfully"},{"name":"onExportError","type":"function","description":"Callback fired if export fails"},{"name":"customStyles","type":"object","description":"Custom styles for the export panel UI"},{"name":"visible","type":"boolean","description":"Control visibility of the UI (for UI mode)","default":true}],"events":[{"name":"exportStarted","description":"Fired when export process begins","parameters":[{"name":"format","type":"string","description":"Export format being used"}]},{"name":"exportCompleted","description":"Fired when export completes successfully","parameters":[{"name":"format","type":"string","description":"Export format used"},{"name":"filename","type":"string","description":"Filename of exported file"}]},{"name":"exportFailed","description":"Fired if export fails","parameters":[{"name":"error","type":"object","description":"Error details"}]}],"libraries":[{"name":"xlsx","version":"0.18.5","globalVariable":"XLSX"},{"name":"jspdf","version":"2.5.1","globalVariable":"jspdf"},{"name":"html2canvas","version":"1.4.1","globalVariable":"html2canvas"},{"name":"dayjs","version":"1.11.10","globalVariable":"dayjs"}],"usageExample":"// UI Mode with dropdown\n<DataExportPanel\n  data={tableData}\n  columns={columns}\n  getHtmlElement={() => dashboardRef.current}\n  getAiInsightsElement={() => aiInsightsRef.current}\n  filename=\"sales-report\"\n  formats={[''csv'', ''excel'', ''pdf'']}\n  buttonStyle=\"dropdown\"\n/>\n\n// Headless mode for programmatic export\nconst exportPanel = <DataExportPanel\n  mode=\"headless\"\n  data={data}\n  columns={columns}\n/>;\n// Then call: exportPanel.exportToCSV() or exportPanel.exportToPDF()","functionalRequirements":"• Support CSV, Excel (XLSX), and PDF export formats\n• Provide both UI and headless modes for flexibility\n• Allow column selection and customization\n• Support both data arrays and HTML element capture\n• Handle large datasets efficiently with progress indication\n• Provide format-specific options (PDF orientation, Excel sheet names)\n• Include preview capability before export\n• Support various button styles and positions\n• Fire events for export lifecycle\n• Format dates and numbers consistently","technicalDesign":"• Uses SheetJS (XLSX) for Excel/CSV generation\n• Uses jsPDF with html2canvas for PDF creation\n• Implements ref-based API for headless mode access\n• Manages export state with React hooks\n• Provides dropdown UI with format selection\n• Handles data transformation and formatting\n• Supports chunked processing for large datasets\n• Implements progress indication for long exports\n• Uses dayjs for date formatting\n• Provides customizable styling options"}'
SET
  @FunctionalRequirements_5b80318f = N'Support CSV, Excel (XLSX), and PDF export formats; Provide both UI and headless modes for flexibility; Allow column selection and customization; Support both data arrays and HTML element capture; Handle large datasets efficiently with progress indication; Provide format-specific options (PDF orientation, Excel sheet names); Include preview capability before export; Support various button styles and positions; Fire events for export lifecycle; Format dates and numbers consistently'
SET
  @TechnicalDesign_5b80318f = N'Uses SheetJS (XLSX) for Excel/CSV generation; Uses jsPDF with html2canvas for PDF creation; Implements ref-based API for headless mode access; Manages export state with React hooks; Provides dropdown UI with format selection; Handles data transformation and formatting; Supports chunked processing for large datasets; Implements progress indication for long exports; Uses dayjs for date formatting; Provides customizable styling options'
SET
  @FunctionalRequirementsVector_5b80318f = N'[-0.05446832254528999,0.004679136909544468,-0.009174834005534649,-0.06269537657499313,0.0058125900104641914,0.02305893786251545,0.06514735519886017,0.042635347694158554,-0.03866454213857651,0.021258223801851273,-0.050903357565402985,-0.017644070088863373,-0.00746353343129158,0.11483011394739151,0.008707246743142605,0.003594271605834365,-0.014025804586708546,0.03296053782105446,-0.05156058445572853,0.016234584152698517,-0.013377450406551361,-0.020419342443346977,-0.0105961374938488,-0.0011871835449710488,0.023323949426412582,0.021608490496873856,-0.03641002997756004,0.007145354989916086,-0.052612096071243286,-0.03789251670241356,0.0014868521830067039,0.01798388548195362,0.008096135221421719,-0.021478526294231415,0.0000019032958107345621,-0.05383347347378731,-0.04330092668533325,0.006370087619870901,-0.020573550835251808,0.010392321273684502,0.03423208370804787,-0.07594826072454453,0.006366061512380838,-0.02826981246471405,0.04304943233728409,-0.06512734293937683,0.030161267146468163,0.03708939999341965,0.01740916818380356,-0.03604532778263092,0.005089345388114452,0.014259017072618008,0.024879934266209602,-0.03130081668496132,0.015766281634569168,0.0428159274160862,0.006218124181032181,-0.015134070999920368,0.06043585389852524,0.0033629201352596283,0.03872261196374893,-0.04493289440870285,-0.02045833133161068,-0.04172205179929733,-0.0010925624519586563,0.004468904808163643,-0.025178497657179832,-0.08790280669927597,-0.014964394271373749,-0.0009339820826426148,0.10892544686794281,-0.03743597865104675,-0.009677339345216751,-0.02511393092572689,-0.04088374972343445,-0.051320064812898636,-0.04777917265892029,-0.022907990962266922,0.030930744484066963,-0.009463757276535034,-0.04521823301911354,0.029813557863235474,-0.06604522466659546,-0.03320472687482834,0.036210909485816956,-0.023780466988682747,-0.0380076989531517,-0.007559395395219326,0.008898377418518066,0.03639785572886467,0.03722408786416054,0.005953838117420673,0.047993458807468414,0.024176444858312607,0.018995847553014755,-0.024364814162254333,-0.007751823868602514,-0.11566967517137527,0.050596196204423904,-0.009277126751840115,0.05374931916594505,-0.011959627270698547,0.030325986444950104,0.024075837805867195,0.044333528727293015,0.014349894598126411,0.028387384489178658,-0.05863221734762192,0.020983852446079254,-0.01831893064081669,0.013717901892960072,-0.003613401437178254,-0.010246478021144867,0.008615383878350258,-0.009116156958043575,0.056894008070230484,0.015615723095834255,0.021060297265648842,0.009294680319726467,0.06290274113416672,0.11805685609579086,-0.01691575162112713,-0.04035397619009018,0.01898631639778614,-0.005134759936481714,-0.006747244857251644,-0.046348076313734055,-0.007230930496007204,0.015304001048207283,-0.10063595324754715,-0.045222505927085876,-0.0028814312536269426,0.05492793023586273,-0.034188076853752136,-0.01849772222340107,0.05203549563884735,0.04019162058830261,0.03984116390347481,-0.02234511822462082,-0.015752561390399933,0.034228865057229996,-0.0060247816145420074,-0.0019142456585541368,0.01151699386537075,0.05577710270881653,0.0274405125528574,-0.03841965273022652,0.053154658526182175,-0.002313875360414386,0.004502365365624428,0.026294901967048645,-0.030765535309910774,-0.028109431266784668,0.015814663842320442,-0.034920189529657364,-0.026753146201372147,-0.011610840447247028,-0.03532373532652855,-0.046215519309043884,-0.0056372759863734245,0.0007253325893543661,-0.04114384204149246,0.025726601481437683,-0.030044961720705032,-0.011457761749625206,-0.013294225558638573,-0.02650880254805088,0.06339460611343384,0.024424590170383453,-0.015466011129319668,-0.0019137548515573144,-0.09542981535196304,0.028012467548251152,0.007922692224383354,0.03301971033215523,0.006639437284320593,0.02100696787238121,-0.015968946740031242,-0.017565036192536354,0.018740437924861908,0.0670095831155777,-0.13520382344722748,0.025510042905807495,0.03376467525959015,0.11518091708421707,-0.007725871633738279,-0.12090470641851425,0.03777620568871498,0.005920644849538803,-0.012838666327297688,-0.044064369052648544,0.014531145803630352,-0.0611175037920475,0.020449429750442505,0.02849462628364563,0.004128735512495041,0.008888615295290947,-0.04962636157870293,-0.012677110731601715,-0.04255169257521629,-0.03191045671701431,-0.0011980179697275162,-0.00507332431152463,0.05255972966551781,-0.012730520218610764,-0.036036211997270584,-0.059816937893629074,-0.035106830298900604,0.025088349357247353,-0.022340768948197365,0.09220302104949951,-0.005803859792649746,0.02943459153175354,-0.005196227692067623,-0.006073585245758295,0.02166096493601799,0.03718431666493416,0.03505789116024971,0.019197946414351463,0.008589664474129677,-0.03753487393260002,-0.04286209121346474,-0.08597149699926376,0.028451833873987198,0.06487401574850082,-0.07893843203783035,0.042281076312065125,0.010323191992938519,0.04754451662302017,0.009275101125240326,-0.020469455048441887,-0.014293872751295567,0.04035608470439911,0.03311574459075928,0.026116812601685524,0.06447802484035492,0.05463684722781181,0.07597652822732925,-0.05441252887248993,0.08183968812227249,0.0037238802760839462,-0.026351459324359894,-0.019372165203094482,0.011434460058808327,-0.028783300891518593,0.006869229953736067,-0.042910877615213394,-0.015472766943275928,0.016157815232872963,0.00477946549654007,0.013578444719314575,0.004942252300679684,0.007119612768292427,0.022114325314760208,-0.015881596133112907,0.0002662858460098505,-0.02192113734781742,0.009834513068199158,-0.04421562701463699,0.03359059616923332,0.06583937257528305,-0.028914371505379677,-0.034187547862529755,-0.016094980761408806,0.021530557423830032,0.010031113401055336,0.056410111486911774,-0.003456521313637495,0.011194949969649315,0.03379940614104271,0.015630356967449188,0.04360402375459671,0.01265829149633646,-0.015199354849755764,-0.005328681785613298,-0.020069869235157967,-0.032223209738731384,0.0042822337709367275,-0.02566167153418064,0.030752306804060936,-0.014013079926371574,0.056029267609119415,-0.00853482261300087,-0.007218606304377317,0.007848898880183697,-0.00531113101169467,0.04648778215050697,0.0016419263556599617,0.04987335205078125,-0.01986624300479889,0.008362085558474064,-0.00023621840227860957,0.029492883011698723,0.039482034742832184,-0.07162313163280487,-0.002548541873693466,-0.06378868222236633,0.033114634454250336,-0.01475723646581173,0.04368450865149498,0.03077835962176323,0.017564808949828148,0.020313836634159088,0.003210305469110608,-0.004132058937102556,0.03891204297542572,0.06515619903802872,-0.0025051513221114874,0.03753429651260376,0.009834124706685543,0.022329244762659073,-0.0029081732500344515,0.0027679549530148506,-0.023511070758104324,0.02772337757050991,-0.004764390643686056,-0.004286027513444424,0.03626386448740959,-0.003107823897153139,0.0011802214430645108,-0.0021178494207561016,-0.02510603331029415,0.011425958015024662,-0.008681153878569603,-0.019085898995399475,-0.008641141466796398,-0.05197843164205551,-0.00889965333044529,-0.01543445698916912,-0.019368423148989677,0.004268205258995295,-0.004109571687877178,0.02520257793366909,0.01991098001599312,0.029686346650123596,0.05986783653497696,-0.0224307794123888,-0.08251708000898361,0.00821984838694334,-0.021932514384388924,-0.0568869449198246,-0.014304081909358501,0.03156295418739319,-0.010003355331718922,0.06752770394086838,-0.05273550748825073,0.021603109315037727,0.024414343759417534,-0.06611742824316025,0.010959675535559654,0.08236540853977203,0.044646624475717545,-0.023307615891098976,-0.006822981406003237,0.02768201380968094,-0.018157748505473137,-0.06200045347213745,0.0012363942805677652,-0.046061109751462936,-0.04233923181891441,-0.037597473710775375,-0.012253825552761555,-0.05859457701444626,-0.00228537037037313,0.02934151701629162,0.023550335317850113,0.024927787482738495,0.010305523872375488,-0.02161598950624466,-0.06235641613602638,0.006414163392037153,-0.03736892715096474,0.019269591197371483,0.004112574737519026,-0.02293265610933304,0.006834608037024736,-0.017331890761852264,-0.007076637353748083,0.015342999249696732,0.0007493473822250962,0.03650113195180893,0.028657380491495132,0.059315748512744904,0.007591058500111103,0.09056182205677032,-0.048391882330179214,-0.012466845102608204,-0.009062017314136028,-0.03765912353992462,0.03314086049795151,-0.021213198080658913,-0.007768537849187851,-0.011669451370835304,-0.044308435171842575,0.00872428435832262,-0.026956086978316307,-0.019165990874171257,0.020693916827440262,-0.015403025783598423,0.0009597543976269662,0.05593138933181763,-0.03313443064689636,-0.06501444429159164,-0.021095937117934227,0.0532296821475029,-0.04990551248192787,0.09624926000833511,0.038936469703912735,-0.010022837668657303,-0.008185510523617268,-0.052688274532556534,0.009388158097863197,-0.034339264035224915,-0.019202945753932,-0.00902144517749548,0.034596603363752365,-0.014219534583389759,0.013141370378434658,0.05884593725204468,0.07626567780971527,0.025564802810549736,-0.01082576997578144,0.016178419813513756,-0.06298661231994629,-0.01556856743991375,-0.03862390294671059,-0.042247068136930466,-0.03752358630299568,0.03382005915045738,0.0023399682249873877,-0.017796635627746582,-0.06786943972110748,0.007125220727175474,-0.0346524752676487,-0.056880950927734375,0.05611514672636986,-0.03436755761504173,-0.04903735965490341,-0.02244962565600872,-0.021152956411242485,-0.044652968645095825,0.04327103868126869,0.01552735548466444,-0.0018239918863400817,-0.05165970325469971,-0.06571909040212631,0.017405495047569275,-0.03841196745634079,-0.02393518202006817,0.05143310874700546,-0.023337170481681824,-0.00563215184956789,-0.006371415685862303,0.02994169481098652,0.01531136967241764,-0.002237307606264949,0.03567908704280853,0.02535487711429596,0.016882741823792458,-0.030382005497813225,0.05180564895272255,0.020344523712992668,-0.04903589189052582,0.03615787997841835,0.039731722325086594,-0.03744741156697273,0.04617222398519516,0.005771092604845762,-0.041013918817043304,-0.046823181211948395,0.009749363176524639,-0.024519192054867744,-0.024754244834184647,-0.031771689653396606,-0.008458652533590794,-0.016832562163472176,-0.007359312381595373,0.0557277649641037,0.06548573076725006,0.007312244735658169,0.04485975578427315,-0.027191458269953728,0.013068003579974174,-0.03458162769675255,0.01640479639172554,0.029789865016937256,-0.04330488666892052,-0.00872993003576994,-0.007244700100272894,0.02346351370215416,-0.0092382887378335,0.02112218737602234,-0.008962959051132202,0.13183055818080902,0.06594175100326538,-0.009154504165053368,-0.11264253407716751,0.04458333179354668,-0.012178451754152775,0.0010297538246959448,-0.042126383632421494,0.0194462388753891,-0.0816866084933281,-0.04987974837422371,0.007564490661025047,-0.006451058201491833,-0.016163839027285576,0.012590463273227215,0.00004501937291934155,0.05577690526843071,0.04887326434254646,-0.02083609625697136,-0.014394526369869709,0.06426093727350235,-0.02736351080238819,0.013007145375013351,-0.11105772852897644,-0.0087071368470788,-0.016780342906713486,-0.05514783784747124,-0.028480125591158867,-0.020153041929006577,0.027711033821105957,0.01660940609872341,0.05526912957429886,0.016120221465826035,-0.02360626682639122,-0.04394931718707085,-0.046473100781440735,0.04518873989582062,0.0061681256629526615,-0.04250489920377731,-0.006757151335477829,-0.04277588054537773,-0.037187594920396805,0.0475955456495285,0.04886162653565407,-0.014745714142918587,0.015975991263985634,-0.020767362788319588,-0.014918307773768902,-0.01195219624787569,0.013281196355819702,-0.025986365973949432,-0.030764708295464516,-0.008773873560130596,0.010247212834656239,0.0005332144210115075,0.03839194029569626,0.01120713446289301,0.005328267812728882,0.0012704689288511872,-0.03630814701318741,0.009614408947527409,-0.036844056099653244,-5.815890543807735e-33,-0.006506629288196564,0.01078028604388237,-0.04283404350280762,0.03494284301996231,0.00884493812918663,-0.03421797603368759,-0.01877737231552601,-0.03951546549797058,0.00660967081785202,0.005585200153291225,0.0118841752409935,-0.03022221103310585,0.019734809175133705,-0.014038129709661007,0.03331189975142479,0.03522263467311859,0.011662909761071205,-0.03086581639945507,-0.009011865593492985,-0.0028731506317853928,0.021165581420063972,0.03533881902694702,0.010149966925382614,-0.04766618087887764,0.0015401915879920125,0.008801837451756,0.024497248232364655,-0.02517426572740078,0.04256749153137207,-0.01439779344946146,0.013829714618623257,-0.019465427845716476,-0.000843599031213671,-0.033981893211603165,-0.02402876503765583,0.025420887395739555,-0.0822882279753685,0.010174433700740337,0.010501688346266747,0.014897898770868778,0.05228552967309952,-0.005279813427478075,0.04120182991027832,-0.01734396442770958,-0.01292764488607645,0.01036763098090887,0.010073103941977024,-0.002756299916654825,-0.025462530553340912,-0.04940870776772499,-0.009084060788154602,-0.009926377795636654,0.005833968985825777,0.0839839056134224,-0.015776626765727997,0.13330331444740295,-0.018813997507095337,-0.00695969769731164,0.0027233462315052748,0.005301143042743206,0.020570140331983566,-0.017732717096805573,0.029545238241553307,0.021171633154153824,0.09526439756155014,-0.03133786469697952,0.002893822267651558,0.007306851912289858,-0.07332409173250198,0.037032026797533035,0.019654562696814537,0.014103456400334835,-0.0029751621186733246,0.02068985067307949,-0.045659471303224564,0.008553232066333294,0.019887764006853104,0.016572004184126854,0.018329733982682228,-0.04577181488275528,0.025961197912693024,-0.0019324913155287504,-0.0016870131948962808,0.010535073466598988,0.04715004190802574,-0.01473144255578518,0.007385598495602608,-0.005888210143893957,0.05488207936286926,0.020811820402741432,-0.01678873784840107,0.022317005321383476,-0.03939482942223549,0.04263254627585411,-0.03214335814118385,0.00829350110143423,0.00014081783592700958,-0.04368797317147255,0.012666307389736176,-0.06142883375287056,0.0022446883376687765,0.07033542543649673,-0.06144138053059578,0.014404283836483955,0.013461432419717312,-0.03218144550919533,0.009480249136686325,0.008981375023722649,-0.023341132327914238,-0.0044506811536848545,0.0015347683802247047,0.055669765919446945,0.006749219726771116,-0.037891536951065063,0.03614732250571251,-0.028897341340780258,0.031412556767463684,-0.012752584181725979,-0.004628950729966164,-0.037172578275203705,0.03222803771495819,-0.02253718674182892,0.007543513551354408,0.010190026834607124,0.03414560854434967,-0.0021363908890634775,-0.013363146223127842,0.010155542753636837,0.029684578999876976,0.028756320476531982,0.014069587923586369,0.054659802466630936,2.777270537990262e-7,0.0007147329743020236,0.0003829532361123711,0.02382110059261322,0.016581237316131592,-0.003822184167802334,-0.041173700243234634,-0.0330449640750885,0.01090660598129034,0.005592581816017628,0.027868149802088737,0.0025205390993505716,-0.03345515578985214,0.07480914145708084,0.051019251346588135,0.031293805688619614,-0.043357715010643005,-0.026011278852820396,-0.002779655624181032,-0.027843406423926353,-0.006563389208167791,0.05972844362258911,0.011668783612549305,0.0032973226625472307,0.05294175073504448,0.051594268530607224,0.017375797033309937,-0.022901520133018494,-0.043625496327877045,0.05415113642811775,-0.0354585200548172,0.019117804244160652,0.007653673645108938,-0.028540074825286865,-0.02020290680229664,-0.021616149693727493,-0.011409565806388855,-0.004906915128231049,0.07145089656114578,0.012701458297669888,0.026675431057810783,0.04045909643173218,-0.07831799238920212,0.0009175895247608423,-0.05026839300990105,0.03961634635925293,0.021563148126006126,-0.03153075650334358,0.07874681800603867,-0.03584165498614311,0.022817354649305344,-0.026185909286141396,-0.01639154553413391,0.029059452936053276,-0.06192528083920479,0.007823369465768337,-0.004253140185028315,-0.02219395712018013,0.04612850397825241,0.004491639323532581,0.05944238603115082,0.007501888554543257,-0.04186474159359932,0.016002722084522247,0.055952493101358414,0.04045743867754936,-0.015011784620583057,-0.0024068444035947323,3.4859422726879173e-34,-0.023590262979269028,-0.0146383848041296,0.015814704820513725,-0.022597061470150948,-0.01758216880261898,-0.020911172032356262,0.08028291165828705,-0.01200782973319292,-0.004435976035892963,-0.005755519028753042,0.023620881140232086]'
SET
  @TechnicalDesignVector_5b80318f = N'[-0.022498739883303642,0.01097332127392292,-0.026174180209636688,-0.11307262629270554,-0.017948010936379433,-0.022137105464935303,0.05463387444615364,0.09151202440261841,-0.04887193441390991,-0.011456755921244621,-0.022650806233286858,0.01213117130100727,0.03886149078607559,0.1671675592660904,0.017703961580991745,-0.015158148482441902,-0.02901572361588478,0.030965512618422508,-0.023114468902349472,0.019440660253167152,0.0065516820177435875,-0.01428891345858574,-0.005651424173265696,-0.010524115525186062,0.033499620854854584,-0.02823767438530922,-0.031027141958475113,0.0136346947401762,-0.0026764743961393833,-0.025602124631404877,-0.007770142517983913,0.05001993104815483,-0.03048962727189064,0.0036343690007925034,0.0000020589543510141084,-0.03675294667482376,-0.038525816053152084,0.0068739536218345165,0.014644596725702286,-0.03511393070220947,0.0376233235001564,-0.08127085864543915,0.01567593589425087,-0.005881038494408131,0.01680959202349186,-0.11160030215978622,0.012981859035789967,0.0011214424157515168,0.0371309295296669,-0.03235166519880295,0.0015548215014860034,-0.012509291060268879,0.022451262921094894,0.022931182757019997,0.015448885969817638,0.09048613905906677,-0.00883329939097166,-0.01595832221210003,0.0767875611782074,-0.030682273209095,0.02559276670217514,-0.05214845761656761,0.004610475618392229,-0.05833275616168976,0.012274619191884995,-0.005200485233217478,-0.017543820664286613,-0.06955736875534058,-0.00043064981582574546,0.024409597739577293,0.10736100375652313,-0.0357392318546772,-0.011736147105693817,-0.011964759789407253,-0.05936497822403908,-0.022149886935949326,-0.04840964078903198,0.01834697090089321,0.01691010408103466,-0.008504864759743214,-0.029749037697911263,-0.007255998440086842,-0.054526906460523605,-0.024804415181279182,0.009428396821022034,-0.02381393313407898,-0.005481670144945383,0.004001580644398928,-0.019333312287926674,0.01894725300371647,0.060535117983818054,-0.03218821436166763,0.032067976891994476,0.007711435668170452,0.036490634083747864,-0.03889039158821106,0.0035771732218563557,-0.15661948919296265,0.046376537531614304,0.00533444294705987,0.048147134482860565,0.011598199605941772,-0.011185944080352783,0.02729025110602379,0.07266974449157715,-0.002855105558410287,0.046234846115112305,-0.07222585380077362,0.04630180820822716,-0.032383013516664505,0.02164350263774395,-0.007687630597501993,0.032332222908735275,0.0007311847293749452,-0.07143034040927887,0.04679233208298683,0.0034611783921718597,-0.021370403468608856,-0.0006633969605900347,0.06019912660121918,0.12749868631362915,-0.011687451042234898,-0.05720721557736397,0.03470715880393982,0.000004867494681093376,0.03937461972236633,-0.006810869090259075,-0.021815750747919083,0.0368766151368618,-0.06930068135261536,0.0036522417794913054,0.0007196337101049721,0.053349051624536514,-0.031306467950344086,-0.023351097479462624,0.025593016296625137,0.013144675642251968,0.03861674293875694,-0.004387245047837496,-0.010930763557553291,0.02577437087893486,-0.0036657608579844236,0.028827259317040443,-0.0015189588302746415,0.055890731513500214,0.016402175650000572,-0.013015680946409702,0.02755788527429104,-0.006209568120539188,0.016438860446214676,0.029245609417557716,-0.01698177121579647,-0.06649087369441986,0.0026535927318036556,-0.05542666092514992,-0.01267501525580883,-0.00026272801915183663,-0.014478900469839573,-0.022546032443642616,-0.018379654735326767,0.00009927747305482626,-0.040199365466833115,0.04231064394116402,0.0005917541566304862,-0.04917890205979347,0.011614975519478321,-0.0948152169585228,0.037723932415246964,0.00027517153648659587,-0.006202890072017908,0.014042716473340988,-0.046792540699243546,0.020332403481006622,0.03764916583895683,0.03157063573598862,-0.023101862519979477,0.03950631245970726,-0.0006066228961572051,0.006590938661247492,0.050821032375097275,0.08673299849033356,-0.11956925690174103,0.022904468700289726,0.013400747440755367,0.09667093306779861,-0.017976654693484306,-0.05844516679644585,0.06099824607372284,0.019301120191812515,0.01445628423243761,-0.028981084004044533,-0.014737188816070557,-0.05934656411409378,0.011334308423101902,0.030184589326381683,0.033801477402448654,-0.00489430595189333,-0.10602697730064392,0.006125923711806536,-0.045199811458587646,-0.0019169257720932364,0.033081281930208206,-0.0008421887760050595,0.05309690535068512,0.027880584821105003,-0.0013273737858980894,-0.06647446006536484,-0.029666181653738022,-0.025356968864798546,0.011543730273842812,0.0153193399310112,-0.0014323468785732985,-0.004644477274268866,0.0026464208494871855,-0.010861031711101532,0.05337181314826012,0.026602253317832947,0.005489112809300423,0.005242966115474701,0.027743106707930565,-0.046078383922576904,-0.03010539710521698,-0.021378202363848686,0.025893427431583405,0.0594528466463089,-0.021706558763980865,0.02685297280550003,0.026303930208086967,0.06762761622667313,0.004679068922996521,-0.02113056182861328,-0.031777359545230865,0.02440870925784111,0.021466223523020744,0.03571050986647606,0.07419963926076889,0.07925854623317719,0.060188230127096176,-0.01924496330320835,0.07900644093751907,0.005282576661556959,-0.007721488364040852,-0.05816643685102463,-0.007500988896936178,-0.014539377763867378,0.013234077952802181,-0.06594600528478622,0.0341469906270504,-0.011468746699392796,0.027359632775187492,0.05180448293685913,0.011815999634563923,-0.002460832940414548,0.010060080327093601,-0.01279209554195404,-0.03444082662463188,-0.0031524135265499353,-0.022286809980869293,-0.0006850456120446324,0.07630282640457153,0.030200045555830002,-0.0266004279255867,-0.03144698590040207,-0.006737457122653723,0.03907707706093788,-0.015577197074890137,0.09021218121051788,0.025266757234930992,-0.006206815131008625,0.049723003059625626,0.006564702372997999,0.0385235920548439,0.031075023114681244,-0.028772754594683647,-0.02562173642218113,-0.021386856213212013,-0.023798152804374695,0.027911288663744926,-0.027888845652341843,0.014911029487848282,-0.031005676835775375,0.013454302214086056,-0.008489053696393967,-0.0065910546109080315,0.008998867124319077,0.014582694508135319,0.003915681038051844,-0.009970861487090588,0.02553398534655571,-0.039238348603248596,0.005054394714534283,0.007180115673691034,0.03268573805689812,0.004527581389993429,-0.059993863105773926,0.002736723283305764,0.028319891542196274,0.03155605122447014,-0.017718467861413956,-0.01693034917116165,0.045220013707876205,-0.01883867010474205,0.04341663792729378,-0.005951079539954662,0.022273892536759377,0.012946606613695621,0.027015704661607742,-0.021109895780682564,0.0017815406899899244,0.023100821301341057,0.03505413979291916,0.001984144328162074,-0.010323803871870041,-0.029065918177366257,0.0034775130916386843,0.025192663073539734,0.053806088864803314,0.049648407846689224,-0.007166996598243713,0.0492861270904541,-0.00010839436436071992,-0.019137179479002953,0.0010336340637877584,-0.028937755152583122,-0.03340449184179306,-0.010448124259710312,-0.02180659957230091,-0.011158834211528301,0.004727216437458992,-0.0025627075228840113,-0.009592389687895775,-0.01810000091791153,0.04234623163938522,-0.002430832711979747,0.009067045524716377,0.003039013594388962,-0.02136082388460636,-0.09117452800273895,0.0018639073241502047,-0.028869086876511574,-0.05924059450626373,-0.031706392765045166,0.04395276680588722,0.039765458554029465,0.021740363910794258,-0.02787359058856964,0.006120782811194658,-0.0025559058412909508,-0.07041680812835693,-0.010398440062999725,0.07261653989553452,0.060747481882572174,-0.017137140035629272,-0.007122166454792023,0.032904963940382004,-0.018496040254831314,-0.047551512718200684,-0.01615346036851406,-0.04816142097115517,-0.020571159198880196,0.004594172351062298,0.010417971760034561,-0.02014068141579628,0.0008568097837269306,-0.011928347870707512,0.008940722793340683,0.03391542658209801,-0.014962582848966122,-0.022826867178082466,-0.026709366589784622,0.012659169733524323,-0.05148126929998398,0.00024616968585178256,0.009544492699205875,-0.036895304918289185,-0.020871484652161598,-0.013344611041247845,0.01867210865020752,-0.016500934958457947,0.006259005516767502,0.065923772752285,-0.017295215278863907,0.0437626875936985,0.02467745542526245,0.10259270668029785,-0.07056248188018799,-0.004501239862293005,0.019942406564950943,-0.030299782752990723,0.06190827488899231,-0.029756059870123863,-0.010925459675490856,0.013226632960140705,-0.07571801543235779,0.04439660534262657,0.0008264534408226609,-0.031879279762506485,-0.016666147857904434,0.013881283812224865,0.02330091968178749,0.02345176786184311,0.00794079340994358,-0.0313427671790123,-0.04544829949736595,0.05529260262846947,-0.04707331582903862,0.047050219029188156,0.053422797471284866,0.007046776358038187,0.03421204909682274,-0.02385041117668152,0.010900589637458324,-0.05367337167263031,-0.02678622305393219,-0.07396936416625977,0.04179650917649269,-0.0007573661278001964,-0.006660832092165947,0.03778307884931564,0.0734991580247879,-0.0038863278459757566,-0.017724182456731796,0.01563148759305477,-0.05967347323894501,0.016710666939616203,-0.04693017899990082,0.0023694958072155714,-0.024719450622797012,0.010705672204494476,0.02498026005923748,-0.02006976120173931,-0.07666445523500443,-0.0021210969425737858,-0.027919327840209007,-0.02984578348696232,0.05565142631530762,-0.02102391980588436,-0.023063374683260918,0.0037647869903594255,-0.029361173510551453,-0.038362205028533936,0.011962720192968845,0.015773002058267593,0.0045776464976370335,-0.02579459547996521,-0.050074685364961624,0.033561985939741135,-0.0022290432825684547,-0.023770567029714584,0.03194580599665642,-0.011954707093536854,-0.03039403073489666,-0.03423892706632614,0.025766583159565926,-0.015270044095814228,-0.025954192504286766,0.055586185306310654,0.007176358252763748,0.03519154712557793,0.015029476955533028,0.03656696155667305,0.016923556104302406,-0.0900791734457016,0.023792944848537445,0.018322492018342018,-0.04529300332069397,0.09578678011894226,-0.07412546128034592,-0.029523052275180817,-0.01921928860247135,0.030058439821004868,-0.03302152454853058,-0.03795165568590164,-0.031798362731933594,0.017559541389346123,0.01912696473300457,0.012618712149560452,0.06699053943157196,0.034244682639837265,-0.019816309213638306,0.04176420345902443,-0.0010372679680585861,-0.009123344905674458,-0.04008999466896057,0.04539160057902336,0.0007650296320207417,-0.020534977316856384,-0.024489082396030426,-0.027513550594449043,-0.008584007620811462,0.0011035866336897016,-0.0011677030706778169,0.027228545397520065,0.1464744359254837,0.07381226122379303,-0.0012680060463026166,-0.053904399275779724,0.03929226100444794,-0.0013075770111754537,0.024558568373322487,-0.018392980098724365,-0.023550432175397873,-0.057614073157310486,-0.07535463571548462,-0.003168561030179262,-0.01639861799776554,-0.01649068482220173,-0.005711060483008623,-0.004497975576668978,0.01625015214085579,0.01818978600203991,-0.014143338426947594,-0.005150800570845604,0.04248485714197159,0.009340288117527962,0.020094236359000206,-0.07752081006765366,0.014867440797388554,0.03934672102332115,-0.047632284462451935,0.005966967437416315,-0.014435406774282455,0.01668047532439232,-0.0002903907443396747,0.08147622644901276,-0.017505772411823273,-0.01011582650244236,-0.0368252731859684,-0.01498386263847351,0.0308376494795084,0.052507705986499786,-0.021027283743023872,0.010361500084400177,-0.05548778921365738,-0.043451860547065735,0.0332699716091156,0.005788800306618214,-0.003168634604662657,0.019669199362397194,-0.03323057293891907,-0.02461755834519863,-0.02039807103574276,-0.0014083079295232892,-0.0009860743302851915,-0.0027068881317973137,-0.007603141479194164,-0.008785010315477848,-0.012382886372506618,0.014273466542363167,0.006746949627995491,-0.007397519890218973,0.03339245170354843,0.017175981774926186,-0.011712753213942051,0.007167914416640997,-6.445119445491459e-33,0.00625091465190053,0.009627199731767178,-0.02665073238313198,0.004072538577020168,-0.04200059175491333,-0.04532317817211151,-0.03654748201370239,-0.05866584926843643,0.01419726200401783,0.020038191229104996,-0.016452595591545105,-0.04837113618850708,0.00916152074933052,0.010662578046321869,-0.007535836193710566,0.0337187722325325,0.023072345182299614,-0.006483852863311768,-0.014912763610482216,0.005570332985371351,0.028309941291809082,0.049073830246925354,0.021984335035085678,-0.013491095043718815,-0.03758440539240837,0.025348495692014694,-0.007879681885242462,-0.0015023224987089634,-0.001396666164509952,0.016685234382748604,0.01985524408519268,-0.00858752429485321,-0.02091551385819912,-0.04135550186038017,-0.00008270030230050907,0.0070008705370128155,-0.08436227589845657,0.010461974889039993,0.03716031834483147,0.02893327921628952,0.047429971396923065,0.027940882369875908,0.0514979362487793,-0.027857288718223572,0.012395315803587437,0.004277249798178673,-0.0016488570254296064,-0.013235221616923809,-0.053657498210668564,-0.023784859105944633,-0.000033830143365776166,0.007599665317684412,-0.002554394770413637,0.07056637108325958,-0.0070861345157027245,0.12045446783304214,-0.0008377174381166697,-0.03214852139353752,-0.042100515216588974,-0.009825567714869976,-0.03665226697921753,-0.006157374940812588,0.05103491246700287,0.03517559543251991,0.06816757470369339,-0.02234729751944542,-0.0012998951133340597,0.021877538412809372,-0.052285678684711456,0.035907283425331116,0.006310957949608564,-0.018142150714993477,-0.018809247761964798,0.002951448317617178,-0.04253028333187103,0.03761577606201172,-0.0022448308300226927,0.006752563640475273,0.013366322964429855,0.008406877517700195,-0.004276416730135679,-0.00006693414616165683,0.017788704484701157,0.021901406347751617,0.02455708757042885,-0.03881658986210823,0.014201526530086994,0.01697646826505661,0.023465607315301895,0.027988849207758904,-0.022803183645009995,-0.009311795234680176,-0.039645321667194366,0.03834529593586922,-0.007700458634644747,-0.020250696688890457,-0.013418653979897499,0.00844154879450798,-0.0016922539798542857,-0.08750013262033463,0.01631375029683113,0.010458079166710377,-0.05806513875722885,0.005466583650559187,-0.005613518878817558,-0.021513191983103752,0.03404631093144417,-0.00839691050350666,-0.03990909084677696,0.00500311516225338,-0.0032537616789340973,0.06147201731801033,-0.0030393300112336874,-0.0021574541460722685,0.023387925699353218,-0.002703888574615121,0.024256961420178413,-0.011237489990890026,0.00033924783929251134,-0.009931545704603195,0.03439486771821976,-0.03761402517557144,-0.0018242523074150085,0.009457775391638279,-0.015692878514528275,-0.011110207065939903,-0.02421748638153076,0.0536077506840229,0.0146154360845685,0.006951695773750544,0.021942321211099625,0.032836370170116425,2.886478682739835e-7,0.001520276884548366,0.004152917303144932,-0.0010554881300777197,-0.017510058358311653,0.013455408625304699,-0.03973894938826561,-0.0027166593354195356,-0.027023470029234886,-0.030881192535161972,0.011838991194963455,-0.014888375997543335,-0.035210952162742615,0.07902133464813232,0.03520042076706886,0.0038036401383578777,-0.04249115660786629,-0.04519767314195633,-0.02875683456659317,-0.04610435664653778,0.02269597351551056,-0.005765825510025024,-0.002579424763098359,0.039921507239341736,0.005449709948152304,0.03628049045801163,0.06427926570177078,-0.021355092525482178,-0.01075925212353468,0.05276015028357506,-0.04455820843577385,0.024408170953392982,-0.007870402187108994,-0.020036766305565834,-0.0344637855887413,-0.026310747489333153,-0.04294106736779213,-0.007154806517064571,0.03129485249519348,0.04285399988293648,0.11186926066875458,0.060626111924648285,-0.052794866263866425,-0.00042565743206068873,-0.058105435222387314,0.028938405215740204,0.026955317705869675,-0.05529090017080307,0.0455370768904686,-0.05921076983213425,0.006952300667762756,-0.021240200847387314,-0.033511873334646225,0.005347438622266054,-0.05189405754208565,0.017335979267954826,-0.008194493129849434,-0.02023707702755928,0.07687586545944214,0.008282439783215523,0.028922107070684433,-0.005970506463199854,0.003020518459379673,-0.03017650544643402,0.06545894593000412,0.015031524933874607,0.008748318068683147,-0.010229232721030712,3.7598512827062227e-34,-0.02610691823065281,-0.022920548915863037,-0.00027932203374803066,-0.02909836545586586,-0.020522646605968475,-0.03274748846888542,0.059405066072940826,0.001622973708435893,-0.02689216658473015,-0.032392702996730804,0.010644568130373955]'
SET
  @HasCustomProps_5b80318f = 0
SET
  @HasCustomEvents_5b80318f = 0
SET
  @RequiresData_5b80318f = 0
SET
  @DependencyCount_5b80318f = 0
SET
  @TechnicalDesignVectorEmbeddingModelID_5b80318f = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @FunctionalRequirementsVectorEmbeddingModelID_5b80318f = N'1D45AA65-41EC-4572-9ECD-AB2826C9B059'
SET
  @HasRequiredCustomProps_5b80318f = 0
SET
  @ID_5b80318f = 'D08BCD9D-B26F-4C96-87E7-436DE63F18FF'
EXEC [${flyway:defaultSchema}].spUpdateComponent @Namespace = @Namespace_5b80318f,
  @Name = @Name_5b80318f,
  @Version = @Version_5b80318f,
  @VersionSequence = @VersionSequence_5b80318f,
  @Title = @Title_5b80318f,
  @Description = @Description_5b80318f,
  @Type = @Type_5b80318f,
  @Status = @Status_5b80318f,
  @DeveloperName = @DeveloperName_5b80318f,
  @DeveloperEmail = @DeveloperEmail_5b80318f,
  @DeveloperOrganization = @DeveloperOrganization_5b80318f,
  @SourceRegistryID = @SourceRegistryID_5b80318f,
  @ReplicatedAt = @ReplicatedAt_5b80318f,
  @LastSyncedAt = @LastSyncedAt_5b80318f,
  @Specification = @Specification_5b80318f,
  @FunctionalRequirements = @FunctionalRequirements_5b80318f,
  @TechnicalDesign = @TechnicalDesign_5b80318f,
  @FunctionalRequirementsVector = @FunctionalRequirementsVector_5b80318f,
  @TechnicalDesignVector = @TechnicalDesignVector_5b80318f,
  @HasCustomProps = @HasCustomProps_5b80318f,
  @HasCustomEvents = @HasCustomEvents_5b80318f,
  @RequiresData = @RequiresData_5b80318f,
  @DependencyCount = @DependencyCount_5b80318f,
  @TechnicalDesignVectorEmbeddingModelID = @TechnicalDesignVectorEmbeddingModelID_5b80318f,
  @FunctionalRequirementsVectorEmbeddingModelID = @FunctionalRequirementsVectorEmbeddingModelID_5b80318f,
  @HasRequiredCustomProps = @HasRequiredCustomProps_5b80318f,
  @ID = @ID_5b80318f;


-- End of SQL Logging Session
-- Session ID: d976bb3c-2837-465a-8ef9-1db8b1dd6498
-- Completed: 2025-08-30T02:52:09.164Z
-- Duration: 20574ms
-- Total Statements: 61














































































-- SQL Logging Session
-- Session ID: dc2af929-0baa-4340-b28e-73ed54fecf18
-- Started: 2025-08-30T19:45:01.161Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save MJ: Component Libraries (core SP call only)
DECLARE @ID_bf378f37 UNIQUEIDENTIFIER,
@Name_bf378f37 NVARCHAR(500),
@DisplayName_bf378f37 NVARCHAR(500),
@Version_bf378f37 NVARCHAR(100),
@GlobalVariable_bf378f37 NVARCHAR(255),
@Category_bf378f37 NVARCHAR(100),
@CDNUrl_bf378f37 NVARCHAR(1000),
@CDNCssUrl_bf378f37 NVARCHAR(1000),
@Description_bf378f37 NVARCHAR(MAX),
@Status_bf378f37 NVARCHAR(20),
@LintRules_bf378f37 NVARCHAR(MAX),
@Dependencies_bf378f37 NVARCHAR(MAX)
SET
  @ID_bf378f37 = 'BFD00569-1E06-450E-BFD0-FBD19EFF9BB6'
SET
  @Name_bf378f37 = N'ag-grid-react'
SET
  @DisplayName_bf378f37 = N'AG-Grid React'
SET
  @Version_bf378f37 = N'31.0.1'
SET
  @GlobalVariable_bf378f37 = N'AgGridReact'
SET
  @Category_bf378f37 = N'UI'
SET
  @CDNUrl_bf378f37 = N'https://unpkg.com/ag-grid-react@31.0.1/bundles/ag-grid-react.min.js'
SET
  @Description_bf378f37 = N'Correct library to use for React use of ag-grid, a sophisticated enterprise caliber data grid'
SET
  @Status_bf378f37 = N'Active'
SET
  @Dependencies_bf378f37 = N'{
  "ag-grid": "^31.0.1"
}'
EXEC [${flyway:defaultSchema}].spCreateComponentLibrary @ID = @ID_bf378f37,
  @Name = @Name_bf378f37,
  @DisplayName = @DisplayName_bf378f37,
  @Version = @Version_bf378f37,
  @GlobalVariable = @GlobalVariable_bf378f37,
  @Category = @Category_bf378f37,
  @CDNUrl = @CDNUrl_bf378f37,
  @CDNCssUrl = @CDNCssUrl_bf378f37,
  @Description = @Description_bf378f37,
  @Status = @Status_bf378f37,
  @LintRules = @LintRules_bf378f37,
  @Dependencies = @Dependencies_bf378f37;

-- Save MJ: Component Libraries (core SP call only)
DECLARE @Name_8a870500 NVARCHAR(500),
@DisplayName_8a870500 NVARCHAR(500),
@Version_8a870500 NVARCHAR(100),
@GlobalVariable_8a870500 NVARCHAR(255),
@Category_8a870500 NVARCHAR(100),
@CDNUrl_8a870500 NVARCHAR(1000),
@CDNCssUrl_8a870500 NVARCHAR(1000),
@Description_8a870500 NVARCHAR(MAX),
@Status_8a870500 NVARCHAR(20),
@LintRules_8a870500 NVARCHAR(MAX),
@Dependencies_8a870500 NVARCHAR(MAX),
@ID_8a870500 UNIQUEIDENTIFIER
SET
  @Name_8a870500 = N'ag-grid'
SET
  @DisplayName_8a870500 = N'AG-Grid'
SET
  @Version_8a870500 = N'31.0.1'
SET
  @GlobalVariable_8a870500 = N'agGrid'
SET
  @Category_8a870500 = N'UI'
SET
  @CDNUrl_8a870500 = N'https://cdn.jsdelivr.net/npm/ag-grid-community@31.0.1/dist/ag-grid-community.min.js'
SET
  @CDNCssUrl_8a870500 = N'https://cdn.jsdelivr.net/npm/ag-grid-community@31.0.1/styles/ag-grid.css'
SET
  @Description_8a870500 = N'Base AG-Grid grid with sorting, filtering, and editing. Use the ag-grid-react library for React coding'
SET
  @Status_8a870500 = N'Active'
SET
  @ID_8a870500 = 'F7881AA4-83AF-4841-8475-55BBFD5187CC'
EXEC [${flyway:defaultSchema}].spUpdateComponentLibrary @Name = @Name_8a870500,
  @DisplayName = @DisplayName_8a870500,
  @Version = @Version_8a870500,
  @GlobalVariable = @GlobalVariable_8a870500,
  @Category = @Category_8a870500,
  @CDNUrl = @CDNUrl_8a870500,
  @CDNCssUrl = @CDNCssUrl_8a870500,
  @Description = @Description_8a870500,
  @Status = @Status_8a870500,
  @LintRules = @LintRules_8a870500,
  @Dependencies = @Dependencies_8a870500,
  @ID = @ID_8a870500;


-- End of SQL Logging Session
-- Session ID: dc2af929-0baa-4340-b28e-73ed54fecf18
-- Completed: 2025-08-30T19:45:20.185Z
-- Duration: 19024ms
-- Total Statements: 2
