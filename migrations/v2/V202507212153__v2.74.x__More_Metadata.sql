-- SQL Logging Session
-- Session ID: 6adbf0ba-5f96-4a11-bcf4-7a6decf5f820
-- Started: 2025-07-22T02:47:53.689Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateContent @TemplateID = '66428D1F-BB4F-42E0-8154-F4919568A260',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = N'# Fix the JSON below. Output ONLY the corrected JSON.

# Parsing Error
{{ ERROR_MESSAGE | safe }}

# Rules
These are suggestions, do what is needed to make the Malformed JSON compliant so it can be parsed by `JSON.parse()` in JavaScript.
- Add missing commas between elements
- Add missing closing brackets: } or ]
- Fix quote issues (use double quotes for keys and string values)
- Remove trailing commas if they cause errors
- Do not add extra fields
- Do not remove existing fields
- Keep all original data
- **CRITICAL** - do not make up JSON, if the Malformed JSON is not JSON and is just text, or something else, response back with `{ error: "not_json" }`

# Malformed JSON
{{ MALFORMED_JSON | safe }}

# Response Format
- Only tokens to return are the corrected JSON

# CRITICAL
**DO NOT OUTPUT ANY COMMENTARY OR ANYTHING ELSE OTHER THAN THE CORRECTED JSON**',
@Priority = 1,
@IsActive = 1,
@ID = 'B32F4EFB-4AFA-489E-91B1-81BA785E1207';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '66428D1F-BB4F-42E0-8154-F4919568A260',
@Name = N'MALFORMED_JSON',
@Description = N'The malformed JSON string that needs to be corrected',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '7FBB578C-5EDA-49EC-B743-165F0BF0FAA1';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '66428D1F-BB4F-42E0-8154-F4919568A260',
@Name = N'ERROR_MESSAGE',
@Description = N'Error message displayed when there is a parsing error',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'FAA74C5D-59B7-4D80-9291-3F41DCDF1AC9';

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateAIPrompt @Name = N'Repair JSON',
@Description = N'Repairs malformed JSON strings by correcting syntax errors such as missing commas, brackets, or quotes. Outputs the corrected JSON string.',
@TemplateID = '66428D1F-BB4F-42E0-8154-F4919568A260',
@CategoryID = '7D2DEF7F-138F-4620-8309-33964A97A997',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = N'Active',
@ResponseFormat = N'Any',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = N'Specific',
@PowerPreference = N'Lowest',
@ParallelizationMode = N'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = N'string',
@OutputExample = NULL,
@ValidationBehavior = N'Warn',
@MaxRetries = 0,
@RetryDelayMS = 0,
@RetryStrategy = N'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = N'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = N'System',
@PromptPosition = N'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL,
@FailoverStrategy = N'SameModelDifferentVendor',
@FailoverMaxAttempts = 3,
@FailoverDelaySeconds = 5,
@FailoverModelStrategy = N'PreferSameModel',
@FailoverErrorScope = N'All',
@ID = '58658DAE-C1CE-4621-9540-0735FE98414E';

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateContent @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = N'# Loop Agent System Prompt

You operate in a continuous loop pattern, working iteratively to complete the user''s goal.

## Current State
**Payload:** Represents your work state. Request changes via `payloadChangeRequest`.
```json
{{ _CURRENT_PAYLOAD | dump | safe }}
```

{%- if parentAgentName == '''' and subAgentCount > 0 -%}
## Role: Top-Level Agent
You have {{subAgentCount}} sub-agents. Delegate appropriately.
{%- elseif parentAgentName != '''' -%}
## Role: Sub-Agent
Parent: {{ parentAgentName }}. Your results return to parent, not user.
{%- endif -%}

{%- if subAgentCount > 0 or actionCount > 0 -%}
## Capabilities
{%- if subAgentCount > 0 -%}
### Sub-Agents ({{subAgentCount}} available)
Execute one at a time. Their completion â‰  your task completion.
{{ subAgentDetails | safe }}
{%- endif -%}

{%- if actionCount > 0 -%}
### Actions ({{actionCount}} available)
Execute multiple in parallel if independent. Retry failed actions up to 3x with adjusted parameters.
{{ actionDetails | safe }}
{%- endif -%}
{%- endif -%}

## Execution Pattern
Each iteration:
1. Assess progress toward complete goal
2. Identify remaining work
3. Choose next step:
   - Continue reasoning
   {% if subAgentCount > 0 %}- Invoke sub-agent{% endif %}
   {% if actionCount > 0 %}- Execute action(s){% endif %}
4. Loop until done or blocked

Stop only when: task fully complete OR unrecoverable failure.

# Agent: {{ agentName }}
{{ agentDescription | safe }}

## Specialization
{{ agentSpecificPrompt | safe }}

# Response Format
Return ONLY valid JSON per this schema:
```ts
import { AgentPayloadChangeRequest } from "@memberjunction/ai-core-plus";

/**
 * Response structure for Loop Agent Type
 */
export interface LoopAgentResponse<P = any> {
    /**
     * Task completion status. true = terminate loop, false = continue
     */
    taskComplete?: boolean;
    
    /**
     * Plain text message (<100 words). Required for ''Chat'' type, omit for others
     */
    message?: string;

    /**
     * Payload changes. Omit if no changes needed
     */
    payloadChangeRequest?: AgentPayloadChangeRequest<P>;
    
    /**
     * Internal reasoning for debugging
     */
    reasoning?: string;
    
    /**
     * Confidence level (0.0-1.0)
     */
    confidence?: number;

    /**
     * Next action. Required when taskComplete=false
     */
    nextStep?: {
        /**
         * Operation type: ''Actions'' | ''Sub-Agent'' | ''Chat''
         */
        type: ''Actions'' | ''Sub-Agent'' | ''Chat'';
        
        /**
         * Actions to execute (when type=''Actions'')
         */
        actions?: Array<{
            name: string;
            params: Record<string, unknown>;
        }>;
         
        /**
         * Sub-agent details (when type=''Sub-Agent'')
         */
        subAgent?: {
            name: string;

            /**
             * Instructions for the sub-agent, NOT the payload, that is handled elsewhere
             */
            message: string;  

            /**
             * Extra parameters - NOT the payload, only use these if the sub-agent 
             * specifically **defines** parameters in its metadata, otherwise these will be
             * ignored and waste tokens!
             */
            templateParameters?: Record<string, any>;

            /**
             * true=end parent, false=continue
             */
            terminateAfter: boolean; 
        };
    };
}

//\n/**
 * Defines a structured way to request changes to the payload. If you are making a COMPLEX change to an object
 * you can either use `updateElements` as described below to make **surgical** changes to the payload, OR, a simple
 * approach is to use `replaceElements` to remove the entire object and replace it with a new object.
 * 
 * If you are providing the ENTIRE object again, use the **replaceElements** instead of **updateElements** approach like this:
 * {
 *   replaceElements: {
 *     user: { // user object will REPLACE the entire existing object
 *       id: "new-id",
 *       name: "new-name"
 *       moreComplexData: {
 *         keyA: "valA",
 *         keyB: "valB"
 *       }
 *     }
 *   }
 * }
 * 
 * Alternatively, to make surgical changes review the documentation below for @see updateElements where you can make
 * small incremental additions/updates/removals to the payload which is more token efficient and cleaner.
 */
export type AgentPayloadChangeRequest<P = any> = {
    /**
     * A partial of P that includes all new elements added that were **not** previously present in
     * the payload prior to the prompt execution. This allows the AI to specify the new elements
     * to be added clearly here. The structure is identical to the payload type P with just the
     * portions filled out that need to be added.
     * 
     * To add a new item:
     * 
     * {    
     *   "newItem": "newValue"
     * }
     * To add multiple new items:
     * 
     * {
     *   newItem1: "newValue1",
     *   newItem2: "newValue2"
     * }
     */
    newElements?: Partial<P>;

    /**
     * A partial of P that includes all elements that should be updated in the payload.
     * The structure is identical to the payload type P with just the portions filled out
     * that need to be updated. **DO NOT INCLUDE ELEMENTS THAT ARE NOT CHANGING**.
     * 
     * Example - update single item:
     *  {
     *     "itemToUpdate": "newValue"
     *  }
     * 
     *  To update multiple items:
     *  {
     *      itemToUpdate1: "newValue1",
     *      itemToUpdate2: "newValue2"
     *  }
     * 
     *  Arrays: Include placeholder objects `{}` for items that are being kept in the array.
     *  For example, if the payload was:
     *  {
     *      items: [
     *          {}, // placeholder object is ignored
     *          { someKey: ''this is a new value for someKey'' },
     *          {} // placeholder object is ignored - since it is trailing, can be ommitted, this is for illustration
     *      ]
     *  }
     * 
     * DELETION WITHIN UPDATES:
     * You can use "__DELETE__" within updateElements to remove properties or array elements at any depth:
     * 
     * Deleting object properties:
     * {
     *   updateElements: {
     *     user: {
     *       name: "New Name",      // update this property
     *       tempData: "__DELETE__"   // remove this property
     *     }
     *   }
     * }
     * 
     * Deleting array elements:
     * {
     *   updateElements: {
     *     items: [
     *       {},          // keep item 0
     *       "__DELETE__",  // remove item 1
     *       { value: 5 }, // update item 2
     *       "__DELETE__"   // remove item 3
     *     ]
     *   }
     * }
     * 
     * Complex nested example - updating and deleting within deep structures:
     * {
     *   updateElements: {
     *     dataRequirements: {
     *       dynamicData: {
     *         requiredEntities: [
     *           {
     *             displayFields: ["Name", "UpdatedAt"], // update array
     *             fieldMetadata: [
     *               {},          // keep field 0
     *               {},          // keep field 1
     *               {},          // keep field 2
     *               "__DELETE__"   // remove field 3 (e.g., LastUpdated)
     *             ],
     *             oldProperty: "__DELETE__"  // remove this property
     *           }
     *         ]
     *       }
     *     }
     *   }
     * }
     * 
     * IMPORTANT: When using "__DELETE__" in arrays, deletions are processed after updates at each depth level,
     * ensuring correct index management. Multiple deletions in the same array are handled properly.
     * 
     * Alternative for complete replacement: If you need to completely replace a complex structure,
     * you can use replaceElements pattern INSTEAD of updateElements:
     * {
     *   replaceElements: { complexObject: { keyA: "valA", keyB: "valB" } } // This replaces the entire complexObject
     * }
     */
    updateElements?: Partial<P>;

    /**
     * This partial of P includes all elements that should be replaced in the payload.
     * The structure is identical to the payload type P with just the portions filled out
     * that need to be replaced. This is useful when you want to replace an entire object
     * or array with a new version. See @see updateElements for surgical updates instead of doing
     * complete replacements.
     */
    replaceElements?: Partial<P>;

    /**
     * This partial of P includes all elements that should be removed from the payload. When an
     * item needs to be removed, include the item here with a value of "__DELETE__".
     * 
     * For 1 removal:
     * {
     *   itemToRemove: ''__DELETE__''
     * }
     * 
     * This indicates that the itemToRemove should be removed from the payload.
     * 
     * For multiple removals:
     * {
     *   itemToRemove1: ''__DELETE__'',
     *   itemToRemove2: ''__DELETE__''
     * }
     * 
     * Arrays: Include placeholder objects `{}` for items that are being kept in the array.
     * For updating object elements in arrays, only include the properties to change:
     * 
     * Original array:
     * {
     *   items: [
     *     { id: 1, name: "Item 1", value: 100 },
     *     { id: 2, name: "Item 2", value: 200 },
     *     { id: 3, name: "Item 3", value: 300 }
     *   ]
     * }
     * 
     * To update only the value of the second item:
     * {
     *   items: [
     *     {}, // placeholder - keeps item 1 unchanged
     *     { value: 250 }, // updates ONLY the value property of item 2
     *     {} // placeholder - keeps item 3 unchanged (can be omitted if trailing)
     *   ]
     * }
     * 
     * Result after merge:
     * {
     *   items: [
     *     { id: 1, name: "Item 1", value: 100 },
     *     { id: 2, name: "Item 2", value: 250 }, // only value changed
     *     { id: 3, name: "Item 3", value: 300 }
     *   ]
     * }
     * 
     * NOTE: For token efficiency, do **NOT** emit array elements that are being **kept** 
     * instead emit empty objects `{}` for items being kept.  
     * 
     * NESTED OBJECTS:
     * {
     *   nestedObject: {
     *     itemToRemove: ''__DELETE__''
     *   }
     * }
     * 
     * In this case if there was a payload like this:
     * {
     *   nestedObject: {
     *    itemToRemove: ''value'',
     *    itemToKeep: ''value''
     *   },
     *   anotherItemToRemove: ''__DELETE__'',
     *   anotherItemToKeep: 12345  
     * }
     *
     * The result of the operation would be :
     * {
     *   nestedObject: {
     *     itemToKeep: ''value''
     *   },
     *   anotherItemToKeep: 12345
     * }
     */
    removeElements?: Partial<P>;

    /**
     * Description of the reasoning behind the changes requested.
     */
    reasoning?: string;
}
```

## Key Rules
- `taskComplete`: true only when ENTIRE user request fulfilled
- `payloadChangeRequest`: Include only changes (new/update/remove)
- `terminateAfter`: Usually false - review sub-agent results before completing
{% if subAgentCount == 0 %}- No sub-agents available{% endif %}
{% if actionCount == 0 %}- No actions available{% endif %}

# **CRITICAL**
Your **entire** response must be only JSON with no leading or trailing characters!',
@Priority = 1,
@IsActive = 1,
@ID = '1C4B8853-04B8-4BF1-92D6-B102436837D7';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'actionCount',
@Description = N'Number of available actions that can be executed, shown in capabilities and execution logic',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '45998072-D862-4550-BA01-3F28E5C48CDE';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'subAgentDetails',
@Description = N'Details or list output for available sub-agents rendered as safe HTML or text',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '78EE7440-A988-45A3-B7DC-40C2C521743D';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'subAgentCount',
@Description = N'Number of sub-agents available for delegation and capabilities display',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '75AB72C0-DA63-47EF-AD18-4E758186628E';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'agentDescription',
@Description = N'Brief description of the agent shown in the agent section',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '9B5491C6-68A5-4BB9-B945-4F152EC4F159';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'parentAgentName',
@Description = N'Name of the parent agent to determine agent role (top-level or sub-agent)',
@Type = N'Scalar',
@DefaultValue = N''''' (empty string)',
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'BB04E562-96A7-4A6D-A3CA-50FA8786D752';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'agentName',
@Description = N'Name of the agent to identify in the prompt output',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'A4BBF656-2403-422E-A3C4-630F9ED5AF06';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'actionDetails',
@Description = N'Details or list output for available actions rendered as safe HTML or text',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'F5494D19-064C-4428-B1BE-6B6E35A9ACFC';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'subAgentDetails',
@Description = N'Details or list output for available sub-agents rendered as safe HTML or text',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'D850831D-0655-41D0-9820-70198FC7B2CD';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'subAgentCount',
@Description = N'Number of sub-agents available for delegation and capabilities display',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'F5254B05-509D-474C-809B-78070AB1FE7D';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'agentSpecificPrompt',
@Description = N'Specialized prompt or instructions for the agent shown under specialization',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '7F96CEC4-1E52-4A4F-951F-8CA30668D6C1';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'agentName',
@Description = N'Name of the agent to identify in the prompt output',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '2D1EB822-9101-43FF-B217-A637535508C8';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'agentSpecificPrompt',
@Description = N'Specialized prompt or instructions for the agent shown under specialization',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '2CA590FB-7E6A-41B1-AD1D-C55A30D6B27F';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'actionDetails',
@Description = N'Details or list output for available actions rendered as safe HTML or text',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '85001831-9A63-4711-B3E2-D40323FED1C9';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'agentDescription',
@Description = N'Brief description of the agent shown in the agent section',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '7F0027DA-F662-4C4D-AC66-EDC84A9DBF0C';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'parentAgentName',
@Description = N'Name of the parent agent to determine agent role (top-level or sub-agent)',
@Type = N'Scalar',
@DefaultValue = N''''' (empty string)',
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = '4B7703EE-40C7-4B13-8C8A-F948D0950FB3';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateParam @TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@Name = N'actionCount',
@Description = N'Number of available actions that can be executed, shown in capabilities and execution logic',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL,
@ID = 'ADEF6864-F5D6-497C-B5B2-FA7F9C6C62A1';

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateAIPrompt @Name = N'Loop Agent Type: System Prompt',
@Description = N'Basic control structure for the Loop Agent Type',
@TemplateID = '8E5F83E5-837B-4C53-9171-08272BF605A4',
@CategoryID = '838572BE-9464-4935-BC34-4806FD80A69C',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = N'Active',
@ResponseFormat = N'Any',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = N'Specific',
@PowerPreference = N'Highest',
@ParallelizationMode = N'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = N'object',
@OutputExample = N'{
  "taskComplete?": "[BOOLEAN: true if task is fully complete, false if more steps needed, defaults to false]",
  "message?": "[STRING: A brief, human-readable message about current status or final result. Limit to 100 words.]",
  "payloadChangeRequest*": {
    "[NOTE]": "Follow the format of AgentPayloadChangeRequest. OMIT payloadChangeRequest entirely if no changes are needed."
  },
  "reasoning?": "[STRING: Your internal explanation of why you made this decision - helps with debugging]",
  "confidence?": "[OPTIONAL NUMBER: 0.0 to 1.0 indicating confidence in this decision]",
  "nextStep?": {
    "type?": "REQUIRED: Should be one of the options in the type definition. If not provided, if subAgent key provided it will default to ''subAgent'' and if actions key is provided it will default to ''actions''. If type is not provided and neither actions or subAgent keys are specified, it will be an error condition!",
    "actions?": [
      {
        "name": "[STRING: The exact name from available actions list]",
        "params*": {
          "[PARAM_NAME]": "[PARAM_VALUE: Must match action''s expected parameters]",
          "[ANOTHER_PARAM]": "[Value matching the action''s parameter type]"
        }
      }
    ],
    "subAgent?": {
      "name": "[STRING: The exact name from available sub-agents list]",
      "message": "[STRING: Complete context and instructions for the sub-agent - they don''t see conversation history]",
      "templateParameters*": {
        "[TEMPLATE_PARAM_NAME]": "[VALUE: If sub-agent has template parameters, provide values here]"
      },
      "terminateAfter?": "[BOOLEAN: true to end parent agent after sub-agent completes, false to continue]"
    }
  }
}',
@ValidationBehavior = N'Warn',
@MaxRetries = 2,
@RetryDelayMS = 1000,
@RetryStrategy = N'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = N'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = N'System',
@PromptPosition = N'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL,
@FailoverStrategy = N'SameModelDifferentVendor',
@FailoverMaxAttempts = NULL,
@FailoverDelaySeconds = NULL,
@FailoverModelStrategy = N'PreferSameModel',
@FailoverErrorScope = N'All',
@ID = 'FF7D441F-36E1-458A-B548-0FC2208923BE';

-- Save MJ: AI Prompt Models (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateAIPromptModel @PromptID = 'C1D7FE6B-287B-4B3F-8618-4CDBCF1394BB',
@ModelID = '71A6513F-1757-4FE5-9E78-0069198607C0',
@VendorID = 'E3A5CCEC-6A37-EF11-86D4-000D3A4E707E',
@ConfigurationID = NULL,
@Priority = 1,
@ExecutionGroup = 0,
@ModelParameters = NULL,
@Status = N'Active',
@ParallelizationMode = N'None',
@ParallelCount = 1,
@ParallelConfigParam = NULL,
@ID = '85E70E19-4C33-43E0-A150-016D122E0AA6';

-- Save Templates (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplate @ID = '9fe0ebc4-ff3f-44cf-ad31-aa1a191cd291',
@Name = N'SQL Query Parameter Extraction',
@Description = N'Template for AI Prompt: SQL Query Parameter Extraction',
@CategoryID = 'B09D433E-F36B-1410-8DB1-00021F8B792E',
@UserPrompt = NULL,
@UserID = 'ECAFCCEC-6A37-EF11-86D4-000D3A4E707E',
@ActiveAt = NULL,
@DisabledAt = NULL,
@IsActive = 1;

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateContent @ID = '15574dec-2e10-41e3-9e5b-b8a25cf0bd7a',
@TemplateID = '9FE0EBC4-FF3F-44CF-AD31-AA1A191CD291',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = N'You are an expert at parsing Nunjucks templates. You are also an expert at SQL Server queries. 
Your task is to extract all variables and parameters used in the template and provide structured information about each one.

## SQL Query Template: 
{{ templateText }}

## Instructions:
Identify ALL variables used in the template, including:
1. Simple variables: {% raw %}{{ variableName }}{% endraw %}
2. Object properties: {% raw %}{{ user.email }}{% endraw %}, {% raw %}{{ data.items[0].name }}{% endraw %}
3. Variables in conditionals: {% raw %}{% if isActive %}{% endraw %}, {% raw %}{% if user.role == "admin" %}{% endraw %}
4. Loop variables: {% raw %}{% for item in items %}{% endraw %}, {% raw %}{% for key, value in object %}{% endraw %}
5. Variables in filters: {% raw %}{{ name | default(userName) }}{% endraw %}
6. Variables in function calls: {% raw %}{{ formatDate(createdAt) }}{% endraw %}
7. Variables in assignments: {% raw %}{% set total = price * quantity %}{% endraw %}

## **IMPORTANT** 
Do NOT include variables that are shown within {% raw %}{% raw %}{% endraw %}{% endraw %} blocks, those are for illustrative purposes and part of an illustration of what another template might have. Only consider variables that are **NOT** part of raw blocks to be valid for the purpose of this request.

For nested object references (like user.email), extract only the TOP-LEVEL variable name (user).

## Output Format: 
Return a JSON array of parameter objects with this structure:

```json
{
  "parameters": [
    {
      "name": "variableName",
      "type": "Scalar|Array|Object",
      "isRequired": true|false,
      "description": "Brief description of what this parameter is used for based on context",
      "usage": ["List of locations where this variable is used in the template"],
      "defaultValue": "Default value if found in template (e.g., from default filter)"
    }
  ],
  "selectClause": [
    {
        "name": "name of field in the result of the query",  
        "dynamicName": true, // only true if the name of the field in the result is calculated in the nunjucks template. Uncommon but possible
        "description": "Description of what this field will contain",
        "type": "number|string|date|boolean",
        "optional": false // usually false, only true if the field is part of an IF block and sometimes not emitted based on parameter values
    }
  ],
  "fromClause": [
    {
        "schemaName": "name of the schema the view is in",
        "baseView": "name of the view - always selecting from base views, not tables",
        "alias": "if an alias was used in the query for this base view, indicate it here"
    }
  ]
}
```

## Rules:
1. Only include each variable ONCE (deduplicate)
2. Ignore Nunjucks built-in variables (loop, super, etc.)
3. Ignore {% raw %}single curly braces like { and } --- only look for double curly braces {{ and }} for true nunjucks params {% endraw %}
4. For type detection:
   - If used in {% raw %}{% for x in variable %}{% endraw %} â†’ type is "Array"
   - If properties are accessed (variable.property) â†’ type is "Object"
   - Otherwise â†’ type is ''string'' | ''number'' | ''date'' | ''boolean'' - you can infer the type based on its use. When in doubt, use `string` 
5. Include meaningful descriptions based on usage context

## Example:
Template:
{% raw %}
```sql
SELECT 
   COUNT(*) TotalAccounts,
   SUM(a.Revenue) TotalAccountRevenue,
{% if extraSumField != "" and extraSumFieldAlias != "" }
   SUM({{ extraSumField | sqlIdentifier }}) {{ extraSumFieldAlias | sqlIdentifier }},
{% endif %}
   a.City,
   a.Country,
   a.Region,
   a.Industry
   i.AverageFirmRevenue,
   i.NumFirms
FROM
   crm.vwAccounts a
INNER JOIN
   crm.vwIndustries i
ON
   a.IndustryID = i.ID
WHERE
   a.Country IN {{ countryList | sqlIn }} AND
   i.NumFirms >= {{ minIndustryFirmCount | sqlNumber }} AND
   a.__mj_CreatedAt >= {{ accountsCreatedOnOrAfter | sqlDate }}
GROUP BY
   a.City,
   a.Country,
   a.Region,
   a.Industry,
   i.AverageFirmRevenue,
   i.NumFirms
{% if orderByClause }
ORDER BY
   {{ orderByClause | sqlNoKeywordsExpression }} -- this means that we run through a filter making sure no keywords are included to prevent common SQL injection attacks
{% endif %}
{% endraw %}
```

Example Output for the above template:
```json
{
  "parameters": [
    {
      "name": "extraSumField",
      "type": "string",
      "isRequired": false, // not required because if not provided query adapts
      "description": "Field used for an extra sum in the aggregation",
      "usage": ["example usage", "example usage 2", "example usage 3"],
      "defaultValue": null
    },
    {
      "name": "extraSumFieldAlias",
      "type": "string",
      "isRequired": false, // not required because if not provided query adapts
      "description": "If extraSumField is provided, this is the alias used for the summation operation",
      "usage": ["example usage", "example usage 2", "example usage 3"],
      "defaultValue": null
    },
    {
      "name": "countryList",
      "type": "array",
      "isRequired": true, // required because query will not run without this
      "description": "Array of countries to filter the query on",
      "usage": ["example usage", "example usage 2"],
      "defaultValue": null
    },
    {
      "name": "minIndustryFirmCount",
      "type": "number",
      "isRequired": true, // required because query will not run without this
      "description": "filter condition to include only industries where NumFirms >= this amount",
      "usage": ["example usage"],
      "defaultValue": null
    },
    {
      "name": "accountsCreatedOnOrAfter",
      "type": "date",
      "isRequired": true, // required because query will not run without this
      "description": "filter condition to include only accounts created on/after this date",
      "usage": ["example usage"],
      "defaultValue": null
    },
    {
      "name": "orderByClause",
      "type": "string",
      "isRequired": false, // NOT required because query will adapt without this
      "description": "Sorting clause to be used when provided to order the results",
      "usage": ["example usage"],
      "defaultValue": null
    }
  ],
  "selectClause": [
    {
        "name": "TotalAccounts",
        "description": "Total number of accounts for each grouping",
        "type": "number",
        "optional": false // field is always returned
    },
    {
        "name": "TotalAccountRevenue",
        "description": "Total revenue for all accounts, combined, for each grouping",
        "type": "number",
        "optional": false
    },
    {
        "name": "extraSumFieldAlias", // parameter name the field ends up having as its name 
        "dynamicName": true, // indicates the name of the field in the result is dynamic, derived from the parameter specified
        "description": "Additional Summary based on provided paramater: extraSumField",
        "type": "number",
        "optional": true
    },
    {
        "name": "City",
        "description": "City name for the grouping",
        "type": "string",
        "optional": false
    },
    {
        "name": "Country",
        "description": "Country name for the grouping",
        "type": "string",
        "optional": false
    },
    {
        "name": "Region",
        "description": "Region name for the grouping",
        "type": "string",
        "optional": false
    },
    {
        "name": "Industry",
        "description": "Name of the industry for the grouping",
        "type": "string",
        "optional": false
    },
    {
        "name": "AverageFirmRevenue",
        "description": "Average Revenue for the industry in this grouping",
        "type": "number",
        "optional": false
    },
    {
        "name": "NumFirms",
        "description": "Total # of firms for the industry in this grouping",
        "type": "number",
        "optional": false
    },
  ],
  "fromClause": [
    {
        "schemaName": "crm",
        "baseView": "vwAccounts",
        "alias": "a"
    },
    {
        "schemaName": "crm",
        "baseView": "vwIndustries",
        "alias": "i"
    }
  ]
}
```',
@Priority = 1,
@IsActive = 1;

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPrompt @ID = '8bf32885-8504-4daf-87ae-695e09f1bc3a',
@Name = N'SQL Query Parameter Extraction',
@Description = N'Extracts Nunjucks variables and their types from Query strings',
@TemplateID = '9FE0EBC4-FF3F-44CF-AD31-AA1A191CD291',
@CategoryID = '7D2DEF7F-138F-4620-8309-33964A97A997',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = N'Active',
@ResponseFormat = N'JSON',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = N'Specific',
@PowerPreference = N'Highest',
@ParallelizationMode = N'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = N'object',
@OutputExample = N'{
  "parameters": [
    {
      "name": "customerName",
      "type": "Scalar",
      "isRequired": true,
      "description": "The name of the customer",
      "usage": ["greeting header", "personalization"],
      "defaultValue": null
    },
    {
      "name": "orderItems",
      "type": "Array",
      "isRequired": false,
      "description": "List of items in the customer''s order",
      "usage": ["order details section", "item iteration"],
      "defaultValue": null
    },
    {
      "name": "companyInfo",
      "type": "Object",
      "isRequired": true,
      "description": "Company information object containing name, address, and contact details",
      "usage": ["footer section", "contact information"],
      "defaultValue": null
    }
  ]
}',
@ValidationBehavior = N'Strict',
@MaxRetries = 2,
@RetryDelayMS = 1000,
@RetryStrategy = N'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = N'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = N'System',
@PromptPosition = N'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL,
@FailoverStrategy = N'SameModelDifferentVendor',
@FailoverMaxAttempts = 3,
@FailoverDelaySeconds = 5,
@FailoverModelStrategy = N'PreferSameModel',
@FailoverErrorScope = N'All';

-- Save MJ: AI Prompt Models (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateAIPromptModel @ID = 'da560aa4-35da-4eda-81ac-a74d196e102f',
@PromptID = '8BF32885-8504-4DAF-87AE-695E09F1BC3A',
@ModelID = '71A6513F-1757-4FE5-9E78-0069198607C0',
@VendorID = 'E3A5CCEC-6A37-EF11-86D4-000D3A4E707E',
@ConfigurationID = NULL,
@Priority = 1,
@ExecutionGroup = 0,
@ModelParameters = NULL,
@Status = N'Active',
@ParallelizationMode = N'None',
@ParallelCount = 1,
@ParallelConfigParam = NULL;


-- End of SQL Logging Session
-- Session ID: 6adbf0ba-5f96-4a11-bcf4-7a6decf5f820
-- Completed: 2025-07-22T02:48:27.850Z
-- Duration: 34161ms
-- Total Statements: 27





































-- SQL Logging Session
-- Session ID: eb4d799e-bec9-4e93-ad3e-c5c98d108598
-- Started: 2025-07-22T02:52:57.305Z
-- Description: MetadataSync push operation
-- Format: Migration-ready with Flyway schema placeholders
-- Generated by MemberJunction SQLServerDataProvider

-- Save Template Contents (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateTemplateContent @TemplateID = '9FE0EBC4-FF3F-44CF-AD31-AA1A191CD291',
@TypeID = 'E7AFCCEC-6A37-EF11-86D4-000D3A4E707E',
@TemplateText = N'You are an expert at parsing Nunjucks templates. You are also an expert at SQL Server queries. 
Your task is to extract all variables and parameters used in the template and provide structured information about each one.

## SQL Query Template: 
{{ templateText }}

## Instructions:
Identify ALL variables used in the template, including:
1. Simple variables: {% raw %}{{ variableName }}{% endraw %}
2. Object properties: {% raw %}{{ user.email }}{% endraw %}, {% raw %}{{ data.items[0].name }}{% endraw %}
3. Variables in conditionals: {% raw %}{% if isActive %}{% endraw %}, {% raw %}{% if user.role == "admin" %}{% endraw %}
4. Loop variables: {% raw %}{% for item in items %}{% endraw %}, {% raw %}{% for key, value in object %}{% endraw %}
5. Variables in filters: {% raw %}{{ name | default(userName) }}{% endraw %}
6. Variables in assignments: {% raw %}{% set total = price * quantity %}{% endraw %}

## **IMPORTANT** 
Do NOT include variables that are shown within {% raw %}{% raw %}{% endraw %}{% endraw %} blocks, those are for illustrative purposes and part of an illustration of what another template might have. Only consider variables that are **NOT** part of raw blocks to be valid for the purpose of this request.

For nested object references (like user.email), extract only the TOP-LEVEL variable name (user).

## Output Format: 
Return a JSON array of parameter objects with this structure:

```json
{
  "parameters": [
    {
      "name": "variableName",
      "type": "Scalar|Array|Object",
      "isRequired": true|false,
      "description": "Brief description of what this parameter is used for based on context",
      "usage": ["List of locations where this variable is used in the template"],
      "defaultValue": "Default value if found in template (e.g., from default filter)"
    }
  ],
  "selectClause": [
    {
        "name": "name of field in the result of the query",  
        "dynamicName": true, // only true if the name of the field in the result is calculated in the nunjucks template. Uncommon but possible
        "description": "Description of what this field will contain",
        "type": "number|string|date|boolean",
        "optional": false // usually false, only true if the field is part of an IF block and sometimes not emitted based on parameter values
    }
  ],
  "fromClause": [
    {
        "schemaName": "name of the schema the view is in",
        "baseView": "name of the view - always selecting from base views, not tables",
        "alias": "if an alias was used in the query for this base view, indicate it here"
    }
  ]
}
```

## Rules:
1. Only include each variable ONCE (deduplicate)
2. Ignore Nunjucks built-in variables (loop, super, etc.)
3. Ignore {% raw %}single curly braces like { and } --- only look for double curly braces {{ and }} for true nunjucks params {% endraw %}
4. For type detection:
   - If used in {% raw %}{% for x in variable %}{% endraw %} â†’ type is "Array"
   - If properties are accessed (variable.property) â†’ type is "Object"
   - Otherwise â†’ type is ''string'' | ''number'' | ''date'' | ''boolean'' - you can infer the type based on its use. When in doubt, use `string` 
5. Include meaningful descriptions based on usage context

## Example:
Template:
{% raw %}
```sql
SELECT 
   COUNT(*) TotalAccounts,
   SUM(a.Revenue) TotalAccountRevenue,
{% if extraSumField != "" and extraSumFieldAlias != "" }
   SUM({{ extraSumField | sqlIdentifier }}) {{ extraSumFieldAlias | sqlIdentifier }},
{% endif %}
   a.City,
   a.Country,
   a.Region,
   a.Industry
   i.AverageFirmRevenue,
   i.NumFirms
FROM
   crm.vwAccounts a
INNER JOIN
   crm.vwIndustries i
ON
   a.IndustryID = i.ID
WHERE
   a.Country IN {{ countryList | sqlIn }} AND
   i.NumFirms >= {{ minIndustryFirmCount | sqlNumber }} AND
   a.__mj_CreatedAt >= {{ accountsCreatedOnOrAfter | sqlDate }}
GROUP BY
   a.City,
   a.Country,
   a.Region,
   a.Industry,
   i.AverageFirmRevenue,
   i.NumFirms
{% if orderByClause }
ORDER BY
   {{ orderByClause | sqlNoKeywordsExpression }} -- this means that we run through a filter making sure no keywords are included to prevent common SQL injection attacks
{% endif %}
{% endraw %}
```

Example Output for the above template:
```json
{
  "parameters": [
    {
      "name": "extraSumField",
      "type": "string",
      "isRequired": false, // not required because if not provided query adapts
      "description": "Field used for an extra sum in the aggregation",
      "usage": ["example usage", "example usage 2", "example usage 3"],
      "defaultValue": null
    },
    {
      "name": "extraSumFieldAlias",
      "type": "string",
      "isRequired": false, // not required because if not provided query adapts
      "description": "If extraSumField is provided, this is the alias used for the summation operation",
      "usage": ["example usage", "example usage 2", "example usage 3"],
      "defaultValue": null
    },
    {
      "name": "countryList",
      "type": "array",
      "isRequired": true, // required because query will not run without this
      "description": "Array of countries to filter the query on",
      "usage": ["example usage", "example usage 2"],
      "defaultValue": null
    },
    {
      "name": "minIndustryFirmCount",
      "type": "number",
      "isRequired": true, // required because query will not run without this
      "description": "filter condition to include only industries where NumFirms >= this amount",
      "usage": ["example usage"],
      "defaultValue": null
    },
    {
      "name": "accountsCreatedOnOrAfter",
      "type": "date",
      "isRequired": true, // required because query will not run without this
      "description": "filter condition to include only accounts created on/after this date",
      "usage": ["example usage"],
      "defaultValue": null
    },
    {
      "name": "orderByClause",
      "type": "string",
      "isRequired": false, // NOT required because query will adapt without this
      "description": "Sorting clause to be used when provided to order the results",
      "usage": ["example usage"],
      "defaultValue": null
    }
  ],
  "selectClause": [
    {
        "name": "TotalAccounts",
        "description": "Total number of accounts for each grouping",
        "type": "number",
        "optional": false // field is always returned
    },
    {
        "name": "TotalAccountRevenue",
        "description": "Total revenue for all accounts, combined, for each grouping",
        "type": "number",
        "optional": false
    },
    {
        "name": "extraSumFieldAlias", // parameter name the field ends up having as its name 
        "dynamicName": true, // indicates the name of the field in the result is dynamic, derived from the parameter specified
        "description": "Additional Summary based on provided paramater: extraSumField",
        "type": "number",
        "optional": true
    },
    {
        "name": "City",
        "description": "City name for the grouping",
        "type": "string",
        "optional": false
    },
    {
        "name": "Country",
        "description": "Country name for the grouping",
        "type": "string",
        "optional": false
    },
    {
        "name": "Region",
        "description": "Region name for the grouping",
        "type": "string",
        "optional": false
    },
    {
        "name": "Industry",
        "description": "Name of the industry for the grouping",
        "type": "string",
        "optional": false
    },
    {
        "name": "AverageFirmRevenue",
        "description": "Average Revenue for the industry in this grouping",
        "type": "number",
        "optional": false
    },
    {
        "name": "NumFirms",
        "description": "Total # of firms for the industry in this grouping",
        "type": "number",
        "optional": false
    },
  ],
  "fromClause": [
    {
        "schemaName": "crm",
        "baseView": "vwAccounts",
        "alias": "a"
    },
    {
        "schemaName": "crm",
        "baseView": "vwIndustries",
        "alias": "i"
    }
  ]
}
```',
@Priority = 1,
@IsActive = 1,
@ID = '15574DEC-2E10-41E3-9E5B-B8A25CF0BD7A';

-- Save Template Params (core SP call only)
EXEC [${flyway:defaultSchema}].spCreateTemplateParam @ID = '23b91592-c4ff-4916-973e-7cbaceaac511',
@TemplateID = '9FE0EBC4-FF3F-44CF-AD31-AA1A191CD291',
@Name = N'templateText',
@Description = N'The SQL query template content to be analyzed',
@Type = N'Scalar',
@DefaultValue = NULL,
@IsRequired = 0,
@LinkedParameterName = NULL,
@LinkedParameterField = NULL,
@ExtraFilter = NULL,
@EntityID = NULL,
@RecordID = NULL,
@OrderBy = NULL,
@TemplateContentID = NULL;

-- Save AI Prompts (core SP call only)
EXEC [${flyway:defaultSchema}].spUpdateAIPrompt @Name = N'SQL Query Parameter Extraction',
@Description = N'Extracts Nunjucks variables and their types from Query strings',
@TemplateID = '9FE0EBC4-FF3F-44CF-AD31-AA1A191CD291',
@CategoryID = '7D2DEF7F-138F-4620-8309-33964A97A997',
@TypeID = 'A6DA423E-F36B-1410-8DAC-00021F8B792E',
@Status = N'Active',
@ResponseFormat = N'JSON',
@ModelSpecificResponseFormat = NULL,
@AIModelTypeID = NULL,
@MinPowerRank = 0,
@SelectionStrategy = N'Specific',
@PowerPreference = N'Highest',
@ParallelizationMode = N'None',
@ParallelCount = NULL,
@ParallelConfigParam = NULL,
@OutputType = N'object',
@OutputExample = N'{
  "parameters": [
    {
      "name": "customerName",
      "type": "Scalar",
      "isRequired": true,
      "description": "The name of the customer",
      "usage": ["greeting header", "personalization"],
      "defaultValue": null
    },
    {
      "name": "orderItems",
      "type": "Array",
      "isRequired": false,
      "description": "List of items in the customer''s order",
      "usage": ["order details section", "item iteration"],
      "defaultValue": null
    },
    {
      "name": "companyInfo",
      "type": "Object",
      "isRequired": true,
      "description": "Company information object containing name, address, and contact details",
      "usage": ["footer section", "contact information"],
      "defaultValue": null
    }
  ]
}',
@ValidationBehavior = N'Strict',
@MaxRetries = 2,
@RetryDelayMS = 1000,
@RetryStrategy = N'Fixed',
@ResultSelectorPromptID = NULL,
@EnableCaching = 0,
@CacheTTLSeconds = NULL,
@CacheMatchType = N'Exact',
@CacheSimilarityThreshold = NULL,
@CacheMustMatchModel = 1,
@CacheMustMatchVendor = 1,
@CacheMustMatchAgent = 0,
@CacheMustMatchConfig = 0,
@PromptRole = N'System',
@PromptPosition = N'First',
@Temperature = NULL,
@TopP = NULL,
@TopK = NULL,
@MinP = NULL,
@FrequencyPenalty = NULL,
@PresencePenalty = NULL,
@Seed = NULL,
@StopSequences = NULL,
@IncludeLogProbs = 0,
@TopLogProbs = NULL,
@FailoverStrategy = N'SameModelDifferentVendor',
@FailoverMaxAttempts = 3,
@FailoverDelaySeconds = 5,
@FailoverModelStrategy = N'PreferSameModel',
@FailoverErrorScope = N'All',
@ID = '8BF32885-8504-4DAF-87AE-695E09F1BC3A';


-- End of SQL Logging Session
-- Session ID: eb4d799e-bec9-4e93-ad3e-c5c98d108598
-- Completed: 2025-07-22T02:53:12.964Z
-- Duration: 15659ms
-- Total Statements: 3
