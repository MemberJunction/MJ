name: Ensure migrations are valid

on:
  pull_request:
    branches:
      - next
      - main

concurrency:
  group: "changes"
  cancel-in-progress: true

jobs:
  changes_and_migrations:
    name: Check migrations
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(jq -r .version packages/MJCore/package.json)
          echo "Current version: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Check migration filenames
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.CURRENT_VERSION }}"
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          NEXT_MINOR_VERSION="${VERSION_PARTS[0]}.$(( ${VERSION_PARTS[1]} + 1 ))"
          EXPECTED_STRING="__v$NEXT_MINOR_VERSION"

          git diff --name-only --diff-filter=A ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '^migrations/.*\.sql$' | while read file; do
            if [[ ! "$file" =~ $EXPECTED_STRING ]]; then
              echo "::error file=$file::Migration filename doesn't match the next minor version (v$NEXT_MINOR_VERSION)"
              exit 1
            fi
            if [[ ! "$file" =~ "V" ]]; then
              echo "::error file=$file::Migration filename doesn't begin with a  capital \`V\` character"
              exit 1
            fi
          done

      - name: Check migration content
        run: |
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '^migrations/.*\.sql$' | while read file; do
            if grep -qP "__mj[^_]" "$file"; then
              echo "::error file=$file::Migration script contains a reference to a hard-coded \`__mj\` schema"
              exit 1
            fi
            if grep -qP "\$\{flyway:defaultSchema\}_([A-Z][a-z]+At)" "$file"; then
              echo "::error file=$file::Migration script is using the Flyway schema placeholder in a timestamp column"
              exit 1
            fi
          done

      - name: Check for minor version change
        run: |
          MIGRATION_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '^migrations/.*\.sql$' || true)
          if [ -n "$MIGRATION_FILES" ]; then
            MINOR_CHANGE=$(grep 'minor' .changeset/*.md || true)
            if [ -z "$MINOR_CHANGE" ]; then
              echo "::error::Migration files were added, but no minor version changeset was found"
              exit 1
            fi
          fi
