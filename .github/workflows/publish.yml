name: Build and publish new package versions

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      targetVersion:
        description: 'The version to target for this publish'
        required: false


permissions:
  contents: write

concurrency:
  group: "publish"
  cancel-in-progress: false

jobs:
  test-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Validate migration filenames
        run: ./.github/scripts/validate-migration-filenames.sh

      - name: Create docker network
        run: docker network create -d bridge local-net

      - name: Create SQL Server container
        run: docker run --rm -d --network local-net --name sql -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=VeryStr0ngP@ssw0rd" -p 1433:1433 mcr.microsoft.com/mssql/server:2022-latest

      - name: Wait for SQL Server to be ready
        run: sleep 20  # Give SQL Server time to initialize

      - name: Create SQL database
        run: docker run --rm --network local-net mcr.microsoft.com/mssql-tools /opt/mssql-tools/bin/sqlcmd -S sql -U SA -P 'VeryStr0ngP@ssw0rd' -Q "CREATE DATABASE [test];"

      - name: Install MJ CLI globally
        run: npm install --global @memberjunction/cli@2.100.3

      - name: Run mj migrate locally
        run: mj migrate
        env:
          DB_HOST: localhost
          DB_DATABASE: test
          DB_USERNAME: sa
          DB_PASSWORD: VeryStr0ngP@ssw0rd
          CODEGEN_DB_USERNAME: sa
          CODEGEN_DB_PASSWORD: VeryStr0ngP@ssw0rd
          DB_TRUST_SERVER_CERTIFICATE: Y

  build-and-publish:
    name: Build and publish new versions of NPM packages
    timeout-minutes: 30
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    env:
      BRANCH: ${{ github.base_ref || github.ref_name }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
          fetch-tags: true

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Set up git credentials
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin "https://$REPO_PAT@github.com/MemberJunction/MJ"
        env:
          REPO_PAT: ${{ secrets.MJ_GH_BOT_GITHUB_TOKEN }}

      - name: Determine next expected version
        if: ${{ env.BRANCH == 'main' && !github.event.inputs.targetVersion }}
        id: version_check
        run: |
          git fetch --tags
          # Use MJServer package as version reference since core and global are pinned at 2.100.3
          CURRENT_VERSION=$(jq -r .version packages/MJServer/package.json)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          NEXT_MINOR_VERSION="${VERSION_PARTS[0]}.$(( ${VERSION_PARTS[1]} + 1 )).0"
          NEXT_PATCH_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$(( ${VERSION_PARTS[2]} + 1 ))"
          NEW_MIGRATION_FILES=$(git --no-pager diff --name-only v${CURRENT_VERSION} ${{ github.sha }} -- migrations/)
          if [ -n "$NEW_MIGRATION_FILES" ]; then
            echo "EXPECTED_NEXT_VERSION=$NEXT_MINOR_VERSION" >> $GITHUB_OUTPUT
          else
            echo "EXPECTED_NEXT_VERSION=$NEXT_PATCH_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Update version and check against expected
        if: ${{ env.BRANCH == 'main' }}
        run: |
          EXPECTED_NEXT_VERSION="${{ github.event.inputs.targetVersion || steps.version_check.outputs.EXPECTED_NEXT_VERSION }}"
          npm run version:safe

          # Commit post-hook changes (core/global restoration and dependency fixes)
          if [[ -n $(git status -s) ]]; then
            git add .
            git commit -m "Post-changeset: Restore core and global to 2.100.3

            Automatically restored pinned packages after changeset version bump."
            echo "::notice::Committed post-hook changes"
          else
            echo "::notice::No post-hook changes to commit"
          fi

          NEXT_VERSION=$(jq -r .version packages/MJServer/package.json)
          echo "::notice::Version to be published: $NEXT_VERSION"
          if [ "$NEXT_VERSION" != "$EXPECTED_NEXT_VERSION" ]; then
            echo "::error::The version to be published ($NEXT_VERSION) does not match the expected version ($EXPECTED_NEXT_VERSION)"
            exit 1
          fi

          # Verify core and global are still pinned at 2.100.3
          CORE_VERSION=$(jq -r .version packages/MJCore/package.json)
          GLOBAL_VERSION=$(jq -r .version packages/MJGlobal/package.json)

          if [ "$CORE_VERSION" != "2.100.3" ]; then
            echo "::error::Core package version ($CORE_VERSION) has changed from pinned version 2.100.3"
            echo "Core must remain at 2.100.3 until npm registry issue is resolved"
            exit 1
          fi

          if [ "$GLOBAL_VERSION" != "2.100.3" ]; then
            echo "::error::Global package version ($GLOBAL_VERSION) has changed from pinned version 2.100.3"
            echo "Global must remain at 2.100.3 until npm registry issue is resolved"
            exit 1
          fi

          # Count all @memberjunction packages EXCEPT core and global
          MJ_PACKAGE_COUNT=$(grep --include package.json -R '"name": "@memberjunction/' packages/ | grep -v '@memberjunction/core' | grep -v '@memberjunction/global' | wc -l)
          NEXT_VERSION_PACKAGE_COUNT=$(grep --include package.json -R '"version": "'$NEXT_VERSION'"' packages/ | grep -v packages/MJCore/package.json | grep -v packages/MJGlobal/package.json | wc -l)

          if [ "$MJ_PACKAGE_COUNT" != "$NEXT_VERSION_PACKAGE_COUNT" ]; then
            echo "::error::One or more packages (excluding core and global) would not be published with version ($NEXT_VERSION)"
            echo "Packages not at expected version:"
            grep --include package.json -RL '"version": "'$NEXT_VERSION'"' packages/ | grep -v packages/MJCore/package.json | grep -v packages/MJGlobal/package.json | xargs grep '"name": "@memberjunction/'
            exit 1
          fi

          echo "âœ“ Version validation passed:"
          echo "  - Core pinned at: $CORE_VERSION"
          echo "  - Global pinned at: $GLOBAL_VERSION"
          echo "  - Other packages at: $NEXT_VERSION"
          echo "  - Package count: $MJ_PACKAGE_COUNT"

      - name: Build packages
        run: npm run build

      - name: Publish to npm
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF

          npm run change publish
        env:
          NPM_TOKEN: ${{ secrets.CRAIG_BC_NPM_TOKEN }}

      - name: Get version string
        if: ${{ env.BRANCH == 'main' }}
        id: version
        run: |
          git pull
          git log -n1
          # Use MJServer package since core and global are pinned at 2.100.3
          VERSION="v"$(jq -r .version packages/MJServer/package.json)
          echo "Release for verison $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create distribution zip
        if: ${{ env.BRANCH == 'main' }}
        env:
          MJ_DISTRIBUTION_FILENAME: Distributions/MemberJunction_Code_Bootstrap.zip
          VERSION: ${{ steps.version.outputs.VERSION }}
        run: |
          node CreateMJDistribution.js
          ARTIFACT=$(cat CreateMJDistribution.log)
          npm run commitpush
          SHA=$(git log -n1 --format=format:%H)
          echo "SHA=$SHA" >> $GITHUB_OUTPUT
          echo "Distribution zip created at $ARTIFACT" >> $GITHUB_STEP_SUMMARY
          echo "Distribution commit: \`$SHA\`" >> $GITHUB_STEP_SUMMARY

      - name: Merge main into next and update package-lock
        if: ${{ env.BRANCH == 'main' }}
        run: |
          git checkout next
          git log -n1
          npm run mergemain:update-lock


