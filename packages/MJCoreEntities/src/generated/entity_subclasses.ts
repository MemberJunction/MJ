import { BaseEntity, EntitySaveOptions, EntityDeleteOptions, CompositeKey, ValidationResult, ValidationErrorInfo, ValidationErrorType, Metadata, ProviderType, DatabaseProviderBase } from "@memberjunction/core";
import { RegisterClass } from "@memberjunction/global";
import { z } from "zod";

export const loadModule = () => {
  // no-op, only used to ensure this file is a valid module and to allow easy loading
}

     
 
/**
 * zod schema definition for the entity Action Authorizations
 */
export const ActionAuthorizationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ActionID: z.string().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)`),
    AuthorizationID: z.string().describe(`
        * * Field Name: AuthorizationID
        * * Display Name: Authorization ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
    Authorization: z.string().describe(`
        * * Field Name: Authorization
        * * Display Name: Authorization
        * * SQL Data Type: nvarchar(100)`),
});

export type ActionAuthorizationEntityType = z.infer<typeof ActionAuthorizationSchema>;

/**
 * zod schema definition for the entity Action Categories
 */
export const ActionCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the action category.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the action category.`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Action Categories (vwActionCategories.ID)`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
        * * Description: Status of the action category (Pending, Active, Disabled).`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type ActionCategoryEntityType = z.infer<typeof ActionCategorySchema>;

/**
 * zod schema definition for the entity Action Context Types
 */
export const ActionContextTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the context type.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the context type.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ActionContextTypeEntityType = z.infer<typeof ActionContextTypeSchema>;

/**
 * zod schema definition for the entity Action Contexts
 */
export const ActionContextSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ActionID: z.string().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)`),
    ContextTypeID: z.string().nullable().describe(`
        * * Field Name: ContextTypeID
        * * Display Name: Context Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Action Context Types (vwActionContextTypes.ID)`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
        * * Description: Status of the action context (Pending, Active, Disabled).`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
    ContextType: z.string().nullable().describe(`
        * * Field Name: ContextType
        * * Display Name: Context Type
        * * SQL Data Type: nvarchar(255)`),
});

export type ActionContextEntityType = z.infer<typeof ActionContextSchema>;

/**
 * zod schema definition for the entity Action Execution Logs
 */
export const ActionExecutionLogSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ActionID: z.string().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)`),
    StartedAt: z.date().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetimeoffset
        * * Default Value: sysdatetimeoffset()
        * * Description: Timestamp when the action execution started (timezone-aware)`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp when the action execution ended (timezone-aware)`),
    Params: z.string().nullable().describe(`
        * * Field Name: Params
        * * Display Name: Params
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON-formatted input parameters passed to the action during execution, storing the exact values used for this specific run.`),
    ResultCode: z.string().nullable().describe(`
        * * Field Name: ResultCode
        * * Display Name: Result Code
        * * SQL Data Type: nvarchar(255)
        * * Description: The outcome code returned by the action execution, indicating success, failure, or specific error conditions as defined in Action Result Codes.`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    RetentionPeriod: z.number().nullable().describe(`
        * * Field Name: RetentionPeriod
        * * Display Name: Retention Period
        * * SQL Data Type: int
        * * Description: Number of days to retain the log; NULL for indefinite retention.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Message: z.string().nullable().describe(`
        * * Field Name: Message
        * * Display Name: Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON-formatted output data or response from the action execution`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type ActionExecutionLogEntityType = z.infer<typeof ActionExecutionLogSchema>;

/**
 * zod schema definition for the entity Action Filters
 */
export const ActionFilterSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserDescription: z.string().describe(`
        * * Field Name: UserDescription
        * * Display Name: User Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Human-readable explanation of what this filter checks and when it should prevent action execution, written for non-technical users.`),
    UserComments: z.string().nullable().describe(`
        * * Field Name: UserComments
        * * Display Name: User Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Additional notes or implementation details about the filter logic, including examples or edge cases to consider.`),
    Code: z.string().describe(`
        * * Field Name: Code
        * * Display Name: Code
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JavaScript code that evaluates to true (allow action) or false (prevent action), executed in the same context as the action.`),
    CodeExplanation: z.string().nullable().describe(`
        * * Field Name: CodeExplanation
        * * Display Name: Code Explanation
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Technical documentation of the filter code logic, including expected inputs, outputs, and any dependencies or assumptions.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ActionFilterEntityType = z.infer<typeof ActionFilterSchema>;

/**
 * zod schema definition for the entity Action Libraries
 */
export const ActionLibrarySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ActionID: z.string().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)`),
    LibraryID: z.string().describe(`
        * * Field Name: LibraryID
        * * Display Name: Library ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Libraries (vwLibraries.ID)`),
    ItemsUsed: z.string().nullable().describe(`
        * * Field Name: ItemsUsed
        * * Display Name: Items Used
        * * SQL Data Type: nvarchar(MAX)
        * * Description: List of classes and functions used by the action from the library.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
    Library: z.string().describe(`
        * * Field Name: Library
        * * Display Name: Library
        * * SQL Data Type: nvarchar(255)`),
});

export type ActionLibraryEntityType = z.infer<typeof ActionLibrarySchema>;

/**
 * zod schema definition for the entity Action Params
 */
export const ActionParamSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ActionID: z.string().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    DefaultValue: z.string().nullable().describe(`
        * * Field Name: DefaultValue
        * * Display Name: Default Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The default value for this parameter if not provided during action execution, can be a literal value or JSON for complex types.`),
    Type: z.union([z.literal('Both'), z.literal('Input'), z.literal('Output')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nchar(10)
    * * Value List Type: List
    * * Possible Values 
    *   * Both
    *   * Input
    *   * Output
        * * Description: Specifies whether this parameter is used for Input, Output, or Both directions in the action execution flow.`),
    ValueType: z.union([z.literal('BaseEntity Sub-Class'), z.literal('BaseEntity Sub-Class'), z.literal('Other'), z.literal('Other'), z.literal('Scalar'), z.literal('Scalar'), z.literal('Simple Object'), z.literal('Simple Object')]).describe(`
        * * Field Name: ValueType
        * * Display Name: Value Type
        * * SQL Data Type: nvarchar(30)
    * * Value List Type: List
    * * Possible Values 
    *   * BaseEntity Sub-Class
    *   * BaseEntity Sub-Class
    *   * Other
    *   * Other
    *   * Scalar
    *   * Scalar
    *   * Simple Object
    *   * Simple Object
        * * Description: Tracks the basic value type of the parameter, additional information can be provided in the Description field`),
    IsArray: z.boolean().describe(`
        * * Field Name: IsArray
        * * Display Name: Is Array
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this parameter accepts or returns an array of values rather than a single value.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    IsRequired: z.boolean().describe(`
        * * Field Name: IsRequired
        * * Display Name: Is Required
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Determines if this parameter must be provided for input parameters or will always be populated for output parameters.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
});

export type ActionParamEntityType = z.infer<typeof ActionParamSchema>;

/**
 * zod schema definition for the entity Action Result Codes
 */
export const ActionResultCodeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ActionID: z.string().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)`),
    ResultCode: z.string().describe(`
        * * Field Name: ResultCode
        * * Display Name: Result Code
        * * SQL Data Type: nvarchar(255)
        * * Description: The unique code string returned by the action to indicate specific outcomes, used for programmatic handling of results.`),
    IsSuccess: z.boolean().describe(`
        * * Field Name: IsSuccess
        * * Display Name: Is Success
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if the result code is a success or not. It is possible an action might have more than one failure condition/result code and same for success conditions.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the result code.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
});

export type ActionResultCodeEntityType = z.infer<typeof ActionResultCodeSchema>;

/**
 * zod schema definition for the entity Actions
 */
export const ActionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CategoryID: z.string().nullable().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Action Categories (vwActionCategories.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(425)
        * * Description: The name of the action. Must be unique within the combination of CategoryID and ParentID. Actions with the same name can exist in different categories or under different parents.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    Type: z.union([z.literal('Custom'), z.literal('Generated')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Generated
    * * Value List Type: List
    * * Possible Values 
    *   * Custom
    *   * Generated
        * * Description: Generated or Custom. Generated means the UserPrompt is used to prompt an AI model to automatically create the code for the Action. Custom means that a custom class has been implemented that subclasses the BaseAction class. The custom class needs to use the @RegisterClass decorator and be included in the MJAPI (or other runtime environment) to be available for execution.`),
    UserPrompt: z.string().nullable().describe(`
        * * Field Name: UserPrompt
        * * Display Name: User Prompt
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The natural language prompt provided by the user describing what the action should accomplish, used for AI code generation.`),
    UserComments: z.string().nullable().describe(`
        * * Field Name: UserComments
        * * Display Name: User Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: User's comments not shared with the LLM.`),
    Code: z.string().nullable().describe(`
        * * Field Name: Code
        * * Display Name: Code
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The generated or manually written code that implements the action logic, typically TypeScript/JavaScript that will be executed.`),
    CodeComments: z.string().nullable().describe(`
        * * Field Name: CodeComments
        * * Display Name: Code Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: AI's explanation of the code.`),
    CodeApprovalStatus: z.union([z.literal('Approved'), z.literal('Pending'), z.literal('Rejected')]).describe(`
        * * Field Name: CodeApprovalStatus
        * * Display Name: Code Approval Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
        * * Description: An action won't be usable until the code is approved.`),
    CodeApprovalComments: z.string().nullable().describe(`
        * * Field Name: CodeApprovalComments
        * * Display Name: Code Approval Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional comments when an individual (or an AI) reviews and approves the code.`),
    CodeApprovedByUserID: z.string().nullable().describe(`
        * * Field Name: CodeApprovedByUserID
        * * Display Name: Code Approved By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    CodeApprovedAt: z.date().nullable().describe(`
        * * Field Name: CodeApprovedAt
        * * Display Name: Code Approved At
        * * SQL Data Type: datetime
        * * Description: When the code was approved.`),
    CodeLocked: z.boolean().describe(`
        * * Field Name: CodeLocked
        * * Display Name: Code Locked
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If set to 1, Code will never be generated by the AI system. This overrides all other settings including the ForceCodeGeneration bit`),
    ForceCodeGeneration: z.boolean().describe(`
        * * Field Name: ForceCodeGeneration
        * * Display Name: Force Code Generation
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If set to 1, the Action will generate code for the provided UserPrompt on the next Save even if the UserPrompt hasn't changed. This is useful to force regeneration when other candidates (such as a change in Action Inputs/Outputs) occurs or on demand by a user.`),
    RetentionPeriod: z.number().nullable().describe(`
        * * Field Name: RetentionPeriod
        * * Display Name: Retention Period
        * * SQL Data Type: int
        * * Description: Number of days to retain execution logs; NULL for indefinite.`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
        * * Description: Status of the action (Pending, Active, Disabled).`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    DriverClass: z.string().nullable().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(255)
        * * Description: For actions where Type='Custom', this specifies the fully qualified class name of the BaseAction sub-class that should be instantiated to handle the action execution. This provides a more reliable mechanism than relying on the Name field for class instantiation.`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)
        * * Description: Optional ID of the parent action this action inherits from. Used for hierarchical action composition where child actions can specialize parent actions.`),
    IconClass: z.string().nullable().describe(`
        * * Field Name: IconClass
        * * Display Name: Icon Class
        * * SQL Data Type: nvarchar(100)
        * * Description: Font Awesome icon class (e.g., fa-cog, fa-play, fa-search) for visual representation of the action.`),
    DefaultCompactPromptID: z.string().nullable().describe(`
        * * Field Name: DefaultCompactPromptID
        * * Display Name: Default Compact Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: Default prompt for compacting/summarizing this action's results when used by agents with CompactMode=AISummary. Action designers define how their specific results should be summarized. Can be overridden per agent in AIAgentAction.CompactPromptID.`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(255)`),
    CodeApprovedByUser: z.string().nullable().describe(`
        * * Field Name: CodeApprovedByUser
        * * Display Name: Code Approved By User
        * * SQL Data Type: nvarchar(100)`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(425)`),
    DefaultCompactPrompt: z.string().nullable().describe(`
        * * Field Name: DefaultCompactPrompt
        * * Display Name: Default Compact Prompt
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type ActionEntityType = z.infer<typeof ActionSchema>;

/**
 * zod schema definition for the entity AI Actions
 */
export const AIActionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    DefaultPrompt: z.string().nullable().describe(`
        * * Field Name: DefaultPrompt
        * * Display Name: Default Prompt
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The standard prompt template used when invoking this AI action, can include placeholders for dynamic values.`),
    DefaultModelID: z.string().nullable().describe(`
        * * Field Name: DefaultModelID
        * * Display Name: Default Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Controls whether this AI action is currently available for use across the system.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    DefaultModel: z.string().nullable().describe(`
        * * Field Name: DefaultModel
        * * Display Name: Default Model
        * * SQL Data Type: nvarchar(50)`),
});

export type AIActionEntityType = z.infer<typeof AIActionSchema>;

/**
 * zod schema definition for the entity AI Agent Actions
 */
export const AIAgentActionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: The unique identifier for each AI agent-action mapping. Serves as the primary key.`),
    AgentID: z.string().nullable().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: References the unique identifier of the associated AI agent from the AIAgent table.`),
    ActionID: z.string().nullable().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)
        * * Description: References the unique identifier of the associated action from the Action table.`),
    Status: z.union([z.literal('Active'), z.literal('Pending'), z.literal('Revoked')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(15)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    MinExecutionsPerRun: z.number().nullable().describe(`
        * * Field Name: MinExecutionsPerRun
        * * Display Name: Min Executions Per Run
        * * SQL Data Type: int
        * * Description: Minimum number of times this action must be executed per agent run`),
    MaxExecutionsPerRun: z.number().nullable().describe(`
        * * Field Name: MaxExecutionsPerRun
        * * Display Name: Max Executions Per Run
        * * SQL Data Type: int
        * * Description: Maximum number of times this action can be executed per agent run`),
    ResultExpirationTurns: z.number().nullable().describe(`
        * * Field Name: ResultExpirationTurns
        * * Display Name: Result Expiration Turns
        * * SQL Data Type: int
        * * Description: Number of conversation turns before action results expire from conversation context. NULL = never expire (default). 0 = expire immediately after next turn.`),
    ResultExpirationMode: z.union([z.literal('Compact'), z.literal('None'), z.literal('Remove')]).describe(`
        * * Field Name: ResultExpirationMode
        * * Display Name: Result Expiration Mode
        * * SQL Data Type: nvarchar(20)
        * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * Compact
    *   * None
    *   * Remove
        * * Description: How to handle expired action results: None (no expiration, default), Remove (delete message entirely), Compact (reduce size via CompactMode while preserving key information).`),
    CompactMode: z.union([z.literal('AI Summary'), z.literal('First N Chars')]).nullable().describe(`
        * * Field Name: CompactMode
        * * Display Name: Compact Mode
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * AI Summary
    *   * First N Chars
        * * Description: How to compact results when ResultExpirationMode=Compact: FirstNChars (truncate to CompactLength characters, fast and free), AISummary (use LLM to intelligently summarize with CompactPromptID or Action.DefaultCompactPromptID).`),
    CompactLength: z.number().nullable().describe(`
        * * Field Name: CompactLength
        * * Display Name: Compact Length
        * * SQL Data Type: int
        * * Description: Number of characters to keep when CompactMode=FirstNChars. Required when CompactMode is FirstNChars, ignored otherwise.`),
    CompactPromptID: z.string().nullable().describe(`
        * * Field Name: CompactPromptID
        * * Display Name: Compact Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: Optional override for AI summarization prompt when CompactMode=AISummary. Lookup hierarchy: this field -> Action.DefaultCompactPromptID -> system default. Allows agent-specific summarization focus (e.g., technical vs. marketing perspective).`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    Action: z.string().nullable().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
    CompactPrompt: z.string().nullable().describe(`
        * * Field Name: CompactPrompt
        * * Display Name: Compact Prompt
        * * SQL Data Type: nvarchar(255)`),
});

export type AIAgentActionEntityType = z.infer<typeof AIAgentActionSchema>;

/**
 * zod schema definition for the entity AI Agent Learning Cycles
 */
export const AIAgentLearningCycleSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Unique identifier for the learning cycle.`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: Identifier for the AI Agent associated with this learning cycle.`),
    StartedAt: z.date().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()
        * * Description: Timestamp indicating when the learning cycle started.`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp indicating when the learning cycle ended.`),
    Status: z.union([z.literal('Complete'), z.literal('Failed'), z.literal('In-Progress')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In-Progress
        * * Description: Status of the learning cycle (In-Progress, Complete, or Failed).`),
    AgentSummary: z.string().nullable().describe(`
        * * Field Name: AgentSummary
        * * Display Name: Agent Summary
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Text summary provided by the agent about what it learned and any changes it requested for stored metadata.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
});

export type AIAgentLearningCycleEntityType = z.infer<typeof AIAgentLearningCycleSchema>;

/**
 * zod schema definition for the entity AI Agent Models
 */
export const AIAgentModelSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: The unique identifier for each AI agent-model mapping. Serves as the primary key.`),
    AgentID: z.string().nullable().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: References the unique identifier of the associated AI agent from AIAgent table.`),
    ModelID: z.string().nullable().describe(`
        * * Field Name: ModelID
        * * Display Name: Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
        * * Description: The unique identifier of the associated AI model.`),
    Active: z.boolean().nullable().describe(`
        * * Field Name: Active
        * * Display Name: Active
        * * SQL Data Type: bit
        * * Description: Indicates whether this specific agent-model combination is currently enabled for use in AI operations.`),
    Priority: z.number().nullable().describe(`
        * * Field Name: Priority
        * * Display Name: Priority
        * * SQL Data Type: int
        * * Description: The priority level of the AI model for the agent, where higher values indicate higher priority.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    Model: z.string().nullable().describe(`
        * * Field Name: Model
        * * Display Name: Model
        * * SQL Data Type: nvarchar(50)`),
});

export type AIAgentModelEntityType = z.infer<typeof AIAgentModelSchema>;

/**
 * zod schema definition for the entity AI Agent Note Types
 */
export const AIAgentNoteTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().nullable().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Priority: z.number().describe(`
        * * Field Name: Priority
        * * Display Name: Priority
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Priority for injection ordering. Lower numbers are injected first (0 is highest priority).`),
    Status: z.union([z.literal('Active'), z.literal('Pending'), z.literal('Revoked')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked
        * * Description: Status of the note type: Pending (awaiting approval), Active (available for use), or Revoked (deprecated).`),
});

export type AIAgentNoteTypeEntityType = z.infer<typeof AIAgentNoteTypeSchema>;

/**
 * zod schema definition for the entity AI Agent Notes
 */
export const AIAgentNoteSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AgentID: z.string().nullable().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)`),
    AgentNoteTypeID: z.string().nullable().describe(`
        * * Field Name: AgentNoteTypeID
        * * Display Name: Agent Note Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agent Note Types (vwAIAgentNoteTypes.ID)`),
    Note: z.string().nullable().describe(`
        * * Field Name: Note
        * * Display Name: Note
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The content of the note, observation, or learning captured by the AI agent during its execution.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    UserID: z.string().nullable().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: Foreign key referencing the ID column in the User table, indicating the user associated with the note. Used when Type=User`),
    Type: z.union([z.literal('Constraint'), z.literal('Context'), z.literal('Example'), z.literal('Issue'), z.literal('Preference')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Preference
    * * Value List Type: List
    * * Possible Values 
    *   * Constraint
    *   * Context
    *   * Example
    *   * Issue
    *   * Preference
        * * Description: Quick categorization of the note content: Preference (user preferences), Constraint (hard rules/requirements), Context (background information), Example (sample interactions), or Issue (known problems/limitations). Complements the more detailed AIAgentNoteType categorization.`),
    IsAutoGenerated: z.boolean().describe(`
        * * Field Name: IsAutoGenerated
        * * Display Name: Is Auto Generated
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this note was automatically generated by an AI agent (1) or manually created (0).`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Internal comments about this note, not included in agent context injection.`),
    Status: z.union([z.literal('Active'), z.literal('Pending'), z.literal('Revoked')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked
        * * Description: Status of the note: Pending (awaiting review), Active (in use), or Revoked (disabled).`),
    SourceConversationID: z.string().nullable().describe(`
        * * Field Name: SourceConversationID
        * * Display Name: Source Conversation ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
        * * Description: Optional reference to the conversation that inspired or generated this note.`),
    SourceConversationDetailID: z.string().nullable().describe(`
        * * Field Name: SourceConversationDetailID
        * * Display Name: Source Conversation Detail ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
        * * Description: Optional reference to the specific conversation message that inspired this note.`),
    SourceAIAgentRunID: z.string().nullable().describe(`
        * * Field Name: SourceAIAgentRunID
        * * Display Name: Source AI Agent Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
        * * Description: Optional reference to the AI agent run that generated this note.`),
    CompanyID: z.string().nullable().describe(`
        * * Field Name: CompanyID
        * * Display Name: Company ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Companies (vwCompanies.ID)
        * * Description: Optional company scope for this note. When populated with UserID, creates org+user specific notes.`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    AgentNoteType: z.string().nullable().describe(`
        * * Field Name: AgentNoteType
        * * Display Name: Agent Note Type
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().nullable().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    SourceConversation: z.string().nullable().describe(`
        * * Field Name: SourceConversation
        * * Display Name: Source Conversation
        * * SQL Data Type: nvarchar(255)`),
    Company: z.string().nullable().describe(`
        * * Field Name: Company
        * * Display Name: Company
        * * SQL Data Type: nvarchar(50)`),
});

export type AIAgentNoteEntityType = z.infer<typeof AIAgentNoteSchema>;

/**
 * zod schema definition for the entity AI Agent Requests
 */
export const AIAgentRequestSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Primary key for the AIAgentRequest table, uniquely identifies each record.`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: Foreign key referencing the ID column in the AIAgent table.`),
    RequestedAt: z.date().describe(`
        * * Field Name: RequestedAt
        * * Display Name: Requested At
        * * SQL Data Type: datetime
        * * Description: Timestamp when the request was made by the agent.`),
    RequestForUserID: z.string().nullable().describe(`
        * * Field Name: RequestForUserID
        * * Display Name: Request For User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: Optional, a user that the AI specifically is directing the request to, if null intended for general system owner.`),
    Status: z.union([z.literal('Approved'), z.literal('Canceled'), z.literal('Rejected'), z.literal('Requested')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Canceled
    *   * Rejected
    *   * Requested
        * * Description: Current status of the request (Requested, Approved, Rejected, Canceled).`),
    Request: z.string().describe(`
        * * Field Name: Request
        * * Display Name: Request
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Details of what the AI Agent is requesting.`),
    Response: z.string().nullable().describe(`
        * * Field Name: Response
        * * Display Name: Response
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Response provided by the human to the agent request.`),
    ResponseByUserID: z.string().nullable().describe(`
        * * Field Name: ResponseByUserID
        * * Display Name: Response By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: Populated when a user responds indicating which user responded to the request.`),
    RespondedAt: z.date().nullable().describe(`
        * * Field Name: RespondedAt
        * * Display Name: Responded At
        * * SQL Data Type: datetime
        * * Description: Timestamp when the response was provided by the human.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Additional comments about the request. Not shared with the agent, purely record keeping.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    RequestForUser: z.string().nullable().describe(`
        * * Field Name: RequestForUser
        * * Display Name: Request For User
        * * SQL Data Type: nvarchar(100)`),
    ResponseByUser: z.string().nullable().describe(`
        * * Field Name: ResponseByUser
        * * Display Name: Response By User
        * * SQL Data Type: nvarchar(100)`),
});

export type AIAgentRequestEntityType = z.infer<typeof AIAgentRequestSchema>;

/**
 * zod schema definition for the entity AI Agents
 */
export const AIAgentSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: The unique identifier for each AI agent. Serves as the primary key.`),
    Name: z.string().nullable().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: The name of the AI agent.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: A detailed description of the AI agent.`),
    LogoURL: z.string().nullable().describe(`
        * * Field Name: LogoURL
        * * Display Name: Logo URL
        * * SQL Data Type: nvarchar(255)
        * * Description: URL to an image file or base64 data URI (e.g., data:image/png;base64,...) for the agent logo. Takes precedence over IconClass in UI display.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: References the parent agent in the hierarchical structure. If NULL, this is a root (top-level) agent.`),
    ExposeAsAction: z.boolean().describe(`
        * * Field Name: ExposeAsAction
        * * Display Name: Expose As Action
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: When true, this agent can be exposed as an action for use by other agents. Only valid for root agents.`),
    ExecutionOrder: z.number().describe(`
        * * Field Name: ExecutionOrder
        * * Display Name: Execution Order
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: The order in which this agent should be executed among its siblings under the same parent.`),
    ExecutionMode: z.union([z.literal('Parallel'), z.literal('Sequential')]).describe(`
        * * Field Name: ExecutionMode
        * * Display Name: Execution Mode
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Sequential
    * * Value List Type: List
    * * Possible Values 
    *   * Parallel
    *   * Sequential
        * * Description: Controls how this agent's child agents are executed. Sequential runs children in order, Parallel runs them simultaneously.`),
    EnableContextCompression: z.boolean().describe(`
        * * Field Name: EnableContextCompression
        * * Display Name: Enable Context Compression
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: When true, enables automatic compression of conversation context when the message threshold is reached.`),
    ContextCompressionMessageThreshold: z.number().nullable().describe(`
        * * Field Name: ContextCompressionMessageThreshold
        * * Display Name: Context Compression Message Threshold
        * * SQL Data Type: int
        * * Description: Number of messages that triggers context compression when EnableContextCompression is true.`),
    ContextCompressionPromptID: z.string().nullable().describe(`
        * * Field Name: ContextCompressionPromptID
        * * Display Name: Context Compression Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)`),
    ContextCompressionMessageRetentionCount: z.number().nullable().describe(`
        * * Field Name: ContextCompressionMessageRetentionCount
        * * Display Name: Context Compression Message Retention Count
        * * SQL Data Type: int
        * * Description: Number of recent messages to keep uncompressed when context compression is applied.`),
    TypeID: z.string().nullable().describe(`
        * * Field Name: TypeID
        * * Display Name: Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Types (vwAIAgentTypes.ID)
        * * Description: Reference to the AIAgentType that defines the category and system-level behavior for this agent. Cannot be null.`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
        * * Description: Current status of the AI agent. Active agents can be executed, Disabled agents are inactive, and Pending agents are awaiting configuration or approval. Allowed values: Active, Disabled, Pending.`),
    DriverClass: z.string().nullable().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(255)
        * * Description: Optional override for the class name used by the MemberJunction class factory to instantiate this specific agent. If specified, this overrides the agent type's DriverClass. Useful for specialized agent implementations.`),
    IconClass: z.string().nullable().describe(`
        * * Field Name: IconClass
        * * Display Name: Icon Class
        * * SQL Data Type: nvarchar(100)
        * * Description: Font Awesome icon class (e.g., fa-robot, fa-brain) for the agent. Used as fallback when LogoURL is not set or fails to load.`),
    ModelSelectionMode: z.union([z.literal('Agent'), z.literal('Agent Type')]).describe(`
        * * Field Name: ModelSelectionMode
        * * Display Name: Model Selection Mode
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Agent Type
    * * Value List Type: List
    * * Possible Values 
    *   * Agent
    *   * Agent Type
        * * Description: Controls whether model selection is driven by the Agent Type's system prompt or the Agent's specific prompt. Default is Agent Type for backward compatibility.`),
    PayloadDownstreamPaths: z.string().describe(`
        * * Field Name: PayloadDownstreamPaths
        * * Display Name: Payload Downstream Paths
        * * SQL Data Type: nvarchar(MAX)
        * * Default Value: ["*"]
        * * Description: JSON array of paths that define which parts of the payload should be sent downstream to sub-agents. Use ["*"] to send entire payload, or specify paths like ["customer.id", "campaign.*", "analysis.sentiment"]`),
    PayloadUpstreamPaths: z.string().describe(`
        * * Field Name: PayloadUpstreamPaths
        * * Display Name: Payload Upstream Paths
        * * SQL Data Type: nvarchar(MAX)
        * * Default Value: ["*"]
        * * Description: JSON array of paths that define which parts of the payload sub-agents are allowed to write back upstream. Use ["*"] to allow all writes, or specify paths like ["analysis.results", "recommendations.*"]`),
    PayloadSelfReadPaths: z.string().nullable().describe(`
        * * Field Name: PayloadSelfReadPaths
        * * Display Name: Payload Self Read Paths
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of paths that specify what parts of the payload the agent's own prompt can read. Controls downstream data 
flow when the agent executes its own prompt step.`),
    PayloadSelfWritePaths: z.string().nullable().describe(`
        * * Field Name: PayloadSelfWritePaths
        * * Display Name: Payload Self Write Paths
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of paths that specify what parts of the payload the agent's own prompt can write back. Controls upstream 
data flow when the agent executes its own prompt step.`),
    PayloadScope: z.string().nullable().describe(`
        * * Field Name: PayloadScope
        * * Display Name: Payload Scope
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Defines the scope/path within the parent payload that this sub-agent operates on. When set, the sub-agent receives only this portion of the payload and all change requests are relative to this scope. Format: /path/to/scope (e.g. /PropA/SubProp1)`),
    FinalPayloadValidation: z.string().nullable().describe(`
        * * Field Name: FinalPayloadValidation
        * * Display Name: Final Payload Validation
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional JSON schema or requirements that define the expected structure and content of the agent's final payload. Used to validate the output when the agent declares success. Similar to OutputExample in AI Prompts.`),
    FinalPayloadValidationMode: z.union([z.literal('Fail'), z.literal('Retry'), z.literal('Warn')]).describe(`
        * * Field Name: FinalPayloadValidationMode
        * * Display Name: Final Payload Validation Mode
        * * SQL Data Type: nvarchar(25)
        * * Default Value: Retry
    * * Value List Type: List
    * * Possible Values 
    *   * Fail
    *   * Retry
    *   * Warn
        * * Description: Determines how to handle validation failures when FinalPayloadValidation is specified. Options: Retry (default) - retry the agent with validation feedback, Fail - fail the agent run immediately, Warn - log a warning but allow success.`),
    FinalPayloadValidationMaxRetries: z.number().describe(`
        * * Field Name: FinalPayloadValidationMaxRetries
        * * Display Name: Final Payload Validation Max Retries
        * * SQL Data Type: int
        * * Default Value: 3
        * * Description: Maximum number of retry attempts allowed when FinalPayloadValidation fails with
Retry mode. After reaching this limit, the validation will fail permanently.`),
    MaxCostPerRun: z.number().nullable().describe(`
        * * Field Name: MaxCostPerRun
        * * Display Name: Max Cost Per Run
        * * SQL Data Type: decimal(10, 4)
        * * Description: Maximum cost in dollars allowed for a single agent run. Run will be terminated
if this limit is exceeded.`),
    MaxTokensPerRun: z.number().nullable().describe(`
        * * Field Name: MaxTokensPerRun
        * * Display Name: Max Tokens Per Run
        * * SQL Data Type: int
        * * Description: Maximum total tokens (input + output) allowed for a single agent run. Run will
be terminated if this limit is exceeded.`),
    MaxIterationsPerRun: z.number().nullable().describe(`
        * * Field Name: MaxIterationsPerRun
        * * Display Name: Max Iterations Per Run
        * * SQL Data Type: int
        * * Description: Maximum number of prompt iterations allowed for a single agent run. Run will be
terminated if this limit is exceeded.`),
    MaxTimePerRun: z.number().nullable().describe(`
        * * Field Name: MaxTimePerRun
        * * Display Name: Max Time Per Run
        * * SQL Data Type: int
        * * Description: Maximum time in seconds allowed for a single agent run. Run will be terminated
if this limit is exceeded.`),
    MinExecutionsPerRun: z.number().nullable().describe(`
        * * Field Name: MinExecutionsPerRun
        * * Display Name: Min Executions Per Run
        * * SQL Data Type: int
        * * Description: When acting as a sub-agent, minimum number of times this agent must be executed per parent agent run`),
    MaxExecutionsPerRun: z.number().nullable().describe(`
        * * Field Name: MaxExecutionsPerRun
        * * Display Name: Max Executions Per Run
        * * SQL Data Type: int
        * * Description: When acting as a sub-agent, maximum number of times this agent can be executed per parent agent run`),
    StartingPayloadValidation: z.string().nullable().describe(`
        * * Field Name: StartingPayloadValidation
        * * Display Name: Starting Payload Validation
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional JSON schema validation to apply to the input payload before agent execution begins. Uses the same JSONValidator format as FinalPayloadValidation.`),
    StartingPayloadValidationMode: z.union([z.literal('Fail'), z.literal('Warn')]).describe(`
        * * Field Name: StartingPayloadValidationMode
        * * Display Name: Starting Payload Validation Mode
        * * SQL Data Type: nvarchar(25)
        * * Default Value: Fail
    * * Value List Type: List
    * * Possible Values 
    *   * Fail
    *   * Warn
        * * Description: Determines how to handle StartingPayloadValidation failures. Fail = reject invalid input, Warn = log warning but proceed.`),
    DefaultPromptEffortLevel: z.number().nullable().describe(`
        * * Field Name: DefaultPromptEffortLevel
        * * Display Name: Default Prompt Effort Level
        * * SQL Data Type: int
        * * Description: Default effort level for all prompts executed by this agent (1-100, where 1=minimal effort, 100=maximum effort). Takes precedence over individual prompt EffortLevel settings but can be overridden by runtime parameters. Inherited by sub-agents unless explicitly overridden.`),
    ChatHandlingOption: z.union([z.literal('Failed'), z.literal('Retry'), z.literal('Success')]).nullable().describe(`
        * * Field Name: ChatHandlingOption
        * * Display Name: Chat Handling Option
        * * SQL Data Type: nvarchar(30)
    * * Value List Type: List
    * * Possible Values 
    *   * Failed
    *   * Retry
    *   * Success
        * * Description: Controls how Chat next steps are handled. When null (default), Chat propagates to caller. When set to Success, Failed, or Retry, Chat steps are remapped to that value and re-validated.`),
    DefaultArtifactTypeID: z.string().nullable().describe(`
        * * Field Name: DefaultArtifactTypeID
        * * Display Name: Default Artifact Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)
        * * Description: Default artifact type produced by this agent. This is the primary artifact type; additional artifact types can be linked via AIAgentArtifactType junction table. Can be NULL if agent does not produce artifacts by default.`),
    OwnerUserID: z.string().describe(`
        * * Field Name: OwnerUserID
        * * Display Name: Owner User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Default Value: ECAFCCEC-6A37-EF11-86D4-000D3A4E707E
        * * Description: The user who owns and created this AI agent. Automatically set to the current user if not specified. Owner has full permissions (view, run, edit, delete) regardless of ACL entries.`),
    InvocationMode: z.union([z.literal('Any'), z.literal('Sub-Agent'), z.literal('Top-Level')]).describe(`
        * * Field Name: InvocationMode
        * * Display Name: Invocation Mode
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Any
    * * Value List Type: List
    * * Possible Values 
    *   * Any
    *   * Sub-Agent
    *   * Top-Level
        * * Description: Controls how the agent can be invoked: Any (default - can be top-level or sub-agent), Top-Level (only callable as primary agent), Sub-Agent (only callable as sub-agent). Used to filter available agents in tools like Sage.`),
    ArtifactCreationMode: z.union([z.literal('Always'), z.literal('Never'), z.literal('System Only')]).describe(`
        * * Field Name: ArtifactCreationMode
        * * Display Name: Artifact Creation Mode
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Always
    * * Value List Type: List
    * * Possible Values 
    *   * Always
    *   * Never
    *   * System Only
        * * Description: Controls how artifacts are created from this agent's payloads. "Always" creates visible artifacts, "Never" skips artifact creation, "System Only" creates hidden system artifacts.`),
    FunctionalRequirements: z.string().nullable().describe(`
        * * Field Name: FunctionalRequirements
        * * Display Name: Functional Requirements
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed markdown formatted requirements that explain the business goals of the agent without specific technical implementation details.`),
    TechnicalDesign: z.string().nullable().describe(`
        * * Field Name: TechnicalDesign
        * * Display Name: Technical Design
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed markdown that explains the structure of the agent including agent architecture, actions, sub-agents, prompts, and payload structure.`),
    InjectNotes: z.boolean().describe(`
        * * Field Name: InjectNotes
        * * Display Name: Inject Notes
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When enabled, agent notes will be automatically injected into the agent context based on scoping rules.`),
    MaxNotesToInject: z.number().describe(`
        * * Field Name: MaxNotesToInject
        * * Display Name: Max Notes To Inject
        * * SQL Data Type: int
        * * Default Value: 5
        * * Description: Maximum number of notes to inject into agent context per request.`),
    NoteInjectionStrategy: z.union([z.literal('All'), z.literal('Recent'), z.literal('Relevant')]).describe(`
        * * Field Name: NoteInjectionStrategy
        * * Display Name: Note Injection Strategy
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Relevant
    * * Value List Type: List
    * * Possible Values 
    *   * All
    *   * Recent
    *   * Relevant
        * * Description: Strategy for selecting which notes to inject: Relevant (semantic search), Recent (most recent first), or All (up to max limit).`),
    InjectExamples: z.boolean().describe(`
        * * Field Name: InjectExamples
        * * Display Name: Inject Examples
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: When enabled, agent examples will be automatically injected into the agent context based on scoping rules.`),
    MaxExamplesToInject: z.number().describe(`
        * * Field Name: MaxExamplesToInject
        * * Display Name: Max Examples To Inject
        * * SQL Data Type: int
        * * Default Value: 3
        * * Description: Maximum number of examples to inject into agent context per request.`),
    ExampleInjectionStrategy: z.union([z.literal('Rated'), z.literal('Recent'), z.literal('Semantic')]).describe(`
        * * Field Name: ExampleInjectionStrategy
        * * Display Name: Example Injection Strategy
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Semantic
    * * Value List Type: List
    * * Possible Values 
    *   * Rated
    *   * Recent
    *   * Semantic
        * * Description: Strategy for selecting which examples to inject: Semantic (vector similarity), Recent (most recent first), or Rated (highest success score first).`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    ContextCompressionPrompt: z.string().nullable().describe(`
        * * Field Name: ContextCompressionPrompt
        * * Display Name: Context Compression Prompt
        * * SQL Data Type: nvarchar(255)`),
    Type: z.string().nullable().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(100)`),
    DefaultArtifactType: z.string().nullable().describe(`
        * * Field Name: DefaultArtifactType
        * * Display Name: Default Artifact Type
        * * SQL Data Type: nvarchar(100)`),
    OwnerUser: z.string().describe(`
        * * Field Name: OwnerUser
        * * Display Name: Owner User
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type AIAgentEntityType = z.infer<typeof AIAgentSchema>;

/**
 * zod schema definition for the entity AI Model Actions
 */
export const AIModelActionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AIModelID: z.string().describe(`
        * * Field Name: AIModelID
        * * Display Name: AI Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)`),
    AIActionID: z.string().describe(`
        * * Field Name: AIActionID
        * * Display Name: AI Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Actions (vwAIActions.ID)`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Determines if this specific action is currently enabled for the associated AI model.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    AIModel: z.string().describe(`
        * * Field Name: AIModel
        * * Display Name: AIModel
        * * SQL Data Type: nvarchar(50)`),
    AIAction: z.string().describe(`
        * * Field Name: AIAction
        * * Display Name: AIAction
        * * SQL Data Type: nvarchar(50)`),
});

export type AIModelActionEntityType = z.infer<typeof AIModelActionSchema>;

/**
 * zod schema definition for the entity AI Model Types
 */
export const AIModelTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type AIModelTypeEntityType = z.infer<typeof AIModelTypeSchema>;

/**
 * zod schema definition for the entity AI Models
 */
export const AIModelSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    AIModelTypeID: z.string().describe(`
        * * Field Name: AIModelTypeID
        * * Display Name: AI Model Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Model Types (vwAIModelTypes.ID)`),
    PowerRank: z.number().nullable().describe(`
        * * Field Name: PowerRank
        * * Display Name: Power Rank
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Optional column that ranks the power of the AI model. Default is 0 and should be non-negative.`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Controls whether this AI model is available for use in the system.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    SpeedRank: z.number().nullable().describe(`
        * * Field Name: SpeedRank
        * * Display Name: Speed Rank
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Optional column that ranks the speed of the AI model. Default is 0 and should be non-negative.`),
    CostRank: z.number().nullable().describe(`
        * * Field Name: CostRank
        * * Display Name: Cost Rank
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Optional column that ranks the cost of the AI model. Default is 0 and should be non-negative.`),
    ModelSelectionInsights: z.string().nullable().describe(`
        * * Field Name: ModelSelectionInsights
        * * Display Name: Model Selection Insights
        * * SQL Data Type: nvarchar(MAX)
        * * Description: This column stores unstructured text notes that provide insights into what the model is particularly good at and areas where it may not perform as well. These notes can be used by a human or an AI to determine if the model is a good fit for various purposes.`),
    AIModelType: z.string().describe(`
        * * Field Name: AIModelType
        * * Display Name: AIModel Type
        * * SQL Data Type: nvarchar(50)`),
    Vendor: z.string().nullable().describe(`
        * * Field Name: Vendor
        * * Display Name: Vendor
        * * SQL Data Type: nvarchar(50)`),
    DriverClass: z.string().nullable().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(100)`),
    DriverImportPath: z.string().nullable().describe(`
        * * Field Name: DriverImportPath
        * * Display Name: Driver Import Path
        * * SQL Data Type: nvarchar(255)`),
    APIName: z.string().nullable().describe(`
        * * Field Name: APIName
        * * Display Name: APIName
        * * SQL Data Type: nvarchar(100)`),
    InputTokenLimit: z.number().nullable().describe(`
        * * Field Name: InputTokenLimit
        * * Display Name: Input Token Limit
        * * SQL Data Type: int`),
    SupportedResponseFormats: z.string().nullable().describe(`
        * * Field Name: SupportedResponseFormats
        * * Display Name: Supported Response Formats
        * * SQL Data Type: nvarchar(100)`),
    SupportsEffortLevel: z.boolean().nullable().describe(`
        * * Field Name: SupportsEffortLevel
        * * Display Name: Supports Effort Level
        * * SQL Data Type: bit`),
});

export type AIModelEntityType = z.infer<typeof AIModelSchema>;

/**
 * zod schema definition for the entity AI Prompt Categories
 */
export const AIPromptCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompt Categories (vwAIPromptCategories.ID)
        * * Description: Parent category ID for hierarchical organization.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type AIPromptCategoryEntityType = z.infer<typeof AIPromptCategorySchema>;

/**
 * zod schema definition for the entity AI Prompt Types
 */
export const AIPromptTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type AIPromptTypeEntityType = z.infer<typeof AIPromptTypeSchema>;

/**
 * zod schema definition for the entity AI Prompts
 */
export const AIPromptSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    TemplateID: z.string().describe(`
        * * Field Name: TemplateID
        * * Display Name: Template ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Templates (vwTemplates.ID)
        * * Description: Reference to the template used for the prompt.`),
    CategoryID: z.string().nullable().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompt Categories (vwAIPromptCategories.ID)
        * * Description: Reference to the category the prompt belongs to.`),
    TypeID: z.string().describe(`
        * * Field Name: TypeID
        * * Display Name: Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompt Types (vwAIPromptTypes.ID)
        * * Description: Reference to the type of the prompt.`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ResponseFormat: z.union([z.literal('Any'), z.literal('JSON'), z.literal('Markdown'), z.literal('ModelSpecific'), z.literal('Text')]).describe(`
        * * Field Name: ResponseFormat
        * * Display Name: Response Format
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Any
    * * Value List Type: List
    * * Possible Values 
    *   * Any
    *   * JSON
    *   * Markdown
    *   * ModelSpecific
    *   * Text
        * * Description: Specifies the expected response format for the AI model. Options include Any, Text, Markdown, JSON, and ModelSpecific. Defaults to Any if not specified.`),
    ModelSpecificResponseFormat: z.string().nullable().describe(`
        * * Field Name: ModelSpecificResponseFormat
        * * Display Name: Model Specific Response Format
        * * SQL Data Type: nvarchar(MAX)
        * * Description: A JSON-formatted string containing model-specific response format instructions. This will be parsed and provided as a JSON object to the model.`),
    AIModelTypeID: z.string().nullable().describe(`
        * * Field Name: AIModelTypeID
        * * Display Name: AI Model Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Model Types (vwAIModelTypes.ID)
        * * Description: References the type of AI model this prompt is designed for (LLM, Image, Audio, etc.).`),
    MinPowerRank: z.number().nullable().describe(`
        * * Field Name: MinPowerRank
        * * Display Name: Min Power Rank
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: The minimum power rank required for models to be considered for this prompt.`),
    SelectionStrategy: z.union([z.literal('ByPower'), z.literal('Default'), z.literal('Specific')]).describe(`
        * * Field Name: SelectionStrategy
        * * Display Name: Selection Strategy
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Default
    * * Value List Type: List
    * * Possible Values 
    *   * ByPower
    *   * Default
    *   * Specific
        * * Description: Determines how models are selected for this prompt (Default, Specific, ByPower).`),
    PowerPreference: z.union([z.literal('Balanced'), z.literal('Highest'), z.literal('Lowest')]).describe(`
        * * Field Name: PowerPreference
        * * Display Name: Power Preference
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Highest
    * * Value List Type: List
    * * Possible Values 
    *   * Balanced
    *   * Highest
    *   * Lowest
        * * Description: When using ByPower selection strategy, determines whether to prefer highest, lowest, or balanced power models.`),
    ParallelizationMode: z.union([z.literal('ConfigParam'), z.literal('ModelSpecific'), z.literal('None'), z.literal('StaticCount')]).describe(`
        * * Field Name: ParallelizationMode
        * * Display Name: Parallelization Mode
        * * SQL Data Type: nvarchar(20)
        * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * ConfigParam
    *   * ModelSpecific
    *   * None
    *   * StaticCount
        * * Description: Controls parallelization: None (no parallelization), StaticCount (use AIPrompt.ParallelCount for total runs), ConfigParam (use config param specified in ParallelConfigParam for total runs), or ModelSpecific (check each AIPromptModel's individual settings).`),
    ParallelCount: z.number().nullable().describe(`
        * * Field Name: ParallelCount
        * * Display Name: Parallel Count
        * * SQL Data Type: int
        * * Description: When ParallelizationMode is StaticCount, specifies the number of parallel executions.`),
    ParallelConfigParam: z.string().nullable().describe(`
        * * Field Name: ParallelConfigParam
        * * Display Name: Parallel Config Param
        * * SQL Data Type: nvarchar(100)
        * * Description: When ParallelizationMode is ConfigParam, specifies the name of the configuration parameter that contains the parallel count.`),
    OutputType: z.union([z.literal('boolean'), z.literal('date'), z.literal('number'), z.literal('object'), z.literal('string')]).describe(`
        * * Field Name: OutputType
        * * Display Name: Output Type
        * * SQL Data Type: nvarchar(50)
        * * Default Value: string
    * * Value List Type: List
    * * Possible Values 
    *   * boolean
    *   * date
    *   * number
    *   * object
    *   * string
        * * Description: The expected data type of the prompt output: string, number, boolean, date, or object.`),
    OutputExample: z.string().nullable().describe(`
        * * Field Name: OutputExample
        * * Display Name: Output Example
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON example output when OutputType is "object", used for validating structured outputs.`),
    ValidationBehavior: z.union([z.literal('None'), z.literal('Strict'), z.literal('Warn')]).describe(`
        * * Field Name: ValidationBehavior
        * * Display Name: Validation Behavior
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Warn
    * * Value List Type: List
    * * Possible Values 
    *   * None
    *   * Strict
    *   * Warn
        * * Description: Determines how validation failures are handled: Strict (fail), Warn (log warning), or None (ignore).`),
    MaxRetries: z.number().describe(`
        * * Field Name: MaxRetries
        * * Display Name: Max Retries
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Maximum number of retry attempts for API failures.`),
    RetryDelayMS: z.number().describe(`
        * * Field Name: RetryDelayMS
        * * Display Name: Retry Delay MS
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Delay between retry attempts in milliseconds.`),
    RetryStrategy: z.union([z.literal('Exponential'), z.literal('Fixed'), z.literal('Linear')]).describe(`
        * * Field Name: RetryStrategy
        * * Display Name: Retry Strategy
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Fixed
    * * Value List Type: List
    * * Possible Values 
    *   * Exponential
    *   * Fixed
    *   * Linear
        * * Description: Strategy for calculating retry delays: Fixed (same delay each time), Exponential (doubling delay), or Linear (linearly increasing delay).`),
    ResultSelectorPromptID: z.string().nullable().describe(`
        * * Field Name: ResultSelectorPromptID
        * * Display Name: Result Selector Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: References another prompt that selects the best result from multiple parallel executions.`),
    EnableCaching: z.boolean().describe(`
        * * Field Name: EnableCaching
        * * Display Name: Enable Caching
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: When true, results from this prompt will be cached for potential reuse.`),
    CacheTTLSeconds: z.number().nullable().describe(`
        * * Field Name: CacheTTLSeconds
        * * Display Name: Cache TTL Seconds
        * * SQL Data Type: int
        * * Description: Time-to-live in seconds for cached results. NULL means results never expire.`),
    CacheMatchType: z.union([z.literal('Exact'), z.literal('Vector')]).describe(`
        * * Field Name: CacheMatchType
        * * Display Name: Cache Match Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Exact
    * * Value List Type: List
    * * Possible Values 
    *   * Exact
    *   * Vector
        * * Description: Method for matching cached results: Exact (string matching) or Vector (embedding similarity).`),
    CacheSimilarityThreshold: z.number().nullable().describe(`
        * * Field Name: CacheSimilarityThreshold
        * * Display Name: Cache Similarity Threshold
        * * SQL Data Type: float(53)
        * * Description: Threshold (0-1) for vector similarity matching. Higher values require closer matches.`),
    CacheMustMatchModel: z.boolean().describe(`
        * * Field Name: CacheMustMatchModel
        * * Display Name: Cache Must Match Model
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When true, the AI model must match for a cache hit. When false, results from any model can be used.`),
    CacheMustMatchVendor: z.boolean().describe(`
        * * Field Name: CacheMustMatchVendor
        * * Display Name: Cache Must Match Vendor
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When true, the vendor must match for a cache hit. When false, results from any vendor can be used.`),
    CacheMustMatchAgent: z.boolean().describe(`
        * * Field Name: CacheMustMatchAgent
        * * Display Name: Cache Must Match Agent
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: When true, the agent context must match for a cache hit. When false, agent-specific and non-agent results can be used interchangeably.`),
    CacheMustMatchConfig: z.boolean().describe(`
        * * Field Name: CacheMustMatchConfig
        * * Display Name: Cache Must Match Config
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: When true, the configuration must match for a cache hit. When false, results from any configuration can be used.`),
    PromptRole: z.union([z.literal('Assistant'), z.literal('System'), z.literal('SystemOrUser'), z.literal('User')]).describe(`
        * * Field Name: PromptRole
        * * Display Name: Prompt Role
        * * SQL Data Type: nvarchar(20)
        * * Default Value: System
    * * Value List Type: List
    * * Possible Values 
    *   * Assistant
    *   * System
    *   * SystemOrUser
    *   * User
        * * Description: Determines how the prompt is used in conversation: System (always first message), User (positioned by PromptPosition), Assistant (positioned by PromptPosition), or SystemOrUser (try system first, fallback to user last if system slot taken)`),
    PromptPosition: z.union([z.literal('First'), z.literal('Last')]).describe(`
        * * Field Name: PromptPosition
        * * Display Name: Prompt Position
        * * SQL Data Type: nvarchar(20)
        * * Default Value: First
    * * Value List Type: List
    * * Possible Values 
    *   * First
    *   * Last
        * * Description: Controls message placement for User and Assistant role prompts: First (beginning of conversation) or Last (end of conversation). Not used for System role prompts which are always first`),
    Temperature: z.number().nullable().describe(`
        * * Field Name: Temperature
        * * Display Name: Temperature
        * * SQL Data Type: decimal(3, 2)
        * * Description: Default temperature setting for this prompt. Controls randomness in the output. 0 = more focused and deterministic, 2 = more random and creative. Can be overridden at runtime.`),
    TopP: z.number().nullable().describe(`
        * * Field Name: TopP
        * * Display Name: Top P
        * * SQL Data Type: decimal(3, 2)
        * * Description: Default TopP (nucleus sampling) for this prompt. Only consider tokens with cumulative probability up to this value. 1 = consider all tokens. Can be overridden at runtime.`),
    TopK: z.number().nullable().describe(`
        * * Field Name: TopK
        * * Display Name: Top K
        * * SQL Data Type: int
        * * Description: Default TopK sampling for this prompt. Only sample from the top K tokens. Lower values reduce randomness. Can be overridden at runtime.`),
    MinP: z.number().nullable().describe(`
        * * Field Name: MinP
        * * Display Name: Min P
        * * SQL Data Type: decimal(3, 2)
        * * Description: Default MinP (minimum probability) for this prompt. Tokens with probability below this threshold are filtered out. Can be overridden at runtime.`),
    FrequencyPenalty: z.number().nullable().describe(`
        * * Field Name: FrequencyPenalty
        * * Display Name: Frequency Penalty
        * * SQL Data Type: decimal(3, 2)
        * * Description: Default frequency penalty for this prompt. Penalizes tokens based on their frequency in the text. Positive values decrease likelihood of repetition. Can be overridden at runtime.`),
    PresencePenalty: z.number().nullable().describe(`
        * * Field Name: PresencePenalty
        * * Display Name: Presence Penalty
        * * SQL Data Type: decimal(3, 2)
        * * Description: Default presence penalty for this prompt. Penalizes tokens that have appeared in the text. Positive values increase topic diversity. Can be overridden at runtime.`),
    Seed: z.number().nullable().describe(`
        * * Field Name: Seed
        * * Display Name: Seed
        * * SQL Data Type: int
        * * Description: Default random seed for this prompt. Used for deterministic generation. Same seed produces same output. Can be overridden at runtime.`),
    StopSequences: z.string().nullable().describe(`
        * * Field Name: StopSequences
        * * Display Name: Stop Sequences
        * * SQL Data Type: nvarchar(1000)
        * * Description: Default stop sequences for this prompt. Comma-delimited list of sequences that will stop generation when encountered. Can be overridden at runtime.`),
    IncludeLogProbs: z.boolean().nullable().describe(`
        * * Field Name: IncludeLogProbs
        * * Display Name: Include Log Probs
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Default setting for including log probabilities in the response. Can be overridden at runtime.`),
    TopLogProbs: z.number().nullable().describe(`
        * * Field Name: TopLogProbs
        * * Display Name: Top Log Probs
        * * SQL Data Type: int
        * * Description: Default number of top log probabilities to include when IncludeLogProbs is true. Can be overridden at runtime.`),
    FailoverStrategy: z.union([z.literal('NextBestModel'), z.literal('NextBestModel'), z.literal('None'), z.literal('None'), z.literal('PowerRank'), z.literal('PowerRank'), z.literal('SameModelDifferentVendor'), z.literal('SameModelDifferentVendor')]).describe(`
        * * Field Name: FailoverStrategy
        * * Display Name: Failover Strategy
        * * SQL Data Type: nvarchar(50)
        * * Default Value: SameModelDifferentVendor
    * * Value List Type: List
    * * Possible Values 
    *   * NextBestModel
    *   * NextBestModel
    *   * None
    *   * None
    *   * PowerRank
    *   * PowerRank
    *   * SameModelDifferentVendor
    *   * SameModelDifferentVendor
        * * Description: Failover strategy to use when the primary model fails. Options: SameModelDifferentVendor, NextBestModel, PowerRank, None`),
    FailoverMaxAttempts: z.number().nullable().describe(`
        * * Field Name: FailoverMaxAttempts
        * * Display Name: Failover Max Attempts
        * * SQL Data Type: int
        * * Default Value: 3
        * * Description: Maximum number of failover attempts before giving up`),
    FailoverDelaySeconds: z.number().nullable().describe(`
        * * Field Name: FailoverDelaySeconds
        * * Display Name: Failover Delay Seconds
        * * SQL Data Type: int
        * * Default Value: 5
        * * Description: Initial delay in seconds between failover attempts`),
    FailoverModelStrategy: z.union([z.literal('PreferDifferentModel'), z.literal('PreferDifferentModel'), z.literal('PreferSameModel'), z.literal('PreferSameModel'), z.literal('RequireSameModel'), z.literal('RequireSameModel')]).describe(`
        * * Field Name: FailoverModelStrategy
        * * Display Name: Failover Model Strategy
        * * SQL Data Type: nvarchar(50)
        * * Default Value: PreferSameModel
    * * Value List Type: List
    * * Possible Values 
    *   * PreferDifferentModel
    *   * PreferDifferentModel
    *   * PreferSameModel
    *   * PreferSameModel
    *   * RequireSameModel
    *   * RequireSameModel
        * * Description: Strategy for selecting failover models. Options: PreferSameModel, PreferDifferentModel, RequireSameModel`),
    FailoverErrorScope: z.union([z.literal('All'), z.literal('All'), z.literal('NetworkOnly'), z.literal('NetworkOnly'), z.literal('RateLimitOnly'), z.literal('RateLimitOnly'), z.literal('ServiceErrorOnly'), z.literal('ServiceErrorOnly')]).describe(`
        * * Field Name: FailoverErrorScope
        * * Display Name: Failover Error Scope
        * * SQL Data Type: nvarchar(50)
        * * Default Value: All
    * * Value List Type: List
    * * Possible Values 
    *   * All
    *   * All
    *   * NetworkOnly
    *   * NetworkOnly
    *   * RateLimitOnly
    *   * RateLimitOnly
    *   * ServiceErrorOnly
    *   * ServiceErrorOnly
        * * Description: Types of errors that should trigger failover. Options: All, NetworkOnly, RateLimitOnly, ServiceErrorOnly`),
    EffortLevel: z.number().nullable().describe(`
        * * Field Name: EffortLevel
        * * Display Name: Effort Level
        * * SQL Data Type: int
        * * Description: Effort level for this specific prompt (1-100, where 1=minimal effort, 100=maximum effort). Higher values request more thorough reasoning and analysis. Can be overridden by agent DefaultPromptEffortLevel or runtime parameters.`),
    Template: z.string().describe(`
        * * Field Name: Template
        * * Display Name: Template
        * * SQL Data Type: nvarchar(255)`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(255)`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(255)`),
    AIModelType: z.string().nullable().describe(`
        * * Field Name: AIModelType
        * * Display Name: AI Model Type
        * * SQL Data Type: nvarchar(50)`),
    ResultSelectorPrompt: z.string().nullable().describe(`
        * * Field Name: ResultSelectorPrompt
        * * Display Name: Result Selector Prompt
        * * SQL Data Type: nvarchar(255)`),
    RootResultSelectorPromptID: z.string().nullable().describe(`
        * * Field Name: RootResultSelectorPromptID
        * * Display Name: Root Result Selector Prompt ID
        * * SQL Data Type: uniqueidentifier`),
});

export type AIPromptEntityType = z.infer<typeof AIPromptSchema>;

/**
 * zod schema definition for the entity AI Result Cache
 */
export const AIResultCacheSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AIPromptID: z.string().describe(`
        * * Field Name: AIPromptID
        * * Display Name: AIPrompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: Reference to the AI prompt this result corresponds to.`),
    AIModelID: z.string().describe(`
        * * Field Name: AIModelID
        * * Display Name: AIModel ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
        * * Description: Reference to the AI model that generated this result.`),
    RunAt: z.date().describe(`
        * * Field Name: RunAt
        * * Display Name: Run At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp of when this result was generated.`),
    PromptText: z.string().describe(`
        * * Field Name: PromptText
        * * Display Name: Prompt Text
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The prompt text used to generate this result.`),
    ResultText: z.string().nullable().describe(`
        * * Field Name: ResultText
        * * Display Name: Result Text
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The text of the result generated by the AI model.`),
    Status: z.union([z.literal('Active'), z.literal('Expired')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Expired
        * * Description: The status of this result, indicating whether it is currently active or expired.`),
    ExpiredOn: z.date().nullable().describe(`
        * * Field Name: ExpiredOn
        * * Display Name: Expired On
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp of when this result was marked as expired.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    VendorID: z.string().nullable().describe(`
        * * Field Name: VendorID
        * * Display Name: Vendor ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
        * * Description: The vendor that provided this result.`),
    AgentID: z.string().nullable().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: The agent that initiated the request, if any.`),
    ConfigurationID: z.string().nullable().describe(`
        * * Field Name: ConfigurationID
        * * Display Name: Configuration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
        * * Description: The configuration used for this execution.`),
    PromptEmbedding: z.number().nullable().describe(`
        * * Field Name: PromptEmbedding
        * * Display Name: Prompt Embedding
        * * SQL Data Type: varbinary
        * * Description: Vector representation of the prompt for similarity matching.`),
    PromptRunID: z.string().nullable().describe(`
        * * Field Name: PromptRunID
        * * Display Name: Prompt Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Prompt Runs (vwAIPromptRuns.ID)
        * * Description: Reference to the AIPromptRun that created this cache entry.`),
    AIPrompt: z.string().describe(`
        * * Field Name: AIPrompt
        * * Display Name: AIPrompt
        * * SQL Data Type: nvarchar(255)`),
    AIModel: z.string().describe(`
        * * Field Name: AIModel
        * * Display Name: AIModel
        * * SQL Data Type: nvarchar(50)`),
    Vendor: z.string().nullable().describe(`
        * * Field Name: Vendor
        * * Display Name: Vendor
        * * SQL Data Type: nvarchar(50)`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(100)`),
});

export type AIResultCacheEntityType = z.infer<typeof AIResultCacheSchema>;

/**
 * zod schema definition for the entity Application Entities
 */
export const ApplicationEntitySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ApplicationID: z.string().describe(`
        * * Field Name: ApplicationID
        * * Display Name: Application ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Applications (vwApplications.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * SQL Data Type: int
        * * Description: Display order of this entity within the application, lower numbers appear first in navigation and menus.`),
    DefaultForNewUser: z.boolean().describe(`
        * * Field Name: DefaultForNewUser
        * * Display Name: Default For New User
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When set to 1, the entity will be included by default for a new user when they first access the application in question`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Application: z.string().describe(`
        * * Field Name: Application
        * * SQL Data Type: nvarchar(100)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    EntityBaseTable: z.string().describe(`
        * * Field Name: EntityBaseTable
        * * Display Name: Entity Base Table
        * * SQL Data Type: nvarchar(255)`),
    EntityCodeName: z.string().nullable().describe(`
        * * Field Name: EntityCodeName
        * * Display Name: Entity Code Name
        * * SQL Data Type: nvarchar(MAX)`),
    EntityClassName: z.string().nullable().describe(`
        * * Field Name: EntityClassName
        * * Display Name: Entity Class Name
        * * SQL Data Type: nvarchar(MAX)`),
    EntityBaseTableCodeName: z.string().nullable().describe(`
        * * Field Name: EntityBaseTableCodeName
        * * Display Name: Entity Base Table Code Name
        * * SQL Data Type: nvarchar(MAX)`),
});

export type ApplicationEntityEntityType = z.infer<typeof ApplicationEntitySchema>;

/**
 * zod schema definition for the entity Application Settings
 */
export const ApplicationSettingSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ApplicationID: z.string().describe(`
        * * Field Name: ApplicationID
        * * Display Name: Application ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Applications (vwApplications.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Value: z.string().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The setting value, can be simple text, numbers, booleans, or JSON for complex configuration objects.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Application: z.string().describe(`
        * * Field Name: Application
        * * Display Name: Application
        * * SQL Data Type: nvarchar(100)`),
});

export type ApplicationSettingEntityType = z.infer<typeof ApplicationSettingSchema>;

/**
 * zod schema definition for the entity Applications
 */
export const ApplicationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    Icon: z.string().nullable().describe(`
        * * Field Name: Icon
        * * Display Name: Icon
        * * SQL Data Type: nvarchar(500)
        * * Description: Specify the CSS class information for the display icon for each application.`),
    DefaultForNewUser: z.boolean().describe(`
        * * Field Name: DefaultForNewUser
        * * Display Name: Default For New User
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: If turned on, when a new user first uses the MJ Explorer app, the application records with this turned on will have this application included in their selected application list.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    SchemaAutoAddNewEntities: z.string().nullable().describe(`
        * * Field Name: SchemaAutoAddNewEntities
        * * Display Name: Schema Auto Add New Entities
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Comma-delimited list of schema names where entities will be automatically added to the application when created in those schemas`),
});

export type ApplicationEntityType = z.infer<typeof ApplicationSchema>;

/**
 * zod schema definition for the entity Audit Log Types
 */
export const AuditLogTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Audit Log Types (vwAuditLogTypes.ID)`),
    AuthorizationID: z.string().nullable().describe(`
        * * Field Name: AuthorizationID
        * * Display Name: Authorization ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(50)`),
    Authorization: z.string().nullable().describe(`
        * * Field Name: Authorization
        * * Display Name: Authorization
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type AuditLogTypeEntityType = z.infer<typeof AuditLogTypeSchema>;

/**
 * zod schema definition for the entity Audit Logs
 */
export const AuditLogSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    AuditLogTypeID: z.string().describe(`
        * * Field Name: AuditLogTypeID
        * * Display Name: Audit Log Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Audit Log Types (vwAuditLogTypes.ID)`),
    AuthorizationID: z.string().nullable().describe(`
        * * Field Name: AuthorizationID
        * * Display Name: Authorization ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)`),
    Status: z.union([z.literal('Failed'), z.literal('Success')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Allow
    * * Value List Type: List
    * * Possible Values 
    *   * Failed
    *   * Success`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    Details: z.string().nullable().describe(`
        * * Field Name: Details
        * * Display Name: Details
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON-formatted additional context about the audited event, including before/after values, parameters, or other relevant data.`),
    EntityID: z.string().nullable().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().nullable().describe(`
        * * Field Name: RecordID
        * * Display Name: Record
        * * SQL Data Type: nvarchar(450)
        * * Description: The primary key value of the record that was affected by this audited action, enabling direct lookup of the modified data.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    AuditLogType: z.string().describe(`
        * * Field Name: AuditLogType
        * * Display Name: Audit Log Type
        * * SQL Data Type: nvarchar(50)`),
    Authorization: z.string().nullable().describe(`
        * * Field Name: Authorization
        * * Display Name: Authorization
        * * SQL Data Type: nvarchar(100)`),
    Entity: z.string().nullable().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type AuditLogEntityType = z.infer<typeof AuditLogSchema>;

/**
 * zod schema definition for the entity Authorization Roles
 */
export const AuthorizationRoleSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AuthorizationID: z.string().describe(`
        * * Field Name: AuthorizationID
        * * Display Name: Authorization ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)`),
    RoleID: z.string().describe(`
        * * Field Name: RoleID
        * * Display Name: Role ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Roles (vwRoles.ID)`),
    Type: z.union([z.literal('Allow'), z.literal('Deny')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nchar(10)
        * * Default Value: grant
    * * Value List Type: List
    * * Possible Values 
    *   * Allow
    *   * Deny
        * * Description: Specifies whether this authorization is granted to ('grant') or explicitly denied ('deny') for the role.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Authorization: z.string().describe(`
        * * Field Name: Authorization
        * * Display Name: Authorization
        * * SQL Data Type: nvarchar(100)`),
    Role: z.string().describe(`
        * * Field Name: Role
        * * Display Name: Role
        * * SQL Data Type: nvarchar(50)`),
});

export type AuthorizationRoleEntityType = z.infer<typeof AuthorizationRoleSchema>;

/**
 * zod schema definition for the entity Authorizations
 */
export const AuthorizationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates whether this authorization is currently active and can be granted to users or roles.`),
    UseAuditLog: z.boolean().describe(`
        * * Field Name: UseAuditLog
        * * Display Name: Use Audit Log
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When set to 1, Audit Log records are created whenever this authorization is invoked for a user`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type AuthorizationEntityType = z.infer<typeof AuthorizationSchema>;

/**
 * zod schema definition for the entity Communication Base Message Types
 */
export const CommunicationBaseMessageTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(100)
        * * Description: The unique identifier for this message type, used for routing and processing communications.`),
    SupportsAttachments: z.boolean().describe(`
        * * Field Name: SupportsAttachments
        * * Display Name: Supports Attachments
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if attachments are supported.`),
    SupportsSubjectLine: z.boolean().describe(`
        * * Field Name: SupportsSubjectLine
        * * Display Name: Supports Subject Line
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if a subject line is supported.`),
    SupportsHtml: z.boolean().describe(`
        * * Field Name: SupportsHtml
        * * Display Name: Supports Html
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if HTML content is supported.`),
    MaxBytes: z.number().nullable().describe(`
        * * Field Name: MaxBytes
        * * Display Name: Max Bytes
        * * SQL Data Type: int
        * * Description: The maximum size in bytes for the message.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type CommunicationBaseMessageTypeEntityType = z.infer<typeof CommunicationBaseMessageTypeSchema>;

/**
 * zod schema definition for the entity Communication Logs
 */
export const CommunicationLogSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CommunicationProviderID: z.string().describe(`
        * * Field Name: CommunicationProviderID
        * * Display Name: Communication Provider ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Communication Providers (vwCommunicationProviders.ID)`),
    CommunicationProviderMessageTypeID: z.string().describe(`
        * * Field Name: CommunicationProviderMessageTypeID
        * * Display Name: Communication Provider Message Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Communication Provider Message Types (vwCommunicationProviderMessageTypes.ID)`),
    CommunicationRunID: z.string().nullable().describe(`
        * * Field Name: CommunicationRunID
        * * Display Name: Communication Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Communication Runs (vwCommunicationRuns.ID)`),
    Direction: z.union([z.literal('Receiving'), z.literal('Sending')]).describe(`
        * * Field Name: Direction
        * * Display Name: Direction
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Receiving
    *   * Sending
        * * Description: The direction of the communication log (Sending or Receiving).`),
    MessageDate: z.date().describe(`
        * * Field Name: MessageDate
        * * Display Name: Message Date
        * * SQL Data Type: datetime
        * * Description: The date and time when the message was logged.`),
    Status: z.union([z.literal('Complete'), z.literal('Failed'), z.literal('In-Progress'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In-Progress
    *   * Pending
        * * Description: The status of the logged message (Pending, In-Progress, Complete, Failed).`),
    MessageContent: z.string().nullable().describe(`
        * * Field Name: MessageContent
        * * Display Name: Message Content
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The content of the logged message.`),
    ErrorMessage: z.string().nullable().describe(`
        * * Field Name: ErrorMessage
        * * Display Name: Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The error message if the message sending failed.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    CommunicationProvider: z.string().describe(`
        * * Field Name: CommunicationProvider
        * * Display Name: Communication Provider
        * * SQL Data Type: nvarchar(255)`),
    CommunicationProviderMessageType: z.string().describe(`
        * * Field Name: CommunicationProviderMessageType
        * * Display Name: Communication Provider Message Type
        * * SQL Data Type: nvarchar(255)`),
});

export type CommunicationLogEntityType = z.infer<typeof CommunicationLogSchema>;

/**
 * zod schema definition for the entity Communication Provider Message Types
 */
export const CommunicationProviderMessageTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CommunicationProviderID: z.string().describe(`
        * * Field Name: CommunicationProviderID
        * * Display Name: Communication Provider ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Communication Providers (vwCommunicationProviders.ID)`),
    CommunicationBaseMessageTypeID: z.string().describe(`
        * * Field Name: CommunicationBaseMessageTypeID
        * * Display Name: Communication Base Message Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Communication Base Message Types (vwCommunicationBaseMessageTypes.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Status: z.union([z.literal('Active'), z.literal('Disabled')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Disabled
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
        * * Description: The status of the provider message type (Disabled or Active).`),
    AdditionalAttributes: z.string().nullable().describe(`
        * * Field Name: AdditionalAttributes
        * * Display Name: Additional Attributes
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Additional attributes specific to the provider message type.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    CommunicationProvider: z.string().describe(`
        * * Field Name: CommunicationProvider
        * * Display Name: Communication Provider
        * * SQL Data Type: nvarchar(255)`),
    CommunicationBaseMessageType: z.string().describe(`
        * * Field Name: CommunicationBaseMessageType
        * * Display Name: Communication Base Message Type
        * * SQL Data Type: nvarchar(100)`),
});

export type CommunicationProviderMessageTypeEntityType = z.infer<typeof CommunicationProviderMessageTypeSchema>;

/**
 * zod schema definition for the entity Communication Providers
 */
export const CommunicationProviderSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    Status: z.union([z.literal('Active'), z.literal('Disabled')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Disabled
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
        * * Description: The status of the communication provider (Disabled or Active).`),
    SupportsSending: z.boolean().describe(`
        * * Field Name: SupportsSending
        * * Display Name: Supports Sending
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if the provider supports sending messages.`),
    SupportsReceiving: z.boolean().describe(`
        * * Field Name: SupportsReceiving
        * * Display Name: Supports Receiving
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if the provider supports receiving messages.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    SupportsScheduledSending: z.boolean().describe(`
        * * Field Name: SupportsScheduledSending
        * * Display Name: Supports Scheduled Sending
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether or not the provider supports sending messages at a specific time`),
    SupportsForwarding: z.boolean().describe(`
        * * Field Name: SupportsForwarding
        * * Display Name: Supports Forwarding
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether or not the provider supports forwarding messages to another recipient `),
    SupportsReplying: z.boolean().describe(`
        * * Field Name: SupportsReplying
        * * Display Name: Supports Replying
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether or not the provider supports replying to messages`),
    SupportsDrafts: z.boolean().describe(`
        * * Field Name: SupportsDrafts
        * * Display Name: Supports Drafts
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether or not the provider supports creating draft messages`),
});

export type CommunicationProviderEntityType = z.infer<typeof CommunicationProviderSchema>;

/**
 * zod schema definition for the entity Communication Runs
 */
export const CommunicationRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    Direction: z.union([z.literal('Receiving'), z.literal('Sending')]).describe(`
        * * Field Name: Direction
        * * Display Name: Direction
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Receiving
    *   * Sending
        * * Description: The direction of the communication run (Sending or Receiving).`),
    Status: z.union([z.literal('Complete'), z.literal('Failed'), z.literal('In-Progress'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In-Progress
    *   * Pending
        * * Description: The status of the communication run (Pending, In-Progress, Complete, Failed).`),
    StartedAt: z.date().nullable().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetime`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetime`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    ErrorMessage: z.string().nullable().describe(`
        * * Field Name: ErrorMessage
        * * Display Name: Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The error message if the communication run failed.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type CommunicationRunEntityType = z.infer<typeof CommunicationRunSchema>;

/**
 * zod schema definition for the entity Companies
 */
export const CompanySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(50)`),
    Description: z.string().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(200)`),
    Website: z.string().nullable().describe(`
        * * Field Name: Website
        * * SQL Data Type: nvarchar(100)
        * * Description: The primary website URL for this company or division.`),
    LogoURL: z.string().nullable().describe(`
        * * Field Name: LogoURL
        * * Display Name: Logo URL
        * * SQL Data Type: nvarchar(500)
        * * Description: URL pointing to the company's logo image, used for branding in the UI.`),
    Domain: z.string().nullable().describe(`
        * * Field Name: Domain
        * * Display Name: Domain
        * * SQL Data Type: nvarchar(255)
        * * Description: The primary email domain associated with this company, used for employee email validation and SSO configuration.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type CompanyEntityType = z.infer<typeof CompanySchema>;

/**
 * zod schema definition for the entity Company Integration Record Maps
 */
export const CompanyIntegrationRecordMapSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CompanyIntegrationID: z.string().describe(`
        * * Field Name: CompanyIntegrationID
        * * Display Name: Company Integration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)`),
    ExternalSystemRecordID: z.string().describe(`
        * * Field Name: ExternalSystemRecordID
        * * Display Name: External System Record ID
        * * SQL Data Type: nvarchar(750)
        * * Description: The unique identifier for this record in the external integrated system.`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    EntityRecordID: z.string().describe(`
        * * Field Name: EntityRecordID
        * * Display Name: Entity Record ID
        * * SQL Data Type: nvarchar(750)
        * * Description: The internal MemberJunction record ID that corresponds to the external system record.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    CompanyIntegration: z.string().describe(`
        * * Field Name: CompanyIntegration
        * * Display Name: Company Integration
        * * SQL Data Type: nvarchar(255)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type CompanyIntegrationRecordMapEntityType = z.infer<typeof CompanyIntegrationRecordMapSchema>;

/**
 * zod schema definition for the entity Company Integration Run API Logs
 */
export const CompanyIntegrationRunAPILogSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CompanyIntegrationRunID: z.string().describe(`
        * * Field Name: CompanyIntegrationRunID
        * * Display Name: Company Integration Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Company Integration Runs (vwCompanyIntegrationRuns.ID)`),
    ExecutedAt: z.date().describe(`
        * * Field Name: ExecutedAt
        * * Display Name: Executed At
        * * SQL Data Type: datetime
        * * Default Value: getdate()
        * * Description: Timestamp when this API call was executed during the integration run.`),
    IsSuccess: z.boolean().describe(`
        * * Field Name: IsSuccess
        * * Display Name: Is Success
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether the API call completed successfully or encountered an error.`),
    RequestMethod: z.union([z.literal('DELETE'), z.literal('GET'), z.literal('HEAD'), z.literal('OPTIONS'), z.literal('PATCH'), z.literal('POST'), z.literal('PUT')]).nullable().describe(`
        * * Field Name: RequestMethod
        * * Display Name: Request Method
        * * SQL Data Type: nvarchar(12)
    * * Value List Type: List
    * * Possible Values 
    *   * DELETE
    *   * GET
    *   * HEAD
    *   * OPTIONS
    *   * PATCH
    *   * POST
    *   * PUT
        * * Description: HTTP method used for the API call (GET, POST, PUT, DELETE, PATCH).`),
    URL: z.string().nullable().describe(`
        * * Field Name: URL
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The complete URL that was called, including query parameters.`),
    Parameters: z.string().nullable().describe(`
        * * Field Name: Parameters
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON-formatted request body or parameters sent with the API call.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type CompanyIntegrationRunAPILogEntityType = z.infer<typeof CompanyIntegrationRunAPILogSchema>;

/**
 * zod schema definition for the entity Company Integration Run Details
 */
export const CompanyIntegrationRunDetailSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CompanyIntegrationRunID: z.string().describe(`
        * * Field Name: CompanyIntegrationRunID
        * * Display Name: CompanyIntegrationRun ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Company Integration Runs (vwCompanyIntegrationRuns.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record
        * * SQL Data Type: nvarchar(450)
        * * Description: The ID of the specific record being processed in this integration operation.`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * SQL Data Type: nchar(20)
        * * Description: The type of operation performed (INSERT, UPDATE, DELETE, SYNC).`),
    ExecutedAt: z.date().describe(`
        * * Field Name: ExecutedAt
        * * Display Name: Executed At
        * * SQL Data Type: datetime
        * * Default Value: getdate()
        * * Description: Timestamp when this specific record operation was executed.`),
    IsSuccess: z.boolean().describe(`
        * * Field Name: IsSuccess
        * * Display Name: Is Success
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this individual record operation succeeded or failed.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    RunStartedAt: z.date().nullable().describe(`
        * * Field Name: RunStartedAt
        * * Display Name: Run Started At
        * * SQL Data Type: datetime`),
    RunEndedAt: z.date().nullable().describe(`
        * * Field Name: RunEndedAt
        * * Display Name: Run Ended At
        * * SQL Data Type: datetime`),
});

export type CompanyIntegrationRunDetailEntityType = z.infer<typeof CompanyIntegrationRunDetailSchema>;

/**
 * zod schema definition for the entity Company Integration Runs
 */
export const CompanyIntegrationRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CompanyIntegrationID: z.string().describe(`
        * * Field Name: CompanyIntegrationID
        * * Display Name: CompanyIntegration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)`),
    RunByUserID: z.string().describe(`
        * * Field Name: RunByUserID
        * * Display Name: RunByUser ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    StartedAt: z.date().nullable().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetime`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetime`),
    TotalRecords: z.number().describe(`
        * * Field Name: TotalRecords
        * * Display Name: Total Records
        * * SQL Data Type: int
        * * Description: The total number of records processed during this integration run.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Status: z.union([z.literal('Failed'), z.literal('In Progress'), z.literal('Pending'), z.literal('Success')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Failed
    *   * In Progress
    *   * Pending
    *   * Success
        * * Description: Status of the integration run. Possible values: Pending, In Progress, Success, Failed.`),
    ErrorLog: z.string().nullable().describe(`
        * * Field Name: ErrorLog
        * * Display Name: Error Log
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional error log information for the integration run.`),
    ConfigData: z.string().nullable().describe(`
        * * Field Name: ConfigData
        * * Display Name: Config Data
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional configuration data in JSON format for the request that started the integration run for audit purposes.`),
    Integration: z.string().describe(`
        * * Field Name: Integration
        * * Display Name: Integration
        * * SQL Data Type: nvarchar(100)`),
    Company: z.string().describe(`
        * * Field Name: Company
        * * Display Name: Company
        * * SQL Data Type: nvarchar(50)`),
    RunByUser: z.string().describe(`
        * * Field Name: RunByUser
        * * Display Name: Run By User
        * * SQL Data Type: nvarchar(100)`),
});

export type CompanyIntegrationRunEntityType = z.infer<typeof CompanyIntegrationRunSchema>;

/**
 * zod schema definition for the entity Company Integrations
 */
export const CompanyIntegrationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CompanyID: z.string().describe(`
        * * Field Name: CompanyID
        * * Display Name: Company ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Companies (vwCompanies.ID)`),
    IntegrationID: z.string().describe(`
        * * Field Name: IntegrationID
        * * Display Name: Integration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Integrations (vwIntegrations.ID)`),
    IsActive: z.boolean().nullable().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Description: Controls whether this integration is currently active for the company.`),
    AccessToken: z.string().nullable().describe(`
        * * Field Name: AccessToken
        * * Display Name: Access Token
        * * SQL Data Type: nvarchar(255)
        * * Description: OAuth access token for authenticating with the external system.`),
    RefreshToken: z.string().nullable().describe(`
        * * Field Name: RefreshToken
        * * Display Name: Refresh Token
        * * SQL Data Type: nvarchar(255)
        * * Description: OAuth refresh token used to obtain new access tokens when they expire.`),
    TokenExpirationDate: z.date().nullable().describe(`
        * * Field Name: TokenExpirationDate
        * * Display Name: Token Expiration Date
        * * SQL Data Type: datetime
        * * Description: Timestamp when the current access token expires and needs to be refreshed.`),
    APIKey: z.string().nullable().describe(`
        * * Field Name: APIKey
        * * SQL Data Type: nvarchar(255)
        * * Description: API key for systems using key-based authentication instead of OAuth.`),
    ExternalSystemID: z.string().nullable().describe(`
        * * Field Name: ExternalSystemID
        * * Display Name: ExternalSystem
        * * SQL Data Type: nvarchar(100)
        * * Description: The company's identifier in the external system, used for API calls.`),
    IsExternalSystemReadOnly: z.boolean().describe(`
        * * Field Name: IsExternalSystemReadOnly
        * * Display Name: Is External System Read Only
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if data can only be read from the external system, not written back.`),
    ClientID: z.string().nullable().describe(`
        * * Field Name: ClientID
        * * Display Name: Client
        * * SQL Data Type: nvarchar(255)
        * * Description: OAuth client ID for this integration instance.`),
    ClientSecret: z.string().nullable().describe(`
        * * Field Name: ClientSecret
        * * Display Name: Client Secret
        * * SQL Data Type: nvarchar(255)
        * * Description: OAuth client secret for authentication, should be encrypted at rest.`),
    CustomAttribute1: z.string().nullable().describe(`
        * * Field Name: CustomAttribute1
        * * Display Name: Custom Attribute 1
        * * SQL Data Type: nvarchar(255)
        * * Description: Flexible field for storing integration-specific configuration or metadata.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: User-friendly name for the company integration instance, typically in the format "Company: Integration".`),
    Company: z.string().describe(`
        * * Field Name: Company
        * * SQL Data Type: nvarchar(50)`),
    Integration: z.string().describe(`
        * * Field Name: Integration
        * * SQL Data Type: nvarchar(100)`),
    DriverClassName: z.string().nullable().describe(`
        * * Field Name: DriverClassName
        * * Display Name: Driver Class Name
        * * SQL Data Type: nvarchar(100)`),
    DriverImportPath: z.string().nullable().describe(`
        * * Field Name: DriverImportPath
        * * Display Name: Driver Import Path
        * * SQL Data Type: nvarchar(100)`),
    LastRunID: z.string().nullable().describe(`
        * * Field Name: LastRunID
        * * Display Name: LastRun
        * * SQL Data Type: uniqueidentifier`),
    LastRunStartedAt: z.date().nullable().describe(`
        * * Field Name: LastRunStartedAt
        * * Display Name: Last Run Started At
        * * SQL Data Type: datetime`),
    LastRunEndedAt: z.date().nullable().describe(`
        * * Field Name: LastRunEndedAt
        * * Display Name: Last Run Ended At
        * * SQL Data Type: datetime`),
});

export type CompanyIntegrationEntityType = z.infer<typeof CompanyIntegrationSchema>;

/**
 * zod schema definition for the entity Content File Types
 */
export const ContentFileTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    FileExtension: z.string().nullable().describe(`
        * * Field Name: FileExtension
        * * Display Name: File Extension
        * * SQL Data Type: nvarchar(255)
        * * Description: The file extension (e.g., .pdf, .docx, .jpg) used to identify this content type.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ContentFileTypeEntityType = z.infer<typeof ContentFileTypeSchema>;

/**
 * zod schema definition for the entity Content Item Attributes
 */
export const ContentItemAttributeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ContentItemID: z.string().describe(`
        * * Field Name: ContentItemID
        * * Display Name: Content Item ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content Items (vwContentItems.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Value: z.string().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The extracted or assigned value for this attribute on the content item.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ContentItem: z.string().nullable().describe(`
        * * Field Name: ContentItem
        * * Display Name: Content Item
        * * SQL Data Type: nvarchar(250)`),
});

export type ContentItemAttributeEntityType = z.infer<typeof ContentItemAttributeSchema>;

/**
 * zod schema definition for the entity Content Item Tags
 */
export const ContentItemTagSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ItemID: z.string().describe(`
        * * Field Name: ItemID
        * * Display Name: Item ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content Items (vwContentItems.ID)`),
    Tag: z.string().describe(`
        * * Field Name: Tag
        * * Display Name: Tag
        * * SQL Data Type: nvarchar(200)
        * * Description: The tag text applied to the content item for categorization and search.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Item: z.string().nullable().describe(`
        * * Field Name: Item
        * * Display Name: Item
        * * SQL Data Type: nvarchar(250)`),
});

export type ContentItemTagEntityType = z.infer<typeof ContentItemTagSchema>;

/**
 * zod schema definition for the entity Content Items
 */
export const ContentItemSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ContentSourceID: z.string().describe(`
        * * Field Name: ContentSourceID
        * * Display Name: Content Source ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content Sources (vwContentSources.ID)`),
    Name: z.string().nullable().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(250)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    ContentTypeID: z.string().describe(`
        * * Field Name: ContentTypeID
        * * Display Name: Content Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content Types (vwContentTypes.ID)`),
    ContentSourceTypeID: z.string().describe(`
        * * Field Name: ContentSourceTypeID
        * * Display Name: Content Source Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content Source Types (vwContentSourceTypes.ID)`),
    ContentFileTypeID: z.string().describe(`
        * * Field Name: ContentFileTypeID
        * * Display Name: Content File Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content File Types (vwContentFileTypes.ID)`),
    Checksum: z.string().nullable().describe(`
        * * Field Name: Checksum
        * * Display Name: Checksum
        * * SQL Data Type: nvarchar(100)
        * * Description: Hash value of the content used to detect changes and prevent duplicate processing.`),
    URL: z.string().describe(`
        * * Field Name: URL
        * * Display Name: URL
        * * SQL Data Type: nvarchar(2000)
        * * Description: The source location URL where this content was retrieved from.`),
    Text: z.string().nullable().describe(`
        * * Field Name: Text
        * * Display Name: Text
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The extracted text content from the source document or file.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ContentSource: z.string().nullable().describe(`
        * * Field Name: ContentSource
        * * Display Name: Content Source
        * * SQL Data Type: nvarchar(255)`),
    ContentType: z.string().describe(`
        * * Field Name: ContentType
        * * Display Name: Content Type
        * * SQL Data Type: nvarchar(255)`),
    ContentSourceType: z.string().describe(`
        * * Field Name: ContentSourceType
        * * Display Name: Content Source Type
        * * SQL Data Type: nvarchar(255)`),
    ContentFileType: z.string().describe(`
        * * Field Name: ContentFileType
        * * Display Name: Content File Type
        * * SQL Data Type: nvarchar(255)`),
});

export type ContentItemEntityType = z.infer<typeof ContentItemSchema>;

/**
 * zod schema definition for the entity Content Process Runs
 */
export const ContentProcessRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    SourceID: z.string().describe(`
        * * Field Name: SourceID
        * * Display Name: Source ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content Sources (vwContentSources.ID)`),
    StartTime: z.date().nullable().describe(`
        * * Field Name: StartTime
        * * Display Name: Start Time
        * * SQL Data Type: datetime
        * * Description: Timestamp when the content processing workflow began execution.`),
    EndTime: z.date().nullable().describe(`
        * * Field Name: EndTime
        * * Display Name: End Time
        * * SQL Data Type: datetime
        * * Description: Timestamp when the content processing workflow completed or failed.`),
    Status: z.string().nullable().describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(100)`),
    ProcessedItems: z.number().nullable().describe(`
        * * Field Name: ProcessedItems
        * * Display Name: Processed Items
        * * SQL Data Type: int
        * * Description: Count of content items successfully processed during this run.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Source: z.string().nullable().describe(`
        * * Field Name: Source
        * * Display Name: Source
        * * SQL Data Type: nvarchar(255)`),
});

export type ContentProcessRunEntityType = z.infer<typeof ContentProcessRunSchema>;

/**
 * zod schema definition for the entity Content Source Params
 */
export const ContentSourceParamSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ContentSourceID: z.string().describe(`
        * * Field Name: ContentSourceID
        * * Display Name: Content Source ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content Sources (vwContentSources.ID)`),
    ContentSourceTypeParamID: z.string().describe(`
        * * Field Name: ContentSourceTypeParamID
        * * Display Name: Content Source Type Param ID
        * * SQL Data Type: uniqueidentifier
        * * Description: Reference to the parameter definition in Content Source Type Params.`),
    Value: z.string().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The configured value for this parameter on this specific content source.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ContentSource: z.string().nullable().describe(`
        * * Field Name: ContentSource
        * * Display Name: Content Source
        * * SQL Data Type: nvarchar(255)`),
});

export type ContentSourceParamEntityType = z.infer<typeof ContentSourceParamSchema>;

/**
 * zod schema definition for the entity Content Source Type Params
 */
export const ContentSourceTypeParamSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    Type: z.string().nullable().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(50)
        * * Description: Data type of the parameter (string, number, boolean, date, etc.).`),
    DefaultValue: z.string().nullable().describe(`
        * * Field Name: DefaultValue
        * * Display Name: Default Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Default value to use if not specified when configuring a content source.`),
    IsRequired: z.boolean().describe(`
        * * Field Name: IsRequired
        * * Display Name: Is Required
        * * SQL Data Type: bit
        * * Description: Indicates whether this parameter must be provided when setting up a content source.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ContentSourceTypeParamEntityType = z.infer<typeof ContentSourceTypeParamSchema>;

/**
 * zod schema definition for the entity Content Source Types
 */
export const ContentSourceTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(1000)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ContentSourceTypeEntityType = z.infer<typeof ContentSourceTypeSchema>;

/**
 * zod schema definition for the entity Content Sources
 */
export const ContentSourceSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().nullable().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    ContentTypeID: z.string().describe(`
        * * Field Name: ContentTypeID
        * * Display Name: Content Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content Types (vwContentTypes.ID)`),
    ContentSourceTypeID: z.string().describe(`
        * * Field Name: ContentSourceTypeID
        * * Display Name: Content Source Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content Source Types (vwContentSourceTypes.ID)`),
    ContentFileTypeID: z.string().describe(`
        * * Field Name: ContentFileTypeID
        * * Display Name: Content File Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Content File Types (vwContentFileTypes.ID)`),
    URL: z.string().describe(`
        * * Field Name: URL
        * * Display Name: URL
        * * SQL Data Type: nvarchar(2000)
        * * Description: Base URL or connection string for accessing this content source.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ContentType: z.string().describe(`
        * * Field Name: ContentType
        * * Display Name: Content Type
        * * SQL Data Type: nvarchar(255)`),
    ContentSourceType: z.string().describe(`
        * * Field Name: ContentSourceType
        * * Display Name: Content Source Type
        * * SQL Data Type: nvarchar(255)`),
    ContentFileType: z.string().describe(`
        * * Field Name: ContentFileType
        * * Display Name: Content File Type
        * * SQL Data Type: nvarchar(255)`),
});

export type ContentSourceEntityType = z.infer<typeof ContentSourceSchema>;

/**
 * zod schema definition for the entity Content Type Attributes
 */
export const ContentTypeAttributeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ContentTypeID: z.string().describe(`
        * * Field Name: ContentTypeID
        * * Display Name: Content Type ID
        * * SQL Data Type: uniqueidentifier
        * * Description: Reference to the Content Type this attribute belongs to.`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Prompt: z.string().describe(`
        * * Field Name: Prompt
        * * Display Name: Prompt
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The AI prompt template used to extract this attribute from content.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ContentTypeAttributeEntityType = z.infer<typeof ContentTypeAttributeSchema>;

/**
 * zod schema definition for the entity Content Types
 */
export const ContentTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    AIModelID: z.string().describe(`
        * * Field Name: AIModelID
        * * Display Name: AIModel ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)`),
    MinTags: z.number().describe(`
        * * Field Name: MinTags
        * * Display Name: Min Tags
        * * SQL Data Type: int
        * * Description: Minimum number of tags that must be applied to content of this type.`),
    MaxTags: z.number().describe(`
        * * Field Name: MaxTags
        * * Display Name: Max Tags
        * * SQL Data Type: int
        * * Description: Maximum number of tags allowed on content of this type.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    AIModel: z.string().describe(`
        * * Field Name: AIModel
        * * Display Name: AIModel
        * * SQL Data Type: nvarchar(50)`),
});

export type ContentTypeEntityType = z.infer<typeof ContentTypeSchema>;

/**
 * zod schema definition for the entity Conversation Details
 */
export const ConversationDetailSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ConversationID: z.string().describe(`
        * * Field Name: ConversationID
        * * Display Name: Conversation ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversations (vwConversations.ID)`),
    ExternalID: z.string().nullable().describe(`
        * * Field Name: ExternalID
        * * Display Name: External ID
        * * SQL Data Type: nvarchar(100)
        * * Description: External system identifier for this message, used for integration scenarios.`),
    Role: z.union([z.literal('AI'), z.literal('Error'), z.literal('User')]).describe(`
        * * Field Name: Role
        * * Display Name: Role
        * * SQL Data Type: nvarchar(20)
        * * Default Value: user_name()
    * * Value List Type: List
    * * Possible Values 
    *   * AI
    *   * Error
    *   * User
        * * Description: The role of the message sender (user, assistant, system, function).`),
    Message: z.string().describe(`
        * * Field Name: Message
        * * Display Name: Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The actual content of the message in the conversation.`),
    Error: z.string().nullable().describe(`
        * * Field Name: Error
        * * Display Name: Error
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Error message if this conversation turn encountered a problem.`),
    HiddenToUser: z.boolean().describe(`
        * * Field Name: HiddenToUser
        * * Display Name: Hidden To User
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Flag indicating if this message should be hidden from end users (system messages, function calls, etc.).`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    UserRating: z.number().nullable().describe(`
        * * Field Name: UserRating
        * * Display Name: User Rating
        * * SQL Data Type: int
        * * Description: This column is used to capture user feedback as a rating scale. The scale ranges from 1 to 10, where 1 might represent thumbs down, and 10 might represent thumbs up or the highest rating in a star-based scale.`),
    UserFeedback: z.string().nullable().describe(`
        * * Field Name: UserFeedback
        * * Display Name: User Feedback
        * * SQL Data Type: nvarchar(MAX)
        * * Description: This column is used to store user text feedback about a given AI response, describing what they liked or disliked.`),
    ReflectionInsights: z.string().nullable().describe(`
        * * Field Name: ReflectionInsights
        * * Display Name: Reflection Insights
        * * SQL Data Type: nvarchar(MAX)
        * * Description: This column stores human or AI-generated reflections on how to improve future responses based on the user feedback and the AI output generated for prior messages in the conversation.`),
    SummaryOfEarlierConversation: z.string().nullable().describe(`
        * * Field Name: SummaryOfEarlierConversation
        * * Display Name: Summary Of Earlier Conversation
        * * SQL Data Type: nvarchar(MAX)
        * * Description: This column optionally stores a summary of the entire conversation leading up to this particular conversation detail record. It is used in long-running conversations to optimize performance by summarizing earlier parts.`),
    UserID: z.string().nullable().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: This field, when populated, overrides the UserID at the Conversation level to specify a different user created the message.`),
    ArtifactID: z.string().nullable().describe(`
        * * Field Name: ArtifactID
        * * Display Name: Artifact ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Conversation Artifacts (vwConversationArtifacts.ID)
        * * Description: Optional reference to a conversation artifact associated with this conversation detail`),
    ArtifactVersionID: z.string().nullable().describe(`
        * * Field Name: ArtifactVersionID
        * * Display Name: Artifact Version ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Conversation Artifact Versions (vwConversationArtifactVersions.ID)
        * * Description: Optional reference to a specific version of a conversation artifact associated with this conversation detail`),
    CompletionTime: z.number().nullable().describe(`
        * * Field Name: CompletionTime
        * * Display Name: Completion Time
        * * SQL Data Type: bigint
        * * Description: Duration in milliseconds representing how long the AI response processing took to complete for this conversation detail.`),
    IsPinned: z.boolean().describe(`
        * * Field Name: IsPinned
        * * Display Name: Is Pinned
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if this message is pinned within the conversation for easy reference`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
        * * Description: Optional reference to parent message for threaded conversations. NULL for top-level messages.`),
    AgentID: z.string().nullable().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: Denormalized agent ID for quick lookup of agent name and icon without joining through AgentRun`),
    Status: z.union([z.literal('Complete'), z.literal('Error'), z.literal('In-Progress')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Complete
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * In-Progress
        * * Description: Status of the conversation message. Complete indicates finished processing, In-Progress indicates active agent work, Error indicates processing failed.`),
    SuggestedResponses: z.string().nullable().describe(`
        * * Field Name: SuggestedResponses
        * * Display Name: Suggested Responses
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of suggested responses that can be displayed to the user for quick replies. Each response object contains: text (display text), allowInput (boolean), iconClass (optional Font Awesome class), and data (optional payload).`),
    Conversation: z.string().nullable().describe(`
        * * Field Name: Conversation
        * * Display Name: Conversation
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().nullable().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Artifact: z.string().nullable().describe(`
        * * Field Name: Artifact
        * * Display Name: Artifact
        * * SQL Data Type: nvarchar(255)`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type ConversationDetailEntityType = z.infer<typeof ConversationDetailSchema>;

/**
 * zod schema definition for the entity Conversations
 */
export const ConversationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    ExternalID: z.string().nullable().describe(`
        * * Field Name: ExternalID
        * * Display Name: External ID
        * * SQL Data Type: nvarchar(500)
        * * Description: External system identifier for cross-system conversation tracking.`),
    Name: z.string().nullable().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Skip
        * * Description: The type or category of conversation (Skip, Support, Chat, etc.).`),
    IsArchived: z.boolean().describe(`
        * * Field Name: IsArchived
        * * Display Name: Is Archived
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if this conversation has been archived and should not appear in active lists.`),
    LinkedEntityID: z.string().nullable().describe(`
        * * Field Name: LinkedEntityID
        * * Display Name: Linked Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    LinkedRecordID: z.string().nullable().describe(`
        * * Field Name: LinkedRecordID
        * * Display Name: Linked Record ID
        * * SQL Data Type: nvarchar(500)
        * * Description: ID of a related record this conversation is about (support ticket, order, etc.).`),
    DataContextID: z.string().nullable().describe(`
        * * Field Name: DataContextID
        * * Display Name: Data Context ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Data Contexts (vwDataContexts.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Status: z.union([z.literal('Available'), z.literal('Processing')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Available
    * * Value List Type: List
    * * Possible Values 
    *   * Available
    *   * Processing
        * * Description: Tracks the processing status of the conversation: Available, Processing`),
    EnvironmentID: z.string().describe(`
        * * Field Name: EnvironmentID
        * * Display Name: Environment ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
        * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09`),
    ProjectID: z.string().nullable().describe(`
        * * Field Name: ProjectID
        * * Display Name: Project ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Projects (vwProjects.ID)`),
    IsPinned: z.boolean().describe(`
        * * Field Name: IsPinned
        * * Display Name: Is Pinned
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if this conversation is pinned to the top of lists`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    LinkedEntity: z.string().nullable().describe(`
        * * Field Name: LinkedEntity
        * * Display Name: Linked Entity
        * * SQL Data Type: nvarchar(255)`),
    DataContext: z.string().nullable().describe(`
        * * Field Name: DataContext
        * * Display Name: Data Context
        * * SQL Data Type: nvarchar(255)`),
    Environment: z.string().describe(`
        * * Field Name: Environment
        * * Display Name: Environment
        * * SQL Data Type: nvarchar(255)`),
    Project: z.string().nullable().describe(`
        * * Field Name: Project
        * * Display Name: Project
        * * SQL Data Type: nvarchar(255)`),
});

export type ConversationEntityType = z.infer<typeof ConversationSchema>;

/**
 * zod schema definition for the entity Dashboard Categories
 */
export const DashboardCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Dashboard Categories (vwDashboardCategories.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(100)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type DashboardCategoryEntityType = z.infer<typeof DashboardCategorySchema>;

/**
 * zod schema definition for the entity Dashboards
 */
export const DashboardSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    CategoryID: z.string().nullable().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Dashboard Categories (vwDashboardCategories.ID)`),
    UIConfigDetails: z.string().describe(`
        * * Field Name: UIConfigDetails
        * * Display Name: UIConfig Details
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration defining the dashboard layout, widgets, data sources, and display options.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Type: z.union([z.literal('Code'), z.literal('Config'), z.literal('Dynamic Code')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Config
    * * Value List Type: List
    * * Possible Values 
    *   * Code
    *   * Config
    *   * Dynamic Code
        * * Description: Dashboard type supporting Config (metadata-driven), Code (compiled TypeScript), and Dynamic Code (Skip-generated runtime JavaScript/React) options`),
    Thumbnail: z.string().nullable().describe(`
        * * Field Name: Thumbnail
        * * Display Name: Thumbnail
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Base64 encoded image or URL to an image thumbnail for the dashboard`),
    Scope: z.union([z.literal('App'), z.literal('Global')]).describe(`
        * * Field Name: Scope
        * * Display Name: Scope
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Global
    * * Value List Type: List
    * * Possible Values 
    *   * App
    *   * Global
        * * Description: Scope of the dashboard: Global or App-specific`),
    ApplicationID: z.string().nullable().describe(`
        * * Field Name: ApplicationID
        * * Display Name: Application ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Applications (vwApplications.ID)
        * * Description: Associated Application ID if Scope is App, otherwise NULL`),
    DriverClass: z.string().nullable().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(255)
        * * Description: Specifies the runtime class that will be used for the Dashboard when Type is set to 'Code'. This class contains the custom logic and implementation for code-based dashboards.`),
    Code: z.string().nullable().describe(`
        * * Field Name: Code
        * * Display Name: Code
        * * SQL Data Type: nvarchar(255)
        * * Description: Used to identify the dashboard for code-base dashboards. Allows reuse of the same DriverClass for multiple dashboards that can be rendered differently.`),
    EnvironmentID: z.string().describe(`
        * * Field Name: EnvironmentID
        * * Display Name: Environment ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
        * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(100)`),
    Application: z.string().nullable().describe(`
        * * Field Name: Application
        * * Display Name: Application
        * * SQL Data Type: nvarchar(100)`),
    Environment: z.string().describe(`
        * * Field Name: Environment
        * * Display Name: Environment
        * * SQL Data Type: nvarchar(255)`),
});

export type DashboardEntityType = z.infer<typeof DashboardSchema>;

/**
 * zod schema definition for the entity Data Context Items
 */
export const DataContextItemSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    DataContextID: z.string().describe(`
        * * Field Name: DataContextID
        * * Display Name: Data Context ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Data Contexts (vwDataContexts.ID)`),
    Type: z.union([z.literal('full_entity'), z.literal('query'), z.literal('single_record'), z.literal('sql'), z.literal('view')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * full_entity
    *   * query
    *   * single_record
    *   * sql
    *   * view
        * * Description: The type of the item, either "view", "query", "full_entity", "single_record", or "sql"`),
    ViewID: z.string().nullable().describe(`
        * * Field Name: ViewID
        * * Display Name: View ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: User Views (vwUserViews.ID)`),
    QueryID: z.string().nullable().describe(`
        * * Field Name: QueryID
        * * Display Name: Query ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Queries (vwQueries.ID)`),
    EntityID: z.string().nullable().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().nullable().describe(`
        * * Field Name: RecordID
        * * Display Name: Record ID
        * * SQL Data Type: nvarchar(450)
        * * Description: The Primary Key value for the record, only used when Type='single_record'`),
    SQL: z.string().nullable().describe(`
        * * Field Name: SQL
        * * Display Name: SQL
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Only used when Type=sql`),
    DataJSON: z.string().nullable().describe(`
        * * Field Name: DataJSON
        * * Display Name: Data JSON
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optionally used to cache results of an item. This can be used for performance optimization, and also for having snapshots of data for historical comparisons.`),
    LastRefreshedAt: z.date().nullable().describe(`
        * * Field Name: LastRefreshedAt
        * * Display Name: Last Refreshed At
        * * SQL Data Type: datetime
        * * Description: If DataJSON is populated, this field will show the date the the data was captured`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    CodeName: z.string().nullable().describe(`
        * * Field Name: CodeName
        * * Display Name: Code Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Optional programmatic identifier for this data context item. Must be unique within the DataContext and follow JavaScript naming conventions (letters, numbers, underscore, starting with letter or underscore). Used for improved code generation and programmatic access to data context items.`),
    DataContext: z.string().describe(`
        * * Field Name: DataContext
        * * Display Name: Data Context
        * * SQL Data Type: nvarchar(255)`),
    View: z.string().nullable().describe(`
        * * Field Name: View
        * * Display Name: View
        * * SQL Data Type: nvarchar(100)`),
    Query: z.string().nullable().describe(`
        * * Field Name: Query
        * * Display Name: Query
        * * SQL Data Type: nvarchar(255)`),
    Entity: z.string().nullable().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type DataContextItemEntityType = z.infer<typeof DataContextItemSchema>;

/**
 * zod schema definition for the entity Data Contexts
 */
export const DataContextSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    LastRefreshedAt: z.date().nullable().describe(`
        * * Field Name: LastRefreshedAt
        * * Display Name: Last Refreshed At
        * * SQL Data Type: datetime
        * * Description: Timestamp of when the data in this context was last refreshed or recalculated.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type DataContextEntityType = z.infer<typeof DataContextSchema>;

/**
 * zod schema definition for the entity Dataset Items
 */
export const DatasetItemSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Code: z.string().describe(`
        * * Field Name: Code
        * * Display Name: Code
        * * SQL Data Type: nvarchar(50)
        * * Description: Unique code identifier for this dataset item within its parent dataset.`),
    DatasetID: z.string().describe(`
        * * Field Name: DatasetID
        * * Display Name: Dataset ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Datasets (vwDatasets.ID)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Order in which this item should be processed or displayed within the dataset.`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    WhereClause: z.string().nullable().describe(`
        * * Field Name: WhereClause
        * * Display Name: Where Clause
        * * SQL Data Type: nvarchar(MAX)
        * * Description: SQL WHERE clause to filter data when this dataset item is sourced from a query.`),
    DateFieldToCheck: z.string().describe(`
        * * Field Name: DateFieldToCheck
        * * Display Name: Date Field To Check
        * * SQL Data Type: nvarchar(100)
        * * Description: The date field name used for incremental updates and change detection.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Columns: z.string().nullable().describe(`
        * * Field Name: Columns
        * * Display Name: Columns
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional column to store a comma-delimited list of columns for the DatasetItem`),
    Dataset: z.string().describe(`
        * * Field Name: Dataset
        * * Display Name: Dataset
        * * SQL Data Type: nvarchar(100)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type DatasetItemEntityType = z.infer<typeof DatasetItemSchema>;

/**
 * zod schema definition for the entity Datasets
 */
export const DatasetSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type DatasetEntityType = z.infer<typeof DatasetSchema>;

/**
 * zod schema definition for the entity Duplicate Run Detail Matches
 */
export const DuplicateRunDetailMatchSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    DuplicateRunDetailID: z.string().describe(`
        * * Field Name: DuplicateRunDetailID
        * * Display Name: Duplicate Run Detail ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Duplicate Run Details (vwDuplicateRunDetails.ID)`),
    MatchSource: z.union([z.literal('SP'), z.literal('Vector')]).describe(`
        * * Field Name: MatchSource
        * * Display Name: Match Source
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Vector
    * * Value List Type: List
    * * Possible Values 
    *   * SP
    *   * Vector
        * * Description: Either Vector or SP`),
    MatchRecordID: z.string().describe(`
        * * Field Name: MatchRecordID
        * * Display Name: Match Record ID
        * * SQL Data Type: nvarchar(500)
        * * Description: The ID of the record identified as a potential duplicate match.`),
    MatchProbability: z.number().describe(`
        * * Field Name: MatchProbability
        * * Display Name: Match Probability
        * * SQL Data Type: numeric(12, 11)
        * * Default Value: 0
        * * Description: Value between 0 and 1 designating the computed probability of a match`),
    MatchedAt: z.date().describe(`
        * * Field Name: MatchedAt
        * * Display Name: Matched At
        * * SQL Data Type: datetime
        * * Default Value: getdate()
        * * Description: Timestamp when this duplicate match was identified.`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Ignore
        * * Description: The action to take for this match (Ignore, Merge, Delete).`),
    ApprovalStatus: z.union([z.literal('Approved'), z.literal('Pending'), z.literal('Rejected')]).describe(`
        * * Field Name: ApprovalStatus
        * * Display Name: Approval Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
        * * Description: Current approval status of the proposed action (Pending, Approved, Rejected).`),
    RecordMergeLogID: z.string().nullable().describe(`
        * * Field Name: RecordMergeLogID
        * * Display Name: Record Merge Log ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Record Merge Logs (vwRecordMergeLogs.ID)`),
    MergeStatus: z.union([z.literal('Complete'), z.literal('Error'), z.literal('Pending')]).describe(`
        * * Field Name: MergeStatus
        * * Display Name: Merge Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Pending
        * * Description: Status of the merge operation if Action is Merge (Pending, Complete, Failed).`),
    MergedAt: z.date().describe(`
        * * Field Name: MergedAt
        * * Display Name: Merged At
        * * SQL Data Type: datetime
        * * Default Value: getdate()
        * * Description: Timestamp when records were merged, if applicable.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type DuplicateRunDetailMatchEntityType = z.infer<typeof DuplicateRunDetailMatchSchema>;

/**
 * zod schema definition for the entity Duplicate Run Details
 */
export const DuplicateRunDetailSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    DuplicateRunID: z.string().describe(`
        * * Field Name: DuplicateRunID
        * * Display Name: Duplicate Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Duplicate Runs (vwDuplicateRuns.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record ID
        * * SQL Data Type: nvarchar(500)
        * * Description: The ID of the record being analyzed for duplicates.`),
    MatchStatus: z.union([z.literal('Complete'), z.literal('Error'), z.literal('Pending'), z.literal('Skipped')]).describe(`
        * * Field Name: MatchStatus
        * * Display Name: Match Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Pending
    *   * Skipped
        * * Description: Status of duplicate analysis for this record (Pending, Complete, Error).`),
    SkippedReason: z.string().nullable().describe(`
        * * Field Name: SkippedReason
        * * Display Name: Skipped Reason
        * * SQL Data Type: nvarchar(MAX)
        * * Description: If MatchStatus=Skipped, this field can be used to store the reason why the record was skipped`),
    MatchErrorMessage: z.string().nullable().describe(`
        * * Field Name: MatchErrorMessage
        * * Display Name: Match Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: If MatchStatus='Error' this field can be used to track the error from that phase of the process for logging/diagnostics.`),
    MergeStatus: z.union([z.literal('Complete'), z.literal('Error'), z.literal('Not Applicable'), z.literal('Pending')]).describe(`
        * * Field Name: MergeStatus
        * * Display Name: Merge Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Not Applicable
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Not Applicable
    *   * Pending
        * * Description: Status of any merge operations for this record (Not Applicable, Pending, Complete, Failed).`),
    MergeErrorMessage: z.string().nullable().describe(`
        * * Field Name: MergeErrorMessage
        * * Display Name: Merge Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Error details if merge operation failed for this record.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type DuplicateRunDetailEntityType = z.infer<typeof DuplicateRunDetailSchema>;

/**
 * zod schema definition for the entity Duplicate Runs
 */
export const DuplicateRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    StartedByUserID: z.string().describe(`
        * * Field Name: StartedByUserID
        * * Display Name: Started By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    SourceListID: z.string().describe(`
        * * Field Name: SourceListID
        * * Display Name: Source List ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Lists (vwLists.ID)`),
    StartedAt: z.date().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetime
        * * Default Value: getdate()`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetime`),
    ApprovalStatus: z.union([z.literal('Approved'), z.literal('Pending'), z.literal('Rejected')]).describe(`
        * * Field Name: ApprovalStatus
        * * Display Name: Approval Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
        * * Description: Overall approval status for the duplicate run results (Pending, Approved, Rejected).`),
    ApprovalComments: z.string().nullable().describe(`
        * * Field Name: ApprovalComments
        * * Display Name: Approval Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Comments or notes regarding the approval decision for this duplicate run.`),
    ApprovedByUserID: z.string().nullable().describe(`
        * * Field Name: ApprovedByUserID
        * * Display Name: Approved By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    ProcessingStatus: z.union([z.literal('Complete'), z.literal('Failed'), z.literal('In Progress'), z.literal('Pending')]).describe(`
        * * Field Name: ProcessingStatus
        * * Display Name: Processing Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In Progress
    *   * Pending
        * * Description: Current processing status of the duplicate detection run (Pending, Running, Complete, Failed).`),
    ProcessingErrorMessage: z.string().nullable().describe(`
        * * Field Name: ProcessingErrorMessage
        * * Display Name: Processing Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Error details if the duplicate detection run failed.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    StartedByUser: z.string().describe(`
        * * Field Name: StartedByUser
        * * Display Name: Started By User
        * * SQL Data Type: nvarchar(100)`),
    SourceList: z.string().describe(`
        * * Field Name: SourceList
        * * Display Name: Source List
        * * SQL Data Type: nvarchar(100)`),
    ApprovedByUser: z.string().nullable().describe(`
        * * Field Name: ApprovedByUser
        * * Display Name: Approved By User
        * * SQL Data Type: nvarchar(100)`),
});

export type DuplicateRunEntityType = z.infer<typeof DuplicateRunSchema>;

/**
 * zod schema definition for the entity Employee Company Integrations
 */
export const EmployeeCompanyIntegrationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EmployeeID: z.string().describe(`
        * * Field Name: EmployeeID
        * * Display Name: Employee ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Employees (vwEmployees.ID)`),
    CompanyIntegrationID: z.string().describe(`
        * * Field Name: CompanyIntegrationID
        * * Display Name: Company Integration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)`),
    ExternalSystemRecordID: z.string().describe(`
        * * Field Name: ExternalSystemRecordID
        * * Display Name: External System Record
        * * SQL Data Type: nvarchar(750)
        * * Description: The employee's unique identifier in the external integrated system.`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if this employee integration mapping is currently active.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    CompanyIntegration: z.string().describe(`
        * * Field Name: CompanyIntegration
        * * Display Name: Company Integration
        * * SQL Data Type: nvarchar(255)`),
});

export type EmployeeCompanyIntegrationEntityType = z.infer<typeof EmployeeCompanyIntegrationSchema>;

/**
 * zod schema definition for the entity Employee Roles
 */
export const EmployeeRoleSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EmployeeID: z.string().describe(`
        * * Field Name: EmployeeID
        * * Display Name: Employee ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Employees (vwEmployees.ID)`),
    RoleID: z.string().describe(`
        * * Field Name: RoleID
        * * Display Name: Role ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Roles (vwRoles.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Role: z.string().describe(`
        * * Field Name: Role
        * * Display Name: Role
        * * SQL Data Type: nvarchar(50)`),
});

export type EmployeeRoleEntityType = z.infer<typeof EmployeeRoleSchema>;

/**
 * zod schema definition for the entity Employee Skills
 */
export const EmployeeSkillSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EmployeeID: z.string().describe(`
        * * Field Name: EmployeeID
        * * Display Name: Employee ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Employees (vwEmployees.ID)`),
    SkillID: z.string().describe(`
        * * Field Name: SkillID
        * * Display Name: Skill ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Skills (vwSkills.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Skill: z.string().describe(`
        * * Field Name: Skill
        * * Display Name: Skill
        * * SQL Data Type: nvarchar(50)`),
});

export type EmployeeSkillEntityType = z.infer<typeof EmployeeSkillSchema>;

/**
 * zod schema definition for the entity Employees
 */
export const EmployeeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    BCMID: z.string().describe(`
        * * Field Name: BCMID
        * * Display Name: BCMID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newid()
        * * Description: Business Central Management ID - unique identifier for cross-system employee tracking.`),
    FirstName: z.string().describe(`
        * * Field Name: FirstName
        * * Display Name: First Name
        * * SQL Data Type: nvarchar(30)
        * * Description: Employee's first name or given name.`),
    LastName: z.string().describe(`
        * * Field Name: LastName
        * * Display Name: Last Name
        * * SQL Data Type: nvarchar(50)
        * * Description: Employee's last name or surname.`),
    CompanyID: z.string().describe(`
        * * Field Name: CompanyID
        * * Display Name: Company ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Companies (vwCompanies.ID)`),
    SupervisorID: z.string().nullable().describe(`
        * * Field Name: SupervisorID
        * * Display Name: Supervisor ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Employees (vwEmployees.ID)`),
    Title: z.string().nullable().describe(`
        * * Field Name: Title
        * * SQL Data Type: nvarchar(50)
        * * Description: Employee's job title or position within the organization.`),
    Email: z.string().describe(`
        * * Field Name: Email
        * * SQL Data Type: nvarchar(100)
        * * Description: Employee's primary email address, must be unique across the system.`),
    Phone: z.string().nullable().describe(`
        * * Field Name: Phone
        * * SQL Data Type: nvarchar(20)
        * * Description: Employee's primary phone number for business contact.`),
    Active: z.boolean().describe(`
        * * Field Name: Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates whether the employee is currently active in the organization.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    FirstLast: z.string().nullable().describe(`
        * * Field Name: FirstLast
        * * Display Name: First Last
        * * SQL Data Type: nvarchar(81)`),
    Supervisor: z.string().nullable().describe(`
        * * Field Name: Supervisor
        * * Display Name: Supervisor
        * * SQL Data Type: nvarchar(81)`),
    SupervisorFirstName: z.string().nullable().describe(`
        * * Field Name: SupervisorFirstName
        * * Display Name: Supervisor First Name
        * * SQL Data Type: nvarchar(30)`),
    SupervisorLastName: z.string().nullable().describe(`
        * * Field Name: SupervisorLastName
        * * Display Name: Supervisor Last Name
        * * SQL Data Type: nvarchar(50)`),
    SupervisorEmail: z.string().nullable().describe(`
        * * Field Name: SupervisorEmail
        * * Display Name: Supervisor Email
        * * SQL Data Type: nvarchar(100)`),
});

export type EmployeeEntityType = z.infer<typeof EmployeeSchema>;

/**
 * zod schema definition for the entity Entities
 */
export const EntitySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(255)`),
    NameSuffix: z.string().nullable().describe(`
        * * Field Name: NameSuffix
        * * Display Name: Name Suffix
        * * SQL Data Type: nvarchar(255)
        * * Description: Optional suffix appended to entity names for display purposes.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    AutoUpdateDescription: z.boolean().describe(`
        * * Field Name: AutoUpdateDescription
        * * Display Name: Auto Update Description
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When set to 1 (default), whenever a description is modified in the underlying view (first choice) or table (second choice), the Description column in the entity definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.`),
    BaseTable: z.string().describe(`
        * * Field Name: BaseTable
        * * Display Name: Base Table
        * * SQL Data Type: nvarchar(255)
        * * Description: The underlying database table name for this entity.`),
    BaseView: z.string().describe(`
        * * Field Name: BaseView
        * * Display Name: Base View
        * * SQL Data Type: nvarchar(255)
        * * Description: The "wrapper" database view used for querying this entity with joins and computed fields.`),
    BaseViewGenerated: z.boolean().describe(`
        * * Field Name: BaseViewGenerated
        * * Display Name: Base View Generated
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When set to 0, CodeGen no longer generates a base view for the entity.`),
    SchemaName: z.string().describe(`
        * * Field Name: SchemaName
        * * Display Name: Schema Name
        * * SQL Data Type: nvarchar(255)
        * * Default Value: dbo
        * * Description: Database schema containing this entity's table and view.`),
    VirtualEntity: z.boolean().describe(`
        * * Field Name: VirtualEntity
        * * Display Name: Virtual Entity
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if this is a virtual entity without a physical database table.`),
    TrackRecordChanges: z.boolean().describe(`
        * * Field Name: TrackRecordChanges
        * * Display Name: Track Record Changes
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When set to 1, changes made via the MemberJunction architecture will result in tracking records being created in the RecordChange table. In addition, when turned on CodeGen will ensure that your table has two fields: __mj_CreatedAt and __mj_UpdatedAt which are special fields used in conjunction with the RecordChange table to track changes to rows in your entity.`),
    AuditRecordAccess: z.boolean().describe(`
        * * Field Name: AuditRecordAccess
        * * Display Name: Audit Record Access
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When set to 1, accessing a record by an end-user will result in an Audit Log record being created`),
    AuditViewRuns: z.boolean().describe(`
        * * Field Name: AuditViewRuns
        * * Display Name: Audit View Runs
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When set to 1, users running a view against this entity will result in an Audit Log record being created.`),
    IncludeInAPI: z.boolean().describe(`
        * * Field Name: IncludeInAPI
        * * Display Name: Include In API
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If set to 0, the entity will not be available at all in the GraphQL API or the object model.`),
    AllowAllRowsAPI: z.boolean().describe(`
        * * Field Name: AllowAllRowsAPI
        * * Display Name: Allow All Rows API
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If set to 1, a GraphQL query will be enabled that allows access to all rows in the entity.`),
    AllowUpdateAPI: z.boolean().describe(`
        * * Field Name: AllowUpdateAPI
        * * Display Name: Allow Update API
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Global flag controlling if updates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.`),
    AllowCreateAPI: z.boolean().describe(`
        * * Field Name: AllowCreateAPI
        * * Display Name: Allow Create API
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Global flag controlling if creates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.`),
    AllowDeleteAPI: z.boolean().describe(`
        * * Field Name: AllowDeleteAPI
        * * Display Name: Allow Delete API
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Global flag controlling if deletes are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.`),
    CustomResolverAPI: z.boolean().describe(`
        * * Field Name: CustomResolverAPI
        * * Display Name: Custom Resolver API
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Set to 1 if a custom resolver has been created for the entity.`),
    AllowUserSearchAPI: z.boolean().describe(`
        * * Field Name: AllowUserSearchAPI
        * * Display Name: Allow User Search API
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Enabling this bit will result in search being possible at the API and UI layers`),
    FullTextSearchEnabled: z.boolean().describe(`
        * * Field Name: FullTextSearchEnabled
        * * Display Name: Full Text Search Enabled
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether full-text search indexing is enabled for this entity.`),
    FullTextCatalog: z.string().nullable().describe(`
        * * Field Name: FullTextCatalog
        * * Display Name: Full Text Catalog
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the SQL Server full-text catalog if search is enabled.`),
    FullTextCatalogGenerated: z.boolean().describe(`
        * * Field Name: FullTextCatalogGenerated
        * * Display Name: Full Text Catalog Generated
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if the full-text catalog was auto-generated by CodeGen.`),
    FullTextIndex: z.string().nullable().describe(`
        * * Field Name: FullTextIndex
        * * Display Name: Full Text Index
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the full-text index on this entity's table.`),
    FullTextIndexGenerated: z.boolean().describe(`
        * * Field Name: FullTextIndexGenerated
        * * Display Name: Full Text Index Generated
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if the full-text index was auto-generated by CodeGen.`),
    FullTextSearchFunction: z.string().nullable().describe(`
        * * Field Name: FullTextSearchFunction
        * * Display Name: Full Text Search Function
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the function used for full-text searching this entity.`),
    FullTextSearchFunctionGenerated: z.boolean().describe(`
        * * Field Name: FullTextSearchFunctionGenerated
        * * Display Name: Full Text Search Function Generated
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if the search function was auto-generated by CodeGen.`),
    UserViewMaxRows: z.number().nullable().describe(`
        * * Field Name: UserViewMaxRows
        * * Display Name: User View Max Rows
        * * SQL Data Type: int
        * * Default Value: 1000
        * * Description: Maximum number of rows to return in user-created views for this entity.`),
    spCreate: z.string().nullable().describe(`
        * * Field Name: spCreate
        * * Display Name: spCreate
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the stored procedure for creating records in this entity.`),
    spUpdate: z.string().nullable().describe(`
        * * Field Name: spUpdate
        * * Display Name: spUpdate
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the stored procedure for updating records in this entity.`),
    spDelete: z.string().nullable().describe(`
        * * Field Name: spDelete
        * * Display Name: spDelete
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the stored procedure for deleting records in this entity.`),
    spCreateGenerated: z.boolean().describe(`
        * * Field Name: spCreateGenerated
        * * Display Name: sp CreateGenerated
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if the create procedure was auto-generated by CodeGen.`),
    spUpdateGenerated: z.boolean().describe(`
        * * Field Name: spUpdateGenerated
        * * Display Name: sp Update Generated
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if the update procedure was auto-generated by CodeGen.`),
    spDeleteGenerated: z.boolean().describe(`
        * * Field Name: spDeleteGenerated
        * * Display Name: sp Delete Generated
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if the delete procedure was auto-generated by CodeGen.`),
    CascadeDeletes: z.boolean().describe(`
        * * Field Name: CascadeDeletes
        * * Display Name: Cascade Deletes
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: When set to 1, the deleted spDelete will pre-process deletion to related entities that have 1:M cardinality with this entity. This does not have effect if spDeleteGenerated = 0`),
    DeleteType: z.union([z.literal('Hard'), z.literal('Soft')]).describe(`
        * * Field Name: DeleteType
        * * Display Name: Delete Type
        * * SQL Data Type: nvarchar(10)
        * * Default Value: Hard
    * * Value List Type: List
    * * Possible Values 
    *   * Hard
    *   * Soft
        * * Description: Hard deletes physically remove rows from the underlying BaseTable. Soft deletes do not remove rows but instead mark the row as deleted by using the special field __mj_DeletedAt which will automatically be added to the entity's basetable by the CodeGen tool.`),
    AllowRecordMerge: z.boolean().describe(`
        * * Field Name: AllowRecordMerge
        * * Display Name: Allow Record Merge
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: This field must be turned on in order to enable merging of records for the entity. For AllowRecordMerge to be turned on, AllowDeleteAPI must be set to 1, and DeleteType must be set to Soft`),
    spMatch: z.string().nullable().describe(`
        * * Field Name: spMatch
        * * Display Name: sp Match
        * * SQL Data Type: nvarchar(255)
        * * Description: When specified, this stored procedure is used to find matching records in this particular entity. The convention is to pass in the primary key(s) columns for the given entity to the procedure and the return will be zero to many rows where there is a column for each primary key field(s) and a ProbabilityScore (numeric(1,12)) column that has a 0 to 1 value of the probability of a match.`),
    RelationshipDefaultDisplayType: z.union([z.literal('Dropdown'), z.literal('Search')]).describe(`
        * * Field Name: RelationshipDefaultDisplayType
        * * Display Name: Relationship Default Display Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Search
    * * Value List Type: List
    * * Possible Values 
    *   * Dropdown
    *   * Search
        * * Description: When another entity links to this entity with a foreign key, this is the default component type that will be used in the UI. CodeGen will populate the RelatedEntityDisplayType column in the Entity Fields entity with whatever is provided here whenever a new foreign key is detected by CodeGen. The selection can be overridden on a per-foreign-key basis in each row of the Entity Fields entity.`),
    UserFormGenerated: z.boolean().describe(`
        * * Field Name: UserFormGenerated
        * * Display Name: User Form Generated
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if the default user form was auto-generated for this entity.`),
    EntityObjectSubclassName: z.string().nullable().describe(`
        * * Field Name: EntityObjectSubclassName
        * * Display Name: Entity Object Subclass Name
        * * SQL Data Type: nvarchar(255)
        * * Description: TypeScript class name for the entity subclass in the codebase.`),
    EntityObjectSubclassImport: z.string().nullable().describe(`
        * * Field Name: EntityObjectSubclassImport
        * * Display Name: Entity Object Subclass Import
        * * SQL Data Type: nvarchar(255)
        * * Description: Import path for the entity subclass in the TypeScript codebase.`),
    PreferredCommunicationField: z.string().nullable().describe(`
        * * Field Name: PreferredCommunicationField
        * * Display Name: Preferred Communication Field
        * * SQL Data Type: nvarchar(255)
        * * Description: Used to specify a field within the entity that in turn contains the field name that will be used for record-level communication preferences. For example in a hypothetical entity called Contacts, say there is a field called PreferredComm and that field had possible values of Email1, SMS, and Phone, and those value in turn corresponded to field names in the entity. Each record in the Contacts entity could have a specific preference for which field would be used for communication. The MJ Communication Framework will use this information when available, as a priority ahead of the data in the Entity Communication Fields entity which is entity-level and not record-level.`),
    Icon: z.string().nullable().describe(`
        * * Field Name: Icon
        * * Display Name: Icon
        * * SQL Data Type: nvarchar(500)
        * * Description: Optional, specify an icon (CSS Class) for each entity for display in the UI`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ScopeDefault: z.string().nullable().describe(`
        * * Field Name: ScopeDefault
        * * Display Name: Scope Default
        * * SQL Data Type: nvarchar(100)
        * * Description: Optional, comma-delimited string indicating the default scope for entity visibility. Options include Users, Admins, AI, and All. Defaults to All when NULL. This is used for simple defaults for filtering entity visibility, not security enforcement.`),
    RowsToPackWithSchema: z.union([z.literal('All'), z.literal('None'), z.literal('Sample')]).describe(`
        * * Field Name: RowsToPackWithSchema
        * * Display Name: Rows To Pack With Schema
        * * SQL Data Type: nvarchar(20)
        * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * All
    *   * None
    *   * Sample
        * * Description: Determines how entity rows should be packaged for external use. Options include None, Sample, and All. Defaults to None.`),
    RowsToPackSampleMethod: z.union([z.literal('bottom n'), z.literal('random'), z.literal('top n')]).describe(`
        * * Field Name: RowsToPackSampleMethod
        * * Display Name: Rows To Pack Sample Method
        * * SQL Data Type: nvarchar(20)
        * * Default Value: random
    * * Value List Type: List
    * * Possible Values 
    *   * bottom n
    *   * random
    *   * top n
        * * Description: Defines the sampling method for row packing when RowsToPackWithSchema is set to Sample. Options include random, top n, and bottom n. Defaults to random.`),
    RowsToPackSampleCount: z.number().describe(`
        * * Field Name: RowsToPackSampleCount
        * * Display Name: Rows To Pack Sample Count
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: The number of rows to pack when RowsToPackWithSchema is set to Sample, based on the designated sampling method. Defaults to 0.`),
    RowsToPackSampleOrder: z.string().nullable().describe(`
        * * Field Name: RowsToPackSampleOrder
        * * Display Name: Rows To Pack Sample Order
        * * SQL Data Type: nvarchar(MAX)
        * * Description: An optional ORDER BY clause for row packing when RowsToPackWithSchema is set to Sample. Allows custom ordering for selected entity data when using top n and bottom n.`),
    AutoRowCountFrequency: z.number().nullable().describe(`
        * * Field Name: AutoRowCountFrequency
        * * Display Name: Auto Row Count Frequency
        * * SQL Data Type: int
        * * Description: Frequency in hours for automatically performing row counts on this entity. If NULL, automatic row counting is disabled. If greater than 0, schedules recurring SELECT COUNT(*) queries at the specified interval.`),
    RowCount: z.number().nullable().describe(`
        * * Field Name: RowCount
        * * Display Name: Row Count
        * * SQL Data Type: bigint
        * * Description: Cached row count for this entity, populated by automatic row count processes when AutoRowCountFrequency is configured.`),
    RowCountRunAt: z.date().nullable().describe(`
        * * Field Name: RowCountRunAt
        * * Display Name: Row Count Run At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp indicating when the last automatic row count was performed for this entity.`),
    Status: z.union([z.literal('Active'), z.literal('Deprecated'), z.literal('Disabled')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(25)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Disabled
        * * Description: Status of the entity. Active: fully functional; Deprecated: functional but generates console warnings when used; Disabled: not available for use even though metadata and physical table remain.`),
    DisplayName: z.string().nullable().describe(`
        * * Field Name: DisplayName
        * * Display Name: Display Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Optional display name for the entity. If not provided, the entity Name will be used for display purposes.`),
    CodeName: z.string().nullable().describe(`
        * * Field Name: CodeName
        * * Display Name: Code Name
        * * SQL Data Type: nvarchar(MAX)`),
    ClassName: z.string().nullable().describe(`
        * * Field Name: ClassName
        * * Display Name: Class Name
        * * SQL Data Type: nvarchar(MAX)`),
    BaseTableCodeName: z.string().nullable().describe(`
        * * Field Name: BaseTableCodeName
        * * Display Name: Base Table Code Name
        * * SQL Data Type: nvarchar(MAX)`),
    ParentEntity: z.string().nullable().describe(`
        * * Field Name: ParentEntity
        * * Display Name: Parent Entity
        * * SQL Data Type: nvarchar(255)`),
    ParentBaseTable: z.string().nullable().describe(`
        * * Field Name: ParentBaseTable
        * * Display Name: Parent Base Table
        * * SQL Data Type: nvarchar(255)`),
    ParentBaseView: z.string().nullable().describe(`
        * * Field Name: ParentBaseView
        * * Display Name: Parent Base View
        * * SQL Data Type: nvarchar(255)`),
});

export type EntityEntityType = z.infer<typeof EntitySchema>;

/**
 * zod schema definition for the entity Entity Action Filters
 */
export const EntityActionFilterSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityActionID: z.string().describe(`
        * * Field Name: EntityActionID
        * * Display Name: Entity Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Actions (vwEntityActions.ID)`),
    ActionFilterID: z.string().describe(`
        * * Field Name: ActionFilterID
        * * Display Name: Action Filter ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Action Filters (vwActionFilters.ID)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Description: Order of filter execution.`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
        * * Description: Status of the entity action filter (Pending, Active, Disabled).`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type EntityActionFilterEntityType = z.infer<typeof EntityActionFilterSchema>;

/**
 * zod schema definition for the entity Entity Action Invocation Types
 */
export const EntityActionInvocationTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the invocation type such as Record Created/Updated/etc.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the invocation type.`),
    DisplaySequence: z.number().describe(`
        * * Field Name: DisplaySequence
        * * Display Name: Display Sequence
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Order in which this invocation type appears in UI lists and menus.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type EntityActionInvocationTypeEntityType = z.infer<typeof EntityActionInvocationTypeSchema>;

/**
 * zod schema definition for the entity Entity Action Invocations
 */
export const EntityActionInvocationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityActionID: z.string().describe(`
        * * Field Name: EntityActionID
        * * Display Name: Entity Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Actions (vwEntityActions.ID)`),
    InvocationTypeID: z.string().describe(`
        * * Field Name: InvocationTypeID
        * * Display Name: Invocation Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Action Invocation Types (vwEntityActionInvocationTypes.ID)`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
        * * Description: Status of the entity action invocation (Pending, Active, Disabled).`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    InvocationType: z.string().describe(`
        * * Field Name: InvocationType
        * * Display Name: Invocation Type
        * * SQL Data Type: nvarchar(255)`),
});

export type EntityActionInvocationEntityType = z.infer<typeof EntityActionInvocationSchema>;

/**
 * zod schema definition for the entity Entity Action Params
 */
export const EntityActionParamSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityActionID: z.string().describe(`
        * * Field Name: EntityActionID
        * * Display Name: Entity Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Actions (vwEntityActions.ID)`),
    ActionParamID: z.string().describe(`
        * * Field Name: ActionParamID
        * * Display Name: Action Param ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Action Params (vwActionParams.ID)`),
    ValueType: z.union([z.literal('Entity Field'), z.literal('Entity Object'), z.literal('Script'), z.literal('Static')]).describe(`
        * * Field Name: ValueType
        * * Display Name: Value Type
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Entity Field
    *   * Entity Object
    *   * Script
    *   * Static
        * * Description: Type of the value, which can be Static, Entity Object, or Script.`),
    Value: z.string().nullable().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Value of the parameter, used only when ValueType is Static or Script. When value is Script, any valid JavaScript code can be provided. The script will have access to an object called EntityActionContext. This object will have a property called EntityObject on it that will contain the BaseEntity derived sub-class with the current data for the entity object this action is operating against. The script must provide the parameter value to the EntityActionContext.result property. This scripting capabilty is designed for very small and simple code, for anything of meaningful complexity, create a sub-class instead.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Additional comments regarding the parameter.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ActionParam: z.string().describe(`
        * * Field Name: ActionParam
        * * Display Name: Action Param
        * * SQL Data Type: nvarchar(255)`),
});

export type EntityActionParamEntityType = z.infer<typeof EntityActionParamSchema>;

/**
 * zod schema definition for the entity Entity Actions
 */
export const EntityActionSchema = z.object({
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    ActionID: z.string().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
        * * Description: Status of the entity action (Pending, Active, Disabled).`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
});

export type EntityActionEntityType = z.infer<typeof EntityActionSchema>;

/**
 * zod schema definition for the entity Entity AI Actions
 */
export const EntityAIActionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    AIModelID: z.string().describe(`
        * * Field Name: AIModelID
        * * Display Name: AI Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)`),
    AIActionID: z.string().describe(`
        * * Field Name: AIActionID
        * * Display Name: AI Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Actions (vwAIActions.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Prompt: z.string().nullable().describe(`
        * * Field Name: Prompt
        * * Display Name: Prompt
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The AI prompt template used when this action is triggered by entity changes.`),
    TriggerEvent: z.union([z.literal('after save'), z.literal('before save')]).describe(`
        * * Field Name: TriggerEvent
        * * Display Name: Trigger Event
        * * SQL Data Type: nchar(15)
        * * Default Value: After Save
    * * Value List Type: List
    * * Possible Values 
    *   * after save
    *   * before save
        * * Description: The entity event that triggers this AI action (After Save, Before Delete, etc.).`),
    UserMessage: z.string().describe(`
        * * Field Name: UserMessage
        * * Display Name: User Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Message shown to users when this AI action is executed.`),
    OutputType: z.union([z.literal('entity'), z.literal('field')]).describe(`
        * * Field Name: OutputType
        * * Display Name: Output Type
        * * SQL Data Type: nchar(10)
        * * Default Value: FIeld
    * * Value List Type: List
    * * Possible Values 
    *   * entity
    *   * field
        * * Description: Where the AI output should be stored (Field, Message, File).`),
    OutputField: z.string().nullable().describe(`
        * * Field Name: OutputField
        * * Display Name: Output Field
        * * SQL Data Type: nvarchar(50)
        * * Description: The field name where AI output should be stored if OutputType is Field.`),
    SkipIfOutputFieldNotEmpty: z.boolean().describe(`
        * * Field Name: SkipIfOutputFieldNotEmpty
        * * Display Name: Skip If Output Field Not Empty
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Whether to skip AI processing if the output field already contains data.`),
    OutputEntityID: z.string().nullable().describe(`
        * * Field Name: OutputEntityID
        * * Display Name: Output Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    AIModel: z.string().describe(`
        * * Field Name: AIModel
        * * Display Name: AIModel
        * * SQL Data Type: nvarchar(50)`),
    AIAction: z.string().describe(`
        * * Field Name: AIAction
        * * Display Name: AIAction
        * * SQL Data Type: nvarchar(50)`),
    OutputEntity: z.string().nullable().describe(`
        * * Field Name: OutputEntity
        * * Display Name: Output Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type EntityAIActionEntityType = z.infer<typeof EntityAIActionSchema>;

/**
 * zod schema definition for the entity Entity Communication Fields
 */
export const EntityCommunicationFieldSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityCommunicationMessageTypeID: z.string().describe(`
        * * Field Name: EntityCommunicationMessageTypeID
        * * Display Name: Entity Communication Message Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Communication Message Types (vwEntityCommunicationMessageTypes.ID)`),
    FieldName: z.string().describe(`
        * * Field Name: FieldName
        * * Display Name: Field Name
        * * SQL Data Type: nvarchar(500)
        * * Description: Name of the field in the entity that maps to the communication base message type`),
    Priority: z.number().describe(`
        * * Field Name: Priority
        * * Display Name: Priority
        * * SQL Data Type: int
        * * Description: Priority of the field for the communication base message type`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type EntityCommunicationFieldEntityType = z.infer<typeof EntityCommunicationFieldSchema>;

/**
 * zod schema definition for the entity Entity Communication Message Types
 */
export const EntityCommunicationMessageTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    BaseMessageTypeID: z.string().describe(`
        * * Field Name: BaseMessageTypeID
        * * Display Name: Base Message Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Communication Base Message Types (vwCommunicationBaseMessageTypes.ID)`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates whether the message type is active`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    BaseMessageType: z.string().describe(`
        * * Field Name: BaseMessageType
        * * Display Name: Base Message Type
        * * SQL Data Type: nvarchar(100)`),
});

export type EntityCommunicationMessageTypeEntityType = z.infer<typeof EntityCommunicationMessageTypeSchema>;

/**
 * zod schema definition for the entity Entity Document Runs
 */
export const EntityDocumentRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityDocumentID: z.string().describe(`
        * * Field Name: EntityDocumentID
        * * Display Name: Entity Document ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Documents (vwEntityDocuments.ID)`),
    StartedAt: z.date().nullable().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetime`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetime`),
    Status: z.union([z.literal('Complete'), z.literal('Failed'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(15)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * Pending
        * * Description: Can be Pending, In Progress, Completed, or Failed`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    EntityDocument: z.string().describe(`
        * * Field Name: EntityDocument
        * * Display Name: Entity Document
        * * SQL Data Type: nvarchar(250)`),
});

export type EntityDocumentRunEntityType = z.infer<typeof EntityDocumentRunSchema>;

/**
 * zod schema definition for the entity Entity Document Settings
 */
export const EntityDocumentSettingSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityDocumentID: z.string().describe(`
        * * Field Name: EntityDocumentID
        * * Display Name: Entity Document ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Documents (vwEntityDocuments.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Value: z.string().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration value for this document generation setting.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    EntityDocument: z.string().describe(`
        * * Field Name: EntityDocument
        * * Display Name: Entity Document
        * * SQL Data Type: nvarchar(250)`),
});

export type EntityDocumentSettingEntityType = z.infer<typeof EntityDocumentSettingSchema>;

/**
 * zod schema definition for the entity Entity Document Types
 */
export const EntityDocumentTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type EntityDocumentTypeEntityType = z.infer<typeof EntityDocumentTypeSchema>;

/**
 * zod schema definition for the entity Entity Documents
 */
export const EntityDocumentSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(250)`),
    TypeID: z.string().describe(`
        * * Field Name: TypeID
        * * Display Name: Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Document Types (vwEntityDocumentTypes.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    VectorDatabaseID: z.string().describe(`
        * * Field Name: VectorDatabaseID
        * * Display Name: Vector Database ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Vector Databases (vwVectorDatabases.ID)`),
    Status: z.union([z.literal('Active'), z.literal('Inactive')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(15)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Inactive`),
    TemplateID: z.string().describe(`
        * * Field Name: TemplateID
        * * Display Name: Template ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Templates (vwTemplates.ID)`),
    AIModelID: z.string().describe(`
        * * Field Name: AIModelID
        * * Display Name: AIModel ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)`),
    PotentialMatchThreshold: z.number().describe(`
        * * Field Name: PotentialMatchThreshold
        * * Display Name: Potential Match Threshold
        * * SQL Data Type: numeric(12, 11)
        * * Default Value: 1
        * * Description: Value between 0 and 1 that determines what is considered a potential matching record. Value must be <= AbsoluteMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.`),
    AbsoluteMatchThreshold: z.number().describe(`
        * * Field Name: AbsoluteMatchThreshold
        * * Display Name: Absolute Match Threshold
        * * SQL Data Type: numeric(12, 11)
        * * Default Value: 1
        * * Description: Value between 0 and 1 that determines what is considered an absolute matching record. Value must be >= PotentialMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(100)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    VectorDatabase: z.string().describe(`
        * * Field Name: VectorDatabase
        * * Display Name: Vector Database
        * * SQL Data Type: nvarchar(100)`),
    Template: z.string().describe(`
        * * Field Name: Template
        * * Display Name: Template
        * * SQL Data Type: nvarchar(255)`),
    AIModel: z.string().describe(`
        * * Field Name: AIModel
        * * Display Name: AIModel
        * * SQL Data Type: nvarchar(50)`),
});

export type EntityDocumentEntityType = z.infer<typeof EntityDocumentSchema>;

/**
 * zod schema definition for the entity Entity Field Values
 */
export const EntityFieldValueSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityFieldID: z.string().describe(`
        * * Field Name: EntityFieldID
        * * Display Name: Entity Field ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Fields (vwEntityFields.ID)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Description: Display order for this value in dropdown lists and UI elements.`),
    Value: z.string().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(255)
        * * Description: The actual value stored in the database for this option.`),
    Code: z.string().nullable().describe(`
        * * Field Name: Code
        * * Display Name: Code
        * * SQL Data Type: nvarchar(50)
        * * Description: Optional code identifier for this value, useful for programmatic access. If not specified, same as Value`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    EntityField: z.string().describe(`
        * * Field Name: EntityField
        * * Display Name: Entity Field
        * * SQL Data Type: nvarchar(255)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier`),
});

export type EntityFieldValueEntityType = z.infer<typeof EntityFieldValueSchema>;

/**
 * zod schema definition for the entity Entity Fields
 */
export const EntityFieldSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Display order of the field within the entity`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the field within the database table`),
    DisplayName: z.string().nullable().describe(`
        * * Field Name: DisplayName
        * * Display Name: Display Name
        * * SQL Data Type: nvarchar(255)
        * * Description: A user friendly alternative to the field name`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Descriptive text explaining the purpose of the field`),
    AutoUpdateDescription: z.boolean().describe(`
        * * Field Name: AutoUpdateDescription
        * * Display Name: Auto Update Description
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When set to 1 (default), whenever a description is modified in the column within the underlying view (first choice) or table (second choice), the Description column in the entity field definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity field definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.`),
    IsPrimaryKey: z.boolean().describe(`
        * * Field Name: IsPrimaryKey
        * * Display Name: Is Primary Key
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if the field is part of the primary key for the entity (auto maintained by CodeGen)`),
    IsUnique: z.boolean().describe(`
        * * Field Name: IsUnique
        * * Display Name: Is Unique
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if the field must have unique values within the entity.`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(255)
        * * Description: Used for generating custom tabs in the generated forms, only utilized if GeneratedFormSection=Category`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * SQL Data Type: nvarchar(100)
        * * Description: SQL Data type (auto maintained by CodeGen)`),
    Length: z.number().nullable().describe(`
        * * Field Name: Length
        * * SQL Data Type: int
        * * Description: SQL data length (auto maintained by CodeGen)`),
    Precision: z.number().nullable().describe(`
        * * Field Name: Precision
        * * SQL Data Type: int
        * * Description: SQL precision (auto maintained by CodeGen)`),
    Scale: z.number().nullable().describe(`
        * * Field Name: Scale
        * * SQL Data Type: int
        * * Description: SQL scale (auto maintained by CodeGen)`),
    AllowsNull: z.boolean().describe(`
        * * Field Name: AllowsNull
        * * Display Name: Allows Null
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Does the column allow null or not (auto maintained by CodeGen)`),
    DefaultValue: z.string().nullable().describe(`
        * * Field Name: DefaultValue
        * * Display Name: Default Value
        * * SQL Data Type: nvarchar(255)
        * * Description: If a default value is defined for the field it is stored here (auto maintained by CodeGen)`),
    AutoIncrement: z.boolean().describe(`
        * * Field Name: AutoIncrement
        * * Display Name: Auto Increment
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If this field automatically increments within the table, this field is set to 1 (auto maintained by CodeGen)`),
    ValueListType: z.union([z.literal('List'), z.literal('ListOrUserEntry'), z.literal('None')]).describe(`
        * * Field Name: ValueListType
        * * Display Name: Value List Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * List
    *   * ListOrUserEntry
    *   * None
        * * Description: Possible Values of None, List, ListOrUserEntry - the last option meaning that the list of possible values are options, but a user can enter anything else desired too.`),
    ExtendedType: z.union([z.literal('Code'), z.literal('Email'), z.literal('FaceTime'), z.literal('Geo'), z.literal('MSTeams'), z.literal('Other'), z.literal('SIP'), z.literal('SMS'), z.literal('Skype'), z.literal('Tel'), z.literal('URL'), z.literal('WhatsApp'), z.literal('ZoomMtg')]).nullable().describe(`
        * * Field Name: ExtendedType
        * * Display Name: Extended Type
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Code
    *   * Email
    *   * FaceTime
    *   * Geo
    *   * MSTeams
    *   * Other
    *   * SIP
    *   * SMS
    *   * Skype
    *   * Tel
    *   * URL
    *   * WhatsApp
    *   * ZoomMtg
        * * Description: Defines extended behaviors for a field such as for Email, Web URLs, Code, etc.`),
    CodeType: z.union([z.literal('CSS'), z.literal('HTML'), z.literal('JavaScript'), z.literal('Other'), z.literal('SQL'), z.literal('TypeScript')]).nullable().describe(`
        * * Field Name: CodeType
        * * Display Name: Code Type
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * CSS
    *   * HTML
    *   * JavaScript
    *   * Other
    *   * SQL
    *   * TypeScript
        * * Description: The type of code associated with this field. Only used when the ExtendedType field is set to "Code"`),
    DefaultInView: z.boolean().describe(`
        * * Field Name: DefaultInView
        * * Display Name: Default In View
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If set to 1, this field will be included by default in any new view created by a user.`),
    ViewCellTemplate: z.string().nullable().describe(`
        * * Field Name: ViewCellTemplate
        * * Display Name: View Cell Template
        * * SQL Data Type: nvarchar(MAX)
        * * Description: NULL`),
    DefaultColumnWidth: z.number().nullable().describe(`
        * * Field Name: DefaultColumnWidth
        * * Display Name: Default Column Width
        * * SQL Data Type: int
        * * Description: Determines the default width for this field when included in a view`),
    AllowUpdateAPI: z.boolean().describe(`
        * * Field Name: AllowUpdateAPI
        * * Display Name: Allow Update API
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: If set to 1, this field will be considered updateable by the API and object model. For this field to have effect, the column type must be updateable (e.g. not part of the primary key and not auto-increment)`),
    AllowUpdateInView: z.boolean().describe(`
        * * Field Name: AllowUpdateInView
        * * Display Name: Allow Update In View
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: If set to 1, and if AllowUpdateAPI=1, the field can be edited within a view when the view is in edit mode.`),
    IncludeInUserSearchAPI: z.boolean().describe(`
        * * Field Name: IncludeInUserSearchAPI
        * * Display Name: Include In User Search API
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If set to 1, this column will be included in user search queries for both traditional and full text search`),
    FullTextSearchEnabled: z.boolean().describe(`
        * * Field Name: FullTextSearchEnabled
        * * Display Name: Full Text Search Enabled
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If set to 1, CodeGen will automatically generate a Full Text Catalog/Index in the database and include this field in the search index.`),
    UserSearchParamFormatAPI: z.string().nullable().describe(`
        * * Field Name: UserSearchParamFormatAPI
        * * Display Name: User Search Param Format API
        * * SQL Data Type: nvarchar(500)
        * * Description: NULL`),
    IncludeInGeneratedForm: z.boolean().describe(`
        * * Field Name: IncludeInGeneratedForm
        * * Display Name: Include In Generated Form
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: If set to 1, this field will be included in the generated form by CodeGen. If set to 0, this field will be excluded from the generated form. For custom forms, this field has no effect as the layout is controlled independently.`),
    GeneratedFormSection: z.union([z.literal('Category'), z.literal('Details'), z.literal('Top')]).describe(`
        * * Field Name: GeneratedFormSection
        * * Display Name: Generated Form Section
        * * SQL Data Type: nvarchar(10)
        * * Default Value: Details
    * * Value List Type: List
    * * Possible Values 
    *   * Category
    *   * Details
    *   * Top
        * * Description: When set to Top, the field will be placed in a "top area" on the top of a generated form and visible regardless of which tab is displayed. When set to "category" Options: Top, Category, Details`),
    IsVirtual: z.boolean().describe(`
        * * Field Name: IsVirtual
        * * Display Name: Is Virtual
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: NULL`),
    IsNameField: z.boolean().describe(`
        * * Field Name: IsNameField
        * * Display Name: Is Name Field
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If set to 1, this column will be used as the "Name" field for the entity and will be used to display the name of the record in various places in the UI.`),
    RelatedEntityID: z.string().nullable().describe(`
        * * Field Name: RelatedEntityID
        * * Display Name: RelatedEntity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RelatedEntityFieldName: z.string().nullable().describe(`
        * * Field Name: RelatedEntityFieldName
        * * Display Name: Related Entity Field Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the field in the Related Entity that this field links to (auto maintained by CodeGen)`),
    IncludeRelatedEntityNameFieldInBaseView: z.boolean().describe(`
        * * Field Name: IncludeRelatedEntityNameFieldInBaseView
        * * Display Name: Include Related Entity Name Field In Base View
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: If set to 1, the "Name" field of the Related Entity will be included in this entity as a virtual field`),
    RelatedEntityNameFieldMap: z.string().nullable().describe(`
        * * Field Name: RelatedEntityNameFieldMap
        * * Display Name: Related Entity Name Field Map
        * * SQL Data Type: nvarchar(255)
        * * Description: For foreign key fields, maps which field in the related entity contains the display name. This is used by CodeGen to automatically add in virtual fields for the "Name Field" of the related entity.`),
    RelatedEntityDisplayType: z.string().describe(`
        * * Field Name: RelatedEntityDisplayType
        * * Display Name: Related Entity Display Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Search
        * * Description: Controls the generated form in the MJ Explorer UI - defaults to a search box, other option is a drop down. Possible values are Search and Dropdown`),
    EntityIDFieldName: z.string().nullable().describe(`
        * * Field Name: EntityIDFieldName
        * * Display Name: Entity IDField Name
        * * SQL Data Type: nvarchar(100)
        * * Description: Optional, used for "Soft Keys" to link records to different entity/record combinations on a per-record basis (for example the FileEntityRecordLink table has an EntityID/RecordID field pair. For that entity, the RecordID specifies "EntityID" for this field. This information allows MJ to detect soft keys/links for dependency detection, merging and for preventing orphaned soft-linked records during delete operations.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ScopeDefault: z.string().nullable().describe(`
        * * Field Name: ScopeDefault
        * * Display Name: Scope Default
        * * SQL Data Type: nvarchar(100)
        * * Description: A comma-delimited string indicating the default scope for field visibility. Options include Users, Admins, AI, and All. Defaults to All when NULL. This is used for a simple method of filtering field defaults for visibility, not security enforcement.`),
    AutoUpdateRelatedEntityInfo: z.boolean().describe(`
        * * Field Name: AutoUpdateRelatedEntityInfo
        * * Display Name: Auto Update Related Entity Info
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates whether the related entity information should be automatically updated from the database schema. When set to 0, relationships not part of the database schema can be manually defined at the application and AI agent level. Defaults to 1.`),
    ValuesToPackWithSchema: z.union([z.literal('All'), z.literal('Auto'), z.literal('None')]).describe(`
        * * Field Name: ValuesToPackWithSchema
        * * Display Name: Values To Pack With Schema
        * * SQL Data Type: nvarchar(10)
        * * Default Value: Auto
    * * Value List Type: List
    * * Possible Values 
    *   * All
    *   * Auto
    *   * None
        * * Description: Determines whether values for the field should be included when the schema is packed. Options: Auto (include manually set or auto-derived values), None (exclude all values), All (include all distinct values from the table). Defaults to Auto.`),
    Status: z.union([z.literal('Active'), z.literal('Deprecated'), z.literal('Disabled')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(25)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Disabled
        * * Description: Current status of the entity field - Active fields are available for use, Deprecated fields are discouraged but still functional, Disabled fields are not available for use`),
    FieldCodeName: z.string().nullable().describe(`
        * * Field Name: FieldCodeName
        * * Display Name: Field Code Name
        * * SQL Data Type: nvarchar(MAX)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    SchemaName: z.string().describe(`
        * * Field Name: SchemaName
        * * Display Name: Schema Name
        * * SQL Data Type: nvarchar(255)`),
    BaseTable: z.string().describe(`
        * * Field Name: BaseTable
        * * Display Name: Base Table
        * * SQL Data Type: nvarchar(255)`),
    BaseView: z.string().describe(`
        * * Field Name: BaseView
        * * Display Name: Base View
        * * SQL Data Type: nvarchar(255)`),
    EntityCodeName: z.string().nullable().describe(`
        * * Field Name: EntityCodeName
        * * Display Name: Entity Code Name
        * * SQL Data Type: nvarchar(MAX)`),
    EntityClassName: z.string().nullable().describe(`
        * * Field Name: EntityClassName
        * * Display Name: Entity Class Name
        * * SQL Data Type: nvarchar(MAX)`),
    RelatedEntity: z.string().nullable().describe(`
        * * Field Name: RelatedEntity
        * * Display Name: Related Entity
        * * SQL Data Type: nvarchar(255)`),
    RelatedEntitySchemaName: z.string().nullable().describe(`
        * * Field Name: RelatedEntitySchemaName
        * * Display Name: Related Entity Schema Name
        * * SQL Data Type: nvarchar(255)`),
    RelatedEntityBaseTable: z.string().nullable().describe(`
        * * Field Name: RelatedEntityBaseTable
        * * Display Name: Related Entity Base Table
        * * SQL Data Type: nvarchar(255)`),
    RelatedEntityBaseView: z.string().nullable().describe(`
        * * Field Name: RelatedEntityBaseView
        * * Display Name: Related Entity Base View
        * * SQL Data Type: nvarchar(255)`),
    RelatedEntityCodeName: z.string().nullable().describe(`
        * * Field Name: RelatedEntityCodeName
        * * Display Name: Related Entity Code Name
        * * SQL Data Type: nvarchar(MAX)`),
    RelatedEntityClassName: z.string().nullable().describe(`
        * * Field Name: RelatedEntityClassName
        * * Display Name: Related Entity Class Name
        * * SQL Data Type: nvarchar(MAX)`),
});

export type EntityFieldEntityType = z.infer<typeof EntityFieldSchema>;

/**
 * zod schema definition for the entity Entity Permissions
 */
export const EntityPermissionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RoleID: z.string().describe(`
        * * Field Name: RoleID
        * * Display Name: Role ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Roles (vwRoles.ID)`),
    CanCreate: z.boolean().describe(`
        * * Field Name: CanCreate
        * * Display Name: Can Create
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether the role/user can create new records in this entity.`),
    CanRead: z.boolean().describe(`
        * * Field Name: CanRead
        * * Display Name: Can Read
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether the role/user can read/view records in this entity.`),
    CanUpdate: z.boolean().describe(`
        * * Field Name: CanUpdate
        * * Display Name: Can Update
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether the role/user can update existing records in this entity.`),
    CanDelete: z.boolean().describe(`
        * * Field Name: CanDelete
        * * Display Name: Can Delete
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether the role/user can delete records from this entity.`),
    ReadRLSFilterID: z.string().nullable().describe(`
        * * Field Name: ReadRLSFilterID
        * * Display Name: Read RLSFilter ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)`),
    CreateRLSFilterID: z.string().nullable().describe(`
        * * Field Name: CreateRLSFilterID
        * * Display Name: Create RLSFilter ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)`),
    UpdateRLSFilterID: z.string().nullable().describe(`
        * * Field Name: UpdateRLSFilterID
        * * Display Name: Update RLSFilter ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)`),
    DeleteRLSFilterID: z.string().nullable().describe(`
        * * Field Name: DeleteRLSFilterID
        * * Display Name: Delete RLSFilter ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    RoleName: z.string().describe(`
        * * Field Name: RoleName
        * * Display Name: Role Name
        * * SQL Data Type: nvarchar(50)`),
    RoleSQLName: z.string().nullable().describe(`
        * * Field Name: RoleSQLName
        * * Display Name: Role SQLName
        * * SQL Data Type: nvarchar(250)`),
    CreateRLSFilter: z.string().nullable().describe(`
        * * Field Name: CreateRLSFilter
        * * Display Name: Create RLSFilter
        * * SQL Data Type: nvarchar(100)`),
    ReadRLSFilter: z.string().nullable().describe(`
        * * Field Name: ReadRLSFilter
        * * Display Name: Read RLSFilter
        * * SQL Data Type: nvarchar(100)`),
    UpdateRLSFilter: z.string().nullable().describe(`
        * * Field Name: UpdateRLSFilter
        * * Display Name: Update RLSFilter
        * * SQL Data Type: nvarchar(100)`),
    DeleteRLSFilter: z.string().nullable().describe(`
        * * Field Name: DeleteRLSFilter
        * * Display Name: Delete RLSFilter
        * * SQL Data Type: nvarchar(100)`),
});

export type EntityPermissionEntityType = z.infer<typeof EntityPermissionSchema>;

/**
 * zod schema definition for the entity Entity Record Documents
 */
export const EntityRecordDocumentSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record ID
        * * SQL Data Type: nvarchar(450)
        * * Description: The ID of the entity record this document was generated for.`),
    EntityDocumentID: z.string().describe(`
        * * Field Name: EntityDocumentID
        * * Display Name: Entity Document ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Documents (vwEntityDocuments.ID)`),
    DocumentText: z.string().nullable().describe(`
        * * Field Name: DocumentText
        * * Display Name: Document Text
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The generated document text after template processing.`),
    VectorIndexID: z.string().describe(`
        * * Field Name: VectorIndexID
        * * Display Name: Vector Index ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Vector Indexes (vwVectorIndexes.ID)`),
    VectorID: z.string().nullable().describe(`
        * * Field Name: VectorID
        * * Display Name: Vector ID
        * * SQL Data Type: nvarchar(50)
        * * Description: Reference to the vector embedding of this document if AI search is enabled.`),
    VectorJSON: z.string().nullable().describe(`
        * * Field Name: VectorJSON
        * * Display Name: Vector JSON
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON representation of the vector embedding for this document.`),
    EntityRecordUpdatedAt: z.date().describe(`
        * * Field Name: EntityRecordUpdatedAt
        * * Display Name: Entity Record Updated At
        * * SQL Data Type: datetime
        * * Description: Timestamp of when the source entity record was last updated.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    EntityDocument: z.string().describe(`
        * * Field Name: EntityDocument
        * * Display Name: Entity Document
        * * SQL Data Type: nvarchar(250)`),
    VectorIndex: z.string().describe(`
        * * Field Name: VectorIndex
        * * Display Name: Vector Index
        * * SQL Data Type: nvarchar(255)`),
});

export type EntityRecordDocumentEntityType = z.infer<typeof EntityRecordDocumentSchema>;

/**
 * zod schema definition for the entity Entity Relationship Display Components
 */
export const EntityRelationshipDisplayComponentSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    RelationshipType: z.union([z.literal('Both'), z.literal('Many to Many'), z.literal('One to Many')]).describe(`
        * * Field Name: RelationshipType
        * * Display Name: Relationship Type
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Both
    *   * Many to Many
    *   * One to Many
        * * Description: The type of relationship the component displays. Valid values are "One to Many", "Many to Many", or "Both".`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type EntityRelationshipDisplayComponentEntityType = z.infer<typeof EntityRelationshipDisplayComponentSchema>;

/**
 * zod schema definition for the entity Entity Relationships
 */
export const EntityRelationshipSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Used for display order in generated forms and in other places in the UI where relationships for an entity are shown`),
    RelatedEntityID: z.string().describe(`
        * * Field Name: RelatedEntityID
        * * Display Name: Related Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    BundleInAPI: z.boolean().describe(`
        * * Field Name: BundleInAPI
        * * Display Name: Bundle In API
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Whether to include related records when fetching the parent entity via API.`),
    IncludeInParentAllQuery: z.boolean().describe(`
        * * Field Name: IncludeInParentAllQuery
        * * Display Name: Include In Parent All Query
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether to include this relationship when querying all fields of the parent entity.`),
    Type: z.union([z.literal('Many To Many'), z.literal('One To Many')]).describe(`
        * * Field Name: Type
        * * SQL Data Type: nchar(20)
        * * Default Value: One To Many
    * * Value List Type: List
    * * Possible Values 
    *   * Many To Many
    *   * One To Many
        * * Description: The cardinality of the relationship (One To Many, Many To Many, One To One).`),
    EntityKeyField: z.string().nullable().describe(`
        * * Field Name: EntityKeyField
        * * Display Name: Entity Key Field
        * * SQL Data Type: nvarchar(255)
        * * Description: The primary key field of the parent entity in this relationship.`),
    RelatedEntityJoinField: z.string().describe(`
        * * Field Name: RelatedEntityJoinField
        * * Display Name: Related Entity Join Field
        * * SQL Data Type: nvarchar(255)
        * * Description: The foreign key field in the related entity that references the parent.`),
    JoinView: z.string().nullable().describe(`
        * * Field Name: JoinView
        * * Display Name: Join View
        * * SQL Data Type: nvarchar(255)
        * * Description: For many-to-many relationships, the view containing the junction data.`),
    JoinEntityJoinField: z.string().nullable().describe(`
        * * Field Name: JoinEntityJoinField
        * * Display Name: Join Entity Join Field
        * * SQL Data Type: nvarchar(255)
        * * Description: For many-to-many, the field in the junction table linking to the parent entity.`),
    JoinEntityInverseJoinField: z.string().nullable().describe(`
        * * Field Name: JoinEntityInverseJoinField
        * * Display Name: Join Entity Inverse Join Field
        * * SQL Data Type: nvarchar(255)
        * * Description: For many-to-many, the field in the junction table linking to the related entity.`),
    DisplayInForm: z.boolean().describe(`
        * * Field Name: DisplayInForm
        * * Display Name: Display In Form
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When unchecked the relationship will NOT be displayed on the generated form`),
    DisplayLocation: z.union([z.literal('After Field Tabs'), z.literal('Before Field Tabs')]).describe(`
        * * Field Name: DisplayLocation
        * * Display Name: Display Location
        * * SQL Data Type: nvarchar(50)
        * * Default Value: After Field Tabs
    * * Value List Type: List
    * * Possible Values 
    *   * After Field Tabs
    *   * Before Field Tabs
        * * Description: Where to display this relationship in the UI relative to other entity elements.`),
    DisplayName: z.string().nullable().describe(`
        * * Field Name: DisplayName
        * * Display Name: Display Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Optional, when specified this value overrides the related entity name for the label on the tab`),
    DisplayIconType: z.union([z.literal('Custom'), z.literal('None'), z.literal('Related Entity Icon')]).describe(`
        * * Field Name: DisplayIconType
        * * Display Name: Display Icon Type
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Related Entity Icon
    * * Value List Type: List
    * * Possible Values 
    *   * Custom
    *   * None
    *   * Related Entity Icon
        * * Description: When Related Entity Icon - uses the icon from the related entity, if one exists. When Custom, uses the value in the DisplayIcon field in this record, and when None, no icon is displayed`),
    DisplayIcon: z.string().nullable().describe(`
        * * Field Name: DisplayIcon
        * * Display Name: Display Icon
        * * SQL Data Type: nvarchar(255)
        * * Description: If specified, the icon `),
    DisplayUserViewID: z.string().nullable().describe(`
        * * Field Name: DisplayUserViewID
        * * Display Name: Display User View ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: User Views (vwUserViews.ID)`),
    DisplayComponentID: z.string().nullable().describe(`
        * * Field Name: DisplayComponentID
        * * Display Name: Display Component ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entity Relationship Display Components (vwEntityRelationshipDisplayComponents.ID)`),
    DisplayComponentConfiguration: z.string().nullable().describe(`
        * * Field Name: DisplayComponentConfiguration
        * * Display Name: Display Component Configuration
        * * SQL Data Type: nvarchar(MAX)
        * * Description: If DisplayComponentID is specified, this field can optionally be used to track component-specific and relationship-specific configuration details that will be used by CodeGen to provide to the display component selected.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    AutoUpdateFromSchema: z.boolean().describe(`
        * * Field Name: AutoUpdateFromSchema
        * * Display Name: Auto Update From Schema
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates whether this relationship should be automatically updated by CodeGen. When set to 0, the record will not be modified by CodeGen. Defaults to 1.`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    EntityBaseTable: z.string().describe(`
        * * Field Name: EntityBaseTable
        * * Display Name: Entity Base Table
        * * SQL Data Type: nvarchar(255)`),
    EntityBaseView: z.string().describe(`
        * * Field Name: EntityBaseView
        * * Display Name: Entity Base View
        * * SQL Data Type: nvarchar(255)`),
    RelatedEntity: z.string().describe(`
        * * Field Name: RelatedEntity
        * * Display Name: Related Entity
        * * SQL Data Type: nvarchar(255)`),
    RelatedEntityBaseTable: z.string().describe(`
        * * Field Name: RelatedEntityBaseTable
        * * Display Name: Related Entity Base Table
        * * SQL Data Type: nvarchar(255)`),
    RelatedEntityBaseView: z.string().describe(`
        * * Field Name: RelatedEntityBaseView
        * * Display Name: Related Entity Base View
        * * SQL Data Type: nvarchar(255)`),
    RelatedEntityClassName: z.string().nullable().describe(`
        * * Field Name: RelatedEntityClassName
        * * Display Name: Related Entity Class Name
        * * SQL Data Type: nvarchar(MAX)`),
    RelatedEntityCodeName: z.string().nullable().describe(`
        * * Field Name: RelatedEntityCodeName
        * * Display Name: Related Entity Code Name
        * * SQL Data Type: nvarchar(MAX)`),
    RelatedEntityBaseTableCodeName: z.string().nullable().describe(`
        * * Field Name: RelatedEntityBaseTableCodeName
        * * Display Name: Related Entity Base Table Code Name
        * * SQL Data Type: nvarchar(MAX)`),
    DisplayUserViewName: z.string().nullable().describe(`
        * * Field Name: DisplayUserViewName
        * * Display Name: Display User View Name
        * * SQL Data Type: nvarchar(100)`),
});

export type EntityRelationshipEntityType = z.infer<typeof EntityRelationshipSchema>;

/**
 * zod schema definition for the entity Entity Settings
 */
export const EntitySettingSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Value: z.string().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The configuration value for this entity setting, often in JSON format.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type EntitySettingEntityType = z.infer<typeof EntitySettingSchema>;

/**
 * zod schema definition for the entity Error Logs
 */
export const ErrorLogSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CompanyIntegrationRunID: z.string().nullable().describe(`
        * * Field Name: CompanyIntegrationRunID
        * * Display Name: CompanyIntegrationRun ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Company Integration Runs (vwCompanyIntegrationRuns.ID)`),
    CompanyIntegrationRunDetailID: z.string().nullable().describe(`
        * * Field Name: CompanyIntegrationRunDetailID
        * * Display Name: CompanyIntegrationRunDetail ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Company Integration Run Details (vwCompanyIntegrationRunDetails.ID)`),
    Code: z.string().nullable().describe(`
        * * Field Name: Code
        * * SQL Data Type: nchar(20)
        * * Description: Error code for categorizing and handling specific error types.`),
    Message: z.string().nullable().describe(`
        * * Field Name: Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The primary error message describing what went wrong.`),
    CreatedBy: z.string().nullable().describe(`
        * * Field Name: CreatedBy
        * * Display Name: Created By
        * * SQL Data Type: nvarchar(50)
        * * Default Value: suser_name()
        * * Description: User or system process that encountered this error.`),
    Status: z.string().nullable().describe(`
        * * Field Name: Status
        * * SQL Data Type: nvarchar(10)`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * SQL Data Type: nvarchar(20)
        * * Description: High-level category for grouping related errors (Database, API, Validation, etc.).`),
    Details: z.string().nullable().describe(`
        * * Field Name: Details
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Full error details including stack trace, inner exceptions, and context data.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ErrorLogEntityType = z.infer<typeof ErrorLogSchema>;

/**
 * zod schema definition for the entity Explorer Navigation Items
 */
export const ExplorerNavigationItemSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Unique identifier for each navigation item`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Description: Sequence number for the navigation item, must be unique and greater than 0`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)
        * * Description: Unique name of the navigation item displayed to the user`),
    Route: z.string().describe(`
        * * Field Name: Route
        * * Display Name: Route
        * * SQL Data Type: nvarchar(255)
        * * Description: The route for the navigation item relative to the app main URL, using Angular syntax like "entity/:entityName"`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if the navigation item is active; allows turning off items in the UI without deleting them from the metadata`),
    ShowInHomeScreen: z.boolean().describe(`
        * * Field Name: ShowInHomeScreen
        * * Display Name: Show In Home Screen
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Controls if the navigation item is shown on the Home screen for MJ Explorer`),
    ShowInNavigationDrawer: z.boolean().describe(`
        * * Field Name: ShowInNavigationDrawer
        * * Display Name: Show In Navigation Drawer
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Controls if the item is shown in the left navigation drawer in the MJ Explorer app or not.`),
    IconCSSClass: z.string().nullable().describe(`
        * * Field Name: IconCSSClass
        * * Display Name: Icon CSSClass
        * * SQL Data Type: nvarchar(100)
        * * Description: Optional, CSS class for an icon to be displayed with the navigation item`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the navigation item, shown to the user on hover or in larger displays`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Administrator comments, not shown to the end user in MJ Explorer app`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ExplorerNavigationItemEntityType = z.infer<typeof ExplorerNavigationItemSchema>;

/**
 * zod schema definition for the entity File Categories
 */
export const FileCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: File Categories (vwFileCategories.ID)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type FileCategoryEntityType = z.infer<typeof FileCategorySchema>;

/**
 * zod schema definition for the entity File Entity Record Links
 */
export const FileEntityRecordLinkSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    FileID: z.string().describe(`
        * * Field Name: FileID
        * * Display Name: File ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Files (vwFiles.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record ID
        * * SQL Data Type: nvarchar(750)
        * * Description: The ID of the entity record this file is attached to.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    File: z.string().describe(`
        * * Field Name: File
        * * Display Name: File
        * * SQL Data Type: nvarchar(500)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type FileEntityRecordLinkEntityType = z.infer<typeof FileEntityRecordLinkSchema>;

/**
 * zod schema definition for the entity File Storage Providers
 */
export const FileStorageProviderSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    ServerDriverKey: z.string().describe(`
        * * Field Name: ServerDriverKey
        * * Display Name: Server Driver Key
        * * SQL Data Type: nvarchar(100)
        * * Description: Identifier for the server-side driver implementation for this storage provider.`),
    ClientDriverKey: z.string().describe(`
        * * Field Name: ClientDriverKey
        * * Display Name: Client Driver Key
        * * SQL Data Type: nvarchar(100)
        * * Description: Identifier for the client-side driver implementation for this storage provider.`),
    Priority: z.number().describe(`
        * * Field Name: Priority
        * * Display Name: Priority
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Priority order for selecting storage providers, lower numbers are preferred.`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Whether this storage provider is currently available for use.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    SupportsSearch: z.boolean().describe(`
        * * Field Name: SupportsSearch
        * * Display Name: Supports Search
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this storage provider supports native full-text search across file names and content. Providers with native search APIs (Google Drive, SharePoint, Dropbox, Box) have this set to true.`),
});

export type FileStorageProviderEntityType = z.infer<typeof FileStorageProviderSchema>;

/**
 * zod schema definition for the entity Files
 */
export const FileSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(500)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    CategoryID: z.string().nullable().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: File Categories (vwFileCategories.ID)`),
    ProviderID: z.string().describe(`
        * * Field Name: ProviderID
        * * Display Name: Provider ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: File Storage Providers (vwFileStorageProviders.ID)`),
    ContentType: z.string().nullable().describe(`
        * * Field Name: ContentType
        * * Display Name: Content Type
        * * SQL Data Type: nvarchar(255)
        * * Description: MIME type of the file content (e.g., image/jpeg, application/pdf).`),
    ProviderKey: z.string().nullable().describe(`
        * * Field Name: ProviderKey
        * * Display Name: Provider Key
        * * SQL Data Type: nvarchar(500)
        * * Description: Storage provider-specific identifier or path for this file.`),
    Status: z.string().describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
        * * Description: Pending, Uploading, Uploaded, Deleting, Deleted`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(255)`),
    Provider: z.string().describe(`
        * * Field Name: Provider
        * * Display Name: Provider
        * * SQL Data Type: nvarchar(50)`),
});

export type FileEntityType = z.infer<typeof FileSchema>;

/**
 * zod schema definition for the entity Generated Code Categories
 */
export const GeneratedCodeCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Generated Code Categories (vwGeneratedCodeCategories.ID)
        * * Description: Parent category ID, allowing for hierarchical categorization.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type GeneratedCodeCategoryEntityType = z.infer<typeof GeneratedCodeCategorySchema>;

/**
 * zod schema definition for the entity Generated Codes
 */
export const GeneratedCodeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    GeneratedAt: z.date().describe(`
        * * Field Name: GeneratedAt
        * * Display Name: Generated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()
        * * Description: When the code was generated.`),
    CategoryID: z.string().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Generated Code Categories (vwGeneratedCodeCategories.ID)
        * * Description: Reference to the category of generated code.`),
    GeneratedByModelID: z.string().describe(`
        * * Field Name: GeneratedByModelID
        * * Display Name: Generated By Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
        * * Description: AI model responsible for generating this code.`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Descriptive name of the generated code.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional description of the generated code.`),
    Code: z.string().describe(`
        * * Field Name: Code
        * * Display Name: Code
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The actual generated code.`),
    Source: z.string().describe(`
        * * Field Name: Source
        * * Display Name: Source
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Source material used to generate the code, e.g., a SQL CHECK constraint.`),
    LinkedEntityID: z.string().nullable().describe(`
        * * Field Name: LinkedEntityID
        * * Display Name: Linked Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    LinkedRecordPrimaryKey: z.string().nullable().describe(`
        * * Field Name: LinkedRecordPrimaryKey
        * * Display Name: Linked Record Primary Key
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON containing the primary key(s) of the record this generated code is associated with.`),
    Status: z.union([z.literal('Approved'), z.literal('Pending'), z.literal('Rejected')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
        * * Description: Status of the generated code, e.g., Pending, Approved, or Rejected.`),
    Language: z.union([z.literal('CSS'), z.literal('HTML'), z.literal('JavaScript'), z.literal('Other'), z.literal('Python'), z.literal('SQL'), z.literal('TypeScript')]).describe(`
        * * Field Name: Language
        * * Display Name: Language
        * * SQL Data Type: nvarchar(50)
        * * Default Value: TypeScript
    * * Value List Type: List
    * * Possible Values 
    *   * CSS
    *   * HTML
    *   * JavaScript
    *   * Other
    *   * Python
    *   * SQL
    *   * TypeScript
        * * Description: Programming language of the generated code (TypeScript, SQL, HTML, CSS, JavaScript, Python, or Other).`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Category: z.string().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(255)`),
    GeneratedByModel: z.string().describe(`
        * * Field Name: GeneratedByModel
        * * Display Name: Generated By Model
        * * SQL Data Type: nvarchar(50)`),
    LinkedEntity: z.string().nullable().describe(`
        * * Field Name: LinkedEntity
        * * Display Name: Linked Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type GeneratedCodeEntityType = z.infer<typeof GeneratedCodeSchema>;

/**
 * zod schema definition for the entity Integration URL Formats
 */
export const IntegrationURLFormatSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    IntegrationID: z.string().describe(`
        * * Field Name: IntegrationID
        * * Display Name: Integration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Integrations (vwIntegrations.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    URLFormat: z.string().describe(`
        * * Field Name: URLFormat
        * * SQL Data Type: nvarchar(500)
        * * Description: The URL Format for the given integration including the ability to include markup with fields from the integration`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Integration: z.string().describe(`
        * * Field Name: Integration
        * * Display Name: Integration
        * * SQL Data Type: nvarchar(100)`),
    NavigationBaseURL: z.string().nullable().describe(`
        * * Field Name: NavigationBaseURL
        * * Display Name: Navigation Base URL
        * * SQL Data Type: nvarchar(500)`),
    FullURLFormat: z.string().nullable().describe(`
        * * Field Name: FullURLFormat
        * * Display Name: Full URLFormat
        * * SQL Data Type: nvarchar(1000)`),
});

export type IntegrationURLFormatEntityType = z.infer<typeof IntegrationURLFormatSchema>;

/**
 * zod schema definition for the entity Integrations
 */
export const IntegrationSchema = z.object({
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(255)`),
    NavigationBaseURL: z.string().nullable().describe(`
        * * Field Name: NavigationBaseURL
        * * Display Name: Navigation Base URL
        * * SQL Data Type: nvarchar(500)
        * * Description: Base URL for navigating to records in the external system from MemberJunction.`),
    ClassName: z.string().nullable().describe(`
        * * Field Name: ClassName
        * * Display Name: Class Name
        * * SQL Data Type: nvarchar(100)
        * * Description: The TypeScript/JavaScript class name implementing this integration.`),
    ImportPath: z.string().nullable().describe(`
        * * Field Name: ImportPath
        * * Display Name: Import Path
        * * SQL Data Type: nvarchar(100)
        * * Description: Module import path for the integration class in the codebase.`),
    BatchMaxRequestCount: z.number().describe(`
        * * Field Name: BatchMaxRequestCount
        * * Display Name: Batch Max Request Count
        * * SQL Data Type: int
        * * Default Value: -1
        * * Description: Maximum number of API requests to batch together, -1 for no limit.`),
    BatchRequestWaitTime: z.number().describe(`
        * * Field Name: BatchRequestWaitTime
        * * Display Name: Batch Request Wait Time
        * * SQL Data Type: int
        * * Default Value: -1
        * * Description: Milliseconds to wait before sending a batch of requests, -1 to disable batching.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
});

export type IntegrationEntityType = z.infer<typeof IntegrationSchema>;

/**
 * zod schema definition for the entity Libraries
 */
export const LibrarySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
        * * Description: Status of the library, only libraries marked as Active will be available for use by generated code. If a library was once active but no longer is, existing code that used the library will not be affected.`),
    TypeDefinitions: z.string().nullable().describe(`
        * * Field Name: TypeDefinitions
        * * Display Name: Type Definitions
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Code showing the types and functions defined in the library to be used for reference by humans and AI`),
    SampleCode: z.string().nullable().describe(`
        * * Field Name: SampleCode
        * * Display Name: Sample Code
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Examples of code use of the classes and/or functions from within the library`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type LibraryEntityType = z.infer<typeof LibrarySchema>;

/**
 * zod schema definition for the entity Library Items
 */
export const LibraryItemSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    LibraryID: z.string().describe(`
        * * Field Name: LibraryID
        * * Display Name: Library ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Libraries (vwLibraries.ID)`),
    Type: z.union([z.literal('Class'), z.literal('Function'), z.literal('Interface'), z.literal('Module'), z.literal('Type'), z.literal('Variable')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Class
    *   * Function
    *   * Interface
    *   * Module
    *   * Type
    *   * Variable
        * * Description: Type of the library item for example Class, Interface, etc.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Library: z.string().describe(`
        * * Field Name: Library
        * * Display Name: Library
        * * SQL Data Type: nvarchar(255)`),
});

export type LibraryItemEntityType = z.infer<typeof LibraryItemSchema>;

/**
 * zod schema definition for the entity List Categories
 */
export const ListCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: List Categories (vwListCategories.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(100)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type ListCategoryEntityType = z.infer<typeof ListCategorySchema>;

/**
 * zod schema definition for the entity List Details
 */
export const ListDetailSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ListID: z.string().describe(`
        * * Field Name: ListID
        * * Display Name: List ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Lists (vwLists.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record
        * * SQL Data Type: nvarchar(445)
        * * Description: The ID of the record included in this list.`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Order of this record within the list, for maintaining user-defined sorting.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Status: z.union([z.literal('Active'), z.literal('Complete'), z.literal('Disabled'), z.literal('Error'), z.literal('Other'), z.literal('Pending'), z.literal('Rejected')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(30)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Complete
    *   * Disabled
    *   * Error
    *   * Other
    *   * Pending
    *   * Rejected
        * * Description: Tracks the status of each individual list detail row to enable processing of various types and the use of the status column for filtering list detail rows within a list that are in a particular state.`),
    AdditionalData: z.string().nullable().describe(`
        * * Field Name: AdditionalData
        * * Display Name: Additional Data
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional column that allows for tracking any additional data for each ListDetail row`),
    List: z.string().describe(`
        * * Field Name: List
        * * Display Name: List
        * * SQL Data Type: nvarchar(100)`),
});

export type ListDetailEntityType = z.infer<typeof ListDetailSchema>;

/**
 * zod schema definition for the entity Lists
 */
export const ListSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    CategoryID: z.string().nullable().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: List Categories (vwListCategories.ID)`),
    ExternalSystemRecordID: z.string().nullable().describe(`
        * * Field Name: ExternalSystemRecordID
        * * Display Name: External System Record ID
        * * SQL Data Type: nvarchar(100)
        * * Description: Identifier for this list in an external system, used for synchronization.`),
    CompanyIntegrationID: z.string().nullable().describe(`
        * * Field Name: CompanyIntegrationID
        * * Display Name: Company Integration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(100)`),
    CompanyIntegration: z.string().nullable().describe(`
        * * Field Name: CompanyIntegration
        * * Display Name: Company Integration
        * * SQL Data Type: nvarchar(255)`),
});

export type ListEntityType = z.infer<typeof ListSchema>;

/**
 * zod schema definition for the entity MJ: Access Control Rules
 */
export const AccessControlRuleSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record ID
        * * SQL Data Type: nvarchar(500)
        * * Description: Primary key value(s) of the record being protected - scalar for simple PKs or JSON for composite PKs`),
    GranteeType: z.union([z.literal('Everyone'), z.literal('Public'), z.literal('Role'), z.literal('User')]).describe(`
        * * Field Name: GranteeType
        * * Display Name: Grantee Type
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Everyone
    *   * Public
    *   * Role
    *   * User
        * * Description: Type of grantee receiving permission (User, Role, Everyone, Public). "Everyone" means all authenticated users whereas "Public" means any authenticated OR anonymous user.`),
    GranteeID: z.string().nullable().describe(`
        * * Field Name: GranteeID
        * * Display Name: Grantee ID
        * * SQL Data Type: uniqueidentifier`),
    CanRead: z.boolean().describe(`
        * * Field Name: CanRead
        * * Display Name: Can Read
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Permission to read/view the record`),
    CanCreate: z.boolean().describe(`
        * * Field Name: CanCreate
        * * Display Name: Can Create
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Permission to create new related records`),
    CanUpdate: z.boolean().describe(`
        * * Field Name: CanUpdate
        * * Display Name: Can Update
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Permission to update/modify the record`),
    CanDelete: z.boolean().describe(`
        * * Field Name: CanDelete
        * * Display Name: Can Delete
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Permission to delete the record`),
    CanShare: z.boolean().describe(`
        * * Field Name: CanShare
        * * Display Name: Can Share
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Permission to share/grant permissions to other users`),
    ExpiresAt: z.date().nullable().describe(`
        * * Field Name: ExpiresAt
        * * Display Name: Expires At
        * * SQL Data Type: datetimeoffset
        * * Description: Optional expiration date/time for this access rule`),
    GrantedByUserID: z.string().describe(`
        * * Field Name: GrantedByUserID
        * * Display Name: Granted By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    GrantedByUser: z.string().describe(`
        * * Field Name: GrantedByUser
        * * Display Name: Granted By User
        * * SQL Data Type: nvarchar(100)`),
});

export type AccessControlRuleEntityType = z.infer<typeof AccessControlRuleSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Artifact Types
 */
export const AIAgentArtifactTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: AI Agent that can produce this artifact type`),
    ArtifactTypeID: z.string().describe(`
        * * Field Name: ArtifactTypeID
        * * Display Name: Artifact Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)
        * * Description: Artifact type that this agent can produce`),
    Sequence: z.number().nullable().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Description: Optional sequence for ordering multiple artifact types for an agent`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    ArtifactType: z.string().describe(`
        * * Field Name: ArtifactType
        * * Display Name: Artifact Type
        * * SQL Data Type: nvarchar(100)`),
});

export type AIAgentArtifactTypeEntityType = z.infer<typeof AIAgentArtifactTypeSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Data Sources
 */
export const AIAgentDataSourceSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Variable name for the data in the data parameter (e.g., "ALL_ENTITIES"). Must be unique within an agent.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of what this data source provides`),
    SourceType: z.union([z.literal('RunQuery'), z.literal('RunView')]).describe(`
        * * Field Name: SourceType
        * * Display Name: Source Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: RunView
    * * Value List Type: List
    * * Possible Values 
    *   * RunQuery
    *   * RunView
        * * Description: Type of data source: RunView or RunQuery. Determines which parameters are used.`),
    EntityName: z.string().nullable().describe(`
        * * Field Name: EntityName
        * * Display Name: Entity Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Entity name for RunView data sources (e.g., "Entities", "AI Models")`),
    ExtraFilter: z.string().nullable().describe(`
        * * Field Name: ExtraFilter
        * * Display Name: Extra Filter
        * * SQL Data Type: nvarchar(MAX)
        * * Description: SQL WHERE clause filter for RunView data sources`),
    OrderBy: z.string().nullable().describe(`
        * * Field Name: OrderBy
        * * Display Name: Order By
        * * SQL Data Type: nvarchar(500)
        * * Description: SQL ORDER BY clause for RunView data sources`),
    FieldsToRetrieve: z.string().nullable().describe(`
        * * Field Name: FieldsToRetrieve
        * * Display Name: Fields To Retrieve
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of field names to return for RunView data sources (e.g., ["ID", "Name", "Description"])`),
    ResultType: z.union([z.literal('entity_object'), z.literal('simple')]).nullable().describe(`
        * * Field Name: ResultType
        * * Display Name: Result Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: simple
    * * Value List Type: List
    * * Possible Values 
    *   * entity_object
    *   * simple
        * * Description: Result type for RunView: simple (default) or entity_object`),
    QueryName: z.string().nullable().describe(`
        * * Field Name: QueryName
        * * Display Name: Query Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Query name for RunQuery data sources`),
    CategoryPath: z.string().nullable().describe(`
        * * Field Name: CategoryPath
        * * Display Name: Category Path
        * * SQL Data Type: nvarchar(500)
        * * Description: Category path for RunQuery data sources (e.g., "/MJ/AI/Agents/")`),
    Parameters: z.string().nullable().describe(`
        * * Field Name: Parameters
        * * Display Name: Parameters
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON object of parameters for RunQuery data sources (e.g., {"organizationId": "123"})`),
    MaxRows: z.number().nullable().describe(`
        * * Field Name: MaxRows
        * * Display Name: Max Rows
        * * SQL Data Type: int
        * * Description: Maximum number of rows to return. Applies to both RunView and RunQuery.`),
    ExecutionOrder: z.number().describe(`
        * * Field Name: ExecutionOrder
        * * Display Name: Execution Order
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Execution order when multiple data sources are defined for an agent (lower numbers execute first)`),
    Status: z.union([z.literal('Active'), z.literal('Disabled')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
        * * Description: Status of the data source: Active or Disabled`),
    CachePolicy: z.union([z.literal('None'), z.literal('PerAgent'), z.literal('PerRun')]).describe(`
        * * Field Name: CachePolicy
        * * Display Name: Cache Policy
        * * SQL Data Type: nvarchar(20)
        * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * None
    *   * PerAgent
    *   * PerRun
        * * Description: Cache policy: None (no caching), PerRun (cache for duration of agent run), PerAgent (cache across runs with timeout)`),
    CacheTimeoutSeconds: z.number().nullable().describe(`
        * * Field Name: CacheTimeoutSeconds
        * * Display Name: Cache Timeout Seconds
        * * SQL Data Type: int
        * * Description: Time-to-live in seconds for PerAgent cache policy. Ignored for other cache policies.`),
    DestinationType: z.union([z.literal('Context'), z.literal('Data'), z.literal('Payload')]).describe(`
        * * Field Name: DestinationType
        * * Display Name: Destination Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Data
    * * Value List Type: List
    * * Possible Values 
    *   * Context
    *   * Data
    *   * Payload
        * * Description: Destination for the preloaded data: Data (for Nunjucks templates in prompts), Context (for actions only), or Payload (for agent state)`),
    DestinationPath: z.string().nullable().describe(`
        * * Field Name: DestinationPath
        * * Display Name: Destination Path
        * * SQL Data Type: nvarchar(500)
        * * Description: Path within the destination where data should be injected. Supports nested paths using dot notation (e.g., "config.api.endpoints", "analysis.orders.recent"). If null, uses Name as root-level key.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
});

export type AIAgentDataSourceEntityType = z.infer<typeof AIAgentDataSourceSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Examples
 */
export const AIAgentExampleSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: The AI agent this example is associated with. Examples are always agent-specific.`),
    UserID: z.string().nullable().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: Optional user scope. When populated, this example is specific to this user.`),
    CompanyID: z.string().nullable().describe(`
        * * Field Name: CompanyID
        * * Display Name: Company ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Companies (vwCompanies.ID)
        * * Description: Optional company scope. When populated, this example is specific to this company.`),
    Type: z.union([z.literal('Constraint'), z.literal('Context'), z.literal('Example'), z.literal('Issue'), z.literal('Preference')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Example
    * * Value List Type: List
    * * Possible Values 
    *   * Constraint
    *   * Context
    *   * Example
    *   * Issue
    *   * Preference
        * * Description: Quick categorization of the example: Preference (demonstrates user preference), Constraint (shows constraint compliance), Context (provides contextual example), Example (typical successful interaction - most common), or Issue (demonstrates handling of known issue).`),
    ExampleInput: z.string().describe(`
        * * Field Name: ExampleInput
        * * Display Name: Example Input
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The input text or prompt that was provided in this example interaction.`),
    ExampleOutput: z.string().describe(`
        * * Field Name: ExampleOutput
        * * Display Name: Example Output
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The successful output or response that the agent provided for this example.`),
    IsAutoGenerated: z.boolean().describe(`
        * * Field Name: IsAutoGenerated
        * * Display Name: Is Auto Generated
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this example was automatically captured (1) or manually created (0).`),
    SourceConversationID: z.string().nullable().describe(`
        * * Field Name: SourceConversationID
        * * Display Name: Source Conversation ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
        * * Description: Optional reference to the conversation where this example originated.`),
    SourceConversationDetailID: z.string().nullable().describe(`
        * * Field Name: SourceConversationDetailID
        * * Display Name: Source Conversation Detail ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
        * * Description: Optional reference to the specific conversation message that represents this example.`),
    SourceAIAgentRunID: z.string().nullable().describe(`
        * * Field Name: SourceAIAgentRunID
        * * Display Name: Source AI Agent Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
        * * Description: Optional reference to the AI agent run that generated this example.`),
    SuccessScore: z.number().nullable().describe(`
        * * Field Name: SuccessScore
        * * Display Name: Success Score
        * * SQL Data Type: decimal(5, 2)
        * * Description: Optional success score (0-100) indicating the quality or effectiveness of this example based on user feedback or metrics.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Internal comments about this example, not included in agent context injection.`),
    Status: z.union([z.literal('Active'), z.literal('Pending'), z.literal('Revoked')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked
        * * Description: Status of the example: Pending (awaiting review), Active (in use), or Revoked (disabled).`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().nullable().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Company: z.string().nullable().describe(`
        * * Field Name: Company
        * * Display Name: Company
        * * SQL Data Type: nvarchar(50)`),
    SourceConversation: z.string().nullable().describe(`
        * * Field Name: SourceConversation
        * * Display Name: Source Conversation
        * * SQL Data Type: nvarchar(255)`),
});

export type AIAgentExampleEntityType = z.infer<typeof AIAgentExampleSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Permissions
 */
export const AIAgentPermissionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)`),
    RoleID: z.string().nullable().describe(`
        * * Field Name: RoleID
        * * Display Name: Role ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Roles (vwRoles.ID)
        * * Description: The role this permission is granted to. Either RoleID or UserID must be specified, but not both.`),
    UserID: z.string().nullable().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: The user this permission is granted to. Either RoleID or UserID must be specified, but not both.`),
    CanView: z.boolean().describe(`
        * * Field Name: CanView
        * * Display Name: Can View
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Grants permission to view the agent configuration and details.`),
    CanRun: z.boolean().describe(`
        * * Field Name: CanRun
        * * Display Name: Can Run
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Grants permission to execute/run the agent. Typically implies CanView as well.`),
    CanEdit: z.boolean().describe(`
        * * Field Name: CanEdit
        * * Display Name: Can Edit
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Grants permission to modify the agent configuration, prompts, and settings. Typically implies CanView and CanRun as well.`),
    CanDelete: z.boolean().describe(`
        * * Field Name: CanDelete
        * * Display Name: Can Delete
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Grants permission to delete the agent. Typically implies all other permissions as well.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional comments explaining why this permission was granted or any special notes.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    Role: z.string().nullable().describe(`
        * * Field Name: Role
        * * Display Name: Role
        * * SQL Data Type: nvarchar(50)`),
    User: z.string().nullable().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type AIAgentPermissionEntityType = z.infer<typeof AIAgentPermissionSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Prompts
 */
export const AIAgentPromptSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: References the agent this prompt is associated with.`),
    PromptID: z.string().describe(`
        * * Field Name: PromptID
        * * Display Name: Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: References the prompt to be used by the agent.`),
    Purpose: z.string().nullable().describe(`
        * * Field Name: Purpose
        * * Display Name: Purpose
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The functional purpose of this prompt within the agent, such as "Initialize", "ProcessData", or "Summarize".`),
    ExecutionOrder: z.number().describe(`
        * * Field Name: ExecutionOrder
        * * Display Name: Execution Order
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: The sequence order in which this prompt should be executed within the agent's workflow.`),
    ConfigurationID: z.string().nullable().describe(`
        * * Field Name: ConfigurationID
        * * Display Name: Configuration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
        * * Description: Optional reference to a specific configuration to use for this prompt. If NULL, uses the default configuration.`),
    Status: z.union([z.literal('Active'), z.literal('Deprecated'), z.literal('Inactive'), z.literal('Preview')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
        * * Description: The current status of this agent-prompt mapping. Values include Active, Inactive, Deprecated, and Preview.`),
    ContextBehavior: z.union([z.literal('Complete'), z.literal('Custom'), z.literal('InitialMessages'), z.literal('None'), z.literal('RecentMessages'), z.literal('Smart')]).describe(`
        * * Field Name: ContextBehavior
        * * Display Name: Context Behavior
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Complete
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Custom
    *   * InitialMessages
    *   * None
    *   * RecentMessages
    *   * Smart
        * * Description: Determines how conversation context is filtered for this prompt: Complete, Smart, None, RecentMessages, InitialMessages, or Custom.`),
    ContextMessageCount: z.number().nullable().describe(`
        * * Field Name: ContextMessageCount
        * * Display Name: Context Message Count
        * * SQL Data Type: int
        * * Description: The number of messages to include when ContextBehavior is set to RecentMessages or InitialMessages.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    Prompt: z.string().describe(`
        * * Field Name: Prompt
        * * Display Name: Prompt
        * * SQL Data Type: nvarchar(255)`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(100)`),
});

export type AIAgentPromptEntityType = z.infer<typeof AIAgentPromptSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Relationships
 */
export const AIAgentRelationshipSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Primary key for AI agent relationships`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: Foreign key to parent AIAgent that can invoke the sub-agent`),
    SubAgentID: z.string().describe(`
        * * Field Name: SubAgentID
        * * Display Name: Sub Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: Foreign key to sub-agent AIAgent that can be invoked`),
    Status: z.union([z.literal('Active'), z.literal('Pending'), z.literal('Revoked')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked
        * * Description: Status of the relationship: Pending (awaiting approval), Active (can invoke), or Revoked (no longer allowed)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    SubAgentOutputMapping: z.string().nullable().describe(`
        * * Field Name: SubAgentOutputMapping
        * * Display Name: Sub Agent Output Mapping
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration mapping sub-agent result payload paths to parent agent payload paths. Enables controlled merging of sub-agent results. Format: {"subAgentPath": "parentPath", "*": "captureAllPath"}. If null, sub-agent results are not automatically merged into parent payload.`),
    SubAgentInputMapping: z.string().nullable().describe(`
        * * Field Name: SubAgentInputMapping
        * * Display Name: Sub Agent Input Mapping
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON mapping of parent payload paths to sub-agent initial payload paths. Enables structural data transfer from parent to related sub-agent. Format: {"parentPath": "subAgentPath", "parent.nested": "subAgent.field"}. Example: {"searchQuery": "query", "maxResults": "limit"}. If null, sub-agent starts with empty payload (default behavior).`),
    SubAgentContextPaths: z.string().nullable().describe(`
        * * Field Name: SubAgentContextPaths
        * * Display Name: Sub Agent Context Paths
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of parent payload paths to send as LLM context to related sub-agent. Sub-agent receives this data in a formatted context message before its task message. Format: ["path1", "path2.nested", "path3.*", "*"]. Use "*" to send entire parent payload. Example: ["userPreferences", "priorFindings.summary", "sources[*]"]. If null, no parent context is sent (default behavior).`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    SubAgent: z.string().nullable().describe(`
        * * Field Name: SubAgent
        * * Display Name: Sub Agent
        * * SQL Data Type: nvarchar(255)`),
});

export type AIAgentRelationshipEntityType = z.infer<typeof AIAgentRelationshipSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Run Steps
 */
export const AIAgentRunStepSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Unique identifier for this execution step`),
    AgentRunID: z.string().describe(`
        * * Field Name: AgentRunID
        * * Display Name: Agent Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
        * * Description: Reference to the parent AIAgentRun that contains this step`),
    StepNumber: z.number().describe(`
        * * Field Name: StepNumber
        * * Display Name: Step Number
        * * SQL Data Type: int
        * * Description: Sequential number of this step within the agent run, starting from 1`),
    StepType: z.union([z.literal('Actions'), z.literal('Chat'), z.literal('Decision'), z.literal('ForEach'), z.literal('Prompt'), z.literal('Sub-Agent'), z.literal('Validation'), z.literal('While')]).describe(`
        * * Field Name: StepType
        * * Display Name: Step Type
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Prompt
    * * Value List Type: List
    * * Possible Values 
    *   * Actions
    *   * Chat
    *   * Decision
    *   * ForEach
    *   * Prompt
    *   * Sub-Agent
    *   * Validation
    *   * While
        * * Description: Type of execution step: Prompt, Actions, Sub-Agent, Decision, Chat, Validation`),
    StepName: z.string().describe(`
        * * Field Name: StepName
        * * Display Name: Step Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Human-readable name of what this step accomplishes`),
    TargetID: z.string().nullable().describe(`
        * * Field Name: TargetID
        * * Display Name: Target ID
        * * SQL Data Type: uniqueidentifier
        * * Description: ID of the specific target being executed (AIPrompt.ID, AIAction.ID, AIAgent.ID, etc.). NULL for steps that don't target a specific entity.`),
    Status: z.union([z.literal('Cancelled'), z.literal('Completed'), z.literal('Failed'), z.literal('Running')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Running
    * * Value List Type: List
    * * Possible Values 
    *   * Cancelled
    *   * Completed
    *   * Failed
    *   * Running
        * * Description: Current execution status of this step: Running, Completed, Failed, Cancelled`),
    StartedAt: z.date().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetimeoffset
        * * Default Value: sysdatetimeoffset()
        * * Description: Timestamp when this step began execution`),
    CompletedAt: z.date().nullable().describe(`
        * * Field Name: CompletedAt
        * * Display Name: Completed At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp when this step completed. NULL while still running.`),
    Success: z.boolean().nullable().describe(`
        * * Field Name: Success
        * * Display Name: Success
        * * SQL Data Type: bit
        * * Description: Whether this step completed successfully. NULL while running, TRUE/FALSE when completed.`),
    ErrorMessage: z.string().nullable().describe(`
        * * Field Name: ErrorMessage
        * * Display Name: Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Error message if this step failed. NULL for successful steps.`),
    InputData: z.string().nullable().describe(`
        * * Field Name: InputData
        * * Display Name: Input Data
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON serialization of input data passed to this step for execution`),
    OutputData: z.string().nullable().describe(`
        * * Field Name: OutputData
        * * Display Name: Output Data
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON serialization of the output data produced by this step`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    TargetLogID: z.string().nullable().describe(`
        * * Field Name: TargetLogID
        * * Display Name: Target Log ID
        * * SQL Data Type: uniqueidentifier
        * * Description: ID of the execution log/run record created for this step (ActionExecutionLog.ID for action steps, AIAgentRun.ID for subagent steps, AIPromptRun.ID for prompt steps)`),
    PayloadAtStart: z.string().nullable().describe(`
        * * Field Name: PayloadAtStart
        * * Display Name: Payload At Start
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON serialization of the Payload state at the start of this step`),
    PayloadAtEnd: z.string().nullable().describe(`
        * * Field Name: PayloadAtEnd
        * * Display Name: Payload At End
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON serialization of the Payload state at the end of this step`),
    FinalPayloadValidationResult: z.union([z.literal('Fail'), z.literal('Fail'), z.literal('Pass'), z.literal('Pass'), z.literal('Retry'), z.literal('Retry'), z.literal('Warn'), z.literal('Warn')]).nullable().describe(`
        * * Field Name: FinalPayloadValidationResult
        * * Display Name: Final Payload Validation Result
        * * SQL Data Type: nvarchar(25)
    * * Value List Type: List
    * * Possible Values 
    *   * Fail
    *   * Fail
    *   * Pass
    *   * Pass
    *   * Retry
    *   * Retry
    *   * Warn
    *   * Warn
        * * Description: Result of the final payload validation for this step. Pass indicates successful
validation, Retry means validation failed but will retry, Fail means validation failed
permanently, Warn means validation failed but execution continues.`),
    FinalPayloadValidationMessages: z.string().nullable().describe(`
        * * Field Name: FinalPayloadValidationMessages
        * * Display Name: Final Payload Validation Messages
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Validation error messages or warnings from final payload validation. Contains
detailed information about what validation rules failed.`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Run Steps (vwAIAgentRunSteps.ID)
        * * Description: Optional reference to parent step for tracking hierarchical relationships like code->test->fix->code cycles`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Human-readable notes and comments about this agent run step`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type AIAgentRunStepEntityType = z.infer<typeof AIAgentRunStepSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Runs
 */
export const AIAgentRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Unique identifier for this agent run`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: Reference to the AIAgent that is being executed in this run`),
    ParentRunID: z.string().nullable().describe(`
        * * Field Name: ParentRunID
        * * Display Name: Parent Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
        * * Description: Reference to the parent agent run if this is a sub-agent execution. NULL for root-level agent runs. Enables hierarchical execution tracking.`),
    Status: z.union([z.literal('Cancelled'), z.literal('Completed'), z.literal('Failed'), z.literal('Paused'), z.literal('Running')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Running
    * * Value List Type: List
    * * Possible Values 
    *   * Cancelled
    *   * Completed
    *   * Failed
    *   * Paused
    *   * Running
        * * Description: Current status of the agent run. Running -> Completed/Failed/Cancelled`),
    StartedAt: z.date().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetimeoffset
        * * Default Value: sysdatetimeoffset()
        * * Description: Timestamp when the agent run began execution`),
    CompletedAt: z.date().nullable().describe(`
        * * Field Name: CompletedAt
        * * Display Name: Completed At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp when the agent run completed (successfully or with failure). NULL while running.`),
    Success: z.boolean().nullable().describe(`
        * * Field Name: Success
        * * Display Name: Success
        * * SQL Data Type: bit
        * * Description: Indicates whether the agent run completed successfully. NULL while running, TRUE/FALSE when completed.`),
    ErrorMessage: z.string().nullable().describe(`
        * * Field Name: ErrorMessage
        * * Display Name: Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Error message if the agent run failed. NULL for successful runs.`),
    ConversationID: z.string().nullable().describe(`
        * * Field Name: ConversationID
        * * Display Name: Conversation ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
        * * Description: Identifier linking multiple agent runs that are part of the same conversation or user session`),
    UserID: z.string().nullable().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: User context identifier for authentication and permissions during the agent run`),
    Result: z.string().nullable().describe(`
        * * Field Name: Result
        * * Display Name: Result
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Final result or output from the agent execution, stored as JSON or text`),
    AgentState: z.string().nullable().describe(`
        * * Field Name: AgentState
        * * Display Name: Agent State
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON serialization of the complete agent state, including conversation context, variables, and execution state. Enables pause/resume functionality.`),
    TotalTokensUsed: z.number().nullable().describe(`
        * * Field Name: TotalTokensUsed
        * * Display Name: Total Tokens Used
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Total number of tokens consumed by all LLM calls during this agent run`),
    TotalCost: z.number().nullable().describe(`
        * * Field Name: TotalCost
        * * Display Name: Total Cost
        * * SQL Data Type: decimal(18, 6)
        * * Default Value: 0.000000
        * * Description: Total estimated cost for all AI model usage during this agent run`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    TotalPromptTokensUsed: z.number().nullable().describe(`
        * * Field Name: TotalPromptTokensUsed
        * * Display Name: Total Prompt Tokens Used
        * * SQL Data Type: int
        * * Description: Total number of prompt/input tokens used across all AIPromptRun executions during this agent run. This provides a breakdown of the TotalTokensUsed field to help analyze the ratio of input vs output tokens consumed by the agent.`),
    TotalCompletionTokensUsed: z.number().nullable().describe(`
        * * Field Name: TotalCompletionTokensUsed
        * * Display Name: Total Completion Tokens Used
        * * SQL Data Type: int
        * * Description: Total number of completion/output tokens generated across all AIPromptRun executions during this agent run. This provides a breakdown of the TotalTokensUsed field to help analyze the ratio of input vs output tokens consumed by the agent.`),
    TotalTokensUsedRollup: z.number().nullable().describe(`
        * * Field Name: TotalTokensUsedRollup
        * * Display Name: Total Tokens Used Rollup
        * * SQL Data Type: int
        * * Description: Total tokens used including this agent run and all sub-agent runs. For leaf agents (no sub-agents), this equals TotalTokensUsed. For parent agents, this includes the sum of all descendant agent tokens. Calculated as TotalPromptTokensUsedRollup + TotalCompletionTokensUsedRollup.`),
    TotalPromptTokensUsedRollup: z.number().nullable().describe(`
        * * Field Name: TotalPromptTokensUsedRollup
        * * Display Name: Total Prompt Tokens Used Rollup
        * * SQL Data Type: int
        * * Description: Total prompt/input tokens including this agent run and all sub-agent runs. For leaf agents (no sub-agents), this equals TotalPromptTokensUsed. For parent agents, this includes the sum of all descendant agent prompt tokens.`),
    TotalCompletionTokensUsedRollup: z.number().nullable().describe(`
        * * Field Name: TotalCompletionTokensUsedRollup
        * * Display Name: Total Completion Tokens Used Rollup
        * * SQL Data Type: int
        * * Description: Total completion/output tokens including this agent run and all sub-agent runs. For leaf agents (no sub-agents), this equals TotalCompletionTokensUsed. For parent agents, this includes the sum of all descendant agent completion tokens.`),
    TotalCostRollup: z.number().nullable().describe(`
        * * Field Name: TotalCostRollup
        * * Display Name: Total Cost Rollup
        * * SQL Data Type: decimal(19, 8)
        * * Description: Total cost including this agent run and all sub-agent runs. For leaf agents (no sub-agents), this equals TotalCost. For parent agents, this includes the sum of all descendant agent costs. Note: This assumes all costs are in the same currency for accurate rollup.`),
    ConversationDetailID: z.string().nullable().describe(`
        * * Field Name: ConversationDetailID
        * * Display Name: Conversation Detail ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
        * * Description: Optional tracking of a specific conversation detail (e.g. a specific message) that spawned this agent run`),
    ConversationDetailSequence: z.number().nullable().describe(`
        * * Field Name: ConversationDetailSequence
        * * Display Name: Conversation Detail Sequence
        * * SQL Data Type: int
        * * Description: If a conversation detail spawned multiple agent runs, tracks the order of their spawn/execution`),
    CancellationReason: z.union([z.literal('System'), z.literal('Timeout'), z.literal('User Request')]).nullable().describe(`
        * * Field Name: CancellationReason
        * * Display Name: Cancellation Reason
        * * SQL Data Type: nvarchar(30)
    * * Value List Type: List
    * * Possible Values 
    *   * System
    *   * Timeout
    *   * User Request
        * * Description: Reason for cancellation if the agent run was cancelled`),
    FinalStep: z.union([z.literal('Actions'), z.literal('Chat'), z.literal('Failed'), z.literal('ForEach'), z.literal('Retry'), z.literal('Sub-Agent'), z.literal('Success'), z.literal('While')]).nullable().describe(`
        * * Field Name: FinalStep
        * * Display Name: Final Step
        * * SQL Data Type: nvarchar(30)
    * * Value List Type: List
    * * Possible Values 
    *   * Actions
    *   * Chat
    *   * Failed
    *   * ForEach
    *   * Retry
    *   * Sub-Agent
    *   * Success
    *   * While
        * * Description: The final step type that concluded the agent run`),
    FinalPayload: z.string().nullable().describe(`
        * * Field Name: FinalPayload
        * * Display Name: Final Payload
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON serialization of the final Payload state at the end of the agent run`),
    Message: z.string().nullable().describe(`
        * * Field Name: Message
        * * Display Name: Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Final message from the agent to the end user at the end of a run`),
    LastRunID: z.string().nullable().describe(`
        * * Field Name: LastRunID
        * * Display Name: Last Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
        * * Description: Links to the previous run in a chain. Different from ParentRunID which is for sub-agent hierarchy.`),
    StartingPayload: z.string().nullable().describe(`
        * * Field Name: StartingPayload
        * * Display Name: Starting Payload
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The initial payload provided at the start of this run. Can be populated from the FinalPayload of the LastRun.`),
    TotalPromptIterations: z.number().describe(`
        * * Field Name: TotalPromptIterations
        * * Display Name: Total Prompt Iterations
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Total number of prompt iterations executed during this agent run. Incremented
each time the agent processes a prompt step.`),
    ConfigurationID: z.string().nullable().describe(`
        * * Field Name: ConfigurationID
        * * Display Name: Configuration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
        * * Description: The AI Configuration used for this agent execution. When set, this configuration was used for all prompts executed by this agent and its sub-agents.`),
    OverrideModelID: z.string().nullable().describe(`
        * * Field Name: OverrideModelID
        * * Display Name: Override Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
        * * Description: Runtime model override that was used for this execution. When set, this model took precedence over all other model selection methods.`),
    OverrideVendorID: z.string().nullable().describe(`
        * * Field Name: OverrideVendorID
        * * Display Name: Override Vendor ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
        * * Description: Runtime vendor override that was used for this execution. When set along with OverrideModelID, this vendor was used to provide the model.`),
    Data: z.string().nullable().describe(`
        * * Field Name: Data
        * * Display Name: Data
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON serialized data that was passed for template rendering and prompt execution. This data was passed to the agent's prompt as well as all sub-agents.`),
    Verbose: z.boolean().nullable().describe(`
        * * Field Name: Verbose
        * * Display Name: Verbose
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether verbose logging was enabled during this agent execution. When true, detailed decision-making and execution flow was logged.`),
    EffortLevel: z.number().nullable().describe(`
        * * Field Name: EffortLevel
        * * Display Name: Effort Level
        * * SQL Data Type: int
        * * Description: Effort level that was actually used during this agent run execution (1-100, where 1=minimal effort, 100=maximum effort). This is the resolved effort level after applying the precedence hierarchy: runtime override > agent default > prompt defaults.`),
    RunName: z.string().nullable().describe(`
        * * Field Name: RunName
        * * Display Name: Run Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Optional name for the agent run to help identify and tag runs for easier reference`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Human-readable notes and comments about this agent run`),
    ScheduledJobRunID: z.string().nullable().describe(`
        * * Field Name: ScheduledJobRunID
        * * Display Name: Scheduled Job Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Scheduled Job Runs (vwScheduledJobRuns.ID)
        * * Description: Links to the scheduled job run that triggered this agent execution. NULL for manually-triggered agent runs. Enables tracking which scheduled jobs spawned which agent executions.`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    Conversation: z.string().nullable().describe(`
        * * Field Name: Conversation
        * * Display Name: Conversation
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().nullable().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(100)`),
    OverrideModel: z.string().nullable().describe(`
        * * Field Name: OverrideModel
        * * Display Name: Override Model
        * * SQL Data Type: nvarchar(50)`),
    OverrideVendor: z.string().nullable().describe(`
        * * Field Name: OverrideVendor
        * * Display Name: Override Vendor
        * * SQL Data Type: nvarchar(50)`),
    RootParentRunID: z.string().nullable().describe(`
        * * Field Name: RootParentRunID
        * * Display Name: Root Parent Run ID
        * * SQL Data Type: uniqueidentifier`),
    RootLastRunID: z.string().nullable().describe(`
        * * Field Name: RootLastRunID
        * * Display Name: Root Last Run ID
        * * SQL Data Type: uniqueidentifier`),
});

export type AIAgentRunEntityType = z.infer<typeof AIAgentRunSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Step Paths
 */
export const AIAgentStepPathSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    OriginStepID: z.string().describe(`
        * * Field Name: OriginStepID
        * * Display Name: Origin Step ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Steps (vwAIAgentSteps.ID)`),
    DestinationStepID: z.string().describe(`
        * * Field Name: DestinationStepID
        * * Display Name: Destination Step ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Steps (vwAIAgentSteps.ID)`),
    Condition: z.string().nullable().describe(`
        * * Field Name: Condition
        * * Display Name: Condition
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Boolean expression to evaluate. If null, path is always taken. Evaluated against payload and step results.`),
    Priority: z.number().describe(`
        * * Field Name: Priority
        * * Display Name: Priority
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Path evaluation priority. Higher values are evaluated first. Use 0 or negative values for default/fallback paths that execute when no other conditions match.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(255)`),
    PathPoints: z.string().nullable().describe(`
        * * Field Name: PathPoints
        * * Display Name: Path Points
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    OriginStep: z.string().describe(`
        * * Field Name: OriginStep
        * * Display Name: Origin Step
        * * SQL Data Type: nvarchar(255)`),
    DestinationStep: z.string().describe(`
        * * Field Name: DestinationStep
        * * Display Name: Destination Step
        * * SQL Data Type: nvarchar(255)`),
});

export type AIAgentStepPathEntityType = z.infer<typeof AIAgentStepPathSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Steps
 */
export const AIAgentStepSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    AgentID: z.string().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    StepType: z.union([z.literal('Action'), z.literal('ForEach'), z.literal('Prompt'), z.literal('Sub-Agent'), z.literal('While')]).describe(`
        * * Field Name: StepType
        * * Display Name: Step Type
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Action
    *   * ForEach
    *   * Prompt
    *   * Sub-Agent
    *   * While
        * * Description: Type of step: Action (execute an action), Sub-Agent (delegate to another agent), or Prompt (run an AI prompt)`),
    StartingStep: z.boolean().describe(`
        * * Field Name: StartingStep
        * * Display Name: Starting Step
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If true, this step is executed when the agent starts`),
    TimeoutSeconds: z.number().nullable().describe(`
        * * Field Name: TimeoutSeconds
        * * Display Name: Timeout Seconds
        * * SQL Data Type: int
        * * Default Value: 600`),
    RetryCount: z.number().describe(`
        * * Field Name: RetryCount
        * * Display Name: Retry Count
        * * SQL Data Type: int
        * * Default Value: 0`),
    OnErrorBehavior: z.union([z.literal('continue'), z.literal('fail'), z.literal('retry')]).describe(`
        * * Field Name: OnErrorBehavior
        * * Display Name: On Error Behavior
        * * SQL Data Type: nvarchar(20)
        * * Default Value: fail
    * * Value List Type: List
    * * Possible Values 
    *   * continue
    *   * fail
    *   * retry`),
    ActionID: z.string().nullable().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)`),
    SubAgentID: z.string().nullable().describe(`
        * * Field Name: SubAgentID
        * * Display Name: Sub Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)`),
    PromptID: z.string().nullable().describe(`
        * * Field Name: PromptID
        * * Display Name: Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)`),
    ActionOutputMapping: z.string().nullable().describe(`
        * * Field Name: ActionOutputMapping
        * * Display Name: Action Output Mapping
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration for mapping action output parameters to payload paths. Example: {"outputParam1": "payload.customer.status", "*": "payload.lastResult"}`),
    PositionX: z.number().describe(`
        * * Field Name: PositionX
        * * Display Name: Position X
        * * SQL Data Type: int
        * * Default Value: 0`),
    PositionY: z.number().describe(`
        * * Field Name: PositionY
        * * Display Name: Position Y
        * * SQL Data Type: int
        * * Default Value: 0`),
    Width: z.number().describe(`
        * * Field Name: Width
        * * Display Name: Width
        * * SQL Data Type: int
        * * Default Value: 200`),
    Height: z.number().describe(`
        * * Field Name: Height
        * * Display Name: Height
        * * SQL Data Type: int
        * * Default Value: 80`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
        * * Description: Controls whether this step is executed. Active=normal execution, Pending=skip but may activate later, Disabled=never execute`),
    ActionInputMapping: z.string().nullable().describe(`
        * * Field Name: ActionInputMapping
        * * Display Name: Action Input Mapping
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration for mapping static values or payload paths to action input parameters. Example: {"param1": "staticValue", "param2": "payload.dynamicValue"}`),
    LoopBodyType: z.union([z.literal('Action'), z.literal('Prompt'), z.literal('Sub-Agent')]).nullable().describe(`
        * * Field Name: LoopBodyType
        * * Display Name: Loop Body Type
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Action
    *   * Prompt
    *   * Sub-Agent
        * * Description: Specifies what type of operation executes in the loop body. Values: Action, Sub-Agent, Prompt. Only used when StepType is ForEach or While.`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration object for step-specific settings. For loop steps: { type: "ForEach"|"While", collectionPath?, itemVariable?, indexVariable?, maxIterations?, continueOnError?, condition? }. For other step types: reserved for future use.`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    Action: z.string().nullable().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
    SubAgent: z.string().nullable().describe(`
        * * Field Name: SubAgent
        * * Display Name: Sub Agent
        * * SQL Data Type: nvarchar(255)`),
    Prompt: z.string().nullable().describe(`
        * * Field Name: Prompt
        * * Display Name: Prompt
        * * SQL Data Type: nvarchar(255)`),
});

export type AIAgentStepEntityType = z.infer<typeof AIAgentStepSchema>;

/**
 * zod schema definition for the entity MJ: AI Agent Types
 */
export const AIAgentTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Unique identifier for the agent type`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)
        * * Description: Unique name of the agent type (e.g., "Base", "CustomerSupport", "DataAnalysis"). Used for programmatic identification and factory instantiation.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the agent type, its purpose, and typical use cases`),
    SystemPromptID: z.string().nullable().describe(`
        * * Field Name: SystemPromptID
        * * Display Name: System Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: Reference to the AI Prompt that contains the system-level instructions for all agents of this type. This prompt will be blended with individual agent prompts.`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates whether this agent type is available for use. Inactive types cannot be assigned to new agents.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    AgentPromptPlaceholder: z.string().nullable().describe(`
        * * Field Name: AgentPromptPlaceholder
        * * Display Name: Agent Prompt Placeholder
        * * SQL Data Type: nvarchar(255)
        * * Description: The placeholder name used in the system prompt template where the agent prompt result should be injected. For example, if the system prompt contains "{{ agentPrompt }}", this field should contain "agentPrompt". This enables proper hierarchical prompt execution where the agent type's system prompt acts as the parent and the agent's specific prompt acts as the child.`),
    DriverClass: z.string().nullable().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(255)
        * * Description: The class name used by the MemberJunction class factory to instantiate the specific agent type implementation. For example, "LoopAgentType" for a looping agent pattern. If not specified, defaults to using the agent type Name for the DriverClass lookup key.`),
    UIFormSectionKey: z.string().nullable().describe(`
        * * Field Name: UIFormSectionKey
        * * Display Name: UI Form Section Key
        * * SQL Data Type: nvarchar(500)
        * * Description: Optional Angular component key name for a subclass of BaseFormSectionComponent that provides a custom form section for this agent type. When specified, this component will be dynamically loaded and displayed as the first expandable section in the AI Agent form. This allows agent types to have specialized UI elements. The class must be registered with the MemberJunction class factory via @RegisterClass`),
    UIFormKey: z.string().nullable().describe(`
        * * Field Name: UIFormKey
        * * Display Name: UI Form Key
        * * SQL Data Type: nvarchar(500)
        * * Description: Optional Angular component key name for a subclass of BaseFormComponent that will completely overrides the default AI Agent form for this agent type. When specified, this component will be used instead of the standard AI Agent form, allowing for completely custom form implementations. The class must be registered with the MemberJunction class factory via @RegisterClass. If both UIFormClass and UIFormSectionClass are specified, UIFormClass takes precedence.`),
    UIFormSectionExpandedByDefault: z.boolean().describe(`
        * * Field Name: UIFormSectionExpandedByDefault
        * * Display Name: UI Form Section Expanded By Default
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Determines whether the custom form section (specified by UIFormSectionClass) should be expanded by default when the AI Agent form loads. True means the section starts expanded, False means it starts collapsed. Only applies when UIFormSectionClass is specified. Defaults to 1 (expanded).`),
    SystemPrompt: z.string().nullable().describe(`
        * * Field Name: SystemPrompt
        * * Display Name: System Prompt
        * * SQL Data Type: nvarchar(255)`),
});

export type AIAgentTypeEntityType = z.infer<typeof AIAgentTypeSchema>;

/**
 * zod schema definition for the entity MJ: AI Configuration Params
 */
export const AIConfigurationParamSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ConfigurationID: z.string().describe(`
        * * Field Name: ConfigurationID
        * * Display Name: Configuration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)
        * * Description: The name of the configuration parameter.`),
    Type: z.union([z.literal('boolean'), z.literal('date'), z.literal('number'), z.literal('object'), z.literal('string')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: string
    * * Value List Type: List
    * * Possible Values 
    *   * boolean
    *   * date
    *   * number
    *   * object
    *   * string
        * * Description: The data type of the parameter (string, number, boolean, date, object).`),
    Value: z.string().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The value of the parameter, stored as a string but interpreted according to the Type.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the parameter and its usage.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Configuration: z.string().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(100)`),
});

export type AIConfigurationParamEntityType = z.infer<typeof AIConfigurationParamSchema>;

/**
 * zod schema definition for the entity MJ: AI Configurations
 */
export const AIConfigurationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)
        * * Description: The name of the configuration.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the configuration.`),
    IsDefault: z.boolean().describe(`
        * * Field Name: IsDefault
        * * Display Name: Is Default
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this is the default configuration to use when none is specified.`),
    Status: z.union([z.literal('Active'), z.literal('Deprecated'), z.literal('Inactive'), z.literal('Preview')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
        * * Description: The current status of the configuration. Values include Active, Inactive, Deprecated, and Preview.`),
    DefaultPromptForContextCompressionID: z.string().nullable().describe(`
        * * Field Name: DefaultPromptForContextCompressionID
        * * Display Name: Default Prompt For Context Compression ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: Default prompt to use for context compression when not specified at the agent level.`),
    DefaultPromptForContextSummarizationID: z.string().nullable().describe(`
        * * Field Name: DefaultPromptForContextSummarizationID
        * * Display Name: Default Prompt For Context Summarization ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: Default prompt to use for context summarization when not specified at the agent level.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    DefaultPromptForContextCompression: z.string().nullable().describe(`
        * * Field Name: DefaultPromptForContextCompression
        * * Display Name: Default Prompt For Context Compression
        * * SQL Data Type: nvarchar(255)`),
    DefaultPromptForContextSummarization: z.string().nullable().describe(`
        * * Field Name: DefaultPromptForContextSummarization
        * * Display Name: Default Prompt For Context Summarization
        * * SQL Data Type: nvarchar(255)`),
});

export type AIConfigurationEntityType = z.infer<typeof AIConfigurationSchema>;

/**
 * zod schema definition for the entity MJ: AI Model Costs
 */
export const AIModelCostSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ModelID: z.string().describe(`
        * * Field Name: ModelID
        * * Display Name: Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)`),
    VendorID: z.string().describe(`
        * * Field Name: VendorID
        * * Display Name: Vendor ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)`),
    StartedAt: z.date().nullable().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetimeoffset
        * * Default Value: sysdatetimeoffset()
        * * Description: Date and time with timezone when this pricing became effective. NULL disables temporal tracking. Defaults to current UTC time when record is created`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetimeoffset
        * * Description: Date and time with timezone when this pricing expired or will expire. NULL indicates currently active pricing`),
    Status: z.union([z.literal('Active'), z.literal('Expired'), z.literal('Invalid'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Expired
    *   * Invalid
    *   * Pending
        * * Description: Current status of this pricing record. Active=currently in use, Pending=scheduled for future, Expired=no longer valid, Invalid=data error`),
    Currency: z.string().describe(`
        * * Field Name: Currency
        * * Display Name: Currency
        * * SQL Data Type: nchar(3)
        * * Description: ISO 4217 three-letter currency code (e.g., USD, EUR, GBP) in uppercase`),
    PriceTypeID: z.string().describe(`
        * * Field Name: PriceTypeID
        * * Display Name: Price Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Model Price Types (vwAIModelPriceTypes.ID)`),
    InputPricePerUnit: z.number().describe(`
        * * Field Name: InputPricePerUnit
        * * Display Name: Input Price Per Unit
        * * SQL Data Type: decimal(18, 8)
        * * Description: Price per unit for input tokens/requests. Must be non-negative. Precision allows for micro-pricing scenarios`),
    OutputPricePerUnit: z.number().describe(`
        * * Field Name: OutputPricePerUnit
        * * Display Name: Output Price Per Unit
        * * SQL Data Type: decimal(18, 8)
        * * Description: Price per unit for output tokens/responses. Must be non-negative. Often higher than input pricing`),
    UnitTypeID: z.string().describe(`
        * * Field Name: UnitTypeID
        * * Display Name: Unit Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Model Price Unit Types (vwAIModelPriceUnitTypes.ID)`),
    ProcessingType: z.union([z.literal('Batch'), z.literal('Realtime')]).describe(`
        * * Field Name: ProcessingType
        * * Display Name: Processing Type
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Batch
    *   * Realtime
        * * Description: Processing method that affects pricing. Realtime=immediate response, Batch=delayed processing often with discounts`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional notes about pricing context, source, special conditions, or vendor-specific details`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Model: z.string().describe(`
        * * Field Name: Model
        * * Display Name: Model
        * * SQL Data Type: nvarchar(50)`),
    Vendor: z.string().describe(`
        * * Field Name: Vendor
        * * Display Name: Vendor
        * * SQL Data Type: nvarchar(50)`),
    PriceType: z.string().describe(`
        * * Field Name: PriceType
        * * Display Name: Price Type
        * * SQL Data Type: nvarchar(100)`),
    UnitType: z.string().describe(`
        * * Field Name: UnitType
        * * Display Name: Unit Type
        * * SQL Data Type: nvarchar(100)`),
});

export type AIModelCostEntityType = z.infer<typeof AIModelCostSchema>;

/**
 * zod schema definition for the entity MJ: AI Model Price Types
 */
export const AIModelPriceTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)
        * * Description: Short, descriptive name for the price type (e.g., "Tokens", "Minutes", "Characters")`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of what this price type represents and how it is measured`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type AIModelPriceTypeEntityType = z.infer<typeof AIModelPriceTypeSchema>;

/**
 * zod schema definition for the entity MJ: AI Model Price Unit Types
 */
export const AIModelPriceUnitTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)
        * * Description: Display name for the pricing unit (e.g., "Per 1M Tokens", "Per 1K Tokens", "Per Minute")`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed explanation of the unit scale and any special considerations for this pricing unit`),
    DriverClass: z.string().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(255)
        * * Description: Fully qualified class name that handles cost calculations and unit normalization for this pricing unit (e.g., "TokenPer1M", "TokenPer1K")`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type AIModelPriceUnitTypeEntityType = z.infer<typeof AIModelPriceUnitTypeSchema>;

/**
 * zod schema definition for the entity MJ: AI Model Vendors
 */
export const AIModelVendorSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ModelID: z.string().describe(`
        * * Field Name: ModelID
        * * Display Name: Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)`),
    VendorID: z.string().describe(`
        * * Field Name: VendorID
        * * Display Name: Vendor ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)`),
    Priority: z.number().describe(`
        * * Field Name: Priority
        * * Display Name: Priority
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Determines the priority rank of this vendor for the model. Higher values indicate higher priority.`),
    Status: z.union([z.literal('Active'), z.literal('Deprecated'), z.literal('Inactive'), z.literal('Preview')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
        * * Description: The current status of this model-vendor combination. Values include Active, Inactive, Deprecated, and Preview.`),
    DriverClass: z.string().nullable().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(100)
        * * Description: The name of the driver class implementing this model-vendor combination.`),
    DriverImportPath: z.string().nullable().describe(`
        * * Field Name: DriverImportPath
        * * Display Name: Driver Import Path
        * * SQL Data Type: nvarchar(255)
        * * Description: The import path for the driver class.`),
    APIName: z.string().nullable().describe(`
        * * Field Name: APIName
        * * Display Name: API Name
        * * SQL Data Type: nvarchar(100)
        * * Description: The name of the model to use with API calls, which might differ from the model name. If not provided, the model name will be used.`),
    MaxInputTokens: z.number().nullable().describe(`
        * * Field Name: MaxInputTokens
        * * Display Name: Max Input Tokens
        * * SQL Data Type: int
        * * Description: The maximum number of input tokens supported by this model-vendor implementation.`),
    MaxOutputTokens: z.number().nullable().describe(`
        * * Field Name: MaxOutputTokens
        * * Display Name: Max Output Tokens
        * * SQL Data Type: int
        * * Description: The maximum number of output tokens supported by this model-vendor implementation.`),
    SupportedResponseFormats: z.string().describe(`
        * * Field Name: SupportedResponseFormats
        * * Display Name: Supported Response Formats
        * * SQL Data Type: nvarchar(100)
        * * Default Value: Any
        * * Description: A comma-delimited string indicating the supported response formats for this model-vendor implementation. Options include Any, Text, Markdown, JSON, and ModelSpecific.`),
    SupportsEffortLevel: z.boolean().describe(`
        * * Field Name: SupportsEffortLevel
        * * Display Name: Supports Effort Level
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Specifies if this model-vendor implementation supports the concept of an effort level.`),
    SupportsStreaming: z.boolean().describe(`
        * * Field Name: SupportsStreaming
        * * Display Name: Supports Streaming
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Specifies if this model-vendor implementation supports streaming responses.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    TypeID: z.string().describe(`
        * * Field Name: TypeID
        * * Display Name: Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Vendor Type Definitions (vwAIVendorTypeDefinitions.ID)
        * * Description: References the type/role of the vendor for this model (e.g., model developer, inference provider)`),
    Model: z.string().describe(`
        * * Field Name: Model
        * * Display Name: Model
        * * SQL Data Type: nvarchar(50)`),
    Vendor: z.string().describe(`
        * * Field Name: Vendor
        * * Display Name: Vendor
        * * SQL Data Type: nvarchar(50)`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(50)`),
});

export type AIModelVendorEntityType = z.infer<typeof AIModelVendorSchema>;

/**
 * zod schema definition for the entity MJ: AI Prompt Models
 */
export const AIPromptModelSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    PromptID: z.string().describe(`
        * * Field Name: PromptID
        * * Display Name: Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: References the AI prompt this model association applies to.`),
    ModelID: z.string().describe(`
        * * Field Name: ModelID
        * * Display Name: Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
        * * Description: References the AI model to use for this prompt.`),
    VendorID: z.string().nullable().describe(`
        * * Field Name: VendorID
        * * Display Name: Vendor ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
        * * Description: Optional reference to a specific vendor for the model. If NULL, uses the highest priority vendor for the model.`),
    ConfigurationID: z.string().nullable().describe(`
        * * Field Name: ConfigurationID
        * * Display Name: Configuration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
        * * Description: Optional reference to a specific configuration. If NULL, this model is available in all configurations.`),
    Priority: z.number().describe(`
        * * Field Name: Priority
        * * Display Name: Priority
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Priority of this model for the prompt. Higher values indicate higher priority.`),
    ExecutionGroup: z.number().describe(`
        * * Field Name: ExecutionGroup
        * * Display Name: Execution Group
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Execution group for parallel processing. Models with the same group are executed in parallel.`),
    ModelParameters: z.string().nullable().describe(`
        * * Field Name: ModelParameters
        * * Display Name: Model Parameters
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON-formatted parameters specific to this model (temperature, max tokens, etc.).`),
    Status: z.union([z.literal('Active'), z.literal('Deprecated'), z.literal('Inactive'), z.literal('Preview')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
        * * Description: The current status of this model configuration. Values include Active, Inactive, Deprecated, and Preview.`),
    ParallelizationMode: z.union([z.literal('ConfigParam'), z.literal('None'), z.literal('StaticCount')]).describe(`
        * * Field Name: ParallelizationMode
        * * Display Name: Parallelization Mode
        * * SQL Data Type: nvarchar(20)
        * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * ConfigParam
    *   * None
    *   * StaticCount
        * * Description: Controls how this model participates in parallelization: None, StaticCount, or ConfigParam.`),
    ParallelCount: z.number().describe(`
        * * Field Name: ParallelCount
        * * Display Name: Parallel Count
        * * SQL Data Type: int
        * * Default Value: 1
        * * Description: Number of parallel executions to perform with this model when ParallelizationMode is StaticCount.`),
    ParallelConfigParam: z.string().nullable().describe(`
        * * Field Name: ParallelConfigParam
        * * Display Name: Parallel Config Param
        * * SQL Data Type: nvarchar(100)
        * * Description: Name of a configuration parameter that contains the parallel count when ParallelizationMode is ConfigParam.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Prompt: z.string().describe(`
        * * Field Name: Prompt
        * * Display Name: Prompt
        * * SQL Data Type: nvarchar(255)`),
    Model: z.string().describe(`
        * * Field Name: Model
        * * Display Name: Model
        * * SQL Data Type: nvarchar(50)`),
    Vendor: z.string().nullable().describe(`
        * * Field Name: Vendor
        * * Display Name: Vendor
        * * SQL Data Type: nvarchar(50)`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(100)`),
});

export type AIPromptModelEntityType = z.infer<typeof AIPromptModelSchema>;

/**
 * zod schema definition for the entity MJ: AI Prompt Runs
 */
export const AIPromptRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    PromptID: z.string().describe(`
        * * Field Name: PromptID
        * * Display Name: Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: The prompt that was executed.`),
    ModelID: z.string().describe(`
        * * Field Name: ModelID
        * * Display Name: Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
        * * Description: The AI model used for execution.`),
    VendorID: z.string().describe(`
        * * Field Name: VendorID
        * * Display Name: Vendor ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
        * * Description: The vendor providing the model/inference.`),
    AgentID: z.string().nullable().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
        * * Description: If this prompt was run as part of an agent, references the agent.`),
    ConfigurationID: z.string().nullable().describe(`
        * * Field Name: ConfigurationID
        * * Display Name: Configuration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
        * * Description: Optional configuration used for this execution.`),
    RunAt: z.date().describe(`
        * * Field Name: RunAt
        * * Display Name: Run At
        * * SQL Data Type: datetimeoffset
        * * Default Value: sysdatetimeoffset()
        * * Description: When the prompt run started, with timezone offset information.`),
    CompletedAt: z.date().nullable().describe(`
        * * Field Name: CompletedAt
        * * Display Name: Completed At
        * * SQL Data Type: datetimeoffset
        * * Description: When the prompt run completed, with timezone offset information.`),
    ExecutionTimeMS: z.number().nullable().describe(`
        * * Field Name: ExecutionTimeMS
        * * Display Name: Execution Time MS
        * * SQL Data Type: int
        * * Description: Total execution time in milliseconds.`),
    Messages: z.string().nullable().describe(`
        * * Field Name: Messages
        * * Display Name: Messages
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The input messages sent to the model, typically in JSON format.`),
    Result: z.string().nullable().describe(`
        * * Field Name: Result
        * * Display Name: Result
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The output result from the model.`),
    TokensUsed: z.number().nullable().describe(`
        * * Field Name: TokensUsed
        * * Display Name: Tokens Used
        * * SQL Data Type: int
        * * Description: Total number of tokens used (prompt + completion).`),
    TokensPrompt: z.number().nullable().describe(`
        * * Field Name: TokensPrompt
        * * Display Name: Tokens Prompt
        * * SQL Data Type: int
        * * Description: Number of tokens in the prompt.`),
    TokensCompletion: z.number().nullable().describe(`
        * * Field Name: TokensCompletion
        * * Display Name: Tokens Completion
        * * SQL Data Type: int
        * * Description: Number of tokens in the completion/result.`),
    TotalCost: z.number().nullable().describe(`
        * * Field Name: TotalCost
        * * Display Name: Total Cost
        * * SQL Data Type: decimal(18, 6)
        * * Description: Total cost of this prompt run including its own cost plus all descendant costs. Calculated as Cost + DescendantCost. This value is stored (not computed) for query performance. Currency is specified in CostCurrency field.`),
    Success: z.boolean().describe(`
        * * Field Name: Success
        * * Display Name: Success
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether the execution was successful.`),
    ErrorMessage: z.string().nullable().describe(`
        * * Field Name: ErrorMessage
        * * Display Name: Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Error message if the execution failed.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Prompt Runs (vwAIPromptRuns.ID)
        * * Description: References the parent AIPromptRun.ID for hierarchical execution tracking. NULL for top-level runs, populated for parallel children and result selector runs.`),
    RunType: z.union([z.literal('ParallelChild'), z.literal('ParallelParent'), z.literal('ResultSelector'), z.literal('Single')]).describe(`
        * * Field Name: RunType
        * * Display Name: Run Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Single
    * * Value List Type: List
    * * Possible Values 
    *   * ParallelChild
    *   * ParallelParent
    *   * ResultSelector
    *   * Single
        * * Description: Type of prompt run execution: Single (standard single prompt), ParallelParent (coordinator for parallel execution), ParallelChild (individual parallel execution), ResultSelector (result selection prompt that chooses best result)`),
    ExecutionOrder: z.number().nullable().describe(`
        * * Field Name: ExecutionOrder
        * * Display Name: Execution Order
        * * SQL Data Type: int
        * * Description: Execution order for parallel child runs and result selector runs. Used to track the sequence of execution within a parallel run group. NULL for single runs and parallel parent runs.`),
    AgentRunID: z.string().nullable().describe(`
        * * Field Name: AgentRunID
        * * Display Name: Agent Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
        * * Description: Optional reference to the AIAgentRun that initiated this prompt execution. Links prompt runs to their parent agent runs for comprehensive execution tracking.`),
    Cost: z.number().nullable().describe(`
        * * Field Name: Cost
        * * Display Name: Cost
        * * SQL Data Type: decimal(19, 8)
        * * Description: The cost of this specific prompt execution as reported by the AI provider. This does not include costs from child executions. The currency is specified in CostCurrency field.`),
    CostCurrency: z.string().nullable().describe(`
        * * Field Name: CostCurrency
        * * Display Name: Cost Currency
        * * SQL Data Type: nvarchar(10)
        * * Description: ISO 4217 currency code for the Cost field (e.g., USD, EUR, GBP). Different AI providers may use different currencies.`),
    TokensUsedRollup: z.number().nullable().describe(`
        * * Field Name: TokensUsedRollup
        * * Display Name: Tokens Used Rollup
        * * SQL Data Type: int
        * * Description: Total tokens used including this execution and all child/grandchild executions. This provides a complete view of token usage for hierarchical prompt trees. Calculated as TokensPromptRollup + TokensCompletionRollup.`),
    TokensPromptRollup: z.number().nullable().describe(`
        * * Field Name: TokensPromptRollup
        * * Display Name: Tokens Prompt Rollup
        * * SQL Data Type: int
        * * Description: Total prompt/input tokens including this execution and all child/grandchild executions. For leaf nodes (no children), this equals TokensPrompt. For parent nodes, this includes the sum of all descendant prompt tokens.`),
    TokensCompletionRollup: z.number().nullable().describe(`
        * * Field Name: TokensCompletionRollup
        * * Display Name: Tokens Completion Rollup
        * * SQL Data Type: int
        * * Description: Total completion/output tokens including this execution and all child/grandchild executions. For leaf nodes (no children), this equals TokensCompletion. For parent nodes, this includes the sum of all descendant completion tokens.`),
    Temperature: z.number().nullable().describe(`
        * * Field Name: Temperature
        * * Display Name: Temperature
        * * SQL Data Type: decimal(3, 2)
        * * Description: The temperature parameter used for this prompt run, controlling randomness in the output (0.0 = deterministic, 2.0 = very random)`),
    TopP: z.number().nullable().describe(`
        * * Field Name: TopP
        * * Display Name: Top P
        * * SQL Data Type: decimal(3, 2)
        * * Description: Top-p (nucleus) sampling parameter used for this run. Considers tokens with cumulative probability up to this value (0-1)`),
    TopK: z.number().nullable().describe(`
        * * Field Name: TopK
        * * Display Name: Top K
        * * SQL Data Type: int
        * * Description: Top-k sampling parameter used for this run. Limits sampling to the top K most likely tokens`),
    MinP: z.number().nullable().describe(`
        * * Field Name: MinP
        * * Display Name: Min P
        * * SQL Data Type: decimal(3, 2)
        * * Description: Minimum probability threshold used for token sampling (0-1). Tokens below this probability are filtered out`),
    FrequencyPenalty: z.number().nullable().describe(`
        * * Field Name: FrequencyPenalty
        * * Display Name: Frequency Penalty
        * * SQL Data Type: decimal(3, 2)
        * * Description: Frequency penalty parameter used (-2.0 to 2.0). Positive values reduce repetition of tokens based on their frequency in the output`),
    PresencePenalty: z.number().nullable().describe(`
        * * Field Name: PresencePenalty
        * * Display Name: Presence Penalty
        * * SQL Data Type: decimal(3, 2)
        * * Description: Presence penalty parameter used (-2.0 to 2.0). Positive values encourage the model to talk about new topics`),
    Seed: z.number().nullable().describe(`
        * * Field Name: Seed
        * * Display Name: Seed
        * * SQL Data Type: int
        * * Description: Random seed used for reproducible outputs. When set, the same seed with identical inputs should produce the same output`),
    StopSequences: z.string().nullable().describe(`
        * * Field Name: StopSequences
        * * Display Name: Stop Sequences
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of stop sequences used. The model stops generating when any of these sequences are encountered`),
    ResponseFormat: z.string().nullable().describe(`
        * * Field Name: ResponseFormat
        * * Display Name: Response Format
        * * SQL Data Type: nvarchar(50)
        * * Description: The response format requested for this run (e.g., 'JSON', 'Text', 'Markdown')`),
    LogProbs: z.boolean().nullable().describe(`
        * * Field Name: LogProbs
        * * Display Name: Log Probs
        * * SQL Data Type: bit
        * * Description: Whether log probabilities were requested for this run`),
    TopLogProbs: z.number().nullable().describe(`
        * * Field Name: TopLogProbs
        * * Display Name: Top Log Probs
        * * SQL Data Type: int
        * * Description: Number of top log probabilities requested per token (if LogProbs is true)`),
    DescendantCost: z.number().nullable().describe(`
        * * Field Name: DescendantCost
        * * Display Name: Descendant Cost
        * * SQL Data Type: decimal(18, 6)
        * * Description: The total cost of all descendant (child and grandchild) prompt runs, excluding this run's own cost. For leaf nodes (no children), this is 0. Updated when child costs change.`),
    ValidationAttemptCount: z.number().nullable().describe(`
        * * Field Name: ValidationAttemptCount
        * * Display Name: Validation Attempt Count
        * * SQL Data Type: int
        * * Description: Total number of validation attempts made (including the initial attempt)`),
    SuccessfulValidationCount: z.number().nullable().describe(`
        * * Field Name: SuccessfulValidationCount
        * * Display Name: Successful Validation Count
        * * SQL Data Type: int
        * * Description: Number of validation attempts that passed validation`),
    FinalValidationPassed: z.boolean().nullable().describe(`
        * * Field Name: FinalValidationPassed
        * * Display Name: Final Validation Passed
        * * SQL Data Type: bit
        * * Description: Whether validation ultimately passed (1) or failed (0)`),
    ValidationBehavior: z.string().nullable().describe(`
        * * Field Name: ValidationBehavior
        * * Display Name: Validation Behavior
        * * SQL Data Type: nvarchar(50)
        * * Description: Validation behavior used: Strict, Warn, or None`),
    RetryStrategy: z.string().nullable().describe(`
        * * Field Name: RetryStrategy
        * * Display Name: Retry Strategy
        * * SQL Data Type: nvarchar(50)
        * * Description: Retry strategy used: Fixed, Linear, or Exponential`),
    MaxRetriesConfigured: z.number().nullable().describe(`
        * * Field Name: MaxRetriesConfigured
        * * Display Name: Max Retries Configured
        * * SQL Data Type: int
        * * Description: Maximum number of retries configured on the prompt`),
    FinalValidationError: z.string().nullable().describe(`
        * * Field Name: FinalValidationError
        * * Display Name: Final Validation Error
        * * SQL Data Type: nvarchar(500)
        * * Description: The final validation error message if validation failed`),
    ValidationErrorCount: z.number().nullable().describe(`
        * * Field Name: ValidationErrorCount
        * * Display Name: Validation Error Count
        * * SQL Data Type: int
        * * Description: Number of validation errors on the final attempt`),
    CommonValidationError: z.string().nullable().describe(`
        * * Field Name: CommonValidationError
        * * Display Name: Common Validation Error
        * * SQL Data Type: nvarchar(255)
        * * Description: Most frequent validation error across all attempts`),
    FirstAttemptAt: z.date().nullable().describe(`
        * * Field Name: FirstAttemptAt
        * * Display Name: First Attempt At
        * * SQL Data Type: datetime
        * * Description: Timestamp of the first validation attempt`),
    LastAttemptAt: z.date().nullable().describe(`
        * * Field Name: LastAttemptAt
        * * Display Name: Last Attempt At
        * * SQL Data Type: datetime
        * * Description: Timestamp of the last validation attempt`),
    TotalRetryDurationMS: z.number().nullable().describe(`
        * * Field Name: TotalRetryDurationMS
        * * Display Name: Total Retry Duration MS
        * * SQL Data Type: int
        * * Description: Total time spent on retries in milliseconds (excluding first attempt)`),
    ValidationAttempts: z.string().nullable().describe(`
        * * Field Name: ValidationAttempts
        * * Display Name: Validation Attempts
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array containing detailed information about each validation attempt`),
    ValidationSummary: z.string().nullable().describe(`
        * * Field Name: ValidationSummary
        * * Display Name: Validation Summary
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON object containing summary information about the validation process`),
    FailoverAttempts: z.number().nullable().describe(`
        * * Field Name: FailoverAttempts
        * * Display Name: Failover Attempts
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Number of failover attempts made during this prompt run`),
    FailoverErrors: z.string().nullable().describe(`
        * * Field Name: FailoverErrors
        * * Display Name: Failover Errors
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of error details from each failover attempt`),
    FailoverDurations: z.string().nullable().describe(`
        * * Field Name: FailoverDurations
        * * Display Name: Failover Durations
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of duration in milliseconds for each failover attempt`),
    OriginalModelID: z.string().nullable().describe(`
        * * Field Name: OriginalModelID
        * * Display Name: Original Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
        * * Description: The AI Model ID that was originally attempted before any failovers`),
    OriginalRequestStartTime: z.date().nullable().describe(`
        * * Field Name: OriginalRequestStartTime
        * * Display Name: Original Request Start Time
        * * SQL Data Type: datetime
        * * Description: Timestamp when the original request started, before any failovers`),
    TotalFailoverDuration: z.number().nullable().describe(`
        * * Field Name: TotalFailoverDuration
        * * Display Name: Total Failover Duration
        * * SQL Data Type: int
        * * Description: Total time spent in failover attempts in milliseconds`),
    RerunFromPromptRunID: z.string().nullable().describe(`
        * * Field Name: RerunFromPromptRunID
        * * Display Name: Rerun From Prompt Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Prompt Runs (vwAIPromptRuns.ID)
        * * Description: If this run was initiated as a re-run of another prompt run, this field links back to the original run ID`),
    ModelSelection: z.string().nullable().describe(`
        * * Field Name: ModelSelection
        * * Display Name: Model Selection
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON object containing detailed model selection information including all models considered, their scores, and the selection rationale`),
    Status: z.union([z.literal('Cancelled'), z.literal('Completed'), z.literal('Failed'), z.literal('Pending'), z.literal('Running')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Cancelled
    *   * Completed
    *   * Failed
    *   * Pending
    *   * Running
        * * Description: Current execution status of the prompt run. Valid values: Pending, Running, Completed, Failed, Cancelled`),
    Cancelled: z.boolean().describe(`
        * * Field Name: Cancelled
        * * Display Name: Cancelled
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this prompt run was cancelled before completion`),
    CancellationReason: z.string().nullable().describe(`
        * * Field Name: CancellationReason
        * * Display Name: Cancellation Reason
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed reason for cancellation if the prompt run was cancelled. Could be user_requested, timeout, error, or resource_limit`),
    ModelPowerRank: z.number().nullable().describe(`
        * * Field Name: ModelPowerRank
        * * Display Name: Model Power Rank
        * * SQL Data Type: int
        * * Description: Power rank of the model that was selected for this run. Lower numbers indicate more powerful models`),
    SelectionStrategy: z.union([z.literal('ByPower'), z.literal('Default'), z.literal('Specific')]).nullable().describe(`
        * * Field Name: SelectionStrategy
        * * Display Name: Selection Strategy
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * ByPower
    *   * Default
    *   * Specific
        * * Description: Strategy used for model selection. Valid values: Default (system default), Specific (specific models configured), ByPower (based on power ranking)`),
    CacheHit: z.boolean().describe(`
        * * Field Name: CacheHit
        * * Display Name: Cache Hit
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this result was served from cache rather than executing a new model call`),
    CacheKey: z.string().nullable().describe(`
        * * Field Name: CacheKey
        * * Display Name: Cache Key
        * * SQL Data Type: nvarchar(500)
        * * Description: Unique key used for caching this prompt result, typically a hash of the prompt and parameters`),
    JudgeID: z.string().nullable().describe(`
        * * Field Name: JudgeID
        * * Display Name: Judge ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: ID of the AIPrompt used as a judge to evaluate and rank multiple parallel execution results`),
    JudgeScore: z.number().nullable().describe(`
        * * Field Name: JudgeScore
        * * Display Name: Judge Score
        * * SQL Data Type: float(53)
        * * Description: Score assigned by the judge prompt when evaluating multiple results. Higher scores indicate better results`),
    WasSelectedResult: z.boolean().describe(`
        * * Field Name: WasSelectedResult
        * * Display Name: Was Selected Result
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this result was selected as the best result when multiple models were run in parallel`),
    StreamingEnabled: z.boolean().describe(`
        * * Field Name: StreamingEnabled
        * * Display Name: Streaming Enabled
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether streaming was enabled for this prompt execution`),
    FirstTokenTime: z.number().nullable().describe(`
        * * Field Name: FirstTokenTime
        * * Display Name: First Token Time
        * * SQL Data Type: int
        * * Description: Time in milliseconds from request initiation to receiving the first token from the model`),
    ErrorDetails: z.string().nullable().describe(`
        * * Field Name: ErrorDetails
        * * Display Name: Error Details
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed error information in JSON format if the prompt execution failed, including stack traces and error codes`),
    ChildPromptID: z.string().nullable().describe(`
        * * Field Name: ChildPromptID
        * * Display Name: Child Prompt ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
        * * Description: References the specific child prompt that was executed as part of hierarchical prompt composition. NULL for regular prompts or parent prompts that don't directly execute a child.`),
    QueueTime: z.number().nullable().describe(`
        * * Field Name: QueueTime
        * * Display Name: Queue Time
        * * SQL Data Type: int
        * * Description: Queue time in milliseconds before the model started processing the request. Provider-specific timing metric.`),
    PromptTime: z.number().nullable().describe(`
        * * Field Name: PromptTime
        * * Display Name: Prompt Time
        * * SQL Data Type: int
        * * Description: Time in milliseconds for the model to ingest and process the prompt. Provider-specific timing metric.`),
    CompletionTime: z.number().nullable().describe(`
        * * Field Name: CompletionTime
        * * Display Name: Completion Time
        * * SQL Data Type: int
        * * Description: Time in milliseconds for the model to generate the completion/response tokens. Provider-specific timing metric.`),
    ModelSpecificResponseDetails: z.string().nullable().describe(`
        * * Field Name: ModelSpecificResponseDetails
        * * Display Name: Model Specific Response Details
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON field containing provider-specific response metadata and details not captured in standard fields. Structure varies by AI provider.`),
    EffortLevel: z.number().nullable().describe(`
        * * Field Name: EffortLevel
        * * Display Name: Effort Level
        * * SQL Data Type: int
        * * Description: Effort level that was actually used during this prompt run execution (1-100, where 1=minimal effort, 100=maximum effort). This is the resolved effort level after applying the precedence hierarchy: runtime override > agent default > prompt default > provider default.`),
    RunName: z.string().nullable().describe(`
        * * Field Name: RunName
        * * Display Name: Run Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Optional name for the prompt run to help identify and tag runs for easier reference`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Human-readable notes and comments about this prompt run`),
    Prompt: z.string().describe(`
        * * Field Name: Prompt
        * * Display Name: Prompt
        * * SQL Data Type: nvarchar(255)`),
    Model: z.string().describe(`
        * * Field Name: Model
        * * Display Name: Model
        * * SQL Data Type: nvarchar(50)`),
    Vendor: z.string().describe(`
        * * Field Name: Vendor
        * * Display Name: Vendor
        * * SQL Data Type: nvarchar(50)`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(100)`),
    OriginalModel: z.string().nullable().describe(`
        * * Field Name: OriginalModel
        * * Display Name: Original Model
        * * SQL Data Type: nvarchar(50)`),
    Judge: z.string().nullable().describe(`
        * * Field Name: Judge
        * * Display Name: Judge
        * * SQL Data Type: nvarchar(255)`),
    ChildPrompt: z.string().nullable().describe(`
        * * Field Name: ChildPrompt
        * * Display Name: Child Prompt
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
    RootRerunFromPromptRunID: z.string().nullable().describe(`
        * * Field Name: RootRerunFromPromptRunID
        * * Display Name: Root Rerun From Prompt Run ID
        * * SQL Data Type: uniqueidentifier`),
});

export type AIPromptRunEntityType = z.infer<typeof AIPromptRunSchema>;

/**
 * zod schema definition for the entity MJ: AI Vendor Type Definitions
 */
export const AIVendorTypeDefinitionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)
        * * Description: The name of the vendor type.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the vendor type.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type AIVendorTypeDefinitionEntityType = z.infer<typeof AIVendorTypeDefinitionSchema>;

/**
 * zod schema definition for the entity MJ: AI Vendor Types
 */
export const AIVendorTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    VendorID: z.string().describe(`
        * * Field Name: VendorID
        * * Display Name: Vendor ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)`),
    TypeID: z.string().describe(`
        * * Field Name: TypeID
        * * Display Name: Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: AI Vendor Type Definitions (vwAIVendorTypeDefinitions.ID)`),
    Rank: z.number().describe(`
        * * Field Name: Rank
        * * Display Name: Rank
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Determines the priority rank of this type for the vendor. Higher values indicate higher priority.`),
    Status: z.union([z.literal('Active'), z.literal('Deprecated'), z.literal('Inactive'), z.literal('Preview')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
        * * Description: The current status of this vendor type. Values include Active, Inactive, Deprecated, and Preview.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Vendor: z.string().describe(`
        * * Field Name: Vendor
        * * Display Name: Vendor
        * * SQL Data Type: nvarchar(50)`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(50)`),
});

export type AIVendorTypeEntityType = z.infer<typeof AIVendorTypeSchema>;

/**
 * zod schema definition for the entity MJ: AI Vendors
 */
export const AIVendorSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)
        * * Description: The unique name of the vendor.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the vendor and their AI offerings.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type AIVendorEntityType = z.infer<typeof AIVendorSchema>;

/**
 * zod schema definition for the entity MJ: Artifact Permissions
 */
export const ArtifactPermissionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ArtifactID: z.string().describe(`
        * * Field Name: ArtifactID
        * * Display Name: Artifact ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifacts (vwArtifacts.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    CanRead: z.boolean().describe(`
        * * Field Name: CanRead
        * * Display Name: Can Read
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Whether the user can view/read the artifact`),
    CanEdit: z.boolean().describe(`
        * * Field Name: CanEdit
        * * Display Name: Can Edit
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether the user can modify the artifact or create new versions`),
    CanDelete: z.boolean().describe(`
        * * Field Name: CanDelete
        * * Display Name: Can Delete
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether the user can delete the artifact`),
    CanShare: z.boolean().describe(`
        * * Field Name: CanShare
        * * Display Name: Can Share
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether the user can share the artifact with other users`),
    SharedByUserID: z.string().nullable().describe(`
        * * Field Name: SharedByUserID
        * * Display Name: Shared By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: Foreign key to the User who shared this artifact (if shared)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Artifact: z.string().describe(`
        * * Field Name: Artifact
        * * Display Name: Artifact
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    SharedByUser: z.string().nullable().describe(`
        * * Field Name: SharedByUser
        * * Display Name: Shared By User
        * * SQL Data Type: nvarchar(100)`),
});

export type ArtifactPermissionEntityType = z.infer<typeof ArtifactPermissionSchema>;

/**
 * zod schema definition for the entity MJ: Artifact Types
 */
export const ArtifactTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)
        * * Description: Display name of the artifact type`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the artifact type`),
    ContentType: z.string().describe(`
        * * Field Name: ContentType
        * * Display Name: Content Type
        * * SQL Data Type: nvarchar(100)
        * * Description: MIME type or content identifier for this artifact type`),
    IsEnabled: z.boolean().describe(`
        * * Field Name: IsEnabled
        * * Display Name: Is Enabled
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if this artifact type is currently available for use`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)
        * * Description: Parent artifact type ID for hierarchical artifact type organization. Child types inherit ExtractRules from parent but can override.`),
    ExtractRules: z.string().nullable().describe(`
        * * Field Name: ExtractRules
        * * Display Name: Extract Rules
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of extraction rules defining how to extract attributes from artifact content. Each rule has: name (string), description (string), type (TypeScript type), standardProperty ('name'|'description'|'displayMarkdown'|'displayHtml'|null), extractor (JavaScript code string). Child types inherit parent rules and can override by name.`),
    DriverClass: z.string().nullable().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(255)
        * * Description: Driver class name for the artifact viewer plugin. References Angular component registered with @RegisterClass decorator.`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type ArtifactTypeEntityType = z.infer<typeof ArtifactTypeSchema>;

/**
 * zod schema definition for the entity MJ: Artifact Version Attributes
 */
export const ArtifactVersionAttributeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ArtifactVersionID: z.string().describe(`
        * * Field Name: ArtifactVersionID
        * * Display Name: Artifact Version ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifact Versions (vwArtifactVersions.ID)
        * * Description: The artifact version this attribute belongs to`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the extracted attribute (matches ExtractRule.name)`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(500)
        * * Description: TypeScript type definition of the value (e.g., 'string', 'number', 'Date', 'Array<{x: number, y: string}>')`),
    Value: z.string().nullable().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON-serialized extracted value`),
    StandardProperty: z.union([z.literal('description'), z.literal('displayHtml'), z.literal('displayMarkdown'), z.literal('name')]).nullable().describe(`
        * * Field Name: StandardProperty
        * * Display Name: Standard Property
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * description
    *   * displayHtml
    *   * displayMarkdown
    *   * name
        * * Description: Maps this attribute to a standard property for UI rendering: 'name', 'description', 'displayMarkdown', 'displayHtml', or NULL for custom attributes`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ArtifactVersion: z.string().nullable().describe(`
        * * Field Name: ArtifactVersion
        * * Display Name: Artifact Version
        * * SQL Data Type: nvarchar(255)`),
});

export type ArtifactVersionAttributeEntityType = z.infer<typeof ArtifactVersionAttributeSchema>;

/**
 * zod schema definition for the entity MJ: Artifact Versions
 */
export const ArtifactVersionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ArtifactID: z.string().describe(`
        * * Field Name: ArtifactID
        * * Display Name: Artifact ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifacts (vwArtifacts.ID)`),
    VersionNumber: z.number().describe(`
        * * Field Name: VersionNumber
        * * Display Name: Version Number
        * * SQL Data Type: int
        * * Description: Sequential version number for this artifact`),
    Content: z.string().nullable().describe(`
        * * Field Name: Content
        * * Display Name: Content
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The content of the artifact at this version`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration for this version`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: User comments specific to this version`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ContentHash: z.string().nullable().describe(`
        * * Field Name: ContentHash
        * * Display Name: Content Hash
        * * SQL Data Type: nvarchar(500)
        * * Description: SHA-256 hash of the Content field for duplicate detection and version comparison`),
    Name: z.string().nullable().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of this artifact version. Can differ from Artifact.Name as it may evolve with versions.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of this artifact version. Can differ from Artifact.Description as it may evolve with versions.`),
    Artifact: z.string().describe(`
        * * Field Name: Artifact
        * * Display Name: Artifact
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type ArtifactVersionEntityType = z.infer<typeof ArtifactVersionSchema>;

/**
 * zod schema definition for the entity MJ: Artifacts
 */
export const ArtifactSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EnvironmentID: z.string().describe(`
        * * Field Name: EnvironmentID
        * * Display Name: Environment ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
        * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Display name for the artifact`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the artifact contents and purpose`),
    TypeID: z.string().describe(`
        * * Field Name: TypeID
        * * Display Name: Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: User comments about the artifact`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Visibility: z.union([z.literal('Always'), z.literal('System Only')]).describe(`
        * * Field Name: Visibility
        * * Display Name: Visibility
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Always
    * * Value List Type: List
    * * Possible Values 
    *   * Always
    *   * System Only
        * * Description: Controls artifact visibility in user-facing lists. "Always" shows in all lists, "System Only" hides from normal views (for system-generated artifacts like agent routing payloads).`),
    Environment: z.string().describe(`
        * * Field Name: Environment
        * * Display Name: Environment
        * * SQL Data Type: nvarchar(255)`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(100)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type ArtifactEntityType = z.infer<typeof ArtifactSchema>;

/**
 * zod schema definition for the entity MJ: Collection Artifacts
 */
export const CollectionArtifactSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CollectionID: z.string().describe(`
        * * Field Name: CollectionID
        * * Display Name: Collection ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Collections (vwCollections.ID)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Sequence number for ordering artifacts within a collection`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ArtifactVersionID: z.string().describe(`
        * * Field Name: ArtifactVersionID
        * * Display Name: Artifact Version ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifact Versions (vwArtifactVersions.ID)
        * * Description: Required. Specific version of the artifact saved to this collection. Collections store version-specific artifacts to enable proper version tracking and Links tab filtering.`),
    Collection: z.string().describe(`
        * * Field Name: Collection
        * * Display Name: Collection
        * * SQL Data Type: nvarchar(255)`),
    ArtifactVersion: z.string().nullable().describe(`
        * * Field Name: ArtifactVersion
        * * Display Name: Artifact Version
        * * SQL Data Type: nvarchar(255)`),
});

export type CollectionArtifactEntityType = z.infer<typeof CollectionArtifactSchema>;

/**
 * zod schema definition for the entity MJ: Collection Permissions
 */
export const CollectionPermissionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    CollectionID: z.string().describe(`
        * * Field Name: CollectionID
        * * Display Name: Collection ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Collections (vwCollections.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    CanRead: z.boolean().describe(`
        * * Field Name: CanRead
        * * Display Name: Can Read
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Always 1 - users must have read permission to access a shared collection`),
    CanShare: z.boolean().describe(`
        * * Field Name: CanShare
        * * Display Name: Can Share
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Can share this collection with others (but cannot grant more permissions than they have)`),
    CanEdit: z.boolean().describe(`
        * * Field Name: CanEdit
        * * Display Name: Can Edit
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Can add/remove artifacts to/from this collection`),
    CanDelete: z.boolean().describe(`
        * * Field Name: CanDelete
        * * Display Name: Can Delete
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Can delete the collection, child collections, and artifacts`),
    SharedByUserID: z.string().nullable().describe(`
        * * Field Name: SharedByUserID
        * * Display Name: Shared By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: The user who shared this collection (NULL if shared by owner)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Collection: z.string().describe(`
        * * Field Name: Collection
        * * Display Name: Collection
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    SharedByUser: z.string().nullable().describe(`
        * * Field Name: SharedByUser
        * * Display Name: Shared By User
        * * SQL Data Type: nvarchar(100)`),
});

export type CollectionPermissionEntityType = z.infer<typeof CollectionPermissionSchema>;

/**
 * zod schema definition for the entity MJ: Collections
 */
export const CollectionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EnvironmentID: z.string().describe(`
        * * Field Name: EnvironmentID
        * * Display Name: Environment ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
        * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Collections (vwCollections.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Display name for the collection`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the collection purpose`),
    Icon: z.string().nullable().describe(`
        * * Field Name: Icon
        * * Display Name: Icon
        * * SQL Data Type: nvarchar(50)
        * * Description: Font Awesome icon class for UI display`),
    Color: z.string().nullable().describe(`
        * * Field Name: Color
        * * Display Name: Color
        * * SQL Data Type: nvarchar(7)
        * * Description: Hex color code for UI display (#RRGGBB format)`),
    Sequence: z.number().nullable().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Description: Display sequence for ordering collections in UI`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    OwnerID: z.string().nullable().describe(`
        * * Field Name: OwnerID
        * * Display Name: Owner ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: The user who owns this collection and has full permissions`),
    Environment: z.string().describe(`
        * * Field Name: Environment
        * * Display Name: Environment
        * * SQL Data Type: nvarchar(255)`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    Owner: z.string().nullable().describe(`
        * * Field Name: Owner
        * * Display Name: Owner
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type CollectionEntityType = z.infer<typeof CollectionSchema>;

/**
 * zod schema definition for the entity MJ: Component Dependencies
 */
export const ComponentDependencySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Primary key for component dependency`),
    ComponentID: z.string().describe(`
        * * Field Name: ComponentID
        * * Display Name: Component ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Components (vwComponents.ID)
        * * Description: Foreign key to parent Component that has the dependency`),
    DependencyComponentID: z.string().describe(`
        * * Field Name: DependencyComponentID
        * * Display Name: Dependency Component ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Components (vwComponents.ID)
        * * Description: Foreign key to the Component that is depended upon`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Component: z.string().describe(`
        * * Field Name: Component
        * * Display Name: Component
        * * SQL Data Type: nvarchar(500)`),
    DependencyComponent: z.string().describe(`
        * * Field Name: DependencyComponent
        * * Display Name: Dependency Component
        * * SQL Data Type: nvarchar(500)`),
});

export type ComponentDependencyEntityType = z.infer<typeof ComponentDependencySchema>;

/**
 * zod schema definition for the entity MJ: Component Libraries
 */
export const ComponentLibrarySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Primary key for the component library`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(500)
        * * Description: NPM-style package name (e.g., recharts, lodash, @memberjunction/lib-name)`),
    DisplayName: z.string().nullable().describe(`
        * * Field Name: DisplayName
        * * Display Name: Display Name
        * * SQL Data Type: nvarchar(500)
        * * Description: User-friendly display name for the library`),
    Version: z.string().nullable().describe(`
        * * Field Name: Version
        * * Display Name: Version
        * * SQL Data Type: nvarchar(100)
        * * Description: Library version number`),
    GlobalVariable: z.string().nullable().describe(`
        * * Field Name: GlobalVariable
        * * Display Name: Global Variable
        * * SQL Data Type: nvarchar(255)
        * * Description: Global variable name when loaded (e.g., _ for lodash, React for react)`),
    Category: z.union([z.literal('Charting'), z.literal('Core'), z.literal('Other'), z.literal('Runtime'), z.literal('UI'), z.literal('Utility')]).nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(100)
    * * Value List Type: List
    * * Possible Values 
    *   * Charting
    *   * Core
    *   * Other
    *   * Runtime
    *   * UI
    *   * Utility
        * * Description: Library category: Core, Runtime, UI, Charting, Utility, or Other`),
    CDNUrl: z.string().nullable().describe(`
        * * Field Name: CDNUrl
        * * Display Name: CDN Url
        * * SQL Data Type: nvarchar(1000)
        * * Description: CDN URL for loading the library JavaScript`),
    CDNCssUrl: z.string().nullable().describe(`
        * * Field Name: CDNCssUrl
        * * Display Name: CDN Css Url
        * * SQL Data Type: nvarchar(1000)
        * * Description: Optional CDN URL for loading library CSS`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the library and its capabilities`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Status: z.union([z.literal('Active'), z.literal('Deprecated'), z.literal('Disabled')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Disabled
        * * Description: Status of the component library. Active: fully supported; Deprecated: works but shows console warning; Disabled: throws error if used`),
    LintRules: z.string().nullable().describe(`
        * * Field Name: LintRules
        * * Display Name: Lint Rules
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration for library-specific lint rules that are applied during component validation. This field contains structured rules that define how components using this library should be validated, including DOM element requirements, initialization patterns, lifecycle methods, and common error patterns. Example structure: {"initialization": {"constructorName": "Chart", "elementType": "canvas"}, "lifecycle": {"requiredMethods": ["render"], "cleanupMethods": ["destroy"]}}. The linter dynamically applies these rules based on the libraries referenced in a component spec, enabling extensible validation without hardcoding library-specific logic.`),
    Dependencies: z.string().nullable().describe(`
        * * Field Name: Dependencies
        * * Display Name: Dependencies
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON object defining dependencies for this component library. Format: { "libraryName": "versionSpec", ... }. Version specifications follow NPM-style syntax (e.g., "~1.0.0", "^1.2.3", "2.3.4"). Dependencies are loaded before this library to ensure proper execution context.`),
    UsageType: z.union([z.literal('Both'), z.literal('Dependency'), z.literal('Direct')]).describe(`
        * * Field Name: UsageType
        * * Display Name: Usage Type
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Both
    * * Value List Type: List
    * * Possible Values 
    *   * Both
    *   * Dependency
    *   * Direct
        * * Description: Controls how the library can be used: Direct (by components), Dependency (only as dependency), or Both`),
});

export type ComponentLibraryEntityType = z.infer<typeof ComponentLibrarySchema>;

/**
 * zod schema definition for the entity MJ: Component Library Links
 */
export const ComponentLibraryLinkSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Primary key for component-library relationship`),
    ComponentID: z.string().describe(`
        * * Field Name: ComponentID
        * * Display Name: Component ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Components (vwComponents.ID)
        * * Description: Foreign key to Component that depends on the library`),
    LibraryID: z.string().describe(`
        * * Field Name: LibraryID
        * * Display Name: Library ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Component Libraries (vwComponentLibraries.ID)
        * * Description: Foreign key to ComponentLibrary that the component depends on`),
    MinVersion: z.string().nullable().describe(`
        * * Field Name: MinVersion
        * * Display Name: Min Version
        * * SQL Data Type: nvarchar(100)
        * * Description: Minimum version requirement using semantic versioning (e.g., ^1.0.0, ~2.5.0)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Component: z.string().describe(`
        * * Field Name: Component
        * * Display Name: Component
        * * SQL Data Type: nvarchar(500)`),
    Library: z.string().describe(`
        * * Field Name: Library
        * * Display Name: Library
        * * SQL Data Type: nvarchar(500)`),
});

export type ComponentLibraryLinkEntityType = z.infer<typeof ComponentLibraryLinkSchema>;

/**
 * zod schema definition for the entity MJ: Component Registries
 */
export const ComponentRegistrySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Primary key for the component registry`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the registry (e.g., MemberJunction Registry, NPM, Internal Registry)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the registry and its purpose`),
    URI: z.string().nullable().describe(`
        * * Field Name: URI
        * * Display Name: URI
        * * SQL Data Type: nvarchar(500)
        * * Description: Registry endpoint URI (e.g., https://registry.memberjunction.org)`),
    Type: z.union([z.literal('Internal'), z.literal('Private'), z.literal('Public')]).nullable().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Internal
    *   * Private
    *   * Public
        * * Description: Type of registry: public, private, or internal`),
    APIVersion: z.string().nullable().describe(`
        * * Field Name: APIVersion
        * * Display Name: API Version
        * * SQL Data Type: nvarchar(50)
        * * Description: API version supported by the registry for compatibility`),
    Status: z.union([z.literal('Active'), z.literal('Deprecated'), z.literal('Offline')]).nullable().describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Offline
        * * Description: Current status of the registry: active, deprecated, or offline`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ComponentRegistryEntityType = z.infer<typeof ComponentRegistrySchema>;

/**
 * zod schema definition for the entity MJ: Components
 */
export const ComponentSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Immutable UUID that remains the same across all systems`),
    Namespace: z.string().nullable().describe(`
        * * Field Name: Namespace
        * * Display Name: Namespace
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Hierarchical namespace path (e.g., dashboards/sales for local, @memberjunction/dashboards/financial for external)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(500)
        * * Description: Component name within the namespace (e.g., revenue-tracker)`),
    Version: z.string().describe(`
        * * Field Name: Version
        * * Display Name: Version
        * * SQL Data Type: nvarchar(50)
        * * Description: Semantic version number (e.g., 1.0.0, 1.2.3-beta)`),
    VersionSequence: z.number().describe(`
        * * Field Name: VersionSequence
        * * Display Name: Version Sequence
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Numeric sequence for sorting versions`),
    Title: z.string().nullable().describe(`
        * * Field Name: Title
        * * Display Name: Title
        * * SQL Data Type: nvarchar(1000)
        * * Description: User-friendly display title for the component`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the component functionality`),
    Type: z.union([z.literal('Chart'), z.literal('Dashboard'), z.literal('Form'), z.literal('Navigation'), z.literal('Other'), z.literal('Report'), z.literal('Search'), z.literal('Table'), z.literal('Utility'), z.literal('Widget')]).nullable().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(255)
    * * Value List Type: List
    * * Possible Values 
    *   * Chart
    *   * Dashboard
    *   * Form
    *   * Navigation
    *   * Other
    *   * Report
    *   * Search
    *   * Table
    *   * Utility
    *   * Widget
        * * Description: Component type: report, dashboard, form, table, chart, navigation, search, widget, utility, or other`),
    Status: z.union([z.literal('Deprecated'), z.literal('Draft'), z.literal('Published')]).nullable().describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Deprecated
    *   * Draft
    *   * Published
        * * Description: Publication status: draft, published, or deprecated`),
    DeveloperName: z.string().nullable().describe(`
        * * Field Name: DeveloperName
        * * Display Name: Developer Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the component developer or author`),
    DeveloperEmail: z.string().nullable().describe(`
        * * Field Name: DeveloperEmail
        * * Display Name: Developer Email
        * * SQL Data Type: nvarchar(255)
        * * Description: Contact email for the component developer`),
    DeveloperOrganization: z.string().nullable().describe(`
        * * Field Name: DeveloperOrganization
        * * Display Name: Developer Organization
        * * SQL Data Type: nvarchar(255)
        * * Description: Organization name of the component developer`),
    SourceRegistryID: z.string().nullable().describe(`
        * * Field Name: SourceRegistryID
        * * Display Name: Source Registry ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Component Registries (vwComponentRegistries.ID)
        * * Description: Foreign key to ComponentRegistry - NULL for local components, populated for replicated ones`),
    ReplicatedAt: z.date().nullable().describe(`
        * * Field Name: ReplicatedAt
        * * Display Name: Replicated At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp when the component was replicated from external registry (NULL for local components)`),
    LastSyncedAt: z.date().nullable().describe(`
        * * Field Name: LastSyncedAt
        * * Display Name: Last Synced At
        * * SQL Data Type: datetimeoffset
        * * Description: Last synchronization timestamp with the source registry`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Specification: z.string().describe(`
        * * Field Name: Specification
        * * Display Name: Specification
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Complete JSON specification object for the component`),
    FunctionalRequirements: z.string().nullable().describe(`
        * * Field Name: FunctionalRequirements
        * * Display Name: Functional Requirements
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Functional requirements describing what the component should accomplish`),
    TechnicalDesign: z.string().nullable().describe(`
        * * Field Name: TechnicalDesign
        * * Display Name: Technical Design
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Technical design describing how the component is implemented`),
    FunctionalRequirementsVector: z.string().nullable().describe(`
        * * Field Name: FunctionalRequirementsVector
        * * Display Name: Functional Requirements Vector
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Vector embedding of the functional requirements for similarity search`),
    TechnicalDesignVector: z.string().nullable().describe(`
        * * Field Name: TechnicalDesignVector
        * * Display Name: Technical Design Vector
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Vector embedding of the technical design for similarity search`),
    HasCustomProps: z.boolean().describe(`
        * * Field Name: HasCustomProps
        * * Display Name: Has Custom Props
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if the component has custom properties defined in its specification. Components with custom props cannot be used directly by deterministic containers.`),
    HasCustomEvents: z.boolean().describe(`
        * * Field Name: HasCustomEvents
        * * Display Name: Has Custom Events
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if the component has custom events defined in its specification. Components with custom events may have limited functionality in generic containers.`),
    RequiresData: z.boolean().describe(`
        * * Field Name: RequiresData
        * * Display Name: Requires Data
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if the component requires data access (utilities object with md, rv, rq). Used to determine if component needs data context.`),
    DependencyCount: z.number().describe(`
        * * Field Name: DependencyCount
        * * Display Name: Dependency Count
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Number of component dependencies defined in the specification. Used to assess component complexity.`),
    TechnicalDesignVectorEmbeddingModelID: z.string().nullable().describe(`
        * * Field Name: TechnicalDesignVectorEmbeddingModelID
        * * Display Name: Technical Design Vector Embedding Model ID
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The ID of the AI model used to generate the vector embedding for the technical design`),
    FunctionalRequirementsVectorEmbeddingModelID: z.string().nullable().describe(`
        * * Field Name: FunctionalRequirementsVectorEmbeddingModelID
        * * Display Name: Functional Requirements Vector Embedding Model ID
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The ID of the AI model used to generate the vector embedding for the functional requirements`),
    HasRequiredCustomProps: z.boolean().describe(`
        * * Field Name: HasRequiredCustomProps
        * * Display Name: Has Required Custom Props
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether the component has any custom properties that are marked as required. This is auto-calculated based on the component's properties array to identify components with mandatory custom configuration.`),
    SourceRegistry: z.string().nullable().describe(`
        * * Field Name: SourceRegistry
        * * Display Name: Source Registry
        * * SQL Data Type: nvarchar(255)`),
});

export type ComponentEntityType = z.infer<typeof ComponentSchema>;

/**
 * zod schema definition for the entity MJ: Conversation Artifact Permissions
 */
export const ConversationArtifactPermissionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ConversationArtifactID: z.string().describe(`
        * * Field Name: ConversationArtifactID
        * * Display Name: Conversation Artifact ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Conversation Artifacts (vwConversationArtifacts.ID)
        * * Description: Reference to the artifact this permission applies to`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Description: User this permission applies to`),
    AccessLevel: z.union([z.literal('Edit'), z.literal('Owner'), z.literal('Read')]).describe(`
        * * Field Name: AccessLevel
        * * Display Name: Access Level
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Edit
    *   * Owner
    *   * Read
        * * Description: Level of access granted (Read, Edit, Owner)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ConversationArtifact: z.string().describe(`
        * * Field Name: ConversationArtifact
        * * Display Name: Conversation Artifact
        * * SQL Data Type: nvarchar(255)`),
});

export type ConversationArtifactPermissionEntityType = z.infer<typeof ConversationArtifactPermissionSchema>;

/**
 * zod schema definition for the entity MJ: Conversation Artifact Versions
 */
export const ConversationArtifactVersionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ConversationArtifactID: z.string().describe(`
        * * Field Name: ConversationArtifactID
        * * Display Name: Conversation Artifact ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Conversation Artifacts (vwConversationArtifacts.ID)
        * * Description: Reference to the parent artifact`),
    Version: z.number().describe(`
        * * Field Name: Version
        * * Display Name: Version
        * * SQL Data Type: int
        * * Description: Sequential version number (starting from 1) for this artifact`),
    Configuration: z.string().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration and metadata for this artifact version`),
    Content: z.string().nullable().describe(`
        * * Field Name: Content
        * * Display Name: Content
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Actual content of the artifact, if stored separately from configuration`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: User comments specific to this version`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ConversationArtifact: z.string().describe(`
        * * Field Name: ConversationArtifact
        * * Display Name: Conversation Artifact
        * * SQL Data Type: nvarchar(255)`),
});

export type ConversationArtifactVersionEntityType = z.infer<typeof ConversationArtifactVersionSchema>;

/**
 * zod schema definition for the entity MJ: Conversation Artifacts
 */
export const ConversationArtifactSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Display name of the artifact`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Extended description of the artifact`),
    ConversationID: z.string().describe(`
        * * Field Name: ConversationID
        * * Display Name: Conversation ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
        * * Description: Reference to the conversation this artifact belongs to`),
    ArtifactTypeID: z.string().describe(`
        * * Field Name: ArtifactTypeID
        * * Display Name: Artifact Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)
        * * Description: Reference to the type of artifact`),
    SharingScope: z.union([z.literal('Everyone'), z.literal('None'), z.literal('Public'), z.literal('SpecificUsers')]).describe(`
        * * Field Name: SharingScope
        * * Display Name: Sharing Scope
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Everyone
    *   * None
    *   * Public
    *   * SpecificUsers
        * * Description: Controls who can view this artifact (None, SpecificUsers, Everyone, Public)`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: User comments about the artifact`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Conversation: z.string().nullable().describe(`
        * * Field Name: Conversation
        * * Display Name: Conversation
        * * SQL Data Type: nvarchar(255)`),
    ArtifactType: z.string().describe(`
        * * Field Name: ArtifactType
        * * Display Name: Artifact Type
        * * SQL Data Type: nvarchar(100)`),
});

export type ConversationArtifactEntityType = z.infer<typeof ConversationArtifactSchema>;

/**
 * zod schema definition for the entity MJ: Conversation Detail Artifacts
 */
export const ConversationDetailArtifactSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ConversationDetailID: z.string().describe(`
        * * Field Name: ConversationDetailID
        * * Display Name: Conversation Detail ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
        * * Description: Foreign key to ConversationDetail - the conversation message associated with this artifact`),
    ArtifactVersionID: z.string().describe(`
        * * Field Name: ArtifactVersionID
        * * Display Name: Artifact Version ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Artifact Versions (vwArtifactVersions.ID)
        * * Description: Foreign key to ArtifactVersion - the specific artifact version linked to this conversation message`),
    Direction: z.union([z.literal('Input'), z.literal('Output')]).describe(`
        * * Field Name: Direction
        * * Display Name: Direction
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Output
    * * Value List Type: List
    * * Possible Values 
    *   * Input
    *   * Output
        * * Description: Direction of artifact flow: Input (fed to agent) or Output (produced by agent)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ArtifactVersion: z.string().nullable().describe(`
        * * Field Name: ArtifactVersion
        * * Display Name: Artifact Version
        * * SQL Data Type: nvarchar(255)`),
});

export type ConversationDetailArtifactEntityType = z.infer<typeof ConversationDetailArtifactSchema>;

/**
 * zod schema definition for the entity MJ: Dashboard User Preferences
 */
export const DashboardUserPreferenceSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().nullable().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: User that these preferences belong to, NULL for system defaults`),
    DashboardID: z.string().describe(`
        * * Field Name: DashboardID
        * * Display Name: Dashboard ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Dashboards (vwDashboards.ID)
        * * Description: Dashboard that this preference refers to`),
    Scope: z.union([z.literal('App'), z.literal('Global')]).describe(`
        * * Field Name: Scope
        * * Display Name: Scope
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * App
    *   * Global
        * * Description: Scope of the preference (Global or App)`),
    ApplicationID: z.string().nullable().describe(`
        * * Field Name: ApplicationID
        * * Display Name: Application ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Applications (vwApplications.ID)
        * * Description: Application that this preference applies to (only for App scope)`),
    DisplayOrder: z.number().describe(`
        * * Field Name: DisplayOrder
        * * Display Name: Display Order
        * * SQL Data Type: int
        * * Description: Order in which to display the dashboard`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().nullable().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Dashboard: z.string().describe(`
        * * Field Name: Dashboard
        * * Display Name: Dashboard
        * * SQL Data Type: nvarchar(255)`),
    Application: z.string().nullable().describe(`
        * * Field Name: Application
        * * Display Name: Application
        * * SQL Data Type: nvarchar(100)`),
});

export type DashboardUserPreferenceEntityType = z.infer<typeof DashboardUserPreferenceSchema>;

/**
 * zod schema definition for the entity MJ: Dashboard User States
 */
export const DashboardUserStateSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    DashboardID: z.string().describe(`
        * * Field Name: DashboardID
        * * Display Name: Dashboard ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Dashboards (vwDashboards.ID)
        * * Description: Dashboard that this state applies to`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: User that this state belongs to`),
    UserState: z.string().nullable().describe(`
        * * Field Name: UserState
        * * Display Name: User State
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON object containing user-specific dashboard state`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Dashboard: z.string().describe(`
        * * Field Name: Dashboard
        * * Display Name: Dashboard
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type DashboardUserStateEntityType = z.infer<typeof DashboardUserStateSchema>;

/**
 * zod schema definition for the entity MJ: Environments
 */
export const EnvironmentSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Display name for the environment`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the environment purpose and scope`),
    IsDefault: z.boolean().describe(`
        * * Field Name: IsDefault
        * * Display Name: Is Default
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if this is the default environment for the organization`),
    Settings: z.string().nullable().describe(`
        * * Field Name: Settings
        * * Display Name: Settings
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration for environment-specific settings and features`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type EnvironmentEntityType = z.infer<typeof EnvironmentSchema>;

/**
 * zod schema definition for the entity MJ: Projects
 */
export const ProjectSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EnvironmentID: z.string().describe(`
        * * Field Name: EnvironmentID
        * * Display Name: Environment ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
        * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Projects (vwProjects.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Display name for the project`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the project goals and scope`),
    Color: z.string().nullable().describe(`
        * * Field Name: Color
        * * Display Name: Color
        * * SQL Data Type: nvarchar(7)
        * * Description: Hex color code for project badges in UI (#RRGGBB format)`),
    Icon: z.string().nullable().describe(`
        * * Field Name: Icon
        * * Display Name: Icon
        * * SQL Data Type: nvarchar(50)
        * * Description: Font Awesome icon class for UI display`),
    IsArchived: z.boolean().describe(`
        * * Field Name: IsArchived
        * * Display Name: Is Archived
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if this project is archived and should be hidden from active lists`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Environment: z.string().describe(`
        * * Field Name: Environment
        * * Display Name: Environment
        * * SQL Data Type: nvarchar(255)`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type ProjectEntityType = z.infer<typeof ProjectSchema>;

/**
 * zod schema definition for the entity MJ: Public Links
 */
export const PublicLinkSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ResourceType: z.union([z.literal('Artifact'), z.literal('Collection'), z.literal('Conversation')]).describe(`
        * * Field Name: ResourceType
        * * Display Name: Resource Type
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Artifact
    *   * Collection
    *   * Conversation
        * * Description: Type of resource being shared (Artifact, Conversation, Collection)`),
    ResourceID: z.string().describe(`
        * * Field Name: ResourceID
        * * Display Name: Resource ID
        * * SQL Data Type: uniqueidentifier`),
    Token: z.string().describe(`
        * * Field Name: Token
        * * Display Name: Token
        * * SQL Data Type: nvarchar(255)
        * * Description: Unique token for accessing the shared resource via URL`),
    PasswordHash: z.string().nullable().describe(`
        * * Field Name: PasswordHash
        * * Display Name: Password Hash
        * * SQL Data Type: nvarchar(255)
        * * Description: SHA256 hash of optional password for additional security`),
    ExpiresAt: z.date().nullable().describe(`
        * * Field Name: ExpiresAt
        * * Display Name: Expires At
        * * SQL Data Type: datetimeoffset
        * * Description: Optional expiration date/time for this public link`),
    MaxViews: z.number().nullable().describe(`
        * * Field Name: MaxViews
        * * Display Name: Max Views
        * * SQL Data Type: int
        * * Description: Maximum number of times this link can be viewed`),
    CurrentViews: z.number().describe(`
        * * Field Name: CurrentViews
        * * Display Name: Current Views
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Current count of how many times this link has been viewed`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates if this link is currently active and accessible`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type PublicLinkEntityType = z.infer<typeof PublicLinkSchema>;

/**
 * zod schema definition for the entity MJ: Query Parameters
 */
export const QueryParameterSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    QueryID: z.string().describe(`
        * * Field Name: QueryID
        * * Display Name: Query ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Queries (vwQueries.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: The name of the parameter as it appears in the Nunjucks template. This must match exactly with the parameter reference in the SQL template. For example, if the template contains {{ userEmail | required | email }}, the Name would be "userEmail". Parameter names should follow JavaScript identifier rules: start with a letter, and contain only letters, numbers, and underscores.`),
    Type: z.union([z.literal('array'), z.literal('boolean'), z.literal('date'), z.literal('number'), z.literal('string')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * array
    *   * boolean
    *   * date
    *   * number
    *   * string
        * * Description: The data type of the parameter used for validation and type conversion. Valid values are: "string" for text values, "number" for integers or decimals, "date" for date/datetime values (ISO 8601 format expected), "boolean" for true/false values, and "array" for multiple values (typically used with IN clauses). The type determines which validation filters can be applied and how the parameter is processed.`),
    IsRequired: z.boolean().nullable().describe(`
        * * Field Name: IsRequired
        * * Display Name: Is Required
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates whether this parameter must be provided when executing the query. When true, the query execution will fail if the parameter is not supplied and no DefaultValue is set. This is automatically determined by the presence of the "required" filter in the template, but can be manually overridden. Required parameters ensure data integrity and prevent unintended query behavior.`),
    DefaultValue: z.string().nullable().describe(`
        * * Field Name: DefaultValue
        * * Display Name: Default Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The default value to use when the parameter is not provided during query execution. This value must be compatible with the parameter Type. For arrays, use JSON format like ["value1","value2"]. Default values allow queries to have sensible fallbacks while still accepting custom inputs. If a parameter is required (IsRequired=true), the default value is ignored.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Human-readable description explaining the purpose and usage of this parameter. This is typically generated by LLM analysis of the query context but can be manually edited. Good descriptions include: what the parameter filters or controls, valid value ranges or formats, business meaning, and any special considerations. This text is shown in UI to help users understand what value to provide.`),
    SampleValue: z.string().nullable().describe(`
        * * Field Name: SampleValue
        * * Display Name: Sample Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: A concrete example value demonstrating the proper format for this parameter. Generated by LLM based on the query context and validation filters. For example: "john@example.com" for an email parameter, "2024-01-15" for a date, or "["active","pending"]" for a status array. Sample values help users understand the expected format and can be used in API documentation.`),
    ValidationFilters: z.string().nullable().describe(`
        * * Field Name: ValidationFilters
        * * Display Name: Validation Filters
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON array of Nunjucks filter definitions that validate and transform the parameter value. Each filter is an object with "name" and optional "args" properties. Filters are applied in order and can include: validation (required, email, min, max), transformation (trim, upper, lower), SQL safety (sqlsafe, sqljoin), and type conversion (number, date). Example: [{"name":"required"},{"name":"email"},{"name":"sqlsafe"}]. The filter chain ensures type safety and prevents SQL injection.`),
    DetectionMethod: z.union([z.literal('AI'), z.literal('Manual')]).describe(`
        * * Field Name: DetectionMethod
        * * Display Name: Detection Method
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Manual
    * * Value List Type: List
    * * Possible Values 
    *   * AI
    *   * Manual
        * * Description: Indicates how this parameter was identified and added to the system. "AI" means it was automatically detected by LLM analysis of the query template, including extraction of parameter name, type inference from filters, and generation of description. "Manual" means it was explicitly defined by a user. This helps track which parameters might need human review and provides transparency about the source of metadata.`),
    AutoDetectConfidenceScore: z.number().nullable().describe(`
        * * Field Name: AutoDetectConfidenceScore
        * * Display Name: Auto Detect Confidence Score
        * * SQL Data Type: decimal(3, 2)
        * * Description: Confidence score (0.00-1.00) indicating how certain the AI was about this parameter detection. Only populated when DetectionMethod="AI". Higher scores indicate the LLM was more confident about the parameter name, type, and usage. Scores above 0.80 are generally reliable, 0.60-0.80 may benefit from human review, and below 0.60 should be manually verified. This helps prioritize which auto-detected parameters need human attention.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Query: z.string().describe(`
        * * Field Name: Query
        * * Display Name: Query
        * * SQL Data Type: nvarchar(255)`),
});

export type QueryParameterEntityType = z.infer<typeof QueryParameterSchema>;

/**
 * zod schema definition for the entity MJ: Record Links
 */
export const RecordLinkSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    SourceEntityID: z.string().describe(`
        * * Field Name: SourceEntityID
        * * Display Name: Source Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    SourceRecordID: z.string().describe(`
        * * Field Name: SourceRecordID
        * * Display Name: Source Record ID
        * * SQL Data Type: nvarchar(500)
        * * Description: Primary key value(s) of the source record - scalar for simple PKs or JSON KeyValuePair array for composite PKs`),
    TargetEntityID: z.string().describe(`
        * * Field Name: TargetEntityID
        * * Display Name: Target Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    TargetRecordID: z.string().describe(`
        * * Field Name: TargetRecordID
        * * Display Name: Target Record ID
        * * SQL Data Type: nvarchar(500)
        * * Description: Primary key value(s) of the target record - scalar for simple PKs or JSON KeyValuePair array for composite PKs`),
    LinkType: z.string().nullable().describe(`
        * * Field Name: LinkType
        * * Display Name: Link Type
        * * SQL Data Type: nvarchar(50)
        * * Description: Application-specific relationship type describing how the records are related`),
    Sequence: z.number().nullable().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Description: Display sequence for ordering linked records in UI`),
    Metadata: z.string().nullable().describe(`
        * * Field Name: Metadata
        * * Display Name: Metadata
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON field for storing additional link-specific metadata`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    SourceEntity: z.string().describe(`
        * * Field Name: SourceEntity
        * * Display Name: Source Entity
        * * SQL Data Type: nvarchar(255)`),
    TargetEntity: z.string().describe(`
        * * Field Name: TargetEntity
        * * Display Name: Target Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type RecordLinkEntityType = z.infer<typeof RecordLinkSchema>;

/**
 * zod schema definition for the entity MJ: Report User States
 */
export const ReportUserStateSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ReportID: z.string().describe(`
        * * Field Name: ReportID
        * * Display Name: Report ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Reports (vwReports.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    ReportState: z.string().nullable().describe(`
        * * Field Name: ReportState
        * * Display Name: Report State
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON serialized state of user interaction with the report`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Report: z.string().describe(`
        * * Field Name: Report
        * * Display Name: Report
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type ReportUserStateEntityType = z.infer<typeof ReportUserStateSchema>;

/**
 * zod schema definition for the entity MJ: Report Versions
 */
export const ReportVersionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ReportID: z.string().describe(`
        * * Field Name: ReportID
        * * Display Name: Report ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Reports (vwReports.ID)`),
    VersionNumber: z.number().describe(`
        * * Field Name: VersionNumber
        * * Display Name: Version Number
        * * SQL Data Type: int
        * * Description: Report version number, sequential per report starting at 1`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of this report version`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of this report version`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration of report structure, layout and logic`),
    DataContextUpdated: z.boolean().describe(`
        * * Field Name: DataContextUpdated
        * * Display Name: Data Context Updated
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if the data context was updated in this version`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Report: z.string().describe(`
        * * Field Name: Report
        * * Display Name: Report
        * * SQL Data Type: nvarchar(255)`),
});

export type ReportVersionEntityType = z.infer<typeof ReportVersionSchema>;

/**
 * zod schema definition for the entity MJ: Scheduled Job Runs
 */
export const ScheduledJobRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ScheduledJobID: z.string().describe(`
        * * Field Name: ScheduledJobID
        * * Display Name: Scheduled Job ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Scheduled Jobs (vwScheduledJobs.ID)`),
    StartedAt: z.date().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetimeoffset
        * * Default Value: sysdatetimeoffset()
        * * Description: Timestamp when this job execution began. Set immediately before calling the job plugin's Execute method.`),
    CompletedAt: z.date().nullable().describe(`
        * * Field Name: CompletedAt
        * * Display Name: Completed At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp when this job execution completed (successfully or with failure). NULL while the job is still running.`),
    Status: z.union([z.literal('Cancelled'), z.literal('Completed'), z.literal('Failed'), z.literal('Running'), z.literal('Timeout')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Running
    * * Value List Type: List
    * * Possible Values 
    *   * Cancelled
    *   * Completed
    *   * Failed
    *   * Running
    *   * Timeout
        * * Description: Current status of the job execution. Running=currently executing, Completed=finished (check Success for outcome), Failed=exception during execution, Cancelled=manually cancelled, Timeout=exceeded maximum execution time.`),
    Success: z.boolean().nullable().describe(`
        * * Field Name: Success
        * * Display Name: Success
        * * SQL Data Type: bit
        * * Description: Whether the job execution completed successfully. NULL while running, TRUE if successful, FALSE if failed. This is the job-level success from the plugin's Execute method, separate from domain-specific success tracking.`),
    ErrorMessage: z.string().nullable().describe(`
        * * Field Name: ErrorMessage
        * * Display Name: Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Error message if the job failed. NULL for successful runs. Contains exception messages or error details from the plugin's Execute method.`),
    Details: z.string().nullable().describe(`
        * * Field Name: Details
        * * Display Name: Details
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Job-type specific execution details stored as JSON. May include references to domain-specific run records (e.g., {"AgentRunID": "...", "TokensUsed": 5000}), performance metrics, or other execution metadata. Schema is defined by the job type plugin.`),
    ExecutedByUserID: z.string().nullable().describe(`
        * * Field Name: ExecutedByUserID
        * * Display Name: Executed By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: User context under which the job was executed. Typically the OwnerUserID from the schedule, but can be overridden in job-specific configuration.`),
    QueuedAt: z.date().nullable().describe(`
        * * Field Name: QueuedAt
        * * Display Name: Queued At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp when this execution was queued (for ConcurrencyMode=Queue). NULL for immediate executions. When set, indicates this run is waiting for a previous execution to complete before starting.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ScheduledJob: z.string().describe(`
        * * Field Name: ScheduledJob
        * * Display Name: Scheduled Job
        * * SQL Data Type: nvarchar(200)`),
    ExecutedByUser: z.string().nullable().describe(`
        * * Field Name: ExecutedByUser
        * * Display Name: Executed By User
        * * SQL Data Type: nvarchar(100)`),
});

export type ScheduledJobRunEntityType = z.infer<typeof ScheduledJobRunSchema>;

/**
 * zod schema definition for the entity MJ: Scheduled Job Types
 */
export const ScheduledJobTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)
        * * Description: Unique name identifying this job type (e.g., Agent, Action, Report).`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Human-readable description of what this job type does and when it should be used.`),
    DriverClass: z.string().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(255)
        * * Description: TypeScript class name that implements BaseScheduledJob for this job type. Used by ClassFactory to instantiate the correct plugin at runtime.`),
    DomainRunEntity: z.string().nullable().describe(`
        * * Field Name: DomainRunEntity
        * * Display Name: Domain Run Entity
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the entity that stores execution records for this job type (e.g., "MJ: AI Agent Runs", "Action Execution Logs"). Used for generic UI linking to domain-specific run records. NULL if job type uses ScheduledJobRun as its only execution record.`),
    DomainRunEntityFKey: z.string().nullable().describe(`
        * * Field Name: DomainRunEntityFKey
        * * Display Name: Domain Run Entity F Key
        * * SQL Data Type: nvarchar(100)
        * * Description: Name of the foreign key field in the DomainRunEntity that links back to ScheduledJobRun (e.g., "ScheduleID"). Used for querying related domain runs. NULL if DomainRunEntity is NULL.`),
    NotificationsAvailable: z.boolean().describe(`
        * * Field Name: NotificationsAvailable
        * * Display Name: Notifications Available
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates whether this job type supports sending notifications on completion or failure.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type ScheduledJobTypeEntityType = z.infer<typeof ScheduledJobTypeSchema>;

/**
 * zod schema definition for the entity MJ: Scheduled Jobs
 */
export const ScheduledJobSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    JobTypeID: z.string().describe(`
        * * Field Name: JobTypeID
        * * Display Name: Job Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Scheduled Job Types (vwScheduledJobTypes.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(200)
        * * Description: Human-readable name for this scheduled job. Should clearly identify what the job does.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the job's purpose, what it does, and any important notes about its execution.`),
    CronExpression: z.string().describe(`
        * * Field Name: CronExpression
        * * Display Name: Cron Expression
        * * SQL Data Type: nvarchar(120)
        * * Description: Cron expression defining when the job should execute (e.g., "0 30 9 * * MON-FRI" for weekdays at 9:30 AM). Uses standard cron syntax with seconds precision.`),
    Timezone: z.string().describe(`
        * * Field Name: Timezone
        * * Display Name: Timezone
        * * SQL Data Type: nvarchar(64)
        * * Default Value: UTC
        * * Description: IANA timezone identifier for interpreting the cron expression (e.g., "America/Chicago", "UTC"). Ensures consistent scheduling across different server locations.`),
    StartAt: z.date().nullable().describe(`
        * * Field Name: StartAt
        * * Display Name: Start At
        * * SQL Data Type: datetimeoffset
        * * Description: Optional start date/time for when this schedule becomes active. Job will not execute before this time. NULL means active immediately upon creation.`),
    EndAt: z.date().nullable().describe(`
        * * Field Name: EndAt
        * * Display Name: End At
        * * SQL Data Type: datetimeoffset
        * * Description: Optional end date/time for when this schedule expires. Job will not execute after this time. NULL means no expiration.`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Expired'), z.literal('Paused'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Expired
    *   * Paused
    *   * Pending
        * * Description: Current status of the schedule. Pending=created but not yet active, Active=currently running on schedule, Paused=temporarily stopped, Disabled=manually disabled, Expired=past EndAt date.`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Job-type specific configuration stored as JSON. Schema is defined by the ScheduledJobType plugin. For Agents: includes AgentID, StartingPayload, InitialMessage, etc. For Actions: includes ActionID and parameter mappings.`),
    OwnerUserID: z.string().nullable().describe(`
        * * Field Name: OwnerUserID
        * * Display Name: Owner User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: User who owns this schedule. Used as the execution context if no specific user is configured in the job-specific configuration.`),
    LastRunAt: z.date().nullable().describe(`
        * * Field Name: LastRunAt
        * * Display Name: Last Run At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp of the most recent execution. Updated after each run. Used for monitoring and dashboard displays.`),
    NextRunAt: z.date().nullable().describe(`
        * * Field Name: NextRunAt
        * * Display Name: Next Run At
        * * SQL Data Type: datetimeoffset
        * * Description: Calculated timestamp of when this job should next execute based on the cron expression. Updated after each run. Used by scheduler to determine which jobs are due.`),
    RunCount: z.number().describe(`
        * * Field Name: RunCount
        * * Display Name: Run Count
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Total number of times this schedule has been executed, including both successful and failed runs.`),
    SuccessCount: z.number().describe(`
        * * Field Name: SuccessCount
        * * Display Name: Success Count
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Number of times this schedule has executed successfully (Success = true in ScheduledJobRun).`),
    FailureCount: z.number().describe(`
        * * Field Name: FailureCount
        * * Display Name: Failure Count
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Number of times this schedule has executed but failed (Success = false in ScheduledJobRun).`),
    NotifyOnSuccess: z.boolean().describe(`
        * * Field Name: NotifyOnSuccess
        * * Display Name: Notify On Success
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether to send notifications when the job completes successfully.`),
    NotifyOnFailure: z.boolean().describe(`
        * * Field Name: NotifyOnFailure
        * * Display Name: Notify On Failure
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Whether to send notifications when the job fails. Defaults to true for alerting on failures.`),
    NotifyUserID: z.string().nullable().describe(`
        * * Field Name: NotifyUserID
        * * Display Name: Notify User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: User to notify about job execution results. If NULL and notifications are enabled, falls back to OwnerUserID.`),
    NotifyViaEmail: z.boolean().describe(`
        * * Field Name: NotifyViaEmail
        * * Display Name: Notify Via Email
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether to send email notifications. Requires NotifyOnSuccess or NotifyOnFailure to also be enabled.`),
    NotifyViaInApp: z.boolean().describe(`
        * * Field Name: NotifyViaInApp
        * * Display Name: Notify Via In App
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Whether to send in-app notifications. Requires NotifyOnSuccess or NotifyOnFailure to also be enabled. Defaults to true.`),
    LockToken: z.string().nullable().describe(`
        * * Field Name: LockToken
        * * Display Name: Lock Token
        * * SQL Data Type: uniqueidentifier
        * * Description: Unique token used for distributed locking across multiple server instances. Set when a server claims the job for execution. Prevents duplicate executions in multi-server environments.`),
    LockedAt: z.date().nullable().describe(`
        * * Field Name: LockedAt
        * * Display Name: Locked At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp when the lock was acquired. Used with ExpectedCompletionAt to detect stale locks from crashed server instances.`),
    LockedByInstance: z.string().nullable().describe(`
        * * Field Name: LockedByInstance
        * * Display Name: Locked By Instance
        * * SQL Data Type: nvarchar(255)
        * * Description: Identifier of the server instance that currently holds the lock (e.g., "hostname-12345"). Used for troubleshooting and monitoring which server is executing which job.`),
    ExpectedCompletionAt: z.date().nullable().describe(`
        * * Field Name: ExpectedCompletionAt
        * * Display Name: Expected Completion At
        * * SQL Data Type: datetimeoffset
        * * Description: Expected completion time for the current execution. If current time exceeds this and lock still exists, the lock is considered stale and can be claimed by another instance. Handles crashed server cleanup.`),
    ConcurrencyMode: z.union([z.literal('Concurrent'), z.literal('Queue'), z.literal('Skip')]).describe(`
        * * Field Name: ConcurrencyMode
        * * Display Name: Concurrency Mode
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Skip
    * * Value List Type: List
    * * Possible Values 
    *   * Concurrent
    *   * Queue
    *   * Skip
        * * Description: Controls behavior when a new execution is scheduled while a previous execution is still running. Skip=do not start new execution (default), Queue=wait for current to finish then execute, Concurrent=allow multiple simultaneous executions.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    JobType: z.string().describe(`
        * * Field Name: JobType
        * * Display Name: Job Type
        * * SQL Data Type: nvarchar(100)`),
    OwnerUser: z.string().nullable().describe(`
        * * Field Name: OwnerUser
        * * Display Name: Owner User
        * * SQL Data Type: nvarchar(100)`),
    NotifyUser: z.string().nullable().describe(`
        * * Field Name: NotifyUser
        * * Display Name: Notify User
        * * SQL Data Type: nvarchar(100)`),
});

export type ScheduledJobEntityType = z.infer<typeof ScheduledJobSchema>;

/**
 * zod schema definition for the entity MJ: Task Dependencies
 */
export const TaskDependencySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    TaskID: z.string().describe(`
        * * Field Name: TaskID
        * * Display Name: Task ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Tasks (vwTasks.ID)`),
    DependsOnTaskID: z.string().describe(`
        * * Field Name: DependsOnTaskID
        * * Display Name: Depends On Task ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Tasks (vwTasks.ID)`),
    DependencyType: z.union([z.literal('Corequisite'), z.literal('Optional'), z.literal('Prerequisite')]).describe(`
        * * Field Name: DependencyType
        * * Display Name: Dependency Type
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Prerequisite
    * * Value List Type: List
    * * Possible Values 
    *   * Corequisite
    *   * Optional
    *   * Prerequisite
        * * Description: Type of dependency relationship (Prerequisite, Corequisite, Optional)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Task: z.string().describe(`
        * * Field Name: Task
        * * Display Name: Task
        * * SQL Data Type: nvarchar(255)`),
    DependsOnTask: z.string().describe(`
        * * Field Name: DependsOnTask
        * * Display Name: Depends On Task
        * * SQL Data Type: nvarchar(255)`),
});

export type TaskDependencyEntityType = z.infer<typeof TaskDependencySchema>;

/**
 * zod schema definition for the entity MJ: Task Types
 */
export const TaskTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Display name for the task type`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of what this task type represents and when it should be used`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type TaskTypeEntityType = z.infer<typeof TaskTypeSchema>;

/**
 * zod schema definition for the entity MJ: Tasks
 */
export const TaskSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Tasks (vwTasks.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Display name for the task`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed description of the task requirements and objectives`),
    TypeID: z.string().describe(`
        * * Field Name: TypeID
        * * Display Name: Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Task Types (vwTaskTypes.ID)`),
    EnvironmentID: z.string().describe(`
        * * Field Name: EnvironmentID
        * * Display Name: Environment ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
        * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09`),
    ProjectID: z.string().nullable().describe(`
        * * Field Name: ProjectID
        * * Display Name: Project ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Projects (vwProjects.ID)`),
    ConversationDetailID: z.string().nullable().describe(`
        * * Field Name: ConversationDetailID
        * * Display Name: Conversation Detail ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)`),
    UserID: z.string().nullable().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    AgentID: z.string().nullable().describe(`
        * * Field Name: AgentID
        * * Display Name: Agent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)`),
    Status: z.union([z.literal('Blocked'), z.literal('Cancelled'), z.literal('Complete'), z.literal('Deferred'), z.literal('Failed'), z.literal('In Progress'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Blocked
    *   * Cancelled
    *   * Complete
    *   * Deferred
    *   * Failed
    *   * In Progress
    *   * Pending
        * * Description: Current status of the task (Pending, In Progress, Complete, Cancelled, Failed, Blocked, Deferred)`),
    PercentComplete: z.number().nullable().describe(`
        * * Field Name: PercentComplete
        * * Display Name: Percent Complete
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Completion percentage for tracking progress (0-100)`),
    DueAt: z.date().nullable().describe(`
        * * Field Name: DueAt
        * * Display Name: Due At
        * * SQL Data Type: datetimeoffset
        * * Description: Due date and time for task completion`),
    StartedAt: z.date().nullable().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp when work on the task began`),
    CompletedAt: z.date().nullable().describe(`
        * * Field Name: CompletedAt
        * * Display Name: Completed At
        * * SQL Data Type: datetimeoffset
        * * Description: Timestamp when the task was completed`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(255)`),
    Environment: z.string().describe(`
        * * Field Name: Environment
        * * Display Name: Environment
        * * SQL Data Type: nvarchar(255)`),
    Project: z.string().nullable().describe(`
        * * Field Name: Project
        * * Display Name: Project
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().nullable().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Agent: z.string().nullable().describe(`
        * * Field Name: Agent
        * * Display Name: Agent
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type TaskEntityType = z.infer<typeof TaskSchema>;

/**
 * zod schema definition for the entity Output Delivery Types
 */
export const OutputDeliveryTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type OutputDeliveryTypeEntityType = z.infer<typeof OutputDeliveryTypeSchema>;

/**
 * zod schema definition for the entity Output Format Types
 */
export const OutputFormatTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    DisplayFormat: z.string().nullable().describe(`
        * * Field Name: DisplayFormat
        * * Display Name: Display Format
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Configuration or template for how data should be formatted in this output type.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type OutputFormatTypeEntityType = z.infer<typeof OutputFormatTypeSchema>;

/**
 * zod schema definition for the entity Output Trigger Types
 */
export const OutputTriggerTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type OutputTriggerTypeEntityType = z.infer<typeof OutputTriggerTypeSchema>;

/**
 * zod schema definition for the entity Queries
 */
export const QuerySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    CategoryID: z.string().nullable().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Query Categories (vwQueryCategories.ID)`),
    UserQuestion: z.string().nullable().describe(`
        * * Field Name: UserQuestion
        * * Display Name: User Question
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The natural language question this query answers, used for AI query selection.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    SQL: z.string().nullable().describe(`
        * * Field Name: SQL
        * * Display Name: SQL
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The actual SQL query text to execute, may include parameters.`),
    TechnicalDescription: z.string().nullable().describe(`
        * * Field Name: TechnicalDescription
        * * Display Name: Technical Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Technical documentation of the query logic, performance considerations, and parameter usage.`),
    OriginalSQL: z.string().nullable().describe(`
        * * Field Name: OriginalSQL
        * * Display Name: Original SQL
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The original SQL before any optimization or modification, kept for reference.`),
    Feedback: z.string().nullable().describe(`
        * * Field Name: Feedback
        * * Display Name: Feedback
        * * SQL Data Type: nvarchar(MAX)
        * * Description: User feedback on query accuracy, performance, or suggested improvements.`),
    Status: z.union([z.literal('Approved'), z.literal('Expired'), z.literal('Pending'), z.literal('Rejected')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(15)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Expired
    *   * Pending
    *   * Rejected`),
    QualityRank: z.number().nullable().describe(`
        * * Field Name: QualityRank
        * * Display Name: Quality Rank
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Value indicating the quality of the query, higher values mean a better quality`),
    ExecutionCostRank: z.number().nullable().describe(`
        * * Field Name: ExecutionCostRank
        * * Display Name: Execution Cost Rank
        * * SQL Data Type: int
        * * Description: Higher numbers indicate more execution overhead/time required. Useful for planning which queries to use in various scenarios.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    UsesTemplate: z.boolean().nullable().describe(`
        * * Field Name: UsesTemplate
        * * Display Name: Uses Template
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Automatically set to true when the SQL column contains Nunjucks template markers (e.g., {{ paramName }}). This flag is maintained by the QueryEntityServer for performance optimization and discovery purposes. It allows quick filtering of parameterized queries and enables the UI to show parameter inputs only when needed. The system will automatically update this flag when the SQL content changes.`),
    AuditQueryRuns: z.boolean().describe(`
        * * Field Name: AuditQueryRuns
        * * Display Name: Audit Query Runs
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: When true, all executions of this query will be logged to the Audit Log system for tracking and compliance`),
    CacheEnabled: z.boolean().describe(`
        * * Field Name: CacheEnabled
        * * Display Name: Cache Enabled
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: When true, query results will be cached in memory with TTL expiration`),
    CacheTTLMinutes: z.number().nullable().describe(`
        * * Field Name: CacheTTLMinutes
        * * Display Name: Cache TTL Minutes
        * * SQL Data Type: int
        * * Description: Time-to-live in minutes for cached query results. NULL uses default TTL.`),
    CacheMaxSize: z.number().nullable().describe(`
        * * Field Name: CacheMaxSize
        * * Display Name: Cache Max Size
        * * SQL Data Type: int
        * * Description: Maximum number of cached result sets for this query. NULL uses default size limit.`),
    EmbeddingVector: z.string().nullable().describe(`
        * * Field Name: EmbeddingVector
        * * Display Name: Embedding Vector
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional JSON-serialized embedding vector for the query, used for similarity search and query analysis`),
    EmbeddingModelID: z.string().nullable().describe(`
        * * Field Name: EmbeddingModelID
        * * Display Name: Embedding Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
        * * Description: The AI Model used to generate the embedding vector for this query. Required for vector similarity comparisons.`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(50)`),
    EmbeddingModel: z.string().nullable().describe(`
        * * Field Name: EmbeddingModel
        * * Display Name: Embedding Model
        * * SQL Data Type: nvarchar(50)`),
});

export type QueryEntityType = z.infer<typeof QuerySchema>;

/**
 * zod schema definition for the entity Query Categories
 */
export const QueryCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Query Categories (vwQueryCategories.ID)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    DefaultCacheEnabled: z.boolean().describe(`
        * * Field Name: DefaultCacheEnabled
        * * Display Name: Default Cache Enabled
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Default cache setting for queries in this category`),
    DefaultCacheTTLMinutes: z.number().nullable().describe(`
        * * Field Name: DefaultCacheTTLMinutes
        * * Display Name: Default Cache TTL Minutes
        * * SQL Data Type: int
        * * Description: Default TTL in minutes for cached results of queries in this category`),
    DefaultCacheMaxSize: z.number().nullable().describe(`
        * * Field Name: DefaultCacheMaxSize
        * * Display Name: Default Cache Max Size
        * * SQL Data Type: int
        * * Description: Default maximum cache size for queries in this category`),
    CacheInheritanceEnabled: z.boolean().describe(`
        * * Field Name: CacheInheritanceEnabled
        * * Display Name: Cache Inheritance Enabled
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: When true, queries without cache config will inherit from this category`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(50)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type QueryCategoryEntityType = z.infer<typeof QueryCategorySchema>;

/**
 * zod schema definition for the entity Query Entities
 */
export const QueryEntitySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Unique identifier for the QueryEntity record.`),
    QueryID: z.string().describe(`
        * * Field Name: QueryID
        * * Display Name: Query ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Queries (vwQueries.ID)
        * * Description: References the ID of the query in the Queries table.`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)
        * * Description: References the ID of the entity in the Entities table.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    DetectionMethod: z.union([z.literal('AI'), z.literal('Manual')]).describe(`
        * * Field Name: DetectionMethod
        * * Display Name: Detection Method
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Manual
    * * Value List Type: List
    * * Possible Values 
    *   * AI
    *   * Manual
        * * Description: Indicates how this entity-query relationship was identified. "AI" means the QueryEntityServer used LLM analysis to parse the SQL/template and identify which MemberJunction entities are referenced (by analyzing table names, joins, and query structure). "Manual" means a user explicitly marked this entity as being used by the query. AI detection helps maintain accurate metadata automatically as queries evolve.`),
    AutoDetectConfidenceScore: z.number().nullable().describe(`
        * * Field Name: AutoDetectConfidenceScore
        * * Display Name: Auto Detect Confidence Score
        * * SQL Data Type: decimal(3, 2)
        * * Description: Confidence score (0.00-1.00) indicating how certain the AI was that this entity is actually used in the query. Only populated when DetectionMethod="AI". Considers factors like: direct table references vs indirect joins, clear entity names vs ambiguous aliases, and context from the query purpose. Lower scores might indicate the entity is only peripherally involved or the detection was uncertain.`),
    Query: z.string().describe(`
        * * Field Name: Query
        * * Display Name: Query
        * * SQL Data Type: nvarchar(255)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type QueryEntityEntityType = z.infer<typeof QueryEntitySchema>;

/**
 * zod schema definition for the entity Query Fields
 */
export const QueryFieldSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    QueryID: z.string().describe(`
        * * Field Name: QueryID
        * * Display Name: Query ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Queries (vwQueries.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Description: Display order of this field in query results.`),
    SQLBaseType: z.string().describe(`
        * * Field Name: SQLBaseType
        * * Display Name: SQLBase Type
        * * SQL Data Type: nvarchar(50)
        * * Description: The base type, not including parameters, in SQL. For example this field would be nvarchar or decimal, and wouldn't include type parameters. The SQLFullType field provides that information.`),
    SQLFullType: z.string().describe(`
        * * Field Name: SQLFullType
        * * Display Name: SQLFull Type
        * * SQL Data Type: nvarchar(100)
        * * Description: The full SQL type for the field, for example datetime or nvarchar(10) etc.`),
    SourceEntityID: z.string().nullable().describe(`
        * * Field Name: SourceEntityID
        * * Display Name: Source Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    SourceFieldName: z.string().nullable().describe(`
        * * Field Name: SourceFieldName
        * * Display Name: Source Field Name
        * * SQL Data Type: nvarchar(255)
        * * Description: The original field name from the SQL query if different from the display name.`),
    IsComputed: z.boolean().describe(`
        * * Field Name: IsComputed
        * * Display Name: Is Computed
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if this field is calculated from other fields rather than directly from the database.`),
    ComputationDescription: z.string().nullable().describe(`
        * * Field Name: ComputationDescription
        * * Display Name: Computation Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Explanation of how this computed field is calculated.`),
    IsSummary: z.boolean().describe(`
        * * Field Name: IsSummary
        * * Display Name: Is Summary
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether this field represents an aggregate or summary value.`),
    SummaryDescription: z.string().nullable().describe(`
        * * Field Name: SummaryDescription
        * * Display Name: Summary Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of what this summary field represents and how it's aggregated.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    DetectionMethod: z.union([z.literal('AI'), z.literal('Manual')]).describe(`
        * * Field Name: DetectionMethod
        * * Display Name: Detection Method
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Manual
    * * Value List Type: List
    * * Possible Values 
    *   * AI
    *   * Manual
        * * Description: Indicates how this field was identified in the query output. "AI" means the QueryEntityServer used LLM analysis to parse the SELECT clause and determine field names, types, and their source entities/columns. This includes handling aliased columns, computed expressions, aggregations, and CASE statements. "Manual" means a user explicitly defined this output field. AI detection ensures the field list stays synchronized with query changes.`),
    AutoDetectConfidenceScore: z.number().nullable().describe(`
        * * Field Name: AutoDetectConfidenceScore
        * * Display Name: Auto Detect Confidence Score
        * * SQL Data Type: decimal(3, 2)
        * * Description: Confidence score (0.00-1.00) indicating how certain the AI was about this field detection. Only populated when DetectionMethod="AI". Factors include: clarity of the SELECT clause, complexity of any expressions or transformations, confidence in type inference, and ability to trace back to source entity/column. Complex computed fields or ambiguous aliases result in lower scores. This helps identify fields that may need manual verification.`),
    Query: z.string().describe(`
        * * Field Name: Query
        * * Display Name: Query
        * * SQL Data Type: nvarchar(255)`),
    SourceEntity: z.string().nullable().describe(`
        * * Field Name: SourceEntity
        * * Display Name: Source Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type QueryFieldEntityType = z.infer<typeof QueryFieldSchema>;

/**
 * zod schema definition for the entity Query Permissions
 */
export const QueryPermissionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    QueryID: z.string().describe(`
        * * Field Name: QueryID
        * * Display Name: Query ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Queries (vwQueries.ID)`),
    RoleID: z.string().describe(`
        * * Field Name: RoleID
        * * Display Name: Role ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Roles (vwRoles.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Query: z.string().describe(`
        * * Field Name: Query
        * * Display Name: Query
        * * SQL Data Type: nvarchar(255)`),
    Role: z.string().describe(`
        * * Field Name: Role
        * * Display Name: Role
        * * SQL Data Type: nvarchar(50)`),
});

export type QueryPermissionEntityType = z.infer<typeof QueryPermissionSchema>;

/**
 * zod schema definition for the entity Queue Tasks
 */
export const QueueTaskSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    QueueID: z.string().describe(`
        * * Field Name: QueueID
        * * Display Name: Queue ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Queues (vwQueues.ID)`),
    Status: z.union([z.literal('Completed'), z.literal('Failed'), z.literal('In Progress')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nchar(10)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Completed
    *   * Failed
    *   * In Progress`),
    StartedAt: z.date().nullable().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetime`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetime`),
    Data: z.string().nullable().describe(`
        * * Field Name: Data
        * * Display Name: Data
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON payload containing the data needed to process this task.`),
    Options: z.string().nullable().describe(`
        * * Field Name: Options
        * * Display Name: Options
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration options for how this task should be processed.`),
    Output: z.string().nullable().describe(`
        * * Field Name: Output
        * * Display Name: Output
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Result data from task execution, typically in JSON format.`),
    ErrorMessage: z.string().nullable().describe(`
        * * Field Name: ErrorMessage
        * * Display Name: Error Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Error details if the task failed during processing.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Queue: z.string().describe(`
        * * Field Name: Queue
        * * Display Name: Queue
        * * SQL Data Type: nvarchar(50)`),
});

export type QueueTaskEntityType = z.infer<typeof QueueTaskSchema>;

/**
 * zod schema definition for the entity Queue Types
 */
export const QueueTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    DriverClass: z.string().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(100)
        * * Description: Field DriverClass for entity Queue Types.`),
    DriverImportPath: z.string().nullable().describe(`
        * * Field Name: DriverImportPath
        * * Display Name: Driver Import Path
        * * SQL Data Type: nvarchar(200)
        * * Description: Field DriverImportPath for entity Queue Types.`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Field IsActive for entity Queue Types.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type QueueTypeEntityType = z.infer<typeof QueueTypeSchema>;

/**
 * zod schema definition for the entity Queues
 */
export const QueueSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(50)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    QueueTypeID: z.string().describe(`
        * * Field Name: QueueTypeID
        * * Display Name: Queue Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Queue Types (vwQueueTypes.ID)`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Field IsActive for entity Queues.`),
    ProcessPID: z.number().nullable().describe(`
        * * Field Name: ProcessPID
        * * Display Name: Process PID
        * * SQL Data Type: int
        * * Description: Field ProcessPID for entity Queues.`),
    ProcessPlatform: z.string().nullable().describe(`
        * * Field Name: ProcessPlatform
        * * Display Name: Process Platform
        * * SQL Data Type: nvarchar(30)
        * * Description: Field ProcessPlatform for entity Queues.`),
    ProcessVersion: z.string().nullable().describe(`
        * * Field Name: ProcessVersion
        * * Display Name: Process Version
        * * SQL Data Type: nvarchar(15)
        * * Description: Field ProcessVersion for entity Queues.`),
    ProcessCwd: z.string().nullable().describe(`
        * * Field Name: ProcessCwd
        * * Display Name: Process Cwd
        * * SQL Data Type: nvarchar(100)
        * * Description: Field ProcessCwd for entity Queues.`),
    ProcessIPAddress: z.string().nullable().describe(`
        * * Field Name: ProcessIPAddress
        * * Display Name: Process IPAddress
        * * SQL Data Type: nvarchar(50)
        * * Description: Field ProcessIPAddress for entity Queues.`),
    ProcessMacAddress: z.string().nullable().describe(`
        * * Field Name: ProcessMacAddress
        * * Display Name: Process Mac Address
        * * SQL Data Type: nvarchar(50)
        * * Description: Field ProcessMacAddress for entity Queues.`),
    ProcessOSName: z.string().nullable().describe(`
        * * Field Name: ProcessOSName
        * * Display Name: Process OSName
        * * SQL Data Type: nvarchar(25)
        * * Description: Field ProcessOSName for entity Queues.`),
    ProcessOSVersion: z.string().nullable().describe(`
        * * Field Name: ProcessOSVersion
        * * Display Name: Process OSVersion
        * * SQL Data Type: nvarchar(10)
        * * Description: Field ProcessOSVersion for entity Queues.`),
    ProcessHostName: z.string().nullable().describe(`
        * * Field Name: ProcessHostName
        * * Display Name: Process Host Name
        * * SQL Data Type: nvarchar(50)
        * * Description: Field ProcessHostName for entity Queues.`),
    ProcessUserID: z.string().nullable().describe(`
        * * Field Name: ProcessUserID
        * * Display Name: Process User ID
        * * SQL Data Type: nvarchar(25)
        * * Description: Field ProcessUserID for entity Queues.`),
    ProcessUserName: z.string().nullable().describe(`
        * * Field Name: ProcessUserName
        * * Display Name: Process User Name
        * * SQL Data Type: nvarchar(50)
        * * Description: Field ProcessUserName for entity Queues.`),
    LastHeartbeat: z.date().describe(`
        * * Field Name: LastHeartbeat
        * * Display Name: Last Heartbeat
        * * SQL Data Type: datetime
        * * Default Value: getdate()
        * * Description: Field LastHeartbeat for entity Queues.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    QueueType: z.string().describe(`
        * * Field Name: QueueType
        * * Display Name: Queue Type
        * * SQL Data Type: nvarchar(50)`),
});

export type QueueEntityType = z.infer<typeof QueueSchema>;

/**
 * zod schema definition for the entity Recommendation Items
 */
export const RecommendationItemSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    RecommendationID: z.string().describe(`
        * * Field Name: RecommendationID
        * * Display Name: Recommendation ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Recommendations (vwRecommendations.ID)`),
    DestinationEntityID: z.string().describe(`
        * * Field Name: DestinationEntityID
        * * Display Name: Destination Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    DestinationEntityRecordID: z.string().describe(`
        * * Field Name: DestinationEntityRecordID
        * * Display Name: Destination Entity Record ID
        * * SQL Data Type: nvarchar(450)
        * * Description: The record ID of the destination entity`),
    MatchProbability: z.number().nullable().describe(`
        * * Field Name: MatchProbability
        * * Display Name: Match Probability
        * * SQL Data Type: decimal(18, 15)
        * * Description: A value between 0 and 1 indicating the probability of the match, higher numbers indicating a more certain match/recommendation.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    DestinationEntity: z.string().describe(`
        * * Field Name: DestinationEntity
        * * Display Name: Destination Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type RecommendationItemEntityType = z.infer<typeof RecommendationItemSchema>;

/**
 * zod schema definition for the entity Recommendation Providers
 */
export const RecommendationProviderSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type RecommendationProviderEntityType = z.infer<typeof RecommendationProviderSchema>;

/**
 * zod schema definition for the entity Recommendation Runs
 */
export const RecommendationRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    RecommendationProviderID: z.string().describe(`
        * * Field Name: RecommendationProviderID
        * * Display Name: Recommendation Provider ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Recommendation Providers (vwRecommendationProviders.ID)`),
    StartDate: z.date().describe(`
        * * Field Name: StartDate
        * * Display Name: Start Date
        * * SQL Data Type: datetime
        * * Description: The start date of the recommendation run`),
    EndDate: z.date().nullable().describe(`
        * * Field Name: EndDate
        * * Display Name: End Date
        * * SQL Data Type: datetime
        * * Description: The end date of the recommendation run`),
    Status: z.union([z.literal('Canceled'), z.literal('Completed'), z.literal('Error'), z.literal('In Progress'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Canceled
    *   * Completed
    *   * Error
    *   * In Progress
    *   * Pending
        * * Description: The status of the recommendation run`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    RunByUserID: z.string().describe(`
        * * Field Name: RunByUserID
        * * Display Name: Run By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    RecommendationProvider: z.string().describe(`
        * * Field Name: RecommendationProvider
        * * Display Name: Recommendation Provider
        * * SQL Data Type: nvarchar(255)`),
    RunByUser: z.string().describe(`
        * * Field Name: RunByUser
        * * Display Name: Run By User
        * * SQL Data Type: nvarchar(100)`),
});

export type RecommendationRunEntityType = z.infer<typeof RecommendationRunSchema>;

/**
 * zod schema definition for the entity Recommendations
 */
export const RecommendationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    RecommendationRunID: z.string().describe(`
        * * Field Name: RecommendationRunID
        * * Display Name: Recommendation Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Recommendation Runs (vwRecommendationRuns.ID)`),
    SourceEntityID: z.string().describe(`
        * * Field Name: SourceEntityID
        * * Display Name: Source Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    SourceEntityRecordID: z.string().describe(`
        * * Field Name: SourceEntityRecordID
        * * Display Name: Source Entity Record ID
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The record ID of the source entity`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    SourceEntity: z.string().describe(`
        * * Field Name: SourceEntity
        * * Display Name: Source Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type RecommendationEntityType = z.infer<typeof RecommendationSchema>;

/**
 * zod schema definition for the entity Record Change Replay Runs
 */
export const RecordChangeReplayRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    StartedAt: z.date().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetime
        * * Description: Timestamp when the replay run started`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetime
        * * Description: Timestamp when the replay run ended`),
    Status: z.union([z.literal('Complete'), z.literal('Error'), z.literal('In Progress'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * In Progress
    *   * Pending
        * * Description: Status of the replay run (Pending, In Progress, Complete, Error)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type RecordChangeReplayRunEntityType = z.infer<typeof RecordChangeReplayRunSchema>;

/**
 * zod schema definition for the entity Record Changes
 */
export const RecordChangeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record
        * * SQL Data Type: nvarchar(750)
        * * Description: Field RecordID for entity Record Changes.`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    Type: z.union([z.literal('Create'), z.literal('Delete'), z.literal('Update')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Create
    * * Value List Type: List
    * * Possible Values 
    *   * Create
    *   * Delete
    *   * Update
        * * Description: Create, Update, or Delete`),
    Source: z.union([z.literal('External'), z.literal('Internal')]).describe(`
        * * Field Name: Source
        * * Display Name: Source
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Internal
    * * Value List Type: List
    * * Possible Values 
    *   * External
    *   * Internal
        * * Description: Internal or External`),
    ChangedAt: z.date().describe(`
        * * Field Name: ChangedAt
        * * Display Name: Changed At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()
        * * Description: The date/time that the change occured.`),
    ChangesJSON: z.string().describe(`
        * * Field Name: ChangesJSON
        * * Display Name: Changes JSON
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON structure that describes what was changed in a structured format.`),
    ChangesDescription: z.string().describe(`
        * * Field Name: ChangesDescription
        * * Display Name: Changes Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: A generated, human-readable description of what was changed.`),
    FullRecordJSON: z.string().describe(`
        * * Field Name: FullRecordJSON
        * * Display Name: Full Record JSON
        * * SQL Data Type: nvarchar(MAX)
        * * Description: A complete snapshot of the record AFTER the change was applied in a JSON format that can be parsed.`),
    Status: z.union([z.literal('Complete'), z.literal('Error'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * SQL Data Type: nvarchar(50)
        * * Default Value: Complete
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Pending
        * * Description: For internal record changes generated within MJ, the status is immediately Complete. For external changes that are detected, the workflow starts off as Pending, then In Progress and finally either Complete or Error`),
    ErrorLog: z.string().nullable().describe(`
        * * Field Name: ErrorLog
        * * Display Name: Error Log
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Field ErrorLog for entity Record Changes.`),
    ReplayRunID: z.string().nullable().describe(`
        * * Field Name: ReplayRunID
        * * Display Name: Replay Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Record Change Replay Runs (vwRecordChangeReplayRuns.ID)`),
    IntegrationID: z.string().nullable().describe(`
        * * Field Name: IntegrationID
        * * Display Name: Integration ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Integrations (vwIntegrations.ID)`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    CreatedAt: z.date().describe(`
        * * Field Name: CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()
        * * Description: Field CreatedAt for entity Record Changes.`),
    UpdatedAt: z.date().describe(`
        * * Field Name: UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()
        * * Description: Field UpdatedAt for entity Record Changes.`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Integration: z.string().nullable().describe(`
        * * Field Name: Integration
        * * Display Name: Integration
        * * SQL Data Type: nvarchar(100)`),
});

export type RecordChangeEntityType = z.infer<typeof RecordChangeSchema>;

/**
 * zod schema definition for the entity Record Merge Deletion Logs
 */
export const RecordMergeDeletionLogSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    RecordMergeLogID: z.string().describe(`
        * * Field Name: RecordMergeLogID
        * * Display Name: Record Merge Log ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Record Merge Logs (vwRecordMergeLogs.ID)`),
    DeletedRecordID: z.string().describe(`
        * * Field Name: DeletedRecordID
        * * Display Name: Deleted Record ID
        * * SQL Data Type: nvarchar(750)
        * * Description: Field DeletedRecordID for entity Record Merge Deletion Logs.`),
    Status: z.union([z.literal('Complete'), z.literal('Error'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(10)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Pending`),
    ProcessingLog: z.string().nullable().describe(`
        * * Field Name: ProcessingLog
        * * Display Name: Processing Log
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Field ProcessingLog for entity Record Merge Deletion Logs.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type RecordMergeDeletionLogEntityType = z.infer<typeof RecordMergeDeletionLogSchema>;

/**
 * zod schema definition for the entity Record Merge Logs
 */
export const RecordMergeLogSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    SurvivingRecordID: z.string().describe(`
        * * Field Name: SurvivingRecordID
        * * Display Name: Surviving Record ID
        * * SQL Data Type: nvarchar(450)
        * * Description: The ID of the record that survived the merge and contains the consolidated data.`),
    InitiatedByUserID: z.string().describe(`
        * * Field Name: InitiatedByUserID
        * * Display Name: Initiated By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    ApprovalStatus: z.union([z.literal('Approved'), z.literal('Pending'), z.literal('Rejected')]).describe(`
        * * Field Name: ApprovalStatus
        * * Display Name: Approval Status
        * * SQL Data Type: nvarchar(10)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
        * * Description: Field ApprovalStatus for entity Record Merge Logs.`),
    ApprovedByUserID: z.string().nullable().describe(`
        * * Field Name: ApprovedByUserID
        * * Display Name: Approved By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    ProcessingStatus: z.union([z.literal('Complete'), z.literal('Error'), z.literal('Started')]).describe(`
        * * Field Name: ProcessingStatus
        * * Display Name: Processing Status
        * * SQL Data Type: nvarchar(10)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Started
        * * Description: Field ProcessingStatus for entity Record Merge Logs.`),
    ProcessingStartedAt: z.date().describe(`
        * * Field Name: ProcessingStartedAt
        * * Display Name: Processing Started At
        * * SQL Data Type: datetime
        * * Default Value: getdate()
        * * Description: Field ProcessingStartedAt for entity Record Merge Logs.`),
    ProcessingEndedAt: z.date().nullable().describe(`
        * * Field Name: ProcessingEndedAt
        * * Display Name: Processing Ended At
        * * SQL Data Type: datetime
        * * Description: Field ProcessingEndedAt for entity Record Merge Logs.`),
    ProcessingLog: z.string().nullable().describe(`
        * * Field Name: ProcessingLog
        * * Display Name: Processing Log
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Detailed log of the merge process including field mappings and decisions.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    InitiatedByUser: z.string().describe(`
        * * Field Name: InitiatedByUser
        * * Display Name: Initiated By User
        * * SQL Data Type: nvarchar(100)`),
    ApprovedByUser: z.string().nullable().describe(`
        * * Field Name: ApprovedByUser
        * * Display Name: Approved By User
        * * SQL Data Type: nvarchar(100)`),
});

export type RecordMergeLogEntityType = z.infer<typeof RecordMergeLogSchema>;

/**
 * zod schema definition for the entity Report Categories
 */
export const ReportCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Report Categories (vwReportCategories.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(100)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type ReportCategoryEntityType = z.infer<typeof ReportCategorySchema>;

/**
 * zod schema definition for the entity Report Snapshots
 */
export const ReportSnapshotSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ReportID: z.string().describe(`
        * * Field Name: ReportID
        * * Display Name: Report ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Reports (vwReports.ID)`),
    ResultSet: z.string().describe(`
        * * Field Name: ResultSet
        * * Display Name: Result Set
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Field ResultSet for entity Report Snapshots.`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Report: z.string().describe(`
        * * Field Name: Report
        * * Display Name: Report
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type ReportSnapshotEntityType = z.infer<typeof ReportSnapshotSchema>;

/**
 * zod schema definition for the entity Reports
 */
export const ReportSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    CategoryID: z.string().nullable().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Report Categories (vwReportCategories.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    SharingScope: z.union([z.literal('Everyone'), z.literal('None'), z.literal('Specific')]).describe(`
        * * Field Name: SharingScope
        * * Display Name: Sharing Scope
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Personal
    * * Value List Type: List
    * * Possible Values 
    *   * Everyone
    *   * None
    *   * Specific
        * * Description: Field SharingScope for entity Reports.`),
    ConversationID: z.string().nullable().describe(`
        * * Field Name: ConversationID
        * * Display Name: Conversation ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversations (vwConversations.ID)`),
    ConversationDetailID: z.string().nullable().describe(`
        * * Field Name: ConversationDetailID
        * * Display Name: Conversation Detail ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)`),
    DataContextID: z.string().nullable().describe(`
        * * Field Name: DataContextID
        * * Display Name: Data Context ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Data Contexts (vwDataContexts.ID)`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Field Configuration for entity Reports.`),
    OutputTriggerTypeID: z.string().nullable().describe(`
        * * Field Name: OutputTriggerTypeID
        * * Display Name: Output Trigger Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Output Trigger Types (vwOutputTriggerTypes.ID)`),
    OutputFormatTypeID: z.string().nullable().describe(`
        * * Field Name: OutputFormatTypeID
        * * Display Name: Output Format Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Output Format Types (vwOutputFormatTypes.ID)`),
    OutputDeliveryTypeID: z.string().nullable().describe(`
        * * Field Name: OutputDeliveryTypeID
        * * Display Name: Output Delivery Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Output Delivery Types (vwOutputDeliveryTypes.ID)`),
    OutputFrequency: z.string().nullable().describe(`
        * * Field Name: OutputFrequency
        * * Display Name: Output Frequency
        * * SQL Data Type: nvarchar(50)
        * * Description: For scheduled reports, the frequency of generation (Daily, Weekly, Monthly, etc.).`),
    OutputTargetEmail: z.string().nullable().describe(`
        * * Field Name: OutputTargetEmail
        * * Display Name: Output Target Email
        * * SQL Data Type: nvarchar(255)
        * * Description: Email address(es) to send the report to when using email delivery.`),
    OutputWorkflowID: z.string().nullable().describe(`
        * * Field Name: OutputWorkflowID
        * * Display Name: Output Workflow ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Workflows (vwWorkflows.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Thumbnail: z.string().nullable().describe(`
        * * Field Name: Thumbnail
        * * Display Name: Thumbnail
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Thumbnail image for the report that can be displayed in gallery views. Can contain either a URL to an image file or a Base64-encoded image string.`),
    EnvironmentID: z.string().describe(`
        * * Field Name: EnvironmentID
        * * Display Name: Environment ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
        * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(100)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Conversation: z.string().nullable().describe(`
        * * Field Name: Conversation
        * * Display Name: Conversation
        * * SQL Data Type: nvarchar(255)`),
    DataContext: z.string().nullable().describe(`
        * * Field Name: DataContext
        * * Display Name: Data Context
        * * SQL Data Type: nvarchar(255)`),
    OutputTriggerType: z.string().nullable().describe(`
        * * Field Name: OutputTriggerType
        * * Display Name: Output Trigger Type
        * * SQL Data Type: nvarchar(255)`),
    OutputFormatType: z.string().nullable().describe(`
        * * Field Name: OutputFormatType
        * * Display Name: Output Format Type
        * * SQL Data Type: nvarchar(255)`),
    OutputDeliveryType: z.string().nullable().describe(`
        * * Field Name: OutputDeliveryType
        * * Display Name: Output Delivery Type
        * * SQL Data Type: nvarchar(255)`),
    OutputWorkflow: z.string().nullable().describe(`
        * * Field Name: OutputWorkflow
        * * Display Name: Output Workflow
        * * SQL Data Type: nvarchar(100)`),
    Environment: z.string().describe(`
        * * Field Name: Environment
        * * Display Name: Environment
        * * SQL Data Type: nvarchar(255)`),
});

export type ReportEntityType = z.infer<typeof ReportSchema>;

/**
 * zod schema definition for the entity Resource Links
 */
export const ResourceLinkSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()
        * * Description: Unique identifier for each resource link`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)
        * * Description: Foreign key to the user linking the resource`),
    ResourceTypeID: z.string().describe(`
        * * Field Name: ResourceTypeID
        * * Display Name: Resource Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)
        * * Description: Foreign key to the resource type (view, dashboard, etc.)`),
    ResourceRecordID: z.string().describe(`
        * * Field Name: ResourceRecordID
        * * Display Name: Resource Record ID
        * * SQL Data Type: nvarchar(255)
        * * Description: ID of the specific resource being linked`),
    FolderID: z.string().nullable().describe(`
        * * Field Name: FolderID
        * * Display Name: Folder ID
        * * SQL Data Type: nvarchar(255)
        * * Description: Optional folder where the user organizes the linked resource`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    ResourceType: z.string().describe(`
        * * Field Name: ResourceType
        * * Display Name: Resource Type
        * * SQL Data Type: nvarchar(255)`),
});

export type ResourceLinkEntityType = z.infer<typeof ResourceLinkSchema>;

/**
 * zod schema definition for the entity Resource Permissions
 */
export const ResourcePermissionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ResourceTypeID: z.string().describe(`
        * * Field Name: ResourceTypeID
        * * Display Name: Resource Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)
        * * Description: Reference to the type of resource being shared (View, Dashboard, Report, etc.)`),
    ResourceRecordID: z.string().describe(`
        * * Field Name: ResourceRecordID
        * * Display Name: Resource Record ID
        * * SQL Data Type: nvarchar(255)
        * * Description: ID of the specific resource being shared`),
    Type: z.union([z.literal('Role'), z.literal('User')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(10)
    * * Value List Type: List
    * * Possible Values 
    *   * Role
    *   * User
        * * Description: The level of sharing either Role or User`),
    StartSharingAt: z.date().nullable().describe(`
        * * Field Name: StartSharingAt
        * * Display Name: Start Sharing At
        * * SQL Data Type: datetimeoffset
        * * Description: Optional: Date when sharing starts`),
    EndSharingAt: z.date().nullable().describe(`
        * * Field Name: EndSharingAt
        * * Display Name: End Sharing At
        * * SQL Data Type: datetimeoffset
        * * Description: Optional: Date when sharing ends`),
    RoleID: z.string().nullable().describe(`
        * * Field Name: RoleID
        * * Display Name: Role ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Roles (vwRoles.ID)`),
    UserID: z.string().nullable().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    PermissionLevel: z.union([z.literal('Edit'), z.literal('Owner'), z.literal('View')]).nullable().describe(`
        * * Field Name: PermissionLevel
        * * Display Name: Permission Level
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Edit
    *   * Owner
    *   * View
        * * Description: Permission level defining the type of access (View, Edit, Owner)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Status: z.union([z.literal('Approved'), z.literal('Rejected'), z.literal('Requested'), z.literal('Revoked')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Requested
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Rejected
    *   * Requested
    *   * Revoked
        * * Description: Status of the resource permission request. Possible values are Requested, Approved, Rejected, or Revoked.`),
    ResourceType: z.string().describe(`
        * * Field Name: ResourceType
        * * Display Name: Resource Type
        * * SQL Data Type: nvarchar(255)`),
    Role: z.string().nullable().describe(`
        * * Field Name: Role
        * * Display Name: Role
        * * SQL Data Type: nvarchar(50)`),
    User: z.string().nullable().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type ResourcePermissionEntityType = z.infer<typeof ResourcePermissionSchema>;

/**
 * zod schema definition for the entity Resource Types
 */
export const ResourceTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    DisplayName: z.string().describe(`
        * * Field Name: DisplayName
        * * Display Name: Display Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Field DisplayName for entity Resource Types.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    Icon: z.string().nullable().describe(`
        * * Field Name: Icon
        * * Display Name: Icon
        * * SQL Data Type: nvarchar(100)
        * * Description: Icon identifier for displaying this resource type in the UI.`),
    EntityID: z.string().nullable().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    CategoryEntityID: z.string().nullable().describe(`
        * * Field Name: CategoryEntityID
        * * Display Name: Category Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)
        * * Description: Nullable foreign key to the ID column in Entities entity, representing the category entity. ASSUMPTION: If provided, the assumption is there is a self-referencing/recursive foreign key establishing a hierarchy within the Category Entity, commonly called ParentID, but it can be named anything.`),
    Entity: z.string().nullable().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    CategoryEntity: z.string().nullable().describe(`
        * * Field Name: CategoryEntity
        * * Display Name: Category Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type ResourceTypeEntityType = z.infer<typeof ResourceTypeSchema>;

/**
 * zod schema definition for the entity Roles
 */
export const RoleSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(50)
        * * Description: Role with full permissions to manage AI agents and all related entities. This role is required for AgentSpecSync operations to function correctly, allowing create, read, update, and delete operations on agents, prompts, actions, relationships, steps, and paths.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the role`),
    DirectoryID: z.string().nullable().describe(`
        * * Field Name: DirectoryID
        * * Display Name: Directory ID
        * * SQL Data Type: nvarchar(250)
        * * Description: The unique ID of the role in the directory being used for authentication, for example an ID in Azure.`),
    SQLName: z.string().nullable().describe(`
        * * Field Name: SQLName
        * * SQL Data Type: nvarchar(250)
        * * Description: The name of the role in the database, this is used for auto-generating permission statements by CodeGen`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type RoleEntityType = z.infer<typeof RoleSchema>;

/**
 * zod schema definition for the entity Row Level Security Filters
 */
export const RowLevelSecurityFilterSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    FilterText: z.string().nullable().describe(`
        * * Field Name: FilterText
        * * Display Name: Filter Text
        * * SQL Data Type: nvarchar(MAX)
        * * Description: SQL WHERE clause template that filters records based on user context variables.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type RowLevelSecurityFilterEntityType = z.infer<typeof RowLevelSecurityFilterSchema>;

/**
 * zod schema definition for the entity Scheduled Action Params
 */
export const ScheduledActionParamSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    ScheduledActionID: z.string().describe(`
        * * Field Name: ScheduledActionID
        * * Display Name: Scheduled Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Scheduled Actions (vwScheduledActions.ID)`),
    ActionParamID: z.string().describe(`
        * * Field Name: ActionParamID
        * * Display Name: Action Param ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Action Params (vwActionParams.ID)`),
    ValueType: z.union([z.literal('SQL Statement'), z.literal('Static')]).describe(`
        * * Field Name: ValueType
        * * Display Name: Value Type
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * SQL Statement
    *   * Static
        * * Description: Field ValueType for entity Scheduled Action Params.`),
    Value: z.string().nullable().describe(`
        * * Field Name: Value
        * * Display Name: Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Field Value for entity Scheduled Action Params.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ScheduledAction: z.string().describe(`
        * * Field Name: ScheduledAction
        * * Display Name: Scheduled Action
        * * SQL Data Type: nvarchar(255)`),
    ActionParam: z.string().describe(`
        * * Field Name: ActionParam
        * * Display Name: Action Param
        * * SQL Data Type: nvarchar(255)`),
});

export type ScheduledActionParamEntityType = z.infer<typeof ScheduledActionParamSchema>;

/**
 * zod schema definition for the entity Scheduled Actions
 */
export const ScheduledActionSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    CreatedByUserID: z.string().describe(`
        * * Field Name: CreatedByUserID
        * * Display Name: Created By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    ActionID: z.string().describe(`
        * * Field Name: ActionID
        * * Display Name: Action ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Actions (vwActions.ID)`),
    Type: z.union([z.literal('Custom'), z.literal('Daily'), z.literal('Monthly'), z.literal('Weekly'), z.literal('Yearly')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Custom
    *   * Daily
    *   * Monthly
    *   * Weekly
    *   * Yearly
        * * Description: Type of the scheduled action (Daily, Weekly, Monthly, Yearly, Custom)`),
    CronExpression: z.string().nullable().describe(`
        * * Field Name: CronExpression
        * * Display Name: Cron Expression
        * * SQL Data Type: nvarchar(100)
        * * Description: Cron expression defining the schedule, automatically maintained by the system unless Type is Custom, in which case the user directly sets this`),
    Timezone: z.string().describe(`
        * * Field Name: Timezone
        * * Display Name: Timezone
        * * SQL Data Type: nvarchar(100)
        * * Description: Timezone for the scheduled action, if not specified defaults to UTC/Z`),
    Status: z.union([z.literal('Active'), z.literal('Disabled'), z.literal('Expired'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Expired
    *   * Pending
        * * Description: Status of the scheduled action (Pending, Active, Disabled, Expired)`),
    IntervalDays: z.number().nullable().describe(`
        * * Field Name: IntervalDays
        * * Display Name: Interval Days
        * * SQL Data Type: int
        * * Description: Interval in days for the scheduled action`),
    DayOfWeek: z.string().nullable().describe(`
        * * Field Name: DayOfWeek
        * * Display Name: Day Of Week
        * * SQL Data Type: nvarchar(20)
        * * Description: Day of the week for the scheduled action`),
    DayOfMonth: z.number().nullable().describe(`
        * * Field Name: DayOfMonth
        * * Display Name: Day Of Month
        * * SQL Data Type: int
        * * Description: Day of the month for the scheduled action`),
    Month: z.string().nullable().describe(`
        * * Field Name: Month
        * * Display Name: Month
        * * SQL Data Type: nvarchar(20)
        * * Description: Month for the scheduled action`),
    CustomCronExpression: z.string().nullable().describe(`
        * * Field Name: CustomCronExpression
        * * Display Name: Custom Cron Expression
        * * SQL Data Type: nvarchar(255)
        * * Description: Field CustomCronExpression for entity Scheduled Actions.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    CreatedByUser: z.string().describe(`
        * * Field Name: CreatedByUser
        * * Display Name: Created By User
        * * SQL Data Type: nvarchar(100)`),
    Action: z.string().describe(`
        * * Field Name: Action
        * * Display Name: Action
        * * SQL Data Type: nvarchar(425)`),
});

export type ScheduledActionEntityType = z.infer<typeof ScheduledActionSchema>;

/**
 * zod schema definition for the entity Schema Info
 */
export const SchemaInfoSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    SchemaName: z.string().describe(`
        * * Field Name: SchemaName
        * * Display Name: Schema Name
        * * SQL Data Type: nvarchar(50)
        * * Description: The database schema this information applies to.`),
    EntityIDMin: z.number().describe(`
        * * Field Name: EntityIDMin
        * * Display Name: Entity IDMin
        * * SQL Data Type: int
        * * Description: Field EntityIDMin for entity Schema Info.`),
    EntityIDMax: z.number().describe(`
        * * Field Name: EntityIDMax
        * * Display Name: Entity IDMax
        * * SQL Data Type: int
        * * Description: Field EntityIDMax for entity Schema Info.`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type SchemaInfoEntityType = z.infer<typeof SchemaInfoSchema>;

/**
 * zod schema definition for the entity Skills
 */
export const SkillSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(50)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Skills (vwSkills.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(50)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type SkillEntityType = z.infer<typeof SkillSchema>;

/**
 * zod schema definition for the entity Tagged Items
 */
export const TaggedItemSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    TagID: z.string().describe(`
        * * Field Name: TagID
        * * Display Name: Tag ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Tags (vwTags.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record ID
        * * SQL Data Type: nvarchar(450)
        * * Description: Field RecordID for entity Tagged Items.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Tag: z.string().describe(`
        * * Field Name: Tag
        * * Display Name: Tag
        * * SQL Data Type: nvarchar(255)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type TaggedItemEntityType = z.infer<typeof TaggedItemSchema>;

/**
 * zod schema definition for the entity Tags
 */
export const TagSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Tags (vwTags.ID)`),
    DisplayName: z.string().describe(`
        * * Field Name: DisplayName
        * * Display Name: Display Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Field DisplayName for entity Tags.`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type TagEntityType = z.infer<typeof TagSchema>;

/**
 * zod schema definition for the entity Template Categories
 */
export const TemplateCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the template category`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the template category`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Template Categories (vwTemplateCategories.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type TemplateCategoryEntityType = z.infer<typeof TemplateCategorySchema>;

/**
 * zod schema definition for the entity Template Content Types
 */
export const TemplateContentTypeSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the template content type`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the template content type`),
    CodeType: z.union([z.literal('CSS'), z.literal('HTML'), z.literal('JSON'), z.literal('JavaScript'), z.literal('Nunjucks'), z.literal('Other'), z.literal('Python'), z.literal('TypeScript')]).describe(`
        * * Field Name: CodeType
        * * Display Name: Code Type
        * * SQL Data Type: nvarchar(25)
        * * Default Value: Other
    * * Value List Type: List
    * * Possible Values 
    *   * CSS
    *   * HTML
    *   * JSON
    *   * JavaScript
    *   * Nunjucks
    *   * Other
    *   * Python
    *   * TypeScript
        * * Description: Refers to the primary language or codetype of the templates of this type, HTML, JSON, JavaScript, etc`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type TemplateContentTypeEntityType = z.infer<typeof TemplateContentTypeSchema>;

/**
 * zod schema definition for the entity Template Contents
 */
export const TemplateContentSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    TemplateID: z.string().describe(`
        * * Field Name: TemplateID
        * * Display Name: Template ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Templates (vwTemplates.ID)`),
    TypeID: z.string().describe(`
        * * Field Name: TypeID
        * * Display Name: Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Template Content Types (vwTemplateContentTypes.ID)`),
    TemplateText: z.string().nullable().describe(`
        * * Field Name: TemplateText
        * * Display Name: Template Text
        * * SQL Data Type: nvarchar(MAX)
        * * Description: The actual text content for the template`),
    Priority: z.number().describe(`
        * * Field Name: Priority
        * * Display Name: Priority
        * * SQL Data Type: int
        * * Description: Priority of the content version, higher priority versions will be used ahead of lower priority versions for a given Type`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Indicates whether the content is active or not. Use this to disable a particular Template Content item without having to remove it`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Template: z.string().describe(`
        * * Field Name: Template
        * * Display Name: Template
        * * SQL Data Type: nvarchar(255)`),
    Type: z.string().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(255)`),
});

export type TemplateContentEntityType = z.infer<typeof TemplateContentSchema>;

/**
 * zod schema definition for the entity Template Params
 */
export const TemplateParamSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    TemplateID: z.string().describe(`
        * * Field Name: TemplateID
        * * Display Name: Template ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Templates (vwTemplates.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the parameter`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the parameter`),
    Type: z.union([z.literal('Array'), z.literal('Entity'), z.literal('Object'), z.literal('Record'), z.literal('Scalar')]).describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Scalar
    * * Value List Type: List
    * * Possible Values 
    *   * Array
    *   * Entity
    *   * Object
    *   * Record
    *   * Scalar
        * * Description: Type of the parameter - Record is an individual record within the entity specified by EntityID. Entity means an entire Entity or an entity filtered by the LinkedParameterName/Field attributes and/or ExtraFilter. Object is any valid JSON object. Array and Scalar have their common meanings.`),
    DefaultValue: z.string().nullable().describe(`
        * * Field Name: DefaultValue
        * * Display Name: Default Value
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Default value of the parameter`),
    IsRequired: z.boolean().describe(`
        * * Field Name: IsRequired
        * * Display Name: Is Required
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether this parameter must be provided when using the template.`),
    LinkedParameterName: z.string().nullable().describe(`
        * * Field Name: LinkedParameterName
        * * Display Name: Linked Parameter Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Only used when Type=Entity, this is used to link an Entity parameter with another parameter so that the rows in the Entity parameter can be filtered automatically based on the FKEY relationship between the Record and this Entity parameter. For example, if the Entity-based parameter is for an entity like Activities and there is another parameter of type Record for an entity like Contacts, in that situation the Activities Parameter would point to the Contacts parameter as the LinkedParameterName because we would filter down the Activities in each template render to only those linked to the Contact.`),
    LinkedParameterField: z.string().nullable().describe(`
        * * Field Name: LinkedParameterField
        * * Display Name: Linked Parameter Field
        * * SQL Data Type: nvarchar(500)
        * * Description: If the LinkedParameterName is specified, this is an optional setting to specify the field within the LinkedParameter that will be used for filtering. This is only needed if there is more than one foreign key relationship between the Entity parameter and the Linked parameter, or if there is no defined foreign key in the database between the two entities.`),
    ExtraFilter: z.string().nullable().describe(`
        * * Field Name: ExtraFilter
        * * Display Name: Extra Filter
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Only used when Type = Entity, used to specify an optional filter to reduce the set of rows that are returned for each of the templates being rendered.`),
    EntityID: z.string().nullable().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().nullable().describe(`
        * * Field Name: RecordID
        * * Display Name: Record ID
        * * SQL Data Type: nvarchar(2000)
        * * Description: Record ID, used only when Type is Record and a specific hardcoded record ID is desired, this is an uncommon use case, helpful for pulling in static types and metadata in some cases.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    OrderBy: z.string().nullable().describe(`
        * * Field Name: OrderBy
        * * Display Name: Order By
        * * SQL Data Type: nvarchar(MAX)
        * * Description: This field is used only when the Type of the TemplateParam table is "Entity". It is an optional field used to specify the sorting order for the related entity data that is used in the template for the Entity specified.`),
    TemplateContentID: z.string().nullable().describe(`
        * * Field Name: TemplateContentID
        * * Display Name: Template Content ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Template Contents (vwTemplateContents.ID)
        * * Description: Optional reference to a specific template content. When NULL, this parameter applies to all content items within the template. When set, this parameter applies only to the specified template content.`),
    Template: z.string().describe(`
        * * Field Name: Template
        * * Display Name: Template
        * * SQL Data Type: nvarchar(255)`),
    Entity: z.string().nullable().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type TemplateParamEntityType = z.infer<typeof TemplateParamSchema>;

/**
 * zod schema definition for the entity Templates
 */
export const TemplateSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)
        * * Description: Name of the template`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Description of the template`),
    CategoryID: z.string().nullable().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Template Categories (vwTemplateCategories.ID)`),
    UserPrompt: z.string().nullable().describe(`
        * * Field Name: UserPrompt
        * * Display Name: User Prompt
        * * SQL Data Type: nvarchar(MAX)
        * * Description: This prompt will be used by the AI to generate template content as requested by the user.`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    ActiveAt: z.date().nullable().describe(`
        * * Field Name: ActiveAt
        * * Display Name: Active At
        * * SQL Data Type: datetime
        * * Description: Optional, if provided, this template will not be available for use until the specified date. Requires IsActive to be set to 1`),
    DisabledAt: z.date().nullable().describe(`
        * * Field Name: DisabledAt
        * * Display Name: Disabled At
        * * SQL Data Type: datetime
        * * Description: Optional, if provided, this template will not be available for use after the specified date. If IsActive=0, this has no effect.`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: If set to 0, the template will be disabled regardless of the values in ActiveAt/DisabledAt. `),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Category: z.string().nullable().describe(`
        * * Field Name: Category
        * * Display Name: Category
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type TemplateEntityType = z.infer<typeof TemplateSchema>;

/**
 * zod schema definition for the entity User Application Entities
 */
export const UserApplicationEntitySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserApplicationID: z.string().describe(`
        * * Field Name: UserApplicationID
        * * Display Name: UserApplication ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: User Applications (vwUserApplications.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Display order of this entity for the user within the application.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Application: z.string().describe(`
        * * Field Name: Application
        * * Display Name: Application
        * * SQL Data Type: nvarchar(100)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
});

export type UserApplicationEntityEntityType = z.infer<typeof UserApplicationEntitySchema>;

/**
 * zod schema definition for the entity User Applications
 */
export const UserApplicationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    ApplicationID: z.string().describe(`
        * * Field Name: ApplicationID
        * * Display Name: Application ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Applications (vwApplications.ID)`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Display order of this application in the user's navigation.`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Whether this application is currently visible to the user.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Application: z.string().describe(`
        * * Field Name: Application
        * * Display Name: Application
        * * SQL Data Type: nvarchar(100)`),
});

export type UserApplicationEntityType = z.infer<typeof UserApplicationSchema>;

/**
 * zod schema definition for the entity User Favorites
 */
export const UserFavoriteSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record
        * * SQL Data Type: nvarchar(450)
        * * Description: The ID of the favorited record.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    EntityBaseTable: z.string().describe(`
        * * Field Name: EntityBaseTable
        * * Display Name: Entity Base Table
        * * SQL Data Type: nvarchar(255)`),
    EntityBaseView: z.string().describe(`
        * * Field Name: EntityBaseView
        * * Display Name: Entity Base View
        * * SQL Data Type: nvarchar(255)`),
});

export type UserFavoriteEntityType = z.infer<typeof UserFavoriteSchema>;

/**
 * zod schema definition for the entity User Notifications
 */
export const UserNotificationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    Title: z.string().nullable().describe(`
        * * Field Name: Title
        * * Display Name: Title
        * * SQL Data Type: nvarchar(255)
        * * Description: Brief title or subject of the notification.`),
    Message: z.string().nullable().describe(`
        * * Field Name: Message
        * * Display Name: Message
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Full notification message content.`),
    ResourceTypeID: z.string().nullable().describe(`
        * * Field Name: ResourceTypeID
        * * Display Name: Resource Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)`),
    ResourceConfiguration: z.string().nullable().describe(`
        * * Field Name: ResourceConfiguration
        * * Display Name: Resource Configuration
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Field ResourceConfiguration for entity User Notifications.`),
    Unread: z.boolean().describe(`
        * * Field Name: Unread
        * * Display Name: Unread
        * * SQL Data Type: bit
        * * Default Value: 1
        * * Description: Field Unread for entity User Notifications.`),
    ReadAt: z.date().nullable().describe(`
        * * Field Name: ReadAt
        * * Display Name: Read At
        * * SQL Data Type: datetime
        * * Description: Timestamp when the user read this notification.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    ResourceRecordID: z.string().nullable().describe(`
        * * Field Name: ResourceRecordID
        * * Display Name: Resource Record ID
        * * SQL Data Type: uniqueidentifier
        * * Description: ID of the specific record this notification is about.`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    ResourceType: z.string().nullable().describe(`
        * * Field Name: ResourceType
        * * Display Name: Resource Type
        * * SQL Data Type: nvarchar(255)`),
});

export type UserNotificationEntityType = z.infer<typeof UserNotificationSchema>;

/**
 * zod schema definition for the entity User Record Logs
 */
export const UserRecordLogSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record
        * * SQL Data Type: nvarchar(450)
        * * Description: The ID of the accessed record.`),
    EarliestAt: z.date().describe(`
        * * Field Name: EarliestAt
        * * Display Name: Earliest At
        * * SQL Data Type: datetime
        * * Default Value: getdate()
        * * Description: Field EarliestAt for entity User Record Logs.`),
    LatestAt: z.date().describe(`
        * * Field Name: LatestAt
        * * Display Name: Latest At
        * * SQL Data Type: datetime
        * * Default Value: getdate()
        * * Description: Field LatestAt for entity User Record Logs.`),
    TotalCount: z.number().describe(`
        * * Field Name: TotalCount
        * * Display Name: Total Count
        * * SQL Data Type: int
        * * Default Value: 0
        * * Description: Field TotalCount for entity User Record Logs.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    UserName: z.string().describe(`
        * * Field Name: UserName
        * * Display Name: User Name
        * * SQL Data Type: nvarchar(100)`),
    UserFirstLast: z.string().nullable().describe(`
        * * Field Name: UserFirstLast
        * * Display Name: User First Last
        * * SQL Data Type: nvarchar(101)`),
    UserEmail: z.string().describe(`
        * * Field Name: UserEmail
        * * Display Name: User Email
        * * SQL Data Type: nvarchar(100)`),
    UserSupervisor: z.string().nullable().describe(`
        * * Field Name: UserSupervisor
        * * Display Name: User Supervisor
        * * SQL Data Type: nvarchar(81)`),
    UserSupervisorEmail: z.string().nullable().describe(`
        * * Field Name: UserSupervisorEmail
        * * Display Name: User Supervisor Email
        * * SQL Data Type: nvarchar(100)`),
});

export type UserRecordLogEntityType = z.infer<typeof UserRecordLogSchema>;

/**
 * zod schema definition for the entity User Roles
 */
export const UserRoleSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    RoleID: z.string().describe(`
        * * Field Name: RoleID
        * * Display Name: Role ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Roles (vwRoles.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    Role: z.string().describe(`
        * * Field Name: Role
        * * Display Name: Role
        * * SQL Data Type: nvarchar(50)`),
});

export type UserRoleEntityType = z.infer<typeof UserRoleSchema>;

/**
 * zod schema definition for the entity User View Categories
 */
export const UserViewCategorySchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    ParentID: z.string().nullable().describe(`
        * * Field Name: ParentID
        * * Display Name: Parent ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: User View Categories (vwUserViewCategories.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Parent: z.string().nullable().describe(`
        * * Field Name: Parent
        * * Display Name: Parent
        * * SQL Data Type: nvarchar(100)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
    RootParentID: z.string().nullable().describe(`
        * * Field Name: RootParentID
        * * Display Name: Root Parent ID
        * * SQL Data Type: uniqueidentifier`),
});

export type UserViewCategoryEntityType = z.infer<typeof UserViewCategorySchema>;

/**
 * zod schema definition for the entity User View Run Details
 */
export const UserViewRunDetailSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserViewRunID: z.string().describe(`
        * * Field Name: UserViewRunID
        * * Display Name: User View Run ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: User View Runs (vwUserViewRuns.ID)`),
    RecordID: z.string().describe(`
        * * Field Name: RecordID
        * * Display Name: Record
        * * SQL Data Type: nvarchar(450)
        * * Description: Field RecordID for entity User View Run Details.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    UserViewID: z.string().describe(`
        * * Field Name: UserViewID
        * * Display Name: User View
        * * SQL Data Type: uniqueidentifier`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity
        * * SQL Data Type: uniqueidentifier`),
});

export type UserViewRunDetailEntityType = z.infer<typeof UserViewRunDetailSchema>;

/**
 * zod schema definition for the entity User View Runs
 */
export const UserViewRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserViewID: z.string().describe(`
        * * Field Name: UserViewID
        * * Display Name: User View ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: User Views (vwUserViews.ID)`),
    RunAt: z.date().describe(`
        * * Field Name: RunAt
        * * Display Name: Run At
        * * SQL Data Type: datetime
        * * Description: Timestamp when the view was executed.`),
    RunByUserID: z.string().describe(`
        * * Field Name: RunByUserID
        * * Display Name: Run By User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    UserView: z.string().describe(`
        * * Field Name: UserView
        * * Display Name: User View
        * * SQL Data Type: nvarchar(100)`),
    RunByUser: z.string().describe(`
        * * Field Name: RunByUser
        * * Display Name: Run By User
        * * SQL Data Type: nvarchar(100)`),
});

export type UserViewRunEntityType = z.infer<typeof UserViewRunSchema>;

/**
 * zod schema definition for the entity User Views
 */
export const UserViewSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    EntityID: z.string().describe(`
        * * Field Name: EntityID
        * * Display Name: Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    CategoryID: z.string().nullable().describe(`
        * * Field Name: CategoryID
        * * Display Name: Category ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: User View Categories (vwUserViewCategories.ID)`),
    IsShared: z.boolean().describe(`
        * * Field Name: IsShared
        * * Display Name: Is Shared
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether this view is shared with other users.`),
    IsDefault: z.boolean().describe(`
        * * Field Name: IsDefault
        * * Display Name: Is Default
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether this is the user's default view for the entity.`),
    GridState: z.string().nullable().describe(`
        * * Field Name: GridState
        * * Display Name: Grid State
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON storing complete grid configuration including columns, widths, and formatting.`),
    FilterState: z.string().nullable().describe(`
        * * Field Name: FilterState
        * * Display Name: Filter State
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON storing the view's filter configuration.`),
    CustomFilterState: z.boolean().describe(`
        * * Field Name: CustomFilterState
        * * Display Name: Custom Filter State
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if custom filters beyond standard options are applied.`),
    SmartFilterEnabled: z.boolean().describe(`
        * * Field Name: SmartFilterEnabled
        * * Display Name: Smart Filter Enabled
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether AI-powered smart filtering is enabled for this view.`),
    SmartFilterPrompt: z.string().nullable().describe(`
        * * Field Name: SmartFilterPrompt
        * * Display Name: Smart Filter Prompt
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Natural language prompt for AI-powered filtering.`),
    SmartFilterWhereClause: z.string().nullable().describe(`
        * * Field Name: SmartFilterWhereClause
        * * Display Name: Smart Filter Where Clause
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Generated WHERE clause from smart filter processing.`),
    SmartFilterExplanation: z.string().nullable().describe(`
        * * Field Name: SmartFilterExplanation
        * * Display Name: Smart Filter Explanation
        * * SQL Data Type: nvarchar(MAX)
        * * Description: AI-generated explanation of what the smart filter does.`),
    WhereClause: z.string().nullable().describe(`
        * * Field Name: WhereClause
        * * Display Name: Where Clause
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Direct SQL WHERE clause for the view filter.`),
    CustomWhereClause: z.boolean().describe(`
        * * Field Name: CustomWhereClause
        * * Display Name: Custom Where Clause
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Indicates if a custom WHERE clause is used instead of standard filters.`),
    SortState: z.string().nullable().describe(`
        * * Field Name: SortState
        * * Display Name: Sort State
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON storing the view's sort configuration.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Thumbnail: z.string().nullable().describe(`
        * * Field Name: Thumbnail
        * * Display Name: Thumbnail
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Thumbnail image for the user view that can be displayed in gallery views. Can contain either a URL to an image file or a Base64-encoded image string.`),
    UserName: z.string().describe(`
        * * Field Name: UserName
        * * Display Name: User Name
        * * SQL Data Type: nvarchar(100)`),
    UserFirstLast: z.string().nullable().describe(`
        * * Field Name: UserFirstLast
        * * Display Name: User First Last
        * * SQL Data Type: nvarchar(101)`),
    UserEmail: z.string().describe(`
        * * Field Name: UserEmail
        * * Display Name: User Email
        * * SQL Data Type: nvarchar(100)`),
    UserType: z.string().describe(`
        * * Field Name: UserType
        * * Display Name: User Type
        * * SQL Data Type: nchar(15)`),
    Entity: z.string().describe(`
        * * Field Name: Entity
        * * Display Name: Entity
        * * SQL Data Type: nvarchar(255)`),
    EntityBaseView: z.string().describe(`
        * * Field Name: EntityBaseView
        * * Display Name: Entity Base View
        * * SQL Data Type: nvarchar(255)`),
});

export type UserViewEntityType = z.infer<typeof UserViewSchema>;

/**
 * zod schema definition for the entity Users
 */
export const UserSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(100)`),
    FirstName: z.string().nullable().describe(`
        * * Field Name: FirstName
        * * Display Name: First Name
        * * SQL Data Type: nvarchar(50)
        * * Description: User's first name or given name.`),
    LastName: z.string().nullable().describe(`
        * * Field Name: LastName
        * * Display Name: Last Name
        * * SQL Data Type: nvarchar(50)
        * * Description: User's last name or surname.`),
    Title: z.string().nullable().describe(`
        * * Field Name: Title
        * * Display Name: Title
        * * SQL Data Type: nvarchar(50)
        * * Description: User's professional title or salutation.`),
    Email: z.string().describe(`
        * * Field Name: Email
        * * SQL Data Type: nvarchar(100)
        * * Description: Unique email address for the user. This field must be unique across all users in the system.`),
    Type: z.union([z.literal('Owner'), z.literal('User')]).describe(`
        * * Field Name: Type
        * * SQL Data Type: nchar(15)
    * * Value List Type: List
    * * Possible Values 
    *   * Owner
    *   * User
        * * Description: User account type (User, Guest, System, API).`),
    IsActive: z.boolean().describe(`
        * * Field Name: IsActive
        * * Display Name: Is Active
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: Whether this user account is currently active and can log in.`),
    LinkedRecordType: z.string().describe(`
        * * Field Name: LinkedRecordType
        * * Display Name: Linked Record Type
        * * SQL Data Type: nchar(10)
        * * Default Value: None
        * * Description: Type of record this user is linked to (None, Employee, Contact, etc.).`),
    LinkedEntityID: z.string().nullable().describe(`
        * * Field Name: LinkedEntityID
        * * Display Name: Linked Entity ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Entities (vwEntities.ID)`),
    LinkedEntityRecordID: z.string().nullable().describe(`
        * * Field Name: LinkedEntityRecordID
        * * Display Name: Linked Entity Record ID
        * * SQL Data Type: nvarchar(450)
        * * Description: ID of the specific record this user is linked to.`),
    EmployeeID: z.string().nullable().describe(`
        * * Field Name: EmployeeID
        * * Display Name: Employee
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Employees (vwEmployees.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: __mj _Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: __mj _Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    UserImageURL: z.string().nullable().describe(`
        * * Field Name: UserImageURL
        * * Display Name: User Image URL
        * * SQL Data Type: nvarchar(MAX)
        * * Description: User avatar image. Can be a Base64 encoded data URI (e.g., "data:image/png;base64,...") or a URL to an image file. Preferred over UserImageIconClass when present. Recommended for small thumbnail images only to maintain performance.`),
    UserImageIconClass: z.string().nullable().describe(`
        * * Field Name: UserImageIconClass
        * * Display Name: User Image Icon Class
        * * SQL Data Type: nvarchar(100)
        * * Description: Font Awesome icon class for user avatar (e.g., "fa-solid fa-user-astronaut"). Used as fallback when UserImageURL is not provided. Example classes: "fa-solid fa-user", "fa-regular fa-circle-user", "fa-solid fa-user-tie".`),
    FirstLast: z.string().nullable().describe(`
        * * Field Name: FirstLast
        * * Display Name: First Last
        * * SQL Data Type: nvarchar(101)`),
    EmployeeFirstLast: z.string().nullable().describe(`
        * * Field Name: EmployeeFirstLast
        * * Display Name: Employee First Last
        * * SQL Data Type: nvarchar(81)`),
    EmployeeEmail: z.string().nullable().describe(`
        * * Field Name: EmployeeEmail
        * * Display Name: Employee Email
        * * SQL Data Type: nvarchar(100)`),
    EmployeeTitle: z.string().nullable().describe(`
        * * Field Name: EmployeeTitle
        * * Display Name: Employee Title
        * * SQL Data Type: nvarchar(50)`),
    EmployeeSupervisor: z.string().nullable().describe(`
        * * Field Name: EmployeeSupervisor
        * * Display Name: Employee Supervisor
        * * SQL Data Type: nvarchar(81)`),
    EmployeeSupervisorEmail: z.string().nullable().describe(`
        * * Field Name: EmployeeSupervisorEmail
        * * Display Name: Employee Supervisor Email
        * * SQL Data Type: nvarchar(100)`),
});

export type UserEntityType = z.infer<typeof UserSchema>;

/**
 * zod schema definition for the entity Vector Databases
 */
export const VectorDatabaseSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    DefaultURL: z.string().nullable().describe(`
        * * Field Name: DefaultURL
        * * Display Name: Default URL
        * * SQL Data Type: nvarchar(255)
        * * Description: Field DefaultURL for entity Vector Databases.`),
    ClassKey: z.string().nullable().describe(`
        * * Field Name: ClassKey
        * * Display Name: Class Key
        * * SQL Data Type: nvarchar(100)
        * * Description: Field ClassKey for entity Vector Databases.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type VectorDatabaseEntityType = z.infer<typeof VectorDatabaseSchema>;

/**
 * zod schema definition for the entity Vector Indexes
 */
export const VectorIndexSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    VectorDatabaseID: z.string().describe(`
        * * Field Name: VectorDatabaseID
        * * Display Name: Vector Database ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Vector Databases (vwVectorDatabases.ID)`),
    EmbeddingModelID: z.string().describe(`
        * * Field Name: EmbeddingModelID
        * * Display Name: Embedding Model ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    VectorDatabase: z.string().describe(`
        * * Field Name: VectorDatabase
        * * Display Name: Vector Database
        * * SQL Data Type: nvarchar(100)`),
    EmbeddingModel: z.string().describe(`
        * * Field Name: EmbeddingModel
        * * Display Name: Embedding Model
        * * SQL Data Type: nvarchar(50)`),
});

export type VectorIndexEntityType = z.infer<typeof VectorIndexSchema>;

/**
 * zod schema definition for the entity Version Installations
 */
export const VersionInstallationSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    MajorVersion: z.number().describe(`
        * * Field Name: MajorVersion
        * * Display Name: Major Version
        * * SQL Data Type: int
        * * Description: Major version number installed.`),
    MinorVersion: z.number().describe(`
        * * Field Name: MinorVersion
        * * Display Name: Minor Version
        * * SQL Data Type: int
        * * Description: Minor version number installed.`),
    PatchVersion: z.number().describe(`
        * * Field Name: PatchVersion
        * * Display Name: Patch Version
        * * SQL Data Type: int
        * * Description: Patch version number installed.`),
    Type: z.union([z.literal('New'), z.literal('Upgrade')]).nullable().describe(`
        * * Field Name: Type
        * * Display Name: Type
        * * SQL Data Type: nvarchar(20)
        * * Default Value: System
    * * Value List Type: List
    * * Possible Values 
    *   * New
    *   * Upgrade
        * * Description: What type of installation was applied`),
    InstalledAt: z.date().describe(`
        * * Field Name: InstalledAt
        * * Display Name: Installed At
        * * SQL Data Type: datetime
        * * Description: Timestamp when this version was installed.`),
    Status: z.union([z.literal('Complete'), z.literal('Failed'), z.literal('In Progress'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * Display Name: Status
        * * SQL Data Type: nvarchar(20)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In Progress
    *   * Pending
        * * Description: Pending, Complete, Failed`),
    InstallLog: z.string().nullable().describe(`
        * * Field Name: InstallLog
        * * Display Name: Install Log
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Any logging that was saved from the installation process`),
    Comments: z.string().nullable().describe(`
        * * Field Name: Comments
        * * Display Name: Comments
        * * SQL Data Type: nvarchar(MAX)
        * * Description: Optional, comments the administrator wants to save for each installed version`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    CompleteVersion: z.string().nullable().describe(`
        * * Field Name: CompleteVersion
        * * Display Name: Complete Version
        * * SQL Data Type: nvarchar(302)`),
});

export type VersionInstallationEntityType = z.infer<typeof VersionInstallationSchema>;

/**
 * zod schema definition for the entity Workflow Engines
 */
export const WorkflowEngineSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    DriverPath: z.string().describe(`
        * * Field Name: DriverPath
        * * Display Name: Driver Path
        * * SQL Data Type: nvarchar(500)
        * * Description: Import path for the workflow engine driver.`),
    DriverClass: z.string().describe(`
        * * Field Name: DriverClass
        * * Display Name: Driver Class
        * * SQL Data Type: nvarchar(100)
        * * Description: Class name implementing the workflow engine interface.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
});

export type WorkflowEngineEntityType = z.infer<typeof WorkflowEngineSchema>;

/**
 * zod schema definition for the entity Workflow Runs
 */
export const WorkflowRunSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    WorkflowID: z.string().describe(`
        * * Field Name: WorkflowID
        * * Display Name: Workflow ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Workflows (vwWorkflows.ID)`),
    ExternalSystemRecordID: z.string().describe(`
        * * Field Name: ExternalSystemRecordID
        * * Display Name: External System Record
        * * SQL Data Type: nvarchar(500)
        * * Description: Field ExternalSystemRecordID for entity Workflow Runs.`),
    StartedAt: z.date().describe(`
        * * Field Name: StartedAt
        * * Display Name: Started At
        * * SQL Data Type: datetime`),
    EndedAt: z.date().nullable().describe(`
        * * Field Name: EndedAt
        * * Display Name: Ended At
        * * SQL Data Type: datetime`),
    Status: z.union([z.literal('Complete'), z.literal('Failed'), z.literal('In Progress'), z.literal('Pending')]).describe(`
        * * Field Name: Status
        * * SQL Data Type: nchar(10)
        * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In Progress
    *   * Pending`),
    Results: z.string().nullable().describe(`
        * * Field Name: Results
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON-formatted detailed results from the workflow execution, including outputs from each step and any error information.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Workflow: z.string().describe(`
        * * Field Name: Workflow
        * * Display Name: Workflow
        * * SQL Data Type: nvarchar(100)`),
    WorkflowEngineName: z.string().describe(`
        * * Field Name: WorkflowEngineName
        * * Display Name: Workflow Engine Name
        * * SQL Data Type: nvarchar(100)`),
});

export type WorkflowRunEntityType = z.infer<typeof WorkflowRunSchema>;

/**
 * zod schema definition for the entity Workflows
 */
export const WorkflowSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * SQL Data Type: nvarchar(100)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    WorkflowEngineID: z.string().describe(`
        * * Field Name: WorkflowEngineID
        * * Display Name: Workflow Engine ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Workflow Engines (vwWorkflowEngines.ID)`),
    ExternalSystemRecordID: z.string().describe(`
        * * Field Name: ExternalSystemRecordID
        * * Display Name: External System Record
        * * SQL Data Type: nvarchar(100)
        * * Description: The unique identifier of this workflow in an external system, used for synchronization with external workflow engines.`),
    AutoRunEnabled: z.boolean().describe(`
        * * Field Name: AutoRunEnabled
        * * Display Name: Auto Run Enabled
        * * SQL Data Type: bit
        * * Default Value: 0
        * * Description: If set to 1, the workflow will be run automatically on the interval specified by the AutoRunIntervalType and AutoRunInterval fields`),
    AutoRunIntervalUnits: z.union([z.literal('Days'), z.literal('Hours'), z.literal('Minutes'), z.literal('Months'), z.literal('Weeks'), z.literal('Years')]).nullable().describe(`
        * * Field Name: AutoRunIntervalUnits
        * * Display Name: Auto Run Interval Units
        * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Days
    *   * Hours
    *   * Minutes
    *   * Months
    *   * Weeks
    *   * Years
        * * Description: Minutes, Hours, Days, Weeks, Months, Years`),
    AutoRunInterval: z.number().nullable().describe(`
        * * Field Name: AutoRunInterval
        * * Display Name: Auto Run Interval
        * * SQL Data Type: int
        * * Description: The interval, denominated in the units specified in the AutoRunIntervalUnits column, between auto runs of this workflow.`),
    SubclassName: z.string().nullable().describe(`
        * * Field Name: SubclassName
        * * Display Name: Subclass Name
        * * SQL Data Type: nvarchar(200)
        * * Description: If specified, this subclass key, via the ClassFactory, will be instantiated, to execute this workflow. If not specified the WorkflowBase class will be used by default.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    AutoRunIntervalMinutes: z.number().nullable().describe(`
        * * Field Name: AutoRunIntervalMinutes
        * * Display Name: Auto Run Interval Minutes
        * * SQL Data Type: int`),
});

export type WorkflowEntityType = z.infer<typeof WorkflowSchema>;

/**
 * zod schema definition for the entity Workspace Items
 */
export const WorkspaceItemSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    WorkspaceID: z.string().describe(`
        * * Field Name: WorkspaceID
        * * Display Name: Workspace ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Workspaces (vwWorkspaces.ID)`),
    ResourceTypeID: z.string().describe(`
        * * Field Name: ResourceTypeID
        * * Display Name: Resource Type ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)`),
    ResourceRecordID: z.string().nullable().describe(`
        * * Field Name: ResourceRecordID
        * * Display Name: Resource Record ID
        * * SQL Data Type: nvarchar(2000)
        * * Description: The ID of the resource (such as a view, dashboard, or other entity record) that is included in this workspace.`),
    Sequence: z.number().describe(`
        * * Field Name: Sequence
        * * Display Name: Sequence
        * * SQL Data Type: int
        * * Description: The display order of this item within the workspace, used for arranging resources in the user interface.`),
    Configuration: z.string().nullable().describe(`
        * * Field Name: Configuration
        * * Display Name: Configuration
        * * SQL Data Type: nvarchar(MAX)
        * * Description: JSON configuration data specific to this workspace item, storing custom settings and state information.`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    Workspace: z.string().describe(`
        * * Field Name: Workspace
        * * Display Name: Workspace
        * * SQL Data Type: nvarchar(255)`),
    ResourceType: z.string().describe(`
        * * Field Name: ResourceType
        * * Display Name: Resource Type
        * * SQL Data Type: nvarchar(255)`),
});

export type WorkspaceItemEntityType = z.infer<typeof WorkspaceItemSchema>;

/**
 * zod schema definition for the entity Workspaces
 */
export const WorkspaceSchema = z.object({
    ID: z.string().describe(`
        * * Field Name: ID
        * * Display Name: ID
        * * SQL Data Type: uniqueidentifier
        * * Default Value: newsequentialid()`),
    Name: z.string().describe(`
        * * Field Name: Name
        * * Display Name: Name
        * * SQL Data Type: nvarchar(255)`),
    Description: z.string().nullable().describe(`
        * * Field Name: Description
        * * Display Name: Description
        * * SQL Data Type: nvarchar(MAX)`),
    UserID: z.string().describe(`
        * * Field Name: UserID
        * * Display Name: User ID
        * * SQL Data Type: uniqueidentifier
        * * Related Entity/Foreign Key: Users (vwUsers.ID)`),
    __mj_CreatedAt: z.date().describe(`
        * * Field Name: __mj_CreatedAt
        * * Display Name: Created At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    __mj_UpdatedAt: z.date().describe(`
        * * Field Name: __mj_UpdatedAt
        * * Display Name: Updated At
        * * SQL Data Type: datetimeoffset
        * * Default Value: getutcdate()`),
    User: z.string().describe(`
        * * Field Name: User
        * * Display Name: User
        * * SQL Data Type: nvarchar(100)`),
});

export type WorkspaceEntityType = z.infer<typeof WorkspaceSchema>;
 
 

/**
 * Action Authorizations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ActionAuthorization
 * * Base View: vwActionAuthorizations
 * * @description Links actions to authorizations, one or more of these must be possessed by a user in order to execute the action.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Action Authorizations')
export class ActionAuthorizationEntity extends BaseEntity<ActionAuthorizationEntityType> {
    /**
    * Loads the Action Authorizations record from the database
    * @param ID: string - primary key value to load the Action Authorizations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionAuthorizationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    get ActionID(): string {
        return this.Get('ActionID');
    }
    set ActionID(value: string) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: AuthorizationID
    * * Display Name: Authorization ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    get AuthorizationID(): string {
        return this.Get('AuthorizationID');
    }
    set AuthorizationID(value: string) {
        this.Set('AuthorizationID', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string {
        return this.Get('Action');
    }

    /**
    * * Field Name: Authorization
    * * Display Name: Authorization
    * * SQL Data Type: nvarchar(100)
    */
    get Authorization(): string {
        return this.Get('Authorization');
    }
}


/**
 * Action Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ActionCategory
 * * Base View: vwActionCategories
 * * @description Organizes actions into categories, including name, description, and optional parent category for hierarchy.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Action Categories')
export class ActionCategoryEntity extends BaseEntity<ActionCategoryEntityType> {
    /**
    * Loads the Action Categories record from the database
    * @param ID: string - primary key value to load the Action Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the action category.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the action category.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Categories (vwActionCategories.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    * * Description: Status of the action category (Pending, Active, Disabled).
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Action Context Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ActionContextType
 * * Base View: vwActionContextTypes
 * * @description Lists possible contexts for action execution with optional descriptions.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Action Context Types')
export class ActionContextTypeEntity extends BaseEntity<ActionContextTypeEntityType> {
    /**
    * Loads the Action Context Types record from the database
    * @param ID: string - primary key value to load the Action Context Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionContextTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the context type.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the context type.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Action Contexts - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ActionContext
 * * Base View: vwActionContexts
 * * @description Links actions to their supported context types enabling a given action to be executable in more than one context.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Action Contexts')
export class ActionContextEntity extends BaseEntity<ActionContextEntityType> {
    /**
    * Loads the Action Contexts record from the database
    * @param ID: string - primary key value to load the Action Contexts record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionContextEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    get ActionID(): string {
        return this.Get('ActionID');
    }
    set ActionID(value: string) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: ContextTypeID
    * * Display Name: Context Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Context Types (vwActionContextTypes.ID)
    */
    get ContextTypeID(): string | null {
        return this.Get('ContextTypeID');
    }
    set ContextTypeID(value: string | null) {
        this.Set('ContextTypeID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    * * Description: Status of the action context (Pending, Active, Disabled).
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string {
        return this.Get('Action');
    }

    /**
    * * Field Name: ContextType
    * * Display Name: Context Type
    * * SQL Data Type: nvarchar(255)
    */
    get ContextType(): string | null {
        return this.Get('ContextType');
    }
}


/**
 * Action Execution Logs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ActionExecutionLog
 * * Base View: vwActionExecutionLogs
 * * @description Tracks every execution of an action, including start and end times, inputs, outputs, and result codes.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Action Execution Logs')
export class ActionExecutionLogEntity extends BaseEntity<ActionExecutionLogEntityType> {
    /**
    * Loads the Action Execution Logs record from the database
    * @param ID: string - primary key value to load the Action Execution Logs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionExecutionLogEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    get ActionID(): string {
        return this.Get('ActionID');
    }
    set ActionID(value: string) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetimeoffset
    * * Default Value: sysdatetimeoffset()
    * * Description: Timestamp when the action execution started (timezone-aware)
    */
    get StartedAt(): Date {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp when the action execution ended (timezone-aware)
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: Params
    * * Display Name: Params
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON-formatted input parameters passed to the action during execution, storing the exact values used for this specific run.
    */
    get Params(): string | null {
        return this.Get('Params');
    }
    set Params(value: string | null) {
        this.Set('Params', value);
    }

    /**
    * * Field Name: ResultCode
    * * Display Name: Result Code
    * * SQL Data Type: nvarchar(255)
    * * Description: The outcome code returned by the action execution, indicating success, failure, or specific error conditions as defined in Action Result Codes.
    */
    get ResultCode(): string | null {
        return this.Get('ResultCode');
    }
    set ResultCode(value: string | null) {
        this.Set('ResultCode', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: RetentionPeriod
    * * Display Name: Retention Period
    * * SQL Data Type: int
    * * Description: Number of days to retain the log; NULL for indefinite retention.
    */
    get RetentionPeriod(): number | null {
        return this.Get('RetentionPeriod');
    }
    set RetentionPeriod(value: number | null) {
        this.Set('RetentionPeriod', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Message
    * * Display Name: Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON-formatted output data or response from the action execution
    */
    get Message(): string | null {
        return this.Get('Message');
    }
    set Message(value: string | null) {
        this.Set('Message', value);
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string {
        return this.Get('Action');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * Action Filters - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ActionFilter
 * * Base View: vwActionFilters
 * * @description Defines filters that can be evaluated ahead of executing an action. Action Filters are usable in any code pipeline you can execute them with the same context as the action itself and use the outcome to determine if the action should execute or not.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Action Filters')
export class ActionFilterEntity extends BaseEntity<ActionFilterEntityType> {
    /**
    * Loads the Action Filters record from the database
    * @param ID: string - primary key value to load the Action Filters record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionFilterEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserDescription
    * * Display Name: User Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Human-readable explanation of what this filter checks and when it should prevent action execution, written for non-technical users.
    */
    get UserDescription(): string {
        return this.Get('UserDescription');
    }
    set UserDescription(value: string) {
        this.Set('UserDescription', value);
    }

    /**
    * * Field Name: UserComments
    * * Display Name: User Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Additional notes or implementation details about the filter logic, including examples or edge cases to consider.
    */
    get UserComments(): string | null {
        return this.Get('UserComments');
    }
    set UserComments(value: string | null) {
        this.Set('UserComments', value);
    }

    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JavaScript code that evaluates to true (allow action) or false (prevent action), executed in the same context as the action.
    */
    get Code(): string {
        return this.Get('Code');
    }
    set Code(value: string) {
        this.Set('Code', value);
    }

    /**
    * * Field Name: CodeExplanation
    * * Display Name: Code Explanation
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Technical documentation of the filter code logic, including expected inputs, outputs, and any dependencies or assumptions.
    */
    get CodeExplanation(): string | null {
        return this.Get('CodeExplanation');
    }
    set CodeExplanation(value: string | null) {
        this.Set('CodeExplanation', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Action Libraries - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ActionLibrary
 * * Base View: vwActionLibraries
 * * @description Tracks the list of libraries that a given Action uses, including a list of classes/functions for each library.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Action Libraries')
export class ActionLibraryEntity extends BaseEntity<ActionLibraryEntityType> {
    /**
    * Loads the Action Libraries record from the database
    * @param ID: string - primary key value to load the Action Libraries record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionLibraryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    get ActionID(): string {
        return this.Get('ActionID');
    }
    set ActionID(value: string) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: LibraryID
    * * Display Name: Library ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Libraries (vwLibraries.ID)
    */
    get LibraryID(): string {
        return this.Get('LibraryID');
    }
    set LibraryID(value: string) {
        this.Set('LibraryID', value);
    }

    /**
    * * Field Name: ItemsUsed
    * * Display Name: Items Used
    * * SQL Data Type: nvarchar(MAX)
    * * Description: List of classes and functions used by the action from the library.
    */
    get ItemsUsed(): string | null {
        return this.Get('ItemsUsed');
    }
    set ItemsUsed(value: string | null) {
        this.Set('ItemsUsed', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string {
        return this.Get('Action');
    }

    /**
    * * Field Name: Library
    * * Display Name: Library
    * * SQL Data Type: nvarchar(255)
    */
    get Library(): string {
        return this.Get('Library');
    }
}


/**
 * Action Params - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ActionParam
 * * Base View: vwActionParams
 * * @description Tracks the input and output parameters for Actions.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Action Params')
export class ActionParamEntity extends BaseEntity<ActionParamEntityType> {
    /**
    * Loads the Action Params record from the database
    * @param ID: string - primary key value to load the Action Params record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionParamEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    get ActionID(): string {
        return this.Get('ActionID');
    }
    set ActionID(value: string) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: DefaultValue
    * * Display Name: Default Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The default value for this parameter if not provided during action execution, can be a literal value or JSON for complex types.
    */
    get DefaultValue(): string | null {
        return this.Get('DefaultValue');
    }
    set DefaultValue(value: string | null) {
        this.Set('DefaultValue', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nchar(10)
    * * Value List Type: List
    * * Possible Values 
    *   * Both
    *   * Input
    *   * Output
    * * Description: Specifies whether this parameter is used for Input, Output, or Both directions in the action execution flow.
    */
    get Type(): 'Both' | 'Input' | 'Output' {
        return this.Get('Type');
    }
    set Type(value: 'Both' | 'Input' | 'Output') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: ValueType
    * * Display Name: Value Type
    * * SQL Data Type: nvarchar(30)
    * * Value List Type: List
    * * Possible Values 
    *   * BaseEntity Sub-Class
    *   * BaseEntity Sub-Class
    *   * Other
    *   * Other
    *   * Scalar
    *   * Scalar
    *   * Simple Object
    *   * Simple Object
    * * Description: Tracks the basic value type of the parameter, additional information can be provided in the Description field
    */
    get ValueType(): 'BaseEntity Sub-Class' | 'BaseEntity Sub-Class' | 'Other' | 'Other' | 'Scalar' | 'Scalar' | 'Simple Object' | 'Simple Object' {
        return this.Get('ValueType');
    }
    set ValueType(value: 'BaseEntity Sub-Class' | 'BaseEntity Sub-Class' | 'Other' | 'Other' | 'Scalar' | 'Scalar' | 'Simple Object' | 'Simple Object') {
        this.Set('ValueType', value);
    }

    /**
    * * Field Name: IsArray
    * * Display Name: Is Array
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this parameter accepts or returns an array of values rather than a single value.
    */
    get IsArray(): boolean {
        return this.Get('IsArray');
    }
    set IsArray(value: boolean) {
        this.Set('IsArray', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: IsRequired
    * * Display Name: Is Required
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Determines if this parameter must be provided for input parameters or will always be populated for output parameters.
    */
    get IsRequired(): boolean {
        return this.Get('IsRequired');
    }
    set IsRequired(value: boolean) {
        this.Set('IsRequired', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string {
        return this.Get('Action');
    }
}


/**
 * Action Result Codes - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ActionResultCode
 * * Base View: vwActionResultCodes
 * * @description Defines the possible result codes for each action.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Action Result Codes')
export class ActionResultCodeEntity extends BaseEntity<ActionResultCodeEntityType> {
    /**
    * Loads the Action Result Codes record from the database
    * @param ID: string - primary key value to load the Action Result Codes record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionResultCodeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    get ActionID(): string {
        return this.Get('ActionID');
    }
    set ActionID(value: string) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: ResultCode
    * * Display Name: Result Code
    * * SQL Data Type: nvarchar(255)
    * * Description: The unique code string returned by the action to indicate specific outcomes, used for programmatic handling of results.
    */
    get ResultCode(): string {
        return this.Get('ResultCode');
    }
    set ResultCode(value: string) {
        this.Set('ResultCode', value);
    }

    /**
    * * Field Name: IsSuccess
    * * Display Name: Is Success
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the result code is a success or not. It is possible an action might have more than one failure condition/result code and same for success conditions.
    */
    get IsSuccess(): boolean {
        return this.Get('IsSuccess');
    }
    set IsSuccess(value: boolean) {
        this.Set('IsSuccess', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the result code.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string {
        return this.Get('Action');
    }
}


/**
 * Actions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Action
 * * Base View: vwActions
 * * @description Stores action definitions, including prompts, generated code, user comments, and status.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Actions')
export class ActionEntity extends BaseEntity<ActionEntityType> {
    /**
    * Loads the Actions record from the database
    * @param ID: string - primary key value to load the Actions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ActionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Categories (vwActionCategories.ID)
    */
    get CategoryID(): string | null {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string | null) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(425)
    * * Description: The name of the action. Must be unique within the combination of CategoryID and ParentID. Actions with the same name can exist in different categories or under different parents.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Generated
    * * Value List Type: List
    * * Possible Values 
    *   * Custom
    *   * Generated
    * * Description: Generated or Custom. Generated means the UserPrompt is used to prompt an AI model to automatically create the code for the Action. Custom means that a custom class has been implemented that subclasses the BaseAction class. The custom class needs to use the @RegisterClass decorator and be included in the MJAPI (or other runtime environment) to be available for execution.
    */
    get Type(): 'Custom' | 'Generated' {
        return this.Get('Type');
    }
    set Type(value: 'Custom' | 'Generated') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: UserPrompt
    * * Display Name: User Prompt
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The natural language prompt provided by the user describing what the action should accomplish, used for AI code generation.
    */
    get UserPrompt(): string | null {
        return this.Get('UserPrompt');
    }
    set UserPrompt(value: string | null) {
        this.Set('UserPrompt', value);
    }

    /**
    * * Field Name: UserComments
    * * Display Name: User Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: User's comments not shared with the LLM.
    */
    get UserComments(): string | null {
        return this.Get('UserComments');
    }
    set UserComments(value: string | null) {
        this.Set('UserComments', value);
    }

    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The generated or manually written code that implements the action logic, typically TypeScript/JavaScript that will be executed.
    */
    get Code(): string | null {
        return this.Get('Code');
    }
    set Code(value: string | null) {
        this.Set('Code', value);
    }

    /**
    * * Field Name: CodeComments
    * * Display Name: Code Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: AI's explanation of the code.
    */
    get CodeComments(): string | null {
        return this.Get('CodeComments');
    }
    set CodeComments(value: string | null) {
        this.Set('CodeComments', value);
    }

    /**
    * * Field Name: CodeApprovalStatus
    * * Display Name: Code Approval Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
    * * Description: An action won't be usable until the code is approved.
    */
    get CodeApprovalStatus(): 'Approved' | 'Pending' | 'Rejected' {
        return this.Get('CodeApprovalStatus');
    }
    set CodeApprovalStatus(value: 'Approved' | 'Pending' | 'Rejected') {
        this.Set('CodeApprovalStatus', value);
    }

    /**
    * * Field Name: CodeApprovalComments
    * * Display Name: Code Approval Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional comments when an individual (or an AI) reviews and approves the code.
    */
    get CodeApprovalComments(): string | null {
        return this.Get('CodeApprovalComments');
    }
    set CodeApprovalComments(value: string | null) {
        this.Set('CodeApprovalComments', value);
    }

    /**
    * * Field Name: CodeApprovedByUserID
    * * Display Name: Code Approved By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get CodeApprovedByUserID(): string | null {
        return this.Get('CodeApprovedByUserID');
    }
    set CodeApprovedByUserID(value: string | null) {
        this.Set('CodeApprovedByUserID', value);
    }

    /**
    * * Field Name: CodeApprovedAt
    * * Display Name: Code Approved At
    * * SQL Data Type: datetime
    * * Description: When the code was approved.
    */
    get CodeApprovedAt(): Date | null {
        return this.Get('CodeApprovedAt');
    }
    set CodeApprovedAt(value: Date | null) {
        this.Set('CodeApprovedAt', value);
    }

    /**
    * * Field Name: CodeLocked
    * * Display Name: Code Locked
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, Code will never be generated by the AI system. This overrides all other settings including the ForceCodeGeneration bit
    */
    get CodeLocked(): boolean {
        return this.Get('CodeLocked');
    }
    set CodeLocked(value: boolean) {
        this.Set('CodeLocked', value);
    }

    /**
    * * Field Name: ForceCodeGeneration
    * * Display Name: Force Code Generation
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, the Action will generate code for the provided UserPrompt on the next Save even if the UserPrompt hasn't changed. This is useful to force regeneration when other candidates (such as a change in Action Inputs/Outputs) occurs or on demand by a user.
    */
    get ForceCodeGeneration(): boolean {
        return this.Get('ForceCodeGeneration');
    }
    set ForceCodeGeneration(value: boolean) {
        this.Set('ForceCodeGeneration', value);
    }

    /**
    * * Field Name: RetentionPeriod
    * * Display Name: Retention Period
    * * SQL Data Type: int
    * * Description: Number of days to retain execution logs; NULL for indefinite.
    */
    get RetentionPeriod(): number | null {
        return this.Get('RetentionPeriod');
    }
    set RetentionPeriod(value: number | null) {
        this.Set('RetentionPeriod', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    * * Description: Status of the action (Pending, Active, Disabled).
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(255)
    * * Description: For actions where Type='Custom', this specifies the fully qualified class name of the BaseAction sub-class that should be instantiated to handle the action execution. This provides a more reliable mechanism than relying on the Name field for class instantiation.
    */
    get DriverClass(): string | null {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string | null) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    * * Description: Optional ID of the parent action this action inherits from. Used for hierarchical action composition where child actions can specialize parent actions.
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: IconClass
    * * Display Name: Icon Class
    * * SQL Data Type: nvarchar(100)
    * * Description: Font Awesome icon class (e.g., fa-cog, fa-play, fa-search) for visual representation of the action.
    */
    get IconClass(): string | null {
        return this.Get('IconClass');
    }
    set IconClass(value: string | null) {
        this.Set('IconClass', value);
    }

    /**
    * * Field Name: DefaultCompactPromptID
    * * Display Name: Default Compact Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: Default prompt for compacting/summarizing this action's results when used by agents with CompactMode=AISummary. Action designers define how their specific results should be summarized. Can be overridden per agent in AIAgentAction.CompactPromptID.
    */
    get DefaultCompactPromptID(): string | null {
        return this.Get('DefaultCompactPromptID');
    }
    set DefaultCompactPromptID(value: string | null) {
        this.Set('DefaultCompactPromptID', value);
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    */
    get Category(): string | null {
        return this.Get('Category');
    }

    /**
    * * Field Name: CodeApprovedByUser
    * * Display Name: Code Approved By User
    * * SQL Data Type: nvarchar(100)
    */
    get CodeApprovedByUser(): string | null {
        return this.Get('CodeApprovedByUser');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(425)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: DefaultCompactPrompt
    * * Display Name: Default Compact Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get DefaultCompactPrompt(): string | null {
        return this.Get('DefaultCompactPrompt');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * AI Actions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAction
 * * Base View: vwAIActions
 * * @description List of all actions that are possible across all AI Models
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'AI Actions')
export class AIActionEntity extends BaseEntity<AIActionEntityType> {
    /**
    * Loads the AI Actions record from the database
    * @param ID: string - primary key value to load the AI Actions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIActionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: DefaultPrompt
    * * Display Name: Default Prompt
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The standard prompt template used when invoking this AI action, can include placeholders for dynamic values.
    */
    get DefaultPrompt(): string | null {
        return this.Get('DefaultPrompt');
    }
    set DefaultPrompt(value: string | null) {
        this.Set('DefaultPrompt', value);
    }

    /**
    * * Field Name: DefaultModelID
    * * Display Name: Default Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    get DefaultModelID(): string | null {
        return this.Get('DefaultModelID');
    }
    set DefaultModelID(value: string | null) {
        this.Set('DefaultModelID', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Controls whether this AI action is currently available for use across the system.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: DefaultModel
    * * Display Name: Default Model
    * * SQL Data Type: nvarchar(50)
    */
    get DefaultModel(): string | null {
        return this.Get('DefaultModel');
    }
}


/**
 * AI Agent Actions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentAction
 * * Base View: vwAIAgentActions
 * * @description Table to store the relationship between AI agents and actions.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Agent Actions')
export class AIAgentActionEntity extends BaseEntity<AIAgentActionEntityType> {
    /**
    * Loads the AI Agent Actions record from the database
    * @param ID: string - primary key value to load the AI Agent Actions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentActionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for AI Agent Actions entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * CompactLength: This rule ensures that if a value is provided for CompactLength, it must be greater than zero. If CompactLength is left empty, no rule applies.
    * * MaxExecutionsPerRun: This rule ensures that if the maximum executions per run is specified, the number must be greater than zero. If it is not specified, no restriction applies.
    * * MinExecutionsPerRun: This rule ensures that if a minimum executions per run value is provided, it must be zero or greater.
    * * ResultExpirationTurns: This rule ensures that if the ResultExpirationTurns field has a value, it must be zero or greater (it cannot be negative). If ResultExpirationTurns is left empty, there is no restriction.
    * * Table-Level: This rule ensures that if the compact mode is set to 'First N Chars', a compact length must be specified. For any other compact mode, the compact length can be left empty.
    * * Table-Level: This rule ensures that if the result expiration mode is set to 'Compact', a compact mode value must also be provided. If the result expiration mode is not 'Compact', compact mode can be left empty.
    * * Table-Level: This rule ensures that if both minimum and maximum executions per run are specified, the minimum cannot be greater than the maximum. If either value is not specified, the rule is not enforced.
    * * Table-Level: This rule ensures that if the result expiration mode is set to 'Compact', then CompactMode, CompactLength, and CompactPromptID must all be empty (null). If the expiration mode is not 'Compact', these fields may be filled in.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateCompactLengthGreaterThanZero(result);
        this.ValidateMaxExecutionsPerRunGreaterThanZero(result);
        this.ValidateMinExecutionsPerRunIsNonNegative(result);
        this.ValidateResultExpirationTurnsNonNegative(result);
        this.ValidateCompactLengthRequiredForFirstNCharsMode(result);
        this.ValidateCompactModeWhenResultExpirationModeIsCompact(result);
        this.ValidateMinExecutionsPerRunIsLessThanOrEqualToMaxExecutionsPerRun(result);
        this.ValidateResultExpirationModeRequiresCompactFieldsEmpty(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if a value is provided for CompactLength, it must be greater than zero. If CompactLength is left empty, no rule applies.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCompactLengthGreaterThanZero(result: ValidationResult) {
    	if (this.CompactLength != null && this.CompactLength <= 0) {
    		result.Errors.push(new ValidationErrorInfo("CompactLength", "CompactLength must be greater than zero if specified.", this.CompactLength, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the maximum executions per run is specified, the number must be greater than zero. If it is not specified, no restriction applies.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateMaxExecutionsPerRunGreaterThanZero(result: ValidationResult) {
    	if (this.MaxExecutionsPerRun != null && this.MaxExecutionsPerRun <= 0) {
    		result.Errors.push(new ValidationErrorInfo("MaxExecutionsPerRun", "When provided, the maximum executions per run must be greater than zero.", this.MaxExecutionsPerRun, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if a minimum executions per run value is provided, it must be zero or greater.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateMinExecutionsPerRunIsNonNegative(result: ValidationResult) {
    	if (this.MinExecutionsPerRun != null && this.MinExecutionsPerRun < 0) {
    		result.Errors.push(new ValidationErrorInfo("MinExecutionsPerRun", "The minimum executions per run must be zero or greater.", this.MinExecutionsPerRun, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the ResultExpirationTurns field has a value, it must be zero or greater (it cannot be negative). If ResultExpirationTurns is left empty, there is no restriction.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateResultExpirationTurnsNonNegative(result: ValidationResult) {
    	if (this.ResultExpirationTurns != null && this.ResultExpirationTurns < 0) {
    		result.Errors.push(new ValidationErrorInfo("ResultExpirationTurns", "If provided, ResultExpirationTurns must be zero or greater.", this.ResultExpirationTurns, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the compact mode is set to 'First N Chars', a compact length must be specified. For any other compact mode, the compact length can be left empty.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCompactLengthRequiredForFirstNCharsMode(result: ValidationResult) {
    	if (this.CompactMode === "First N Chars" && this.CompactLength == null) {
    		result.Errors.push(new ValidationErrorInfo("CompactLength", "When CompactMode is set to 'First N Chars', CompactLength must be specified.", this.CompactLength, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the result expiration mode is set to 'Compact', a compact mode value must also be provided. If the result expiration mode is not 'Compact', compact mode can be left empty.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCompactModeWhenResultExpirationModeIsCompact(result: ValidationResult) {
    	if (this.ResultExpirationMode === "Compact" && this.CompactMode == null) {
    		result.Errors.push(new ValidationErrorInfo("CompactMode", "CompactMode must be specified when ResultExpirationMode is 'Compact'.", this.CompactMode, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if both minimum and maximum executions per run are specified, the minimum cannot be greater than the maximum. If either value is not specified, the rule is not enforced.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateMinExecutionsPerRunIsLessThanOrEqualToMaxExecutionsPerRun(result: ValidationResult) {
    	if (this.MinExecutionsPerRun != null && this.MaxExecutionsPerRun != null && this.MinExecutionsPerRun > this.MaxExecutionsPerRun) {
    		result.Errors.push(new ValidationErrorInfo("MinExecutionsPerRun", "Minimum executions per run cannot be greater than maximum executions per run.", this.MinExecutionsPerRun, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the result expiration mode is set to 'Compact', then CompactMode, CompactLength, and CompactPromptID must all be empty (null). If the expiration mode is not 'Compact', these fields may be filled in.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateResultExpirationModeRequiresCompactFieldsEmpty(result: ValidationResult) {
    	if (this.ResultExpirationMode === "Compact") {
    		if (this.CompactMode != null || this.CompactLength != null || this.CompactPromptID != null) {
    			result.Errors.push(new ValidationErrorInfo("ResultExpirationMode", "When ResultExpirationMode is set to 'Compact', the fields CompactMode, CompactLength, and CompactPromptID must be empty.", this.ResultExpirationMode, ValidationErrorType.Failure));
    		}
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: The unique identifier for each AI agent-action mapping. Serves as the primary key.
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: References the unique identifier of the associated AI agent from the AIAgent table.
    */
    get AgentID(): string | null {
        return this.Get('AgentID');
    }
    set AgentID(value: string | null) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    * * Description: References the unique identifier of the associated action from the Action table.
    */
    get ActionID(): string | null {
        return this.Get('ActionID');
    }
    set ActionID(value: string | null) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(15)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked
    */
    get Status(): 'Active' | 'Pending' | 'Revoked' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Pending' | 'Revoked') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: MinExecutionsPerRun
    * * Display Name: Min Executions Per Run
    * * SQL Data Type: int
    * * Description: Minimum number of times this action must be executed per agent run
    */
    get MinExecutionsPerRun(): number | null {
        return this.Get('MinExecutionsPerRun');
    }
    set MinExecutionsPerRun(value: number | null) {
        this.Set('MinExecutionsPerRun', value);
    }

    /**
    * * Field Name: MaxExecutionsPerRun
    * * Display Name: Max Executions Per Run
    * * SQL Data Type: int
    * * Description: Maximum number of times this action can be executed per agent run
    */
    get MaxExecutionsPerRun(): number | null {
        return this.Get('MaxExecutionsPerRun');
    }
    set MaxExecutionsPerRun(value: number | null) {
        this.Set('MaxExecutionsPerRun', value);
    }

    /**
    * * Field Name: ResultExpirationTurns
    * * Display Name: Result Expiration Turns
    * * SQL Data Type: int
    * * Description: Number of conversation turns before action results expire from conversation context. NULL = never expire (default). 0 = expire immediately after next turn.
    */
    get ResultExpirationTurns(): number | null {
        return this.Get('ResultExpirationTurns');
    }
    set ResultExpirationTurns(value: number | null) {
        this.Set('ResultExpirationTurns', value);
    }

    /**
    * * Field Name: ResultExpirationMode
    * * Display Name: Result Expiration Mode
    * * SQL Data Type: nvarchar(20)
    * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * Compact
    *   * None
    *   * Remove
    * * Description: How to handle expired action results: None (no expiration, default), Remove (delete message entirely), Compact (reduce size via CompactMode while preserving key information).
    */
    get ResultExpirationMode(): 'Compact' | 'None' | 'Remove' {
        return this.Get('ResultExpirationMode');
    }
    set ResultExpirationMode(value: 'Compact' | 'None' | 'Remove') {
        this.Set('ResultExpirationMode', value);
    }

    /**
    * * Field Name: CompactMode
    * * Display Name: Compact Mode
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * AI Summary
    *   * First N Chars
    * * Description: How to compact results when ResultExpirationMode=Compact: FirstNChars (truncate to CompactLength characters, fast and free), AISummary (use LLM to intelligently summarize with CompactPromptID or Action.DefaultCompactPromptID).
    */
    get CompactMode(): 'AI Summary' | 'First N Chars' | null {
        return this.Get('CompactMode');
    }
    set CompactMode(value: 'AI Summary' | 'First N Chars' | null) {
        this.Set('CompactMode', value);
    }

    /**
    * * Field Name: CompactLength
    * * Display Name: Compact Length
    * * SQL Data Type: int
    * * Description: Number of characters to keep when CompactMode=FirstNChars. Required when CompactMode is FirstNChars, ignored otherwise.
    */
    get CompactLength(): number | null {
        return this.Get('CompactLength');
    }
    set CompactLength(value: number | null) {
        this.Set('CompactLength', value);
    }

    /**
    * * Field Name: CompactPromptID
    * * Display Name: Compact Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: Optional override for AI summarization prompt when CompactMode=AISummary. Lookup hierarchy: this field -> Action.DefaultCompactPromptID -> system default. Allows agent-specific summarization focus (e.g., technical vs. marketing perspective).
    */
    get CompactPromptID(): string | null {
        return this.Get('CompactPromptID');
    }
    set CompactPromptID(value: string | null) {
        this.Set('CompactPromptID', value);
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string | null {
        return this.Get('Action');
    }

    /**
    * * Field Name: CompactPrompt
    * * Display Name: Compact Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get CompactPrompt(): string | null {
        return this.Get('CompactPrompt');
    }
}


/**
 * AI Agent Learning Cycles - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentLearningCycle
 * * Base View: vwAIAgentLearningCycles
 * * @description Tracks the learning cycles for AI Agents where the Agent does offline reasoning, reflection, learning, and updates metadata.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Agent Learning Cycles')
export class AIAgentLearningCycleEntity extends BaseEntity<AIAgentLearningCycleEntityType> {
    /**
    * Loads the AI Agent Learning Cycles record from the database
    * @param ID: string - primary key value to load the AI Agent Learning Cycles record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentLearningCycleEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Unique identifier for the learning cycle.
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: Identifier for the AI Agent associated with this learning cycle.
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    * * Description: Timestamp indicating when the learning cycle started.
    */
    get StartedAt(): Date {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp indicating when the learning cycle ended.
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In-Progress
    * * Description: Status of the learning cycle (In-Progress, Complete, or Failed).
    */
    get Status(): 'Complete' | 'Failed' | 'In-Progress' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Failed' | 'In-Progress') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: AgentSummary
    * * Display Name: Agent Summary
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Text summary provided by the agent about what it learned and any changes it requested for stored metadata.
    */
    get AgentSummary(): string | null {
        return this.Get('AgentSummary');
    }
    set AgentSummary(value: string | null) {
        this.Set('AgentSummary', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }
}


/**
 * AI Agent Models - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentModel
 * * Base View: vwAIAgentModels
 * * @description Table to store the relationship between AI agents and AI models.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'AI Agent Models')
export class AIAgentModelEntity extends BaseEntity<AIAgentModelEntityType> {
    /**
    * Loads the AI Agent Models record from the database
    * @param ID: string - primary key value to load the AI Agent Models record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentModelEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: The unique identifier for each AI agent-model mapping. Serves as the primary key.
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: References the unique identifier of the associated AI agent from AIAgent table.
    */
    get AgentID(): string | null {
        return this.Get('AgentID');
    }
    set AgentID(value: string | null) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: ModelID
    * * Display Name: Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    * * Description: The unique identifier of the associated AI model.
    */
    get ModelID(): string | null {
        return this.Get('ModelID');
    }
    set ModelID(value: string | null) {
        this.Set('ModelID', value);
    }

    /**
    * * Field Name: Active
    * * Display Name: Active
    * * SQL Data Type: bit
    * * Description: Indicates whether this specific agent-model combination is currently enabled for use in AI operations.
    */
    get Active(): boolean | null {
        return this.Get('Active');
    }
    set Active(value: boolean | null) {
        this.Set('Active', value);
    }

    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Description: The priority level of the AI model for the agent, where higher values indicate higher priority.
    */
    get Priority(): number | null {
        return this.Get('Priority');
    }
    set Priority(value: number | null) {
        this.Set('Priority', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: Model
    * * Display Name: Model
    * * SQL Data Type: nvarchar(50)
    */
    get Model(): string | null {
        return this.Get('Model');
    }
}


/**
 * AI Agent Note Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentNoteType
 * * Base View: vwAIAgentNoteTypes
 * * @description Defines categories and types for AI agent notes, enabling classification and organization of agent-generated observations, recommendations, and learnings.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Agent Note Types')
export class AIAgentNoteTypeEntity extends BaseEntity<AIAgentNoteTypeEntityType> {
    /**
    * Loads the AI Agent Note Types record from the database
    * @param ID: string - primary key value to load the AI Agent Note Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentNoteTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string | null {
        return this.Get('Name');
    }
    set Name(value: string | null) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Priority for injection ordering. Lower numbers are injected first (0 is highest priority).
    */
    get Priority(): number {
        return this.Get('Priority');
    }
    set Priority(value: number) {
        this.Set('Priority', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked
    * * Description: Status of the note type: Pending (awaiting approval), Active (available for use), or Revoked (deprecated).
    */
    get Status(): 'Active' | 'Pending' | 'Revoked' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Pending' | 'Revoked') {
        this.Set('Status', value);
    }
}


/**
 * AI Agent Notes - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentNote
 * * Base View: vwAIAgentNotes
 * * @description Stores notes, observations, and learnings for AI agents with multi-dimensional scoping (Agent, User, company). Scoping is determined by which FK fields are populated: all NULL = global, AgentID only = agent-specific, UserID only = user-specific across all agents, etc.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Agent Notes')
export class AIAgentNoteEntity extends BaseEntity<AIAgentNoteEntityType> {
    /**
    * Loads the AI Agent Notes record from the database
    * @param ID: string - primary key value to load the AI Agent Notes record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentNoteEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    */
    get AgentID(): string | null {
        return this.Get('AgentID');
    }
    set AgentID(value: string | null) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: AgentNoteTypeID
    * * Display Name: Agent Note Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agent Note Types (vwAIAgentNoteTypes.ID)
    */
    get AgentNoteTypeID(): string | null {
        return this.Get('AgentNoteTypeID');
    }
    set AgentNoteTypeID(value: string | null) {
        this.Set('AgentNoteTypeID', value);
    }

    /**
    * * Field Name: Note
    * * Display Name: Note
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The content of the note, observation, or learning captured by the AI agent during its execution.
    */
    get Note(): string | null {
        return this.Get('Note');
    }
    set Note(value: string | null) {
        this.Set('Note', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: Foreign key referencing the ID column in the User table, indicating the user associated with the note. Used when Type=User
    */
    get UserID(): string | null {
        return this.Get('UserID');
    }
    set UserID(value: string | null) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Preference
    * * Value List Type: List
    * * Possible Values 
    *   * Constraint
    *   * Context
    *   * Example
    *   * Issue
    *   * Preference
    * * Description: Quick categorization of the note content: Preference (user preferences), Constraint (hard rules/requirements), Context (background information), Example (sample interactions), or Issue (known problems/limitations). Complements the more detailed AIAgentNoteType categorization.
    */
    get Type(): 'Constraint' | 'Context' | 'Example' | 'Issue' | 'Preference' {
        return this.Get('Type');
    }
    set Type(value: 'Constraint' | 'Context' | 'Example' | 'Issue' | 'Preference') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: IsAutoGenerated
    * * Display Name: Is Auto Generated
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this note was automatically generated by an AI agent (1) or manually created (0).
    */
    get IsAutoGenerated(): boolean {
        return this.Get('IsAutoGenerated');
    }
    set IsAutoGenerated(value: boolean) {
        this.Set('IsAutoGenerated', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Internal comments about this note, not included in agent context injection.
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked
    * * Description: Status of the note: Pending (awaiting review), Active (in use), or Revoked (disabled).
    */
    get Status(): 'Active' | 'Pending' | 'Revoked' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Pending' | 'Revoked') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: SourceConversationID
    * * Display Name: Source Conversation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
    * * Description: Optional reference to the conversation that inspired or generated this note.
    */
    get SourceConversationID(): string | null {
        return this.Get('SourceConversationID');
    }
    set SourceConversationID(value: string | null) {
        this.Set('SourceConversationID', value);
    }

    /**
    * * Field Name: SourceConversationDetailID
    * * Display Name: Source Conversation Detail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
    * * Description: Optional reference to the specific conversation message that inspired this note.
    */
    get SourceConversationDetailID(): string | null {
        return this.Get('SourceConversationDetailID');
    }
    set SourceConversationDetailID(value: string | null) {
        this.Set('SourceConversationDetailID', value);
    }

    /**
    * * Field Name: SourceAIAgentRunID
    * * Display Name: Source AI Agent Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
    * * Description: Optional reference to the AI agent run that generated this note.
    */
    get SourceAIAgentRunID(): string | null {
        return this.Get('SourceAIAgentRunID');
    }
    set SourceAIAgentRunID(value: string | null) {
        this.Set('SourceAIAgentRunID', value);
    }

    /**
    * * Field Name: CompanyID
    * * Display Name: Company ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Companies (vwCompanies.ID)
    * * Description: Optional company scope for this note. When populated with UserID, creates org+user specific notes.
    */
    get CompanyID(): string | null {
        return this.Get('CompanyID');
    }
    set CompanyID(value: string | null) {
        this.Set('CompanyID', value);
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: AgentNoteType
    * * Display Name: Agent Note Type
    * * SQL Data Type: nvarchar(255)
    */
    get AgentNoteType(): string | null {
        return this.Get('AgentNoteType');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string | null {
        return this.Get('User');
    }

    /**
    * * Field Name: SourceConversation
    * * Display Name: Source Conversation
    * * SQL Data Type: nvarchar(255)
    */
    get SourceConversation(): string | null {
        return this.Get('SourceConversation');
    }

    /**
    * * Field Name: Company
    * * Display Name: Company
    * * SQL Data Type: nvarchar(50)
    */
    get Company(): string | null {
        return this.Get('Company');
    }
}


/**
 * AI Agent Requests - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentRequest
 * * Base View: vwAIAgentRequests
 * * @description Table to log AI Agent requests, responses, and their statuses.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Agent Requests')
export class AIAgentRequestEntity extends BaseEntity<AIAgentRequestEntityType> {
    /**
    * Loads the AI Agent Requests record from the database
    * @param ID: string - primary key value to load the AI Agent Requests record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentRequestEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Primary key for the AIAgentRequest table, uniquely identifies each record.
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: Foreign key referencing the ID column in the AIAgent table.
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: RequestedAt
    * * Display Name: Requested At
    * * SQL Data Type: datetime
    * * Description: Timestamp when the request was made by the agent.
    */
    get RequestedAt(): Date {
        return this.Get('RequestedAt');
    }
    set RequestedAt(value: Date) {
        this.Set('RequestedAt', value);
    }

    /**
    * * Field Name: RequestForUserID
    * * Display Name: Request For User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: Optional, a user that the AI specifically is directing the request to, if null intended for general system owner.
    */
    get RequestForUserID(): string | null {
        return this.Get('RequestForUserID');
    }
    set RequestForUserID(value: string | null) {
        this.Set('RequestForUserID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Canceled
    *   * Rejected
    *   * Requested
    * * Description: Current status of the request (Requested, Approved, Rejected, Canceled).
    */
    get Status(): 'Approved' | 'Canceled' | 'Rejected' | 'Requested' {
        return this.Get('Status');
    }
    set Status(value: 'Approved' | 'Canceled' | 'Rejected' | 'Requested') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Request
    * * Display Name: Request
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Details of what the AI Agent is requesting.
    */
    get Request(): string {
        return this.Get('Request');
    }
    set Request(value: string) {
        this.Set('Request', value);
    }

    /**
    * * Field Name: Response
    * * Display Name: Response
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Response provided by the human to the agent request.
    */
    get Response(): string | null {
        return this.Get('Response');
    }
    set Response(value: string | null) {
        this.Set('Response', value);
    }

    /**
    * * Field Name: ResponseByUserID
    * * Display Name: Response By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: Populated when a user responds indicating which user responded to the request.
    */
    get ResponseByUserID(): string | null {
        return this.Get('ResponseByUserID');
    }
    set ResponseByUserID(value: string | null) {
        this.Set('ResponseByUserID', value);
    }

    /**
    * * Field Name: RespondedAt
    * * Display Name: Responded At
    * * SQL Data Type: datetime
    * * Description: Timestamp when the response was provided by the human.
    */
    get RespondedAt(): Date | null {
        return this.Get('RespondedAt');
    }
    set RespondedAt(value: Date | null) {
        this.Set('RespondedAt', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Additional comments about the request. Not shared with the agent, purely record keeping.
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: RequestForUser
    * * Display Name: Request For User
    * * SQL Data Type: nvarchar(100)
    */
    get RequestForUser(): string | null {
        return this.Get('RequestForUser');
    }

    /**
    * * Field Name: ResponseByUser
    * * Display Name: Response By User
    * * SQL Data Type: nvarchar(100)
    */
    get ResponseByUser(): string | null {
        return this.Get('ResponseByUser');
    }
}


/**
 * AI Agents - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgent
 * * Base View: vwAIAgents
 * * @description Table to store information about AI agents.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Agents')
export class AIAgentEntity extends BaseEntity<AIAgentEntityType> {
    /**
    * Loads the AI Agents record from the database
    * @param ID: string - primary key value to load the AI Agents record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for AI Agents entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * DefaultPromptEffortLevel: This rule ensures that if a default prompt effort level is specified, it must be a number between 1 and 100, inclusive.
    * * MaxExecutionsPerRun: This rule ensures that if 'MaxExecutionsPerRun' is provided, it must be a value greater than zero. If it is left blank, that's acceptable.
    * * MinExecutionsPerRun: This rule ensures that if a minimum executions per run value is specified, it cannot be negative. If the field is not specified, there is no restriction.
    * * Table-Level: This rule ensures that if context compression is enabled, then the message threshold, prompt ID, and message retention count must all be provided. If context compression is not enabled, then these fields can be left empty.
    * * Table-Level: This rule ensures that if both the minimum and maximum number of executions per run are provided, the minimum cannot be greater than the maximum. If either value is not provided, no check is performed.
    * * Table-Level: This rule ensures that if a ParentID is specified, then ExposeAsAction must be set to false. If ParentID is not specified, ExposeAsAction can be either true or false.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateDefaultPromptEffortLevelInAllowedRange(result);
        this.ValidateMaxExecutionsPerRunGreaterThanZero(result);
        this.ValidateMinExecutionsPerRunNonNegative(result);
        this.ValidateContextCompressionFieldsWhenEnabled(result);
        this.ValidateMinExecutionsPerRunLessThanOrEqualToMaxExecutionsPerRun(result);
        this.ValidateParentIDRequiresExposeAsActionFalse(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if a default prompt effort level is specified, it must be a number between 1 and 100, inclusive.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateDefaultPromptEffortLevelInAllowedRange(result: ValidationResult) {
    	if (this.DefaultPromptEffortLevel != null && (this.DefaultPromptEffortLevel < 1 || this.DefaultPromptEffortLevel > 100)) {
    		result.Errors.push(new ValidationErrorInfo("DefaultPromptEffortLevel", "If specified, DefaultPromptEffortLevel must be between 1 and 100.", this.DefaultPromptEffortLevel, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if 'MaxExecutionsPerRun' is provided, it must be a value greater than zero. If it is left blank, that's acceptable.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateMaxExecutionsPerRunGreaterThanZero(result: ValidationResult) {
    	if (this.MaxExecutionsPerRun != null && this.MaxExecutionsPerRun <= 0) {
    		result.Errors.push(new ValidationErrorInfo("MaxExecutionsPerRun", "If specified, the maximum executions per run must be greater than zero.", this.MaxExecutionsPerRun, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if a minimum executions per run value is specified, it cannot be negative. If the field is not specified, there is no restriction.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateMinExecutionsPerRunNonNegative(result: ValidationResult) {
    	if (this.MinExecutionsPerRun != null && this.MinExecutionsPerRun < 0) {
    		result.Errors.push(new ValidationErrorInfo("MinExecutionsPerRun", "Minimum executions per run cannot be less than zero.", this.MinExecutionsPerRun, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if context compression is enabled, then the message threshold, prompt ID, and message retention count must all be provided. If context compression is not enabled, then these fields can be left empty.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateContextCompressionFieldsWhenEnabled(result: ValidationResult) {
    	if (this.EnableContextCompression) {
    		if (this.ContextCompressionMessageThreshold == null) {
    			result.Errors.push(new ValidationErrorInfo("ContextCompressionMessageThreshold", "Context compression message threshold must be provided when context compression is enabled.", this.ContextCompressionMessageThreshold, ValidationErrorType.Failure));
    		}
    		if (this.ContextCompressionPromptID == null) {
    			result.Errors.push(new ValidationErrorInfo("ContextCompressionPromptID", "Context compression prompt ID must be provided when context compression is enabled.", this.ContextCompressionPromptID, ValidationErrorType.Failure));
    		}
    		if (this.ContextCompressionMessageRetentionCount == null) {
    			result.Errors.push(new ValidationErrorInfo("ContextCompressionMessageRetentionCount", "Context compression message retention count must be provided when context compression is enabled.", this.ContextCompressionMessageRetentionCount, ValidationErrorType.Failure));
    		}
    	}
    }

    /**
    * This rule ensures that if both the minimum and maximum number of executions per run are provided, the minimum cannot be greater than the maximum. If either value is not provided, no check is performed.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateMinExecutionsPerRunLessThanOrEqualToMaxExecutionsPerRun(result: ValidationResult) {
    	if (this.MinExecutionsPerRun != null && this.MaxExecutionsPerRun != null) {
    		if (this.MinExecutionsPerRun > this.MaxExecutionsPerRun) {
    			result.Errors.push(new ValidationErrorInfo("MinExecutionsPerRun", "The minimum number of executions per run cannot be greater than the maximum.", this.MinExecutionsPerRun, ValidationErrorType.Failure));
    		}
    	}
    }

    /**
    * This rule ensures that if a ParentID is specified, then ExposeAsAction must be set to false. If ParentID is not specified, ExposeAsAction can be either true or false.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateParentIDRequiresExposeAsActionFalse(result: ValidationResult) {
    	if (this.ParentID != null && this.ExposeAsAction) {
    		result.Errors.push(new ValidationErrorInfo("ExposeAsAction", "If ParentID is specified, ExposeAsAction must be false.", this.ExposeAsAction, ValidationErrorType.Failure));
    	}
    }
    

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: The unique identifier for each AI agent. Serves as the primary key.
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: The name of the AI agent.
    */
    get Name(): string | null {
        return this.Get('Name');
    }
    set Name(value: string | null) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: A detailed description of the AI agent.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: LogoURL
    * * Display Name: Logo URL
    * * SQL Data Type: nvarchar(255)
    * * Description: URL to an image file or base64 data URI (e.g., data:image/png;base64,...) for the agent logo. Takes precedence over IconClass in UI display.
    */
    get LogoURL(): string | null {
        return this.Get('LogoURL');
    }
    set LogoURL(value: string | null) {
        this.Set('LogoURL', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: References the parent agent in the hierarchical structure. If NULL, this is a root (top-level) agent.
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: ExposeAsAction
    * * Display Name: Expose As Action
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When true, this agent can be exposed as an action for use by other agents. Only valid for root agents.
    */
    get ExposeAsAction(): boolean {
        return this.Get('ExposeAsAction');
    }
    set ExposeAsAction(value: boolean) {
        this.Set('ExposeAsAction', value);
    }

    /**
    * * Field Name: ExecutionOrder
    * * Display Name: Execution Order
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: The order in which this agent should be executed among its siblings under the same parent.
    */
    get ExecutionOrder(): number {
        return this.Get('ExecutionOrder');
    }
    set ExecutionOrder(value: number) {
        this.Set('ExecutionOrder', value);
    }

    /**
    * * Field Name: ExecutionMode
    * * Display Name: Execution Mode
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Sequential
    * * Value List Type: List
    * * Possible Values 
    *   * Parallel
    *   * Sequential
    * * Description: Controls how this agent's child agents are executed. Sequential runs children in order, Parallel runs them simultaneously.
    */
    get ExecutionMode(): 'Parallel' | 'Sequential' {
        return this.Get('ExecutionMode');
    }
    set ExecutionMode(value: 'Parallel' | 'Sequential') {
        this.Set('ExecutionMode', value);
    }

    /**
    * * Field Name: EnableContextCompression
    * * Display Name: Enable Context Compression
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When true, enables automatic compression of conversation context when the message threshold is reached.
    */
    get EnableContextCompression(): boolean {
        return this.Get('EnableContextCompression');
    }
    set EnableContextCompression(value: boolean) {
        this.Set('EnableContextCompression', value);
    }

    /**
    * * Field Name: ContextCompressionMessageThreshold
    * * Display Name: Context Compression Message Threshold
    * * SQL Data Type: int
    * * Description: Number of messages that triggers context compression when EnableContextCompression is true.
    */
    get ContextCompressionMessageThreshold(): number | null {
        return this.Get('ContextCompressionMessageThreshold');
    }
    set ContextCompressionMessageThreshold(value: number | null) {
        this.Set('ContextCompressionMessageThreshold', value);
    }

    /**
    * * Field Name: ContextCompressionPromptID
    * * Display Name: Context Compression Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    */
    get ContextCompressionPromptID(): string | null {
        return this.Get('ContextCompressionPromptID');
    }
    set ContextCompressionPromptID(value: string | null) {
        this.Set('ContextCompressionPromptID', value);
    }

    /**
    * * Field Name: ContextCompressionMessageRetentionCount
    * * Display Name: Context Compression Message Retention Count
    * * SQL Data Type: int
    * * Description: Number of recent messages to keep uncompressed when context compression is applied.
    */
    get ContextCompressionMessageRetentionCount(): number | null {
        return this.Get('ContextCompressionMessageRetentionCount');
    }
    set ContextCompressionMessageRetentionCount(value: number | null) {
        this.Set('ContextCompressionMessageRetentionCount', value);
    }

    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Types (vwAIAgentTypes.ID)
    * * Description: Reference to the AIAgentType that defines the category and system-level behavior for this agent. Cannot be null.
    */
    get TypeID(): string | null {
        return this.Get('TypeID');
    }
    set TypeID(value: string | null) {
        this.Set('TypeID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    * * Description: Current status of the AI agent. Active agents can be executed, Disabled agents are inactive, and Pending agents are awaiting configuration or approval. Allowed values: Active, Disabled, Pending.
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(255)
    * * Description: Optional override for the class name used by the MemberJunction class factory to instantiate this specific agent. If specified, this overrides the agent type's DriverClass. Useful for specialized agent implementations.
    */
    get DriverClass(): string | null {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string | null) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: IconClass
    * * Display Name: Icon Class
    * * SQL Data Type: nvarchar(100)
    * * Description: Font Awesome icon class (e.g., fa-robot, fa-brain) for the agent. Used as fallback when LogoURL is not set or fails to load.
    */
    get IconClass(): string | null {
        return this.Get('IconClass');
    }
    set IconClass(value: string | null) {
        this.Set('IconClass', value);
    }

    /**
    * * Field Name: ModelSelectionMode
    * * Display Name: Model Selection Mode
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Agent Type
    * * Value List Type: List
    * * Possible Values 
    *   * Agent
    *   * Agent Type
    * * Description: Controls whether model selection is driven by the Agent Type's system prompt or the Agent's specific prompt. Default is Agent Type for backward compatibility.
    */
    get ModelSelectionMode(): 'Agent' | 'Agent Type' {
        return this.Get('ModelSelectionMode');
    }
    set ModelSelectionMode(value: 'Agent' | 'Agent Type') {
        this.Set('ModelSelectionMode', value);
    }

    /**
    * * Field Name: PayloadDownstreamPaths
    * * Display Name: Payload Downstream Paths
    * * SQL Data Type: nvarchar(MAX)
    * * Default Value: ["*"]
    * * Description: JSON array of paths that define which parts of the payload should be sent downstream to sub-agents. Use ["*"] to send entire payload, or specify paths like ["customer.id", "campaign.*", "analysis.sentiment"]
    */
    get PayloadDownstreamPaths(): string {
        return this.Get('PayloadDownstreamPaths');
    }
    set PayloadDownstreamPaths(value: string) {
        this.Set('PayloadDownstreamPaths', value);
    }

    /**
    * * Field Name: PayloadUpstreamPaths
    * * Display Name: Payload Upstream Paths
    * * SQL Data Type: nvarchar(MAX)
    * * Default Value: ["*"]
    * * Description: JSON array of paths that define which parts of the payload sub-agents are allowed to write back upstream. Use ["*"] to allow all writes, or specify paths like ["analysis.results", "recommendations.*"]
    */
    get PayloadUpstreamPaths(): string {
        return this.Get('PayloadUpstreamPaths');
    }
    set PayloadUpstreamPaths(value: string) {
        this.Set('PayloadUpstreamPaths', value);
    }

    /**
    * * Field Name: PayloadSelfReadPaths
    * * Display Name: Payload Self Read Paths
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of paths that specify what parts of the payload the agent's own prompt can read. Controls downstream data 
flow when the agent executes its own prompt step.
    */
    get PayloadSelfReadPaths(): string | null {
        return this.Get('PayloadSelfReadPaths');
    }
    set PayloadSelfReadPaths(value: string | null) {
        this.Set('PayloadSelfReadPaths', value);
    }

    /**
    * * Field Name: PayloadSelfWritePaths
    * * Display Name: Payload Self Write Paths
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of paths that specify what parts of the payload the agent's own prompt can write back. Controls upstream 
data flow when the agent executes its own prompt step.
    */
    get PayloadSelfWritePaths(): string | null {
        return this.Get('PayloadSelfWritePaths');
    }
    set PayloadSelfWritePaths(value: string | null) {
        this.Set('PayloadSelfWritePaths', value);
    }

    /**
    * * Field Name: PayloadScope
    * * Display Name: Payload Scope
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Defines the scope/path within the parent payload that this sub-agent operates on. When set, the sub-agent receives only this portion of the payload and all change requests are relative to this scope. Format: /path/to/scope (e.g. /PropA/SubProp1)
    */
    get PayloadScope(): string | null {
        return this.Get('PayloadScope');
    }
    set PayloadScope(value: string | null) {
        this.Set('PayloadScope', value);
    }

    /**
    * * Field Name: FinalPayloadValidation
    * * Display Name: Final Payload Validation
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional JSON schema or requirements that define the expected structure and content of the agent's final payload. Used to validate the output when the agent declares success. Similar to OutputExample in AI Prompts.
    */
    get FinalPayloadValidation(): string | null {
        return this.Get('FinalPayloadValidation');
    }
    set FinalPayloadValidation(value: string | null) {
        this.Set('FinalPayloadValidation', value);
    }

    /**
    * * Field Name: FinalPayloadValidationMode
    * * Display Name: Final Payload Validation Mode
    * * SQL Data Type: nvarchar(25)
    * * Default Value: Retry
    * * Value List Type: List
    * * Possible Values 
    *   * Fail
    *   * Retry
    *   * Warn
    * * Description: Determines how to handle validation failures when FinalPayloadValidation is specified. Options: Retry (default) - retry the agent with validation feedback, Fail - fail the agent run immediately, Warn - log a warning but allow success.
    */
    get FinalPayloadValidationMode(): 'Fail' | 'Retry' | 'Warn' {
        return this.Get('FinalPayloadValidationMode');
    }
    set FinalPayloadValidationMode(value: 'Fail' | 'Retry' | 'Warn') {
        this.Set('FinalPayloadValidationMode', value);
    }

    /**
    * * Field Name: FinalPayloadValidationMaxRetries
    * * Display Name: Final Payload Validation Max Retries
    * * SQL Data Type: int
    * * Default Value: 3
    * * Description: Maximum number of retry attempts allowed when FinalPayloadValidation fails with
Retry mode. After reaching this limit, the validation will fail permanently.
    */
    get FinalPayloadValidationMaxRetries(): number {
        return this.Get('FinalPayloadValidationMaxRetries');
    }
    set FinalPayloadValidationMaxRetries(value: number) {
        this.Set('FinalPayloadValidationMaxRetries', value);
    }

    /**
    * * Field Name: MaxCostPerRun
    * * Display Name: Max Cost Per Run
    * * SQL Data Type: decimal(10, 4)
    * * Description: Maximum cost in dollars allowed for a single agent run. Run will be terminated
if this limit is exceeded.
    */
    get MaxCostPerRun(): number | null {
        return this.Get('MaxCostPerRun');
    }
    set MaxCostPerRun(value: number | null) {
        this.Set('MaxCostPerRun', value);
    }

    /**
    * * Field Name: MaxTokensPerRun
    * * Display Name: Max Tokens Per Run
    * * SQL Data Type: int
    * * Description: Maximum total tokens (input + output) allowed for a single agent run. Run will
be terminated if this limit is exceeded.
    */
    get MaxTokensPerRun(): number | null {
        return this.Get('MaxTokensPerRun');
    }
    set MaxTokensPerRun(value: number | null) {
        this.Set('MaxTokensPerRun', value);
    }

    /**
    * * Field Name: MaxIterationsPerRun
    * * Display Name: Max Iterations Per Run
    * * SQL Data Type: int
    * * Description: Maximum number of prompt iterations allowed for a single agent run. Run will be
terminated if this limit is exceeded.
    */
    get MaxIterationsPerRun(): number | null {
        return this.Get('MaxIterationsPerRun');
    }
    set MaxIterationsPerRun(value: number | null) {
        this.Set('MaxIterationsPerRun', value);
    }

    /**
    * * Field Name: MaxTimePerRun
    * * Display Name: Max Time Per Run
    * * SQL Data Type: int
    * * Description: Maximum time in seconds allowed for a single agent run. Run will be terminated
if this limit is exceeded.
    */
    get MaxTimePerRun(): number | null {
        return this.Get('MaxTimePerRun');
    }
    set MaxTimePerRun(value: number | null) {
        this.Set('MaxTimePerRun', value);
    }

    /**
    * * Field Name: MinExecutionsPerRun
    * * Display Name: Min Executions Per Run
    * * SQL Data Type: int
    * * Description: When acting as a sub-agent, minimum number of times this agent must be executed per parent agent run
    */
    get MinExecutionsPerRun(): number | null {
        return this.Get('MinExecutionsPerRun');
    }
    set MinExecutionsPerRun(value: number | null) {
        this.Set('MinExecutionsPerRun', value);
    }

    /**
    * * Field Name: MaxExecutionsPerRun
    * * Display Name: Max Executions Per Run
    * * SQL Data Type: int
    * * Description: When acting as a sub-agent, maximum number of times this agent can be executed per parent agent run
    */
    get MaxExecutionsPerRun(): number | null {
        return this.Get('MaxExecutionsPerRun');
    }
    set MaxExecutionsPerRun(value: number | null) {
        this.Set('MaxExecutionsPerRun', value);
    }

    /**
    * * Field Name: StartingPayloadValidation
    * * Display Name: Starting Payload Validation
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional JSON schema validation to apply to the input payload before agent execution begins. Uses the same JSONValidator format as FinalPayloadValidation.
    */
    get StartingPayloadValidation(): string | null {
        return this.Get('StartingPayloadValidation');
    }
    set StartingPayloadValidation(value: string | null) {
        this.Set('StartingPayloadValidation', value);
    }

    /**
    * * Field Name: StartingPayloadValidationMode
    * * Display Name: Starting Payload Validation Mode
    * * SQL Data Type: nvarchar(25)
    * * Default Value: Fail
    * * Value List Type: List
    * * Possible Values 
    *   * Fail
    *   * Warn
    * * Description: Determines how to handle StartingPayloadValidation failures. Fail = reject invalid input, Warn = log warning but proceed.
    */
    get StartingPayloadValidationMode(): 'Fail' | 'Warn' {
        return this.Get('StartingPayloadValidationMode');
    }
    set StartingPayloadValidationMode(value: 'Fail' | 'Warn') {
        this.Set('StartingPayloadValidationMode', value);
    }

    /**
    * * Field Name: DefaultPromptEffortLevel
    * * Display Name: Default Prompt Effort Level
    * * SQL Data Type: int
    * * Description: Default effort level for all prompts executed by this agent (1-100, where 1=minimal effort, 100=maximum effort). Takes precedence over individual prompt EffortLevel settings but can be overridden by runtime parameters. Inherited by sub-agents unless explicitly overridden.
    */
    get DefaultPromptEffortLevel(): number | null {
        return this.Get('DefaultPromptEffortLevel');
    }
    set DefaultPromptEffortLevel(value: number | null) {
        this.Set('DefaultPromptEffortLevel', value);
    }

    /**
    * * Field Name: ChatHandlingOption
    * * Display Name: Chat Handling Option
    * * SQL Data Type: nvarchar(30)
    * * Value List Type: List
    * * Possible Values 
    *   * Failed
    *   * Retry
    *   * Success
    * * Description: Controls how Chat next steps are handled. When null (default), Chat propagates to caller. When set to Success, Failed, or Retry, Chat steps are remapped to that value and re-validated.
    */
    get ChatHandlingOption(): 'Failed' | 'Retry' | 'Success' | null {
        return this.Get('ChatHandlingOption');
    }
    set ChatHandlingOption(value: 'Failed' | 'Retry' | 'Success' | null) {
        this.Set('ChatHandlingOption', value);
    }

    /**
    * * Field Name: DefaultArtifactTypeID
    * * Display Name: Default Artifact Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)
    * * Description: Default artifact type produced by this agent. This is the primary artifact type; additional artifact types can be linked via AIAgentArtifactType junction table. Can be NULL if agent does not produce artifacts by default.
    */
    get DefaultArtifactTypeID(): string | null {
        return this.Get('DefaultArtifactTypeID');
    }
    set DefaultArtifactTypeID(value: string | null) {
        this.Set('DefaultArtifactTypeID', value);
    }

    /**
    * * Field Name: OwnerUserID
    * * Display Name: Owner User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Default Value: ECAFCCEC-6A37-EF11-86D4-000D3A4E707E
    * * Description: The user who owns and created this AI agent. Automatically set to the current user if not specified. Owner has full permissions (view, run, edit, delete) regardless of ACL entries.
    */
    get OwnerUserID(): string {
        return this.Get('OwnerUserID');
    }
    set OwnerUserID(value: string) {
        this.Set('OwnerUserID', value);
    }

    /**
    * * Field Name: InvocationMode
    * * Display Name: Invocation Mode
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Any
    * * Value List Type: List
    * * Possible Values 
    *   * Any
    *   * Sub-Agent
    *   * Top-Level
    * * Description: Controls how the agent can be invoked: Any (default - can be top-level or sub-agent), Top-Level (only callable as primary agent), Sub-Agent (only callable as sub-agent). Used to filter available agents in tools like Sage.
    */
    get InvocationMode(): 'Any' | 'Sub-Agent' | 'Top-Level' {
        return this.Get('InvocationMode');
    }
    set InvocationMode(value: 'Any' | 'Sub-Agent' | 'Top-Level') {
        this.Set('InvocationMode', value);
    }

    /**
    * * Field Name: ArtifactCreationMode
    * * Display Name: Artifact Creation Mode
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Always
    * * Value List Type: List
    * * Possible Values 
    *   * Always
    *   * Never
    *   * System Only
    * * Description: Controls how artifacts are created from this agent's payloads. "Always" creates visible artifacts, "Never" skips artifact creation, "System Only" creates hidden system artifacts.
    */
    get ArtifactCreationMode(): 'Always' | 'Never' | 'System Only' {
        return this.Get('ArtifactCreationMode');
    }
    set ArtifactCreationMode(value: 'Always' | 'Never' | 'System Only') {
        this.Set('ArtifactCreationMode', value);
    }

    /**
    * * Field Name: FunctionalRequirements
    * * Display Name: Functional Requirements
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed markdown formatted requirements that explain the business goals of the agent without specific technical implementation details.
    */
    get FunctionalRequirements(): string | null {
        return this.Get('FunctionalRequirements');
    }
    set FunctionalRequirements(value: string | null) {
        this.Set('FunctionalRequirements', value);
    }

    /**
    * * Field Name: TechnicalDesign
    * * Display Name: Technical Design
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed markdown that explains the structure of the agent including agent architecture, actions, sub-agents, prompts, and payload structure.
    */
    get TechnicalDesign(): string | null {
        return this.Get('TechnicalDesign');
    }
    set TechnicalDesign(value: string | null) {
        this.Set('TechnicalDesign', value);
    }

    /**
    * * Field Name: InjectNotes
    * * Display Name: Inject Notes
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When enabled, agent notes will be automatically injected into the agent context based on scoping rules.
    */
    get InjectNotes(): boolean {
        return this.Get('InjectNotes');
    }
    set InjectNotes(value: boolean) {
        this.Set('InjectNotes', value);
    }

    /**
    * * Field Name: MaxNotesToInject
    * * Display Name: Max Notes To Inject
    * * SQL Data Type: int
    * * Default Value: 5
    * * Description: Maximum number of notes to inject into agent context per request.
    */
    get MaxNotesToInject(): number {
        return this.Get('MaxNotesToInject');
    }
    set MaxNotesToInject(value: number) {
        this.Set('MaxNotesToInject', value);
    }

    /**
    * * Field Name: NoteInjectionStrategy
    * * Display Name: Note Injection Strategy
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Relevant
    * * Value List Type: List
    * * Possible Values 
    *   * All
    *   * Recent
    *   * Relevant
    * * Description: Strategy for selecting which notes to inject: Relevant (semantic search), Recent (most recent first), or All (up to max limit).
    */
    get NoteInjectionStrategy(): 'All' | 'Recent' | 'Relevant' {
        return this.Get('NoteInjectionStrategy');
    }
    set NoteInjectionStrategy(value: 'All' | 'Recent' | 'Relevant') {
        this.Set('NoteInjectionStrategy', value);
    }

    /**
    * * Field Name: InjectExamples
    * * Display Name: Inject Examples
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When enabled, agent examples will be automatically injected into the agent context based on scoping rules.
    */
    get InjectExamples(): boolean {
        return this.Get('InjectExamples');
    }
    set InjectExamples(value: boolean) {
        this.Set('InjectExamples', value);
    }

    /**
    * * Field Name: MaxExamplesToInject
    * * Display Name: Max Examples To Inject
    * * SQL Data Type: int
    * * Default Value: 3
    * * Description: Maximum number of examples to inject into agent context per request.
    */
    get MaxExamplesToInject(): number {
        return this.Get('MaxExamplesToInject');
    }
    set MaxExamplesToInject(value: number) {
        this.Set('MaxExamplesToInject', value);
    }

    /**
    * * Field Name: ExampleInjectionStrategy
    * * Display Name: Example Injection Strategy
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Semantic
    * * Value List Type: List
    * * Possible Values 
    *   * Rated
    *   * Recent
    *   * Semantic
    * * Description: Strategy for selecting which examples to inject: Semantic (vector similarity), Recent (most recent first), or Rated (highest success score first).
    */
    get ExampleInjectionStrategy(): 'Rated' | 'Recent' | 'Semantic' {
        return this.Get('ExampleInjectionStrategy');
    }
    set ExampleInjectionStrategy(value: 'Rated' | 'Recent' | 'Semantic') {
        this.Set('ExampleInjectionStrategy', value);
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: ContextCompressionPrompt
    * * Display Name: Context Compression Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get ContextCompressionPrompt(): string | null {
        return this.Get('ContextCompressionPrompt');
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(100)
    */
    get Type(): string | null {
        return this.Get('Type');
    }

    /**
    * * Field Name: DefaultArtifactType
    * * Display Name: Default Artifact Type
    * * SQL Data Type: nvarchar(100)
    */
    get DefaultArtifactType(): string | null {
        return this.Get('DefaultArtifactType');
    }

    /**
    * * Field Name: OwnerUser
    * * Display Name: Owner User
    * * SQL Data Type: nvarchar(100)
    */
    get OwnerUser(): string {
        return this.Get('OwnerUser');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * AI Model Actions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIModelAction
 * * Base View: vwAIModelActions
 * * @description Tracks the actions supported by each AI Model
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'AI Model Actions')
export class AIModelActionEntity extends BaseEntity<AIModelActionEntityType> {
    /**
    * Loads the AI Model Actions record from the database
    * @param ID: string - primary key value to load the AI Model Actions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIModelActionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AIModelID
    * * Display Name: AI Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    get AIModelID(): string {
        return this.Get('AIModelID');
    }
    set AIModelID(value: string) {
        this.Set('AIModelID', value);
    }

    /**
    * * Field Name: AIActionID
    * * Display Name: AI Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Actions (vwAIActions.ID)
    */
    get AIActionID(): string {
        return this.Get('AIActionID');
    }
    set AIActionID(value: string) {
        this.Set('AIActionID', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Determines if this specific action is currently enabled for the associated AI model.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: AIModel
    * * Display Name: AIModel
    * * SQL Data Type: nvarchar(50)
    */
    get AIModel(): string {
        return this.Get('AIModel');
    }

    /**
    * * Field Name: AIAction
    * * Display Name: AIAction
    * * SQL Data Type: nvarchar(50)
    */
    get AIAction(): string {
        return this.Get('AIAction');
    }
}


/**
 * AI Model Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIModelType
 * * Base View: vwAIModelTypes
 * * @description Types of AI Models
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Model Types')
export class AIModelTypeEntity extends BaseEntity<AIModelTypeEntityType> {
    /**
    * Loads the AI Model Types record from the database
    * @param ID: string - primary key value to load the AI Model Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIModelTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * AI Models - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIModel
 * * Base View: vwAIModels
 * * @description Catalog of all AI Models configured in the system
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Models')
export class AIModelEntity extends BaseEntity<AIModelEntityType> {
    /**
    * Loads the AI Models record from the database
    * @param ID: string - primary key value to load the AI Models record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIModelEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for AI Models entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * CostRank: This rule ensures that if a CostRank value is provided, it must be zero or a positive number. CostRank cannot be negative.
    * * PowerRank: This rule ensures that if a value is provided for PowerRank, it must not be negative.
    * * SpeedRank: This rule ensures that the SpeedRank, if specified, must be zero or a positive number. Negative values are not allowed.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateCostRankNonNegative(result);
        this.ValidatePowerRankIsNonNegative(result);
        this.ValidateSpeedRankNonNegative(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if a CostRank value is provided, it must be zero or a positive number. CostRank cannot be negative.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCostRankNonNegative(result: ValidationResult) {
    	if (this.CostRank != null && this.CostRank < 0) {
    		result.Errors.push(new ValidationErrorInfo("CostRank", "CostRank must be greater than or equal to zero.", this.CostRank, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if a value is provided for PowerRank, it must not be negative.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidatePowerRankIsNonNegative(result: ValidationResult) {
    	if (this.PowerRank != null && this.PowerRank < 0) {
    		result.Errors.push(new ValidationErrorInfo("PowerRank", "PowerRank must be zero or positive.", this.PowerRank, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that the SpeedRank, if specified, must be zero or a positive number. Negative values are not allowed.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateSpeedRankNonNegative(result: ValidationResult) {
    	if (this.SpeedRank != null && this.SpeedRank < 0) {
    		result.Errors.push(new ValidationErrorInfo("SpeedRank", "SpeedRank must be zero or a positive number.", this.SpeedRank, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: AIModelTypeID
    * * Display Name: AI Model Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Model Types (vwAIModelTypes.ID)
    */
    get AIModelTypeID(): string {
        return this.Get('AIModelTypeID');
    }
    set AIModelTypeID(value: string) {
        this.Set('AIModelTypeID', value);
    }

    /**
    * * Field Name: PowerRank
    * * Display Name: Power Rank
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Optional column that ranks the power of the AI model. Default is 0 and should be non-negative.
    */
    get PowerRank(): number | null {
        return this.Get('PowerRank');
    }
    set PowerRank(value: number | null) {
        this.Set('PowerRank', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Controls whether this AI model is available for use in the system.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: SpeedRank
    * * Display Name: Speed Rank
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Optional column that ranks the speed of the AI model. Default is 0 and should be non-negative.
    */
    get SpeedRank(): number | null {
        return this.Get('SpeedRank');
    }
    set SpeedRank(value: number | null) {
        this.Set('SpeedRank', value);
    }

    /**
    * * Field Name: CostRank
    * * Display Name: Cost Rank
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Optional column that ranks the cost of the AI model. Default is 0 and should be non-negative.
    */
    get CostRank(): number | null {
        return this.Get('CostRank');
    }
    set CostRank(value: number | null) {
        this.Set('CostRank', value);
    }

    /**
    * * Field Name: ModelSelectionInsights
    * * Display Name: Model Selection Insights
    * * SQL Data Type: nvarchar(MAX)
    * * Description: This column stores unstructured text notes that provide insights into what the model is particularly good at and areas where it may not perform as well. These notes can be used by a human or an AI to determine if the model is a good fit for various purposes.
    */
    get ModelSelectionInsights(): string | null {
        return this.Get('ModelSelectionInsights');
    }
    set ModelSelectionInsights(value: string | null) {
        this.Set('ModelSelectionInsights', value);
    }

    /**
    * * Field Name: AIModelType
    * * Display Name: AIModel Type
    * * SQL Data Type: nvarchar(50)
    */
    get AIModelType(): string {
        return this.Get('AIModelType');
    }

    /**
    * * Field Name: Vendor
    * * Display Name: Vendor
    * * SQL Data Type: nvarchar(50)
    */
    get Vendor(): string | null {
        return this.Get('Vendor');
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(100)
    */
    get DriverClass(): string | null {
        return this.Get('DriverClass');
    }

    /**
    * * Field Name: DriverImportPath
    * * Display Name: Driver Import Path
    * * SQL Data Type: nvarchar(255)
    */
    get DriverImportPath(): string | null {
        return this.Get('DriverImportPath');
    }

    /**
    * * Field Name: APIName
    * * Display Name: APIName
    * * SQL Data Type: nvarchar(100)
    */
    get APIName(): string | null {
        return this.Get('APIName');
    }

    /**
    * * Field Name: InputTokenLimit
    * * Display Name: Input Token Limit
    * * SQL Data Type: int
    */
    get InputTokenLimit(): number | null {
        return this.Get('InputTokenLimit');
    }

    /**
    * * Field Name: SupportedResponseFormats
    * * Display Name: Supported Response Formats
    * * SQL Data Type: nvarchar(100)
    */
    get SupportedResponseFormats(): string | null {
        return this.Get('SupportedResponseFormats');
    }

    /**
    * * Field Name: SupportsEffortLevel
    * * Display Name: Supports Effort Level
    * * SQL Data Type: bit
    */
    get SupportsEffortLevel(): boolean | null {
        return this.Get('SupportsEffortLevel');
    }
}


/**
 * AI Prompt Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIPromptCategory
 * * Base View: vwAIPromptCategories
 * * @description Categories for organizing AI prompts in a hierarchical structure.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Prompt Categories')
export class AIPromptCategoryEntity extends BaseEntity<AIPromptCategoryEntityType> {
    /**
    * Loads the AI Prompt Categories record from the database
    * @param ID: string - primary key value to load the AI Prompt Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIPromptCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompt Categories (vwAIPromptCategories.ID)
    * * Description: Parent category ID for hierarchical organization.
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * AI Prompt Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIPromptType
 * * Base View: vwAIPromptTypes
 * * @description Types of AI prompts such as Chat, Text-to-Image, Text-to-Video, etc.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Prompt Types')
export class AIPromptTypeEntity extends BaseEntity<AIPromptTypeEntityType> {
    /**
    * Loads the AI Prompt Types record from the database
    * @param ID: string - primary key value to load the AI Prompt Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIPromptTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * AI Prompts - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIPrompt
 * * Base View: vwAIPrompts
 * * @description Stores AI prompts, including references to categories, types, and templates.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Prompts')
export class AIPromptEntity extends BaseEntity<AIPromptEntityType> {
    /**
    * Loads the AI Prompts record from the database
    * @param ID: string - primary key value to load the AI Prompts record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIPromptEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for AI Prompts entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * CacheSimilarityThreshold: This rule ensures that the "CacheSimilarityThreshold" value, if provided, must be between 0 and 1 (including both 0 and 1). If it is not set, there is no restriction.
    * * CacheTTLSeconds: This rule ensures that if a cache time-to-live (CacheTTLSeconds) value is provided, it must be greater than zero. If it is not set, that's allowed.
    * * EffortLevel: This rule ensures that if an Effort Level is provided, it must be a number between 1 and 100, inclusive.
    * * Table-Level: This rule ensures that if the cache match type is set to 'Vector', a cache similarity threshold must be provided. For other cache match types, the cache similarity threshold can be left blank.
    * * Table-Level: This rule ensures that if the OutputType is set to "object", then an OutputExample must be provided. For all other OutputType values, OutputExample can be left empty.
    * * Table-Level: This rule ensures that if the Parallelization Mode is set to 'ConfigParam', then a configuration parameter must be provided. For all other modes, the configuration parameter can be left blank.
    * * Table-Level: This rule ensures that if the parallelization mode is set to 'StaticCount', then a value for parallel count must be provided. For other parallelization modes, parallel count can be left blank.
    * * Table-Level: This rule makes sure that the 'ResultSelectorPromptID' field cannot have the same value as the record's own 'ID'. In other words, the record cannot select itself as its own result selector prompt.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateCacheSimilarityThresholdBetweenZeroAndOne(result);
        this.ValidateCacheTTLSecondsIsPositive(result);
        this.ValidateEffortLevelIsBetween1And100(result);
        this.ValidateCacheSimilarityThresholdRequiredForVectorMatchType(result);
        this.ValidateOutputExampleRequiredWhenOutputTypeIsObject(result);
        this.ValidateParallelConfigParamRequiredForConfigParamMode(result);
        this.ValidateParallelCountRequiredForStaticCount(result);
        this.ValidateResultSelectorPromptIDNotEqualID(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the "CacheSimilarityThreshold" value, if provided, must be between 0 and 1 (including both 0 and 1). If it is not set, there is no restriction.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCacheSimilarityThresholdBetweenZeroAndOne(result: ValidationResult) {
    	if (this.CacheSimilarityThreshold != null && (this.CacheSimilarityThreshold < 0 || this.CacheSimilarityThreshold > 1)) {
    		result.Errors.push(new ValidationErrorInfo("CacheSimilarityThreshold", "CacheSimilarityThreshold must be between 0 and 1, inclusive.", this.CacheSimilarityThreshold, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if a cache time-to-live (CacheTTLSeconds) value is provided, it must be greater than zero. If it is not set, that's allowed.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCacheTTLSecondsIsPositive(result: ValidationResult) {
    	if (this.CacheTTLSeconds != null && this.CacheTTLSeconds <= 0) {
    		result.Errors.push(new ValidationErrorInfo("CacheTTLSeconds", "Cache time-to-live (CacheTTLSeconds) must be greater than 0 if specified.", this.CacheTTLSeconds, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if an Effort Level is provided, it must be a number between 1 and 100, inclusive.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateEffortLevelIsBetween1And100(result: ValidationResult) {
    	if (this.EffortLevel != null && (this.EffortLevel < 1 || this.EffortLevel > 100)) {
    		result.Errors.push(new ValidationErrorInfo("EffortLevel", "Effort Level must be between 1 and 100.", this.EffortLevel, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the cache match type is set to 'Vector', a cache similarity threshold must be provided. For other cache match types, the cache similarity threshold can be left blank.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCacheSimilarityThresholdRequiredForVectorMatchType(result: ValidationResult) {
    	if (this.CacheMatchType === "Vector" && this.CacheSimilarityThreshold == null) {
    		result.Errors.push(new ValidationErrorInfo("CacheSimilarityThreshold", "A cache similarity threshold must be set when CacheMatchType is 'Vector'.", this.CacheSimilarityThreshold, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the OutputType is set to "object", then an OutputExample must be provided. For all other OutputType values, OutputExample can be left empty.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateOutputExampleRequiredWhenOutputTypeIsObject(result: ValidationResult) {
    	if (this.OutputType === "object" && this.OutputExample == null) {
    		result.Errors.push(new ValidationErrorInfo("OutputExample", "An output example must be provided when OutputType is 'object'.", this.OutputExample, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the Parallelization Mode is set to 'ConfigParam', then a configuration parameter must be provided. For all other modes, the configuration parameter can be left blank.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateParallelConfigParamRequiredForConfigParamMode(result: ValidationResult) {
    	if (this.ParallelizationMode === "ConfigParam" && this.ParallelConfigParam == null) {
    		result.Errors.push(new ValidationErrorInfo("ParallelConfigParam", "ParallelConfigParam must be provided when ParallelizationMode is set to 'ConfigParam'.", this.ParallelConfigParam, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the parallelization mode is set to 'StaticCount', then a value for parallel count must be provided. For other parallelization modes, parallel count can be left blank.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateParallelCountRequiredForStaticCount(result: ValidationResult) {
    	if (this.ParallelizationMode === "StaticCount" && this.ParallelCount == null) {
    		result.Errors.push(new ValidationErrorInfo("ParallelCount", "A parallel count must be provided when parallelization mode is set to 'StaticCount'.", this.ParallelCount, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule makes sure that the 'ResultSelectorPromptID' field cannot have the same value as the record's own 'ID'. In other words, the record cannot select itself as its own result selector prompt.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateResultSelectorPromptIDNotEqualID(result: ValidationResult) {
    	if (this.ResultSelectorPromptID != null && this.ResultSelectorPromptID === this.ID) {
    		result.Errors.push(new ValidationErrorInfo("ResultSelectorPromptID", "ResultSelectorPromptID cannot be the same as the ID of this record.", this.ResultSelectorPromptID, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: TemplateID
    * * Display Name: Template ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Templates (vwTemplates.ID)
    * * Description: Reference to the template used for the prompt.
    */
    get TemplateID(): string {
        return this.Get('TemplateID');
    }
    set TemplateID(value: string) {
        this.Set('TemplateID', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompt Categories (vwAIPromptCategories.ID)
    * * Description: Reference to the category the prompt belongs to.
    */
    get CategoryID(): string | null {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string | null) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompt Types (vwAIPromptTypes.ID)
    * * Description: Reference to the type of the prompt.
    */
    get TypeID(): string {
        return this.Get('TypeID');
    }
    set TypeID(value: string) {
        this.Set('TypeID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ResponseFormat
    * * Display Name: Response Format
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Any
    * * Value List Type: List
    * * Possible Values 
    *   * Any
    *   * JSON
    *   * Markdown
    *   * ModelSpecific
    *   * Text
    * * Description: Specifies the expected response format for the AI model. Options include Any, Text, Markdown, JSON, and ModelSpecific. Defaults to Any if not specified.
    */
    get ResponseFormat(): 'Any' | 'JSON' | 'Markdown' | 'ModelSpecific' | 'Text' {
        return this.Get('ResponseFormat');
    }
    set ResponseFormat(value: 'Any' | 'JSON' | 'Markdown' | 'ModelSpecific' | 'Text') {
        this.Set('ResponseFormat', value);
    }

    /**
    * * Field Name: ModelSpecificResponseFormat
    * * Display Name: Model Specific Response Format
    * * SQL Data Type: nvarchar(MAX)
    * * Description: A JSON-formatted string containing model-specific response format instructions. This will be parsed and provided as a JSON object to the model.
    */
    get ModelSpecificResponseFormat(): string | null {
        return this.Get('ModelSpecificResponseFormat');
    }
    set ModelSpecificResponseFormat(value: string | null) {
        this.Set('ModelSpecificResponseFormat', value);
    }

    /**
    * * Field Name: AIModelTypeID
    * * Display Name: AI Model Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Model Types (vwAIModelTypes.ID)
    * * Description: References the type of AI model this prompt is designed for (LLM, Image, Audio, etc.).
    */
    get AIModelTypeID(): string | null {
        return this.Get('AIModelTypeID');
    }
    set AIModelTypeID(value: string | null) {
        this.Set('AIModelTypeID', value);
    }

    /**
    * * Field Name: MinPowerRank
    * * Display Name: Min Power Rank
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: The minimum power rank required for models to be considered for this prompt.
    */
    get MinPowerRank(): number | null {
        return this.Get('MinPowerRank');
    }
    set MinPowerRank(value: number | null) {
        this.Set('MinPowerRank', value);
    }

    /**
    * * Field Name: SelectionStrategy
    * * Display Name: Selection Strategy
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Default
    * * Value List Type: List
    * * Possible Values 
    *   * ByPower
    *   * Default
    *   * Specific
    * * Description: Determines how models are selected for this prompt (Default, Specific, ByPower).
    */
    get SelectionStrategy(): 'ByPower' | 'Default' | 'Specific' {
        return this.Get('SelectionStrategy');
    }
    set SelectionStrategy(value: 'ByPower' | 'Default' | 'Specific') {
        this.Set('SelectionStrategy', value);
    }

    /**
    * * Field Name: PowerPreference
    * * Display Name: Power Preference
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Highest
    * * Value List Type: List
    * * Possible Values 
    *   * Balanced
    *   * Highest
    *   * Lowest
    * * Description: When using ByPower selection strategy, determines whether to prefer highest, lowest, or balanced power models.
    */
    get PowerPreference(): 'Balanced' | 'Highest' | 'Lowest' {
        return this.Get('PowerPreference');
    }
    set PowerPreference(value: 'Balanced' | 'Highest' | 'Lowest') {
        this.Set('PowerPreference', value);
    }

    /**
    * * Field Name: ParallelizationMode
    * * Display Name: Parallelization Mode
    * * SQL Data Type: nvarchar(20)
    * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * ConfigParam
    *   * ModelSpecific
    *   * None
    *   * StaticCount
    * * Description: Controls parallelization: None (no parallelization), StaticCount (use AIPrompt.ParallelCount for total runs), ConfigParam (use config param specified in ParallelConfigParam for total runs), or ModelSpecific (check each AIPromptModel's individual settings).
    */
    get ParallelizationMode(): 'ConfigParam' | 'ModelSpecific' | 'None' | 'StaticCount' {
        return this.Get('ParallelizationMode');
    }
    set ParallelizationMode(value: 'ConfigParam' | 'ModelSpecific' | 'None' | 'StaticCount') {
        this.Set('ParallelizationMode', value);
    }

    /**
    * * Field Name: ParallelCount
    * * Display Name: Parallel Count
    * * SQL Data Type: int
    * * Description: When ParallelizationMode is StaticCount, specifies the number of parallel executions.
    */
    get ParallelCount(): number | null {
        return this.Get('ParallelCount');
    }
    set ParallelCount(value: number | null) {
        this.Set('ParallelCount', value);
    }

    /**
    * * Field Name: ParallelConfigParam
    * * Display Name: Parallel Config Param
    * * SQL Data Type: nvarchar(100)
    * * Description: When ParallelizationMode is ConfigParam, specifies the name of the configuration parameter that contains the parallel count.
    */
    get ParallelConfigParam(): string | null {
        return this.Get('ParallelConfigParam');
    }
    set ParallelConfigParam(value: string | null) {
        this.Set('ParallelConfigParam', value);
    }

    /**
    * * Field Name: OutputType
    * * Display Name: Output Type
    * * SQL Data Type: nvarchar(50)
    * * Default Value: string
    * * Value List Type: List
    * * Possible Values 
    *   * boolean
    *   * date
    *   * number
    *   * object
    *   * string
    * * Description: The expected data type of the prompt output: string, number, boolean, date, or object.
    */
    get OutputType(): 'boolean' | 'date' | 'number' | 'object' | 'string' {
        return this.Get('OutputType');
    }
    set OutputType(value: 'boolean' | 'date' | 'number' | 'object' | 'string') {
        this.Set('OutputType', value);
    }

    /**
    * * Field Name: OutputExample
    * * Display Name: Output Example
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON example output when OutputType is "object", used for validating structured outputs.
    */
    get OutputExample(): string | null {
        return this.Get('OutputExample');
    }
    set OutputExample(value: string | null) {
        this.Set('OutputExample', value);
    }

    /**
    * * Field Name: ValidationBehavior
    * * Display Name: Validation Behavior
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Warn
    * * Value List Type: List
    * * Possible Values 
    *   * None
    *   * Strict
    *   * Warn
    * * Description: Determines how validation failures are handled: Strict (fail), Warn (log warning), or None (ignore).
    */
    get ValidationBehavior(): 'None' | 'Strict' | 'Warn' {
        return this.Get('ValidationBehavior');
    }
    set ValidationBehavior(value: 'None' | 'Strict' | 'Warn') {
        this.Set('ValidationBehavior', value);
    }

    /**
    * * Field Name: MaxRetries
    * * Display Name: Max Retries
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Maximum number of retry attempts for API failures.
    */
    get MaxRetries(): number {
        return this.Get('MaxRetries');
    }
    set MaxRetries(value: number) {
        this.Set('MaxRetries', value);
    }

    /**
    * * Field Name: RetryDelayMS
    * * Display Name: Retry Delay MS
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Delay between retry attempts in milliseconds.
    */
    get RetryDelayMS(): number {
        return this.Get('RetryDelayMS');
    }
    set RetryDelayMS(value: number) {
        this.Set('RetryDelayMS', value);
    }

    /**
    * * Field Name: RetryStrategy
    * * Display Name: Retry Strategy
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Fixed
    * * Value List Type: List
    * * Possible Values 
    *   * Exponential
    *   * Fixed
    *   * Linear
    * * Description: Strategy for calculating retry delays: Fixed (same delay each time), Exponential (doubling delay), or Linear (linearly increasing delay).
    */
    get RetryStrategy(): 'Exponential' | 'Fixed' | 'Linear' {
        return this.Get('RetryStrategy');
    }
    set RetryStrategy(value: 'Exponential' | 'Fixed' | 'Linear') {
        this.Set('RetryStrategy', value);
    }

    /**
    * * Field Name: ResultSelectorPromptID
    * * Display Name: Result Selector Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: References another prompt that selects the best result from multiple parallel executions.
    */
    get ResultSelectorPromptID(): string | null {
        return this.Get('ResultSelectorPromptID');
    }
    set ResultSelectorPromptID(value: string | null) {
        this.Set('ResultSelectorPromptID', value);
    }

    /**
    * * Field Name: EnableCaching
    * * Display Name: Enable Caching
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When true, results from this prompt will be cached for potential reuse.
    */
    get EnableCaching(): boolean {
        return this.Get('EnableCaching');
    }
    set EnableCaching(value: boolean) {
        this.Set('EnableCaching', value);
    }

    /**
    * * Field Name: CacheTTLSeconds
    * * Display Name: Cache TTL Seconds
    * * SQL Data Type: int
    * * Description: Time-to-live in seconds for cached results. NULL means results never expire.
    */
    get CacheTTLSeconds(): number | null {
        return this.Get('CacheTTLSeconds');
    }
    set CacheTTLSeconds(value: number | null) {
        this.Set('CacheTTLSeconds', value);
    }

    /**
    * * Field Name: CacheMatchType
    * * Display Name: Cache Match Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Exact
    * * Value List Type: List
    * * Possible Values 
    *   * Exact
    *   * Vector
    * * Description: Method for matching cached results: Exact (string matching) or Vector (embedding similarity).
    */
    get CacheMatchType(): 'Exact' | 'Vector' {
        return this.Get('CacheMatchType');
    }
    set CacheMatchType(value: 'Exact' | 'Vector') {
        this.Set('CacheMatchType', value);
    }

    /**
    * * Field Name: CacheSimilarityThreshold
    * * Display Name: Cache Similarity Threshold
    * * SQL Data Type: float(53)
    * * Description: Threshold (0-1) for vector similarity matching. Higher values require closer matches.
    */
    get CacheSimilarityThreshold(): number | null {
        return this.Get('CacheSimilarityThreshold');
    }
    set CacheSimilarityThreshold(value: number | null) {
        this.Set('CacheSimilarityThreshold', value);
    }

    /**
    * * Field Name: CacheMustMatchModel
    * * Display Name: Cache Must Match Model
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When true, the AI model must match for a cache hit. When false, results from any model can be used.
    */
    get CacheMustMatchModel(): boolean {
        return this.Get('CacheMustMatchModel');
    }
    set CacheMustMatchModel(value: boolean) {
        this.Set('CacheMustMatchModel', value);
    }

    /**
    * * Field Name: CacheMustMatchVendor
    * * Display Name: Cache Must Match Vendor
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When true, the vendor must match for a cache hit. When false, results from any vendor can be used.
    */
    get CacheMustMatchVendor(): boolean {
        return this.Get('CacheMustMatchVendor');
    }
    set CacheMustMatchVendor(value: boolean) {
        this.Set('CacheMustMatchVendor', value);
    }

    /**
    * * Field Name: CacheMustMatchAgent
    * * Display Name: Cache Must Match Agent
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When true, the agent context must match for a cache hit. When false, agent-specific and non-agent results can be used interchangeably.
    */
    get CacheMustMatchAgent(): boolean {
        return this.Get('CacheMustMatchAgent');
    }
    set CacheMustMatchAgent(value: boolean) {
        this.Set('CacheMustMatchAgent', value);
    }

    /**
    * * Field Name: CacheMustMatchConfig
    * * Display Name: Cache Must Match Config
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When true, the configuration must match for a cache hit. When false, results from any configuration can be used.
    */
    get CacheMustMatchConfig(): boolean {
        return this.Get('CacheMustMatchConfig');
    }
    set CacheMustMatchConfig(value: boolean) {
        this.Set('CacheMustMatchConfig', value);
    }

    /**
    * * Field Name: PromptRole
    * * Display Name: Prompt Role
    * * SQL Data Type: nvarchar(20)
    * * Default Value: System
    * * Value List Type: List
    * * Possible Values 
    *   * Assistant
    *   * System
    *   * SystemOrUser
    *   * User
    * * Description: Determines how the prompt is used in conversation: System (always first message), User (positioned by PromptPosition), Assistant (positioned by PromptPosition), or SystemOrUser (try system first, fallback to user last if system slot taken)
    */
    get PromptRole(): 'Assistant' | 'System' | 'SystemOrUser' | 'User' {
        return this.Get('PromptRole');
    }
    set PromptRole(value: 'Assistant' | 'System' | 'SystemOrUser' | 'User') {
        this.Set('PromptRole', value);
    }

    /**
    * * Field Name: PromptPosition
    * * Display Name: Prompt Position
    * * SQL Data Type: nvarchar(20)
    * * Default Value: First
    * * Value List Type: List
    * * Possible Values 
    *   * First
    *   * Last
    * * Description: Controls message placement for User and Assistant role prompts: First (beginning of conversation) or Last (end of conversation). Not used for System role prompts which are always first
    */
    get PromptPosition(): 'First' | 'Last' {
        return this.Get('PromptPosition');
    }
    set PromptPosition(value: 'First' | 'Last') {
        this.Set('PromptPosition', value);
    }

    /**
    * * Field Name: Temperature
    * * Display Name: Temperature
    * * SQL Data Type: decimal(3, 2)
    * * Description: Default temperature setting for this prompt. Controls randomness in the output. 0 = more focused and deterministic, 2 = more random and creative. Can be overridden at runtime.
    */
    get Temperature(): number | null {
        return this.Get('Temperature');
    }
    set Temperature(value: number | null) {
        this.Set('Temperature', value);
    }

    /**
    * * Field Name: TopP
    * * Display Name: Top P
    * * SQL Data Type: decimal(3, 2)
    * * Description: Default TopP (nucleus sampling) for this prompt. Only consider tokens with cumulative probability up to this value. 1 = consider all tokens. Can be overridden at runtime.
    */
    get TopP(): number | null {
        return this.Get('TopP');
    }
    set TopP(value: number | null) {
        this.Set('TopP', value);
    }

    /**
    * * Field Name: TopK
    * * Display Name: Top K
    * * SQL Data Type: int
    * * Description: Default TopK sampling for this prompt. Only sample from the top K tokens. Lower values reduce randomness. Can be overridden at runtime.
    */
    get TopK(): number | null {
        return this.Get('TopK');
    }
    set TopK(value: number | null) {
        this.Set('TopK', value);
    }

    /**
    * * Field Name: MinP
    * * Display Name: Min P
    * * SQL Data Type: decimal(3, 2)
    * * Description: Default MinP (minimum probability) for this prompt. Tokens with probability below this threshold are filtered out. Can be overridden at runtime.
    */
    get MinP(): number | null {
        return this.Get('MinP');
    }
    set MinP(value: number | null) {
        this.Set('MinP', value);
    }

    /**
    * * Field Name: FrequencyPenalty
    * * Display Name: Frequency Penalty
    * * SQL Data Type: decimal(3, 2)
    * * Description: Default frequency penalty for this prompt. Penalizes tokens based on their frequency in the text. Positive values decrease likelihood of repetition. Can be overridden at runtime.
    */
    get FrequencyPenalty(): number | null {
        return this.Get('FrequencyPenalty');
    }
    set FrequencyPenalty(value: number | null) {
        this.Set('FrequencyPenalty', value);
    }

    /**
    * * Field Name: PresencePenalty
    * * Display Name: Presence Penalty
    * * SQL Data Type: decimal(3, 2)
    * * Description: Default presence penalty for this prompt. Penalizes tokens that have appeared in the text. Positive values increase topic diversity. Can be overridden at runtime.
    */
    get PresencePenalty(): number | null {
        return this.Get('PresencePenalty');
    }
    set PresencePenalty(value: number | null) {
        this.Set('PresencePenalty', value);
    }

    /**
    * * Field Name: Seed
    * * Display Name: Seed
    * * SQL Data Type: int
    * * Description: Default random seed for this prompt. Used for deterministic generation. Same seed produces same output. Can be overridden at runtime.
    */
    get Seed(): number | null {
        return this.Get('Seed');
    }
    set Seed(value: number | null) {
        this.Set('Seed', value);
    }

    /**
    * * Field Name: StopSequences
    * * Display Name: Stop Sequences
    * * SQL Data Type: nvarchar(1000)
    * * Description: Default stop sequences for this prompt. Comma-delimited list of sequences that will stop generation when encountered. Can be overridden at runtime.
    */
    get StopSequences(): string | null {
        return this.Get('StopSequences');
    }
    set StopSequences(value: string | null) {
        this.Set('StopSequences', value);
    }

    /**
    * * Field Name: IncludeLogProbs
    * * Display Name: Include Log Probs
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Default setting for including log probabilities in the response. Can be overridden at runtime.
    */
    get IncludeLogProbs(): boolean | null {
        return this.Get('IncludeLogProbs');
    }
    set IncludeLogProbs(value: boolean | null) {
        this.Set('IncludeLogProbs', value);
    }

    /**
    * * Field Name: TopLogProbs
    * * Display Name: Top Log Probs
    * * SQL Data Type: int
    * * Description: Default number of top log probabilities to include when IncludeLogProbs is true. Can be overridden at runtime.
    */
    get TopLogProbs(): number | null {
        return this.Get('TopLogProbs');
    }
    set TopLogProbs(value: number | null) {
        this.Set('TopLogProbs', value);
    }

    /**
    * * Field Name: FailoverStrategy
    * * Display Name: Failover Strategy
    * * SQL Data Type: nvarchar(50)
    * * Default Value: SameModelDifferentVendor
    * * Value List Type: List
    * * Possible Values 
    *   * NextBestModel
    *   * NextBestModel
    *   * None
    *   * None
    *   * PowerRank
    *   * PowerRank
    *   * SameModelDifferentVendor
    *   * SameModelDifferentVendor
    * * Description: Failover strategy to use when the primary model fails. Options: SameModelDifferentVendor, NextBestModel, PowerRank, None
    */
    get FailoverStrategy(): 'NextBestModel' | 'NextBestModel' | 'None' | 'None' | 'PowerRank' | 'PowerRank' | 'SameModelDifferentVendor' | 'SameModelDifferentVendor' {
        return this.Get('FailoverStrategy');
    }
    set FailoverStrategy(value: 'NextBestModel' | 'NextBestModel' | 'None' | 'None' | 'PowerRank' | 'PowerRank' | 'SameModelDifferentVendor' | 'SameModelDifferentVendor') {
        this.Set('FailoverStrategy', value);
    }

    /**
    * * Field Name: FailoverMaxAttempts
    * * Display Name: Failover Max Attempts
    * * SQL Data Type: int
    * * Default Value: 3
    * * Description: Maximum number of failover attempts before giving up
    */
    get FailoverMaxAttempts(): number | null {
        return this.Get('FailoverMaxAttempts');
    }
    set FailoverMaxAttempts(value: number | null) {
        this.Set('FailoverMaxAttempts', value);
    }

    /**
    * * Field Name: FailoverDelaySeconds
    * * Display Name: Failover Delay Seconds
    * * SQL Data Type: int
    * * Default Value: 5
    * * Description: Initial delay in seconds between failover attempts
    */
    get FailoverDelaySeconds(): number | null {
        return this.Get('FailoverDelaySeconds');
    }
    set FailoverDelaySeconds(value: number | null) {
        this.Set('FailoverDelaySeconds', value);
    }

    /**
    * * Field Name: FailoverModelStrategy
    * * Display Name: Failover Model Strategy
    * * SQL Data Type: nvarchar(50)
    * * Default Value: PreferSameModel
    * * Value List Type: List
    * * Possible Values 
    *   * PreferDifferentModel
    *   * PreferDifferentModel
    *   * PreferSameModel
    *   * PreferSameModel
    *   * RequireSameModel
    *   * RequireSameModel
    * * Description: Strategy for selecting failover models. Options: PreferSameModel, PreferDifferentModel, RequireSameModel
    */
    get FailoverModelStrategy(): 'PreferDifferentModel' | 'PreferDifferentModel' | 'PreferSameModel' | 'PreferSameModel' | 'RequireSameModel' | 'RequireSameModel' {
        return this.Get('FailoverModelStrategy');
    }
    set FailoverModelStrategy(value: 'PreferDifferentModel' | 'PreferDifferentModel' | 'PreferSameModel' | 'PreferSameModel' | 'RequireSameModel' | 'RequireSameModel') {
        this.Set('FailoverModelStrategy', value);
    }

    /**
    * * Field Name: FailoverErrorScope
    * * Display Name: Failover Error Scope
    * * SQL Data Type: nvarchar(50)
    * * Default Value: All
    * * Value List Type: List
    * * Possible Values 
    *   * All
    *   * All
    *   * NetworkOnly
    *   * NetworkOnly
    *   * RateLimitOnly
    *   * RateLimitOnly
    *   * ServiceErrorOnly
    *   * ServiceErrorOnly
    * * Description: Types of errors that should trigger failover. Options: All, NetworkOnly, RateLimitOnly, ServiceErrorOnly
    */
    get FailoverErrorScope(): 'All' | 'All' | 'NetworkOnly' | 'NetworkOnly' | 'RateLimitOnly' | 'RateLimitOnly' | 'ServiceErrorOnly' | 'ServiceErrorOnly' {
        return this.Get('FailoverErrorScope');
    }
    set FailoverErrorScope(value: 'All' | 'All' | 'NetworkOnly' | 'NetworkOnly' | 'RateLimitOnly' | 'RateLimitOnly' | 'ServiceErrorOnly' | 'ServiceErrorOnly') {
        this.Set('FailoverErrorScope', value);
    }

    /**
    * * Field Name: EffortLevel
    * * Display Name: Effort Level
    * * SQL Data Type: int
    * * Description: Effort level for this specific prompt (1-100, where 1=minimal effort, 100=maximum effort). Higher values request more thorough reasoning and analysis. Can be overridden by agent DefaultPromptEffortLevel or runtime parameters.
    */
    get EffortLevel(): number | null {
        return this.Get('EffortLevel');
    }
    set EffortLevel(value: number | null) {
        this.Set('EffortLevel', value);
    }

    /**
    * * Field Name: Template
    * * Display Name: Template
    * * SQL Data Type: nvarchar(255)
    */
    get Template(): string {
        return this.Get('Template');
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    */
    get Category(): string | null {
        return this.Get('Category');
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(255)
    */
    get Type(): string {
        return this.Get('Type');
    }

    /**
    * * Field Name: AIModelType
    * * Display Name: AI Model Type
    * * SQL Data Type: nvarchar(50)
    */
    get AIModelType(): string | null {
        return this.Get('AIModelType');
    }

    /**
    * * Field Name: ResultSelectorPrompt
    * * Display Name: Result Selector Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get ResultSelectorPrompt(): string | null {
        return this.Get('ResultSelectorPrompt');
    }

    /**
    * * Field Name: RootResultSelectorPromptID
    * * Display Name: Root Result Selector Prompt ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootResultSelectorPromptID(): string | null {
        return this.Get('RootResultSelectorPromptID');
    }
}


/**
 * AI Result Cache - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIResultCache
 * * Base View: vwAIResultCaches
 * * @description Stores cached results of AI prompts, including multiple runs for history and tracking purposes.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'AI Result Cache')
export class AIResultCacheEntity extends BaseEntity<AIResultCacheEntityType> {
    /**
    * Loads the AI Result Cache record from the database
    * @param ID: string - primary key value to load the AI Result Cache record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIResultCacheEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AIPromptID
    * * Display Name: AIPrompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: Reference to the AI prompt this result corresponds to.
    */
    get AIPromptID(): string {
        return this.Get('AIPromptID');
    }
    set AIPromptID(value: string) {
        this.Set('AIPromptID', value);
    }

    /**
    * * Field Name: AIModelID
    * * Display Name: AIModel ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    * * Description: Reference to the AI model that generated this result.
    */
    get AIModelID(): string {
        return this.Get('AIModelID');
    }
    set AIModelID(value: string) {
        this.Set('AIModelID', value);
    }

    /**
    * * Field Name: RunAt
    * * Display Name: Run At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp of when this result was generated.
    */
    get RunAt(): Date {
        return this.Get('RunAt');
    }
    set RunAt(value: Date) {
        this.Set('RunAt', value);
    }

    /**
    * * Field Name: PromptText
    * * Display Name: Prompt Text
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The prompt text used to generate this result.
    */
    get PromptText(): string {
        return this.Get('PromptText');
    }
    set PromptText(value: string) {
        this.Set('PromptText', value);
    }

    /**
    * * Field Name: ResultText
    * * Display Name: Result Text
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The text of the result generated by the AI model.
    */
    get ResultText(): string | null {
        return this.Get('ResultText');
    }
    set ResultText(value: string | null) {
        this.Set('ResultText', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Expired
    * * Description: The status of this result, indicating whether it is currently active or expired.
    */
    get Status(): 'Active' | 'Expired' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Expired') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: ExpiredOn
    * * Display Name: Expired On
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp of when this result was marked as expired.
    */
    get ExpiredOn(): Date | null {
        return this.Get('ExpiredOn');
    }
    set ExpiredOn(value: Date | null) {
        this.Set('ExpiredOn', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: VendorID
    * * Display Name: Vendor ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
    * * Description: The vendor that provided this result.
    */
    get VendorID(): string | null {
        return this.Get('VendorID');
    }
    set VendorID(value: string | null) {
        this.Set('VendorID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: The agent that initiated the request, if any.
    */
    get AgentID(): string | null {
        return this.Get('AgentID');
    }
    set AgentID(value: string | null) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: ConfigurationID
    * * Display Name: Configuration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
    * * Description: The configuration used for this execution.
    */
    get ConfigurationID(): string | null {
        return this.Get('ConfigurationID');
    }
    set ConfigurationID(value: string | null) {
        this.Set('ConfigurationID', value);
    }

    /**
    * * Field Name: PromptEmbedding
    * * Display Name: Prompt Embedding
    * * SQL Data Type: varbinary
    * * Description: Vector representation of the prompt for similarity matching.
    */
    get PromptEmbedding(): number | null {
        return this.Get('PromptEmbedding');
    }
    set PromptEmbedding(value: number | null) {
        this.Set('PromptEmbedding', value);
    }

    /**
    * * Field Name: PromptRunID
    * * Display Name: Prompt Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Prompt Runs (vwAIPromptRuns.ID)
    * * Description: Reference to the AIPromptRun that created this cache entry.
    */
    get PromptRunID(): string | null {
        return this.Get('PromptRunID');
    }
    set PromptRunID(value: string | null) {
        this.Set('PromptRunID', value);
    }

    /**
    * * Field Name: AIPrompt
    * * Display Name: AIPrompt
    * * SQL Data Type: nvarchar(255)
    */
    get AIPrompt(): string {
        return this.Get('AIPrompt');
    }

    /**
    * * Field Name: AIModel
    * * Display Name: AIModel
    * * SQL Data Type: nvarchar(50)
    */
    get AIModel(): string {
        return this.Get('AIModel');
    }

    /**
    * * Field Name: Vendor
    * * Display Name: Vendor
    * * SQL Data Type: nvarchar(50)
    */
    get Vendor(): string | null {
        return this.Get('Vendor');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(100)
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }
}


/**
 * Application Entities - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ApplicationEntity
 * * Base View: vwApplicationEntities
 * * @description List of entities within each application. An application can have any number of entities and an entity can be part of any number of applications.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Application Entities')
export class ApplicationEntityEntity extends BaseEntity<ApplicationEntityEntityType> {
    /**
    * Loads the Application Entities record from the database
    * @param ID: string - primary key value to load the Application Entities record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ApplicationEntityEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ApplicationID
    * * Display Name: Application ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Applications (vwApplications.ID)
    */
    get ApplicationID(): string {
        return this.Get('ApplicationID');
    }
    set ApplicationID(value: string) {
        this.Set('ApplicationID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    * * Description: Display order of this entity within the application, lower numbers appear first in navigation and menus.
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: DefaultForNewUser
    * * Display Name: Default For New User
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, the entity will be included by default for a new user when they first access the application in question
    */
    get DefaultForNewUser(): boolean {
        return this.Get('DefaultForNewUser');
    }
    set DefaultForNewUser(value: boolean) {
        this.Set('DefaultForNewUser', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Application
    * * SQL Data Type: nvarchar(100)
    */
    get Application(): string {
        return this.Get('Application');
    }

    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: EntityBaseTable
    * * Display Name: Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    get EntityBaseTable(): string {
        return this.Get('EntityBaseTable');
    }

    /**
    * * Field Name: EntityCodeName
    * * Display Name: Entity Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get EntityCodeName(): string | null {
        return this.Get('EntityCodeName');
    }

    /**
    * * Field Name: EntityClassName
    * * Display Name: Entity Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get EntityClassName(): string | null {
        return this.Get('EntityClassName');
    }

    /**
    * * Field Name: EntityBaseTableCodeName
    * * Display Name: Entity Base Table Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get EntityBaseTableCodeName(): string | null {
        return this.Get('EntityBaseTableCodeName');
    }
}


/**
 * Application Settings - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ApplicationSetting
 * * Base View: vwApplicationSettings
 * * @description Stores configuration settings and preferences for applications, including key-value pairs for runtime parameters and user-specific customizations.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Application Settings')
export class ApplicationSettingEntity extends BaseEntity<ApplicationSettingEntityType> {
    /**
    * Loads the Application Settings record from the database
    * @param ID: string - primary key value to load the Application Settings record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ApplicationSettingEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ApplicationID
    * * Display Name: Application ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Applications (vwApplications.ID)
    */
    get ApplicationID(): string {
        return this.Get('ApplicationID');
    }
    set ApplicationID(value: string) {
        this.Set('ApplicationID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The setting value, can be simple text, numbers, booleans, or JSON for complex configuration objects.
    */
    get Value(): string {
        return this.Get('Value');
    }
    set Value(value: string) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Application
    * * Display Name: Application
    * * SQL Data Type: nvarchar(100)
    */
    get Application(): string {
        return this.Get('Application');
    }
}


/**
 * Applications - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Application
 * * Base View: vwApplications
 * * @description Applications are used to group entities in the user interface for ease of user access
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Applications')
export class ApplicationEntity extends BaseEntity<ApplicationEntityType> {
    /**
    * Loads the Applications record from the database
    * @param ID: string - primary key value to load the Applications record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ApplicationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Icon
    * * Display Name: Icon
    * * SQL Data Type: nvarchar(500)
    * * Description: Specify the CSS class information for the display icon for each application.
    */
    get Icon(): string | null {
        return this.Get('Icon');
    }
    set Icon(value: string | null) {
        this.Set('Icon', value);
    }

    /**
    * * Field Name: DefaultForNewUser
    * * Display Name: Default For New User
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If turned on, when a new user first uses the MJ Explorer app, the application records with this turned on will have this application included in their selected application list.
    */
    get DefaultForNewUser(): boolean {
        return this.Get('DefaultForNewUser');
    }
    set DefaultForNewUser(value: boolean) {
        this.Set('DefaultForNewUser', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: SchemaAutoAddNewEntities
    * * Display Name: Schema Auto Add New Entities
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Comma-delimited list of schema names where entities will be automatically added to the application when created in those schemas
    */
    get SchemaAutoAddNewEntities(): string | null {
        return this.Get('SchemaAutoAddNewEntities');
    }
    set SchemaAutoAddNewEntities(value: string | null) {
        this.Set('SchemaAutoAddNewEntities', value);
    }
}


/**
 * Audit Log Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AuditLogType
 * * Base View: vwAuditLogTypes
 * * @description Defines the types of events that can be recorded in the audit log, enabling categorization and filtering of system activities.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Audit Log Types')
export class AuditLogTypeEntity extends BaseEntity<AuditLogTypeEntityType> {
    /**
    * Loads the Audit Log Types record from the database
    * @param ID: string - primary key value to load the Audit Log Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AuditLogTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Audit Log Types (vwAuditLogTypes.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: AuthorizationID
    * * Display Name: Authorization ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    get AuthorizationID(): string | null {
        return this.Get('AuthorizationID');
    }
    set AuthorizationID(value: string | null) {
        this.Set('AuthorizationID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(50)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: Authorization
    * * Display Name: Authorization
    * * SQL Data Type: nvarchar(100)
    */
    get Authorization(): string | null {
        return this.Get('Authorization');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Audit Logs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AuditLog
 * * Base View: vwAuditLogs
 * * @description Tracks system events and user actions for security, compliance, and debugging purposes, providing a complete audit trail. Any application can write entries to this entity.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Audit Logs')
export class AuditLogEntity extends BaseEntity<AuditLogEntityType> {
    /**
    * Loads the Audit Logs record from the database
    * @param ID: string - primary key value to load the Audit Logs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AuditLogEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: AuditLogTypeID
    * * Display Name: Audit Log Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Audit Log Types (vwAuditLogTypes.ID)
    */
    get AuditLogTypeID(): string {
        return this.Get('AuditLogTypeID');
    }
    set AuditLogTypeID(value: string) {
        this.Set('AuditLogTypeID', value);
    }

    /**
    * * Field Name: AuthorizationID
    * * Display Name: Authorization ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    get AuthorizationID(): string | null {
        return this.Get('AuthorizationID');
    }
    set AuthorizationID(value: string | null) {
        this.Set('AuthorizationID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Allow
    * * Value List Type: List
    * * Possible Values 
    *   * Failed
    *   * Success
    */
    get Status(): 'Failed' | 'Success' {
        return this.Get('Status');
    }
    set Status(value: 'Failed' | 'Success') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Details
    * * Display Name: Details
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON-formatted additional context about the audited event, including before/after values, parameters, or other relevant data.
    */
    get Details(): string | null {
        return this.Get('Details');
    }
    set Details(value: string | null) {
        this.Set('Details', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string | null {
        return this.Get('EntityID');
    }
    set EntityID(value: string | null) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    * * Description: The primary key value of the record that was affected by this audited action, enabling direct lookup of the modified data.
    */
    get RecordID(): string | null {
        return this.Get('RecordID');
    }
    set RecordID(value: string | null) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: AuditLogType
    * * Display Name: Audit Log Type
    * * SQL Data Type: nvarchar(50)
    */
    get AuditLogType(): string {
        return this.Get('AuditLogType');
    }

    /**
    * * Field Name: Authorization
    * * Display Name: Authorization
    * * SQL Data Type: nvarchar(100)
    */
    get Authorization(): string | null {
        return this.Get('Authorization');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string | null {
        return this.Get('Entity');
    }
}


/**
 * Authorization Roles - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AuthorizationRole
 * * Base View: vwAuthorizationRoles
 * * @description Links authorizations to roles, defining which permissions are granted to users assigned to specific roles in the system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Authorization Roles')
export class AuthorizationRoleEntity extends BaseEntity<AuthorizationRoleEntityType> {
    /**
    * Loads the Authorization Roles record from the database
    * @param ID: string - primary key value to load the Authorization Roles record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AuthorizationRoleEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AuthorizationID
    * * Display Name: Authorization ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    get AuthorizationID(): string {
        return this.Get('AuthorizationID');
    }
    set AuthorizationID(value: string) {
        this.Set('AuthorizationID', value);
    }

    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    get RoleID(): string {
        return this.Get('RoleID');
    }
    set RoleID(value: string) {
        this.Set('RoleID', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nchar(10)
    * * Default Value: grant
    * * Value List Type: List
    * * Possible Values 
    *   * Allow
    *   * Deny
    * * Description: Specifies whether this authorization is granted to ('grant') or explicitly denied ('deny') for the role.
    */
    get Type(): 'Allow' | 'Deny' {
        return this.Get('Type');
    }
    set Type(value: 'Allow' | 'Deny') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Authorization
    * * Display Name: Authorization
    * * SQL Data Type: nvarchar(100)
    */
    get Authorization(): string {
        return this.Get('Authorization');
    }

    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(50)
    */
    get Role(): string {
        return this.Get('Role');
    }
}


/**
 * Authorizations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Authorization
 * * Base View: vwAuthorizations
 * * @description Stores the fundamental permissions and access rights that can be granted to users and roles throughout the system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Authorizations')
export class AuthorizationEntity extends BaseEntity<AuthorizationEntityType> {
    /**
    * Loads the Authorizations record from the database
    * @param ID: string - primary key value to load the Authorizations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AuthorizationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether this authorization is currently active and can be granted to users or roles.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: UseAuditLog
    * * Display Name: Use Audit Log
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, Audit Log records are created whenever this authorization is invoked for a user
    */
    get UseAuditLog(): boolean {
        return this.Get('UseAuditLog');
    }
    set UseAuditLog(value: boolean) {
        this.Set('UseAuditLog', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Communication Base Message Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CommunicationBaseMessageType
 * * Base View: vwCommunicationBaseMessageTypes
 * * @description Base message types and their supported functionalities.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Communication Base Message Types')
export class CommunicationBaseMessageTypeEntity extends BaseEntity<CommunicationBaseMessageTypeEntityType> {
    /**
    * Loads the Communication Base Message Types record from the database
    * @param ID: string - primary key value to load the Communication Base Message Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CommunicationBaseMessageTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(100)
    * * Description: The unique identifier for this message type, used for routing and processing communications.
    */
    get Type(): string {
        return this.Get('Type');
    }
    set Type(value: string) {
        this.Set('Type', value);
    }

    /**
    * * Field Name: SupportsAttachments
    * * Display Name: Supports Attachments
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if attachments are supported.
    */
    get SupportsAttachments(): boolean {
        return this.Get('SupportsAttachments');
    }
    set SupportsAttachments(value: boolean) {
        this.Set('SupportsAttachments', value);
    }

    /**
    * * Field Name: SupportsSubjectLine
    * * Display Name: Supports Subject Line
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if a subject line is supported.
    */
    get SupportsSubjectLine(): boolean {
        return this.Get('SupportsSubjectLine');
    }
    set SupportsSubjectLine(value: boolean) {
        this.Set('SupportsSubjectLine', value);
    }

    /**
    * * Field Name: SupportsHtml
    * * Display Name: Supports Html
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if HTML content is supported.
    */
    get SupportsHtml(): boolean {
        return this.Get('SupportsHtml');
    }
    set SupportsHtml(value: boolean) {
        this.Set('SupportsHtml', value);
    }

    /**
    * * Field Name: MaxBytes
    * * Display Name: Max Bytes
    * * SQL Data Type: int
    * * Description: The maximum size in bytes for the message.
    */
    get MaxBytes(): number | null {
        return this.Get('MaxBytes');
    }
    set MaxBytes(value: number | null) {
        this.Set('MaxBytes', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Communication Logs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CommunicationLog
 * * Base View: vwCommunicationLogs
 * * @description Logs of sent and received messages.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Communication Logs')
export class CommunicationLogEntity extends BaseEntity<CommunicationLogEntityType> {
    /**
    * Loads the Communication Logs record from the database
    * @param ID: string - primary key value to load the Communication Logs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CommunicationLogEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CommunicationProviderID
    * * Display Name: Communication Provider ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Providers (vwCommunicationProviders.ID)
    */
    get CommunicationProviderID(): string {
        return this.Get('CommunicationProviderID');
    }
    set CommunicationProviderID(value: string) {
        this.Set('CommunicationProviderID', value);
    }

    /**
    * * Field Name: CommunicationProviderMessageTypeID
    * * Display Name: Communication Provider Message Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Provider Message Types (vwCommunicationProviderMessageTypes.ID)
    */
    get CommunicationProviderMessageTypeID(): string {
        return this.Get('CommunicationProviderMessageTypeID');
    }
    set CommunicationProviderMessageTypeID(value: string) {
        this.Set('CommunicationProviderMessageTypeID', value);
    }

    /**
    * * Field Name: CommunicationRunID
    * * Display Name: Communication Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Runs (vwCommunicationRuns.ID)
    */
    get CommunicationRunID(): string | null {
        return this.Get('CommunicationRunID');
    }
    set CommunicationRunID(value: string | null) {
        this.Set('CommunicationRunID', value);
    }

    /**
    * * Field Name: Direction
    * * Display Name: Direction
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Receiving
    *   * Sending
    * * Description: The direction of the communication log (Sending or Receiving).
    */
    get Direction(): 'Receiving' | 'Sending' {
        return this.Get('Direction');
    }
    set Direction(value: 'Receiving' | 'Sending') {
        this.Set('Direction', value);
    }

    /**
    * * Field Name: MessageDate
    * * Display Name: Message Date
    * * SQL Data Type: datetime
    * * Description: The date and time when the message was logged.
    */
    get MessageDate(): Date {
        return this.Get('MessageDate');
    }
    set MessageDate(value: Date) {
        this.Set('MessageDate', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In-Progress
    *   * Pending
    * * Description: The status of the logged message (Pending, In-Progress, Complete, Failed).
    */
    get Status(): 'Complete' | 'Failed' | 'In-Progress' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Failed' | 'In-Progress' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: MessageContent
    * * Display Name: Message Content
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The content of the logged message.
    */
    get MessageContent(): string | null {
        return this.Get('MessageContent');
    }
    set MessageContent(value: string | null) {
        this.Set('MessageContent', value);
    }

    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The error message if the message sending failed.
    */
    get ErrorMessage(): string | null {
        return this.Get('ErrorMessage');
    }
    set ErrorMessage(value: string | null) {
        this.Set('ErrorMessage', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: CommunicationProvider
    * * Display Name: Communication Provider
    * * SQL Data Type: nvarchar(255)
    */
    get CommunicationProvider(): string {
        return this.Get('CommunicationProvider');
    }

    /**
    * * Field Name: CommunicationProviderMessageType
    * * Display Name: Communication Provider Message Type
    * * SQL Data Type: nvarchar(255)
    */
    get CommunicationProviderMessageType(): string {
        return this.Get('CommunicationProviderMessageType');
    }
}


/**
 * Communication Provider Message Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CommunicationProviderMessageType
 * * Base View: vwCommunicationProviderMessageTypes
 * * @description Providers and their supported message types with additional attributes.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Communication Provider Message Types')
export class CommunicationProviderMessageTypeEntity extends BaseEntity<CommunicationProviderMessageTypeEntityType> {
    /**
    * Loads the Communication Provider Message Types record from the database
    * @param ID: string - primary key value to load the Communication Provider Message Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CommunicationProviderMessageTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CommunicationProviderID
    * * Display Name: Communication Provider ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Providers (vwCommunicationProviders.ID)
    */
    get CommunicationProviderID(): string {
        return this.Get('CommunicationProviderID');
    }
    set CommunicationProviderID(value: string) {
        this.Set('CommunicationProviderID', value);
    }

    /**
    * * Field Name: CommunicationBaseMessageTypeID
    * * Display Name: Communication Base Message Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Base Message Types (vwCommunicationBaseMessageTypes.ID)
    */
    get CommunicationBaseMessageTypeID(): string {
        return this.Get('CommunicationBaseMessageTypeID');
    }
    set CommunicationBaseMessageTypeID(value: string) {
        this.Set('CommunicationBaseMessageTypeID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Disabled
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    * * Description: The status of the provider message type (Disabled or Active).
    */
    get Status(): 'Active' | 'Disabled' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: AdditionalAttributes
    * * Display Name: Additional Attributes
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Additional attributes specific to the provider message type.
    */
    get AdditionalAttributes(): string | null {
        return this.Get('AdditionalAttributes');
    }
    set AdditionalAttributes(value: string | null) {
        this.Set('AdditionalAttributes', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: CommunicationProvider
    * * Display Name: Communication Provider
    * * SQL Data Type: nvarchar(255)
    */
    get CommunicationProvider(): string {
        return this.Get('CommunicationProvider');
    }

    /**
    * * Field Name: CommunicationBaseMessageType
    * * Display Name: Communication Base Message Type
    * * SQL Data Type: nvarchar(100)
    */
    get CommunicationBaseMessageType(): string {
        return this.Get('CommunicationBaseMessageType');
    }
}


/**
 * Communication Providers - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CommunicationProvider
 * * Base View: vwCommunicationProviders
 * * @description All supported communication providers.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Communication Providers')
export class CommunicationProviderEntity extends BaseEntity<CommunicationProviderEntityType> {
    /**
    * Loads the Communication Providers record from the database
    * @param ID: string - primary key value to load the Communication Providers record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CommunicationProviderEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for Communication Providers entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that scheduled sending is only supported if sending is also supported. In other words, you cannot support scheduled sending without also supporting sending.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateSupportsScheduledSendingOnlyIfSendingIsSupported(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that scheduled sending is only supported if sending is also supported. In other words, you cannot support scheduled sending without also supporting sending.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateSupportsScheduledSendingOnlyIfSendingIsSupported(result: ValidationResult) {
    	if (this.SupportsScheduledSending && !this.SupportsSending) {
    		result.Errors.push(new ValidationErrorInfo("SupportsScheduledSending", "Scheduled sending cannot be supported if sending is not supported.", this.SupportsScheduledSending, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Disabled
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    * * Description: The status of the communication provider (Disabled or Active).
    */
    get Status(): 'Active' | 'Disabled' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: SupportsSending
    * * Display Name: Supports Sending
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the provider supports sending messages.
    */
    get SupportsSending(): boolean {
        return this.Get('SupportsSending');
    }
    set SupportsSending(value: boolean) {
        this.Set('SupportsSending', value);
    }

    /**
    * * Field Name: SupportsReceiving
    * * Display Name: Supports Receiving
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the provider supports receiving messages.
    */
    get SupportsReceiving(): boolean {
        return this.Get('SupportsReceiving');
    }
    set SupportsReceiving(value: boolean) {
        this.Set('SupportsReceiving', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: SupportsScheduledSending
    * * Display Name: Supports Scheduled Sending
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether or not the provider supports sending messages at a specific time
    */
    get SupportsScheduledSending(): boolean {
        return this.Get('SupportsScheduledSending');
    }
    set SupportsScheduledSending(value: boolean) {
        this.Set('SupportsScheduledSending', value);
    }

    /**
    * * Field Name: SupportsForwarding
    * * Display Name: Supports Forwarding
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether or not the provider supports forwarding messages to another recipient 
    */
    get SupportsForwarding(): boolean {
        return this.Get('SupportsForwarding');
    }
    set SupportsForwarding(value: boolean) {
        this.Set('SupportsForwarding', value);
    }

    /**
    * * Field Name: SupportsReplying
    * * Display Name: Supports Replying
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether or not the provider supports replying to messages
    */
    get SupportsReplying(): boolean {
        return this.Get('SupportsReplying');
    }
    set SupportsReplying(value: boolean) {
        this.Set('SupportsReplying', value);
    }

    /**
    * * Field Name: SupportsDrafts
    * * Display Name: Supports Drafts
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether or not the provider supports creating draft messages
    */
    get SupportsDrafts(): boolean {
        return this.Get('SupportsDrafts');
    }
    set SupportsDrafts(value: boolean) {
        this.Set('SupportsDrafts', value);
    }
}


/**
 * Communication Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CommunicationRun
 * * Base View: vwCommunicationRuns
 * * @description Runs of bulk message sends and receives.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Communication Runs')
export class CommunicationRunEntity extends BaseEntity<CommunicationRunEntityType> {
    /**
    * Loads the Communication Runs record from the database
    * @param ID: string - primary key value to load the Communication Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CommunicationRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: Direction
    * * Display Name: Direction
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Receiving
    *   * Sending
    * * Description: The direction of the communication run (Sending or Receiving).
    */
    get Direction(): 'Receiving' | 'Sending' {
        return this.Get('Direction');
    }
    set Direction(value: 'Receiving' | 'Sending') {
        this.Set('Direction', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In-Progress
    *   * Pending
    * * Description: The status of the communication run (Pending, In-Progress, Complete, Failed).
    */
    get Status(): 'Complete' | 'Failed' | 'In-Progress' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Failed' | 'In-Progress' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    get StartedAt(): Date | null {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date | null) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The error message if the communication run failed.
    */
    get ErrorMessage(): string | null {
        return this.Get('ErrorMessage');
    }
    set ErrorMessage(value: string | null) {
        this.Set('ErrorMessage', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * Companies - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Company
 * * Base View: vwCompanies
 * * @description A list of organizational units within your business. These can be subsidiaries or divisions or other units. Companies are used to organizae employee records and also for separating integrations if you have multiple integrations of the same type of system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Companies')
export class CompanyEntity extends BaseEntity<CompanyEntityType> {
    /**
    * Loads the Companies record from the database
    * @param ID: string - primary key value to load the Companies record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CompanyEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(200)
    */
    get Description(): string {
        return this.Get('Description');
    }
    set Description(value: string) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Website
    * * SQL Data Type: nvarchar(100)
    * * Description: The primary website URL for this company or division.
    */
    get Website(): string | null {
        return this.Get('Website');
    }
    set Website(value: string | null) {
        this.Set('Website', value);
    }

    /**
    * * Field Name: LogoURL
    * * Display Name: Logo URL
    * * SQL Data Type: nvarchar(500)
    * * Description: URL pointing to the company's logo image, used for branding in the UI.
    */
    get LogoURL(): string | null {
        return this.Get('LogoURL');
    }
    set LogoURL(value: string | null) {
        this.Set('LogoURL', value);
    }

    /**
    * * Field Name: Domain
    * * Display Name: Domain
    * * SQL Data Type: nvarchar(255)
    * * Description: The primary email domain associated with this company, used for employee email validation and SSO configuration.
    */
    get Domain(): string | null {
        return this.Get('Domain');
    }
    set Domain(value: string | null) {
        this.Set('Domain', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Company Integration Record Maps - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CompanyIntegrationRecordMap
 * * Base View: vwCompanyIntegrationRecordMaps
 * * @description Maps records between internal entities and external system identifiers, maintaining synchronization between MemberJunction and integrated platforms.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Company Integration Record Maps')
export class CompanyIntegrationRecordMapEntity extends BaseEntity<CompanyIntegrationRecordMapEntityType> {
    /**
    * Loads the Company Integration Record Maps record from the database
    * @param ID: string - primary key value to load the Company Integration Record Maps record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CompanyIntegrationRecordMapEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CompanyIntegrationID
    * * Display Name: Company Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)
    */
    get CompanyIntegrationID(): string {
        return this.Get('CompanyIntegrationID');
    }
    set CompanyIntegrationID(value: string) {
        this.Set('CompanyIntegrationID', value);
    }

    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record ID
    * * SQL Data Type: nvarchar(750)
    * * Description: The unique identifier for this record in the external integrated system.
    */
    get ExternalSystemRecordID(): string {
        return this.Get('ExternalSystemRecordID');
    }
    set ExternalSystemRecordID(value: string) {
        this.Set('ExternalSystemRecordID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: EntityRecordID
    * * Display Name: Entity Record ID
    * * SQL Data Type: nvarchar(750)
    * * Description: The internal MemberJunction record ID that corresponds to the external system record.
    */
    get EntityRecordID(): string {
        return this.Get('EntityRecordID');
    }
    set EntityRecordID(value: string) {
        this.Set('EntityRecordID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: CompanyIntegration
    * * Display Name: Company Integration
    * * SQL Data Type: nvarchar(255)
    */
    get CompanyIntegration(): string {
        return this.Get('CompanyIntegration');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }
}


/**
 * Company Integration Run API Logs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CompanyIntegrationRunAPILog
 * * Base View: vwCompanyIntegrationRunAPILogs
 * * @description Logs detailed API calls and responses during integration runs, including request/response payloads, status codes, and timing information.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Company Integration Run API Logs')
export class CompanyIntegrationRunAPILogEntity extends BaseEntity<CompanyIntegrationRunAPILogEntityType> {
    /**
    * Loads the Company Integration Run API Logs record from the database
    * @param ID: string - primary key value to load the Company Integration Run API Logs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CompanyIntegrationRunAPILogEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CompanyIntegrationRunID
    * * Display Name: Company Integration Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integration Runs (vwCompanyIntegrationRuns.ID)
    */
    get CompanyIntegrationRunID(): string {
        return this.Get('CompanyIntegrationRunID');
    }
    set CompanyIntegrationRunID(value: string) {
        this.Set('CompanyIntegrationRunID', value);
    }

    /**
    * * Field Name: ExecutedAt
    * * Display Name: Executed At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    * * Description: Timestamp when this API call was executed during the integration run.
    */
    get ExecutedAt(): Date {
        return this.Get('ExecutedAt');
    }
    set ExecutedAt(value: Date) {
        this.Set('ExecutedAt', value);
    }

    /**
    * * Field Name: IsSuccess
    * * Display Name: Is Success
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether the API call completed successfully or encountered an error.
    */
    get IsSuccess(): boolean {
        return this.Get('IsSuccess');
    }
    set IsSuccess(value: boolean) {
        this.Set('IsSuccess', value);
    }

    /**
    * * Field Name: RequestMethod
    * * Display Name: Request Method
    * * SQL Data Type: nvarchar(12)
    * * Value List Type: List
    * * Possible Values 
    *   * DELETE
    *   * GET
    *   * HEAD
    *   * OPTIONS
    *   * PATCH
    *   * POST
    *   * PUT
    * * Description: HTTP method used for the API call (GET, POST, PUT, DELETE, PATCH).
    */
    get RequestMethod(): 'DELETE' | 'GET' | 'HEAD' | 'OPTIONS' | 'PATCH' | 'POST' | 'PUT' | null {
        return this.Get('RequestMethod');
    }
    set RequestMethod(value: 'DELETE' | 'GET' | 'HEAD' | 'OPTIONS' | 'PATCH' | 'POST' | 'PUT' | null) {
        this.Set('RequestMethod', value);
    }

    /**
    * * Field Name: URL
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The complete URL that was called, including query parameters.
    */
    get URL(): string | null {
        return this.Get('URL');
    }
    set URL(value: string | null) {
        this.Set('URL', value);
    }

    /**
    * * Field Name: Parameters
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON-formatted request body or parameters sent with the API call.
    */
    get Parameters(): string | null {
        return this.Get('Parameters');
    }
    set Parameters(value: string | null) {
        this.Set('Parameters', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Company Integration Run Details - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CompanyIntegrationRunDetail
 * * Base View: vwCompanyIntegrationRunDetails
 * * @description Tracks individual record-level operations within an integration run, including success/failure status and error details for each processed item.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Company Integration Run Details')
export class CompanyIntegrationRunDetailEntity extends BaseEntity<CompanyIntegrationRunDetailEntityType> {
    /**
    * Loads the Company Integration Run Details record from the database
    * @param ID: string - primary key value to load the Company Integration Run Details record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CompanyIntegrationRunDetailEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CompanyIntegrationRunID
    * * Display Name: CompanyIntegrationRun ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integration Runs (vwCompanyIntegrationRuns.ID)
    */
    get CompanyIntegrationRunID(): string {
        return this.Get('CompanyIntegrationRunID');
    }
    set CompanyIntegrationRunID(value: string) {
        this.Set('CompanyIntegrationRunID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    * * Description: The ID of the specific record being processed in this integration operation.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: Action
    * * SQL Data Type: nchar(20)
    * * Description: The type of operation performed (INSERT, UPDATE, DELETE, SYNC).
    */
    get Action(): string {
        return this.Get('Action');
    }
    set Action(value: string) {
        this.Set('Action', value);
    }

    /**
    * * Field Name: ExecutedAt
    * * Display Name: Executed At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    * * Description: Timestamp when this specific record operation was executed.
    */
    get ExecutedAt(): Date {
        return this.Get('ExecutedAt');
    }
    set ExecutedAt(value: Date) {
        this.Set('ExecutedAt', value);
    }

    /**
    * * Field Name: IsSuccess
    * * Display Name: Is Success
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this individual record operation succeeded or failed.
    */
    get IsSuccess(): boolean {
        return this.Get('IsSuccess');
    }
    set IsSuccess(value: boolean) {
        this.Set('IsSuccess', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: RunStartedAt
    * * Display Name: Run Started At
    * * SQL Data Type: datetime
    */
    get RunStartedAt(): Date | null {
        return this.Get('RunStartedAt');
    }

    /**
    * * Field Name: RunEndedAt
    * * Display Name: Run Ended At
    * * SQL Data Type: datetime
    */
    get RunEndedAt(): Date | null {
        return this.Get('RunEndedAt');
    }
}


/**
 * Company Integration Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CompanyIntegrationRun
 * * Base View: vwCompanyIntegrationRuns
 * * @description Records execution history of company integrations, including start/end times, overall status, and aggregate statistics for monitoring and troubleshooting.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Company Integration Runs')
export class CompanyIntegrationRunEntity extends BaseEntity<CompanyIntegrationRunEntityType> {
    /**
    * Loads the Company Integration Runs record from the database
    * @param ID: string - primary key value to load the Company Integration Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CompanyIntegrationRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CompanyIntegrationID
    * * Display Name: CompanyIntegration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)
    */
    get CompanyIntegrationID(): string {
        return this.Get('CompanyIntegrationID');
    }
    set CompanyIntegrationID(value: string) {
        this.Set('CompanyIntegrationID', value);
    }

    /**
    * * Field Name: RunByUserID
    * * Display Name: RunByUser ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get RunByUserID(): string {
        return this.Get('RunByUserID');
    }
    set RunByUserID(value: string) {
        this.Set('RunByUserID', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    get StartedAt(): Date | null {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date | null) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: TotalRecords
    * * Display Name: Total Records
    * * SQL Data Type: int
    * * Description: The total number of records processed during this integration run.
    */
    get TotalRecords(): number {
        return this.Get('TotalRecords');
    }
    set TotalRecords(value: number) {
        this.Set('TotalRecords', value);
    }

    /**
    * * Field Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Failed
    *   * In Progress
    *   * Pending
    *   * Success
    * * Description: Status of the integration run. Possible values: Pending, In Progress, Success, Failed.
    */
    get Status(): 'Failed' | 'In Progress' | 'Pending' | 'Success' {
        return this.Get('Status');
    }
    set Status(value: 'Failed' | 'In Progress' | 'Pending' | 'Success') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: ErrorLog
    * * Display Name: Error Log
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional error log information for the integration run.
    */
    get ErrorLog(): string | null {
        return this.Get('ErrorLog');
    }
    set ErrorLog(value: string | null) {
        this.Set('ErrorLog', value);
    }

    /**
    * * Field Name: ConfigData
    * * Display Name: Config Data
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional configuration data in JSON format for the request that started the integration run for audit purposes.
    */
    get ConfigData(): string | null {
        return this.Get('ConfigData');
    }
    set ConfigData(value: string | null) {
        this.Set('ConfigData', value);
    }

    /**
    * * Field Name: Integration
    * * Display Name: Integration
    * * SQL Data Type: nvarchar(100)
    */
    get Integration(): string {
        return this.Get('Integration');
    }

    /**
    * * Field Name: Company
    * * Display Name: Company
    * * SQL Data Type: nvarchar(50)
    */
    get Company(): string {
        return this.Get('Company');
    }

    /**
    * * Field Name: RunByUser
    * * Display Name: Run By User
    * * SQL Data Type: nvarchar(100)
    */
    get RunByUser(): string {
        return this.Get('RunByUser');
    }
}


/**
 * Company Integrations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CompanyIntegration
 * * Base View: vwCompanyIntegrations
 * * @description Links individual company records to specific integrations
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Company Integrations')
export class CompanyIntegrationEntity extends BaseEntity<CompanyIntegrationEntityType> {
    /**
    * Loads the Company Integrations record from the database
    * @param ID: string - primary key value to load the Company Integrations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CompanyIntegrationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CompanyID
    * * Display Name: Company ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Companies (vwCompanies.ID)
    */
    get CompanyID(): string {
        return this.Get('CompanyID');
    }
    set CompanyID(value: string) {
        this.Set('CompanyID', value);
    }

    /**
    * * Field Name: IntegrationID
    * * Display Name: Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Integrations (vwIntegrations.ID)
    */
    get IntegrationID(): string {
        return this.Get('IntegrationID');
    }
    set IntegrationID(value: string) {
        this.Set('IntegrationID', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Description: Controls whether this integration is currently active for the company.
    */
    get IsActive(): boolean | null {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean | null) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: AccessToken
    * * Display Name: Access Token
    * * SQL Data Type: nvarchar(255)
    * * Description: OAuth access token for authenticating with the external system.
    */
    get AccessToken(): string | null {
        return this.Get('AccessToken');
    }
    set AccessToken(value: string | null) {
        this.Set('AccessToken', value);
    }

    /**
    * * Field Name: RefreshToken
    * * Display Name: Refresh Token
    * * SQL Data Type: nvarchar(255)
    * * Description: OAuth refresh token used to obtain new access tokens when they expire.
    */
    get RefreshToken(): string | null {
        return this.Get('RefreshToken');
    }
    set RefreshToken(value: string | null) {
        this.Set('RefreshToken', value);
    }

    /**
    * * Field Name: TokenExpirationDate
    * * Display Name: Token Expiration Date
    * * SQL Data Type: datetime
    * * Description: Timestamp when the current access token expires and needs to be refreshed.
    */
    get TokenExpirationDate(): Date | null {
        return this.Get('TokenExpirationDate');
    }
    set TokenExpirationDate(value: Date | null) {
        this.Set('TokenExpirationDate', value);
    }

    /**
    * * Field Name: APIKey
    * * SQL Data Type: nvarchar(255)
    * * Description: API key for systems using key-based authentication instead of OAuth.
    */
    get APIKey(): string | null {
        return this.Get('APIKey');
    }
    set APIKey(value: string | null) {
        this.Set('APIKey', value);
    }

    /**
    * * Field Name: ExternalSystemID
    * * Display Name: ExternalSystem
    * * SQL Data Type: nvarchar(100)
    * * Description: The company's identifier in the external system, used for API calls.
    */
    get ExternalSystemID(): string | null {
        return this.Get('ExternalSystemID');
    }
    set ExternalSystemID(value: string | null) {
        this.Set('ExternalSystemID', value);
    }

    /**
    * * Field Name: IsExternalSystemReadOnly
    * * Display Name: Is External System Read Only
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if data can only be read from the external system, not written back.
    */
    get IsExternalSystemReadOnly(): boolean {
        return this.Get('IsExternalSystemReadOnly');
    }
    set IsExternalSystemReadOnly(value: boolean) {
        this.Set('IsExternalSystemReadOnly', value);
    }

    /**
    * * Field Name: ClientID
    * * Display Name: Client
    * * SQL Data Type: nvarchar(255)
    * * Description: OAuth client ID for this integration instance.
    */
    get ClientID(): string | null {
        return this.Get('ClientID');
    }
    set ClientID(value: string | null) {
        this.Set('ClientID', value);
    }

    /**
    * * Field Name: ClientSecret
    * * Display Name: Client Secret
    * * SQL Data Type: nvarchar(255)
    * * Description: OAuth client secret for authentication, should be encrypted at rest.
    */
    get ClientSecret(): string | null {
        return this.Get('ClientSecret');
    }
    set ClientSecret(value: string | null) {
        this.Set('ClientSecret', value);
    }

    /**
    * * Field Name: CustomAttribute1
    * * Display Name: Custom Attribute 1
    * * SQL Data Type: nvarchar(255)
    * * Description: Flexible field for storing integration-specific configuration or metadata.
    */
    get CustomAttribute1(): string | null {
        return this.Get('CustomAttribute1');
    }
    set CustomAttribute1(value: string | null) {
        this.Set('CustomAttribute1', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: User-friendly name for the company integration instance, typically in the format "Company: Integration".
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Company
    * * SQL Data Type: nvarchar(50)
    */
    get Company(): string {
        return this.Get('Company');
    }

    /**
    * * Field Name: Integration
    * * SQL Data Type: nvarchar(100)
    */
    get Integration(): string {
        return this.Get('Integration');
    }

    /**
    * * Field Name: DriverClassName
    * * Display Name: Driver Class Name
    * * SQL Data Type: nvarchar(100)
    */
    get DriverClassName(): string | null {
        return this.Get('DriverClassName');
    }

    /**
    * * Field Name: DriverImportPath
    * * Display Name: Driver Import Path
    * * SQL Data Type: nvarchar(100)
    */
    get DriverImportPath(): string | null {
        return this.Get('DriverImportPath');
    }

    /**
    * * Field Name: LastRunID
    * * Display Name: LastRun
    * * SQL Data Type: uniqueidentifier
    */
    get LastRunID(): string | null {
        return this.Get('LastRunID');
    }

    /**
    * * Field Name: LastRunStartedAt
    * * Display Name: Last Run Started At
    * * SQL Data Type: datetime
    */
    get LastRunStartedAt(): Date | null {
        return this.Get('LastRunStartedAt');
    }

    /**
    * * Field Name: LastRunEndedAt
    * * Display Name: Last Run Ended At
    * * SQL Data Type: datetime
    */
    get LastRunEndedAt(): Date | null {
        return this.Get('LastRunEndedAt');
    }
}


/**
 * Content File Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentFileType
 * * Base View: vwContentFileTypes
 * * @description Defines supported file types for content management, including extensions and processing rules for different content formats.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content File Types')
export class ContentFileTypeEntity extends BaseEntity<ContentFileTypeEntityType> {
    /**
    * Loads the Content File Types record from the database
    * @param ID: string - primary key value to load the Content File Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentFileTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: FileExtension
    * * Display Name: File Extension
    * * SQL Data Type: nvarchar(255)
    * * Description: The file extension (e.g., .pdf, .docx, .jpg) used to identify this content type.
    */
    get FileExtension(): string | null {
        return this.Get('FileExtension');
    }
    set FileExtension(value: string | null) {
        this.Set('FileExtension', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Content Item Attributes - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentItemAttribute
 * * Base View: vwContentItemAttributes
 * * @description Stores metadata attributes extracted with prompting for content items, enabling flexible key-value properties and custom fields for content classification.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Item Attributes')
export class ContentItemAttributeEntity extends BaseEntity<ContentItemAttributeEntityType> {
    /**
    * Loads the Content Item Attributes record from the database
    * @param ID: string - primary key value to load the Content Item Attributes record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentItemAttributeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ContentItemID
    * * Display Name: Content Item ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content Items (vwContentItems.ID)
    */
    get ContentItemID(): string {
        return this.Get('ContentItemID');
    }
    set ContentItemID(value: string) {
        this.Set('ContentItemID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The extracted or assigned value for this attribute on the content item.
    */
    get Value(): string {
        return this.Get('Value');
    }
    set Value(value: string) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ContentItem
    * * Display Name: Content Item
    * * SQL Data Type: nvarchar(250)
    */
    get ContentItem(): string | null {
        return this.Get('ContentItem');
    }
}


/**
 * Content Item Tags - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentItemTag
 * * Base View: vwContentItemTags
 * * @description Links tags to content items for categorization, searchability, and content discovery across the system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Item Tags')
export class ContentItemTagEntity extends BaseEntity<ContentItemTagEntityType> {
    /**
    * Loads the Content Item Tags record from the database
    * @param ID: string - primary key value to load the Content Item Tags record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentItemTagEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ItemID
    * * Display Name: Item ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content Items (vwContentItems.ID)
    */
    get ItemID(): string {
        return this.Get('ItemID');
    }
    set ItemID(value: string) {
        this.Set('ItemID', value);
    }

    /**
    * * Field Name: Tag
    * * Display Name: Tag
    * * SQL Data Type: nvarchar(200)
    * * Description: The tag text applied to the content item for categorization and search.
    */
    get Tag(): string {
        return this.Get('Tag');
    }
    set Tag(value: string) {
        this.Set('Tag', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Item
    * * Display Name: Item
    * * SQL Data Type: nvarchar(250)
    */
    get Item(): string | null {
        return this.Get('Item');
    }
}


/**
 * Content Items - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentItem
 * * Base View: vwContentItems
 * * @description Stores extracted text from content assets, as well as the source location, versioning, and links to extracted tags and attributes.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Items')
export class ContentItemEntity extends BaseEntity<ContentItemEntityType> {
    /**
    * Loads the Content Items record from the database
    * @param ID: string - primary key value to load the Content Items record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentItemEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ContentSourceID
    * * Display Name: Content Source ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content Sources (vwContentSources.ID)
    */
    get ContentSourceID(): string {
        return this.Get('ContentSourceID');
    }
    set ContentSourceID(value: string) {
        this.Set('ContentSourceID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(250)
    */
    get Name(): string | null {
        return this.Get('Name');
    }
    set Name(value: string | null) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ContentTypeID
    * * Display Name: Content Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content Types (vwContentTypes.ID)
    */
    get ContentTypeID(): string {
        return this.Get('ContentTypeID');
    }
    set ContentTypeID(value: string) {
        this.Set('ContentTypeID', value);
    }

    /**
    * * Field Name: ContentSourceTypeID
    * * Display Name: Content Source Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content Source Types (vwContentSourceTypes.ID)
    */
    get ContentSourceTypeID(): string {
        return this.Get('ContentSourceTypeID');
    }
    set ContentSourceTypeID(value: string) {
        this.Set('ContentSourceTypeID', value);
    }

    /**
    * * Field Name: ContentFileTypeID
    * * Display Name: Content File Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content File Types (vwContentFileTypes.ID)
    */
    get ContentFileTypeID(): string {
        return this.Get('ContentFileTypeID');
    }
    set ContentFileTypeID(value: string) {
        this.Set('ContentFileTypeID', value);
    }

    /**
    * * Field Name: Checksum
    * * Display Name: Checksum
    * * SQL Data Type: nvarchar(100)
    * * Description: Hash value of the content used to detect changes and prevent duplicate processing.
    */
    get Checksum(): string | null {
        return this.Get('Checksum');
    }
    set Checksum(value: string | null) {
        this.Set('Checksum', value);
    }

    /**
    * * Field Name: URL
    * * Display Name: URL
    * * SQL Data Type: nvarchar(2000)
    * * Description: The source location URL where this content was retrieved from.
    */
    get URL(): string {
        return this.Get('URL');
    }
    set URL(value: string) {
        this.Set('URL', value);
    }

    /**
    * * Field Name: Text
    * * Display Name: Text
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The extracted text content from the source document or file.
    */
    get Text(): string | null {
        return this.Get('Text');
    }
    set Text(value: string | null) {
        this.Set('Text', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ContentSource
    * * Display Name: Content Source
    * * SQL Data Type: nvarchar(255)
    */
    get ContentSource(): string | null {
        return this.Get('ContentSource');
    }

    /**
    * * Field Name: ContentType
    * * Display Name: Content Type
    * * SQL Data Type: nvarchar(255)
    */
    get ContentType(): string {
        return this.Get('ContentType');
    }

    /**
    * * Field Name: ContentSourceType
    * * Display Name: Content Source Type
    * * SQL Data Type: nvarchar(255)
    */
    get ContentSourceType(): string {
        return this.Get('ContentSourceType');
    }

    /**
    * * Field Name: ContentFileType
    * * Display Name: Content File Type
    * * SQL Data Type: nvarchar(255)
    */
    get ContentFileType(): string {
        return this.Get('ContentFileType');
    }
}


/**
 * Content Process Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentProcessRun
 * * Base View: vwContentProcessRuns
 * * @description Tracks execution of content tagging workflows, logging the status and details of each execution and ensuring efficient processing of content.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Process Runs')
export class ContentProcessRunEntity extends BaseEntity<ContentProcessRunEntityType> {
    /**
    * Loads the Content Process Runs record from the database
    * @param ID: string - primary key value to load the Content Process Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentProcessRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: SourceID
    * * Display Name: Source ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content Sources (vwContentSources.ID)
    */
    get SourceID(): string {
        return this.Get('SourceID');
    }
    set SourceID(value: string) {
        this.Set('SourceID', value);
    }

    /**
    * * Field Name: StartTime
    * * Display Name: Start Time
    * * SQL Data Type: datetime
    * * Description: Timestamp when the content processing workflow began execution.
    */
    get StartTime(): Date | null {
        return this.Get('StartTime');
    }
    set StartTime(value: Date | null) {
        this.Set('StartTime', value);
    }

    /**
    * * Field Name: EndTime
    * * Display Name: End Time
    * * SQL Data Type: datetime
    * * Description: Timestamp when the content processing workflow completed or failed.
    */
    get EndTime(): Date | null {
        return this.Get('EndTime');
    }
    set EndTime(value: Date | null) {
        this.Set('EndTime', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(100)
    */
    get Status(): string | null {
        return this.Get('Status');
    }
    set Status(value: string | null) {
        this.Set('Status', value);
    }

    /**
    * * Field Name: ProcessedItems
    * * Display Name: Processed Items
    * * SQL Data Type: int
    * * Description: Count of content items successfully processed during this run.
    */
    get ProcessedItems(): number | null {
        return this.Get('ProcessedItems');
    }
    set ProcessedItems(value: number | null) {
        this.Set('ProcessedItems', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Source
    * * Display Name: Source
    * * SQL Data Type: nvarchar(255)
    */
    get Source(): string | null {
        return this.Get('Source');
    }
}


/**
 * Content Source Params - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentSourceParam
 * * Base View: vwContentSourceParams
 * * @description Stores configuration parameters for specific content source instances, customizing how content is retrieved and processed from each source.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Source Params')
export class ContentSourceParamEntity extends BaseEntity<ContentSourceParamEntityType> {
    /**
    * Loads the Content Source Params record from the database
    * @param ID: string - primary key value to load the Content Source Params record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentSourceParamEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ContentSourceID
    * * Display Name: Content Source ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content Sources (vwContentSources.ID)
    */
    get ContentSourceID(): string {
        return this.Get('ContentSourceID');
    }
    set ContentSourceID(value: string) {
        this.Set('ContentSourceID', value);
    }

    /**
    * * Field Name: ContentSourceTypeParamID
    * * Display Name: Content Source Type Param ID
    * * SQL Data Type: uniqueidentifier
    * * Description: Reference to the parameter definition in Content Source Type Params.
    */
    get ContentSourceTypeParamID(): string {
        return this.Get('ContentSourceTypeParamID');
    }
    set ContentSourceTypeParamID(value: string) {
        this.Set('ContentSourceTypeParamID', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The configured value for this parameter on this specific content source.
    */
    get Value(): string {
        return this.Get('Value');
    }
    set Value(value: string) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ContentSource
    * * Display Name: Content Source
    * * SQL Data Type: nvarchar(255)
    */
    get ContentSource(): string | null {
        return this.Get('ContentSource');
    }
}


/**
 * Content Source Type Params - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentSourceTypeParam
 * * Base View: vwContentSourceTypeParams
 * * @description Defines required and optional parameters for content source types, establishing the configuration for each source type.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Source Type Params')
export class ContentSourceTypeParamEntity extends BaseEntity<ContentSourceTypeParamEntityType> {
    /**
    * Loads the Content Source Type Params record from the database
    * @param ID: string - primary key value to load the Content Source Type Params record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentSourceTypeParamEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    * * Description: Data type of the parameter (string, number, boolean, date, etc.).
    */
    get Type(): string | null {
        return this.Get('Type');
    }
    set Type(value: string | null) {
        this.Set('Type', value);
    }

    /**
    * * Field Name: DefaultValue
    * * Display Name: Default Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Default value to use if not specified when configuring a content source.
    */
    get DefaultValue(): string | null {
        return this.Get('DefaultValue');
    }
    set DefaultValue(value: string | null) {
        this.Set('DefaultValue', value);
    }

    /**
    * * Field Name: IsRequired
    * * Display Name: Is Required
    * * SQL Data Type: bit
    * * Description: Indicates whether this parameter must be provided when setting up a content source.
    */
    get IsRequired(): boolean {
        return this.Get('IsRequired');
    }
    set IsRequired(value: boolean) {
        this.Set('IsRequired', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Content Source Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentSourceType
 * * Base View: vwContentSourceTypes
 * * @description Catalogs available content source types such as file systems, APIs, websites, databases, and cloud storage platforms with their capabilities.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Source Types')
export class ContentSourceTypeEntity extends BaseEntity<ContentSourceTypeEntityType> {
    /**
    * Loads the Content Source Types record from the database
    * @param ID: string - primary key value to load the Content Source Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentSourceTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(1000)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Content Sources - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentSource
 * * Base View: vwContentSources
 * * @description Configures connections to external content repositories and systems from which content is imported, synchronized, and tagged.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Sources')
export class ContentSourceEntity extends BaseEntity<ContentSourceEntityType> {
    /**
    * Loads the Content Sources record from the database
    * @param ID: string - primary key value to load the Content Sources record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentSourceEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string | null {
        return this.Get('Name');
    }
    set Name(value: string | null) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: ContentTypeID
    * * Display Name: Content Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content Types (vwContentTypes.ID)
    */
    get ContentTypeID(): string {
        return this.Get('ContentTypeID');
    }
    set ContentTypeID(value: string) {
        this.Set('ContentTypeID', value);
    }

    /**
    * * Field Name: ContentSourceTypeID
    * * Display Name: Content Source Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content Source Types (vwContentSourceTypes.ID)
    */
    get ContentSourceTypeID(): string {
        return this.Get('ContentSourceTypeID');
    }
    set ContentSourceTypeID(value: string) {
        this.Set('ContentSourceTypeID', value);
    }

    /**
    * * Field Name: ContentFileTypeID
    * * Display Name: Content File Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Content File Types (vwContentFileTypes.ID)
    */
    get ContentFileTypeID(): string {
        return this.Get('ContentFileTypeID');
    }
    set ContentFileTypeID(value: string) {
        this.Set('ContentFileTypeID', value);
    }

    /**
    * * Field Name: URL
    * * Display Name: URL
    * * SQL Data Type: nvarchar(2000)
    * * Description: Base URL or connection string for accessing this content source.
    */
    get URL(): string {
        return this.Get('URL');
    }
    set URL(value: string) {
        this.Set('URL', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ContentType
    * * Display Name: Content Type
    * * SQL Data Type: nvarchar(255)
    */
    get ContentType(): string {
        return this.Get('ContentType');
    }

    /**
    * * Field Name: ContentSourceType
    * * Display Name: Content Source Type
    * * SQL Data Type: nvarchar(255)
    */
    get ContentSourceType(): string {
        return this.Get('ContentSourceType');
    }

    /**
    * * Field Name: ContentFileType
    * * Display Name: Content File Type
    * * SQL Data Type: nvarchar(255)
    */
    get ContentFileType(): string {
        return this.Get('ContentFileType');
    }
}


/**
 * Content Type Attributes - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentTypeAttribute
 * * Base View: vwContentTypeAttributes
 * * @description Defines the attributes available for extraction via prompt for each content type.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Type Attributes')
export class ContentTypeAttributeEntity extends BaseEntity<ContentTypeAttributeEntityType> {
    /**
    * Loads the Content Type Attributes record from the database
    * @param ID: string - primary key value to load the Content Type Attributes record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentTypeAttributeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ContentTypeID
    * * Display Name: Content Type ID
    * * SQL Data Type: uniqueidentifier
    * * Description: Reference to the Content Type this attribute belongs to.
    */
    get ContentTypeID(): string {
        return this.Get('ContentTypeID');
    }
    set ContentTypeID(value: string) {
        this.Set('ContentTypeID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Prompt
    * * Display Name: Prompt
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The AI prompt template used to extract this attribute from content.
    */
    get Prompt(): string {
        return this.Get('Prompt');
    }
    set Prompt(value: string) {
        this.Set('Prompt', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Content Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ContentType
 * * Base View: vwContentTypes
 * * @description Defines categories of content with specific schemas, behaviors, and processing rules for structured content management.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Content Types')
export class ContentTypeEntity extends BaseEntity<ContentTypeEntityType> {
    /**
    * Loads the Content Types record from the database
    * @param ID: string - primary key value to load the Content Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ContentTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: AIModelID
    * * Display Name: AIModel ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    get AIModelID(): string {
        return this.Get('AIModelID');
    }
    set AIModelID(value: string) {
        this.Set('AIModelID', value);
    }

    /**
    * * Field Name: MinTags
    * * Display Name: Min Tags
    * * SQL Data Type: int
    * * Description: Minimum number of tags that must be applied to content of this type.
    */
    get MinTags(): number {
        return this.Get('MinTags');
    }
    set MinTags(value: number) {
        this.Set('MinTags', value);
    }

    /**
    * * Field Name: MaxTags
    * * Display Name: Max Tags
    * * SQL Data Type: int
    * * Description: Maximum number of tags allowed on content of this type.
    */
    get MaxTags(): number {
        return this.Get('MaxTags');
    }
    set MaxTags(value: number) {
        this.Set('MaxTags', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: AIModel
    * * Display Name: AIModel
    * * SQL Data Type: nvarchar(50)
    */
    get AIModel(): string {
        return this.Get('AIModel');
    }
}


/**
 * Conversation Details - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ConversationDetail
 * * Base View: vwConversationDetails
 * * @description Stores individual messages, responses, and interactions within a conversation, maintaining the complete dialogue history with timestamps.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Conversation Details')
export class ConversationDetailEntity extends BaseEntity<ConversationDetailEntityType> {
    /**
    * Loads the Conversation Details record from the database
    * @param ID: string - primary key value to load the Conversation Details record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ConversationDetailEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Conversation Details - Delete method override to wrap in transaction since CascadeDeletes is true.
    * Wrapping in a transaction ensures that all cascade delete operations are handled atomically.
    * @public
    * @method
    * @override
    * @memberof ConversationDetailEntity
    * @returns {Promise<boolean>} - true if successful, false otherwise
    */
    public async Delete(options?: EntityDeleteOptions): Promise<boolean> {
        if (Metadata.Provider.ProviderType === ProviderType.Database) {
            // For database providers, use the transaction methods directly
            const provider = Metadata.Provider as DatabaseProviderBase;
            
            try {
                await provider.BeginTransaction();
                const result = await super.Delete(options);
                
                if (result) {
                    await provider.CommitTransaction();
                    return true;
                } else {
                    await provider.RollbackTransaction();
                    return false;
                }
            } catch (error) {
                await provider.RollbackTransaction();
                throw error;
            }
        } else {
            // For network providers, cascading deletes are handled server-side
            return super.Delete(options);
        }
    }

    /**
    * Validate() method override for Conversation Details entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * UserRating: This rule ensures that if a user rating is provided, it must be a whole number between 1 and 10, inclusive.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateUserRatingBetween1And10(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if a user rating is provided, it must be a whole number between 1 and 10, inclusive.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateUserRatingBetween1And10(result: ValidationResult) {
    	if (this.UserRating != null && (this.UserRating < 1 || this.UserRating > 10)) {
    		result.Errors.push(new ValidationErrorInfo("UserRating", "User rating must be between 1 and 10.", this.UserRating, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ConversationID
    * * Display Name: Conversation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
    */
    get ConversationID(): string {
        return this.Get('ConversationID');
    }
    set ConversationID(value: string) {
        this.Set('ConversationID', value);
    }

    /**
    * * Field Name: ExternalID
    * * Display Name: External ID
    * * SQL Data Type: nvarchar(100)
    * * Description: External system identifier for this message, used for integration scenarios.
    */
    get ExternalID(): string | null {
        return this.Get('ExternalID');
    }
    set ExternalID(value: string | null) {
        this.Set('ExternalID', value);
    }

    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(20)
    * * Default Value: user_name()
    * * Value List Type: List
    * * Possible Values 
    *   * AI
    *   * Error
    *   * User
    * * Description: The role of the message sender (user, assistant, system, function).
    */
    get Role(): 'AI' | 'Error' | 'User' {
        return this.Get('Role');
    }
    set Role(value: 'AI' | 'Error' | 'User') {
        this.Set('Role', value);
    }

    /**
    * * Field Name: Message
    * * Display Name: Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The actual content of the message in the conversation.
    */
    get Message(): string {
        return this.Get('Message');
    }
    set Message(value: string) {
        this.Set('Message', value);
    }

    /**
    * * Field Name: Error
    * * Display Name: Error
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Error message if this conversation turn encountered a problem.
    */
    get Error(): string | null {
        return this.Get('Error');
    }
    set Error(value: string | null) {
        this.Set('Error', value);
    }

    /**
    * * Field Name: HiddenToUser
    * * Display Name: Hidden To User
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Flag indicating if this message should be hidden from end users (system messages, function calls, etc.).
    */
    get HiddenToUser(): boolean {
        return this.Get('HiddenToUser');
    }
    set HiddenToUser(value: boolean) {
        this.Set('HiddenToUser', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: UserRating
    * * Display Name: User Rating
    * * SQL Data Type: int
    * * Description: This column is used to capture user feedback as a rating scale. The scale ranges from 1 to 10, where 1 might represent thumbs down, and 10 might represent thumbs up or the highest rating in a star-based scale.
    */
    get UserRating(): number | null {
        return this.Get('UserRating');
    }
    set UserRating(value: number | null) {
        this.Set('UserRating', value);
    }

    /**
    * * Field Name: UserFeedback
    * * Display Name: User Feedback
    * * SQL Data Type: nvarchar(MAX)
    * * Description: This column is used to store user text feedback about a given AI response, describing what they liked or disliked.
    */
    get UserFeedback(): string | null {
        return this.Get('UserFeedback');
    }
    set UserFeedback(value: string | null) {
        this.Set('UserFeedback', value);
    }

    /**
    * * Field Name: ReflectionInsights
    * * Display Name: Reflection Insights
    * * SQL Data Type: nvarchar(MAX)
    * * Description: This column stores human or AI-generated reflections on how to improve future responses based on the user feedback and the AI output generated for prior messages in the conversation.
    */
    get ReflectionInsights(): string | null {
        return this.Get('ReflectionInsights');
    }
    set ReflectionInsights(value: string | null) {
        this.Set('ReflectionInsights', value);
    }

    /**
    * * Field Name: SummaryOfEarlierConversation
    * * Display Name: Summary Of Earlier Conversation
    * * SQL Data Type: nvarchar(MAX)
    * * Description: This column optionally stores a summary of the entire conversation leading up to this particular conversation detail record. It is used in long-running conversations to optimize performance by summarizing earlier parts.
    */
    get SummaryOfEarlierConversation(): string | null {
        return this.Get('SummaryOfEarlierConversation');
    }
    set SummaryOfEarlierConversation(value: string | null) {
        this.Set('SummaryOfEarlierConversation', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: This field, when populated, overrides the UserID at the Conversation level to specify a different user created the message.
    */
    get UserID(): string | null {
        return this.Get('UserID');
    }
    set UserID(value: string | null) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: ArtifactID
    * * Display Name: Artifact ID
    * * 
    * * @deprecated This field is deprecated and will be removed in a future version. Using it will result in console warnings.SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Conversation Artifacts (vwConversationArtifacts.ID)
    * * Description: Optional reference to a conversation artifact associated with this conversation detail
    */
    get ArtifactID(): string | null {
        return this.Get('ArtifactID');
    }
    set ArtifactID(value: string | null) {
        this.Set('ArtifactID', value);
    }

    /**
    * * Field Name: ArtifactVersionID
    * * Display Name: Artifact Version ID
    * * 
    * * @deprecated This field is deprecated and will be removed in a future version. Using it will result in console warnings.SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Conversation Artifact Versions (vwConversationArtifactVersions.ID)
    * * Description: Optional reference to a specific version of a conversation artifact associated with this conversation detail
    */
    get ArtifactVersionID(): string | null {
        return this.Get('ArtifactVersionID');
    }
    set ArtifactVersionID(value: string | null) {
        this.Set('ArtifactVersionID', value);
    }

    /**
    * * Field Name: CompletionTime
    * * Display Name: Completion Time
    * * SQL Data Type: bigint
    * * Description: Duration in milliseconds representing how long the AI response processing took to complete for this conversation detail.
    */
    get CompletionTime(): number | null {
        return this.Get('CompletionTime');
    }
    set CompletionTime(value: number | null) {
        this.Set('CompletionTime', value);
    }

    /**
    * * Field Name: IsPinned
    * * Display Name: Is Pinned
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if this message is pinned within the conversation for easy reference
    */
    get IsPinned(): boolean {
        return this.Get('IsPinned');
    }
    set IsPinned(value: boolean) {
        this.Set('IsPinned', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
    * * Description: Optional reference to parent message for threaded conversations. NULL for top-level messages.
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: Denormalized agent ID for quick lookup of agent name and icon without joining through AgentRun
    */
    get AgentID(): string | null {
        return this.Get('AgentID');
    }
    set AgentID(value: string | null) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Complete
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * In-Progress
    * * Description: Status of the conversation message. Complete indicates finished processing, In-Progress indicates active agent work, Error indicates processing failed.
    */
    get Status(): 'Complete' | 'Error' | 'In-Progress' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Error' | 'In-Progress') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: SuggestedResponses
    * * Display Name: Suggested Responses
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of suggested responses that can be displayed to the user for quick replies. Each response object contains: text (display text), allowInput (boolean), iconClass (optional Font Awesome class), and data (optional payload).
    */
    get SuggestedResponses(): string | null {
        return this.Get('SuggestedResponses');
    }
    set SuggestedResponses(value: string | null) {
        this.Set('SuggestedResponses', value);
    }

    /**
    * * Field Name: Conversation
    * * Display Name: Conversation
    * * SQL Data Type: nvarchar(255)
    */
    get Conversation(): string | null {
        return this.Get('Conversation');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string | null {
        return this.Get('User');
    }

    /**
    * * Field Name: Artifact
    * * Display Name: Artifact
    * * SQL Data Type: nvarchar(255)
    */
    get Artifact(): string | null {
        return this.Get('Artifact');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Conversations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Conversation
 * * Base View: vwConversations
 * * @description Tracks conversation sessions between users and AI agents or between users, including context, participants, and metadata.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Conversations')
export class ConversationEntity extends BaseEntity<ConversationEntityType> {
    /**
    * Loads the Conversations record from the database
    * @param ID: string - primary key value to load the Conversations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ConversationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Conversations - Delete method override to wrap in transaction since CascadeDeletes is true.
    * Wrapping in a transaction ensures that all cascade delete operations are handled atomically.
    * @public
    * @method
    * @override
    * @memberof ConversationEntity
    * @returns {Promise<boolean>} - true if successful, false otherwise
    */
    public async Delete(options?: EntityDeleteOptions): Promise<boolean> {
        if (Metadata.Provider.ProviderType === ProviderType.Database) {
            // For database providers, use the transaction methods directly
            const provider = Metadata.Provider as DatabaseProviderBase;
            
            try {
                await provider.BeginTransaction();
                const result = await super.Delete(options);
                
                if (result) {
                    await provider.CommitTransaction();
                    return true;
                } else {
                    await provider.RollbackTransaction();
                    return false;
                }
            } catch (error) {
                await provider.RollbackTransaction();
                throw error;
            }
        } else {
            // For network providers, cascading deletes are handled server-side
            return super.Delete(options);
        }
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: ExternalID
    * * Display Name: External ID
    * * SQL Data Type: nvarchar(500)
    * * Description: External system identifier for cross-system conversation tracking.
    */
    get ExternalID(): string | null {
        return this.Get('ExternalID');
    }
    set ExternalID(value: string | null) {
        this.Set('ExternalID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string | null {
        return this.Get('Name');
    }
    set Name(value: string | null) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Skip
    * * Description: The type or category of conversation (Skip, Support, Chat, etc.).
    */
    get Type(): string {
        return this.Get('Type');
    }
    set Type(value: string) {
        this.Set('Type', value);
    }

    /**
    * * Field Name: IsArchived
    * * Display Name: Is Archived
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if this conversation has been archived and should not appear in active lists.
    */
    get IsArchived(): boolean {
        return this.Get('IsArchived');
    }
    set IsArchived(value: boolean) {
        this.Set('IsArchived', value);
    }

    /**
    * * Field Name: LinkedEntityID
    * * Display Name: Linked Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get LinkedEntityID(): string | null {
        return this.Get('LinkedEntityID');
    }
    set LinkedEntityID(value: string | null) {
        this.Set('LinkedEntityID', value);
    }

    /**
    * * Field Name: LinkedRecordID
    * * Display Name: Linked Record ID
    * * SQL Data Type: nvarchar(500)
    * * Description: ID of a related record this conversation is about (support ticket, order, etc.).
    */
    get LinkedRecordID(): string | null {
        return this.Get('LinkedRecordID');
    }
    set LinkedRecordID(value: string | null) {
        this.Set('LinkedRecordID', value);
    }

    /**
    * * Field Name: DataContextID
    * * Display Name: Data Context ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Data Contexts (vwDataContexts.ID)
    */
    get DataContextID(): string | null {
        return this.Get('DataContextID');
    }
    set DataContextID(value: string | null) {
        this.Set('DataContextID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Available
    * * Value List Type: List
    * * Possible Values 
    *   * Available
    *   * Processing
    * * Description: Tracks the processing status of the conversation: Available, Processing
    */
    get Status(): 'Available' | 'Processing' {
        return this.Get('Status');
    }
    set Status(value: 'Available' | 'Processing') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: EnvironmentID
    * * Display Name: Environment ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
    * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09
    */
    get EnvironmentID(): string {
        return this.Get('EnvironmentID');
    }
    set EnvironmentID(value: string) {
        this.Set('EnvironmentID', value);
    }

    /**
    * * Field Name: ProjectID
    * * Display Name: Project ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Projects (vwProjects.ID)
    */
    get ProjectID(): string | null {
        return this.Get('ProjectID');
    }
    set ProjectID(value: string | null) {
        this.Set('ProjectID', value);
    }

    /**
    * * Field Name: IsPinned
    * * Display Name: Is Pinned
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if this conversation is pinned to the top of lists
    */
    get IsPinned(): boolean {
        return this.Get('IsPinned');
    }
    set IsPinned(value: boolean) {
        this.Set('IsPinned', value);
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: LinkedEntity
    * * Display Name: Linked Entity
    * * SQL Data Type: nvarchar(255)
    */
    get LinkedEntity(): string | null {
        return this.Get('LinkedEntity');
    }

    /**
    * * Field Name: DataContext
    * * Display Name: Data Context
    * * SQL Data Type: nvarchar(255)
    */
    get DataContext(): string | null {
        return this.Get('DataContext');
    }

    /**
    * * Field Name: Environment
    * * Display Name: Environment
    * * SQL Data Type: nvarchar(255)
    */
    get Environment(): string {
        return this.Get('Environment');
    }

    /**
    * * Field Name: Project
    * * Display Name: Project
    * * SQL Data Type: nvarchar(255)
    */
    get Project(): string | null {
        return this.Get('Project');
    }
}


/**
 * Dashboard Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: DashboardCategory
 * * Base View: vwDashboardCategories
 * * @description Organizes dashboards into logical groupings for navigation and access control, supporting hierarchical categorization.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Dashboard Categories')
export class DashboardCategoryEntity extends BaseEntity<DashboardCategoryEntityType> {
    /**
    * Loads the Dashboard Categories record from the database
    * @param ID: string - primary key value to load the Dashboard Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DashboardCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Dashboard Categories (vwDashboardCategories.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Dashboards - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Dashboard
 * * Base View: vwDashboards
 * * @description Dashboards are used to group resources into a single display pane for an end-user
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Dashboards')
export class DashboardEntity extends BaseEntity<DashboardEntityType> {
    /**
    * Loads the Dashboards record from the database
    * @param ID: string - primary key value to load the Dashboards record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DashboardEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Dashboard Categories (vwDashboardCategories.ID)
    */
    get CategoryID(): string | null {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string | null) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: UIConfigDetails
    * * Display Name: UIConfig Details
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration defining the dashboard layout, widgets, data sources, and display options.
    */
    get UIConfigDetails(): string {
        return this.Get('UIConfigDetails');
    }
    set UIConfigDetails(value: string) {
        this.Set('UIConfigDetails', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Config
    * * Value List Type: List
    * * Possible Values 
    *   * Code
    *   * Config
    *   * Dynamic Code
    * * Description: Dashboard type supporting Config (metadata-driven), Code (compiled TypeScript), and Dynamic Code (Skip-generated runtime JavaScript/React) options
    */
    get Type(): 'Code' | 'Config' | 'Dynamic Code' {
        return this.Get('Type');
    }
    set Type(value: 'Code' | 'Config' | 'Dynamic Code') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: Thumbnail
    * * Display Name: Thumbnail
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Base64 encoded image or URL to an image thumbnail for the dashboard
    */
    get Thumbnail(): string | null {
        return this.Get('Thumbnail');
    }
    set Thumbnail(value: string | null) {
        this.Set('Thumbnail', value);
    }

    /**
    * * Field Name: Scope
    * * Display Name: Scope
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Global
    * * Value List Type: List
    * * Possible Values 
    *   * App
    *   * Global
    * * Description: Scope of the dashboard: Global or App-specific
    */
    get Scope(): 'App' | 'Global' {
        return this.Get('Scope');
    }
    set Scope(value: 'App' | 'Global') {
        this.Set('Scope', value);
    }

    /**
    * * Field Name: ApplicationID
    * * Display Name: Application ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Applications (vwApplications.ID)
    * * Description: Associated Application ID if Scope is App, otherwise NULL
    */
    get ApplicationID(): string | null {
        return this.Get('ApplicationID');
    }
    set ApplicationID(value: string | null) {
        this.Set('ApplicationID', value);
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(255)
    * * Description: Specifies the runtime class that will be used for the Dashboard when Type is set to 'Code'. This class contains the custom logic and implementation for code-based dashboards.
    */
    get DriverClass(): string | null {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string | null) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(255)
    * * Description: Used to identify the dashboard for code-base dashboards. Allows reuse of the same DriverClass for multiple dashboards that can be rendered differently.
    */
    get Code(): string | null {
        return this.Get('Code');
    }
    set Code(value: string | null) {
        this.Set('Code', value);
    }

    /**
    * * Field Name: EnvironmentID
    * * Display Name: Environment ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
    * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09
    */
    get EnvironmentID(): string {
        return this.Get('EnvironmentID');
    }
    set EnvironmentID(value: string) {
        this.Set('EnvironmentID', value);
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(100)
    */
    get Category(): string | null {
        return this.Get('Category');
    }

    /**
    * * Field Name: Application
    * * Display Name: Application
    * * SQL Data Type: nvarchar(100)
    */
    get Application(): string | null {
        return this.Get('Application');
    }

    /**
    * * Field Name: Environment
    * * Display Name: Environment
    * * SQL Data Type: nvarchar(255)
    */
    get Environment(): string {
        return this.Get('Environment');
    }
}


/**
 * Data Context Items - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: DataContextItem
 * * Base View: vwDataContextItems
 * * @description Data Context Items store information about each item within a Data Context. Each item stores a link to a view, query, or raw sql statement and can optionally cache the JSON representing the last run of that data object as well.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Data Context Items')
export class DataContextItemEntity extends BaseEntity<DataContextItemEntityType> {
    /**
    * Loads the Data Context Items record from the database
    * @param ID: string - primary key value to load the Data Context Items record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DataContextItemEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: DataContextID
    * * Display Name: Data Context ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Data Contexts (vwDataContexts.ID)
    */
    get DataContextID(): string {
        return this.Get('DataContextID');
    }
    set DataContextID(value: string) {
        this.Set('DataContextID', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * full_entity
    *   * query
    *   * single_record
    *   * sql
    *   * view
    * * Description: The type of the item, either "view", "query", "full_entity", "single_record", or "sql"
    */
    get Type(): 'full_entity' | 'query' | 'single_record' | 'sql' | 'view' {
        return this.Get('Type');
    }
    set Type(value: 'full_entity' | 'query' | 'single_record' | 'sql' | 'view') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: ViewID
    * * Display Name: View ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User Views (vwUserViews.ID)
    */
    get ViewID(): string | null {
        return this.Get('ViewID');
    }
    set ViewID(value: string | null) {
        this.Set('ViewID', value);
    }

    /**
    * * Field Name: QueryID
    * * Display Name: Query ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queries (vwQueries.ID)
    */
    get QueryID(): string | null {
        return this.Get('QueryID');
    }
    set QueryID(value: string | null) {
        this.Set('QueryID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string | null {
        return this.Get('EntityID');
    }
    set EntityID(value: string | null) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(450)
    * * Description: The Primary Key value for the record, only used when Type='single_record'
    */
    get RecordID(): string | null {
        return this.Get('RecordID');
    }
    set RecordID(value: string | null) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: SQL
    * * Display Name: SQL
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Only used when Type=sql
    */
    get SQL(): string | null {
        return this.Get('SQL');
    }
    set SQL(value: string | null) {
        this.Set('SQL', value);
    }

    /**
    * * Field Name: DataJSON
    * * Display Name: Data JSON
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optionally used to cache results of an item. This can be used for performance optimization, and also for having snapshots of data for historical comparisons.
    */
    get DataJSON(): string | null {
        return this.Get('DataJSON');
    }
    set DataJSON(value: string | null) {
        this.Set('DataJSON', value);
    }

    /**
    * * Field Name: LastRefreshedAt
    * * Display Name: Last Refreshed At
    * * SQL Data Type: datetime
    * * Description: If DataJSON is populated, this field will show the date the the data was captured
    */
    get LastRefreshedAt(): Date | null {
        return this.Get('LastRefreshedAt');
    }
    set LastRefreshedAt(value: Date | null) {
        this.Set('LastRefreshedAt', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: CodeName
    * * Display Name: Code Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Optional programmatic identifier for this data context item. Must be unique within the DataContext and follow JavaScript naming conventions (letters, numbers, underscore, starting with letter or underscore). Used for improved code generation and programmatic access to data context items.
    */
    get CodeName(): string | null {
        return this.Get('CodeName');
    }
    set CodeName(value: string | null) {
        this.Set('CodeName', value);
    }

    /**
    * * Field Name: DataContext
    * * Display Name: Data Context
    * * SQL Data Type: nvarchar(255)
    */
    get DataContext(): string {
        return this.Get('DataContext');
    }

    /**
    * * Field Name: View
    * * Display Name: View
    * * SQL Data Type: nvarchar(100)
    */
    get View(): string | null {
        return this.Get('View');
    }

    /**
    * * Field Name: Query
    * * Display Name: Query
    * * SQL Data Type: nvarchar(255)
    */
    get Query(): string | null {
        return this.Get('Query');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string | null {
        return this.Get('Entity');
    }
}


/**
 * Data Contexts - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: DataContext
 * * Base View: vwDataContexts
 * * @description Data Contexts are a primitive within the MemberJunction architecture. They store information about data contexts which are groups of data including views, queries, or raw SQL statements. Data contexts can be used in conversations, reports and more.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Data Contexts')
export class DataContextEntity extends BaseEntity<DataContextEntityType> {
    /**
    * Loads the Data Contexts record from the database
    * @param ID: string - primary key value to load the Data Contexts record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DataContextEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: LastRefreshedAt
    * * Display Name: Last Refreshed At
    * * SQL Data Type: datetime
    * * Description: Timestamp of when the data in this context was last refreshed or recalculated.
    */
    get LastRefreshedAt(): Date | null {
        return this.Get('LastRefreshedAt');
    }
    set LastRefreshedAt(value: Date | null) {
        this.Set('LastRefreshedAt', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * Dataset Items - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: DatasetItem
 * * Base View: vwDatasetItems
 * * @description A single item in a Dataset and can be sourced from multiple methods.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Dataset Items')
export class DatasetItemEntity extends BaseEntity<DatasetItemEntityType> {
    /**
    * Loads the Dataset Items record from the database
    * @param ID: string - primary key value to load the Dataset Items record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DatasetItemEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(50)
    * * Description: Unique code identifier for this dataset item within its parent dataset.
    */
    get Code(): string {
        return this.Get('Code');
    }
    set Code(value: string) {
        this.Set('Code', value);
    }

    /**
    * * Field Name: DatasetID
    * * Display Name: Dataset ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Datasets (vwDatasets.ID)
    */
    get DatasetID(): string {
        return this.Get('DatasetID');
    }
    set DatasetID(value: string) {
        this.Set('DatasetID', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Order in which this item should be processed or displayed within the dataset.
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: WhereClause
    * * Display Name: Where Clause
    * * SQL Data Type: nvarchar(MAX)
    * * Description: SQL WHERE clause to filter data when this dataset item is sourced from a query.
    */
    get WhereClause(): string | null {
        return this.Get('WhereClause');
    }
    set WhereClause(value: string | null) {
        this.Set('WhereClause', value);
    }

    /**
    * * Field Name: DateFieldToCheck
    * * Display Name: Date Field To Check
    * * SQL Data Type: nvarchar(100)
    * * Description: The date field name used for incremental updates and change detection.
    */
    get DateFieldToCheck(): string {
        return this.Get('DateFieldToCheck');
    }
    set DateFieldToCheck(value: string) {
        this.Set('DateFieldToCheck', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Columns
    * * Display Name: Columns
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional column to store a comma-delimited list of columns for the DatasetItem
    */
    get Columns(): string | null {
        return this.Get('Columns');
    }
    set Columns(value: string | null) {
        this.Set('Columns', value);
    }

    /**
    * * Field Name: Dataset
    * * Display Name: Dataset
    * * SQL Data Type: nvarchar(100)
    */
    get Dataset(): string {
        return this.Get('Dataset');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }
}


/**
 * Datasets - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Dataset
 * * Base View: vwDatasets
 * * @description Cacheable sets of data that can span one or more items
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Datasets')
export class DatasetEntity extends BaseEntity<DatasetEntityType> {
    /**
    * Loads the Datasets record from the database
    * @param ID: string - primary key value to load the Datasets record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DatasetEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Duplicate Run Detail Matches - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: DuplicateRunDetailMatch
 * * Base View: vwDuplicateRunDetailMatches
 * * @description Records individual matching pairs of potentially duplicate records identified during a duplicate detection run with confidence scores.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Duplicate Run Detail Matches')
export class DuplicateRunDetailMatchEntity extends BaseEntity<DuplicateRunDetailMatchEntityType> {
    /**
    * Loads the Duplicate Run Detail Matches record from the database
    * @param ID: string - primary key value to load the Duplicate Run Detail Matches record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DuplicateRunDetailMatchEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: DuplicateRunDetailID
    * * Display Name: Duplicate Run Detail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Duplicate Run Details (vwDuplicateRunDetails.ID)
    */
    get DuplicateRunDetailID(): string {
        return this.Get('DuplicateRunDetailID');
    }
    set DuplicateRunDetailID(value: string) {
        this.Set('DuplicateRunDetailID', value);
    }

    /**
    * * Field Name: MatchSource
    * * Display Name: Match Source
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Vector
    * * Value List Type: List
    * * Possible Values 
    *   * SP
    *   * Vector
    * * Description: Either Vector or SP
    */
    get MatchSource(): 'SP' | 'Vector' {
        return this.Get('MatchSource');
    }
    set MatchSource(value: 'SP' | 'Vector') {
        this.Set('MatchSource', value);
    }

    /**
    * * Field Name: MatchRecordID
    * * Display Name: Match Record ID
    * * SQL Data Type: nvarchar(500)
    * * Description: The ID of the record identified as a potential duplicate match.
    */
    get MatchRecordID(): string {
        return this.Get('MatchRecordID');
    }
    set MatchRecordID(value: string) {
        this.Set('MatchRecordID', value);
    }

    /**
    * * Field Name: MatchProbability
    * * Display Name: Match Probability
    * * SQL Data Type: numeric(12, 11)
    * * Default Value: 0
    * * Description: Value between 0 and 1 designating the computed probability of a match
    */
    get MatchProbability(): number {
        return this.Get('MatchProbability');
    }
    set MatchProbability(value: number) {
        this.Set('MatchProbability', value);
    }

    /**
    * * Field Name: MatchedAt
    * * Display Name: Matched At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    * * Description: Timestamp when this duplicate match was identified.
    */
    get MatchedAt(): Date {
        return this.Get('MatchedAt');
    }
    set MatchedAt(value: Date) {
        this.Set('MatchedAt', value);
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Ignore
    * * Description: The action to take for this match (Ignore, Merge, Delete).
    */
    get Action(): string {
        return this.Get('Action');
    }
    set Action(value: string) {
        this.Set('Action', value);
    }

    /**
    * * Field Name: ApprovalStatus
    * * Display Name: Approval Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
    * * Description: Current approval status of the proposed action (Pending, Approved, Rejected).
    */
    get ApprovalStatus(): 'Approved' | 'Pending' | 'Rejected' {
        return this.Get('ApprovalStatus');
    }
    set ApprovalStatus(value: 'Approved' | 'Pending' | 'Rejected') {
        this.Set('ApprovalStatus', value);
    }

    /**
    * * Field Name: RecordMergeLogID
    * * Display Name: Record Merge Log ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Record Merge Logs (vwRecordMergeLogs.ID)
    */
    get RecordMergeLogID(): string | null {
        return this.Get('RecordMergeLogID');
    }
    set RecordMergeLogID(value: string | null) {
        this.Set('RecordMergeLogID', value);
    }

    /**
    * * Field Name: MergeStatus
    * * Display Name: Merge Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Pending
    * * Description: Status of the merge operation if Action is Merge (Pending, Complete, Failed).
    */
    get MergeStatus(): 'Complete' | 'Error' | 'Pending' {
        return this.Get('MergeStatus');
    }
    set MergeStatus(value: 'Complete' | 'Error' | 'Pending') {
        this.Set('MergeStatus', value);
    }

    /**
    * * Field Name: MergedAt
    * * Display Name: Merged At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    * * Description: Timestamp when records were merged, if applicable.
    */
    get MergedAt(): Date {
        return this.Get('MergedAt');
    }
    set MergedAt(value: Date) {
        this.Set('MergedAt', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Duplicate Run Details - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: DuplicateRunDetail
 * * Base View: vwDuplicateRunDetails
 * * @description Stores detailed results for each record analyzed in a duplicate detection run, including match status and processing metadata.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Duplicate Run Details')
export class DuplicateRunDetailEntity extends BaseEntity<DuplicateRunDetailEntityType> {
    /**
    * Loads the Duplicate Run Details record from the database
    * @param ID: string - primary key value to load the Duplicate Run Details record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DuplicateRunDetailEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: DuplicateRunID
    * * Display Name: Duplicate Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Duplicate Runs (vwDuplicateRuns.ID)
    */
    get DuplicateRunID(): string {
        return this.Get('DuplicateRunID');
    }
    set DuplicateRunID(value: string) {
        this.Set('DuplicateRunID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(500)
    * * Description: The ID of the record being analyzed for duplicates.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: MatchStatus
    * * Display Name: Match Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Pending
    *   * Skipped
    * * Description: Status of duplicate analysis for this record (Pending, Complete, Error).
    */
    get MatchStatus(): 'Complete' | 'Error' | 'Pending' | 'Skipped' {
        return this.Get('MatchStatus');
    }
    set MatchStatus(value: 'Complete' | 'Error' | 'Pending' | 'Skipped') {
        this.Set('MatchStatus', value);
    }

    /**
    * * Field Name: SkippedReason
    * * Display Name: Skipped Reason
    * * SQL Data Type: nvarchar(MAX)
    * * Description: If MatchStatus=Skipped, this field can be used to store the reason why the record was skipped
    */
    get SkippedReason(): string | null {
        return this.Get('SkippedReason');
    }
    set SkippedReason(value: string | null) {
        this.Set('SkippedReason', value);
    }

    /**
    * * Field Name: MatchErrorMessage
    * * Display Name: Match Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: If MatchStatus='Error' this field can be used to track the error from that phase of the process for logging/diagnostics.
    */
    get MatchErrorMessage(): string | null {
        return this.Get('MatchErrorMessage');
    }
    set MatchErrorMessage(value: string | null) {
        this.Set('MatchErrorMessage', value);
    }

    /**
    * * Field Name: MergeStatus
    * * Display Name: Merge Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Not Applicable
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Not Applicable
    *   * Pending
    * * Description: Status of any merge operations for this record (Not Applicable, Pending, Complete, Failed).
    */
    get MergeStatus(): 'Complete' | 'Error' | 'Not Applicable' | 'Pending' {
        return this.Get('MergeStatus');
    }
    set MergeStatus(value: 'Complete' | 'Error' | 'Not Applicable' | 'Pending') {
        this.Set('MergeStatus', value);
    }

    /**
    * * Field Name: MergeErrorMessage
    * * Display Name: Merge Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Error details if merge operation failed for this record.
    */
    get MergeErrorMessage(): string | null {
        return this.Get('MergeErrorMessage');
    }
    set MergeErrorMessage(value: string | null) {
        this.Set('MergeErrorMessage', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Duplicate Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: DuplicateRun
 * * Base View: vwDuplicateRuns
 * * @description Manages execution of duplicate detection processes across entities, tracking configuration, progress, and summary results.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Duplicate Runs')
export class DuplicateRunEntity extends BaseEntity<DuplicateRunEntityType> {
    /**
    * Loads the Duplicate Runs record from the database
    * @param ID: string - primary key value to load the Duplicate Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DuplicateRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: StartedByUserID
    * * Display Name: Started By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get StartedByUserID(): string {
        return this.Get('StartedByUserID');
    }
    set StartedByUserID(value: string) {
        this.Set('StartedByUserID', value);
    }

    /**
    * * Field Name: SourceListID
    * * Display Name: Source List ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Lists (vwLists.ID)
    */
    get SourceListID(): string {
        return this.Get('SourceListID');
    }
    set SourceListID(value: string) {
        this.Set('SourceListID', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    get StartedAt(): Date {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: ApprovalStatus
    * * Display Name: Approval Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
    * * Description: Overall approval status for the duplicate run results (Pending, Approved, Rejected).
    */
    get ApprovalStatus(): 'Approved' | 'Pending' | 'Rejected' {
        return this.Get('ApprovalStatus');
    }
    set ApprovalStatus(value: 'Approved' | 'Pending' | 'Rejected') {
        this.Set('ApprovalStatus', value);
    }

    /**
    * * Field Name: ApprovalComments
    * * Display Name: Approval Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Comments or notes regarding the approval decision for this duplicate run.
    */
    get ApprovalComments(): string | null {
        return this.Get('ApprovalComments');
    }
    set ApprovalComments(value: string | null) {
        this.Set('ApprovalComments', value);
    }

    /**
    * * Field Name: ApprovedByUserID
    * * Display Name: Approved By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get ApprovedByUserID(): string | null {
        return this.Get('ApprovedByUserID');
    }
    set ApprovedByUserID(value: string | null) {
        this.Set('ApprovedByUserID', value);
    }

    /**
    * * Field Name: ProcessingStatus
    * * Display Name: Processing Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In Progress
    *   * Pending
    * * Description: Current processing status of the duplicate detection run (Pending, Running, Complete, Failed).
    */
    get ProcessingStatus(): 'Complete' | 'Failed' | 'In Progress' | 'Pending' {
        return this.Get('ProcessingStatus');
    }
    set ProcessingStatus(value: 'Complete' | 'Failed' | 'In Progress' | 'Pending') {
        this.Set('ProcessingStatus', value);
    }

    /**
    * * Field Name: ProcessingErrorMessage
    * * Display Name: Processing Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Error details if the duplicate detection run failed.
    */
    get ProcessingErrorMessage(): string | null {
        return this.Get('ProcessingErrorMessage');
    }
    set ProcessingErrorMessage(value: string | null) {
        this.Set('ProcessingErrorMessage', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: StartedByUser
    * * Display Name: Started By User
    * * SQL Data Type: nvarchar(100)
    */
    get StartedByUser(): string {
        return this.Get('StartedByUser');
    }

    /**
    * * Field Name: SourceList
    * * Display Name: Source List
    * * SQL Data Type: nvarchar(100)
    */
    get SourceList(): string {
        return this.Get('SourceList');
    }

    /**
    * * Field Name: ApprovedByUser
    * * Display Name: Approved By User
    * * SQL Data Type: nvarchar(100)
    */
    get ApprovedByUser(): string | null {
        return this.Get('ApprovedByUser');
    }
}


/**
 * Employee Company Integrations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EmployeeCompanyIntegration
 * * Base View: vwEmployeeCompanyIntegrations
 * * @description Maps employees to their external identifiers in integrated systems, maintaining synchronization across platforms.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Employee Company Integrations')
export class EmployeeCompanyIntegrationEntity extends BaseEntity<EmployeeCompanyIntegrationEntityType> {
    /**
    * Loads the Employee Company Integrations record from the database
    * @param ID: string - primary key value to load the Employee Company Integrations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EmployeeCompanyIntegrationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EmployeeID
    * * Display Name: Employee ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    get EmployeeID(): string {
        return this.Get('EmployeeID');
    }
    set EmployeeID(value: string) {
        this.Set('EmployeeID', value);
    }

    /**
    * * Field Name: CompanyIntegrationID
    * * Display Name: Company Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)
    */
    get CompanyIntegrationID(): string {
        return this.Get('CompanyIntegrationID');
    }
    set CompanyIntegrationID(value: string) {
        this.Set('CompanyIntegrationID', value);
    }

    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record
    * * SQL Data Type: nvarchar(750)
    * * Description: The employee's unique identifier in the external integrated system.
    */
    get ExternalSystemRecordID(): string {
        return this.Get('ExternalSystemRecordID');
    }
    set ExternalSystemRecordID(value: string) {
        this.Set('ExternalSystemRecordID', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if this employee integration mapping is currently active.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: CompanyIntegration
    * * Display Name: Company Integration
    * * SQL Data Type: nvarchar(255)
    */
    get CompanyIntegration(): string {
        return this.Get('CompanyIntegration');
    }
}


/**
 * Employee Roles - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EmployeeRole
 * * Base View: vwEmployeeRoles
 * * @description Links employees to their assigned roles within the organization, managing role-based permissions and responsibilities.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Employee Roles')
export class EmployeeRoleEntity extends BaseEntity<EmployeeRoleEntityType> {
    /**
    * Loads the Employee Roles record from the database
    * @param ID: string - primary key value to load the Employee Roles record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EmployeeRoleEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EmployeeID
    * * Display Name: Employee ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    get EmployeeID(): string {
        return this.Get('EmployeeID');
    }
    set EmployeeID(value: string) {
        this.Set('EmployeeID', value);
    }

    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    get RoleID(): string {
        return this.Get('RoleID');
    }
    set RoleID(value: string) {
        this.Set('RoleID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(50)
    */
    get Role(): string {
        return this.Get('Role');
    }
}


/**
 * Employee Skills - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EmployeeSkill
 * * Base View: vwEmployeeSkills
 * * @description Tracks skills, competencies, and certifications associated with employees for resource planning and team composition.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Employee Skills')
export class EmployeeSkillEntity extends BaseEntity<EmployeeSkillEntityType> {
    /**
    * Loads the Employee Skills record from the database
    * @param ID: string - primary key value to load the Employee Skills record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EmployeeSkillEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EmployeeID
    * * Display Name: Employee ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    get EmployeeID(): string {
        return this.Get('EmployeeID');
    }
    set EmployeeID(value: string) {
        this.Set('EmployeeID', value);
    }

    /**
    * * Field Name: SkillID
    * * Display Name: Skill ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Skills (vwSkills.ID)
    */
    get SkillID(): string {
        return this.Get('SkillID');
    }
    set SkillID(value: string) {
        this.Set('SkillID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Skill
    * * Display Name: Skill
    * * SQL Data Type: nvarchar(50)
    */
    get Skill(): string {
        return this.Get('Skill');
    }
}


/**
 * Employees - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Employee
 * * Base View: vwEmployees
 * * @description A list of employees across all units of your organization
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Employees')
export class EmployeeEntity extends BaseEntity<EmployeeEntityType> {
    /**
    * Loads the Employees record from the database
    * @param ID: string - primary key value to load the Employees record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EmployeeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: BCMID
    * * Display Name: BCMID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newid()
    * * Description: Business Central Management ID - unique identifier for cross-system employee tracking.
    */
    get BCMID(): string {
        return this.Get('BCMID');
    }

    /**
    * * Field Name: FirstName
    * * Display Name: First Name
    * * SQL Data Type: nvarchar(30)
    * * Description: Employee's first name or given name.
    */
    get FirstName(): string {
        return this.Get('FirstName');
    }
    set FirstName(value: string) {
        this.Set('FirstName', value);
    }

    /**
    * * Field Name: LastName
    * * Display Name: Last Name
    * * SQL Data Type: nvarchar(50)
    * * Description: Employee's last name or surname.
    */
    get LastName(): string {
        return this.Get('LastName');
    }
    set LastName(value: string) {
        this.Set('LastName', value);
    }

    /**
    * * Field Name: CompanyID
    * * Display Name: Company ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Companies (vwCompanies.ID)
    */
    get CompanyID(): string {
        return this.Get('CompanyID');
    }
    set CompanyID(value: string) {
        this.Set('CompanyID', value);
    }

    /**
    * * Field Name: SupervisorID
    * * Display Name: Supervisor ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    get SupervisorID(): string | null {
        return this.Get('SupervisorID');
    }
    set SupervisorID(value: string | null) {
        this.Set('SupervisorID', value);
    }

    /**
    * * Field Name: Title
    * * SQL Data Type: nvarchar(50)
    * * Description: Employee's job title or position within the organization.
    */
    get Title(): string | null {
        return this.Get('Title');
    }
    set Title(value: string | null) {
        this.Set('Title', value);
    }

    /**
    * * Field Name: Email
    * * SQL Data Type: nvarchar(100)
    * * Description: Employee's primary email address, must be unique across the system.
    */
    get Email(): string {
        return this.Get('Email');
    }
    set Email(value: string) {
        this.Set('Email', value);
    }

    /**
    * * Field Name: Phone
    * * SQL Data Type: nvarchar(20)
    * * Description: Employee's primary phone number for business contact.
    */
    get Phone(): string | null {
        return this.Get('Phone');
    }
    set Phone(value: string | null) {
        this.Set('Phone', value);
    }

    /**
    * * Field Name: Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether the employee is currently active in the organization.
    */
    get Active(): boolean {
        return this.Get('Active');
    }
    set Active(value: boolean) {
        this.Set('Active', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: FirstLast
    * * Display Name: First Last
    * * SQL Data Type: nvarchar(81)
    */
    get FirstLast(): string | null {
        return this.Get('FirstLast');
    }

    /**
    * * Field Name: Supervisor
    * * Display Name: Supervisor
    * * SQL Data Type: nvarchar(81)
    */
    get Supervisor(): string | null {
        return this.Get('Supervisor');
    }

    /**
    * * Field Name: SupervisorFirstName
    * * Display Name: Supervisor First Name
    * * SQL Data Type: nvarchar(30)
    */
    get SupervisorFirstName(): string | null {
        return this.Get('SupervisorFirstName');
    }

    /**
    * * Field Name: SupervisorLastName
    * * Display Name: Supervisor Last Name
    * * SQL Data Type: nvarchar(50)
    */
    get SupervisorLastName(): string | null {
        return this.Get('SupervisorLastName');
    }

    /**
    * * Field Name: SupervisorEmail
    * * Display Name: Supervisor Email
    * * SQL Data Type: nvarchar(100)
    */
    get SupervisorEmail(): string | null {
        return this.Get('SupervisorEmail');
    }
}


/**
 * Entities - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Entity
 * * Base View: vwEntities
 * * @description Catalog of all entities across all schemas
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entities')
export class EntityEntity extends BaseEntity<EntityEntityType> {
    /**
    * Loads the Entities record from the database
    * @param ID: string - primary key value to load the Entities record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for Entities entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that if deleting via the API is allowed and the delete type is set to 'Soft', then record merging must also be allowed. In other words, you cannot allow API deletes with a soft delete type without also allowing record merging.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateAllowRecordMergeForSoftDeleteAPI(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if deleting via the API is allowed and the delete type is set to 'Soft', then record merging must also be allowed. In other words, you cannot allow API deletes with a soft delete type without also allowing record merging.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateAllowRecordMergeForSoftDeleteAPI(result: ValidationResult) {
    	if (this.AllowDeleteAPI && this.DeleteType === "Soft" && !this.AllowRecordMerge) {
    		result.Errors.push(new ValidationErrorInfo("AllowRecordMerge", "When API deletes are allowed and delete type is 'Soft', record merging must be allowed.", this.AllowRecordMerge, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: NameSuffix
    * * Display Name: Name Suffix
    * * SQL Data Type: nvarchar(255)
    * * Description: Optional suffix appended to entity names for display purposes.
    */
    get NameSuffix(): string | null {
        return this.Get('NameSuffix');
    }
    set NameSuffix(value: string | null) {
        this.Set('NameSuffix', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: AutoUpdateDescription
    * * Display Name: Auto Update Description
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1 (default), whenever a description is modified in the underlying view (first choice) or table (second choice), the Description column in the entity definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.
    */
    get AutoUpdateDescription(): boolean {
        return this.Get('AutoUpdateDescription');
    }
    set AutoUpdateDescription(value: boolean) {
        this.Set('AutoUpdateDescription', value);
    }

    /**
    * * Field Name: BaseTable
    * * Display Name: Base Table
    * * SQL Data Type: nvarchar(255)
    * * Description: The underlying database table name for this entity.
    */
    get BaseTable(): string {
        return this.Get('BaseTable');
    }

    /**
    * * Field Name: BaseView
    * * Display Name: Base View
    * * SQL Data Type: nvarchar(255)
    * * Description: The "wrapper" database view used for querying this entity with joins and computed fields.
    */
    get BaseView(): string {
        return this.Get('BaseView');
    }
    set BaseView(value: string) {
        this.Set('BaseView', value);
    }

    /**
    * * Field Name: BaseViewGenerated
    * * Display Name: Base View Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 0, CodeGen no longer generates a base view for the entity.
    */
    get BaseViewGenerated(): boolean {
        return this.Get('BaseViewGenerated');
    }
    set BaseViewGenerated(value: boolean) {
        this.Set('BaseViewGenerated', value);
    }

    /**
    * * Field Name: SchemaName
    * * Display Name: Schema Name
    * * SQL Data Type: nvarchar(255)
    * * Default Value: dbo
    * * Description: Database schema containing this entity's table and view.
    */
    get SchemaName(): string {
        return this.Get('SchemaName');
    }

    /**
    * * Field Name: VirtualEntity
    * * Display Name: Virtual Entity
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if this is a virtual entity without a physical database table.
    */
    get VirtualEntity(): boolean {
        return this.Get('VirtualEntity');
    }
    set VirtualEntity(value: boolean) {
        this.Set('VirtualEntity', value);
    }

    /**
    * * Field Name: TrackRecordChanges
    * * Display Name: Track Record Changes
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, changes made via the MemberJunction architecture will result in tracking records being created in the RecordChange table. In addition, when turned on CodeGen will ensure that your table has two fields: __mj_CreatedAt and __mj_UpdatedAt which are special fields used in conjunction with the RecordChange table to track changes to rows in your entity.
    */
    get TrackRecordChanges(): boolean {
        return this.Get('TrackRecordChanges');
    }
    set TrackRecordChanges(value: boolean) {
        this.Set('TrackRecordChanges', value);
    }

    /**
    * * Field Name: AuditRecordAccess
    * * Display Name: Audit Record Access
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, accessing a record by an end-user will result in an Audit Log record being created
    */
    get AuditRecordAccess(): boolean {
        return this.Get('AuditRecordAccess');
    }
    set AuditRecordAccess(value: boolean) {
        this.Set('AuditRecordAccess', value);
    }

    /**
    * * Field Name: AuditViewRuns
    * * Display Name: Audit View Runs
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, users running a view against this entity will result in an Audit Log record being created.
    */
    get AuditViewRuns(): boolean {
        return this.Get('AuditViewRuns');
    }
    set AuditViewRuns(value: boolean) {
        this.Set('AuditViewRuns', value);
    }

    /**
    * * Field Name: IncludeInAPI
    * * Display Name: Include In API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 0, the entity will not be available at all in the GraphQL API or the object model.
    */
    get IncludeInAPI(): boolean {
        return this.Get('IncludeInAPI');
    }
    set IncludeInAPI(value: boolean) {
        this.Set('IncludeInAPI', value);
    }

    /**
    * * Field Name: AllowAllRowsAPI
    * * Display Name: Allow All Rows API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, a GraphQL query will be enabled that allows access to all rows in the entity.
    */
    get AllowAllRowsAPI(): boolean {
        return this.Get('AllowAllRowsAPI');
    }
    set AllowAllRowsAPI(value: boolean) {
        this.Set('AllowAllRowsAPI', value);
    }

    /**
    * * Field Name: AllowUpdateAPI
    * * Display Name: Allow Update API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Global flag controlling if updates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
    */
    get AllowUpdateAPI(): boolean {
        return this.Get('AllowUpdateAPI');
    }
    set AllowUpdateAPI(value: boolean) {
        this.Set('AllowUpdateAPI', value);
    }

    /**
    * * Field Name: AllowCreateAPI
    * * Display Name: Allow Create API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Global flag controlling if creates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
    */
    get AllowCreateAPI(): boolean {
        return this.Get('AllowCreateAPI');
    }
    set AllowCreateAPI(value: boolean) {
        this.Set('AllowCreateAPI', value);
    }

    /**
    * * Field Name: AllowDeleteAPI
    * * Display Name: Allow Delete API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Global flag controlling if deletes are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
    */
    get AllowDeleteAPI(): boolean {
        return this.Get('AllowDeleteAPI');
    }
    set AllowDeleteAPI(value: boolean) {
        this.Set('AllowDeleteAPI', value);
    }

    /**
    * * Field Name: CustomResolverAPI
    * * Display Name: Custom Resolver API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Set to 1 if a custom resolver has been created for the entity.
    */
    get CustomResolverAPI(): boolean {
        return this.Get('CustomResolverAPI');
    }
    set CustomResolverAPI(value: boolean) {
        this.Set('CustomResolverAPI', value);
    }

    /**
    * * Field Name: AllowUserSearchAPI
    * * Display Name: Allow User Search API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Enabling this bit will result in search being possible at the API and UI layers
    */
    get AllowUserSearchAPI(): boolean {
        return this.Get('AllowUserSearchAPI');
    }
    set AllowUserSearchAPI(value: boolean) {
        this.Set('AllowUserSearchAPI', value);
    }

    /**
    * * Field Name: FullTextSearchEnabled
    * * Display Name: Full Text Search Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether full-text search indexing is enabled for this entity.
    */
    get FullTextSearchEnabled(): boolean {
        return this.Get('FullTextSearchEnabled');
    }
    set FullTextSearchEnabled(value: boolean) {
        this.Set('FullTextSearchEnabled', value);
    }

    /**
    * * Field Name: FullTextCatalog
    * * Display Name: Full Text Catalog
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the SQL Server full-text catalog if search is enabled.
    */
    get FullTextCatalog(): string | null {
        return this.Get('FullTextCatalog');
    }
    set FullTextCatalog(value: string | null) {
        this.Set('FullTextCatalog', value);
    }

    /**
    * * Field Name: FullTextCatalogGenerated
    * * Display Name: Full Text Catalog Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the full-text catalog was auto-generated by CodeGen.
    */
    get FullTextCatalogGenerated(): boolean {
        return this.Get('FullTextCatalogGenerated');
    }
    set FullTextCatalogGenerated(value: boolean) {
        this.Set('FullTextCatalogGenerated', value);
    }

    /**
    * * Field Name: FullTextIndex
    * * Display Name: Full Text Index
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the full-text index on this entity's table.
    */
    get FullTextIndex(): string | null {
        return this.Get('FullTextIndex');
    }
    set FullTextIndex(value: string | null) {
        this.Set('FullTextIndex', value);
    }

    /**
    * * Field Name: FullTextIndexGenerated
    * * Display Name: Full Text Index Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the full-text index was auto-generated by CodeGen.
    */
    get FullTextIndexGenerated(): boolean {
        return this.Get('FullTextIndexGenerated');
    }
    set FullTextIndexGenerated(value: boolean) {
        this.Set('FullTextIndexGenerated', value);
    }

    /**
    * * Field Name: FullTextSearchFunction
    * * Display Name: Full Text Search Function
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the function used for full-text searching this entity.
    */
    get FullTextSearchFunction(): string | null {
        return this.Get('FullTextSearchFunction');
    }
    set FullTextSearchFunction(value: string | null) {
        this.Set('FullTextSearchFunction', value);
    }

    /**
    * * Field Name: FullTextSearchFunctionGenerated
    * * Display Name: Full Text Search Function Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the search function was auto-generated by CodeGen.
    */
    get FullTextSearchFunctionGenerated(): boolean {
        return this.Get('FullTextSearchFunctionGenerated');
    }
    set FullTextSearchFunctionGenerated(value: boolean) {
        this.Set('FullTextSearchFunctionGenerated', value);
    }

    /**
    * * Field Name: UserViewMaxRows
    * * Display Name: User View Max Rows
    * * SQL Data Type: int
    * * Default Value: 1000
    * * Description: Maximum number of rows to return in user-created views for this entity.
    */
    get UserViewMaxRows(): number | null {
        return this.Get('UserViewMaxRows');
    }
    set UserViewMaxRows(value: number | null) {
        this.Set('UserViewMaxRows', value);
    }

    /**
    * * Field Name: spCreate
    * * Display Name: spCreate
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the stored procedure for creating records in this entity.
    */
    get spCreate(): string | null {
        return this.Get('spCreate');
    }
    set spCreate(value: string | null) {
        this.Set('spCreate', value);
    }

    /**
    * * Field Name: spUpdate
    * * Display Name: spUpdate
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the stored procedure for updating records in this entity.
    */
    get spUpdate(): string | null {
        return this.Get('spUpdate');
    }
    set spUpdate(value: string | null) {
        this.Set('spUpdate', value);
    }

    /**
    * * Field Name: spDelete
    * * Display Name: spDelete
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the stored procedure for deleting records in this entity.
    */
    get spDelete(): string | null {
        return this.Get('spDelete');
    }
    set spDelete(value: string | null) {
        this.Set('spDelete', value);
    }

    /**
    * * Field Name: spCreateGenerated
    * * Display Name: sp CreateGenerated
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the create procedure was auto-generated by CodeGen.
    */
    get spCreateGenerated(): boolean {
        return this.Get('spCreateGenerated');
    }
    set spCreateGenerated(value: boolean) {
        this.Set('spCreateGenerated', value);
    }

    /**
    * * Field Name: spUpdateGenerated
    * * Display Name: sp Update Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the update procedure was auto-generated by CodeGen.
    */
    get spUpdateGenerated(): boolean {
        return this.Get('spUpdateGenerated');
    }
    set spUpdateGenerated(value: boolean) {
        this.Set('spUpdateGenerated', value);
    }

    /**
    * * Field Name: spDeleteGenerated
    * * Display Name: sp Delete Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the delete procedure was auto-generated by CodeGen.
    */
    get spDeleteGenerated(): boolean {
        return this.Get('spDeleteGenerated');
    }
    set spDeleteGenerated(value: boolean) {
        this.Set('spDeleteGenerated', value);
    }

    /**
    * * Field Name: CascadeDeletes
    * * Display Name: Cascade Deletes
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When set to 1, the deleted spDelete will pre-process deletion to related entities that have 1:M cardinality with this entity. This does not have effect if spDeleteGenerated = 0
    */
    get CascadeDeletes(): boolean {
        return this.Get('CascadeDeletes');
    }
    set CascadeDeletes(value: boolean) {
        this.Set('CascadeDeletes', value);
    }

    /**
    * * Field Name: DeleteType
    * * Display Name: Delete Type
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Hard
    * * Value List Type: List
    * * Possible Values 
    *   * Hard
    *   * Soft
    * * Description: Hard deletes physically remove rows from the underlying BaseTable. Soft deletes do not remove rows but instead mark the row as deleted by using the special field __mj_DeletedAt which will automatically be added to the entity's basetable by the CodeGen tool.
    */
    get DeleteType(): 'Hard' | 'Soft' {
        return this.Get('DeleteType');
    }
    set DeleteType(value: 'Hard' | 'Soft') {
        this.Set('DeleteType', value);
    }

    /**
    * * Field Name: AllowRecordMerge
    * * Display Name: Allow Record Merge
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: This field must be turned on in order to enable merging of records for the entity. For AllowRecordMerge to be turned on, AllowDeleteAPI must be set to 1, and DeleteType must be set to Soft
    */
    get AllowRecordMerge(): boolean {
        return this.Get('AllowRecordMerge');
    }
    set AllowRecordMerge(value: boolean) {
        this.Set('AllowRecordMerge', value);
    }

    /**
    * * Field Name: spMatch
    * * Display Name: sp Match
    * * SQL Data Type: nvarchar(255)
    * * Description: When specified, this stored procedure is used to find matching records in this particular entity. The convention is to pass in the primary key(s) columns for the given entity to the procedure and the return will be zero to many rows where there is a column for each primary key field(s) and a ProbabilityScore (numeric(1,12)) column that has a 0 to 1 value of the probability of a match.
    */
    get spMatch(): string | null {
        return this.Get('spMatch');
    }
    set spMatch(value: string | null) {
        this.Set('spMatch', value);
    }

    /**
    * * Field Name: RelationshipDefaultDisplayType
    * * Display Name: Relationship Default Display Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Search
    * * Value List Type: List
    * * Possible Values 
    *   * Dropdown
    *   * Search
    * * Description: When another entity links to this entity with a foreign key, this is the default component type that will be used in the UI. CodeGen will populate the RelatedEntityDisplayType column in the Entity Fields entity with whatever is provided here whenever a new foreign key is detected by CodeGen. The selection can be overridden on a per-foreign-key basis in each row of the Entity Fields entity.
    */
    get RelationshipDefaultDisplayType(): 'Dropdown' | 'Search' {
        return this.Get('RelationshipDefaultDisplayType');
    }
    set RelationshipDefaultDisplayType(value: 'Dropdown' | 'Search') {
        this.Set('RelationshipDefaultDisplayType', value);
    }

    /**
    * * Field Name: UserFormGenerated
    * * Display Name: User Form Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the default user form was auto-generated for this entity.
    */
    get UserFormGenerated(): boolean {
        return this.Get('UserFormGenerated');
    }
    set UserFormGenerated(value: boolean) {
        this.Set('UserFormGenerated', value);
    }

    /**
    * * Field Name: EntityObjectSubclassName
    * * Display Name: Entity Object Subclass Name
    * * SQL Data Type: nvarchar(255)
    * * Description: TypeScript class name for the entity subclass in the codebase.
    */
    get EntityObjectSubclassName(): string | null {
        return this.Get('EntityObjectSubclassName');
    }
    set EntityObjectSubclassName(value: string | null) {
        this.Set('EntityObjectSubclassName', value);
    }

    /**
    * * Field Name: EntityObjectSubclassImport
    * * Display Name: Entity Object Subclass Import
    * * SQL Data Type: nvarchar(255)
    * * Description: Import path for the entity subclass in the TypeScript codebase.
    */
    get EntityObjectSubclassImport(): string | null {
        return this.Get('EntityObjectSubclassImport');
    }
    set EntityObjectSubclassImport(value: string | null) {
        this.Set('EntityObjectSubclassImport', value);
    }

    /**
    * * Field Name: PreferredCommunicationField
    * * Display Name: Preferred Communication Field
    * * SQL Data Type: nvarchar(255)
    * * Description: Used to specify a field within the entity that in turn contains the field name that will be used for record-level communication preferences. For example in a hypothetical entity called Contacts, say there is a field called PreferredComm and that field had possible values of Email1, SMS, and Phone, and those value in turn corresponded to field names in the entity. Each record in the Contacts entity could have a specific preference for which field would be used for communication. The MJ Communication Framework will use this information when available, as a priority ahead of the data in the Entity Communication Fields entity which is entity-level and not record-level.
    */
    get PreferredCommunicationField(): string | null {
        return this.Get('PreferredCommunicationField');
    }
    set PreferredCommunicationField(value: string | null) {
        this.Set('PreferredCommunicationField', value);
    }

    /**
    * * Field Name: Icon
    * * Display Name: Icon
    * * SQL Data Type: nvarchar(500)
    * * Description: Optional, specify an icon (CSS Class) for each entity for display in the UI
    */
    get Icon(): string | null {
        return this.Get('Icon');
    }
    set Icon(value: string | null) {
        this.Set('Icon', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ScopeDefault
    * * Display Name: Scope Default
    * * SQL Data Type: nvarchar(100)
    * * Description: Optional, comma-delimited string indicating the default scope for entity visibility. Options include Users, Admins, AI, and All. Defaults to All when NULL. This is used for simple defaults for filtering entity visibility, not security enforcement.
    */
    get ScopeDefault(): string | null {
        return this.Get('ScopeDefault');
    }
    set ScopeDefault(value: string | null) {
        this.Set('ScopeDefault', value);
    }

    /**
    * * Field Name: RowsToPackWithSchema
    * * Display Name: Rows To Pack With Schema
    * * SQL Data Type: nvarchar(20)
    * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * All
    *   * None
    *   * Sample
    * * Description: Determines how entity rows should be packaged for external use. Options include None, Sample, and All. Defaults to None.
    */
    get RowsToPackWithSchema(): 'All' | 'None' | 'Sample' {
        return this.Get('RowsToPackWithSchema');
    }
    set RowsToPackWithSchema(value: 'All' | 'None' | 'Sample') {
        this.Set('RowsToPackWithSchema', value);
    }

    /**
    * * Field Name: RowsToPackSampleMethod
    * * Display Name: Rows To Pack Sample Method
    * * SQL Data Type: nvarchar(20)
    * * Default Value: random
    * * Value List Type: List
    * * Possible Values 
    *   * bottom n
    *   * random
    *   * top n
    * * Description: Defines the sampling method for row packing when RowsToPackWithSchema is set to Sample. Options include random, top n, and bottom n. Defaults to random.
    */
    get RowsToPackSampleMethod(): 'bottom n' | 'random' | 'top n' {
        return this.Get('RowsToPackSampleMethod');
    }
    set RowsToPackSampleMethod(value: 'bottom n' | 'random' | 'top n') {
        this.Set('RowsToPackSampleMethod', value);
    }

    /**
    * * Field Name: RowsToPackSampleCount
    * * Display Name: Rows To Pack Sample Count
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: The number of rows to pack when RowsToPackWithSchema is set to Sample, based on the designated sampling method. Defaults to 0.
    */
    get RowsToPackSampleCount(): number {
        return this.Get('RowsToPackSampleCount');
    }
    set RowsToPackSampleCount(value: number) {
        this.Set('RowsToPackSampleCount', value);
    }

    /**
    * * Field Name: RowsToPackSampleOrder
    * * Display Name: Rows To Pack Sample Order
    * * SQL Data Type: nvarchar(MAX)
    * * Description: An optional ORDER BY clause for row packing when RowsToPackWithSchema is set to Sample. Allows custom ordering for selected entity data when using top n and bottom n.
    */
    get RowsToPackSampleOrder(): string | null {
        return this.Get('RowsToPackSampleOrder');
    }
    set RowsToPackSampleOrder(value: string | null) {
        this.Set('RowsToPackSampleOrder', value);
    }

    /**
    * * Field Name: AutoRowCountFrequency
    * * Display Name: Auto Row Count Frequency
    * * SQL Data Type: int
    * * Description: Frequency in hours for automatically performing row counts on this entity. If NULL, automatic row counting is disabled. If greater than 0, schedules recurring SELECT COUNT(*) queries at the specified interval.
    */
    get AutoRowCountFrequency(): number | null {
        return this.Get('AutoRowCountFrequency');
    }
    set AutoRowCountFrequency(value: number | null) {
        this.Set('AutoRowCountFrequency', value);
    }

    /**
    * * Field Name: RowCount
    * * Display Name: Row Count
    * * SQL Data Type: bigint
    * * Description: Cached row count for this entity, populated by automatic row count processes when AutoRowCountFrequency is configured.
    */
    get RowCount(): number | null {
        return this.Get('RowCount');
    }
    set RowCount(value: number | null) {
        this.Set('RowCount', value);
    }

    /**
    * * Field Name: RowCountRunAt
    * * Display Name: Row Count Run At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp indicating when the last automatic row count was performed for this entity.
    */
    get RowCountRunAt(): Date | null {
        return this.Get('RowCountRunAt');
    }
    set RowCountRunAt(value: Date | null) {
        this.Set('RowCountRunAt', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(25)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Disabled
    * * Description: Status of the entity. Active: fully functional; Deprecated: functional but generates console warnings when used; Disabled: not available for use even though metadata and physical table remain.
    */
    get Status(): 'Active' | 'Deprecated' | 'Disabled' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Deprecated' | 'Disabled') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Optional display name for the entity. If not provided, the entity Name will be used for display purposes.
    */
    get DisplayName(): string | null {
        return this.Get('DisplayName');
    }
    set DisplayName(value: string | null) {
        this.Set('DisplayName', value);
    }

    /**
    * * Field Name: CodeName
    * * Display Name: Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get CodeName(): string | null {
        return this.Get('CodeName');
    }

    /**
    * * Field Name: ClassName
    * * Display Name: Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get ClassName(): string | null {
        return this.Get('ClassName');
    }

    /**
    * * Field Name: BaseTableCodeName
    * * Display Name: Base Table Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get BaseTableCodeName(): string | null {
        return this.Get('BaseTableCodeName');
    }

    /**
    * * Field Name: ParentEntity
    * * Display Name: Parent Entity
    * * SQL Data Type: nvarchar(255)
    */
    get ParentEntity(): string | null {
        return this.Get('ParentEntity');
    }

    /**
    * * Field Name: ParentBaseTable
    * * Display Name: Parent Base Table
    * * SQL Data Type: nvarchar(255)
    */
    get ParentBaseTable(): string | null {
        return this.Get('ParentBaseTable');
    }

    /**
    * * Field Name: ParentBaseView
    * * Display Name: Parent Base View
    * * SQL Data Type: nvarchar(255)
    */
    get ParentBaseView(): string | null {
        return this.Get('ParentBaseView');
    }
}


/**
 * Entity Action Filters - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityActionFilter
 * * Base View: vwEntityActionFilters
 * * @description Optional use. Maps Action Filters to specific EntityAction instances, specifying execution order and status. This allows for “pre-processing” before an Action actually is fired off, to check for various state/dirty/value conditions.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Action Filters')
export class EntityActionFilterEntity extends BaseEntity<EntityActionFilterEntityType> {
    /**
    * Loads the Entity Action Filters record from the database
    * @param ID: string - primary key value to load the Entity Action Filters record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityActionFilterEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityActionID
    * * Display Name: Entity Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Actions (vwEntityActions.ID)
    */
    get EntityActionID(): string {
        return this.Get('EntityActionID');
    }
    set EntityActionID(value: string) {
        this.Set('EntityActionID', value);
    }

    /**
    * * Field Name: ActionFilterID
    * * Display Name: Action Filter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Filters (vwActionFilters.ID)
    */
    get ActionFilterID(): string {
        return this.Get('ActionFilterID');
    }
    set ActionFilterID(value: string) {
        this.Set('ActionFilterID', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: Order of filter execution.
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    * * Description: Status of the entity action filter (Pending, Active, Disabled).
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Entity Action Invocation Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityActionInvocationType
 * * Base View: vwEntityActionInvocationTypes
 * * @description Stores the possible invocation types of an action within the context of an entity. Examples would be: Record Created/Updated/Deleted/Accessed as well as things like “View” or “List” where you could run an EntityAction against an entire set of records in a view or list – either by user click or programmatically.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Action Invocation Types')
export class EntityActionInvocationTypeEntity extends BaseEntity<EntityActionInvocationTypeEntityType> {
    /**
    * Loads the Entity Action Invocation Types record from the database
    * @param ID: string - primary key value to load the Entity Action Invocation Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityActionInvocationTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the invocation type such as Record Created/Updated/etc.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the invocation type.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: DisplaySequence
    * * Display Name: Display Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Order in which this invocation type appears in UI lists and menus.
    */
    get DisplaySequence(): number {
        return this.Get('DisplaySequence');
    }
    set DisplaySequence(value: number) {
        this.Set('DisplaySequence', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Entity Action Invocations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityActionInvocation
 * * Base View: vwEntityActionInvocations
 * * @description Links invocation types to entity actions – for example you might link a particular EntityAction to just “Create Record” and you might also have a second item in this table allowing the same Entity Action to be invoked from a User View or List, on demand.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Action Invocations')
export class EntityActionInvocationEntity extends BaseEntity<EntityActionInvocationEntityType> {
    /**
    * Loads the Entity Action Invocations record from the database
    * @param ID: string - primary key value to load the Entity Action Invocations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityActionInvocationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityActionID
    * * Display Name: Entity Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Actions (vwEntityActions.ID)
    */
    get EntityActionID(): string {
        return this.Get('EntityActionID');
    }
    set EntityActionID(value: string) {
        this.Set('EntityActionID', value);
    }

    /**
    * * Field Name: InvocationTypeID
    * * Display Name: Invocation Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Action Invocation Types (vwEntityActionInvocationTypes.ID)
    */
    get InvocationTypeID(): string {
        return this.Get('InvocationTypeID');
    }
    set InvocationTypeID(value: string) {
        this.Set('InvocationTypeID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    * * Description: Status of the entity action invocation (Pending, Active, Disabled).
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: InvocationType
    * * Display Name: Invocation Type
    * * SQL Data Type: nvarchar(255)
    */
    get InvocationType(): string {
        return this.Get('InvocationType');
    }
}


/**
 * Entity Action Params - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityActionParam
 * * Base View: vwEntityActionParams
 * * @description Stores paramater mappings to enable Entity Actions to automatically invoke Actions
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Action Params')
export class EntityActionParamEntity extends BaseEntity<EntityActionParamEntityType> {
    /**
    * Loads the Entity Action Params record from the database
    * @param ID: string - primary key value to load the Entity Action Params record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityActionParamEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityActionID
    * * Display Name: Entity Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Actions (vwEntityActions.ID)
    */
    get EntityActionID(): string {
        return this.Get('EntityActionID');
    }
    set EntityActionID(value: string) {
        this.Set('EntityActionID', value);
    }

    /**
    * * Field Name: ActionParamID
    * * Display Name: Action Param ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Params (vwActionParams.ID)
    */
    get ActionParamID(): string {
        return this.Get('ActionParamID');
    }
    set ActionParamID(value: string) {
        this.Set('ActionParamID', value);
    }

    /**
    * * Field Name: ValueType
    * * Display Name: Value Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Entity Field
    *   * Entity Object
    *   * Script
    *   * Static
    * * Description: Type of the value, which can be Static, Entity Object, or Script.
    */
    get ValueType(): 'Entity Field' | 'Entity Object' | 'Script' | 'Static' {
        return this.Get('ValueType');
    }
    set ValueType(value: 'Entity Field' | 'Entity Object' | 'Script' | 'Static') {
        this.Set('ValueType', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Value of the parameter, used only when ValueType is Static or Script. When value is Script, any valid JavaScript code can be provided. The script will have access to an object called EntityActionContext. This object will have a property called EntityObject on it that will contain the BaseEntity derived sub-class with the current data for the entity object this action is operating against. The script must provide the parameter value to the EntityActionContext.result property. This scripting capabilty is designed for very small and simple code, for anything of meaningful complexity, create a sub-class instead.
    */
    get Value(): string | null {
        return this.Get('Value');
    }
    set Value(value: string | null) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Additional comments regarding the parameter.
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ActionParam
    * * Display Name: Action Param
    * * SQL Data Type: nvarchar(255)
    */
    get ActionParam(): string {
        return this.Get('ActionParam');
    }
}


/**
 * Entity Actions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityAction
 * * Base View: vwEntityActions
 * * @description Links entities to actions - this is the main place where you define the actions that part of, or available, for a given entity.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Actions')
export class EntityActionEntity extends BaseEntity<EntityActionEntityType> {
    /**
    * Loads the Entity Actions record from the database
    * @param ID: string - primary key value to load the Entity Actions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityActionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    get ActionID(): string {
        return this.Get('ActionID');
    }
    set ActionID(value: string) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    * * Description: Status of the entity action (Pending, Active, Disabled).
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string {
        return this.Get('Action');
    }
}


/**
 * Entity AI Actions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityAIAction
 * * Base View: vwEntityAIActions
 * * @description Tracks the AI actions that should be invoked based on changes to records within a given entity.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'Entity AI Actions')
export class EntityAIActionEntity extends BaseEntity<EntityAIActionEntityType> {
    /**
    * Loads the Entity AI Actions record from the database
    * @param ID: string - primary key value to load the Entity AI Actions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityAIActionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: AIModelID
    * * Display Name: AI Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    get AIModelID(): string {
        return this.Get('AIModelID');
    }
    set AIModelID(value: string) {
        this.Set('AIModelID', value);
    }

    /**
    * * Field Name: AIActionID
    * * Display Name: AI Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Actions (vwAIActions.ID)
    */
    get AIActionID(): string {
        return this.Get('AIActionID');
    }
    set AIActionID(value: string) {
        this.Set('AIActionID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Prompt
    * * Display Name: Prompt
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The AI prompt template used when this action is triggered by entity changes.
    */
    get Prompt(): string | null {
        return this.Get('Prompt');
    }
    set Prompt(value: string | null) {
        this.Set('Prompt', value);
    }

    /**
    * * Field Name: TriggerEvent
    * * Display Name: Trigger Event
    * * SQL Data Type: nchar(15)
    * * Default Value: After Save
    * * Value List Type: List
    * * Possible Values 
    *   * after save
    *   * before save
    * * Description: The entity event that triggers this AI action (After Save, Before Delete, etc.).
    */
    get TriggerEvent(): 'after save' | 'before save' {
        return this.Get('TriggerEvent');
    }
    set TriggerEvent(value: 'after save' | 'before save') {
        this.Set('TriggerEvent', value);
    }

    /**
    * * Field Name: UserMessage
    * * Display Name: User Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Message shown to users when this AI action is executed.
    */
    get UserMessage(): string {
        return this.Get('UserMessage');
    }
    set UserMessage(value: string) {
        this.Set('UserMessage', value);
    }

    /**
    * * Field Name: OutputType
    * * Display Name: Output Type
    * * SQL Data Type: nchar(10)
    * * Default Value: FIeld
    * * Value List Type: List
    * * Possible Values 
    *   * entity
    *   * field
    * * Description: Where the AI output should be stored (Field, Message, File).
    */
    get OutputType(): 'entity' | 'field' {
        return this.Get('OutputType');
    }
    set OutputType(value: 'entity' | 'field') {
        this.Set('OutputType', value);
    }

    /**
    * * Field Name: OutputField
    * * Display Name: Output Field
    * * SQL Data Type: nvarchar(50)
    * * Description: The field name where AI output should be stored if OutputType is Field.
    */
    get OutputField(): string | null {
        return this.Get('OutputField');
    }
    set OutputField(value: string | null) {
        this.Set('OutputField', value);
    }

    /**
    * * Field Name: SkipIfOutputFieldNotEmpty
    * * Display Name: Skip If Output Field Not Empty
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Whether to skip AI processing if the output field already contains data.
    */
    get SkipIfOutputFieldNotEmpty(): boolean {
        return this.Get('SkipIfOutputFieldNotEmpty');
    }
    set SkipIfOutputFieldNotEmpty(value: boolean) {
        this.Set('SkipIfOutputFieldNotEmpty', value);
    }

    /**
    * * Field Name: OutputEntityID
    * * Display Name: Output Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get OutputEntityID(): string | null {
        return this.Get('OutputEntityID');
    }
    set OutputEntityID(value: string | null) {
        this.Set('OutputEntityID', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: AIModel
    * * Display Name: AIModel
    * * SQL Data Type: nvarchar(50)
    */
    get AIModel(): string {
        return this.Get('AIModel');
    }

    /**
    * * Field Name: AIAction
    * * Display Name: AIAction
    * * SQL Data Type: nvarchar(50)
    */
    get AIAction(): string {
        return this.Get('AIAction');
    }

    /**
    * * Field Name: OutputEntity
    * * Display Name: Output Entity
    * * SQL Data Type: nvarchar(255)
    */
    get OutputEntity(): string | null {
        return this.Get('OutputEntity');
    }
}


/**
 * Entity Communication Fields - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityCommunicationField
 * * Base View: vwEntityCommunicationFields
 * * @description Mapping between entity fields and communication base message types with priority
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Communication Fields')
export class EntityCommunicationFieldEntity extends BaseEntity<EntityCommunicationFieldEntityType> {
    /**
    * Loads the Entity Communication Fields record from the database
    * @param ID: string - primary key value to load the Entity Communication Fields record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityCommunicationFieldEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityCommunicationMessageTypeID
    * * Display Name: Entity Communication Message Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Communication Message Types (vwEntityCommunicationMessageTypes.ID)
    */
    get EntityCommunicationMessageTypeID(): string {
        return this.Get('EntityCommunicationMessageTypeID');
    }
    set EntityCommunicationMessageTypeID(value: string) {
        this.Set('EntityCommunicationMessageTypeID', value);
    }

    /**
    * * Field Name: FieldName
    * * Display Name: Field Name
    * * SQL Data Type: nvarchar(500)
    * * Description: Name of the field in the entity that maps to the communication base message type
    */
    get FieldName(): string {
        return this.Get('FieldName');
    }
    set FieldName(value: string) {
        this.Set('FieldName', value);
    }

    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Description: Priority of the field for the communication base message type
    */
    get Priority(): number {
        return this.Get('Priority');
    }
    set Priority(value: number) {
        this.Set('Priority', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Entity Communication Message Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityCommunicationMessageType
 * * Base View: vwEntityCommunicationMessageTypes
 * * @description Mapping between entities and communication base message types
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Communication Message Types')
export class EntityCommunicationMessageTypeEntity extends BaseEntity<EntityCommunicationMessageTypeEntityType> {
    /**
    * Loads the Entity Communication Message Types record from the database
    * @param ID: string - primary key value to load the Entity Communication Message Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityCommunicationMessageTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: BaseMessageTypeID
    * * Display Name: Base Message Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Base Message Types (vwCommunicationBaseMessageTypes.ID)
    */
    get BaseMessageTypeID(): string {
        return this.Get('BaseMessageTypeID');
    }
    set BaseMessageTypeID(value: string) {
        this.Set('BaseMessageTypeID', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether the message type is active
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: BaseMessageType
    * * Display Name: Base Message Type
    * * SQL Data Type: nvarchar(100)
    */
    get BaseMessageType(): string {
        return this.Get('BaseMessageType');
    }
}


/**
 * Entity Document Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityDocumentRun
 * * Base View: vwEntityDocumentRuns
 * * @description Records execution history of document generation processes for entity records, tracking status, timing, and output details.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Document Runs')
export class EntityDocumentRunEntity extends BaseEntity<EntityDocumentRunEntityType> {
    /**
    * Loads the Entity Document Runs record from the database
    * @param ID: string - primary key value to load the Entity Document Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityDocumentRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityDocumentID
    * * Display Name: Entity Document ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Documents (vwEntityDocuments.ID)
    */
    get EntityDocumentID(): string {
        return this.Get('EntityDocumentID');
    }
    set EntityDocumentID(value: string) {
        this.Set('EntityDocumentID', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    get StartedAt(): Date | null {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date | null) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(15)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * Pending
    * * Description: Can be Pending, In Progress, Completed, or Failed
    */
    get Status(): 'Complete' | 'Failed' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Failed' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: EntityDocument
    * * Display Name: Entity Document
    * * SQL Data Type: nvarchar(250)
    */
    get EntityDocument(): string {
        return this.Get('EntityDocument');
    }
}


/**
 * Entity Document Settings - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityDocumentSetting
 * * Base View: vwEntityDocumentSettings
 * * @description Stores configuration for entity-specific document generation.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Document Settings')
export class EntityDocumentSettingEntity extends BaseEntity<EntityDocumentSettingEntityType> {
    /**
    * Loads the Entity Document Settings record from the database
    * @param ID: string - primary key value to load the Entity Document Settings record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityDocumentSettingEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityDocumentID
    * * Display Name: Entity Document ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Documents (vwEntityDocuments.ID)
    */
    get EntityDocumentID(): string {
        return this.Get('EntityDocumentID');
    }
    set EntityDocumentID(value: string) {
        this.Set('EntityDocumentID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration value for this document generation setting.
    */
    get Value(): string {
        return this.Get('Value');
    }
    set Value(value: string) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: EntityDocument
    * * Display Name: Entity Document
    * * SQL Data Type: nvarchar(250)
    */
    get EntityDocument(): string {
        return this.Get('EntityDocument');
    }
}


/**
 * Entity Document Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityDocumentType
 * * Base View: vwEntityDocumentTypes
 * * @description Defines types of documents that can be generated from entity data.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Document Types')
export class EntityDocumentTypeEntity extends BaseEntity<EntityDocumentTypeEntityType> {
    /**
    * Loads the Entity Document Types record from the database
    * @param ID: string - primary key value to load the Entity Document Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityDocumentTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Entity Documents - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityDocument
 * * Base View: vwEntityDocuments
 * * @description Stores templates for converting structured entity data into unstructured documents.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Documents')
export class EntityDocumentEntity extends BaseEntity<EntityDocumentEntityType> {
    /**
    * Loads the Entity Documents record from the database
    * @param ID: string - primary key value to load the Entity Documents record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityDocumentEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for Entity Documents entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that both the Potential Match Threshold and the Absolute Match Threshold are numbers between 0 and 1, inclusive. Additionally, the Potential Match Threshold must not be higher than the Absolute Match Threshold.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidatePotentialAndAbsoluteMatchThresholdRangeAndRelationship(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that both the Potential Match Threshold and the Absolute Match Threshold are numbers between 0 and 1, inclusive. Additionally, the Potential Match Threshold must not be higher than the Absolute Match Threshold.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidatePotentialAndAbsoluteMatchThresholdRangeAndRelationship(result: ValidationResult) {
    	if (this.PotentialMatchThreshold < 0 || this.PotentialMatchThreshold > 1) {
    		result.Errors.push(new ValidationErrorInfo("PotentialMatchThreshold", "Potential Match Threshold must be between 0 and 1.", this.PotentialMatchThreshold, ValidationErrorType.Failure));
    	}
    	if (this.AbsoluteMatchThreshold < 0 || this.AbsoluteMatchThreshold > 1) {
    		result.Errors.push(new ValidationErrorInfo("AbsoluteMatchThreshold", "Absolute Match Threshold must be between 0 and 1.", this.AbsoluteMatchThreshold, ValidationErrorType.Failure));
    	}
    	if (this.PotentialMatchThreshold > this.AbsoluteMatchThreshold) {
    		result.Errors.push(new ValidationErrorInfo("PotentialMatchThreshold", "Potential Match Threshold must not exceed the Absolute Match Threshold.", this.PotentialMatchThreshold, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(250)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Document Types (vwEntityDocumentTypes.ID)
    */
    get TypeID(): string {
        return this.Get('TypeID');
    }
    set TypeID(value: string) {
        this.Set('TypeID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: VectorDatabaseID
    * * Display Name: Vector Database ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Vector Databases (vwVectorDatabases.ID)
    */
    get VectorDatabaseID(): string {
        return this.Get('VectorDatabaseID');
    }
    set VectorDatabaseID(value: string) {
        this.Set('VectorDatabaseID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(15)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Inactive
    */
    get Status(): 'Active' | 'Inactive' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Inactive') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: TemplateID
    * * Display Name: Template ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Templates (vwTemplates.ID)
    */
    get TemplateID(): string {
        return this.Get('TemplateID');
    }
    set TemplateID(value: string) {
        this.Set('TemplateID', value);
    }

    /**
    * * Field Name: AIModelID
    * * Display Name: AIModel ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    get AIModelID(): string {
        return this.Get('AIModelID');
    }
    set AIModelID(value: string) {
        this.Set('AIModelID', value);
    }

    /**
    * * Field Name: PotentialMatchThreshold
    * * Display Name: Potential Match Threshold
    * * SQL Data Type: numeric(12, 11)
    * * Default Value: 1
    * * Description: Value between 0 and 1 that determines what is considered a potential matching record. Value must be <= AbsoluteMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.
    */
    get PotentialMatchThreshold(): number {
        return this.Get('PotentialMatchThreshold');
    }
    set PotentialMatchThreshold(value: number) {
        this.Set('PotentialMatchThreshold', value);
    }

    /**
    * * Field Name: AbsoluteMatchThreshold
    * * Display Name: Absolute Match Threshold
    * * SQL Data Type: numeric(12, 11)
    * * Default Value: 1
    * * Description: Value between 0 and 1 that determines what is considered an absolute matching record. Value must be >= PotentialMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.
    */
    get AbsoluteMatchThreshold(): number {
        return this.Get('AbsoluteMatchThreshold');
    }
    set AbsoluteMatchThreshold(value: number) {
        this.Set('AbsoluteMatchThreshold', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(100)
    */
    get Type(): string {
        return this.Get('Type');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: VectorDatabase
    * * Display Name: Vector Database
    * * SQL Data Type: nvarchar(100)
    */
    get VectorDatabase(): string {
        return this.Get('VectorDatabase');
    }

    /**
    * * Field Name: Template
    * * Display Name: Template
    * * SQL Data Type: nvarchar(255)
    */
    get Template(): string {
        return this.Get('Template');
    }

    /**
    * * Field Name: AIModel
    * * Display Name: AIModel
    * * SQL Data Type: nvarchar(50)
    */
    get AIModel(): string {
        return this.Get('AIModel');
    }
}


/**
 * Entity Field Values - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityFieldValue
 * * Base View: vwEntityFieldValues
 * * @description Defines allowed values for entity fields with value lists, supporting dropdowns, validations, and data integrity constraints. MJ CodeGen automatically maintains this for columns that have CHECK constraints with IN lists such as "Status IN (A, B, C)"
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Field Values')
export class EntityFieldValueEntity extends BaseEntity<EntityFieldValueEntityType> {
    /**
    * Loads the Entity Field Values record from the database
    * @param ID: string - primary key value to load the Entity Field Values record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityFieldValueEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityFieldID
    * * Display Name: Entity Field ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Fields (vwEntityFields.ID)
    */
    get EntityFieldID(): string {
        return this.Get('EntityFieldID');
    }
    set EntityFieldID(value: string) {
        this.Set('EntityFieldID', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: Display order for this value in dropdown lists and UI elements.
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(255)
    * * Description: The actual value stored in the database for this option.
    */
    get Value(): string {
        return this.Get('Value');
    }
    set Value(value: string) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(50)
    * * Description: Optional code identifier for this value, useful for programmatic access. If not specified, same as Value
    */
    get Code(): string | null {
        return this.Get('Code');
    }
    set Code(value: string | null) {
        this.Set('Code', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: EntityField
    * * Display Name: Entity Field
    * * SQL Data Type: nvarchar(255)
    */
    get EntityField(): string {
        return this.Get('EntityField');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
}


/**
 * Entity Fields - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityField
 * * Base View: vwEntityFields
 * * @description List of all fields within each entity with metadata about each field
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Fields')
export class EntityFieldEntity extends BaseEntity<EntityFieldEntityType> {
    /**
    * Loads the Entity Fields record from the database
    * @param ID: string - primary key value to load the Entity Fields record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityFieldEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }

    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Display order of the field within the entity
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the field within the database table
    */
    get Name(): string {
        return this.Get('Name');
    }

    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(255)
    * * Description: A user friendly alternative to the field name
    */
    get DisplayName(): string | null {
        return this.Get('DisplayName');
    }
    set DisplayName(value: string | null) {
        this.Set('DisplayName', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Descriptive text explaining the purpose of the field
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: AutoUpdateDescription
    * * Display Name: Auto Update Description
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1 (default), whenever a description is modified in the column within the underlying view (first choice) or table (second choice), the Description column in the entity field definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity field definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.
    */
    get AutoUpdateDescription(): boolean {
        return this.Get('AutoUpdateDescription');
    }
    set AutoUpdateDescription(value: boolean) {
        this.Set('AutoUpdateDescription', value);
    }

    /**
    * * Field Name: IsPrimaryKey
    * * Display Name: Is Primary Key
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the field is part of the primary key for the entity (auto maintained by CodeGen)
    */
    get IsPrimaryKey(): boolean {
        return this.Get('IsPrimaryKey');
    }
    set IsPrimaryKey(value: boolean) {
        this.Set('IsPrimaryKey', value);
    }

    /**
    * * Field Name: IsUnique
    * * Display Name: Is Unique
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the field must have unique values within the entity.
    */
    get IsUnique(): boolean {
        return this.Get('IsUnique');
    }
    set IsUnique(value: boolean) {
        this.Set('IsUnique', value);
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    * * Description: Used for generating custom tabs in the generated forms, only utilized if GeneratedFormSection=Category
    */
    get Category(): string | null {
        return this.Get('Category');
    }
    set Category(value: string | null) {
        this.Set('Category', value);
    }

    /**
    * * Field Name: Type
    * * SQL Data Type: nvarchar(100)
    * * Description: SQL Data type (auto maintained by CodeGen)
    */
    get Type(): string {
        return this.Get('Type');
    }

    /**
    * * Field Name: Length
    * * SQL Data Type: int
    * * Description: SQL data length (auto maintained by CodeGen)
    */
    get Length(): number | null {
        return this.Get('Length');
    }

    /**
    * * Field Name: Precision
    * * SQL Data Type: int
    * * Description: SQL precision (auto maintained by CodeGen)
    */
    get Precision(): number | null {
        return this.Get('Precision');
    }

    /**
    * * Field Name: Scale
    * * SQL Data Type: int
    * * Description: SQL scale (auto maintained by CodeGen)
    */
    get Scale(): number | null {
        return this.Get('Scale');
    }

    /**
    * * Field Name: AllowsNull
    * * Display Name: Allows Null
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Does the column allow null or not (auto maintained by CodeGen)
    */
    get AllowsNull(): boolean {
        return this.Get('AllowsNull');
    }

    /**
    * * Field Name: DefaultValue
    * * Display Name: Default Value
    * * SQL Data Type: nvarchar(255)
    * * Description: If a default value is defined for the field it is stored here (auto maintained by CodeGen)
    */
    get DefaultValue(): string | null {
        return this.Get('DefaultValue');
    }

    /**
    * * Field Name: AutoIncrement
    * * Display Name: Auto Increment
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If this field automatically increments within the table, this field is set to 1 (auto maintained by CodeGen)
    */
    get AutoIncrement(): boolean {
        return this.Get('AutoIncrement');
    }

    /**
    * * Field Name: ValueListType
    * * Display Name: Value List Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * List
    *   * ListOrUserEntry
    *   * None
    * * Description: Possible Values of None, List, ListOrUserEntry - the last option meaning that the list of possible values are options, but a user can enter anything else desired too.
    */
    get ValueListType(): 'List' | 'ListOrUserEntry' | 'None' {
        return this.Get('ValueListType');
    }
    set ValueListType(value: 'List' | 'ListOrUserEntry' | 'None') {
        this.Set('ValueListType', value);
    }

    /**
    * * Field Name: ExtendedType
    * * Display Name: Extended Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Code
    *   * Email
    *   * FaceTime
    *   * Geo
    *   * MSTeams
    *   * Other
    *   * SIP
    *   * SMS
    *   * Skype
    *   * Tel
    *   * URL
    *   * WhatsApp
    *   * ZoomMtg
    * * Description: Defines extended behaviors for a field such as for Email, Web URLs, Code, etc.
    */
    get ExtendedType(): 'Code' | 'Email' | 'FaceTime' | 'Geo' | 'MSTeams' | 'Other' | 'SIP' | 'SMS' | 'Skype' | 'Tel' | 'URL' | 'WhatsApp' | 'ZoomMtg' | null {
        return this.Get('ExtendedType');
    }
    set ExtendedType(value: 'Code' | 'Email' | 'FaceTime' | 'Geo' | 'MSTeams' | 'Other' | 'SIP' | 'SMS' | 'Skype' | 'Tel' | 'URL' | 'WhatsApp' | 'ZoomMtg' | null) {
        this.Set('ExtendedType', value);
    }

    /**
    * * Field Name: CodeType
    * * Display Name: Code Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * CSS
    *   * HTML
    *   * JavaScript
    *   * Other
    *   * SQL
    *   * TypeScript
    * * Description: The type of code associated with this field. Only used when the ExtendedType field is set to "Code"
    */
    get CodeType(): 'CSS' | 'HTML' | 'JavaScript' | 'Other' | 'SQL' | 'TypeScript' | null {
        return this.Get('CodeType');
    }
    set CodeType(value: 'CSS' | 'HTML' | 'JavaScript' | 'Other' | 'SQL' | 'TypeScript' | null) {
        this.Set('CodeType', value);
    }

    /**
    * * Field Name: DefaultInView
    * * Display Name: Default In View
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, this field will be included by default in any new view created by a user.
    */
    get DefaultInView(): boolean {
        return this.Get('DefaultInView');
    }
    set DefaultInView(value: boolean) {
        this.Set('DefaultInView', value);
    }

    /**
    * * Field Name: ViewCellTemplate
    * * Display Name: View Cell Template
    * * SQL Data Type: nvarchar(MAX)
    * * Description: NULL
    */
    get ViewCellTemplate(): string | null {
        return this.Get('ViewCellTemplate');
    }
    set ViewCellTemplate(value: string | null) {
        this.Set('ViewCellTemplate', value);
    }

    /**
    * * Field Name: DefaultColumnWidth
    * * Display Name: Default Column Width
    * * SQL Data Type: int
    * * Description: Determines the default width for this field when included in a view
    */
    get DefaultColumnWidth(): number | null {
        return this.Get('DefaultColumnWidth');
    }
    set DefaultColumnWidth(value: number | null) {
        this.Set('DefaultColumnWidth', value);
    }

    /**
    * * Field Name: AllowUpdateAPI
    * * Display Name: Allow Update API
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 1, this field will be considered updateable by the API and object model. For this field to have effect, the column type must be updateable (e.g. not part of the primary key and not auto-increment)
    */
    get AllowUpdateAPI(): boolean {
        return this.Get('AllowUpdateAPI');
    }
    set AllowUpdateAPI(value: boolean) {
        this.Set('AllowUpdateAPI', value);
    }

    /**
    * * Field Name: AllowUpdateInView
    * * Display Name: Allow Update In View
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 1, and if AllowUpdateAPI=1, the field can be edited within a view when the view is in edit mode.
    */
    get AllowUpdateInView(): boolean {
        return this.Get('AllowUpdateInView');
    }
    set AllowUpdateInView(value: boolean) {
        this.Set('AllowUpdateInView', value);
    }

    /**
    * * Field Name: IncludeInUserSearchAPI
    * * Display Name: Include In User Search API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, this column will be included in user search queries for both traditional and full text search
    */
    get IncludeInUserSearchAPI(): boolean {
        return this.Get('IncludeInUserSearchAPI');
    }
    set IncludeInUserSearchAPI(value: boolean) {
        this.Set('IncludeInUserSearchAPI', value);
    }

    /**
    * * Field Name: FullTextSearchEnabled
    * * Display Name: Full Text Search Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, CodeGen will automatically generate a Full Text Catalog/Index in the database and include this field in the search index.
    */
    get FullTextSearchEnabled(): boolean {
        return this.Get('FullTextSearchEnabled');
    }
    set FullTextSearchEnabled(value: boolean) {
        this.Set('FullTextSearchEnabled', value);
    }

    /**
    * * Field Name: UserSearchParamFormatAPI
    * * Display Name: User Search Param Format API
    * * SQL Data Type: nvarchar(500)
    * * Description: NULL
    */
    get UserSearchParamFormatAPI(): string | null {
        return this.Get('UserSearchParamFormatAPI');
    }
    set UserSearchParamFormatAPI(value: string | null) {
        this.Set('UserSearchParamFormatAPI', value);
    }

    /**
    * * Field Name: IncludeInGeneratedForm
    * * Display Name: Include In Generated Form
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 1, this field will be included in the generated form by CodeGen. If set to 0, this field will be excluded from the generated form. For custom forms, this field has no effect as the layout is controlled independently.
    */
    get IncludeInGeneratedForm(): boolean {
        return this.Get('IncludeInGeneratedForm');
    }
    set IncludeInGeneratedForm(value: boolean) {
        this.Set('IncludeInGeneratedForm', value);
    }

    /**
    * * Field Name: GeneratedFormSection
    * * Display Name: Generated Form Section
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Details
    * * Value List Type: List
    * * Possible Values 
    *   * Category
    *   * Details
    *   * Top
    * * Description: When set to Top, the field will be placed in a "top area" on the top of a generated form and visible regardless of which tab is displayed. When set to "category" Options: Top, Category, Details
    */
    get GeneratedFormSection(): 'Category' | 'Details' | 'Top' {
        return this.Get('GeneratedFormSection');
    }
    set GeneratedFormSection(value: 'Category' | 'Details' | 'Top') {
        this.Set('GeneratedFormSection', value);
    }

    /**
    * * Field Name: IsVirtual
    * * Display Name: Is Virtual
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: NULL
    */
    get IsVirtual(): boolean {
        return this.Get('IsVirtual');
    }

    /**
    * * Field Name: IsNameField
    * * Display Name: Is Name Field
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, this column will be used as the "Name" field for the entity and will be used to display the name of the record in various places in the UI.
    */
    get IsNameField(): boolean {
        return this.Get('IsNameField');
    }
    set IsNameField(value: boolean) {
        this.Set('IsNameField', value);
    }

    /**
    * * Field Name: RelatedEntityID
    * * Display Name: RelatedEntity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get RelatedEntityID(): string | null {
        return this.Get('RelatedEntityID');
    }
    set RelatedEntityID(value: string | null) {
        this.Set('RelatedEntityID', value);
    }

    /**
    * * Field Name: RelatedEntityFieldName
    * * Display Name: Related Entity Field Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the field in the Related Entity that this field links to (auto maintained by CodeGen)
    */
    get RelatedEntityFieldName(): string | null {
        return this.Get('RelatedEntityFieldName');
    }
    set RelatedEntityFieldName(value: string | null) {
        this.Set('RelatedEntityFieldName', value);
    }

    /**
    * * Field Name: IncludeRelatedEntityNameFieldInBaseView
    * * Display Name: Include Related Entity Name Field In Base View
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 1, the "Name" field of the Related Entity will be included in this entity as a virtual field
    */
    get IncludeRelatedEntityNameFieldInBaseView(): boolean {
        return this.Get('IncludeRelatedEntityNameFieldInBaseView');
    }
    set IncludeRelatedEntityNameFieldInBaseView(value: boolean) {
        this.Set('IncludeRelatedEntityNameFieldInBaseView', value);
    }

    /**
    * * Field Name: RelatedEntityNameFieldMap
    * * Display Name: Related Entity Name Field Map
    * * SQL Data Type: nvarchar(255)
    * * Description: For foreign key fields, maps which field in the related entity contains the display name. This is used by CodeGen to automatically add in virtual fields for the "Name Field" of the related entity.
    */
    get RelatedEntityNameFieldMap(): string | null {
        return this.Get('RelatedEntityNameFieldMap');
    }
    set RelatedEntityNameFieldMap(value: string | null) {
        this.Set('RelatedEntityNameFieldMap', value);
    }

    /**
    * * Field Name: RelatedEntityDisplayType
    * * Display Name: Related Entity Display Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Search
    * * Description: Controls the generated form in the MJ Explorer UI - defaults to a search box, other option is a drop down. Possible values are Search and Dropdown
    */
    get RelatedEntityDisplayType(): string {
        return this.Get('RelatedEntityDisplayType');
    }
    set RelatedEntityDisplayType(value: string) {
        this.Set('RelatedEntityDisplayType', value);
    }

    /**
    * * Field Name: EntityIDFieldName
    * * Display Name: Entity IDField Name
    * * SQL Data Type: nvarchar(100)
    * * Description: Optional, used for "Soft Keys" to link records to different entity/record combinations on a per-record basis (for example the FileEntityRecordLink table has an EntityID/RecordID field pair. For that entity, the RecordID specifies "EntityID" for this field. This information allows MJ to detect soft keys/links for dependency detection, merging and for preventing orphaned soft-linked records during delete operations.
    */
    get EntityIDFieldName(): string | null {
        return this.Get('EntityIDFieldName');
    }
    set EntityIDFieldName(value: string | null) {
        this.Set('EntityIDFieldName', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ScopeDefault
    * * Display Name: Scope Default
    * * SQL Data Type: nvarchar(100)
    * * Description: A comma-delimited string indicating the default scope for field visibility. Options include Users, Admins, AI, and All. Defaults to All when NULL. This is used for a simple method of filtering field defaults for visibility, not security enforcement.
    */
    get ScopeDefault(): string | null {
        return this.Get('ScopeDefault');
    }
    set ScopeDefault(value: string | null) {
        this.Set('ScopeDefault', value);
    }

    /**
    * * Field Name: AutoUpdateRelatedEntityInfo
    * * Display Name: Auto Update Related Entity Info
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether the related entity information should be automatically updated from the database schema. When set to 0, relationships not part of the database schema can be manually defined at the application and AI agent level. Defaults to 1.
    */
    get AutoUpdateRelatedEntityInfo(): boolean {
        return this.Get('AutoUpdateRelatedEntityInfo');
    }
    set AutoUpdateRelatedEntityInfo(value: boolean) {
        this.Set('AutoUpdateRelatedEntityInfo', value);
    }

    /**
    * * Field Name: ValuesToPackWithSchema
    * * Display Name: Values To Pack With Schema
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Auto
    * * Value List Type: List
    * * Possible Values 
    *   * All
    *   * Auto
    *   * None
    * * Description: Determines whether values for the field should be included when the schema is packed. Options: Auto (include manually set or auto-derived values), None (exclude all values), All (include all distinct values from the table). Defaults to Auto.
    */
    get ValuesToPackWithSchema(): 'All' | 'Auto' | 'None' {
        return this.Get('ValuesToPackWithSchema');
    }
    set ValuesToPackWithSchema(value: 'All' | 'Auto' | 'None') {
        this.Set('ValuesToPackWithSchema', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(25)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Disabled
    * * Description: Current status of the entity field - Active fields are available for use, Deprecated fields are discouraged but still functional, Disabled fields are not available for use
    */
    get Status(): 'Active' | 'Deprecated' | 'Disabled' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Deprecated' | 'Disabled') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: FieldCodeName
    * * Display Name: Field Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get FieldCodeName(): string | null {
        return this.Get('FieldCodeName');
    }

    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: SchemaName
    * * Display Name: Schema Name
    * * SQL Data Type: nvarchar(255)
    */
    get SchemaName(): string {
        return this.Get('SchemaName');
    }

    /**
    * * Field Name: BaseTable
    * * Display Name: Base Table
    * * SQL Data Type: nvarchar(255)
    */
    get BaseTable(): string {
        return this.Get('BaseTable');
    }

    /**
    * * Field Name: BaseView
    * * Display Name: Base View
    * * SQL Data Type: nvarchar(255)
    */
    get BaseView(): string {
        return this.Get('BaseView');
    }

    /**
    * * Field Name: EntityCodeName
    * * Display Name: Entity Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get EntityCodeName(): string | null {
        return this.Get('EntityCodeName');
    }

    /**
    * * Field Name: EntityClassName
    * * Display Name: Entity Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get EntityClassName(): string | null {
        return this.Get('EntityClassName');
    }

    /**
    * * Field Name: RelatedEntity
    * * Display Name: Related Entity
    * * SQL Data Type: nvarchar(255)
    */
    get RelatedEntity(): string | null {
        return this.Get('RelatedEntity');
    }

    /**
    * * Field Name: RelatedEntitySchemaName
    * * Display Name: Related Entity Schema Name
    * * SQL Data Type: nvarchar(255)
    */
    get RelatedEntitySchemaName(): string | null {
        return this.Get('RelatedEntitySchemaName');
    }

    /**
    * * Field Name: RelatedEntityBaseTable
    * * Display Name: Related Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    get RelatedEntityBaseTable(): string | null {
        return this.Get('RelatedEntityBaseTable');
    }

    /**
    * * Field Name: RelatedEntityBaseView
    * * Display Name: Related Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    get RelatedEntityBaseView(): string | null {
        return this.Get('RelatedEntityBaseView');
    }

    /**
    * * Field Name: RelatedEntityCodeName
    * * Display Name: Related Entity Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get RelatedEntityCodeName(): string | null {
        return this.Get('RelatedEntityCodeName');
    }

    /**
    * * Field Name: RelatedEntityClassName
    * * Display Name: Related Entity Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get RelatedEntityClassName(): string | null {
        return this.Get('RelatedEntityClassName');
    }
}


/**
 * Entity Permissions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityPermission
 * * Base View: vwEntityPermissions
 * * @description Security settings for each entity
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Permissions')
export class EntityPermissionEntity extends BaseEntity<EntityPermissionEntityType> {
    /**
    * Loads the Entity Permissions record from the database
    * @param ID: string - primary key value to load the Entity Permissions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityPermissionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    get RoleID(): string {
        return this.Get('RoleID');
    }
    set RoleID(value: string) {
        this.Set('RoleID', value);
    }

    /**
    * * Field Name: CanCreate
    * * Display Name: Can Create
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether the role/user can create new records in this entity.
    */
    get CanCreate(): boolean {
        return this.Get('CanCreate');
    }
    set CanCreate(value: boolean) {
        this.Set('CanCreate', value);
    }

    /**
    * * Field Name: CanRead
    * * Display Name: Can Read
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether the role/user can read/view records in this entity.
    */
    get CanRead(): boolean {
        return this.Get('CanRead');
    }
    set CanRead(value: boolean) {
        this.Set('CanRead', value);
    }

    /**
    * * Field Name: CanUpdate
    * * Display Name: Can Update
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether the role/user can update existing records in this entity.
    */
    get CanUpdate(): boolean {
        return this.Get('CanUpdate');
    }
    set CanUpdate(value: boolean) {
        this.Set('CanUpdate', value);
    }

    /**
    * * Field Name: CanDelete
    * * Display Name: Can Delete
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether the role/user can delete records from this entity.
    */
    get CanDelete(): boolean {
        return this.Get('CanDelete');
    }
    set CanDelete(value: boolean) {
        this.Set('CanDelete', value);
    }

    /**
    * * Field Name: ReadRLSFilterID
    * * Display Name: Read RLSFilter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)
    */
    get ReadRLSFilterID(): string | null {
        return this.Get('ReadRLSFilterID');
    }
    set ReadRLSFilterID(value: string | null) {
        this.Set('ReadRLSFilterID', value);
    }

    /**
    * * Field Name: CreateRLSFilterID
    * * Display Name: Create RLSFilter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)
    */
    get CreateRLSFilterID(): string | null {
        return this.Get('CreateRLSFilterID');
    }
    set CreateRLSFilterID(value: string | null) {
        this.Set('CreateRLSFilterID', value);
    }

    /**
    * * Field Name: UpdateRLSFilterID
    * * Display Name: Update RLSFilter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)
    */
    get UpdateRLSFilterID(): string | null {
        return this.Get('UpdateRLSFilterID');
    }
    set UpdateRLSFilterID(value: string | null) {
        this.Set('UpdateRLSFilterID', value);
    }

    /**
    * * Field Name: DeleteRLSFilterID
    * * Display Name: Delete RLSFilter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)
    */
    get DeleteRLSFilterID(): string | null {
        return this.Get('DeleteRLSFilterID');
    }
    set DeleteRLSFilterID(value: string | null) {
        this.Set('DeleteRLSFilterID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: RoleName
    * * Display Name: Role Name
    * * SQL Data Type: nvarchar(50)
    */
    get RoleName(): string {
        return this.Get('RoleName');
    }

    /**
    * * Field Name: RoleSQLName
    * * Display Name: Role SQLName
    * * SQL Data Type: nvarchar(250)
    */
    get RoleSQLName(): string | null {
        return this.Get('RoleSQLName');
    }

    /**
    * * Field Name: CreateRLSFilter
    * * Display Name: Create RLSFilter
    * * SQL Data Type: nvarchar(100)
    */
    get CreateRLSFilter(): string | null {
        return this.Get('CreateRLSFilter');
    }

    /**
    * * Field Name: ReadRLSFilter
    * * Display Name: Read RLSFilter
    * * SQL Data Type: nvarchar(100)
    */
    get ReadRLSFilter(): string | null {
        return this.Get('ReadRLSFilter');
    }

    /**
    * * Field Name: UpdateRLSFilter
    * * Display Name: Update RLSFilter
    * * SQL Data Type: nvarchar(100)
    */
    get UpdateRLSFilter(): string | null {
        return this.Get('UpdateRLSFilter');
    }

    /**
    * * Field Name: DeleteRLSFilter
    * * Display Name: Delete RLSFilter
    * * SQL Data Type: nvarchar(100)
    */
    get DeleteRLSFilter(): string | null {
        return this.Get('DeleteRLSFilter');
    }
}


/**
 * Entity Record Documents - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityRecordDocument
 * * Base View: vwEntityRecordDocuments
 * * @description Stores the output for a given entity record for a specific Entity Document. For example if a "Person" entity had a particular template that outputted First and Last name like "#{{FirstName}}\n#{{LastName}}" the Entity Record Document would have a row for each entity record in the Person entity that was run through that particular document and have row values such as "#Jane\n#Doe" and "#Mark\n#Smith".
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Record Documents')
export class EntityRecordDocumentEntity extends BaseEntity<EntityRecordDocumentEntityType> {
    /**
    * Loads the Entity Record Documents record from the database
    * @param ID: string - primary key value to load the Entity Record Documents record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityRecordDocumentEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(450)
    * * Description: The ID of the entity record this document was generated for.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: EntityDocumentID
    * * Display Name: Entity Document ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Documents (vwEntityDocuments.ID)
    */
    get EntityDocumentID(): string {
        return this.Get('EntityDocumentID');
    }
    set EntityDocumentID(value: string) {
        this.Set('EntityDocumentID', value);
    }

    /**
    * * Field Name: DocumentText
    * * Display Name: Document Text
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The generated document text after template processing.
    */
    get DocumentText(): string | null {
        return this.Get('DocumentText');
    }
    set DocumentText(value: string | null) {
        this.Set('DocumentText', value);
    }

    /**
    * * Field Name: VectorIndexID
    * * Display Name: Vector Index ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Vector Indexes (vwVectorIndexes.ID)
    */
    get VectorIndexID(): string {
        return this.Get('VectorIndexID');
    }
    set VectorIndexID(value: string) {
        this.Set('VectorIndexID', value);
    }

    /**
    * * Field Name: VectorID
    * * Display Name: Vector ID
    * * SQL Data Type: nvarchar(50)
    * * Description: Reference to the vector embedding of this document if AI search is enabled.
    */
    get VectorID(): string | null {
        return this.Get('VectorID');
    }
    set VectorID(value: string | null) {
        this.Set('VectorID', value);
    }

    /**
    * * Field Name: VectorJSON
    * * Display Name: Vector JSON
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON representation of the vector embedding for this document.
    */
    get VectorJSON(): string | null {
        return this.Get('VectorJSON');
    }
    set VectorJSON(value: string | null) {
        this.Set('VectorJSON', value);
    }

    /**
    * * Field Name: EntityRecordUpdatedAt
    * * Display Name: Entity Record Updated At
    * * SQL Data Type: datetime
    * * Description: Timestamp of when the source entity record was last updated.
    */
    get EntityRecordUpdatedAt(): Date {
        return this.Get('EntityRecordUpdatedAt');
    }
    set EntityRecordUpdatedAt(value: Date) {
        this.Set('EntityRecordUpdatedAt', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: EntityDocument
    * * Display Name: Entity Document
    * * SQL Data Type: nvarchar(250)
    */
    get EntityDocument(): string {
        return this.Get('EntityDocument');
    }

    /**
    * * Field Name: VectorIndex
    * * Display Name: Vector Index
    * * SQL Data Type: nvarchar(255)
    */
    get VectorIndex(): string {
        return this.Get('VectorIndex');
    }
}


/**
 * Entity Relationship Display Components - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityRelationshipDisplayComponent
 * * Base View: vwEntityRelationshipDisplayComponents
 * * @description This table stores a list of components that are available for displaying relationships in the MJ Explorer UI
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Relationship Display Components')
export class EntityRelationshipDisplayComponentEntity extends BaseEntity<EntityRelationshipDisplayComponentEntityType> {
    /**
    * Loads the Entity Relationship Display Components record from the database
    * @param ID: string - primary key value to load the Entity Relationship Display Components record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityRelationshipDisplayComponentEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: RelationshipType
    * * Display Name: Relationship Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Both
    *   * Many to Many
    *   * One to Many
    * * Description: The type of relationship the component displays. Valid values are "One to Many", "Many to Many", or "Both".
    */
    get RelationshipType(): 'Both' | 'Many to Many' | 'One to Many' {
        return this.Get('RelationshipType');
    }
    set RelationshipType(value: 'Both' | 'Many to Many' | 'One to Many') {
        this.Set('RelationshipType', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Entity Relationships - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntityRelationship
 * * Base View: vwEntityRelationships
 * * @description Metadata about relationships between entities including display preferences for the UI
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Relationships')
export class EntityRelationshipEntity extends BaseEntity<EntityRelationshipEntityType> {
    /**
    * Loads the Entity Relationships record from the database
    * @param ID: string - primary key value to load the Entity Relationships record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntityRelationshipEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Used for display order in generated forms and in other places in the UI where relationships for an entity are shown
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: RelatedEntityID
    * * Display Name: Related Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get RelatedEntityID(): string {
        return this.Get('RelatedEntityID');
    }
    set RelatedEntityID(value: string) {
        this.Set('RelatedEntityID', value);
    }

    /**
    * * Field Name: BundleInAPI
    * * Display Name: Bundle In API
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Whether to include related records when fetching the parent entity via API.
    */
    get BundleInAPI(): boolean {
        return this.Get('BundleInAPI');
    }
    set BundleInAPI(value: boolean) {
        this.Set('BundleInAPI', value);
    }

    /**
    * * Field Name: IncludeInParentAllQuery
    * * Display Name: Include In Parent All Query
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether to include this relationship when querying all fields of the parent entity.
    */
    get IncludeInParentAllQuery(): boolean {
        return this.Get('IncludeInParentAllQuery');
    }
    set IncludeInParentAllQuery(value: boolean) {
        this.Set('IncludeInParentAllQuery', value);
    }

    /**
    * * Field Name: Type
    * * SQL Data Type: nchar(20)
    * * Default Value: One To Many
    * * Value List Type: List
    * * Possible Values 
    *   * Many To Many
    *   * One To Many
    * * Description: The cardinality of the relationship (One To Many, Many To Many, One To One).
    */
    get Type(): 'Many To Many' | 'One To Many' {
        return this.Get('Type');
    }
    set Type(value: 'Many To Many' | 'One To Many') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: EntityKeyField
    * * Display Name: Entity Key Field
    * * SQL Data Type: nvarchar(255)
    * * Description: The primary key field of the parent entity in this relationship.
    */
    get EntityKeyField(): string | null {
        return this.Get('EntityKeyField');
    }
    set EntityKeyField(value: string | null) {
        this.Set('EntityKeyField', value);
    }

    /**
    * * Field Name: RelatedEntityJoinField
    * * Display Name: Related Entity Join Field
    * * SQL Data Type: nvarchar(255)
    * * Description: The foreign key field in the related entity that references the parent.
    */
    get RelatedEntityJoinField(): string {
        return this.Get('RelatedEntityJoinField');
    }
    set RelatedEntityJoinField(value: string) {
        this.Set('RelatedEntityJoinField', value);
    }

    /**
    * * Field Name: JoinView
    * * Display Name: Join View
    * * SQL Data Type: nvarchar(255)
    * * Description: For many-to-many relationships, the view containing the junction data.
    */
    get JoinView(): string | null {
        return this.Get('JoinView');
    }
    set JoinView(value: string | null) {
        this.Set('JoinView', value);
    }

    /**
    * * Field Name: JoinEntityJoinField
    * * Display Name: Join Entity Join Field
    * * SQL Data Type: nvarchar(255)
    * * Description: For many-to-many, the field in the junction table linking to the parent entity.
    */
    get JoinEntityJoinField(): string | null {
        return this.Get('JoinEntityJoinField');
    }
    set JoinEntityJoinField(value: string | null) {
        this.Set('JoinEntityJoinField', value);
    }

    /**
    * * Field Name: JoinEntityInverseJoinField
    * * Display Name: Join Entity Inverse Join Field
    * * SQL Data Type: nvarchar(255)
    * * Description: For many-to-many, the field in the junction table linking to the related entity.
    */
    get JoinEntityInverseJoinField(): string | null {
        return this.Get('JoinEntityInverseJoinField');
    }
    set JoinEntityInverseJoinField(value: string | null) {
        this.Set('JoinEntityInverseJoinField', value);
    }

    /**
    * * Field Name: DisplayInForm
    * * Display Name: Display In Form
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When unchecked the relationship will NOT be displayed on the generated form
    */
    get DisplayInForm(): boolean {
        return this.Get('DisplayInForm');
    }
    set DisplayInForm(value: boolean) {
        this.Set('DisplayInForm', value);
    }

    /**
    * * Field Name: DisplayLocation
    * * Display Name: Display Location
    * * SQL Data Type: nvarchar(50)
    * * Default Value: After Field Tabs
    * * Value List Type: List
    * * Possible Values 
    *   * After Field Tabs
    *   * Before Field Tabs
    * * Description: Where to display this relationship in the UI relative to other entity elements.
    */
    get DisplayLocation(): 'After Field Tabs' | 'Before Field Tabs' {
        return this.Get('DisplayLocation');
    }
    set DisplayLocation(value: 'After Field Tabs' | 'Before Field Tabs') {
        this.Set('DisplayLocation', value);
    }

    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Optional, when specified this value overrides the related entity name for the label on the tab
    */
    get DisplayName(): string | null {
        return this.Get('DisplayName');
    }
    set DisplayName(value: string | null) {
        this.Set('DisplayName', value);
    }

    /**
    * * Field Name: DisplayIconType
    * * Display Name: Display Icon Type
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Related Entity Icon
    * * Value List Type: List
    * * Possible Values 
    *   * Custom
    *   * None
    *   * Related Entity Icon
    * * Description: When Related Entity Icon - uses the icon from the related entity, if one exists. When Custom, uses the value in the DisplayIcon field in this record, and when None, no icon is displayed
    */
    get DisplayIconType(): 'Custom' | 'None' | 'Related Entity Icon' {
        return this.Get('DisplayIconType');
    }
    set DisplayIconType(value: 'Custom' | 'None' | 'Related Entity Icon') {
        this.Set('DisplayIconType', value);
    }

    /**
    * * Field Name: DisplayIcon
    * * Display Name: Display Icon
    * * SQL Data Type: nvarchar(255)
    * * Description: If specified, the icon 
    */
    get DisplayIcon(): string | null {
        return this.Get('DisplayIcon');
    }
    set DisplayIcon(value: string | null) {
        this.Set('DisplayIcon', value);
    }

    /**
    * * Field Name: DisplayUserViewID
    * * Display Name: Display User View ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User Views (vwUserViews.ID)
    */
    get DisplayUserViewID(): string | null {
        return this.Get('DisplayUserViewID');
    }

    /**
    * * Field Name: DisplayComponentID
    * * Display Name: Display Component ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Relationship Display Components (vwEntityRelationshipDisplayComponents.ID)
    */
    get DisplayComponentID(): string | null {
        return this.Get('DisplayComponentID');
    }
    set DisplayComponentID(value: string | null) {
        this.Set('DisplayComponentID', value);
    }

    /**
    * * Field Name: DisplayComponentConfiguration
    * * Display Name: Display Component Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: If DisplayComponentID is specified, this field can optionally be used to track component-specific and relationship-specific configuration details that will be used by CodeGen to provide to the display component selected.
    */
    get DisplayComponentConfiguration(): string | null {
        return this.Get('DisplayComponentConfiguration');
    }
    set DisplayComponentConfiguration(value: string | null) {
        this.Set('DisplayComponentConfiguration', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: AutoUpdateFromSchema
    * * Display Name: Auto Update From Schema
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether this relationship should be automatically updated by CodeGen. When set to 0, the record will not be modified by CodeGen. Defaults to 1.
    */
    get AutoUpdateFromSchema(): boolean {
        return this.Get('AutoUpdateFromSchema');
    }
    set AutoUpdateFromSchema(value: boolean) {
        this.Set('AutoUpdateFromSchema', value);
    }

    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: EntityBaseTable
    * * Display Name: Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    get EntityBaseTable(): string {
        return this.Get('EntityBaseTable');
    }

    /**
    * * Field Name: EntityBaseView
    * * Display Name: Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    get EntityBaseView(): string {
        return this.Get('EntityBaseView');
    }

    /**
    * * Field Name: RelatedEntity
    * * Display Name: Related Entity
    * * SQL Data Type: nvarchar(255)
    */
    get RelatedEntity(): string {
        return this.Get('RelatedEntity');
    }

    /**
    * * Field Name: RelatedEntityBaseTable
    * * Display Name: Related Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    get RelatedEntityBaseTable(): string {
        return this.Get('RelatedEntityBaseTable');
    }

    /**
    * * Field Name: RelatedEntityBaseView
    * * Display Name: Related Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    get RelatedEntityBaseView(): string {
        return this.Get('RelatedEntityBaseView');
    }

    /**
    * * Field Name: RelatedEntityClassName
    * * Display Name: Related Entity Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get RelatedEntityClassName(): string | null {
        return this.Get('RelatedEntityClassName');
    }

    /**
    * * Field Name: RelatedEntityCodeName
    * * Display Name: Related Entity Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get RelatedEntityCodeName(): string | null {
        return this.Get('RelatedEntityCodeName');
    }

    /**
    * * Field Name: RelatedEntityBaseTableCodeName
    * * Display Name: Related Entity Base Table Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    get RelatedEntityBaseTableCodeName(): string | null {
        return this.Get('RelatedEntityBaseTableCodeName');
    }

    /**
    * * Field Name: DisplayUserViewName
    * * Display Name: Display User View Name
    * * SQL Data Type: nvarchar(100)
    */
    get DisplayUserViewName(): string | null {
        return this.Get('DisplayUserViewName');
    }
}


/**
 * Entity Settings - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: EntitySetting
 * * Base View: vwEntitySettings
 * * @description Stores entity-specific configuration settings, allowing customization of how entities function.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Entity Settings')
export class EntitySettingEntity extends BaseEntity<EntitySettingEntityType> {
    /**
    * Loads the Entity Settings record from the database
    * @param ID: string - primary key value to load the Entity Settings record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EntitySettingEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The configuration value for this entity setting, often in JSON format.
    */
    get Value(): string {
        return this.Get('Value');
    }
    set Value(value: string) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }
}


/**
 * Error Logs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ErrorLog
 * * Base View: vwErrorLogs
 * * @description Captures system errors, exceptions, and failures with stack traces, context, and debugging info.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Error Logs')
export class ErrorLogEntity extends BaseEntity<ErrorLogEntityType> {
    /**
    * Loads the Error Logs record from the database
    * @param ID: string - primary key value to load the Error Logs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ErrorLogEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CompanyIntegrationRunID
    * * Display Name: CompanyIntegrationRun ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integration Runs (vwCompanyIntegrationRuns.ID)
    */
    get CompanyIntegrationRunID(): string | null {
        return this.Get('CompanyIntegrationRunID');
    }
    set CompanyIntegrationRunID(value: string | null) {
        this.Set('CompanyIntegrationRunID', value);
    }

    /**
    * * Field Name: CompanyIntegrationRunDetailID
    * * Display Name: CompanyIntegrationRunDetail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integration Run Details (vwCompanyIntegrationRunDetails.ID)
    */
    get CompanyIntegrationRunDetailID(): string | null {
        return this.Get('CompanyIntegrationRunDetailID');
    }
    set CompanyIntegrationRunDetailID(value: string | null) {
        this.Set('CompanyIntegrationRunDetailID', value);
    }

    /**
    * * Field Name: Code
    * * SQL Data Type: nchar(20)
    * * Description: Error code for categorizing and handling specific error types.
    */
    get Code(): string | null {
        return this.Get('Code');
    }
    set Code(value: string | null) {
        this.Set('Code', value);
    }

    /**
    * * Field Name: Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The primary error message describing what went wrong.
    */
    get Message(): string | null {
        return this.Get('Message');
    }
    set Message(value: string | null) {
        this.Set('Message', value);
    }

    /**
    * * Field Name: CreatedBy
    * * Display Name: Created By
    * * SQL Data Type: nvarchar(50)
    * * Default Value: suser_name()
    * * Description: User or system process that encountered this error.
    */
    get CreatedBy(): string | null {
        return this.Get('CreatedBy');
    }
    set CreatedBy(value: string | null) {
        this.Set('CreatedBy', value);
    }

    /**
    * * Field Name: Status
    * * SQL Data Type: nvarchar(10)
    */
    get Status(): string | null {
        return this.Get('Status');
    }
    set Status(value: string | null) {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Category
    * * SQL Data Type: nvarchar(20)
    * * Description: High-level category for grouping related errors (Database, API, Validation, etc.).
    */
    get Category(): string | null {
        return this.Get('Category');
    }
    set Category(value: string | null) {
        this.Set('Category', value);
    }

    /**
    * * Field Name: Details
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Full error details including stack trace, inner exceptions, and context data.
    */
    get Details(): string | null {
        return this.Get('Details');
    }
    set Details(value: string | null) {
        this.Set('Details', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Explorer Navigation Items - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ExplorerNavigationItem
 * * Base View: vwExplorerNavigationItems
 * * @description Table to store navigation items for MemberJunction Explorer
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Explorer Navigation Items')
export class ExplorerNavigationItemEntity extends BaseEntity<ExplorerNavigationItemEntityType> {
    /**
    * Loads the Explorer Navigation Items record from the database
    * @param ID: string - primary key value to load the Explorer Navigation Items record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ExplorerNavigationItemEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for Explorer Navigation Items entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Sequence: This rule ensures that the 'Sequence' value must always be greater than zero.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateSequenceGreaterThanZero(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the 'Sequence' value must always be greater than zero.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateSequenceGreaterThanZero(result: ValidationResult) {
    	if (this.Sequence <= 0) {
    		result.Errors.push(new ValidationErrorInfo("Sequence", "The Sequence value must be greater than zero.", this.Sequence, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Unique identifier for each navigation item
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: Sequence number for the navigation item, must be unique and greater than 0
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    * * Description: Unique name of the navigation item displayed to the user
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Route
    * * Display Name: Route
    * * SQL Data Type: nvarchar(255)
    * * Description: The route for the navigation item relative to the app main URL, using Angular syntax like "entity/:entityName"
    */
    get Route(): string {
        return this.Get('Route');
    }
    set Route(value: string) {
        this.Set('Route', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the navigation item is active; allows turning off items in the UI without deleting them from the metadata
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: ShowInHomeScreen
    * * Display Name: Show In Home Screen
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Controls if the navigation item is shown on the Home screen for MJ Explorer
    */
    get ShowInHomeScreen(): boolean {
        return this.Get('ShowInHomeScreen');
    }
    set ShowInHomeScreen(value: boolean) {
        this.Set('ShowInHomeScreen', value);
    }

    /**
    * * Field Name: ShowInNavigationDrawer
    * * Display Name: Show In Navigation Drawer
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Controls if the item is shown in the left navigation drawer in the MJ Explorer app or not.
    */
    get ShowInNavigationDrawer(): boolean {
        return this.Get('ShowInNavigationDrawer');
    }
    set ShowInNavigationDrawer(value: boolean) {
        this.Set('ShowInNavigationDrawer', value);
    }

    /**
    * * Field Name: IconCSSClass
    * * Display Name: Icon CSSClass
    * * SQL Data Type: nvarchar(100)
    * * Description: Optional, CSS class for an icon to be displayed with the navigation item
    */
    get IconCSSClass(): string | null {
        return this.Get('IconCSSClass');
    }
    set IconCSSClass(value: string | null) {
        this.Set('IconCSSClass', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the navigation item, shown to the user on hover or in larger displays
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Administrator comments, not shown to the end user in MJ Explorer app
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * File Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: FileCategory
 * * Base View: vwFileCategories
 * * @description Organizes files into categories for classification, access control, and lifecycle management across the file storage system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'File Categories')
export class FileCategoryEntity extends BaseEntity<FileCategoryEntityType> {
    /**
    * Loads the File Categories record from the database
    * @param ID: string - primary key value to load the File Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof FileCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: File Categories (vwFileCategories.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * File Entity Record Links - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: FileEntityRecordLink
 * * Base View: vwFileEntityRecordLinks
 * * @description Associates files with entity records, enabling attachment management and document relationships throughout the system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'File Entity Record Links')
export class FileEntityRecordLinkEntity extends BaseEntity<FileEntityRecordLinkEntityType> {
    /**
    * Loads the File Entity Record Links record from the database
    * @param ID: string - primary key value to load the File Entity Record Links record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof FileEntityRecordLinkEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: FileID
    * * Display Name: File ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Files (vwFiles.ID)
    */
    get FileID(): string {
        return this.Get('FileID');
    }
    set FileID(value: string) {
        this.Set('FileID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(750)
    * * Description: The ID of the entity record this file is attached to.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: File
    * * Display Name: File
    * * SQL Data Type: nvarchar(500)
    */
    get File(): string {
        return this.Get('File');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }
}


/**
 * File Storage Providers - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: FileStorageProvider
 * * Base View: vwFileStorageProviders
 * * @description Configures connections to file storage systems including local, cloud, and network storage with authentication and access rules.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'File Storage Providers')
export class FileStorageProviderEntity extends BaseEntity<FileStorageProviderEntityType> {
    /**
    * Loads the File Storage Providers record from the database
    * @param ID: string - primary key value to load the File Storage Providers record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof FileStorageProviderEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ServerDriverKey
    * * Display Name: Server Driver Key
    * * SQL Data Type: nvarchar(100)
    * * Description: Identifier for the server-side driver implementation for this storage provider.
    */
    get ServerDriverKey(): string {
        return this.Get('ServerDriverKey');
    }
    set ServerDriverKey(value: string) {
        this.Set('ServerDriverKey', value);
    }

    /**
    * * Field Name: ClientDriverKey
    * * Display Name: Client Driver Key
    * * SQL Data Type: nvarchar(100)
    * * Description: Identifier for the client-side driver implementation for this storage provider.
    */
    get ClientDriverKey(): string {
        return this.Get('ClientDriverKey');
    }
    set ClientDriverKey(value: string) {
        this.Set('ClientDriverKey', value);
    }

    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Priority order for selecting storage providers, lower numbers are preferred.
    */
    get Priority(): number {
        return this.Get('Priority');
    }
    set Priority(value: number) {
        this.Set('Priority', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Whether this storage provider is currently available for use.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: SupportsSearch
    * * Display Name: Supports Search
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this storage provider supports native full-text search across file names and content. Providers with native search APIs (Google Drive, SharePoint, Dropbox, Box) have this set to true.
    */
    get SupportsSearch(): boolean {
        return this.Get('SupportsSearch');
    }
    set SupportsSearch(value: boolean) {
        this.Set('SupportsSearch', value);
    }
}


/**
 * Files - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: File
 * * Base View: vwFiles
 * * @description Manages file metadata, storage locations, and access control for all files stored within or referenced by the system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Files')
export class FileEntity extends BaseEntity<FileEntityType> {
    /**
    * Loads the Files record from the database
    * @param ID: string - primary key value to load the Files record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof FileEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(500)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: File Categories (vwFileCategories.ID)
    */
    get CategoryID(): string | null {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string | null) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: ProviderID
    * * Display Name: Provider ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: File Storage Providers (vwFileStorageProviders.ID)
    */
    get ProviderID(): string {
        return this.Get('ProviderID');
    }
    set ProviderID(value: string) {
        this.Set('ProviderID', value);
    }

    /**
    * * Field Name: ContentType
    * * Display Name: Content Type
    * * SQL Data Type: nvarchar(255)
    * * Description: MIME type of the file content (e.g., image/jpeg, application/pdf).
    */
    get ContentType(): string | null {
        return this.Get('ContentType');
    }
    set ContentType(value: string | null) {
        this.Set('ContentType', value);
    }

    /**
    * * Field Name: ProviderKey
    * * Display Name: Provider Key
    * * SQL Data Type: nvarchar(500)
    * * Description: Storage provider-specific identifier or path for this file.
    */
    get ProviderKey(): string | null {
        return this.Get('ProviderKey');
    }
    set ProviderKey(value: string | null) {
        this.Set('ProviderKey', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Description: Pending, Uploading, Uploaded, Deleting, Deleted
    */
    get Status(): string {
        return this.Get('Status');
    }
    set Status(value: string) {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    */
    get Category(): string | null {
        return this.Get('Category');
    }

    /**
    * * Field Name: Provider
    * * Display Name: Provider
    * * SQL Data Type: nvarchar(50)
    */
    get Provider(): string {
        return this.Get('Provider');
    }
}


/**
 * Generated Code Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: GeneratedCodeCategory
 * * Base View: vwGeneratedCodeCategories
 * * @description Categorization for generated code, including optional parent-child relationships.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Generated Code Categories')
export class GeneratedCodeCategoryEntity extends BaseEntity<GeneratedCodeCategoryEntityType> {
    /**
    * Loads the Generated Code Categories record from the database
    * @param ID: string - primary key value to load the Generated Code Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof GeneratedCodeCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Generated Code Categories (vwGeneratedCodeCategories.ID)
    * * Description: Parent category ID, allowing for hierarchical categorization.
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Generated Codes - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: GeneratedCode
 * * Base View: vwGeneratedCodes
 * * @description Stores LLM-generated code snippets, tracking their source, category, and validation status.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Generated Codes')
export class GeneratedCodeEntity extends BaseEntity<GeneratedCodeEntityType> {
    /**
    * Loads the Generated Codes record from the database
    * @param ID: string - primary key value to load the Generated Codes record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof GeneratedCodeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: GeneratedAt
    * * Display Name: Generated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    * * Description: When the code was generated.
    */
    get GeneratedAt(): Date {
        return this.Get('GeneratedAt');
    }
    set GeneratedAt(value: Date) {
        this.Set('GeneratedAt', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Generated Code Categories (vwGeneratedCodeCategories.ID)
    * * Description: Reference to the category of generated code.
    */
    get CategoryID(): string {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: GeneratedByModelID
    * * Display Name: Generated By Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    * * Description: AI model responsible for generating this code.
    */
    get GeneratedByModelID(): string {
        return this.Get('GeneratedByModelID');
    }
    set GeneratedByModelID(value: string) {
        this.Set('GeneratedByModelID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Descriptive name of the generated code.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional description of the generated code.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The actual generated code.
    */
    get Code(): string {
        return this.Get('Code');
    }
    set Code(value: string) {
        this.Set('Code', value);
    }

    /**
    * * Field Name: Source
    * * Display Name: Source
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Source material used to generate the code, e.g., a SQL CHECK constraint.
    */
    get Source(): string {
        return this.Get('Source');
    }
    set Source(value: string) {
        this.Set('Source', value);
    }

    /**
    * * Field Name: LinkedEntityID
    * * Display Name: Linked Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get LinkedEntityID(): string | null {
        return this.Get('LinkedEntityID');
    }
    set LinkedEntityID(value: string | null) {
        this.Set('LinkedEntityID', value);
    }

    /**
    * * Field Name: LinkedRecordPrimaryKey
    * * Display Name: Linked Record Primary Key
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON containing the primary key(s) of the record this generated code is associated with.
    */
    get LinkedRecordPrimaryKey(): string | null {
        return this.Get('LinkedRecordPrimaryKey');
    }
    set LinkedRecordPrimaryKey(value: string | null) {
        this.Set('LinkedRecordPrimaryKey', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
    * * Description: Status of the generated code, e.g., Pending, Approved, or Rejected.
    */
    get Status(): 'Approved' | 'Pending' | 'Rejected' {
        return this.Get('Status');
    }
    set Status(value: 'Approved' | 'Pending' | 'Rejected') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Language
    * * Display Name: Language
    * * SQL Data Type: nvarchar(50)
    * * Default Value: TypeScript
    * * Value List Type: List
    * * Possible Values 
    *   * CSS
    *   * HTML
    *   * JavaScript
    *   * Other
    *   * Python
    *   * SQL
    *   * TypeScript
    * * Description: Programming language of the generated code (TypeScript, SQL, HTML, CSS, JavaScript, Python, or Other).
    */
    get Language(): 'CSS' | 'HTML' | 'JavaScript' | 'Other' | 'Python' | 'SQL' | 'TypeScript' {
        return this.Get('Language');
    }
    set Language(value: 'CSS' | 'HTML' | 'JavaScript' | 'Other' | 'Python' | 'SQL' | 'TypeScript') {
        this.Set('Language', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    */
    get Category(): string {
        return this.Get('Category');
    }

    /**
    * * Field Name: GeneratedByModel
    * * Display Name: Generated By Model
    * * SQL Data Type: nvarchar(50)
    */
    get GeneratedByModel(): string {
        return this.Get('GeneratedByModel');
    }

    /**
    * * Field Name: LinkedEntity
    * * Display Name: Linked Entity
    * * SQL Data Type: nvarchar(255)
    */
    get LinkedEntity(): string | null {
        return this.Get('LinkedEntity');
    }
}


/**
 * Integration URL Formats - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: IntegrationURLFormat
 * * Base View: vwIntegrationURLFormats
 * * @description Used to generate web links for end users to easily access resources in a source system. URL Formats support templating to inject various field values at run-time to take a user directly to a resource in a source system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Integration URL Formats')
export class IntegrationURLFormatEntity extends BaseEntity<IntegrationURLFormatEntityType> {
    /**
    * Loads the Integration URL Formats record from the database
    * @param ID: string - primary key value to load the Integration URL Formats record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof IntegrationURLFormatEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: IntegrationID
    * * Display Name: Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Integrations (vwIntegrations.ID)
    */
    get IntegrationID(): string {
        return this.Get('IntegrationID');
    }
    set IntegrationID(value: string) {
        this.Set('IntegrationID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: URLFormat
    * * SQL Data Type: nvarchar(500)
    * * Description: The URL Format for the given integration including the ability to include markup with fields from the integration
    */
    get URLFormat(): string {
        return this.Get('URLFormat');
    }
    set URLFormat(value: string) {
        this.Set('URLFormat', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Integration
    * * Display Name: Integration
    * * SQL Data Type: nvarchar(100)
    */
    get Integration(): string {
        return this.Get('Integration');
    }

    /**
    * * Field Name: NavigationBaseURL
    * * Display Name: Navigation Base URL
    * * SQL Data Type: nvarchar(500)
    */
    get NavigationBaseURL(): string | null {
        return this.Get('NavigationBaseURL');
    }

    /**
    * * Field Name: FullURLFormat
    * * Display Name: Full URLFormat
    * * SQL Data Type: nvarchar(1000)
    */
    get FullURLFormat(): string | null {
        return this.Get('FullURLFormat');
    }
}


/**
 * Integrations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Integration
 * * Base View: vwIntegrations
 * * @description Catalog of all integrations that have been configured in the system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Integrations')
export class IntegrationEntity extends BaseEntity<IntegrationEntityType> {
    /**
    * Loads the Integrations record from the database
    * @param ID: string - primary key value to load the Integrations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof IntegrationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(255)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: NavigationBaseURL
    * * Display Name: Navigation Base URL
    * * SQL Data Type: nvarchar(500)
    * * Description: Base URL for navigating to records in the external system from MemberJunction.
    */
    get NavigationBaseURL(): string | null {
        return this.Get('NavigationBaseURL');
    }
    set NavigationBaseURL(value: string | null) {
        this.Set('NavigationBaseURL', value);
    }

    /**
    * * Field Name: ClassName
    * * Display Name: Class Name
    * * SQL Data Type: nvarchar(100)
    * * Description: The TypeScript/JavaScript class name implementing this integration.
    */
    get ClassName(): string | null {
        return this.Get('ClassName');
    }
    set ClassName(value: string | null) {
        this.Set('ClassName', value);
    }

    /**
    * * Field Name: ImportPath
    * * Display Name: Import Path
    * * SQL Data Type: nvarchar(100)
    * * Description: Module import path for the integration class in the codebase.
    */
    get ImportPath(): string | null {
        return this.Get('ImportPath');
    }
    set ImportPath(value: string | null) {
        this.Set('ImportPath', value);
    }

    /**
    * * Field Name: BatchMaxRequestCount
    * * Display Name: Batch Max Request Count
    * * SQL Data Type: int
    * * Default Value: -1
    * * Description: Maximum number of API requests to batch together, -1 for no limit.
    */
    get BatchMaxRequestCount(): number {
        return this.Get('BatchMaxRequestCount');
    }
    set BatchMaxRequestCount(value: number) {
        this.Set('BatchMaxRequestCount', value);
    }

    /**
    * * Field Name: BatchRequestWaitTime
    * * Display Name: Batch Request Wait Time
    * * SQL Data Type: int
    * * Default Value: -1
    * * Description: Milliseconds to wait before sending a batch of requests, -1 to disable batching.
    */
    get BatchRequestWaitTime(): number {
        return this.Get('BatchRequestWaitTime');
    }
    set BatchRequestWaitTime(value: number) {
        this.Set('BatchRequestWaitTime', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }
}


/**
 * Libraries - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Library
 * * Base View: vwLibraries
 * * @description Stores information about the available libraries, including a list of classes/functions, type definitions, and sample code. You can add additional custom libraries here to make them avaialable to code generation features within the system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Libraries')
export class LibraryEntity extends BaseEntity<LibraryEntityType> {
    /**
    * Loads the Libraries record from the database
    * @param ID: string - primary key value to load the Libraries record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof LibraryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    * * Description: Status of the library, only libraries marked as Active will be available for use by generated code. If a library was once active but no longer is, existing code that used the library will not be affected.
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: TypeDefinitions
    * * Display Name: Type Definitions
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Code showing the types and functions defined in the library to be used for reference by humans and AI
    */
    get TypeDefinitions(): string | null {
        return this.Get('TypeDefinitions');
    }
    set TypeDefinitions(value: string | null) {
        this.Set('TypeDefinitions', value);
    }

    /**
    * * Field Name: SampleCode
    * * Display Name: Sample Code
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Examples of code use of the classes and/or functions from within the library
    */
    get SampleCode(): string | null {
        return this.Get('SampleCode');
    }
    set SampleCode(value: string | null) {
        this.Set('SampleCode', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Library Items - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: LibraryItem
 * * Base View: vwLibraryItems
 * * @description Table to store individual library items
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Library Items')
export class LibraryItemEntity extends BaseEntity<LibraryItemEntityType> {
    /**
    * Loads the Library Items record from the database
    * @param ID: string - primary key value to load the Library Items record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof LibraryItemEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: LibraryID
    * * Display Name: Library ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Libraries (vwLibraries.ID)
    */
    get LibraryID(): string {
        return this.Get('LibraryID');
    }
    set LibraryID(value: string) {
        this.Set('LibraryID', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Class
    *   * Function
    *   * Interface
    *   * Module
    *   * Type
    *   * Variable
    * * Description: Type of the library item for example Class, Interface, etc.
    */
    get Type(): 'Class' | 'Function' | 'Interface' | 'Module' | 'Type' | 'Variable' {
        return this.Get('Type');
    }
    set Type(value: 'Class' | 'Function' | 'Interface' | 'Module' | 'Type' | 'Variable') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Library
    * * Display Name: Library
    * * SQL Data Type: nvarchar(255)
    */
    get Library(): string {
        return this.Get('Library');
    }
}


/**
 * List Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ListCategory
 * * Base View: vwListCategories
 * * @description Groups lists into categories for organization and navigation, supporting hierarchical categorization of user-created lists.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'List Categories')
export class ListCategoryEntity extends BaseEntity<ListCategoryEntityType> {
    /**
    * Loads the List Categories record from the database
    * @param ID: string - primary key value to load the List Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ListCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: List Categories (vwListCategories.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * List Details - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ListDetail
 * * Base View: vwListDetails
 * * @description Tracks the records within each list.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'List Details')
export class ListDetailEntity extends BaseEntity<ListDetailEntityType> {
    /**
    * Loads the List Details record from the database
    * @param ID: string - primary key value to load the List Details record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ListDetailEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ListID
    * * Display Name: List ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Lists (vwLists.ID)
    */
    get ListID(): string {
        return this.Get('ListID');
    }
    set ListID(value: string) {
        this.Set('ListID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(445)
    * * Description: The ID of the record included in this list.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Order of this record within the list, for maintaining user-defined sorting.
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(30)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Complete
    *   * Disabled
    *   * Error
    *   * Other
    *   * Pending
    *   * Rejected
    * * Description: Tracks the status of each individual list detail row to enable processing of various types and the use of the status column for filtering list detail rows within a list that are in a particular state.
    */
    get Status(): 'Active' | 'Complete' | 'Disabled' | 'Error' | 'Other' | 'Pending' | 'Rejected' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Complete' | 'Disabled' | 'Error' | 'Other' | 'Pending' | 'Rejected') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: AdditionalData
    * * Display Name: Additional Data
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional column that allows for tracking any additional data for each ListDetail row
    */
    get AdditionalData(): string | null {
        return this.Get('AdditionalData');
    }
    set AdditionalData(value: string | null) {
        this.Set('AdditionalData', value);
    }

    /**
    * * Field Name: List
    * * Display Name: List
    * * SQL Data Type: nvarchar(100)
    */
    get List(): string {
        return this.Get('List');
    }
}


/**
 * Lists - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: List
 * * Base View: vwLists
 * * @description Static lists are useful for controlling a set of data for a given entity. These can be used programatically for applications like logging and tracking long-running tasks and also by end users for tracking any particular list of records they want to directly control the set.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Lists')
export class ListEntity extends BaseEntity<ListEntityType> {
    /**
    * Loads the Lists record from the database
    * @param ID: string - primary key value to load the Lists record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ListEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: List Categories (vwListCategories.ID)
    */
    get CategoryID(): string | null {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string | null) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record ID
    * * SQL Data Type: nvarchar(100)
    * * Description: Identifier for this list in an external system, used for synchronization.
    */
    get ExternalSystemRecordID(): string | null {
        return this.Get('ExternalSystemRecordID');
    }
    set ExternalSystemRecordID(value: string | null) {
        this.Set('ExternalSystemRecordID', value);
    }

    /**
    * * Field Name: CompanyIntegrationID
    * * Display Name: Company Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)
    */
    get CompanyIntegrationID(): string | null {
        return this.Get('CompanyIntegrationID');
    }
    set CompanyIntegrationID(value: string | null) {
        this.Set('CompanyIntegrationID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(100)
    */
    get Category(): string | null {
        return this.Get('Category');
    }

    /**
    * * Field Name: CompanyIntegration
    * * Display Name: Company Integration
    * * SQL Data Type: nvarchar(255)
    */
    get CompanyIntegration(): string | null {
        return this.Get('CompanyIntegration');
    }
}


/**
 * MJ: Access Control Rules - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AccessControlRule
 * * Base View: vwAccessControlRules
 * * @description Generic ACL-style permission system that can control access to any entity record in the system with granular CRUD permissions.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Access Control Rules')
export class AccessControlRuleEntity extends BaseEntity<AccessControlRuleEntityType> {
    /**
    * Loads the MJ: Access Control Rules record from the database
    * @param ID: string - primary key value to load the MJ: Access Control Rules record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AccessControlRuleEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(500)
    * * Description: Primary key value(s) of the record being protected - scalar for simple PKs or JSON for composite PKs
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: GranteeType
    * * Display Name: Grantee Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Everyone
    *   * Public
    *   * Role
    *   * User
    * * Description: Type of grantee receiving permission (User, Role, Everyone, Public). "Everyone" means all authenticated users whereas "Public" means any authenticated OR anonymous user.
    */
    get GranteeType(): 'Everyone' | 'Public' | 'Role' | 'User' {
        return this.Get('GranteeType');
    }
    set GranteeType(value: 'Everyone' | 'Public' | 'Role' | 'User') {
        this.Set('GranteeType', value);
    }

    /**
    * * Field Name: GranteeID
    * * Display Name: Grantee ID
    * * SQL Data Type: uniqueidentifier
    */
    get GranteeID(): string | null {
        return this.Get('GranteeID');
    }
    set GranteeID(value: string | null) {
        this.Set('GranteeID', value);
    }

    /**
    * * Field Name: CanRead
    * * Display Name: Can Read
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Permission to read/view the record
    */
    get CanRead(): boolean {
        return this.Get('CanRead');
    }
    set CanRead(value: boolean) {
        this.Set('CanRead', value);
    }

    /**
    * * Field Name: CanCreate
    * * Display Name: Can Create
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Permission to create new related records
    */
    get CanCreate(): boolean {
        return this.Get('CanCreate');
    }
    set CanCreate(value: boolean) {
        this.Set('CanCreate', value);
    }

    /**
    * * Field Name: CanUpdate
    * * Display Name: Can Update
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Permission to update/modify the record
    */
    get CanUpdate(): boolean {
        return this.Get('CanUpdate');
    }
    set CanUpdate(value: boolean) {
        this.Set('CanUpdate', value);
    }

    /**
    * * Field Name: CanDelete
    * * Display Name: Can Delete
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Permission to delete the record
    */
    get CanDelete(): boolean {
        return this.Get('CanDelete');
    }
    set CanDelete(value: boolean) {
        this.Set('CanDelete', value);
    }

    /**
    * * Field Name: CanShare
    * * Display Name: Can Share
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Permission to share/grant permissions to other users
    */
    get CanShare(): boolean {
        return this.Get('CanShare');
    }
    set CanShare(value: boolean) {
        this.Set('CanShare', value);
    }

    /**
    * * Field Name: ExpiresAt
    * * Display Name: Expires At
    * * SQL Data Type: datetimeoffset
    * * Description: Optional expiration date/time for this access rule
    */
    get ExpiresAt(): Date | null {
        return this.Get('ExpiresAt');
    }
    set ExpiresAt(value: Date | null) {
        this.Set('ExpiresAt', value);
    }

    /**
    * * Field Name: GrantedByUserID
    * * Display Name: Granted By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get GrantedByUserID(): string {
        return this.Get('GrantedByUserID');
    }
    set GrantedByUserID(value: string) {
        this.Set('GrantedByUserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: GrantedByUser
    * * Display Name: Granted By User
    * * SQL Data Type: nvarchar(100)
    */
    get GrantedByUser(): string {
        return this.Get('GrantedByUser');
    }
}


/**
 * MJ: AI Agent Artifact Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentArtifactType
 * * Base View: vwAIAgentArtifactTypes
 * * @description Junction table linking AI Agents to the artifact types they can produce. An agent can produce zero to many artifact types.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Artifact Types')
export class AIAgentArtifactTypeEntity extends BaseEntity<AIAgentArtifactTypeEntityType> {
    /**
    * Loads the MJ: AI Agent Artifact Types record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Artifact Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentArtifactTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: AI Agent that can produce this artifact type
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: ArtifactTypeID
    * * Display Name: Artifact Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)
    * * Description: Artifact type that this agent can produce
    */
    get ArtifactTypeID(): string {
        return this.Get('ArtifactTypeID');
    }
    set ArtifactTypeID(value: string) {
        this.Set('ArtifactTypeID', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: Optional sequence for ordering multiple artifact types for an agent
    */
    get Sequence(): number | null {
        return this.Get('Sequence');
    }
    set Sequence(value: number | null) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: ArtifactType
    * * Display Name: Artifact Type
    * * SQL Data Type: nvarchar(100)
    */
    get ArtifactType(): string {
        return this.Get('ArtifactType');
    }
}


/**
 * MJ: AI Agent Data Sources - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentDataSource
 * * Base View: vwAIAgentDataSources
 * * @description Defines data sources that should be preloaded into the data parameter before agent execution. Supports both RunView and RunQuery sources with configurable caching.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Data Sources')
export class AIAgentDataSourceEntity extends BaseEntity<AIAgentDataSourceEntityType> {
    /**
    * Loads the MJ: AI Agent Data Sources record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Data Sources record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentDataSourceEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Agent Data Sources entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that if the cache policy is set to 'PerAgent', a cache timeout value must be provided. For other cache policies, providing a cache timeout is optional.
    * * Table-Level: This rule makes sure that if the source type is 'RunView', the entity name must be provided. If the source type is anything else, the entity name can be left blank.
    * * Table-Level: This rule ensures that when the Source Type is set to 'RunQuery', a Query Name must be provided. If Source Type is anything other than 'RunQuery', Query Name is optional.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateCacheTimeoutSecondsRequiredForPerAgentPolicy(result);
        this.ValidateEntityNameRequiredWhenSourceTypeRunView(result);
        this.ValidateQueryNameRequiredWhenSourceTypeIsRunQuery(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if the cache policy is set to 'PerAgent', a cache timeout value must be provided. For other cache policies, providing a cache timeout is optional.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCacheTimeoutSecondsRequiredForPerAgentPolicy(result: ValidationResult) {
    	if (this.CachePolicy === "PerAgent" && this.CacheTimeoutSeconds == null) {
    		result.Errors.push(new ValidationErrorInfo("CacheTimeoutSeconds", "When the cache policy is set to 'PerAgent', you must specify a cache timeout value.", this.CacheTimeoutSeconds, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule makes sure that if the source type is 'RunView', the entity name must be provided. If the source type is anything else, the entity name can be left blank.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateEntityNameRequiredWhenSourceTypeRunView(result: ValidationResult) {
    	if (this.SourceType === "RunView" && this.EntityName == null) {
    		result.Errors.push(new ValidationErrorInfo("EntityName", "EntityName is required when SourceType is 'RunView'.", this.EntityName, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that when the Source Type is set to 'RunQuery', a Query Name must be provided. If Source Type is anything other than 'RunQuery', Query Name is optional.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateQueryNameRequiredWhenSourceTypeIsRunQuery(result: ValidationResult) {
    	if (this.SourceType === "RunQuery" && this.QueryName == null) {
    		result.Errors.push(new ValidationErrorInfo("QueryName", "The query name must be provided when Source Type is 'RunQuery'.", this.QueryName, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Variable name for the data in the data parameter (e.g., "ALL_ENTITIES"). Must be unique within an agent.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of what this data source provides
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: SourceType
    * * Display Name: Source Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: RunView
    * * Value List Type: List
    * * Possible Values 
    *   * RunQuery
    *   * RunView
    * * Description: Type of data source: RunView or RunQuery. Determines which parameters are used.
    */
    get SourceType(): 'RunQuery' | 'RunView' {
        return this.Get('SourceType');
    }
    set SourceType(value: 'RunQuery' | 'RunView') {
        this.Set('SourceType', value);
    }

    /**
    * * Field Name: EntityName
    * * Display Name: Entity Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Entity name for RunView data sources (e.g., "Entities", "AI Models")
    */
    get EntityName(): string | null {
        return this.Get('EntityName');
    }
    set EntityName(value: string | null) {
        this.Set('EntityName', value);
    }

    /**
    * * Field Name: ExtraFilter
    * * Display Name: Extra Filter
    * * SQL Data Type: nvarchar(MAX)
    * * Description: SQL WHERE clause filter for RunView data sources
    */
    get ExtraFilter(): string | null {
        return this.Get('ExtraFilter');
    }
    set ExtraFilter(value: string | null) {
        this.Set('ExtraFilter', value);
    }

    /**
    * * Field Name: OrderBy
    * * Display Name: Order By
    * * SQL Data Type: nvarchar(500)
    * * Description: SQL ORDER BY clause for RunView data sources
    */
    get OrderBy(): string | null {
        return this.Get('OrderBy');
    }
    set OrderBy(value: string | null) {
        this.Set('OrderBy', value);
    }

    /**
    * * Field Name: FieldsToRetrieve
    * * Display Name: Fields To Retrieve
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of field names to return for RunView data sources (e.g., ["ID", "Name", "Description"])
    */
    get FieldsToRetrieve(): string | null {
        return this.Get('FieldsToRetrieve');
    }
    set FieldsToRetrieve(value: string | null) {
        this.Set('FieldsToRetrieve', value);
    }

    /**
    * * Field Name: ResultType
    * * Display Name: Result Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: simple
    * * Value List Type: List
    * * Possible Values 
    *   * entity_object
    *   * simple
    * * Description: Result type for RunView: simple (default) or entity_object
    */
    get ResultType(): 'entity_object' | 'simple' | null {
        return this.Get('ResultType');
    }
    set ResultType(value: 'entity_object' | 'simple' | null) {
        this.Set('ResultType', value);
    }

    /**
    * * Field Name: QueryName
    * * Display Name: Query Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Query name for RunQuery data sources
    */
    get QueryName(): string | null {
        return this.Get('QueryName');
    }
    set QueryName(value: string | null) {
        this.Set('QueryName', value);
    }

    /**
    * * Field Name: CategoryPath
    * * Display Name: Category Path
    * * SQL Data Type: nvarchar(500)
    * * Description: Category path for RunQuery data sources (e.g., "/MJ/AI/Agents/")
    */
    get CategoryPath(): string | null {
        return this.Get('CategoryPath');
    }
    set CategoryPath(value: string | null) {
        this.Set('CategoryPath', value);
    }

    /**
    * * Field Name: Parameters
    * * Display Name: Parameters
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON object of parameters for RunQuery data sources (e.g., {"organizationId": "123"})
    */
    get Parameters(): string | null {
        return this.Get('Parameters');
    }
    set Parameters(value: string | null) {
        this.Set('Parameters', value);
    }

    /**
    * * Field Name: MaxRows
    * * Display Name: Max Rows
    * * SQL Data Type: int
    * * Description: Maximum number of rows to return. Applies to both RunView and RunQuery.
    */
    get MaxRows(): number | null {
        return this.Get('MaxRows');
    }
    set MaxRows(value: number | null) {
        this.Set('MaxRows', value);
    }

    /**
    * * Field Name: ExecutionOrder
    * * Display Name: Execution Order
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Execution order when multiple data sources are defined for an agent (lower numbers execute first)
    */
    get ExecutionOrder(): number {
        return this.Get('ExecutionOrder');
    }
    set ExecutionOrder(value: number) {
        this.Set('ExecutionOrder', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    * * Description: Status of the data source: Active or Disabled
    */
    get Status(): 'Active' | 'Disabled' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: CachePolicy
    * * Display Name: Cache Policy
    * * SQL Data Type: nvarchar(20)
    * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * None
    *   * PerAgent
    *   * PerRun
    * * Description: Cache policy: None (no caching), PerRun (cache for duration of agent run), PerAgent (cache across runs with timeout)
    */
    get CachePolicy(): 'None' | 'PerAgent' | 'PerRun' {
        return this.Get('CachePolicy');
    }
    set CachePolicy(value: 'None' | 'PerAgent' | 'PerRun') {
        this.Set('CachePolicy', value);
    }

    /**
    * * Field Name: CacheTimeoutSeconds
    * * Display Name: Cache Timeout Seconds
    * * SQL Data Type: int
    * * Description: Time-to-live in seconds for PerAgent cache policy. Ignored for other cache policies.
    */
    get CacheTimeoutSeconds(): number | null {
        return this.Get('CacheTimeoutSeconds');
    }
    set CacheTimeoutSeconds(value: number | null) {
        this.Set('CacheTimeoutSeconds', value);
    }

    /**
    * * Field Name: DestinationType
    * * Display Name: Destination Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Data
    * * Value List Type: List
    * * Possible Values 
    *   * Context
    *   * Data
    *   * Payload
    * * Description: Destination for the preloaded data: Data (for Nunjucks templates in prompts), Context (for actions only), or Payload (for agent state)
    */
    get DestinationType(): 'Context' | 'Data' | 'Payload' {
        return this.Get('DestinationType');
    }
    set DestinationType(value: 'Context' | 'Data' | 'Payload') {
        this.Set('DestinationType', value);
    }

    /**
    * * Field Name: DestinationPath
    * * Display Name: Destination Path
    * * SQL Data Type: nvarchar(500)
    * * Description: Path within the destination where data should be injected. Supports nested paths using dot notation (e.g., "config.api.endpoints", "analysis.orders.recent"). If null, uses Name as root-level key.
    */
    get DestinationPath(): string | null {
        return this.Get('DestinationPath');
    }
    set DestinationPath(value: string | null) {
        this.Set('DestinationPath', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }
}


/**
 * MJ: AI Agent Examples - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentExample
 * * Base View: vwAIAgentExamples
 * * @description Stores example input/output pairs for AI agents to learn from successful interactions. Examples are always agent-specific and support optional user/company scoping for personalized examples.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Examples')
export class AIAgentExampleEntity extends BaseEntity<AIAgentExampleEntityType> {
    /**
    * Loads the MJ: AI Agent Examples record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Examples record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentExampleEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: The AI agent this example is associated with. Examples are always agent-specific.
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: Optional user scope. When populated, this example is specific to this user.
    */
    get UserID(): string | null {
        return this.Get('UserID');
    }
    set UserID(value: string | null) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: CompanyID
    * * Display Name: Company ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Companies (vwCompanies.ID)
    * * Description: Optional company scope. When populated, this example is specific to this company.
    */
    get CompanyID(): string | null {
        return this.Get('CompanyID');
    }
    set CompanyID(value: string | null) {
        this.Set('CompanyID', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Example
    * * Value List Type: List
    * * Possible Values 
    *   * Constraint
    *   * Context
    *   * Example
    *   * Issue
    *   * Preference
    * * Description: Quick categorization of the example: Preference (demonstrates user preference), Constraint (shows constraint compliance), Context (provides contextual example), Example (typical successful interaction - most common), or Issue (demonstrates handling of known issue).
    */
    get Type(): 'Constraint' | 'Context' | 'Example' | 'Issue' | 'Preference' {
        return this.Get('Type');
    }
    set Type(value: 'Constraint' | 'Context' | 'Example' | 'Issue' | 'Preference') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: ExampleInput
    * * Display Name: Example Input
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The input text or prompt that was provided in this example interaction.
    */
    get ExampleInput(): string {
        return this.Get('ExampleInput');
    }
    set ExampleInput(value: string) {
        this.Set('ExampleInput', value);
    }

    /**
    * * Field Name: ExampleOutput
    * * Display Name: Example Output
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The successful output or response that the agent provided for this example.
    */
    get ExampleOutput(): string {
        return this.Get('ExampleOutput');
    }
    set ExampleOutput(value: string) {
        this.Set('ExampleOutput', value);
    }

    /**
    * * Field Name: IsAutoGenerated
    * * Display Name: Is Auto Generated
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this example was automatically captured (1) or manually created (0).
    */
    get IsAutoGenerated(): boolean {
        return this.Get('IsAutoGenerated');
    }
    set IsAutoGenerated(value: boolean) {
        this.Set('IsAutoGenerated', value);
    }

    /**
    * * Field Name: SourceConversationID
    * * Display Name: Source Conversation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
    * * Description: Optional reference to the conversation where this example originated.
    */
    get SourceConversationID(): string | null {
        return this.Get('SourceConversationID');
    }
    set SourceConversationID(value: string | null) {
        this.Set('SourceConversationID', value);
    }

    /**
    * * Field Name: SourceConversationDetailID
    * * Display Name: Source Conversation Detail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
    * * Description: Optional reference to the specific conversation message that represents this example.
    */
    get SourceConversationDetailID(): string | null {
        return this.Get('SourceConversationDetailID');
    }
    set SourceConversationDetailID(value: string | null) {
        this.Set('SourceConversationDetailID', value);
    }

    /**
    * * Field Name: SourceAIAgentRunID
    * * Display Name: Source AI Agent Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
    * * Description: Optional reference to the AI agent run that generated this example.
    */
    get SourceAIAgentRunID(): string | null {
        return this.Get('SourceAIAgentRunID');
    }
    set SourceAIAgentRunID(value: string | null) {
        this.Set('SourceAIAgentRunID', value);
    }

    /**
    * * Field Name: SuccessScore
    * * Display Name: Success Score
    * * SQL Data Type: decimal(5, 2)
    * * Description: Optional success score (0-100) indicating the quality or effectiveness of this example based on user feedback or metrics.
    */
    get SuccessScore(): number | null {
        return this.Get('SuccessScore');
    }
    set SuccessScore(value: number | null) {
        this.Set('SuccessScore', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Internal comments about this example, not included in agent context injection.
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked
    * * Description: Status of the example: Pending (awaiting review), Active (in use), or Revoked (disabled).
    */
    get Status(): 'Active' | 'Pending' | 'Revoked' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Pending' | 'Revoked') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string | null {
        return this.Get('User');
    }

    /**
    * * Field Name: Company
    * * Display Name: Company
    * * SQL Data Type: nvarchar(50)
    */
    get Company(): string | null {
        return this.Get('Company');
    }

    /**
    * * Field Name: SourceConversation
    * * Display Name: Source Conversation
    * * SQL Data Type: nvarchar(255)
    */
    get SourceConversation(): string | null {
        return this.Get('SourceConversation');
    }
}


/**
 * MJ: AI Agent Permissions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentPermission
 * * Base View: vwAIAgentPermissions
 * * @description Defines access control permissions for AI agents using an ACL (Access Control List) model. Permissions can be granted to individual users or roles.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Permissions')
export class AIAgentPermissionEntity extends BaseEntity<AIAgentPermissionEntityType> {
    /**
    * Loads the MJ: AI Agent Permissions record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Permissions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentPermissionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Agent Permissions entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that either a Role or a User is specified, but not both at the same time. You must provide one or the other, but never both, and neither can be left blank at the same time.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateRoleIDAndUserIDExclusive(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that either a Role or a User is specified, but not both at the same time. You must provide one or the other, but never both, and neither can be left blank at the same time.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateRoleIDAndUserIDExclusive(result: ValidationResult) {
    	const hasRole = this.RoleID !== null;
    	const hasUser = this.UserID !== null;
    	if ((hasRole && hasUser) || (!hasRole && !hasUser)) {
    		result.Errors.push(new ValidationErrorInfo(
    			"RoleID/UserID",
    			"You must specify either a Role or a User, but not both and not neither.",
    			`RoleID: $${this.RoleID}, UserID: $${this.UserID}`,
    			ValidationErrorType.Failure
    		));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    * * Description: The role this permission is granted to. Either RoleID or UserID must be specified, but not both.
    */
    get RoleID(): string | null {
        return this.Get('RoleID');
    }
    set RoleID(value: string | null) {
        this.Set('RoleID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: The user this permission is granted to. Either RoleID or UserID must be specified, but not both.
    */
    get UserID(): string | null {
        return this.Get('UserID');
    }
    set UserID(value: string | null) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: CanView
    * * Display Name: Can View
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Grants permission to view the agent configuration and details.
    */
    get CanView(): boolean {
        return this.Get('CanView');
    }
    set CanView(value: boolean) {
        this.Set('CanView', value);
    }

    /**
    * * Field Name: CanRun
    * * Display Name: Can Run
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Grants permission to execute/run the agent. Typically implies CanView as well.
    */
    get CanRun(): boolean {
        return this.Get('CanRun');
    }
    set CanRun(value: boolean) {
        this.Set('CanRun', value);
    }

    /**
    * * Field Name: CanEdit
    * * Display Name: Can Edit
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Grants permission to modify the agent configuration, prompts, and settings. Typically implies CanView and CanRun as well.
    */
    get CanEdit(): boolean {
        return this.Get('CanEdit');
    }
    set CanEdit(value: boolean) {
        this.Set('CanEdit', value);
    }

    /**
    * * Field Name: CanDelete
    * * Display Name: Can Delete
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Grants permission to delete the agent. Typically implies all other permissions as well.
    */
    get CanDelete(): boolean {
        return this.Get('CanDelete');
    }
    set CanDelete(value: boolean) {
        this.Set('CanDelete', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional comments explaining why this permission was granted or any special notes.
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(50)
    */
    get Role(): string | null {
        return this.Get('Role');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string | null {
        return this.Get('User');
    }
}


/**
 * MJ: AI Agent Prompts - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentPrompt
 * * Base View: vwAIAgentPrompts
 * * @description Links AI agents with the prompts they use, including execution order and context handling.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Prompts')
export class AIAgentPromptEntity extends BaseEntity<AIAgentPromptEntityType> {
    /**
    * Loads the MJ: AI Agent Prompts record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Prompts record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentPromptEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Agent Prompts entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that if the context behavior is set to 'InitialMessages' or 'RecentMessages', then a value for context message count must be provided. For any other context behavior, the context message count may be left empty.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateContextMessageCountForSelectedBehaviors(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if the context behavior is set to 'InitialMessages' or 'RecentMessages', then a value for context message count must be provided. For any other context behavior, the context message count may be left empty.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateContextMessageCountForSelectedBehaviors(result: ValidationResult) {
    	if ((this.ContextBehavior === "InitialMessages" || this.ContextBehavior === "RecentMessages") && this.ContextMessageCount == null) {
    		result.Errors.push(new ValidationErrorInfo("ContextMessageCount", "When ContextBehavior is 'InitialMessages' or 'RecentMessages', ContextMessageCount must be provided.", this.ContextMessageCount, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: References the agent this prompt is associated with.
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: PromptID
    * * Display Name: Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: References the prompt to be used by the agent.
    */
    get PromptID(): string {
        return this.Get('PromptID');
    }
    set PromptID(value: string) {
        this.Set('PromptID', value);
    }

    /**
    * * Field Name: Purpose
    * * Display Name: Purpose
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The functional purpose of this prompt within the agent, such as "Initialize", "ProcessData", or "Summarize".
    */
    get Purpose(): string | null {
        return this.Get('Purpose');
    }
    set Purpose(value: string | null) {
        this.Set('Purpose', value);
    }

    /**
    * * Field Name: ExecutionOrder
    * * Display Name: Execution Order
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: The sequence order in which this prompt should be executed within the agent's workflow.
    */
    get ExecutionOrder(): number {
        return this.Get('ExecutionOrder');
    }
    set ExecutionOrder(value: number) {
        this.Set('ExecutionOrder', value);
    }

    /**
    * * Field Name: ConfigurationID
    * * Display Name: Configuration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
    * * Description: Optional reference to a specific configuration to use for this prompt. If NULL, uses the default configuration.
    */
    get ConfigurationID(): string | null {
        return this.Get('ConfigurationID');
    }
    set ConfigurationID(value: string | null) {
        this.Set('ConfigurationID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
    * * Description: The current status of this agent-prompt mapping. Values include Active, Inactive, Deprecated, and Preview.
    */
    get Status(): 'Active' | 'Deprecated' | 'Inactive' | 'Preview' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Deprecated' | 'Inactive' | 'Preview') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: ContextBehavior
    * * Display Name: Context Behavior
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Complete
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Custom
    *   * InitialMessages
    *   * None
    *   * RecentMessages
    *   * Smart
    * * Description: Determines how conversation context is filtered for this prompt: Complete, Smart, None, RecentMessages, InitialMessages, or Custom.
    */
    get ContextBehavior(): 'Complete' | 'Custom' | 'InitialMessages' | 'None' | 'RecentMessages' | 'Smart' {
        return this.Get('ContextBehavior');
    }
    set ContextBehavior(value: 'Complete' | 'Custom' | 'InitialMessages' | 'None' | 'RecentMessages' | 'Smart') {
        this.Set('ContextBehavior', value);
    }

    /**
    * * Field Name: ContextMessageCount
    * * Display Name: Context Message Count
    * * SQL Data Type: int
    * * Description: The number of messages to include when ContextBehavior is set to RecentMessages or InitialMessages.
    */
    get ContextMessageCount(): number | null {
        return this.Get('ContextMessageCount');
    }
    set ContextMessageCount(value: number | null) {
        this.Set('ContextMessageCount', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: Prompt
    * * Display Name: Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get Prompt(): string {
        return this.Get('Prompt');
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(100)
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }
}


/**
 * MJ: AI Agent Relationships - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentRelationship
 * * Base View: vwAIAgentRelationships
 * * @description Tracks relationships between AI agents for sub-agent orchestration
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Relationships')
export class AIAgentRelationshipEntity extends BaseEntity<AIAgentRelationshipEntityType> {
    /**
    * Loads the MJ: AI Agent Relationships record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Relationships record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentRelationshipEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Primary key for AI agent relationships
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: Foreign key to parent AIAgent that can invoke the sub-agent
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: SubAgentID
    * * Display Name: Sub Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: Foreign key to sub-agent AIAgent that can be invoked
    */
    get SubAgentID(): string {
        return this.Get('SubAgentID');
    }
    set SubAgentID(value: string) {
        this.Set('SubAgentID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Pending
    *   * Revoked
    * * Description: Status of the relationship: Pending (awaiting approval), Active (can invoke), or Revoked (no longer allowed)
    */
    get Status(): 'Active' | 'Pending' | 'Revoked' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Pending' | 'Revoked') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: SubAgentOutputMapping
    * * Display Name: Sub Agent Output Mapping
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration mapping sub-agent result payload paths to parent agent payload paths. Enables controlled merging of sub-agent results. Format: {"subAgentPath": "parentPath", "*": "captureAllPath"}. If null, sub-agent results are not automatically merged into parent payload.
    */
    get SubAgentOutputMapping(): string | null {
        return this.Get('SubAgentOutputMapping');
    }
    set SubAgentOutputMapping(value: string | null) {
        this.Set('SubAgentOutputMapping', value);
    }

    /**
    * * Field Name: SubAgentInputMapping
    * * Display Name: Sub Agent Input Mapping
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON mapping of parent payload paths to sub-agent initial payload paths. Enables structural data transfer from parent to related sub-agent. Format: {"parentPath": "subAgentPath", "parent.nested": "subAgent.field"}. Example: {"searchQuery": "query", "maxResults": "limit"}. If null, sub-agent starts with empty payload (default behavior).
    */
    get SubAgentInputMapping(): string | null {
        return this.Get('SubAgentInputMapping');
    }
    set SubAgentInputMapping(value: string | null) {
        this.Set('SubAgentInputMapping', value);
    }

    /**
    * * Field Name: SubAgentContextPaths
    * * Display Name: Sub Agent Context Paths
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of parent payload paths to send as LLM context to related sub-agent. Sub-agent receives this data in a formatted context message before its task message. Format: ["path1", "path2.nested", "path3.*", "*"]. Use "*" to send entire parent payload. Example: ["userPreferences", "priorFindings.summary", "sources[*]"]. If null, no parent context is sent (default behavior).
    */
    get SubAgentContextPaths(): string | null {
        return this.Get('SubAgentContextPaths');
    }
    set SubAgentContextPaths(value: string | null) {
        this.Set('SubAgentContextPaths', value);
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: SubAgent
    * * Display Name: Sub Agent
    * * SQL Data Type: nvarchar(255)
    */
    get SubAgent(): string | null {
        return this.Get('SubAgent');
    }
}


/**
 * MJ: AI Agent Run Steps - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentRunStep
 * * Base View: vwAIAgentRunSteps
 * * @description Provides basic, step-by-step tracking of agent execution. Each step represents a discrete action within an agent run, such as prompt execution, tool usage, decision making, or sub-agent coordination.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Run Steps')
export class AIAgentRunStepEntity extends BaseEntity<AIAgentRunStepEntityType> {
    /**
    * Loads the MJ: AI Agent Run Steps record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Run Steps record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentRunStepEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Agent Run Steps entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * StepNumber: This rule ensures that the step number must be greater than zero.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateStepNumberGreaterThanZero(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the step number must be greater than zero.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateStepNumberGreaterThanZero(result: ValidationResult) {
    	if (this.StepNumber <= 0) {
    		result.Errors.push(new ValidationErrorInfo("StepNumber", "Step number must be greater than zero.", this.StepNumber, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Unique identifier for this execution step
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentRunID
    * * Display Name: Agent Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
    * * Description: Reference to the parent AIAgentRun that contains this step
    */
    get AgentRunID(): string {
        return this.Get('AgentRunID');
    }
    set AgentRunID(value: string) {
        this.Set('AgentRunID', value);
    }

    /**
    * * Field Name: StepNumber
    * * Display Name: Step Number
    * * SQL Data Type: int
    * * Description: Sequential number of this step within the agent run, starting from 1
    */
    get StepNumber(): number {
        return this.Get('StepNumber');
    }
    set StepNumber(value: number) {
        this.Set('StepNumber', value);
    }

    /**
    * * Field Name: StepType
    * * Display Name: Step Type
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Prompt
    * * Value List Type: List
    * * Possible Values 
    *   * Actions
    *   * Chat
    *   * Decision
    *   * ForEach
    *   * Prompt
    *   * Sub-Agent
    *   * Validation
    *   * While
    * * Description: Type of execution step: Prompt, Actions, Sub-Agent, Decision, Chat, Validation
    */
    get StepType(): 'Actions' | 'Chat' | 'Decision' | 'ForEach' | 'Prompt' | 'Sub-Agent' | 'Validation' | 'While' {
        return this.Get('StepType');
    }
    set StepType(value: 'Actions' | 'Chat' | 'Decision' | 'ForEach' | 'Prompt' | 'Sub-Agent' | 'Validation' | 'While') {
        this.Set('StepType', value);
    }

    /**
    * * Field Name: StepName
    * * Display Name: Step Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Human-readable name of what this step accomplishes
    */
    get StepName(): string {
        return this.Get('StepName');
    }
    set StepName(value: string) {
        this.Set('StepName', value);
    }

    /**
    * * Field Name: TargetID
    * * Display Name: Target ID
    * * SQL Data Type: uniqueidentifier
    * * Description: ID of the specific target being executed (AIPrompt.ID, AIAction.ID, AIAgent.ID, etc.). NULL for steps that don't target a specific entity.
    */
    get TargetID(): string | null {
        return this.Get('TargetID');
    }
    set TargetID(value: string | null) {
        this.Set('TargetID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Running
    * * Value List Type: List
    * * Possible Values 
    *   * Cancelled
    *   * Completed
    *   * Failed
    *   * Running
    * * Description: Current execution status of this step: Running, Completed, Failed, Cancelled
    */
    get Status(): 'Cancelled' | 'Completed' | 'Failed' | 'Running' {
        return this.Get('Status');
    }
    set Status(value: 'Cancelled' | 'Completed' | 'Failed' | 'Running') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetimeoffset
    * * Default Value: sysdatetimeoffset()
    * * Description: Timestamp when this step began execution
    */
    get StartedAt(): Date {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: CompletedAt
    * * Display Name: Completed At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp when this step completed. NULL while still running.
    */
    get CompletedAt(): Date | null {
        return this.Get('CompletedAt');
    }
    set CompletedAt(value: Date | null) {
        this.Set('CompletedAt', value);
    }

    /**
    * * Field Name: Success
    * * Display Name: Success
    * * SQL Data Type: bit
    * * Description: Whether this step completed successfully. NULL while running, TRUE/FALSE when completed.
    */
    get Success(): boolean | null {
        return this.Get('Success');
    }
    set Success(value: boolean | null) {
        this.Set('Success', value);
    }

    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Error message if this step failed. NULL for successful steps.
    */
    get ErrorMessage(): string | null {
        return this.Get('ErrorMessage');
    }
    set ErrorMessage(value: string | null) {
        this.Set('ErrorMessage', value);
    }

    /**
    * * Field Name: InputData
    * * Display Name: Input Data
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON serialization of input data passed to this step for execution
    */
    get InputData(): string | null {
        return this.Get('InputData');
    }
    set InputData(value: string | null) {
        this.Set('InputData', value);
    }

    /**
    * * Field Name: OutputData
    * * Display Name: Output Data
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON serialization of the output data produced by this step
    */
    get OutputData(): string | null {
        return this.Get('OutputData');
    }
    set OutputData(value: string | null) {
        this.Set('OutputData', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: TargetLogID
    * * Display Name: Target Log ID
    * * SQL Data Type: uniqueidentifier
    * * Description: ID of the execution log/run record created for this step (ActionExecutionLog.ID for action steps, AIAgentRun.ID for subagent steps, AIPromptRun.ID for prompt steps)
    */
    get TargetLogID(): string | null {
        return this.Get('TargetLogID');
    }
    set TargetLogID(value: string | null) {
        this.Set('TargetLogID', value);
    }

    /**
    * * Field Name: PayloadAtStart
    * * Display Name: Payload At Start
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON serialization of the Payload state at the start of this step
    */
    get PayloadAtStart(): string | null {
        return this.Get('PayloadAtStart');
    }
    set PayloadAtStart(value: string | null) {
        this.Set('PayloadAtStart', value);
    }

    /**
    * * Field Name: PayloadAtEnd
    * * Display Name: Payload At End
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON serialization of the Payload state at the end of this step
    */
    get PayloadAtEnd(): string | null {
        return this.Get('PayloadAtEnd');
    }
    set PayloadAtEnd(value: string | null) {
        this.Set('PayloadAtEnd', value);
    }

    /**
    * * Field Name: FinalPayloadValidationResult
    * * Display Name: Final Payload Validation Result
    * * SQL Data Type: nvarchar(25)
    * * Value List Type: List
    * * Possible Values 
    *   * Fail
    *   * Fail
    *   * Pass
    *   * Pass
    *   * Retry
    *   * Retry
    *   * Warn
    *   * Warn
    * * Description: Result of the final payload validation for this step. Pass indicates successful
validation, Retry means validation failed but will retry, Fail means validation failed
permanently, Warn means validation failed but execution continues.
    */
    get FinalPayloadValidationResult(): 'Fail' | 'Fail' | 'Pass' | 'Pass' | 'Retry' | 'Retry' | 'Warn' | 'Warn' | null {
        return this.Get('FinalPayloadValidationResult');
    }
    set FinalPayloadValidationResult(value: 'Fail' | 'Fail' | 'Pass' | 'Pass' | 'Retry' | 'Retry' | 'Warn' | 'Warn' | null) {
        this.Set('FinalPayloadValidationResult', value);
    }

    /**
    * * Field Name: FinalPayloadValidationMessages
    * * Display Name: Final Payload Validation Messages
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Validation error messages or warnings from final payload validation. Contains
detailed information about what validation rules failed.
    */
    get FinalPayloadValidationMessages(): string | null {
        return this.Get('FinalPayloadValidationMessages');
    }
    set FinalPayloadValidationMessages(value: string | null) {
        this.Set('FinalPayloadValidationMessages', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Run Steps (vwAIAgentRunSteps.ID)
    * * Description: Optional reference to parent step for tracking hierarchical relationships like code->test->fix->code cycles
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Human-readable notes and comments about this agent run step
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * MJ: AI Agent Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentRun
 * * Base View: vwAIAgentRuns
 * * @description Tracks individual execution runs of AI agents, including hierarchical sub-agent runs. Provides basic logging, state persistence, and resource tracking for agent executions. Supports pause/resume functionality through state serialization.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Runs')
export class AIAgentRunEntity extends BaseEntity<AIAgentRunEntityType> {
    /**
    * Loads the MJ: AI Agent Runs record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Agent Runs entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * EffortLevel: This rule ensures that the effort level, if specified, must be a number between 1 and 100, inclusive.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateEffortLevelBetween1And100(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the effort level, if specified, must be a number between 1 and 100, inclusive.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateEffortLevelBetween1And100(result: ValidationResult) {
    	if (this.EffortLevel != null && (this.EffortLevel < 1 || this.EffortLevel > 100)) {
    		result.Errors.push(new ValidationErrorInfo("EffortLevel", "Effort level must be between 1 and 100.", this.EffortLevel, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Unique identifier for this agent run
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: Reference to the AIAgent that is being executed in this run
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: ParentRunID
    * * Display Name: Parent Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
    * * Description: Reference to the parent agent run if this is a sub-agent execution. NULL for root-level agent runs. Enables hierarchical execution tracking.
    */
    get ParentRunID(): string | null {
        return this.Get('ParentRunID');
    }
    set ParentRunID(value: string | null) {
        this.Set('ParentRunID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Running
    * * Value List Type: List
    * * Possible Values 
    *   * Cancelled
    *   * Completed
    *   * Failed
    *   * Paused
    *   * Running
    * * Description: Current status of the agent run. Running -> Completed/Failed/Cancelled
    */
    get Status(): 'Cancelled' | 'Completed' | 'Failed' | 'Paused' | 'Running' {
        return this.Get('Status');
    }
    set Status(value: 'Cancelled' | 'Completed' | 'Failed' | 'Paused' | 'Running') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetimeoffset
    * * Default Value: sysdatetimeoffset()
    * * Description: Timestamp when the agent run began execution
    */
    get StartedAt(): Date {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: CompletedAt
    * * Display Name: Completed At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp when the agent run completed (successfully or with failure). NULL while running.
    */
    get CompletedAt(): Date | null {
        return this.Get('CompletedAt');
    }
    set CompletedAt(value: Date | null) {
        this.Set('CompletedAt', value);
    }

    /**
    * * Field Name: Success
    * * Display Name: Success
    * * SQL Data Type: bit
    * * Description: Indicates whether the agent run completed successfully. NULL while running, TRUE/FALSE when completed.
    */
    get Success(): boolean | null {
        return this.Get('Success');
    }
    set Success(value: boolean | null) {
        this.Set('Success', value);
    }

    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Error message if the agent run failed. NULL for successful runs.
    */
    get ErrorMessage(): string | null {
        return this.Get('ErrorMessage');
    }
    set ErrorMessage(value: string | null) {
        this.Set('ErrorMessage', value);
    }

    /**
    * * Field Name: ConversationID
    * * Display Name: Conversation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
    * * Description: Identifier linking multiple agent runs that are part of the same conversation or user session
    */
    get ConversationID(): string | null {
        return this.Get('ConversationID');
    }
    set ConversationID(value: string | null) {
        this.Set('ConversationID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: User context identifier for authentication and permissions during the agent run
    */
    get UserID(): string | null {
        return this.Get('UserID');
    }
    set UserID(value: string | null) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: Result
    * * Display Name: Result
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Final result or output from the agent execution, stored as JSON or text
    */
    get Result(): string | null {
        return this.Get('Result');
    }
    set Result(value: string | null) {
        this.Set('Result', value);
    }

    /**
    * * Field Name: AgentState
    * * Display Name: Agent State
    * * 
    * * @deprecated This field is deprecated and will be removed in a future version. Using it will result in console warnings.SQL Data Type: nvarchar(MAX)
    * * Description: JSON serialization of the complete agent state, including conversation context, variables, and execution state. Enables pause/resume functionality.
    */
    get AgentState(): string | null {
        return this.Get('AgentState');
    }
    set AgentState(value: string | null) {
        this.Set('AgentState', value);
    }

    /**
    * * Field Name: TotalTokensUsed
    * * Display Name: Total Tokens Used
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Total number of tokens consumed by all LLM calls during this agent run
    */
    get TotalTokensUsed(): number | null {
        return this.Get('TotalTokensUsed');
    }
    set TotalTokensUsed(value: number | null) {
        this.Set('TotalTokensUsed', value);
    }

    /**
    * * Field Name: TotalCost
    * * Display Name: Total Cost
    * * SQL Data Type: decimal(18, 6)
    * * Default Value: 0.000000
    * * Description: Total estimated cost for all AI model usage during this agent run
    */
    get TotalCost(): number | null {
        return this.Get('TotalCost');
    }
    set TotalCost(value: number | null) {
        this.Set('TotalCost', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: TotalPromptTokensUsed
    * * Display Name: Total Prompt Tokens Used
    * * SQL Data Type: int
    * * Description: Total number of prompt/input tokens used across all AIPromptRun executions during this agent run. This provides a breakdown of the TotalTokensUsed field to help analyze the ratio of input vs output tokens consumed by the agent.
    */
    get TotalPromptTokensUsed(): number | null {
        return this.Get('TotalPromptTokensUsed');
    }
    set TotalPromptTokensUsed(value: number | null) {
        this.Set('TotalPromptTokensUsed', value);
    }

    /**
    * * Field Name: TotalCompletionTokensUsed
    * * Display Name: Total Completion Tokens Used
    * * SQL Data Type: int
    * * Description: Total number of completion/output tokens generated across all AIPromptRun executions during this agent run. This provides a breakdown of the TotalTokensUsed field to help analyze the ratio of input vs output tokens consumed by the agent.
    */
    get TotalCompletionTokensUsed(): number | null {
        return this.Get('TotalCompletionTokensUsed');
    }
    set TotalCompletionTokensUsed(value: number | null) {
        this.Set('TotalCompletionTokensUsed', value);
    }

    /**
    * * Field Name: TotalTokensUsedRollup
    * * Display Name: Total Tokens Used Rollup
    * * SQL Data Type: int
    * * Description: Total tokens used including this agent run and all sub-agent runs. For leaf agents (no sub-agents), this equals TotalTokensUsed. For parent agents, this includes the sum of all descendant agent tokens. Calculated as TotalPromptTokensUsedRollup + TotalCompletionTokensUsedRollup.
    */
    get TotalTokensUsedRollup(): number | null {
        return this.Get('TotalTokensUsedRollup');
    }
    set TotalTokensUsedRollup(value: number | null) {
        this.Set('TotalTokensUsedRollup', value);
    }

    /**
    * * Field Name: TotalPromptTokensUsedRollup
    * * Display Name: Total Prompt Tokens Used Rollup
    * * SQL Data Type: int
    * * Description: Total prompt/input tokens including this agent run and all sub-agent runs. For leaf agents (no sub-agents), this equals TotalPromptTokensUsed. For parent agents, this includes the sum of all descendant agent prompt tokens.
    */
    get TotalPromptTokensUsedRollup(): number | null {
        return this.Get('TotalPromptTokensUsedRollup');
    }
    set TotalPromptTokensUsedRollup(value: number | null) {
        this.Set('TotalPromptTokensUsedRollup', value);
    }

    /**
    * * Field Name: TotalCompletionTokensUsedRollup
    * * Display Name: Total Completion Tokens Used Rollup
    * * SQL Data Type: int
    * * Description: Total completion/output tokens including this agent run and all sub-agent runs. For leaf agents (no sub-agents), this equals TotalCompletionTokensUsed. For parent agents, this includes the sum of all descendant agent completion tokens.
    */
    get TotalCompletionTokensUsedRollup(): number | null {
        return this.Get('TotalCompletionTokensUsedRollup');
    }
    set TotalCompletionTokensUsedRollup(value: number | null) {
        this.Set('TotalCompletionTokensUsedRollup', value);
    }

    /**
    * * Field Name: TotalCostRollup
    * * Display Name: Total Cost Rollup
    * * SQL Data Type: decimal(19, 8)
    * * Description: Total cost including this agent run and all sub-agent runs. For leaf agents (no sub-agents), this equals TotalCost. For parent agents, this includes the sum of all descendant agent costs. Note: This assumes all costs are in the same currency for accurate rollup.
    */
    get TotalCostRollup(): number | null {
        return this.Get('TotalCostRollup');
    }
    set TotalCostRollup(value: number | null) {
        this.Set('TotalCostRollup', value);
    }

    /**
    * * Field Name: ConversationDetailID
    * * Display Name: Conversation Detail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
    * * Description: Optional tracking of a specific conversation detail (e.g. a specific message) that spawned this agent run
    */
    get ConversationDetailID(): string | null {
        return this.Get('ConversationDetailID');
    }
    set ConversationDetailID(value: string | null) {
        this.Set('ConversationDetailID', value);
    }

    /**
    * * Field Name: ConversationDetailSequence
    * * Display Name: Conversation Detail Sequence
    * * SQL Data Type: int
    * * Description: If a conversation detail spawned multiple agent runs, tracks the order of their spawn/execution
    */
    get ConversationDetailSequence(): number | null {
        return this.Get('ConversationDetailSequence');
    }
    set ConversationDetailSequence(value: number | null) {
        this.Set('ConversationDetailSequence', value);
    }

    /**
    * * Field Name: CancellationReason
    * * Display Name: Cancellation Reason
    * * SQL Data Type: nvarchar(30)
    * * Value List Type: List
    * * Possible Values 
    *   * System
    *   * Timeout
    *   * User Request
    * * Description: Reason for cancellation if the agent run was cancelled
    */
    get CancellationReason(): 'System' | 'Timeout' | 'User Request' | null {
        return this.Get('CancellationReason');
    }
    set CancellationReason(value: 'System' | 'Timeout' | 'User Request' | null) {
        this.Set('CancellationReason', value);
    }

    /**
    * * Field Name: FinalStep
    * * Display Name: Final Step
    * * SQL Data Type: nvarchar(30)
    * * Value List Type: List
    * * Possible Values 
    *   * Actions
    *   * Chat
    *   * Failed
    *   * ForEach
    *   * Retry
    *   * Sub-Agent
    *   * Success
    *   * While
    * * Description: The final step type that concluded the agent run
    */
    get FinalStep(): 'Actions' | 'Chat' | 'Failed' | 'ForEach' | 'Retry' | 'Sub-Agent' | 'Success' | 'While' | null {
        return this.Get('FinalStep');
    }
    set FinalStep(value: 'Actions' | 'Chat' | 'Failed' | 'ForEach' | 'Retry' | 'Sub-Agent' | 'Success' | 'While' | null) {
        this.Set('FinalStep', value);
    }

    /**
    * * Field Name: FinalPayload
    * * Display Name: Final Payload
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON serialization of the final Payload state at the end of the agent run
    */
    get FinalPayload(): string | null {
        return this.Get('FinalPayload');
    }
    set FinalPayload(value: string | null) {
        this.Set('FinalPayload', value);
    }

    /**
    * * Field Name: Message
    * * Display Name: Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Final message from the agent to the end user at the end of a run
    */
    get Message(): string | null {
        return this.Get('Message');
    }
    set Message(value: string | null) {
        this.Set('Message', value);
    }

    /**
    * * Field Name: LastRunID
    * * Display Name: Last Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
    * * Description: Links to the previous run in a chain. Different from ParentRunID which is for sub-agent hierarchy.
    */
    get LastRunID(): string | null {
        return this.Get('LastRunID');
    }
    set LastRunID(value: string | null) {
        this.Set('LastRunID', value);
    }

    /**
    * * Field Name: StartingPayload
    * * Display Name: Starting Payload
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The initial payload provided at the start of this run. Can be populated from the FinalPayload of the LastRun.
    */
    get StartingPayload(): string | null {
        return this.Get('StartingPayload');
    }
    set StartingPayload(value: string | null) {
        this.Set('StartingPayload', value);
    }

    /**
    * * Field Name: TotalPromptIterations
    * * Display Name: Total Prompt Iterations
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Total number of prompt iterations executed during this agent run. Incremented
each time the agent processes a prompt step.
    */
    get TotalPromptIterations(): number {
        return this.Get('TotalPromptIterations');
    }
    set TotalPromptIterations(value: number) {
        this.Set('TotalPromptIterations', value);
    }

    /**
    * * Field Name: ConfigurationID
    * * Display Name: Configuration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
    * * Description: The AI Configuration used for this agent execution. When set, this configuration was used for all prompts executed by this agent and its sub-agents.
    */
    get ConfigurationID(): string | null {
        return this.Get('ConfigurationID');
    }
    set ConfigurationID(value: string | null) {
        this.Set('ConfigurationID', value);
    }

    /**
    * * Field Name: OverrideModelID
    * * Display Name: Override Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    * * Description: Runtime model override that was used for this execution. When set, this model took precedence over all other model selection methods.
    */
    get OverrideModelID(): string | null {
        return this.Get('OverrideModelID');
    }
    set OverrideModelID(value: string | null) {
        this.Set('OverrideModelID', value);
    }

    /**
    * * Field Name: OverrideVendorID
    * * Display Name: Override Vendor ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
    * * Description: Runtime vendor override that was used for this execution. When set along with OverrideModelID, this vendor was used to provide the model.
    */
    get OverrideVendorID(): string | null {
        return this.Get('OverrideVendorID');
    }
    set OverrideVendorID(value: string | null) {
        this.Set('OverrideVendorID', value);
    }

    /**
    * * Field Name: Data
    * * Display Name: Data
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON serialized data that was passed for template rendering and prompt execution. This data was passed to the agent's prompt as well as all sub-agents.
    */
    get Data(): string | null {
        return this.Get('Data');
    }
    set Data(value: string | null) {
        this.Set('Data', value);
    }

    /**
    * * Field Name: Verbose
    * * Display Name: Verbose
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether verbose logging was enabled during this agent execution. When true, detailed decision-making and execution flow was logged.
    */
    get Verbose(): boolean | null {
        return this.Get('Verbose');
    }
    set Verbose(value: boolean | null) {
        this.Set('Verbose', value);
    }

    /**
    * * Field Name: EffortLevel
    * * Display Name: Effort Level
    * * SQL Data Type: int
    * * Description: Effort level that was actually used during this agent run execution (1-100, where 1=minimal effort, 100=maximum effort). This is the resolved effort level after applying the precedence hierarchy: runtime override > agent default > prompt defaults.
    */
    get EffortLevel(): number | null {
        return this.Get('EffortLevel');
    }
    set EffortLevel(value: number | null) {
        this.Set('EffortLevel', value);
    }

    /**
    * * Field Name: RunName
    * * Display Name: Run Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Optional name for the agent run to help identify and tag runs for easier reference
    */
    get RunName(): string | null {
        return this.Get('RunName');
    }
    set RunName(value: string | null) {
        this.Set('RunName', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Human-readable notes and comments about this agent run
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: ScheduledJobRunID
    * * Display Name: Scheduled Job Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Scheduled Job Runs (vwScheduledJobRuns.ID)
    * * Description: Links to the scheduled job run that triggered this agent execution. NULL for manually-triggered agent runs. Enables tracking which scheduled jobs spawned which agent executions.
    */
    get ScheduledJobRunID(): string | null {
        return this.Get('ScheduledJobRunID');
    }
    set ScheduledJobRunID(value: string | null) {
        this.Set('ScheduledJobRunID', value);
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: Conversation
    * * Display Name: Conversation
    * * SQL Data Type: nvarchar(255)
    */
    get Conversation(): string | null {
        return this.Get('Conversation');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string | null {
        return this.Get('User');
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(100)
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }

    /**
    * * Field Name: OverrideModel
    * * Display Name: Override Model
    * * SQL Data Type: nvarchar(50)
    */
    get OverrideModel(): string | null {
        return this.Get('OverrideModel');
    }

    /**
    * * Field Name: OverrideVendor
    * * Display Name: Override Vendor
    * * SQL Data Type: nvarchar(50)
    */
    get OverrideVendor(): string | null {
        return this.Get('OverrideVendor');
    }

    /**
    * * Field Name: RootParentRunID
    * * Display Name: Root Parent Run ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentRunID(): string | null {
        return this.Get('RootParentRunID');
    }

    /**
    * * Field Name: RootLastRunID
    * * Display Name: Root Last Run ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootLastRunID(): string | null {
        return this.Get('RootLastRunID');
    }
}


/**
 * MJ: AI Agent Step Paths - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentStepPath
 * * Base View: vwAIAgentStepPaths
 * * @description Defines paths (edges) between steps in a flow-based AI agent execution graph
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Step Paths')
export class AIAgentStepPathEntity extends BaseEntity<AIAgentStepPathEntityType> {
    /**
    * Loads the MJ: AI Agent Step Paths record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Step Paths record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentStepPathEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Agent Step Paths entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that the origin step and the destination step must be different. They cannot be the same step.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateOriginStepIDAgainstDestinationStepIDDifferent(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the origin step and the destination step must be different. They cannot be the same step.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateOriginStepIDAgainstDestinationStepIDDifferent(result: ValidationResult) {
    	if (this.OriginStepID === this.DestinationStepID) {
    		result.Errors.push(new ValidationErrorInfo("OriginStepID", "The origin step cannot be the same as the destination step.", this.OriginStepID, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: OriginStepID
    * * Display Name: Origin Step ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Steps (vwAIAgentSteps.ID)
    */
    get OriginStepID(): string {
        return this.Get('OriginStepID');
    }
    set OriginStepID(value: string) {
        this.Set('OriginStepID', value);
    }

    /**
    * * Field Name: DestinationStepID
    * * Display Name: Destination Step ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Steps (vwAIAgentSteps.ID)
    */
    get DestinationStepID(): string {
        return this.Get('DestinationStepID');
    }
    set DestinationStepID(value: string) {
        this.Set('DestinationStepID', value);
    }

    /**
    * * Field Name: Condition
    * * Display Name: Condition
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Boolean expression to evaluate. If null, path is always taken. Evaluated against payload and step results.
    */
    get Condition(): string | null {
        return this.Get('Condition');
    }
    set Condition(value: string | null) {
        this.Set('Condition', value);
    }

    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Path evaluation priority. Higher values are evaluated first. Use 0 or negative values for default/fallback paths that execute when no other conditions match.
    */
    get Priority(): number {
        return this.Get('Priority');
    }
    set Priority(value: number) {
        this.Set('Priority', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(255)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: PathPoints
    * * Display Name: Path Points
    * * SQL Data Type: nvarchar(MAX)
    */
    get PathPoints(): string | null {
        return this.Get('PathPoints');
    }
    set PathPoints(value: string | null) {
        this.Set('PathPoints', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: OriginStep
    * * Display Name: Origin Step
    * * SQL Data Type: nvarchar(255)
    */
    get OriginStep(): string {
        return this.Get('OriginStep');
    }

    /**
    * * Field Name: DestinationStep
    * * Display Name: Destination Step
    * * SQL Data Type: nvarchar(255)
    */
    get DestinationStep(): string {
        return this.Get('DestinationStep');
    }
}


/**
 * MJ: AI Agent Steps - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentStep
 * * Base View: vwAIAgentSteps
 * * @description Defines individual steps (nodes) in a flow-based AI agent execution graph
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Steps')
export class AIAgentStepEntity extends BaseEntity<AIAgentStepEntityType> {
    /**
    * Loads the MJ: AI Agent Steps record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Steps record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentStepEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Agent Steps entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * RetryCount: This rule ensures that the number of retries allowed cannot be negative.
    * * TimeoutSeconds: This rule ensures that, if provided, the timeout value must be greater than zero seconds.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateRetryCountNonNegative(result);
        this.ValidateTimeoutSecondsGreaterThanZero(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the number of retries allowed cannot be negative.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateRetryCountNonNegative(result: ValidationResult) {
    	if (this.RetryCount < 0) {
    		result.Errors.push(new ValidationErrorInfo("RetryCount", "Retry count cannot be negative.", this.RetryCount, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that, if provided, the timeout value must be greater than zero seconds.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateTimeoutSecondsGreaterThanZero(result: ValidationResult) {
    	if (this.TimeoutSeconds != null && this.TimeoutSeconds <= 0) {
    		result.Errors.push(new ValidationErrorInfo("TimeoutSeconds", "TimeoutSeconds must be greater than zero if specified.", this.TimeoutSeconds, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    */
    get AgentID(): string {
        return this.Get('AgentID');
    }
    set AgentID(value: string) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: StepType
    * * Display Name: Step Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Action
    *   * ForEach
    *   * Prompt
    *   * Sub-Agent
    *   * While
    * * Description: Type of step: Action (execute an action), Sub-Agent (delegate to another agent), or Prompt (run an AI prompt)
    */
    get StepType(): 'Action' | 'ForEach' | 'Prompt' | 'Sub-Agent' | 'While' {
        return this.Get('StepType');
    }
    set StepType(value: 'Action' | 'ForEach' | 'Prompt' | 'Sub-Agent' | 'While') {
        this.Set('StepType', value);
    }

    /**
    * * Field Name: StartingStep
    * * Display Name: Starting Step
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If true, this step is executed when the agent starts
    */
    get StartingStep(): boolean {
        return this.Get('StartingStep');
    }
    set StartingStep(value: boolean) {
        this.Set('StartingStep', value);
    }

    /**
    * * Field Name: TimeoutSeconds
    * * Display Name: Timeout Seconds
    * * SQL Data Type: int
    * * Default Value: 600
    */
    get TimeoutSeconds(): number | null {
        return this.Get('TimeoutSeconds');
    }
    set TimeoutSeconds(value: number | null) {
        this.Set('TimeoutSeconds', value);
    }

    /**
    * * Field Name: RetryCount
    * * Display Name: Retry Count
    * * SQL Data Type: int
    * * Default Value: 0
    */
    get RetryCount(): number {
        return this.Get('RetryCount');
    }
    set RetryCount(value: number) {
        this.Set('RetryCount', value);
    }

    /**
    * * Field Name: OnErrorBehavior
    * * Display Name: On Error Behavior
    * * SQL Data Type: nvarchar(20)
    * * Default Value: fail
    * * Value List Type: List
    * * Possible Values 
    *   * continue
    *   * fail
    *   * retry
    */
    get OnErrorBehavior(): 'continue' | 'fail' | 'retry' {
        return this.Get('OnErrorBehavior');
    }
    set OnErrorBehavior(value: 'continue' | 'fail' | 'retry') {
        this.Set('OnErrorBehavior', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    get ActionID(): string | null {
        return this.Get('ActionID');
    }
    set ActionID(value: string | null) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: SubAgentID
    * * Display Name: Sub Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    */
    get SubAgentID(): string | null {
        return this.Get('SubAgentID');
    }
    set SubAgentID(value: string | null) {
        this.Set('SubAgentID', value);
    }

    /**
    * * Field Name: PromptID
    * * Display Name: Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    */
    get PromptID(): string | null {
        return this.Get('PromptID');
    }
    set PromptID(value: string | null) {
        this.Set('PromptID', value);
    }

    /**
    * * Field Name: ActionOutputMapping
    * * Display Name: Action Output Mapping
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration for mapping action output parameters to payload paths. Example: {"outputParam1": "payload.customer.status", "*": "payload.lastResult"}
    */
    get ActionOutputMapping(): string | null {
        return this.Get('ActionOutputMapping');
    }
    set ActionOutputMapping(value: string | null) {
        this.Set('ActionOutputMapping', value);
    }

    /**
    * * Field Name: PositionX
    * * Display Name: Position X
    * * SQL Data Type: int
    * * Default Value: 0
    */
    get PositionX(): number {
        return this.Get('PositionX');
    }
    set PositionX(value: number) {
        this.Set('PositionX', value);
    }

    /**
    * * Field Name: PositionY
    * * Display Name: Position Y
    * * SQL Data Type: int
    * * Default Value: 0
    */
    get PositionY(): number {
        return this.Get('PositionY');
    }
    set PositionY(value: number) {
        this.Set('PositionY', value);
    }

    /**
    * * Field Name: Width
    * * Display Name: Width
    * * SQL Data Type: int
    * * Default Value: 200
    */
    get Width(): number {
        return this.Get('Width');
    }
    set Width(value: number) {
        this.Set('Width', value);
    }

    /**
    * * Field Name: Height
    * * Display Name: Height
    * * SQL Data Type: int
    * * Default Value: 80
    */
    get Height(): number {
        return this.Get('Height');
    }
    set Height(value: number) {
        this.Set('Height', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Pending
    * * Description: Controls whether this step is executed. Active=normal execution, Pending=skip but may activate later, Disabled=never execute
    */
    get Status(): 'Active' | 'Disabled' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: ActionInputMapping
    * * Display Name: Action Input Mapping
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration for mapping static values or payload paths to action input parameters. Example: {"param1": "staticValue", "param2": "payload.dynamicValue"}
    */
    get ActionInputMapping(): string | null {
        return this.Get('ActionInputMapping');
    }
    set ActionInputMapping(value: string | null) {
        this.Set('ActionInputMapping', value);
    }

    /**
    * * Field Name: LoopBodyType
    * * Display Name: Loop Body Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Action
    *   * Prompt
    *   * Sub-Agent
    * * Description: Specifies what type of operation executes in the loop body. Values: Action, Sub-Agent, Prompt. Only used when StepType is ForEach or While.
    */
    get LoopBodyType(): 'Action' | 'Prompt' | 'Sub-Agent' | null {
        return this.Get('LoopBodyType');
    }
    set LoopBodyType(value: 'Action' | 'Prompt' | 'Sub-Agent' | null) {
        this.Set('LoopBodyType', value);
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration object for step-specific settings. For loop steps: { type: "ForEach"|"While", collectionPath?, itemVariable?, indexVariable?, maxIterations?, continueOnError?, condition? }. For other step types: reserved for future use.
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }
    set Configuration(value: string | null) {
        this.Set('Configuration', value);
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string | null {
        return this.Get('Action');
    }

    /**
    * * Field Name: SubAgent
    * * Display Name: Sub Agent
    * * SQL Data Type: nvarchar(255)
    */
    get SubAgent(): string | null {
        return this.Get('SubAgent');
    }

    /**
    * * Field Name: Prompt
    * * Display Name: Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get Prompt(): string | null {
        return this.Get('Prompt');
    }
}


/**
 * MJ: AI Agent Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIAgentType
 * * Base View: vwAIAgentTypes
 * * @description Defines types of AI agents with their system prompts and behavioral characteristics. Each agent type represents a category of agents that share common system-level instructions and capabilities.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Agent Types')
export class AIAgentTypeEntity extends BaseEntity<AIAgentTypeEntityType> {
    /**
    * Loads the MJ: AI Agent Types record from the database
    * @param ID: string - primary key value to load the MJ: AI Agent Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIAgentTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Unique identifier for the agent type
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    * * Description: Unique name of the agent type (e.g., "Base", "CustomerSupport", "DataAnalysis"). Used for programmatic identification and factory instantiation.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the agent type, its purpose, and typical use cases
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: SystemPromptID
    * * Display Name: System Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: Reference to the AI Prompt that contains the system-level instructions for all agents of this type. This prompt will be blended with individual agent prompts.
    */
    get SystemPromptID(): string | null {
        return this.Get('SystemPromptID');
    }
    set SystemPromptID(value: string | null) {
        this.Set('SystemPromptID', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether this agent type is available for use. Inactive types cannot be assigned to new agents.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: AgentPromptPlaceholder
    * * Display Name: Agent Prompt Placeholder
    * * SQL Data Type: nvarchar(255)
    * * Description: The placeholder name used in the system prompt template where the agent prompt result should be injected. For example, if the system prompt contains "{{ agentPrompt }}", this field should contain "agentPrompt". This enables proper hierarchical prompt execution where the agent type's system prompt acts as the parent and the agent's specific prompt acts as the child.
    */
    get AgentPromptPlaceholder(): string | null {
        return this.Get('AgentPromptPlaceholder');
    }
    set AgentPromptPlaceholder(value: string | null) {
        this.Set('AgentPromptPlaceholder', value);
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(255)
    * * Description: The class name used by the MemberJunction class factory to instantiate the specific agent type implementation. For example, "LoopAgentType" for a looping agent pattern. If not specified, defaults to using the agent type Name for the DriverClass lookup key.
    */
    get DriverClass(): string | null {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string | null) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: UIFormSectionKey
    * * Display Name: UI Form Section Key
    * * SQL Data Type: nvarchar(500)
    * * Description: Optional Angular component key name for a subclass of BaseFormSectionComponent that provides a custom form section for this agent type. When specified, this component will be dynamically loaded and displayed as the first expandable section in the AI Agent form. This allows agent types to have specialized UI elements. The class must be registered with the MemberJunction class factory via @RegisterClass
    */
    get UIFormSectionKey(): string | null {
        return this.Get('UIFormSectionKey');
    }
    set UIFormSectionKey(value: string | null) {
        this.Set('UIFormSectionKey', value);
    }

    /**
    * * Field Name: UIFormKey
    * * Display Name: UI Form Key
    * * SQL Data Type: nvarchar(500)
    * * Description: Optional Angular component key name for a subclass of BaseFormComponent that will completely overrides the default AI Agent form for this agent type. When specified, this component will be used instead of the standard AI Agent form, allowing for completely custom form implementations. The class must be registered with the MemberJunction class factory via @RegisterClass. If both UIFormClass and UIFormSectionClass are specified, UIFormClass takes precedence.
    */
    get UIFormKey(): string | null {
        return this.Get('UIFormKey');
    }
    set UIFormKey(value: string | null) {
        this.Set('UIFormKey', value);
    }

    /**
    * * Field Name: UIFormSectionExpandedByDefault
    * * Display Name: UI Form Section Expanded By Default
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Determines whether the custom form section (specified by UIFormSectionClass) should be expanded by default when the AI Agent form loads. True means the section starts expanded, False means it starts collapsed. Only applies when UIFormSectionClass is specified. Defaults to 1 (expanded).
    */
    get UIFormSectionExpandedByDefault(): boolean {
        return this.Get('UIFormSectionExpandedByDefault');
    }
    set UIFormSectionExpandedByDefault(value: boolean) {
        this.Set('UIFormSectionExpandedByDefault', value);
    }

    /**
    * * Field Name: SystemPrompt
    * * Display Name: System Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get SystemPrompt(): string | null {
        return this.Get('SystemPrompt');
    }
}


/**
 * MJ: AI Configuration Params - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIConfigurationParam
 * * Base View: vwAIConfigurationParams
 * * @description Stores configuration parameters that can be referenced by prompts and used to control execution behavior.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Configuration Params')
export class AIConfigurationParamEntity extends BaseEntity<AIConfigurationParamEntityType> {
    /**
    * Loads the MJ: AI Configuration Params record from the database
    * @param ID: string - primary key value to load the MJ: AI Configuration Params record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIConfigurationParamEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ConfigurationID
    * * Display Name: Configuration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
    */
    get ConfigurationID(): string {
        return this.Get('ConfigurationID');
    }
    set ConfigurationID(value: string) {
        this.Set('ConfigurationID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    * * Description: The name of the configuration parameter.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: string
    * * Value List Type: List
    * * Possible Values 
    *   * boolean
    *   * date
    *   * number
    *   * object
    *   * string
    * * Description: The data type of the parameter (string, number, boolean, date, object).
    */
    get Type(): 'boolean' | 'date' | 'number' | 'object' | 'string' {
        return this.Get('Type');
    }
    set Type(value: 'boolean' | 'date' | 'number' | 'object' | 'string') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The value of the parameter, stored as a string but interpreted according to the Type.
    */
    get Value(): string {
        return this.Get('Value');
    }
    set Value(value: string) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the parameter and its usage.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(100)
    */
    get Configuration(): string {
        return this.Get('Configuration');
    }
}


/**
 * MJ: AI Configurations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIConfiguration
 * * Base View: vwAIConfigurations
 * * @description Stores configurations for AI prompt execution environments and settings.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Configurations')
export class AIConfigurationEntity extends BaseEntity<AIConfigurationEntityType> {
    /**
    * Loads the MJ: AI Configurations record from the database
    * @param ID: string - primary key value to load the MJ: AI Configurations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIConfigurationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    * * Description: The name of the configuration.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the configuration.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: IsDefault
    * * Display Name: Is Default
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this is the default configuration to use when none is specified.
    */
    get IsDefault(): boolean {
        return this.Get('IsDefault');
    }
    set IsDefault(value: boolean) {
        this.Set('IsDefault', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
    * * Description: The current status of the configuration. Values include Active, Inactive, Deprecated, and Preview.
    */
    get Status(): 'Active' | 'Deprecated' | 'Inactive' | 'Preview' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Deprecated' | 'Inactive' | 'Preview') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: DefaultPromptForContextCompressionID
    * * Display Name: Default Prompt For Context Compression ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: Default prompt to use for context compression when not specified at the agent level.
    */
    get DefaultPromptForContextCompressionID(): string | null {
        return this.Get('DefaultPromptForContextCompressionID');
    }
    set DefaultPromptForContextCompressionID(value: string | null) {
        this.Set('DefaultPromptForContextCompressionID', value);
    }

    /**
    * * Field Name: DefaultPromptForContextSummarizationID
    * * Display Name: Default Prompt For Context Summarization ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: Default prompt to use for context summarization when not specified at the agent level.
    */
    get DefaultPromptForContextSummarizationID(): string | null {
        return this.Get('DefaultPromptForContextSummarizationID');
    }
    set DefaultPromptForContextSummarizationID(value: string | null) {
        this.Set('DefaultPromptForContextSummarizationID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: DefaultPromptForContextCompression
    * * Display Name: Default Prompt For Context Compression
    * * SQL Data Type: nvarchar(255)
    */
    get DefaultPromptForContextCompression(): string | null {
        return this.Get('DefaultPromptForContextCompression');
    }

    /**
    * * Field Name: DefaultPromptForContextSummarization
    * * Display Name: Default Prompt For Context Summarization
    * * SQL Data Type: nvarchar(255)
    */
    get DefaultPromptForContextSummarization(): string | null {
        return this.Get('DefaultPromptForContextSummarization');
    }
}


/**
 * MJ: AI Model Costs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIModelCost
 * * Base View: vwAIModelCosts
 * * @description Stores historical and current pricing information for AI models across different vendors, with optional temporal tracking and support for different processing types
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Model Costs')
export class AIModelCostEntity extends BaseEntity<AIModelCostEntityType> {
    /**
    * Loads the MJ: AI Model Costs record from the database
    * @param ID: string - primary key value to load the MJ: AI Model Costs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIModelCostEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Model Costs entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Currency: This rule ensures that the currency code is exactly 3 characters long and consists only of uppercase letters.
    * * InputPricePerUnit: This rule ensures that the input price per unit cannot be negative. The value must be zero or higher.
    * * OutputPricePerUnit: This rule ensures that the output price per unit must be zero or greater. In other words, negative prices are not allowed for the output price per unit.
    * * Table-Level: This rule ensures that if both a start date and an end date are provided, the end date must be later than the start date. If either date is missing, no validation is enforced.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateCurrencyIsThreeUppercaseLetters(result);
        this.ValidateInputPricePerUnitIsNonNegative(result);
        this.ValidateOutputPricePerUnitNonNegative(result);
        this.ValidateEndedAtAfterStartedAt(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the currency code is exactly 3 characters long and consists only of uppercase letters.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCurrencyIsThreeUppercaseLetters(result: ValidationResult) {
    	if (this.Currency.length !== 3) {
    		result.Errors.push(new ValidationErrorInfo("Currency", "Currency code must be exactly 3 characters long.", this.Currency, ValidationErrorType.Failure));
    	} else if (this.Currency !== this.Currency.toUpperCase()) {
    		result.Errors.push(new ValidationErrorInfo("Currency", "Currency code must be in uppercase letters.", this.Currency, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that the input price per unit cannot be negative. The value must be zero or higher.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateInputPricePerUnitIsNonNegative(result: ValidationResult) {
    	if (this.InputPricePerUnit < 0) {
    		result.Errors.push(new ValidationErrorInfo("InputPricePerUnit", "The input price per unit cannot be negative.", this.InputPricePerUnit, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that the output price per unit must be zero or greater. In other words, negative prices are not allowed for the output price per unit.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateOutputPricePerUnitNonNegative(result: ValidationResult) {
    	if (this.OutputPricePerUnit < 0) {
    		result.Errors.push(new ValidationErrorInfo("OutputPricePerUnit", "The output price per unit cannot be negative.", this.OutputPricePerUnit, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if both a start date and an end date are provided, the end date must be later than the start date. If either date is missing, no validation is enforced.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateEndedAtAfterStartedAt(result: ValidationResult) {
    	if (this.EndedAt !== null && this.StartedAt !== null && this.EndedAt <= this.StartedAt) {
    		result.Errors.push(new ValidationErrorInfo("EndedAt", "When both an end date and a start date are set, the end date must be later than the start date.", this.EndedAt, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ModelID
    * * Display Name: Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    get ModelID(): string {
        return this.Get('ModelID');
    }
    set ModelID(value: string) {
        this.Set('ModelID', value);
    }

    /**
    * * Field Name: VendorID
    * * Display Name: Vendor ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
    */
    get VendorID(): string {
        return this.Get('VendorID');
    }
    set VendorID(value: string) {
        this.Set('VendorID', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetimeoffset
    * * Default Value: sysdatetimeoffset()
    * * Description: Date and time with timezone when this pricing became effective. NULL disables temporal tracking. Defaults to current UTC time when record is created
    */
    get StartedAt(): Date | null {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date | null) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetimeoffset
    * * Description: Date and time with timezone when this pricing expired or will expire. NULL indicates currently active pricing
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Expired
    *   * Invalid
    *   * Pending
    * * Description: Current status of this pricing record. Active=currently in use, Pending=scheduled for future, Expired=no longer valid, Invalid=data error
    */
    get Status(): 'Active' | 'Expired' | 'Invalid' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Expired' | 'Invalid' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Currency
    * * Display Name: Currency
    * * SQL Data Type: nchar(3)
    * * Description: ISO 4217 three-letter currency code (e.g., USD, EUR, GBP) in uppercase
    */
    get Currency(): string {
        return this.Get('Currency');
    }
    set Currency(value: string) {
        this.Set('Currency', value);
    }

    /**
    * * Field Name: PriceTypeID
    * * Display Name: Price Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Model Price Types (vwAIModelPriceTypes.ID)
    */
    get PriceTypeID(): string {
        return this.Get('PriceTypeID');
    }
    set PriceTypeID(value: string) {
        this.Set('PriceTypeID', value);
    }

    /**
    * * Field Name: InputPricePerUnit
    * * Display Name: Input Price Per Unit
    * * SQL Data Type: decimal(18, 8)
    * * Description: Price per unit for input tokens/requests. Must be non-negative. Precision allows for micro-pricing scenarios
    */
    get InputPricePerUnit(): number {
        return this.Get('InputPricePerUnit');
    }
    set InputPricePerUnit(value: number) {
        this.Set('InputPricePerUnit', value);
    }

    /**
    * * Field Name: OutputPricePerUnit
    * * Display Name: Output Price Per Unit
    * * SQL Data Type: decimal(18, 8)
    * * Description: Price per unit for output tokens/responses. Must be non-negative. Often higher than input pricing
    */
    get OutputPricePerUnit(): number {
        return this.Get('OutputPricePerUnit');
    }
    set OutputPricePerUnit(value: number) {
        this.Set('OutputPricePerUnit', value);
    }

    /**
    * * Field Name: UnitTypeID
    * * Display Name: Unit Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Model Price Unit Types (vwAIModelPriceUnitTypes.ID)
    */
    get UnitTypeID(): string {
        return this.Get('UnitTypeID');
    }
    set UnitTypeID(value: string) {
        this.Set('UnitTypeID', value);
    }

    /**
    * * Field Name: ProcessingType
    * * Display Name: Processing Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Batch
    *   * Realtime
    * * Description: Processing method that affects pricing. Realtime=immediate response, Batch=delayed processing often with discounts
    */
    get ProcessingType(): 'Batch' | 'Realtime' {
        return this.Get('ProcessingType');
    }
    set ProcessingType(value: 'Batch' | 'Realtime') {
        this.Set('ProcessingType', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional notes about pricing context, source, special conditions, or vendor-specific details
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Model
    * * Display Name: Model
    * * SQL Data Type: nvarchar(50)
    */
    get Model(): string {
        return this.Get('Model');
    }

    /**
    * * Field Name: Vendor
    * * Display Name: Vendor
    * * SQL Data Type: nvarchar(50)
    */
    get Vendor(): string {
        return this.Get('Vendor');
    }

    /**
    * * Field Name: PriceType
    * * Display Name: Price Type
    * * SQL Data Type: nvarchar(100)
    */
    get PriceType(): string {
        return this.Get('PriceType');
    }

    /**
    * * Field Name: UnitType
    * * Display Name: Unit Type
    * * SQL Data Type: nvarchar(100)
    */
    get UnitType(): string {
        return this.Get('UnitType');
    }
}


/**
 * MJ: AI Model Price Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIModelPriceType
 * * Base View: vwAIModelPriceTypes
 * * @description Defines the different types of pricing metrics used by AI model vendors (e.g., Tokens, Minutes, Characters, API Calls)
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Model Price Types')
export class AIModelPriceTypeEntity extends BaseEntity<AIModelPriceTypeEntityType> {
    /**
    * Loads the MJ: AI Model Price Types record from the database
    * @param ID: string - primary key value to load the MJ: AI Model Price Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIModelPriceTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Model Price Types entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Name: This rule ensures that the Name field is not empty or just spaces. The Name must contain at least one non-space character.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateNameNotEmptyOrWhitespace(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the Name field is not empty or just spaces. The Name must contain at least one non-space character.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateNameNotEmptyOrWhitespace(result: ValidationResult) {
    	if (this.Name.trim().length === 0) {
    		result.Errors.push(new ValidationErrorInfo("Name", "Name must not be empty or only spaces.", this.Name, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    * * Description: Short, descriptive name for the price type (e.g., "Tokens", "Minutes", "Characters")
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of what this price type represents and how it is measured
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * MJ: AI Model Price Unit Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIModelPriceUnitType
 * * Base View: vwAIModelPriceUnitTypes
 * * @description Defines the unit scales used for pricing (e.g., Per 1M Tokens, Per 1K Tokens, Per Minute). Includes driver class for normalization calculations
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Model Price Unit Types')
export class AIModelPriceUnitTypeEntity extends BaseEntity<AIModelPriceUnitTypeEntityType> {
    /**
    * Loads the MJ: AI Model Price Unit Types record from the database
    * @param ID: string - primary key value to load the MJ: AI Model Price Unit Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIModelPriceUnitTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Model Price Unit Types entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * DriverClass: This rule ensures that the DriverClass field contains at least one non-whitespace character and is not left blank.
    * * Name: This rule ensures that the Name field is not empty or made up only of spaces. It must contain at least one non-space character.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateDriverClassNotBlank(result);
        this.ValidateNameHasNonWhitespaceCharacters(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the DriverClass field contains at least one non-whitespace character and is not left blank.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateDriverClassNotBlank(result: ValidationResult) {
    	if (this.DriverClass != null && this.DriverClass.trim().length === 0) {
    		result.Errors.push(new ValidationErrorInfo("DriverClass", "DriverClass cannot be blank or consist only of whitespace.", this.DriverClass, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that the Name field is not empty or made up only of spaces. It must contain at least one non-space character.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateNameHasNonWhitespaceCharacters(result: ValidationResult) {
    	if (this.Name != null && this.Name.trim().length === 0) {
    		result.Errors.push(new ValidationErrorInfo("Name", "Name cannot be empty or consist only of spaces.", this.Name, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    * * Description: Display name for the pricing unit (e.g., "Per 1M Tokens", "Per 1K Tokens", "Per Minute")
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed explanation of the unit scale and any special considerations for this pricing unit
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(255)
    * * Description: Fully qualified class name that handles cost calculations and unit normalization for this pricing unit (e.g., "TokenPer1M", "TokenPer1K")
    */
    get DriverClass(): string {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * MJ: AI Model Vendors - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIModelVendor
 * * Base View: vwAIModelVendors
 * * @description Associates AI models with vendors providing them, including vendor-specific implementation details.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Model Vendors')
export class AIModelVendorEntity extends BaseEntity<AIModelVendorEntityType> {
    /**
    * Loads the MJ: AI Model Vendors record from the database
    * @param ID: string - primary key value to load the MJ: AI Model Vendors record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIModelVendorEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Model Vendors entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * MaxInputTokens: This rule ensures that the value for MaxInputTokens, if provided, must be zero or greater (i.e., cannot be a negative number).
    * * MaxOutputTokens: This rule ensures that if a maximum output tokens value is provided, it must be greater than or equal to zero. If no value is provided, there is no restriction.
    * * Priority: This rule ensures that the Priority value must not be less than zero. In other words, Priority cannot be negative.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateMaxInputTokensIsNonNegative(result);
        this.ValidateMaxOutputTokensNonNegative(result);
        this.ValidatePriorityIsNonNegative(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the value for MaxInputTokens, if provided, must be zero or greater (i.e., cannot be a negative number).
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateMaxInputTokensIsNonNegative(result: ValidationResult) {
    	if (this.MaxInputTokens != null && this.MaxInputTokens < 0) {
    		result.Errors.push(new ValidationErrorInfo("MaxInputTokens", "MaxInputTokens, if specified, must be zero or a positive number.", this.MaxInputTokens, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if a maximum output tokens value is provided, it must be greater than or equal to zero. If no value is provided, there is no restriction.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateMaxOutputTokensNonNegative(result: ValidationResult) {
    	if (this.MaxOutputTokens !== null && this.MaxOutputTokens < 0) {
    		result.Errors.push(new ValidationErrorInfo("MaxOutputTokens", "If specified, the maximum output tokens must be greater than or equal to zero.", this.MaxOutputTokens, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that the Priority value must not be less than zero. In other words, Priority cannot be negative.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidatePriorityIsNonNegative(result: ValidationResult) {
    	if (this.Priority < 0) {
    		result.Errors.push(new ValidationErrorInfo("Priority", "Priority must not be negative.", this.Priority, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ModelID
    * * Display Name: Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    get ModelID(): string {
        return this.Get('ModelID');
    }
    set ModelID(value: string) {
        this.Set('ModelID', value);
    }

    /**
    * * Field Name: VendorID
    * * Display Name: Vendor ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
    */
    get VendorID(): string {
        return this.Get('VendorID');
    }
    set VendorID(value: string) {
        this.Set('VendorID', value);
    }

    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Determines the priority rank of this vendor for the model. Higher values indicate higher priority.
    */
    get Priority(): number {
        return this.Get('Priority');
    }
    set Priority(value: number) {
        this.Set('Priority', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
    * * Description: The current status of this model-vendor combination. Values include Active, Inactive, Deprecated, and Preview.
    */
    get Status(): 'Active' | 'Deprecated' | 'Inactive' | 'Preview' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Deprecated' | 'Inactive' | 'Preview') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(100)
    * * Description: The name of the driver class implementing this model-vendor combination.
    */
    get DriverClass(): string | null {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string | null) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: DriverImportPath
    * * Display Name: Driver Import Path
    * * SQL Data Type: nvarchar(255)
    * * Description: The import path for the driver class.
    */
    get DriverImportPath(): string | null {
        return this.Get('DriverImportPath');
    }
    set DriverImportPath(value: string | null) {
        this.Set('DriverImportPath', value);
    }

    /**
    * * Field Name: APIName
    * * Display Name: API Name
    * * SQL Data Type: nvarchar(100)
    * * Description: The name of the model to use with API calls, which might differ from the model name. If not provided, the model name will be used.
    */
    get APIName(): string | null {
        return this.Get('APIName');
    }
    set APIName(value: string | null) {
        this.Set('APIName', value);
    }

    /**
    * * Field Name: MaxInputTokens
    * * Display Name: Max Input Tokens
    * * SQL Data Type: int
    * * Description: The maximum number of input tokens supported by this model-vendor implementation.
    */
    get MaxInputTokens(): number | null {
        return this.Get('MaxInputTokens');
    }
    set MaxInputTokens(value: number | null) {
        this.Set('MaxInputTokens', value);
    }

    /**
    * * Field Name: MaxOutputTokens
    * * Display Name: Max Output Tokens
    * * SQL Data Type: int
    * * Description: The maximum number of output tokens supported by this model-vendor implementation.
    */
    get MaxOutputTokens(): number | null {
        return this.Get('MaxOutputTokens');
    }
    set MaxOutputTokens(value: number | null) {
        this.Set('MaxOutputTokens', value);
    }

    /**
    * * Field Name: SupportedResponseFormats
    * * Display Name: Supported Response Formats
    * * SQL Data Type: nvarchar(100)
    * * Default Value: Any
    * * Description: A comma-delimited string indicating the supported response formats for this model-vendor implementation. Options include Any, Text, Markdown, JSON, and ModelSpecific.
    */
    get SupportedResponseFormats(): string {
        return this.Get('SupportedResponseFormats');
    }
    set SupportedResponseFormats(value: string) {
        this.Set('SupportedResponseFormats', value);
    }

    /**
    * * Field Name: SupportsEffortLevel
    * * Display Name: Supports Effort Level
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Specifies if this model-vendor implementation supports the concept of an effort level.
    */
    get SupportsEffortLevel(): boolean {
        return this.Get('SupportsEffortLevel');
    }
    set SupportsEffortLevel(value: boolean) {
        this.Set('SupportsEffortLevel', value);
    }

    /**
    * * Field Name: SupportsStreaming
    * * Display Name: Supports Streaming
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Specifies if this model-vendor implementation supports streaming responses.
    */
    get SupportsStreaming(): boolean {
        return this.Get('SupportsStreaming');
    }
    set SupportsStreaming(value: boolean) {
        this.Set('SupportsStreaming', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Vendor Type Definitions (vwAIVendorTypeDefinitions.ID)
    * * Description: References the type/role of the vendor for this model (e.g., model developer, inference provider)
    */
    get TypeID(): string {
        return this.Get('TypeID');
    }
    set TypeID(value: string) {
        this.Set('TypeID', value);
    }

    /**
    * * Field Name: Model
    * * Display Name: Model
    * * SQL Data Type: nvarchar(50)
    */
    get Model(): string {
        return this.Get('Model');
    }

    /**
    * * Field Name: Vendor
    * * Display Name: Vendor
    * * SQL Data Type: nvarchar(50)
    */
    get Vendor(): string {
        return this.Get('Vendor');
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    */
    get Type(): string {
        return this.Get('Type');
    }
}


/**
 * MJ: AI Prompt Models - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIPromptModel
 * * Base View: vwAIPromptModels
 * * @description Associates AI prompts with specific models and configurations, including execution details.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Prompt Models')
export class AIPromptModelEntity extends BaseEntity<AIPromptModelEntityType> {
    /**
    * Loads the MJ: AI Prompt Models record from the database
    * @param ID: string - primary key value to load the MJ: AI Prompt Models record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIPromptModelEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Prompt Models entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * ExecutionGroup: This rule ensures that the ExecutionGroup value must be zero or a positive number. Negative values are not allowed.
    * * ParallelCount: This rule ensures that the ParallelCount value must always be at least 1.
    * * Priority: This rule ensures that the priority value must be zero or a positive number; in other words, priority cannot be negative.
    * * Table-Level: This rule ensures that, depending on the parallelization mode, the configuration parameter for parallelization is either required or must not be set. Specifically: If the parallelization mode is 'None' or 'StaticCount', the configuration parameter must be empty. If the parallelization mode is 'ConfigParam', the configuration parameter is required.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateExecutionGroupNonNegative(result);
        this.ValidateParallelCountAtLeastOne(result);
        this.ValidatePriorityIsNonNegative(result);
        this.ValidateParallelizationModeAndConfigParam(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the ExecutionGroup value must be zero or a positive number. Negative values are not allowed.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateExecutionGroupNonNegative(result: ValidationResult) {
    	if (this.ExecutionGroup < 0) {
    		result.Errors.push(new ValidationErrorInfo("ExecutionGroup", "ExecutionGroup must be zero or a positive integer.", this.ExecutionGroup, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that the ParallelCount value must always be at least 1.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateParallelCountAtLeastOne(result: ValidationResult) {
    	if (this.ParallelCount < 1) {
    		result.Errors.push(new ValidationErrorInfo("ParallelCount", "ParallelCount must be greater than or equal to 1.", this.ParallelCount, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that the priority value must be zero or a positive number; in other words, priority cannot be negative.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidatePriorityIsNonNegative(result: ValidationResult) {
    	if (this.Priority < 0) {
    		result.Errors.push(new ValidationErrorInfo("Priority", "Priority must be zero or a positive number.", this.Priority, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that, depending on the parallelization mode, the configuration parameter for parallelization is either required or must not be set. Specifically: If the parallelization mode is 'None' or 'StaticCount', the configuration parameter must be empty. If the parallelization mode is 'ConfigParam', the configuration parameter is required.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateParallelizationModeAndConfigParam(result: ValidationResult) {
    	if (this.ParallelizationMode === "ConfigParam") {
    		if (this.ParallelConfigParam == null) {
    			result.Errors.push(new ValidationErrorInfo("ParallelConfigParam", "ParallelConfigParam must be provided when ParallelizationMode is 'ConfigParam'.", this.ParallelConfigParam, ValidationErrorType.Failure));
    		}
    	} else if (this.ParallelizationMode === "None" || this.ParallelizationMode === "StaticCount") {
    		if (this.ParallelConfigParam != null) {
    			result.Errors.push(new ValidationErrorInfo("ParallelConfigParam", "ParallelConfigParam must be null when ParallelizationMode is 'None' or 'StaticCount'.", this.ParallelConfigParam, ValidationErrorType.Failure));
    		}
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: PromptID
    * * Display Name: Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: References the AI prompt this model association applies to.
    */
    get PromptID(): string {
        return this.Get('PromptID');
    }
    set PromptID(value: string) {
        this.Set('PromptID', value);
    }

    /**
    * * Field Name: ModelID
    * * Display Name: Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    * * Description: References the AI model to use for this prompt.
    */
    get ModelID(): string {
        return this.Get('ModelID');
    }
    set ModelID(value: string) {
        this.Set('ModelID', value);
    }

    /**
    * * Field Name: VendorID
    * * Display Name: Vendor ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
    * * Description: Optional reference to a specific vendor for the model. If NULL, uses the highest priority vendor for the model.
    */
    get VendorID(): string | null {
        return this.Get('VendorID');
    }
    set VendorID(value: string | null) {
        this.Set('VendorID', value);
    }

    /**
    * * Field Name: ConfigurationID
    * * Display Name: Configuration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
    * * Description: Optional reference to a specific configuration. If NULL, this model is available in all configurations.
    */
    get ConfigurationID(): string | null {
        return this.Get('ConfigurationID');
    }
    set ConfigurationID(value: string | null) {
        this.Set('ConfigurationID', value);
    }

    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Priority of this model for the prompt. Higher values indicate higher priority.
    */
    get Priority(): number {
        return this.Get('Priority');
    }
    set Priority(value: number) {
        this.Set('Priority', value);
    }

    /**
    * * Field Name: ExecutionGroup
    * * Display Name: Execution Group
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Execution group for parallel processing. Models with the same group are executed in parallel.
    */
    get ExecutionGroup(): number {
        return this.Get('ExecutionGroup');
    }
    set ExecutionGroup(value: number) {
        this.Set('ExecutionGroup', value);
    }

    /**
    * * Field Name: ModelParameters
    * * Display Name: Model Parameters
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON-formatted parameters specific to this model (temperature, max tokens, etc.).
    */
    get ModelParameters(): string | null {
        return this.Get('ModelParameters');
    }
    set ModelParameters(value: string | null) {
        this.Set('ModelParameters', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
    * * Description: The current status of this model configuration. Values include Active, Inactive, Deprecated, and Preview.
    */
    get Status(): 'Active' | 'Deprecated' | 'Inactive' | 'Preview' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Deprecated' | 'Inactive' | 'Preview') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: ParallelizationMode
    * * Display Name: Parallelization Mode
    * * SQL Data Type: nvarchar(20)
    * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * ConfigParam
    *   * None
    *   * StaticCount
    * * Description: Controls how this model participates in parallelization: None, StaticCount, or ConfigParam.
    */
    get ParallelizationMode(): 'ConfigParam' | 'None' | 'StaticCount' {
        return this.Get('ParallelizationMode');
    }
    set ParallelizationMode(value: 'ConfigParam' | 'None' | 'StaticCount') {
        this.Set('ParallelizationMode', value);
    }

    /**
    * * Field Name: ParallelCount
    * * Display Name: Parallel Count
    * * SQL Data Type: int
    * * Default Value: 1
    * * Description: Number of parallel executions to perform with this model when ParallelizationMode is StaticCount.
    */
    get ParallelCount(): number {
        return this.Get('ParallelCount');
    }
    set ParallelCount(value: number) {
        this.Set('ParallelCount', value);
    }

    /**
    * * Field Name: ParallelConfigParam
    * * Display Name: Parallel Config Param
    * * SQL Data Type: nvarchar(100)
    * * Description: Name of a configuration parameter that contains the parallel count when ParallelizationMode is ConfigParam.
    */
    get ParallelConfigParam(): string | null {
        return this.Get('ParallelConfigParam');
    }
    set ParallelConfigParam(value: string | null) {
        this.Set('ParallelConfigParam', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Prompt
    * * Display Name: Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get Prompt(): string {
        return this.Get('Prompt');
    }

    /**
    * * Field Name: Model
    * * Display Name: Model
    * * SQL Data Type: nvarchar(50)
    */
    get Model(): string {
        return this.Get('Model');
    }

    /**
    * * Field Name: Vendor
    * * Display Name: Vendor
    * * SQL Data Type: nvarchar(50)
    */
    get Vendor(): string | null {
        return this.Get('Vendor');
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(100)
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }
}


/**
 * MJ: AI Prompt Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIPromptRun
 * * Base View: vwAIPromptRuns
 * * @description Tracks AI prompt executions including timings, inputs, outputs, and performance metrics.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Prompt Runs')
export class AIPromptRunEntity extends BaseEntity<AIPromptRunEntityType> {
    /**
    * Loads the MJ: AI Prompt Runs record from the database
    * @param ID: string - primary key value to load the MJ: AI Prompt Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIPromptRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Prompt Runs entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * EffortLevel: This rule ensures that if an effort level is provided, it must be between 1 and 100, inclusive.
    * * Table-Level: This rule ensures that if the 'CompletedAt' date is provided, it must be the same as or later than the 'RunAt' date. If 'CompletedAt' is not specified, there is no restriction.
    * * Table-Level: This rule ensures that if either the number of prompt tokens or completion tokens is missing, or the total tokens used is missing, the check passes automatically. However, if all three are provided, then the total tokens used must exactly equal the sum of prompt tokens and completion tokens.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateEffortLevelIsBetween1And100(result);
        this.ValidateCompletedAtNotBeforeRunAt(result);
        this.ValidateTokensUsedEqualsPromptPlusCompletion(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if an effort level is provided, it must be between 1 and 100, inclusive.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateEffortLevelIsBetween1And100(result: ValidationResult) {
    	if (this.EffortLevel != null && (this.EffortLevel < 1 || this.EffortLevel > 100)) {
    		result.Errors.push(new ValidationErrorInfo("EffortLevel", "Effort level must be between 1 and 100 if provided.", this.EffortLevel, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if the 'CompletedAt' date is provided, it must be the same as or later than the 'RunAt' date. If 'CompletedAt' is not specified, there is no restriction.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateCompletedAtNotBeforeRunAt(result: ValidationResult) {
    	if (this.CompletedAt !== null && this.CompletedAt < this.RunAt) {
    		result.Errors.push(new ValidationErrorInfo("CompletedAt", "If provided, CompletedAt must be the same as or later than RunAt.", this.CompletedAt, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that if either the number of prompt tokens or completion tokens is missing, or the total tokens used is missing, the check passes automatically. However, if all three are provided, then the total tokens used must exactly equal the sum of prompt tokens and completion tokens.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateTokensUsedEqualsPromptPlusCompletion(result: ValidationResult) {
    	// Allow missing values for any of the three fields
    	if (this.TokensUsed != null && this.TokensPrompt != null && this.TokensCompletion != null) {
    		if (this.TokensUsed !== this.TokensPrompt + this.TokensCompletion) {
    			result.Errors.push(new ValidationErrorInfo("TokensUsed", "The total tokens used must equal the sum of the prompt tokens and completion tokens.", this.TokensUsed, ValidationErrorType.Failure));
    		}
    	}
    	// Otherwise, skip the check (it passes)
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: PromptID
    * * Display Name: Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: The prompt that was executed.
    */
    get PromptID(): string {
        return this.Get('PromptID');
    }
    set PromptID(value: string) {
        this.Set('PromptID', value);
    }

    /**
    * * Field Name: ModelID
    * * Display Name: Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    * * Description: The AI model used for execution.
    */
    get ModelID(): string {
        return this.Get('ModelID');
    }
    set ModelID(value: string) {
        this.Set('ModelID', value);
    }

    /**
    * * Field Name: VendorID
    * * Display Name: Vendor ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
    * * Description: The vendor providing the model/inference.
    */
    get VendorID(): string {
        return this.Get('VendorID');
    }
    set VendorID(value: string) {
        this.Set('VendorID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    * * Description: If this prompt was run as part of an agent, references the agent.
    */
    get AgentID(): string | null {
        return this.Get('AgentID');
    }
    set AgentID(value: string | null) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: ConfigurationID
    * * Display Name: Configuration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Configurations (vwAIConfigurations.ID)
    * * Description: Optional configuration used for this execution.
    */
    get ConfigurationID(): string | null {
        return this.Get('ConfigurationID');
    }
    set ConfigurationID(value: string | null) {
        this.Set('ConfigurationID', value);
    }

    /**
    * * Field Name: RunAt
    * * Display Name: Run At
    * * SQL Data Type: datetimeoffset
    * * Default Value: sysdatetimeoffset()
    * * Description: When the prompt run started, with timezone offset information.
    */
    get RunAt(): Date {
        return this.Get('RunAt');
    }
    set RunAt(value: Date) {
        this.Set('RunAt', value);
    }

    /**
    * * Field Name: CompletedAt
    * * Display Name: Completed At
    * * SQL Data Type: datetimeoffset
    * * Description: When the prompt run completed, with timezone offset information.
    */
    get CompletedAt(): Date | null {
        return this.Get('CompletedAt');
    }
    set CompletedAt(value: Date | null) {
        this.Set('CompletedAt', value);
    }

    /**
    * * Field Name: ExecutionTimeMS
    * * Display Name: Execution Time MS
    * * SQL Data Type: int
    * * Description: Total execution time in milliseconds.
    */
    get ExecutionTimeMS(): number | null {
        return this.Get('ExecutionTimeMS');
    }
    set ExecutionTimeMS(value: number | null) {
        this.Set('ExecutionTimeMS', value);
    }

    /**
    * * Field Name: Messages
    * * Display Name: Messages
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The input messages sent to the model, typically in JSON format.
    */
    get Messages(): string | null {
        return this.Get('Messages');
    }
    set Messages(value: string | null) {
        this.Set('Messages', value);
    }

    /**
    * * Field Name: Result
    * * Display Name: Result
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The output result from the model.
    */
    get Result(): string | null {
        return this.Get('Result');
    }
    set Result(value: string | null) {
        this.Set('Result', value);
    }

    /**
    * * Field Name: TokensUsed
    * * Display Name: Tokens Used
    * * SQL Data Type: int
    * * Description: Total number of tokens used (prompt + completion).
    */
    get TokensUsed(): number | null {
        return this.Get('TokensUsed');
    }
    set TokensUsed(value: number | null) {
        this.Set('TokensUsed', value);
    }

    /**
    * * Field Name: TokensPrompt
    * * Display Name: Tokens Prompt
    * * SQL Data Type: int
    * * Description: Number of tokens in the prompt.
    */
    get TokensPrompt(): number | null {
        return this.Get('TokensPrompt');
    }
    set TokensPrompt(value: number | null) {
        this.Set('TokensPrompt', value);
    }

    /**
    * * Field Name: TokensCompletion
    * * Display Name: Tokens Completion
    * * SQL Data Type: int
    * * Description: Number of tokens in the completion/result.
    */
    get TokensCompletion(): number | null {
        return this.Get('TokensCompletion');
    }
    set TokensCompletion(value: number | null) {
        this.Set('TokensCompletion', value);
    }

    /**
    * * Field Name: TotalCost
    * * Display Name: Total Cost
    * * SQL Data Type: decimal(18, 6)
    * * Description: Total cost of this prompt run including its own cost plus all descendant costs. Calculated as Cost + DescendantCost. This value is stored (not computed) for query performance. Currency is specified in CostCurrency field.
    */
    get TotalCost(): number | null {
        return this.Get('TotalCost');
    }
    set TotalCost(value: number | null) {
        this.Set('TotalCost', value);
    }

    /**
    * * Field Name: Success
    * * Display Name: Success
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether the execution was successful.
    */
    get Success(): boolean {
        return this.Get('Success');
    }
    set Success(value: boolean) {
        this.Set('Success', value);
    }

    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Error message if the execution failed.
    */
    get ErrorMessage(): string | null {
        return this.Get('ErrorMessage');
    }
    set ErrorMessage(value: string | null) {
        this.Set('ErrorMessage', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Prompt Runs (vwAIPromptRuns.ID)
    * * Description: References the parent AIPromptRun.ID for hierarchical execution tracking. NULL for top-level runs, populated for parallel children and result selector runs.
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: RunType
    * * Display Name: Run Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Single
    * * Value List Type: List
    * * Possible Values 
    *   * ParallelChild
    *   * ParallelParent
    *   * ResultSelector
    *   * Single
    * * Description: Type of prompt run execution: Single (standard single prompt), ParallelParent (coordinator for parallel execution), ParallelChild (individual parallel execution), ResultSelector (result selection prompt that chooses best result)
    */
    get RunType(): 'ParallelChild' | 'ParallelParent' | 'ResultSelector' | 'Single' {
        return this.Get('RunType');
    }
    set RunType(value: 'ParallelChild' | 'ParallelParent' | 'ResultSelector' | 'Single') {
        this.Set('RunType', value);
    }

    /**
    * * Field Name: ExecutionOrder
    * * Display Name: Execution Order
    * * SQL Data Type: int
    * * Description: Execution order for parallel child runs and result selector runs. Used to track the sequence of execution within a parallel run group. NULL for single runs and parallel parent runs.
    */
    get ExecutionOrder(): number | null {
        return this.Get('ExecutionOrder');
    }
    set ExecutionOrder(value: number | null) {
        this.Set('ExecutionOrder', value);
    }

    /**
    * * Field Name: AgentRunID
    * * Display Name: Agent Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Agent Runs (vwAIAgentRuns.ID)
    * * Description: Optional reference to the AIAgentRun that initiated this prompt execution. Links prompt runs to their parent agent runs for comprehensive execution tracking.
    */
    get AgentRunID(): string | null {
        return this.Get('AgentRunID');
    }
    set AgentRunID(value: string | null) {
        this.Set('AgentRunID', value);
    }

    /**
    * * Field Name: Cost
    * * Display Name: Cost
    * * SQL Data Type: decimal(19, 8)
    * * Description: The cost of this specific prompt execution as reported by the AI provider. This does not include costs from child executions. The currency is specified in CostCurrency field.
    */
    get Cost(): number | null {
        return this.Get('Cost');
    }
    set Cost(value: number | null) {
        this.Set('Cost', value);
    }

    /**
    * * Field Name: CostCurrency
    * * Display Name: Cost Currency
    * * SQL Data Type: nvarchar(10)
    * * Description: ISO 4217 currency code for the Cost field (e.g., USD, EUR, GBP). Different AI providers may use different currencies.
    */
    get CostCurrency(): string | null {
        return this.Get('CostCurrency');
    }
    set CostCurrency(value: string | null) {
        this.Set('CostCurrency', value);
    }

    /**
    * * Field Name: TokensUsedRollup
    * * Display Name: Tokens Used Rollup
    * * SQL Data Type: int
    * * Description: Total tokens used including this execution and all child/grandchild executions. This provides a complete view of token usage for hierarchical prompt trees. Calculated as TokensPromptRollup + TokensCompletionRollup.
    */
    get TokensUsedRollup(): number | null {
        return this.Get('TokensUsedRollup');
    }
    set TokensUsedRollup(value: number | null) {
        this.Set('TokensUsedRollup', value);
    }

    /**
    * * Field Name: TokensPromptRollup
    * * Display Name: Tokens Prompt Rollup
    * * SQL Data Type: int
    * * Description: Total prompt/input tokens including this execution and all child/grandchild executions. For leaf nodes (no children), this equals TokensPrompt. For parent nodes, this includes the sum of all descendant prompt tokens.
    */
    get TokensPromptRollup(): number | null {
        return this.Get('TokensPromptRollup');
    }
    set TokensPromptRollup(value: number | null) {
        this.Set('TokensPromptRollup', value);
    }

    /**
    * * Field Name: TokensCompletionRollup
    * * Display Name: Tokens Completion Rollup
    * * SQL Data Type: int
    * * Description: Total completion/output tokens including this execution and all child/grandchild executions. For leaf nodes (no children), this equals TokensCompletion. For parent nodes, this includes the sum of all descendant completion tokens.
    */
    get TokensCompletionRollup(): number | null {
        return this.Get('TokensCompletionRollup');
    }
    set TokensCompletionRollup(value: number | null) {
        this.Set('TokensCompletionRollup', value);
    }

    /**
    * * Field Name: Temperature
    * * Display Name: Temperature
    * * SQL Data Type: decimal(3, 2)
    * * Description: The temperature parameter used for this prompt run, controlling randomness in the output (0.0 = deterministic, 2.0 = very random)
    */
    get Temperature(): number | null {
        return this.Get('Temperature');
    }
    set Temperature(value: number | null) {
        this.Set('Temperature', value);
    }

    /**
    * * Field Name: TopP
    * * Display Name: Top P
    * * SQL Data Type: decimal(3, 2)
    * * Description: Top-p (nucleus) sampling parameter used for this run. Considers tokens with cumulative probability up to this value (0-1)
    */
    get TopP(): number | null {
        return this.Get('TopP');
    }
    set TopP(value: number | null) {
        this.Set('TopP', value);
    }

    /**
    * * Field Name: TopK
    * * Display Name: Top K
    * * SQL Data Type: int
    * * Description: Top-k sampling parameter used for this run. Limits sampling to the top K most likely tokens
    */
    get TopK(): number | null {
        return this.Get('TopK');
    }
    set TopK(value: number | null) {
        this.Set('TopK', value);
    }

    /**
    * * Field Name: MinP
    * * Display Name: Min P
    * * SQL Data Type: decimal(3, 2)
    * * Description: Minimum probability threshold used for token sampling (0-1). Tokens below this probability are filtered out
    */
    get MinP(): number | null {
        return this.Get('MinP');
    }
    set MinP(value: number | null) {
        this.Set('MinP', value);
    }

    /**
    * * Field Name: FrequencyPenalty
    * * Display Name: Frequency Penalty
    * * SQL Data Type: decimal(3, 2)
    * * Description: Frequency penalty parameter used (-2.0 to 2.0). Positive values reduce repetition of tokens based on their frequency in the output
    */
    get FrequencyPenalty(): number | null {
        return this.Get('FrequencyPenalty');
    }
    set FrequencyPenalty(value: number | null) {
        this.Set('FrequencyPenalty', value);
    }

    /**
    * * Field Name: PresencePenalty
    * * Display Name: Presence Penalty
    * * SQL Data Type: decimal(3, 2)
    * * Description: Presence penalty parameter used (-2.0 to 2.0). Positive values encourage the model to talk about new topics
    */
    get PresencePenalty(): number | null {
        return this.Get('PresencePenalty');
    }
    set PresencePenalty(value: number | null) {
        this.Set('PresencePenalty', value);
    }

    /**
    * * Field Name: Seed
    * * Display Name: Seed
    * * SQL Data Type: int
    * * Description: Random seed used for reproducible outputs. When set, the same seed with identical inputs should produce the same output
    */
    get Seed(): number | null {
        return this.Get('Seed');
    }
    set Seed(value: number | null) {
        this.Set('Seed', value);
    }

    /**
    * * Field Name: StopSequences
    * * Display Name: Stop Sequences
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of stop sequences used. The model stops generating when any of these sequences are encountered
    */
    get StopSequences(): string | null {
        return this.Get('StopSequences');
    }
    set StopSequences(value: string | null) {
        this.Set('StopSequences', value);
    }

    /**
    * * Field Name: ResponseFormat
    * * Display Name: Response Format
    * * SQL Data Type: nvarchar(50)
    * * Description: The response format requested for this run (e.g., 'JSON', 'Text', 'Markdown')
    */
    get ResponseFormat(): string | null {
        return this.Get('ResponseFormat');
    }
    set ResponseFormat(value: string | null) {
        this.Set('ResponseFormat', value);
    }

    /**
    * * Field Name: LogProbs
    * * Display Name: Log Probs
    * * SQL Data Type: bit
    * * Description: Whether log probabilities were requested for this run
    */
    get LogProbs(): boolean | null {
        return this.Get('LogProbs');
    }
    set LogProbs(value: boolean | null) {
        this.Set('LogProbs', value);
    }

    /**
    * * Field Name: TopLogProbs
    * * Display Name: Top Log Probs
    * * SQL Data Type: int
    * * Description: Number of top log probabilities requested per token (if LogProbs is true)
    */
    get TopLogProbs(): number | null {
        return this.Get('TopLogProbs');
    }
    set TopLogProbs(value: number | null) {
        this.Set('TopLogProbs', value);
    }

    /**
    * * Field Name: DescendantCost
    * * Display Name: Descendant Cost
    * * SQL Data Type: decimal(18, 6)
    * * Description: The total cost of all descendant (child and grandchild) prompt runs, excluding this run's own cost. For leaf nodes (no children), this is 0. Updated when child costs change.
    */
    get DescendantCost(): number | null {
        return this.Get('DescendantCost');
    }
    set DescendantCost(value: number | null) {
        this.Set('DescendantCost', value);
    }

    /**
    * * Field Name: ValidationAttemptCount
    * * Display Name: Validation Attempt Count
    * * SQL Data Type: int
    * * Description: Total number of validation attempts made (including the initial attempt)
    */
    get ValidationAttemptCount(): number | null {
        return this.Get('ValidationAttemptCount');
    }
    set ValidationAttemptCount(value: number | null) {
        this.Set('ValidationAttemptCount', value);
    }

    /**
    * * Field Name: SuccessfulValidationCount
    * * Display Name: Successful Validation Count
    * * SQL Data Type: int
    * * Description: Number of validation attempts that passed validation
    */
    get SuccessfulValidationCount(): number | null {
        return this.Get('SuccessfulValidationCount');
    }
    set SuccessfulValidationCount(value: number | null) {
        this.Set('SuccessfulValidationCount', value);
    }

    /**
    * * Field Name: FinalValidationPassed
    * * Display Name: Final Validation Passed
    * * SQL Data Type: bit
    * * Description: Whether validation ultimately passed (1) or failed (0)
    */
    get FinalValidationPassed(): boolean | null {
        return this.Get('FinalValidationPassed');
    }
    set FinalValidationPassed(value: boolean | null) {
        this.Set('FinalValidationPassed', value);
    }

    /**
    * * Field Name: ValidationBehavior
    * * Display Name: Validation Behavior
    * * SQL Data Type: nvarchar(50)
    * * Description: Validation behavior used: Strict, Warn, or None
    */
    get ValidationBehavior(): string | null {
        return this.Get('ValidationBehavior');
    }
    set ValidationBehavior(value: string | null) {
        this.Set('ValidationBehavior', value);
    }

    /**
    * * Field Name: RetryStrategy
    * * Display Name: Retry Strategy
    * * SQL Data Type: nvarchar(50)
    * * Description: Retry strategy used: Fixed, Linear, or Exponential
    */
    get RetryStrategy(): string | null {
        return this.Get('RetryStrategy');
    }
    set RetryStrategy(value: string | null) {
        this.Set('RetryStrategy', value);
    }

    /**
    * * Field Name: MaxRetriesConfigured
    * * Display Name: Max Retries Configured
    * * SQL Data Type: int
    * * Description: Maximum number of retries configured on the prompt
    */
    get MaxRetriesConfigured(): number | null {
        return this.Get('MaxRetriesConfigured');
    }
    set MaxRetriesConfigured(value: number | null) {
        this.Set('MaxRetriesConfigured', value);
    }

    /**
    * * Field Name: FinalValidationError
    * * Display Name: Final Validation Error
    * * SQL Data Type: nvarchar(500)
    * * Description: The final validation error message if validation failed
    */
    get FinalValidationError(): string | null {
        return this.Get('FinalValidationError');
    }
    set FinalValidationError(value: string | null) {
        this.Set('FinalValidationError', value);
    }

    /**
    * * Field Name: ValidationErrorCount
    * * Display Name: Validation Error Count
    * * SQL Data Type: int
    * * Description: Number of validation errors on the final attempt
    */
    get ValidationErrorCount(): number | null {
        return this.Get('ValidationErrorCount');
    }
    set ValidationErrorCount(value: number | null) {
        this.Set('ValidationErrorCount', value);
    }

    /**
    * * Field Name: CommonValidationError
    * * Display Name: Common Validation Error
    * * SQL Data Type: nvarchar(255)
    * * Description: Most frequent validation error across all attempts
    */
    get CommonValidationError(): string | null {
        return this.Get('CommonValidationError');
    }
    set CommonValidationError(value: string | null) {
        this.Set('CommonValidationError', value);
    }

    /**
    * * Field Name: FirstAttemptAt
    * * Display Name: First Attempt At
    * * SQL Data Type: datetime
    * * Description: Timestamp of the first validation attempt
    */
    get FirstAttemptAt(): Date | null {
        return this.Get('FirstAttemptAt');
    }
    set FirstAttemptAt(value: Date | null) {
        this.Set('FirstAttemptAt', value);
    }

    /**
    * * Field Name: LastAttemptAt
    * * Display Name: Last Attempt At
    * * SQL Data Type: datetime
    * * Description: Timestamp of the last validation attempt
    */
    get LastAttemptAt(): Date | null {
        return this.Get('LastAttemptAt');
    }
    set LastAttemptAt(value: Date | null) {
        this.Set('LastAttemptAt', value);
    }

    /**
    * * Field Name: TotalRetryDurationMS
    * * Display Name: Total Retry Duration MS
    * * SQL Data Type: int
    * * Description: Total time spent on retries in milliseconds (excluding first attempt)
    */
    get TotalRetryDurationMS(): number | null {
        return this.Get('TotalRetryDurationMS');
    }
    set TotalRetryDurationMS(value: number | null) {
        this.Set('TotalRetryDurationMS', value);
    }

    /**
    * * Field Name: ValidationAttempts
    * * Display Name: Validation Attempts
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array containing detailed information about each validation attempt
    */
    get ValidationAttempts(): string | null {
        return this.Get('ValidationAttempts');
    }
    set ValidationAttempts(value: string | null) {
        this.Set('ValidationAttempts', value);
    }

    /**
    * * Field Name: ValidationSummary
    * * Display Name: Validation Summary
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON object containing summary information about the validation process
    */
    get ValidationSummary(): string | null {
        return this.Get('ValidationSummary');
    }
    set ValidationSummary(value: string | null) {
        this.Set('ValidationSummary', value);
    }

    /**
    * * Field Name: FailoverAttempts
    * * Display Name: Failover Attempts
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Number of failover attempts made during this prompt run
    */
    get FailoverAttempts(): number | null {
        return this.Get('FailoverAttempts');
    }
    set FailoverAttempts(value: number | null) {
        this.Set('FailoverAttempts', value);
    }

    /**
    * * Field Name: FailoverErrors
    * * Display Name: Failover Errors
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of error details from each failover attempt
    */
    get FailoverErrors(): string | null {
        return this.Get('FailoverErrors');
    }
    set FailoverErrors(value: string | null) {
        this.Set('FailoverErrors', value);
    }

    /**
    * * Field Name: FailoverDurations
    * * Display Name: Failover Durations
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of duration in milliseconds for each failover attempt
    */
    get FailoverDurations(): string | null {
        return this.Get('FailoverDurations');
    }
    set FailoverDurations(value: string | null) {
        this.Set('FailoverDurations', value);
    }

    /**
    * * Field Name: OriginalModelID
    * * Display Name: Original Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    * * Description: The AI Model ID that was originally attempted before any failovers
    */
    get OriginalModelID(): string | null {
        return this.Get('OriginalModelID');
    }
    set OriginalModelID(value: string | null) {
        this.Set('OriginalModelID', value);
    }

    /**
    * * Field Name: OriginalRequestStartTime
    * * Display Name: Original Request Start Time
    * * SQL Data Type: datetime
    * * Description: Timestamp when the original request started, before any failovers
    */
    get OriginalRequestStartTime(): Date | null {
        return this.Get('OriginalRequestStartTime');
    }
    set OriginalRequestStartTime(value: Date | null) {
        this.Set('OriginalRequestStartTime', value);
    }

    /**
    * * Field Name: TotalFailoverDuration
    * * Display Name: Total Failover Duration
    * * SQL Data Type: int
    * * Description: Total time spent in failover attempts in milliseconds
    */
    get TotalFailoverDuration(): number | null {
        return this.Get('TotalFailoverDuration');
    }
    set TotalFailoverDuration(value: number | null) {
        this.Set('TotalFailoverDuration', value);
    }

    /**
    * * Field Name: RerunFromPromptRunID
    * * Display Name: Rerun From Prompt Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Prompt Runs (vwAIPromptRuns.ID)
    * * Description: If this run was initiated as a re-run of another prompt run, this field links back to the original run ID
    */
    get RerunFromPromptRunID(): string | null {
        return this.Get('RerunFromPromptRunID');
    }
    set RerunFromPromptRunID(value: string | null) {
        this.Set('RerunFromPromptRunID', value);
    }

    /**
    * * Field Name: ModelSelection
    * * Display Name: Model Selection
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON object containing detailed model selection information including all models considered, their scores, and the selection rationale
    */
    get ModelSelection(): string | null {
        return this.Get('ModelSelection');
    }
    set ModelSelection(value: string | null) {
        this.Set('ModelSelection', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Cancelled
    *   * Completed
    *   * Failed
    *   * Pending
    *   * Running
    * * Description: Current execution status of the prompt run. Valid values: Pending, Running, Completed, Failed, Cancelled
    */
    get Status(): 'Cancelled' | 'Completed' | 'Failed' | 'Pending' | 'Running' {
        return this.Get('Status');
    }
    set Status(value: 'Cancelled' | 'Completed' | 'Failed' | 'Pending' | 'Running') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Cancelled
    * * Display Name: Cancelled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this prompt run was cancelled before completion
    */
    get Cancelled(): boolean {
        return this.Get('Cancelled');
    }
    set Cancelled(value: boolean) {
        this.Set('Cancelled', value);
    }

    /**
    * * Field Name: CancellationReason
    * * Display Name: Cancellation Reason
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed reason for cancellation if the prompt run was cancelled. Could be user_requested, timeout, error, or resource_limit
    */
    get CancellationReason(): string | null {
        return this.Get('CancellationReason');
    }
    set CancellationReason(value: string | null) {
        this.Set('CancellationReason', value);
    }

    /**
    * * Field Name: ModelPowerRank
    * * Display Name: Model Power Rank
    * * SQL Data Type: int
    * * Description: Power rank of the model that was selected for this run. Lower numbers indicate more powerful models
    */
    get ModelPowerRank(): number | null {
        return this.Get('ModelPowerRank');
    }
    set ModelPowerRank(value: number | null) {
        this.Set('ModelPowerRank', value);
    }

    /**
    * * Field Name: SelectionStrategy
    * * Display Name: Selection Strategy
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * ByPower
    *   * Default
    *   * Specific
    * * Description: Strategy used for model selection. Valid values: Default (system default), Specific (specific models configured), ByPower (based on power ranking)
    */
    get SelectionStrategy(): 'ByPower' | 'Default' | 'Specific' | null {
        return this.Get('SelectionStrategy');
    }
    set SelectionStrategy(value: 'ByPower' | 'Default' | 'Specific' | null) {
        this.Set('SelectionStrategy', value);
    }

    /**
    * * Field Name: CacheHit
    * * Display Name: Cache Hit
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this result was served from cache rather than executing a new model call
    */
    get CacheHit(): boolean {
        return this.Get('CacheHit');
    }
    set CacheHit(value: boolean) {
        this.Set('CacheHit', value);
    }

    /**
    * * Field Name: CacheKey
    * * Display Name: Cache Key
    * * SQL Data Type: nvarchar(500)
    * * Description: Unique key used for caching this prompt result, typically a hash of the prompt and parameters
    */
    get CacheKey(): string | null {
        return this.Get('CacheKey');
    }
    set CacheKey(value: string | null) {
        this.Set('CacheKey', value);
    }

    /**
    * * Field Name: JudgeID
    * * Display Name: Judge ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: ID of the AIPrompt used as a judge to evaluate and rank multiple parallel execution results
    */
    get JudgeID(): string | null {
        return this.Get('JudgeID');
    }
    set JudgeID(value: string | null) {
        this.Set('JudgeID', value);
    }

    /**
    * * Field Name: JudgeScore
    * * Display Name: Judge Score
    * * SQL Data Type: float(53)
    * * Description: Score assigned by the judge prompt when evaluating multiple results. Higher scores indicate better results
    */
    get JudgeScore(): number | null {
        return this.Get('JudgeScore');
    }
    set JudgeScore(value: number | null) {
        this.Set('JudgeScore', value);
    }

    /**
    * * Field Name: WasSelectedResult
    * * Display Name: Was Selected Result
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this result was selected as the best result when multiple models were run in parallel
    */
    get WasSelectedResult(): boolean {
        return this.Get('WasSelectedResult');
    }
    set WasSelectedResult(value: boolean) {
        this.Set('WasSelectedResult', value);
    }

    /**
    * * Field Name: StreamingEnabled
    * * Display Name: Streaming Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether streaming was enabled for this prompt execution
    */
    get StreamingEnabled(): boolean {
        return this.Get('StreamingEnabled');
    }
    set StreamingEnabled(value: boolean) {
        this.Set('StreamingEnabled', value);
    }

    /**
    * * Field Name: FirstTokenTime
    * * Display Name: First Token Time
    * * SQL Data Type: int
    * * Description: Time in milliseconds from request initiation to receiving the first token from the model
    */
    get FirstTokenTime(): number | null {
        return this.Get('FirstTokenTime');
    }
    set FirstTokenTime(value: number | null) {
        this.Set('FirstTokenTime', value);
    }

    /**
    * * Field Name: ErrorDetails
    * * Display Name: Error Details
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed error information in JSON format if the prompt execution failed, including stack traces and error codes
    */
    get ErrorDetails(): string | null {
        return this.Get('ErrorDetails');
    }
    set ErrorDetails(value: string | null) {
        this.Set('ErrorDetails', value);
    }

    /**
    * * Field Name: ChildPromptID
    * * Display Name: Child Prompt ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Prompts (vwAIPrompts.ID)
    * * Description: References the specific child prompt that was executed as part of hierarchical prompt composition. NULL for regular prompts or parent prompts that don't directly execute a child.
    */
    get ChildPromptID(): string | null {
        return this.Get('ChildPromptID');
    }
    set ChildPromptID(value: string | null) {
        this.Set('ChildPromptID', value);
    }

    /**
    * * Field Name: QueueTime
    * * Display Name: Queue Time
    * * SQL Data Type: int
    * * Description: Queue time in milliseconds before the model started processing the request. Provider-specific timing metric.
    */
    get QueueTime(): number | null {
        return this.Get('QueueTime');
    }
    set QueueTime(value: number | null) {
        this.Set('QueueTime', value);
    }

    /**
    * * Field Name: PromptTime
    * * Display Name: Prompt Time
    * * SQL Data Type: int
    * * Description: Time in milliseconds for the model to ingest and process the prompt. Provider-specific timing metric.
    */
    get PromptTime(): number | null {
        return this.Get('PromptTime');
    }
    set PromptTime(value: number | null) {
        this.Set('PromptTime', value);
    }

    /**
    * * Field Name: CompletionTime
    * * Display Name: Completion Time
    * * SQL Data Type: int
    * * Description: Time in milliseconds for the model to generate the completion/response tokens. Provider-specific timing metric.
    */
    get CompletionTime(): number | null {
        return this.Get('CompletionTime');
    }
    set CompletionTime(value: number | null) {
        this.Set('CompletionTime', value);
    }

    /**
    * * Field Name: ModelSpecificResponseDetails
    * * Display Name: Model Specific Response Details
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON field containing provider-specific response metadata and details not captured in standard fields. Structure varies by AI provider.
    */
    get ModelSpecificResponseDetails(): string | null {
        return this.Get('ModelSpecificResponseDetails');
    }
    set ModelSpecificResponseDetails(value: string | null) {
        this.Set('ModelSpecificResponseDetails', value);
    }

    /**
    * * Field Name: EffortLevel
    * * Display Name: Effort Level
    * * SQL Data Type: int
    * * Description: Effort level that was actually used during this prompt run execution (1-100, where 1=minimal effort, 100=maximum effort). This is the resolved effort level after applying the precedence hierarchy: runtime override > agent default > prompt default > provider default.
    */
    get EffortLevel(): number | null {
        return this.Get('EffortLevel');
    }
    set EffortLevel(value: number | null) {
        this.Set('EffortLevel', value);
    }

    /**
    * * Field Name: RunName
    * * Display Name: Run Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Optional name for the prompt run to help identify and tag runs for easier reference
    */
    get RunName(): string | null {
        return this.Get('RunName');
    }
    set RunName(value: string | null) {
        this.Set('RunName', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Human-readable notes and comments about this prompt run
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: Prompt
    * * Display Name: Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get Prompt(): string {
        return this.Get('Prompt');
    }

    /**
    * * Field Name: Model
    * * Display Name: Model
    * * SQL Data Type: nvarchar(50)
    */
    get Model(): string {
        return this.Get('Model');
    }

    /**
    * * Field Name: Vendor
    * * Display Name: Vendor
    * * SQL Data Type: nvarchar(50)
    */
    get Vendor(): string {
        return this.Get('Vendor');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(100)
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }

    /**
    * * Field Name: OriginalModel
    * * Display Name: Original Model
    * * SQL Data Type: nvarchar(50)
    */
    get OriginalModel(): string | null {
        return this.Get('OriginalModel');
    }

    /**
    * * Field Name: Judge
    * * Display Name: Judge
    * * SQL Data Type: nvarchar(255)
    */
    get Judge(): string | null {
        return this.Get('Judge');
    }

    /**
    * * Field Name: ChildPrompt
    * * Display Name: Child Prompt
    * * SQL Data Type: nvarchar(255)
    */
    get ChildPrompt(): string | null {
        return this.Get('ChildPrompt');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }

    /**
    * * Field Name: RootRerunFromPromptRunID
    * * Display Name: Root Rerun From Prompt Run ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootRerunFromPromptRunID(): string | null {
        return this.Get('RootRerunFromPromptRunID');
    }
}


/**
 * MJ: AI Vendor Type Definitions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIVendorTypeDefinition
 * * Base View: vwAIVendorTypeDefinitions
 * * @description Defines the possible types of AI vendors, such as Model Developer or Inference Provider.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Vendor Type Definitions')
export class AIVendorTypeDefinitionEntity extends BaseEntity<AIVendorTypeDefinitionEntityType> {
    /**
    * Loads the MJ: AI Vendor Type Definitions record from the database
    * @param ID: string - primary key value to load the MJ: AI Vendor Type Definitions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIVendorTypeDefinitionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    * * Description: The name of the vendor type.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the vendor type.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * MJ: AI Vendor Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIVendorType
 * * Base View: vwAIVendorTypes
 * * @description Associates vendors with their types (Model Developer, Inference Provider) and tracks the status of each role.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Vendor Types')
export class AIVendorTypeEntity extends BaseEntity<AIVendorTypeEntityType> {
    /**
    * Loads the MJ: AI Vendor Types record from the database
    * @param ID: string - primary key value to load the MJ: AI Vendor Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIVendorTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: AI Vendor Types entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Rank: This rule ensures that the Rank value cannot be negative. It must be zero or higher.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateRankIsNonNegative(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the Rank value cannot be negative. It must be zero or higher.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateRankIsNonNegative(result: ValidationResult) {
    	if (this.Rank < 0) {
    		result.Errors.push(new ValidationErrorInfo("Rank", "Rank must be zero or greater.", this.Rank, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: VendorID
    * * Display Name: Vendor ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Vendors (vwAIVendors.ID)
    */
    get VendorID(): string {
        return this.Get('VendorID');
    }
    set VendorID(value: string) {
        this.Set('VendorID', value);
    }

    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: AI Vendor Type Definitions (vwAIVendorTypeDefinitions.ID)
    */
    get TypeID(): string {
        return this.Get('TypeID');
    }
    set TypeID(value: string) {
        this.Set('TypeID', value);
    }

    /**
    * * Field Name: Rank
    * * Display Name: Rank
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Determines the priority rank of this type for the vendor. Higher values indicate higher priority.
    */
    get Rank(): number {
        return this.Get('Rank');
    }
    set Rank(value: number) {
        this.Set('Rank', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Inactive
    *   * Preview
    * * Description: The current status of this vendor type. Values include Active, Inactive, Deprecated, and Preview.
    */
    get Status(): 'Active' | 'Deprecated' | 'Inactive' | 'Preview' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Deprecated' | 'Inactive' | 'Preview') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Vendor
    * * Display Name: Vendor
    * * SQL Data Type: nvarchar(50)
    */
    get Vendor(): string {
        return this.Get('Vendor');
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    */
    get Type(): string {
        return this.Get('Type');
    }
}


/**
 * MJ: AI Vendors - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: AIVendor
 * * Base View: vwAIVendors
 * * @description Stores information about AI vendors providing models and/or inference services.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: AI Vendors')
export class AIVendorEntity extends BaseEntity<AIVendorEntityType> {
    /**
    * Loads the MJ: AI Vendors record from the database
    * @param ID: string - primary key value to load the MJ: AI Vendors record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof AIVendorEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    * * Description: The unique name of the vendor.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the vendor and their AI offerings.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * MJ: Artifact Permissions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ArtifactPermission
 * * Base View: vwArtifactPermissions
 * * @description Manages user permissions for artifacts with granular access control (Read, Edit, Delete, Share)
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Artifact Permissions')
export class ArtifactPermissionEntity extends BaseEntity<ArtifactPermissionEntityType> {
    /**
    * Loads the MJ: Artifact Permissions record from the database
    * @param ID: string - primary key value to load the MJ: Artifact Permissions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ArtifactPermissionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ArtifactID
    * * Display Name: Artifact ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifacts (vwArtifacts.ID)
    */
    get ArtifactID(): string {
        return this.Get('ArtifactID');
    }
    set ArtifactID(value: string) {
        this.Set('ArtifactID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: CanRead
    * * Display Name: Can Read
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Whether the user can view/read the artifact
    */
    get CanRead(): boolean {
        return this.Get('CanRead');
    }
    set CanRead(value: boolean) {
        this.Set('CanRead', value);
    }

    /**
    * * Field Name: CanEdit
    * * Display Name: Can Edit
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether the user can modify the artifact or create new versions
    */
    get CanEdit(): boolean {
        return this.Get('CanEdit');
    }
    set CanEdit(value: boolean) {
        this.Set('CanEdit', value);
    }

    /**
    * * Field Name: CanDelete
    * * Display Name: Can Delete
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether the user can delete the artifact
    */
    get CanDelete(): boolean {
        return this.Get('CanDelete');
    }
    set CanDelete(value: boolean) {
        this.Set('CanDelete', value);
    }

    /**
    * * Field Name: CanShare
    * * Display Name: Can Share
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether the user can share the artifact with other users
    */
    get CanShare(): boolean {
        return this.Get('CanShare');
    }
    set CanShare(value: boolean) {
        this.Set('CanShare', value);
    }

    /**
    * * Field Name: SharedByUserID
    * * Display Name: Shared By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: Foreign key to the User who shared this artifact (if shared)
    */
    get SharedByUserID(): string | null {
        return this.Get('SharedByUserID');
    }
    set SharedByUserID(value: string | null) {
        this.Set('SharedByUserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Artifact
    * * Display Name: Artifact
    * * SQL Data Type: nvarchar(255)
    */
    get Artifact(): string {
        return this.Get('Artifact');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: SharedByUser
    * * Display Name: Shared By User
    * * SQL Data Type: nvarchar(100)
    */
    get SharedByUser(): string | null {
        return this.Get('SharedByUser');
    }
}


/**
 * MJ: Artifact Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ArtifactType
 * * Base View: vwArtifactTypes
 * * @description Defines the types of artifacts that can be created within conversations
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Artifact Types')
export class ArtifactTypeEntity extends BaseEntity<ArtifactTypeEntityType> {
    /**
    * Loads the MJ: Artifact Types record from the database
    * @param ID: string - primary key value to load the MJ: Artifact Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ArtifactTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    * * Description: Display name of the artifact type
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the artifact type
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ContentType
    * * Display Name: Content Type
    * * SQL Data Type: nvarchar(100)
    * * Description: MIME type or content identifier for this artifact type
    */
    get ContentType(): string {
        return this.Get('ContentType');
    }
    set ContentType(value: string) {
        this.Set('ContentType', value);
    }

    /**
    * * Field Name: IsEnabled
    * * Display Name: Is Enabled
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if this artifact type is currently available for use
    */
    get IsEnabled(): boolean {
        return this.Get('IsEnabled');
    }
    set IsEnabled(value: boolean) {
        this.Set('IsEnabled', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)
    * * Description: Parent artifact type ID for hierarchical artifact type organization. Child types inherit ExtractRules from parent but can override.
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: ExtractRules
    * * Display Name: Extract Rules
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of extraction rules defining how to extract attributes from artifact content. Each rule has: name (string), description (string), type (TypeScript type), standardProperty ('name'|'description'|'displayMarkdown'|'displayHtml'|null), extractor (JavaScript code string). Child types inherit parent rules and can override by name.
    */
    get ExtractRules(): string | null {
        return this.Get('ExtractRules');
    }
    set ExtractRules(value: string | null) {
        this.Set('ExtractRules', value);
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(255)
    * * Description: Driver class name for the artifact viewer plugin. References Angular component registered with @RegisterClass decorator.
    */
    get DriverClass(): string | null {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string | null) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * MJ: Artifact Version Attributes - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ArtifactVersionAttribute
 * * Base View: vwArtifactVersionAttributes
 * * @description Stores extracted attribute values from artifact content based on ArtifactType ExtractRules. Prevents re-running extraction logic on every access.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Artifact Version Attributes')
export class ArtifactVersionAttributeEntity extends BaseEntity<ArtifactVersionAttributeEntityType> {
    /**
    * Loads the MJ: Artifact Version Attributes record from the database
    * @param ID: string - primary key value to load the MJ: Artifact Version Attributes record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ArtifactVersionAttributeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ArtifactVersionID
    * * Display Name: Artifact Version ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifact Versions (vwArtifactVersions.ID)
    * * Description: The artifact version this attribute belongs to
    */
    get ArtifactVersionID(): string {
        return this.Get('ArtifactVersionID');
    }
    set ArtifactVersionID(value: string) {
        this.Set('ArtifactVersionID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the extracted attribute (matches ExtractRule.name)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(500)
    * * Description: TypeScript type definition of the value (e.g., 'string', 'number', 'Date', 'Array<{x: number, y: string}>')
    */
    get Type(): string {
        return this.Get('Type');
    }
    set Type(value: string) {
        this.Set('Type', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON-serialized extracted value
    */
    get Value(): string | null {
        return this.Get('Value');
    }
    set Value(value: string | null) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: StandardProperty
    * * Display Name: Standard Property
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * description
    *   * displayHtml
    *   * displayMarkdown
    *   * name
    * * Description: Maps this attribute to a standard property for UI rendering: 'name', 'description', 'displayMarkdown', 'displayHtml', or NULL for custom attributes
    */
    get StandardProperty(): 'description' | 'displayHtml' | 'displayMarkdown' | 'name' | null {
        return this.Get('StandardProperty');
    }
    set StandardProperty(value: 'description' | 'displayHtml' | 'displayMarkdown' | 'name' | null) {
        this.Set('StandardProperty', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ArtifactVersion
    * * Display Name: Artifact Version
    * * SQL Data Type: nvarchar(255)
    */
    get ArtifactVersion(): string | null {
        return this.Get('ArtifactVersion');
    }
}


/**
 * MJ: Artifact Versions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ArtifactVersion
 * * Base View: vwArtifactVersions
 * * @description Version history for artifacts, tracking all changes over time
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Artifact Versions')
export class ArtifactVersionEntity extends BaseEntity<ArtifactVersionEntityType> {
    /**
    * Loads the MJ: Artifact Versions record from the database
    * @param ID: string - primary key value to load the MJ: Artifact Versions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ArtifactVersionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ArtifactID
    * * Display Name: Artifact ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifacts (vwArtifacts.ID)
    */
    get ArtifactID(): string {
        return this.Get('ArtifactID');
    }
    set ArtifactID(value: string) {
        this.Set('ArtifactID', value);
    }

    /**
    * * Field Name: VersionNumber
    * * Display Name: Version Number
    * * SQL Data Type: int
    * * Description: Sequential version number for this artifact
    */
    get VersionNumber(): number {
        return this.Get('VersionNumber');
    }
    set VersionNumber(value: number) {
        this.Set('VersionNumber', value);
    }

    /**
    * * Field Name: Content
    * * Display Name: Content
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The content of the artifact at this version
    */
    get Content(): string | null {
        return this.Get('Content');
    }
    set Content(value: string | null) {
        this.Set('Content', value);
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration for this version
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }
    set Configuration(value: string | null) {
        this.Set('Configuration', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: User comments specific to this version
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ContentHash
    * * Display Name: Content Hash
    * * SQL Data Type: nvarchar(500)
    * * Description: SHA-256 hash of the Content field for duplicate detection and version comparison
    */
    get ContentHash(): string | null {
        return this.Get('ContentHash');
    }
    set ContentHash(value: string | null) {
        this.Set('ContentHash', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of this artifact version. Can differ from Artifact.Name as it may evolve with versions.
    */
    get Name(): string | null {
        return this.Get('Name');
    }
    set Name(value: string | null) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of this artifact version. Can differ from Artifact.Description as it may evolve with versions.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Artifact
    * * Display Name: Artifact
    * * SQL Data Type: nvarchar(255)
    */
    get Artifact(): string {
        return this.Get('Artifact');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * MJ: Artifacts - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Artifact
 * * Base View: vwArtifacts
 * * @description Independent content items (code, documents, charts) that can be linked to multiple conversations and collections. Supports versioning and sharing.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Artifacts')
export class ArtifactEntity extends BaseEntity<ArtifactEntityType> {
    /**
    * Loads the MJ: Artifacts record from the database
    * @param ID: string - primary key value to load the MJ: Artifacts record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ArtifactEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EnvironmentID
    * * Display Name: Environment ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
    * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09
    */
    get EnvironmentID(): string {
        return this.Get('EnvironmentID');
    }
    set EnvironmentID(value: string) {
        this.Set('EnvironmentID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Display name for the artifact
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the artifact contents and purpose
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)
    */
    get TypeID(): string {
        return this.Get('TypeID');
    }
    set TypeID(value: string) {
        this.Set('TypeID', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: User comments about the artifact
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Visibility
    * * Display Name: Visibility
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Always
    * * Value List Type: List
    * * Possible Values 
    *   * Always
    *   * System Only
    * * Description: Controls artifact visibility in user-facing lists. "Always" shows in all lists, "System Only" hides from normal views (for system-generated artifacts like agent routing payloads).
    */
    get Visibility(): 'Always' | 'System Only' {
        return this.Get('Visibility');
    }
    set Visibility(value: 'Always' | 'System Only') {
        this.Set('Visibility', value);
    }

    /**
    * * Field Name: Environment
    * * Display Name: Environment
    * * SQL Data Type: nvarchar(255)
    */
    get Environment(): string {
        return this.Get('Environment');
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(100)
    */
    get Type(): string {
        return this.Get('Type');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * MJ: Collection Artifacts - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CollectionArtifact
 * * Base View: vwCollectionArtifacts
 * * @description Links collections to specific artifact versions. Each collection can contain multiple versions of the same artifact.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Collection Artifacts')
export class CollectionArtifactEntity extends BaseEntity<CollectionArtifactEntityType> {
    /**
    * Loads the MJ: Collection Artifacts record from the database
    * @param ID: string - primary key value to load the MJ: Collection Artifacts record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CollectionArtifactEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CollectionID
    * * Display Name: Collection ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Collections (vwCollections.ID)
    */
    get CollectionID(): string {
        return this.Get('CollectionID');
    }
    set CollectionID(value: string) {
        this.Set('CollectionID', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Sequence number for ordering artifacts within a collection
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ArtifactVersionID
    * * Display Name: Artifact Version ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifact Versions (vwArtifactVersions.ID)
    * * Description: Required. Specific version of the artifact saved to this collection. Collections store version-specific artifacts to enable proper version tracking and Links tab filtering.
    */
    get ArtifactVersionID(): string {
        return this.Get('ArtifactVersionID');
    }
    set ArtifactVersionID(value: string) {
        this.Set('ArtifactVersionID', value);
    }

    /**
    * * Field Name: Collection
    * * Display Name: Collection
    * * SQL Data Type: nvarchar(255)
    */
    get Collection(): string {
        return this.Get('Collection');
    }

    /**
    * * Field Name: ArtifactVersion
    * * Display Name: Artifact Version
    * * SQL Data Type: nvarchar(255)
    */
    get ArtifactVersion(): string | null {
        return this.Get('ArtifactVersion');
    }
}


/**
 * MJ: Collection Permissions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: CollectionPermission
 * * Base View: vwCollectionPermissions
 * * @description Manages sharing permissions for collections, allowing granular access control
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Collection Permissions')
export class CollectionPermissionEntity extends BaseEntity<CollectionPermissionEntityType> {
    /**
    * Loads the MJ: Collection Permissions record from the database
    * @param ID: string - primary key value to load the MJ: Collection Permissions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CollectionPermissionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: CollectionID
    * * Display Name: Collection ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Collections (vwCollections.ID)
    */
    get CollectionID(): string {
        return this.Get('CollectionID');
    }
    set CollectionID(value: string) {
        this.Set('CollectionID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: CanRead
    * * Display Name: Can Read
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Always 1 - users must have read permission to access a shared collection
    */
    get CanRead(): boolean {
        return this.Get('CanRead');
    }
    set CanRead(value: boolean) {
        this.Set('CanRead', value);
    }

    /**
    * * Field Name: CanShare
    * * Display Name: Can Share
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Can share this collection with others (but cannot grant more permissions than they have)
    */
    get CanShare(): boolean {
        return this.Get('CanShare');
    }
    set CanShare(value: boolean) {
        this.Set('CanShare', value);
    }

    /**
    * * Field Name: CanEdit
    * * Display Name: Can Edit
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Can add/remove artifacts to/from this collection
    */
    get CanEdit(): boolean {
        return this.Get('CanEdit');
    }
    set CanEdit(value: boolean) {
        this.Set('CanEdit', value);
    }

    /**
    * * Field Name: CanDelete
    * * Display Name: Can Delete
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Can delete the collection, child collections, and artifacts
    */
    get CanDelete(): boolean {
        return this.Get('CanDelete');
    }
    set CanDelete(value: boolean) {
        this.Set('CanDelete', value);
    }

    /**
    * * Field Name: SharedByUserID
    * * Display Name: Shared By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: The user who shared this collection (NULL if shared by owner)
    */
    get SharedByUserID(): string | null {
        return this.Get('SharedByUserID');
    }
    set SharedByUserID(value: string | null) {
        this.Set('SharedByUserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Collection
    * * Display Name: Collection
    * * SQL Data Type: nvarchar(255)
    */
    get Collection(): string {
        return this.Get('Collection');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: SharedByUser
    * * Display Name: Shared By User
    * * SQL Data Type: nvarchar(100)
    */
    get SharedByUser(): string | null {
        return this.Get('SharedByUser');
    }
}


/**
 * MJ: Collections - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Collection
 * * Base View: vwCollections
 * * @description Organizational folders for storing and categorizing artifacts. Supports nested folder structure for hierarchical organization.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Collections')
export class CollectionEntity extends BaseEntity<CollectionEntityType> {
    /**
    * Loads the MJ: Collections record from the database
    * @param ID: string - primary key value to load the MJ: Collections record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof CollectionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EnvironmentID
    * * Display Name: Environment ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
    * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09
    */
    get EnvironmentID(): string {
        return this.Get('EnvironmentID');
    }
    set EnvironmentID(value: string) {
        this.Set('EnvironmentID', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Collections (vwCollections.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Display name for the collection
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the collection purpose
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Icon
    * * Display Name: Icon
    * * SQL Data Type: nvarchar(50)
    * * Description: Font Awesome icon class for UI display
    */
    get Icon(): string | null {
        return this.Get('Icon');
    }
    set Icon(value: string | null) {
        this.Set('Icon', value);
    }

    /**
    * * Field Name: Color
    * * Display Name: Color
    * * SQL Data Type: nvarchar(7)
    * * Description: Hex color code for UI display (#RRGGBB format)
    */
    get Color(): string | null {
        return this.Get('Color');
    }
    set Color(value: string | null) {
        this.Set('Color', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: Display sequence for ordering collections in UI
    */
    get Sequence(): number | null {
        return this.Get('Sequence');
    }
    set Sequence(value: number | null) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: OwnerID
    * * Display Name: Owner ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: The user who owns this collection and has full permissions
    */
    get OwnerID(): string | null {
        return this.Get('OwnerID');
    }
    set OwnerID(value: string | null) {
        this.Set('OwnerID', value);
    }

    /**
    * * Field Name: Environment
    * * Display Name: Environment
    * * SQL Data Type: nvarchar(255)
    */
    get Environment(): string {
        return this.Get('Environment');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: Owner
    * * Display Name: Owner
    * * SQL Data Type: nvarchar(100)
    */
    get Owner(): string | null {
        return this.Get('Owner');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * MJ: Component Dependencies - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ComponentDependency
 * * Base View: vwComponentDependencies
 * * @description Tracks component-to-component dependencies for composition
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Component Dependencies')
export class ComponentDependencyEntity extends BaseEntity<ComponentDependencyEntityType> {
    /**
    * Loads the MJ: Component Dependencies record from the database
    * @param ID: string - primary key value to load the MJ: Component Dependencies record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ComponentDependencyEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Primary key for component dependency
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ComponentID
    * * Display Name: Component ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Components (vwComponents.ID)
    * * Description: Foreign key to parent Component that has the dependency
    */
    get ComponentID(): string {
        return this.Get('ComponentID');
    }
    set ComponentID(value: string) {
        this.Set('ComponentID', value);
    }

    /**
    * * Field Name: DependencyComponentID
    * * Display Name: Dependency Component ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Components (vwComponents.ID)
    * * Description: Foreign key to the Component that is depended upon
    */
    get DependencyComponentID(): string {
        return this.Get('DependencyComponentID');
    }
    set DependencyComponentID(value: string) {
        this.Set('DependencyComponentID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Component
    * * Display Name: Component
    * * SQL Data Type: nvarchar(500)
    */
    get Component(): string {
        return this.Get('Component');
    }

    /**
    * * Field Name: DependencyComponent
    * * Display Name: Dependency Component
    * * SQL Data Type: nvarchar(500)
    */
    get DependencyComponent(): string {
        return this.Get('DependencyComponent');
    }
}


/**
 * MJ: Component Libraries - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ComponentLibrary
 * * Base View: vwComponentLibraries
 * * @description Catalog of third-party JavaScript libraries that components can depend on
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Component Libraries')
export class ComponentLibraryEntity extends BaseEntity<ComponentLibraryEntityType> {
    /**
    * Loads the MJ: Component Libraries record from the database
    * @param ID: string - primary key value to load the MJ: Component Libraries record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ComponentLibraryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Primary key for the component library
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(500)
    * * Description: NPM-style package name (e.g., recharts, lodash, @memberjunction/lib-name)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(500)
    * * Description: User-friendly display name for the library
    */
    get DisplayName(): string | null {
        return this.Get('DisplayName');
    }
    set DisplayName(value: string | null) {
        this.Set('DisplayName', value);
    }

    /**
    * * Field Name: Version
    * * Display Name: Version
    * * SQL Data Type: nvarchar(100)
    * * Description: Library version number
    */
    get Version(): string | null {
        return this.Get('Version');
    }
    set Version(value: string | null) {
        this.Set('Version', value);
    }

    /**
    * * Field Name: GlobalVariable
    * * Display Name: Global Variable
    * * SQL Data Type: nvarchar(255)
    * * Description: Global variable name when loaded (e.g., _ for lodash, React for react)
    */
    get GlobalVariable(): string | null {
        return this.Get('GlobalVariable');
    }
    set GlobalVariable(value: string | null) {
        this.Set('GlobalVariable', value);
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(100)
    * * Value List Type: List
    * * Possible Values 
    *   * Charting
    *   * Core
    *   * Other
    *   * Runtime
    *   * UI
    *   * Utility
    * * Description: Library category: Core, Runtime, UI, Charting, Utility, or Other
    */
    get Category(): 'Charting' | 'Core' | 'Other' | 'Runtime' | 'UI' | 'Utility' | null {
        return this.Get('Category');
    }
    set Category(value: 'Charting' | 'Core' | 'Other' | 'Runtime' | 'UI' | 'Utility' | null) {
        this.Set('Category', value);
    }

    /**
    * * Field Name: CDNUrl
    * * Display Name: CDN Url
    * * SQL Data Type: nvarchar(1000)
    * * Description: CDN URL for loading the library JavaScript
    */
    get CDNUrl(): string | null {
        return this.Get('CDNUrl');
    }
    set CDNUrl(value: string | null) {
        this.Set('CDNUrl', value);
    }

    /**
    * * Field Name: CDNCssUrl
    * * Display Name: CDN Css Url
    * * SQL Data Type: nvarchar(1000)
    * * Description: Optional CDN URL for loading library CSS
    */
    get CDNCssUrl(): string | null {
        return this.Get('CDNCssUrl');
    }
    set CDNCssUrl(value: string | null) {
        this.Set('CDNCssUrl', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the library and its capabilities
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Disabled
    * * Description: Status of the component library. Active: fully supported; Deprecated: works but shows console warning; Disabled: throws error if used
    */
    get Status(): 'Active' | 'Deprecated' | 'Disabled' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Deprecated' | 'Disabled') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: LintRules
    * * Display Name: Lint Rules
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration for library-specific lint rules that are applied during component validation. This field contains structured rules that define how components using this library should be validated, including DOM element requirements, initialization patterns, lifecycle methods, and common error patterns. Example structure: {"initialization": {"constructorName": "Chart", "elementType": "canvas"}, "lifecycle": {"requiredMethods": ["render"], "cleanupMethods": ["destroy"]}}. The linter dynamically applies these rules based on the libraries referenced in a component spec, enabling extensible validation without hardcoding library-specific logic.
    */
    get LintRules(): string | null {
        return this.Get('LintRules');
    }
    set LintRules(value: string | null) {
        this.Set('LintRules', value);
    }

    /**
    * * Field Name: Dependencies
    * * Display Name: Dependencies
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON object defining dependencies for this component library. Format: { "libraryName": "versionSpec", ... }. Version specifications follow NPM-style syntax (e.g., "~1.0.0", "^1.2.3", "2.3.4"). Dependencies are loaded before this library to ensure proper execution context.
    */
    get Dependencies(): string | null {
        return this.Get('Dependencies');
    }
    set Dependencies(value: string | null) {
        this.Set('Dependencies', value);
    }

    /**
    * * Field Name: UsageType
    * * Display Name: Usage Type
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Both
    * * Value List Type: List
    * * Possible Values 
    *   * Both
    *   * Dependency
    *   * Direct
    * * Description: Controls how the library can be used: Direct (by components), Dependency (only as dependency), or Both
    */
    get UsageType(): 'Both' | 'Dependency' | 'Direct' {
        return this.Get('UsageType');
    }
    set UsageType(value: 'Both' | 'Dependency' | 'Direct') {
        this.Set('UsageType', value);
    }
}


/**
 * MJ: Component Library Links - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ComponentLibraryLink
 * * Base View: vwComponentLibraryLinks
 * * @description Links components to their third-party library dependencies
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Component Library Links')
export class ComponentLibraryLinkEntity extends BaseEntity<ComponentLibraryLinkEntityType> {
    /**
    * Loads the MJ: Component Library Links record from the database
    * @param ID: string - primary key value to load the MJ: Component Library Links record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ComponentLibraryLinkEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Primary key for component-library relationship
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ComponentID
    * * Display Name: Component ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Components (vwComponents.ID)
    * * Description: Foreign key to Component that depends on the library
    */
    get ComponentID(): string {
        return this.Get('ComponentID');
    }
    set ComponentID(value: string) {
        this.Set('ComponentID', value);
    }

    /**
    * * Field Name: LibraryID
    * * Display Name: Library ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Component Libraries (vwComponentLibraries.ID)
    * * Description: Foreign key to ComponentLibrary that the component depends on
    */
    get LibraryID(): string {
        return this.Get('LibraryID');
    }
    set LibraryID(value: string) {
        this.Set('LibraryID', value);
    }

    /**
    * * Field Name: MinVersion
    * * Display Name: Min Version
    * * SQL Data Type: nvarchar(100)
    * * Description: Minimum version requirement using semantic versioning (e.g., ^1.0.0, ~2.5.0)
    */
    get MinVersion(): string | null {
        return this.Get('MinVersion');
    }
    set MinVersion(value: string | null) {
        this.Set('MinVersion', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Component
    * * Display Name: Component
    * * SQL Data Type: nvarchar(500)
    */
    get Component(): string {
        return this.Get('Component');
    }

    /**
    * * Field Name: Library
    * * Display Name: Library
    * * SQL Data Type: nvarchar(500)
    */
    get Library(): string {
        return this.Get('Library');
    }
}


/**
 * MJ: Component Registries - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ComponentRegistry
 * * Base View: vwComponentRegistries
 * * @description Registry catalog for component sources, similar to NPM registry but supporting multiple sources
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Component Registries')
export class ComponentRegistryEntity extends BaseEntity<ComponentRegistryEntityType> {
    /**
    * Loads the MJ: Component Registries record from the database
    * @param ID: string - primary key value to load the MJ: Component Registries record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ComponentRegistryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Primary key for the component registry
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the registry (e.g., MemberJunction Registry, NPM, Internal Registry)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the registry and its purpose
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: URI
    * * Display Name: URI
    * * SQL Data Type: nvarchar(500)
    * * Description: Registry endpoint URI (e.g., https://registry.memberjunction.org)
    */
    get URI(): string | null {
        return this.Get('URI');
    }
    set URI(value: string | null) {
        this.Set('URI', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Internal
    *   * Private
    *   * Public
    * * Description: Type of registry: public, private, or internal
    */
    get Type(): 'Internal' | 'Private' | 'Public' | null {
        return this.Get('Type');
    }
    set Type(value: 'Internal' | 'Private' | 'Public' | null) {
        this.Set('Type', value);
    }

    /**
    * * Field Name: APIVersion
    * * Display Name: API Version
    * * SQL Data Type: nvarchar(50)
    * * Description: API version supported by the registry for compatibility
    */
    get APIVersion(): string | null {
        return this.Get('APIVersion');
    }
    set APIVersion(value: string | null) {
        this.Set('APIVersion', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Deprecated
    *   * Offline
    * * Description: Current status of the registry: active, deprecated, or offline
    */
    get Status(): 'Active' | 'Deprecated' | 'Offline' | null {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Deprecated' | 'Offline' | null) {
        this.Set('Status', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * MJ: Components - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Component
 * * Base View: vwComponents
 * * @description Main catalog of reusable components with versioning and registry support
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Components')
export class ComponentEntity extends BaseEntity<ComponentEntityType> {
    /**
    * Loads the MJ: Components record from the database
    * @param ID: string - primary key value to load the MJ: Components record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ComponentEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Immutable UUID that remains the same across all systems
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Namespace
    * * Display Name: Namespace
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Hierarchical namespace path (e.g., dashboards/sales for local, @memberjunction/dashboards/financial for external)
    */
    get Namespace(): string | null {
        return this.Get('Namespace');
    }
    set Namespace(value: string | null) {
        this.Set('Namespace', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(500)
    * * Description: Component name within the namespace (e.g., revenue-tracker)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Version
    * * Display Name: Version
    * * SQL Data Type: nvarchar(50)
    * * Description: Semantic version number (e.g., 1.0.0, 1.2.3-beta)
    */
    get Version(): string {
        return this.Get('Version');
    }
    set Version(value: string) {
        this.Set('Version', value);
    }

    /**
    * * Field Name: VersionSequence
    * * Display Name: Version Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Numeric sequence for sorting versions
    */
    get VersionSequence(): number {
        return this.Get('VersionSequence');
    }
    set VersionSequence(value: number) {
        this.Set('VersionSequence', value);
    }

    /**
    * * Field Name: Title
    * * Display Name: Title
    * * SQL Data Type: nvarchar(1000)
    * * Description: User-friendly display title for the component
    */
    get Title(): string | null {
        return this.Get('Title');
    }
    set Title(value: string | null) {
        this.Set('Title', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the component functionality
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(255)
    * * Value List Type: List
    * * Possible Values 
    *   * Chart
    *   * Dashboard
    *   * Form
    *   * Navigation
    *   * Other
    *   * Report
    *   * Search
    *   * Table
    *   * Utility
    *   * Widget
    * * Description: Component type: report, dashboard, form, table, chart, navigation, search, widget, utility, or other
    */
    get Type(): 'Chart' | 'Dashboard' | 'Form' | 'Navigation' | 'Other' | 'Report' | 'Search' | 'Table' | 'Utility' | 'Widget' | null {
        return this.Get('Type');
    }
    set Type(value: 'Chart' | 'Dashboard' | 'Form' | 'Navigation' | 'Other' | 'Report' | 'Search' | 'Table' | 'Utility' | 'Widget' | null) {
        this.Set('Type', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Deprecated
    *   * Draft
    *   * Published
    * * Description: Publication status: draft, published, or deprecated
    */
    get Status(): 'Deprecated' | 'Draft' | 'Published' | null {
        return this.Get('Status');
    }
    set Status(value: 'Deprecated' | 'Draft' | 'Published' | null) {
        this.Set('Status', value);
    }

    /**
    * * Field Name: DeveloperName
    * * Display Name: Developer Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the component developer or author
    */
    get DeveloperName(): string | null {
        return this.Get('DeveloperName');
    }
    set DeveloperName(value: string | null) {
        this.Set('DeveloperName', value);
    }

    /**
    * * Field Name: DeveloperEmail
    * * Display Name: Developer Email
    * * SQL Data Type: nvarchar(255)
    * * Description: Contact email for the component developer
    */
    get DeveloperEmail(): string | null {
        return this.Get('DeveloperEmail');
    }
    set DeveloperEmail(value: string | null) {
        this.Set('DeveloperEmail', value);
    }

    /**
    * * Field Name: DeveloperOrganization
    * * Display Name: Developer Organization
    * * SQL Data Type: nvarchar(255)
    * * Description: Organization name of the component developer
    */
    get DeveloperOrganization(): string | null {
        return this.Get('DeveloperOrganization');
    }
    set DeveloperOrganization(value: string | null) {
        this.Set('DeveloperOrganization', value);
    }

    /**
    * * Field Name: SourceRegistryID
    * * Display Name: Source Registry ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Component Registries (vwComponentRegistries.ID)
    * * Description: Foreign key to ComponentRegistry - NULL for local components, populated for replicated ones
    */
    get SourceRegistryID(): string | null {
        return this.Get('SourceRegistryID');
    }
    set SourceRegistryID(value: string | null) {
        this.Set('SourceRegistryID', value);
    }

    /**
    * * Field Name: ReplicatedAt
    * * Display Name: Replicated At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp when the component was replicated from external registry (NULL for local components)
    */
    get ReplicatedAt(): Date | null {
        return this.Get('ReplicatedAt');
    }
    set ReplicatedAt(value: Date | null) {
        this.Set('ReplicatedAt', value);
    }

    /**
    * * Field Name: LastSyncedAt
    * * Display Name: Last Synced At
    * * SQL Data Type: datetimeoffset
    * * Description: Last synchronization timestamp with the source registry
    */
    get LastSyncedAt(): Date | null {
        return this.Get('LastSyncedAt');
    }
    set LastSyncedAt(value: Date | null) {
        this.Set('LastSyncedAt', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Specification
    * * Display Name: Specification
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Complete JSON specification object for the component
    */
    get Specification(): string {
        return this.Get('Specification');
    }
    set Specification(value: string) {
        this.Set('Specification', value);
    }

    /**
    * * Field Name: FunctionalRequirements
    * * Display Name: Functional Requirements
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Functional requirements describing what the component should accomplish
    */
    get FunctionalRequirements(): string | null {
        return this.Get('FunctionalRequirements');
    }
    set FunctionalRequirements(value: string | null) {
        this.Set('FunctionalRequirements', value);
    }

    /**
    * * Field Name: TechnicalDesign
    * * Display Name: Technical Design
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Technical design describing how the component is implemented
    */
    get TechnicalDesign(): string | null {
        return this.Get('TechnicalDesign');
    }
    set TechnicalDesign(value: string | null) {
        this.Set('TechnicalDesign', value);
    }

    /**
    * * Field Name: FunctionalRequirementsVector
    * * Display Name: Functional Requirements Vector
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Vector embedding of the functional requirements for similarity search
    */
    get FunctionalRequirementsVector(): string | null {
        return this.Get('FunctionalRequirementsVector');
    }
    set FunctionalRequirementsVector(value: string | null) {
        this.Set('FunctionalRequirementsVector', value);
    }

    /**
    * * Field Name: TechnicalDesignVector
    * * Display Name: Technical Design Vector
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Vector embedding of the technical design for similarity search
    */
    get TechnicalDesignVector(): string | null {
        return this.Get('TechnicalDesignVector');
    }
    set TechnicalDesignVector(value: string | null) {
        this.Set('TechnicalDesignVector', value);
    }

    /**
    * * Field Name: HasCustomProps
    * * Display Name: Has Custom Props
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the component has custom properties defined in its specification. Components with custom props cannot be used directly by deterministic containers.
    */
    get HasCustomProps(): boolean {
        return this.Get('HasCustomProps');
    }
    set HasCustomProps(value: boolean) {
        this.Set('HasCustomProps', value);
    }

    /**
    * * Field Name: HasCustomEvents
    * * Display Name: Has Custom Events
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the component has custom events defined in its specification. Components with custom events may have limited functionality in generic containers.
    */
    get HasCustomEvents(): boolean {
        return this.Get('HasCustomEvents');
    }
    set HasCustomEvents(value: boolean) {
        this.Set('HasCustomEvents', value);
    }

    /**
    * * Field Name: RequiresData
    * * Display Name: Requires Data
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the component requires data access (utilities object with md, rv, rq). Used to determine if component needs data context.
    */
    get RequiresData(): boolean {
        return this.Get('RequiresData');
    }
    set RequiresData(value: boolean) {
        this.Set('RequiresData', value);
    }

    /**
    * * Field Name: DependencyCount
    * * Display Name: Dependency Count
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Number of component dependencies defined in the specification. Used to assess component complexity.
    */
    get DependencyCount(): number {
        return this.Get('DependencyCount');
    }
    set DependencyCount(value: number) {
        this.Set('DependencyCount', value);
    }

    /**
    * * Field Name: TechnicalDesignVectorEmbeddingModelID
    * * Display Name: Technical Design Vector Embedding Model ID
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The ID of the AI model used to generate the vector embedding for the technical design
    */
    get TechnicalDesignVectorEmbeddingModelID(): string | null {
        return this.Get('TechnicalDesignVectorEmbeddingModelID');
    }
    set TechnicalDesignVectorEmbeddingModelID(value: string | null) {
        this.Set('TechnicalDesignVectorEmbeddingModelID', value);
    }

    /**
    * * Field Name: FunctionalRequirementsVectorEmbeddingModelID
    * * Display Name: Functional Requirements Vector Embedding Model ID
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The ID of the AI model used to generate the vector embedding for the functional requirements
    */
    get FunctionalRequirementsVectorEmbeddingModelID(): string | null {
        return this.Get('FunctionalRequirementsVectorEmbeddingModelID');
    }
    set FunctionalRequirementsVectorEmbeddingModelID(value: string | null) {
        this.Set('FunctionalRequirementsVectorEmbeddingModelID', value);
    }

    /**
    * * Field Name: HasRequiredCustomProps
    * * Display Name: Has Required Custom Props
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether the component has any custom properties that are marked as required. This is auto-calculated based on the component's properties array to identify components with mandatory custom configuration.
    */
    get HasRequiredCustomProps(): boolean {
        return this.Get('HasRequiredCustomProps');
    }
    set HasRequiredCustomProps(value: boolean) {
        this.Set('HasRequiredCustomProps', value);
    }

    /**
    * * Field Name: SourceRegistry
    * * Display Name: Source Registry
    * * SQL Data Type: nvarchar(255)
    */
    get SourceRegistry(): string | null {
        return this.Get('SourceRegistry');
    }
}


/**
 * MJ: Conversation Artifact Permissions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ConversationArtifactPermission
 * * Base View: vwConversationArtifactPermissions
 * * @description Manages user permissions for conversation artifacts
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'MJ: Conversation Artifact Permissions')
export class ConversationArtifactPermissionEntity extends BaseEntity<ConversationArtifactPermissionEntityType> {
    /**
    * Loads the MJ: Conversation Artifact Permissions record from the database
    * @param ID: string - primary key value to load the MJ: Conversation Artifact Permissions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ConversationArtifactPermissionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ConversationArtifactID
    * * Display Name: Conversation Artifact ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Conversation Artifacts (vwConversationArtifacts.ID)
    * * Description: Reference to the artifact this permission applies to
    */
    get ConversationArtifactID(): string {
        return this.Get('ConversationArtifactID');
    }
    set ConversationArtifactID(value: string) {
        this.Set('ConversationArtifactID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Description: User this permission applies to
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: AccessLevel
    * * Display Name: Access Level
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Edit
    *   * Owner
    *   * Read
    * * Description: Level of access granted (Read, Edit, Owner)
    */
    get AccessLevel(): 'Edit' | 'Owner' | 'Read' {
        return this.Get('AccessLevel');
    }
    set AccessLevel(value: 'Edit' | 'Owner' | 'Read') {
        this.Set('AccessLevel', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ConversationArtifact
    * * Display Name: Conversation Artifact
    * * SQL Data Type: nvarchar(255)
    */
    get ConversationArtifact(): string {
        return this.Get('ConversationArtifact');
    }
}


/**
 * MJ: Conversation Artifact Versions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ConversationArtifactVersion
 * * Base View: vwConversationArtifactVersions
 * * @description Stores versions of conversation artifacts
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'MJ: Conversation Artifact Versions')
export class ConversationArtifactVersionEntity extends BaseEntity<ConversationArtifactVersionEntityType> {
    /**
    * Loads the MJ: Conversation Artifact Versions record from the database
    * @param ID: string - primary key value to load the MJ: Conversation Artifact Versions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ConversationArtifactVersionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * MJ: Conversation Artifact Versions - Delete method override to wrap in transaction since CascadeDeletes is true.
    * Wrapping in a transaction ensures that all cascade delete operations are handled atomically.
    * @public
    * @method
    * @override
    * @memberof ConversationArtifactVersionEntity
    * @returns {Promise<boolean>} - true if successful, false otherwise
    */
    public async Delete(options?: EntityDeleteOptions): Promise<boolean> {
        if (Metadata.Provider.ProviderType === ProviderType.Database) {
            // For database providers, use the transaction methods directly
            const provider = Metadata.Provider as DatabaseProviderBase;
            
            try {
                await provider.BeginTransaction();
                const result = await super.Delete(options);
                
                if (result) {
                    await provider.CommitTransaction();
                    return true;
                } else {
                    await provider.RollbackTransaction();
                    return false;
                }
            } catch (error) {
                await provider.RollbackTransaction();
                throw error;
            }
        } else {
            // For network providers, cascading deletes are handled server-side
            return super.Delete(options);
        }
    }

    /**
    * Validate() method override for MJ: Conversation Artifact Versions entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Version: This rule ensures that the Version field must always be greater than 0. Any value for Version must be a positive integer.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateVersionGreaterThanZero(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the Version field must always be greater than 0. Any value for Version must be a positive integer.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateVersionGreaterThanZero(result: ValidationResult) {
    	if (this.Version <= 0) {
    		result.Errors.push(new ValidationErrorInfo("Version", "Version must be greater than zero.", this.Version, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ConversationArtifactID
    * * Display Name: Conversation Artifact ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Conversation Artifacts (vwConversationArtifacts.ID)
    * * Description: Reference to the parent artifact
    */
    get ConversationArtifactID(): string {
        return this.Get('ConversationArtifactID');
    }
    set ConversationArtifactID(value: string) {
        this.Set('ConversationArtifactID', value);
    }

    /**
    * * Field Name: Version
    * * Display Name: Version
    * * SQL Data Type: int
    * * Description: Sequential version number (starting from 1) for this artifact
    */
    get Version(): number {
        return this.Get('Version');
    }
    set Version(value: number) {
        this.Set('Version', value);
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration and metadata for this artifact version
    */
    get Configuration(): string {
        return this.Get('Configuration');
    }
    set Configuration(value: string) {
        this.Set('Configuration', value);
    }

    /**
    * * Field Name: Content
    * * Display Name: Content
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Actual content of the artifact, if stored separately from configuration
    */
    get Content(): string | null {
        return this.Get('Content');
    }
    set Content(value: string | null) {
        this.Set('Content', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: User comments specific to this version
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ConversationArtifact
    * * Display Name: Conversation Artifact
    * * SQL Data Type: nvarchar(255)
    */
    get ConversationArtifact(): string {
        return this.Get('ConversationArtifact');
    }
}


/**
 * MJ: Conversation Artifacts - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ConversationArtifact
 * * Base View: vwConversationArtifacts
 * * @description Stores metadata for artifacts created within conversations
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'MJ: Conversation Artifacts')
export class ConversationArtifactEntity extends BaseEntity<ConversationArtifactEntityType> {
    /**
    * Loads the MJ: Conversation Artifacts record from the database
    * @param ID: string - primary key value to load the MJ: Conversation Artifacts record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ConversationArtifactEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * MJ: Conversation Artifacts - Delete method override to wrap in transaction since CascadeDeletes is true.
    * Wrapping in a transaction ensures that all cascade delete operations are handled atomically.
    * @public
    * @method
    * @override
    * @memberof ConversationArtifactEntity
    * @returns {Promise<boolean>} - true if successful, false otherwise
    */
    public async Delete(options?: EntityDeleteOptions): Promise<boolean> {
        if (Metadata.Provider.ProviderType === ProviderType.Database) {
            // For database providers, use the transaction methods directly
            const provider = Metadata.Provider as DatabaseProviderBase;
            
            try {
                await provider.BeginTransaction();
                const result = await super.Delete(options);
                
                if (result) {
                    await provider.CommitTransaction();
                    return true;
                } else {
                    await provider.RollbackTransaction();
                    return false;
                }
            } catch (error) {
                await provider.RollbackTransaction();
                throw error;
            }
        } else {
            // For network providers, cascading deletes are handled server-side
            return super.Delete(options);
        }
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Display name of the artifact
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Extended description of the artifact
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ConversationID
    * * Display Name: Conversation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
    * * Description: Reference to the conversation this artifact belongs to
    */
    get ConversationID(): string {
        return this.Get('ConversationID');
    }
    set ConversationID(value: string) {
        this.Set('ConversationID', value);
    }

    /**
    * * Field Name: ArtifactTypeID
    * * Display Name: Artifact Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifact Types (vwArtifactTypes.ID)
    * * Description: Reference to the type of artifact
    */
    get ArtifactTypeID(): string {
        return this.Get('ArtifactTypeID');
    }
    set ArtifactTypeID(value: string) {
        this.Set('ArtifactTypeID', value);
    }

    /**
    * * Field Name: SharingScope
    * * Display Name: Sharing Scope
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Everyone
    *   * None
    *   * Public
    *   * SpecificUsers
    * * Description: Controls who can view this artifact (None, SpecificUsers, Everyone, Public)
    */
    get SharingScope(): 'Everyone' | 'None' | 'Public' | 'SpecificUsers' {
        return this.Get('SharingScope');
    }
    set SharingScope(value: 'Everyone' | 'None' | 'Public' | 'SpecificUsers') {
        this.Set('SharingScope', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: User comments about the artifact
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Conversation
    * * Display Name: Conversation
    * * SQL Data Type: nvarchar(255)
    */
    get Conversation(): string | null {
        return this.Get('Conversation');
    }

    /**
    * * Field Name: ArtifactType
    * * Display Name: Artifact Type
    * * SQL Data Type: nvarchar(100)
    */
    get ArtifactType(): string {
        return this.Get('ArtifactType');
    }
}


/**
 * MJ: Conversation Detail Artifacts - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ConversationDetailArtifact
 * * Base View: vwConversationDetailArtifacts
 * * @description Junction table tracking many-to-many relationship between conversation messages and artifact versions, with directionality tracking
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Conversation Detail Artifacts')
export class ConversationDetailArtifactEntity extends BaseEntity<ConversationDetailArtifactEntityType> {
    /**
    * Loads the MJ: Conversation Detail Artifacts record from the database
    * @param ID: string - primary key value to load the MJ: Conversation Detail Artifacts record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ConversationDetailArtifactEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ConversationDetailID
    * * Display Name: Conversation Detail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
    * * Description: Foreign key to ConversationDetail - the conversation message associated with this artifact
    */
    get ConversationDetailID(): string {
        return this.Get('ConversationDetailID');
    }
    set ConversationDetailID(value: string) {
        this.Set('ConversationDetailID', value);
    }

    /**
    * * Field Name: ArtifactVersionID
    * * Display Name: Artifact Version ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Artifact Versions (vwArtifactVersions.ID)
    * * Description: Foreign key to ArtifactVersion - the specific artifact version linked to this conversation message
    */
    get ArtifactVersionID(): string {
        return this.Get('ArtifactVersionID');
    }
    set ArtifactVersionID(value: string) {
        this.Set('ArtifactVersionID', value);
    }

    /**
    * * Field Name: Direction
    * * Display Name: Direction
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Output
    * * Value List Type: List
    * * Possible Values 
    *   * Input
    *   * Output
    * * Description: Direction of artifact flow: Input (fed to agent) or Output (produced by agent)
    */
    get Direction(): 'Input' | 'Output' {
        return this.Get('Direction');
    }
    set Direction(value: 'Input' | 'Output') {
        this.Set('Direction', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ArtifactVersion
    * * Display Name: Artifact Version
    * * SQL Data Type: nvarchar(255)
    */
    get ArtifactVersion(): string | null {
        return this.Get('ArtifactVersion');
    }
}


/**
 * MJ: Dashboard User Preferences - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: DashboardUserPreference
 * * Base View: vwDashboardUserPreferences
 * * @description Stores dashboard preferences for users and system defaults. The absence of a record for a dashboard means it is not shown.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Dashboard User Preferences')
export class DashboardUserPreferenceEntity extends BaseEntity<DashboardUserPreferenceEntityType> {
    /**
    * Loads the MJ: Dashboard User Preferences record from the database
    * @param ID: string - primary key value to load the MJ: Dashboard User Preferences record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DashboardUserPreferenceEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: Dashboard User Preferences entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that when the scope is set to 'Global', there should not be an application assigned, and when the scope is set to 'App', an application must be assigned.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateScopeAndApplicationIDConsistency(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that when the scope is set to 'Global', there should not be an application assigned, and when the scope is set to 'App', an application must be assigned.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateScopeAndApplicationIDConsistency(result: ValidationResult) {
    	if ((this.Scope === "Global" && this.ApplicationID !== null) || (this.Scope === "App" && this.ApplicationID === null)) {
    		result.Errors.push(new ValidationErrorInfo("Scope", "When the scope is 'Global', ApplicationID must be null. When scope is 'App', ApplicationID must not be null.", this.Scope + ":" + this.ApplicationID, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: User that these preferences belong to, NULL for system defaults
    */
    get UserID(): string | null {
        return this.Get('UserID');
    }
    set UserID(value: string | null) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: DashboardID
    * * Display Name: Dashboard ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Dashboards (vwDashboards.ID)
    * * Description: Dashboard that this preference refers to
    */
    get DashboardID(): string {
        return this.Get('DashboardID');
    }
    set DashboardID(value: string) {
        this.Set('DashboardID', value);
    }

    /**
    * * Field Name: Scope
    * * Display Name: Scope
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * App
    *   * Global
    * * Description: Scope of the preference (Global or App)
    */
    get Scope(): 'App' | 'Global' {
        return this.Get('Scope');
    }
    set Scope(value: 'App' | 'Global') {
        this.Set('Scope', value);
    }

    /**
    * * Field Name: ApplicationID
    * * Display Name: Application ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Applications (vwApplications.ID)
    * * Description: Application that this preference applies to (only for App scope)
    */
    get ApplicationID(): string | null {
        return this.Get('ApplicationID');
    }
    set ApplicationID(value: string | null) {
        this.Set('ApplicationID', value);
    }

    /**
    * * Field Name: DisplayOrder
    * * Display Name: Display Order
    * * SQL Data Type: int
    * * Description: Order in which to display the dashboard
    */
    get DisplayOrder(): number {
        return this.Get('DisplayOrder');
    }
    set DisplayOrder(value: number) {
        this.Set('DisplayOrder', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string | null {
        return this.Get('User');
    }

    /**
    * * Field Name: Dashboard
    * * Display Name: Dashboard
    * * SQL Data Type: nvarchar(255)
    */
    get Dashboard(): string {
        return this.Get('Dashboard');
    }

    /**
    * * Field Name: Application
    * * Display Name: Application
    * * SQL Data Type: nvarchar(100)
    */
    get Application(): string | null {
        return this.Get('Application');
    }
}


/**
 * MJ: Dashboard User States - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: DashboardUserState
 * * Base View: vwDashboardUserStates
 * * @description Stores user-specific dashboard state information
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Dashboard User States')
export class DashboardUserStateEntity extends BaseEntity<DashboardUserStateEntityType> {
    /**
    * Loads the MJ: Dashboard User States record from the database
    * @param ID: string - primary key value to load the MJ: Dashboard User States record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof DashboardUserStateEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: DashboardID
    * * Display Name: Dashboard ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Dashboards (vwDashboards.ID)
    * * Description: Dashboard that this state applies to
    */
    get DashboardID(): string {
        return this.Get('DashboardID');
    }
    set DashboardID(value: string) {
        this.Set('DashboardID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: User that this state belongs to
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: UserState
    * * Display Name: User State
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON object containing user-specific dashboard state
    */
    get UserState(): string | null {
        return this.Get('UserState');
    }
    set UserState(value: string | null) {
        this.Set('UserState', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Dashboard
    * * Display Name: Dashboard
    * * SQL Data Type: nvarchar(255)
    */
    get Dashboard(): string {
        return this.Get('Dashboard');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * MJ: Environments - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Environment
 * * Base View: vwEnvironments
 * * @description Top-level container for organizing conversations, artifacts, and collections. Provides isolation and grouping for different teams, clients, or functional areas.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Environments')
export class EnvironmentEntity extends BaseEntity<EnvironmentEntityType> {
    /**
    * Loads the MJ: Environments record from the database
    * @param ID: string - primary key value to load the MJ: Environments record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof EnvironmentEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Display name for the environment
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the environment purpose and scope
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: IsDefault
    * * Display Name: Is Default
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if this is the default environment for the organization
    */
    get IsDefault(): boolean {
        return this.Get('IsDefault');
    }
    set IsDefault(value: boolean) {
        this.Set('IsDefault', value);
    }

    /**
    * * Field Name: Settings
    * * Display Name: Settings
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration for environment-specific settings and features
    */
    get Settings(): string | null {
        return this.Get('Settings');
    }
    set Settings(value: string | null) {
        this.Set('Settings', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * MJ: Projects - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Project
 * * Base View: vwProjects
 * * @description Container for grouping related conversations around a common topic, client, or initiative. Supports nesting for sub-projects.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Projects')
export class ProjectEntity extends BaseEntity<ProjectEntityType> {
    /**
    * Loads the MJ: Projects record from the database
    * @param ID: string - primary key value to load the MJ: Projects record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ProjectEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EnvironmentID
    * * Display Name: Environment ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
    * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09
    */
    get EnvironmentID(): string {
        return this.Get('EnvironmentID');
    }
    set EnvironmentID(value: string) {
        this.Set('EnvironmentID', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Projects (vwProjects.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Display name for the project
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the project goals and scope
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Color
    * * Display Name: Color
    * * SQL Data Type: nvarchar(7)
    * * Description: Hex color code for project badges in UI (#RRGGBB format)
    */
    get Color(): string | null {
        return this.Get('Color');
    }
    set Color(value: string | null) {
        this.Set('Color', value);
    }

    /**
    * * Field Name: Icon
    * * Display Name: Icon
    * * SQL Data Type: nvarchar(50)
    * * Description: Font Awesome icon class for UI display
    */
    get Icon(): string | null {
        return this.Get('Icon');
    }
    set Icon(value: string | null) {
        this.Set('Icon', value);
    }

    /**
    * * Field Name: IsArchived
    * * Display Name: Is Archived
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if this project is archived and should be hidden from active lists
    */
    get IsArchived(): boolean {
        return this.Get('IsArchived');
    }
    set IsArchived(value: boolean) {
        this.Set('IsArchived', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Environment
    * * Display Name: Environment
    * * SQL Data Type: nvarchar(255)
    */
    get Environment(): string {
        return this.Get('Environment');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * MJ: Public Links - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: PublicLink
 * * Base View: vwPublicLinks
 * * @description Shareable links for external access to artifacts and other resources. Supports password protection and expiration.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Public Links')
export class PublicLinkEntity extends BaseEntity<PublicLinkEntityType> {
    /**
    * Loads the MJ: Public Links record from the database
    * @param ID: string - primary key value to load the MJ: Public Links record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof PublicLinkEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ResourceType
    * * Display Name: Resource Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Artifact
    *   * Collection
    *   * Conversation
    * * Description: Type of resource being shared (Artifact, Conversation, Collection)
    */
    get ResourceType(): 'Artifact' | 'Collection' | 'Conversation' {
        return this.Get('ResourceType');
    }
    set ResourceType(value: 'Artifact' | 'Collection' | 'Conversation') {
        this.Set('ResourceType', value);
    }

    /**
    * * Field Name: ResourceID
    * * Display Name: Resource ID
    * * SQL Data Type: uniqueidentifier
    */
    get ResourceID(): string {
        return this.Get('ResourceID');
    }
    set ResourceID(value: string) {
        this.Set('ResourceID', value);
    }

    /**
    * * Field Name: Token
    * * Display Name: Token
    * * SQL Data Type: nvarchar(255)
    * * Description: Unique token for accessing the shared resource via URL
    */
    get Token(): string {
        return this.Get('Token');
    }
    set Token(value: string) {
        this.Set('Token', value);
    }

    /**
    * * Field Name: PasswordHash
    * * Display Name: Password Hash
    * * SQL Data Type: nvarchar(255)
    * * Description: SHA256 hash of optional password for additional security
    */
    get PasswordHash(): string | null {
        return this.Get('PasswordHash');
    }
    set PasswordHash(value: string | null) {
        this.Set('PasswordHash', value);
    }

    /**
    * * Field Name: ExpiresAt
    * * Display Name: Expires At
    * * SQL Data Type: datetimeoffset
    * * Description: Optional expiration date/time for this public link
    */
    get ExpiresAt(): Date | null {
        return this.Get('ExpiresAt');
    }
    set ExpiresAt(value: Date | null) {
        this.Set('ExpiresAt', value);
    }

    /**
    * * Field Name: MaxViews
    * * Display Name: Max Views
    * * SQL Data Type: int
    * * Description: Maximum number of times this link can be viewed
    */
    get MaxViews(): number | null {
        return this.Get('MaxViews');
    }
    set MaxViews(value: number | null) {
        this.Set('MaxViews', value);
    }

    /**
    * * Field Name: CurrentViews
    * * Display Name: Current Views
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Current count of how many times this link has been viewed
    */
    get CurrentViews(): number {
        return this.Get('CurrentViews');
    }
    set CurrentViews(value: number) {
        this.Set('CurrentViews', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if this link is currently active and accessible
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * MJ: Query Parameters - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: QueryParameter
 * * Base View: vwQueryParameters
 * * @description Stores parameter definitions for parameterized queries that use Nunjucks templates. Each parameter represents a dynamic value that can be passed when executing the query. Parameters are automatically extracted from the query template by the QueryEntityServer using LLM analysis, or can be manually defined. The combination of parameter metadata and validation filters creates a self-documenting, type-safe query execution system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Query Parameters')
export class QueryParameterEntity extends BaseEntity<QueryParameterEntityType> {
    /**
    * Loads the MJ: Query Parameters record from the database
    * @param ID: string - primary key value to load the MJ: Query Parameters record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof QueryParameterEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: QueryID
    * * Display Name: Query ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queries (vwQueries.ID)
    */
    get QueryID(): string {
        return this.Get('QueryID');
    }
    set QueryID(value: string) {
        this.Set('QueryID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: The name of the parameter as it appears in the Nunjucks template. This must match exactly with the parameter reference in the SQL template. For example, if the template contains {{ userEmail | required | email }}, the Name would be "userEmail". Parameter names should follow JavaScript identifier rules: start with a letter, and contain only letters, numbers, and underscores.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * array
    *   * boolean
    *   * date
    *   * number
    *   * string
    * * Description: The data type of the parameter used for validation and type conversion. Valid values are: "string" for text values, "number" for integers or decimals, "date" for date/datetime values (ISO 8601 format expected), "boolean" for true/false values, and "array" for multiple values (typically used with IN clauses). The type determines which validation filters can be applied and how the parameter is processed.
    */
    get Type(): 'array' | 'boolean' | 'date' | 'number' | 'string' {
        return this.Get('Type');
    }
    set Type(value: 'array' | 'boolean' | 'date' | 'number' | 'string') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: IsRequired
    * * Display Name: Is Required
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates whether this parameter must be provided when executing the query. When true, the query execution will fail if the parameter is not supplied and no DefaultValue is set. This is automatically determined by the presence of the "required" filter in the template, but can be manually overridden. Required parameters ensure data integrity and prevent unintended query behavior.
    */
    get IsRequired(): boolean | null {
        return this.Get('IsRequired');
    }
    set IsRequired(value: boolean | null) {
        this.Set('IsRequired', value);
    }

    /**
    * * Field Name: DefaultValue
    * * Display Name: Default Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The default value to use when the parameter is not provided during query execution. This value must be compatible with the parameter Type. For arrays, use JSON format like ["value1","value2"]. Default values allow queries to have sensible fallbacks while still accepting custom inputs. If a parameter is required (IsRequired=true), the default value is ignored.
    */
    get DefaultValue(): string | null {
        return this.Get('DefaultValue');
    }
    set DefaultValue(value: string | null) {
        this.Set('DefaultValue', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Human-readable description explaining the purpose and usage of this parameter. This is typically generated by LLM analysis of the query context but can be manually edited. Good descriptions include: what the parameter filters or controls, valid value ranges or formats, business meaning, and any special considerations. This text is shown in UI to help users understand what value to provide.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: SampleValue
    * * Display Name: Sample Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: A concrete example value demonstrating the proper format for this parameter. Generated by LLM based on the query context and validation filters. For example: "john@example.com" for an email parameter, "2024-01-15" for a date, or "["active","pending"]" for a status array. Sample values help users understand the expected format and can be used in API documentation.
    */
    get SampleValue(): string | null {
        return this.Get('SampleValue');
    }
    set SampleValue(value: string | null) {
        this.Set('SampleValue', value);
    }

    /**
    * * Field Name: ValidationFilters
    * * Display Name: Validation Filters
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON array of Nunjucks filter definitions that validate and transform the parameter value. Each filter is an object with "name" and optional "args" properties. Filters are applied in order and can include: validation (required, email, min, max), transformation (trim, upper, lower), SQL safety (sqlsafe, sqljoin), and type conversion (number, date). Example: [{"name":"required"},{"name":"email"},{"name":"sqlsafe"}]. The filter chain ensures type safety and prevents SQL injection.
    */
    get ValidationFilters(): string | null {
        return this.Get('ValidationFilters');
    }
    set ValidationFilters(value: string | null) {
        this.Set('ValidationFilters', value);
    }

    /**
    * * Field Name: DetectionMethod
    * * Display Name: Detection Method
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Manual
    * * Value List Type: List
    * * Possible Values 
    *   * AI
    *   * Manual
    * * Description: Indicates how this parameter was identified and added to the system. "AI" means it was automatically detected by LLM analysis of the query template, including extraction of parameter name, type inference from filters, and generation of description. "Manual" means it was explicitly defined by a user. This helps track which parameters might need human review and provides transparency about the source of metadata.
    */
    get DetectionMethod(): 'AI' | 'Manual' {
        return this.Get('DetectionMethod');
    }
    set DetectionMethod(value: 'AI' | 'Manual') {
        this.Set('DetectionMethod', value);
    }

    /**
    * * Field Name: AutoDetectConfidenceScore
    * * Display Name: Auto Detect Confidence Score
    * * SQL Data Type: decimal(3, 2)
    * * Description: Confidence score (0.00-1.00) indicating how certain the AI was about this parameter detection. Only populated when DetectionMethod="AI". Higher scores indicate the LLM was more confident about the parameter name, type, and usage. Scores above 0.80 are generally reliable, 0.60-0.80 may benefit from human review, and below 0.60 should be manually verified. This helps prioritize which auto-detected parameters need human attention.
    */
    get AutoDetectConfidenceScore(): number | null {
        return this.Get('AutoDetectConfidenceScore');
    }
    set AutoDetectConfidenceScore(value: number | null) {
        this.Set('AutoDetectConfidenceScore', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Query
    * * Display Name: Query
    * * SQL Data Type: nvarchar(255)
    */
    get Query(): string {
        return this.Get('Query');
    }
}


/**
 * MJ: Record Links - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: RecordLink
 * * Base View: vwRecordLinks
 * * @description Generic linking table that can connect any two records in the system, providing a flexible relationship management system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Record Links')
export class RecordLinkEntity extends BaseEntity<RecordLinkEntityType> {
    /**
    * Loads the MJ: Record Links record from the database
    * @param ID: string - primary key value to load the MJ: Record Links record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RecordLinkEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: SourceEntityID
    * * Display Name: Source Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get SourceEntityID(): string {
        return this.Get('SourceEntityID');
    }
    set SourceEntityID(value: string) {
        this.Set('SourceEntityID', value);
    }

    /**
    * * Field Name: SourceRecordID
    * * Display Name: Source Record ID
    * * SQL Data Type: nvarchar(500)
    * * Description: Primary key value(s) of the source record - scalar for simple PKs or JSON KeyValuePair array for composite PKs
    */
    get SourceRecordID(): string {
        return this.Get('SourceRecordID');
    }
    set SourceRecordID(value: string) {
        this.Set('SourceRecordID', value);
    }

    /**
    * * Field Name: TargetEntityID
    * * Display Name: Target Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get TargetEntityID(): string {
        return this.Get('TargetEntityID');
    }
    set TargetEntityID(value: string) {
        this.Set('TargetEntityID', value);
    }

    /**
    * * Field Name: TargetRecordID
    * * Display Name: Target Record ID
    * * SQL Data Type: nvarchar(500)
    * * Description: Primary key value(s) of the target record - scalar for simple PKs or JSON KeyValuePair array for composite PKs
    */
    get TargetRecordID(): string {
        return this.Get('TargetRecordID');
    }
    set TargetRecordID(value: string) {
        this.Set('TargetRecordID', value);
    }

    /**
    * * Field Name: LinkType
    * * Display Name: Link Type
    * * SQL Data Type: nvarchar(50)
    * * Description: Application-specific relationship type describing how the records are related
    */
    get LinkType(): string | null {
        return this.Get('LinkType');
    }
    set LinkType(value: string | null) {
        this.Set('LinkType', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: Display sequence for ordering linked records in UI
    */
    get Sequence(): number | null {
        return this.Get('Sequence');
    }
    set Sequence(value: number | null) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: Metadata
    * * Display Name: Metadata
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON field for storing additional link-specific metadata
    */
    get Metadata(): string | null {
        return this.Get('Metadata');
    }
    set Metadata(value: string | null) {
        this.Set('Metadata', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: SourceEntity
    * * Display Name: Source Entity
    * * SQL Data Type: nvarchar(255)
    */
    get SourceEntity(): string {
        return this.Get('SourceEntity');
    }

    /**
    * * Field Name: TargetEntity
    * * Display Name: Target Entity
    * * SQL Data Type: nvarchar(255)
    */
    get TargetEntity(): string {
        return this.Get('TargetEntity');
    }
}


/**
 * MJ: Report User States - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ReportUserState
 * * Base View: vwReportUserStates
 * * @description Tracks individual user state within interactive reports
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Report User States')
export class ReportUserStateEntity extends BaseEntity<ReportUserStateEntityType> {
    /**
    * Loads the MJ: Report User States record from the database
    * @param ID: string - primary key value to load the MJ: Report User States record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ReportUserStateEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ReportID
    * * Display Name: Report ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Reports (vwReports.ID)
    */
    get ReportID(): string {
        return this.Get('ReportID');
    }
    set ReportID(value: string) {
        this.Set('ReportID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: ReportState
    * * Display Name: Report State
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON serialized state of user interaction with the report
    */
    get ReportState(): string | null {
        return this.Get('ReportState');
    }
    set ReportState(value: string | null) {
        this.Set('ReportState', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Report
    * * Display Name: Report
    * * SQL Data Type: nvarchar(255)
    */
    get Report(): string {
        return this.Get('Report');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * MJ: Report Versions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ReportVersion
 * * Base View: vwReportVersions
 * * @description Stores iterations of report logic, structure, and layout changes
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Report Versions')
export class ReportVersionEntity extends BaseEntity<ReportVersionEntityType> {
    /**
    * Loads the MJ: Report Versions record from the database
    * @param ID: string - primary key value to load the MJ: Report Versions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ReportVersionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: Report Versions entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * VersionNumber: This rule ensures that the Version Number must be greater than zero.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateVersionNumberGreaterThanZero(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the Version Number must be greater than zero.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateVersionNumberGreaterThanZero(result: ValidationResult) {
    	if (this.VersionNumber <= 0) {
    		result.Errors.push(new ValidationErrorInfo("VersionNumber", "Version Number must be greater than zero.", this.VersionNumber, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ReportID
    * * Display Name: Report ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Reports (vwReports.ID)
    */
    get ReportID(): string {
        return this.Get('ReportID');
    }
    set ReportID(value: string) {
        this.Set('ReportID', value);
    }

    /**
    * * Field Name: VersionNumber
    * * Display Name: Version Number
    * * SQL Data Type: int
    * * Description: Report version number, sequential per report starting at 1
    */
    get VersionNumber(): number {
        return this.Get('VersionNumber');
    }
    set VersionNumber(value: number) {
        this.Set('VersionNumber', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of this report version
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of this report version
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration of report structure, layout and logic
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }
    set Configuration(value: string | null) {
        this.Set('Configuration', value);
    }

    /**
    * * Field Name: DataContextUpdated
    * * Display Name: Data Context Updated
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the data context was updated in this version
    */
    get DataContextUpdated(): boolean {
        return this.Get('DataContextUpdated');
    }
    set DataContextUpdated(value: boolean) {
        this.Set('DataContextUpdated', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Report
    * * Display Name: Report
    * * SQL Data Type: nvarchar(255)
    */
    get Report(): string {
        return this.Get('Report');
    }
}


/**
 * MJ: Scheduled Job Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ScheduledJobRun
 * * Base View: vwScheduledJobRuns
 * * @description Records execution history for scheduled jobs. Provides uniform tracking across all job types. Each record represents one execution attempt of a scheduled job.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Scheduled Job Runs')
export class ScheduledJobRunEntity extends BaseEntity<ScheduledJobRunEntityType> {
    /**
    * Loads the MJ: Scheduled Job Runs record from the database
    * @param ID: string - primary key value to load the MJ: Scheduled Job Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ScheduledJobRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: Scheduled Job Runs entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Details: This rule ensures that if the Details field is not empty, it must contain a valid JSON value.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateDetailsAsJson(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if the Details field is not empty, it must contain a valid JSON value.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateDetailsAsJson(result: ValidationResult) {
    	if (this.Details != null) {
    		try {
    			JSON.parse(this.Details);
    		} catch (e) {
    			result.Errors.push(new ValidationErrorInfo("Details", "Details must be a valid JSON if provided.", this.Details, ValidationErrorType.Failure));
    		}
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ScheduledJobID
    * * Display Name: Scheduled Job ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Scheduled Jobs (vwScheduledJobs.ID)
    */
    get ScheduledJobID(): string {
        return this.Get('ScheduledJobID');
    }
    set ScheduledJobID(value: string) {
        this.Set('ScheduledJobID', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetimeoffset
    * * Default Value: sysdatetimeoffset()
    * * Description: Timestamp when this job execution began. Set immediately before calling the job plugin's Execute method.
    */
    get StartedAt(): Date {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: CompletedAt
    * * Display Name: Completed At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp when this job execution completed (successfully or with failure). NULL while the job is still running.
    */
    get CompletedAt(): Date | null {
        return this.Get('CompletedAt');
    }
    set CompletedAt(value: Date | null) {
        this.Set('CompletedAt', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Running
    * * Value List Type: List
    * * Possible Values 
    *   * Cancelled
    *   * Completed
    *   * Failed
    *   * Running
    *   * Timeout
    * * Description: Current status of the job execution. Running=currently executing, Completed=finished (check Success for outcome), Failed=exception during execution, Cancelled=manually cancelled, Timeout=exceeded maximum execution time.
    */
    get Status(): 'Cancelled' | 'Completed' | 'Failed' | 'Running' | 'Timeout' {
        return this.Get('Status');
    }
    set Status(value: 'Cancelled' | 'Completed' | 'Failed' | 'Running' | 'Timeout') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Success
    * * Display Name: Success
    * * SQL Data Type: bit
    * * Description: Whether the job execution completed successfully. NULL while running, TRUE if successful, FALSE if failed. This is the job-level success from the plugin's Execute method, separate from domain-specific success tracking.
    */
    get Success(): boolean | null {
        return this.Get('Success');
    }
    set Success(value: boolean | null) {
        this.Set('Success', value);
    }

    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Error message if the job failed. NULL for successful runs. Contains exception messages or error details from the plugin's Execute method.
    */
    get ErrorMessage(): string | null {
        return this.Get('ErrorMessage');
    }
    set ErrorMessage(value: string | null) {
        this.Set('ErrorMessage', value);
    }

    /**
    * * Field Name: Details
    * * Display Name: Details
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Job-type specific execution details stored as JSON. May include references to domain-specific run records (e.g., {"AgentRunID": "...", "TokensUsed": 5000}), performance metrics, or other execution metadata. Schema is defined by the job type plugin.
    */
    get Details(): string | null {
        return this.Get('Details');
    }
    set Details(value: string | null) {
        this.Set('Details', value);
    }

    /**
    * * Field Name: ExecutedByUserID
    * * Display Name: Executed By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: User context under which the job was executed. Typically the OwnerUserID from the schedule, but can be overridden in job-specific configuration.
    */
    get ExecutedByUserID(): string | null {
        return this.Get('ExecutedByUserID');
    }
    set ExecutedByUserID(value: string | null) {
        this.Set('ExecutedByUserID', value);
    }

    /**
    * * Field Name: QueuedAt
    * * Display Name: Queued At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp when this execution was queued (for ConcurrencyMode=Queue). NULL for immediate executions. When set, indicates this run is waiting for a previous execution to complete before starting.
    */
    get QueuedAt(): Date | null {
        return this.Get('QueuedAt');
    }
    set QueuedAt(value: Date | null) {
        this.Set('QueuedAt', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ScheduledJob
    * * Display Name: Scheduled Job
    * * SQL Data Type: nvarchar(200)
    */
    get ScheduledJob(): string {
        return this.Get('ScheduledJob');
    }

    /**
    * * Field Name: ExecutedByUser
    * * Display Name: Executed By User
    * * SQL Data Type: nvarchar(100)
    */
    get ExecutedByUser(): string | null {
        return this.Get('ExecutedByUser');
    }
}


/**
 * MJ: Scheduled Job Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ScheduledJobType
 * * Base View: vwScheduledJobTypes
 * * @description Defines types of schedulable jobs and their plugin implementations. Each job type represents a different kind of work that can be scheduled (e.g., Agents, Actions, Reports).
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Scheduled Job Types')
export class ScheduledJobTypeEntity extends BaseEntity<ScheduledJobTypeEntityType> {
    /**
    * Loads the MJ: Scheduled Job Types record from the database
    * @param ID: string - primary key value to load the MJ: Scheduled Job Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ScheduledJobTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    * * Description: Unique name identifying this job type (e.g., Agent, Action, Report).
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Human-readable description of what this job type does and when it should be used.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(255)
    * * Description: TypeScript class name that implements BaseScheduledJob for this job type. Used by ClassFactory to instantiate the correct plugin at runtime.
    */
    get DriverClass(): string {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: DomainRunEntity
    * * Display Name: Domain Run Entity
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the entity that stores execution records for this job type (e.g., "MJ: AI Agent Runs", "Action Execution Logs"). Used for generic UI linking to domain-specific run records. NULL if job type uses ScheduledJobRun as its only execution record.
    */
    get DomainRunEntity(): string | null {
        return this.Get('DomainRunEntity');
    }
    set DomainRunEntity(value: string | null) {
        this.Set('DomainRunEntity', value);
    }

    /**
    * * Field Name: DomainRunEntityFKey
    * * Display Name: Domain Run Entity F Key
    * * SQL Data Type: nvarchar(100)
    * * Description: Name of the foreign key field in the DomainRunEntity that links back to ScheduledJobRun (e.g., "ScheduleID"). Used for querying related domain runs. NULL if DomainRunEntity is NULL.
    */
    get DomainRunEntityFKey(): string | null {
        return this.Get('DomainRunEntityFKey');
    }
    set DomainRunEntityFKey(value: string | null) {
        this.Set('DomainRunEntityFKey', value);
    }

    /**
    * * Field Name: NotificationsAvailable
    * * Display Name: Notifications Available
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether this job type supports sending notifications on completion or failure.
    */
    get NotificationsAvailable(): boolean {
        return this.Get('NotificationsAvailable');
    }
    set NotificationsAvailable(value: boolean) {
        this.Set('NotificationsAvailable', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * MJ: Scheduled Jobs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ScheduledJob
 * * Base View: vwScheduledJobs
 * * @description Defines schedules for automated job execution across all schedulable types. Each record represents a scheduled job with its cron expression, configuration, and execution tracking.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Scheduled Jobs')
export class ScheduledJobEntity extends BaseEntity<ScheduledJobEntityType> {
    /**
    * Loads the MJ: Scheduled Jobs record from the database
    * @param ID: string - primary key value to load the MJ: Scheduled Jobs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ScheduledJobEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: Scheduled Jobs entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Configuration: This rule ensures that if the Configuration field has a value, it must be valid JSON. If the Configuration field is empty or not set, this rule does not apply.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateConfigurationIsJson(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if the Configuration field has a value, it must be valid JSON. If the Configuration field is empty or not set, this rule does not apply.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateConfigurationIsJson(result: ValidationResult) {
    	if (this.Configuration != null) {
    		try {
    			JSON.parse(this.Configuration);
    		} catch (e) {
    			result.Errors.push(new ValidationErrorInfo("Configuration", "If specified, Configuration must be valid JSON.", this.Configuration, ValidationErrorType.Failure));
    		}
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: JobTypeID
    * * Display Name: Job Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Scheduled Job Types (vwScheduledJobTypes.ID)
    */
    get JobTypeID(): string {
        return this.Get('JobTypeID');
    }
    set JobTypeID(value: string) {
        this.Set('JobTypeID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(200)
    * * Description: Human-readable name for this scheduled job. Should clearly identify what the job does.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the job's purpose, what it does, and any important notes about its execution.
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: CronExpression
    * * Display Name: Cron Expression
    * * SQL Data Type: nvarchar(120)
    * * Description: Cron expression defining when the job should execute (e.g., "0 30 9 * * MON-FRI" for weekdays at 9:30 AM). Uses standard cron syntax with seconds precision.
    */
    get CronExpression(): string {
        return this.Get('CronExpression');
    }
    set CronExpression(value: string) {
        this.Set('CronExpression', value);
    }

    /**
    * * Field Name: Timezone
    * * Display Name: Timezone
    * * SQL Data Type: nvarchar(64)
    * * Default Value: UTC
    * * Description: IANA timezone identifier for interpreting the cron expression (e.g., "America/Chicago", "UTC"). Ensures consistent scheduling across different server locations.
    */
    get Timezone(): string {
        return this.Get('Timezone');
    }
    set Timezone(value: string) {
        this.Set('Timezone', value);
    }

    /**
    * * Field Name: StartAt
    * * Display Name: Start At
    * * SQL Data Type: datetimeoffset
    * * Description: Optional start date/time for when this schedule becomes active. Job will not execute before this time. NULL means active immediately upon creation.
    */
    get StartAt(): Date | null {
        return this.Get('StartAt');
    }
    set StartAt(value: Date | null) {
        this.Set('StartAt', value);
    }

    /**
    * * Field Name: EndAt
    * * Display Name: End At
    * * SQL Data Type: datetimeoffset
    * * Description: Optional end date/time for when this schedule expires. Job will not execute after this time. NULL means no expiration.
    */
    get EndAt(): Date | null {
        return this.Get('EndAt');
    }
    set EndAt(value: Date | null) {
        this.Set('EndAt', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Expired
    *   * Paused
    *   * Pending
    * * Description: Current status of the schedule. Pending=created but not yet active, Active=currently running on schedule, Paused=temporarily stopped, Disabled=manually disabled, Expired=past EndAt date.
    */
    get Status(): 'Active' | 'Disabled' | 'Expired' | 'Paused' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Expired' | 'Paused' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Job-type specific configuration stored as JSON. Schema is defined by the ScheduledJobType plugin. For Agents: includes AgentID, StartingPayload, InitialMessage, etc. For Actions: includes ActionID and parameter mappings.
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }
    set Configuration(value: string | null) {
        this.Set('Configuration', value);
    }

    /**
    * * Field Name: OwnerUserID
    * * Display Name: Owner User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: User who owns this schedule. Used as the execution context if no specific user is configured in the job-specific configuration.
    */
    get OwnerUserID(): string | null {
        return this.Get('OwnerUserID');
    }
    set OwnerUserID(value: string | null) {
        this.Set('OwnerUserID', value);
    }

    /**
    * * Field Name: LastRunAt
    * * Display Name: Last Run At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp of the most recent execution. Updated after each run. Used for monitoring and dashboard displays.
    */
    get LastRunAt(): Date | null {
        return this.Get('LastRunAt');
    }
    set LastRunAt(value: Date | null) {
        this.Set('LastRunAt', value);
    }

    /**
    * * Field Name: NextRunAt
    * * Display Name: Next Run At
    * * SQL Data Type: datetimeoffset
    * * Description: Calculated timestamp of when this job should next execute based on the cron expression. Updated after each run. Used by scheduler to determine which jobs are due.
    */
    get NextRunAt(): Date | null {
        return this.Get('NextRunAt');
    }
    set NextRunAt(value: Date | null) {
        this.Set('NextRunAt', value);
    }

    /**
    * * Field Name: RunCount
    * * Display Name: Run Count
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Total number of times this schedule has been executed, including both successful and failed runs.
    */
    get RunCount(): number {
        return this.Get('RunCount');
    }
    set RunCount(value: number) {
        this.Set('RunCount', value);
    }

    /**
    * * Field Name: SuccessCount
    * * Display Name: Success Count
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Number of times this schedule has executed successfully (Success = true in ScheduledJobRun).
    */
    get SuccessCount(): number {
        return this.Get('SuccessCount');
    }
    set SuccessCount(value: number) {
        this.Set('SuccessCount', value);
    }

    /**
    * * Field Name: FailureCount
    * * Display Name: Failure Count
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Number of times this schedule has executed but failed (Success = false in ScheduledJobRun).
    */
    get FailureCount(): number {
        return this.Get('FailureCount');
    }
    set FailureCount(value: number) {
        this.Set('FailureCount', value);
    }

    /**
    * * Field Name: NotifyOnSuccess
    * * Display Name: Notify On Success
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether to send notifications when the job completes successfully.
    */
    get NotifyOnSuccess(): boolean {
        return this.Get('NotifyOnSuccess');
    }
    set NotifyOnSuccess(value: boolean) {
        this.Set('NotifyOnSuccess', value);
    }

    /**
    * * Field Name: NotifyOnFailure
    * * Display Name: Notify On Failure
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Whether to send notifications when the job fails. Defaults to true for alerting on failures.
    */
    get NotifyOnFailure(): boolean {
        return this.Get('NotifyOnFailure');
    }
    set NotifyOnFailure(value: boolean) {
        this.Set('NotifyOnFailure', value);
    }

    /**
    * * Field Name: NotifyUserID
    * * Display Name: Notify User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: User to notify about job execution results. If NULL and notifications are enabled, falls back to OwnerUserID.
    */
    get NotifyUserID(): string | null {
        return this.Get('NotifyUserID');
    }
    set NotifyUserID(value: string | null) {
        this.Set('NotifyUserID', value);
    }

    /**
    * * Field Name: NotifyViaEmail
    * * Display Name: Notify Via Email
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether to send email notifications. Requires NotifyOnSuccess or NotifyOnFailure to also be enabled.
    */
    get NotifyViaEmail(): boolean {
        return this.Get('NotifyViaEmail');
    }
    set NotifyViaEmail(value: boolean) {
        this.Set('NotifyViaEmail', value);
    }

    /**
    * * Field Name: NotifyViaInApp
    * * Display Name: Notify Via In App
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Whether to send in-app notifications. Requires NotifyOnSuccess or NotifyOnFailure to also be enabled. Defaults to true.
    */
    get NotifyViaInApp(): boolean {
        return this.Get('NotifyViaInApp');
    }
    set NotifyViaInApp(value: boolean) {
        this.Set('NotifyViaInApp', value);
    }

    /**
    * * Field Name: LockToken
    * * Display Name: Lock Token
    * * SQL Data Type: uniqueidentifier
    * * Description: Unique token used for distributed locking across multiple server instances. Set when a server claims the job for execution. Prevents duplicate executions in multi-server environments.
    */
    get LockToken(): string | null {
        return this.Get('LockToken');
    }
    set LockToken(value: string | null) {
        this.Set('LockToken', value);
    }

    /**
    * * Field Name: LockedAt
    * * Display Name: Locked At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp when the lock was acquired. Used with ExpectedCompletionAt to detect stale locks from crashed server instances.
    */
    get LockedAt(): Date | null {
        return this.Get('LockedAt');
    }
    set LockedAt(value: Date | null) {
        this.Set('LockedAt', value);
    }

    /**
    * * Field Name: LockedByInstance
    * * Display Name: Locked By Instance
    * * SQL Data Type: nvarchar(255)
    * * Description: Identifier of the server instance that currently holds the lock (e.g., "hostname-12345"). Used for troubleshooting and monitoring which server is executing which job.
    */
    get LockedByInstance(): string | null {
        return this.Get('LockedByInstance');
    }
    set LockedByInstance(value: string | null) {
        this.Set('LockedByInstance', value);
    }

    /**
    * * Field Name: ExpectedCompletionAt
    * * Display Name: Expected Completion At
    * * SQL Data Type: datetimeoffset
    * * Description: Expected completion time for the current execution. If current time exceeds this and lock still exists, the lock is considered stale and can be claimed by another instance. Handles crashed server cleanup.
    */
    get ExpectedCompletionAt(): Date | null {
        return this.Get('ExpectedCompletionAt');
    }
    set ExpectedCompletionAt(value: Date | null) {
        this.Set('ExpectedCompletionAt', value);
    }

    /**
    * * Field Name: ConcurrencyMode
    * * Display Name: Concurrency Mode
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Skip
    * * Value List Type: List
    * * Possible Values 
    *   * Concurrent
    *   * Queue
    *   * Skip
    * * Description: Controls behavior when a new execution is scheduled while a previous execution is still running. Skip=do not start new execution (default), Queue=wait for current to finish then execute, Concurrent=allow multiple simultaneous executions.
    */
    get ConcurrencyMode(): 'Concurrent' | 'Queue' | 'Skip' {
        return this.Get('ConcurrencyMode');
    }
    set ConcurrencyMode(value: 'Concurrent' | 'Queue' | 'Skip') {
        this.Set('ConcurrencyMode', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: JobType
    * * Display Name: Job Type
    * * SQL Data Type: nvarchar(100)
    */
    get JobType(): string {
        return this.Get('JobType');
    }

    /**
    * * Field Name: OwnerUser
    * * Display Name: Owner User
    * * SQL Data Type: nvarchar(100)
    */
    get OwnerUser(): string | null {
        return this.Get('OwnerUser');
    }

    /**
    * * Field Name: NotifyUser
    * * Display Name: Notify User
    * * SQL Data Type: nvarchar(100)
    */
    get NotifyUser(): string | null {
        return this.Get('NotifyUser');
    }
}


/**
 * MJ: Task Dependencies - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: TaskDependency
 * * Base View: vwTaskDependencies
 * * @description Defines dependencies between tasks to create a directed acyclic graph (DAG) for workflow orchestration
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Task Dependencies')
export class TaskDependencyEntity extends BaseEntity<TaskDependencyEntityType> {
    /**
    * Loads the MJ: Task Dependencies record from the database
    * @param ID: string - primary key value to load the MJ: Task Dependencies record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TaskDependencyEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: Task Dependencies entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that a task cannot be set as dependent on itself. In other words, each task can only depend on a different task, not on itself.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateTaskIDNotEqualDependsOnTaskID(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that a task cannot be set as dependent on itself. In other words, each task can only depend on a different task, not on itself.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateTaskIDNotEqualDependsOnTaskID(result: ValidationResult) {
    	if (this.TaskID === this.DependsOnTaskID) {
    		result.Errors.push(new ValidationErrorInfo(
    			"TaskID",
    			"A task cannot be dependent on itself.",
    			this.TaskID,
    			ValidationErrorType.Failure
    		));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: TaskID
    * * Display Name: Task ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Tasks (vwTasks.ID)
    */
    get TaskID(): string {
        return this.Get('TaskID');
    }
    set TaskID(value: string) {
        this.Set('TaskID', value);
    }

    /**
    * * Field Name: DependsOnTaskID
    * * Display Name: Depends On Task ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Tasks (vwTasks.ID)
    */
    get DependsOnTaskID(): string {
        return this.Get('DependsOnTaskID');
    }
    set DependsOnTaskID(value: string) {
        this.Set('DependsOnTaskID', value);
    }

    /**
    * * Field Name: DependencyType
    * * Display Name: Dependency Type
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Prerequisite
    * * Value List Type: List
    * * Possible Values 
    *   * Corequisite
    *   * Optional
    *   * Prerequisite
    * * Description: Type of dependency relationship (Prerequisite, Corequisite, Optional)
    */
    get DependencyType(): 'Corequisite' | 'Optional' | 'Prerequisite' {
        return this.Get('DependencyType');
    }
    set DependencyType(value: 'Corequisite' | 'Optional' | 'Prerequisite') {
        this.Set('DependencyType', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Task
    * * Display Name: Task
    * * SQL Data Type: nvarchar(255)
    */
    get Task(): string {
        return this.Get('Task');
    }

    /**
    * * Field Name: DependsOnTask
    * * Display Name: Depends On Task
    * * SQL Data Type: nvarchar(255)
    */
    get DependsOnTask(): string {
        return this.Get('DependsOnTask');
    }
}


/**
 * MJ: Task Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: TaskType
 * * Base View: vwTaskTypes
 * * @description Categorization system for different types of tasks that can be created and managed within the system
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Task Types')
export class TaskTypeEntity extends BaseEntity<TaskTypeEntityType> {
    /**
    * Loads the MJ: Task Types record from the database
    * @param ID: string - primary key value to load the MJ: Task Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TaskTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Display name for the task type
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of what this task type represents and when it should be used
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * MJ: Tasks - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Task
 * * Base View: vwTasks
 * * @description Core task management entity supporting multi-agent and multi-human collaboration with dependency tracking
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'MJ: Tasks')
export class TaskEntity extends BaseEntity<TaskEntityType> {
    /**
    * Loads the MJ: Tasks record from the database
    * @param ID: string - primary key value to load the MJ: Tasks record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TaskEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for MJ: Tasks entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * PercentComplete: This rule ensures that if a percent complete value is provided, it must be between 0 and 100 inclusive.
    * * Table-Level: This rule ensures that for each record, either UserID or AgentID can be set, or both can be left empty, but not both can be filled in at the same time.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidatePercentCompleteWithinZeroAndOneHundred(result);
        this.ValidateUserIDAndAgentIDMutualExclusivity(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if a percent complete value is provided, it must be between 0 and 100 inclusive.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidatePercentCompleteWithinZeroAndOneHundred(result: ValidationResult) {
    	if (this.PercentComplete != null && (this.PercentComplete < 0 || this.PercentComplete > 100)) {
    		result.Errors.push(new ValidationErrorInfo("PercentComplete", "PercentComplete must be between 0 and 100 if specified.", this.PercentComplete, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that for each record, either UserID or AgentID can be set, or both can be left empty, but not both can be filled in at the same time.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateUserIDAndAgentIDMutualExclusivity(result: ValidationResult) {
    	if (this.UserID != null && this.AgentID != null) {
    		result.Errors.push(new ValidationErrorInfo("UserID", "UserID and AgentID cannot both have values at the same time. Only one or neither may be set.", this.UserID, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Tasks (vwTasks.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Display name for the task
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed description of the task requirements and objectives
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Task Types (vwTaskTypes.ID)
    */
    get TypeID(): string {
        return this.Get('TypeID');
    }
    set TypeID(value: string) {
        this.Set('TypeID', value);
    }

    /**
    * * Field Name: EnvironmentID
    * * Display Name: Environment ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
    * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09
    */
    get EnvironmentID(): string {
        return this.Get('EnvironmentID');
    }
    set EnvironmentID(value: string) {
        this.Set('EnvironmentID', value);
    }

    /**
    * * Field Name: ProjectID
    * * Display Name: Project ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Projects (vwProjects.ID)
    */
    get ProjectID(): string | null {
        return this.Get('ProjectID');
    }
    set ProjectID(value: string | null) {
        this.Set('ProjectID', value);
    }

    /**
    * * Field Name: ConversationDetailID
    * * Display Name: Conversation Detail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
    */
    get ConversationDetailID(): string | null {
        return this.Get('ConversationDetailID');
    }
    set ConversationDetailID(value: string | null) {
        this.Set('ConversationDetailID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string | null {
        return this.Get('UserID');
    }
    set UserID(value: string | null) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: AgentID
    * * Display Name: Agent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Agents (vwAIAgents.ID)
    */
    get AgentID(): string | null {
        return this.Get('AgentID');
    }
    set AgentID(value: string | null) {
        this.Set('AgentID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Blocked
    *   * Cancelled
    *   * Complete
    *   * Deferred
    *   * Failed
    *   * In Progress
    *   * Pending
    * * Description: Current status of the task (Pending, In Progress, Complete, Cancelled, Failed, Blocked, Deferred)
    */
    get Status(): 'Blocked' | 'Cancelled' | 'Complete' | 'Deferred' | 'Failed' | 'In Progress' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Blocked' | 'Cancelled' | 'Complete' | 'Deferred' | 'Failed' | 'In Progress' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: PercentComplete
    * * Display Name: Percent Complete
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Completion percentage for tracking progress (0-100)
    */
    get PercentComplete(): number | null {
        return this.Get('PercentComplete');
    }
    set PercentComplete(value: number | null) {
        this.Set('PercentComplete', value);
    }

    /**
    * * Field Name: DueAt
    * * Display Name: Due At
    * * SQL Data Type: datetimeoffset
    * * Description: Due date and time for task completion
    */
    get DueAt(): Date | null {
        return this.Get('DueAt');
    }
    set DueAt(value: Date | null) {
        this.Set('DueAt', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp when work on the task began
    */
    get StartedAt(): Date | null {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date | null) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: CompletedAt
    * * Display Name: Completed At
    * * SQL Data Type: datetimeoffset
    * * Description: Timestamp when the task was completed
    */
    get CompletedAt(): Date | null {
        return this.Get('CompletedAt');
    }
    set CompletedAt(value: Date | null) {
        this.Set('CompletedAt', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(255)
    */
    get Type(): string {
        return this.Get('Type');
    }

    /**
    * * Field Name: Environment
    * * Display Name: Environment
    * * SQL Data Type: nvarchar(255)
    */
    get Environment(): string {
        return this.Get('Environment');
    }

    /**
    * * Field Name: Project
    * * Display Name: Project
    * * SQL Data Type: nvarchar(255)
    */
    get Project(): string | null {
        return this.Get('Project');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string | null {
        return this.Get('User');
    }

    /**
    * * Field Name: Agent
    * * Display Name: Agent
    * * SQL Data Type: nvarchar(255)
    */
    get Agent(): string | null {
        return this.Get('Agent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Output Delivery Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: OutputDeliveryType
 * * Base View: vwOutputDeliveryTypes
 * * @description Defines methods for delivering generated outputs such as email, file storage, API endpoints, or messaging platforms.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'Output Delivery Types')
export class OutputDeliveryTypeEntity extends BaseEntity<OutputDeliveryTypeEntityType> {
    /**
    * Loads the Output Delivery Types record from the database
    * @param ID: string - primary key value to load the Output Delivery Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof OutputDeliveryTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Output Format Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: OutputFormatType
 * * Base View: vwOutputFormatTypes
 * * @description Specifies available output formats for generated content including PDF, Excel, CSV, JSON, and custom formats.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'Output Format Types')
export class OutputFormatTypeEntity extends BaseEntity<OutputFormatTypeEntityType> {
    /**
    * Loads the Output Format Types record from the database
    * @param ID: string - primary key value to load the Output Format Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof OutputFormatTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: DisplayFormat
    * * Display Name: Display Format
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Configuration or template for how data should be formatted in this output type.
    */
    get DisplayFormat(): string | null {
        return this.Get('DisplayFormat');
    }
    set DisplayFormat(value: string | null) {
        this.Set('DisplayFormat', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Output Trigger Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: OutputTriggerType
 * * Base View: vwOutputTriggerTypes
 * * @description Defines events that can trigger output generation such as schedules, data changes, or manual requests.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'Output Trigger Types')
export class OutputTriggerTypeEntity extends BaseEntity<OutputTriggerTypeEntityType> {
    /**
    * Loads the Output Trigger Types record from the database
    * @param ID: string - primary key value to load the Output Trigger Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof OutputTriggerTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Queries - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Query
 * * Base View: vwQueries
 * * @description Catalog of stored queries. This is useful for any arbitrary query that is known to be performant and correct and can be reused. Queries can be viewed/run by a user, used programatically via RunQuery, and also used by AI systems for improved reliability instead of dynamically generated SQL. Queries can also improve security since they store the SQL instead of using dynamic SQL.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Queries')
export class QueryEntity extends BaseEntity<QueryEntityType> {
    /**
    * Loads the Queries record from the database
    * @param ID: string - primary key value to load the Queries record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof QueryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Queries - Delete method override to wrap in transaction since CascadeDeletes is true.
    * Wrapping in a transaction ensures that all cascade delete operations are handled atomically.
    * @public
    * @method
    * @override
    * @memberof QueryEntity
    * @returns {Promise<boolean>} - true if successful, false otherwise
    */
    public async Delete(options?: EntityDeleteOptions): Promise<boolean> {
        if (Metadata.Provider.ProviderType === ProviderType.Database) {
            // For database providers, use the transaction methods directly
            const provider = Metadata.Provider as DatabaseProviderBase;
            
            try {
                await provider.BeginTransaction();
                const result = await super.Delete(options);
                
                if (result) {
                    await provider.CommitTransaction();
                    return true;
                } else {
                    await provider.RollbackTransaction();
                    return false;
                }
            } catch (error) {
                await provider.RollbackTransaction();
                throw error;
            }
        } else {
            // For network providers, cascading deletes are handled server-side
            return super.Delete(options);
        }
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Query Categories (vwQueryCategories.ID)
    */
    get CategoryID(): string | null {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string | null) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: UserQuestion
    * * Display Name: User Question
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The natural language question this query answers, used for AI query selection.
    */
    get UserQuestion(): string | null {
        return this.Get('UserQuestion');
    }
    set UserQuestion(value: string | null) {
        this.Set('UserQuestion', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: SQL
    * * Display Name: SQL
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The actual SQL query text to execute, may include parameters.
    */
    get SQL(): string | null {
        return this.Get('SQL');
    }
    set SQL(value: string | null) {
        this.Set('SQL', value);
    }

    /**
    * * Field Name: TechnicalDescription
    * * Display Name: Technical Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Technical documentation of the query logic, performance considerations, and parameter usage.
    */
    get TechnicalDescription(): string | null {
        return this.Get('TechnicalDescription');
    }
    set TechnicalDescription(value: string | null) {
        this.Set('TechnicalDescription', value);
    }

    /**
    * * Field Name: OriginalSQL
    * * Display Name: Original SQL
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The original SQL before any optimization or modification, kept for reference.
    */
    get OriginalSQL(): string | null {
        return this.Get('OriginalSQL');
    }
    set OriginalSQL(value: string | null) {
        this.Set('OriginalSQL', value);
    }

    /**
    * * Field Name: Feedback
    * * Display Name: Feedback
    * * SQL Data Type: nvarchar(MAX)
    * * Description: User feedback on query accuracy, performance, or suggested improvements.
    */
    get Feedback(): string | null {
        return this.Get('Feedback');
    }
    set Feedback(value: string | null) {
        this.Set('Feedback', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(15)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Expired
    *   * Pending
    *   * Rejected
    */
    get Status(): 'Approved' | 'Expired' | 'Pending' | 'Rejected' {
        return this.Get('Status');
    }
    set Status(value: 'Approved' | 'Expired' | 'Pending' | 'Rejected') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: QualityRank
    * * Display Name: Quality Rank
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Value indicating the quality of the query, higher values mean a better quality
    */
    get QualityRank(): number | null {
        return this.Get('QualityRank');
    }
    set QualityRank(value: number | null) {
        this.Set('QualityRank', value);
    }

    /**
    * * Field Name: ExecutionCostRank
    * * Display Name: Execution Cost Rank
    * * SQL Data Type: int
    * * Description: Higher numbers indicate more execution overhead/time required. Useful for planning which queries to use in various scenarios.
    */
    get ExecutionCostRank(): number | null {
        return this.Get('ExecutionCostRank');
    }
    set ExecutionCostRank(value: number | null) {
        this.Set('ExecutionCostRank', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: UsesTemplate
    * * Display Name: Uses Template
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Automatically set to true when the SQL column contains Nunjucks template markers (e.g., {{ paramName }}). This flag is maintained by the QueryEntityServer for performance optimization and discovery purposes. It allows quick filtering of parameterized queries and enables the UI to show parameter inputs only when needed. The system will automatically update this flag when the SQL content changes.
    */
    get UsesTemplate(): boolean | null {
        return this.Get('UsesTemplate');
    }
    set UsesTemplate(value: boolean | null) {
        this.Set('UsesTemplate', value);
    }

    /**
    * * Field Name: AuditQueryRuns
    * * Display Name: Audit Query Runs
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When true, all executions of this query will be logged to the Audit Log system for tracking and compliance
    */
    get AuditQueryRuns(): boolean {
        return this.Get('AuditQueryRuns');
    }
    set AuditQueryRuns(value: boolean) {
        this.Set('AuditQueryRuns', value);
    }

    /**
    * * Field Name: CacheEnabled
    * * Display Name: Cache Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When true, query results will be cached in memory with TTL expiration
    */
    get CacheEnabled(): boolean {
        return this.Get('CacheEnabled');
    }
    set CacheEnabled(value: boolean) {
        this.Set('CacheEnabled', value);
    }

    /**
    * * Field Name: CacheTTLMinutes
    * * Display Name: Cache TTL Minutes
    * * SQL Data Type: int
    * * Description: Time-to-live in minutes for cached query results. NULL uses default TTL.
    */
    get CacheTTLMinutes(): number | null {
        return this.Get('CacheTTLMinutes');
    }
    set CacheTTLMinutes(value: number | null) {
        this.Set('CacheTTLMinutes', value);
    }

    /**
    * * Field Name: CacheMaxSize
    * * Display Name: Cache Max Size
    * * SQL Data Type: int
    * * Description: Maximum number of cached result sets for this query. NULL uses default size limit.
    */
    get CacheMaxSize(): number | null {
        return this.Get('CacheMaxSize');
    }
    set CacheMaxSize(value: number | null) {
        this.Set('CacheMaxSize', value);
    }

    /**
    * * Field Name: EmbeddingVector
    * * Display Name: Embedding Vector
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional JSON-serialized embedding vector for the query, used for similarity search and query analysis
    */
    get EmbeddingVector(): string | null {
        return this.Get('EmbeddingVector');
    }
    set EmbeddingVector(value: string | null) {
        this.Set('EmbeddingVector', value);
    }

    /**
    * * Field Name: EmbeddingModelID
    * * Display Name: Embedding Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    * * Description: The AI Model used to generate the embedding vector for this query. Required for vector similarity comparisons.
    */
    get EmbeddingModelID(): string | null {
        return this.Get('EmbeddingModelID');
    }
    set EmbeddingModelID(value: string | null) {
        this.Set('EmbeddingModelID', value);
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(50)
    */
    get Category(): string | null {
        return this.Get('Category');
    }

    /**
    * * Field Name: EmbeddingModel
    * * Display Name: Embedding Model
    * * SQL Data Type: nvarchar(50)
    */
    get EmbeddingModel(): string | null {
        return this.Get('EmbeddingModel');
    }
}


/**
 * Query Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: QueryCategory
 * * Base View: vwQueryCategories
 * * @description Organizes saved queries into categories for discovery and management, supporting folder-like organization of queries.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Query Categories')
export class QueryCategoryEntity extends BaseEntity<QueryCategoryEntityType> {
    /**
    * Loads the Query Categories record from the database
    * @param ID: string - primary key value to load the Query Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof QueryCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Query Categories (vwQueryCategories.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: DefaultCacheEnabled
    * * Display Name: Default Cache Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Default cache setting for queries in this category
    */
    get DefaultCacheEnabled(): boolean {
        return this.Get('DefaultCacheEnabled');
    }
    set DefaultCacheEnabled(value: boolean) {
        this.Set('DefaultCacheEnabled', value);
    }

    /**
    * * Field Name: DefaultCacheTTLMinutes
    * * Display Name: Default Cache TTL Minutes
    * * SQL Data Type: int
    * * Description: Default TTL in minutes for cached results of queries in this category
    */
    get DefaultCacheTTLMinutes(): number | null {
        return this.Get('DefaultCacheTTLMinutes');
    }
    set DefaultCacheTTLMinutes(value: number | null) {
        this.Set('DefaultCacheTTLMinutes', value);
    }

    /**
    * * Field Name: DefaultCacheMaxSize
    * * Display Name: Default Cache Max Size
    * * SQL Data Type: int
    * * Description: Default maximum cache size for queries in this category
    */
    get DefaultCacheMaxSize(): number | null {
        return this.Get('DefaultCacheMaxSize');
    }
    set DefaultCacheMaxSize(value: number | null) {
        this.Set('DefaultCacheMaxSize', value);
    }

    /**
    * * Field Name: CacheInheritanceEnabled
    * * Display Name: Cache Inheritance Enabled
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When true, queries without cache config will inherit from this category
    */
    get CacheInheritanceEnabled(): boolean {
        return this.Get('CacheInheritanceEnabled');
    }
    set CacheInheritanceEnabled(value: boolean) {
        this.Set('CacheInheritanceEnabled', value);
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(50)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Query Entities - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: QueryEntity
 * * Base View: vwQueryEntities
 * * @description Tracks which entities are involved in a given query. The Queries table stores SQL and descriptions for stored queries that can be executed and serve as examples for AI.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Query Entities')
export class QueryEntityEntity extends BaseEntity<QueryEntityEntityType> {
    /**
    * Loads the Query Entities record from the database
    * @param ID: string - primary key value to load the Query Entities record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof QueryEntityEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Unique identifier for the QueryEntity record.
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: QueryID
    * * Display Name: Query ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queries (vwQueries.ID)
    * * Description: References the ID of the query in the Queries table.
    */
    get QueryID(): string {
        return this.Get('QueryID');
    }
    set QueryID(value: string) {
        this.Set('QueryID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    * * Description: References the ID of the entity in the Entities table.
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: DetectionMethod
    * * Display Name: Detection Method
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Manual
    * * Value List Type: List
    * * Possible Values 
    *   * AI
    *   * Manual
    * * Description: Indicates how this entity-query relationship was identified. "AI" means the QueryEntityServer used LLM analysis to parse the SQL/template and identify which MemberJunction entities are referenced (by analyzing table names, joins, and query structure). "Manual" means a user explicitly marked this entity as being used by the query. AI detection helps maintain accurate metadata automatically as queries evolve.
    */
    get DetectionMethod(): 'AI' | 'Manual' {
        return this.Get('DetectionMethod');
    }
    set DetectionMethod(value: 'AI' | 'Manual') {
        this.Set('DetectionMethod', value);
    }

    /**
    * * Field Name: AutoDetectConfidenceScore
    * * Display Name: Auto Detect Confidence Score
    * * SQL Data Type: decimal(3, 2)
    * * Description: Confidence score (0.00-1.00) indicating how certain the AI was that this entity is actually used in the query. Only populated when DetectionMethod="AI". Considers factors like: direct table references vs indirect joins, clear entity names vs ambiguous aliases, and context from the query purpose. Lower scores might indicate the entity is only peripherally involved or the detection was uncertain.
    */
    get AutoDetectConfidenceScore(): number | null {
        return this.Get('AutoDetectConfidenceScore');
    }
    set AutoDetectConfidenceScore(value: number | null) {
        this.Set('AutoDetectConfidenceScore', value);
    }

    /**
    * * Field Name: Query
    * * Display Name: Query
    * * SQL Data Type: nvarchar(255)
    */
    get Query(): string {
        return this.Get('Query');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }
}


/**
 * Query Fields - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: QueryField
 * * Base View: vwQueryFields
 * * @description Stores field-level metadata for queries including display names, data types, and formatting rules for result presentation.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Query Fields')
export class QueryFieldEntity extends BaseEntity<QueryFieldEntityType> {
    /**
    * Loads the Query Fields record from the database
    * @param ID: string - primary key value to load the Query Fields record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof QueryFieldEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: QueryID
    * * Display Name: Query ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queries (vwQueries.ID)
    */
    get QueryID(): string {
        return this.Get('QueryID');
    }
    set QueryID(value: string) {
        this.Set('QueryID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: Display order of this field in query results.
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: SQLBaseType
    * * Display Name: SQLBase Type
    * * SQL Data Type: nvarchar(50)
    * * Description: The base type, not including parameters, in SQL. For example this field would be nvarchar or decimal, and wouldn't include type parameters. The SQLFullType field provides that information.
    */
    get SQLBaseType(): string {
        return this.Get('SQLBaseType');
    }
    set SQLBaseType(value: string) {
        this.Set('SQLBaseType', value);
    }

    /**
    * * Field Name: SQLFullType
    * * Display Name: SQLFull Type
    * * SQL Data Type: nvarchar(100)
    * * Description: The full SQL type for the field, for example datetime or nvarchar(10) etc.
    */
    get SQLFullType(): string {
        return this.Get('SQLFullType');
    }
    set SQLFullType(value: string) {
        this.Set('SQLFullType', value);
    }

    /**
    * * Field Name: SourceEntityID
    * * Display Name: Source Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get SourceEntityID(): string | null {
        return this.Get('SourceEntityID');
    }
    set SourceEntityID(value: string | null) {
        this.Set('SourceEntityID', value);
    }

    /**
    * * Field Name: SourceFieldName
    * * Display Name: Source Field Name
    * * SQL Data Type: nvarchar(255)
    * * Description: The original field name from the SQL query if different from the display name.
    */
    get SourceFieldName(): string | null {
        return this.Get('SourceFieldName');
    }
    set SourceFieldName(value: string | null) {
        this.Set('SourceFieldName', value);
    }

    /**
    * * Field Name: IsComputed
    * * Display Name: Is Computed
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if this field is calculated from other fields rather than directly from the database.
    */
    get IsComputed(): boolean {
        return this.Get('IsComputed');
    }
    set IsComputed(value: boolean) {
        this.Set('IsComputed', value);
    }

    /**
    * * Field Name: ComputationDescription
    * * Display Name: Computation Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Explanation of how this computed field is calculated.
    */
    get ComputationDescription(): string | null {
        return this.Get('ComputationDescription');
    }
    set ComputationDescription(value: string | null) {
        this.Set('ComputationDescription', value);
    }

    /**
    * * Field Name: IsSummary
    * * Display Name: Is Summary
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether this field represents an aggregate or summary value.
    */
    get IsSummary(): boolean {
        return this.Get('IsSummary');
    }
    set IsSummary(value: boolean) {
        this.Set('IsSummary', value);
    }

    /**
    * * Field Name: SummaryDescription
    * * Display Name: Summary Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of what this summary field represents and how it's aggregated.
    */
    get SummaryDescription(): string | null {
        return this.Get('SummaryDescription');
    }
    set SummaryDescription(value: string | null) {
        this.Set('SummaryDescription', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: DetectionMethod
    * * Display Name: Detection Method
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Manual
    * * Value List Type: List
    * * Possible Values 
    *   * AI
    *   * Manual
    * * Description: Indicates how this field was identified in the query output. "AI" means the QueryEntityServer used LLM analysis to parse the SELECT clause and determine field names, types, and their source entities/columns. This includes handling aliased columns, computed expressions, aggregations, and CASE statements. "Manual" means a user explicitly defined this output field. AI detection ensures the field list stays synchronized with query changes.
    */
    get DetectionMethod(): 'AI' | 'Manual' {
        return this.Get('DetectionMethod');
    }
    set DetectionMethod(value: 'AI' | 'Manual') {
        this.Set('DetectionMethod', value);
    }

    /**
    * * Field Name: AutoDetectConfidenceScore
    * * Display Name: Auto Detect Confidence Score
    * * SQL Data Type: decimal(3, 2)
    * * Description: Confidence score (0.00-1.00) indicating how certain the AI was about this field detection. Only populated when DetectionMethod="AI". Factors include: clarity of the SELECT clause, complexity of any expressions or transformations, confidence in type inference, and ability to trace back to source entity/column. Complex computed fields or ambiguous aliases result in lower scores. This helps identify fields that may need manual verification.
    */
    get AutoDetectConfidenceScore(): number | null {
        return this.Get('AutoDetectConfidenceScore');
    }
    set AutoDetectConfidenceScore(value: number | null) {
        this.Set('AutoDetectConfidenceScore', value);
    }

    /**
    * * Field Name: Query
    * * Display Name: Query
    * * SQL Data Type: nvarchar(255)
    */
    get Query(): string {
        return this.Get('Query');
    }

    /**
    * * Field Name: SourceEntity
    * * Display Name: Source Entity
    * * SQL Data Type: nvarchar(255)
    */
    get SourceEntity(): string | null {
        return this.Get('SourceEntity');
    }
}


/**
 * Query Permissions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: QueryPermission
 * * Base View: vwQueryPermissions
 * * @description Controls access to queries by defining which users and roles can run specific queries.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Query Permissions')
export class QueryPermissionEntity extends BaseEntity<QueryPermissionEntityType> {
    /**
    * Loads the Query Permissions record from the database
    * @param ID: string - primary key value to load the Query Permissions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof QueryPermissionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: QueryID
    * * Display Name: Query ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queries (vwQueries.ID)
    */
    get QueryID(): string {
        return this.Get('QueryID');
    }
    set QueryID(value: string) {
        this.Set('QueryID', value);
    }

    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    get RoleID(): string {
        return this.Get('RoleID');
    }
    set RoleID(value: string) {
        this.Set('RoleID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Query
    * * Display Name: Query
    * * SQL Data Type: nvarchar(255)
    */
    get Query(): string {
        return this.Get('Query');
    }

    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(50)
    */
    get Role(): string {
        return this.Get('Role');
    }
}


/**
 * Queue Tasks - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: QueueTask
 * * Base View: vwQueueTasks
 * * @description Manages asynchronous tasks in processing queues, tracking status, priority, and execution details for background operations.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Queue Tasks')
export class QueueTaskEntity extends BaseEntity<QueueTaskEntityType> {
    /**
    * Loads the Queue Tasks record from the database
    * @param ID: string - primary key value to load the Queue Tasks record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof QueueTaskEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: QueueID
    * * Display Name: Queue ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queues (vwQueues.ID)
    */
    get QueueID(): string {
        return this.Get('QueueID');
    }
    set QueueID(value: string) {
        this.Set('QueueID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Completed
    *   * Failed
    *   * In Progress
    */
    get Status(): 'Completed' | 'Failed' | 'In Progress' {
        return this.Get('Status');
    }
    set Status(value: 'Completed' | 'Failed' | 'In Progress') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    get StartedAt(): Date | null {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date | null) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: Data
    * * Display Name: Data
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON payload containing the data needed to process this task.
    */
    get Data(): string | null {
        return this.Get('Data');
    }
    set Data(value: string | null) {
        this.Set('Data', value);
    }

    /**
    * * Field Name: Options
    * * Display Name: Options
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration options for how this task should be processed.
    */
    get Options(): string | null {
        return this.Get('Options');
    }
    set Options(value: string | null) {
        this.Set('Options', value);
    }

    /**
    * * Field Name: Output
    * * Display Name: Output
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Result data from task execution, typically in JSON format.
    */
    get Output(): string | null {
        return this.Get('Output');
    }
    set Output(value: string | null) {
        this.Set('Output', value);
    }

    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Error details if the task failed during processing.
    */
    get ErrorMessage(): string | null {
        return this.Get('ErrorMessage');
    }
    set ErrorMessage(value: string | null) {
        this.Set('ErrorMessage', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Queue
    * * Display Name: Queue
    * * SQL Data Type: nvarchar(50)
    */
    get Queue(): string {
        return this.Get('Queue');
    }
}


/**
 * Queue Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: QueueType
 * * Base View: vwQueueTypes
 * * @description Defines different types of processing queues with specific behaviors, priorities, and processing rules for task management.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Queue Types')
export class QueueTypeEntity extends BaseEntity<QueueTypeEntityType> {
    /**
    * Loads the Queue Types record from the database
    * @param ID: string - primary key value to load the Queue Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof QueueTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(100)
    * * Description: Field DriverClass for entity Queue Types.
    */
    get DriverClass(): string {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: DriverImportPath
    * * Display Name: Driver Import Path
    * * SQL Data Type: nvarchar(200)
    * * Description: Field DriverImportPath for entity Queue Types.
    */
    get DriverImportPath(): string | null {
        return this.Get('DriverImportPath');
    }
    set DriverImportPath(value: string | null) {
        this.Set('DriverImportPath', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Field IsActive for entity Queue Types.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Queues - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Queue
 * * Base View: vwQueues
 * * @description Queues can be used to async execute long running tasks
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Queues')
export class QueueEntity extends BaseEntity<QueueEntityType> {
    /**
    * Loads the Queues record from the database
    * @param ID: string - primary key value to load the Queues record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof QueueEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: QueueTypeID
    * * Display Name: Queue Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queue Types (vwQueueTypes.ID)
    */
    get QueueTypeID(): string {
        return this.Get('QueueTypeID');
    }
    set QueueTypeID(value: string) {
        this.Set('QueueTypeID', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Field IsActive for entity Queues.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: ProcessPID
    * * Display Name: Process PID
    * * SQL Data Type: int
    * * Description: Field ProcessPID for entity Queues.
    */
    get ProcessPID(): number | null {
        return this.Get('ProcessPID');
    }
    set ProcessPID(value: number | null) {
        this.Set('ProcessPID', value);
    }

    /**
    * * Field Name: ProcessPlatform
    * * Display Name: Process Platform
    * * SQL Data Type: nvarchar(30)
    * * Description: Field ProcessPlatform for entity Queues.
    */
    get ProcessPlatform(): string | null {
        return this.Get('ProcessPlatform');
    }
    set ProcessPlatform(value: string | null) {
        this.Set('ProcessPlatform', value);
    }

    /**
    * * Field Name: ProcessVersion
    * * Display Name: Process Version
    * * SQL Data Type: nvarchar(15)
    * * Description: Field ProcessVersion for entity Queues.
    */
    get ProcessVersion(): string | null {
        return this.Get('ProcessVersion');
    }
    set ProcessVersion(value: string | null) {
        this.Set('ProcessVersion', value);
    }

    /**
    * * Field Name: ProcessCwd
    * * Display Name: Process Cwd
    * * SQL Data Type: nvarchar(100)
    * * Description: Field ProcessCwd for entity Queues.
    */
    get ProcessCwd(): string | null {
        return this.Get('ProcessCwd');
    }
    set ProcessCwd(value: string | null) {
        this.Set('ProcessCwd', value);
    }

    /**
    * * Field Name: ProcessIPAddress
    * * Display Name: Process IPAddress
    * * SQL Data Type: nvarchar(50)
    * * Description: Field ProcessIPAddress for entity Queues.
    */
    get ProcessIPAddress(): string | null {
        return this.Get('ProcessIPAddress');
    }
    set ProcessIPAddress(value: string | null) {
        this.Set('ProcessIPAddress', value);
    }

    /**
    * * Field Name: ProcessMacAddress
    * * Display Name: Process Mac Address
    * * SQL Data Type: nvarchar(50)
    * * Description: Field ProcessMacAddress for entity Queues.
    */
    get ProcessMacAddress(): string | null {
        return this.Get('ProcessMacAddress');
    }
    set ProcessMacAddress(value: string | null) {
        this.Set('ProcessMacAddress', value);
    }

    /**
    * * Field Name: ProcessOSName
    * * Display Name: Process OSName
    * * SQL Data Type: nvarchar(25)
    * * Description: Field ProcessOSName for entity Queues.
    */
    get ProcessOSName(): string | null {
        return this.Get('ProcessOSName');
    }
    set ProcessOSName(value: string | null) {
        this.Set('ProcessOSName', value);
    }

    /**
    * * Field Name: ProcessOSVersion
    * * Display Name: Process OSVersion
    * * SQL Data Type: nvarchar(10)
    * * Description: Field ProcessOSVersion for entity Queues.
    */
    get ProcessOSVersion(): string | null {
        return this.Get('ProcessOSVersion');
    }
    set ProcessOSVersion(value: string | null) {
        this.Set('ProcessOSVersion', value);
    }

    /**
    * * Field Name: ProcessHostName
    * * Display Name: Process Host Name
    * * SQL Data Type: nvarchar(50)
    * * Description: Field ProcessHostName for entity Queues.
    */
    get ProcessHostName(): string | null {
        return this.Get('ProcessHostName');
    }
    set ProcessHostName(value: string | null) {
        this.Set('ProcessHostName', value);
    }

    /**
    * * Field Name: ProcessUserID
    * * Display Name: Process User ID
    * * SQL Data Type: nvarchar(25)
    * * Description: Field ProcessUserID for entity Queues.
    */
    get ProcessUserID(): string | null {
        return this.Get('ProcessUserID');
    }
    set ProcessUserID(value: string | null) {
        this.Set('ProcessUserID', value);
    }

    /**
    * * Field Name: ProcessUserName
    * * Display Name: Process User Name
    * * SQL Data Type: nvarchar(50)
    * * Description: Field ProcessUserName for entity Queues.
    */
    get ProcessUserName(): string | null {
        return this.Get('ProcessUserName');
    }
    set ProcessUserName(value: string | null) {
        this.Set('ProcessUserName', value);
    }

    /**
    * * Field Name: LastHeartbeat
    * * Display Name: Last Heartbeat
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    * * Description: Field LastHeartbeat for entity Queues.
    */
    get LastHeartbeat(): Date {
        return this.Get('LastHeartbeat');
    }
    set LastHeartbeat(value: Date) {
        this.Set('LastHeartbeat', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: QueueType
    * * Display Name: Queue Type
    * * SQL Data Type: nvarchar(50)
    */
    get QueueType(): string {
        return this.Get('QueueType');
    }
}


/**
 * Recommendation Items - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: RecommendationItem
 * * Base View: vwRecommendationItems
 * * @description Table to store individual recommendation items that are the right side of the recommendation which we track in the DestinationEntityID/DestinationEntityRecordID
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Recommendation Items')
export class RecommendationItemEntity extends BaseEntity<RecommendationItemEntityType> {
    /**
    * Loads the Recommendation Items record from the database
    * @param ID: string - primary key value to load the Recommendation Items record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RecommendationItemEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for Recommendation Items entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * MatchProbability: This rule ensures that if a match probability is set, it must be between 0 and 1, inclusive.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateMatchProbabilityIsBetweenZeroAndOne(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if a match probability is set, it must be between 0 and 1, inclusive.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateMatchProbabilityIsBetweenZeroAndOne(result: ValidationResult) {
    	if (this.MatchProbability != null && (this.MatchProbability < 0 || this.MatchProbability > 1)) {
    		result.Errors.push(new ValidationErrorInfo("MatchProbability", "MatchProbability, if provided, must be between 0 and 1 (inclusive).", this.MatchProbability, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: RecommendationID
    * * Display Name: Recommendation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Recommendations (vwRecommendations.ID)
    */
    get RecommendationID(): string {
        return this.Get('RecommendationID');
    }
    set RecommendationID(value: string) {
        this.Set('RecommendationID', value);
    }

    /**
    * * Field Name: DestinationEntityID
    * * Display Name: Destination Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get DestinationEntityID(): string {
        return this.Get('DestinationEntityID');
    }
    set DestinationEntityID(value: string) {
        this.Set('DestinationEntityID', value);
    }

    /**
    * * Field Name: DestinationEntityRecordID
    * * Display Name: Destination Entity Record ID
    * * SQL Data Type: nvarchar(450)
    * * Description: The record ID of the destination entity
    */
    get DestinationEntityRecordID(): string {
        return this.Get('DestinationEntityRecordID');
    }
    set DestinationEntityRecordID(value: string) {
        this.Set('DestinationEntityRecordID', value);
    }

    /**
    * * Field Name: MatchProbability
    * * Display Name: Match Probability
    * * SQL Data Type: decimal(18, 15)
    * * Description: A value between 0 and 1 indicating the probability of the match, higher numbers indicating a more certain match/recommendation.
    */
    get MatchProbability(): number | null {
        return this.Get('MatchProbability');
    }
    set MatchProbability(value: number | null) {
        this.Set('MatchProbability', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: DestinationEntity
    * * Display Name: Destination Entity
    * * SQL Data Type: nvarchar(255)
    */
    get DestinationEntity(): string {
        return this.Get('DestinationEntity');
    }
}


/**
 * Recommendation Providers - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: RecommendationProvider
 * * Base View: vwRecommendationProviders
 * * @description Recommendation providers details
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Recommendation Providers')
export class RecommendationProviderEntity extends BaseEntity<RecommendationProviderEntityType> {
    /**
    * Loads the Recommendation Providers record from the database
    * @param ID: string - primary key value to load the Recommendation Providers record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RecommendationProviderEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Recommendation Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: RecommendationRun
 * * Base View: vwRecommendationRuns
 * * @description Recommendation runs log each time a provider is requested to provide recommendations
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Recommendation Runs')
export class RecommendationRunEntity extends BaseEntity<RecommendationRunEntityType> {
    /**
    * Loads the Recommendation Runs record from the database
    * @param ID: string - primary key value to load the Recommendation Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RecommendationRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: RecommendationProviderID
    * * Display Name: Recommendation Provider ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Recommendation Providers (vwRecommendationProviders.ID)
    */
    get RecommendationProviderID(): string {
        return this.Get('RecommendationProviderID');
    }
    set RecommendationProviderID(value: string) {
        this.Set('RecommendationProviderID', value);
    }

    /**
    * * Field Name: StartDate
    * * Display Name: Start Date
    * * SQL Data Type: datetime
    * * Description: The start date of the recommendation run
    */
    get StartDate(): Date {
        return this.Get('StartDate');
    }
    set StartDate(value: Date) {
        this.Set('StartDate', value);
    }

    /**
    * * Field Name: EndDate
    * * Display Name: End Date
    * * SQL Data Type: datetime
    * * Description: The end date of the recommendation run
    */
    get EndDate(): Date | null {
        return this.Get('EndDate');
    }
    set EndDate(value: Date | null) {
        this.Set('EndDate', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Canceled
    *   * Completed
    *   * Error
    *   * In Progress
    *   * Pending
    * * Description: The status of the recommendation run
    */
    get Status(): 'Canceled' | 'Completed' | 'Error' | 'In Progress' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Canceled' | 'Completed' | 'Error' | 'In Progress' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: RunByUserID
    * * Display Name: Run By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get RunByUserID(): string {
        return this.Get('RunByUserID');
    }
    set RunByUserID(value: string) {
        this.Set('RunByUserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: RecommendationProvider
    * * Display Name: Recommendation Provider
    * * SQL Data Type: nvarchar(255)
    */
    get RecommendationProvider(): string {
        return this.Get('RecommendationProvider');
    }

    /**
    * * Field Name: RunByUser
    * * Display Name: Run By User
    * * SQL Data Type: nvarchar(100)
    */
    get RunByUser(): string {
        return this.Get('RunByUser');
    }
}


/**
 * Recommendations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Recommendation
 * * Base View: vwRecommendations
 * * @description Recommendation headers that store the left side of the recommendation which we track in the SourceEntityID/SourceEntityRecordID
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Recommendations')
export class RecommendationEntity extends BaseEntity<RecommendationEntityType> {
    /**
    * Loads the Recommendations record from the database
    * @param ID: string - primary key value to load the Recommendations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RecommendationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: RecommendationRunID
    * * Display Name: Recommendation Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Recommendation Runs (vwRecommendationRuns.ID)
    */
    get RecommendationRunID(): string {
        return this.Get('RecommendationRunID');
    }
    set RecommendationRunID(value: string) {
        this.Set('RecommendationRunID', value);
    }

    /**
    * * Field Name: SourceEntityID
    * * Display Name: Source Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get SourceEntityID(): string {
        return this.Get('SourceEntityID');
    }
    set SourceEntityID(value: string) {
        this.Set('SourceEntityID', value);
    }

    /**
    * * Field Name: SourceEntityRecordID
    * * Display Name: Source Entity Record ID
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The record ID of the source entity
    */
    get SourceEntityRecordID(): string {
        return this.Get('SourceEntityRecordID');
    }
    set SourceEntityRecordID(value: string) {
        this.Set('SourceEntityRecordID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: SourceEntity
    * * Display Name: Source Entity
    * * SQL Data Type: nvarchar(255)
    */
    get SourceEntity(): string {
        return this.Get('SourceEntity');
    }
}


/**
 * Record Change Replay Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: RecordChangeReplayRun
 * * Base View: vwRecordChangeReplayRuns
 * * @description Table to track the runs of replaying external record changes
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Record Change Replay Runs')
export class RecordChangeReplayRunEntity extends BaseEntity<RecordChangeReplayRunEntityType> {
    /**
    * Loads the Record Change Replay Runs record from the database
    * @param ID: string - primary key value to load the Record Change Replay Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RecordChangeReplayRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    * * Description: Timestamp when the replay run started
    */
    get StartedAt(): Date {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    * * Description: Timestamp when the replay run ended
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * In Progress
    *   * Pending
    * * Description: Status of the replay run (Pending, In Progress, Complete, Error)
    */
    get Status(): 'Complete' | 'Error' | 'In Progress' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Error' | 'In Progress' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * Record Changes - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: RecordChange
 * * Base View: vwRecordChanges
 * * @description For entities that have TrackRecordChanges=1, Record Changes will store the history of all changes made within the system. For integrations you can directly add values here if you have inbound signals indicating records were changed in a source system. This entity only automatically captures Record Changes if they were made within the system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Record Changes')
export class RecordChangeEntity extends BaseEntity<RecordChangeEntityType> {
    /**
    * Loads the Record Changes record from the database
    * @param ID: string - primary key value to load the Record Changes record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RecordChangeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(750)
    * * Description: Field RecordID for entity Record Changes.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Create
    * * Value List Type: List
    * * Possible Values 
    *   * Create
    *   * Delete
    *   * Update
    * * Description: Create, Update, or Delete
    */
    get Type(): 'Create' | 'Delete' | 'Update' {
        return this.Get('Type');
    }
    set Type(value: 'Create' | 'Delete' | 'Update') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: Source
    * * Display Name: Source
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Internal
    * * Value List Type: List
    * * Possible Values 
    *   * External
    *   * Internal
    * * Description: Internal or External
    */
    get Source(): 'External' | 'Internal' {
        return this.Get('Source');
    }
    set Source(value: 'External' | 'Internal') {
        this.Set('Source', value);
    }

    /**
    * * Field Name: ChangedAt
    * * Display Name: Changed At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    * * Description: The date/time that the change occured.
    */
    get ChangedAt(): Date {
        return this.Get('ChangedAt');
    }
    set ChangedAt(value: Date) {
        this.Set('ChangedAt', value);
    }

    /**
    * * Field Name: ChangesJSON
    * * Display Name: Changes JSON
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON structure that describes what was changed in a structured format.
    */
    get ChangesJSON(): string {
        return this.Get('ChangesJSON');
    }
    set ChangesJSON(value: string) {
        this.Set('ChangesJSON', value);
    }

    /**
    * * Field Name: ChangesDescription
    * * Display Name: Changes Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: A generated, human-readable description of what was changed.
    */
    get ChangesDescription(): string {
        return this.Get('ChangesDescription');
    }
    set ChangesDescription(value: string) {
        this.Set('ChangesDescription', value);
    }

    /**
    * * Field Name: FullRecordJSON
    * * Display Name: Full Record JSON
    * * SQL Data Type: nvarchar(MAX)
    * * Description: A complete snapshot of the record AFTER the change was applied in a JSON format that can be parsed.
    */
    get FullRecordJSON(): string {
        return this.Get('FullRecordJSON');
    }
    set FullRecordJSON(value: string) {
        this.Set('FullRecordJSON', value);
    }

    /**
    * * Field Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Complete
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Pending
    * * Description: For internal record changes generated within MJ, the status is immediately Complete. For external changes that are detected, the workflow starts off as Pending, then In Progress and finally either Complete or Error
    */
    get Status(): 'Complete' | 'Error' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Error' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: ErrorLog
    * * Display Name: Error Log
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Field ErrorLog for entity Record Changes.
    */
    get ErrorLog(): string | null {
        return this.Get('ErrorLog');
    }
    set ErrorLog(value: string | null) {
        this.Set('ErrorLog', value);
    }

    /**
    * * Field Name: ReplayRunID
    * * Display Name: Replay Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Record Change Replay Runs (vwRecordChangeReplayRuns.ID)
    */
    get ReplayRunID(): string | null {
        return this.Get('ReplayRunID');
    }
    set ReplayRunID(value: string | null) {
        this.Set('ReplayRunID', value);
    }

    /**
    * * Field Name: IntegrationID
    * * Display Name: Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Integrations (vwIntegrations.ID)
    */
    get IntegrationID(): string | null {
        return this.Get('IntegrationID');
    }
    set IntegrationID(value: string | null) {
        this.Set('IntegrationID', value);
    }

    /**
    * * Field Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    * * Description: Field CreatedAt for entity Record Changes.
    */
    get CreatedAt(): Date {
        return this.Get('CreatedAt');
    }

    /**
    * * Field Name: UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    * * Description: Field UpdatedAt for entity Record Changes.
    */
    get UpdatedAt(): Date {
        return this.Get('UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: Integration
    * * Display Name: Integration
    * * SQL Data Type: nvarchar(100)
    */
    get Integration(): string | null {
        return this.Get('Integration');
    }
}


/**
 * Record Merge Deletion Logs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: RecordMergeDeletionLog
 * * Base View: vwRecordMergeDeletionLogs
 * * @description Tracks records deleted during merge operations, maintaining an audit trail of data consolidation activities.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Record Merge Deletion Logs')
export class RecordMergeDeletionLogEntity extends BaseEntity<RecordMergeDeletionLogEntityType> {
    /**
    * Loads the Record Merge Deletion Logs record from the database
    * @param ID: string - primary key value to load the Record Merge Deletion Logs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RecordMergeDeletionLogEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: RecordMergeLogID
    * * Display Name: Record Merge Log ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Record Merge Logs (vwRecordMergeLogs.ID)
    */
    get RecordMergeLogID(): string {
        return this.Get('RecordMergeLogID');
    }
    set RecordMergeLogID(value: string) {
        this.Set('RecordMergeLogID', value);
    }

    /**
    * * Field Name: DeletedRecordID
    * * Display Name: Deleted Record ID
    * * SQL Data Type: nvarchar(750)
    * * Description: Field DeletedRecordID for entity Record Merge Deletion Logs.
    */
    get DeletedRecordID(): string {
        return this.Get('DeletedRecordID');
    }
    set DeletedRecordID(value: string) {
        this.Set('DeletedRecordID', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Pending
    */
    get Status(): 'Complete' | 'Error' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Error' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: ProcessingLog
    * * Display Name: Processing Log
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Field ProcessingLog for entity Record Merge Deletion Logs.
    */
    get ProcessingLog(): string | null {
        return this.Get('ProcessingLog');
    }
    set ProcessingLog(value: string | null) {
        this.Set('ProcessingLog', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Record Merge Logs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: RecordMergeLog
 * * Base View: vwRecordMergeLogs
 * * @description Records the history of record merge operations including source records, target records, and merge rules applied.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Record Merge Logs')
export class RecordMergeLogEntity extends BaseEntity<RecordMergeLogEntityType> {
    /**
    * Loads the Record Merge Logs record from the database
    * @param ID: string - primary key value to load the Record Merge Logs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RecordMergeLogEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: SurvivingRecordID
    * * Display Name: Surviving Record ID
    * * SQL Data Type: nvarchar(450)
    * * Description: The ID of the record that survived the merge and contains the consolidated data.
    */
    get SurvivingRecordID(): string {
        return this.Get('SurvivingRecordID');
    }
    set SurvivingRecordID(value: string) {
        this.Set('SurvivingRecordID', value);
    }

    /**
    * * Field Name: InitiatedByUserID
    * * Display Name: Initiated By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get InitiatedByUserID(): string {
        return this.Get('InitiatedByUserID');
    }
    set InitiatedByUserID(value: string) {
        this.Set('InitiatedByUserID', value);
    }

    /**
    * * Field Name: ApprovalStatus
    * * Display Name: Approval Status
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Pending
    *   * Rejected
    * * Description: Field ApprovalStatus for entity Record Merge Logs.
    */
    get ApprovalStatus(): 'Approved' | 'Pending' | 'Rejected' {
        return this.Get('ApprovalStatus');
    }
    set ApprovalStatus(value: 'Approved' | 'Pending' | 'Rejected') {
        this.Set('ApprovalStatus', value);
    }

    /**
    * * Field Name: ApprovedByUserID
    * * Display Name: Approved By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get ApprovedByUserID(): string | null {
        return this.Get('ApprovedByUserID');
    }
    set ApprovedByUserID(value: string | null) {
        this.Set('ApprovedByUserID', value);
    }

    /**
    * * Field Name: ProcessingStatus
    * * Display Name: Processing Status
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Error
    *   * Started
    * * Description: Field ProcessingStatus for entity Record Merge Logs.
    */
    get ProcessingStatus(): 'Complete' | 'Error' | 'Started' {
        return this.Get('ProcessingStatus');
    }
    set ProcessingStatus(value: 'Complete' | 'Error' | 'Started') {
        this.Set('ProcessingStatus', value);
    }

    /**
    * * Field Name: ProcessingStartedAt
    * * Display Name: Processing Started At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    * * Description: Field ProcessingStartedAt for entity Record Merge Logs.
    */
    get ProcessingStartedAt(): Date {
        return this.Get('ProcessingStartedAt');
    }
    set ProcessingStartedAt(value: Date) {
        this.Set('ProcessingStartedAt', value);
    }

    /**
    * * Field Name: ProcessingEndedAt
    * * Display Name: Processing Ended At
    * * SQL Data Type: datetime
    * * Description: Field ProcessingEndedAt for entity Record Merge Logs.
    */
    get ProcessingEndedAt(): Date | null {
        return this.Get('ProcessingEndedAt');
    }
    set ProcessingEndedAt(value: Date | null) {
        this.Set('ProcessingEndedAt', value);
    }

    /**
    * * Field Name: ProcessingLog
    * * Display Name: Processing Log
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Detailed log of the merge process including field mappings and decisions.
    */
    get ProcessingLog(): string | null {
        return this.Get('ProcessingLog');
    }
    set ProcessingLog(value: string | null) {
        this.Set('ProcessingLog', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: InitiatedByUser
    * * Display Name: Initiated By User
    * * SQL Data Type: nvarchar(100)
    */
    get InitiatedByUser(): string {
        return this.Get('InitiatedByUser');
    }

    /**
    * * Field Name: ApprovedByUser
    * * Display Name: Approved By User
    * * SQL Data Type: nvarchar(100)
    */
    get ApprovedByUser(): string | null {
        return this.Get('ApprovedByUser');
    }
}


/**
 * Report Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ReportCategory
 * * Base View: vwReportCategories
 * * @description Organizes reports into logical groupings for navigation, access control, and discovery within the reporting system.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Report Categories')
export class ReportCategoryEntity extends BaseEntity<ReportCategoryEntityType> {
    /**
    * Loads the Report Categories record from the database
    * @param ID: string - primary key value to load the Report Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ReportCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Report Categories (vwReportCategories.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Report Snapshots - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ReportSnapshot
 * * Base View: vwReportSnapshots
 * * @description Stores point-in-time captures of report outputs, preserving historical data and enabling comparison over time.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Report Snapshots')
export class ReportSnapshotEntity extends BaseEntity<ReportSnapshotEntityType> {
    /**
    * Loads the Report Snapshots record from the database
    * @param ID: string - primary key value to load the Report Snapshots record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ReportSnapshotEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ReportID
    * * Display Name: Report ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Reports (vwReports.ID)
    */
    get ReportID(): string {
        return this.Get('ReportID');
    }
    set ReportID(value: string) {
        this.Set('ReportID', value);
    }

    /**
    * * Field Name: ResultSet
    * * Display Name: Result Set
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Field ResultSet for entity Report Snapshots.
    */
    get ResultSet(): string {
        return this.Get('ResultSet');
    }
    set ResultSet(value: string) {
        this.Set('ResultSet', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Report
    * * Display Name: Report
    * * SQL Data Type: nvarchar(255)
    */
    get Report(): string {
        return this.Get('Report');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * Reports - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Report
 * * Base View: vwReports
 * * @description Defines report configurations including data sources, layouts, filters, and scheduling for automated report generation.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Reports')
export class ReportEntity extends BaseEntity<ReportEntityType> {
    /**
    * Loads the Reports record from the database
    * @param ID: string - primary key value to load the Reports record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ReportEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Reports - Delete method override to wrap in transaction since CascadeDeletes is true.
    * Wrapping in a transaction ensures that all cascade delete operations are handled atomically.
    * @public
    * @method
    * @override
    * @memberof ReportEntity
    * @returns {Promise<boolean>} - true if successful, false otherwise
    */
    public async Delete(options?: EntityDeleteOptions): Promise<boolean> {
        if (Metadata.Provider.ProviderType === ProviderType.Database) {
            // For database providers, use the transaction methods directly
            const provider = Metadata.Provider as DatabaseProviderBase;
            
            try {
                await provider.BeginTransaction();
                const result = await super.Delete(options);
                
                if (result) {
                    await provider.CommitTransaction();
                    return true;
                } else {
                    await provider.RollbackTransaction();
                    return false;
                }
            } catch (error) {
                await provider.RollbackTransaction();
                throw error;
            }
        } else {
            // For network providers, cascading deletes are handled server-side
            return super.Delete(options);
        }
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Report Categories (vwReportCategories.ID)
    */
    get CategoryID(): string | null {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string | null) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: SharingScope
    * * Display Name: Sharing Scope
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Personal
    * * Value List Type: List
    * * Possible Values 
    *   * Everyone
    *   * None
    *   * Specific
    * * Description: Field SharingScope for entity Reports.
    */
    get SharingScope(): 'Everyone' | 'None' | 'Specific' {
        return this.Get('SharingScope');
    }
    set SharingScope(value: 'Everyone' | 'None' | 'Specific') {
        this.Set('SharingScope', value);
    }

    /**
    * * Field Name: ConversationID
    * * Display Name: Conversation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
    */
    get ConversationID(): string | null {
        return this.Get('ConversationID');
    }
    set ConversationID(value: string | null) {
        this.Set('ConversationID', value);
    }

    /**
    * * Field Name: ConversationDetailID
    * * Display Name: Conversation Detail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
    */
    get ConversationDetailID(): string | null {
        return this.Get('ConversationDetailID');
    }
    set ConversationDetailID(value: string | null) {
        this.Set('ConversationDetailID', value);
    }

    /**
    * * Field Name: DataContextID
    * * Display Name: Data Context ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Data Contexts (vwDataContexts.ID)
    */
    get DataContextID(): string | null {
        return this.Get('DataContextID');
    }
    set DataContextID(value: string | null) {
        this.Set('DataContextID', value);
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Field Configuration for entity Reports.
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }
    set Configuration(value: string | null) {
        this.Set('Configuration', value);
    }

    /**
    * * Field Name: OutputTriggerTypeID
    * * Display Name: Output Trigger Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Output Trigger Types (vwOutputTriggerTypes.ID)
    */
    get OutputTriggerTypeID(): string | null {
        return this.Get('OutputTriggerTypeID');
    }
    set OutputTriggerTypeID(value: string | null) {
        this.Set('OutputTriggerTypeID', value);
    }

    /**
    * * Field Name: OutputFormatTypeID
    * * Display Name: Output Format Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Output Format Types (vwOutputFormatTypes.ID)
    */
    get OutputFormatTypeID(): string | null {
        return this.Get('OutputFormatTypeID');
    }
    set OutputFormatTypeID(value: string | null) {
        this.Set('OutputFormatTypeID', value);
    }

    /**
    * * Field Name: OutputDeliveryTypeID
    * * Display Name: Output Delivery Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Output Delivery Types (vwOutputDeliveryTypes.ID)
    */
    get OutputDeliveryTypeID(): string | null {
        return this.Get('OutputDeliveryTypeID');
    }
    set OutputDeliveryTypeID(value: string | null) {
        this.Set('OutputDeliveryTypeID', value);
    }

    /**
    * * Field Name: OutputFrequency
    * * Display Name: Output Frequency
    * * SQL Data Type: nvarchar(50)
    * * Description: For scheduled reports, the frequency of generation (Daily, Weekly, Monthly, etc.).
    */
    get OutputFrequency(): string | null {
        return this.Get('OutputFrequency');
    }
    set OutputFrequency(value: string | null) {
        this.Set('OutputFrequency', value);
    }

    /**
    * * Field Name: OutputTargetEmail
    * * Display Name: Output Target Email
    * * SQL Data Type: nvarchar(255)
    * * Description: Email address(es) to send the report to when using email delivery.
    */
    get OutputTargetEmail(): string | null {
        return this.Get('OutputTargetEmail');
    }
    set OutputTargetEmail(value: string | null) {
        this.Set('OutputTargetEmail', value);
    }

    /**
    * * Field Name: OutputWorkflowID
    * * Display Name: Output Workflow ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Workflows (vwWorkflows.ID)
    */
    get OutputWorkflowID(): string | null {
        return this.Get('OutputWorkflowID');
    }
    set OutputWorkflowID(value: string | null) {
        this.Set('OutputWorkflowID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Thumbnail
    * * Display Name: Thumbnail
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Thumbnail image for the report that can be displayed in gallery views. Can contain either a URL to an image file or a Base64-encoded image string.
    */
    get Thumbnail(): string | null {
        return this.Get('Thumbnail');
    }
    set Thumbnail(value: string | null) {
        this.Set('Thumbnail', value);
    }

    /**
    * * Field Name: EnvironmentID
    * * Display Name: Environment ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: MJ: Environments (vwEnvironments.ID)
    * * Default Value: F51358F3-9447-4176-B313-BF8025FD8D09
    */
    get EnvironmentID(): string {
        return this.Get('EnvironmentID');
    }
    set EnvironmentID(value: string) {
        this.Set('EnvironmentID', value);
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(100)
    */
    get Category(): string | null {
        return this.Get('Category');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: Conversation
    * * Display Name: Conversation
    * * SQL Data Type: nvarchar(255)
    */
    get Conversation(): string | null {
        return this.Get('Conversation');
    }

    /**
    * * Field Name: DataContext
    * * Display Name: Data Context
    * * SQL Data Type: nvarchar(255)
    */
    get DataContext(): string | null {
        return this.Get('DataContext');
    }

    /**
    * * Field Name: OutputTriggerType
    * * Display Name: Output Trigger Type
    * * SQL Data Type: nvarchar(255)
    */
    get OutputTriggerType(): string | null {
        return this.Get('OutputTriggerType');
    }

    /**
    * * Field Name: OutputFormatType
    * * Display Name: Output Format Type
    * * SQL Data Type: nvarchar(255)
    */
    get OutputFormatType(): string | null {
        return this.Get('OutputFormatType');
    }

    /**
    * * Field Name: OutputDeliveryType
    * * Display Name: Output Delivery Type
    * * SQL Data Type: nvarchar(255)
    */
    get OutputDeliveryType(): string | null {
        return this.Get('OutputDeliveryType');
    }

    /**
    * * Field Name: OutputWorkflow
    * * Display Name: Output Workflow
    * * SQL Data Type: nvarchar(100)
    */
    get OutputWorkflow(): string | null {
        return this.Get('OutputWorkflow');
    }

    /**
    * * Field Name: Environment
    * * Display Name: Environment
    * * SQL Data Type: nvarchar(255)
    */
    get Environment(): string {
        return this.Get('Environment');
    }
}


/**
 * Resource Links - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ResourceLink
 * * Base View: vwResourceLinks
 * * @description Table to track user links to shared resources such as views, dashboards, etc.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Resource Links')
export class ResourceLinkEntity extends BaseEntity<ResourceLinkEntityType> {
    /**
    * Loads the Resource Links record from the database
    * @param ID: string - primary key value to load the Resource Links record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ResourceLinkEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Unique identifier for each resource link
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    * * Description: Foreign key to the user linking the resource
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: ResourceTypeID
    * * Display Name: Resource Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)
    * * Description: Foreign key to the resource type (view, dashboard, etc.)
    */
    get ResourceTypeID(): string {
        return this.Get('ResourceTypeID');
    }
    set ResourceTypeID(value: string) {
        this.Set('ResourceTypeID', value);
    }

    /**
    * * Field Name: ResourceRecordID
    * * Display Name: Resource Record ID
    * * SQL Data Type: nvarchar(255)
    * * Description: ID of the specific resource being linked
    */
    get ResourceRecordID(): string {
        return this.Get('ResourceRecordID');
    }
    set ResourceRecordID(value: string) {
        this.Set('ResourceRecordID', value);
    }

    /**
    * * Field Name: FolderID
    * * Display Name: Folder ID
    * * SQL Data Type: nvarchar(255)
    * * Description: Optional folder where the user organizes the linked resource
    */
    get FolderID(): string | null {
        return this.Get('FolderID');
    }
    set FolderID(value: string | null) {
        this.Set('FolderID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: ResourceType
    * * Display Name: Resource Type
    * * SQL Data Type: nvarchar(255)
    */
    get ResourceType(): string {
        return this.Get('ResourceType');
    }
}


/**
 * Resource Permissions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ResourcePermission
 * * Base View: vwResourcePermissions
 * * @description Table for managing sharing of resources to users or roles with time constraints and permission levels
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Resource Permissions')
export class ResourcePermissionEntity extends BaseEntity<ResourcePermissionEntityType> {
    /**
    * Loads the Resource Permissions record from the database
    * @param ID: string - primary key value to load the Resource Permissions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ResourcePermissionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for Resource Permissions entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that if the type is set to 'Role', a role ID must be provided and a user ID must not be provided. If the type is set to 'User', a user ID must be provided and a role ID must not be provided.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateTypeAndRoleOrUserIDExclusive(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that if the type is set to 'Role', a role ID must be provided and a user ID must not be provided. If the type is set to 'User', a user ID must be provided and a role ID must not be provided.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateTypeAndRoleOrUserIDExclusive(result: ValidationResult) {
    	if (this.Type === "Role") {
    		if (this.RoleID == null) {
    			result.Errors.push(new ValidationErrorInfo("RoleID", "When Type is 'Role', RoleID must be provided.", this.RoleID, ValidationErrorType.Failure));
    		}
    		if (this.UserID != null) {
    			result.Errors.push(new ValidationErrorInfo("UserID", "When Type is 'Role', UserID must not be provided.", this.UserID, ValidationErrorType.Failure));
    		}
    	} else if (this.Type === "User") {
    		if (this.UserID == null) {
    			result.Errors.push(new ValidationErrorInfo("UserID", "When Type is 'User', UserID must be provided.", this.UserID, ValidationErrorType.Failure));
    		}
    		if (this.RoleID != null) {
    			result.Errors.push(new ValidationErrorInfo("RoleID", "When Type is 'User', RoleID must not be provided.", this.RoleID, ValidationErrorType.Failure));
    		}
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ResourceTypeID
    * * Display Name: Resource Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)
    * * Description: Reference to the type of resource being shared (View, Dashboard, Report, etc.)
    */
    get ResourceTypeID(): string {
        return this.Get('ResourceTypeID');
    }
    set ResourceTypeID(value: string) {
        this.Set('ResourceTypeID', value);
    }

    /**
    * * Field Name: ResourceRecordID
    * * Display Name: Resource Record ID
    * * SQL Data Type: nvarchar(255)
    * * Description: ID of the specific resource being shared
    */
    get ResourceRecordID(): string {
        return this.Get('ResourceRecordID');
    }
    set ResourceRecordID(value: string) {
        this.Set('ResourceRecordID', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(10)
    * * Value List Type: List
    * * Possible Values 
    *   * Role
    *   * User
    * * Description: The level of sharing either Role or User
    */
    get Type(): 'Role' | 'User' {
        return this.Get('Type');
    }
    set Type(value: 'Role' | 'User') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: StartSharingAt
    * * Display Name: Start Sharing At
    * * SQL Data Type: datetimeoffset
    * * Description: Optional: Date when sharing starts
    */
    get StartSharingAt(): Date | null {
        return this.Get('StartSharingAt');
    }
    set StartSharingAt(value: Date | null) {
        this.Set('StartSharingAt', value);
    }

    /**
    * * Field Name: EndSharingAt
    * * Display Name: End Sharing At
    * * SQL Data Type: datetimeoffset
    * * Description: Optional: Date when sharing ends
    */
    get EndSharingAt(): Date | null {
        return this.Get('EndSharingAt');
    }
    set EndSharingAt(value: Date | null) {
        this.Set('EndSharingAt', value);
    }

    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    get RoleID(): string | null {
        return this.Get('RoleID');
    }
    set RoleID(value: string | null) {
        this.Set('RoleID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string | null {
        return this.Get('UserID');
    }
    set UserID(value: string | null) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: PermissionLevel
    * * Display Name: Permission Level
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Edit
    *   * Owner
    *   * View
    * * Description: Permission level defining the type of access (View, Edit, Owner)
    */
    get PermissionLevel(): 'Edit' | 'Owner' | 'View' | null {
        return this.Get('PermissionLevel');
    }
    set PermissionLevel(value: 'Edit' | 'Owner' | 'View' | null) {
        this.Set('PermissionLevel', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Requested
    * * Value List Type: List
    * * Possible Values 
    *   * Approved
    *   * Rejected
    *   * Requested
    *   * Revoked
    * * Description: Status of the resource permission request. Possible values are Requested, Approved, Rejected, or Revoked.
    */
    get Status(): 'Approved' | 'Rejected' | 'Requested' | 'Revoked' {
        return this.Get('Status');
    }
    set Status(value: 'Approved' | 'Rejected' | 'Requested' | 'Revoked') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: ResourceType
    * * Display Name: Resource Type
    * * SQL Data Type: nvarchar(255)
    */
    get ResourceType(): string {
        return this.Get('ResourceType');
    }

    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(50)
    */
    get Role(): string | null {
        return this.Get('Role');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string | null {
        return this.Get('User');
    }
}


/**
 * Resource Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ResourceType
 * * Base View: vwResourceTypes
 * * @description Tracks types of system resources such as records, dashboards, and reports.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Resource Types')
export class ResourceTypeEntity extends BaseEntity<ResourceTypeEntityType> {
    /**
    * Loads the Resource Types record from the database
    * @param ID: string - primary key value to load the Resource Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ResourceTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Field DisplayName for entity Resource Types.
    */
    get DisplayName(): string {
        return this.Get('DisplayName');
    }
    set DisplayName(value: string) {
        this.Set('DisplayName', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Icon
    * * Display Name: Icon
    * * SQL Data Type: nvarchar(100)
    * * Description: Icon identifier for displaying this resource type in the UI.
    */
    get Icon(): string | null {
        return this.Get('Icon');
    }
    set Icon(value: string | null) {
        this.Set('Icon', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string | null {
        return this.Get('EntityID');
    }
    set EntityID(value: string | null) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: CategoryEntityID
    * * Display Name: Category Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    * * Description: Nullable foreign key to the ID column in Entities entity, representing the category entity. ASSUMPTION: If provided, the assumption is there is a self-referencing/recursive foreign key establishing a hierarchy within the Category Entity, commonly called ParentID, but it can be named anything.
    */
    get CategoryEntityID(): string | null {
        return this.Get('CategoryEntityID');
    }
    set CategoryEntityID(value: string | null) {
        this.Set('CategoryEntityID', value);
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string | null {
        return this.Get('Entity');
    }

    /**
    * * Field Name: CategoryEntity
    * * Display Name: Category Entity
    * * SQL Data Type: nvarchar(255)
    */
    get CategoryEntity(): string | null {
        return this.Get('CategoryEntity');
    }
}


/**
 * Roles - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Role
 * * Base View: vwRoles
 * * @description Roles are used for security administration and can have zero to many Users as members
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Roles')
export class RoleEntity extends BaseEntity<RoleEntityType> {
    /**
    * Loads the Roles record from the database
    * @param ID: string - primary key value to load the Roles record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RoleEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(50)
    * * Description: Role with full permissions to manage AI agents and all related entities. This role is required for AgentSpecSync operations to function correctly, allowing create, read, update, and delete operations on agents, prompts, actions, relationships, steps, and paths.
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the role
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: DirectoryID
    * * Display Name: Directory ID
    * * SQL Data Type: nvarchar(250)
    * * Description: The unique ID of the role in the directory being used for authentication, for example an ID in Azure.
    */
    get DirectoryID(): string | null {
        return this.Get('DirectoryID');
    }
    set DirectoryID(value: string | null) {
        this.Set('DirectoryID', value);
    }

    /**
    * * Field Name: SQLName
    * * SQL Data Type: nvarchar(250)
    * * Description: The name of the role in the database, this is used for auto-generating permission statements by CodeGen
    */
    get SQLName(): string | null {
        return this.Get('SQLName');
    }
    set SQLName(value: string | null) {
        this.Set('SQLName', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Row Level Security Filters - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: RowLevelSecurityFilter
 * * Base View: vwRowLevelSecurityFilters
 * * @description Defines data access rules that filter records based on user context, implementing fine-grained security at the row level.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Row Level Security Filters')
export class RowLevelSecurityFilterEntity extends BaseEntity<RowLevelSecurityFilterEntityType> {
    /**
    * Loads the Row Level Security Filters record from the database
    * @param ID: string - primary key value to load the Row Level Security Filters record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof RowLevelSecurityFilterEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: FilterText
    * * Display Name: Filter Text
    * * SQL Data Type: nvarchar(MAX)
    * * Description: SQL WHERE clause template that filters records based on user context variables.
    */
    get FilterText(): string | null {
        return this.Get('FilterText');
    }
    set FilterText(value: string | null) {
        this.Set('FilterText', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Scheduled Action Params - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ScheduledActionParam
 * * Base View: vwScheduledActionParams
 * * @description Stores parameter values for scheduled action executions, configuring inputs for automated action runs.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Scheduled Action Params')
export class ScheduledActionParamEntity extends BaseEntity<ScheduledActionParamEntityType> {
    /**
    * Loads the Scheduled Action Params record from the database
    * @param ID: string - primary key value to load the Scheduled Action Params record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ScheduledActionParamEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: ScheduledActionID
    * * Display Name: Scheduled Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Scheduled Actions (vwScheduledActions.ID)
    */
    get ScheduledActionID(): string {
        return this.Get('ScheduledActionID');
    }
    set ScheduledActionID(value: string) {
        this.Set('ScheduledActionID', value);
    }

    /**
    * * Field Name: ActionParamID
    * * Display Name: Action Param ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Params (vwActionParams.ID)
    */
    get ActionParamID(): string {
        return this.Get('ActionParamID');
    }
    set ActionParamID(value: string) {
        this.Set('ActionParamID', value);
    }

    /**
    * * Field Name: ValueType
    * * Display Name: Value Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * SQL Statement
    *   * Static
    * * Description: Field ValueType for entity Scheduled Action Params.
    */
    get ValueType(): 'SQL Statement' | 'Static' {
        return this.Get('ValueType');
    }
    set ValueType(value: 'SQL Statement' | 'Static') {
        this.Set('ValueType', value);
    }

    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Field Value for entity Scheduled Action Params.
    */
    get Value(): string | null {
        return this.Get('Value');
    }
    set Value(value: string | null) {
        this.Set('Value', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ScheduledAction
    * * Display Name: Scheduled Action
    * * SQL Data Type: nvarchar(255)
    */
    get ScheduledAction(): string {
        return this.Get('ScheduledAction');
    }

    /**
    * * Field Name: ActionParam
    * * Display Name: Action Param
    * * SQL Data Type: nvarchar(255)
    */
    get ActionParam(): string {
        return this.Get('ActionParam');
    }
}


/**
 * Scheduled Actions - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: ScheduledAction
 * * Base View: vwScheduledActions
 * * @description Track scheduled actions and their details
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Scheduled Actions')
export class ScheduledActionEntity extends BaseEntity<ScheduledActionEntityType> {
    /**
    * Loads the Scheduled Actions record from the database
    * @param ID: string - primary key value to load the Scheduled Actions record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof ScheduledActionEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: CreatedByUserID
    * * Display Name: Created By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get CreatedByUserID(): string {
        return this.Get('CreatedByUserID');
    }
    set CreatedByUserID(value: string) {
        this.Set('CreatedByUserID', value);
    }

    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    get ActionID(): string {
        return this.Get('ActionID');
    }
    set ActionID(value: string) {
        this.Set('ActionID', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Custom
    *   * Daily
    *   * Monthly
    *   * Weekly
    *   * Yearly
    * * Description: Type of the scheduled action (Daily, Weekly, Monthly, Yearly, Custom)
    */
    get Type(): 'Custom' | 'Daily' | 'Monthly' | 'Weekly' | 'Yearly' {
        return this.Get('Type');
    }
    set Type(value: 'Custom' | 'Daily' | 'Monthly' | 'Weekly' | 'Yearly') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: CronExpression
    * * Display Name: Cron Expression
    * * SQL Data Type: nvarchar(100)
    * * Description: Cron expression defining the schedule, automatically maintained by the system unless Type is Custom, in which case the user directly sets this
    */
    get CronExpression(): string | null {
        return this.Get('CronExpression');
    }
    set CronExpression(value: string | null) {
        this.Set('CronExpression', value);
    }

    /**
    * * Field Name: Timezone
    * * Display Name: Timezone
    * * SQL Data Type: nvarchar(100)
    * * Description: Timezone for the scheduled action, if not specified defaults to UTC/Z
    */
    get Timezone(): string {
        return this.Get('Timezone');
    }
    set Timezone(value: string) {
        this.Set('Timezone', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Disabled
    *   * Expired
    *   * Pending
    * * Description: Status of the scheduled action (Pending, Active, Disabled, Expired)
    */
    get Status(): 'Active' | 'Disabled' | 'Expired' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Active' | 'Disabled' | 'Expired' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: IntervalDays
    * * Display Name: Interval Days
    * * SQL Data Type: int
    * * Description: Interval in days for the scheduled action
    */
    get IntervalDays(): number | null {
        return this.Get('IntervalDays');
    }
    set IntervalDays(value: number | null) {
        this.Set('IntervalDays', value);
    }

    /**
    * * Field Name: DayOfWeek
    * * Display Name: Day Of Week
    * * SQL Data Type: nvarchar(20)
    * * Description: Day of the week for the scheduled action
    */
    get DayOfWeek(): string | null {
        return this.Get('DayOfWeek');
    }
    set DayOfWeek(value: string | null) {
        this.Set('DayOfWeek', value);
    }

    /**
    * * Field Name: DayOfMonth
    * * Display Name: Day Of Month
    * * SQL Data Type: int
    * * Description: Day of the month for the scheduled action
    */
    get DayOfMonth(): number | null {
        return this.Get('DayOfMonth');
    }
    set DayOfMonth(value: number | null) {
        this.Set('DayOfMonth', value);
    }

    /**
    * * Field Name: Month
    * * Display Name: Month
    * * SQL Data Type: nvarchar(20)
    * * Description: Month for the scheduled action
    */
    get Month(): string | null {
        return this.Get('Month');
    }
    set Month(value: string | null) {
        this.Set('Month', value);
    }

    /**
    * * Field Name: CustomCronExpression
    * * Display Name: Custom Cron Expression
    * * SQL Data Type: nvarchar(255)
    * * Description: Field CustomCronExpression for entity Scheduled Actions.
    */
    get CustomCronExpression(): string | null {
        return this.Get('CustomCronExpression');
    }
    set CustomCronExpression(value: string | null) {
        this.Set('CustomCronExpression', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: CreatedByUser
    * * Display Name: Created By User
    * * SQL Data Type: nvarchar(100)
    */
    get CreatedByUser(): string {
        return this.Get('CreatedByUser');
    }

    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    get Action(): string {
        return this.Get('Action');
    }
}


/**
 * Schema Info - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: SchemaInfo
 * * Base View: vwSchemaInfos
 * * @description Tracks the schemas in the system and the ID ranges that are valid for entities within each schema.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Schema Info')
export class SchemaInfoEntity extends BaseEntity<SchemaInfoEntityType> {
    /**
    * Loads the Schema Info record from the database
    * @param ID: string - primary key value to load the Schema Info record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof SchemaInfoEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * Validate() method override for Schema Info entity. This is an auto-generated method that invokes the generated validators for this entity for the following fields:
    * * Table-Level: This rule ensures that the maximum entity ID value must be greater than the minimum entity ID value.
    * * Table-Level: This rule ensures that both the minimum and maximum entity IDs must be greater than zero.
    * @public
    * @method
    * @override
    */
    public override Validate(): ValidationResult {
        const result = super.Validate();
        this.ValidateEntityIDMaxGreaterThanEntityIDMin(result);
        this.ValidateEntityIDMinEntityIDMaxGreaterThanZero(result);
        result.Success = result.Success && (result.Errors.length === 0);

        return result;
    }

    /**
    * This rule ensures that the maximum entity ID value must be greater than the minimum entity ID value.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateEntityIDMaxGreaterThanEntityIDMin(result: ValidationResult) {
    	if (this.EntityIDMax <= this.EntityIDMin) {
    		result.Errors.push(new ValidationErrorInfo("EntityIDMax", "The maximum entity ID must be greater than the minimum entity ID.", this.EntityIDMax, ValidationErrorType.Failure));
    	}
    }

    /**
    * This rule ensures that both the minimum and maximum entity IDs must be greater than zero.
    * @param result - the ValidationResult object to add any errors or warnings to
    * @public
    * @method
    */
    public ValidateEntityIDMinEntityIDMaxGreaterThanZero(result: ValidationResult) {
    	if (this.EntityIDMin <= 0) {
    		result.Errors.push(new ValidationErrorInfo("EntityIDMin", "The minimum entity ID must be greater than zero.", this.EntityIDMin, ValidationErrorType.Failure));
    	}
    	if (this.EntityIDMax <= 0) {
    		result.Errors.push(new ValidationErrorInfo("EntityIDMax", "The maximum entity ID must be greater than zero.", this.EntityIDMax, ValidationErrorType.Failure));
    	}
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: SchemaName
    * * Display Name: Schema Name
    * * SQL Data Type: nvarchar(50)
    * * Description: The database schema this information applies to.
    */
    get SchemaName(): string {
        return this.Get('SchemaName');
    }
    set SchemaName(value: string) {
        this.Set('SchemaName', value);
    }

    /**
    * * Field Name: EntityIDMin
    * * Display Name: Entity IDMin
    * * SQL Data Type: int
    * * Description: Field EntityIDMin for entity Schema Info.
    */
    get EntityIDMin(): number {
        return this.Get('EntityIDMin');
    }
    set EntityIDMin(value: number) {
        this.Set('EntityIDMin', value);
    }

    /**
    * * Field Name: EntityIDMax
    * * Display Name: Entity IDMax
    * * SQL Data Type: int
    * * Description: Field EntityIDMax for entity Schema Info.
    */
    get EntityIDMax(): number {
        return this.Get('EntityIDMax');
    }
    set EntityIDMax(value: number) {
        this.Set('EntityIDMax', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Skills - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Skill
 * * Base View: vwSkills
 * * @description A hierarchical list of possible skills that are linked to Employees and can also be linked to any other entity
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Skills')
export class SkillEntity extends BaseEntity<SkillEntityType> {
    /**
    * Loads the Skills record from the database
    * @param ID: string - primary key value to load the Skills record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof SkillEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Skills (vwSkills.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(50)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Tagged Items - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: TaggedItem
 * * Base View: vwTaggedItems
 * * @description Tracks the links between any record in any entity with Tags
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Tagged Items')
export class TaggedItemEntity extends BaseEntity<TaggedItemEntityType> {
    /**
    * Loads the Tagged Items record from the database
    * @param ID: string - primary key value to load the Tagged Items record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TaggedItemEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: TagID
    * * Display Name: Tag ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Tags (vwTags.ID)
    */
    get TagID(): string {
        return this.Get('TagID');
    }
    set TagID(value: string) {
        this.Set('TagID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(450)
    * * Description: Field RecordID for entity Tagged Items.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Tag
    * * Display Name: Tag
    * * SQL Data Type: nvarchar(255)
    */
    get Tag(): string {
        return this.Get('Tag');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }
}


/**
 * Tags - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Tag
 * * Base View: vwTags
 * * @description Tags are used to arbitrarily associate any record in any entity with addtional information.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Tags')
export class TagEntity extends BaseEntity<TagEntityType> {
    /**
    * Loads the Tags record from the database
    * @param ID: string - primary key value to load the Tags record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TagEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Tags (vwTags.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Field DisplayName for entity Tags.
    */
    get DisplayName(): string {
        return this.Get('DisplayName');
    }
    set DisplayName(value: string) {
        this.Set('DisplayName', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Template Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: TemplateCategory
 * * Base View: vwTemplateCategories
 * * @description Template categories for organizing templates
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Template Categories')
export class TemplateCategoryEntity extends BaseEntity<TemplateCategoryEntityType> {
    /**
    * Loads the Template Categories record from the database
    * @param ID: string - primary key value to load the Template Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TemplateCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the template category
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the template category
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Template Categories (vwTemplateCategories.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * Template Content Types - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: TemplateContentType
 * * Base View: vwTemplateContentTypes
 * * @description Template content types for categorizing content within templates
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Template Content Types')
export class TemplateContentTypeEntity extends BaseEntity<TemplateContentTypeEntityType> {
    /**
    * Loads the Template Content Types record from the database
    * @param ID: string - primary key value to load the Template Content Types record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TemplateContentTypeEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the template content type
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the template content type
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: CodeType
    * * Display Name: Code Type
    * * SQL Data Type: nvarchar(25)
    * * Default Value: Other
    * * Value List Type: List
    * * Possible Values 
    *   * CSS
    *   * HTML
    *   * JSON
    *   * JavaScript
    *   * Nunjucks
    *   * Other
    *   * Python
    *   * TypeScript
    * * Description: Refers to the primary language or codetype of the templates of this type, HTML, JSON, JavaScript, etc
    */
    get CodeType(): 'CSS' | 'HTML' | 'JSON' | 'JavaScript' | 'Nunjucks' | 'Other' | 'Python' | 'TypeScript' {
        return this.Get('CodeType');
    }
    set CodeType(value: 'CSS' | 'HTML' | 'JSON' | 'JavaScript' | 'Nunjucks' | 'Other' | 'Python' | 'TypeScript') {
        this.Set('CodeType', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Template Contents - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: TemplateContent
 * * Base View: vwTemplateContents
 * * @description Template content for different versions of a template for purposes like HTML/Text/etc
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Template Contents')
export class TemplateContentEntity extends BaseEntity<TemplateContentEntityType> {
    /**
    * Loads the Template Contents record from the database
    * @param ID: string - primary key value to load the Template Contents record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TemplateContentEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: TemplateID
    * * Display Name: Template ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Templates (vwTemplates.ID)
    */
    get TemplateID(): string {
        return this.Get('TemplateID');
    }
    set TemplateID(value: string) {
        this.Set('TemplateID', value);
    }

    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Template Content Types (vwTemplateContentTypes.ID)
    */
    get TypeID(): string {
        return this.Get('TypeID');
    }
    set TypeID(value: string) {
        this.Set('TypeID', value);
    }

    /**
    * * Field Name: TemplateText
    * * Display Name: Template Text
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The actual text content for the template
    */
    get TemplateText(): string | null {
        return this.Get('TemplateText');
    }
    set TemplateText(value: string | null) {
        this.Set('TemplateText', value);
    }

    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Description: Priority of the content version, higher priority versions will be used ahead of lower priority versions for a given Type
    */
    get Priority(): number {
        return this.Get('Priority');
    }
    set Priority(value: number) {
        this.Set('Priority', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether the content is active or not. Use this to disable a particular Template Content item without having to remove it
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Template
    * * Display Name: Template
    * * SQL Data Type: nvarchar(255)
    */
    get Template(): string {
        return this.Get('Template');
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(255)
    */
    get Type(): string {
        return this.Get('Type');
    }
}


/**
 * Template Params - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: TemplateParam
 * * Base View: vwTemplateParams
 * * @description Parameters allowed for use inside the template
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Template Params')
export class TemplateParamEntity extends BaseEntity<TemplateParamEntityType> {
    /**
    * Loads the Template Params record from the database
    * @param ID: string - primary key value to load the Template Params record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TemplateParamEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: TemplateID
    * * Display Name: Template ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Templates (vwTemplates.ID)
    */
    get TemplateID(): string {
        return this.Get('TemplateID');
    }
    set TemplateID(value: string) {
        this.Set('TemplateID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the parameter
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the parameter
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Scalar
    * * Value List Type: List
    * * Possible Values 
    *   * Array
    *   * Entity
    *   * Object
    *   * Record
    *   * Scalar
    * * Description: Type of the parameter - Record is an individual record within the entity specified by EntityID. Entity means an entire Entity or an entity filtered by the LinkedParameterName/Field attributes and/or ExtraFilter. Object is any valid JSON object. Array and Scalar have their common meanings.
    */
    get Type(): 'Array' | 'Entity' | 'Object' | 'Record' | 'Scalar' {
        return this.Get('Type');
    }
    set Type(value: 'Array' | 'Entity' | 'Object' | 'Record' | 'Scalar') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: DefaultValue
    * * Display Name: Default Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Default value of the parameter
    */
    get DefaultValue(): string | null {
        return this.Get('DefaultValue');
    }
    set DefaultValue(value: string | null) {
        this.Set('DefaultValue', value);
    }

    /**
    * * Field Name: IsRequired
    * * Display Name: Is Required
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether this parameter must be provided when using the template.
    */
    get IsRequired(): boolean {
        return this.Get('IsRequired');
    }
    set IsRequired(value: boolean) {
        this.Set('IsRequired', value);
    }

    /**
    * * Field Name: LinkedParameterName
    * * Display Name: Linked Parameter Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Only used when Type=Entity, this is used to link an Entity parameter with another parameter so that the rows in the Entity parameter can be filtered automatically based on the FKEY relationship between the Record and this Entity parameter. For example, if the Entity-based parameter is for an entity like Activities and there is another parameter of type Record for an entity like Contacts, in that situation the Activities Parameter would point to the Contacts parameter as the LinkedParameterName because we would filter down the Activities in each template render to only those linked to the Contact.
    */
    get LinkedParameterName(): string | null {
        return this.Get('LinkedParameterName');
    }
    set LinkedParameterName(value: string | null) {
        this.Set('LinkedParameterName', value);
    }

    /**
    * * Field Name: LinkedParameterField
    * * Display Name: Linked Parameter Field
    * * SQL Data Type: nvarchar(500)
    * * Description: If the LinkedParameterName is specified, this is an optional setting to specify the field within the LinkedParameter that will be used for filtering. This is only needed if there is more than one foreign key relationship between the Entity parameter and the Linked parameter, or if there is no defined foreign key in the database between the two entities.
    */
    get LinkedParameterField(): string | null {
        return this.Get('LinkedParameterField');
    }
    set LinkedParameterField(value: string | null) {
        this.Set('LinkedParameterField', value);
    }

    /**
    * * Field Name: ExtraFilter
    * * Display Name: Extra Filter
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Only used when Type = Entity, used to specify an optional filter to reduce the set of rows that are returned for each of the templates being rendered.
    */
    get ExtraFilter(): string | null {
        return this.Get('ExtraFilter');
    }
    set ExtraFilter(value: string | null) {
        this.Set('ExtraFilter', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string | null {
        return this.Get('EntityID');
    }
    set EntityID(value: string | null) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(2000)
    * * Description: Record ID, used only when Type is Record and a specific hardcoded record ID is desired, this is an uncommon use case, helpful for pulling in static types and metadata in some cases.
    */
    get RecordID(): string | null {
        return this.Get('RecordID');
    }
    set RecordID(value: string | null) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: OrderBy
    * * Display Name: Order By
    * * SQL Data Type: nvarchar(MAX)
    * * Description: This field is used only when the Type of the TemplateParam table is "Entity". It is an optional field used to specify the sorting order for the related entity data that is used in the template for the Entity specified.
    */
    get OrderBy(): string | null {
        return this.Get('OrderBy');
    }
    set OrderBy(value: string | null) {
        this.Set('OrderBy', value);
    }

    /**
    * * Field Name: TemplateContentID
    * * Display Name: Template Content ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Template Contents (vwTemplateContents.ID)
    * * Description: Optional reference to a specific template content. When NULL, this parameter applies to all content items within the template. When set, this parameter applies only to the specified template content.
    */
    get TemplateContentID(): string | null {
        return this.Get('TemplateContentID');
    }
    set TemplateContentID(value: string | null) {
        this.Set('TemplateContentID', value);
    }

    /**
    * * Field Name: Template
    * * Display Name: Template
    * * SQL Data Type: nvarchar(255)
    */
    get Template(): string {
        return this.Get('Template');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string | null {
        return this.Get('Entity');
    }
}


/**
 * Templates - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Template
 * * Base View: vwTemplates
 * * @description Templates are used for dynamic expansion of a static template with data from a given context. Templates can be used to create documents, messages and anything else that requires dynamic document creation merging together static text, data and lightweight logic
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Templates')
export class TemplateEntity extends BaseEntity<TemplateEntityType> {
    /**
    * Loads the Templates record from the database
    * @param ID: string - primary key value to load the Templates record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof TemplateEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the template
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the template
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Template Categories (vwTemplateCategories.ID)
    */
    get CategoryID(): string | null {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string | null) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: UserPrompt
    * * Display Name: User Prompt
    * * SQL Data Type: nvarchar(MAX)
    * * Description: This prompt will be used by the AI to generate template content as requested by the user.
    */
    get UserPrompt(): string | null {
        return this.Get('UserPrompt');
    }
    set UserPrompt(value: string | null) {
        this.Set('UserPrompt', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: ActiveAt
    * * Display Name: Active At
    * * SQL Data Type: datetime
    * * Description: Optional, if provided, this template will not be available for use until the specified date. Requires IsActive to be set to 1
    */
    get ActiveAt(): Date | null {
        return this.Get('ActiveAt');
    }
    set ActiveAt(value: Date | null) {
        this.Set('ActiveAt', value);
    }

    /**
    * * Field Name: DisabledAt
    * * Display Name: Disabled At
    * * SQL Data Type: datetime
    * * Description: Optional, if provided, this template will not be available for use after the specified date. If IsActive=0, this has no effect.
    */
    get DisabledAt(): Date | null {
        return this.Get('DisabledAt');
    }
    set DisabledAt(value: Date | null) {
        this.Set('DisabledAt', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 0, the template will be disabled regardless of the values in ActiveAt/DisabledAt. 
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    */
    get Category(): string | null {
        return this.Get('Category');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}


/**
 * User Application Entities - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserApplicationEntity
 * * Base View: vwUserApplicationEntities
 * * @description Links users to specific entities within applications, managing entity-level personalization.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User Application Entities')
export class UserApplicationEntityEntity extends BaseEntity<UserApplicationEntityEntityType> {
    /**
    * Loads the User Application Entities record from the database
    * @param ID: string - primary key value to load the User Application Entities record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserApplicationEntityEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserApplicationID
    * * Display Name: UserApplication ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User Applications (vwUserApplications.ID)
    */
    get UserApplicationID(): string {
        return this.Get('UserApplicationID');
    }
    set UserApplicationID(value: string) {
        this.Set('UserApplicationID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Display order of this entity for the user within the application.
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Application
    * * Display Name: Application
    * * SQL Data Type: nvarchar(100)
    */
    get Application(): string {
        return this.Get('Application');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }
}


/**
 * User Applications - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserApplication
 * * Base View: vwUserApplications
 * * @description Tracks which applications users have configured to display.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User Applications')
export class UserApplicationEntity extends BaseEntity<UserApplicationEntityType> {
    /**
    * Loads the User Applications record from the database
    * @param ID: string - primary key value to load the User Applications record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserApplicationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: ApplicationID
    * * Display Name: Application ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Applications (vwApplications.ID)
    */
    get ApplicationID(): string {
        return this.Get('ApplicationID');
    }
    set ApplicationID(value: string) {
        this.Set('ApplicationID', value);
    }

    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Display order of this application in the user's navigation.
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Whether this application is currently visible to the user.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: Application
    * * Display Name: Application
    * * SQL Data Type: nvarchar(100)
    */
    get Application(): string {
        return this.Get('Application');
    }
}


/**
 * User Favorites - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserFavorite
 * * Base View: vwUserFavorites
 * * @description Records that each user can mark as a favorite for easy access
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User Favorites')
export class UserFavoriteEntity extends BaseEntity<UserFavoriteEntityType> {
    /**
    * Loads the User Favorites record from the database
    * @param ID: string - primary key value to load the User Favorites record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserFavoriteEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    * * Description: The ID of the favorited record.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: EntityBaseTable
    * * Display Name: Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    get EntityBaseTable(): string {
        return this.Get('EntityBaseTable');
    }

    /**
    * * Field Name: EntityBaseView
    * * Display Name: Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    get EntityBaseView(): string {
        return this.Get('EntityBaseView');
    }
}


/**
 * User Notifications - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserNotification
 * * Base View: vwUserNotifications
 * * @description Manages notifications sent to users including alerts, messages, and system updates with read status and priority.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User Notifications')
export class UserNotificationEntity extends BaseEntity<UserNotificationEntityType> {
    /**
    * Loads the User Notifications record from the database
    * @param ID: string - primary key value to load the User Notifications record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserNotificationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: Title
    * * Display Name: Title
    * * SQL Data Type: nvarchar(255)
    * * Description: Brief title or subject of the notification.
    */
    get Title(): string | null {
        return this.Get('Title');
    }
    set Title(value: string | null) {
        this.Set('Title', value);
    }

    /**
    * * Field Name: Message
    * * Display Name: Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Full notification message content.
    */
    get Message(): string | null {
        return this.Get('Message');
    }
    set Message(value: string | null) {
        this.Set('Message', value);
    }

    /**
    * * Field Name: ResourceTypeID
    * * Display Name: Resource Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)
    */
    get ResourceTypeID(): string | null {
        return this.Get('ResourceTypeID');
    }
    set ResourceTypeID(value: string | null) {
        this.Set('ResourceTypeID', value);
    }

    /**
    * * Field Name: ResourceConfiguration
    * * Display Name: Resource Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Field ResourceConfiguration for entity User Notifications.
    */
    get ResourceConfiguration(): string | null {
        return this.Get('ResourceConfiguration');
    }
    set ResourceConfiguration(value: string | null) {
        this.Set('ResourceConfiguration', value);
    }

    /**
    * * Field Name: Unread
    * * Display Name: Unread
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Field Unread for entity User Notifications.
    */
    get Unread(): boolean {
        return this.Get('Unread');
    }
    set Unread(value: boolean) {
        this.Set('Unread', value);
    }

    /**
    * * Field Name: ReadAt
    * * Display Name: Read At
    * * SQL Data Type: datetime
    * * Description: Timestamp when the user read this notification.
    */
    get ReadAt(): Date | null {
        return this.Get('ReadAt');
    }
    set ReadAt(value: Date | null) {
        this.Set('ReadAt', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: ResourceRecordID
    * * Display Name: Resource Record ID
    * * SQL Data Type: uniqueidentifier
    * * Description: ID of the specific record this notification is about.
    */
    get ResourceRecordID(): string | null {
        return this.Get('ResourceRecordID');
    }
    set ResourceRecordID(value: string | null) {
        this.Set('ResourceRecordID', value);
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: ResourceType
    * * Display Name: Resource Type
    * * SQL Data Type: nvarchar(255)
    */
    get ResourceType(): string | null {
        return this.Get('ResourceType');
    }
}


/**
 * User Record Logs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserRecordLog
 * * Base View: vwUserRecordLogs
 * * @description Tracks user interactions with specific records, maintaining an audit trail of views or other operations. Changes are managed separately in the Record Changes entity.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User Record Logs')
export class UserRecordLogEntity extends BaseEntity<UserRecordLogEntityType> {
    /**
    * Loads the User Record Logs record from the database
    * @param ID: string - primary key value to load the User Record Logs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserRecordLogEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    * * Description: The ID of the accessed record.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: EarliestAt
    * * Display Name: Earliest At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    * * Description: Field EarliestAt for entity User Record Logs.
    */
    get EarliestAt(): Date {
        return this.Get('EarliestAt');
    }
    set EarliestAt(value: Date) {
        this.Set('EarliestAt', value);
    }

    /**
    * * Field Name: LatestAt
    * * Display Name: Latest At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    * * Description: Field LatestAt for entity User Record Logs.
    */
    get LatestAt(): Date {
        return this.Get('LatestAt');
    }
    set LatestAt(value: Date) {
        this.Set('LatestAt', value);
    }

    /**
    * * Field Name: TotalCount
    * * Display Name: Total Count
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Field TotalCount for entity User Record Logs.
    */
    get TotalCount(): number {
        return this.Get('TotalCount');
    }
    set TotalCount(value: number) {
        this.Set('TotalCount', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: UserName
    * * Display Name: User Name
    * * SQL Data Type: nvarchar(100)
    */
    get UserName(): string {
        return this.Get('UserName');
    }

    /**
    * * Field Name: UserFirstLast
    * * Display Name: User First Last
    * * SQL Data Type: nvarchar(101)
    */
    get UserFirstLast(): string | null {
        return this.Get('UserFirstLast');
    }

    /**
    * * Field Name: UserEmail
    * * Display Name: User Email
    * * SQL Data Type: nvarchar(100)
    */
    get UserEmail(): string {
        return this.Get('UserEmail');
    }

    /**
    * * Field Name: UserSupervisor
    * * Display Name: User Supervisor
    * * SQL Data Type: nvarchar(81)
    */
    get UserSupervisor(): string | null {
        return this.Get('UserSupervisor');
    }

    /**
    * * Field Name: UserSupervisorEmail
    * * Display Name: User Supervisor Email
    * * SQL Data Type: nvarchar(100)
    */
    get UserSupervisorEmail(): string | null {
        return this.Get('UserSupervisorEmail');
    }
}


/**
 * User Roles - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserRole
 * * Base View: vwUserRoles
 * * @description Associates users with roles in the system, managing role-based access control and permission inheritance.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User Roles')
export class UserRoleEntity extends BaseEntity<UserRoleEntityType> {
    /**
    * Loads the User Roles record from the database
    * @param ID: string - primary key value to load the User Roles record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserRoleEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    get RoleID(): string {
        return this.Get('RoleID');
    }
    set RoleID(value: string) {
        this.Set('RoleID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(50)
    */
    get Role(): string {
        return this.Get('Role');
    }
}


/**
 * User View Categories - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserViewCategory
 * * Base View: vwUserViewCategories
 * * @description Organizes user-created views into categories for personal organization and sharing within teams.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User View Categories')
export class UserViewCategoryEntity extends BaseEntity<UserViewCategoryEntityType> {
    /**
    * Loads the User View Categories record from the database
    * @param ID: string - primary key value to load the User View Categories record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserViewCategoryEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User View Categories (vwUserViewCategories.ID)
    */
    get ParentID(): string | null {
        return this.Get('ParentID');
    }
    set ParentID(value: string | null) {
        this.Set('ParentID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    get Parent(): string | null {
        return this.Get('Parent');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }

    /**
    * * Field Name: RootParentID
    * * Display Name: Root Parent ID
    * * SQL Data Type: uniqueidentifier
    */
    get RootParentID(): string | null {
        return this.Get('RootParentID');
    }
}


/**
 * User View Run Details - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserViewRunDetail
 * * Base View: vwUserViewRunDetails
 * * @description Tracks the set of records that were included in each run of a given user view.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User View Run Details')
export class UserViewRunDetailEntity extends BaseEntity<UserViewRunDetailEntityType> {
    /**
    * Loads the User View Run Details record from the database
    * @param ID: string - primary key value to load the User View Run Details record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserViewRunDetailEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserViewRunID
    * * Display Name: User View Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User View Runs (vwUserViewRuns.ID)
    */
    get UserViewRunID(): string {
        return this.Get('UserViewRunID');
    }
    set UserViewRunID(value: string) {
        this.Set('UserViewRunID', value);
    }

    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    * * Description: Field RecordID for entity User View Run Details.
    */
    get RecordID(): string {
        return this.Get('RecordID');
    }
    set RecordID(value: string) {
        this.Set('RecordID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: UserViewID
    * * Display Name: User View
    * * SQL Data Type: uniqueidentifier
    */
    get UserViewID(): string {
        return this.Get('UserViewID');
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity
    * * SQL Data Type: uniqueidentifier
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
}


/**
 * User View Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserViewRun
 * * Base View: vwUserViewRuns
 * * @description User Views can be logged when run to capture the date and user that ran the view as well as the output results.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User View Runs')
export class UserViewRunEntity extends BaseEntity<UserViewRunEntityType> {
    /**
    * Loads the User View Runs record from the database
    * @param ID: string - primary key value to load the User View Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserViewRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserViewID
    * * Display Name: User View ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User Views (vwUserViews.ID)
    */
    get UserViewID(): string {
        return this.Get('UserViewID');
    }
    set UserViewID(value: string) {
        this.Set('UserViewID', value);
    }

    /**
    * * Field Name: RunAt
    * * Display Name: Run At
    * * SQL Data Type: datetime
    * * Description: Timestamp when the view was executed.
    */
    get RunAt(): Date {
        return this.Get('RunAt');
    }
    set RunAt(value: Date) {
        this.Set('RunAt', value);
    }

    /**
    * * Field Name: RunByUserID
    * * Display Name: Run By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get RunByUserID(): string {
        return this.Get('RunByUserID');
    }
    set RunByUserID(value: string) {
        this.Set('RunByUserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: UserView
    * * Display Name: User View
    * * SQL Data Type: nvarchar(100)
    */
    get UserView(): string {
        return this.Get('UserView');
    }

    /**
    * * Field Name: RunByUser
    * * Display Name: Run By User
    * * SQL Data Type: nvarchar(100)
    */
    get RunByUser(): string {
        return this.Get('RunByUser');
    }
}


/**
 * User Views - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: UserView
 * * Base View: vwUserViews
 * * @description Views are sets of records within a given entity defined by filtering rules. Views can be used programatically to retrieve dynamic sets of data and in user interfaces like MJ Explorer for end-user consumption.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'User Views')
export class UserViewEntity extends BaseEntity<UserViewEntityType> {
    /**
    * Loads the User Views record from the database
    * @param ID: string - primary key value to load the User Views record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserViewEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get EntityID(): string {
        return this.Get('EntityID');
    }
    set EntityID(value: string) {
        this.Set('EntityID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User View Categories (vwUserViewCategories.ID)
    */
    get CategoryID(): string | null {
        return this.Get('CategoryID');
    }
    set CategoryID(value: string | null) {
        this.Set('CategoryID', value);
    }

    /**
    * * Field Name: IsShared
    * * Display Name: Is Shared
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether this view is shared with other users.
    */
    get IsShared(): boolean {
        return this.Get('IsShared');
    }
    set IsShared(value: boolean) {
        this.Set('IsShared', value);
    }

    /**
    * * Field Name: IsDefault
    * * Display Name: Is Default
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether this is the user's default view for the entity.
    */
    get IsDefault(): boolean {
        return this.Get('IsDefault');
    }
    set IsDefault(value: boolean) {
        this.Set('IsDefault', value);
    }

    /**
    * * Field Name: GridState
    * * Display Name: Grid State
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON storing complete grid configuration including columns, widths, and formatting.
    */
    get GridState(): string | null {
        return this.Get('GridState');
    }
    set GridState(value: string | null) {
        this.Set('GridState', value);
    }

    /**
    * * Field Name: FilterState
    * * Display Name: Filter State
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON storing the view's filter configuration.
    */
    get FilterState(): string | null {
        return this.Get('FilterState');
    }
    set FilterState(value: string | null) {
        this.Set('FilterState', value);
    }

    /**
    * * Field Name: CustomFilterState
    * * Display Name: Custom Filter State
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if custom filters beyond standard options are applied.
    */
    get CustomFilterState(): boolean {
        return this.Get('CustomFilterState');
    }
    set CustomFilterState(value: boolean) {
        this.Set('CustomFilterState', value);
    }

    /**
    * * Field Name: SmartFilterEnabled
    * * Display Name: Smart Filter Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether AI-powered smart filtering is enabled for this view.
    */
    get SmartFilterEnabled(): boolean {
        return this.Get('SmartFilterEnabled');
    }
    set SmartFilterEnabled(value: boolean) {
        this.Set('SmartFilterEnabled', value);
    }

    /**
    * * Field Name: SmartFilterPrompt
    * * Display Name: Smart Filter Prompt
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Natural language prompt for AI-powered filtering.
    */
    get SmartFilterPrompt(): string | null {
        return this.Get('SmartFilterPrompt');
    }
    set SmartFilterPrompt(value: string | null) {
        this.Set('SmartFilterPrompt', value);
    }

    /**
    * * Field Name: SmartFilterWhereClause
    * * Display Name: Smart Filter Where Clause
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Generated WHERE clause from smart filter processing.
    */
    get SmartFilterWhereClause(): string | null {
        return this.Get('SmartFilterWhereClause');
    }
    set SmartFilterWhereClause(value: string | null) {
        this.Set('SmartFilterWhereClause', value);
    }

    /**
    * * Field Name: SmartFilterExplanation
    * * Display Name: Smart Filter Explanation
    * * SQL Data Type: nvarchar(MAX)
    * * Description: AI-generated explanation of what the smart filter does.
    */
    get SmartFilterExplanation(): string | null {
        return this.Get('SmartFilterExplanation');
    }
    set SmartFilterExplanation(value: string | null) {
        this.Set('SmartFilterExplanation', value);
    }

    /**
    * * Field Name: WhereClause
    * * Display Name: Where Clause
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Direct SQL WHERE clause for the view filter.
    */
    get WhereClause(): string | null {
        return this.Get('WhereClause');
    }
    set WhereClause(value: string | null) {
        this.Set('WhereClause', value);
    }

    /**
    * * Field Name: CustomWhereClause
    * * Display Name: Custom Where Clause
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if a custom WHERE clause is used instead of standard filters.
    */
    get CustomWhereClause(): boolean {
        return this.Get('CustomWhereClause');
    }
    set CustomWhereClause(value: boolean) {
        this.Set('CustomWhereClause', value);
    }

    /**
    * * Field Name: SortState
    * * Display Name: Sort State
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON storing the view's sort configuration.
    */
    get SortState(): string | null {
        return this.Get('SortState');
    }
    set SortState(value: string | null) {
        this.Set('SortState', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Thumbnail
    * * Display Name: Thumbnail
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Thumbnail image for the user view that can be displayed in gallery views. Can contain either a URL to an image file or a Base64-encoded image string.
    */
    get Thumbnail(): string | null {
        return this.Get('Thumbnail');
    }
    set Thumbnail(value: string | null) {
        this.Set('Thumbnail', value);
    }

    /**
    * * Field Name: UserName
    * * Display Name: User Name
    * * SQL Data Type: nvarchar(100)
    */
    get UserName(): string {
        return this.Get('UserName');
    }

    /**
    * * Field Name: UserFirstLast
    * * Display Name: User First Last
    * * SQL Data Type: nvarchar(101)
    */
    get UserFirstLast(): string | null {
        return this.Get('UserFirstLast');
    }

    /**
    * * Field Name: UserEmail
    * * Display Name: User Email
    * * SQL Data Type: nvarchar(100)
    */
    get UserEmail(): string {
        return this.Get('UserEmail');
    }

    /**
    * * Field Name: UserType
    * * Display Name: User Type
    * * SQL Data Type: nchar(15)
    */
    get UserType(): string {
        return this.Get('UserType');
    }

    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    get Entity(): string {
        return this.Get('Entity');
    }

    /**
    * * Field Name: EntityBaseView
    * * Display Name: Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    get EntityBaseView(): string {
        return this.Get('EntityBaseView');
    }
}


/**
 * Users - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: User
 * * Base View: vwUsers
 * * @description A list of all users who have or had access to the system
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Users')
export class UserEntity extends BaseEntity<UserEntityType> {
    /**
    * Loads the Users record from the database
    * @param ID: string - primary key value to load the Users record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof UserEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: FirstName
    * * Display Name: First Name
    * * SQL Data Type: nvarchar(50)
    * * Description: User's first name or given name.
    */
    get FirstName(): string | null {
        return this.Get('FirstName');
    }
    set FirstName(value: string | null) {
        this.Set('FirstName', value);
    }

    /**
    * * Field Name: LastName
    * * Display Name: Last Name
    * * SQL Data Type: nvarchar(50)
    * * Description: User's last name or surname.
    */
    get LastName(): string | null {
        return this.Get('LastName');
    }
    set LastName(value: string | null) {
        this.Set('LastName', value);
    }

    /**
    * * Field Name: Title
    * * Display Name: Title
    * * SQL Data Type: nvarchar(50)
    * * Description: User's professional title or salutation.
    */
    get Title(): string | null {
        return this.Get('Title');
    }
    set Title(value: string | null) {
        this.Set('Title', value);
    }

    /**
    * * Field Name: Email
    * * SQL Data Type: nvarchar(100)
    * * Description: Unique email address for the user. This field must be unique across all users in the system.
    */
    get Email(): string {
        return this.Get('Email');
    }
    set Email(value: string) {
        this.Set('Email', value);
    }

    /**
    * * Field Name: Type
    * * SQL Data Type: nchar(15)
    * * Value List Type: List
    * * Possible Values 
    *   * Owner
    *   * User
    * * Description: User account type (User, Guest, System, API).
    */
    get Type(): 'Owner' | 'User' {
        return this.Get('Type');
    }
    set Type(value: 'Owner' | 'User') {
        this.Set('Type', value);
    }

    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Whether this user account is currently active and can log in.
    */
    get IsActive(): boolean {
        return this.Get('IsActive');
    }
    set IsActive(value: boolean) {
        this.Set('IsActive', value);
    }

    /**
    * * Field Name: LinkedRecordType
    * * Display Name: Linked Record Type
    * * SQL Data Type: nchar(10)
    * * Default Value: None
    * * Description: Type of record this user is linked to (None, Employee, Contact, etc.).
    */
    get LinkedRecordType(): string {
        return this.Get('LinkedRecordType');
    }
    set LinkedRecordType(value: string) {
        this.Set('LinkedRecordType', value);
    }

    /**
    * * Field Name: LinkedEntityID
    * * Display Name: Linked Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    get LinkedEntityID(): string | null {
        return this.Get('LinkedEntityID');
    }
    set LinkedEntityID(value: string | null) {
        this.Set('LinkedEntityID', value);
    }

    /**
    * * Field Name: LinkedEntityRecordID
    * * Display Name: Linked Entity Record ID
    * * SQL Data Type: nvarchar(450)
    * * Description: ID of the specific record this user is linked to.
    */
    get LinkedEntityRecordID(): string | null {
        return this.Get('LinkedEntityRecordID');
    }
    set LinkedEntityRecordID(value: string | null) {
        this.Set('LinkedEntityRecordID', value);
    }

    /**
    * * Field Name: EmployeeID
    * * Display Name: Employee
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    get EmployeeID(): string | null {
        return this.Get('EmployeeID');
    }
    set EmployeeID(value: string | null) {
        this.Set('EmployeeID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: UserImageURL
    * * Display Name: User Image URL
    * * SQL Data Type: nvarchar(MAX)
    * * Description: User avatar image. Can be a Base64 encoded data URI (e.g., "data:image/png;base64,...") or a URL to an image file. Preferred over UserImageIconClass when present. Recommended for small thumbnail images only to maintain performance.
    */
    get UserImageURL(): string | null {
        return this.Get('UserImageURL');
    }
    set UserImageURL(value: string | null) {
        this.Set('UserImageURL', value);
    }

    /**
    * * Field Name: UserImageIconClass
    * * Display Name: User Image Icon Class
    * * SQL Data Type: nvarchar(100)
    * * Description: Font Awesome icon class for user avatar (e.g., "fa-solid fa-user-astronaut"). Used as fallback when UserImageURL is not provided. Example classes: "fa-solid fa-user", "fa-regular fa-circle-user", "fa-solid fa-user-tie".
    */
    get UserImageIconClass(): string | null {
        return this.Get('UserImageIconClass');
    }
    set UserImageIconClass(value: string | null) {
        this.Set('UserImageIconClass', value);
    }

    /**
    * * Field Name: FirstLast
    * * Display Name: First Last
    * * SQL Data Type: nvarchar(101)
    */
    get FirstLast(): string | null {
        return this.Get('FirstLast');
    }

    /**
    * * Field Name: EmployeeFirstLast
    * * Display Name: Employee First Last
    * * SQL Data Type: nvarchar(81)
    */
    get EmployeeFirstLast(): string | null {
        return this.Get('EmployeeFirstLast');
    }

    /**
    * * Field Name: EmployeeEmail
    * * Display Name: Employee Email
    * * SQL Data Type: nvarchar(100)
    */
    get EmployeeEmail(): string | null {
        return this.Get('EmployeeEmail');
    }

    /**
    * * Field Name: EmployeeTitle
    * * Display Name: Employee Title
    * * SQL Data Type: nvarchar(50)
    */
    get EmployeeTitle(): string | null {
        return this.Get('EmployeeTitle');
    }

    /**
    * * Field Name: EmployeeSupervisor
    * * Display Name: Employee Supervisor
    * * SQL Data Type: nvarchar(81)
    */
    get EmployeeSupervisor(): string | null {
        return this.Get('EmployeeSupervisor');
    }

    /**
    * * Field Name: EmployeeSupervisorEmail
    * * Display Name: Employee Supervisor Email
    * * SQL Data Type: nvarchar(100)
    */
    get EmployeeSupervisorEmail(): string | null {
        return this.Get('EmployeeSupervisorEmail');
    }
}


/**
 * Vector Databases - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: VectorDatabase
 * * Base View: vwVectorDatabases
 * * @description Configures connections to vector database systems for AI embeddings, similarity search, and semantic operations.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Vector Databases')
export class VectorDatabaseEntity extends BaseEntity<VectorDatabaseEntityType> {
    /**
    * Loads the Vector Databases record from the database
    * @param ID: string - primary key value to load the Vector Databases record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof VectorDatabaseEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: DefaultURL
    * * Display Name: Default URL
    * * SQL Data Type: nvarchar(255)
    * * Description: Field DefaultURL for entity Vector Databases.
    */
    get DefaultURL(): string | null {
        return this.Get('DefaultURL');
    }
    set DefaultURL(value: string | null) {
        this.Set('DefaultURL', value);
    }

    /**
    * * Field Name: ClassKey
    * * Display Name: Class Key
    * * SQL Data Type: nvarchar(100)
    * * Description: Field ClassKey for entity Vector Databases.
    */
    get ClassKey(): string | null {
        return this.Get('ClassKey');
    }
    set ClassKey(value: string | null) {
        this.Set('ClassKey', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Vector Indexes - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: VectorIndex
 * * Base View: vwVectorIndexes
 * * @description Defines vector indexes within a given Vector Database.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Vector Indexes')
export class VectorIndexEntity extends BaseEntity<VectorIndexEntityType> {
    /**
    * Loads the Vector Indexes record from the database
    * @param ID: string - primary key value to load the Vector Indexes record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof VectorIndexEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: VectorDatabaseID
    * * Display Name: Vector Database ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Vector Databases (vwVectorDatabases.ID)
    */
    get VectorDatabaseID(): string {
        return this.Get('VectorDatabaseID');
    }
    set VectorDatabaseID(value: string) {
        this.Set('VectorDatabaseID', value);
    }

    /**
    * * Field Name: EmbeddingModelID
    * * Display Name: Embedding Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    get EmbeddingModelID(): string {
        return this.Get('EmbeddingModelID');
    }
    set EmbeddingModelID(value: string) {
        this.Set('EmbeddingModelID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: VectorDatabase
    * * Display Name: Vector Database
    * * SQL Data Type: nvarchar(100)
    */
    get VectorDatabase(): string {
        return this.Get('VectorDatabase');
    }

    /**
    * * Field Name: EmbeddingModel
    * * Display Name: Embedding Model
    * * SQL Data Type: nvarchar(50)
    */
    get EmbeddingModel(): string {
        return this.Get('EmbeddingModel');
    }
}


/**
 * Version Installations - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: VersionInstallation
 * * Base View: vwVersionInstallations
 * * @description Records installation history of system versions, tracking deployments, rollbacks, and version-specific configurations.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Version Installations')
export class VersionInstallationEntity extends BaseEntity<VersionInstallationEntityType> {
    /**
    * Loads the Version Installations record from the database
    * @param ID: string - primary key value to load the Version Installations record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof VersionInstallationEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: MajorVersion
    * * Display Name: Major Version
    * * SQL Data Type: int
    * * Description: Major version number installed.
    */
    get MajorVersion(): number {
        return this.Get('MajorVersion');
    }
    set MajorVersion(value: number) {
        this.Set('MajorVersion', value);
    }

    /**
    * * Field Name: MinorVersion
    * * Display Name: Minor Version
    * * SQL Data Type: int
    * * Description: Minor version number installed.
    */
    get MinorVersion(): number {
        return this.Get('MinorVersion');
    }
    set MinorVersion(value: number) {
        this.Set('MinorVersion', value);
    }

    /**
    * * Field Name: PatchVersion
    * * Display Name: Patch Version
    * * SQL Data Type: int
    * * Description: Patch version number installed.
    */
    get PatchVersion(): number {
        return this.Get('PatchVersion');
    }
    set PatchVersion(value: number) {
        this.Set('PatchVersion', value);
    }

    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: System
    * * Value List Type: List
    * * Possible Values 
    *   * New
    *   * Upgrade
    * * Description: What type of installation was applied
    */
    get Type(): 'New' | 'Upgrade' | null {
        return this.Get('Type');
    }
    set Type(value: 'New' | 'Upgrade' | null) {
        this.Set('Type', value);
    }

    /**
    * * Field Name: InstalledAt
    * * Display Name: Installed At
    * * SQL Data Type: datetime
    * * Description: Timestamp when this version was installed.
    */
    get InstalledAt(): Date {
        return this.Get('InstalledAt');
    }
    set InstalledAt(value: Date) {
        this.Set('InstalledAt', value);
    }

    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In Progress
    *   * Pending
    * * Description: Pending, Complete, Failed
    */
    get Status(): 'Complete' | 'Failed' | 'In Progress' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Failed' | 'In Progress' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: InstallLog
    * * Display Name: Install Log
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Any logging that was saved from the installation process
    */
    get InstallLog(): string | null {
        return this.Get('InstallLog');
    }
    set InstallLog(value: string | null) {
        this.Set('InstallLog', value);
    }

    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional, comments the administrator wants to save for each installed version
    */
    get Comments(): string | null {
        return this.Get('Comments');
    }
    set Comments(value: string | null) {
        this.Set('Comments', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: CompleteVersion
    * * Display Name: Complete Version
    * * SQL Data Type: nvarchar(302)
    */
    get CompleteVersion(): string | null {
        return this.Get('CompleteVersion');
    }
}


/**
 * Workflow Engines - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: WorkflowEngine
 * * Base View: vwWorkflowEngines
 * * @description Registers available workflow execution engines with their capabilities, configuration, and supported workflow types.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'Workflow Engines')
export class WorkflowEngineEntity extends BaseEntity<WorkflowEngineEntityType> {
    /**
    * Loads the Workflow Engines record from the database
    * @param ID: string - primary key value to load the Workflow Engines record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof WorkflowEngineEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: DriverPath
    * * Display Name: Driver Path
    * * SQL Data Type: nvarchar(500)
    * * Description: Import path for the workflow engine driver.
    */
    get DriverPath(): string {
        return this.Get('DriverPath');
    }
    set DriverPath(value: string) {
        this.Set('DriverPath', value);
    }

    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(100)
    * * Description: Class name implementing the workflow engine interface.
    */
    get DriverClass(): string {
        return this.Get('DriverClass');
    }
    set DriverClass(value: string) {
        this.Set('DriverClass', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }
}


/**
 * Workflow Runs - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: WorkflowRun
 * * Base View: vwWorkflowRuns
 * * @description Tracks execution instances of workflows including status, timing, context data, and detailed step-by-step results.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'Workflow Runs')
export class WorkflowRunEntity extends BaseEntity<WorkflowRunEntityType> {
    /**
    * Loads the Workflow Runs record from the database
    * @param ID: string - primary key value to load the Workflow Runs record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof WorkflowRunEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: WorkflowID
    * * Display Name: Workflow ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Workflows (vwWorkflows.ID)
    */
    get WorkflowID(): string {
        return this.Get('WorkflowID');
    }
    set WorkflowID(value: string) {
        this.Set('WorkflowID', value);
    }

    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record
    * * SQL Data Type: nvarchar(500)
    * * Description: Field ExternalSystemRecordID for entity Workflow Runs.
    */
    get ExternalSystemRecordID(): string {
        return this.Get('ExternalSystemRecordID');
    }
    set ExternalSystemRecordID(value: string) {
        this.Set('ExternalSystemRecordID', value);
    }

    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    get StartedAt(): Date {
        return this.Get('StartedAt');
    }
    set StartedAt(value: Date) {
        this.Set('StartedAt', value);
    }

    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    get EndedAt(): Date | null {
        return this.Get('EndedAt');
    }
    set EndedAt(value: Date | null) {
        this.Set('EndedAt', value);
    }

    /**
    * * Field Name: Status
    * * SQL Data Type: nchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Complete
    *   * Failed
    *   * In Progress
    *   * Pending
    */
    get Status(): 'Complete' | 'Failed' | 'In Progress' | 'Pending' {
        return this.Get('Status');
    }
    set Status(value: 'Complete' | 'Failed' | 'In Progress' | 'Pending') {
        this.Set('Status', value);
    }

    /**
    * * Field Name: Results
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON-formatted detailed results from the workflow execution, including outputs from each step and any error information.
    */
    get Results(): string | null {
        return this.Get('Results');
    }
    set Results(value: string | null) {
        this.Set('Results', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Workflow
    * * Display Name: Workflow
    * * SQL Data Type: nvarchar(100)
    */
    get Workflow(): string {
        return this.Get('Workflow');
    }

    /**
    * * Field Name: WorkflowEngineName
    * * Display Name: Workflow Engine Name
    * * SQL Data Type: nvarchar(100)
    */
    get WorkflowEngineName(): string {
        return this.Get('WorkflowEngineName');
    }
}


/**
 * Workflows - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Workflow
 * * Base View: vwWorkflows
 * * @description Defines automated workflows with steps, conditions, and actions for orchestrating complex business processes.
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 * @deprecated This entity is deprecated and will be removed in a future version. Using it will result in console warnings.
 */
@RegisterClass(BaseEntity, 'Workflows')
export class WorkflowEntity extends BaseEntity<WorkflowEntityType> {
    /**
    * Loads the Workflows record from the database
    * @param ID: string - primary key value to load the Workflows record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof WorkflowEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: WorkflowEngineID
    * * Display Name: Workflow Engine ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Workflow Engines (vwWorkflowEngines.ID)
    */
    get WorkflowEngineID(): string {
        return this.Get('WorkflowEngineID');
    }
    set WorkflowEngineID(value: string) {
        this.Set('WorkflowEngineID', value);
    }

    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record
    * * SQL Data Type: nvarchar(100)
    * * Description: The unique identifier of this workflow in an external system, used for synchronization with external workflow engines.
    */
    get ExternalSystemRecordID(): string {
        return this.Get('ExternalSystemRecordID');
    }
    set ExternalSystemRecordID(value: string) {
        this.Set('ExternalSystemRecordID', value);
    }

    /**
    * * Field Name: AutoRunEnabled
    * * Display Name: Auto Run Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, the workflow will be run automatically on the interval specified by the AutoRunIntervalType and AutoRunInterval fields
    */
    get AutoRunEnabled(): boolean {
        return this.Get('AutoRunEnabled');
    }
    set AutoRunEnabled(value: boolean) {
        this.Set('AutoRunEnabled', value);
    }

    /**
    * * Field Name: AutoRunIntervalUnits
    * * Display Name: Auto Run Interval Units
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Days
    *   * Hours
    *   * Minutes
    *   * Months
    *   * Weeks
    *   * Years
    * * Description: Minutes, Hours, Days, Weeks, Months, Years
    */
    get AutoRunIntervalUnits(): 'Days' | 'Hours' | 'Minutes' | 'Months' | 'Weeks' | 'Years' | null {
        return this.Get('AutoRunIntervalUnits');
    }
    set AutoRunIntervalUnits(value: 'Days' | 'Hours' | 'Minutes' | 'Months' | 'Weeks' | 'Years' | null) {
        this.Set('AutoRunIntervalUnits', value);
    }

    /**
    * * Field Name: AutoRunInterval
    * * Display Name: Auto Run Interval
    * * SQL Data Type: int
    * * Description: The interval, denominated in the units specified in the AutoRunIntervalUnits column, between auto runs of this workflow.
    */
    get AutoRunInterval(): number | null {
        return this.Get('AutoRunInterval');
    }
    set AutoRunInterval(value: number | null) {
        this.Set('AutoRunInterval', value);
    }

    /**
    * * Field Name: SubclassName
    * * Display Name: Subclass Name
    * * SQL Data Type: nvarchar(200)
    * * Description: If specified, this subclass key, via the ClassFactory, will be instantiated, to execute this workflow. If not specified the WorkflowBase class will be used by default.
    */
    get SubclassName(): string | null {
        return this.Get('SubclassName');
    }
    set SubclassName(value: string | null) {
        this.Set('SubclassName', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: AutoRunIntervalMinutes
    * * Display Name: Auto Run Interval Minutes
    * * SQL Data Type: int
    */
    get AutoRunIntervalMinutes(): number | null {
        return this.Get('AutoRunIntervalMinutes');
    }
}


/**
 * Workspace Items - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: WorkspaceItem
 * * Base View: vwWorkspaceItems
 * * @description Tracks the resources that are active within a given worksapce
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Workspace Items')
export class WorkspaceItemEntity extends BaseEntity<WorkspaceItemEntityType> {
    /**
    * Loads the Workspace Items record from the database
    * @param ID: string - primary key value to load the Workspace Items record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof WorkspaceItemEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: WorkspaceID
    * * Display Name: Workspace ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Workspaces (vwWorkspaces.ID)
    */
    get WorkspaceID(): string {
        return this.Get('WorkspaceID');
    }
    set WorkspaceID(value: string) {
        this.Set('WorkspaceID', value);
    }

    /**
    * * Field Name: ResourceTypeID
    * * Display Name: Resource Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)
    */
    get ResourceTypeID(): string {
        return this.Get('ResourceTypeID');
    }
    set ResourceTypeID(value: string) {
        this.Set('ResourceTypeID', value);
    }

    /**
    * * Field Name: ResourceRecordID
    * * Display Name: Resource Record ID
    * * SQL Data Type: nvarchar(2000)
    * * Description: The ID of the resource (such as a view, dashboard, or other entity record) that is included in this workspace.
    */
    get ResourceRecordID(): string | null {
        return this.Get('ResourceRecordID');
    }
    set ResourceRecordID(value: string | null) {
        this.Set('ResourceRecordID', value);
    }

    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: The display order of this item within the workspace, used for arranging resources in the user interface.
    */
    get Sequence(): number {
        return this.Get('Sequence');
    }
    set Sequence(value: number) {
        this.Set('Sequence', value);
    }

    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON configuration data specific to this workspace item, storing custom settings and state information.
    */
    get Configuration(): string | null {
        return this.Get('Configuration');
    }
    set Configuration(value: string | null) {
        this.Set('Configuration', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: Workspace
    * * Display Name: Workspace
    * * SQL Data Type: nvarchar(255)
    */
    get Workspace(): string {
        return this.Get('Workspace');
    }

    /**
    * * Field Name: ResourceType
    * * Display Name: Resource Type
    * * SQL Data Type: nvarchar(255)
    */
    get ResourceType(): string {
        return this.Get('ResourceType');
    }
}


/**
 * Workspaces - strongly typed entity sub-class
 * * Schema: __mj
 * * Base Table: Workspace
 * * Base View: vwWorkspaces
 * * @description A user can have one or more workspaces
 * * Primary Key: ID
 * @extends {BaseEntity}
 * @class
 * @public
 */
@RegisterClass(BaseEntity, 'Workspaces')
export class WorkspaceEntity extends BaseEntity<WorkspaceEntityType> {
    /**
    * Loads the Workspaces record from the database
    * @param ID: string - primary key value to load the Workspaces record.
    * @param EntityRelationshipsToLoad - (optional) the relationships to load
    * @returns {Promise<boolean>} - true if successful, false otherwise
    * @public
    * @async
    * @memberof WorkspaceEntity
    * @method
    * @override
    */
    public async Load(ID: string, EntityRelationshipsToLoad?: string[]) : Promise<boolean> {
        const compositeKey: CompositeKey = new CompositeKey();
        compositeKey.KeyValuePairs.push({ FieldName: 'ID', Value: ID });
        return await super.InnerLoad(compositeKey, EntityRelationshipsToLoad);
    }

    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    get ID(): string {
        return this.Get('ID');
    }
    set ID(value: string) {
        this.Set('ID', value);
    }

    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    get Name(): string {
        return this.Get('Name');
    }
    set Name(value: string) {
        this.Set('Name', value);
    }

    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    get Description(): string | null {
        return this.Get('Description');
    }
    set Description(value: string | null) {
        this.Set('Description', value);
    }

    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    get UserID(): string {
        return this.Get('UserID');
    }
    set UserID(value: string) {
        this.Set('UserID', value);
    }

    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_CreatedAt(): Date {
        return this.Get('__mj_CreatedAt');
    }

    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    get __mj_UpdatedAt(): Date {
        return this.Get('__mj_UpdatedAt');
    }

    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    get User(): string {
        return this.Get('User');
    }
}
