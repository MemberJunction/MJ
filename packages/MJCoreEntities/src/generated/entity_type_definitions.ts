/*************************************************
* GENERATED CODE - DO NOT MODIFY
* Generated by MemberJunction CodeGen at 7/25/2024, 3:08:13 PM
**************************************************/

import { z } from "zod";

       
/**
 * zod schema definition for the entity Action Authorizations
 * * Schema: __mj
 * * Base Table: ActionAuthorization
 * * Base View: vwActionAuthorizations
 * * @description Links actions to authorizations, one or more of these must be possessed by a user in order to execute the action.
 * * Primary Key: ID
 */
export const ActionAuthorizationSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    ActionID: z.string(),
    /**
    * * Field Name: AuthorizationID
    * * Display Name: Authorization ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    AuthorizationID: z.string(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    Action: z.string(),
});

export type ActionAuthorizationEntityType = z.infer<typeof ActionAuthorizationSchema>;
       
/**
 * zod schema definition for the entity Action Categories
 * * Schema: __mj
 * * Base Table: ActionCategory
 * * Base View: vwActionCategories
 * * @description Organizes actions into categories, including name, description, and optional parent category for hierarchy.
 * * Primary Key: ID
 */
export const ActionCategorySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the action category.
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the action category.
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Categories (vwActionCategories.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Disabled
    *   * Active
    *   * Pending
    * * Description: Status of the action category (Pending, Active, Disabled).
    */
    Status: z.union([z.literal('Disabled'), z.literal('Active'), z.literal('Pending')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    Parent: z.string().nullish(),
});

export type ActionCategoryEntityType = z.infer<typeof ActionCategorySchema>;
       
/**
 * zod schema definition for the entity Action Context Types
 * * Schema: __mj
 * * Base Table: ActionContextType
 * * Base View: vwActionContextTypes
 * * @description Lists possible contexts for action execution with optional descriptions.
 * * Primary Key: ID
 */
export const ActionContextTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the context type.
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the context type.
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type ActionContextTypeEntityType = z.infer<typeof ActionContextTypeSchema>;
       
/**
 * zod schema definition for the entity Action Contexts
 * * Schema: __mj
 * * Base Table: ActionContext
 * * Base View: vwActionContexts
 * * @description Links actions to their supported context types enabling a given action to be executable in more than one context.
 * * Primary Key: ID
 */
export const ActionContextSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    ActionID: z.string(),
    /**
    * * Field Name: ContextTypeID
    * * Display Name: Context Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Context Types (vwActionContextTypes.ID)
    */
    ContextTypeID: z.string().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Disabled
    *   * Active
    *   * Pending
    * * Description: Status of the action context (Pending, Active, Disabled).
    */
    Status: z.union([z.literal('Disabled'), z.literal('Active'), z.literal('Pending')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    Action: z.string(),
    /**
    * * Field Name: ContextType
    * * Display Name: Context Type
    * * SQL Data Type: nvarchar(255)
    */
    ContextType: z.string().nullish(),
});

export type ActionContextEntityType = z.infer<typeof ActionContextSchema>;
       
/**
 * zod schema definition for the entity Action Execution Logs
 * * Schema: __mj
 * * Base Table: ActionExecutionLog
 * * Base View: vwActionExecutionLogs
 * * @description Tracks every execution of an action, including start and end times, inputs, outputs, and result codes.
 * * Primary Key: ID
 */
export const ActionExecutionLogSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    ActionID: z.string(),
    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    * * Description: Timestamp of when the action started execution.
    */
    StartedAt: z.date(),
    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    * * Description: Timestamp of when the action ended execution.
    */
    EndedAt: z.date().nullish(),
    /**
    * * Field Name: Params
    * * Display Name: Params
    * * SQL Data Type: nvarchar(MAX)
    */
    Params: z.string().nullish(),
    /**
    * * Field Name: ResultCode
    * * Display Name: Result Code
    * * SQL Data Type: nvarchar(255)
    */
    ResultCode: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: RetentionPeriod
    * * Display Name: Retention Period
    * * SQL Data Type: int
    * * Description: Number of days to retain the log; NULL for indefinite retention.
    */
    RetentionPeriod: z.number().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    Action: z.string(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type ActionExecutionLogEntityType = z.infer<typeof ActionExecutionLogSchema>;
       
/**
 * zod schema definition for the entity Action Filters
 * * Schema: __mj
 * * Base Table: ActionFilter
 * * Base View: vwActionFilters
 * * @description Defines filters that can be evaluated ahead of executing an action. Action Filters are usable in any code pipeline you can execute them with the same context as the action itself and use the outcome to determine if the action should execute or not.
 * * Primary Key: ID
 */
export const ActionFilterSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserDescription
    * * Display Name: User Description
    * * SQL Data Type: nvarchar(MAX)
    */
    UserDescription: z.string(),
    /**
    * * Field Name: UserComments
    * * Display Name: User Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    UserComments: z.string().nullish(),
    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(MAX)
    */
    Code: z.string(),
    /**
    * * Field Name: CodeExplanation
    * * Display Name: Code Explanation
    * * SQL Data Type: nvarchar(MAX)
    */
    CodeExplanation: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type ActionFilterEntityType = z.infer<typeof ActionFilterSchema>;
       
/**
 * zod schema definition for the entity Action Libraries
 * * Schema: __mj
 * * Base Table: ActionLibrary
 * * Base View: vwActionLibraries
 * * @description Tracks the list of libraries that a given Action uses, including a list of classes/functions for each library.
 * * Primary Key: ID
 */
export const ActionLibrarySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    ActionID: z.string(),
    /**
    * * Field Name: LibraryID
    * * Display Name: Library ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Libraries (vwLibraries.ID)
    */
    LibraryID: z.string(),
    /**
    * * Field Name: ItemsUsed
    * * Display Name: Items Used
    * * SQL Data Type: nvarchar(MAX)
    * * Description: List of classes and functions used by the action from the library.
    */
    ItemsUsed: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    Action: z.string(),
    /**
    * * Field Name: Library
    * * Display Name: Library
    * * SQL Data Type: nvarchar(255)
    */
    Library: z.string(),
});

export type ActionLibraryEntityType = z.infer<typeof ActionLibrarySchema>;
       
/**
 * zod schema definition for the entity Action Params
 * * Schema: __mj
 * * Base Table: ActionParam
 * * Base View: vwActionParams
 * * @description Tracks the input and output parameters for Actions.
 * * Primary Key: ID
 */
export const ActionParamSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    ActionID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: DefaultValue
    * * Display Name: Default Value
    * * SQL Data Type: nvarchar(MAX)
    */
    DefaultValue: z.string().nullish(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nchar(10)
    * * Value List Type: List
    * * Possible Values 
    *   * Input
    *   * Output
    *   * Both
    */
    Type: z.union([z.literal('Input'), z.literal('Output'), z.literal('Both')]),
    /**
    * * Field Name: ValueType
    * * Display Name: Value Type
    * * SQL Data Type: nvarchar(30)
    * * Value List Type: List
    * * Possible Values 
    *   * Scalar
    *   * Simple Object
    *   * BaseEntity Sub-Class
    *   * Other
    * * Description: Tracks the basic value type of the parameter, additional information can be provided in the Description field
    */
    ValueType: z.union([z.literal('Scalar'), z.literal('Simple Object'), z.literal('BaseEntity Sub-Class'), z.literal('Other')]),
    /**
    * * Field Name: IsArray
    * * Display Name: Is Array
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsArray: z.boolean(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: IsRequired
    * * Display Name: Is Required
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    IsRequired: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    Action: z.string(),
});

export type ActionParamEntityType = z.infer<typeof ActionParamSchema>;
       
/**
 * zod schema definition for the entity Action Result Codes
 * * Schema: __mj
 * * Base Table: ActionResultCode
 * * Base View: vwActionResultCodes
 * * @description Defines the possible result codes for each action.
 * * Primary Key: ID
 */
export const ActionResultCodeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    ActionID: z.string(),
    /**
    * * Field Name: ResultCode
    * * Display Name: Result Code
    * * SQL Data Type: nvarchar(255)
    */
    ResultCode: z.string(),
    /**
    * * Field Name: IsSuccess
    * * Display Name: Is Success
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the result code is a success or not. It is possible an action might have more than one failure condition/result code and same for success conditions.
    */
    IsSuccess: z.boolean(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the result code.
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    Action: z.string(),
});

export type ActionResultCodeEntityType = z.infer<typeof ActionResultCodeSchema>;
       
/**
 * zod schema definition for the entity Actions
 * * Schema: __mj
 * * Base Table: Action
 * * Base View: vwActions
 * * @description Stores action definitions, including prompts, generated code, user comments, and status.
 * * Primary Key: ID
 */
export const ActionSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Categories (vwActionCategories.ID)
    */
    CategoryID: z.string().nullish(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(425)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Generated
    * * Value List Type: List
    * * Possible Values 
    *   * Generated
    *   * Custom
    * * Description: Generated or Custom. Generated means the UserPrompt is used to prompt an AI model to automatically create the code for the Action. Custom means that a custom class has been implemented that subclasses the BaseAction class. The custom class needs to use the @RegisterClass decorator and be included in the MJAPI (or other runtime environment) to be available for execution.
    */
    Type: z.union([z.literal('Generated'), z.literal('Custom')]),
    /**
    * * Field Name: UserPrompt
    * * Display Name: User Prompt
    * * SQL Data Type: nvarchar(MAX)
    */
    UserPrompt: z.string().nullish(),
    /**
    * * Field Name: UserComments
    * * Display Name: User Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: User's comments not shared with the LLM.
    */
    UserComments: z.string().nullish(),
    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(MAX)
    */
    Code: z.string().nullish(),
    /**
    * * Field Name: CodeComments
    * * Display Name: Code Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: AI's explanation of the code.
    */
    CodeComments: z.string().nullish(),
    /**
    * * Field Name: CodeApprovalStatus
    * * Display Name: Code Approval Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Rejected
    *   * Approved
    *   * Pending
    * * Description: An action won't be usable until the code is approved.
    */
    CodeApprovalStatus: z.union([z.literal('Rejected'), z.literal('Approved'), z.literal('Pending')]),
    /**
    * * Field Name: CodeApprovalComments
    * * Display Name: Code Approval Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional comments when an individual (or an AI) reviews and approves the code.
    */
    CodeApprovalComments: z.string().nullish(),
    /**
    * * Field Name: CodeApprovedByUserID
    * * Display Name: Code Approved By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    CodeApprovedByUserID: z.string().nullish(),
    /**
    * * Field Name: CodeApprovedAt
    * * Display Name: Code Approved At
    * * SQL Data Type: datetime
    * * Description: When the code was approved.
    */
    CodeApprovedAt: z.date().nullish(),
    /**
    * * Field Name: CodeLocked
    * * Display Name: Code Locked
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, Code will never be generated by the AI system. This overrides all other settings including the ForceCodeGeneration bit
    */
    CodeLocked: z.boolean(),
    /**
    * * Field Name: ForceCodeGeneration
    * * Display Name: Force Code Generation
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, the Action will generate code for the provided UserPrompt on the next Save even if the UserPrompt hasn't changed. This is useful to force regeneration when other candidates (such as a change in Action Inputs/Outputs) occurs or on demand by a user.
    */
    ForceCodeGeneration: z.boolean(),
    /**
    * * Field Name: RetentionPeriod
    * * Display Name: Retention Period
    * * SQL Data Type: int
    * * Description: Number of days to retain execution logs; NULL for indefinite.
    */
    RetentionPeriod: z.number().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Disabled
    *   * Active
    *   * Pending
    * * Description: Status of the action (Pending, Active, Disabled).
    */
    Status: z.union([z.literal('Disabled'), z.literal('Active'), z.literal('Pending')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    */
    Category: z.string().nullish(),
    /**
    * * Field Name: CodeApprovedByUser
    * * Display Name: Code Approved By User
    * * SQL Data Type: nvarchar(100)
    */
    CodeApprovedByUser: z.string().nullish(),
});

export type ActionEntityType = z.infer<typeof ActionSchema>;
       
/**
 * zod schema definition for the entity AI Actions
 * * Schema: __mj
 * * Base Table: AIAction
 * * Base View: vwAIActions
 * * @description List of all actions that are possible across all AI Models
 * * Primary Key: ID
 */
export const AIActionSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: DefaultPrompt
    * * Display Name: Default Prompt
    * * SQL Data Type: nvarchar(MAX)
    */
    DefaultPrompt: z.string().nullish(),
    /**
    * * Field Name: DefaultModelID
    * * Display Name: Default Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    DefaultModelID: z.string().nullish(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: DefaultModel
    * * Display Name: Default Model
    * * SQL Data Type: nvarchar(50)
    */
    DefaultModel: z.string().nullish(),
});

export type AIActionEntityType = z.infer<typeof AIActionSchema>;
       
/**
 * zod schema definition for the entity AI Model Actions
 * * Schema: __mj
 * * Base Table: AIModelAction
 * * Base View: vwAIModelActions
 * * @description Tracks the actions supported by each AI Model
 * * Primary Key: ID
 */
export const AIModelActionSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: AIModelID
    * * Display Name: AI Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    AIModelID: z.string(),
    /**
    * * Field Name: AIActionID
    * * Display Name: AI Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Actions (vwAIActions.ID)
    */
    AIActionID: z.string(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: AIModel
    * * Display Name: AIModel
    * * SQL Data Type: nvarchar(50)
    */
    AIModel: z.string(),
    /**
    * * Field Name: AIAction
    * * Display Name: AIAction
    * * SQL Data Type: nvarchar(50)
    */
    AIAction: z.string(),
});

export type AIModelActionEntityType = z.infer<typeof AIModelActionSchema>;
       
/**
 * zod schema definition for the entity AI Model Types
 * * Schema: __mj
 * * Base Table: AIModelType
 * * Base View: vwAIModelTypes
 * * @description Types of AI Models
 * * Primary Key: ID
 */
export const AIModelTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type AIModelTypeEntityType = z.infer<typeof AIModelTypeSchema>;
       
/**
 * zod schema definition for the entity AI Models
 * * Schema: __mj
 * * Base Table: AIModel
 * * Base View: vwAIModels
 * * @description Catalog of all AI Models configured in the system
 * * Primary Key: ID
 */
export const AIModelSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Vendor
    * * Display Name: Vendor
    * * SQL Data Type: nvarchar(50)
    */
    Vendor: z.string().nullish(),
    /**
    * * Field Name: AIModelTypeID
    * * Display Name: AI Model Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Model Types (vwAIModelTypes.ID)
    */
    AIModelTypeID: z.string(),
    /**
    * * Field Name: PowerRank
    * * Display Name: Power Rank
    * * SQL Data Type: int
    * * Description: A simplified power rank of each model for a given AI Model Type. For example, if we have GPT 3, GPT 3.5, and GPT 4, we would have a PowerRank of 1 for GPT3, 2 for GPT 3.5, and 3 for GPT 4. This can be used within model families like OpenAI or across all models. For example if you had Llama 2 in the mix which is similar to GPT 3.5 it would also have a PowerRank of 2. This can be used at runtime to pick the most/least powerful or compare model relative power.
    */
    PowerRank: z.number().nullish(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(100)
    */
    DriverClass: z.string().nullish(),
    /**
    * * Field Name: DriverImportPath
    * * Display Name: Driver Import Path
    * * SQL Data Type: nvarchar(255)
    */
    DriverImportPath: z.string().nullish(),
    /**
    * * Field Name: APIName
    * * Display Name: APIName
    * * SQL Data Type: nvarchar(100)
    * * Description: The name of the model to use with API calls which might differ from the Name, if APIName is not provided, Name will be used for API calls
    */
    APIName: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: AIModelType
    * * Display Name: AIModel Type
    * * SQL Data Type: nvarchar(50)
    */
    AIModelType: z.string(),
});

export type AIModelEntityType = z.infer<typeof AIModelSchema>;
       
/**
 * zod schema definition for the entity Application Entities
 * * Schema: __mj
 * * Base Table: ApplicationEntity
 * * Base View: vwApplicationEntities
 * * @description List of entities within each application. An application can have any number of entities and an entity can be part of any number of applications.
 * * Primary Key: ID
 */
export const ApplicationEntitySchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ApplicationID
    * * Display Name: Application ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Applications (vwApplications.ID)
    */
    ApplicationID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    */
    Sequence: z.number(),
    /**
    * * Field Name: DefaultForNewUser
    * * Display Name: Default For New User
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, the entity will be included by default for a new user when they first access the application in question
    */
    DefaultForNewUser: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Application
    * * SQL Data Type: nvarchar(100)
    */
    Application: z.string(),
    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: EntityBaseTable
    * * Display Name: Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    EntityBaseTable: z.string(),
    /**
    * * Field Name: EntityCodeName
    * * Display Name: Entity Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    EntityCodeName: z.string().nullish(),
    /**
    * * Field Name: EntityClassName
    * * Display Name: Entity Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    EntityClassName: z.string().nullish(),
    /**
    * * Field Name: EntityBaseTableCodeName
    * * Display Name: Entity Base Table Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    EntityBaseTableCodeName: z.string().nullish(),
});

export type ApplicationEntityEntityType = z.infer<typeof ApplicationEntitySchema>;
       
/**
 * zod schema definition for the entity Application Settings
 * * Schema: __mj
 * * Base Table: ApplicationSetting
 * * Base View: vwApplicationSettings
 * * Primary Key: ID
 */
export const ApplicationSettingSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ApplicationID
    * * Display Name: Application ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Applications (vwApplications.ID)
    */
    ApplicationID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    */
    Value: z.string(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type ApplicationSettingEntityType = z.infer<typeof ApplicationSettingSchema>;
       
/**
 * zod schema definition for the entity Applications
 * * Schema: __mj
 * * Base Table: Application
 * * Base View: vwApplications
 * * @description Applications are used to group entities in the user interface for ease of user access
 * * Primary Key: ID
 */
export const ApplicationSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Icon
    * * Display Name: Icon
    * * SQL Data Type: nvarchar(500)
    * * Description: Specify the CSS class information for the display icon for each application.
    */
    Icon: z.string().nullish(),
    /**
    * * Field Name: DefaultForNewUser
    * * Display Name: Default For New User
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If turned on, when a new user first uses the MJ Explorer app, the application records with this turned on will have this application included in their selected application list.
    */
    DefaultForNewUser: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type ApplicationEntityType = z.infer<typeof ApplicationSchema>;
       
/**
 * zod schema definition for the entity Audit Log Types
 * * Schema: __mj
 * * Base Table: AuditLogType
 * * Base View: vwAuditLogTypes
 * * Primary Key: ID
 */
export const AuditLogTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Audit Log Types (vwAuditLogTypes.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: AuthorizationID
    * * Display Name: Authorization ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    AuthorizationID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(50)
    */
    Parent: z.string().nullish(),
});

export type AuditLogTypeEntityType = z.infer<typeof AuditLogTypeSchema>;
       
/**
 * zod schema definition for the entity Audit Logs
 * * Schema: __mj
 * * Base Table: AuditLog
 * * Base View: vwAuditLogs
 * * Primary Key: ID
 */
export const AuditLogSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: AuditLogTypeID
    * * Display Name: Audit Log Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Audit Log Types (vwAuditLogTypes.ID)
    */
    AuditLogTypeID: z.string(),
    /**
    * * Field Name: AuthorizationID
    * * Display Name: Authorization ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    AuthorizationID: z.string().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Allow
    * * Value List Type: List
    * * Possible Values 
    *   * Success
    *   * Failed
    */
    Status: z.union([z.literal('Success'), z.literal('Failed')]),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Details
    * * Display Name: Details
    * * SQL Data Type: nvarchar(MAX)
    */
    Details: z.string().nullish(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string().nullish(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    */
    RecordID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string().nullish(),
});

export type AuditLogEntityType = z.infer<typeof AuditLogSchema>;
       
/**
 * zod schema definition for the entity Authorization Roles
 * * Schema: __mj
 * * Base Table: AuthorizationRole
 * * Base View: vwAuthorizationRoles
 * * Primary Key: ID
 */
export const AuthorizationRoleSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: AuthorizationID
    * * Display Name: Authorization ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    AuthorizationID: z.string(),
    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    RoleID: z.string(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nchar(10)
    * * Default Value: grant
    * * Value List Type: List
    * * Possible Values 
    *   * Allow - User allowed to execute tasks linked to this authorization
    *   * Deny - User NOT allowed to execute tasks linked to this authorization - deny overrides Allow from all other roles a user may be part of
    */
    Type: z.union([z.literal('Allow'), z.literal('Deny')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type AuthorizationRoleEntityType = z.infer<typeof AuthorizationRoleSchema>;
       
/**
 * zod schema definition for the entity Authorizations
 * * Schema: __mj
 * * Base Table: Authorization
 * * Base View: vwAuthorizations
 * * Primary Key: ID
 */
export const AuthorizationSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Authorizations (vwAuthorizations.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: UseAuditLog
    * * Display Name: Use Audit Log
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, Audit Log records are created whenever this authorization is invoked for a user
    */
    UseAuditLog: z.boolean(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    Parent: z.string().nullish(),
});

export type AuthorizationEntityType = z.infer<typeof AuthorizationSchema>;
       
/**
 * zod schema definition for the entity Communication Base Message Types
 * * Schema: __mj
 * * Base Table: CommunicationBaseMessageType
 * * Base View: vwCommunicationBaseMessageTypes
 * * @description Base message types and their supported functionalities.
 * * Primary Key: ID
 */
export const CommunicationBaseMessageTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(100)
    */
    Type: z.string(),
    /**
    * * Field Name: SupportsAttachments
    * * Display Name: Supports Attachments
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if attachments are supported.
    */
    SupportsAttachments: z.boolean(),
    /**
    * * Field Name: SupportsSubjectLine
    * * Display Name: Supports Subject Line
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if a subject line is supported.
    */
    SupportsSubjectLine: z.boolean(),
    /**
    * * Field Name: SupportsHtml
    * * Display Name: Supports Html
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if HTML content is supported.
    */
    SupportsHtml: z.boolean(),
    /**
    * * Field Name: MaxBytes
    * * Display Name: Max Bytes
    * * SQL Data Type: int
    * * Description: The maximum size in bytes for the message.
    */
    MaxBytes: z.number().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type CommunicationBaseMessageTypeEntityType = z.infer<typeof CommunicationBaseMessageTypeSchema>;
       
/**
 * zod schema definition for the entity Communication Logs
 * * Schema: __mj
 * * Base Table: CommunicationLog
 * * Base View: vwCommunicationLogs
 * * @description Logs of sent and received messages.
 * * Primary Key: ID
 */
export const CommunicationLogSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: CommunicationProviderID
    * * Display Name: Communication Provider ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Providers (vwCommunicationProviders.ID)
    */
    CommunicationProviderID: z.string(),
    /**
    * * Field Name: CommunicationProviderMessageTypeID
    * * Display Name: Communication Provider Message Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Provider Message Types (vwCommunicationProviderMessageTypes.ID)
    */
    CommunicationProviderMessageTypeID: z.string(),
    /**
    * * Field Name: CommunicationRunID
    * * Display Name: Communication Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Runs (vwCommunicationRuns.ID)
    */
    CommunicationRunID: z.string().nullish(),
    /**
    * * Field Name: Direction
    * * Display Name: Direction
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Sending
    *   * Receiving
    * * Description: The direction of the communication log (Sending or Receiving).
    */
    Direction: z.union([z.literal('Sending'), z.literal('Receiving')]),
    /**
    * * Field Name: MessageDate
    * * Display Name: Message Date
    * * SQL Data Type: datetime
    * * Description: The date and time when the message was logged.
    */
    MessageDate: z.date(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * In-Progress
    *   * Complete
    *   * Failed
    * * Description: The status of the logged message (Pending, In-Progress, Complete, Failed).
    */
    Status: z.union([z.literal('Pending'), z.literal('In-Progress'), z.literal('Complete'), z.literal('Failed')]),
    /**
    * * Field Name: MessageContent
    * * Display Name: Message Content
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The content of the logged message.
    */
    MessageContent: z.string().nullish(),
    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The error message if the message sending failed.
    */
    ErrorMessage: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: CommunicationProvider
    * * Display Name: Communication Provider
    * * SQL Data Type: nvarchar(255)
    */
    CommunicationProvider: z.string(),
    /**
    * * Field Name: CommunicationProviderMessageType
    * * Display Name: Communication Provider Message Type
    * * SQL Data Type: nvarchar(255)
    */
    CommunicationProviderMessageType: z.string(),
});

export type CommunicationLogEntityType = z.infer<typeof CommunicationLogSchema>;
       
/**
 * zod schema definition for the entity Communication Provider Message Types
 * * Schema: __mj
 * * Base Table: CommunicationProviderMessageType
 * * Base View: vwCommunicationProviderMessageTypes
 * * @description Providers and their supported message types with additional attributes.
 * * Primary Key: ID
 */
export const CommunicationProviderMessageTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: CommunicationProviderID
    * * Display Name: Communication Provider ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Providers (vwCommunicationProviders.ID)
    */
    CommunicationProviderID: z.string(),
    /**
    * * Field Name: CommunicationBaseMessageTypeID
    * * Display Name: Communication Base Message Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Base Message Types (vwCommunicationBaseMessageTypes.ID)
    */
    CommunicationBaseMessageTypeID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Disabled
    * * Value List Type: List
    * * Possible Values 
    *   * Disabled
    *   * Active
    * * Description: The status of the provider message type (Disabled or Active).
    */
    Status: z.union([z.literal('Disabled'), z.literal('Active')]),
    /**
    * * Field Name: AdditionalAttributes
    * * Display Name: Additional Attributes
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Additional attributes specific to the provider message type.
    */
    AdditionalAttributes: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: CommunicationProvider
    * * Display Name: Communication Provider
    * * SQL Data Type: nvarchar(255)
    */
    CommunicationProvider: z.string(),
    /**
    * * Field Name: CommunicationBaseMessageType
    * * Display Name: Communication Base Message Type
    * * SQL Data Type: nvarchar(100)
    */
    CommunicationBaseMessageType: z.string(),
});

export type CommunicationProviderMessageTypeEntityType = z.infer<typeof CommunicationProviderMessageTypeSchema>;
       
/**
 * zod schema definition for the entity Communication Providers
 * * Schema: __mj
 * * Base Table: CommunicationProvider
 * * Base View: vwCommunicationProviders
 * * @description All supported communication providers.
 * * Primary Key: ID
 */
export const CommunicationProviderSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Disabled
    * * Value List Type: List
    * * Possible Values 
    *   * Disabled
    *   * Active
    * * Description: The status of the communication provider (Disabled or Active).
    */
    Status: z.union([z.literal('Disabled'), z.literal('Active')]),
    /**
    * * Field Name: SupportsSending
    * * Display Name: Supports Sending
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the provider supports sending messages.
    */
    SupportsSending: z.boolean(),
    /**
    * * Field Name: SupportsReceiving
    * * Display Name: Supports Receiving
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the provider supports receiving messages.
    */
    SupportsReceiving: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type CommunicationProviderEntityType = z.infer<typeof CommunicationProviderSchema>;
       
/**
 * zod schema definition for the entity Communication Runs
 * * Schema: __mj
 * * Base Table: CommunicationRun
 * * Base View: vwCommunicationRuns
 * * @description Runs of bulk message sends and receives.
 * * Primary Key: ID
 */
export const CommunicationRunSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: Direction
    * * Display Name: Direction
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Sending
    *   * Receiving
    * * Description: The direction of the communication run (Sending or Receiving).
    */
    Direction: z.union([z.literal('Sending'), z.literal('Receiving')]),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * In-Progress
    *   * Complete
    *   * Failed
    * * Description: The status of the communication run (Pending, In-Progress, Complete, Failed).
    */
    Status: z.union([z.literal('Pending'), z.literal('In-Progress'), z.literal('Complete'), z.literal('Failed')]),
    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    StartedAt: z.date().nullish(),
    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    EndedAt: z.date().nullish(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The error message if the communication run failed.
    */
    ErrorMessage: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type CommunicationRunEntityType = z.infer<typeof CommunicationRunSchema>;
       
/**
 * zod schema definition for the entity Companies
 * * Schema: __mj
 * * Base Table: Company
 * * Base View: vwCompanies
 * * @description A list of organizational units within your business. These can be subsidiaries or divisions or other units. Companies are used to organizae employee records and also for separating integrations if you have multiple integrations of the same type of system.
 * * Primary Key: ID
 */
export const CompanySchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(200)
    */
    Description: z.string(),
    /**
    * * Field Name: Website
    * * SQL Data Type: nvarchar(100)
    */
    Website: z.string().nullish(),
    /**
    * * Field Name: LogoURL
    * * Display Name: Logo URL
    * * SQL Data Type: nvarchar(500)
    */
    LogoURL: z.string().nullish(),
    /**
    * * Field Name: Domain
    * * Display Name: Domain
    * * SQL Data Type: nvarchar(255)
    */
    Domain: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type CompanyEntityType = z.infer<typeof CompanySchema>;
       
/**
 * zod schema definition for the entity Company Integration Record Maps
 * * Schema: __mj
 * * Base Table: CompanyIntegrationRecordMap
 * * Base View: vwCompanyIntegrationRecordMaps
 * * Primary Key: ID
 */
export const CompanyIntegrationRecordMapSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: CompanyIntegrationID
    * * Display Name: Company Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)
    */
    CompanyIntegrationID: z.string(),
    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record ID
    * * SQL Data Type: nvarchar(750)
    */
    ExternalSystemRecordID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: EntityRecordID
    * * Display Name: Entity Record ID
    * * SQL Data Type: nvarchar(750)
    */
    EntityRecordID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
});

export type CompanyIntegrationRecordMapEntityType = z.infer<typeof CompanyIntegrationRecordMapSchema>;
       
/**
 * zod schema definition for the entity Company Integration Run API Logs
 * * Schema: __mj
 * * Base Table: CompanyIntegrationRunAPILog
 * * Base View: vwCompanyIntegrationRunAPILogs
 * * Primary Key: ID
 */
export const CompanyIntegrationRunAPILogSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: CompanyIntegrationRunID
    * * Display Name: Company Integration Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integration Runs (vwCompanyIntegrationRuns.ID)
    */
    CompanyIntegrationRunID: z.string(),
    /**
    * * Field Name: ExecutedAt
    * * Display Name: Executed At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    ExecutedAt: z.date(),
    /**
    * * Field Name: IsSuccess
    * * Display Name: Is Success
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsSuccess: z.boolean(),
    /**
    * * Field Name: RequestMethod
    * * Display Name: Request Method
    * * SQL Data Type: nvarchar(12)
    * * Value List Type: List
    * * Possible Values 
    *   * GET
    *   * POST
    *   * PUT
    *   * DELETE
    *   * PATCH
    *   * HEAD
    *   * OPTIONS
    */
    RequestMethod: z.union([z.literal('GET'), z.literal('POST'), z.literal('PUT'), z.literal('DELETE'), z.literal('PATCH'), z.literal('HEAD'), z.literal('OPTIONS')]).nullish(),
    /**
    * * Field Name: URL
    * * SQL Data Type: nvarchar(MAX)
    */
    URL: z.string().nullish(),
    /**
    * * Field Name: Parameters
    * * SQL Data Type: nvarchar(MAX)
    */
    Parameters: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type CompanyIntegrationRunAPILogEntityType = z.infer<typeof CompanyIntegrationRunAPILogSchema>;
       
/**
 * zod schema definition for the entity Company Integration Run Details
 * * Schema: __mj
 * * Base Table: CompanyIntegrationRunDetail
 * * Base View: vwCompanyIntegrationRunDetails
 * * Primary Key: ID
 */
export const CompanyIntegrationRunDetailSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: CompanyIntegrationRunID
    * * Display Name: CompanyIntegrationRun ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integration Runs (vwCompanyIntegrationRuns.ID)
    */
    CompanyIntegrationRunID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    */
    RecordID: z.string(),
    /**
    * * Field Name: Action
    * * SQL Data Type: nchar(20)
    */
    Action: z.string(),
    /**
    * * Field Name: ExecutedAt
    * * Display Name: Executed At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    ExecutedAt: z.date(),
    /**
    * * Field Name: IsSuccess
    * * Display Name: Is Success
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsSuccess: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: RunStartedAt
    * * Display Name: Run Started At
    * * SQL Data Type: datetime
    */
    RunStartedAt: z.date().nullish(),
    /**
    * * Field Name: RunEndedAt
    * * Display Name: Run Ended At
    * * SQL Data Type: datetime
    */
    RunEndedAt: z.date().nullish(),
});

export type CompanyIntegrationRunDetailEntityType = z.infer<typeof CompanyIntegrationRunDetailSchema>;
       
/**
 * zod schema definition for the entity Company Integration Runs
 * * Schema: __mj
 * * Base Table: CompanyIntegrationRun
 * * Base View: vwCompanyIntegrationRuns
 * * Primary Key: ID
 */
export const CompanyIntegrationRunSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: CompanyIntegrationID
    * * Display Name: CompanyIntegration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)
    */
    CompanyIntegrationID: z.string(),
    /**
    * * Field Name: RunByUserID
    * * Display Name: RunByUser ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    RunByUserID: z.string(),
    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    StartedAt: z.date().nullish(),
    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    EndedAt: z.date().nullish(),
    /**
    * * Field Name: TotalRecords
    * * Display Name: Total Records
    * * SQL Data Type: int
    */
    TotalRecords: z.number(),
    /**
    * * Field Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: RunByUser
    * * Display Name: Run By User
    * * SQL Data Type: nvarchar(100)
    */
    RunByUser: z.string(),
});

export type CompanyIntegrationRunEntityType = z.infer<typeof CompanyIntegrationRunSchema>;
       
/**
 * zod schema definition for the entity Company Integrations
 * * Schema: __mj
 * * Base Table: CompanyIntegration
 * * Base View: vwCompanyIntegrations
 * * @description Links individual company records to specific integrations
 * * Primary Key: ID
 */
export const CompanyIntegrationSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: CompanyID
    * * Display Name: Company ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Companies (vwCompanies.ID)
    */
    CompanyID: z.string(),
    /**
    * * Field Name: IntegrationID
    * * Display Name: Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Integrations (vwIntegrations.ID)
    */
    IntegrationID: z.string(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    */
    IsActive: z.boolean().nullish(),
    /**
    * * Field Name: AccessToken
    * * Display Name: Access Token
    * * SQL Data Type: nvarchar(255)
    */
    AccessToken: z.string().nullish(),
    /**
    * * Field Name: RefreshToken
    * * Display Name: Refresh Token
    * * SQL Data Type: nvarchar(255)
    */
    RefreshToken: z.string().nullish(),
    /**
    * * Field Name: TokenExpirationDate
    * * Display Name: Token Expiration Date
    * * SQL Data Type: datetime
    */
    TokenExpirationDate: z.date().nullish(),
    /**
    * * Field Name: APIKey
    * * SQL Data Type: nvarchar(255)
    */
    APIKey: z.string().nullish(),
    /**
    * * Field Name: ExternalSystemID
    * * Display Name: ExternalSystem
    * * SQL Data Type: nvarchar(100)
    */
    ExternalSystemID: z.string().nullish(),
    /**
    * * Field Name: IsExternalSystemReadOnly
    * * Display Name: Is External System Read Only
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsExternalSystemReadOnly: z.boolean(),
    /**
    * * Field Name: ClientID
    * * Display Name: Client
    * * SQL Data Type: nvarchar(255)
    */
    ClientID: z.string().nullish(),
    /**
    * * Field Name: ClientSecret
    * * Display Name: Client Secret
    * * SQL Data Type: nvarchar(255)
    */
    ClientSecret: z.string().nullish(),
    /**
    * * Field Name: CustomAttribute1
    * * Display Name: Custom Attribute 1
    * * SQL Data Type: nvarchar(255)
    */
    CustomAttribute1: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Company
    * * SQL Data Type: nvarchar(50)
    */
    Company: z.string(),
    /**
    * * Field Name: Integration
    * * SQL Data Type: nvarchar(100)
    */
    Integration: z.string(),
    /**
    * * Field Name: DriverClassName
    * * Display Name: Driver Class Name
    * * SQL Data Type: nvarchar(100)
    */
    DriverClassName: z.string().nullish(),
    /**
    * * Field Name: DriverImportPath
    * * Display Name: Driver Import Path
    * * SQL Data Type: nvarchar(100)
    */
    DriverImportPath: z.string().nullish(),
    /**
    * * Field Name: LastRunID
    * * Display Name: LastRun
    * * SQL Data Type: uniqueidentifier
    */
    LastRunID: z.string().nullish(),
    /**
    * * Field Name: LastRunStartedAt
    * * Display Name: Last Run Started At
    * * SQL Data Type: datetime
    */
    LastRunStartedAt: z.date().nullish(),
    /**
    * * Field Name: LastRunEndedAt
    * * Display Name: Last Run Ended At
    * * SQL Data Type: datetime
    */
    LastRunEndedAt: z.date().nullish(),
});

export type CompanyIntegrationEntityType = z.infer<typeof CompanyIntegrationSchema>;
       
/**
 * zod schema definition for the entity Conversation Details
 * * Schema: __mj
 * * Base Table: ConversationDetail
 * * Base View: vwConversationDetails
 * * Primary Key: ID
 */
export const ConversationDetailSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ConversationID
    * * Display Name: Conversation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
    */
    ConversationID: z.string(),
    /**
    * * Field Name: ExternalID
    * * Display Name: External ID
    * * SQL Data Type: nvarchar(100)
    */
    ExternalID: z.string().nullish(),
    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(20)
    * * Default Value: user_name()
    * * Value List Type: List
    * * Possible Values 
    *   * User
    *   * AI
    *   * Error
    */
    Role: z.union([z.literal('User'), z.literal('AI'), z.literal('Error')]),
    /**
    * * Field Name: Message
    * * Display Name: Message
    * * SQL Data Type: nvarchar(MAX)
    */
    Message: z.string(),
    /**
    * * Field Name: Error
    * * Display Name: Error
    * * SQL Data Type: nvarchar(MAX)
    */
    Error: z.string().nullish(),
    /**
    * * Field Name: HiddenToUser
    * * Display Name: Hidden To User
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    HiddenToUser: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Conversation
    * * Display Name: Conversation
    * * SQL Data Type: nvarchar(255)
    */
    Conversation: z.string().nullish(),
});

export type ConversationDetailEntityType = z.infer<typeof ConversationDetailSchema>;
       
/**
 * zod schema definition for the entity Conversations
 * * Schema: __mj
 * * Base Table: Conversation
 * * Base View: vwConversations
 * * Primary Key: ID
 */
export const ConversationSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: ExternalID
    * * Display Name: External ID
    * * SQL Data Type: nvarchar(500)
    */
    ExternalID: z.string().nullish(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string().nullish(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Skip
    */
    Type: z.string(),
    /**
    * * Field Name: IsArchived
    * * Display Name: Is Archived
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsArchived: z.boolean(),
    /**
    * * Field Name: LinkedEntityID
    * * Display Name: Linked Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    LinkedEntityID: z.string().nullish(),
    /**
    * * Field Name: LinkedRecordID
    * * Display Name: Linked Record ID
    * * SQL Data Type: nvarchar(500)
    */
    LinkedRecordID: z.string().nullish(),
    /**
    * * Field Name: DataContextID
    * * Display Name: Data Context ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Data Contexts (vwDataContexts.ID)
    */
    DataContextID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
    /**
    * * Field Name: LinkedEntity
    * * Display Name: Linked Entity
    * * SQL Data Type: nvarchar(255)
    */
    LinkedEntity: z.string().nullish(),
});

export type ConversationEntityType = z.infer<typeof ConversationSchema>;
       
/**
 * zod schema definition for the entity Dashboard Categories
 * * Schema: __mj
 * * Base Table: DashboardCategory
 * * Base View: vwDashboardCategories
 * * Primary Key: ID
 */
export const DashboardCategorySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Dashboard Categories (vwDashboardCategories.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    Parent: z.string().nullish(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type DashboardCategoryEntityType = z.infer<typeof DashboardCategorySchema>;
       
/**
 * zod schema definition for the entity Dashboards
 * * Schema: __mj
 * * Base Table: Dashboard
 * * Base View: vwDashboards
 * * @description Dashboards are used to group resources into a single display pane for an end-user
 * * Primary Key: ID
 */
export const DashboardSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Dashboard Categories (vwDashboardCategories.ID)
    */
    CategoryID: z.string().nullish(),
    /**
    * * Field Name: UIConfigDetails
    * * Display Name: UIConfig Details
    * * SQL Data Type: nvarchar(MAX)
    */
    UIConfigDetails: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(100)
    */
    Category: z.string().nullish(),
});

export type DashboardEntityType = z.infer<typeof DashboardSchema>;
       
/**
 * zod schema definition for the entity Data Context Items
 * * Schema: __mj
 * * Base Table: DataContextItem
 * * Base View: vwDataContextItems
 * * @description Data Context Items store information about each item within a Data Context. Each item stores a link to a view, query, or raw sql statement and can optionally cache the JSON representing the last run of that data object as well.
 * * Primary Key: ID
 */
export const DataContextItemSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: DataContextID
    * * Display Name: Data Context ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Data Contexts (vwDataContexts.ID)
    */
    DataContextID: z.string(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * view
    *   * sql
    *   * query
    *   * single_record
    *   * full_entity
    * * Description: The type of the item, either "view", "query", "full_entity", "single_record", or "sql"
    */
    Type: z.union([z.literal('view'), z.literal('sql'), z.literal('query'), z.literal('single_record'), z.literal('full_entity')]),
    /**
    * * Field Name: ViewID
    * * Display Name: View ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User Views (vwUserViews.ID)
    */
    ViewID: z.string().nullish(),
    /**
    * * Field Name: QueryID
    * * Display Name: Query ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queries (vwQueries.ID)
    */
    QueryID: z.string().nullish(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string().nullish(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(450)
    * * Description: The Primary Key value for the record, only used when Type='single_record'
    */
    RecordID: z.string().nullish(),
    /**
    * * Field Name: SQL
    * * Display Name: SQL
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Only used when Type=sql
    */
    SQL: z.string().nullish(),
    /**
    * * Field Name: DataJSON
    * * Display Name: Data JSON
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optionally used to cache results of an item. This can be used for performance optimization, and also for having snapshots of data for historical comparisons.
    */
    DataJSON: z.string().nullish(),
    /**
    * * Field Name: LastRefreshedAt
    * * Display Name: Last Refreshed At
    * * SQL Data Type: datetime
    * * Description: If DataJSON is populated, this field will show the date the the data was captured
    */
    LastRefreshedAt: z.date().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: DataContext
    * * Display Name: Data Context
    * * SQL Data Type: nvarchar(255)
    */
    DataContext: z.string(),
    /**
    * * Field Name: View
    * * Display Name: View
    * * SQL Data Type: nvarchar(100)
    */
    View: z.string().nullish(),
    /**
    * * Field Name: Query
    * * Display Name: Query
    * * SQL Data Type: nvarchar(255)
    */
    Query: z.string().nullish(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string().nullish(),
});

export type DataContextItemEntityType = z.infer<typeof DataContextItemSchema>;
       
/**
 * zod schema definition for the entity Data Contexts
 * * Schema: __mj
 * * Base Table: DataContext
 * * Base View: vwDataContexts
 * * @description Data Contexts are a primitive within the MemberJunction architecture. They store information about data contexts which are groups of data including views, queries, or raw SQL statements. Data contexts can be used in conversations, reports and more.
 * * Primary Key: ID
 */
export const DataContextSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: LastRefreshedAt
    * * Display Name: Last Refreshed At
    * * SQL Data Type: datetime
    */
    LastRefreshedAt: z.date().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type DataContextEntityType = z.infer<typeof DataContextSchema>;
       
/**
 * zod schema definition for the entity Dataset Items
 * * Schema: __mj
 * * Base Table: DatasetItem
 * * Base View: vwDatasetItems
 * * @description A single item in a Dataset and can be sourced from multiple methods.
 * * Primary Key: ID
 */
export const DatasetItemSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(50)
    */
    Code: z.string(),
    /**
    * * Field Name: DatasetID
    * * Display Name: Dataset ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Datasets (vwDatasets.ID)
    */
    DatasetID: z.string(),
    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    */
    Sequence: z.number(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: WhereClause
    * * Display Name: Where Clause
    * * SQL Data Type: nvarchar(MAX)
    */
    WhereClause: z.string().nullish(),
    /**
    * * Field Name: DateFieldToCheck
    * * Display Name: Date Field To Check
    * * SQL Data Type: nvarchar(100)
    */
    DateFieldToCheck: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
});

export type DatasetItemEntityType = z.infer<typeof DatasetItemSchema>;
       
/**
 * zod schema definition for the entity Datasets
 * * Schema: __mj
 * * Base Table: Dataset
 * * Base View: vwDatasets
 * * @description Cacheable sets of data that can span one or more items
 * * Primary Key: ID
 */
export const DatasetSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type DatasetEntityType = z.infer<typeof DatasetSchema>;
       
/**
 * zod schema definition for the entity Duplicate Run Detail Matches
 * * Schema: __mj
 * * Base Table: DuplicateRunDetailMatch
 * * Base View: vwDuplicateRunDetailMatches
 * * Primary Key: ID
 */
export const DuplicateRunDetailMatchSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: DuplicateRunDetailID
    * * Display Name: Duplicate Run Detail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Duplicate Run Details (vwDuplicateRunDetails.ID)
    */
    DuplicateRunDetailID: z.string(),
    /**
    * * Field Name: MatchSource
    * * Display Name: Match Source
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Vector
    * * Value List Type: List
    * * Possible Values 
    *   * SP
    *   * Vector
    * * Description: Either Vector or SP
    */
    MatchSource: z.union([z.literal('SP'), z.literal('Vector')]),
    /**
    * * Field Name: MatchRecordID
    * * Display Name: Match Record ID
    * * SQL Data Type: nvarchar(500)
    */
    MatchRecordID: z.string(),
    /**
    * * Field Name: MatchProbability
    * * Display Name: Match Probability
    * * SQL Data Type: numeric(12, 11)
    * * Default Value: 0
    * * Description: Value between 0 and 1 designating the computed probability of a match
    */
    MatchProbability: z.number(),
    /**
    * * Field Name: MatchedAt
    * * Display Name: Matched At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    MatchedAt: z.date(),
    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Ignore
    */
    Action: z.string(),
    /**
    * * Field Name: ApprovalStatus
    * * Display Name: Approval Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Rejected
    *   * Approved
    *   * Pending
    */
    ApprovalStatus: z.union([z.literal('Rejected'), z.literal('Approved'), z.literal('Pending')]),
    /**
    * * Field Name: RecordMergeLogID
    * * Display Name: Record Merge Log ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Record Merge Logs (vwRecordMergeLogs.ID)
    */
    RecordMergeLogID: z.string().nullish(),
    /**
    * * Field Name: MergeStatus
    * * Display Name: Merge Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Error
    *   * Complete
    *   * Pending
    */
    MergeStatus: z.union([z.literal('Error'), z.literal('Complete'), z.literal('Pending')]),
    /**
    * * Field Name: MergedAt
    * * Display Name: Merged At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    MergedAt: z.date(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type DuplicateRunDetailMatchEntityType = z.infer<typeof DuplicateRunDetailMatchSchema>;
       
/**
 * zod schema definition for the entity Duplicate Run Details
 * * Schema: __mj
 * * Base Table: DuplicateRunDetail
 * * Base View: vwDuplicateRunDetails
 * * Primary Key: ID
 */
export const DuplicateRunDetailSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: DuplicateRunID
    * * Display Name: Duplicate Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Duplicate Runs (vwDuplicateRuns.ID)
    */
    DuplicateRunID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(500)
    */
    RecordID: z.string(),
    /**
    * * Field Name: MatchStatus
    * * Display Name: Match Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Error
    *   * Skipped
    *   * Complete
    *   * Pending
    */
    MatchStatus: z.union([z.literal('Error'), z.literal('Skipped'), z.literal('Complete'), z.literal('Pending')]),
    /**
    * * Field Name: SkippedReason
    * * Display Name: Skipped Reason
    * * SQL Data Type: nvarchar(MAX)
    * * Description: If MatchStatus=Skipped, this field can be used to store the reason why the record was skipped
    */
    SkippedReason: z.string().nullish(),
    /**
    * * Field Name: MatchErrorMessage
    * * Display Name: Match Error Message
    * * SQL Data Type: nvarchar(MAX)
    * * Description: If MatchStatus='Error' this field can be used to track the error from that phase of the process for logging/diagnostics.
    */
    MatchErrorMessage: z.string().nullish(),
    /**
    * * Field Name: MergeStatus
    * * Display Name: Merge Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Not Applicable
    * * Value List Type: List
    * * Possible Values 
    *   * Error
    *   * Complete
    *   * Pending
    *   * Not Applicable
    */
    MergeStatus: z.union([z.literal('Error'), z.literal('Complete'), z.literal('Pending'), z.literal('Not Applicable')]),
    /**
    * * Field Name: MergeErrorMessage
    * * Display Name: Merge Error Message
    * * SQL Data Type: nvarchar(MAX)
    */
    MergeErrorMessage: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type DuplicateRunDetailEntityType = z.infer<typeof DuplicateRunDetailSchema>;
       
/**
 * zod schema definition for the entity Duplicate Runs
 * * Schema: __mj
 * * Base Table: DuplicateRun
 * * Base View: vwDuplicateRuns
 * * Primary Key: ID
 */
export const DuplicateRunSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: StartedByUserID
    * * Display Name: Started By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    StartedByUserID: z.string(),
    /**
    * * Field Name: SourceListID
    * * Display Name: Source List ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Lists (vwLists.ID)
    */
    SourceListID: z.string(),
    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    StartedAt: z.date(),
    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    EndedAt: z.date().nullish(),
    /**
    * * Field Name: ApprovalStatus
    * * Display Name: Approval Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Rejected
    *   * Approved
    *   * Pending
    */
    ApprovalStatus: z.union([z.literal('Rejected'), z.literal('Approved'), z.literal('Pending')]),
    /**
    * * Field Name: ApprovalComments
    * * Display Name: Approval Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    ApprovalComments: z.string().nullish(),
    /**
    * * Field Name: ApprovedByUserID
    * * Display Name: Approved By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    ApprovedByUserID: z.string().nullish(),
    /**
    * * Field Name: ProcessingStatus
    * * Display Name: Processing Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Failed
    *   * Complete
    *   * In Progress
    *   * Pending
    */
    ProcessingStatus: z.union([z.literal('Failed'), z.literal('Complete'), z.literal('In Progress'), z.literal('Pending')]),
    /**
    * * Field Name: ProcessingErrorMessage
    * * Display Name: Processing Error Message
    * * SQL Data Type: nvarchar(MAX)
    */
    ProcessingErrorMessage: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: StartedByUser
    * * Display Name: Started By User
    * * SQL Data Type: nvarchar(100)
    */
    StartedByUser: z.string(),
    /**
    * * Field Name: SourceList
    * * Display Name: Source List
    * * SQL Data Type: nvarchar(100)
    */
    SourceList: z.string(),
    /**
    * * Field Name: ApprovedByUser
    * * Display Name: Approved By User
    * * SQL Data Type: nvarchar(100)
    */
    ApprovedByUser: z.string().nullish(),
});

export type DuplicateRunEntityType = z.infer<typeof DuplicateRunSchema>;
       
/**
 * zod schema definition for the entity Employee Company Integrations
 * * Schema: __mj
 * * Base Table: EmployeeCompanyIntegration
 * * Base View: vwEmployeeCompanyIntegrations
 * * Primary Key: ID
 */
export const EmployeeCompanyIntegrationSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EmployeeID
    * * Display Name: Employee ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    EmployeeID: z.string(),
    /**
    * * Field Name: CompanyIntegrationID
    * * Display Name: Company Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)
    */
    CompanyIntegrationID: z.string(),
    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record
    * * SQL Data Type: nvarchar(750)
    */
    ExternalSystemRecordID: z.string(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type EmployeeCompanyIntegrationEntityType = z.infer<typeof EmployeeCompanyIntegrationSchema>;
       
/**
 * zod schema definition for the entity Employee Roles
 * * Schema: __mj
 * * Base Table: EmployeeRole
 * * Base View: vwEmployeeRoles
 * * Primary Key: ID
 */
export const EmployeeRoleSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EmployeeID
    * * Display Name: Employee ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    EmployeeID: z.string(),
    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    RoleID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(50)
    */
    Role: z.string(),
});

export type EmployeeRoleEntityType = z.infer<typeof EmployeeRoleSchema>;
       
/**
 * zod schema definition for the entity Employee Skills
 * * Schema: __mj
 * * Base Table: EmployeeSkill
 * * Base View: vwEmployeeSkills
 * * Primary Key: ID
 */
export const EmployeeSkillSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EmployeeID
    * * Display Name: Employee ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    EmployeeID: z.string(),
    /**
    * * Field Name: SkillID
    * * Display Name: Skill ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Skills (vwSkills.ID)
    */
    SkillID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Skill
    * * Display Name: Skill
    * * SQL Data Type: nvarchar(50)
    */
    Skill: z.string(),
});

export type EmployeeSkillEntityType = z.infer<typeof EmployeeSkillSchema>;
       
/**
 * zod schema definition for the entity Employees
 * * Schema: __mj
 * * Base Table: Employee
 * * Base View: vwEmployees
 * * @description A list of employees across all units of your organization
 * * Primary Key: ID
 */
export const EmployeeSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: BCMID
    * * Display Name: BCMID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newid()
    */
    BCMID: z.string(),
    /**
    * * Field Name: FirstName
    * * Display Name: First Name
    * * SQL Data Type: nvarchar(30)
    */
    FirstName: z.string(),
    /**
    * * Field Name: LastName
    * * Display Name: Last Name
    * * SQL Data Type: nvarchar(50)
    */
    LastName: z.string(),
    /**
    * * Field Name: CompanyID
    * * Display Name: Company ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Companies (vwCompanies.ID)
    */
    CompanyID: z.string(),
    /**
    * * Field Name: SupervisorID
    * * Display Name: Supervisor ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    SupervisorID: z.string().nullish(),
    /**
    * * Field Name: Title
    * * SQL Data Type: nvarchar(50)
    */
    Title: z.string().nullish(),
    /**
    * * Field Name: Email
    * * SQL Data Type: nvarchar(100)
    */
    Email: z.string(),
    /**
    * * Field Name: Phone
    * * SQL Data Type: nvarchar(20)
    */
    Phone: z.string().nullish(),
    /**
    * * Field Name: Active
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    Active: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: FirstLast
    * * Display Name: First Last
    * * SQL Data Type: nvarchar(81)
    */
    FirstLast: z.string().nullish(),
    /**
    * * Field Name: Supervisor
    * * Display Name: Supervisor
    * * SQL Data Type: nvarchar(81)
    */
    Supervisor: z.string().nullish(),
    /**
    * * Field Name: SupervisorFirstName
    * * Display Name: Supervisor First Name
    * * SQL Data Type: nvarchar(30)
    */
    SupervisorFirstName: z.string().nullish(),
    /**
    * * Field Name: SupervisorLastName
    * * Display Name: Supervisor Last Name
    * * SQL Data Type: nvarchar(50)
    */
    SupervisorLastName: z.string().nullish(),
    /**
    * * Field Name: SupervisorEmail
    * * Display Name: Supervisor Email
    * * SQL Data Type: nvarchar(100)
    */
    SupervisorEmail: z.string().nullish(),
});

export type EmployeeEntityType = z.infer<typeof EmployeeSchema>;
       
/**
 * zod schema definition for the entity Entities
 * * Schema: __mj
 * * Base Table: Entity
 * * Base View: vwEntities
 * * @description Catalog of all entities across all schemas
 * * Primary Key: ID
 */
export const EntitySchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: NameSuffix
    * * Display Name: Name Suffix
    * * SQL Data Type: nvarchar(255)
    */
    NameSuffix: z.string().nullish(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: AutoUpdateDescription
    * * Display Name: Auto Update Description
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1 (default), whenever a description is modified in the underlying view (first choice) or table (second choice), the Description column in the entity definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.
    */
    AutoUpdateDescription: z.boolean(),
    /**
    * * Field Name: BaseTable
    * * Display Name: Base Table
    * * SQL Data Type: nvarchar(255)
    */
    BaseTable: z.string(),
    /**
    * * Field Name: BaseView
    * * Display Name: Base View
    * * SQL Data Type: nvarchar(255)
    */
    BaseView: z.string(),
    /**
    * * Field Name: BaseViewGenerated
    * * Display Name: Base View Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 0, CodeGen no longer generates a base view for the entity.
    */
    BaseViewGenerated: z.boolean(),
    /**
    * * Field Name: SchemaName
    * * Display Name: Schema Name
    * * SQL Data Type: nvarchar(255)
    * * Default Value: dbo
    */
    SchemaName: z.string(),
    /**
    * * Field Name: VirtualEntity
    * * Display Name: Virtual Entity
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    VirtualEntity: z.boolean(),
    /**
    * * Field Name: TrackRecordChanges
    * * Display Name: Track Record Changes
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, changes made via the MemberJunction architecture will result in tracking records being created in the RecordChange table. In addition, when turned on CodeGen will ensure that your table has two fields: __mj_CreatedAt and __mj_UpdatedAt which are special fields used in conjunction with the RecordChange table to track changes to rows in your entity.
    */
    TrackRecordChanges: z.boolean(),
    /**
    * * Field Name: AuditRecordAccess
    * * Display Name: Audit Record Access
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, accessing a record by an end-user will result in an Audit Log record being created
    */
    AuditRecordAccess: z.boolean(),
    /**
    * * Field Name: AuditViewRuns
    * * Display Name: Audit View Runs
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1, users running a view against this entity will result in an Audit Log record being created.
    */
    AuditViewRuns: z.boolean(),
    /**
    * * Field Name: IncludeInAPI
    * * Display Name: Include In API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 0, the entity will not be available at all in the GraphQL API or the object model.
    */
    IncludeInAPI: z.boolean(),
    /**
    * * Field Name: AllowAllRowsAPI
    * * Display Name: Allow All Rows API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, a GraphQL query will be enabled that allows access to all rows in the entity.
    */
    AllowAllRowsAPI: z.boolean(),
    /**
    * * Field Name: AllowUpdateAPI
    * * Display Name: Allow Update API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Global flag controlling if updates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
    */
    AllowUpdateAPI: z.boolean(),
    /**
    * * Field Name: AllowCreateAPI
    * * Display Name: Allow Create API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Global flag controlling if creates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
    */
    AllowCreateAPI: z.boolean(),
    /**
    * * Field Name: AllowDeleteAPI
    * * Display Name: Allow Delete API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Global flag controlling if deletes are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
    */
    AllowDeleteAPI: z.boolean(),
    /**
    * * Field Name: CustomResolverAPI
    * * Display Name: Custom Resolver API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Set to 1 if a custom resolver has been created for the entity.
    */
    CustomResolverAPI: z.boolean(),
    /**
    * * Field Name: AllowUserSearchAPI
    * * Display Name: Allow User Search API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Enabling this bit will result in search being possible at the API and UI layers
    */
    AllowUserSearchAPI: z.boolean(),
    /**
    * * Field Name: FullTextSearchEnabled
    * * Display Name: Full Text Search Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    FullTextSearchEnabled: z.boolean(),
    /**
    * * Field Name: FullTextCatalog
    * * Display Name: Full Text Catalog
    * * SQL Data Type: nvarchar(255)
    */
    FullTextCatalog: z.string().nullish(),
    /**
    * * Field Name: FullTextCatalogGenerated
    * * Display Name: Full Text Catalog Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    FullTextCatalogGenerated: z.boolean(),
    /**
    * * Field Name: FullTextIndex
    * * Display Name: Full Text Index
    * * SQL Data Type: nvarchar(255)
    */
    FullTextIndex: z.string().nullish(),
    /**
    * * Field Name: FullTextIndexGenerated
    * * Display Name: Full Text Index Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    FullTextIndexGenerated: z.boolean(),
    /**
    * * Field Name: FullTextSearchFunction
    * * Display Name: Full Text Search Function
    * * SQL Data Type: nvarchar(255)
    */
    FullTextSearchFunction: z.string().nullish(),
    /**
    * * Field Name: FullTextSearchFunctionGenerated
    * * Display Name: Full Text Search Function Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    FullTextSearchFunctionGenerated: z.boolean(),
    /**
    * * Field Name: UserViewMaxRows
    * * Display Name: User View Max Rows
    * * SQL Data Type: int
    * * Default Value: 1000
    */
    UserViewMaxRows: z.number().nullish(),
    /**
    * * Field Name: spCreate
    * * Display Name: spCreate
    * * SQL Data Type: nvarchar(255)
    */
    spCreate: z.string().nullish(),
    /**
    * * Field Name: spUpdate
    * * Display Name: spUpdate
    * * SQL Data Type: nvarchar(255)
    */
    spUpdate: z.string().nullish(),
    /**
    * * Field Name: spDelete
    * * Display Name: spDelete
    * * SQL Data Type: nvarchar(255)
    */
    spDelete: z.string().nullish(),
    /**
    * * Field Name: spCreateGenerated
    * * Display Name: sp CreateGenerated
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    spCreateGenerated: z.boolean(),
    /**
    * * Field Name: spUpdateGenerated
    * * Display Name: sp Update Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    spUpdateGenerated: z.boolean(),
    /**
    * * Field Name: spDeleteGenerated
    * * Display Name: sp Delete Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    spDeleteGenerated: z.boolean(),
    /**
    * * Field Name: CascadeDeletes
    * * Display Name: Cascade Deletes
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: When set to 1, the deleted spDelete will pre-process deletion to related entities that have 1:M cardinality with this entity. This does not have effect if spDeleteGenerated = 0
    */
    CascadeDeletes: z.boolean(),
    /**
    * * Field Name: DeleteType
    * * Display Name: Delete Type
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Hard
    * * Value List Type: List
    * * Possible Values 
    *   * Hard
    *   * Soft
    * * Description: Hard deletes physically remove rows from the underlying BaseTable. Soft deletes do not remove rows but instead mark the row as deleted by using the special field __mj_DeletedAt which will automatically be added to the entity's basetable by the CodeGen tool.
    */
    DeleteType: z.union([z.literal('Hard'), z.literal('Soft')]),
    /**
    * * Field Name: AllowRecordMerge
    * * Display Name: Allow Record Merge
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: This field must be turned on in order to enable merging of records for the entity. For AllowRecordMerge to be turned on, AllowDeleteAPI must be set to 1, and DeleteType must be set to Soft
    */
    AllowRecordMerge: z.boolean(),
    /**
    * * Field Name: spMatch
    * * Display Name: sp Match
    * * SQL Data Type: nvarchar(255)
    * * Description: When specified, this stored procedure is used to find matching records in this particular entity. The convention is to pass in the primary key(s) columns for the given entity to the procedure and the return will be zero to many rows where there is a column for each primary key field(s) and a ProbabilityScore (numeric(1,12)) column that has a 0 to 1 value of the probability of a match.
    */
    spMatch: z.string().nullish(),
    /**
    * * Field Name: RelationshipDefaultDisplayType
    * * Display Name: Relationship Default Display Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Search
    * * Value List Type: List
    * * Possible Values 
    *   * Search
    *   * Dropdown
    * * Description: When another entity links to this entity with a foreign key, this is the default component type that will be used in the UI. CodeGen will populate the RelatedEntityDisplayType column in the Entity Fields entity with whatever is provided here whenever a new foreign key is detected by CodeGen. The selection can be overridden on a per-foreign-key basis in each row of the Entity Fields entity.
    */
    RelationshipDefaultDisplayType: z.union([z.literal('Search'), z.literal('Dropdown')]),
    /**
    * * Field Name: UserFormGenerated
    * * Display Name: User Form Generated
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    UserFormGenerated: z.boolean(),
    /**
    * * Field Name: EntityObjectSubclassName
    * * Display Name: Entity Object Subclass Name
    * * SQL Data Type: nvarchar(255)
    */
    EntityObjectSubclassName: z.string().nullish(),
    /**
    * * Field Name: EntityObjectSubclassImport
    * * Display Name: Entity Object Subclass Import
    * * SQL Data Type: nvarchar(255)
    */
    EntityObjectSubclassImport: z.string().nullish(),
    /**
    * * Field Name: PreferredCommunicationField
    * * Display Name: Preferred Communication Field
    * * SQL Data Type: nvarchar(255)
    * * Description: Used to specify a field within the entity that in turn contains the field name that will be used for record-level communication preferences. For example in a hypothetical entity called Contacts, say there is a field called PreferredComm and that field had possible values of Email1, SMS, and Phone, and those value in turn corresponded to field names in the entity. Each record in the Contacts entity could have a specific preference for which field would be used for communication. The MJ Communication Framework will use this information when available, as a priority ahead of the data in the Entity Communication Fields entity which is entity-level and not record-level.
    */
    PreferredCommunicationField: z.string().nullish(),
    /**
    * * Field Name: Icon
    * * Display Name: Icon
    * * SQL Data Type: nvarchar(500)
    * * Description: Optional, specify an icon (CSS Class) for each entity for display in the UI
    */
    Icon: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: CodeName
    * * Display Name: Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    CodeName: z.string().nullish(),
    /**
    * * Field Name: ClassName
    * * Display Name: Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    ClassName: z.string().nullish(),
    /**
    * * Field Name: BaseTableCodeName
    * * Display Name: Base Table Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    BaseTableCodeName: z.string().nullish(),
    /**
    * * Field Name: ParentEntity
    * * Display Name: Parent Entity
    * * SQL Data Type: nvarchar(255)
    */
    ParentEntity: z.string().nullish(),
    /**
    * * Field Name: ParentBaseTable
    * * Display Name: Parent Base Table
    * * SQL Data Type: nvarchar(255)
    */
    ParentBaseTable: z.string().nullish(),
    /**
    * * Field Name: ParentBaseView
    * * Display Name: Parent Base View
    * * SQL Data Type: nvarchar(255)
    */
    ParentBaseView: z.string().nullish(),
});

export type EntityEntityType = z.infer<typeof EntitySchema>;
       
/**
 * zod schema definition for the entity Entity Action Filters
 * * Schema: __mj
 * * Base Table: EntityActionFilter
 * * Base View: vwEntityActionFilters
 * * @description Optional use. Maps Action Filters to specific EntityAction instances, specifying execution order and status. This allows for “pre-processing” before an Action actually is fired off, to check for various state/dirty/value conditions.
 * * Primary Key: ID
 */
export const EntityActionFilterSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityActionID
    * * Display Name: Entity Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Actions (vwEntityActions.ID)
    */
    EntityActionID: z.string(),
    /**
    * * Field Name: ActionFilterID
    * * Display Name: Action Filter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Filters (vwActionFilters.ID)
    */
    ActionFilterID: z.string(),
    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: Order of filter execution.
    */
    Sequence: z.number(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Disabled
    *   * Active
    *   * Pending
    * * Description: Status of the entity action filter (Pending, Active, Disabled).
    */
    Status: z.union([z.literal('Disabled'), z.literal('Active'), z.literal('Pending')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type EntityActionFilterEntityType = z.infer<typeof EntityActionFilterSchema>;
       
/**
 * zod schema definition for the entity Entity Action Invocation Types
 * * Schema: __mj
 * * Base Table: EntityActionInvocationType
 * * Base View: vwEntityActionInvocationTypes
 * * @description Stores the possible invocation types of an action within the context of an entity. Examples would be: Record Created/Updated/Deleted/Accessed as well as things like “View” or “List” where you could run an EntityAction against an entire set of records in a view or list – either by user click or programmatically.
 * * Primary Key: ID
 */
export const EntityActionInvocationTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the invocation type such as Record Created/Updated/etc.
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the invocation type.
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: DisplaySequence
    * * Display Name: Display Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    */
    DisplaySequence: z.number(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type EntityActionInvocationTypeEntityType = z.infer<typeof EntityActionInvocationTypeSchema>;
       
/**
 * zod schema definition for the entity Entity Action Invocations
 * * Schema: __mj
 * * Base Table: EntityActionInvocation
 * * Base View: vwEntityActionInvocations
 * * @description Links invocation types to entity actions – for example you might link a particular EntityAction to just “Create Record” and you might also have a second item in this table allowing the same Entity Action to be invoked from a User View or List, on demand.
 * * Primary Key: ID
 */
export const EntityActionInvocationSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityActionID
    * * Display Name: Entity Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Actions (vwEntityActions.ID)
    */
    EntityActionID: z.string(),
    /**
    * * Field Name: InvocationTypeID
    * * Display Name: Invocation Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Action Invocation Types (vwEntityActionInvocationTypes.ID)
    */
    InvocationTypeID: z.string(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Disabled
    *   * Active
    *   * Pending
    * * Description: Status of the entity action invocation (Pending, Active, Disabled).
    */
    Status: z.union([z.literal('Disabled'), z.literal('Active'), z.literal('Pending')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: InvocationType
    * * Display Name: Invocation Type
    * * SQL Data Type: nvarchar(255)
    */
    InvocationType: z.string(),
});

export type EntityActionInvocationEntityType = z.infer<typeof EntityActionInvocationSchema>;
       
/**
 * zod schema definition for the entity Entity Action Params
 * * Schema: __mj
 * * Base Table: EntityActionParam
 * * Base View: vwEntityActionParams
 * * @description Stores paramater mappings to enable Entity Actions to automatically invoke Actions
 * * Primary Key: ID
 */
export const EntityActionParamSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityActionID
    * * Display Name: Entity Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Actions (vwEntityActions.ID)
    */
    EntityActionID: z.string(),
    /**
    * * Field Name: ActionParamID
    * * Display Name: Action Param ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Params (vwActionParams.ID)
    */
    ActionParamID: z.string(),
    /**
    * * Field Name: ValueType
    * * Display Name: Value Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Static
    *   * Entity Object
    *   * Script
    *   * Entity Field
    * * Description: Type of the value, which can be Static, Entity Object, or Script.
    */
    ValueType: z.union([z.literal('Static'), z.literal('Entity Object'), z.literal('Script'), z.literal('Entity Field')]),
    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Value of the parameter, used only when ValueType is Static or Script. When value is Script, any valid JavaScript code can be provided. The script will have access to an object called EntityActionContext. This object will have a property called EntityObject on it that will contain the BaseEntity derived sub-class with the current data for the entity object this action is operating against. The script must provide the parameter value to the EntityActionContext.result property. This scripting capabilty is designed for very small and simple code, for anything of meaningful complexity, create a sub-class instead.
    */
    Value: z.string().nullish(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Additional comments regarding the parameter.
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: ActionParam
    * * Display Name: Action Param
    * * SQL Data Type: nvarchar(255)
    */
    ActionParam: z.string(),
});

export type EntityActionParamEntityType = z.infer<typeof EntityActionParamSchema>;
       
/**
 * zod schema definition for the entity Entity Actions
 * * Schema: __mj
 * * Base Table: EntityAction
 * * Base View: vwEntityActions
 * * @description Links entities to actions - this is the main place where you define the actions that part of, or available, for a given entity.
 * * Primary Key: ID
 */
export const EntityActionSchema = z.object({
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    ActionID: z.string(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Disabled
    *   * Active
    *   * Pending
    * * Description: Status of the entity action (Pending, Active, Disabled).
    */
    Status: z.union([z.literal('Disabled'), z.literal('Active'), z.literal('Pending')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: Action
    * * Display Name: Action
    * * SQL Data Type: nvarchar(425)
    */
    Action: z.string(),
});

export type EntityActionEntityType = z.infer<typeof EntityActionSchema>;
       
/**
 * zod schema definition for the entity Entity AI Actions
 * * Schema: __mj
 * * Base Table: EntityAIAction
 * * Base View: vwEntityAIActions
 * * @description Tracks the AI actions that should be invoked based on changes to records within a given entity.
 * * Primary Key: ID
 */
export const EntityAIActionSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: AIModelID
    * * Display Name: AI Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    AIModelID: z.string(),
    /**
    * * Field Name: AIActionID
    * * Display Name: AI Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Actions (vwAIActions.ID)
    */
    AIActionID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Prompt
    * * Display Name: Prompt
    * * SQL Data Type: nvarchar(MAX)
    */
    Prompt: z.string().nullish(),
    /**
    * * Field Name: TriggerEvent
    * * Display Name: Trigger Event
    * * SQL Data Type: nchar(15)
    * * Default Value: After Save
    * * Value List Type: List
    * * Possible Values 
    *   * after save
    *   * before save
    */
    TriggerEvent: z.union([z.literal('after save'), z.literal('before save')]),
    /**
    * * Field Name: UserMessage
    * * Display Name: User Message
    * * SQL Data Type: nvarchar(MAX)
    */
    UserMessage: z.string(),
    /**
    * * Field Name: OutputType
    * * Display Name: Output Type
    * * SQL Data Type: nchar(10)
    * * Default Value: FIeld
    * * Value List Type: List
    * * Possible Values 
    *   * entity
    *   * field
    */
    OutputType: z.union([z.literal('entity'), z.literal('field')]),
    /**
    * * Field Name: OutputField
    * * Display Name: Output Field
    * * SQL Data Type: nvarchar(50)
    */
    OutputField: z.string().nullish(),
    /**
    * * Field Name: SkipIfOutputFieldNotEmpty
    * * Display Name: Skip If Output Field Not Empty
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    SkipIfOutputFieldNotEmpty: z.boolean(),
    /**
    * * Field Name: OutputEntityID
    * * Display Name: Output Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    OutputEntityID: z.string().nullish(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: AIModel
    * * Display Name: AIModel
    * * SQL Data Type: nvarchar(50)
    */
    AIModel: z.string(),
    /**
    * * Field Name: AIAction
    * * Display Name: AIAction
    * * SQL Data Type: nvarchar(50)
    */
    AIAction: z.string(),
    /**
    * * Field Name: OutputEntity
    * * Display Name: Output Entity
    * * SQL Data Type: nvarchar(255)
    */
    OutputEntity: z.string().nullish(),
});

export type EntityAIActionEntityType = z.infer<typeof EntityAIActionSchema>;
       
/**
 * zod schema definition for the entity Entity Communication Fields
 * * Schema: __mj
 * * Base Table: EntityCommunicationField
 * * Base View: vwEntityCommunicationFields
 * * @description Mapping between entity fields and communication base message types with priority
 * * Primary Key: ID
 */
export const EntityCommunicationFieldSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityCommunicationMessageTypeID
    * * Display Name: Entity Communication Message Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Communication Message Types (vwEntityCommunicationMessageTypes.ID)
    */
    EntityCommunicationMessageTypeID: z.string(),
    /**
    * * Field Name: FieldName
    * * Display Name: Field Name
    * * SQL Data Type: nvarchar(500)
    * * Description: Name of the field in the entity that maps to the communication base message type
    */
    FieldName: z.string(),
    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Description: Priority of the field for the communication base message type
    */
    Priority: z.number(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type EntityCommunicationFieldEntityType = z.infer<typeof EntityCommunicationFieldSchema>;
       
/**
 * zod schema definition for the entity Entity Communication Message Types
 * * Schema: __mj
 * * Base Table: EntityCommunicationMessageType
 * * Base View: vwEntityCommunicationMessageTypes
 * * @description Mapping between entities and communication base message types
 * * Primary Key: ID
 */
export const EntityCommunicationMessageTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: BaseMessageTypeID
    * * Display Name: Base Message Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Communication Base Message Types (vwCommunicationBaseMessageTypes.ID)
    */
    BaseMessageTypeID: z.string(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether the message type is active
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: BaseMessageType
    * * Display Name: Base Message Type
    * * SQL Data Type: nvarchar(100)
    */
    BaseMessageType: z.string(),
});

export type EntityCommunicationMessageTypeEntityType = z.infer<typeof EntityCommunicationMessageTypeSchema>;
       
/**
 * zod schema definition for the entity Entity Document Runs
 * * Schema: __mj
 * * Base Table: EntityDocumentRun
 * * Base View: vwEntityDocumentRuns
 * * Primary Key: ID
 */
export const EntityDocumentRunSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityDocumentID
    * * Display Name: Entity Document ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Documents (vwEntityDocuments.ID)
    */
    EntityDocumentID: z.string(),
    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    StartedAt: z.date().nullish(),
    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    EndedAt: z.date().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(15)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * Complete
    *   * Failed
    * * Description: Can be Pending, In Progress, Completed, or Failed
    */
    Status: z.union([z.literal('Pending'), z.literal('Complete'), z.literal('Failed')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: EntityDocument
    * * Display Name: Entity Document
    * * SQL Data Type: nvarchar(250)
    */
    EntityDocument: z.string(),
});

export type EntityDocumentRunEntityType = z.infer<typeof EntityDocumentRunSchema>;
       
/**
 * zod schema definition for the entity Entity Document Settings
 * * Schema: __mj
 * * Base Table: EntityDocumentSetting
 * * Base View: vwEntityDocumentSettings
 * * Primary Key: ID
 */
export const EntityDocumentSettingSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityDocumentID
    * * Display Name: Entity Document ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Documents (vwEntityDocuments.ID)
    */
    EntityDocumentID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    */
    Value: z.string(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: EntityDocument
    * * Display Name: Entity Document
    * * SQL Data Type: nvarchar(250)
    */
    EntityDocument: z.string(),
});

export type EntityDocumentSettingEntityType = z.infer<typeof EntityDocumentSettingSchema>;
       
/**
 * zod schema definition for the entity Entity Document Types
 * * Schema: __mj
 * * Base Table: EntityDocumentType
 * * Base View: vwEntityDocumentTypes
 * * Primary Key: ID
 */
export const EntityDocumentTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type EntityDocumentTypeEntityType = z.infer<typeof EntityDocumentTypeSchema>;
       
/**
 * zod schema definition for the entity Entity Documents
 * * Schema: __mj
 * * Base Table: EntityDocument
 * * Base View: vwEntityDocuments
 * * Primary Key: ID
 */
export const EntityDocumentSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(250)
    */
    Name: z.string(),
    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Document Types (vwEntityDocumentTypes.ID)
    */
    TypeID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: VectorDatabaseID
    * * Display Name: Vector Database ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Vector Databases (vwVectorDatabases.ID)
    */
    VectorDatabaseID: z.string(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(15)
    * * Default Value: Active
    * * Value List Type: List
    * * Possible Values 
    *   * Active
    *   * Inactive
    */
    Status: z.union([z.literal('Active'), z.literal('Inactive')]),
    /**
    * * Field Name: TemplateID
    * * Display Name: Template ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Templates (vwTemplates.ID)
    */
    TemplateID: z.string(),
    /**
    * * Field Name: AIModelID
    * * Display Name: AIModel ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    AIModelID: z.string(),
    /**
    * * Field Name: PotentialMatchThreshold
    * * Display Name: Potential Match Threshold
    * * SQL Data Type: numeric(12, 11)
    * * Default Value: 1
    * * Description: Value between 0 and 1 that determines what is considered a potential matching record. Value must be <= AbsoluteMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.
    */
    PotentialMatchThreshold: z.number(),
    /**
    * * Field Name: AbsoluteMatchThreshold
    * * Display Name: Absolute Match Threshold
    * * SQL Data Type: numeric(12, 11)
    * * Default Value: 1
    * * Description: Value between 0 and 1 that determines what is considered an absolute matching record. Value must be >= PotentialMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.
    */
    AbsoluteMatchThreshold: z.number(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(100)
    */
    Type: z.string(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
});

export type EntityDocumentEntityType = z.infer<typeof EntityDocumentSchema>;
       
/**
 * zod schema definition for the entity Entity Field Values
 * * Schema: __mj
 * * Base Table: EntityFieldValue
 * * Base View: vwEntityFieldValues
 * * Primary Key: ID
 */
export const EntityFieldValueSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityFieldID
    * * Display Name: Entity Field ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Fields (vwEntityFields.ID)
    */
    EntityFieldID: z.string(),
    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    */
    Sequence: z.number(),
    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(255)
    */
    Value: z.string(),
    /**
    * * Field Name: Code
    * * Display Name: Code
    * * SQL Data Type: nvarchar(50)
    */
    Code: z.string().nullish(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: EntityField
    * * Display Name: Entity Field
    * * SQL Data Type: nvarchar(255)
    */
    EntityField: z.string(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    */
    EntityID: z.string(),
});

export type EntityFieldValueEntityType = z.infer<typeof EntityFieldValueSchema>;
       
/**
 * zod schema definition for the entity Entity Fields
 * * Schema: __mj
 * * Base Table: EntityField
 * * Base View: vwEntityFields
 * * @description List of all fields within each entity with metadata about each field
 * * Primary Key: ID
 */
export const EntityFieldSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Display order of the field within the entity
    */
    Sequence: z.number(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the field within the database table
    */
    Name: z.string(),
    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(255)
    * * Description: A user friendly alternative to the field name
    */
    DisplayName: z.string().nullish(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Descriptive text explaining the purpose of the field
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: AutoUpdateDescription
    * * Display Name: Auto Update Description
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When set to 1 (default), whenever a description is modified in the column within the underlying view (first choice) or table (second choice), the Description column in the entity field definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity field definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.
    */
    AutoUpdateDescription: z.boolean(),
    /**
    * * Field Name: IsPrimaryKey
    * * Display Name: Is Primary Key
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the field is part of the primary key for the entity (auto maintained by CodeGen)
    */
    IsPrimaryKey: z.boolean(),
    /**
    * * Field Name: IsUnique
    * * Display Name: Is Unique
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Indicates if the field must have unique values within the entity.
    */
    IsUnique: z.boolean(),
    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    * * Description: Used for generating custom tabs in the generated forms, only utilized if GeneratedFormSection=Category
    */
    Category: z.string().nullish(),
    /**
    * * Field Name: Type
    * * SQL Data Type: nvarchar(100)
    * * Description: SQL Data type (auto maintained by CodeGen)
    */
    Type: z.string(),
    /**
    * * Field Name: Length
    * * SQL Data Type: int
    * * Description: SQL data length (auto maintained by CodeGen)
    */
    Length: z.number().nullish(),
    /**
    * * Field Name: Precision
    * * SQL Data Type: int
    * * Description: SQL precision (auto maintained by CodeGen)
    */
    Precision: z.number().nullish(),
    /**
    * * Field Name: Scale
    * * SQL Data Type: int
    * * Description: SQL scale (auto maintained by CodeGen)
    */
    Scale: z.number().nullish(),
    /**
    * * Field Name: AllowsNull
    * * Display Name: Allows Null
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Does the column allow null or not (auto maintained by CodeGen)
    */
    AllowsNull: z.boolean(),
    /**
    * * Field Name: DefaultValue
    * * Display Name: Default Value
    * * SQL Data Type: nvarchar(255)
    * * Description: If a default value is defined for the field it is stored here (auto maintained by CodeGen)
    */
    DefaultValue: z.string().nullish(),
    /**
    * * Field Name: AutoIncrement
    * * Display Name: Auto Increment
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If this field automatically increments within the table, this field is set to 1 (auto maintained by CodeGen)
    */
    AutoIncrement: z.boolean(),
    /**
    * * Field Name: ValueListType
    * * Display Name: Value List Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: None
    * * Value List Type: List
    * * Possible Values 
    *   * None
    *   * List
    *   * ListOrUserEntry
    * * Description: Possible Values of None, List, ListOrUserEntry - the last option meaning that the list of possible values are options, but a user can enter anything else desired too.
    */
    ValueListType: z.union([z.literal('None'), z.literal('List'), z.literal('ListOrUserEntry')]),
    /**
    * * Field Name: ExtendedType
    * * Display Name: Extended Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Email
    *   * URL
    *   * Tel
    *   * SMS
    *   * Geo
    *   * WhatsApp
    *   * FaceTime
    *   * Skype
    *   * SIP
    *   * MSTeams
    *   * ZoomMtg
    *   * Other
    *   * Code
    * * Description: Defines extended behaviors for a field such as for Email, Web URLs, Code, etc.
    */
    ExtendedType: z.union([z.literal('Email'), z.literal('URL'), z.literal('Tel'), z.literal('SMS'), z.literal('Geo'), z.literal('WhatsApp'), z.literal('FaceTime'), z.literal('Skype'), z.literal('SIP'), z.literal('MSTeams'), z.literal('ZoomMtg'), z.literal('Other'), z.literal('Code')]).nullish(),
    /**
    * * Field Name: CodeType
    * * Display Name: Code Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * TypeScript
    *   * SQL
    *   * HTML
    *   * CSS
    *   * JavaScript
    *   * Other
    * * Description: The type of code associated with this field. Only used when the ExtendedType field is set to "Code"
    */
    CodeType: z.union([z.literal('TypeScript'), z.literal('SQL'), z.literal('HTML'), z.literal('CSS'), z.literal('JavaScript'), z.literal('Other')]).nullish(),
    /**
    * * Field Name: DefaultInView
    * * Display Name: Default In View
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, this field will be included by default in any new view created by a user.
    */
    DefaultInView: z.boolean(),
    /**
    * * Field Name: ViewCellTemplate
    * * Display Name: View Cell Template
    * * SQL Data Type: nvarchar(MAX)
    * * Description: NULL
    */
    ViewCellTemplate: z.string().nullish(),
    /**
    * * Field Name: DefaultColumnWidth
    * * Display Name: Default Column Width
    * * SQL Data Type: int
    * * Description: Determines the default width for this field when included in a view
    */
    DefaultColumnWidth: z.number().nullish(),
    /**
    * * Field Name: AllowUpdateAPI
    * * Display Name: Allow Update API
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 1, this field will be considered updateable by the API and object model. For this field to have effect, the column type must be updateable (e.g. not part of the primary key and not auto-increment)
    */
    AllowUpdateAPI: z.boolean(),
    /**
    * * Field Name: AllowUpdateInView
    * * Display Name: Allow Update In View
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 1, and if AllowUpdateAPI=1, the field can be edited within a view when the view is in edit mode.
    */
    AllowUpdateInView: z.boolean(),
    /**
    * * Field Name: IncludeInUserSearchAPI
    * * Display Name: Include In User Search API
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, this column will be included in user search queries for both traditional and full text search
    */
    IncludeInUserSearchAPI: z.boolean(),
    /**
    * * Field Name: FullTextSearchEnabled
    * * Display Name: Full Text Search Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, CodeGen will automatically generate a Full Text Catalog/Index in the database and include this field in the search index.
    */
    FullTextSearchEnabled: z.boolean(),
    /**
    * * Field Name: UserSearchParamFormatAPI
    * * Display Name: User Search Param Format API
    * * SQL Data Type: nvarchar(500)
    * * Description: NULL
    */
    UserSearchParamFormatAPI: z.string().nullish(),
    /**
    * * Field Name: IncludeInGeneratedForm
    * * Display Name: Include In Generated Form
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 1, this field will be included in the generated form by CodeGen. If set to 0, this field will be excluded from the generated form. For custom forms, this field has no effect as the layout is controlled independently.
    */
    IncludeInGeneratedForm: z.boolean(),
    /**
    * * Field Name: GeneratedFormSection
    * * Display Name: Generated Form Section
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Details
    * * Value List Type: List
    * * Possible Values 
    *   * Top
    *   * Category
    *   * Details
    * * Description: When set to Top, the field will be placed in a "top area" on the top of a generated form and visible regardless of which tab is displayed. When set to "category" Options: Top, Category, Details
    */
    GeneratedFormSection: z.union([z.literal('Top'), z.literal('Category'), z.literal('Details')]),
    /**
    * * Field Name: IsVirtual
    * * Display Name: Is Virtual
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: NULL
    */
    IsVirtual: z.boolean(),
    /**
    * * Field Name: IsNameField
    * * Display Name: Is Name Field
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, this column will be used as the "Name" field for the entity and will be used to display the name of the record in various places in the UI.
    */
    IsNameField: z.boolean(),
    /**
    * * Field Name: RelatedEntityID
    * * Display Name: RelatedEntity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    RelatedEntityID: z.string().nullish(),
    /**
    * * Field Name: RelatedEntityFieldName
    * * Display Name: Related Entity Field Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the field in the Related Entity that this field links to (auto maintained by CodeGen)
    */
    RelatedEntityFieldName: z.string().nullish(),
    /**
    * * Field Name: IncludeRelatedEntityNameFieldInBaseView
    * * Display Name: Include Related Entity Name Field In Base View
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 1, the "Name" field of the Related Entity will be included in this entity as a virtual field
    */
    IncludeRelatedEntityNameFieldInBaseView: z.boolean(),
    /**
    * * Field Name: RelatedEntityNameFieldMap
    * * Display Name: Related Entity Name Field Map
    * * SQL Data Type: nvarchar(255)
    */
    RelatedEntityNameFieldMap: z.string().nullish(),
    /**
    * * Field Name: RelatedEntityDisplayType
    * * Display Name: Related Entity Display Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Search
    * * Description: Controls the generated form in the MJ Explorer UI - defaults to a search box, other option is a drop down. Possible values are Search and Dropdown
    */
    RelatedEntityDisplayType: z.string(),
    /**
    * * Field Name: EntityIDFieldName
    * * Display Name: Entity IDField Name
    * * SQL Data Type: nvarchar(100)
    * * Description: Optional, used for "Soft Keys" to link records to different entity/record combinations on a per-record basis (for example the FileEntityRecordLink table has an EntityID/RecordID field pair. For that entity, the RecordID specifies "EntityID" for this field. This information allows MJ to detect soft keys/links for dependency detection, merging and for preventing orphaned soft-linked records during delete operations.
    */
    EntityIDFieldName: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: SchemaName
    * * Display Name: Schema Name
    * * SQL Data Type: nvarchar(255)
    */
    SchemaName: z.string(),
    /**
    * * Field Name: BaseTable
    * * Display Name: Base Table
    * * SQL Data Type: nvarchar(255)
    */
    BaseTable: z.string(),
    /**
    * * Field Name: BaseView
    * * Display Name: Base View
    * * SQL Data Type: nvarchar(255)
    */
    BaseView: z.string(),
    /**
    * * Field Name: EntityCodeName
    * * Display Name: Entity Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    EntityCodeName: z.string().nullish(),
    /**
    * * Field Name: EntityClassName
    * * Display Name: Entity Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    EntityClassName: z.string().nullish(),
    /**
    * * Field Name: RelatedEntity
    * * Display Name: Related Entity
    * * SQL Data Type: nvarchar(255)
    */
    RelatedEntity: z.string().nullish(),
    /**
    * * Field Name: RelatedEntitySchemaName
    * * Display Name: Related Entity Schema Name
    * * SQL Data Type: nvarchar(255)
    */
    RelatedEntitySchemaName: z.string().nullish(),
    /**
    * * Field Name: RelatedEntityBaseTable
    * * Display Name: Related Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    RelatedEntityBaseTable: z.string().nullish(),
    /**
    * * Field Name: RelatedEntityBaseView
    * * Display Name: Related Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    RelatedEntityBaseView: z.string().nullish(),
    /**
    * * Field Name: RelatedEntityCodeName
    * * Display Name: Related Entity Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    RelatedEntityCodeName: z.string().nullish(),
    /**
    * * Field Name: RelatedEntityClassName
    * * Display Name: Related Entity Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    RelatedEntityClassName: z.string().nullish(),
});

export type EntityFieldEntityType = z.infer<typeof EntityFieldSchema>;
       
/**
 * zod schema definition for the entity Entity Permissions
 * * Schema: __mj
 * * Base Table: EntityPermission
 * * Base View: vwEntityPermissions
 * * @description Security settings for each entity
 * * Primary Key: ID
 */
export const EntityPermissionSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    RoleID: z.string(),
    /**
    * * Field Name: CanCreate
    * * Display Name: Can Create
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    CanCreate: z.boolean(),
    /**
    * * Field Name: CanRead
    * * Display Name: Can Read
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    CanRead: z.boolean(),
    /**
    * * Field Name: CanUpdate
    * * Display Name: Can Update
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    CanUpdate: z.boolean(),
    /**
    * * Field Name: CanDelete
    * * Display Name: Can Delete
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    CanDelete: z.boolean(),
    /**
    * * Field Name: ReadRLSFilterID
    * * Display Name: Read RLSFilter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)
    */
    ReadRLSFilterID: z.string().nullish(),
    /**
    * * Field Name: CreateRLSFilterID
    * * Display Name: Create RLSFilter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)
    */
    CreateRLSFilterID: z.string().nullish(),
    /**
    * * Field Name: UpdateRLSFilterID
    * * Display Name: Update RLSFilter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)
    */
    UpdateRLSFilterID: z.string().nullish(),
    /**
    * * Field Name: DeleteRLSFilterID
    * * Display Name: Delete RLSFilter ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Row Level Security Filters (vwRowLevelSecurityFilters.ID)
    */
    DeleteRLSFilterID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: RoleName
    * * Display Name: Role Name
    * * SQL Data Type: nvarchar(50)
    */
    RoleName: z.string(),
    /**
    * * Field Name: RoleSQLName
    * * Display Name: Role SQLName
    * * SQL Data Type: nvarchar(250)
    */
    RoleSQLName: z.string().nullish(),
    /**
    * * Field Name: CreateRLSFilter
    * * Display Name: Create RLSFilter
    * * SQL Data Type: nvarchar(100)
    */
    CreateRLSFilter: z.string().nullish(),
    /**
    * * Field Name: ReadRLSFilter
    * * Display Name: Read RLSFilter
    * * SQL Data Type: nvarchar(100)
    */
    ReadRLSFilter: z.string().nullish(),
    /**
    * * Field Name: UpdateRLSFilter
    * * Display Name: Update RLSFilter
    * * SQL Data Type: nvarchar(100)
    */
    UpdateRLSFilter: z.string().nullish(),
    /**
    * * Field Name: DeleteRLSFilter
    * * Display Name: Delete RLSFilter
    * * SQL Data Type: nvarchar(100)
    */
    DeleteRLSFilter: z.string().nullish(),
});

export type EntityPermissionEntityType = z.infer<typeof EntityPermissionSchema>;
       
/**
 * zod schema definition for the entity Entity Record Documents
 * * Schema: __mj
 * * Base Table: EntityRecordDocument
 * * Base View: vwEntityRecordDocuments
 * * Primary Key: ID
 */
export const EntityRecordDocumentSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(450)
    */
    RecordID: z.string(),
    /**
    * * Field Name: EntityDocumentID
    * * Display Name: Entity Document ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Documents (vwEntityDocuments.ID)
    */
    EntityDocumentID: z.string(),
    /**
    * * Field Name: DocumentText
    * * Display Name: Document Text
    * * SQL Data Type: nvarchar(MAX)
    */
    DocumentText: z.string().nullish(),
    /**
    * * Field Name: VectorIndexID
    * * Display Name: Vector Index ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Vector Indexes (vwVectorIndexes.ID)
    */
    VectorIndexID: z.string(),
    /**
    * * Field Name: VectorID
    * * Display Name: Vector ID
    * * SQL Data Type: nvarchar(50)
    */
    VectorID: z.string().nullish(),
    /**
    * * Field Name: VectorJSON
    * * Display Name: Vector JSON
    * * SQL Data Type: nvarchar(MAX)
    */
    VectorJSON: z.string().nullish(),
    /**
    * * Field Name: EntityRecordUpdatedAt
    * * Display Name: Entity Record Updated At
    * * SQL Data Type: datetime
    */
    EntityRecordUpdatedAt: z.date(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type EntityRecordDocumentEntityType = z.infer<typeof EntityRecordDocumentSchema>;
       
/**
 * zod schema definition for the entity Entity Relationship Display Components
 * * Schema: __mj
 * * Base Table: EntityRelationshipDisplayComponent
 * * Base View: vwEntityRelationshipDisplayComponents
 * * @description This table stores a list of components that are available for displaying relationships in the MJ Explorer UI
 * * Primary Key: ID
 */
export const EntityRelationshipDisplayComponentSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: RelationshipType
    * * Display Name: Relationship Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * One to Many
    *   * Many to Many
    *   * Both
    * * Description: The type of relationship the component displays. Valid values are "One to Many", "Many to Many", or "Both".
    */
    RelationshipType: z.union([z.literal('One to Many'), z.literal('Many to Many'), z.literal('Both')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type EntityRelationshipDisplayComponentEntityType = z.infer<typeof EntityRelationshipDisplayComponentSchema>;
       
/**
 * zod schema definition for the entity Entity Relationships
 * * Schema: __mj
 * * Base Table: EntityRelationship
 * * Base View: vwEntityRelationships
 * * @description Metadata about relationships between entities including display preferences for the UI
 * * Primary Key: ID
 */
export const EntityRelationshipSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Used for display order in generated forms and in other places in the UI where relationships for an entity are shown
    */
    Sequence: z.number(),
    /**
    * * Field Name: RelatedEntityID
    * * Display Name: Related Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    RelatedEntityID: z.string(),
    /**
    * * Field Name: BundleInAPI
    * * Display Name: Bundle In API
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    BundleInAPI: z.boolean(),
    /**
    * * Field Name: IncludeInParentAllQuery
    * * Display Name: Include In Parent All Query
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IncludeInParentAllQuery: z.boolean(),
    /**
    * * Field Name: Type
    * * SQL Data Type: nchar(20)
    * * Default Value: One To Many
    * * Value List Type: List
    * * Possible Values 
    *   * One To Many
    *   * Many To Many
    */
    Type: z.union([z.literal('One To Many'), z.literal('Many To Many')]),
    /**
    * * Field Name: EntityKeyField
    * * Display Name: Entity Key Field
    * * SQL Data Type: nvarchar(255)
    */
    EntityKeyField: z.string().nullish(),
    /**
    * * Field Name: RelatedEntityJoinField
    * * Display Name: Related Entity Join Field
    * * SQL Data Type: nvarchar(255)
    */
    RelatedEntityJoinField: z.string(),
    /**
    * * Field Name: JoinView
    * * Display Name: Join View
    * * SQL Data Type: nvarchar(255)
    */
    JoinView: z.string().nullish(),
    /**
    * * Field Name: JoinEntityJoinField
    * * Display Name: Join Entity Join Field
    * * SQL Data Type: nvarchar(255)
    */
    JoinEntityJoinField: z.string().nullish(),
    /**
    * * Field Name: JoinEntityInverseJoinField
    * * Display Name: Join Entity Inverse Join Field
    * * SQL Data Type: nvarchar(255)
    */
    JoinEntityInverseJoinField: z.string().nullish(),
    /**
    * * Field Name: DisplayInForm
    * * Display Name: Display In Form
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: When unchecked the relationship will NOT be displayed on the generated form
    */
    DisplayInForm: z.boolean(),
    /**
    * * Field Name: DisplayLocation
    * * Display Name: Display Location
    * * SQL Data Type: nvarchar(50)
    * * Default Value: After Field Tabs
    * * Value List Type: List
    * * Possible Values 
    *   * After Field Tabs
    *   * Before Field Tabs
    */
    DisplayLocation: z.union([z.literal('After Field Tabs'), z.literal('Before Field Tabs')]),
    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Optional, when specified this value overrides the related entity name for the label on the tab
    */
    DisplayName: z.string().nullish(),
    /**
    * * Field Name: DisplayIconType
    * * Display Name: Display Icon Type
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Related Entity Icon
    * * Value List Type: List
    * * Possible Values 
    *   * Related Entity Icon
    *   * Custom
    *   * None
    * * Description: When Related Entity Icon - uses the icon from the related entity, if one exists. When Custom, uses the value in the DisplayIcon field in this record, and when None, no icon is displayed
    */
    DisplayIconType: z.union([z.literal('Related Entity Icon'), z.literal('Custom'), z.literal('None')]),
    /**
    * * Field Name: DisplayIcon
    * * Display Name: Display Icon
    * * SQL Data Type: nvarchar(255)
    * * Description: If specified, the icon 
    */
    DisplayIcon: z.string().nullish(),
    /**
    * * Field Name: DisplayUserViewID
    * * Display Name: Display User View ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User Views (vwUserViews.ID)
    */
    DisplayUserViewID: z.string().nullish(),
    /**
    * * Field Name: DisplayComponentID
    * * Display Name: Display Component ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entity Relationship Display Components (vwEntityRelationshipDisplayComponents.ID)
    */
    DisplayComponentID: z.string().nullish(),
    /**
    * * Field Name: DisplayComponentConfiguration
    * * Display Name: Display Component Configuration
    * * SQL Data Type: nvarchar(MAX)
    * * Description: If DisplayComponentID is specified, this field can optionally be used to track component-specific and relationship-specific configuration details that will be used by CodeGen to provide to the display component selected.
    */
    DisplayComponentConfiguration: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: EntityBaseTable
    * * Display Name: Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    EntityBaseTable: z.string(),
    /**
    * * Field Name: EntityBaseView
    * * Display Name: Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    EntityBaseView: z.string(),
    /**
    * * Field Name: RelatedEntity
    * * Display Name: Related Entity
    * * SQL Data Type: nvarchar(255)
    */
    RelatedEntity: z.string(),
    /**
    * * Field Name: RelatedEntityBaseTable
    * * Display Name: Related Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    RelatedEntityBaseTable: z.string(),
    /**
    * * Field Name: RelatedEntityBaseView
    * * Display Name: Related Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    RelatedEntityBaseView: z.string(),
    /**
    * * Field Name: RelatedEntityClassName
    * * Display Name: Related Entity Class Name
    * * SQL Data Type: nvarchar(MAX)
    */
    RelatedEntityClassName: z.string().nullish(),
    /**
    * * Field Name: RelatedEntityCodeName
    * * Display Name: Related Entity Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    RelatedEntityCodeName: z.string().nullish(),
    /**
    * * Field Name: RelatedEntityBaseTableCodeName
    * * Display Name: Related Entity Base Table Code Name
    * * SQL Data Type: nvarchar(MAX)
    */
    RelatedEntityBaseTableCodeName: z.string().nullish(),
    /**
    * * Field Name: DisplayUserViewName
    * * Display Name: Display User View Name
    * * SQL Data Type: nvarchar(100)
    */
    DisplayUserViewName: z.string().nullish(),
});

export type EntityRelationshipEntityType = z.infer<typeof EntityRelationshipSchema>;
       
/**
 * zod schema definition for the entity Entity Settings
 * * Schema: __mj
 * * Base Table: EntitySetting
 * * Base View: vwEntitySettings
 * * Primary Key: ID
 */
export const EntitySettingSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    */
    Value: z.string(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
});

export type EntitySettingEntityType = z.infer<typeof EntitySettingSchema>;
       
/**
 * zod schema definition for the entity Error Logs
 * * Schema: __mj
 * * Base Table: ErrorLog
 * * Base View: vwErrorLogs
 * * Primary Key: ID
 */
export const ErrorLogSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: CompanyIntegrationRunID
    * * Display Name: CompanyIntegrationRun ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integration Runs (vwCompanyIntegrationRuns.ID)
    */
    CompanyIntegrationRunID: z.string().nullish(),
    /**
    * * Field Name: CompanyIntegrationRunDetailID
    * * Display Name: CompanyIntegrationRunDetail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integration Run Details (vwCompanyIntegrationRunDetails.ID)
    */
    CompanyIntegrationRunDetailID: z.string().nullish(),
    /**
    * * Field Name: Code
    * * SQL Data Type: nchar(20)
    */
    Code: z.string().nullish(),
    /**
    * * Field Name: Message
    * * SQL Data Type: nvarchar(MAX)
    */
    Message: z.string().nullish(),
    /**
    * * Field Name: CreatedBy
    * * Display Name: Created By
    * * SQL Data Type: nvarchar(50)
    * * Default Value: suser_name()
    */
    CreatedBy: z.string().nullish(),
    /**
    * * Field Name: Status
    * * SQL Data Type: nvarchar(10)
    */
    Status: z.string().nullish(),
    /**
    * * Field Name: Category
    * * SQL Data Type: nvarchar(20)
    */
    Category: z.string().nullish(),
    /**
    * * Field Name: Details
    * * SQL Data Type: nvarchar(MAX)
    */
    Details: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type ErrorLogEntityType = z.infer<typeof ErrorLogSchema>;
       
/**
 * zod schema definition for the entity Explorer Navigation Items
 * * Schema: __mj
 * * Base Table: ExplorerNavigationItem
 * * Base View: vwExplorerNavigationItems
 * * @description Table to store navigation items for MemberJunction Explorer
 * * Primary Key: ID
 */
export const ExplorerNavigationItemSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    * * Description: Unique identifier for each navigation item
    */
    ID: z.string(),
    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    * * Description: Sequence number for the navigation item, must be unique and greater than 0
    */
    Sequence: z.number(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    * * Description: Unique name of the navigation item displayed to the user
    */
    Name: z.string(),
    /**
    * * Field Name: Route
    * * Display Name: Route
    * * SQL Data Type: nvarchar(255)
    * * Description: The route for the navigation item relative to the app main URL, using Angular syntax like "entity/:entityName"
    */
    Route: z.string(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates if the navigation item is active; allows turning off items in the UI without deleting them from the metadata
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: ShowInHomeScreen
    * * Display Name: Show In Home Screen
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Controls if the navigation item is shown on the Home screen for MJ Explorer
    */
    ShowInHomeScreen: z.boolean(),
    /**
    * * Field Name: ShowInNavigationDrawer
    * * Display Name: Show In Navigation Drawer
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: Controls if the item is shown in the left navigation drawer in the MJ Explorer app or not.
    */
    ShowInNavigationDrawer: z.boolean(),
    /**
    * * Field Name: IconCSSClass
    * * Display Name: Icon CSSClass
    * * SQL Data Type: nvarchar(100)
    * * Description: Optional, CSS class for an icon to be displayed with the navigation item
    */
    IconCSSClass: z.string().nullish(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the navigation item, shown to the user on hover or in larger displays
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Administrator comments, not shown to the end user in MJ Explorer app
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type ExplorerNavigationItemEntityType = z.infer<typeof ExplorerNavigationItemSchema>;
       
/**
 * zod schema definition for the entity File Categories
 * * Schema: __mj
 * * Base Table: FileCategory
 * * Base View: vwFileCategories
 * * Primary Key: ID
 */
export const FileCategorySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: File Categories (vwFileCategories.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    Parent: z.string().nullish(),
});

export type FileCategoryEntityType = z.infer<typeof FileCategorySchema>;
       
/**
 * zod schema definition for the entity File Entity Record Links
 * * Schema: __mj
 * * Base Table: FileEntityRecordLink
 * * Base View: vwFileEntityRecordLinks
 * * Primary Key: ID
 */
export const FileEntityRecordLinkSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: FileID
    * * Display Name: File ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Files (vwFiles.ID)
    */
    FileID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(750)
    */
    RecordID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: File
    * * Display Name: File
    * * SQL Data Type: nvarchar(500)
    */
    File: z.string(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
});

export type FileEntityRecordLinkEntityType = z.infer<typeof FileEntityRecordLinkSchema>;
       
/**
 * zod schema definition for the entity File Storage Providers
 * * Schema: __mj
 * * Base Table: FileStorageProvider
 * * Base View: vwFileStorageProviders
 * * Primary Key: ID
 */
export const FileStorageProviderSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: ServerDriverKey
    * * Display Name: Server Driver Key
    * * SQL Data Type: nvarchar(100)
    */
    ServerDriverKey: z.string(),
    /**
    * * Field Name: ClientDriverKey
    * * Display Name: Client Driver Key
    * * SQL Data Type: nvarchar(100)
    */
    ClientDriverKey: z.string(),
    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Default Value: 0
    */
    Priority: z.number(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type FileStorageProviderEntityType = z.infer<typeof FileStorageProviderSchema>;
       
/**
 * zod schema definition for the entity Files
 * * Schema: __mj
 * * Base Table: File
 * * Base View: vwFiles
 * * Primary Key: ID
 */
export const FileSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(500)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: File Categories (vwFileCategories.ID)
    */
    CategoryID: z.string().nullish(),
    /**
    * * Field Name: ProviderID
    * * Display Name: Provider ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: File Storage Providers (vwFileStorageProviders.ID)
    */
    ProviderID: z.string(),
    /**
    * * Field Name: ContentType
    * * Display Name: Content Type
    * * SQL Data Type: nvarchar(50)
    */
    ContentType: z.string().nullish(),
    /**
    * * Field Name: ProviderKey
    * * Display Name: Provider Key
    * * SQL Data Type: nvarchar(500)
    */
    ProviderKey: z.string().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Description: Pending, Uploading, Uploaded, Deleting, Deleted
    */
    Status: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    */
    Category: z.string().nullish(),
    /**
    * * Field Name: Provider
    * * Display Name: Provider
    * * SQL Data Type: nvarchar(50)
    */
    Provider: z.string(),
});

export type FileEntityType = z.infer<typeof FileSchema>;
       
/**
 * zod schema definition for the entity flyway _schema _histories
 * * Schema: __mj
 * * Base Table: flyway_schema_history
 * * Base View: vwflyway_schema_histories
 * * Primary Key: installed_rank
 */
export const flyway_schema_historySchema = z.object({
    /**
    * * Field Name: installed_rank
    * * Display Name: installed _rank
    * * SQL Data Type: int
    */
    installed_rank: z.number(),
    /**
    * * Field Name: version
    * * Display Name: version
    * * SQL Data Type: nvarchar(50)
    */
    version: z.string().nullish(),
    /**
    * * Field Name: description
    * * Display Name: description
    * * SQL Data Type: nvarchar(200)
    */
    description: z.string().nullish(),
    /**
    * * Field Name: type
    * * Display Name: type
    * * SQL Data Type: nvarchar(20)
    */
    type: z.string(),
    /**
    * * Field Name: script
    * * Display Name: script
    * * SQL Data Type: nvarchar(1000)
    */
    script: z.string(),
    /**
    * * Field Name: checksum
    * * Display Name: checksum
    * * SQL Data Type: int
    */
    checksum: z.number().nullish(),
    /**
    * * Field Name: installed_by
    * * Display Name: installed _by
    * * SQL Data Type: nvarchar(100)
    */
    installed_by: z.string(),
    /**
    * * Field Name: installed_on
    * * Display Name: installed _on
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    installed_on: z.date(),
    /**
    * * Field Name: execution_time
    * * Display Name: execution _time
    * * SQL Data Type: int
    */
    execution_time: z.number(),
    /**
    * * Field Name: success
    * * Display Name: success
    * * SQL Data Type: bit
    */
    success: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type flyway_schema_historyEntityType = z.infer<typeof flyway_schema_historySchema>;
       
/**
 * zod schema definition for the entity Integration URL Formats
 * * Schema: __mj
 * * Base Table: IntegrationURLFormat
 * * Base View: vwIntegrationURLFormats
 * * @description Used to generate web links for end users to easily access resources in a source system. URL Formats support templating to inject various field values at run-time to take a user directly to a resource in a source system.
 * * Primary Key: ID
 */
export const IntegrationURLFormatSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: IntegrationID
    * * Display Name: Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Integrations (vwIntegrations.ID)
    */
    IntegrationID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: URLFormat
    * * SQL Data Type: nvarchar(500)
    * * Description: The URL Format for the given integration including the ability to include markup with fields from the integration
    */
    URLFormat: z.string(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Integration
    * * Display Name: Integration
    * * SQL Data Type: nvarchar(100)
    */
    Integration: z.string(),
    /**
    * * Field Name: NavigationBaseURL
    * * Display Name: Navigation Base URL
    * * SQL Data Type: nvarchar(500)
    */
    NavigationBaseURL: z.string().nullish(),
    /**
    * * Field Name: FullURLFormat
    * * Display Name: Full URLFormat
    * * SQL Data Type: nvarchar(1000)
    */
    FullURLFormat: z.string().nullish(),
});

export type IntegrationURLFormatEntityType = z.infer<typeof IntegrationURLFormatSchema>;
       
/**
 * zod schema definition for the entity Integrations
 * * Schema: __mj
 * * Base Table: Integration
 * * Base View: vwIntegrations
 * * @description Catalog of all integrations that have been configured in the system.
 * * Primary Key: ID
 */
export const IntegrationSchema = z.object({
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(255)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: NavigationBaseURL
    * * Display Name: Navigation Base URL
    * * SQL Data Type: nvarchar(500)
    */
    NavigationBaseURL: z.string().nullish(),
    /**
    * * Field Name: ClassName
    * * Display Name: Class Name
    * * SQL Data Type: nvarchar(100)
    */
    ClassName: z.string().nullish(),
    /**
    * * Field Name: ImportPath
    * * Display Name: Import Path
    * * SQL Data Type: nvarchar(100)
    */
    ImportPath: z.string().nullish(),
    /**
    * * Field Name: BatchMaxRequestCount
    * * Display Name: Batch Max Request Count
    * * SQL Data Type: int
    * * Default Value: -1
    */
    BatchMaxRequestCount: z.number(),
    /**
    * * Field Name: BatchRequestWaitTime
    * * Display Name: Batch Request Wait Time
    * * SQL Data Type: int
    * * Default Value: -1
    */
    BatchRequestWaitTime: z.number(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
});

export type IntegrationEntityType = z.infer<typeof IntegrationSchema>;
       
/**
 * zod schema definition for the entity Libraries
 * * Schema: __mj
 * * Base Table: Library
 * * Base View: vwLibraries
 * * @description Stores information about the available libraries, including a list of classes/functions, type definitions, and sample code. You can add additional custom libraries here to make them avaialable to code generation features within the system.
 * * Primary Key: ID
 */
export const LibrarySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * Active
    *   * Disabled
    * * Description: Status of the library, only libraries marked as Active will be available for use by generated code. If a library was once active but no longer is, existing code that used the library will not be affected.
    */
    Status: z.union([z.literal('Pending'), z.literal('Active'), z.literal('Disabled')]),
    /**
    * * Field Name: TypeDefinitions
    * * Display Name: Type Definitions
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Code showing the types and functions defined in the library to be used for reference by humans and AI
    */
    TypeDefinitions: z.string().nullish(),
    /**
    * * Field Name: SampleCode
    * * Display Name: Sample Code
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Examples of code use of the classes and/or functions from within the library
    */
    SampleCode: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type LibraryEntityType = z.infer<typeof LibrarySchema>;
       
/**
 * zod schema definition for the entity Library Items
 * * Schema: __mj
 * * Base Table: LibraryItem
 * * Base View: vwLibraryItems
 * * @description Table to store individual library items
 * * Primary Key: ID
 */
export const LibraryItemSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: LibraryID
    * * Display Name: Library ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Libraries (vwLibraries.ID)
    */
    LibraryID: z.string(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Class
    *   * Interface
    *   * Variable
    *   * Type
    *   * Module
    *   * Function
    * * Description: Type of the library item for example Class, Interface, etc.
    */
    Type: z.union([z.literal('Class'), z.literal('Interface'), z.literal('Variable'), z.literal('Type'), z.literal('Module'), z.literal('Function')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Library
    * * Display Name: Library
    * * SQL Data Type: nvarchar(255)
    */
    Library: z.string(),
});

export type LibraryItemEntityType = z.infer<typeof LibraryItemSchema>;
       
/**
 * zod schema definition for the entity List Categories
 * * Schema: __mj
 * * Base Table: ListCategory
 * * Base View: vwListCategories
 * * Primary Key: ID
 */
export const ListCategorySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: List Categories (vwListCategories.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type ListCategoryEntityType = z.infer<typeof ListCategorySchema>;
       
/**
 * zod schema definition for the entity List Details
 * * Schema: __mj
 * * Base Table: ListDetail
 * * Base View: vwListDetails
 * * @description Tracks the records within each list.
 * * Primary Key: ID
 */
export const ListDetailSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ListID
    * * Display Name: List ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Lists (vwLists.ID)
    */
    ListID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(445)
    */
    RecordID: z.string(),
    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    */
    Sequence: z.number(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: List
    * * Display Name: List
    * * SQL Data Type: nvarchar(100)
    */
    List: z.string(),
});

export type ListDetailEntityType = z.infer<typeof ListDetailSchema>;
       
/**
 * zod schema definition for the entity Lists
 * * Schema: __mj
 * * Base Table: List
 * * Base View: vwLists
 * * @description Static lists are useful for controlling a set of data for a given entity. These can be used programatically for applications like logging and tracking long-running tasks and also by end users for tracking any particular list of records they want to directly control the set.
 * * Primary Key: ID
 */
export const ListSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: List Categories (vwListCategories.ID)
    */
    CategoryID: z.string().nullish(),
    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record ID
    * * SQL Data Type: nvarchar(100)
    */
    ExternalSystemRecordID: z.string().nullish(),
    /**
    * * Field Name: CompanyIntegrationID
    * * Display Name: Company Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Company Integrations (vwCompanyIntegrations.ID)
    */
    CompanyIntegrationID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type ListEntityType = z.infer<typeof ListSchema>;
       
/**
 * zod schema definition for the entity Output Delivery Types
 * * Schema: __mj
 * * Base Table: OutputDeliveryType
 * * Base View: vwOutputDeliveryTypes
 * * Primary Key: ID
 */
export const OutputDeliveryTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type OutputDeliveryTypeEntityType = z.infer<typeof OutputDeliveryTypeSchema>;
       
/**
 * zod schema definition for the entity Output Format Types
 * * Schema: __mj
 * * Base Table: OutputFormatType
 * * Base View: vwOutputFormatTypes
 * * Primary Key: ID
 */
export const OutputFormatTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: DisplayFormat
    * * Display Name: Display Format
    * * SQL Data Type: nvarchar(MAX)
    */
    DisplayFormat: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type OutputFormatTypeEntityType = z.infer<typeof OutputFormatTypeSchema>;
       
/**
 * zod schema definition for the entity Output Trigger Types
 * * Schema: __mj
 * * Base Table: OutputTriggerType
 * * Base View: vwOutputTriggerTypes
 * * Primary Key: ID
 */
export const OutputTriggerTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type OutputTriggerTypeEntityType = z.infer<typeof OutputTriggerTypeSchema>;
       
/**
 * zod schema definition for the entity Queries
 * * Schema: __mj
 * * Base Table: Query
 * * Base View: vwQueries
 * * @description Catalog of stored queries. This is useful for any arbitrary query that is known to be performant and correct and can be reused. Queries can be viewed/run by a user, used programatically via RunQuery, and also used by AI systems for improved reliability instead of dynamically generated SQL. Queries can also improve security since they store the SQL instead of using dynamic SQL.
 * * Primary Key: ID
 */
export const QuerySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Query Categories (vwQueryCategories.ID)
    */
    CategoryID: z.string().nullish(),
    /**
    * * Field Name: UserQuestion
    * * Display Name: User Question
    * * SQL Data Type: nvarchar(MAX)
    */
    UserQuestion: z.string().nullish(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: SQL
    * * Display Name: SQL
    * * SQL Data Type: nvarchar(MAX)
    */
    SQL: z.string().nullish(),
    /**
    * * Field Name: TechnicalDescription
    * * Display Name: Technical Description
    * * SQL Data Type: nvarchar(MAX)
    */
    TechnicalDescription: z.string().nullish(),
    /**
    * * Field Name: OriginalSQL
    * * Display Name: Original SQL
    * * SQL Data Type: nvarchar(MAX)
    */
    OriginalSQL: z.string().nullish(),
    /**
    * * Field Name: Feedback
    * * Display Name: Feedback
    * * SQL Data Type: nvarchar(MAX)
    */
    Feedback: z.string().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(15)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * Approved
    *   * Rejected
    *   * Expired
    */
    Status: z.union([z.literal('Pending'), z.literal('Approved'), z.literal('Rejected'), z.literal('Expired')]),
    /**
    * * Field Name: QualityRank
    * * Display Name: Quality Rank
    * * SQL Data Type: int
    * * Default Value: 0
    * * Description: Value indicating the quality of the query, higher values mean a better quality
    */
    QualityRank: z.number().nullish(),
    /**
    * * Field Name: ExecutionCostRank
    * * Display Name: Execution Cost Rank
    * * SQL Data Type: int
    * * Description: Higher numbers indicate more execution overhead/time required. Useful for planning which queries to use in various scenarios.
    */
    ExecutionCostRank: z.number().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(50)
    */
    Category: z.string().nullish(),
});

export type QueryEntityType = z.infer<typeof QuerySchema>;
       
/**
 * zod schema definition for the entity Query Categories
 * * Schema: __mj
 * * Base Table: QueryCategory
 * * Base View: vwQueryCategories
 * * Primary Key: ID
 */
export const QueryCategorySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Query Categories (vwQueryCategories.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(50)
    */
    Parent: z.string().nullish(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type QueryCategoryEntityType = z.infer<typeof QueryCategorySchema>;
       
/**
 * zod schema definition for the entity Query Fields
 * * Schema: __mj
 * * Base Table: QueryField
 * * Base View: vwQueryFields
 * * Primary Key: ID
 */
export const QueryFieldSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: QueryID
    * * Display Name: Query ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queries (vwQueries.ID)
    */
    QueryID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    */
    Sequence: z.number(),
    /**
    * * Field Name: SQLBaseType
    * * Display Name: SQLBase Type
    * * SQL Data Type: nvarchar(50)
    * * Description: The base type, not including parameters, in SQL. For example this field would be nvarchar or decimal, and wouldn't include type parameters. The SQLFullType field provides that information.
    */
    SQLBaseType: z.string(),
    /**
    * * Field Name: SQLFullType
    * * Display Name: SQLFull Type
    * * SQL Data Type: nvarchar(100)
    * * Description: The full SQL type for the field, for example datetime or nvarchar(10) etc.
    */
    SQLFullType: z.string(),
    /**
    * * Field Name: SourceEntityID
    * * Display Name: Source Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    SourceEntityID: z.string().nullish(),
    /**
    * * Field Name: SourceFieldName
    * * Display Name: Source Field Name
    * * SQL Data Type: nvarchar(255)
    */
    SourceFieldName: z.string().nullish(),
    /**
    * * Field Name: IsComputed
    * * Display Name: Is Computed
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsComputed: z.boolean(),
    /**
    * * Field Name: ComputationDescription
    * * Display Name: Computation Description
    * * SQL Data Type: nvarchar(MAX)
    */
    ComputationDescription: z.string().nullish(),
    /**
    * * Field Name: IsSummary
    * * Display Name: Is Summary
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsSummary: z.boolean(),
    /**
    * * Field Name: SummaryDescription
    * * Display Name: Summary Description
    * * SQL Data Type: nvarchar(MAX)
    */
    SummaryDescription: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Query
    * * Display Name: Query
    * * SQL Data Type: nvarchar(255)
    */
    Query: z.string(),
    /**
    * * Field Name: SourceEntity
    * * Display Name: Source Entity
    * * SQL Data Type: nvarchar(255)
    */
    SourceEntity: z.string().nullish(),
});

export type QueryFieldEntityType = z.infer<typeof QueryFieldSchema>;
       
/**
 * zod schema definition for the entity Query Permissions
 * * Schema: __mj
 * * Base Table: QueryPermission
 * * Base View: vwQueryPermissions
 * * Primary Key: ID
 */
export const QueryPermissionSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: QueryID
    * * Display Name: Query ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queries (vwQueries.ID)
    */
    QueryID: z.string(),
    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    RoleID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type QueryPermissionEntityType = z.infer<typeof QueryPermissionSchema>;
       
/**
 * zod schema definition for the entity Queue Tasks
 * * Schema: __mj
 * * Base Table: QueueTask
 * * Base View: vwQueueTasks
 * * Primary Key: ID
 */
export const QueueTaskSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: QueueID
    * * Display Name: Queue ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queues (vwQueues.ID)
    */
    QueueID: z.string(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * In Progress
    *   * Completed
    *   * Failed
    */
    Status: z.union([z.literal('In Progress'), z.literal('Completed'), z.literal('Failed')]),
    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    StartedAt: z.date().nullish(),
    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    EndedAt: z.date().nullish(),
    /**
    * * Field Name: Data
    * * Display Name: Data
    * * SQL Data Type: nvarchar(MAX)
    */
    Data: z.string().nullish(),
    /**
    * * Field Name: Options
    * * Display Name: Options
    * * SQL Data Type: nvarchar(MAX)
    */
    Options: z.string().nullish(),
    /**
    * * Field Name: Output
    * * Display Name: Output
    * * SQL Data Type: nvarchar(MAX)
    */
    Output: z.string().nullish(),
    /**
    * * Field Name: ErrorMessage
    * * Display Name: Error Message
    * * SQL Data Type: nvarchar(MAX)
    */
    ErrorMessage: z.string().nullish(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Queue
    * * Display Name: Queue
    * * SQL Data Type: nvarchar(50)
    */
    Queue: z.string(),
});

export type QueueTaskEntityType = z.infer<typeof QueueTaskSchema>;
       
/**
 * zod schema definition for the entity Queue Types
 * * Schema: __mj
 * * Base Table: QueueType
 * * Base View: vwQueueTypes
 * * Primary Key: ID
 */
export const QueueTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(100)
    */
    DriverClass: z.string(),
    /**
    * * Field Name: DriverImportPath
    * * Display Name: Driver Import Path
    * * SQL Data Type: nvarchar(200)
    */
    DriverImportPath: z.string().nullish(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type QueueTypeEntityType = z.infer<typeof QueueTypeSchema>;
       
/**
 * zod schema definition for the entity Queues
 * * Schema: __mj
 * * Base Table: Queue
 * * Base View: vwQueues
 * * @description Queues can be used to async execute long running tasks
 * * Primary Key: ID
 */
export const QueueSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: QueueTypeID
    * * Display Name: Queue Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Queue Types (vwQueueTypes.ID)
    */
    QueueTypeID: z.string(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: ProcessPID
    * * Display Name: Process PID
    * * SQL Data Type: int
    */
    ProcessPID: z.number().nullish(),
    /**
    * * Field Name: ProcessPlatform
    * * Display Name: Process Platform
    * * SQL Data Type: nvarchar(30)
    */
    ProcessPlatform: z.string().nullish(),
    /**
    * * Field Name: ProcessVersion
    * * Display Name: Process Version
    * * SQL Data Type: nvarchar(15)
    */
    ProcessVersion: z.string().nullish(),
    /**
    * * Field Name: ProcessCwd
    * * Display Name: Process Cwd
    * * SQL Data Type: nvarchar(100)
    */
    ProcessCwd: z.string().nullish(),
    /**
    * * Field Name: ProcessIPAddress
    * * Display Name: Process IPAddress
    * * SQL Data Type: nvarchar(50)
    */
    ProcessIPAddress: z.string().nullish(),
    /**
    * * Field Name: ProcessMacAddress
    * * Display Name: Process Mac Address
    * * SQL Data Type: nvarchar(50)
    */
    ProcessMacAddress: z.string().nullish(),
    /**
    * * Field Name: ProcessOSName
    * * Display Name: Process OSName
    * * SQL Data Type: nvarchar(25)
    */
    ProcessOSName: z.string().nullish(),
    /**
    * * Field Name: ProcessOSVersion
    * * Display Name: Process OSVersion
    * * SQL Data Type: nvarchar(10)
    */
    ProcessOSVersion: z.string().nullish(),
    /**
    * * Field Name: ProcessHostName
    * * Display Name: Process Host Name
    * * SQL Data Type: nvarchar(50)
    */
    ProcessHostName: z.string().nullish(),
    /**
    * * Field Name: ProcessUserID
    * * Display Name: Process User ID
    * * SQL Data Type: nvarchar(25)
    */
    ProcessUserID: z.string().nullish(),
    /**
    * * Field Name: ProcessUserName
    * * Display Name: Process User Name
    * * SQL Data Type: nvarchar(50)
    */
    ProcessUserName: z.string().nullish(),
    /**
    * * Field Name: LastHeartbeat
    * * Display Name: Last Heartbeat
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    LastHeartbeat: z.date(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: QueueType
    * * Display Name: Queue Type
    * * SQL Data Type: nvarchar(50)
    */
    QueueType: z.string(),
});

export type QueueEntityType = z.infer<typeof QueueSchema>;
       
/**
 * zod schema definition for the entity Recommendation Items
 * * Schema: __mj
 * * Base Table: RecommendationItem
 * * Base View: vwRecommendationItems
 * * @description Table to store individual recommendation items that are the right side of the recommendation which we track in the DestinationEntityID/DestinationEntityRecordID
 * * Primary Key: ID
 */
export const RecommendationItemSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: RecommendationID
    * * Display Name: Recommendation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Recommendations (vwRecommendations.ID)
    */
    RecommendationID: z.string(),
    /**
    * * Field Name: DestinationEntityID
    * * Display Name: Destination Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    DestinationEntityID: z.string(),
    /**
    * * Field Name: DestinationEntityRecordID
    * * Display Name: Destination Entity Record ID
    * * SQL Data Type: nvarchar(450)
    * * Description: The record ID of the destination entity
    */
    DestinationEntityRecordID: z.string(),
    /**
    * * Field Name: MatchProbability
    * * Display Name: Match Probability
    * * SQL Data Type: decimal(18, 15)
    * * Description: A value between 0 and 1 indicating the probability of the match, higher numbers indicating a more certain match/recommendation.
    */
    MatchProbability: z.number().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: DestinationEntity
    * * Display Name: Destination Entity
    * * SQL Data Type: nvarchar(255)
    */
    DestinationEntity: z.string(),
});

export type RecommendationItemEntityType = z.infer<typeof RecommendationItemSchema>;
       
/**
 * zod schema definition for the entity Recommendation Providers
 * * Schema: __mj
 * * Base Table: RecommendationProvider
 * * Base View: vwRecommendationProviders
 * * @description Recommendation providers details
 * * Primary Key: ID
 */
export const RecommendationProviderSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type RecommendationProviderEntityType = z.infer<typeof RecommendationProviderSchema>;
       
/**
 * zod schema definition for the entity Recommendation Runs
 * * Schema: __mj
 * * Base Table: RecommendationRun
 * * Base View: vwRecommendationRuns
 * * @description Recommendation runs log each time a provider is requested to provide recommendations
 * * Primary Key: ID
 */
export const RecommendationRunSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: RecommendationProviderID
    * * Display Name: Recommendation Provider ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Recommendation Providers (vwRecommendationProviders.ID)
    */
    RecommendationProviderID: z.string(),
    /**
    * * Field Name: StartDate
    * * Display Name: Start Date
    * * SQL Data Type: datetime
    * * Description: The start date of the recommendation run
    */
    StartDate: z.date(),
    /**
    * * Field Name: EndDate
    * * Display Name: End Date
    * * SQL Data Type: datetime
    * * Description: The end date of the recommendation run
    */
    EndDate: z.date().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * In Progress
    *   * Completed
    *   * Canceled
    *   * Error
    * * Description: The status of the recommendation run
    */
    Status: z.union([z.literal('Pending'), z.literal('In Progress'), z.literal('Completed'), z.literal('Canceled'), z.literal('Error')]),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: RunByUserID
    * * Display Name: Run By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    RunByUserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: RecommendationProvider
    * * Display Name: Recommendation Provider
    * * SQL Data Type: nvarchar(255)
    */
    RecommendationProvider: z.string(),
    /**
    * * Field Name: RunByUser
    * * Display Name: Run By User
    * * SQL Data Type: nvarchar(100)
    */
    RunByUser: z.string(),
});

export type RecommendationRunEntityType = z.infer<typeof RecommendationRunSchema>;
       
/**
 * zod schema definition for the entity Recommendations
 * * Schema: __mj
 * * Base Table: Recommendation
 * * Base View: vwRecommendations
 * * @description Recommendation headers that store the left side of the recommendation which we track in the SourceEntityID/SourceEntityRecordID
 * * Primary Key: ID
 */
export const RecommendationSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: RecommendationRunID
    * * Display Name: Recommendation Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Recommendation Runs (vwRecommendationRuns.ID)
    */
    RecommendationRunID: z.string(),
    /**
    * * Field Name: SourceEntityID
    * * Display Name: Source Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    SourceEntityID: z.string(),
    /**
    * * Field Name: SourceEntityRecordID
    * * Display Name: Source Entity Record ID
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The record ID of the source entity
    */
    SourceEntityRecordID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: SourceEntity
    * * Display Name: Source Entity
    * * SQL Data Type: nvarchar(255)
    */
    SourceEntity: z.string(),
});

export type RecommendationEntityType = z.infer<typeof RecommendationSchema>;
       
/**
 * zod schema definition for the entity Record Change Replay Runs
 * * Schema: __mj
 * * Base Table: RecordChangeReplayRun
 * * Base View: vwRecordChangeReplayRuns
 * * @description Table to track the runs of replaying external record changes
 * * Primary Key: ID
 */
export const RecordChangeReplayRunSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    * * Description: Timestamp when the replay run started
    */
    StartedAt: z.date(),
    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    * * Description: Timestamp when the replay run ended
    */
    EndedAt: z.date().nullish(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * In Progress
    *   * Complete
    *   * Error
    * * Description: Status of the replay run (Pending, In Progress, Complete, Error)
    */
    Status: z.union([z.literal('Pending'), z.literal('In Progress'), z.literal('Complete'), z.literal('Error')]),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type RecordChangeReplayRunEntityType = z.infer<typeof RecordChangeReplayRunSchema>;
       
/**
 * zod schema definition for the entity Record Changes
 * * Schema: __mj
 * * Base Table: RecordChange
 * * Base View: vwRecordChanges
 * * @description For entities that have TrackRecordChanges=1, Record Changes will store the history of all changes made within the system. For integrations you can directly add values here if you have inbound signals indicating records were changed in a source system. This entity only automatically captures Record Changes if they were made within the system.
 * * Primary Key: ID
 */
export const RecordChangeSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(750)
    */
    RecordID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Create
    * * Value List Type: List
    * * Possible Values 
    *   * Create
    *   * Update
    *   * Delete
    * * Description: Create, Update, or Delete
    */
    Type: z.union([z.literal('Create'), z.literal('Update'), z.literal('Delete')]),
    /**
    * * Field Name: Source
    * * Display Name: Source
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Internal
    * * Value List Type: List
    * * Possible Values 
    *   * Internal
    *   * External
    * * Description: Internal or External
    */
    Source: z.union([z.literal('Internal'), z.literal('External')]),
    /**
    * * Field Name: ChangedAt
    * * Display Name: Changed At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    * * Description: The date/time that the change occured.
    */
    ChangedAt: z.date(),
    /**
    * * Field Name: ChangesJSON
    * * Display Name: Changes JSON
    * * SQL Data Type: nvarchar(MAX)
    * * Description: JSON structure that describes what was changed in a structured format.
    */
    ChangesJSON: z.string(),
    /**
    * * Field Name: ChangesDescription
    * * Display Name: Changes Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: A generated, human-readable description of what was changed.
    */
    ChangesDescription: z.string(),
    /**
    * * Field Name: FullRecordJSON
    * * Display Name: Full Record JSON
    * * SQL Data Type: nvarchar(MAX)
    * * Description: A complete snapshot of the record AFTER the change was applied in a JSON format that can be parsed.
    */
    FullRecordJSON: z.string(),
    /**
    * * Field Name: Status
    * * SQL Data Type: nvarchar(50)
    * * Default Value: Complete
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * Complete
    *   * Error
    * * Description: For internal record changes generated within MJ, the status is immediately Complete. For external changes that are detected, the workflow starts off as Pending, then In Progress and finally either Complete or Error
    */
    Status: z.union([z.literal('Pending'), z.literal('Complete'), z.literal('Error')]),
    /**
    * * Field Name: ErrorLog
    * * Display Name: Error Log
    * * SQL Data Type: nvarchar(MAX)
    */
    ErrorLog: z.string().nullish(),
    /**
    * * Field Name: ReplayRunID
    * * Display Name: Replay Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Record Change Replay Runs (vwRecordChangeReplayRuns.ID)
    */
    ReplayRunID: z.string().nullish(),
    /**
    * * Field Name: IntegrationID
    * * Display Name: Integration ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Integrations (vwIntegrations.ID)
    */
    IntegrationID: z.string().nullish(),
    /**
    * * Field Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    CreatedAt: z.date(),
    /**
    * * Field Name: UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
    /**
    * * Field Name: Integration
    * * Display Name: Integration
    * * SQL Data Type: nvarchar(100)
    */
    Integration: z.string().nullish(),
});

export type RecordChangeEntityType = z.infer<typeof RecordChangeSchema>;
       
/**
 * zod schema definition for the entity Record Merge Deletion Logs
 * * Schema: __mj
 * * Base Table: RecordMergeDeletionLog
 * * Base View: vwRecordMergeDeletionLogs
 * * Primary Key: ID
 */
export const RecordMergeDeletionLogSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: RecordMergeLogID
    * * Display Name: Record Merge Log ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Record Merge Logs (vwRecordMergeLogs.ID)
    */
    RecordMergeLogID: z.string(),
    /**
    * * Field Name: DeletedRecordID
    * * Display Name: Deleted Record ID
    * * SQL Data Type: nvarchar(750)
    */
    DeletedRecordID: z.string(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * Complete
    *   * Error
    */
    Status: z.union([z.literal('Pending'), z.literal('Complete'), z.literal('Error')]),
    /**
    * * Field Name: ProcessingLog
    * * Display Name: Processing Log
    * * SQL Data Type: nvarchar(MAX)
    */
    ProcessingLog: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type RecordMergeDeletionLogEntityType = z.infer<typeof RecordMergeDeletionLogSchema>;
       
/**
 * zod schema definition for the entity Record Merge Logs
 * * Schema: __mj
 * * Base Table: RecordMergeLog
 * * Base View: vwRecordMergeLogs
 * * Primary Key: ID
 */
export const RecordMergeLogSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: SurvivingRecordID
    * * Display Name: Surviving Record ID
    * * SQL Data Type: nvarchar(450)
    */
    SurvivingRecordID: z.string(),
    /**
    * * Field Name: InitiatedByUserID
    * * Display Name: Initiated By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    InitiatedByUserID: z.string(),
    /**
    * * Field Name: ApprovalStatus
    * * Display Name: Approval Status
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * Approved
    *   * Rejected
    */
    ApprovalStatus: z.union([z.literal('Pending'), z.literal('Approved'), z.literal('Rejected')]),
    /**
    * * Field Name: ApprovedByUserID
    * * Display Name: Approved By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    ApprovedByUserID: z.string().nullish(),
    /**
    * * Field Name: ProcessingStatus
    * * Display Name: Processing Status
    * * SQL Data Type: nvarchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Started
    *   * Complete
    *   * Error
    */
    ProcessingStatus: z.union([z.literal('Started'), z.literal('Complete'), z.literal('Error')]),
    /**
    * * Field Name: ProcessingStartedAt
    * * Display Name: Processing Started At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    ProcessingStartedAt: z.date(),
    /**
    * * Field Name: ProcessingEndedAt
    * * Display Name: Processing Ended At
    * * SQL Data Type: datetime
    */
    ProcessingEndedAt: z.date().nullish(),
    /**
    * * Field Name: ProcessingLog
    * * Display Name: Processing Log
    * * SQL Data Type: nvarchar(MAX)
    */
    ProcessingLog: z.string().nullish(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: InitiatedByUser
    * * Display Name: Initiated By User
    * * SQL Data Type: nvarchar(100)
    */
    InitiatedByUser: z.string(),
});

export type RecordMergeLogEntityType = z.infer<typeof RecordMergeLogSchema>;
       
/**
 * zod schema definition for the entity Report Categories
 * * Schema: __mj
 * * Base Table: ReportCategory
 * * Base View: vwReportCategories
 * * Primary Key: ID
 */
export const ReportCategorySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Report Categories (vwReportCategories.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    Parent: z.string().nullish(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type ReportCategoryEntityType = z.infer<typeof ReportCategorySchema>;
       
/**
 * zod schema definition for the entity Report Snapshots
 * * Schema: __mj
 * * Base Table: ReportSnapshot
 * * Base View: vwReportSnapshots
 * * Primary Key: ID
 */
export const ReportSnapshotSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ReportID
    * * Display Name: Report ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Reports (vwReports.ID)
    */
    ReportID: z.string(),
    /**
    * * Field Name: ResultSet
    * * Display Name: Result Set
    * * SQL Data Type: nvarchar(MAX)
    */
    ResultSet: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Report
    * * Display Name: Report
    * * SQL Data Type: nvarchar(255)
    */
    Report: z.string(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type ReportSnapshotEntityType = z.infer<typeof ReportSnapshotSchema>;
       
/**
 * zod schema definition for the entity Reports
 * * Schema: __mj
 * * Base Table: Report
 * * Base View: vwReports
 * * Primary Key: ID
 */
export const ReportSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Report Categories (vwReportCategories.ID)
    */
    CategoryID: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: SharingScope
    * * Display Name: Sharing Scope
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Personal
    * * Value List Type: List
    * * Possible Values 
    *   * None
    *   * Specific
    *   * Everyone
    */
    SharingScope: z.union([z.literal('None'), z.literal('Specific'), z.literal('Everyone')]),
    /**
    * * Field Name: ConversationID
    * * Display Name: Conversation ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversations (vwConversations.ID)
    */
    ConversationID: z.string().nullish(),
    /**
    * * Field Name: ConversationDetailID
    * * Display Name: Conversation Detail ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Conversation Details (vwConversationDetails.ID)
    */
    ConversationDetailID: z.string().nullish(),
    /**
    * * Field Name: DataContextID
    * * Display Name: Data Context ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Data Contexts (vwDataContexts.ID)
    */
    DataContextID: z.string().nullish(),
    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(MAX)
    */
    Configuration: z.string().nullish(),
    /**
    * * Field Name: OutputTriggerTypeID
    * * Display Name: Output Trigger Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Output Trigger Types (vwOutputTriggerTypes.ID)
    */
    OutputTriggerTypeID: z.string().nullish(),
    /**
    * * Field Name: OutputFormatTypeID
    * * Display Name: Output Format Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Output Format Types (vwOutputFormatTypes.ID)
    */
    OutputFormatTypeID: z.string().nullish(),
    /**
    * * Field Name: OutputDeliveryTypeID
    * * Display Name: Output Delivery Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Output Delivery Types (vwOutputDeliveryTypes.ID)
    */
    OutputDeliveryTypeID: z.string().nullish(),
    /**
    * * Field Name: OutputFrequency
    * * Display Name: Output Frequency
    * * SQL Data Type: nvarchar(50)
    */
    OutputFrequency: z.string().nullish(),
    /**
    * * Field Name: OutputTargetEmail
    * * Display Name: Output Target Email
    * * SQL Data Type: nvarchar(255)
    */
    OutputTargetEmail: z.string().nullish(),
    /**
    * * Field Name: OutputWorkflowID
    * * Display Name: Output Workflow ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Workflows (vwWorkflows.ID)
    */
    OutputWorkflowID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(100)
    */
    Category: z.string().nullish(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
    /**
    * * Field Name: Conversation
    * * Display Name: Conversation
    * * SQL Data Type: nvarchar(255)
    */
    Conversation: z.string().nullish(),
    /**
    * * Field Name: DataContext
    * * Display Name: Data Context
    * * SQL Data Type: nvarchar(255)
    */
    DataContext: z.string().nullish(),
    /**
    * * Field Name: OutputTriggerType
    * * Display Name: Output Trigger Type
    * * SQL Data Type: nvarchar(255)
    */
    OutputTriggerType: z.string().nullish(),
    /**
    * * Field Name: OutputFormatType
    * * Display Name: Output Format Type
    * * SQL Data Type: nvarchar(255)
    */
    OutputFormatType: z.string().nullish(),
    /**
    * * Field Name: OutputDeliveryType
    * * Display Name: Output Delivery Type
    * * SQL Data Type: nvarchar(255)
    */
    OutputDeliveryType: z.string().nullish(),
    /**
    * * Field Name: OutputWorkflow
    * * Display Name: Output Workflow
    * * SQL Data Type: nvarchar(100)
    */
    OutputWorkflow: z.string().nullish(),
});

export type ReportEntityType = z.infer<typeof ReportSchema>;
       
/**
 * zod schema definition for the entity Resource Types
 * * Schema: __mj
 * * Base Table: ResourceType
 * * Base View: vwResourceTypes
 * * Primary Key: ID
 */
export const ResourceTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(255)
    */
    DisplayName: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Icon
    * * Display Name: Icon
    * * SQL Data Type: nvarchar(100)
    */
    Icon: z.string().nullish(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string().nullish(),
});

export type ResourceTypeEntityType = z.infer<typeof ResourceTypeSchema>;
       
/**
 * zod schema definition for the entity Roles
 * * Schema: __mj
 * * Base Table: Role
 * * Base View: vwRoles
 * * @description Roles are used for security administration and can have zero to many Users as members
 * * Primary Key: ID
 */
export const RoleSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the role
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: DirectoryID
    * * Display Name: Directory ID
    * * SQL Data Type: nvarchar(250)
    * * Description: The unique ID of the role in the directory being used for authentication, for example an ID in Azure.
    */
    DirectoryID: z.string().nullish(),
    /**
    * * Field Name: SQLName
    * * SQL Data Type: nvarchar(250)
    * * Description: The name of the role in the database, this is used for auto-generating permission statements by CodeGen
    */
    SQLName: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type RoleEntityType = z.infer<typeof RoleSchema>;
       
/**
 * zod schema definition for the entity Row Level Security Filters
 * * Schema: __mj
 * * Base Table: RowLevelSecurityFilter
 * * Base View: vwRowLevelSecurityFilters
 * * Primary Key: ID
 */
export const RowLevelSecurityFilterSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: FilterText
    * * Display Name: Filter Text
    * * SQL Data Type: nvarchar(MAX)
    */
    FilterText: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type RowLevelSecurityFilterEntityType = z.infer<typeof RowLevelSecurityFilterSchema>;
       
/**
 * zod schema definition for the entity Scheduled Action Params
 * * Schema: __mj
 * * Base Table: ScheduledActionParam
 * * Base View: vwScheduledActionParams
 * * Primary Key: ID
 */
export const ScheduledActionParamSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: ScheduledActionID
    * * Display Name: Scheduled Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Scheduled Actions (vwScheduledActions.ID)
    */
    ScheduledActionID: z.string(),
    /**
    * * Field Name: ActionParamID
    * * Display Name: Action Param ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Action Params (vwActionParams.ID)
    */
    ActionParamID: z.string(),
    /**
    * * Field Name: ValueType
    * * Display Name: Value Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Static
    *   * SQL Statement
    */
    ValueType: z.union([z.literal('Static'), z.literal('SQL Statement')]),
    /**
    * * Field Name: Value
    * * Display Name: Value
    * * SQL Data Type: nvarchar(MAX)
    */
    Value: z.string().nullish(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type ScheduledActionParamEntityType = z.infer<typeof ScheduledActionParamSchema>;
       
/**
 * zod schema definition for the entity Scheduled Actions
 * * Schema: __mj
 * * Base Table: ScheduledAction
 * * Base View: vwScheduledActions
 * * @description Track scheduled actions and their details
 * * Primary Key: ID
 */
export const ScheduledActionSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: CreatedByUserID
    * * Display Name: Created By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    CreatedByUserID: z.string(),
    /**
    * * Field Name: ActionID
    * * Display Name: Action ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Actions (vwActions.ID)
    */
    ActionID: z.string(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Daily
    *   * Weekly
    *   * Monthly
    *   * Yearly
    *   * Custom
    * * Description: Type of the scheduled action (Daily, Weekly, Monthly, Yearly, Custom)
    */
    Type: z.union([z.literal('Daily'), z.literal('Weekly'), z.literal('Monthly'), z.literal('Yearly'), z.literal('Custom')]),
    /**
    * * Field Name: CronExpression
    * * Display Name: Cron Expression
    * * SQL Data Type: nvarchar(100)
    * * Description: Cron expression defining the schedule, automatically maintained by the system unless Type is Custom, in which case the user directly sets this
    */
    CronExpression: z.string().nullish(),
    /**
    * * Field Name: Timezone
    * * Display Name: Timezone
    * * SQL Data Type: nvarchar(100)
    * * Description: Timezone for the scheduled action, if not specified defaults to UTC/Z
    */
    Timezone: z.string(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * Active
    *   * Disabled
    *   * Expired
    * * Description: Status of the scheduled action (Pending, Active, Disabled, Expired)
    */
    Status: z.union([z.literal('Pending'), z.literal('Active'), z.literal('Disabled'), z.literal('Expired')]),
    /**
    * * Field Name: IntervalDays
    * * Display Name: Interval Days
    * * SQL Data Type: int
    * * Description: Interval in days for the scheduled action
    */
    IntervalDays: z.number().nullish(),
    /**
    * * Field Name: DayOfWeek
    * * Display Name: Day Of Week
    * * SQL Data Type: nvarchar(20)
    * * Description: Day of the week for the scheduled action
    */
    DayOfWeek: z.string().nullish(),
    /**
    * * Field Name: DayOfMonth
    * * Display Name: Day Of Month
    * * SQL Data Type: int
    * * Description: Day of the month for the scheduled action
    */
    DayOfMonth: z.number().nullish(),
    /**
    * * Field Name: Month
    * * Display Name: Month
    * * SQL Data Type: nvarchar(20)
    * * Description: Month for the scheduled action
    */
    Month: z.string().nullish(),
    /**
    * * Field Name: CustomCronExpression
    * * Display Name: Custom Cron Expression
    * * SQL Data Type: nvarchar(255)
    */
    CustomCronExpression: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type ScheduledActionEntityType = z.infer<typeof ScheduledActionSchema>;
       
/**
 * zod schema definition for the entity Schema Info
 * * Schema: __mj
 * * Base Table: SchemaInfo
 * * Base View: vwSchemaInfos
 * * @description Tracks the schemas in the system and the ID ranges that are valid for entities within each schema.
 * * Primary Key: ID
 */
export const SchemaInfoSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: SchemaName
    * * Display Name: Schema Name
    * * SQL Data Type: nvarchar(50)
    */
    SchemaName: z.string(),
    /**
    * * Field Name: EntityIDMin
    * * Display Name: Entity IDMin
    * * SQL Data Type: int
    */
    EntityIDMin: z.number(),
    /**
    * * Field Name: EntityIDMax
    * * Display Name: Entity IDMax
    * * SQL Data Type: int
    */
    EntityIDMax: z.number(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type SchemaInfoEntityType = z.infer<typeof SchemaInfoSchema>;
       
/**
 * zod schema definition for the entity Skills
 * * Schema: __mj
 * * Base Table: Skill
 * * Base View: vwSkills
 * * @description A hierarchical list of possible skills that are linked to Employees and can also be linked to any other entity
 * * Primary Key: ID
 */
export const SkillSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(50)
    */
    Name: z.string(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Skills (vwSkills.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(50)
    */
    Parent: z.string().nullish(),
});

export type SkillEntityType = z.infer<typeof SkillSchema>;
       
/**
 * zod schema definition for the entity Tagged Items
 * * Schema: __mj
 * * Base Table: TaggedItem
 * * Base View: vwTaggedItems
 * * @description Tracks the links between any record in any entity with Tags
 * * Primary Key: ID
 */
export const TaggedItemSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: TagID
    * * Display Name: Tag ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Tags (vwTags.ID)
    */
    TagID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(450)
    */
    RecordID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Tag
    * * Display Name: Tag
    * * SQL Data Type: nvarchar(255)
    */
    Tag: z.string(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
});

export type TaggedItemEntityType = z.infer<typeof TaggedItemSchema>;
       
/**
 * zod schema definition for the entity Tags
 * * Schema: __mj
 * * Base Table: Tag
 * * Base View: vwTags
 * * @description Tags are used to arbitrarily associate any record in any entity with addtional information.
 * * Primary Key: ID
 */
export const TagSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Tags (vwTags.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: DisplayName
    * * Display Name: Display Name
    * * SQL Data Type: nvarchar(255)
    */
    DisplayName: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    Parent: z.string().nullish(),
});

export type TagEntityType = z.infer<typeof TagSchema>;
       
/**
 * zod schema definition for the entity Template Categories
 * * Schema: __mj
 * * Base Table: TemplateCategory
 * * Base View: vwTemplateCategories
 * * @description Template categories for organizing templates
 * * Primary Key: ID
 */
export const TemplateCategorySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the template category
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the template category
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Template Categories (vwTemplateCategories.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(255)
    */
    Parent: z.string().nullish(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type TemplateCategoryEntityType = z.infer<typeof TemplateCategorySchema>;
       
/**
 * zod schema definition for the entity Template Content Types
 * * Schema: __mj
 * * Base Table: TemplateContentType
 * * Base View: vwTemplateContentTypes
 * * @description Template content types for categorizing content within templates
 * * Primary Key: ID
 */
export const TemplateContentTypeSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the template content type
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the template content type
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: CodeType
    * * Display Name: Code Type
    * * SQL Data Type: nvarchar(25)
    * * Default Value: Other
    * * Value List Type: List
    * * Possible Values 
    *   * TypeScript
    *   * SQL
    *   * HTML
    *   * CSS
    *   * JavaScript
    *   * JSON
    *   * Other
    * * Description: Refers to the primary language or codetype of the templates of this type, HTML, JSON, JavaScript, etc
    */
    CodeType: z.union([z.literal('TypeScript'), z.literal('SQL'), z.literal('HTML'), z.literal('CSS'), z.literal('JavaScript'), z.literal('JSON'), z.literal('Other')]),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type TemplateContentTypeEntityType = z.infer<typeof TemplateContentTypeSchema>;
       
/**
 * zod schema definition for the entity Template Contents
 * * Schema: __mj
 * * Base Table: TemplateContent
 * * Base View: vwTemplateContents
 * * @description Template content for different versions of a template for purposes like HTML/Text/etc
 * * Primary Key: ID
 */
export const TemplateContentSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: TemplateID
    * * Display Name: Template ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Templates (vwTemplates.ID)
    */
    TemplateID: z.string(),
    /**
    * * Field Name: TypeID
    * * Display Name: Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Template Content Types (vwTemplateContentTypes.ID)
    */
    TypeID: z.string(),
    /**
    * * Field Name: TemplateText
    * * Display Name: Template Text
    * * SQL Data Type: nvarchar(MAX)
    * * Description: The actual text content for the template
    */
    TemplateText: z.string().nullish(),
    /**
    * * Field Name: Priority
    * * Display Name: Priority
    * * SQL Data Type: int
    * * Description: Priority of the content version, higher priority versions will be used ahead of lower priority versions for a given Type
    */
    Priority: z.number(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: Indicates whether the content is active or not. Use this to disable a particular Template Content item without having to remove it
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Template
    * * Display Name: Template
    * * SQL Data Type: nvarchar(255)
    */
    Template: z.string(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(255)
    */
    Type: z.string(),
});

export type TemplateContentEntityType = z.infer<typeof TemplateContentSchema>;
       
/**
 * zod schema definition for the entity Template Params
 * * Schema: __mj
 * * Base Table: TemplateParam
 * * Base View: vwTemplateParams
 * * @description Parameters allowed for use inside the template
 * * Primary Key: ID
 */
export const TemplateParamSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: TemplateID
    * * Display Name: Template ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Templates (vwTemplates.ID)
    */
    TemplateID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the parameter
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the parameter
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Scalar
    * * Value List Type: List
    * * Possible Values 
    *   * Scalar
    *   * Array
    *   * Object
    *   * Record
    *   * Entity
    * * Description: Type of the parameter - Record is an individual record within the entity specified by EntityID. Entity means an entire Entity or an entity filtered by the LinkedParameterName/Field attributes and/or ExtraFilter. Object is any valid JSON object. Array and Scalar have their common meanings.
    */
    Type: z.union([z.literal('Scalar'), z.literal('Array'), z.literal('Object'), z.literal('Record'), z.literal('Entity')]),
    /**
    * * Field Name: DefaultValue
    * * Display Name: Default Value
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Default value of the parameter
    */
    DefaultValue: z.string().nullish(),
    /**
    * * Field Name: IsRequired
    * * Display Name: Is Required
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsRequired: z.boolean(),
    /**
    * * Field Name: LinkedParameterName
    * * Display Name: Linked Parameter Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Only used when Type=Entity, this is used to link an Entity parameter with another parameter so that the rows in the Entity parameter can be filtered automatically based on the FKEY relationship between the Record and this Entity parameter. For example, if the Entity-based parameter is for an entity like Activities and there is another parameter of type Record for an entity like Contacts, in that situation the Activities Parameter would point to the Contacts parameter as the LinkedParameterName because we would filter down the Activities in each template render to only those linked to the Contact.
    */
    LinkedParameterName: z.string().nullish(),
    /**
    * * Field Name: LinkedParameterField
    * * Display Name: Linked Parameter Field
    * * SQL Data Type: nvarchar(500)
    * * Description: If the LinkedParameterName is specified, this is an optional setting to specify the field within the LinkedParameter that will be used for filtering. This is only needed if there is more than one foreign key relationship between the Entity parameter and the Linked parameter, or if there is no defined foreign key in the database between the two entities.
    */
    LinkedParameterField: z.string().nullish(),
    /**
    * * Field Name: ExtraFilter
    * * Display Name: Extra Filter
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Only used when Type = Entity, used to specify an optional filter to reduce the set of rows that are returned for each of the templates being rendered.
    */
    ExtraFilter: z.string().nullish(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string().nullish(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record ID
    * * SQL Data Type: nvarchar(2000)
    * * Description: Record ID, used only when Type is Record and a specific hardcoded record ID is desired, this is an uncommon use case, helpful for pulling in static types and metadata in some cases.
    */
    RecordID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Template
    * * Display Name: Template
    * * SQL Data Type: nvarchar(255)
    */
    Template: z.string(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string().nullish(),
});

export type TemplateParamEntityType = z.infer<typeof TemplateParamSchema>;
       
/**
 * zod schema definition for the entity Templates
 * * Schema: __mj
 * * Base Table: Template
 * * Base View: vwTemplates
 * * @description Templates are used for dynamic expansion of a static template with data from a given context. Templates can be used to create documents, messages and anything else that requires dynamic document creation merging together static text, data and lightweight logic
 * * Primary Key: ID
 */
export const TemplateSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    * * Description: Name of the template
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Description of the template
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Template Categories (vwTemplateCategories.ID)
    */
    CategoryID: z.string().nullish(),
    /**
    * * Field Name: UserPrompt
    * * Display Name: User Prompt
    * * SQL Data Type: nvarchar(MAX)
    * * Description: This prompt will be used by the AI to generate template content as requested by the user.
    */
    UserPrompt: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: ActiveAt
    * * Display Name: Active At
    * * SQL Data Type: datetime
    * * Description: Optional, if provided, this template will not be available for use until the specified date. Requires IsActive to be set to 1
    */
    ActiveAt: z.date().nullish(),
    /**
    * * Field Name: DisabledAt
    * * Display Name: Disabled At
    * * SQL Data Type: datetime
    * * Description: Optional, if provided, this template will not be available for use after the specified date. If IsActive=0, this has no effect.
    */
    DisabledAt: z.date().nullish(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    * * Description: If set to 0, the template will be disabled regardless of the values in ActiveAt/DisabledAt. 
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Category
    * * Display Name: Category
    * * SQL Data Type: nvarchar(255)
    */
    Category: z.string().nullish(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type TemplateEntityType = z.infer<typeof TemplateSchema>;
       
/**
 * zod schema definition for the entity User Application Entities
 * * Schema: __mj
 * * Base Table: UserApplicationEntity
 * * Base View: vwUserApplicationEntities
 * * Primary Key: ID
 */
export const UserApplicationEntitySchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserApplicationID
    * * Display Name: UserApplication ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User Applications (vwUserApplications.ID)
    */
    UserApplicationID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    */
    Sequence: z.number(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Application
    * * Display Name: Application
    * * SQL Data Type: nvarchar(100)
    */
    Application: z.string(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
});

export type UserApplicationEntityEntityType = z.infer<typeof UserApplicationEntitySchema>;
       
/**
 * zod schema definition for the entity User Applications
 * * Schema: __mj
 * * Base Table: UserApplication
 * * Base View: vwUserApplications
 * * Primary Key: ID
 */
export const UserApplicationSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: ApplicationID
    * * Display Name: Application ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Applications (vwApplications.ID)
    */
    ApplicationID: z.string(),
    /**
    * * Field Name: Sequence
    * * SQL Data Type: int
    * * Default Value: 0
    */
    Sequence: z.number(),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
    /**
    * * Field Name: Application
    * * Display Name: Application
    * * SQL Data Type: nvarchar(100)
    */
    Application: z.string(),
});

export type UserApplicationEntityType = z.infer<typeof UserApplicationSchema>;
       
/**
 * zod schema definition for the entity User Favorites
 * * Schema: __mj
 * * Base Table: UserFavorite
 * * Base View: vwUserFavorites
 * * @description Records that each user can mark as a favorite for easy access
 * * Primary Key: ID
 */
export const UserFavoriteSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    */
    RecordID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: EntityBaseTable
    * * Display Name: Entity Base Table
    * * SQL Data Type: nvarchar(255)
    */
    EntityBaseTable: z.string(),
    /**
    * * Field Name: EntityBaseView
    * * Display Name: Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    EntityBaseView: z.string(),
});

export type UserFavoriteEntityType = z.infer<typeof UserFavoriteSchema>;
       
/**
 * zod schema definition for the entity User Notifications
 * * Schema: __mj
 * * Base Table: UserNotification
 * * Base View: vwUserNotifications
 * * Primary Key: ID
 */
export const UserNotificationSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: Title
    * * Display Name: Title
    * * SQL Data Type: nvarchar(255)
    */
    Title: z.string().nullish(),
    /**
    * * Field Name: Message
    * * Display Name: Message
    * * SQL Data Type: nvarchar(MAX)
    */
    Message: z.string().nullish(),
    /**
    * * Field Name: ResourceTypeID
    * * Display Name: Resource Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)
    */
    ResourceTypeID: z.string().nullish(),
    /**
    * * Field Name: ResourceRecordID
    * * Display Name: Resource Record ID
    * * SQL Data Type: int
    */
    ResourceRecordID: z.number().nullish(),
    /**
    * * Field Name: ResourceConfiguration
    * * Display Name: Resource Configuration
    * * SQL Data Type: nvarchar(MAX)
    */
    ResourceConfiguration: z.string().nullish(),
    /**
    * * Field Name: Unread
    * * Display Name: Unread
    * * SQL Data Type: bit
    * * Default Value: 1
    */
    Unread: z.boolean(),
    /**
    * * Field Name: ReadAt
    * * Display Name: Read At
    * * SQL Data Type: datetime
    */
    ReadAt: z.date().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
    /**
    * * Field Name: ResourceType
    * * Display Name: Resource Type
    * * SQL Data Type: nvarchar(255)
    */
    ResourceType: z.string().nullish(),
});

export type UserNotificationEntityType = z.infer<typeof UserNotificationSchema>;
       
/**
 * zod schema definition for the entity User Record Logs
 * * Schema: __mj
 * * Base Table: UserRecordLog
 * * Base View: vwUserRecordLogs
 * * Primary Key: ID
 */
export const UserRecordLogSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    */
    RecordID: z.string(),
    /**
    * * Field Name: EarliestAt
    * * Display Name: Earliest At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    EarliestAt: z.date(),
    /**
    * * Field Name: LatestAt
    * * Display Name: Latest At
    * * SQL Data Type: datetime
    * * Default Value: getdate()
    */
    LatestAt: z.date(),
    /**
    * * Field Name: TotalCount
    * * Display Name: Total Count
    * * SQL Data Type: int
    * * Default Value: 0
    */
    TotalCount: z.number(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: UserName
    * * Display Name: User Name
    * * SQL Data Type: nvarchar(100)
    */
    UserName: z.string(),
    /**
    * * Field Name: UserFirstLast
    * * Display Name: User First Last
    * * SQL Data Type: nvarchar(101)
    */
    UserFirstLast: z.string().nullish(),
    /**
    * * Field Name: UserEmail
    * * Display Name: User Email
    * * SQL Data Type: nvarchar(100)
    */
    UserEmail: z.string(),
    /**
    * * Field Name: UserSupervisor
    * * Display Name: User Supervisor
    * * SQL Data Type: nvarchar(81)
    */
    UserSupervisor: z.string().nullish(),
    /**
    * * Field Name: UserSupervisorEmail
    * * Display Name: User Supervisor Email
    * * SQL Data Type: nvarchar(100)
    */
    UserSupervisorEmail: z.string().nullish(),
});

export type UserRecordLogEntityType = z.infer<typeof UserRecordLogSchema>;
       
/**
 * zod schema definition for the entity User Roles
 * * Schema: __mj
 * * Base Table: UserRole
 * * Base View: vwUserRoles
 * * Primary Key: ID
 */
export const UserRoleSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: RoleID
    * * Display Name: Role ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Roles (vwRoles.ID)
    */
    RoleID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
    /**
    * * Field Name: Role
    * * Display Name: Role
    * * SQL Data Type: nvarchar(50)
    */
    Role: z.string(),
});

export type UserRoleEntityType = z.infer<typeof UserRoleSchema>;
       
/**
 * zod schema definition for the entity User View Categories
 * * Schema: __mj
 * * Base Table: UserViewCategory
 * * Base View: vwUserViewCategories
 * * Primary Key: ID
 */
export const UserViewCategorySchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: ParentID
    * * Display Name: Parent ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User View Categories (vwUserViewCategories.ID)
    */
    ParentID: z.string().nullish(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Parent
    * * Display Name: Parent
    * * SQL Data Type: nvarchar(100)
    */
    Parent: z.string().nullish(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type UserViewCategoryEntityType = z.infer<typeof UserViewCategorySchema>;
       
/**
 * zod schema definition for the entity User View Run Details
 * * Schema: __mj
 * * Base Table: UserViewRunDetail
 * * Base View: vwUserViewRunDetails
 * * @description Tracks the set of records that were included in each run of a given user view.
 * * Primary Key: ID
 */
export const UserViewRunDetailSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserViewRunID
    * * Display Name: User View Run ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User View Runs (vwUserViewRuns.ID)
    */
    UserViewRunID: z.string(),
    /**
    * * Field Name: RecordID
    * * Display Name: Record
    * * SQL Data Type: nvarchar(450)
    */
    RecordID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: UserViewID
    * * Display Name: User View
    * * SQL Data Type: uniqueidentifier
    */
    UserViewID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity
    * * SQL Data Type: uniqueidentifier
    */
    EntityID: z.string(),
});

export type UserViewRunDetailEntityType = z.infer<typeof UserViewRunDetailSchema>;
       
/**
 * zod schema definition for the entity User View Runs
 * * Schema: __mj
 * * Base Table: UserViewRun
 * * Base View: vwUserViewRuns
 * * @description User Views can be logged when run to capture the date and user that ran the view as well as the output results.
 * * Primary Key: ID
 */
export const UserViewRunSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserViewID
    * * Display Name: User View ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User Views (vwUserViews.ID)
    */
    UserViewID: z.string(),
    /**
    * * Field Name: RunAt
    * * Display Name: Run At
    * * SQL Data Type: datetime
    */
    RunAt: z.date(),
    /**
    * * Field Name: RunByUserID
    * * Display Name: Run By User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    RunByUserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: UserView
    * * Display Name: User View
    * * SQL Data Type: nvarchar(100)
    */
    UserView: z.string(),
    /**
    * * Field Name: RunByUser
    * * Display Name: Run By User
    * * SQL Data Type: nvarchar(100)
    */
    RunByUser: z.string(),
});

export type UserViewRunEntityType = z.infer<typeof UserViewRunSchema>;
       
/**
 * zod schema definition for the entity User Views
 * * Schema: __mj
 * * Base Table: UserView
 * * Base View: vwUserViews
 * * @description Views are sets of records within a given entity defined by filtering rules. Views can be used programatically to retrieve dynamic sets of data and in user interfaces like MJ Explorer for end-user consumption.
 * * Primary Key: ID
 */
export const UserViewSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: EntityID
    * * Display Name: Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    EntityID: z.string(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: CategoryID
    * * Display Name: Category ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: User View Categories (vwUserViewCategories.ID)
    */
    CategoryID: z.string().nullish(),
    /**
    * * Field Name: IsShared
    * * Display Name: Is Shared
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsShared: z.boolean(),
    /**
    * * Field Name: IsDefault
    * * Display Name: Is Default
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsDefault: z.boolean(),
    /**
    * * Field Name: GridState
    * * Display Name: Grid State
    * * SQL Data Type: nvarchar(MAX)
    */
    GridState: z.string().nullish(),
    /**
    * * Field Name: FilterState
    * * Display Name: Filter State
    * * SQL Data Type: nvarchar(MAX)
    */
    FilterState: z.string().nullish(),
    /**
    * * Field Name: CustomFilterState
    * * Display Name: Custom Filter State
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    CustomFilterState: z.boolean(),
    /**
    * * Field Name: SmartFilterEnabled
    * * Display Name: Smart Filter Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    SmartFilterEnabled: z.boolean(),
    /**
    * * Field Name: SmartFilterPrompt
    * * Display Name: Smart Filter Prompt
    * * SQL Data Type: nvarchar(MAX)
    */
    SmartFilterPrompt: z.string().nullish(),
    /**
    * * Field Name: SmartFilterWhereClause
    * * Display Name: Smart Filter Where Clause
    * * SQL Data Type: nvarchar(MAX)
    */
    SmartFilterWhereClause: z.string().nullish(),
    /**
    * * Field Name: SmartFilterExplanation
    * * Display Name: Smart Filter Explanation
    * * SQL Data Type: nvarchar(MAX)
    */
    SmartFilterExplanation: z.string().nullish(),
    /**
    * * Field Name: WhereClause
    * * Display Name: Where Clause
    * * SQL Data Type: nvarchar(MAX)
    */
    WhereClause: z.string().nullish(),
    /**
    * * Field Name: CustomWhereClause
    * * Display Name: Custom Where Clause
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    CustomWhereClause: z.boolean(),
    /**
    * * Field Name: SortState
    * * Display Name: Sort State
    * * SQL Data Type: nvarchar(MAX)
    */
    SortState: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: UserName
    * * Display Name: User Name
    * * SQL Data Type: nvarchar(100)
    */
    UserName: z.string(),
    /**
    * * Field Name: UserFirstLast
    * * Display Name: User First Last
    * * SQL Data Type: nvarchar(101)
    */
    UserFirstLast: z.string().nullish(),
    /**
    * * Field Name: UserEmail
    * * Display Name: User Email
    * * SQL Data Type: nvarchar(100)
    */
    UserEmail: z.string(),
    /**
    * * Field Name: UserType
    * * Display Name: User Type
    * * SQL Data Type: nchar(15)
    */
    UserType: z.string(),
    /**
    * * Field Name: Entity
    * * Display Name: Entity
    * * SQL Data Type: nvarchar(255)
    */
    Entity: z.string(),
    /**
    * * Field Name: EntityBaseView
    * * Display Name: Entity Base View
    * * SQL Data Type: nvarchar(255)
    */
    EntityBaseView: z.string(),
});

export type UserViewEntityType = z.infer<typeof UserViewSchema>;
       
/**
 * zod schema definition for the entity Users
 * * Schema: __mj
 * * Base Table: User
 * * Base View: vwUsers
 * * @description A list of all users who have or had access to the system
 * * Primary Key: ID
 */
export const UserSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: FirstName
    * * Display Name: First Name
    * * SQL Data Type: nvarchar(50)
    */
    FirstName: z.string().nullish(),
    /**
    * * Field Name: LastName
    * * Display Name: Last Name
    * * SQL Data Type: nvarchar(50)
    */
    LastName: z.string().nullish(),
    /**
    * * Field Name: Title
    * * Display Name: Title
    * * SQL Data Type: nvarchar(50)
    */
    Title: z.string().nullish(),
    /**
    * * Field Name: Email
    * * SQL Data Type: nvarchar(100)
    */
    Email: z.string(),
    /**
    * * Field Name: Type
    * * SQL Data Type: nchar(15)
    * * Value List Type: List
    * * Possible Values 
    *   * User
    *   * Owner
    */
    Type: z.union([z.literal('User'), z.literal('Owner')]),
    /**
    * * Field Name: IsActive
    * * Display Name: Is Active
    * * SQL Data Type: bit
    * * Default Value: 0
    */
    IsActive: z.boolean(),
    /**
    * * Field Name: LinkedRecordType
    * * Display Name: Linked Record Type
    * * SQL Data Type: nchar(10)
    * * Default Value: None
    */
    LinkedRecordType: z.string(),
    /**
    * * Field Name: LinkedEntityID
    * * Display Name: Linked Entity ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Entities (vwEntities.ID)
    */
    LinkedEntityID: z.string().nullish(),
    /**
    * * Field Name: LinkedEntityRecordID
    * * Display Name: Linked Entity Record ID
    * * SQL Data Type: nvarchar(450)
    */
    LinkedEntityRecordID: z.string().nullish(),
    /**
    * * Field Name: EmployeeID
    * * Display Name: Employee
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Employees (vwEmployees.ID)
    */
    EmployeeID: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: __mj _Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: __mj _Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: FirstLast
    * * Display Name: First Last
    * * SQL Data Type: nvarchar(101)
    */
    FirstLast: z.string().nullish(),
    /**
    * * Field Name: EmployeeFirstLast
    * * Display Name: Employee First Last
    * * SQL Data Type: nvarchar(81)
    */
    EmployeeFirstLast: z.string().nullish(),
    /**
    * * Field Name: EmployeeEmail
    * * Display Name: Employee Email
    * * SQL Data Type: nvarchar(100)
    */
    EmployeeEmail: z.string().nullish(),
    /**
    * * Field Name: EmployeeTitle
    * * Display Name: Employee Title
    * * SQL Data Type: nvarchar(50)
    */
    EmployeeTitle: z.string().nullish(),
    /**
    * * Field Name: EmployeeSupervisor
    * * Display Name: Employee Supervisor
    * * SQL Data Type: nvarchar(81)
    */
    EmployeeSupervisor: z.string().nullish(),
    /**
    * * Field Name: EmployeeSupervisorEmail
    * * Display Name: Employee Supervisor Email
    * * SQL Data Type: nvarchar(100)
    */
    EmployeeSupervisorEmail: z.string().nullish(),
});

export type UserEntityType = z.infer<typeof UserSchema>;
       
/**
 * zod schema definition for the entity Vector Databases
 * * Schema: __mj
 * * Base Table: VectorDatabase
 * * Base View: vwVectorDatabases
 * * Primary Key: ID
 */
export const VectorDatabaseSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: DefaultURL
    * * Display Name: Default URL
    * * SQL Data Type: nvarchar(255)
    */
    DefaultURL: z.string().nullish(),
    /**
    * * Field Name: ClassKey
    * * Display Name: Class Key
    * * SQL Data Type: nvarchar(100)
    */
    ClassKey: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type VectorDatabaseEntityType = z.infer<typeof VectorDatabaseSchema>;
       
/**
 * zod schema definition for the entity Vector Indexes
 * * Schema: __mj
 * * Base Table: VectorIndex
 * * Base View: vwVectorIndexes
 * * Primary Key: ID
 */
export const VectorIndexSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: VectorDatabaseID
    * * Display Name: Vector Database ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Vector Databases (vwVectorDatabases.ID)
    */
    VectorDatabaseID: z.string(),
    /**
    * * Field Name: EmbeddingModelID
    * * Display Name: Embedding Model ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: AI Models (vwAIModels.ID)
    */
    EmbeddingModelID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: VectorDatabase
    * * Display Name: Vector Database
    * * SQL Data Type: nvarchar(100)
    */
    VectorDatabase: z.string(),
    /**
    * * Field Name: EmbeddingModel
    * * Display Name: Embedding Model
    * * SQL Data Type: nvarchar(50)
    */
    EmbeddingModel: z.string(),
});

export type VectorIndexEntityType = z.infer<typeof VectorIndexSchema>;
       
/**
 * zod schema definition for the entity Version Installations
 * * Schema: __mj
 * * Base Table: VersionInstallation
 * * Base View: vwVersionInstallations
 * * Primary Key: ID
 */
export const VersionInstallationSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: MajorVersion
    * * Display Name: Major Version
    * * SQL Data Type: int
    */
    MajorVersion: z.number(),
    /**
    * * Field Name: MinorVersion
    * * Display Name: Minor Version
    * * SQL Data Type: int
    */
    MinorVersion: z.number(),
    /**
    * * Field Name: PatchVersion
    * * Display Name: Patch Version
    * * SQL Data Type: int
    */
    PatchVersion: z.number(),
    /**
    * * Field Name: Type
    * * Display Name: Type
    * * SQL Data Type: nvarchar(20)
    * * Default Value: System
    * * Value List Type: List
    * * Possible Values 
    *   * New
    *   * Upgrade
    * * Description: What type of installation was applied
    */
    Type: z.union([z.literal('New'), z.literal('Upgrade')]).nullish(),
    /**
    * * Field Name: InstalledAt
    * * Display Name: Installed At
    * * SQL Data Type: datetime
    */
    InstalledAt: z.date(),
    /**
    * * Field Name: Status
    * * Display Name: Status
    * * SQL Data Type: nvarchar(20)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * In Progress
    *   * Complete
    *   * Failed
    * * Description: Pending, Complete, Failed
    */
    Status: z.union([z.literal('Pending'), z.literal('In Progress'), z.literal('Complete'), z.literal('Failed')]),
    /**
    * * Field Name: InstallLog
    * * Display Name: Install Log
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Any logging that was saved from the installation process
    */
    InstallLog: z.string().nullish(),
    /**
    * * Field Name: Comments
    * * Display Name: Comments
    * * SQL Data Type: nvarchar(MAX)
    * * Description: Optional, comments the administrator wants to save for each installed version
    */
    Comments: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: CompleteVersion
    * * Display Name: Complete Version
    * * SQL Data Type: nvarchar(302)
    */
    CompleteVersion: z.string().nullish(),
});

export type VersionInstallationEntityType = z.infer<typeof VersionInstallationSchema>;
       
/**
 * zod schema definition for the entity Workflow Engines
 * * Schema: __mj
 * * Base Table: WorkflowEngine
 * * Base View: vwWorkflowEngines
 * * Primary Key: ID
 */
export const WorkflowEngineSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: DriverPath
    * * Display Name: Driver Path
    * * SQL Data Type: nvarchar(500)
    */
    DriverPath: z.string(),
    /**
    * * Field Name: DriverClass
    * * Display Name: Driver Class
    * * SQL Data Type: nvarchar(100)
    */
    DriverClass: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
});

export type WorkflowEngineEntityType = z.infer<typeof WorkflowEngineSchema>;
       
/**
 * zod schema definition for the entity Workflow Runs
 * * Schema: __mj
 * * Base Table: WorkflowRun
 * * Base View: vwWorkflowRuns
 * * Primary Key: ID
 */
export const WorkflowRunSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: WorkflowID
    * * Display Name: Workflow ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Workflows (vwWorkflows.ID)
    */
    WorkflowID: z.string(),
    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record
    * * SQL Data Type: nvarchar(500)
    */
    ExternalSystemRecordID: z.string(),
    /**
    * * Field Name: StartedAt
    * * Display Name: Started At
    * * SQL Data Type: datetime
    */
    StartedAt: z.date(),
    /**
    * * Field Name: EndedAt
    * * Display Name: Ended At
    * * SQL Data Type: datetime
    */
    EndedAt: z.date().nullish(),
    /**
    * * Field Name: Status
    * * SQL Data Type: nchar(10)
    * * Default Value: Pending
    * * Value List Type: List
    * * Possible Values 
    *   * Pending
    *   * In Progress
    *   * Complete
    *   * Failed
    */
    Status: z.union([z.literal('Pending'), z.literal('In Progress'), z.literal('Complete'), z.literal('Failed')]),
    /**
    * * Field Name: Results
    * * SQL Data Type: nvarchar(MAX)
    */
    Results: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Workflow
    * * Display Name: Workflow
    * * SQL Data Type: nvarchar(100)
    */
    Workflow: z.string(),
    /**
    * * Field Name: WorkflowEngineName
    * * Display Name: Workflow Engine Name
    * * SQL Data Type: nvarchar(100)
    */
    WorkflowEngineName: z.string(),
});

export type WorkflowRunEntityType = z.infer<typeof WorkflowRunSchema>;
       
/**
 * zod schema definition for the entity Workflows
 * * Schema: __mj
 * * Base Table: Workflow
 * * Base View: vwWorkflows
 * * Primary Key: ID
 */
export const WorkflowSchema = z.object({
    /**
    * * Field Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * SQL Data Type: nvarchar(100)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: WorkflowEngineID
    * * Display Name: Workflow Engine ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Workflow Engines (vwWorkflowEngines.ID)
    */
    WorkflowEngineID: z.string(),
    /**
    * * Field Name: ExternalSystemRecordID
    * * Display Name: External System Record
    * * SQL Data Type: nvarchar(100)
    */
    ExternalSystemRecordID: z.string(),
    /**
    * * Field Name: AutoRunEnabled
    * * Display Name: Auto Run Enabled
    * * SQL Data Type: bit
    * * Default Value: 0
    * * Description: If set to 1, the workflow will be run automatically on the interval specified by the AutoRunIntervalType and AutoRunInterval fields
    */
    AutoRunEnabled: z.boolean(),
    /**
    * * Field Name: AutoRunIntervalUnits
    * * Display Name: Auto Run Interval Units
    * * SQL Data Type: nvarchar(20)
    * * Value List Type: List
    * * Possible Values 
    *   * Years
    *   * Months
    *   * Weeks
    *   * Days
    *   * Hours
    *   * Minutes
    * * Description: Minutes, Hours, Days, Weeks, Months, Years
    */
    AutoRunIntervalUnits: z.union([z.literal('Years'), z.literal('Months'), z.literal('Weeks'), z.literal('Days'), z.literal('Hours'), z.literal('Minutes')]).nullish(),
    /**
    * * Field Name: AutoRunInterval
    * * Display Name: Auto Run Interval
    * * SQL Data Type: int
    * * Description: The interval, denominated in the units specified in the AutoRunIntervalUnits column, between auto runs of this workflow.
    */
    AutoRunInterval: z.number().nullish(),
    /**
    * * Field Name: SubclassName
    * * Display Name: Subclass Name
    * * SQL Data Type: nvarchar(200)
    * * Description: If specified, this subclass key, via the ClassFactory, will be instantiated, to execute this workflow. If not specified the WorkflowBase class will be used by default.
    */
    SubclassName: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: AutoRunIntervalMinutes
    * * Display Name: Auto Run Interval Minutes
    * * SQL Data Type: int
    */
    AutoRunIntervalMinutes: z.number().nullish(),
});

export type WorkflowEntityType = z.infer<typeof WorkflowSchema>;
       
/**
 * zod schema definition for the entity Workspace Items
 * * Schema: __mj
 * * Base Table: WorkspaceItem
 * * Base View: vwWorkspaceItems
 * * @description Tracks the resources that are active within a given worksapce
 * * Primary Key: ID
 */
export const WorkspaceItemSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: WorkspaceID
    * * Display Name: Workspace ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Workspaces (vwWorkspaces.ID)
    */
    WorkspaceID: z.string(),
    /**
    * * Field Name: ResourceTypeID
    * * Display Name: Resource Type ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Resource Types (vwResourceTypes.ID)
    */
    ResourceTypeID: z.string(),
    /**
    * * Field Name: ResourceRecordID
    * * Display Name: Resource Record ID
    * * SQL Data Type: nvarchar(2000)
    */
    ResourceRecordID: z.string().nullish(),
    /**
    * * Field Name: Sequence
    * * Display Name: Sequence
    * * SQL Data Type: int
    */
    Sequence: z.number(),
    /**
    * * Field Name: Configuration
    * * Display Name: Configuration
    * * SQL Data Type: nvarchar(MAX)
    */
    Configuration: z.string().nullish(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: Workspace
    * * Display Name: Workspace
    * * SQL Data Type: nvarchar(255)
    */
    Workspace: z.string(),
    /**
    * * Field Name: ResourceType
    * * Display Name: Resource Type
    * * SQL Data Type: nvarchar(255)
    */
    ResourceType: z.string(),
});

export type WorkspaceItemEntityType = z.infer<typeof WorkspaceItemSchema>;
       
/**
 * zod schema definition for the entity Workspaces
 * * Schema: __mj
 * * Base Table: Workspace
 * * Base View: vwWorkspaces
 * * @description A user can have one or more workspaces
 * * Primary Key: ID
 */
export const WorkspaceSchema = z.object({
    /**
    * * Field Name: ID
    * * Display Name: ID
    * * SQL Data Type: uniqueidentifier
    * * Default Value: newsequentialid()
    */
    ID: z.string(),
    /**
    * * Field Name: Name
    * * Display Name: Name
    * * SQL Data Type: nvarchar(255)
    */
    Name: z.string(),
    /**
    * * Field Name: Description
    * * Display Name: Description
    * * SQL Data Type: nvarchar(MAX)
    */
    Description: z.string().nullish(),
    /**
    * * Field Name: UserID
    * * Display Name: User ID
    * * SQL Data Type: uniqueidentifier
    * * Related Entity/Foreign Key: Users (vwUsers.ID)
    */
    UserID: z.string(),
    /**
    * * Field Name: __mj_CreatedAt
    * * Display Name: Created At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_CreatedAt: z.date(),
    /**
    * * Field Name: __mj_UpdatedAt
    * * Display Name: Updated At
    * * SQL Data Type: datetimeoffset
    * * Default Value: getutcdate()
    */
    __mj_UpdatedAt: z.date(),
    /**
    * * Field Name: User
    * * Display Name: User
    * * SQL Data Type: nvarchar(100)
    */
    User: z.string(),
});

export type WorkspaceEntityType = z.infer<typeof WorkspaceSchema>;
