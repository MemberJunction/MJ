import { StateFile } from '../types/state-file';

export interface SQLGeneratorOptions {
  approvedOnly?: boolean;
  confidenceThreshold?: number;
}

/**
 * Generate SQL scripts with sp_addextendedproperty statements
 */
export class SQLGenerator {
  generate(state: StateFile, options: SQLGeneratorOptions = {}): string {
    const lines: string[] = [];

    lines.push('-- Generated by SQL Server Documentation Generator');
    lines.push(`-- Database: ${state.database.server}.${state.database.database}`);
    lines.push(`-- Generated: ${new Date().toISOString()}`);
    lines.push('');
    lines.push('BEGIN TRANSACTION;');
    lines.push('');

    let count = 0;

    for (const [schemaName, schema] of Object.entries(state.schemas)) {
      for (const [tableName, table] of Object.entries(schema.tables)) {
        // Skip if not approved (when approvedOnly is true)
        if (options.approvedOnly && !table.userApproved) {
          continue;
        }

        // Skip if confidence too low
        if (options.confidenceThreshold && table.aiGenerated) {
          if (table.aiGenerated.confidence < options.confidenceThreshold) {
            continue;
          }
        }

        // Table description
        if (table.finalDescription) {
          lines.push(this.generateTableProperty(schemaName, tableName, table.finalDescription));
          count++;
        }

        // Column descriptions
        for (const [columnName, column] of Object.entries(table.columns)) {
          // Skip if confidence too low
          if (options.confidenceThreshold && column.aiGenerated) {
            if (column.aiGenerated.confidence < options.confidenceThreshold) {
              continue;
            }
          }

          if (column.finalDescription) {
            lines.push(
              this.generateColumnProperty(schemaName, tableName, columnName, column.finalDescription)
            );
            count++;
          }
        }

        lines.push('');
      }
    }

    lines.push('COMMIT TRANSACTION;');
    lines.push('');
    lines.push(`-- Total properties: ${count}`);

    return lines.join('\n');
  }

  /**
   * Generate sp_addextendedproperty for table
   */
  private generateTableProperty(schema: string, table: string, description: string): string {
    const escapedDesc = description.replace(/'/g, "''");

    return `
-- ${schema}.${table}
EXEC sp_addextendedproperty
  @name = N'MS_Description',
  @value = N'${escapedDesc}',
  @level0type = N'SCHEMA', @level0name = N'${schema}',
  @level1type = N'TABLE', @level1name = N'${table}';`;
  }

  /**
   * Generate sp_addextendedproperty for column
   */
  private generateColumnProperty(
    schema: string,
    table: string,
    column: string,
    description: string
  ): string {
    const escapedDesc = description.replace(/'/g, "''");

    return `
EXEC sp_addextendedproperty
  @name = N'MS_Description',
  @value = N'${escapedDesc}',
  @level0type = N'SCHEMA', @level0name = N'${schema}',
  @level1type = N'TABLE', @level1name = N'${table}',
  @level2type = N'COLUMN', @level2name = N'${column}';`;
  }
}
