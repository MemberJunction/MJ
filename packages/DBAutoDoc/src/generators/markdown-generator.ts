import { StateFile } from '../types/state-file';

/**
 * Generate Markdown documentation
 */
export class MarkdownGenerator {
  generate(state: StateFile): string {
    const lines: string[] = [];

    lines.push(`# Database Documentation: ${state.database.database}`);
    lines.push('');
    lines.push(`**Server**: ${state.database.server}`);
    lines.push(`**Generated**: ${new Date().toISOString()}`);
    lines.push('');

    if (state.seedContext) {
      lines.push('## Overview');
      if (state.seedContext.overallPurpose) {
        lines.push(state.seedContext.overallPurpose);
      }
      if (state.seedContext.businessDomains) {
        lines.push('');
        lines.push('**Business Domains**: ' + state.seedContext.businessDomains.join(', '));
      }
      lines.push('');
    }

    lines.push('## Schemas');
    lines.push('');

    for (const [schemaName, schema] of Object.entries(state.schemas)) {
      lines.push(`### ${schemaName}`);
      lines.push('');

      if (schema.description) {
        lines.push(schema.description);
        lines.push('');
      }

      if (schema.businessDomain) {
        lines.push(`**Domain**: ${schema.businessDomain}`);
        lines.push('');
      }

      lines.push('#### Tables');
      lines.push('');

      for (const [tableName, table] of Object.entries(schema.tables)) {
        lines.push(`##### ${tableName}`);
        lines.push('');

        if (table.finalDescription) {
          lines.push(table.finalDescription);
          lines.push('');
        }

        if (table.aiGenerated?.businessDomain) {
          lines.push(`**Domain**: ${table.aiGenerated.businessDomain}`);
          lines.push('');
        }

        if (table.userNotes) {
          lines.push(`**Notes**: ${table.userNotes}`);
          lines.push('');
        }

        // Columns table
        const hasColumns = Object.keys(table.columns).length > 0;
        if (hasColumns) {
          lines.push('**Columns**:');
          lines.push('');
          lines.push('| Column | Description |');
          lines.push('|--------|-------------|');

          for (const [columnName, column] of Object.entries(table.columns)) {
            const desc = column.finalDescription || '';
            lines.push(`| ${columnName} | ${desc} |`);
          }

          lines.push('');
        }

        // Relationships
        if (table.aiGenerated?.relationships && table.aiGenerated.relationships.length > 0) {
          lines.push('**Relationships**:');
          lines.push('');

          for (const rel of table.aiGenerated.relationships) {
            lines.push(`- ${rel.type === 'parent' ? '→' : '←'} ${rel.table}: ${rel.description}`);
          }

          lines.push('');
        }
      }
    }

    // Statistics
    lines.push('---');
    lines.push('');
    lines.push('## Statistics');
    lines.push('');

    const totalSchemas = Object.keys(state.schemas).length;
    const totalTables = Object.values(state.schemas).reduce(
      (sum, s) => sum + Object.keys(s.tables).length,
      0
    );
    const totalColumns = Object.values(state.schemas).reduce(
      (sum, s) =>
        sum + Object.values(s.tables).reduce((s2, t) => s2 + Object.keys(t.columns).length, 0),
      0
    );

    lines.push(`- **Schemas**: ${totalSchemas}`);
    lines.push(`- **Tables**: ${totalTables}`);
    lines.push(`- **Columns**: ${totalColumns}`);

    if (state.runHistory.length > 0) {
      const lastRun = state.runHistory[state.runHistory.length - 1];
      lines.push('');
      lines.push(`**Last Run**: ${lastRun.timestamp}`);
      if (lastRun.tokensUsed) {
        lines.push(`**Tokens Used**: ${lastRun.tokensUsed.toLocaleString()}`);
      }
    }

    lines.push('');
    lines.push('---');
    lines.push('*Generated by SQL Server Documentation Generator*');

    return lines.join('\n');
  }
}
