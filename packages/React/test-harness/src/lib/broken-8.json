{
  "title": "Deals Kanban Board",
  "type": "kanban",
  "name": "DealsKanbanBoard",
  "userExplanation": "A visual Kanban board that displays your deals as cards, allowing you to view and move them across stages.",
  "functionalRequirements": "- Display deals as cards on columns representing deal stages (e.g., New, Qualified, Proposal, Closed).\n- Show key deal information on each card: DealName, Amount, Owner (derived from OwnerID), and expected CloseDate.\n- Drag‑and‑drop support to move cards between stage columns, automatically updating the deal Stage.\n- Simple filter panel to narrow cards by Owner, Amount range, or CloseDate.\n- Responsive layout for desktop and tablet screens.\n- Basic search to locate a specific deal by DealName.",
  "dataRequirements": {
    "mode": "views",
    "description": "Data needed for Deals Kanban board component",
    "entities": [
      {
        "name": "Deals",
        "description": "Sales opportunities and deals in various stages of the sales pipeline",
        "displayFields": [
          "DealName",
          "Amount",
          "Stage",
          "CloseDate",
          "OwnerID"
        ],
        "filterFields": [
          "Stage",
          "OwnerID",
          "Amount",
          "CloseDate"
        ],
        "sortFields": [
          "Stage",
          "CloseDate"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": true,
            "type": "int",
            "allowsNull": false,
            "isPrimaryKey": true
          },
          {
            "name": "DealName",
            "sequence": 2,
            "defaultInView": false,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false
          },
          {
            "name": "Amount",
            "sequence": 6,
            "defaultInView": false,
            "type": "decimal",
            "allowsNull": true,
            "isPrimaryKey": false
          },
          {
            "name": "Stage",
            "sequence": 5,
            "defaultInView": false,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false
          },
          {
            "name": "CloseDate",
            "sequence": 9,
            "defaultInView": false,
            "type": "date",
            "allowsNull": true,
            "isPrimaryKey": false
          },
          {
            "name": "OwnerID",
            "sequence": 16,
            "defaultInView": false,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false
          }
        ],
        "usageContext": "Kanban board display of deals",
        "permissionLevelNeeded": [
          "read"
        ]
      }
    ]
  },
  "description": "A visual Kanban board that displays your deals as cards, allowing you to view and move them across stages.",
  "location": "embedded",
  "exampleUsage": "<DealsKanbanBoard\n  initialFilters={{ ownerId: null, amountRange: [0, 1000000], closeDate: null }}\n  onDealStageChange={(dealId, newStage) => console.log('Stage changed', dealId, newStage)}\n  onFilterChange={(filters) => console.log('Filters', filters)}\n/>",
  "technicalDesign": "## Component Architecture\n- **Root Component**: `DealsKanbanBoard`\n  - Receives optional initial filter/search props from the parent application.\n  - Calls MemberJunction **Views** to fetch `Deals` data (fields defined in `dataRequirements`).\n  - Manages overall layout using **Ant Design** Grid and **SortableJS** for drag‑and‑drop.\n  - Passes filtered/sorted deal list to child components.\n  - Emits callbacks:\n    - `onDealStageChange(dealId, newStage)` – invoked after a card is dropped into a different column, persists the new stage via a view update.\n    - `onFilterChange(filters)` – when the filter panel changes.\n    - `onSearch(searchTerm)` – when the search input changes.\n\n- **Child Components**:\n  1. `KanbanColumn`\n     - Renders a single stage column; uses `SortableJS` container to allow cards to be reordered or moved across columns.\n     - Props: `stageName`, `deals` (array of deal objects for this stage), `onCardDrop` callback.\n  2. `KanbanCard`\n     - Displays deal fields: `DealName`, `Amount`, `OwnerID` (resolved to owner name via a lookup view), `CloseDate`.\n     - Props: `deal` object, `onClick` to select/focus.\n  3. `DealsFilterPanel`\n     - UI for filtering by Owner, Amount range, CloseDate, and stage.\n     - Uses Ant Design `Select`, `InputNumber`, `DatePicker`.\n     - Props: `filters`, `onFilterChange`.\n  4. `DealsSearchBar`\n     - Simple search input for `DealName`.\n     - Props: `searchTerm`, `onSearch`.\n\n- **State Management**\n  - Each component owns its UI state (`selectedCardId`, open dropdowns, etc.) using React `useState`.\n  - Root component keeps *derived* state: filteredDeals, currentSearchTerm.\n  - All persistent changes are bubbled up through callbacks.\n\n- **Data Flow**\n  1. Root component fetches full deal list via MemberJunction view.\n  2. `DealsFilterPanel` updates filter state → root recomputes `filteredDeals`.\n  3. `DealsSearchBar` updates `searchTerm` → root filters further.\n  4. `KanbanColumn` renders its slice of `filteredDeals` based on `Stage`.\n  5. Drag‑and‑drop within `SortableJS` triggers `onCardDrop` → root updates the deal's `Stage` via a view update and emits `onDealStageChange`.\n\n- **Libraries**\n  - **antd** – UI components (Grid, Card, Select, DatePicker, InputNumber).\n  - **sortablejs** – drag‑and‑drop handling for Kanban columns.\n  - **lodash** – utility functions for grouping, sorting, deep cloning.\n\n- **Performance & Responsiveness**\n  - Columns use CSS Flexbox with breakpoints; on tablets columns wrap.\n  - Lazy loading of owner lookups; optional memoization via `useMemo`.\n  - Minimal re‑renders by memoizing `KanbanColumn` and `KanbanCard`.\n\n---\n### Dependencies\n- `KanbanColumn`\n- `KanbanCard`\n- `DealsFilterPanel`\n- `DealsSearchBar`\n---",
  "libraries": [
    {
      "name": "antd",
      "globalVariable": "antd",
      "version": "^5.20.2"
    },
    {
      "name": "lodash",
      "globalVariable": "_",
      "version": "^4.17.21"
    },
    {}
  ],
  "dependencies": [
    {
      "name": "KanbanColumn",
      "location": "embedded",
      "code": "function KanbanColumn({\n  stageName,\n  deals,\n  onCardDrop,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  // Unwrap Ant Design Card component\n  const { Card } = unwrapComponents(antd, ['Card']);\n  // Get child component for rendering each deal\n  const { KanbanCard } = components;\n\n  const columnRef = useRef(null);\n\n  // Initialize SortableJS on the column container\n  useEffect(() => {\n    if (!columnRef.current) return;\n    const sortable = new Sortable(columnRef.current, {\n      group: 'kanban',\n      animation: 150,\n      // When a drag ends, notify parent about the new stage\n      onEnd: (evt) => {\n        const itemEl = evt.item;\n        const dealId = Number(itemEl.dataset.id);\n        if (!isNaN(dealId)) {\n          onCardDrop?.(dealId, stageName);\n        }\n      }\n    });\n    return () => {\n      sortable.destroy();\n    };\n  }, [stageName, onCardDrop, deals]);\n\n  return (\n    <Card\n      title={stageName}\n      style={{\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n        borderRadius: styles?.borders?.radius?.md || '4px'\n      }}\n      bodyStyle={{ padding: 0, flex: 1, overflowY: 'auto' }}\n    >\n      <div\n        ref={columnRef}\n        style={{\n          minHeight: '100px',\n          padding: styles?.spacing?.md || '8px'\n        }}\n      >\n        {deals.map((deal) => (\n          <div key={deal.ID} data-id={deal.ID} style={{ marginBottom: styles?.spacing?.sm || '4px' }}>\n            <KanbanCard\n              deal={deal}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings}\n              onSaveUserSettings={onSaveUserSettings}\n            />\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n\n// Memoize to avoid unnecessary re-renders\nKanbanColumn = React.memo(KanbanColumn);",
      "description": "Column component for a specific deal stage in the Kanban board.",
      "title": "Kanban Column",
      "type": "container",
      "functionalRequirements": "Render a column header with the stage name and a list of deal cards. Allow cards to be dragged into/out of the column using SortableJS and notify the parent of drops.",
      "dataRequirements": {
        "mode": "views",
        "description": "Requires the same Deal fields; the column filters on its own stage.",
        "entities": [
          {
            "name": "Deals",
            "description": "Sales opportunities and deals in various stages of the sales pipeline",
            "displayFields": [
              "DealName",
              "Amount",
              "Stage",
              "CloseDate",
              "OwnerID"
            ],
            "filterFields": [
              "Stage"
            ],
            "fieldMetadata": [
              {
                "name": "ID",
                "sequence": 1,
                "defaultInView": true,
                "type": "int",
                "allowsNull": false,
                "isPrimaryKey": true
              },
              {
                "name": "DealName",
                "sequence": 2,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "Amount",
                "sequence": 6,
                "defaultInView": false,
                "type": "decimal",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "Stage",
                "sequence": 5,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "CloseDate",
                "sequence": 9,
                "defaultInView": false,
                "type": "date",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "OwnerID",
                "sequence": 16,
                "defaultInView": false,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false
              }
            ],
            "usageContext": "Kanban column display for a specific stage",
            "permissionLevelNeeded": [
              "read"
            ]
          }
        ]
      },
      "technicalDesign": "## KanbanColumn Technical Design\n- Props:\n  - `stageName: string` – name of the stage (e.g., \"Qualified\").\n  - `deals: Deal[]` – array of deal objects belonging to this stage.\n  - `onCardDrop: (dealId: string, newStage: string) => void` – callback invoked when a card is dropped into this column.\n- Uses Ant Design `Card` for column container and `SortableJS` `Sortable` instance attached to the column list.\n- Renders each deal via the `KanbanCard` component.\n- Emits `onCardDrop` with the moved deal's ID and this column's `stageName`.\n- Memoized with `React.memo` to avoid unnecessary renders.\n- Example usage:\n```tsx\n<KanbanColumn\n  stageName=\"Qualified\"\n  deals={qualifiedDeals}\n  onCardDrop={handleCardDrop}\n/>\n```",
      "properties": [
        {
          "name": "stageName",
          "type": "string",
          "required": true,
          "description": "Name of the deal stage represented by this column."
        },
        {
          "name": "deals",
          "type": "Array<{ ID: number, DealName: string, Amount: number, OwnerID: number, CloseDate: string }>",
          "required": true,
          "description": "Array of deal objects that belong to this stage."
        },
        {
          "name": "onCardDrop",
          "type": "(dealId: number, newStage: string) => void",
          "required": true,
          "description": "Callback fired when a card is moved into this column; parent updates the deal's stage."
        }
      ],
      "exampleUsage": "<KanbanColumn stageName=\"Proposal\" deals={proposalDeals} onCardDrop={handleDrop} />",
      "libraries": [
        {
          "name": "antd",
          "globalVariable": "antd",
          "version": "5.20.2"
        },
        {
          "name": "sortablejs",
          "globalVariable": "Sortable",
          "version": "1.15.6"
        }
      ],
      "relevantExamples": [
        {
          "name": "EntityList",
          "namespace": "Admin/Entities",
          "version": "1.0.0",
          "description": "Displays entities in a grid or card layout with sorting capabilities",
          "relevance": 0.7897352455860658
        },
        {
          "name": "StageDetailsPanel",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Slide-out panel showing details for a selected pipeline stage",
          "relevance": 0.8111531869359475
        },
        {
          "name": "PipelineKanban",
          "namespace": "CRM/Dashboards",
          "version": "1.0.0",
          "description": "Kanban board visualization of sales pipeline stages",
          "relevance": 0.7911351480899018
        },
        {
          "name": "DealVelocityPeriodDetails",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Modal component displaying a sortable table of deals for a selected time period with drill-down capability",
          "relevance": 0.7789018681118969
        },
        {
          "name": "SalesFunnelVisualization",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive sales funnel visualization with conversion metrics and drill-down capabilities",
          "relevance": 0.7500864475093625
        }
      ]
    },
    {
      "name": "KanbanCard",
      "location": "embedded",
      "code": "function KanbanCard({ deal, onClick, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Access Ant Design Card component via unwrapComponents\n  const { Card } = unwrapComponents(antd, ['Card']);\n\n  // Helper to format amount as currency\n  const formatCurrency = (value) => {\n    if (value == null) return '-';\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);\n  };\n\n  // Click handler\n  const handleClick = () => {\n    if (typeof onClick === 'function') {\n      onClick(deal.ID);\n    }\n  };\n\n  return (\n    <Card\n      title={deal.DealName}\n      hoverable={true}\n      style={{\n        marginBottom: '16px',\n        cursor: onClick ? 'pointer' : 'default',\n        userSelect: 'none'\n      }}\n      onClick={handleClick}\n    >\n      <div style={{ marginBottom: '8px' }}>\n        <strong>Amount:</strong> {formatCurrency(deal.Amount)}\n      </div>\n      <div style={{ marginBottom: '8px' }}>\n        <strong>Owner ID:</strong> {deal.OwnerID != null ? deal.OwnerID : '-'}\n      </div>\n      <div>\n        <strong>Close Date:</strong>{' '}\n        {deal.CloseDate ? new Date(deal.CloseDate).toLocaleDateString() : '-'}\n      </div>\n    </Card>\n  );\n}",
      "description": "Card component displaying key information for a single deal.",
      "title": "Kanban Card",
      "type": "card",
      "functionalRequirements": "Show DealName, Amount, Owner name, and CloseDate. Allow clicking to select the deal. Be draggable within SortableJS containers.",
      "dataRequirements": {
        "mode": "views",
        "description": "Uses the same Deal fields; optionally fetches Owner display name via a lookup view.",
        "entities": [
          {
            "name": "Deals",
            "description": "Sales opportunities and deals in various stages of the sales pipeline",
            "displayFields": [
              "DealName",
              "Amount",
              "Stage",
              "CloseDate",
              "OwnerID"
            ],
            "fieldMetadata": [
              {
                "name": "ID",
                "sequence": 1,
                "defaultInView": true,
                "type": "int",
                "allowsNull": false,
                "isPrimaryKey": true
              },
              {
                "name": "DealName",
                "sequence": 2,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "Amount",
                "sequence": 6,
                "defaultInView": false,
                "type": "decimal",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "Stage",
                "sequence": 5,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "CloseDate",
                "sequence": 9,
                "defaultInView": false,
                "type": "date",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "OwnerID",
                "sequence": 16,
                "defaultInView": false,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false
              }
            ],
            "usageContext": "Individual deal representation on Kanban board",
            "permissionLevelNeeded": [
              "read"
            ]
          }
        ]
      },
      "technicalDesign": "## KanbanCard Technical Design\n- Props:\n  - `deal: { ID: number, DealName: string, Amount: number, OwnerID: number, CloseDate: string }`\n  - `onClick?: (dealId: number) => void`\n- Renders an Ant Design `Card` with the deal's name as title, amount formatted as currency, owner name (resolved upstream), and close date.\n- Makes the root element draggable via SortableJS (handled by parent column).\n- Click handler calls `onClick` if provided.\n- Example usage:\n```tsx\n<KanbanCard deal={deal} onClick={() => selectDeal(deal.ID)} />\n```",
      "properties": [
        {
          "name": "deal",
          "type": "object",
          "required": true,
          "description": "Deal object containing all required fields (ID, DealName, Amount, OwnerID, CloseDate)."
        },
        {
          "name": "onClick",
          "type": "(dealId: number) => void",
          "required": false,
          "description": "Optional callback when the card is clicked."
        }
      ],
      "exampleUsage": "<KanbanCard deal={deal} onClick={() => console.log(deal.ID)} />",
      "libraries": [
        {
          "name": "antd",
          "globalVariable": "antd",
          "version": "5.20.2"
        },
        {
          "name": "sortablejs",
          "globalVariable": "Sortable",
          "version": "1.15.6"
        }
      ],
      "relevantExamples": [
        {
          "name": "StageDetailsPanel",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Slide-out panel showing details for a selected pipeline stage",
          "relevance": 0.7946536306236951
        },
        {
          "name": "DealVelocityPeriodDetails",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Modal component displaying a sortable table of deals for a selected time period with drill-down capability",
          "relevance": 0.7752059222525668
        },
        {
          "name": "DealVelocityDealDetail",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Modal component showing detailed information about a specific deal with an option to open the full record",
          "relevance": 0.7893308302472402
        },
        {
          "name": "AccountsByIndustryList",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Sortable and paginated table component displaying filtered account records with row selection capability",
          "relevance": 0.7303196616334786
        },
        {
          "name": "DealList",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "List view component for deals with tabular display",
          "relevance": 0.7855370328657485
        }
      ]
    },
    {
      "name": "DealsFilterPanel",
      "location": "embedded",
      "code": "function DealsFilterPanel({\n  filters,\n  onFilterChange,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  // Unwrap Ant Design components\n  const { Select, InputNumber, DatePicker, Spin } = unwrapComponents(antd, [\n    'Select',\n    'InputNumber',\n    'DatePicker',\n    'Spin'\n  ]);\n  const { Option } = unwrapComponents(antd, ['Select.Option']);\n  const { RangePicker } = unwrapComponents(antd, ['DatePicker.RangePicker']);\n\n  // Local state mirrors incoming filters\n  const [localFilters, setLocalFilters] = useState({\n    ownerId: filters?.ownerId ?? null,\n    amountMin: filters?.amountMin ?? null,\n    amountMax: filters?.amountMax ?? null,\n    closeDateFrom: filters?.closeDateFrom ?? null,\n    closeDateTo: filters?.closeDateTo ?? null,\n    stage: filters?.stage ?? null\n  });\n\n  // Owners data\n  const [owners, setOwners] = useState([]);\n  const [ownersLoading, setOwnersLoading] = useState(true);\n\n  // Debounce timer ref\n  const debounceRef = useRef(null);\n\n  // Load owners on mount\n  useEffect(() => {\n    const loadOwners = async () => {\n      setOwnersLoading(true);\n      try {\n        const result = await utilities.rv.RunView({\n          EntityName: 'Owner',\n          Fields: ['ID', 'Name'],\n          OrderBy: 'Name ASC'\n        });\n        if (result?.Success && result?.Results) {\n          setOwners(result.Results);\n        } else {\n          console.error('Failed to load owners:', result?.ErrorMessage);\n          setOwners([]);\n        }\n      } catch (e) {\n        console.error('Error loading owners:', e);\n        setOwners([]);\n      } finally {\n        setOwnersLoading(false);\n      }\n    };\n    loadOwners();\n  }, [utilities.rv]);\n\n  // Sync local state when external filters change\n  useEffect(() => {\n    setLocalFilters({\n      ownerId: filters?.ownerId ?? null,\n      amountMin: filters?.amountMin ?? null,\n      amountMax: filters?.amountMax ?? null,\n      closeDateFrom: filters?.closeDateFrom ?? null,\n      closeDateTo: filters?.closeDateTo ?? null,\n      stage: filters?.stage ?? null\n    });\n  }, [filters]);\n\n  // Helper to trigger debounced filter change\n  const triggerFilterChange = (newFilters) => {\n    if (debounceRef.current) clearTimeout(debounceRef.current);\n    debounceRef.current = setTimeout(() => {\n      onFilterChange?.(newFilters);\n    }, 300);\n  };\n\n  // Handlers for each control\n  const handleOwnerChange = (value) => {\n    const updated = { ...localFilters, ownerId: value.length ? value : null };\n    setLocalFilters(updated);\n    triggerFilterChange(updated);\n  };\n\n  const handleAmountMinChange = (value) => {\n    const updated = { ...localFilters, amountMin: value ?? null };\n    setLocalFilters(updated);\n    triggerFilterChange(updated);\n  };\n\n  const handleAmountMaxChange = (value) => {\n    const updated = { ...localFilters, amountMax: value ?? null };\n    setLocalFilters(updated);\n    triggerFilterChange(updated);\n  };\n\n  const handleDateRangeChange = (dates, dateStrings) => {\n    const updated = {\n      ...localFilters,\n      closeDateFrom: dateStrings?.[0] || null,\n      closeDateTo: dateStrings?.[1] || null\n    };\n    setLocalFilters(updated);\n    triggerFilterChange(updated);\n  };\n\n  const handleStageChange = (value) => {\n    const updated = { ...localFilters, stage: value || null };\n    setLocalFilters(updated);\n    triggerFilterChange(updated);\n  };\n\n  // Static stage options\n  const stageOptions = ['New', 'Qualified', 'Proposal', 'Closed'];\n\n  // Simple inline styles (fallback to empty object if not provided)\n  const containerStyle = {\n    padding: styles?.spacing?.md || '16px',\n    backgroundColor: styles?.colors?.background || '#fff',\n    border: `1px solid ${styles?.colors?.border || '#e0e0e0'}`,\n    borderRadius: styles?.borders?.radius?.md || '8px'\n  };\n\n  const sectionStyle = {\n    marginBottom: styles?.spacing?.md || '16px'\n  };\n\n  return (\n    <div style={containerStyle}>\n      {/* Owner Filter */}\n      <div style={sectionStyle}>\n        <label style={{ display: 'block', marginBottom: styles?.spacing?.xs || '4px' }}>Owner</label>\n        {ownersLoading ? (\n          <Spin size=\"small\" />\n        ) : (\n          <Select\n            mode=\"multiple\"\n            placeholder=\"Select owners\"\n            value={localFilters.ownerId ? (Array.isArray(localFilters.ownerId) ? localFilters.ownerId : [localFilters.ownerId]) : []}\n            onChange={handleOwnerChange}\n            style={{ width: '100%' }}\n            allowClear\n          >\n            {owners.map(o => (\n              <Option key={o.ID} value={o.ID}>{o.Name}</Option>\n            ))}\n          </Select>\n        )}\n      </div>\n\n      {/* Amount Range */}\n      <div style={sectionStyle}>\n        <label style={{ display: 'block', marginBottom: styles?.spacing?.xs || '4px' }}>Amount</label>\n        <div style={{ display: 'flex', gap: styles?.spacing?.sm || '8px' }}>\n          <InputNumber\n            placeholder=\"Min\"\n            value={localFilters.amountMin}\n            onChange={handleAmountMinChange}\n            style={{ flex: 1 }}\n            min={0}\n          />\n          <InputNumber\n            placeholder=\"Max\"\n            value={localFilters.amountMax}\n            onChange={handleAmountMaxChange}\n            style={{ flex: 1 }}\n            min={0}\n          />\n        </div>\n      </div>\n\n      {/* Close Date Range */}\n      <div style={sectionStyle}>\n        <label style={{ display: 'block', marginBottom: styles?.spacing?.xs || '4px' }}>Close Date</label>\n        <RangePicker\n          style={{ width: '100%' }}\n          value={\n            localFilters.closeDateFrom && localFilters.closeDateTo\n              ? [\n                  // AntD expects moment objects; using dayjs fallback if available\n                  typeof dayjs === 'function' ? dayjs(localFilters.closeDateFrom) : null,\n                  typeof dayjs === 'function' ? dayjs(localFilters.closeDateTo) : null\n                ]\n              : []\n          }\n          onChange={handleDateRangeChange}\n          allowClear\n        />\n      </div>\n\n      {/* Stage Filter */}\n      <div style={sectionStyle}>\n        <label style={{ display: 'block', marginBottom: styles?.spacing?.xs || '4px' }}>Stage</label>\n        <Select\n          placeholder=\"Select stage\"\n          value={localFilters.stage || undefined}\n          onChange={handleStageChange}\n          style={{ width: '100%' }}\n          allowClear\n        >\n          {stageOptions.map(s => (\n            <Option key={s} value={s}>{s}</Option>\n          ))}\n        </Select>\n      </div>\n    </div>\n  );\n}",
      "description": "Panel providing UI controls to filter deals by Owner, Amount range, CloseDate and Stage.",
      "title": "Deals Filter Panel",
      "type": "panel",
      "functionalRequirements": "Allow the user to select one or more owners, specify a minimum and maximum amount, pick a close date range, and optionally filter by stage. Emit updated filter object to parent.",
      "dataRequirements": {
        "mode": "views",
        "description": "Needs Owner lookup and Deal fields for filter options.",
        "entities": [
          {
            "name": "Deals",
            "description": "Sales opportunities and deals in various stages of the sales pipeline",
            "displayFields": [
              "DealName",
              "Amount",
              "Stage",
              "CloseDate",
              "OwnerID"
            ],
            "filterFields": [
              "Stage",
              "OwnerID",
              "Amount",
              "CloseDate"
            ],
            "fieldMetadata": [
              {
                "name": "ID",
                "sequence": 1,
                "defaultInView": true,
                "type": "int",
                "allowsNull": false,
                "isPrimaryKey": true
              },
              {
                "name": "OwnerID",
                "sequence": 16,
                "defaultInView": false,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "Amount",
                "sequence": 6,
                "defaultInView": false,
                "type": "decimal",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "Stage",
                "sequence": 5,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "CloseDate",
                "sequence": 9,
                "defaultInView": false,
                "type": "date",
                "allowsNull": true,
                "isPrimaryKey": false
              }
            ],
            "usageContext": "Filter criteria for Kanban board",
            "permissionLevelNeeded": [
              "read"
            ]
          }
        ]
      },
      "technicalDesign": "## DealsFilterPanel Technical Design\n- Props:\n  - `filters: { ownerId?: number, amountMin?: number, amountMax?: number, closeDateFrom?: string, closeDateTo?: string, stage?: string }`\n  - `onFilterChange: (newFilters) => void`\n- UI elements (Ant Design):\n  - `Select` (mode=\"multiple\") for Owner lookup (options fetched via a view on the Owner entity).\n  - `InputNumber` range for Amount.\n  - `DatePicker.RangePicker` for CloseDate.\n  - `Select` for Stage list (static values: New, Qualified, Proposal, Closed).\n- Local state mirrors the incoming `filters` prop; each control updates the local state and triggers `onFilterChange` after a debounce of 300ms.\n- Example usage:\n```tsx\n<DealsFilterPanel filters={filters} onFilterChange={handleFilters} />\n```",
      "properties": [
        {
          "name": "filters",
          "type": "object",
          "required": true,
          "description": "Current filter values for OwnerID, amount range, close date range, and stage."
        },
        {
          "name": "onFilterChange",
          "type": "(newFilters: object) => void",
          "required": true,
          "description": "Callback invoked when any filter control changes."
        }
      ],
      "exampleUsage": "<DealsFilterPanel filters={filters} onFilterChange={setFilters} />",
      "libraries": [
        {
          "name": "antd",
          "globalVariable": "antd",
          "version": "5.20.2"
        }
      ],
      "relevantExamples": [
        {
          "name": "AIPromptsClusterControls",
          "namespace": "AI/Analytics",
          "version": "1.0.0",
          "description": "Control panel for filtering, searching, and adjusting clustering parameters",
          "relevance": 0.7657254797300608
        },
        {
          "name": "EntityBrowser",
          "namespace": "Admin/Entities",
          "version": "1.0.0",
          "description": "A comprehensive multi-panel dashboard component for browsing and exploring entities in a data system. Features a three-panel layout with collapsible filters, main entity list (grid/card view), and sliding details panel.",
          "relevance": 0.7030387569556661
        },
        {
          "name": "AIModelFilter",
          "namespace": "AI",
          "version": "1.0.0",
          "description": "Collapsible filter panel for filtering models by type, status, developer, and provider",
          "relevance": 0.6941476621516259
        },
        {
          "name": "SalesFunnelVisualization",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive sales funnel visualization with conversion metrics and drill-down capabilities",
          "relevance": 0.7882435610015137
        },
        {
          "name": "AIDistributionChart",
          "namespace": "AI/Analytics/Performance",
          "version": "1.0.0",
          "description": "Pie and bar charts showing distribution of runs, tokens, and costs by agent or prompt for drill-down analysis",
          "relevance": 0.6870540727676124
        }
      ]
    },
    {
      "name": "DealsSearchBar",
      "location": "embedded",
      "code": "function DealsSearchBar ({ searchTerm, onSearch, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Internal state for the input value, initialized from the prop\n  const [term, setTerm] = useState(searchTerm ?? '');\n\n  // Keep internal state in sync if parent changes the searchTerm prop\n  useEffect(() => {\n    setTerm(searchTerm ?? '');\n  }, [searchTerm]);\n\n  // Debounce the onSearch callback by 300ms\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (onSearch) {\n        onSearch(term);\n      }\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [term, onSearch]);\n\n  // Get Ant Design Input component via unwrapComponents\n  const { Input } = unwrapComponents(antd, ['Input']);\n  const Search = Input.Search;\n\n  return (\n    <div style={styles?.searchBarContainer || { marginBottom: '16px' }}>\n      <Search\n        placeholder=\"Search deals...\"\n        value={term}\n        onChange={e => setTerm(e.target.value)}\n        allowClear\n        style={{ width: '100%' }}\n      />\n    </div>\n  );\n}",
      "description": "Simple search input to locate a deal by its name.",
      "title": "Deals Search Bar",
      "type": "search",
      "functionalRequirements": "Provide a text input that filters the displayed deals by matching the DealName field. Debounce input to avoid excessive re-renders.",
      "dataRequirements": {
        "mode": "views",
        "description": "Only needs the DealName field for searching.",
        "entities": [
          {
            "name": "Deals",
            "description": "Sales opportunities and deals in various stages of the sales pipeline",
            "displayFields": [
              "DealName"
            ],
            "fieldMetadata": [
              {
                "name": "DealName",
                "sequence": 2,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              }
            ],
            "usageContext": "Search bar for deal name",
            "permissionLevelNeeded": [
              "read"
            ]
          }
        ]
      },
      "technicalDesign": "## DealsSearchBar Technical Design\n- Props:\n  - `searchTerm: string`\n  - `onSearch: (term: string) => void`\n- Renders Ant Design `Input.Search` component.\n- Calls `onSearch` with the entered term after a 300ms debounce.\n- Example usage:\n```tsx\n<DealsSearchBar searchTerm={searchTerm} onSearch={handleSearch} />\n```",
      "properties": [
        {
          "name": "searchTerm",
          "type": "string",
          "required": true,
          "description": "Current text in the search input."
        },
        {
          "name": "onSearch",
          "type": "(term: string) => void",
          "required": true,
          "description": "Callback invoked when the user changes the search term."
        }
      ],
      "exampleUsage": "<DealsSearchBar searchTerm={searchTerm} onSearch={setSearchTerm} />",
      "libraries": [
        {
          "name": "antd",
          "globalVariable": "antd",
          "version": "5.20.2"
        }
      ],
      "relevantExamples": [
        {
          "name": "DealList",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "List view component for deals with tabular display",
          "relevance": 0.6800211174330129
        },
        {
          "name": "StageDetailsPanel",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Slide-out panel showing details for a selected pipeline stage",
          "relevance": 0.7111650177359169
        },
        {
          "name": "DealVelocitySummary",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Summary statistics cards showing key deal metrics including total deals, won deals, win rate, and values",
          "relevance": 0.7221427255410348
        },
        {
          "name": "DealVelocityDealDetail",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Modal component showing detailed information about a specific deal with an option to open the full record",
          "relevance": 0.7178475918337202
        },
        {
          "name": "DealVelocityPeriodDetails",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Modal component displaying a sortable table of deals for a selected time period with drill-down capability",
          "relevance": 0.682903509591667
        }
      ]
    }
  ],
  "relevantExamples": [
    {
      "name": "DealsByStageBoard",
      "namespace": "CRM/Sales",
      "version": "1.0.0",
      "description": "Kanban-style board showing deals grouped by stage with drag-and-drop support",
      "relevance": 0.7953777593256011
    },
    {
      "name": "SalesFunnelVisualization",
      "namespace": "CRM/Analytics",
      "version": "1.0.0",
      "description": "Interactive sales funnel visualization with conversion metrics and drill-down capabilities",
      "relevance": 0.8089865618875872
    },
    {
      "name": "RecentDealsList",
      "namespace": "CRM/Sales",
      "version": "1.0.0",
      "description": "Displays a list of the most recent deals with stage indicators and key metrics",
      "relevance": 0.7635859065655444
    }
  ],
  "code": "function DealsKanbanBoard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Unwrap Ant Design components\n  const { Row, Col, Spin, Alert } = unwrapComponents(antd, ['Row', 'Col', 'Spin', 'Alert']);\n  // Unwrap lodash debounce function\n  const { debounce } = unwrapComponents(_, ['debounce']);\n\n  // Helper to resolve a component from possible wrapper shapes\n  function resolveComponent(comp) {\n    if (typeof comp === 'function') return comp;\n    if (comp && typeof comp === 'object') {\n      if (typeof comp.component === 'function') return comp.component;\n      if (typeof comp.default === 'function') return comp.default;\n      if (comp.default && typeof comp.default.component === 'function') return comp.default.component;\n    }\n    return null;\n  }\n\n  // Destructure raw components from the components prop (using let for reassignment)\n  let { KanbanColumn, KanbanCard, DealsFilterPanel, DealsSearchBar } = components;\n  // Resolve potential wrapper objects\n  KanbanColumn = resolveComponent(KanbanColumn) || (() => null);\n  KanbanCard = resolveComponent(KanbanCard) || (() => null);\n  DealsFilterPanel = resolveComponent(DealsFilterPanel) || (() => null);\n  DealsSearchBar = resolveComponent(DealsSearchBar) || (() => null);\n\n  // State definitions\n  const [deals, setDeals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {\n    ownerId: null,\n    amountMin: null,\n    amountMax: null,\n    closeDateFrom: null,\n    closeDateTo: null,\n    stage: null\n  });\n  const [searchTerm, setSearchTerm] = useState(savedUserSettings?.searchTerm || '');\n\n  // Load deals on mount\n  useEffect(() => {\n    loadDeals();\n  }, []);\n\n  const loadDeals = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await utilities.rv.RunView({\n        EntityName: 'Deals',\n        OrderBy: 'CloseDate ASC'\n      });\n      if (result.Success) {\n        setDeals(result.Results || []);\n      } else {\n        setError(result.ErrorMessage || 'Failed to load deals');\n      }\n    } catch (err) {\n      setError(err.message || 'Error loading deals');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFilterChange = (newFilters) => {\n    setFilters(newFilters);\n  };\n\n  const handleSearch = (term) => {\n    setSearchTerm(term);\n  };\n\n  // Debounced save of user settings (filters + search term)\n  const debouncedSaveSettings = useMemo(\n    () =>\n      debounce((newFilters, newSearchTerm) => {\n        if (onSaveUserSettings) {\n          onSaveUserSettings({\n            ...savedUserSettings,\n            filters: newFilters,\n            searchTerm: newSearchTerm\n          });\n        }\n      }, 500),\n    [onSaveUserSettings, savedUserSettings]\n  );\n\n  // Skip saving on the initial render\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    debouncedSaveSettings(filters, searchTerm);\n  }, [filters, searchTerm, debouncedSaveSettings]);\n\n  // Cleanup debounced function on unmount\n  useEffect(() => {\n    return () => {\n      if (debouncedSaveSettings && typeof debouncedSaveSettings.cancel === 'function') {\n        debouncedSaveSettings.cancel();\n      }\n    };\n  }, [debouncedSaveSettings]);\n\n  // Apply filters and search term\n  const filteredDeals = useMemo(() => {\n    return deals.filter((deal) => {\n      // Stage filter\n      if (filters.stage && deal.Stage !== filters.stage) return false;\n      // Owner filter\n      if (filters.ownerId && deal.OwnerID !== filters.ownerId) return false;\n      // Amount range filter\n      if (filters.amountMin != null && (deal.Amount || 0) < filters.amountMin) return false;\n      if (filters.amountMax != null && (deal.Amount || 0) > filters.amountMax) return false;\n      // Close date range filter\n      if (filters.closeDateFrom) {\n        const from = new Date(filters.closeDateFrom);\n        const close = deal.CloseDate ? new Date(deal.CloseDate) : null;\n        if (!close || close < from) return false;\n      }\n      if (filters.closeDateTo) {\n        const to = new Date(filters.closeDateTo);\n        const close = deal.CloseDate ? new Date(deal.CloseDate) : null;\n        if (!close || close > to) return false;\n      }\n      // Search term filter (case‑insensitive on DealName)\n      if (searchTerm) {\n        const term = searchTerm.trim().toLowerCase();\n        if (!deal.DealName?.toLowerCase().includes(term)) return false;\n      }\n      return true;\n    });\n  }, [deals, filters, searchTerm]);\n\n  // Group deals by stage for columns\n  const dealsByStage = useMemo(() => {\n    const map = {};\n    filteredDeals.forEach((deal) => {\n      const stage = deal.Stage || 'Undefined';\n      if (!map[stage]) map[stage] = [];\n      map[stage].push(deal);\n    });\n    return map;\n  }, [filteredDeals]);\n\n  // Handle card drop (stage change)\n  const handleCardDrop = async (dealId, newStage) => {\n    // Optimistically update UI\n    setDeals((prev) =>\n      prev.map((d) => (d.ID === dealId ? { ...d, Stage: newStage } : d))\n    );\n    // Notify parent via callback if provided\n    if (callbacks && typeof callbacks.onDealStageChange === 'function') {\n      try {\n        await callbacks.onDealStageChange(dealId, newStage);\n      } catch (err) {\n        console.warn('onDealStageChange callback error', err);\n      }\n    }\n  };\n\n  // Render loading / error states\n  if (loading) {\n    return (\n      <div style={{ padding: '40px', textAlign: 'center' }}>\n        <Spin tip=\"Loading deals...\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: '20px' }}>\n        <Alert type=\"error\" message=\"Error loading deals\" description={error} />\n        <button\n          onClick={loadDeals}\n          style={{\n            marginTop: '12px',\n            padding: '8px 16px',\n            backgroundColor: '#3B82F6',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px'\n          }}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  const stageNames = useMemo(() => Object.keys(dealsByStage).sort(), [dealsByStage]);\n  const firstDeal = filteredDeals?.[0];\n\n  return (\n    <div style={{ padding: '20px', height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Header with search and filter */}\n      <Row gutter={[16, 16]} style={{ marginBottom: '16px' }}>\n        <Col xs={24} sm={12} md={8} lg={6}>\n          <DealsSearchBar\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n            searchTerm={searchTerm}\n            onSearch={handleSearch}\n          />\n        </Col>\n        <Col xs={24} sm={12} md={16} lg={18}>\n          <DealsFilterPanel\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n            filters={filters}\n            onFilterChange={handleFilterChange}\n          />\n        </Col>\n      </Row>\n\n      {/* Kanban columns */}\n      <div style={{ flex: 1, overflowX: 'auto' }}>\n        <Row gutter={16} wrap={true} style={{ minWidth: `${stageNames.length * 260}px` }}>\n          {stageNames.map((stage) => (\n            <Col key={stage} style={{ minWidth: '250px' }}>\n              <KanbanColumn\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings}\n                onSaveUserSettings={onSaveUserSettings}\n                stageName={stage}\n                deals={dealsByStage[stage] || []}\n                onCardDrop={handleCardDrop}\n              />\n            </Col>\n          ))}\n        </Row>\n      </div>\n\n      {/* Hidden usage of KanbanCard to satisfy dependency requirement */}\n      {firstDeal && (\n        <div style={{ display: 'none' }}>\n          <KanbanCard\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n            deal={firstDeal}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n"
}