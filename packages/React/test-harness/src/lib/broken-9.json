{
  "title": "Sortable AI Models List",
  "type": "list",
  "name": "AiModelList",
  "userExplanation": "A component that displays a sortable list of AI models; clicking a model expands a detail view with an open button.",
  "functionalRequirements": "**Business Objective**\n- Enable users to quickly browse and explore AI models, compare them, and access detailed information.\n\n**Features**\n1. Display a list of AI models with columns such as **Model Name (Name)**, **Provider (Vendor)**, and **API Name (APIName)**.\n2. Allow sorting by any column that is supported for sorting in the data view (currently the **Name** column).\n3. Clicking a model row expands a drill‑down panel showing model details (description, capabilities, licensing, etc.).\n4. Within the drill‑down panel, provide an \"Open\" button that triggers a user‑defined action (e.g., open model documentation or launch the model).\n5. Responsive layout for desktop and tablet screens.\n6. Simple, clean UI with minimal visual clutter.\n\n**Non‑Functional**\n- Fast loading and sorting performance for up to a few hundred models.\n- Accessible keyboard navigation and screen‑reader support.\n- Consistent styling with the rest of the application.",
  "dataRequirements": {
    "mode": "views",
    "description": "Provides a sortable list of AI models with basic columns and a drill‑down detail view. Data is retrieved via the AI Models entity view.",
    "entities": [
      {
        "name": "AI Models",
        "description": "Catalog of all AI Models configured in the system",
        "displayFields": [
          "ID",
          "Name",
          "Vendor",
          "APIName"
        ],
        "filterFields": [
          "Name",
          "Vendor",
          "AIModelType",
          "IsActive"
        ],
        "sortFields": [
          "Name"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": true
          },
          {
            "name": "Name",
            "sequence": 2,
            "defaultInView": false,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false
          },
          {
            "name": "Vendor",
            "sequence": 13,
            "defaultInView": false,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false
          },
          {
            "name": "APIName",
            "sequence": 16,
            "defaultInView": false,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false
          }
        ],
        "usageContext": "List view with sorting and a drill‑down detail panel for AI models",
        "permissionLevelNeeded": [
          "read"
        ]
      }
    ]
  },
  "location": "embedded",
  "description": "A component that displays a sortable list of AI models; clicking a model expands a detail view with an open button.",
  "technicalDesign": "## Technical Design\n\n### Overview\n- The **AiModelList** component renders a sortable table of AI models using Ant Design's `Table` component. It receives the data via a MemberJunction view (handled internally) but exposes only minimal props for external configuration.\n- Clicking a row expands an embedded **AiModelDetailPanel** component that displays additional fields and an **Open** button.\n- All UI state (expanded rows, selected model, sorting) is managed internally with React `useState`. Important user actions are emitted via callbacks so the parent can persist preferences or trigger navigation.\n\n### Component Hierarchy\n- **AiModelList** (parent)\n  - Ant Design `Table` (list view)\n  - **AiModelDetailPanel** (expanded panel per row)\n\n### Props (AiModelList)\n- `initialSortField?: string` – field name for initial sort (default **Name**).  \n- `initialSortOrder?: 'ascend' | 'descend'` – initial sort direction.\n- `onSelectModel?: (modelId: string) => void` – called when a row is selected.\n- `onOpenModel?: (modelId: string) => void` – called when the Open button in the detail panel is clicked.\n\n### Events\n- **onSelectModel** – emitted with the `ID` of the selected model.\n- **onOpenModel** – emitted with the `ID` when the user clicks Open.\n\n### State Management (AiModelList)\n- `sortedInfo` – Ant Design sort state.\n- `expandedRowKeys` – array of IDs for rows currently expanded.\n- `selectedModelId` – ID of the row last clicked.\n\n### Detail Panel (AiModelDetailPanel)\n- **Props**: `model: object` (the full AI model record).\n- **Events**: `onOpen` – passes the model ID to parent.\n- Uses Ant Design `Card` and `Descriptions` to present fields such as `Description`, `Capabilities`, `Licensing`.\n- Renders an Ant Design `Button` labeled **Open** that triggers the `onOpen` callback.\n\n### Data Flow\n1. Component mounts → runs MJ view `AI Models` to fetch rows (fields defined in `dataRequirements`).\n2. Table displays rows, supports column sorting via Ant Design.\n3. User clicks a row → internal state updates, row expands to show `AiModelDetailPanel`.\n4. User clicks **Open** → `onOpenModel` event bubbles up with the model ID.\n5. Parent can handle navigation or other actions.\n\n### Responsiveness & Accessibility\n- Ant Design grid and responsive table breakpoints provide layout adjustments for tablet and desktop.\n- Keyboard navigation supported by Ant Design Table.\n- All buttons include `aria-label` for screen readers.\n\n### Libraries\n- **antd** – UI components (Table, Card, Descriptions, Button, responsive grid).\n\n### Dependencies\n- **AiModelDetailPanel** – child component defined below.\n\n### Example Usage\n```tsx\n<AiModelList\n  initialSortField=\"Name\"\n  onSelectModel={(id) => console.log('selected', id)}\n  onOpenModel={(id) => console.log('open', id)}\n/>\n```",
  "libraries": [
    {
      "name": "antd",
      "globalVariable": "antd",
      "version": "^5.20.2"
    }
  ],
  "dependencies": [
    {
      "name": "AiModelDetailPanel",
      "title": "AI Model Detail Panel",
      "type": "panel",
      "location": "embedded",
      "description": "Displays detailed information about a selected AI model and provides an Open button.",
      "functionalRequirements": "When a model row is selected, this panel expands showing description, capabilities, licensing, etc., and includes an Open button that triggers a user-defined action.",
      "technicalDesign": "## Technical Design\n- Receives a `model` prop containing the full AI model record.\n- Uses Ant Design `Card` and `Descriptions` to render fields.\n- Provides an Ant Design `Button` labeled \"Open\".\n- Emits `onOpen` event with the model ID when clicked.\n- No internal mutable state beyond UI toggle if needed.",
      "dataRequirements": {
        "mode": "views",
        "description": "Provides detailed fields for a single AI model.",
        "entities": [
          {
            "name": "AI Models",
            "displayFields": [
              "ID",
              "Name",
              "Vendor",
              "APIName",
              "Description",
              "Capabilities",
              "Licensing"
            ],
            "fieldMetadata": [
              {
                "name": "ID",
                "sequence": 1,
                "defaultInView": false,
                "type": "uniqueidentifier",
                "allowsNull": false,
                "isPrimaryKey": true
              },
              {
                "name": "Name",
                "sequence": 2,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "Vendor",
                "sequence": 13,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "APIName",
                "sequence": 16,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "Description",
                "sequence": 20,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "Capabilities",
                "sequence": 21,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "Licensing",
                "sequence": 22,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false
              }
            ],
            "permissionLevelNeeded": [
              "read"
            ]
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "type": "object",
          "description": "The AI model record to display.",
          "required": true
        }
      ],
      "events": [
        {
          "name": "onOpen",
          "description": "Called when the Open button is clicked.",
          "parameters": [
            {
              "name": "modelId",
              "type": "string",
              "description": "ID of the model to open."
            }
          ]
        }
      ],
      "exampleUsage": "<AiModelDetailPanel model={selectedModel} onOpen={(id) => handleOpenModel(id)} />",
      "libraries": [
        {
          "name": "antd",
          "globalVariable": "antd",
          "version": "5.20.2"
        }
      ],
      "relevantExamples": [
        {
          "name": "AIModelDetails",
          "namespace": "AI",
          "version": "1.0.0",
          "description": "Sliding details panel showing comprehensive model information, vendors, and usage statistics",
          "relevance": 0.7299876295952767
        },
        {
          "name": "EntityDetails",
          "namespace": "Admin/Entities",
          "version": "1.0.0",
          "description": "Sliding panel that displays detailed information about a selected entity including fields and relationships",
          "relevance": 0.7165243560904597
        },
        {
          "name": "DrillDownPanel",
          "namespace": "CRM/Dashboard",
          "version": "1.0.0",
          "description": "Slide-out panel for drilling down into deal details with filtering and sorting",
          "relevance": 0.6987982658394232
        },
        {
          "name": "AIInsightsPanel",
          "namespace": "Generic/UI/AI",
          "version": "1.0.0",
          "description": "A reusable AI insights panel component with markdown rendering, copy/export functionality, and collapsible UI",
          "relevance": 0.7618121845989163
        },
        {
          "name": "SalesFunnelVisualization",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive sales funnel visualization with conversion metrics and drill-down capabilities",
          "relevance": 0.6749396378198729
        }
      ],
      "code": "function AiModelDetailPanel({\n  model,\n  onOpen,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings,\n  ...restProps\n}) {\n  // Access Ant Design components via unwrapLibraryComponents\n  const { Card, Descriptions, Button } = unwrapLibraryComponents(antd, 'Card', 'Descriptions', 'Button');\n\n  // Handle Open button click\n  const handleOpen = useCallback(() => {\n    if (!model?.ID) {\n      console.error('AiModelDetailPanel: model ID is missing');\n      return;\n    }\n    if (onOpen) {\n      onOpen(model.ID);\n    }\n  }, [model, onOpen]);\n\n  // Render when no model is provided\n  if (!model) {\n    return (\n      <div style={{ padding: styles?.spacing?.lg || '16px', color: styles?.colors?.textSecondary || '#666' }}>\n        No model selected.\n      </div>\n    );\n  }\n\n  return (\n    <Card\n      title={model.Name || 'Unnamed Model'}\n      extra={\n        <Button type=\"primary\" onClick={handleOpen}>\n          Open\n        </Button>\n      }\n      style={{\n        width: '100%',\n        backgroundColor: styles?.colors?.surface || '#fff',\n        borderColor: styles?.colors?.border || '#e8e8e8'\n      }}\n      {...restProps}\n    >\n      <Descriptions column={1} bordered>\n        {model.Vendor && (\n          <Descriptions.Item label=\"Vendor\">{model.Vendor}</Descriptions.Item>\n        )}\n        {model.APIName && (\n          <Descriptions.Item label=\"API Name\">{model.APIName}</Descriptions.Item>\n        )}\n        {model.Description && (\n          <Descriptions.Item label=\"Description\">{model.Description}</Descriptions.Item>\n        )}\n        {model.Capabilities && (\n          <Descriptions.Item label=\"Capabilities\">{model.Capabilities}</Descriptions.Item>\n        )}\n        {model.Licensing && (\n          <Descriptions.Item label=\"Licensing\">{model.Licensing}</Descriptions.Item>\n        )}\n      </Descriptions>\n    </Card>\n  );\n}"
    }
  ],
  "properties": [
    {
      "name": "initialSortField",
      "type": "string",
      "description": "Field name to sort the list by initially, default is 'Name'.",
      "required": false,
      "defaultValue": "Name"
    },
    {
      "name": "initialSortOrder",
      "type": "'ascend' | 'descend'",
      "description": "Initial sort direction for the table.",
      "required": false,
      "defaultValue": "ascend"
    }
  ],
  "events": [
    {
      "name": "onSelectModel",
      "description": "Fired when a user selects a model row.",
      "parameters": [
        {
          "name": "modelId",
          "type": "string",
          "description": "ID of the selected model."
        }
      ]
    },
    {
      "name": "onOpenModel",
      "description": "Fired when the Open button in the detail panel is clicked.",
      "parameters": [
        {
          "name": "modelId",
          "type": "string",
          "description": "ID of the model to open."
        }
      ]
    }
  ],
  "exampleUsage": "<AiModelList onSelectModel={handleSelect} onOpenModel={handleOpen} />",
  "relevantExamples": [
    {
      "name": "AIPerformanceDashboard",
      "namespace": "AI/Analytics/Performance",
      "version": "1.0.0",
      "description": "Comprehensive dashboard for analyzing AI agent and prompt performance with time-series charts, cost analysis, and drill-down capabilities",
      "relevance": 0.7718731611477124
    },
    {
      "name": "AIModelBrowser",
      "namespace": "AI",
      "version": "1.0.0",
      "description": "A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications",
      "relevance": 0.7477050668596865
    },
    {
      "name": "RecentDealsList",
      "namespace": "CRM/Sales",
      "version": "1.0.0",
      "description": "Displays a list of the most recent deals with stage indicators and key metrics",
      "relevance": 0.7055212052155373
    }
  ],
  "code": "function AiModelList({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings, initialSortField = 'Name', initialSortOrder = 'ascend', onSelectModel, onOpenModel }) {\n  // Destructure child component\n  const { AiModelDetailPanel } = components;\n\n  // Ant Design components via unwrapLibraryComponents\n  const { Table } = unwrapLibraryComponents(antd, 'Table');\n\n  // State\n  const [models, setModels] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sortedInfo, setSortedInfo] = useState({\n    columnKey: initialSortField,\n    order: initialSortOrder,\n  });\n  const [expandedRowKeys, setExpandedRowKeys] = useState([]);\n  const [selectedModelId, setSelectedModelId] = useState(savedUserSettings?.selectedModelId);\n\n  // Load models on mount\n  useEffect(() => {\n    const loadModels = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const result = await utilities.rv.RunView({\n          EntityName: 'AI Models',\n          Fields: ['ID', 'Name', 'Vendor', 'APIName'],\n          OrderBy: `${initialSortField} ${initialSortOrder === 'ascend' ? 'ASC' : 'DESC'}`,\n        });\n        if (result?.Success) {\n          setModels(result.Results || []);\n        } else {\n          setError(result?.ErrorMessage || 'Failed to load AI models');\n        }\n      } catch (e) {\n        setError(e?.message || 'Error loading AI models');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadModels();\n  }, [utilities.rv, initialSortField, initialSortOrder]);\n\n  // Table columns definition\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'Name',\n      key: 'Name',\n      sorter: true,\n      sortOrder: sortedInfo.columnKey === 'Name' ? sortedInfo.order : null,\n      render: (text, record) => (\n        <span\n          style={{ cursor: 'pointer', color: styles?.colors?.primary || '#1890ff' }}\n          onClick={() => handleRowSelect(record)}\n        >\n          {text}\n        </span>\n      ),\n    },\n    {\n      title: 'Vendor',\n      dataIndex: 'Vendor',\n      key: 'Vendor',\n      sorter: true,\n      sortOrder: sortedInfo.columnKey === 'Vendor' ? sortedInfo.order : null,\n    },\n    {\n      title: 'API Name',\n      dataIndex: 'APIName',\n      key: 'APIName',\n      sorter: true,\n      sortOrder: sortedInfo.columnKey === 'APIName' ? sortedInfo.order : null,\n    },\n  ];\n\n  // Handle table sort changes – avoid noisy user-settings saves\n  const handleChange = (pagination, filters, sorter) => {\n    setSortedInfo({\n      columnKey: sorter.columnKey,\n      order: sorter.order,\n    });\n  };\n\n  const handleRowSelect = (record) => {\n    setSelectedModelId(record.ID);\n    onSelectModel?.(record.ID);\n  };\n\n  const handleExpand = (expanded, record) => {\n    setExpandedRowKeys(expanded ? [record.ID] : []);\n  };\n\n  const renderExpandedRow = (record) => {\n    if (!AiModelDetailPanel) return null;\n    return (\n      <AiModelDetailPanel\n        model={record}\n        utilities={utilities}\n        styles={styles}\n        components={components}\n        callbacks={{ ...callbacks, onOpen: (id) => onOpenModel?.(id) }}\n        savedUserSettings={savedUserSettings?.detailPanel}\n      />\n    );\n  };\n\n  if (loading) {\n    return (\n      <div\n        style={{\n          padding: styles?.spacing?.md || '16px',\n          textAlign: 'center',\n          color: styles?.colors?.textSecondary || '#888',\n        }}\n      >\n        Loading AI models...\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div\n        style={{\n          padding: styles?.spacing?.md || '16px',\n          color: styles?.colors?.error || 'red',\n        }}\n      >\n        Error: {error}\n      </div>\n    );\n  }\n\n  return (\n    <Table\n      rowKey=\"ID\"\n      dataSource={models}\n      columns={columns}\n      loading={loading}\n      onChange={handleChange}\n      expandedRowKeys={expandedRowKeys}\n      onExpand={handleExpand}\n      expandedRowRender={renderExpandedRow}\n      pagination={false}\n      style={{ background: styles?.colors?.background || 'white' }}\n    />\n  );\n}"
}