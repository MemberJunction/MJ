{
  "functionalRequirements": "## Business Objectives:\n- Enable quick access to account details and related contacts\n- Support efficient data exploration through sorting and drill-down\n\n## Functional Requirements:\n1. **Sortable Account List** with columns: Account Name, Created Date, Industry, Status\n2. **Interactive Drill-Down Panel** that:\n   - Shows full account details (address, website, key metrics)\n   - Displays related contacts with name, role, email, and phone\n3. **Visual Hierarchy** with:\n   - Collapsible/Expandable account entries\n   - Highlighting for priority accounts/statuses\n4. **Search Functionality** for filtering accounts (optional enhancement)",
  "title": "Account Overview with Contacts",
  "type": "dashboard",
  "name": "AccountOverviewPanel",
  "userExplanation": "AccountOverviewPanel provides a dynamic view of all accounts with sorting, drill-down capabilities into account details, and related contact information. The panel helps users manage client relationships by showing essential account data and contact lists in a single view.",
  "dataRequirements": {
    "mode": "views",
    "description": "Account overview with contact relationships using direct entity views for efficient data access and sorting",
    "entities": [
      {
        "name": "Accounts",
        "description": "Stores information about customer organizations and companies",
        "displayFields": [
          "ID",
          "AccountName",
          "__mj_CreatedAt",
          "Industry",
          "AccountStatus"
        ],
        "filterFields": [
          "AccountName",
          "Industry",
          "AccountStatus",
          "ID"
        ],
        "sortFields": [
          "AccountName",
          "__mj_CreatedAt",
          "Industry",
          "AccountStatus",
          "ID"
        ],
        "usageContext": "Primary entity for account list display and drill-down details",
        "permissionLevelNeeded": [
          "read"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "type": "int",
            "allowsNull": false,
            "isPrimaryKey": true,
            "defaultInView": true
          },
          {
            "name": "AccountName",
            "sequence": 2,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "defaultInView": false
          },
          {
            "name": "__mj_CreatedAt",
            "sequence": 21,
            "type": "datetimeoffset",
            "allowsNull": false,
            "isPrimaryKey": false,
            "defaultInView": false
          },
          {
            "name": "Industry",
            "sequence": 3,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "defaultInView": false
          },
          {
            "name": "AccountStatus",
            "sequence": 19,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "defaultInView": false,
            "possibleValues": [
              "Active",
              "Inactive",
              "On Hold",
              "Closed"
            ]
          }
        ]
      },
      {
        "name": "Contacts",
        "description": "Stores information about individual people associated with accounts",
        "displayFields": [
          "ID",
          "FullName",
          "Title",
          "Email",
          "Phone",
          "AccountID"
        ],
        "filterFields": [
          "AccountID",
          "FullName",
          "Email",
          "ID"
        ],
        "sortFields": [
          "FullName",
          "Title",
          "Email",
          "ID"
        ],
        "usageContext": "Related contacts for drill-down display when viewing account details",
        "permissionLevelNeeded": [
          "read"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "type": "int",
            "allowsNull": false,
            "isPrimaryKey": true,
            "defaultInView": true
          },
          {
            "name": "FullName",
            "sequence": 6,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "defaultInView": false
          },
          {
            "name": "Title",
            "sequence": 7,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "defaultInView": false
          },
          {
            "name": "Email",
            "sequence": 9,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "defaultInView": false
          },
          {
            "name": "Phone",
            "sequence": 10,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "defaultInView": false
          },
          {
            "name": "AccountID",
            "sequence": 2,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "defaultInView": false
          }
        ]
      }
    ]
  },
  "description": "A comprehensive dashboard component that provides a sortable list of accounts with expandable details and related contact information for efficient client relationship management.",
  "technicalDesign": "## Component Architecture\n\nThe AccountOverviewPanel is a sophisticated dashboard component that manages account data visualization and contact relationships. The component hierarchy follows a modular design pattern with built-in data loading capabilities:\n\n### Main Components:\n1. **AccountOverviewPanel** (Root) - Orchestrates the entire dashboard experience with internal data loading\n2. **AccountListComponent** - Displays sortable account table with expandable rows and internal data loading\n3. **ContactListComponent** - Displays related contacts with internal data loading based on selected account\n\n### State Management:\n- Uses local state for UI interactions (expanded rows, selected account)\n- Data loading state managed internally when props not provided\n- All sorting/filtering state managed within components\n- Error states and loading indicators for async data loading\n\n### Data Loading Strategy:\n- **Root Component**: Accepts optional accounts and contacts props\n- **Internal Loading**: When props not provided, uses RunView() to load from Accounts and Contacts entities\n- **Lazy Loading**: Contacts are loaded only when an account is selected\n- **Caching**: Recent data is cached to prevent unnecessary re-fetching\n\n### Data Flow:\n- Parent component can optionally provide data via props for testing or pre-loaded scenarios\n- Child components handle their own data loading when props not provided\n- Events bubble up through callback functions for user actions\n- All entities use the exact field names and types specified in dataRequirements\n\n### Key Features:\n- Expandable account rows for quick preview\n- Full drill-down capability with detailed panels\n- Responsive design that adapts to screen size\n- Keyboard navigation support for accessibility\n- Graceful handling of loading and error states\n- Optional props support for integration flexibility\n\n### Data Requirements Compliance:\n- **Accounts Entity**: Uses ID, AccountName, __mj_CreatedAt, Industry, AccountStatus fields\n- **Contacts Entity**: Uses ID, FullName, Title, Email, Phone, AccountID fields\n- **Primary Keys**: ID fields used consistently for selection and relationships\n- **Filtering**: AccountID used to filter contacts by selected account",
  "libraries": [
    {},
    {},
    {}
  ],
  "properties": [
    {
      "name": "accounts",
      "type": "Array<{ID: number, AccountName: string, __mj_CreatedAt: string, Industry: string, AccountStatus: string}>",
      "required": false,
      "description": "Optional array of account records to display. If not provided, component will load data internally"
    },
    {
      "name": "contacts",
      "type": "Array<{ID: number, FullName: string, Title: string, Email: string, Phone: string, AccountID: number}>",
      "required": false,
      "description": "Optional array of contact records. If not provided, component will load related contacts internally"
    },
    {
      "name": "initialSortField",
      "type": "string",
      "required": false,
      "defaultValue": "AccountName",
      "description": "Initial field to sort the account list by"
    },
    {
      "name": "initialSortDirection",
      "type": "string",
      "required": false,
      "defaultValue": "asc",
      "possibleValues": [
        "asc",
        "desc"
      ],
      "description": "Initial sort direction for the account list"
    },
    {
      "name": "showContactCount",
      "type": "boolean",
      "required": false,
      "defaultValue": true,
      "description": "Whether to show the contact count badge on each account row"
    }
  ],
  "events": [
    {
      "name": "onAccountSelect",
      "description": "Triggered when a user selects an account for detailed view",
      "parameters": [
        {
          "name": "accountId",
          "type": "number",
          "description": "The ID of the selected account"
        },
        {
          "name": "accountData",
          "type": "object",
          "description": "The complete account data object"
        }
      ]
    },
    {
      "name": "onSortChange",
      "description": "Triggered when the user changes the sort configuration",
      "parameters": [
        {
          "name": "sortField",
          "type": "string",
          "description": "The field being sorted by"
        },
        {
          "name": "sortDirection",
          "type": "string",
          "description": "The direction of sort (asc/desc)"
        }
      ]
    },
    {
      "name": "onFilterChange",
      "description": "Triggered when filtering is applied to the account list",
      "parameters": [
        {
          "name": "filterModel",
          "type": "object",
          "description": "The current filter configuration applied"
        }
      ]
    }
  ],
  "exampleUsage": "<AccountOverviewPanel\n  accounts={accountsData}\n  contacts={contactsData}\n  initialSortField=\"AccountName\"\n  initialSortDirection=\"asc\"\n  showContactCount={true}\n  onAccountSelect={(accountId, accountData) => handleAccountSelection(accountId, accountData)}\n  onSortChange={(sortField, sortDirection) => handleSortChange(sortField, sortDirection)}\n  onFilterChange={(filterModel) => handleFilterChange(filterModel)}\n/>",
  "dependencies": [
    {
      "name": "AccountListComponent",
      "description": "Displays a sortable, filterable table of accounts with expandable rows",
      "type": "table",
      "functionalRequirements": "Display accounts in a grid format with support for sorting, filtering, and row expansion. Each row should show key account information and allow users to expand for additional details.",
      "technicalDesign": "## AccountListComponent\n\n### Purpose:\nProvides a responsive data table for displaying account information with advanced features.\n\n### Key Features:\n- Column sorting (AccountName, Created Date, Industry, Status)\n- Row expansion for quick preview\n- Contact count badge display\n- Keyboard navigation support\n- Status-based row styling\n\n### Data Requirements:\n- Uses Accounts entity with fields: ID, AccountName, __mj_CreatedAt, Industry, AccountStatus\n- Primary key: ID (used for row identification and selection)\n- Display fields: AccountName, __mj_CreatedAt, Industry, AccountStatus\n- Sort fields: All display fields plus ID for stability\n\n### State Management:\n- Manages sort state internally\n- Tracks expanded rows via row ID\n- Emits events for selection and sort changes\n\n### Data Loading:\n- Accepts optional accounts prop, falls back to internal loading via RunView()\n- Handles loading states and error states gracefully\n\n### Styling:\n- Uses Material-UI DataGrid for consistent look\n- Custom cell renderers for status badges and dates\n- Responsive design with breakpoint handling",
      "dataRequirements": {
        "mode": "views",
        "description": "Account list component data requirements",
        "entities": [
          {
            "name": "Accounts",
            "description": "Stores information about customer organizations and companies",
            "displayFields": [
              "ID",
              "AccountName",
              "__mj_CreatedAt",
              "Industry",
              "AccountStatus"
            ],
            "filterFields": [
              "AccountName",
              "Industry",
              "AccountStatus",
              "ID"
            ],
            "sortFields": [
              "AccountName",
              "__mj_CreatedAt",
              "Industry",
              "AccountStatus",
              "ID"
            ],
            "usageContext": "Primary data source for account list display",
            "permissionLevelNeeded": [
              "read"
            ],
            "fieldMetadata": [
              {
                "name": "ID",
                "sequence": 1,
                "type": "int",
                "allowsNull": false,
                "isPrimaryKey": true,
                "defaultInView": true
              },
              {
                "name": "AccountName",
                "sequence": 2,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false,
                "defaultInView": false
              },
              {
                "name": "__mj_CreatedAt",
                "sequence": 21,
                "type": "datetimeoffset",
                "allowsNull": false,
                "isPrimaryKey": false,
                "defaultInView": false
              },
              {
                "name": "Industry",
                "sequence": 3,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false,
                "defaultInView": false
              },
              {
                "name": "AccountStatus",
                "sequence": 19,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false,
                "defaultInView": false,
                "possibleValues": [
                  "Active",
                  "Inactive",
                  "On Hold",
                  "Closed"
                ]
              }
            ]
          }
        ]
      },
      "properties": [
        {
          "name": "accounts",
          "type": "Array<{ID: number, AccountName: string, __mj_CreatedAt: string, Industry: string, AccountStatus: string}>",
          "required": false,
          "description": "Optional array of account records. If not provided, component will load data internally via RunView()"
        },
        {
          "name": "initialSortField",
          "type": "string",
          "required": false,
          "defaultValue": "AccountName",
          "description": "Initial field to sort the table by"
        },
        {
          "name": "initialSortDirection",
          "type": "string",
          "required": false,
          "defaultValue": "asc",
          "possibleValues": [
            "asc",
            "desc"
          ],
          "description": "Initial sort direction for the table"
        },
        {
          "name": "showContactCount",
          "type": "boolean",
          "required": false,
          "defaultValue": true,
          "description": "Whether to show the contact count badge on each row"
        }
      ],
      "events": [
        {
          "name": "onAccountSelect",
          "description": "Triggered when a user clicks on an account row",
          "parameters": [
            {
              "name": "accountId",
              "type": "number",
              "description": "The ID of the selected account"
            },
            {
              "name": "accountData",
              "type": "object",
              "description": "The complete account data object"
            }
          ]
        },
        {
          "name": "onSortChange",
          "description": "Triggered when the user changes the sort configuration",
          "parameters": [
            {
              "name": "sortField",
              "type": "string",
              "description": "The field being sorted by"
            },
            {
              "name": "sortDirection",
              "type": "string",
              "description": "The direction of sort (asc/desc)"
            }
          ]
        },
        {
          "name": "onFilterChange",
          "description": "Triggered when filtering is applied",
          "parameters": [
            {
              "name": "filterModel",
              "type": "object",
              "description": "The current filter configuration"
            }
          ]
        }
      ],
      "exampleUsage": "<AccountListComponent\n  accounts={accountsData} // optional - will load internally if not provided\n  initialSortField=\"AccountName\"\n  initialSortDirection=\"asc\"\n  showContactCount={true}\n  onAccountSelect={(accountId, accountData) => handleAccountSelection(accountId, accountData)}\n  onSortChange={(sortField, sortDirection) => handleSortChange(sortField, sortDirection)}\n  onFilterChange={(filterModel) => handleFilterChange(filterModel)}\n/>",
      "libraries": [
        {
          "name": "ag-grid-react",
          "globalVariable": "AgGridReact",
          "version": "^31.0.1"
        },
        {
          "name": "@mui/material",
          "globalVariable": "MaterialUI",
          "version": "^5.15.2"
        }
      ],
      "location": "embedded",
      "relevantExamples": [
        {
          "namespace": "",
          "version": "",
          "relevance": 0.792460330123208
        },
        {
          "namespace": "",
          "version": "",
          "relevance": 0.7658607169720894
        },
        {
          "namespace": "",
          "version": "",
          "relevance": 0.6825996459148533
        },
        {
          "namespace": "",
          "version": "",
          "relevance": 0.6825079169342982
        },
        {
          "namespace": "",
          "version": "",
          "relevance": 0.6748654183574997
        }
      ],
      "code": "function AccountListComponent({\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings,\n  accounts: propAccounts,\n  initialSortField,\n  initialSortDirection,\n  showContactCount\n}) {\n  const [accounts, setAccounts] = useState(propAccounts);\n  const [loading, setLoading] = useState(!propAccounts);\n  const [error, setError] = useState(null);\n  const [sortField, setSortField] = useState(initialSortField || savedUserSettings?.sortField || 'AccountName');\n  const [sortDirection, setSortDirection] = useState(initialSortDirection || savedUserSettings?.sortDirection || 'asc');\n  const [expandedRows, setExpandedRows] = useState(savedUserSettings?.expandedRows || {});\n  const [filterModel, setFilterModel] = useState(savedUserSettings?.filterModel || {});\n\n  const { Box, Typography, CircularProgress, Paper, Chip, IconButton } = MaterialUI;\n\n  // Load accounts if not provided\n  useEffect(() => {\n    async function loadAccounts() {\n      if (accounts) return;\n      \n      setLoading(true);\n      try {\n        const result = await utilities.rv.RunView({\n          EntityName: 'Accounts',\n          Fields: ['ID', 'AccountName', '__mj_CreatedAt', 'Industry', 'AccountStatus']\n        });\n        \n        if (result.Success) {\n          setAccounts(result.Results);\n        } else {\n          setError(result.ErrorMessage || 'Failed to load accounts');\n        }\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    loadAccounts();\n  }, []);\n\n  // Handle sort change\n  const handleSortChange = (field, direction) => {\n    setSortField(field);\n    setSortDirection(direction);\n    \n    // Save user preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortField: field,\n      sortDirection: direction\n    });\n    \n    // Notify parent\n    callbacks.onSortChange?.(field, direction);\n  };\n\n  // Handle account selection\n  const handleAccountSelect = (account) => {\n    callbacks.onAccountSelect?.(account.ID, account);\n  };\n\n  // Handle filter change\n  const handleFilterChange = (newFilterModel) => {\n    setFilterModel(newFilterModel);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterModel: newFilterModel\n    });\n    callbacks.onFilterChange?.(newFilterModel);\n  };\n\n  // Toggle row expansion\n  const toggleRowExpansion = (accountId) => {\n    const newExpanded = {\n      ...expandedRows,\n      [accountId]: !expandedRows[accountId]\n    };\n    setExpandedRows(newExpanded);\n    \n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      expandedRows: newExpanded\n    });\n  };\n\n  // Memoize sorted accounts\n  const sortedAccounts = useMemo(() => {\n    if (!accounts) return [];\n    \n    return [...accounts].sort((a, b) => {\n      let valueA = a[sortField];\n      let valueB = b[sortField];\n      \n      // Handle null/undefined values\n      if (valueA === null || valueA === undefined) valueA = '';\n      if (valueB === null || valueB === undefined) valueB = '';\n      \n      // Convert dates for comparison\n      if (sortField === '__mj_CreatedAt') {\n        valueA = new Date(valueA).getTime();\n        valueB = new Date(valueB).getTime();\n      }\n      \n      // Convert to strings for comparison\n      const strA = String(valueA).toLowerCase();\n      const strB = String(valueB).toLowerCase();\n      \n      if (sortDirection === 'asc') {\n        return strA > strB ? 1 : -1;\n      } else {\n        return strA < strB ? 1 : -1;\n      }\n    });\n  }, [accounts, sortField, sortDirection]);\n\n  // Memoize display data\n  const displayData = useMemo(() => {\n    // Apply filters\n    let filtered = sortedAccounts;\n    \n    Object.entries(filterModel).forEach(([field, value]) => {\n        if (value) {\n            filtered = filtered.filter(account => \n                String(account[field] || '').toLowerCase().includes(String(value).toLowerCase())\n            );\n        }\n    });\n    \n    return filtered;\n  }, [sortedAccounts, filterModel]);\n\n  // Loading state\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\">Error loading accounts: {error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ width: '100%', height: '100%' }}>\n      <Paper sx={{ width: '100%', mb: 2 }}>\n        <Box sx={{ p: 2 }}>\n          {/* Headers */}\n          <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 150px 150px 150px 100px', gap: 1, mb: 2 }}>\n            <Box \n              sx={{ \n                cursor: 'pointer', \n                fontWeight: 'bold',\n                color: sortField === 'AccountName' ? 'primary.main' : 'inherit'\n              }}\n              onClick={() => handleSortChange('AccountName', sortField === 'AccountName' && sortDirection === 'asc' ? 'desc' : 'asc')}\n            >\n              Account Name {sortField === 'AccountName' && (sortDirection === 'asc' ? '↑' : '↓')}\n            </Box>\n            <Box \n              sx={{ \n                cursor: 'pointer', \n                fontWeight: 'bold',\n                color: sortField === '__mj_CreatedAt' ? 'primary.main' : 'inherit'\n              }}\n              onClick={() => handleSortChange('__mj_CreatedAt', sortField === '__mj_CreatedAt' && sortDirection === 'asc' ? 'desc' : 'asc')}\n            >\n              Created {sortField === '__mj_CreatedAt' && (sortDirection === 'asc' ? '↑' : '↓')}\n            </Box>\n            <Box \n              sx={{ \n                cursor: 'pointer', \n                fontWeight: 'bold',\n                color: sortField === 'Industry' ? 'primary.main' : 'inherit'\n              }}\n              onClick={() => handleSortChange('Industry', sortField === 'Industry' && sortDirection === 'asc' ? 'desc' : 'asc')}\n            >\n              Industry {sortField === 'Industry' && (sortDirection === 'asc' ? '↑' : '↓')}\n            </Box>\n            <Box \n              sx={{ \n                cursor: 'pointer', \n                fontWeight: 'bold',\n                color: sortField === 'AccountStatus' ? 'primary.main' : 'inherit'\n              }}\n              onClick={() => handleSortChange('AccountStatus', sortField === 'AccountStatus' && sortDirection === 'asc' ? 'desc' : 'asc')}\n            >\n              Status {sortField === 'AccountStatus' && (sortDirection === 'asc' ? '↑' : '↓')}\n            </Box>\n            <Box sx={{ fontWeight: 'bold' }}>\n              {showContactCount ? 'Contacts' : ''}\n            </Box>\n          </Box>\n\n          {/* Filter inputs */}\n          <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 150px 150px 150px 100px', gap: 1, mb: 2 }}>\n            <input\n              placeholder=\"Filter Account Name...\"\n              value={filterModel.AccountName || ''}\n              onChange={(e) => handleFilterChange({ ...filterModel, AccountName: e.target.value })}\n              style={{ padding: '4px 8px' }}\n            />\n            <input\n              placeholder=\"Filter Industry...\"\n              value={filterModel.Industry || ''}\n              onChange={(e) => handleFilterChange({ ...filterModel, Industry: e.target.value })}\n              style={{ padding: '4px 8px' }}\n            />\n            <select value={filterModel.AccountStatus || ''} onChange={(e) => handleFilterChange({ ...filterModel, AccountStatus: e.target.value })} style={{ padding: '4px 8px', height: '30px' }}>\n              <option value=\"\">All</option>\n              <option value=\"Active\">Active</option>\n              <option value=\"Inactive\">Inactive</option>\n              <option value=\"On Hold\">On Hold</option>\n              <option value=\"Closed\">Closed</option>\n            </select>\n            <Box /> {/* Spacer */}\n            <Box /> {/* Contacts column has no filter */}\n          </Box>\n\n          {/* Account rows */}\n          {displayData.map((account) => (\n            <Box key={account.ID}>\n              <Box \n                sx={{ \n                  display: 'grid', \n                  gridTemplateColumns: '1fr 150px 150px 150px 100px', \n                  gap: 1, \n                  p: 1, \n                  my: 1,\n                  border: '1px solid #e0e0e0',\n                  borderRadius: 1,\n                  backgroundColor: account.AccountStatus === 'Active' ? '#f5f5f5' : \n                                  account.AccountStatus === 'Inactive' ? '#ffefef' :\n                                  '#fff',\n                  cursor: 'pointer',\n                  '&:hover': { backgroundColor: '#e3f2fd' }\n                }}\n                onClick={() => handleAccountSelect(account)}\n              >\n                <Box>\n                  <strong>{account.AccountName}</strong>\n                </Box>\n                <Box>\n                  {new Date(account.__mj_CreatedAt).toLocaleDateString()}\n                </Box>\n                <Box>\n                  {account.Industry || '-'}\n                </Box>\n                <Box>\n                  <Chip \n                    label={account.AccountStatus || 'Unknown'} \n                    size=\"small\" \n                    color={\n                      account.AccountStatus === 'Active' ? 'success' :\n                      account.AccountStatus === 'Inactive' ? 'error' :\n                      account.AccountStatus === 'On Hold' ? 'warning' :\n                      'default'\n                    }\n                  />\n                </Box>\n                <Box>\n                  {showContactCount && (\n                    <Chip label=\"?\" size=\"small\" variant=\"outlined\" sx={{ ml: 1 }} />\n                  )}\n                  <IconButton \n                    size=\"small\" \n                    onClick={(e) => {\n                      e.stopPropagation();\n                      toggleRowExpansion(account.ID);\n                    }}\n                    sx={{ ml: 1 }}\n                  >\n                    {expandedRows[account.ID] ? '−' : '+'}\n                  </IconButton>\n                </Box>\n              </Box>\n\n              {/* Expanded row content */}\n              {expandedRows[account.ID] && (\n                <Box sx={{ ml: 4, mb: 2, p: 2, borderLeft: '2px solid #e0e0e0' }}>\n                  <Typography variant=\"body2\">\n                    <strong>Created:</strong> {new Date(account.__mj_CreatedAt).toLocaleString()}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    <strong>Status:</strong> {account.AccountStatus}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    <strong>Industry:</strong> {account.Industry || 'Not specified'}\n                  </Typography>\n                </Box>\n              )}\n            </Box>\n          ))}\n          \n          {displayData.length === 0 && (\n            <Box sx={{ textAlign: 'center', py: 4 }}>\n              <Typography color=\"textSecondary\">\n                No accounts found matching the current filters.\n              </Typography>\n            </Box>\n          )}\n        </Box>\n      </Paper>\n\n      {/* Summary */}\n      <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\n        Showing {displayData.length} of {accounts?.length || 0} accounts\n      </Typography>\n    </Box>\n  );\n}"
    },
    {
      "name": "ContactListComponent",
      "description": "Displays a list of contacts associated with a specific account",
      "type": "table",
      "functionalRequirements": "Display contact information in a clean, readable format showing name, title, email, and phone for contacts related to a specific account.",
      "technicalDesign": "## ContactListComponent\n\n### Purpose:\nShows related contacts for a selected account with clear contact information display.\n\n### Key Features:\n- Clean table layout with contact details\n- Responsive design for mobile and desktop\n- Email and phone links for direct contact\n- Role/Title display for context\n- Empty state handling when no contacts exist\n\n### Data Requirements:\n- Uses Contacts entity with fields: ID, FullName, Title, Email, Phone, AccountID\n- Primary key: ID (used for unique identification)\n- Display fields: FullName, Title, Email, Phone\n- Filter field: AccountID (used to filter contacts by account)\n\n### Data Loading:\n- Accepts optional contacts prop, falls back to internal loading via RunView() with AccountID filter\n- Handles loading states gracefully\n\n### Display Logic:\n- Shows contact name prominently\n- Displays title/role in secondary focus\n- Email addresses are clickable mailto: links\n- Phone numbers are clickable tel: links\n- Handles missing data gracefully\n\n### Styling:\n- Uses Material-UI Table components\n- Consistent spacing and typography\n- Hover effects for interactive elements\n- Mobile-responsive with horizontal scroll on small screens",
      "dataRequirements": {
        "mode": "views",
        "description": "Contact list component data requirements",
        "entities": [
          {
            "name": "Contacts",
            "description": "Stores information about individual people associated with accounts",
            "displayFields": [
              "ID",
              "FullName",
              "Title",
              "Email",
              "Phone",
              "AccountID"
            ],
            "filterFields": [
              "AccountID",
              "FullName",
              "Email",
              "ID"
            ],
            "sortFields": [
              "FullName",
              "Title",
              "Email",
              "ID"
            ],
            "usageContext": "Contact information display for selected account",
            "permissionLevelNeeded": [
              "read"
            ],
            "fieldMetadata": [
              {
                "name": "ID",
                "sequence": 1,
                "type": "int",
                "allowsNull": false,
                "isPrimaryKey": true,
                "defaultInView": true
              },
              {
                "name": "FullName",
                "sequence": 6,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false,
                "defaultInView": false
              },
              {
                "name": "Title",
                "sequence": 7,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false,
                "defaultInView": false
              },
              {
                "name": "Email",
                "sequence": 9,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false,
                "defaultInView": false
              },
              {
                "name": "Phone",
                "sequence": 10,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false,
                "defaultInView": false
              },
              {
                "name": "AccountID",
                "sequence": 2,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false,
                "defaultInView": false
              }
            ]
          }
        ]
      },
      "properties": [
        {
          "name": "contacts",
          "type": "Array<{ID: number, FullName: string, Title: string, Email: string, Phone: string, AccountID: number}>",
          "required": false,
          "description": "Optional array of contact records. If not provided, component will load via RunView() with AccountID filter"
        },
        {
          "name": "accountId",
          "type": "number",
          "required": false,
          "description": "The account ID these contacts are associated with. Used for internal loading when contacts prop not provided"
        },
        {
          "name": "showTitle",
          "type": "boolean",
          "required": false,
          "defaultValue": true,
          "description": "Whether to show the contact title/role column"
        },
        {
          "name": "showEmail",
          "type": "boolean",
          "required": false,
          "defaultValue": true,
          "description": "Whether to show the email column"
        },
        {
          "name": "showPhone",
          "type": "boolean",
          "required": false,
          "defaultValue": true,
          "description": "Whether to show the phone column"
        }
      ],
      "events": [
        {
          "name": "onContactSelect",
          "description": "Triggered when a user clicks on a contact",
          "parameters": [
            {
              "name": "contactId",
              "type": "number",
              "description": "The ID of the selected contact"
            },
            {
              "name": "contactData",
              "type": "object",
              "description": "The complete contact data object"
            }
          ]
        }
      ],
      "exampleUsage": "<ContactListComponent\n  contacts={filteredContacts} // optional - will load internally if not provided\n  accountId={selectedAccountId}\n  showTitle={true}\n  showEmail={true}\n  showPhone={true}\n  onContactSelect={(contactId, contactData) => handleContactSelection(contactId, contactData)}\n/>",
      "libraries": [
        {
          "name": "@mui/material",
          "globalVariable": "MaterialUI",
          "version": "^5.15.2"
        }
      ],
      "location": "embedded",
      "relevantExamples": [
        {
          "namespace": "",
          "version": "",
          "relevance": 0.6524639649759691
        },
        {
          "namespace": "",
          "version": "",
          "relevance": 0.7050251069463181
        },
        {
          "namespace": "",
          "version": "",
          "relevance": 0.6428048308489857
        },
        {
          "namespace": "",
          "version": "",
          "relevance": 0.6419770029499149
        },
        {
          "namespace": "",
          "version": "",
          "relevance": 0.6391293509742175
        }
      ],
      "code": "function ContactListComponent({\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings,\n  contacts: propContacts,\n  accountId,\n  showTitle = true,\n  showEmail = true,\n  showPhone = true\n}) {\n  const [contacts, setContacts] = useState(propContacts);\n  const [loading, setLoading] = useState(!propContacts);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (propContacts) {\n      setContacts(propContacts);\n      setLoading(false);\n      return;\n    }\n\n    if (!accountId) {\n      setContacts([]);\n      setLoading(false);\n      return;\n    }\n\n    const loadContacts = async () => {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        const result = await utilities.rv.RunView({\n          EntityName: 'Contacts',\n          ExtraFilter: `AccountID = ${accountId}`,\n          Fields: ['ID', 'FullName', 'Title', 'Email', 'Phone']\n        });\n\n        if (result.Success) {\n          setContacts(result.Results || []);\n        } else {\n          setError('Failed to load contacts');\n          setContacts([]);\n        }\n      } catch (err) {\n        setError('Error loading contacts');\n        setContacts([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadContacts();\n  }, [propContacts, accountId]);\n\n  const handleContactClick = (contact) => () => {\n    if (callbacks && callbacks.onContactSelect) {\n      callbacks.onContactSelect(contact.ID, contact);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div style={{ padding: '16px', textAlign: 'center' }}>\n        <MaterialUI.Typography>Loading contacts...</MaterialUI.Typography>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: '16px', textAlign: 'center' }}>\n        <MaterialUI.Typography color=\"error\">{error}</MaterialUI.Typography>\n      </div>\n    );\n  }\n\n  if (!contacts || contacts.length === 0) {\n    return (\n      <div style={{ padding: '16px', textAlign: 'center' }}>\n        <MaterialUI.Typography variant=\"body1\" color=\"text.secondary\">\n          No contacts found\n        </MaterialUI.Typography>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ width: '100%', overflowX: 'auto' }}>\n      <MaterialUI.Table size=\"small\">\n        <MaterialUI.TableHead>\n          <MaterialUI.TableRow>\n            <MaterialUI.TableCell>Name</MaterialUI.TableCell>\n            {showTitle && <MaterialUI.TableCell>Title</MaterialUI.TableCell>}\n            {showEmail && <MaterialUI.TableCell>Email</MaterialUI.TableCell>}\n            {showPhone && <MaterialUI.TableCell>Phone</MaterialUI.TableCell>}\n          </MaterialUI.TableRow>\n        </MaterialUI.TableHead>\n        <MaterialUI.TableBody>\n          {contacts.map((contact) => (\n            <MaterialUI.TableRow\n              key={contact.ID}\n              hover\n              onClick={handleContactClick(contact)}\n              sx={{ cursor: 'pointer' }}\n            >\n              <MaterialUI.TableCell>\n                {contact.FullName || '-'}\n              </MaterialUI.TableCell>\n              {showTitle && (\n                <MaterialUI.TableCell>\n                  {contact.Title || '-'}\n                </MaterialUI.TableCell>\n              )}\n              {showEmail && (\n                <MaterialUI.TableCell>\n                  {contact.Email ? (\n                    <a href={`mailto:${contact.Email}`} style={{ color: 'inherit' }}>\n                      {contact.Email}\n                    </a>\n                  ) : '-'}\n                </MaterialUI.TableCell>\n              )}\n              {showPhone && (\n                <MaterialUI.TableCell>\n                  {contact.Phone ? (\n                    <a href={`tel:${contact.Phone}`} style={{ color: 'inherit' }}>\n                      {contact.Phone}\n                    </a>\n                  ) : '-'}\n                </MaterialUI.TableCell>\n              )}\n            </MaterialUI.TableRow>\n          ))}\n        </MaterialUI.TableBody>\n      </MaterialUI.Table>\n    </div>\n  );\n}"
    }
  ],
  "code": "function AccountOverviewPanel({ \n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings,\n  accounts: propAccounts,\n  contacts: propContacts,\n  initialSortField = 'AccountName',\n  initialSortDirection = 'asc',\n  showContactCount = true\n}) {\n  const { useState, useEffect, useMemo } = React;\n  const { AccountListComponent, ContactListComponent } = components;\n\n  // State management\n  const [accounts, setAccounts] = useState(propAccounts || []);\n  const [contacts, setContacts] = useState(propContacts || []);\n  const [selectedAccountId, setSelectedAccountId] = useState(savedUserSettings?.selectedAccountId);\n  const [loading, setLoading] = useState(!propAccounts);\n  const [error, setError] = useState(null);\n  const [sortField, setSortField] = useState(savedUserSettings?.sortField || initialSortField);\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || initialSortDirection);\n\n  // Load accounts if not provided\n  useEffect(() => {\n    if (!propAccounts) {\n      loadAccounts();\n    } else {\n      setAccounts(propAccounts);\n      setLoading(false);\n    }\n  }, []);\n\n  // Filter contacts by selected account\n  const filteredContacts = useMemo(() => {\n    if (!selectedAccountId) return [];\n    return contacts.filter(contact => contact.AccountID === selectedAccountId);\n  }, [contacts, selectedAccountId]);\n\n  // Load accounts from API\n  const loadAccounts = async () => {\n    try {\n      setLoading(true);\n      const result = await utilities.rv.RunView({\n        EntityName: 'Accounts',\n        Fields: ['ID', 'AccountName', '__mj_CreatedAt', 'Industry', 'AccountStatus'],\n        OrderBy: sortField,\n        ResultType: sortDirection\n      });\n\n      if (result.Success) {\n        setAccounts(result.Results);\n      } else {\n        setError('Failed to load accounts');\n      }\n    } catch (err) {\n      setError('Error loading accounts: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load contacts if not provided\n  const loadContacts = async () => {\n    if (!propContacts) {\n      const result = await utilities.rv.RunView({\n        EntityName: 'Contacts',\n        Fields: ['ID', 'FullName', 'Title', 'Email', 'Phone', 'AccountID']\n      });\n\n      if (result.Success) {\n        setContacts(result.Results);\n      }\n    }\n  };\n\n  // Load contacts on mount\n  useEffect(() => {\n    loadContacts();\n  }, []);\n\n  // Handle account selection\n  const handleAccountSelect = (accountId, accountData) => {\n    setSelectedAccountId(accountId);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedAccountId: accountId\n    });\n  };\n\n  // Handle sort change\n  const handleSortChange = (newSortField, newSortDirection) => {\n    setSortField(newSortField);\n    setSortDirection(newSortDirection);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortField: newSortField,\n      sortDirection: newSortDirection\n    });\n  };\n\n  // Handle filter change\n  const handleFilterChange = (filterModel) => {\n    // Filter functionality is handled internally by AccountListComponent\n  };\n\n  return (\n    <div style={{\n      display: 'flex',\n      height: '100vh',\n      gap: '16px',\n      padding: '16px',\n      fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif'\n    }}>\n      <div style={{\n        flex: 2,\n        display: 'flex',\n        flexDirection: 'column',\n        background: '#fff',\n        borderRadius: '8px',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n        overflow: 'hidden'\n      }}>\n        <div style={{\n          padding: '16px 20px',\n          borderBottom: '1px solid #e8e8e8',\n          background: '#fafafa'\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: '20px',\n            fontWeight: 600,\n            color: '#262626'\n          }}>Accounts Overview</h2>\n          <p style={{\n            margin: '4px 0 0',\n            fontSize: '14px',\n            color: '#666'\n          }}>Total: {accounts.length} organizations</p>\n        </div>\n        <div style={{\n          flex: 1,\n          overflow: 'hidden'\n        }}>\n          {loading ? (\n            <div style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%'\n            }}>\n              <div style={{\n                width: '40px',\n                height: '40px',\n                border: '3px solid #f3f3f3',\n                borderTop: '3px solid #3498db',\n                borderRadius: '50%',\n                animation: 'spin 1s linear infinite'\n              }}></div>\n              <style>{'@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }'}</style>\n              <span style={{\n                marginLeft: '12px',\n                color: '#666'\n              }}>Loading accounts...</span>\n            </div>\n          ) : error ? (\n            <div style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%',\n              color: '#ff4d4f',\n              fontSize: '16px'\n            }}>{error}</div>\n          ) : (\n            <AccountListComponent\n              accounts={accounts}\n              initialSortField={sortField}\n              initialSortDirection={sortDirection}\n              showContactCount={showContactCount}\n              onAccountSelect={handleAccountSelect}\n              onSortChange={handleSortChange}\n              onFilterChange={handleFilterChange}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings}\n              onSaveUserSettings={onSaveUserSettings}\n            />\n          )}\n        </div>\n      </div>\n      <div style={{\n        flex: 1,\n        background: '#fff',\n        borderRadius: '8px',\n        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\n        overflow: 'hidden'\n      }}>\n        <div style={{\n          padding: '16px 20px',\n          borderBottom: '1px solid #e8e8e8',\n          background: '#fafafa'\n        }}>\n          <h3 style={{\n            margin: 0,\n            fontSize: '18px',\n            fontWeight: 600,\n            color: '#262626'\n          }}>{selectedAccountId ? 'Related Contacts' : 'No Account Selected'}</h3>\n          <p style={{\n            margin: '4px 0 0',\n            fontSize: '14px',\n            color: '#666'\n          }}>{selectedAccountId ? `${filteredContacts.length} contacts found` : 'Select an account to view contacts'}</p>\n        </div>\n        <div style={{\n          flex: 1,\n          overflow: 'auto'\n        }}>\n          <ContactListComponent\n            contacts={filteredContacts.length > 0 ? filteredContacts : (propContacts || undefined)}\n            accountId={selectedAccountId}\n            showTitle={true}\n            showEmail={true}\n            showPhone={true}\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}"
}