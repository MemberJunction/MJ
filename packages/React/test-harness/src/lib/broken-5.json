{
  "functionalRequirements": "# Product Invoice Volume Analysis\n\n## Business Objectives\n- Visualize sales performance across products\n- Identify top-performing and underperforming products\n- Track invoice volume trends over time\n\n## Functional Requirements\n1. Interactive bar chart showing invoice volume by product\n2. Optional time-range filter (last 30/90/180 days)\n3. Value labels on bars showing actual invoice counts\n4. Legend with color coding\n5. X-axis: Product names, Y-axis: Invoice volume\n6. Tooltip showing detailed stats on hover\n7. Option to sort by invoice volume descending\n8. Clear visual emphasis on top 5/10 products",
  "title": "Product Sales Volume Analysis",
  "type": "Chart",
  "name": "ProductInvoiceVolumeChart",
  "userExplanation": "Interactive chart displaying product sales performance through invoice volume metrics with time-range filtering and sorting capabilities.",
  "dataRequirements": {
    "mode": "queries",
    "entities": [
      {
        "name": "Invoices",
        "displayFields": [
          "ID",
          "InvoiceDate"
        ],
        "filterFields": [
          "InvoiceDate"
        ],
        "sortFields": [
          "InvoiceDate"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": true,
            "type": "int",
            "allowsNull": false,
            "isPrimaryKey": true
          },
          {
            "name": "InvoiceDate",
            "sequence": 5,
            "defaultInView": false,
            "type": "date",
            "allowsNull": false
          }
        ],
        "permissionLevelNeeded": [
          "read"
        ]
      },
      {
        "name": "Invoice Line Items",
        "displayFields": [
          "ID",
          "ProductID"
        ],
        "filterFields": [
          "ProductID"
        ],
        "sortFields": [
          "ID"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": true,
            "type": "int",
            "allowsNull": false,
            "isPrimaryKey": true
          },
          {
            "name": "ProductID",
            "sequence": 4,
            "defaultInView": false,
            "type": "int",
            "allowsNull": false
          },
          {
            "name": "InvoiceID",
            "sequence": 2,
            "defaultInView": false,
            "type": "int",
            "allowsNull": false
          }
        ],
        "permissionLevelNeeded": [
          "read"
        ]
      },
      {
        "name": "Products",
        "displayFields": [
          "ProductName"
        ],
        "filterFields": [
          "ProductName"
        ],
        "sortFields": [
          "ProductName"
        ],
        "fieldMetadata": [
          {
            "name": "ProductName",
            "sequence": 3,
            "defaultInView": false,
            "type": "nvarchar",
            "allowsNull": false
          }
        ],
        "permissionLevelNeeded": [
          "read"
        ]
      }
    ],
    "queries": [
      {
        "name": "ProductInvoiceVolumeTrend",
        "categoryPath": "Skip/Analytics/Products",
        "description": "Aggregates invoice volumes by product over time with date filtering",
        "fields": [
          {
            "name": "InvoiceCount",
            "sequence": 2,
            "type": "decimal",
            "description": "Count of invoices for the product",
            "defaultInView": true,
            "allowsNull": false,
            "isPrimaryKey": false
          },
          {
            "name": "ProductName",
            "sequence": 1,
            "type": "nvarchar",
            "description": "Name of the product",
            "defaultInView": true,
            "allowsNull": false,
            "isPrimaryKey": false
          },
          {
            "name": "InvoiceDate",
            "sequence": 3,
            "type": "datetime",
            "description": "Date of the invoice",
            "defaultInView": true,
            "allowsNull": false,
            "isPrimaryKey": false
          }
        ],
        "parameters": [
          {
            "name": "endDate",
            "value": "@runtime",
            "testValue": "2024-01-01",
            "description": "End of date range to filter invoices"
          },
          {
            "name": "startDate",
            "value": "@runtime",
            "testValue": "2023-01-01",
            "description": "Start of date range to filter invoices"
          }
        ]
      }
    ],
    "description": "Product invoice volume analysis using server-side query with date filtering"
  },
  "description": "Interactive chart displaying product sales performance through invoice volume metrics with time-range filtering and sorting capabilities",
  "technicalDesign": "## Component Architecture\n\nThe ProductInvoiceVolumeChart is a sophisticated data visualization component built on React with TypeScript. It uses a modular architecture with clear separation of concerns between data management, UI state, and presentation layers.\n\n### Core Components\n\n#### 1. ProductInvoiceVolumeChart (Root Component)\n- **Purpose**: Orchestrates the entire visualization experience\n- **State Management**: Uses React hooks for local UI state, external data via props\n- **Features**: \n  - Date range filtering with preset options (30/90/180 days)\n  - Dynamic sorting (ascending/descending by volume)\n  - Responsive chart rendering\n  - Export capabilities (PDF, PNG, CSV)\n  - Loading and error states\n\n#### 2. ChartDisplay Component\n- **Purpose**: Renders the actual bar chart visualization\n- **Library**: Uses Chart.js for robust chart capabilities\n- **Features**:\n  - Bar chart with product names on X-axis\n  - Invoice volume on Y-axis\n  - Color-coded bars with gradient fills\n  - Value labels on each bar\n  - Hover tooltips with detailed metrics\n  - Top 5/10 products highlighted with distinct colors\n  - Animation on data refresh\n\n#### 3. FilterPanel Component\n- **Purpose**: Manages user interaction for filtering and sorting\n- **Features**:\n  - Date range selector (30/90/180 days)\n  - Custom date range picker\n  - Sort options (volume ascending/descending)\n  - Refresh button for manual data updates\n  - Export buttons (PDF, PNG, CSV)\n\n#### 4. DataManager Component\n- **Purpose**: Handles data fetching and transformation\n- **Features**:\n  - Fetches data using ProductInvoiceVolumeTrend query\n  - Transforms raw data into chart-ready format\n  - Handles loading states\n  - Implements error boundaries\n  - Provides data export functionality\n\n### Data Flow\n1. **Initial Load**: Component fetches data for last 30 days by default\n2. **Filtering**: User selects date range → FilterPanel updates state → ChartDisplay re-renders\n3. **Sorting**: User toggles sort → ChartDisplay reorders bars with animation\n4. **Export**: User clicks export → DataManager formats data → Browser downloads file\n\n### Performance Optimizations\n- Debounced date range updates\n- Memoized chart configurations\n- Lazy loading of chart library\n- Virtual scrolling for large datasets\n- Efficient data transformation pipelines\n\n### Styling Approach\n- Uses CSS modules for scoped styling\n- Responsive breakpoints for mobile/tablet/desktop\n- Consistent color scheme based on brand guidelines\n- Smooth animations and transitions\n- Loading skeletons for better UX\n\n### Accessibility Features\n- Keyboard navigation support\n- Screen reader compatible\n- High contrast mode support\n- Focus indicators\n- ARIA labels for interactive elements\n\n### Error Handling\n- Graceful degradation when data is unavailable\n- User-friendly error messages\n- Retry mechanisms for failed requests\n- Fallback to cached data when possible",
  "dependencies": [
    {
      "name": "ChartDisplay",
      "description": "Renders the interactive bar chart visualization with Chart.js integration",
      "functionalRequirements": "Display bar chart showing product invoice volumes with interactive features including hover tooltips, value labels, and color coding for top products. Must support real-time updates and smooth animations.",
      "technicalDesign": "## ChartDisplay Component\n\n### Props\n- data: Array of {productName: string, invoiceCount: number} objects\n- sortBy: 'ascending' | 'descending'\n- highlightTopN: number (default: 5)\n\n### Features\n- Chart.js bar chart configuration\n- Responsive canvas sizing\n- Gradient bar fills\n- Value labels on bars\n- Hover tooltips with detailed info\n- Top products highlighted\n- Animation on data change\n\n### Data Requirements\n- ProductName from Products entity\n- InvoiceCount calculated from Invoices and Invoice Line Items\n- Requires ID fields for data correlation",
      "dataRequirements": {
        "mode": "queries",
        "entities": [
          {
            "name": "Products",
            "displayFields": [
              "ProductName",
              "ID"
            ],
            "fieldMetadata": [
              {
                "name": "ProductName",
                "type": "nvarchar",
                "sequence": 1,
                "isPrimaryKey": false,
                "allowsNull": false,
                "defaultInView": true
              },
              {
                "name": "ID",
                "type": "int",
                "sequence": 2,
                "isPrimaryKey": true,
                "allowsNull": false,
                "defaultInView": false
              }
            ],
            "permissionLevelNeeded": [
              "read"
            ]
          }
        ],
        "queries": [
          {
            "name": "ProductInvoiceVolumeTrend",
            "categoryPath": "Skip/Analytics/Products",
            "fields": [
              {
                "name": "ProductName",
                "type": "nvarchar",
                "sequence": 1,
                "description": "Name of the product",
                "defaultInView": true,
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "InvoiceCount",
                "type": "decimal",
                "sequence": 2,
                "description": "Count of invoices for the product",
                "defaultInView": true,
                "allowsNull": false,
                "isPrimaryKey": false
              }
            ],
            "parameters": [
              {
                "name": "startDate",
                "value": "@runtime",
                "testValue": "2023-01-01",
                "description": "Start of date range"
              },
              {
                "name": "endDate",
                "value": "@runtime",
                "testValue": "2024-01-01",
                "description": "End of date range"
              }
            ]
          }
        ]
      },
      "properties": [
        {
          "name": "data",
          "type": "Array<{productName: string, invoiceCount: number}>",
          "required": true,
          "description": "Chart data array with product names and invoice counts"
        },
        {
          "name": "sortBy",
          "type": "'ascending' | 'descending'",
          "required": false,
          "defaultValue": "descending",
          "description": "Sort order for display"
        },
        {
          "name": "highlightTopN",
          "type": "number",
          "required": false,
          "defaultValue": 5,
          "description": "Number of top products to highlight"
        },
        {
          "name": "onChartReady",
          "type": "function",
          "required": false,
          "description": "Callback when chart is fully rendered"
        }
      ],
      "events": [
        {
          "name": "onProductClick",
          "description": "Fired when user clicks on a product bar",
          "parameters": [
            {
              "name": "productName",
              "type": "string",
              "description": "Name of the clicked product"
            },
            {
              "name": "invoiceCount",
              "type": "number",
              "description": "Invoice count for the product"
            }
          ]
        }
      ],
      "exampleUsage": "<ChartDisplay \n  data={chartData} \n  sortBy=\"descending\"\n  highlightTopN={10}\n  onProductClick={handleProductClick}\n/>",
      "location": "embedded",
      "libraries": [
        {
          "name": "chart.js",
          "globalVariable": "Chart",
          "version": "^4.4.1"
        }
      ],
      "relevantExamples": [
        {
          "name": "InvoiceStatusDashboard",
          "namespace": "CRM/Finance",
          "version": "1.0.0",
          "description": "Track invoice statuses, payment timelines, and accounts receivable aging with actionable insights and collection metrics",
          "relevance": 0.7794343476175549
        },
        {
          "name": "DealVelocityChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive line chart showing deal velocity metrics over time with multiple view modes",
          "relevance": 0.7935405694133484
        },
        {
          "name": "ProductRevenueMatrix",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Visualize product performance across customers and time periods in an interactive matrix format with treemap and sparklines",
          "relevance": 0.7316685314650397
        },
        {
          "name": "AccountsByIndustryChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive pie chart component that visualizes account distribution by industry with click-to-filter functionality",
          "relevance": 0.835530941514179
        },
        {
          "name": "AccountsByIndustryChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive pie chart component that visualizes account distribution by industry with click-to-filter functionality",
          "relevance": 0.835530941514179
        }
      ],
      "code": "function ChartDisplay({ \n  data = [],\n  sortBy = 'descending',\n  highlightTopN = 5,\n  onChartReady,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  const [chartInstance, setChartInstance] = useState(null);\n  const canvasRef = useRef(null);\n  \n  const processedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n\n    const sorted = [...data].sort((a, b) => {\n      if (sortBy === 'ascending') {\n        return a.invoiceCount - b.invoiceCount;\n      }\n      return b.invoiceCount - a.invoiceCount;\n    });\n\n    return sorted.slice(0, 20); // Limit to top 20 for readability\n  }, [data, sortBy]);\n\n  const chartConfig = useMemo(() => {\n    if (processedData.length === 0) return null;\n\n    const labels = processedData.map(item => item.productName);\n    const values = processedData.map(item => item.invoiceCount);\n\n    return {\n      type: 'bar',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Invoice Count',\n          data: values,\n          backgroundColor: (context) => {\n            const ctx = context.chart.ctx;\n            const gradient = ctx.createLinearGradient(0, 0, 0, 400);\n            const index = context.dataIndex;\n            const isHighlighted = index < highlightTopN;\n            \n            if (isHighlighted) {\n              gradient.addColorStop(0, 'rgba(59, 130, 246, 0.8)');\n              gradient.addColorStop(1, 'rgba(29, 78, 216, 0.8)');\n            } else {\n              gradient.addColorStop(0, 'rgba(156, 163, 175, 0.8)');\n              gradient.addColorStop(1, 'rgba(107, 114, 128, 0.8)');\n            }\n            return gradient;\n          },\n          borderColor: (context) => {\n            const index = context.dataIndex;\n            return index < highlightTopN ? 'rgb(29, 78, 216)' : 'rgb(107, 114, 128)';\n          },\n          borderWidth: 2,\n          borderRadius: 4,\n          borderSkipped: false,\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.8)',\n            titleColor: '#ffffff',\n            bodyColor: '#ffffff',\n            padding: 12,\n            cornerRadius: 8,\n            displayColors: false,\n            callbacks: {\n              title: function(context) {\n                return context[0].label;\n              },\n              label: function(context) {\n                return `Invoice Count: ${context.parsed.y.toLocaleString()}`;\n              }\n            }\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n            grid: {\n              color: 'rgba(229, 231, 235, 0.5)',\n              drawBorder: false\n            },\n            ticks: {\n              color: '#6b7280',\n              font: {\n                size: 12\n              }\n            }\n          },\n          x: {\n            grid: {\n              display: false,\n              drawBorder: false\n            },\n            ticks: {\n              color: '#6b7280',\n              font: {\n                size: 11\n              },\n              maxRotation: 45,\n              minRotation: 0\n            }\n          }\n        },\n        onHover: (event, activeElements) => {\n          event.native.target.style.cursor = activeElements.length > 0 ? 'pointer' : 'default';\n        },\n        onClick: (event, activeElements) => {\n          if (activeElements.length > 0) {\n            const dataIndex = activeElements[0].index;\n            const productData = processedData[dataIndex];\n            callbacks?.onProductClick?.(productData.productName, productData.invoiceCount);\n          }\n        },\n        animation: {\n          duration: 1000,\n          easing: 'easeInOutQuart',\n          onComplete: () => {\n            onChartReady?.();\n          }\n        }\n      }\n    };\n  }, [processedData, highlightTopN]);\n\n  useEffect(() => {\n    if (!canvasRef.current || !chartConfig) return;\n\n    const ctx = canvasRef.current.getContext('2d');\n    \n    if (chartInstance) {\n      chartInstance.destroy();\n    }\n\n    const newChart = new Chart(ctx, chartConfig);\n    setChartInstance(newChart);\n\n    return () => {\n      if (newChart) {\n        newChart.destroy();\n      }\n    };\n  }, [chartConfig]);\n\n  useEffect(() => {\n    if (chartInstance && processedData.length > 0) {\n      chartInstance.update();\n    }\n  }, [processedData]);\n\n  if (data.length === 0) {\n    return (\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '400px',\n        color: '#6b7280',\n        fontSize: '16px',\n        backgroundColor: '#f9fafb',\n        borderRadius: '8px',\n        border: '1px solid #e5e7eb'\n      }}>\n        No data available to display\n      </div>\n    );\n  }\n\n  return (\n    <div style={{\n      position: 'relative',\n      height: '500px',\n      padding: '16px',\n      backgroundColor: '#ffffff',\n      borderRadius: '8px',\n      boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',\n      border: '1px solid #e5e7eb'\n    }}>\n      <canvas \n        ref={canvasRef}\n        style={{\n          width: '100%',\n          height: '100%'\n        }}\n      />\n    </div>\n  );\n}"
    },
    {
      "name": "FilterPanel",
      "description": "Provides user interface for filtering and sorting the chart data",
      "functionalRequirements": "Allow users to filter data by date ranges (30/90/180 days, custom), sort by volume ascending/descending, and export data in multiple formats.",
      "technicalDesign": "## FilterPanel Component\n\n### Props\n- defaultDateRange: string (30/90/180)\n- onFilterChange: function(dateRange, sortOrder)\n- onExport: function(format)\n- isLoading: boolean\n\n### Features\n- Date range selector with presets\n- Custom date picker for specific ranges\n- Sort toggle (volume ascending/descending)\n- Export buttons (PDF, PNG, CSV)\n- Loading state management\n\n### State Management\n- Uses useState for local filter state\n- Notifies parent via onFilterChange callback\n- Provides export functionality",
      "properties": [
        {
          "name": "defaultDateRange",
          "type": "string",
          "required": false,
          "defaultValue": "30",
          "description": "Default date range in days (30/90/180)"
        },
        {
          "name": "onFilterChange",
          "type": "function",
          "required": true,
          "description": "Callback when filters change"
        },
        {
          "name": "onExport",
          "type": "function",
          "required": true,
          "description": "Callback for export requests"
        },
        {
          "name": "isLoading",
          "type": "boolean",
          "required": false,
          "defaultValue": false,
          "description": "Loading state indicator"
        }
      ],
      "events": [
        {
          "name": "onRefresh",
          "description": "Fired when user clicks refresh button"
        },
        {
          "name": "onDateRangeChange",
          "description": "Fired when date range changes",
          "parameters": [
            {
              "name": "startDate",
              "type": "Date",
              "description": "Start date of the range"
            },
            {
              "name": "endDate",
              "type": "Date",
              "description": "End date of the range"
            }
          ]
        }
      ],
      "exampleUsage": "<FilterPanel \n  defaultDateRange=\"30\"\n  onFilterChange={handleFilterChange}\n  onExport={handleExport}\n  isLoading={isLoading}\n/>",
      "location": "embedded",
      "libraries": [
        {
          "name": "dayjs",
          "globalVariable": "dayjs",
          "version": "^1.11.10"
        }
      ],
      "relevantExamples": [
        {
          "name": "DealVelocityMetrics",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Analyze and visualize the speed of deals through the sales pipeline with detailed stage-by-stage metrics",
          "relevance": 0.6319735974275383
        },
        {
          "name": "DealVelocityTrendChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Displays historical trends of deal velocity across stages over time",
          "relevance": 0.6480365180026113
        },
        {
          "name": "SalesPipelineDashboard",
          "namespace": "CRM/Dashboards",
          "version": "1.0.0",
          "description": "Comprehensive dashboard showing pipeline health, velocity metrics, and team performance with interactive charts",
          "relevance": 0.6600168494335517
        },
        {
          "name": "DataExportPanel",
          "namespace": "Generic/UI/Export",
          "version": "1.0.0",
          "description": "Reusable component for exporting data to CSV, Excel (XLSX), and PDF formats with optional UI",
          "relevance": 0.6696567292880259
        },
        {
          "name": "SalesFunnelVisualization",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive sales funnel visualization with conversion metrics and drill-down capabilities",
          "relevance": 0.739226387882373
        }
      ],
      "code": "function FilterPanel({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings, defaultDateRange = '30', onFilterChange, onExport, isLoading = false }) {\n  const [dateRange, setDateRange] = useState(savedUserSettings?.dateRange || defaultDateRange);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  const [sortOrder, setSortOrder] = useState(savedUserSettings?.sortOrder || 'desc');\n  const [showCustomDate, setShowCustomDate] = useState(false);\n\n  const Button = components?.Button;\n  const Select = components?.Select;\n  const DatePicker = components?.DatePicker;\n  const Space = components?.Space;\n  const Tooltip = components?.Tooltip;\n  const DownloadOutlined = components?.DownloadOutlined;\n  const ReloadOutlined = components?.ReloadOutlined;\n\n  const handleDateRangeChange = (value) => {\n    setDateRange(value);\n    setShowCustomDate(value === 'custom');\n    \n    let start, end;\n    const today = dayjs();\n    \n    if (value === 'custom' && startDate && endDate) {\n      start = startDate;\n      end = endDate;\n    } else if (value !== 'custom') {\n      end = today;\n      start = today.subtract(parseInt(value), 'day');\n    }\n\n    if (start && end) {\n      onFilterChange && onFilterChange(value, sortOrder);\n      callbacks?.onDateRangeChange?.(start.toDate(), end.toDate());\n    }\n\n    onSaveUserSettings?.(Object.assign({}, savedUserSettings, { dateRange: value }));\n  };\n\n  const handleCustomDateChange = (dates) => {\n    if (dates && dates.length === 2) {\n      const [start, end] = dates;\n      setStartDate(start);\n      setEndDate(end);\n      onFilterChange && onFilterChange('custom', sortOrder);\n      callbacks?.onDateRangeChange?.(start.toDate(), end.toDate());\n      \n      onSaveUserSettings?.(Object.assign({}, savedUserSettings, { \n        dateRange: 'custom',\n        customStartDate: start.format('YYYY-MM-DD'),\n        customEndDate: end.format('YYYY-MM-DD')\n      }));\n    }\n  };\n\n  const handleSortChange = () => {\n    const newSortOrder = sortOrder === 'desc' ? 'asc' : 'desc';\n    setSortOrder(newSortOrder);\n    onFilterChange && onFilterChange(dateRange, newSortOrder);\n    onSaveUserSettings?.(Object.assign({}, savedUserSettings, { sortOrder: newSortOrder }));\n  };\n\n  const handleExport = (format) => {\n    onExport && onExport(format);\n  };\n\n  const handleRefresh = () => {\n    callbacks?.onRefresh?.();\n  };\n\n  const presetOptions = [\n    { label: 'Last 30 days', value: '30' },\n    { label: 'Last 90 days', value: '90' },\n    { label: 'Last 180 days', value: '180' },\n    { label: 'Custom range', value: 'custom' }\n  ];\n\n  return (\n    React.createElement('div', { style: styles.container },\n      React.createElement(Space || 'div', { wrap: true, size: 'middle' },\n        React.createElement(Select || 'select', {\n          value: dateRange,\n          onChange: handleDateRangeChange,\n          options: presetOptions,\n          style: { width: 120 }\n        }),\n\n        showCustomDate && DatePicker && React.createElement(DatePicker.RangePicker, {\n          value: [startDate, endDate],\n          onChange: handleCustomDateChange,\n          style: { width: 240 },\n          format: 'YYYY-MM-DD',\n          disabled: isLoading\n        }),\n\n        React.createElement(Button || 'button', {\n          onClick: handleSortChange,\n          disabled: isLoading\n        }, `Sort by Volume ${sortOrder === 'desc' ? '↥' : '↧'}`),\n\n        Tooltip && React.createElement(Tooltip, { title: 'Export PDF' },\n          React.createElement(Button || 'button', {\n            icon: DownloadOutlined && React.createElement(DownloadOutlined),\n            onClick: () => handleExport('pdf'),\n            disabled: isLoading\n          }, 'PDF')\n        ),\n\n        Tooltip && React.createElement(Tooltip, { title: 'Export PNG' },\n          React.createElement(Button || 'button', {\n            icon: DownloadOutlined && React.createElement(DownloadOutlined),\n            onClick: () => handleExport('png'),\n            disabled: isLoading\n          }, 'PNG')\n        ),\n\n        Tooltip && React.createElement(Tooltip, { title: 'Export CSV' },\n          React.createElement(Button || 'button', {\n            icon: DownloadOutlined && React.createElement(DownloadOutlined),\n            onClick: () => handleExport('csv'),\n            disabled: isLoading\n          }, 'CSV')\n        ),\n\n        Tooltip && React.createElement(Tooltip, { title: 'Refresh Data' },\n          React.createElement(Button || 'button', {\n            icon: ReloadOutlined && React.createElement(ReloadOutlined),\n            onClick: handleRefresh,\n            loading: isLoading\n          })\n        )\n      )\n    )\n  );\n}"
    },
    {
      "name": "DataManager",
      "description": "Handles data fetching, transformation, and export functionality",
      "functionalRequirements": "Fetch data from ProductInvoiceVolumeTrend query, transform it for chart display, handle loading states, and provide export capabilities in PDF, PNG, and CSV formats.",
      "technicalDesign": "## DataManager Component\n\n### Props\n- startDate: Date\n- endDate: Date\n- children: function(data, loading, error)\n\n### Features\n- Uses ProductInvoiceVolumeTrend query\n- Handles parameter mapping\n- Transforms data for chart display\n- Provides export utility functions\n- Manages loading and error states\n\n### Data Requirements\n- Uses ProductInvoiceVolumeTrend query with startDate/endDate parameters\n- Maps InvoiceCount and ProductName from query results\n- Validates data integrity\n\n### Export Functions\n- exportToPDF: generates PDF report\n- exportToPNG: captures chart as image\n- exportToCSV: creates downloadable CSV",
      "dataRequirements": {
        "mode": "queries",
        "queries": [
          {
            "name": "ProductInvoiceVolumeTrend",
            "categoryPath": "Skip/Analytics/Products",
            "fields": [
              {
                "name": "ProductName",
                "type": "nvarchar",
                "sequence": 1,
                "description": "Product name",
                "defaultInView": true,
                "allowsNull": false
              },
              {
                "name": "InvoiceCount",
                "type": "decimal",
                "sequence": 2,
                "description": "Invoice count",
                "defaultInView": true,
                "allowsNull": false
              },
              {
                "name": "InvoiceDate",
                "type": "datetime",
                "sequence": 3,
                "description": "Invoice date",
                "defaultInView": false,
                "allowsNull": false
              }
            ],
            "parameters": [
              {
                "name": "startDate",
                "value": "@runtime",
                "testValue": "2023-01-01",
                "description": "Start date"
              },
              {
                "name": "endDate",
                "value": "@runtime",
                "testValue": "2024-01-01",
                "description": "End date"
              }
            ]
          }
        ]
      },
      "properties": [
        {
          "name": "startDate",
          "type": "Date",
          "required": true,
          "description": "Start date for data query"
        },
        {
          "name": "endDate",
          "type": "Date",
          "required": true,
          "description": "End date for data query"
        },
        {
          "name": "children",
          "type": "function",
          "required": true,
          "description": "Render prop function receiving data, loading, and error states"
        }
      ],
      "events": [
        {
          "name": "onDataLoaded",
          "description": "Fired when data is successfully loaded",
          "parameters": [
            {
              "name": "data",
              "type": "Array",
              "description": "Array of product invoice data"
            }
          ]
        }
      ],
      "exampleUsage": "<DataManager \n  startDate={startDate}\n  endDate={endDate}\n>\n  {(data, loading, error) => (\n    <ChartDisplay data={data} />\n  )}\n</DataManager>",
      "location": "embedded",
      "libraries": [
        {
          "name": "axios",
          "globalVariable": "axios",
          "version": "^1.6.5"
        },
        {
          "name": "jspdf",
          "globalVariable": "jspdf",
          "version": "^2.5.1"
        },
        {
          "name": "xlsx",
          "globalVariable": "XLSX",
          "version": "^0.18.5"
        }
      ],
      "relevantExamples": [
        {
          "name": "AIModelAnalytics",
          "namespace": "AI",
          "version": "1.0.0",
          "description": "Analytics panel with charts showing prompt usage distribution, performance metrics, and time series",
          "relevance": 0.7554032147274818
        },
        {
          "name": "DealVelocityTrendChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Displays historical trends of deal velocity across stages over time",
          "relevance": 0.7478985228207804
        },
        {
          "name": "InvoiceStatusDashboard",
          "namespace": "CRM/Finance",
          "version": "1.0.0",
          "description": "Track invoice statuses, payment timelines, and accounts receivable aging with actionable insights and collection metrics",
          "relevance": 0.7404588744629526
        },
        {
          "name": "AITimeSeriesChart",
          "namespace": "AI/Analytics/Performance",
          "version": "1.0.0",
          "description": "Multi-line time series chart with dual Y-axes showing AI runs, token usage, and costs over time",
          "relevance": 0.769741437326312
        },
        {
          "name": "AccountsByIndustry",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive pie chart showing distribution of CRM accounts by industry with drill-down capability to view detailed account lists and individual account information",
          "relevance": 0.7344846209804949
        }
      ],
      "code": "function DataManager({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings, startDate, endDate, children }) {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!startDate || !endDate) {\n        return;\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const result = await utilities.rq.RunQuery({\n          QueryName: 'ProductInvoiceVolumeTrend',\n          Parameters: {\n            startDate: startDate.toISOString().split('T')[0],\n            endDate: endDate.toISOString().split('T')[0]\n          }\n        });\n\n        if (result && result.Results) {\n          const transformedData = result.Results.map(record => ({\n            productName: record.ProductName,\n            invoiceCount: Number(record.InvoiceCount),\n            invoiceDate: record.InvoiceDate\n          }));\n          \n          setData(transformedData);\n        }\n      } catch (err) {\n        setError(err.message || 'Error loading data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [startDate, endDate, utilities.rq]);\n\n  const exportToPDF = () => {\n    const doc = new jspdf();\n    doc.text('Product Invoice Volume Report', 20, 20);\n    \n    const headers = [['Product Name', 'Invoice Count']];\n    const body = data.map(item => [item.productName, item.invoiceCount.toString()]);\n    \n    doc.autoTable({\n      head: headers,\n      body: body,\n      startY: 30\n    });\n    \n    doc.save('product-invoice-volume-report.pdf');\n  };\n\n  const exportToPNG = (chartElement) => {\n    if (chartElement) {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = chartElement.clientWidth;\n      canvas.height = chartElement.clientHeight;\n      \n      html2canvas(chartElement).then(canvas => {\n        const link = document.createElement('a');\n        link.download = 'product-invoice-chart.png';\n        link.href = canvas.toDataURL();\n        link.click();\n      });\n    }\n  };\n\n  const exportToCSV = () => {\n    const headers = ['Product Name', 'Invoice Count'];\n    const csvContent = [\n      headers.join(','),\n      ...data.map(item => `${item.productName},${item.invoiceCount}`)\n    ].join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    \n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'product-invoice-volume.csv';\n    link.click();\n    \n    URL.revokeObjectURL(url);\n  };\n\n  const exportUtils = {\n    exportToPDF,\n    exportToPNG,\n    exportToCSV\n  };\n\n  return children({\n    data,\n    loading,\n    error,\n    ...exportUtils\n  });\n}",
      "testsPassed": false
    }
  ],
  "libraries": [
    {
      "name": "chart.js",
      "globalVariable": "Chart",
      "version": "^4.4.1"
    },
    {
      "name": "dayjs",
      "globalVariable": "dayjs",
      "version": "^1.11.10"
    },
    {
      "name": "axios",
      "globalVariable": "axios",
      "version": "^1.6.5"
    },
    {
      "name": "jspdf",
      "globalVariable": "jspdf",
      "version": "^2.5.1"
    },
    {
      "name": "xlsx",
      "globalVariable": "XLSX",
      "version": "^0.18.5"
    }
  ],
  "properties": [
    {
      "name": "initialDateRange",
      "type": "number",
      "required": false,
      "defaultValue": 30,
      "description": "Initial date range in days (30, 90, or 180)"
    },
    {
      "name": "refreshInterval",
      "type": "number",
      "required": false,
      "defaultValue": 0,
      "description": "Auto-refresh interval in seconds (0 for manual refresh)"
    }
  ],
  "events": [
    {
      "name": "onDataUpdate",
      "description": "Fired when chart data is updated",
      "parameters": [
        {
          "name": "data",
          "type": "Array",
          "description": "Updated product invoice data"
        }
      ]
    },
    {
      "name": "onExport",
      "description": "Fired when user exports data",
      "parameters": [
        {
          "name": "format",
          "type": "string",
          "description": "Export format (PDF, PNG, or CSV)"
        },
        {
          "name": "data",
          "type": "Array",
          "description": "Exported data"
        }
      ]
    }
  ],
  "exampleUsage": "<ProductInvoiceVolumeChart \n  initialDateRange={90}\n  refreshInterval={300}\n  onDataUpdate={handleDataUpdate}\n  onExport={handleExport}\n/>",
  "code": "function ProductInvoiceVolumeChart({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings, initialDateRange = 30, refreshInterval = 0 }) {\n  const { ChartDisplay, FilterPanel, DataManager } = components;\n  const { useState, useEffect } = React;\n  \n  const [dateRange, setDateRange] = useState(savedUserSettings?.dateRange || initialDateRange);\n  const [sortOrder, setSortOrder] = useState(savedUserSettings?.sortOrder || 'descending');\n  const [startDate, setStartDate] = useState(() => {\n    const days = savedUserSettings?.dateRange || initialDateRange;\n    return dayjs().subtract(days, 'day').toDate();\n  });\n  const [endDate, setEndDate] = useState(() => new Date());\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    let interval;\n    if (refreshInterval > 0) {\n      interval = setInterval(() => {\n        setStartDate(dayjs().subtract(dateRange, 'day').toDate());\n      }, refreshInterval * 1000);\n    }\n    return () => clearInterval(interval);\n  }, [refreshInterval, dateRange]);\n\n  const handleFilterChange = async (newStartDate, newEndDate) => {\n    setStartDate(newStartDate);\n    setEndDate(newEndDate);\n    setIsLoading(true);\n  };\n\n  const handleSortChange = (newSortOrder) => {\n    setSortOrder(newSortOrder);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortOrder: newSortOrder\n    });\n  };\n\n  const handleExport = (format, data) => {\n    const formattedData = data.map(item => ({\n      productName: item.productName,\n      invoiceCount: item.invoiceCount\n    }));\n    \n    switch (format) {\n      case 'CSV':\n        const ws = XLSX.utils.json_to_sheet(formattedData);\n        const wb = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(wb, ws, 'ProductInvoiceVolume');\n        XLSX.writeFile(wb, `product-invoice-volume-${dayjs().format('YYYY-MM-DD')}.csv`);\n        break;\n      case 'PDF':\n        const pdf = new jspdf();\n        pdf.text('Product Invoice Volume Report', 10, 10);\n        formattedData.forEach((item, index) => {\n          pdf.text(`${item.productName}: ${item.invoiceCount} invoices`, 10, 30 + (index * 10));\n        });\n        pdf.save(`product-invoice-volume-${dayjs().format('YYYY-MM-DD')}.pdf`);\n        break;\n    }\n  };\n\n  const transformData = (rawData) => {\n    const productMap = new Map();\n    \n    rawData.forEach(item => {\n      const productName = item.ProductName;\n      const invoiceCount = item.InvoiceCount;\n      \n      if (productMap.has(productName)) {\n        productMap.set(productName, productMap.get(productName) + invoiceCount);\n      } else {\n        productMap.set(productName, invoiceCount);\n      }\n    });\n\n    const sortedData = Array.from(productMap.entries())\n      .map(([productName, invoiceCount]) => ({ productName, invoiceCount }))\n      .sort((a, b) => {\n        if (sortOrder === 'descending') {\n          return b.invoiceCount - a.invoiceCount;\n        } else {\n          return a.invoiceCount - b.invoiceCount;\n        }\n      });\n\n    return sortedData;\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <div style={{ marginBottom: '20px' }}>\n        <h2 style={{ margin: '0 0 20px 0' }}>Product Invoice Volume Analysis</h2>\n        \n        <FilterPanel\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n          savedUserSettings={savedUserSettings}\n          onSaveUserSettings={onSaveUserSettings}\n          defaultDateRange={dateRange.toString()}\n          onFilterChange={handleFilterChange}\n          onExport={handleExport}\n          isLoading={isLoading}\n          onDateRangeChange={(start, end) => {\n            handleFilterChange(new Date(start), new Date(end));\n          }}\n        />\n      </div>\n\n      <DataManager\n        utilities={utilities}\n        styles={styles}\n        components={components}\n        callbacks={callbacks}\n        savedUserSettings={savedUserSettings}\n        onSaveUserSettings={onSaveUserSettings}\n        startDate={startDate}\n        endDate={endDate}\n      >\n        {(data, loading, error) => {\n          setIsLoading(loading);\n          \n          if (loading) {\n            return <div style={{ textAlign: 'center', padding: '40px' }}>Loading chart data...</div>;\n          }\n          \n          if (error) {\n            return <div style={{ color: 'red', textAlign: 'center', padding: '40px' }}>Error loading data: {error.message}</div>;\n          }\n\n          const chartData = transformData(data || []);\n\n          return (\n            <div style={{ marginTop: '30px' }}>\n              <ChartDisplay\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings}\n                onSaveUserSettings={onSaveUserSettings}\n                data={chartData}\n                sortBy={sortOrder}\n                highlightTopN={5}\n                onChartReady={() => {\n                }}\n                onProductClick={(productName, invoiceCount) => {\n                  console.log('Clicked product:', productName, 'Count:', invoiceCount);\n                }}\n              />\n            </div>\n          );\n        }}\n      </DataManager>\n    </div>\n  );\n}"
}