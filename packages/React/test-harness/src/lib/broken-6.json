{
  "functionalRequirements": [
    "## Business Objectives\nA simple interface to display and sort AI models by key attributes\n\n## Functional Requirements\n- Display list of AI models with name, type (LLM/ML/Vision), and key metrics\n- Sortable columns for: model name, specialty, performance metrics, release date\n- Clear visual sorting indicators\n- Responsive table layout for different screen sizes\n- Option to filter by model category",
    "## User Value\nProvides quick access to compare AI capabilities while maintaining simplicity of use",
    "## Implementation Notes\nAdd subtle sorting animations and maintain column alignment when sorting"
  ],
  "title": "AI Model Directory",
  "type": "table",
  "name": "AiModelDirectoryTable",
  "userExplanation": "Sortable table listing available AI models with basic metadata, enabling quick comparison and filtering by key attributes",
  "dataRequirements": {
    "mode": "views",
    "description": "Sortable table displaying AI models with name, type, vendor, and performance metrics using direct entity view access",
    "entities": [
      {
        "name": "AI Models",
        "description": "Catalog of all AI Models configured in the system with type, vendor, and performance rankings",
        "usageContext": "Primary data source for the AI Model Directory table - provides model information for display and sorting",
        "displayFields": [
          "Name",
          "AIModelType",
          "Vendor",
          "PowerRank",
          "SpeedRank",
          "CostRank",
          "__mj_CreatedAt"
        ],
        "filterFields": [
          "Name",
          "AIModelType",
          "Vendor",
          "IsActive"
        ],
        "sortFields": [
          "Name",
          "AIModelType",
          "PowerRank",
          "SpeedRank",
          "CostRank",
          "__mj_CreatedAt"
        ],
        "permissionLevelNeeded": [
          "read"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": true,
            "sequence": 1,
            "defaultInView": false
          },
          {
            "name": "Name",
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "sequence": 2,
            "defaultInView": false,
            "description": "Name of the AI model"
          },
          {
            "name": "AIModelType",
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "sequence": 12,
            "defaultInView": false,
            "description": "Type/category of the AI model (e.g., LLM, Audio, Video, Vision)"
          },
          {
            "name": "Vendor",
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "sequence": 13,
            "defaultInView": false,
            "description": "Vendor/provider of the AI model"
          },
          {
            "name": "PowerRank",
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "sequence": 5,
            "defaultInView": false,
            "description": "Optional ranking of the model's power/capability (0-10)"
          },
          {
            "name": "SpeedRank",
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "sequence": 9,
            "defaultInView": false,
            "description": "Optional ranking of the model's speed/performance (0-10)"
          },
          {
            "name": "CostRank",
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "sequence": 10,
            "defaultInView": false,
            "description": "Optional ranking of the model's cost (0-10, lower is cheaper)"
          },
          {
            "name": "__mj_CreatedAt",
            "type": "datetimeoffset",
            "allowsNull": false,
            "isPrimaryKey": false,
            "sequence": 7,
            "defaultInView": false,
            "description": "When the model was added to the system"
          },
          {
            "name": "IsActive",
            "type": "bit",
            "allowsNull": false,
            "isPrimaryKey": false,
            "sequence": 6,
            "defaultInView": false,
            "description": "Whether the model is currently available for use"
          }
        ]
      }
    ]
  },
  "description": "A responsive, sortable table component for displaying AI models with filtering capabilities",
  "location": "embedded",
  "technicalDesign": "## Component Architecture\nThe AI Model Directory is a self-contained table component that manages its own state for sorting and filtering while displaying AI model data.\n\n## Data Flow\n- Uses direct entity view access to the \"AI Models\" entity via MemberJunction's RunView system\n- Supports real-time data updates through reactive data fetching\n- Provides responsive table layout using AG-Grid with fallback to internal data loading\n\n## State Management\n- Internal state for sort configuration (column, direction)\n- Internal state for active filters\n- Internal state for data loading and error handling\n- Optional external data via props (models prop) - if not provided, loads from entity\n\n## Features\n- Column sorting with visual indicators (arrows)\n- Row filtering by model type and vendor\n- Responsive grid layout that adapts to screen sizes\n- Performance optimized for up to 1000 models\n- Clean, Material-UI styled table\n- Automatic data loading when no external data provided\n\n## Implementation Details\n- Uses AG-Grid React for robust table functionality\n- Leverages AG-Grid's built-in sorting and filtering\n- Responsive breakpoints for mobile/tablet/desktop\n- Custom cell renderers for ranking display (stars/badges)\n- Loading states and empty state handling\n- Handles both internal data fetching and external data props gracefully",
  "properties": [
    {
      "name": "models",
      "type": "Array<{ID: string, Name: string, AIModelType: string, Vendor: string, PowerRank: number, SpeedRank: number, CostRank: number, __mj_CreatedAt: string, IsActive: boolean}>",
      "required": false,
      "description": "Optional array of AI model objects. If not provided, component will load data from the AI Models entity directly"
    },
    {
      "name": "loading",
      "type": "boolean",
      "required": false,
      "defaultValue": false,
      "description": "Loading state indicator for async data fetching. When not provided, loading state is managed internally"
    },
    {
      "name": "onSortChange",
      "type": "function",
      "required": false,
      "description": "Optional callback fired when column sorting changes: (sortModel: SortModel) => void"
    },
    {
      "name": "onFilterChange",
      "type": "function",
      "required": false,
      "description": "Optional callback fired when filters are applied: (filterModel: FilterModel) => void"
    }
  ],
  "events": [
    {
      "name": "onModelSelect",
      "description": "Called when a user clicks on a model row",
      "parameters": [
        {
          "name": "modelId",
          "type": "string",
          "description": "The ID of the selected AI model"
        }
      ]
    },
    {
      "name": "onSortChange",
      "description": "Called when user changes column sorting",
      "parameters": [
        {
          "name": "sortConfig",
          "type": "object",
          "description": "Current sort configuration {colId: string, sort: string}"
        }
      ]
    },
    {
      "name": "onFilterChange",
      "description": "Called when user applies or clears filters",
      "parameters": [
        {
          "name": "filterConfig",
          "type": "object",
          "description": "Current filter configuration object"
        }
      ]
    }
  ],
  "exampleUsage": "<AiModelDirectoryTable\n  onModelSelect={(modelId) => handleModelSelection(modelId)}\n  onSortChange={(sortConfig) => handleSortChange(sortConfig)}\n  onFilterChange={(filterConfig) => handleFilterChange(filterConfig)}\n/>",
  "libraries": [
    {
      "name": "ag-grid-react",
      "globalVariable": "AgGridReact",
      "version": "^31.0.1"
    },
    {
      "name": "ag-grid",
      "globalVariable": "agGrid",
      "version": "^31.0.1"
    },
    {
      "name": "@mui/material",
      "globalVariable": "MaterialUI",
      "version": "^5.15.2"
    },
    {
      "name": "dayjs",
      "globalVariable": "dayjs",
      "version": "^1.11.10"
    }
  ],
  "code": "function AiModelDirectoryTable({ models: externalModels, loading: externalLoading, onSortChange, onFilterChange, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [isLoading, setIsLoading] = React.useState(externalLoading || false);\n  const [error, setError] = React.useState(null);\n  const [internalModels, setInternalModels] = React.useState([]);\n  const [sortModel, setSortModel] = React.useState(savedUserSettings?.sortModel || []);\n  const [filterModel, setFilterModel] = React.useState(savedUserSettings?.filterModel || {});\n  const [columnApi, setColumnApi] = React.useState(null);\n\n  const isExternalData = externalModels !== undefined;\n  const displayModels = isExternalData ? externalModels : internalModels;\n  const displayLoading = isExternalData ? externalLoading : isLoading;\n\n  React.useEffect(() => {\n    if (isExternalData) return;\n\n    const loadModels = async () => {\n      setIsLoading(true);\n      setError(null);\n      \n      try {\n        const result = await utilities.rv.RunView({\n          EntityName: 'AI Models',\n          ResultType: 'EntityObject'\n        });\n\n        if (result.Success) {\n          setInternalModels(result.Results || []);\n        } else {\n          setError('Failed to load AI models');\n        }\n      } catch (err) {\n        setError('Error loading data: ' + err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadModels();\n  }, [isExternalData, utilities.rv]);\n\n  const uniqueValues = (field) => [...new Set(displayModels.map(m => m[field]))].filter(Boolean);\n\n  const columnDefs = [\n    {\n      field: 'Name',\n      headerName: 'Model Name',\n      flex: 2,\n      minWidth: 200,\n      filter: 'agTextColumnFilter',\n    },\n    {\n      field: 'AIModelType',\n      headerName: 'Type',\n      flex: 1,\n      minWidth: 120,\n      filter: 'agSetColumnFilter',\n      filterParams: { values: uniqueValues('AIModelType') },\n    },\n    {\n      field: 'Vendor',\n      headerName: 'Vendor',\n      flex: 1,\n      minWidth: 120,\n      filter: 'agSetColumnFilter',\n      filterParams: { values: uniqueValues('Vendor') },\n    },\n    {\n      field: 'PowerRank',\n      headerName: 'Power',\n      width: 90,\n      filter: 'agNumberColumnFilter',\n      cellRenderer: (params) => {\n        if (!params.value && params.value !== 0) return null;\n        const stars = '★'.repeat(params.value);\n        return stars;\n      },\n    },\n    {\n      field: 'SpeedRank',\n      headerName: 'Speed',\n      width: 90,\n      filter: 'agNumberColumnFilter',\n      cellRenderer: (params) => {\n        if (!params.value && params.value !== 0) return null;\n        const badge = params.value >= 8 ? '🟢' : params.value >= 5 ? '🟡' : '🔴';\n        return badge;\n      },\n    },\n    {\n      field: 'CostRank',\n      headerName: 'Cost',\n      width: 90,\n      filter: 'agNumberColumnFilter',\n      cellRenderer: (params) => {\n        if (!params.value && params.value !== 0) return null;\n        return `${'💰'.repeat(10 - params.value)}`;\n      },\n    },\n    {\n      field: '__mj_CreatedAt',\n      headerName: 'Added Date',\n      width: 120,\n      filter: 'agDateColumnFilter',\n      valueFormatter: (params) => {\n        if (!params.value) return '';\n        return dayjs(params.value).format('MMM DD, YYYY');\n      },\n    },\n  ];\n\n  const defaultColDef = {\n    sortable: true,\n    filter: true,\n    resizable: true,\n    flex: 1,\n    minWidth: 100,\n  };\n\n  const onGridReady = (params) => {\n    setColumnApi(params.columnApi);\n    \n    if (Object.keys(filterModel).length > 0 || sortModel.length > 0) {\n      if (params.api?.setFilterModel) {\n        params.api.setFilterModel(filterModel);\n      }\n      if (params.api?.setSortModel) {\n        params.api.setSortModel(sortModel);\n      }\n    }\n  };\n\n  const handleSortChange = (event) => {\n    const newSortModel = event.sortModel;\n    setSortModel(newSortModel);\n    onSortChange?.(newSortModel);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortModel: newSortModel,\n    });\n  };\n\n  const handleFilterChange = (event) => {\n    const newFilterModel = event.api.getFilterModel();\n    setFilterModel(newFilterModel);\n    onFilterChange?.(newFilterModel);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterModel: newFilterModel,\n    });\n  };\n\n  const onRowClicked = (event) => {\n    if (event.data?.ID) {\n      callbacks?.onModelSelect?.(event.data.ID);\n    }\n  };\n\n  const clearFilters = () => {\n    if (columnApi) {\n      columnApi.resetColumnState();\n    }\n  };\n\n  if (error) {\n    return (\n      React.createElement('div', { style: { padding: 20, textAlign: 'center', color: '#f44336' } },\n        'Error: ', error,\n        React.createElement('button', { onClick: () => callbacks?.onRetry?.(), style: { marginLeft: 10 } }, 'Retry')\n      )\n    );\n  }\n\n  return (\n    React.createElement('div', { style: { height: '100%', width: '100%', display: 'flex', flexDirection: 'column' } },\n      React.createElement('div', { style: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 } },\n        React.createElement('h2', { style: { margin: 0 } }, 'AI Model Directory'),\n        React.createElement('button', {\n          onClick: clearFilters,\n          style: {\n            padding: '6px 12px',\n            backgroundColor: '#1976d2',\n            color: 'white',\n            border: 'none',\n            borderRadius: 4,\n            cursor: 'pointer',\n            fontSize: '14px'\n          }\n        }, 'Clear Filters')\n      ),\n      \n      React.createElement('div', { className: 'ag-theme-material', style: { flex: 1, minHeight: 0 } },\n        React.createElement(AgGridReact, {\n          rowData: displayModels,\n          columnDefs: columnDefs,\n          defaultColDef: defaultColDef,\n          onGridReady: onGridReady,\n          onSortChanged: handleSortChange,\n          onFilterChanged: handleFilterChange,\n          onRowClicked: onRowClicked,\n          loading: displayLoading,\n          animateRows: true,\n          domLayout: 'autoHeight',\n          suppressLoadingOverlay: true,\n          enableCellChangeFlash: true,\n          rowSelection: 'single',\n          suppressMovableColumns: true\n        })\n      ),\n      \n      displayModels.length === 0 && !displayLoading &&\n        React.createElement('div', { style: { padding: 20, textAlign: 'center', color: '#666' } }, 'No AI models found. Try adjusting your filters.')\n    )\n  );\n}"
}