{
  "functionalRequirements": "### Business Objectives\nVisualize account distribution across industries and enable detailed exploration of individual industries\n\n### Functional Requirements\n1. Primary pie chart displaying percentages of accounts by industry\n2. Clickable slices with drill-down functionality revealing accounts within each industry\n3. Export options for:\n   - Chart image (PNG/PDF)\n   - Raw drill-down data (CSV/Excel)\n4. Legend with industry labels\n5. Reset button to return to top-level view\n6. Clear axis/percentage labels on chart",
  "title": "Accounts by Industry",
  "type": "chart",
  "name": "IndustryAccountsChart",
  "userExplanation": "Provides pie chart of accounts grouped by industry with click-to-drill functionality and export options for reports",
  "dataRequirements": {
    "mode": "hybrid",
    "entities": [
      {
        "name": "Accounts",
        "description": "Core entity storing account records",
        "displayFields": [
          "AccountName",
          "AnnualRevenue",
          "Industry"
        ],
        "filterFields": [
          "Industry"
        ],
        "sortFields": [
          "AccountName"
        ],
        "fieldMetadata": [
          {
            "name": "AccountName",
            "sequence": 1,
            "defaultInView": true,
            "type": "nvarchar(255)",
            "allowsNull": false,
            "isPrimaryKey": true
          },
          {
            "name": "AnnualRevenue",
            "sequence": 12,
            "defaultInView": false,
            "type": "money",
            "allowsNull": true,
            "isPrimaryKey": false
          },
          {
            "name": "Industry",
            "sequence": 5,
            "defaultInView": false,
            "type": "nvarchar(100)",
            "allowsNull": true,
            "isPrimaryKey": false
          }
        ],
        "permissionLevelNeeded": [
          "read"
        ]
      }
    ],
    "queries": [
      {
        "name": "AccountIndustryDistribution",
        "categoryPath": "Analytics/AccountDistribution",
        "description": "Provides account distribution by industry for pie chart",
        "fields": [
          {
            "name": "Industry",
            "sequence": 1,
            "defaultInView": true,
            "type": "nvarchar(100)",
            "allowsNull": false
          },
          {
            "name": "AccountCount",
            "sequence": 2,
            "defaultInView": true,
            "type": "int",
            "allowsNull": false
          }
        ]
      },
      {
        "name": "AccountDetailsByIndustry",
        "categoryPath": "Skip/Analytics/AccountDistribution",
        "description": "Drill-down query showing accounts within specific industry",
        "fields": [
          {
            "name": "AccountID",
            "sequence": 1,
            "defaultInView": true,
            "type": "uniqueidentifier",
            "allowsNull": false
          },
          {
            "name": "AccountName",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar(255)",
            "allowsNull": false
          },
          {
            "name": "AnnualRevenue",
            "sequence": 3,
            "defaultInView": true,
            "type": "money",
            "allowsNull": true
          },
          {
            "name": "Industry",
            "sequence": 4,
            "defaultInView": true,
            "type": "nvarchar(100)",
            "allowsNull": true
          }
        ],
        "parameters": [
          {
            "name": "IndustryID",
            "value": "@runtime",
            "testValue": "1",
            "description": "Industry filter parameter using numeric IndustryID"
          }
        ]
      }
    ],
    "description": "Combines view-based entity access with stored queries for distribution visualization and drill-down capabilities"
  },
  "description": "Interactive pie chart visualization showing account distribution across industries with click-to-drill functionality and comprehensive export capabilities",
  "technicalDesign": "## Component Architecture\n\n### Main Component: IndustryAccountsChart\nA comprehensive charting component that provides industry-based account analysis with drill-down capabilities and export functionality.\n\n### Component Hierarchy:\n1. **IndustryAccountsChart** (Parent) - Orchestrates the overall experience\n2. **IndustryPieChart** - Interactive pie chart for industry distribution\n3. **IndustryAccountTable** - Detailed account view for selected industry\n4. **ExportControls** - Export utility for charts and data\n\n### Data Flow:\n1. Load industry distribution data from AccountIndustryDistribution query\n2. Render IndustryPieChart with percentage breakdown\n3. On slice click: Transition to IndustryAccountTable view\n4. Load AccountDetailsByIndustry query with industry parameter\n5. Display accounts table with sortable columns\n6. Provide export functionality via ExportControls\n\n### State Management:\n- Current view mode ('overview' | 'detail')\n- Selected industry name\n- Chart and table data\n- Export preferences\n\n### User Experience:\n- Initial pie chart view shows industry distribution\n- Click any industry slice to drill into account details\n- Export buttons available in both views\n- Reset button returns to overview\n- Responsive design for all screen sizes\n\n### Integration Points:\n- Uses ApexCharts for pie chart visualization\n- ReactTable for sortable account table\n- XLSX for Excel/CSV exports\n- html2canvas + jsPDF for chart image exports",
  "dependencies": [
    {
      "name": "AccountsByIndustryChart",
      "location": "registry",
      "description": "",
      "functionalRequirements": "",
      "technicalDesign": "",
      "exampleUsage": "",
      "namespace": "CRM/Analytics",
      "selectionReasoning": "The AccountsByIndustryChart component closely matches the requirements for an interactive pie chart with drill-down functionality. It supports click-to-select events, percentage/legend display through tooltips, and customizable color schemes. Although it uses Chart.js instead of ApexCharts, the core functional requirements (data visualization, interactivity, event handling) align closely with the architect's specifications.",
      "type": ""
    },
    {
      "name": "AccountsByIndustryList",
      "location": "registry",
      "description": "",
      "functionalRequirements": "",
      "technicalDesign": "",
      "exampleUsage": "",
      "namespace": "CRM/Analytics",
      "selectionReasoning": "The AccountsByIndustryList component meets the core requirements of displaying account data with sorting (AccountName, AnnualRevenue), aligns with the table display structure, and supports client-side pagination. While it lacks direct export functionality (CSV/Excel), it is the closest match for the table and sorting features. The DataExportPanel can be integrated separately for export needs, making it a viable reusable component for the primary requirements.",
      "type": ""
    },
    {
      "name": "DataExportPanel",
      "location": "registry",
      "description": "",
      "functionalRequirements": "",
      "technicalDesign": "",
      "exampleUsage": "",
      "selectionReasoning": "The DataExportPanel supports CSV/Excel exports via XLSX and chart image exports via html2canvas/pdf, meets all required formats. It handles HTML element capture for charts, provides file naming flexibility, and includes the necessary props/events for integration. Its format-specific options and state management align with the required functionality.",
      "type": ""
    }
  ],
  "libraries": [
    {
      "name": "apexcharts",
      "globalVariable": "ApexCharts",
      "version": "3.45.1"
    },
    {
      "name": "react-table",
      "globalVariable": "ReactTable",
      "version": "7.8.0"
    },
    {
      "name": "xlsx",
      "globalVariable": "XLSX",
      "version": "0.18.5"
    },
    {
      "name": "html2canvas",
      "globalVariable": "html2canvas",
      "version": "1.4.1"
    },
    {
      "name": "jspdf",
      "globalVariable": "jspdf",
      "version": "2.5.1"
    }
  ],
  "code": "function IndustryAccountsChart({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || 'overview');\n  const [selectedIndustry, setSelectedIndustry] = useState(savedUserSettings?.selectedIndustry || null);\n  const [industryData, setIndustryData] = useState(null);\n  const [accounts, setAccounts] = useState([]);\n  const [sortConfig, setSortConfig] = useState(savedUserSettings?.sortConfig || { field: 'AccountName', direction: 'asc' });\n  const [currentPage, setCurrentPage] = useState(savedUserSettings?.currentPage || 1);\n  const [pageSize] = useState(10);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadIndustryDistribution();\n  }, []);\n\n  const loadIndustryDistribution = async () => {\n    try {\n      setLoading(true);\n      const result = await utilities.rq.RunQuery({\n        QueryName: 'AccountIndustryDistribution'\n      });\n      if (result.Success) {\n        const labels = result.Results.map(d => d.Industry);\n        const data = result.Results.map(d => d.AccountCount);\n        const total = data.reduce((sum, count) => sum + count, 0);\n        const percentages = data.map(count => ((count / total) * 100).toFixed(1));\n        \n        setIndustryData({ labels, data, percentages, total });\n      } else {\n        setError('Failed to load industry distribution');\n      }\n    } catch (err) {\n      setError('Error loading data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadAccountsByIndustry = async (industry) => {\n    try {\n      setLoading(true);\n      const result = await utilities.rq.RunQuery({\n        QueryName: 'AccountDetailsByIndustry',\n        Parameters: { IndustryID: industry }\n      });\n      if (result.Success) {\n        setAccounts(result.Results);\n      } else {\n        setError('Failed to load accounts');\n      }\n    } catch (err) {\n      setError('Error loading accounts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSliceClick = (industry) => {\n    setSelectedIndustry(industry);\n    setViewMode('detail');\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedIndustry: industry,\n      viewMode: 'detail'\n    });\n    loadAccountsByIndustry(industry);\n  };\n\n  const handleClearFilter = () => {\n    setSelectedIndustry(null);\n    setViewMode('overview');\n    setAccounts([]);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedIndustry: null,\n      viewMode: 'overview',\n      currentPage: 1\n    });\n    setCurrentPage(1);\n  };\n\n  const handleSort = (field) => {\n    const direction = sortConfig.field === field && sortConfig.direction === 'asc' ? 'desc' : 'asc';\n    setSortConfig({ field, direction });\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortConfig: { field, direction }\n    });\n  };\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      currentPage: page\n    });\n  };\n\n  const sortedAccounts = useMemo(() => {\n    if (!accounts.length) return [];\n    \n    return [...accounts].sort((a, b) => {\n      const aValue = a[sortConfig.field];\n      const bValue = b[sortConfig.field];\n      \n      if (aValue === null || aValue === undefined) return 1;\n      if (bValue === null || bValue === undefined) return -1;\n      \n      if (sortConfig.direction === 'asc') {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n  }, [accounts, sortConfig]);\n\n  const paginatedAccounts = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    return sortedAccounts.slice(startIndex, startIndex + pageSize);\n  }, [sortedAccounts, currentPage, pageSize]);\n\n  if (loading) {\n    return (\n      <div style={styles?.loadingContainer || { display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px' }}>\n        <div>Loading...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={styles?.errorContainer || { color: 'red', padding: '20px' }}>\n        {error}\n      </div>\n    );\n  }\n\n  return (\n    <div style={styles?.container || { padding: '20px' }}>\n      <div style={styles?.header || { display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>\n        <h2 style={styles?.title || { margin: 0 }}>\n          {viewMode === 'overview' ? 'Industry Distribution' : `${selectedIndustry} Accounts`}\n        </h2>\n        <div style={styles?.controls || { display: 'flex', gap: '10px' }}>\n          {viewMode === 'detail' && (\n            <button \n              onClick={handleClearFilter}\n              style={styles?.button || { padding: '8px 16px', cursor: 'pointer' }}\n            >\n              Back to Overview\n            </button>\n          )}\n          <components.DataExportPanel\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n          />\n        </div>\n      </div>\n\n      {viewMode === 'overview' && industryData && (\n        <div style={styles?.chartContainer || { marginBottom: '20px' }}>\n          <components.AccountsByIndustryChart\n            industryData={industryData}\n            selectedIndustry={selectedIndustry || ''}\n            onSliceClick={handleSliceClick}\n            colorScheme=\"default\"\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n          />\n        </div>\n      )}\n\n      {viewMode === 'detail' && (\n        <div style={styles?.tableContainer || { marginTop: '20px' }}>\n          <components.AccountsByIndustryList\n            accounts={paginatedAccounts}\n            selectedIndustry={selectedIndustry || ''}\n            sortConfig={sortConfig}\n            onSort={handleSort}\n            onAccountClick={(account) => callbacks?.onAccountClick?.(account)}\n            currentPage={currentPage}\n            pageSize={pageSize}\n            onPageChange={handlePageChange}\n            onClearFilter={handleClearFilter}\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n}"
}