{
  "functionalRequirements": "1. Pie chart grouping accounts by industry\n2. Clickable slices that show accounts in selected industry\n3. Export options (PDF/PNG/CSV)\n4. Simple legend and interactive tooltip",
  "title": "Interactive Accounts Industry Pie Chart",
  "type": "chart",
  "name": "AccountsByIndustryPieChart",
  "userExplanation": "Visualizes account distribution across industries with drill-down view and easy export of results",
  "dataRequirements": {
    "mode": "hybrid",
    "entities": [
      {
        "name": "Accounts",
        "description": "Stores information about customer organizations and companies",
        "displayFields": [
          "ID",
          "AccountName",
          "Industry"
        ],
        "filterFields": [
          "Industry"
        ],
        "sortFields": [
          "Industry"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "type": "int",
            "allowsNull": false,
            "isPrimaryKey": true
          },
          {
            "name": "AccountName",
            "sequence": 2,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false
          },
          {
            "name": "Industry",
            "sequence": 3,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false
          }
        ],
        "permissionLevelNeeded": [
          "read"
        ]
      }
    ],
    "queries": [
      {
        "name": "AccountIndustryDistribution",
        "categoryPath": "Analytics/AccountDistribution",
        "description": "Retrieves the distribution of active accounts by industry for pie chart visualization",
        "fields": [
          {
            "name": "Industry",
            "sequence": 1,
            "type": "nvarchar",
            "allowsNull": true
          },
          {
            "name": "AccountCount",
            "sequence": 2,
            "type": "int",
            "allowsNull": false
          }
        ]
      }
    ],
    "description": "Hybrid approach using AccountIndustryDistribution query for aggregated distribution data and Accounts entity for detailed drill-through records"
  },
  "description": "A comprehensive dashboard component that displays account distribution across industries using an interactive pie chart with drill-down capabilities, filtering, and export functionality.",
  "technicalDesign": "## Architecture Overview\nThe component follows a modular architecture with clear separation of concerns:\n\n### Main Component: AccountsByIndustryPieChart\n- **Container**: Manages overall state and coordinates between child components\n- **Data Flow**: Uses query for aggregated data, entity for detailed records\n- **State Management**: Internal state for selected industry, filters, and export options\n\n### Child Components:\n1. **IndustryPieChart** - Interactive pie chart visualization\n2. **AccountDetailsTable** - Tabular display of accounts for selected industry\n3. **IndustryFilterPanel** - Multi-select filtering interface\n4. **ExportPanel** - Export functionality with format selection\n\n### Data Management\n- **Primary Query**: AccountIndustryDistribution for aggregated industry counts\n- **Entity Access**: Accounts entity for detailed account information\n- **Filtering**: Industry-based filtering applied to both chart and table\n- **Caching**: Intelligent caching of industry distribution data\n\n### State Flow\n```\nUser Interaction → Component State → Data Filter → UI Update → Export\n```\n\n### Key Implementation Details\n- Uses Chart.js for pie chart rendering with custom styling\n- Responsive grid layout using CSS Grid\n- Debounced filtering for performance optimization\n- Memoized calculations for chart data preparation\n- Error boundaries for graceful failure handling\n\n### Export Functionality\n- PDF: Uses html2canvas + jspdf for high-quality chart export\n- PNG: Direct canvas export with transparency support\n- CSV: Custom CSV generation with proper formatting\n\n### Performance Considerations\n- Lazy loading of chart library code\n- Virtualized table for large account lists\n- Debounced search and filter operations\n- Optimized re-renders using React.memo",
  "dependencies": [
    {
      "name": "AccountsByIndustryChart",
      "description": "",
      "functionalRequirements": "",
      "technicalDesign": "",
      "exampleUsage": "",
      "location": "registry",
      "namespace": "CRM/Analytics",
      "selectionReasoning": "The AccountsByIndustryChart component uses Chart.js for an interactive pie chart, supports click-to-select with onIndustrySelect-like event, calculates percentages, has hover tooltips, industry color coding, and a bottom-positioned legend. It meets all technical and functional requirements including responsive design and smooth animations.",
      "type": ""
    },
    {
      "name": "AccountsByIndustryList",
      "description": "",
      "functionalRequirements": "",
      "technicalDesign": "",
      "exampleUsage": "",
      "location": "registry",
      "namespace": "CRM/Analytics",
      "selectionReasoning": "The AccountsByIndustryList component meets most requirements: it provides a sortable, paginated table for accounts with sorting, pagination (25 rows can be adjusted to 25), and supports filtered data. While the original component doesn't explicitly mention text search filtering, its 'filtered account array' prop could accommodate this. The existing props for sorting and pagination align with the needed functionality, making it the closest match.",
      "type": ""
    },
    {
      "name": "IndustryFilterPanel",
      "description": "Multi-select filter panel for industry selection",
      "functionalRequirements": "Provides checkbox-based multi-select filtering for industries. Updates in real-time as user selects/deselects industries. Includes 'Select All' and 'Clear All' functionality.",
      "technicalDesign": "## IndustryFilterPanel Component\n- **Filter Type**: Multi-select checkbox list\n- **Data Source**: Unique industries from AccountIndustryDistribution query\n- **State Management**: Internal state for selected industries\n- **Controls**: Select All, Clear All buttons\n- **Layout**: Vertical list with scroll for overflow\n- **Responsive**: Collapsible panel on mobile\n- **Real-time**: Emits onFilterChange immediately on selection change\n- **Count Display**: Shows account count next to each industry name\n- **Search**: Optional text search for filtering long industry lists",
      "dataRequirements": {
        "mode": "queries",
        "description": "Uses AccountIndustryDistribution query to get unique industries",
        "queries": [
          {
            "name": "AccountIndustryDistribution",
            "categoryPath": "Analytics/AccountDistribution",
            "description": "Provides list of industries for filtering",
            "fields": [
              {
                "name": "Industry",
                "sequence": 1,
                "type": "nvarchar",
                "allowsNull": true
              },
              {
                "name": "AccountCount",
                "sequence": 2,
                "type": "int",
                "allowsNull": false
              }
            ]
          }
        ]
      },
      "properties": [
        {
          "name": "industries",
          "type": "Array<{industry: string, count: number}>",
          "required": true,
          "description": "List of available industries with account counts"
        },
        {
          "name": "selectedIndustries",
          "type": "Array<string>",
          "required": true,
          "description": "Currently selected industries for filtering"
        },
        {
          "name": "onFilterChange",
          "type": "function",
          "required": true,
          "description": "Callback when industry selection changes"
        }
      ],
      "events": [
        {
          "name": "onFilterChange",
          "description": "Triggered when user changes industry selection",
          "parameters": [
            {
              "name": "selectedIndustries",
              "type": "Array<string>",
              "description": "Array of selected industry names"
            }
          ]
        }
      ],
      "exampleUsage": "<IndustryFilterPanel \n  industries={industries} \n  selectedIndustries={selectedIndustries}\n  onFilterChange={setSelectedIndustries} />",
      "location": "embedded",
      "relevantExamples": [
        {
          "name": "EntityFilter",
          "namespace": "Admin/Entities",
          "version": "1.0.0",
          "description": "Collapsible filter panel for filtering entities by various criteria",
          "relevance": 0.7699327185457516
        },
        {
          "name": "AIModelFilter",
          "namespace": "AI",
          "version": "1.0.0",
          "description": "Collapsible filter panel for filtering models by type, status, developer, and provider",
          "relevance": 0.727505319736165
        },
        {
          "name": "CompetitiveAnalysis",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Competitive win/loss analysis by competitor",
          "relevance": 0.6744359056927767
        },
        {
          "name": "AccountsByIndustryChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive pie chart component that visualizes account distribution by industry with click-to-filter functionality",
          "relevance": 0.6683492084915019
        },
        {
          "name": "AccountsByIndustryChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Interactive pie chart component that visualizes account distribution by industry with click-to-filter functionality",
          "relevance": 0.6683492084915019
        }
      ],
      "code": "function IndustryFilterPanel({ industries = [], selectedIndustries = [], onFilterChange, utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isExpanded, setIsExpanded] = useState(savedUserSettings?.isExpanded ?? true);\n\n  const handleIndustryToggle = (industry) => {\n    const newSelected = selectedIndustries.includes(industry)\n      ? selectedIndustries.filter(i => i !== industry)\n      : [...selectedIndustries, industry];\n    \n    onFilterChange(newSelected);\n  };\n\n  const handleSelectAll = () => {\n    const industryNames = industries.map(item => item.industry);\n    onFilterChange(industryNames);\n  };\n\n  const handleClearAll = () => {\n    onFilterChange([]);\n  };\n\n  const toggleExpanded = () => {\n    const newExpanded = !isExpanded;\n    setIsExpanded(newExpanded);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      isExpanded: newExpanded\n    });\n  };\n\n  const filteredIndustries = useMemo(() => {\n    if (!searchTerm.trim()) return industries;\n    return industries.filter(item => \n      item.industry?.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [industries, searchTerm]);\n\n  const hasSelected = selectedIndustries.length > 0;\n  const allSelected = industries.length > 0 && selectedIndustries.length === industries.length;\n\n  return (\n    <div style={styles.panel}>\n      <div style={styles.header}>\n        <div style={styles.titleBar}>\n          <h3 style={styles.title}>Industries</h3>\n          <button\n            onClick={toggleExpanded}\n            style={styles.expandButton}\n            aria-label={isExpanded ? 'Collapse panel' : 'Expand panel'}\n          >\n            {isExpanded ? '−' : '+'}\n          </button>\n        </div>\n        \n        {isExpanded && (\n          <div style={styles.controls}>\n            <div style={styles.searchWrapper}>\n              <input\n                type=\"text\"\n                placeholder=\"Search industries...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                style={styles.searchInput}\n              />\n            </div>\n            \n            <div style={styles.actionButtons}>\n              <button\n                onClick={handleSelectAll}\n                disabled={allSelected}\n                style={styles.button}\n              >\n                Select All\n              </button>\n              <button\n                onClick={handleClearAll}\n                disabled={!hasSelected}\n                style={styles.button}\n              >\n                Clear All\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {isExpanded && (\n        <div style={styles.listContainer}>\n          <div style={styles.list}>\n            {filteredIndustries.map((item) => {\n              const isChecked = selectedIndustries.includes(item.industry);\n              \n              return (\n                <label\n                  key={item.industry}\n                  style={styles.listItem}\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={isChecked}\n                    onChange={() => handleIndustryToggle(item.industry)}\n                    style={styles.checkbox}\n                  />\n                  <span style={styles.labelText}>\n                    {item.industry}\n                  </span>\n                  <span style={styles.count}>\n                    ({item.count})\n                  </span>\n                </label>\n              );\n            })}\n          </div>\n          \n          {filteredIndustries.length === 0 && searchTerm && (\n            <div style={styles.emptyState}>\n              No industries found for \"{searchTerm}\"\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}"
    },
    {
      "name": "ExportPanel",
      "description": "Export functionality for chart and data",
      "functionalRequirements": "Provides export options for the current view including PDF report, PNG image of chart, and CSV data export. Handles file naming and download functionality.",
      "technicalDesign": "## ExportPanel Component\n- **Export Types**: PDF, PNG, CSV\n- **Dependencies**: html2canvas for PNG, jspdf for PDF\n- **File Naming**: Uses timestamp and selected industry in filename\n- **Data Export**: CSV includes both chart data and detailed accounts\n- **Image Export**: High-resolution PNG of the pie chart\n- **PDF Export**: Full report with chart, data table, and metadata\n- **User Feedback**: Shows success/error messages after export\n- **Loading States**: Disables export buttons during processing",
      "dataRequirements": {
        "mode": "queries",
        "description": "Uses current state data for export"
      },
      "properties": [
        {
          "name": "chartData",
          "type": "Array<{industry: string, count: number, percentage: number}>",
          "required": true,
          "description": "Current chart data for export"
        },
        {
          "name": "tableData",
          "type": "Array<{ID: number, AccountName: string, Industry: string}>",
          "required": true,
          "description": "Current table data for export"
        },
        {
          "name": "selectedIndustry",
          "type": "string",
          "required": false,
          "defaultValue": "null",
          "description": "Selected industry for filename context"
        }
      ],
      "events": [
        {
          "name": "onExportComplete",
          "description": "Triggered after successful export",
          "parameters": [
            {
              "name": "exportType",
              "type": "string",
              "description": "Type of export completed (pdf/png/csv)"
            },
            {
              "name": "filename",
              "type": "string",
              "description": "Generated filename"
            }
          ]
        }
      ],
      "exampleUsage": "<ExportPanel \n  chartData={chartData} \n  tableData={tableData} \n  selectedIndustry={selectedIndustry} />",
      "libraries": [
        {
          "name": "html2canvas",
          "globalVariable": "html2canvas",
          "version": "1.4.1"
        },
        {
          "name": "jspdf",
          "globalVariable": "jspdf",
          "version": "2.5.1"
        }
      ],
      "location": "embedded",
      "relevantExamples": [
        {
          "name": "DataExportPanel",
          "namespace": "Generic/UI/Export",
          "version": "1.0.0",
          "description": "Reusable component for exporting data to CSV, Excel (XLSX), and PDF formats with optional UI",
          "relevance": 0.757885281106043
        }
      ],
      "code": "function ExportPanel({\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings,\n  chartData,\n  tableData,\n  selectedIndustry\n}) {\n  const [exporting, setExporting] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('');\n\n  const generateFilename = (extension) => {\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');\n    const industryPart = selectedIndustry ? `${selectedIndustry}_` : '';\n    return `accounts_report_${industryPart}${timestamp}.${extension}`;\n  };\n\n  const showMessage = (text, type = 'success') => {\n    setMessage(text);\n    setMessageType(type);\n    setTimeout(() => {\n      setMessage('');\n      setMessageType('');\n    }, 3000);\n  };\n\n  const exportCSV = async () => {\n    setExporting(true);\n    try {\n      const headers = ['Account ID', 'Account Name', 'Industry'];\n      const csvContent = [\n        headers.join(','),\n        ...tableData.map(row => [row.ID, `\"${row.AccountName}\"`, row.Industry].join(','))\n      ].join('\\n');\n\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const filename = generateFilename('csv');\n      \n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', filename);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n        showMessage('CSV exported successfully');\n      }\n    } catch (error) {\n      showMessage('Failed to export CSV', 'error');\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  const exportPNG = async () => {\n    setExporting(true);\n    try {\n      const chartElement = document.querySelector('.recharts-wrapper') || document.querySelector('[data-testid=\"chart-container\"]');\n      \n      if (!chartElement) {\n        showMessage('Chart not found', 'error');\n        return;\n      }\n\n      const canvas = await html2canvas(chartElement, {\n        backgroundColor: '#ffffff',\n        scale: 2,\n        useCORS: true\n      });\n\n      const link = document.createElement('a');\n      const filename = generateFilename('png');\n      link.download = filename;\n      link.href = canvas.toDataURL('image/png');\n      link.click();\n\n      showMessage('PNG exported successfully');\n    } catch (error) {\n      showMessage('Failed to export PNG', 'error');\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  const exportPDF = async () => {\n    setExporting(true);\n    try {\n      const { jsPDF } = jspdf;\n      const doc = new jsPDF();\n      \n      const chartElement = document.querySelector('.recharts-wrapper') || document.querySelector('[data-testid=\"chart-container\"]');\n      \n      if (!chartElement) {\n        showMessage('Chart not found', 'error');\n        return;\n      }\n\n      const canvas = await html2canvas(chartElement, {\n        backgroundColor: '#ffffff',\n        scale: 2,\n        useCORS: true\n      });\n\n      const imgData = canvas.toDataURL('image/png');\n      \n      doc.setFontSize(20);\n      doc.text('Accounts Report', 20, 20);\n      \n      doc.setFontSize(12);\n      doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 35);\n      \n      if (selectedIndustry) {\n        doc.text(`Industry Filter: ${selectedIndustry}`, 20, 45);\n      }\n\n      const imgWidth = 170;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      doc.addImage(imgData, 'PNG', 20, 55, imgWidth, imgHeight);\n\n      doc.setFontSize(14);\n      doc.text('Summary Data', 20, 55 + imgHeight + 15);\n\n      let yPos = 55 + imgHeight + 25;\n      doc.setFontSize(10);\n      \n      doc.text('Industry,Count,Percentage', 20, yPos);\n      yPos += 5;\n      \n      chartData.forEach(item => {\n        doc.text(`${item.industry},${item.count},${item.percentage.toFixed(1)}%`, 20, yPos);\n        yPos += 5;\n      });\n\n      const filename = generateFilename('pdf');\n      doc.save(filename);\n\n      showMessage('PDF exported successfully');\n    } catch (error) {\n      showMessage('Failed to export PDF', 'error');\n    } finally {\n      setExporting(false);\n    }\n  };\n\n  return (\n    <div style={styles?.exportPanel || { padding: '20px', backgroundColor: '#f5f5f5', borderRadius: '8px' }}>\n      <h3 style={{ marginTop: 0, marginBottom: '15px' }}>Export Options</h3>\n      \n      <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>\n        <button\n          onClick={exportCSV}\n          disabled={exporting}\n          style={{\n            padding: '8px 16px',\n            backgroundColor: exporting ? '#cccccc' : '#1890ff',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: exporting ? 'not-allowed' : 'pointer',\n            opacity: exporting ? 0.6 : 1\n          }}\n        >\n          {exporting ? 'Exporting...' : 'Export CSV'}\n        </button>\n        \n        <button\n          onClick={exportPNG}\n          disabled={exporting}\n          style={{\n            padding: '8px 16px',\n            backgroundColor: exporting ? '#cccccc' : '#52c41a',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: exporting ? 'not-allowed' : 'pointer',\n            opacity: exporting ? 0.6 : 1\n          }}\n        >\n          {exporting ? 'Exporting...' : 'Export PNG'}\n        </button>\n        \n        <button\n          onClick={exportPDF}\n          disabled={exporting}\n          style={{\n            padding: '8px 16px',\n            backgroundColor: exporting ? '#cccccc' : '#faad14',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: exporting ? 'not-allowed' : 'pointer',\n            opacity: exporting ? 0.6 : 1\n          }}\n        >\n          {exporting ? 'Exporting...' : 'Export PDF'}\n        </button>\n      </div>\n\n      {message && (\n        <div\n          style={{\n            marginTop: '15px',\n            padding: '8px 12px',\n            borderRadius: '4px',\n            backgroundColor: messageType === 'error' ? '#fff2e8' : '#f6ffed',\n            color: messageType === 'error' ? '#ff4d4f' : '#52c41a',\n            border: `1px solid ${messageType === 'error' ? '#ffccc7' : '#b7eb8f'}`\n          }}\n        >\n          {message}\n        </div>\n      )}\n    </div>\n  );\n}"
    }
  ],
  "libraries": [
    {
      "name": "chart.js",
      "globalVariable": "Chart",
      "version": "^4.4.1",
      "description": "Charting library for pie chart visualization"
    },
    {
      "name": "html2canvas",
      "globalVariable": "html2canvas",
      "version": "^1.4.1",
      "description": "For capturing chart as image for PNG export"
    },
    {
      "name": "jspdf",
      "globalVariable": "jspdf",
      "version": "^2.5.1",
      "description": "PDF generation library for PDF export"
    },
    {
      "name": "axios",
      "globalVariable": "axios",
      "version": "^1.6.5",
      "description": "For data fetching and export operations"
    }
  ],
  "properties": [
    {
      "name": "initialIndustry",
      "type": "string",
      "required": false,
      "defaultValue": "null",
      "description": "Initially selected industry to highlight on load"
    },
    {
      "name": "height",
      "type": "number",
      "required": false,
      "defaultValue": 600,
      "description": "Height of the component in pixels"
    }
  ],
  "events": [
    {
      "name": "onIndustrySelected",
      "description": "Triggered when user selects an industry from the pie chart",
      "parameters": [
        {
          "name": "industry",
          "type": "string",
          "description": "Name of the selected industry"
        }
      ]
    },
    {
      "name": "onExport",
      "description": "Triggered when user initiates an export action",
      "parameters": [
        {
          "name": "exportType",
          "type": "string",
          "description": "Type of export (pdf/png/csv)"
        },
        {
          "name": "data",
          "type": "object",
          "description": "Data being exported"
        }
      ]
    }
  ],
  "exampleUsage": "<AccountsByIndustryPieChart \n  initialIndustry=\"Technology\"\n  height={800}\n  onIndustrySelected={(industry) => console.log('Selected:', industry)}\n  onExport={(type, data) => console.log('Exporting:', type, data)} />",
  "code": "function AccountsByIndustryPieChart({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings, initialIndustry, height }) {\n  const [selectedIndustry, setSelectedIndustry] = React.useState(savedUserSettings?.selectedIndustry || initialIndustry || null);\n  const [selectedIndustries, setSelectedIndustries] = React.useState(savedUserSettings?.selectedIndustries || []);\n  const [industryData, setIndustryData] = React.useState(null);\n  const [accounts, setAccounts] = React.useState([]);\n  const [filteredAccounts, setFilteredAccounts] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n  const [sortConfig, setSortConfig] = React.useState(savedUserSettings?.sortConfig || { field: 'AccountName', direction: 'asc' });\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const pageSize = 10;\n\n  // Load industry distribution data\n  React.useEffect(() => {\n    const loadIndustryData = async () => {\n      try {\n        setLoading(true);\n        const result = await utilities.rq.RunQuery({ QueryName: 'AccountIndustryDistribution' });\n        if (result && result.Success && result.Results && result.Results.length > 0) {\n          const data = {\n            labels: result.Results.map(r => r.Industry || 'Unknown'),\n            data: result.Results.map(r => r.AccountCount),\n            percentages: result.Results.map(r => r.AccountCount),\n            total: result.Results.reduce((sum, r) => sum + r.AccountCount, 0)\n          };\n          setIndustryData(data);\n        }\n        setLoading(false);\n      } catch (err) {\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    loadIndustryData();\n  }, []);\n\n  // Load accounts data\n  React.useEffect(() => {\n    const loadAccounts = async () => {\n      try {\n        const result = await utilities.rv.RunView({ EntityName: 'Accounts' });\n        if (result && result.Success && result.Results) {\n          setAccounts(result.Results);\n        }\n      } catch (err) {\n        setError(err.message);\n      }\n    };\n    loadAccounts();\n  }, []);\n\n  // Filter accounts based on selected industries\n  React.useEffect(() => {\n    let filtered = accounts;\n    \n    if (selectedIndustries.length > 0) {\n      filtered = accounts.filter(account => \n        selectedIndustries.includes(account.Industry || 'Unknown')\n      );\n    } else if (selectedIndustry) {\n      filtered = accounts.filter(account => \n        (account.Industry || 'Unknown') === selectedIndustry\n      );\n    }\n\n    // Apply sorting\n    filtered = [...filtered].sort((a, b) => {\n      const aVal = a[sortConfig.field] || '';\n      const bVal = b[sortConfig.field] || '';\n      \n      if (sortConfig.direction === 'asc') {\n        return aVal > bVal ? 1 : -1;\n      } else {\n        return aVal < bVal ? 1 : -1;\n      }\n    });\n\n    setFilteredAccounts(filtered);\n    setCurrentPage(1);\n  }, [accounts, selectedIndustry, selectedIndustries, sortConfig]);\n\n  const handleIndustrySelect = (industry) => {\n    setSelectedIndustry(industry);\n    setSelectedIndustries([]);\n    callbacks?.onIndustrySelected?.(industry);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedIndustry: industry,\n      selectedIndustries: []\n    });\n  };\n\n  const handleFilterChange = (industries) => {\n    setSelectedIndustries(industries);\n    setSelectedIndustry(null);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedIndustries: industries,\n      selectedIndustry: null\n    });\n  };\n\n  const handleSort = (field) => {\n    const newSortConfig = {\n      field,\n      direction: sortConfig.field === field && sortConfig.direction === 'asc' ? 'desc' : 'asc'\n    };\n    setSortConfig(newSortConfig);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortConfig: newSortConfig\n    });\n  };\n\n  const handleClearFilter = () => {\n    setSelectedIndustry(null);\n    setSelectedIndustries([]);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedIndustry: null,\n      selectedIndustries: []\n    });\n  };\n\n  const handleExport = (exportType, data) => {\n    callbacks?.onExport?.(exportType, data);\n  };\n\n  const handleAccountClick = (account) => {\n    // Optional: Handle account click if needed\n  };\n\n  const chartData = React.useMemo(() => {\n    if (!industryData) return [];\n    return industryData.labels.map((industry, index) => ({\n      industry,\n      count: industryData.data[index],\n      percentage: ((industryData.data[index] / industryData.total) * 100).toFixed(1)\n    }));\n  }, [industryData]);\n\n  const industries = React.useMemo(() => {\n    if (!industryData) return [];\n    return industryData.labels.map((industry, index) => ({\n      industry,\n      count: industryData.data[index]\n    }));\n  }, [industryData]);\n\n  const tableData = React.useMemo(() => {\n    return filteredAccounts.map(account => ({\n      ID: account.ID,\n      AccountName: account.AccountName,\n      Industry: account.Industry || 'Unknown'\n    }));\n  }, [filteredAccounts]);\n\n  if (loading) {\n    return <div style={{ height: height || 600, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>Loading...</div>;\n  }\n\n  if (error) {\n    return <div style={{ height: height || 600, display: 'flex', alignItems: 'center', justifyContent: 'center', color: 'red' }}>Error: {error}</div>;\n  }\n\n  return (\n    <div style={{ height: height || 600, display: 'flex', flexDirection: 'column', gap: '16px' }}>\n      <div style={{ display: 'flex', gap: '16px', flex: 1 }}>\n        <div style={{ flex: 2, minHeight: 0 }}>\n          <AccountsByIndustryChart\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n            industryData={industryData}\n            selectedIndustry={selectedIndustry}\n            onSliceClick={handleIndustrySelect}\n            colorScheme=\"default\"\n          />\n        </div>\n        <div style={{ flex: 1, display: 'flex', flexDirection: 'column', gap: '16px' }}>\n          <IndustryFilterPanel\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n            industries={industries}\n            selectedIndustries={selectedIndustries}\n            onFilterChange={handleFilterChange}\n          />\n          <ExportPanel\n            utilities={utilities}\n            styles={styles}\n            components={components}\n            callbacks={callbacks}\n            savedUserSettings={savedUserSettings}\n            onSaveUserSettings={onSaveUserSettings}\n            chartData={chartData}\n            tableData={tableData}\n            selectedIndustry={selectedIndustry}\n            onExportComplete={handleExport}\n          />\n        </div>\n      </div>\n      <div style={{ flex: 1, minHeight: 0 }}>\n        <AccountsByIndustryList\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n          savedUserSettings={savedUserSettings}\n          onSaveUserSettings={onSaveUserSettings}\n          accounts={filteredAccounts}\n          selectedIndustry={selectedIndustry}\n          sortConfig={sortConfig}\n          onSort={handleSort}\n          onAccountClick={handleAccountClick}\n          currentPage={currentPage}\n          pageSize={pageSize}\n          onPageChange={setCurrentPage}\n          onClearFilter={handleClearFilter}\n        />\n      </div>\n    </div>\n  );\n}"
}