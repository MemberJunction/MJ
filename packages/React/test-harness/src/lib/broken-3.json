{
  "functionalRequirements": "## Business Objectives\nEnable quick visual comparison of AI models by type and vendor through side-by-side analysis with drill-down capabilities.\n\n## Functional Requirements\n- Render dual charts: 1) Model type distribution (e.g., CNN, RNN, Transformer) and 2) Vendor breakdown\n- Support drill-down to model-specific metrics (e.g., accuracy, training time) when selecting a segment\n- Maintain synchronized side-by-side layout with consistent chart scaling\n- Implement responsive filtering (clicking on a segment drills into details)\n- Preserve high-level overview while allowing detailed exploration",
  "title": "AI Model Performance Analysis",
  "type": "DashboardComponent",
  "name": "AiModelComparisonDashboard",
  "userExplanation": "Displays two charts for comparing AI models: one sorted by model type and another by vendor. Features synchronized drill-down capabilities to examine specific metrics like performance or training costs when a chart segment is selected.",
  "dataRequirements": {
    "mode": "queries",
    "entities": [
      {
        "name": "AI Models",
        "description": "Catalog of all AI Models configured in the system",
        "displayFields": [
          "Vendor",
          "AIModelType",
          "PowerRank",
          "SpeedRank",
          "CostRank"
        ],
        "filterFields": [
          "AIModelTypeID",
          "Vendor"
        ],
        "sortFields": [
          "Vendor",
          "AIModelType"
        ],
        "fieldMetadata": [
          {
            "name": "Vendor",
            "sequence": 13,
            "type": "nvarchar",
            "allowsNull": true
          },
          {
            "name": "AIModelType",
            "sequence": 12,
            "type": "nvarchar",
            "allowsNull": false
          },
          {
            "name": "PowerRank",
            "sequence": 5,
            "type": "int",
            "allowsNull": true
          },
          {
            "name": "SpeedRank",
            "sequence": 9,
            "type": "int",
            "allowsNull": true
          },
          {
            "name": "CostRank",
            "sequence": 10,
            "type": "int",
            "allowsNull": true
          }
        ],
        "usageContext": "Used for comparing model types and vendors",
        "permissionLevelNeeded": [
          "read"
        ]
      },
      {
        "name": "AI Model Types",
        "description": "Types of AI Models",
        "displayFields": [
          "Name"
        ],
        "filterFields": [
          "Name"
        ],
        "sortFields": [
          "Name"
        ],
        "fieldMetadata": [
          {
            "name": "Name",
            "sequence": 2,
            "type": "nvarchar",
            "allowsNull": false
          }
        ],
        "usageContext": "Categorizes AI model types for distribution analysis",
        "permissionLevelNeeded": [
          "read"
        ]
      }
    ],
    "queries": [
      {
        "name": "ModelTypeDistribution",
        "categoryPath": "AI/Analytics",
        "description": "Groups AI models by type with percentage distribution",
        "fields": [
          {
            "name": "ModelTypeName",
            "sequence": 1,
            "type": "nvarchar"
          },
          {
            "name": "ModelCount",
            "sequence": 2,
            "type": "int"
          },
          {
            "name": "Percentage",
            "sequence": 3,
            "type": "decimal"
          }
        ]
      }
    ],
    "description": "Uses ModelTypeDistribution query to show distribution by type"
  },
  "description": "Interactive dashboard for comparing AI models by type and vendor with synchronized drill-down capabilities",
  "technicalDesign": "## Component Architecture\n\nThe AiModelComparisonDashboard uses a comprehensive component hierarchy with three main components:\n\n### 1. AiModelTypeChart Component\n- Displays a pie/donut chart showing AI model type distribution\n- Uses ECharts for interactive visualization\n- Manages internal state for selected model type\n- Emits events when users select a model type segment\n- Integrates with ModelTypeDistribution query for data\n\n### 2. AiVendorChart Component  \n- Displays a horizontal bar chart showing vendor distribution\n- Uses ECharts for consistent visualization style\n- Manages internal state for selected vendor\n- Emits events when users select a vendor segment\n- Uses AI Models entity data filtered by vendor\n\n### 3. AiModelDetailPanel Component\n- Shows detailed metrics when a chart segment is selected\n- Displays PowerRank, SpeedRank, CostRank for selected models\n- Uses responsive grid layout with Material-UI\n- Updates dynamically based on selection from either chart\n- Provides back button to return to overview\n\n## Data Flow\n- Dashboard loads initial data via ModelTypeDistribution query\n- Chart components maintain their own selection state\n- Detail panel receives selection events and displays relevant metrics\n- All components use consistent color schemes and styling\n\n## Responsive Design\n- Uses Material-UI Grid system for responsive layout\n- Charts resize automatically with window changes\n- Detail panel slides in from right on mobile, appears inline on desktop",
  "dependencies": [
    {
      "name": "AiModelTypeChart",
      "description": "Interactive pie chart showing AI model type distribution",
      "functionalRequirements": "Displays AI model types in a pie/donut chart format with interactive segments. Each segment represents a model type (CNN, RNN, Transformer, etc.) with count and percentage. Supports click-to-drill-down functionality and hover tooltips with detailed information.",
      "technicalDesign": "## AiModelTypeChart Component\nUses ECharts library for creating an interactive pie chart. Component manages its own selection state with useState for the selected model type. Data comes from ModelTypeDistribution query. Chart segments are clickable to trigger drill-down events. Color scheme uses consistent palette across all charts.",
      "dataRequirements": {
        "mode": "queries",
        "entities": [
          {
            "name": "AI Model Types",
            "description": "Types of AI Models",
            "displayFields": [
              "Name",
              "ID"
            ],
            "filterFields": [
              "Name"
            ],
            "sortFields": [
              "Name"
            ],
            "fieldMetadata": [
              {
                "name": "Name",
                "sequence": 2,
                "type": "nvarchar",
                "allowsNull": false,
                "defaultInView": true
              },
              {
                "name": "ID",
                "sequence": 1,
                "type": "uniqueidentifier",
                "allowsNull": false,
                "isPrimaryKey": true,
                "defaultInView": false
              }
            ],
            "usageContext": "Used for categorizing model types",
            "permissionLevelNeeded": [
              "read"
            ]
          }
        ],
        "queries": [
          {
            "name": "ModelTypeDistribution",
            "categoryPath": "AI/Analytics",
            "description": "Groups AI models by type with percentage distribution",
            "fields": [
              {
                "name": "ModelTypeName",
                "sequence": 1,
                "type": "nvarchar",
                "defaultInView": true
              },
              {
                "name": "ModelCount",
                "sequence": 2,
                "type": "int",
                "defaultInView": true
              },
              {
                "name": "Percentage",
                "sequence": 3,
                "type": "decimal",
                "defaultInView": true
              }
            ]
          }
        ]
      },
      "properties": [
        {
          "name": "selectedModelType",
          "type": "string",
          "description": "Currently selected model type for drill-down",
          "required": false,
          "defaultValue": ""
        },
        {
          "name": "onModelTypeSelect",
          "type": "function",
          "description": "Callback fired when a model type segment is clicked",
          "required": true
        }
      ],
      "events": [
        {
          "name": "onModelTypeSelect",
          "description": "Fired when user clicks on a model type segment",
          "parameters": [
            {
              "name": "modelType",
              "type": "string",
              "description": "The selected model type name"
            }
          ]
        }
      ],
      "exampleUsage": "<AiModelTypeChart selectedModelType={selectedType} onModelTypeSelect={handleModelTypeSelect} />",
      "libraries": [
        {
          "name": "ECharts",
          "globalVariable": "echarts",
          "version": "^5.4.3"
        }
      ],
      "location": "embedded",
      "relevantExamples": [
        {
          "name": "DealVelocityTrendChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Displays historical trends of deal velocity across stages over time",
          "relevance": 0.7911211942306853
        },
        {
          "name": "DealVelocityDistributionChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Displays statistical distribution of deal velocities using box plots",
          "relevance": 0.7901572546966915
        },
        {
          "name": "DealVelocityMetrics",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Analyze and visualize the speed of deals through the sales pipeline with detailed stage-by-stage metrics",
          "relevance": 0.6659477694374811
        }
      ],
      "code": "function AiModelTypeChart({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings, selectedModelType, onModelTypeSelect }) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  const [selectedType, setSelectedType] = useState(selectedModelType || savedUserSettings?.selectedModelType || '');\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const result = await utilities.rq.RunQuery({\n        QueryName: 'ModelTypeDistribution'\n      });\n      // Ensure result is an array before setting it\n      setChartData(Array.isArray(result) ? result : []);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChartClick = (params) => {\n    const modelType = params.name;\n    setSelectedType(modelType);\n    onModelTypeSelect(modelType);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedModelType: modelType\n    });\n  };\n\n  const chartOptions = React.useMemo(() => ({\n    tooltip: {\n      trigger: 'item',\n      formatter: '{a} <br/>{b}: {c} ({d}%)'\n    },\n    legend: {\n      orient: 'vertical',\n      left: 'left',\n      textStyle: {\n        color: '#333'\n      }\n    },\n    series: [\n      {\n        name: 'Model Types',\n        type: 'pie',\n        radius: ['40%', '70%'],\n        avoidLabelOverlap: false,\n        itemStyle: {\n          borderRadius: 10,\n          borderColor: '#fff',\n          borderWidth: 2\n        },\n        label: {\n          show: false,\n          position: 'center'\n        },\n        emphasis: {\n          label: {\n            show: true,\n            fontSize: '20',\n            fontWeight: 'bold'\n          }\n        },\n        labelLine: {\n          show: false\n        },\n        data: Array.isArray(chartData) ? chartData.map((item, index) => ({\n          name: item.ModelTypeName,\n          value: item.ModelCount,\n          itemStyle: {\n            color: getColorByIndex(index)\n          }\n        })) : []\n      }\n    ]\n  }), [chartData]);\n\n  const getColorByIndex = (index) => {\n    const colors = [\n      '#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de',\n      '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc', '#0099ff'\n    ];\n    return colors[index % colors.length];\n  };\n\n  useEffect(() => {\n    if (!Array.isArray(chartData) || chartData.length === 0) return;\n\n    const chartDom = document.getElementById('ai-model-type-chart');\n    if (!chartDom) return;\n\n    const chart = echarts.init(chartDom);\n    chart.setOption(chartOptions);\n    chart.on('click', handleChartClick);\n\n    return () => {\n      chart.dispose();\n    };\n  }, [chartData, chartOptions]);\n\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px' }}>\n        Loading chart data...\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px', color: 'red' }}>\n        Error loading data: {error}\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ width: '100%', height: '400px' }}>\n      <div id=\"ai-model-type-chart\" style={{ width: '100%', height: '100%' }} />\n    </div>\n  );\n}"
    },
    {
      "name": "AiVendorChart",
      "description": "Interactive bar chart showing AI model vendor distribution",
      "functionalRequirements": "Displays AI model vendors in a horizontal bar chart format. Each bar represents a vendor with the count of models. Supports click-to-drill-down functionality and includes vendor names on y-axis for readability. Chart is synchronized with model type selection.",
      "technicalDesign": "## AiVendorChart Component\nUses ECharts library for creating an interactive horizontal bar chart. Component manages its own selection state with useState for the selected vendor. Data comes from AI Models entity grouped by vendor. Bars are clickable to trigger drill-down events. Maintains visual consistency with AiModelTypeChart.",
      "dataRequirements": {
        "mode": "queries",
        "entities": [
          {
            "name": "AI Models",
            "description": "Catalog of all AI Models configured in the system",
            "displayFields": [
              "Vendor",
              "ID"
            ],
            "filterFields": [
              "Vendor"
            ],
            "sortFields": [
              "Vendor"
            ],
            "fieldMetadata": [
              {
                "name": "Vendor",
                "sequence": 13,
                "type": "nvarchar",
                "allowsNull": true,
                "defaultInView": true
              },
              {
                "name": "ID",
                "sequence": 1,
                "type": "uniqueidentifier",
                "allowsNull": false,
                "isPrimaryKey": true,
                "defaultInView": false
              }
            ],
            "usageContext": "Used for vendor distribution analysis",
            "permissionLevelNeeded": [
              "read"
            ]
          }
        ],
        "queries": [
          {
            "name": "ModelTypeDistribution",
            "categoryPath": "AI/Analytics",
            "description": "Groups AI models by type with percentage distribution"
          }
        ]
      },
      "properties": [
        {
          "name": "selectedVendor",
          "type": "string",
          "description": "Currently selected vendor for drill-down",
          "required": false,
          "defaultValue": ""
        },
        {
          "name": "onVendorSelect",
          "type": "function",
          "description": "Callback fired when a vendor bar is clicked",
          "required": true
        }
      ],
      "events": [
        {
          "name": "onVendorSelect",
          "description": "Fired when user clicks on a vendor bar",
          "parameters": [
            {
              "name": "vendor",
              "type": "string",
              "description": "The selected vendor name"
            }
          ]
        }
      ],
      "exampleUsage": "<AiVendorChart selectedVendor={selectedVendor} onVendorSelect={handleVendorSelect} />",
      "libraries": [
        {}
      ],
      "location": "embedded",
      "relevantExamples": [
        {
          "name": "DealVelocityTrendChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Displays historical trends of deal velocity across stages over time",
          "relevance": 0.7881543458453866
        },
        {
          "name": "DealVelocityDistributionChart",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Displays statistical distribution of deal velocities using box plots",
          "relevance": 0.8141503207515929
        },
        {
          "name": "DealVelocityMetrics",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Analyze and visualize the speed of deals through the sales pipeline with detailed stage-by-stage metrics",
          "relevance": 0.6776035890880248
        }
      ],
      "code": "function AiVendorChart({ \n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings,\n  selectedVendor = \"\",\n  onVendorSelect\n}) {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selection, setSelection] = useState(selectedVendor);\n  \n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    setSelection(selectedVendor);\n  }, [selectedVendor]);\n\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      renderChart();\n    }\n  }, [loading, data, selection]);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const result = await utilities.rv.RunView({\n        EntityName: \"AI Models\",\n        OrderBy: [{ fieldName: \"Vendor\", direction: \"asc\" }]\n      });\n      \n      if (result.Success && result.Results) {\n        const vendorCounts = {};\n        result.Results.forEach(model => {\n          const vendor = model.Vendor || \"Unknown\";\n          vendorCounts[vendor] = (vendorCounts[vendor] || 0) + 1;\n        });\n        \n        const chartData = Object.entries(vendorCounts)\n          .map(([vendor, count]) => ({\n            vendor,\n            count,\n            value: count\n          }))\n          .sort((a, b) => b.count - a.count);\n        \n        setData(chartData);\n      } else {\n        setError(\"Failed to load data\");\n      }\n    } catch (err) {\n      setError(err.message || \"Failed to load data\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBarClick = (params) => {\n    const vendor = params.data.vendor;\n    setSelection(vendor);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedVendor: vendor\n    });\n    onVendorSelect?.(vendor);\n  };\n\n  const renderChart = () => {\n    if (!chartRef.current || data.length === 0) return;\n\n    const chartContainer = document.createElement('div');\n    chartContainer.style.display = 'flex';\n    chartContainer.style.flexDirection = 'column';\n    chartContainer.style.gap = '10px';\n    chartContainer.style.padding = '20px';\n    \n    const title = document.createElement('h3');\n    title.textContent = 'AI Models by Vendor';\n    title.style.textAlign = 'center';\n    title.style.margin = '0 0 20px 0';\n    title.style.color = '#333';\n    title.style.fontSize = '16px';\n    title.style.fontWeight = 'bold';\n    \n    chartContainer.appendChild(title);\n\n    data.forEach(item => {\n      const barContainer = document.createElement('div');\n      barContainer.style.display = 'flex';\n      barContainer.style.alignItems = 'center';\n      barContainer.style.marginBottom = '8px';\n      barContainer.style.cursor = 'pointer';\n      \n      const label = document.createElement('div');\n      label.textContent = item.vendor;\n      label.style.width = '120px';\n      label.style.textAlign = 'right';\n      label.style.marginRight = '10px';\n      label.style.fontSize = '14px';\n      label.style.color = '#666';\n      label.style.overflow = 'hidden';\n      label.style.textOverflow = 'ellipsis';\n      label.style.whiteSpace = 'nowrap';\n      \n      const barWrapper = document.createElement('div');\n      barWrapper.style.flex = '1';\n      barWrapper.style.height = '24px';\n      barWrapper.style.backgroundColor = '#f0f0f0';\n      barWrapper.style.borderRadius = '4px';\n      barWrapper.style.position = 'relative';\n      barWrapper.style.overflow = 'hidden';\n      \n      const bar = document.createElement('div');\n      const maxCount = Math.max(...data.map(d => d.count));\n      const width = (item.count / maxCount) * 100;\n      bar.style.width = `${width}%`;\n      bar.style.height = '100%';\n      bar.style.backgroundColor = item.vendor === selection ? '#1890ff' : '#91d5ff';\n      bar.style.transition = 'background-color 0.3s';\n      \n      const countLabel = document.createElement('span');\n      countLabel.textContent = item.count;\n      countLabel.style.position = 'absolute';\n      countLabel.style.right = '8px';\n      countLabel.style.top = '50%';\n      countLabel.style.transform = 'translateY(-50%)';\n      countLabel.style.fontSize = '12px';\n      countLabel.style.color = '#333';\n      \n      barWrapper.appendChild(bar);\n      barWrapper.appendChild(countLabel);\n      \n      barContainer.appendChild(label);\n      barContainer.appendChild(barWrapper);\n      \n      barContainer.addEventListener('click', () => {\n        const vendor = item.vendor;\n        setSelection(vendor);\n        onSaveUserSettings?.({\n          ...savedUserSettings,\n          selectedVendor: vendor\n        });\n        onVendorSelect?.(vendor);\n      });\n      \n      barContainer.addEventListener('mouseenter', () => {\n        bar.style.backgroundColor = '#40a9ff';\n      });\n      \n      barContainer.addEventListener('mouseleave', () => {\n        bar.style.backgroundColor = item.vendor === selection ? '#1890ff' : '#91d5ff';\n      });\n      \n      chartContainer.appendChild(barContainer);\n    });\n\n    if (chartRef.current.firstChild) {\n      chartRef.current.removeChild(chartRef.current.firstChild);\n    }\n    chartRef.current.appendChild(chartContainer);\n  };\n\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px' }}>\n        <components.Loading />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: '20px', textAlign: 'center', color: '#ff4d4f' }}>\n        Error: {error}\n      </div>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <div style={{ padding: '20px', textAlign: 'center', color: '#999' }}>\n        No data available\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ width: '100%', height: '400px' }}>\n      <div ref={chartRef} style={{ width: '100%', height: '100%' }} />\n    </div>\n  );\n}",
      "testsPassed": false
    },
    {
      "name": "AiModelDetailPanel",
      "description": "Detailed metrics panel for selected AI models",
      "functionalRequirements": "Displays comprehensive metrics for AI models selected from either chart. Shows PowerRank, SpeedRank, and CostRank for each model in a responsive grid layout. Supports filtering by selected model type or vendor and provides clear visual indicators for rank values.",
      "technicalDesign": "## AiModelDetailPanel Component\nUses Material-UI Grid system for responsive layout. Component manages its own filter state based on selections from parent charts. Displays model metrics in card format with color-coded rank indicators. Updates dynamically when selection changes from either chart. Provides clear back navigation to return to overview.",
      "dataRequirements": {
        "mode": "queries",
        "entities": [
          {
            "name": "AI Models",
            "description": "Catalog of all AI Models configured in the system",
            "displayFields": [
              "Vendor",
              "AIModelType",
              "PowerRank",
              "SpeedRank",
              "CostRank",
              "Name",
              "ID"
            ],
            "filterFields": [
              "Vendor",
              "AIModelTypeID"
            ],
            "sortFields": [
              "PowerRank",
              "SpeedRank",
              "CostRank"
            ],
            "fieldMetadata": [
              {
                "name": "Vendor",
                "sequence": 13,
                "type": "nvarchar",
                "allowsNull": true,
                "defaultInView": true
              },
              {
                "name": "AIModelType",
                "sequence": 12,
                "type": "nvarchar",
                "allowsNull": false,
                "defaultInView": true
              },
              {
                "name": "PowerRank",
                "sequence": 5,
                "type": "int",
                "allowsNull": true,
                "defaultInView": true
              },
              {
                "name": "SpeedRank",
                "sequence": 9,
                "type": "int",
                "allowsNull": true,
                "defaultInView": true
              },
              {
                "name": "CostRank",
                "sequence": 10,
                "type": "int",
                "allowsNull": true,
                "defaultInView": true
              },
              {
                "name": "Name",
                "sequence": 3,
                "type": "nvarchar",
                "allowsNull": false,
                "defaultInView": true
              },
              {
                "name": "ID",
                "sequence": 1,
                "type": "uniqueidentifier",
                "allowsNull": false,
                "isPrimaryKey": true,
                "defaultInView": false
              }
            ],
            "usageContext": "Used for displaying detailed metrics of selected models",
            "permissionLevelNeeded": [
              "read"
            ]
          }
        ],
        "queries": [
          {
            "name": "ModelTypeDistribution",
            "categoryPath": "AI/Analytics",
            "description": "Groups AI models by type with percentage distribution"
          }
        ]
      },
      "properties": [
        {
          "name": "selectedModelType",
          "type": "string",
          "description": "Currently selected model type to filter by",
          "required": false,
          "defaultValue": ""
        },
        {
          "name": "selectedVendor",
          "type": "string",
          "description": "Currently selected vendor to filter by",
          "required": false,
          "defaultValue": ""
        },
        {
          "name": "onBackClick",
          "type": "function",
          "description": "Callback fired when user clicks back to overview",
          "required": true
        }
      ],
      "events": [
        {
          "name": "onBackClick",
          "description": "Fired when user wants to return to overview"
        }
      ],
      "exampleUsage": "<AiModelDetailPanel selectedModelType={selectedType} selectedVendor={selectedVendor} onBackClick={handleBackClick} />",
      "libraries": [
        {}
      ],
      "location": "embedded",
      "namespace": "CRM/Analytics",
      "version": "1.0.0",
      "selectionReasoning": "The OverviewCards component meets requirements by displaying summary metrics in card format with color-coded indicators and click actions. Although it lacks specific AI model filters in its props, its grid-based card layout, dynamic content capabilities, and response to click interactions make it adaptable. The component's card structure aligns with displaying PowerRank, SpeedRank, and CostRank metrics in a responsive format.",
      "type": "",
      "relevantExamples": [
        {
          "name": "AIModelBrowser",
          "namespace": "AI",
          "version": "1.0.0",
          "description": "A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications",
          "relevance": 0.846578323258507
        },
        {
          "name": "WinLossAnalysis",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Analyze patterns in won and lost deals to identify success factors and improvement areas with AI-powered insights",
          "relevance": 0.7672945398700491
        },
        {
          "name": "FinancialAnalyticsDashboard",
          "namespace": "CRM/Finance",
          "version": "1.0.0",
          "description": "Comprehensive financial overview with revenue trends, forecasting, and profitability analysis with export capabilities",
          "relevance": 0.760580721447355
        },
        {
          "name": "AIPerformanceDashboard",
          "namespace": "AI/Analytics/Performance",
          "version": "1.0.0",
          "description": "Comprehensive dashboard for analyzing AI agent and prompt performance with time-series charts, cost analysis, and drill-down capabilities",
          "relevance": 0.7536963181931362
        },
        {
          "name": "AIPromptsCluster",
          "namespace": "AI/Analytics",
          "version": "1.0.0",
          "description": "Interactive clustering visualization of AI prompts using semantic embeddings to discover patterns and relationships",
          "relevance": 0.7266011875364364
        }
      ],
      "code": "function AiModelDetailPanel({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings, selectedModelType, selectedVendor, onBackClick }) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [models, setModels] = useState([]);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || 'grid');\n\n  // Load models based on selected filters\n  useEffect(() => {\n    const loadModels = async () => {\n      try {\n        setLoading(true);\n        \n        let query = 'select * from [AI Models]';\n        const conditions = [];\n        \n        if (selectedModelType) {\n          conditions.push(`[AIModelTypeID] = '${selectedModelType}'`);\n        }\n        if (selectedVendor) {\n          conditions.push(`[Vendor] = '${selectedVendor}'`);\n        }\n        \n        if (conditions.length > 0) {\n          query += ' where ' + conditions.join(' and ');\n        }\n        \n        const result = await utilities.rq.RunQuery({\n          QueryName: query\n        });\n        setModels(result?.rows || []);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadModels();\n  }, [utilities.rq, selectedModelType, selectedVendor]);\n\n  const handleViewModeChange = (mode) => {\n    setViewMode(mode);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      viewMode: mode\n    });\n  };\n\n  const getRankColor = (rank) => {\n    if (!rank) return 'grey';\n    if (rank <= 3) return 'green';\n    if (rank <= 7) return 'orange';\n    return 'red';\n  };\n\n  const getRankLabel = (rank) => {\n    if (!rank) return 'N/A';\n    return rank;\n  };\n\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', padding: '40px' }}>\n        <div>Loading...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: '20px' }}>\n        <div style={{ color: 'red' }}>Error: {error}</div>\n      </div>\n    );\n  }\n\n  if (models.length === 0) {\n    return (\n      <div style={{ padding: '20px' }}>\n        <button\n          onClick={onBackClick}\n          style={{ marginBottom: '20px', padding: '8px 16px', background: '#1976d2', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}\n        >\n          Back to Overview\n        </button>\n        <div>No models found for the selected filters.</div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '20px', alignItems: 'center' }}>\n        <button\n          onClick={onBackClick}\n          style={{ padding: '8px 16px', background: '#1976d2', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: '5px' }}\n        >\n          <span>←</span>\n          Back to Overview\n        </button>\n        \n        <div>\n          <button\n            onClick={() => handleViewModeChange('grid')}\n            style={{\n              padding: '4px 8px',\n              marginRight: '4px',\n              background: viewMode === 'grid' ? '#1976d2' : '#f5f5f5',\n              color: viewMode === 'grid' ? 'white' : 'black',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Grid\n          </button>\n          <button\n            onClick={() => handleViewModeChange('list')}\n            style={{\n              padding: '4px 8px',\n              background: viewMode === 'list' ? '#1976d2' : '#f5f5f5',\n              color: viewMode === 'list' ? 'white' : 'black',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            List\n          </button>\n        </div>\n      </div>\n\n      {viewMode === 'grid' ? (\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))', gap: '20px' }}>\n          {models.map((model) => (\n            <div key={model.ID} style={{ border: '1px solid #e0e0e0', borderRadius: '8px', padding: '16px' }}>\n              <h3 style={{ margin: '0 0 8px 0' }}>{model.Name}</h3>\n              <p style={{ margin: '0 0 8px 0', color: '#666' }}>{model.Vendor} • {model.AIModelType}</p>\n              \n              <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '10px' }}>\n                <div>\n                  <div style={{ fontSize: '12px', color: '#666' }}>Power</div>\n                  <div\n                    style={{ \n                      fontSize: '24px', \n                      fontWeight: 'bold', \n                      color: getRankColor(model.PowerRank)\n                    }}\n                  >\n                    {getRankLabel(model.PowerRank)}\n                  </div>\n                </div>\n                \n                <div>\n                  <div style={{ fontSize: '12px', color: '#666' }}>Speed</div>\n                  <div\n                    style={{ \n                      fontSize: '24px', \n                      fontWeight: 'bold', \n                      color: getRankColor(model.SpeedRank)\n                    }}\n                  >\n                    {getRankLabel(model.SpeedRank)}\n                  </div>\n                </div>\n                \n                <div>\n                  <div style={{ fontSize: '12px', color: '#666' }}>Cost</div>\n                  <div\n                    style={{ \n                      fontSize: '24px', \n                      fontWeight: 'bold', \n                      color: getRankColor(model.CostRank)\n                    }}\n                  >\n                    {getRankLabel(model.CostRank)}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div style={{ border: '1px solid #e0e0e0', borderRadius: '4px', overflow: 'hidden' }}>\n          <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n            <thead style={{ backgroundColor: '#f5f5f5' }}>\n              <tr>\n                <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #e0e0e0' }}>Model Name</th>\n                <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #e0e0e0' }}>Vendor</th>\n                <th style={{ padding: '12px', textAlign: 'left', borderBottom: '1px solid #e0e0e0' }}>Type</th>\n                <th style={{ padding: '12px', textAlign: 'center', borderBottom: '1px solid #e0e0e0' }}>Power Rank</th>\n                <th style={{ padding: '12px', textAlign: 'center', borderBottom: '1px solid #e0e0e0' }}>Speed Rank</th>\n                <th style={{ padding: '12px', textAlign: 'center', borderBottom: '1px solid #e0e0e0' }}>Cost Rank</th>\n              </tr>\n            </thead>\n            <tbody>\n              {models.map((model) => (\n                <tr key={model.ID}>\n                  <td style={{ padding: '12px', borderBottom: '1px solid #e0e0e0' }}>{model.Name}</td>\n                  <td style={{ padding: '12px', borderBottom: '1px solid #e0e0e0' }}>{model.Vendor}</td>\n                  <td style={{ padding: '12px', borderBottom: '1px solid #e0e0e0' }}>{model.AIModelType}</td>\n                  <td style={{ padding: '12px', textAlign: 'center', borderBottom: '1px solid #e0e0e0' }}>\n                    <span\n                      style={{\n                        display: 'inline-block',\n                        padding: '4px 8px',\n                        borderRadius: '12px',\n                        backgroundColor: getRankColor(model.PowerRank),\n                        color: 'white',\n                        fontSize: '12px',\n                        minWidth: '30px'\n                      }}\n                    >\n                      {getRankLabel(model.PowerRank)}\n                    </span>\n                  </td>\n                  <td style={{ padding: '12px', textAlign: 'center', borderBottom: '1px solid #e0e0e0' }}>\n                    <span\n                      style={{\n                        display: 'inline-block',\n                        padding: '4px 8px',\n                        borderRadius: '12px',\n                        backgroundColor: getRankColor(model.SpeedRank),\n                        color: 'white',\n                        fontSize: '12px',\n                        minWidth: '30px'\n                      }}\n                    >\n                      {getRankLabel(model.SpeedRank)}\n                    </span>\n                  </td>\n                  <td style={{ padding: '12px', textAlign: 'center', borderBottom: '1px solid #e0e0e0' }}>\n                    <span\n                      style={{\n                        display: 'inline-block',\n                        padding: '4px 8px',\n                        borderRadius: '12px',\n                        backgroundColor: getRankColor(model.CostRank),\n                        color: 'white',\n                        fontSize: '12px',\n                        minWidth: '30px'\n                      }}\n                    >\n                      {getRankLabel(model.CostRank)}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}",
      "testsPassed": false
    }
  ],
  "libraries": [
    {},
    {}
  ],
  "exampleUsage": "<AiModelComparisonDashboard />",
  "code": "function AiModelComparisonDashboard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const [loading, setLoading] = React.useState(true);\n  const [modelTypeData, setModelTypeData] = React.useState([]);\n  const [selectedModelType, setSelectedModelType] = React.useState(savedUserSettings?.selectedModelType || null);\n  const [selectedVendor, setSelectedVendor] = React.useState(savedUserSettings?.selectedVendor || null);\n  const [showDetailPanel, setShowDetailPanel] = React.useState(false);\n\n  const { AiModelTypeChart, AiVendorChart, AiModelDetailPanel } = components;\n\n  // Load model type distribution data\n  React.useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        const data = await utilities.rq.RunQuery({ QueryName: 'ModelTypeDistribution' });\n        setModelTypeData(data || []);\n      } catch (error) {\n        console.error('Error loading model type distribution:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, [utilities]);\n\n  const handleModelTypeSelect = (modelType) => {\n    setSelectedModelType(modelType);\n    setSelectedVendor(null); // Reset vendor when model type changes\n    setShowDetailPanel(true);\n    \n    // Save user settings\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedModelType: modelType,\n      selectedVendor: null\n    });\n  };\n\n  const handleVendorSelect = (vendor) => {\n    setSelectedVendor(vendor);\n    setSelectedModelType(null); // Reset model type when vendor changes\n    setShowDetailPanel(true);\n    \n    // Save user settings\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedVendor: vendor,\n      selectedModelType: null\n    });\n  };\n\n  const handleBackClick = () => {\n    setSelectedModelType(null);\n    setSelectedVendor(null);\n    setShowDetailPanel(false);\n    \n    // Clear saved selections\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedModelType: null,\n      selectedVendor: null\n    });\n  };\n\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px' }}>\n        <div>Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: '24px' }}>\n      <h4 style={{ marginBottom: '16px' }}>\n        AI Model Comparison Dashboard\n      </h4>\n      \n      {!showDetailPanel ? (\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '24px' }}>\n          <div style={{ flex: '1 1 45%', minWidth: '300px' }}>\n            <AiModelTypeChart\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings}\n              onSaveUserSettings={onSaveUserSettings}\n              selectedModelType={selectedModelType}\n              onModelTypeSelect={handleModelTypeSelect}\n            />\n          </div>\n          <div style={{ flex: '1 1 45%', minWidth: '300px' }}>\n            <AiVendorChart\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings}\n              onSaveUserSettings={onSaveUserSettings}\n              selectedVendor={selectedVendor}\n              onVendorSelect={handleVendorSelect}\n            />\n          </div>\n        </div>\n      ) : (\n        <AiModelDetailPanel\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n          savedUserSettings={savedUserSettings}\n          onSaveUserSettings={onSaveUserSettings}\n          selectedModelType={selectedModelType}\n          selectedVendor={selectedVendor}\n          onBackClick={handleBackClick}\n        />\n      )}\n    </div>\n  );\n}"
}