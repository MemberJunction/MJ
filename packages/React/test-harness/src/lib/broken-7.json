{
  "title": "AI Model Explorer",
  "type": "explorer",
  "name": "ModelExplorer",
  "userExplanation": "A clean UI component that lists AI models, lets users sort, search and select a model to view its detailed information.",
  "functionalRequirements": "## Business Objectives\n- Enable users to quickly browse and locate AI models they own or have access to.\n- Provide an intuitive way to view key details of a selected model without leaving the page.\n- Enhance productivity with basic sorting and searching capabilities.\n\n## Functional Requirements\n- **Model List View**: Display a tabular/list view of all AI models with sortable columns (e.g., name, AIModelType, IsActive status, and creation date (__mj_CreatedAt)).\n- **Sorting**: Users can click column headers to sort ascending/descending by Name, AIModelType, or __mj_CreatedAt.\n- **Search/Filter**: A simple text search box to filter models by Name.\n- **Selection & Detail Panel**: Clicking a model opens a side panel or modal showing additional information such as AIModelType, Vendor, PowerRank, SpeedRank, CostRank, and active status (IsActive).\n- **Responsive Layout**: Works on desktop and tablet screens, adjusting columns and detail view accordingly.\n- **Pagination or Infinite Scroll**: Load models in pages or as the user scrolls to keep the UI performant.\n- **Basic UI Styling**: Clean, modern styling with clear typography, spacing, and hover states for rows.\n- **Optional Quick Actions**: Small icons for copy model ID or refresh details (kept minimal to avoid over‑engineering).\n\n*All requirements are intentionally simple to meet the user’s request while delivering a polished, usable component.*",
  "dataRequirements": {
    "mode": "views",
    "description": "Provides a sortable, searchable list of AI models with key details for selection and inspection.",
    "entities": [
      {
        "name": "AI Models",
        "description": "Catalog of all AI models configured in the system.",
        "displayFields": [
          "ID",
          "Name",
          "AIModelType",
          "Vendor",
          "IsActive",
          "PowerRank",
          "SpeedRank",
          "CostRank"
        ],
        "filterFields": [
          "Name",
          "AIModelType",
          "Vendor",
          "IsActive"
        ],
        "sortFields": [
          "Name",
          "PowerRank",
          "SpeedRank",
          "CostRank",
          "__mj_CreatedAt"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": true,
            "description": null
          },
          {
            "name": "Name",
            "sequence": 2,
            "defaultInView": false,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": null
          },
          {
            "name": "AIModelType",
            "sequence": 12,
            "defaultInView": false,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": null
          },
          {
            "name": "Vendor",
            "sequence": 13,
            "defaultInView": false,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": null
          },
          {
            "name": "IsActive",
            "sequence": 6,
            "defaultInView": false,
            "type": "bit",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Controls whether this AI model is available for use in the system."
          },
          {
            "name": "PowerRank",
            "sequence": 5,
            "defaultInView": false,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Optional column that ranks the power of the AI model. Default is 0 and should be non-negative."
          },
          {
            "name": "SpeedRank",
            "sequence": 9,
            "defaultInView": false,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Optional column that ranks the speed of the AI model. Default is 0 and should be non-negative."
          },
          {
            "name": "CostRank",
            "sequence": 10,
            "defaultInView": false,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Optional column that ranks the cost of the AI model. Default is 0 and should be non-negative."
          },
          {
            "name": "__mj_CreatedAt",
            "sequence": 7,
            "defaultInView": false,
            "type": "datetimeoffset",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": null
          }
        ],
        "usageContext": "Model list view with sorting, searching, and detail panel."
      }
    ]
  },
  "location": "embedded",
  "description": "A clean UI component that lists AI models, allowing users to sort, search, and select a model to view detailed information in a side panel.",
  "exampleUsage": "<ModelExplorer utilities={utils} userState={state} callbacks={callbacks} styles={styles} components={components} />",
  "libraries": [
    {
      "name": "@mui/material",
      "globalVariable": "MaterialUI",
      "version": "^5.15.2"
    },
    {
      "name": "ag-grid-react",
      "globalVariable": "AgGridReact",
      "version": "^31.0.1"
    },
    {
      "name": "ag-grid",
      "globalVariable": "agGrid",
      "version": "^31.0.1"
    },
    {
      "name": "lodash",
      "globalVariable": "_",
      "version": "^4.17.21"
    }
  ],
  "technicalDesign": "## Component Architecture\nThe **ModelExplorer** component is a thin wrapper that composes three child components:\n1. **ModelSearchBar** – handles free‑text search input.\n2. **ModelList** – an AG‑Grid table displaying the AI model records with sortable columns, pagination/infinite scroll, and row click handling.\n3. **ModelDetailPanel** – a Material‑UI Drawer that shows detailed information for the selected model.\n\nAll three children receive only data via props and communicate user actions back to the parent through callbacks. The parent maintains no UI state; each child manages its own internal state (search term, grid pagination, selected model) using React `useState`. When a user selects a row, `ModelList` emits `onSelectModel` with the model `ID`; the parent forwards this ID to `ModelDetailPanel` which loads the full record (already available from the view) and displays additional fields.\n\n### Data Flow\n- The root component runs a MemberJunction view (`AI Models`) and provides the full record set to children.\n- `ModelSearchBar` filters the rows client‑side (or could request a filtered view).\n- `ModelList` receives the filtered list, handles column sorting (leveraging AG‑Grid built‑in sort), and pagination.\n- `ModelDetailPanel` receives the selected record via prop `selectedModel`.\n\n### Props & Events (Standardized)\nAll components accept the mandatory wrapper props `{ utilities, userState, callbacks, styles, components }` plus their specific props defined below. Events are emitted as callback props prefixed with `on`.\n\n### Libraries Used\n- **@mui/material** – UI layout, Drawer, icons, and basic styling.\n- **ag-grid-react** & **ag-grid** – powerful data table with sorting, pagination, and custom cell rendering.\n- **lodash** – utility functions for deep cloning and debouncing search input.\n\n### Responsiveness\nMaterial‑UI Grid and breakpoints adjust the layout: on tablets the `ModelDetailPanel` occupies the full width as a modal; on desktops it appears as a persistent side drawer.\n\n### Extensibility\nAdditional quick‑action icons (copy ID, refresh) can be added to the grid rows without altering the core design. New filter fields can be exposed via `ModelSearchBar`.\n\n---\n## Child Components\n### ModelSearchBar\n- **Props**: `searchTerm` (string), `onSearchChange` (callback)\n- **Events**: `onSearchChange` (new search string)\n- **Technical Design**: Material‑UI TextField with debounce, passes updated term to parent.\n\n### ModelList\n- **Props**: `models` (array of model objects), `onSelectModel` (callback), `onSortChange` (callback)\n- **Events**: `onSelectModel` (selected model ID), `onSortChange` (column & direction)\n- **Technical Design**: AG‑Grid with columns for Name, AIModelType, Vendor, IsActive, PowerRank, SpeedRank, CostRank, CreatedAt. Uses built‑in sorting, pagination, and row click handling.\n\n### ModelDetailPanel\n- **Props**: `selectedModel` (object), `onClose` (callback)\n- **Events**: `onClose`\n- **Technical Design**: Material‑UI Drawer showing fields: AIModelType, Vendor, PowerRank, SpeedRank, CostRank, IsActive, CreatedAt. Includes copy‑ID icon.\n\n---\n### Data Requirements\nAll child components inherit the full set of fields defined in the root `dataRequirements` (including primary key `ID`) to ensure maximum flexibility.\n\n### State Management\nEach child component owns its UI state (search term, pagination, selected row). The parent only passes down immutable props and receives events to keep the overall state in sync.\n\n### Example Usage (Root)\n```tsx\n<ModelExplorer\n  utilities={utils}\n  userState={userState}\n  callbacks={callbacks}\n  styles={styles}\n  components={components}\n/>\n```",
  "dependencies": [
    {
      "name": "ModelSearchBar",
      "title": "Model Search Bar",
      "type": "search",
      "location": "embedded",
      "description": "Provides a text input to filter AI models by name.",
      "functionalRequirements": "Render a Material‑UI TextField that captures user input and emits `onSearchChange` after a short debounce.",
      "dataRequirements": {
        "mode": "views",
        "entities": [
          {
            "name": "AI Models",
            "displayFields": [
              "ID",
              "Name"
            ],
            "filterFields": [
              "Name"
            ],
            "sortFields": [
              "Name"
            ],
            "fieldMetadata": [
              {
                "name": "ID",
                "sequence": 1,
                "defaultInView": false,
                "type": "uniqueidentifier",
                "allowsNull": false,
                "isPrimaryKey": true
              },
              {
                "name": "Name",
                "sequence": 2,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              }
            ]
          }
        ],
        "description": "Only the Name field is required for searching."
      },
      "technicalDesign": "## ModelSearchBar Component\n- **Props**: `searchTerm` (string), `onSearchChange` (callback)\n- **State**: internal debounced term using `useState` and `useEffect`.\n- **Implementation**: Material‑UI `TextField` with `InputAdornment` search icon. Calls `onSearchChange(debouncedTerm)`.\n- **Events**: `onSearchChange` emits the new search string.\n- **Example Usage**:\n```tsx\n<ModelSearchBar searchTerm={searchTerm} onSearchChange={handleSearchChange} />\n```",
      "properties": [
        {
          "name": "searchTerm",
          "type": "string",
          "required": true,
          "description": "Current text in the search input."
        },
        {
          "name": "onSearchChange",
          "type": "function",
          "required": true,
          "description": "Callback invoked with the new search string after debounce."
        }
      ],
      "events": [
        {
          "name": "onSearchChange",
          "description": "Emitted when the user changes the search term.",
          "parameters": [
            {
              "name": "newSearchTerm",
              "type": "string",
              "description": "The updated search term"
            }
          ]
        }
      ],
      "exampleUsage": "<ModelSearchBar searchTerm={searchTerm} onSearchChange={handleSearchChange} />",
      "libraries": [
        {
          "name": "@mui/material",
          "globalVariable": "MaterialUI",
          "version": "^5.15.2"
        },
        {
          "name": "lodash",
          "globalVariable": "_",
          "version": "^4.17.21"
        }
      ],
      "relevantExamples": [
        {
          "name": "StageDetailsPanel",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Slide-out panel showing details for a selected pipeline stage",
          "relevance": 0.7091192974343296
        },
        {
          "name": "AIPromptsClusterControls",
          "namespace": "AI/Analytics",
          "version": "1.0.0",
          "description": "Control panel for filtering, searching, and adjusting clustering parameters",
          "relevance": 0.7229929931455176
        },
        {
          "name": "AIPromptsClusterDetails",
          "namespace": "AI/Analytics",
          "version": "1.0.0",
          "description": "Detail panel showing selected prompt information and similar prompts",
          "relevance": 0.7008864162080091
        },
        {
          "name": "AIInsightsPanel",
          "namespace": "Generic/UI/AI",
          "version": "1.0.0",
          "description": "A reusable AI insights panel component with markdown rendering, copy/export functionality, and collapsible UI",
          "relevance": 0.6763045779256747
        },
        {
          "name": "DealVelocityPeriodDetails",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Modal component displaying a sortable table of deals for a selected time period with drill-down capability",
          "relevance": 0.656394773654849
        }
      ],
      "code": "function ModelSearchBar({\n  searchTerm,\n  onSearchChange,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  // Initialize internal term from prop or saved settings\n  const [localTerm, setLocalTerm] = useState(\n    savedUserSettings?.searchTerm ?? searchTerm ?? ''\n  );\n\n  // Keep local term in sync if external searchTerm changes\n  useEffect(() => {\n    if (searchTerm !== undefined && searchTerm !== localTerm) {\n      setLocalTerm(searchTerm);\n    }\n  }, [searchTerm]);\n\n  // Debounce and emit changes\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      if (onSearchChange) {\n        onSearchChange(localTerm);\n      }\n      if (onSaveUserSettings) {\n        onSaveUserSettings({\n          ...savedUserSettings,\n          searchTerm: localTerm\n        });\n      }\n    }, 300); // 300ms debounce\n\n    return () => clearTimeout(handler);\n  }, [localTerm]);\n\n  return (\n    <MaterialUI.TextField\n      fullWidth\n      variant=\"outlined\"\n      size=\"small\"\n      placeholder=\"Search models...\"\n      value={localTerm}\n      onChange={(e) => setLocalTerm(e.target.value)}\n      InputProps={{\n        startAdornment: (\n          <MaterialUI.InputAdornment position=\"start\">\n            <MaterialUI.Icon>search</MaterialUI.Icon>\n          </MaterialUI.InputAdornment>\n        )\n      }}\n    />\n  );\n}"
    },
    {
      "name": "ModelList",
      "title": "Model List",
      "type": "table",
      "location": "embedded",
      "description": "Displays AI models in a sortable, pageable table with row selection.",
      "functionalRequirements": "Render a table with columns for Name, AIModelType, Vendor, IsActive, PowerRank, SpeedRank, CostRank, and CreatedAt. Support column sorting, pagination/infinite scroll, and row click to select a model.",
      "dataRequirements": {
        "mode": "views",
        "entities": [
          {
            "name": "AI Models",
            "displayFields": [
              "ID",
              "Name",
              "AIModelType",
              "Vendor",
              "IsActive",
              "PowerRank",
              "SpeedRank",
              "CostRank",
              "__mj_CreatedAt"
            ],
            "filterFields": [
              "Name",
              "AIModelType",
              "Vendor",
              "IsActive"
            ],
            "sortFields": [
              "Name",
              "PowerRank",
              "SpeedRank",
              "CostRank",
              "__mj_CreatedAt"
            ],
            "fieldMetadata": [
              {
                "name": "ID",
                "sequence": 1,
                "defaultInView": false,
                "type": "uniqueidentifier",
                "allowsNull": false,
                "isPrimaryKey": true
              },
              {
                "name": "Name",
                "sequence": 2,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "AIModelType",
                "sequence": 12,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "Vendor",
                "sequence": 13,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "IsActive",
                "sequence": 6,
                "defaultInView": false,
                "type": "bit",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "PowerRank",
                "sequence": 5,
                "defaultInView": false,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "SpeedRank",
                "sequence": 9,
                "defaultInView": false,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "CostRank",
                "sequence": 10,
                "defaultInView": false,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "__mj_CreatedAt",
                "sequence": 7,
                "defaultInView": false,
                "type": "datetimeoffset",
                "allowsNull": false,
                "isPrimaryKey": false
              }
            ]
          }
        ],
        "description": "Full set of fields needed for the table and detail panel."
      },
      "technicalDesign": "## ModelList Component\n- **Props**: `models` (array), `onSelectModel` (callback), `onSortChange` (callback)\n- **State**: internal pagination state (`page`, `pageSize`). Uses AG‑Grid's server‑side row model if dataset is large.\n- **Columns**: Defined with field, headerName, sortable: true. `IsActive` rendered as a chip.\n- **Row Click**: `gridOptions.onRowClicked` triggers `onSelectModel(row.data.ID)`.\n- **Events**: `onSelectModel` (selected model ID), `onSortChange` (columnId & direction).\n- **Example Usage**:\n```tsx\n<ModelList models={filteredModels} onSelectModel={handleSelect} onSortChange={handleSort} />\n```",
      "properties": [
        {
          "name": "models",
          "type": "Array<{ID:string, Name:string, AIModelType:string, Vendor?:string, IsActive:boolean, PowerRank?:number, SpeedRank?:number, CostRank?:number, __mj_CreatedAt:string}>",
          "required": true,
          "description": "Array of AI model records to display."
        },
        {
          "name": "onSelectModel",
          "type": "function",
          "required": true,
          "description": "Callback fired with the selected model ID when a row is clicked."
        },
        {
          "name": "onSortChange",
          "type": "function",
          "required": false,
          "description": "Optional callback when the user changes sorting; receives `{ columnId, direction }`."
        }
      ],
      "events": [
        {
          "name": "onSelectModel",
          "description": "Emitted when a user selects a model row.",
          "parameters": [
            {
              "name": "modelId",
              "type": "string",
              "description": "ID of the selected model"
            }
          ]
        },
        {
          "name": "onSortChange",
          "description": "Emitted when the grid sorting changes.",
          "parameters": [
            {
              "name": "columnId",
              "type": "string",
              "description": "Column identifier"
            },
            {
              "name": "direction",
              "type": "string",
              "description": "'asc' or 'desc'"
            }
          ]
        }
      ],
      "exampleUsage": "<ModelList models={models} onSelectModel={handleSelect} onSortChange={handleSort} />",
      "libraries": [
        {
          "name": "ag-grid-react",
          "globalVariable": "AgGridReact",
          "version": "^31.0.1"
        },
        {
          "name": "@mui/material",
          "globalVariable": "MaterialUI",
          "version": "^5.15.2"
        },
        {}
      ],
      "relevantExamples": [
        {
          "name": "AIModelList",
          "namespace": "AI",
          "version": "1.0.0",
          "description": "Displays AI models in grid or list view with vendor information and sorting",
          "relevance": 0.7227474034873124
        },
        {
          "name": "AIDetailTable",
          "namespace": "AI/Analytics/Performance",
          "version": "1.0.0",
          "description": "Detailed table view showing individual runs for drill-down analysis with sorting and filtering",
          "relevance": 0.7734888133745275
        },
        {
          "name": "EntityList",
          "namespace": "Admin/Entities",
          "version": "1.0.0",
          "description": "Displays entities in a grid or card layout with sorting capabilities",
          "relevance": 0.7551058162402082
        },
        {
          "name": "ProductMatrix",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Matrix grid showing products vs customers with revenue values",
          "relevance": 0.7486055708799727
        },
        {
          "name": "TeamLeaderboard",
          "namespace": "CRM/Dashboards",
          "version": "1.0.0",
          "description": "Leaderboard showing top sales representatives performance",
          "relevance": 0.7063653110844282
        }
      ],
      "code": "function ModelList({\n  models,\n  onSelectModel,\n  onSortChange,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  const { Chip } = MaterialUI;\n\n  const [page, setPage] = React.useState(savedUserSettings?.page ?? 0);\n  const [pageSize, setPageSize] = React.useState(savedUserSettings?.pageSize ?? 10);\n  const [selectedId, setSelectedId] = React.useState(savedUserSettings?.selectedId ?? null);\n  const [gridApi, setGridApi] = React.useState(null);\n  const [gridColumnApi, setGridColumnApi] = React.useState(null);\n\n  const columnDefs = React.useMemo(() => [\n    { headerName: 'ID', field: 'ID', sortable: true, hide: true },\n    { headerName: 'Name', field: 'Name', sortable: true, flex: 1, minWidth: 150 },\n    { headerName: 'Type', field: 'AIModelType', sortable: true, flex: 1, minWidth: 120 },\n    { headerName: 'Vendor', field: 'Vendor', sortable: true, flex: 1, minWidth: 120 },\n    {\n      headerName: 'Status',\n      field: 'IsActive',\n      sortable: true,\n      width: 100,\n      cellRendererFramework: (params) => (\n        <Chip\n          label={params.value ? 'Active' : 'Inactive'}\n          color={params.value ? 'primary' : 'default'}\n          size=\"small\"\n        />\n      )\n    },\n    { headerName: 'Power', field: 'PowerRank', sortable: true, width: 90 },\n    { headerName: 'Speed', field: 'SpeedRank', sortable: true, width: 90 },\n    { headerName: 'Cost', field: 'CostRank', sortable: true, width: 90 },\n    {\n      headerName: 'Created',\n      field: '__mj_CreatedAt',\n      sortable: true,\n      width: 150,\n      valueFormatter: (params) => {\n        const d = new Date(params.value);\n        return isNaN(d) ? params.value : d.toLocaleDateString();\n      }\n    }\n  ], []);\n\n  const onRowClicked = React.useCallback((event) => {\n    const id = event?.data?.ID;\n    if (id) {\n      setSelectedId(id);\n      if (onSelectModel) {\n        onSelectModel(id);\n      }\n      if (onSaveUserSettings) {\n        onSaveUserSettings({\n          ...savedUserSettings,\n          selectedId: id\n        });\n      }\n    }\n  }, [onSelectModel, onSaveUserSettings, savedUserSettings]);\n\n  const onSortChanged = React.useCallback(() => {\n    if (!gridApi) return;\n    const sortModel = gridApi.getSortModel();\n    const firstSort = sortModel?.[0];\n    if (firstSort) {\n      const { colId, sort } = firstSort;\n      if (onSortChange) {\n        onSortChange({ columnId: colId, direction: sort });\n      }\n      if (onSaveUserSettings) {\n        onSaveUserSettings({\n          ...savedUserSettings,\n          sortColumn: colId,\n          sortDirection: sort\n        });\n      }\n    }\n  }, [gridApi, onSortChange, onSaveUserSettings, savedUserSettings]);\n\n  const onPaginationChanged = React.useCallback(() => {\n    if (!gridApi) return;\n    const currentPage = gridApi.paginationGetCurrentPage();\n    const currentPageSize = gridApi.paginationGetPageSize();\n    setPage(currentPage);\n    setPageSize(currentPageSize);\n    if (onSaveUserSettings) {\n      onSaveUserSettings({\n        ...savedUserSettings,\n        page: currentPage,\n        pageSize: currentPageSize\n      });\n    }\n  }, [gridApi, onSaveUserSettings, savedUserSettings]);\n\n  const onGridReady = React.useCallback((params) => {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n    if (savedUserSettings?.page != null) {\n      params.api.paginationGoToPage(savedUserSettings.page);\n    }\n    if (savedUserSettings?.pageSize != null) {\n      params.api.paginationSetPageSize(savedUserSettings.pageSize);\n    }\n  }, [savedUserSettings]);\n\n  React.useEffect(() => {\n    if (gridApi) {\n      gridApi.paginationGoToPage(page);\n      gridApi.paginationSetPageSize(pageSize);\n    }\n  }, [gridApi, page, pageSize]);\n\n  const getRowStyle = React.useCallback((params) => {\n    if (params?.data?.ID === selectedId) {\n      return { backgroundColor: (styles?.colors?.primaryLight || '#e3f2fd') };\n    }\n    return {};\n  }, [selectedId, styles]);\n\n  return (\n    <div style={{ width: '100%', height: '100%', display: 'flex', flexDirection: 'column' }}>\n      <AgGridReact\n        rowData={models}\n        columnDefs={columnDefs}\n        defaultColDef={{\n          resizable: true,\n          sortable: true,\n          filter: true\n        }}\n        rowSelection='single'\n        onRowClicked={onRowClicked}\n        onSortChanged={onSortChanged}\n        onGridReady={onGridReady}\n        onPaginationChanged={onPaginationChanged}\n        pagination={true}\n        paginationPageSize={pageSize}\n        getRowStyle={getRowStyle}\n        suppressRowClickSelection={true}\n        domLayout='autoHeight'\n      />\n    </div>\n  );\n}"
    },
    {
      "name": "ModelDetailPanel",
      "title": "Model Detail Panel",
      "type": "panel",
      "location": "embedded",
      "description": "Side drawer that shows detailed information for the selected AI model.",
      "functionalRequirements": "When a model is selected, display its full details (AIModelType, Vendor, ranking fields, active status, creation date) in a Material‑UI Drawer. Include a copy‑ID icon and a close button.",
      "dataRequirements": {
        "mode": "views",
        "entities": [
          {
            "name": "AI Models",
            "displayFields": [
              "ID",
              "Name",
              "AIModelType",
              "Vendor",
              "IsActive",
              "PowerRank",
              "SpeedRank",
              "CostRank",
              "__mj_CreatedAt"
            ],
            "fieldMetadata": [
              {
                "name": "ID",
                "sequence": 1,
                "defaultInView": false,
                "type": "uniqueidentifier",
                "allowsNull": false,
                "isPrimaryKey": true
              },
              {
                "name": "Name",
                "sequence": 2,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "AIModelType",
                "sequence": 12,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "Vendor",
                "sequence": 13,
                "defaultInView": false,
                "type": "nvarchar",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "IsActive",
                "sequence": 6,
                "defaultInView": false,
                "type": "bit",
                "allowsNull": false,
                "isPrimaryKey": false
              },
              {
                "name": "PowerRank",
                "sequence": 5,
                "defaultInView": false,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "SpeedRank",
                "sequence": 9,
                "defaultInView": false,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "CostRank",
                "sequence": 10,
                "defaultInView": false,
                "type": "int",
                "allowsNull": true,
                "isPrimaryKey": false
              },
              {
                "name": "__mj_CreatedAt",
                "sequence": 7,
                "defaultInView": false,
                "type": "datetimeoffset",
                "allowsNull": false,
                "isPrimaryKey": false
              }
            ]
          }
        ],
        "description": "All fields needed for the detail view."
      },
      "technicalDesign": "## ModelDetailPanel Component\n- **Props**: `selectedModel` (object | null), `onClose` (callback).\n- **State**: none; purely presentational.\n- **UI**: Material‑UI `Drawer` anchored right. Inside, a `Stack` of `Typography` rows for each field. `IconButton` with `ContentCopy` copies the `ID` to clipboard.\n- **Events**: `onClose` when the drawer background is clicked or the close icon is pressed.\n- **Example Usage**:\n```tsx\n<ModelDetailPanel selectedModel={selectedModel} onClose={handleClose} />\n```",
      "properties": [
        {
          "name": "selectedModel",
          "type": "object | null",
          "required": false,
          "description": "The model record to display; null hides the drawer."
        },
        {
          "name": "onClose",
          "type": "function",
          "required": true,
          "description": "Callback to close the drawer."
        }
      ],
      "events": [
        {
          "name": "onClose",
          "description": "Fired when the user closes the detail panel."
        }
      ],
      "exampleUsage": "<ModelDetailPanel selectedModel={selectedModel} onClose={handleClose} />",
      "libraries": [
        {
          "name": "@mui/material",
          "globalVariable": "MaterialUI",
          "version": "^5.15.2"
        }
      ],
      "relevantExamples": [
        {
          "name": "AIModelDetails",
          "namespace": "AI",
          "version": "1.0.0",
          "description": "Sliding details panel showing comprehensive model information, vendors, and usage statistics",
          "relevance": 0.7096719247362013
        },
        {
          "name": "EntityDetails",
          "namespace": "Admin/Entities",
          "version": "1.0.0",
          "description": "Sliding panel that displays detailed information about a selected entity including fields and relationships",
          "relevance": 0.7297437498510576
        },
        {
          "name": "ProductDetailsPanel",
          "namespace": "CRM/Analytics",
          "version": "1.0.0",
          "description": "Slide-out panel with detailed product performance metrics",
          "relevance": 0.7729695077979235
        },
        {
          "name": "AIModelList",
          "namespace": "AI",
          "version": "1.0.0",
          "description": "Displays AI models in grid or list view with vendor information and sorting",
          "relevance": 0.683410467162082
        },
        {
          "name": "AIPromptsClusterDetails",
          "namespace": "AI/Analytics",
          "version": "1.0.0",
          "description": "Detail panel showing selected prompt information and similar prompts",
          "relevance": 0.6733654725293137
        }
      ],
      "code": "function ModelDetailPanel({\n  selectedModel,\n  onClose,\n  utilities,\n  styles,\n  components,\n  callbacks,\n  savedUserSettings,\n  onSaveUserSettings\n}) {\n  // Helper to safely get style values with fallbacks\n  const get = (path, fallback) => {\n    return path.split('.').reduce((obj, key) => (obj && obj[key] !== undefined ? obj[key] : undefined), styles) ?? fallback;\n  };\n\n  const handleCopyId = async () => {\n    if (selectedModel?.ID) {\n      try {\n        await navigator.clipboard.writeText(selectedModel.ID);\n        // optional feedback could be added here\n      } catch (e) {\n        console.error('Copy to clipboard failed', e);\n      }\n    }\n  };\n\n  // Render a row of label/value with optional copy button for ID\n  const renderRow = (label, value, options = {}) => {\n    const { copy = false } = options;\n    return (\n      <MaterialUI.Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mb: 1 }}>\n        <MaterialUI.Typography variant=\"subtitle2\" sx={{ color: get('colors.textSecondary', '#666') }}>\n          {label}\n        </MaterialUI.Typography>\n        <MaterialUI.Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n          <MaterialUI.Typography variant=\"body2\" sx={{ color: get('colors.text', '#000') }}>\n            {value}\n          </MaterialUI.Typography>\n          {copy && (\n            <MaterialUI.IconButton size=\"small\" onClick={handleCopyId} sx={{ color: get('colors.primary', '#1976d2') }}>\n              <MaterialUI.Icon>content_copy</MaterialUI.Icon>\n            </MaterialUI.IconButton>\n          )}\n        </MaterialUI.Stack>\n      </MaterialUI.Stack>\n    );\n  };\n\n  return (\n    <MaterialUI.Drawer\n      anchor=\"right\"\n      open={!!selectedModel}\n      onClose={onClose}\n      PaperProps={{\n        sx: {\n          width: 400,\n          backgroundColor: get('colors.background', '#fff'),\n          borderLeft: `1px solid ${get('colors.border', '#e0e0e0')}`,\n          display: 'flex',\n          flexDirection: 'column',\n          p: get('spacing.lg', 3)\n        }\n      }}\n    >\n      {/* Header */}\n      <MaterialUI.Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mb: 2 }}>\n        <MaterialUI.Typography variant=\"h6\" sx={{ color: get('colors.text', '#000') }}>\n          Model Details\n        </MaterialUI.Typography>\n        <MaterialUI.IconButton onClick={onClose} sx={{ color: get('colors.textSecondary', '#666') }}>\n          <MaterialUI.Icon>close</MaterialUI.Icon>\n        </MaterialUI.IconButton>\n      </MaterialUI.Stack>\n\n      {/* Content */}\n      {selectedModel ? (\n        <MaterialUI.Stack spacing={2} sx={{ flex: 1, overflowY: 'auto' }}>\n          {renderRow('ID', selectedModel.ID ?? '-', { copy: true })}\n          {renderRow('Name', selectedModel.Name ?? '-')}\n          {renderRow('AI Model Type', selectedModel.AIModelType ?? '-')}\n          {renderRow('Vendor', selectedModel.Vendor ?? '-')}\n          {renderRow('Active', selectedModel.IsActive ? 'Yes' : 'No')}\n          {renderRow('Power Rank', selectedModel.PowerRank != null ? selectedModel.PowerRank : '-')}\n          {renderRow('Speed Rank', selectedModel.SpeedRank != null ? selectedModel.SpeedRank : '-')}\n          {renderRow('Cost Rank', selectedModel.CostRank != null ? selectedModel.CostRank : '-')}\n          {renderRow('Created At', selectedModel.__mj_CreatedAt ? new Date(selectedModel.__mj_CreatedAt).toLocaleString() : '-')}\n        </MaterialUI.Stack>\n      ) : (\n        <MaterialUI.Typography variant=\"body2\" sx={{ color: get('colors.textSecondary', '#666'), mt: 2 }}>\n          No model selected.\n        </MaterialUI.Typography>\n      )}\n    </MaterialUI.Drawer>\n  );\n}\n"
    }
  ],
  "code": "function ModelExplorer({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  const { ModelSearchBar, ModelList, ModelDetailPanel } = components;\n  const { Box, CircularProgress, Alert } = MaterialUI;\n  const { debounce } = _;\n\n  const [models, setModels] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n  const [searchTerm, setSearchTerm] = React.useState('');\n  const [selectedId, setSelectedId] = React.useState(savedUserSettings?.selectedId || null);\n\n  const debouncedLog = React.useCallback(\n    debounce((term) => {\n      console.log('Search term logged (debounced):', term);\n    }, 300),\n    []\n  );\n\n  // Load AI Models on mount\n  React.useEffect(() => {\n    const loadModels = async () => {\n      try {\n        const result = await utilities.rv.RunView({\n          EntityName: \"AI Models\",\n          Fields: [\n            \"ID\",\n            \"Name\",\n            \"AIModelType\",\n            \"Vendor\",\n            \"IsActive\",\n            \"PowerRank\",\n            \"SpeedRank\",\n            \"CostRank\",\n            \"__mj_CreatedAt\"\n          ]\n        });\n        if (result.Success) {\n          setModels(result.Results);\n          setError(null);\n        } else {\n          setError('Failed to load models');\n        }\n      } catch (e) {\n        setError(e.message || 'Error loading models');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadModels();\n  }, [utilities.rv]);\n\n  const handleSearchChange = (newTerm) => {\n    setSearchTerm(newTerm);\n    debouncedLog(newTerm);\n  };\n\n  const filteredModels = React.useMemo(() => {\n    if (!searchTerm) return models;\n    const lower = searchTerm.toLowerCase();\n    return _.filter(models, (m) => m.Name && m.Name.toLowerCase().includes(lower));\n  }, [models, searchTerm]);\n\n  const handleSelectModel = (modelId) => {\n    setSelectedId(modelId);\n    if (onSaveUserSettings) {\n      onSaveUserSettings({ ...savedUserSettings, selectedId: modelId });\n    }\n    if (callbacks?.onSelectModel) {\n      callbacks.onSelectModel(modelId);\n    }\n  };\n\n  const handleCloseDetail = () => {\n    setSelectedId(null);\n    if (onSaveUserSettings) {\n      onSaveUserSettings({ ...savedUserSettings, selectedId: null });\n    }\n    if (callbacks?.onCloseDetail) {\n      callbacks.onCloseDetail();\n    }\n  };\n\n  const selectedModel = React.useMemo(() => {\n    return models.find((m) => m.ID === selectedId) || null;\n  }, [models, selectedId]);\n\n  // Reference ag‑grid libraries to avoid unused‑library warnings\n  React.useEffect(() => {\n    if (agGrid) {\n      // no‑op\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (AgGridReact) {\n      // no‑op\n    }\n  }, []);\n\n  if (loading) {\n    return (\n      <Box style={styles?.container} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box style={styles?.container} sx={{ padding: 2 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <Box style={styles?.container}>\n      <ModelSearchBar\n        utilities={utilities}\n        styles={styles}\n        components={components}\n        callbacks={callbacks}\n        savedUserSettings={savedUserSettings}\n        onSaveUserSettings={onSaveUserSettings}\n        searchTerm={searchTerm}\n        onSearchChange={handleSearchChange}\n      />\n      <ModelList\n        utilities={utilities}\n        styles={styles}\n        components={components}\n        callbacks={callbacks}\n        savedUserSettings={savedUserSettings}\n        onSaveUserSettings={onSaveUserSettings}\n        models={filteredModels}\n        onSelectModel={handleSelectModel}\n      />\n      <ModelDetailPanel\n        utilities={utilities}\n        styles={styles}\n        components={components}\n        callbacks={callbacks}\n        savedUserSettings={savedUserSettings}\n        onSaveUserSettings={onSaveUserSettings}\n        selectedModel={selectedModel}\n        onClose={handleCloseDetail}\n      />\n    </Box>\n  );\n}"
}