/**
 * @fileoverview Artifact management types for Skip API
 * 
 * This file contains types related to artifacts - persistent objects created and managed
 * through Skip conversations. These types define the structure for:
 * 
 * - Artifact definitions and metadata (SkipAPIArtifact)
 * - Artifact type specifications (SkipAPIArtifactType)
 * - Artifact versioning (SkipAPIArtifactVersion)
 * - Artifact creation requests (SkipAPIArtifactRequest)
 * 
 * Artifacts in Skip represent persistent outputs from AI interactions that can be
 * saved, versioned, shared, and iterated upon. They can contain various types of
 * content including reports, code, documents, or other structured data that users
 * want to preserve and refine over time.
 * 
 * The artifact system supports versioning, allowing users to see the evolution of
 * AI-generated content and compare different iterations. It also includes sharing
 * capabilities and user feedback mechanisms to improve future artifact generation.
 * 
 * @author MemberJunction
 * @since 2.0.0
 */

/**
 * Defines information about a single artifact type
 */
export type SkipAPIArtifactType = {
    id: string;
    name: string;
    description: string;
    /**
     * MIME type or content identifier for this artifact type
     */
    contentType: string;
    enabled: boolean;
    createdAt: Date;
    updatedAt: Date;
}

/**
 * Represents a specific version of an artifact, containing the actual content,
 * configuration, and user feedback for that version. Each artifact can have
 * multiple versions as it evolves through user interactions.
 */
export type SkipAPIArtifactVersion = {
    /**
     * Primary key for the artifact version - globally unique
     */
    id: string;
    /**
     * Foreign key to the related artifact - not using a link to the object here to avoid circular references
     */
    artifactId: string; 
    /**
     * Auto increment sequential version, start with 1 for each artifact
     */
    version: number;
    /**
     * The contents of this field are dependent on the artifact type, in some cases it might be unused, in others it might be JSON, plain text, or even base-64 encoded binary data for something like an image
     */
    configuration: string;
    /**
     * The contents of this field are dependent on the artifact type, in some cases it might be unused, in others it might be JSON, plain text, or even base-64 encoded binary data for something like an image
     */
    content: string;
    /**
     * User comments for this specific version of the artifact, used for user's own purposes and can be used as feedback loop for AI to learn from and improve future versions/responses.
     */
    comments: string;
    createdAt: Date;
    updatedAt: Date;
}

/**
 * Complete artifact definition including metadata, type information, sharing settings,
 * and all versions. Artifacts are the primary way to persist and version AI-generated
 * content across conversations.
 */
export type SkipAPIArtifact = {
    /**
     * Primary key for the artifact
     */
    id: string;
    /**
     * AI generated name for the artifact
     */
    name: string;
    /**
     * AI generated description for the artifact
     * This is a short description of the artifact that is generated by the AI system and is used to provide context for the artifact
     */
    description: string;
    /**
     * Foreign key to the related conversation
     */
    conversationId: string;

    /**
     * Related artifact type
     */
    artifactType: SkipAPIArtifactType;

    /**
     * Defines the level of sharing the owner of this artifact (which is the owner of the related conversation) has selected for this artifact
     */
    sharingScope: 'None' |'SpecificUsers' |'Everyone' |'Public';

    /**
     * Comments from the user about the artifact
     */
    comments: string;

    /**
     * Array of versions of this artifact
     * This is a one-to-many relationship, where each artifact can have multiple versions
     */
    versions: SkipAPIArtifactVersion[];

    createdAt: Date;
    updatedAt: Date;
}

/**
 * Defines the shape of the data that is used to request an artifact from the Skip API Server
 */
export type SkipAPIArtifactRequest = {
    /**
     * The agent should request new_artifact if an entirely new artifact should be created. This should be selected if there are no existing artifacts in the 
     * conversation, OR if the user has asked for something that is not logically related to existing artifacts for the given conversation and it makes more
     * sense to create a new artifact entirely.
     * 
     * new_artifact_version, on the other hand, should be used when the user has asked for something that is logically related to an existing artifact and it is
     * most logical to add a new version to that existing artifact for example iterating on various versions of a report over time.
     */
    action: "new_artifact" | "new_artifact_version";

    /**
     * This is only provided when action === 'new_artifact_version' and is used to indicate the artifact that a new version is being added to. When action == 'new_artifact'
     * this property is not used.
     */
    artifactId?: string;
    
    /**
     * The name of the artifact or artifact version that is being created. Generated by the AI agent.
     */
    name: string;
    /**
     * The description of the artifact or artifact version that is being created. Generated by the AI agent.
     */
    description: string;
}