/**
 * @fileoverview HTML report interface types for Skip API
 * 
 * This file contains types that define the interface between Skip-generated HTML reports
 * and their container applications. These types enable rich, interactive HTML reports that
 * can communicate with the host MemberJunction environment. The types define:
 * 
 * - Report callback interfaces for parent-child communication (SkipHTMLReportCallbacks)
 * - Report object interfaces that HTML reports must implement (SkipHTMLReportObject)
 * - Initialization parameters and utility interfaces (SkipHTMLReportInitParams, SkipHTMLReportUtilities)
 * - Styling and theming interfaces (SkipHTMLReportBaseStyles)
 * - Simplified metadata and data access interfaces (SimpleMetadata, SimpleRunView, SimpleRunQuery)
 * 
 * HTML reports generated by Skip implement the SkipHTMLReportObject interface and expose
 * themselves globally on the window object, allowing container applications to initialize,
 * refresh, and print them. The reports can call back to the container through the provided
 * callback functions to refresh data, open records, update user state, and send custom events.
 * 
 * The utility interfaces provide HTML reports with controlled access to the MemberJunction
 * system for dynamic data access, metadata queries, and view execution without requiring
 * full access to the underlying MJ APIs.
 * 
 * @author MemberJunction
 * @since 2.0.0
 */

import { CompositeKey, RunQueryParams, RunQueryResult, RunViewParams, RunViewResult } from "@memberjunction/core";
import { SimpleDataContext } from "./report-types";
import { SkipEntityInfo } from "./entity-metadata-types";

/**
 * This interface defines the available callback functions that a Skip HTML report might call in the parent.
 */
export interface SkipHTMLReportCallbacks {
    /**
     * The HTML Report can invoke this method in the callbacks object, when provided, to refresh the data context 
     * and that will in turn result in the HTML Report's init function being called again with the new data context.
     * @returns 
     */
    RefreshData: () => void;

    /**
     * If an action occurs inside an HTML Report where it would be desirable for the containing UI to open a specific 
     * record, if supported, this event can be listened to and the container UI can then open the record.
     * @param entityName - this is the Entity NAME from the Entity metadata, not the table name or base view name. Use Entity Metadata to provide the entity name here
     * @param key - this is an array of key/value pairs representing the primary key. The format of a Composite Key is an array of KeyValuePair objects and KeyValuePair objects simply have FieldName and Value properties. In most cases entities have single-valued primary keys but this structure is here for complex entity types that have composite primary keys
     * @returns 
     */
    OpenEntityRecord: (entityName: string, key: CompositeKey) => void;

    /**
     * This event should be raised by the HTML component whenever something changes within the component that should be tracked as a change in state
     * that will persist. userState is any valid, simple JavaScript object, meaning it can have scalars, arrays, objects, etc, it must be an object that 
     * can be serialized to JSON, but otherwise has no special requirements. The parent component will be responsible for tracking the user-specific states
     * and passing them back to the HTML component each time it is loaded or if the user changes via the init function.
     * @param userState 
     * @returns 
     */
    UpdateUserState: (userState: any) => void;

    /**
     * Used for any other type of event notification that an HTML Report might want to send to the parent component.
     * @param eventName 
     * @param eventData 
     * @returns 
     */
    NotifyEvent: (eventName: string, eventData: any) => void;
}

/**
 * This is the function signature for the initialization function provided by each HTML report via the SkipHTMLReportObject so that a container can interact with it.
 * This function is called when the HTML report is loaded by its container. The function receives the data context, an optional userState property, and a set of callbacks that can be used to interact with the parent component.
 * userState is an optional parameter that can be used to pass in any state information that the parent component wants to provide to the HTML report that is specific
 * to the CURRENT user. If the component modifies the userState, it should notify the parent component via the UserStateChanged event in the callbacks object so that the parent component can handle storage.
 */
export type SkipHTMLReportInitFunction = (params: SkipHTMLReportInitParams) => void;

/**
 * This is the function signature for the print function that is provided by the HTML report via the SkipHTMLReportObject
 */
export type SkipHTMLReportPrintFunction = () => void;
/**
 * This is the function signature for the refresh function that is provided by the HTML report via the SkipHTMLReportObject
 */
export type SkipHTMLReportRefreshFunction = () => void;

/**
 * Parameters that are passed to the SkipHTMLReportInitFunction when it is called by the parent component.
 */
export interface SkipHTMLReportInitParams {
    data: SimpleDataContext;
    utilities?: SkipHTMLReportUtilities;
    userState?: any;
    callbacks?: SkipHTMLReportCallbacks;
    styles?: SkipHTMLReportStyles;
}

/**
 * This interface defines styles that can be applied to the HTML report. The container can provide
 * styles to the top level report component. The top level report component can alter these styles based on
 * the prompting of the user, learned notes, etc, and adjust the styles of the report accordingly. In addition
 * the top level report will pass in its computed styles to each sub-component so that the sub-components
 * can do the same recursively down to any level of depth. This allows sub-components to inherit styles but
 * also make adjustments as required based on functional needs and user input.
 */
export interface SkipHTMLReportStyles {
    colors: {
        primary: string// '#2196f3',
        primaryHover: string // '#1976d2',
        secondary: string // '#757575',
        success: string // '#4caf50',
        background: string // '#ffffff',
        surface: string // '#f8f9fa',
        text: string //'#333333',
        textSecondary: string // '#656565',
        border: string // '#e2e8f0',
    };
    spacing: {
        xs: string // '4px',
        sm: string // '8px',
        md: string // '16px',
        lg: string // '24px',
        xl: string // '32px',
    };
    typography: {
        fontFamily: string //'-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
        fontSize: {
          sm: string // '14px',
          md: string // '16px',
          lg: string // '18px',
          xl: string // '24px'
        },
    };
    borders: {
        radius: string // '4px';
        width: string // '1px';
    }
    overflow: string
}

/**
 * This is the interface that each HTML report will expose to the parent component and assign it a name globally on the window object so that the parent component can call it.
 * The HTML report will create this object and it will include the members defined in this interface.
 */
export interface SkipHTMLReportObject {
   /**
    * The React component that Angular will render directly using ReactDOM.
    * This component receives props including data, userState, callbacks, utilities, and baseStyles.
    */
   component: any; // really a React.ComponentType<RootComponentProps>;

    /**
     * The optional print function that is called when the user clicks on the print button in the parent of the HTML report. This function will never be called by the parent before the init function so the print function
     * can assume the report has been initialized;
     */
    print?: SkipHTMLReportPrintFunction;

    /**
     * The optional refresh function that is called when the user clicks on the refresh button in the parent of the HTML report. This function will never be called by the parent before the init function so the refresh function
     */
    refresh?: SkipHTMLReportRefreshFunction;
}

/**
 * This interface defines the utilities that are available to the Skip HTML report. These utilities are used to interact with the host MemberJunction system to 
 * retrieve metadata, run views, and run queries. The utilities are passed into the SkipHTMLReportInitFunction by the container.
 */
export interface SkipHTMLReportUtilities {
    md: SimpleMetadata,
    rv: SimpleRunView,
    rq: SimpleRunQuery
}
/**
 * Simple version of the @interface Metadata MemberJunction object that is passed to the Skip HTML report.
 */
export interface SimpleMetadata {
    entities: SkipEntityInfo[]
}

/**
* Simple interface for running views in MemberJunction that can be used by HTML reports generated by Skip
 */
export interface SimpleRunView {
    /**
     * Run a single view and return the results. The view is run dynamically against the MemberJunction host environment.
     * @param params 
     * @returns 
     */
    runView: (params: RunViewParams) => Promise<RunViewResult>
    /**
     * Runs multiple views and returns the results. This is useful for running multiple views in parallel and returning the results in a single call.
     * @param params 
     * @returns 
     */
    runViews: (params: RunViewParams[]) => Promise<RunViewResult[]>
}

/**
 * Simple interface for running predefined queries in MemberJunction that can be used by HTML reports generated by Skip
 */
export interface SimpleRunQuery {
    /**
     * Run a single predefined query and return the results. The query is run dynamically against the MemberJunction host environment.
     * @param params 
     * @returns 
     */
    runQuery: (params: RunQueryParams) => Promise<RunQueryResult>
}
