# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""List of all actions that are possible across all AI Models"""
type AIAction_ {
  AIModelActionsArray: [AIModelAction_!]!
  CreatedAt: Timestamp!
  DefaultModel: String
  DefaultModelID: Int
  DefaultPrompt: String
  Description: String
  EntityAIActionsArray: [EntityAIAction_!]!
  ID: Int!
  IsActive: Boolean!
  Name: String!
  UpdatedAt: Timestamp!
}

"""Tracks the actions supported by each AI Model"""
type AIModelAction_ {
  AIAction: String!
  AIActionID: Int!
  AIModel: String!
  AIModelID: Int!
  CreatedAt: Timestamp!
  ID: Int!
  IsActive: Boolean!
  UpdatedAt: Timestamp!
}

"""Types of AI Models"""
type AIModelType_ {
  AIModelsArray: [AIModel_!]!
  Description: String
  ID: Int!
  Name: String!
}

"""Catalog of all AI Models configured in the system"""
type AIModel_ {
  AIActionsArray: [AIAction_!]!
  AIModelActionsArray: [AIModelAction_!]!
  AIModelType: String!
  AIModelTypeID: Int!

  """
  The name of the model to use with API calls which might differ from the Name, if APIName is not provided, Name will be used for API calls
  """
  APIName: String
  CreatedAt: Timestamp!
  Description: String
  DriverClass: String
  DriverImportPath: String
  EntityAIActionsArray: [EntityAIAction_!]!
  EntityDocumentsArray: [EntityDocument_!]!
  ID: Int!
  IsActive: Boolean!
  Name: String!

  """
  A simplified power rank of each model for a given AI Model Type. For example, if we have GPT 3, GPT 3.5, and GPT 4, we would have a PowerRank of 1 for GPT3, 2 for GPT 3.5, and 3 for GPT 4. This can be used within model families like OpenAI or across all models. For example if you had Llama 2 in the mix which is similar to GPT 3.5 it would also have a PowerRank of 2. This can be used at runtime to pick the most/least powerful or compare model relative power.
  """
  PowerRank: Int
  UpdatedAt: Timestamp!
  VectorIndexesArray: [VectorIndex_!]!
  Vendor: String
}

type Account_ {
  Acronym: String
  ActivitiesArray: [Activity_!]!
  ActivityCount: Int!
  AddressLine1: String
  AddressLine2: String
  AddressLine3: String
  BCMID: String!
  City: String
  ContactsArray: [Contact_!]!
  Country: String
  CreatedAt: Timestamp!
  DealsArray: [Deal_!]!
  Description: String
  DisplayName: String
  Domain: String
  EarliestActivityDate: Timestamp
  EmailPattern: String
  Facebook: String
  ID: Int!
  ISOCountryCode: String
  IndustryID: Int
  InvoicesArray: [Invoice_!]!
  LastEnrichedAt: Timestamp
  LastReviewedDate: Timestamp
  LatestActivityDate: Timestamp
  LeadershipPageURL: String
  LinkedIn: String
  Logo: String
  LogoURL: String
  Name: String!
  OperatingName: String
  PhoneNumber: String
  PostalCode: String
  RecordSource: String
  StateProvince: String
  TaxID: String
  UpdatedAt: Timestamp!
  Website: String
}

type ActivityAttachment_ {
  ActivitiesArray: [Activity_!]!
  Attachments: String
  CreatedAt: Timestamp!
  ID: Int!
  UpdatedAt: Timestamp!
}

type Activity_ {
  Account: String
  AccountID: Int
  ActivityDate: Timestamp
  Attachment: String
  AttachmentID: Int
  BCMID: String!
  CompanyIntegrationID: Int!
  ContactID: Int
  CreatedAt: Timestamp!
  DealID: Int
  Description: String
  EmployeeID: Int
  ExternalSystemRecordID: String
  ID: Int!
  IsActive: Boolean
  IsBounced: Boolean
  IsOpened: Boolean
  IsReplied: Boolean
  Summary: String
  Title: String
  Type: String
  UpdatedAt: Timestamp!
}

"""
List of entities within each application. An application can have any number of entities and an entity can be part of any number of applications.
"""
type ApplicationEntity_ {
  Application: String!
  ApplicationName: String
  CreatedAt: Timestamp!
  DefaultForNewUser: Boolean!
  Entity: String!
  EntityBaseTable: String!
  EntityBaseTableCodeName: String
  EntityClassName: String
  EntityCodeName: String
  EntityID: Int!
  ID: Int!
  Sequence: Int!
  UpdatedAt: Timestamp!
}

"""
Applications are used to group entities in the user interface for ease of user access
"""
type Application_ {
  ApplicationEntitiesArray: [ApplicationEntity_!]!
  CreatedAt: Timestamp!
  Description: String
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
  UserApplicationsArray: [UserApplication_!]!
}

type AskSkipResultType {
  AIMessageConversationDetailId: Int!
  ConversationId: Int!
  ResponsePhase: SkipResponsePhase!
  Result: String!
  Status: String!
  Success: Boolean!
  UserMessageConversationDetailId: Int!
}

type AuditLogType_ {
  AuditLogTypesArray: [AuditLogType_!]!
  AuditLogsArray: [AuditLog_!]!
  AuthorizationName: String
  CreatedAt: Timestamp!
  Description: String
  ID: Int!
  Name: String!
  Parent: String
  ParentID: Int
  UpdatedAt: Timestamp!
}

type AuditLog_ {
  AuditLogTypeName: String
  AuthorizationName: String
  CreatedAt: Timestamp!
  Description: String
  Details: String
  Entity: String
  EntityID: Int
  ID: Int!
  RecordID: String
  Status: String!
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

type AuthorizationRole_ {
  AuthorizationName: String
  CreatedAt: Timestamp!
  ID: Int!
  RoleName: String
  Type: String!
  UpdatedAt: Timestamp!
}

type Authorization_ {
  AuditLogTypesArray: [AuditLogType_!]!
  AuditLogsArray: [AuditLog_!]!
  AuthorizationRolesArray: [AuthorizationRole_!]!
  AuthorizationsArray: [Authorization_!]!
  CreatedAt: Timestamp!
  Description: String
  ID: Int!
  IsActive: Boolean!
  Name: String!
  Parent: String
  ParentID: Int
  UpdatedAt: Timestamp!
  UseAuditLog: Boolean!
}

type Color {
  ID: Int!
  createdZ: String!
  name: String!
}

type ColorNotification {
  date: Timestamp!
  message: String
}

type CompanyIntegrationRecordMap_ {
  CompanyIntegrationID: Int!
  CreatedAt: Timestamp!
  Entity: String!
  EntityID: Int!
  EntityRecordID: String!
  ExternalSystemRecordID: String!
  ID: Int!
  UpdatedAt: Timestamp!
}

type CompanyIntegrationRunAPILog_ {
  CompanyIntegrationRunID: Int!
  ExecutedAt: Timestamp!
  ID: Int!
  IsSuccess: Boolean!
  Parameters: String
  RequestMethod: String
  URL: String
}

type CompanyIntegrationRunDetail_ {
  Action: String!
  CompanyIntegrationRunID: Int!
  Entity: String!
  EntityID: Int!
  ErrorLogsArray: [ErrorLog_!]!
  ExecutedAt: Timestamp!
  ID: Int!
  IsSuccess: Boolean!
  RecordID: String!
  RunEndedAt: Timestamp
  RunStartedAt: Timestamp
}

type CompanyIntegrationRun_ {
  Comments: String
  CompanyIntegrationID: Int!
  CompanyIntegrationRunAPILogsArray: [CompanyIntegrationRunAPILog_!]!
  CompanyIntegrationRunDetailsArray: [CompanyIntegrationRunDetail_!]!
  EndedAt: Timestamp
  ErrorLogsArray: [ErrorLog_!]!
  ID: Int!
  RunByUser: String!
  RunByUserID: Int!
  StartedAt: Timestamp
  TotalRecords: Int!
}

"""Links individual company records to specific integrations"""
type CompanyIntegration_ {
  APIKey: String
  AccessToken: String
  ClientID: String
  ClientSecret: String
  Company: String!
  CompanyID: Int!
  CompanyIntegrationRecordMapsArray: [CompanyIntegrationRecordMap_!]!
  CompanyIntegrationRunsArray: [CompanyIntegrationRun_!]!
  CompanyName: String!
  CreatedAt: Timestamp!
  CustomAttribute1: String
  DriverClassName: String
  DriverImportPath: String
  EmployeeCompanyIntegrationsArray: [EmployeeCompanyIntegration_!]!
  ExternalSystemID: String
  ID: Int!
  Integration: String!
  IntegrationID: Int!
  IntegrationName: String!
  IsActive: Boolean
  IsExternalSystemReadOnly: Boolean!
  LastRunEndedAt: Timestamp
  LastRunID: Int
  LastRunStartedAt: Timestamp
  ListsArray: [List_!]!
  RefreshToken: String
  TokenExpirationDate: Timestamp
  UpdatedAt: Timestamp!
}

"""
A list of organizational units within your business. These can be subsidiaries or divisions or other units. Companies are used to organizae employee records and also for separating integrations if you have multiple integrations of the same type of system.
"""
type Company_ {
  CompanyIntegrationsArray: [CompanyIntegration_!]!
  CreatedAt: Timestamp!
  Description: String!
  Domain: String
  EmployeesArray: [Employee_!]!
  ID: Int!
  LogoURL: String
  Name: String!
  UpdatedAt: Timestamp!
  Website: String
  WorkflowsArray: [Workflow_!]!
}

type ContactLevel_ {
  ContactsArray: [Contact_!]!
  CreatedAt: Timestamp!
  Description: String
  ExcludeKeywords: String
  ID: Int!
  Keywords: String
  Name: String!
  Rank: Int!
  UpdatedAt: Timestamp!
}

type ContactRole_ {
  ContactsArray: [Contact_!]!
  CreatedAt: Timestamp!
  Description: String
  ID: Int!
  Keywords: String
  Name: String!
  UpdatedAt: Timestamp!
}

type Contact_ {
  Account: String
  AccountID: Int
  ActivitiesArray: [Activity_!]!
  ActivityCount: Int!
  BCMID: String!
  CreatedAt: Timestamp!
  DealsArray: [Deal_!]!
  EarliestActivityDate: Timestamp
  Email1: String
  Email2: String
  EmailSource: String
  EmailStatus: String
  Facebook: String
  FirstName: String!
  ID: Int!
  Instagram: String
  InvoicesArray: [Invoice_!]!
  LastEnrichedAt: Timestamp
  LastName: String!
  LastReviewedDate: Timestamp
  LatestActivityDate: Timestamp
  LevelID: Int
  LinkedIn: String
  NickName: String
  PhoneNumber: String
  Prefix: String
  ProfilePictureURL: String
  RecordSource: String
  RoleID: Int
  Status: String
  Suffix: String
  Tags: String
  Title: String
  Twitter: String
  UpdatedAt: Timestamp!
}

type ConversationDetail_ {
  Conversation: String
  ConversationID: Int!
  CreatedAt: Timestamp!
  Error: String
  ExternalID: String
  HiddenToUser: Boolean!
  ID: Int!
  Message: String!
  ReportsArray: [Report_!]!
  Role: String!
  UpdatedAt: Timestamp!
}

type Conversation_ {
  ConversationDetailsArray: [ConversationDetail_!]!
  CreatedAt: Timestamp!
  DataContextID: Int
  Description: String
  ExternalID: String
  ID: Int!
  IsArchived: Boolean!
  LinkedEntity: String
  LinkedEntityID: Int
  LinkedRecordID: String
  Name: String
  ReportsArray: [Report_!]!
  Type: String!
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

input CreateAccountInput {
  Acronym: String
  ActivityCount: Int!
  AddressLine1: String
  AddressLine2: String
  AddressLine3: String
  City: String
  Country: String
  Description: String
  DisplayName: String
  Domain: String
  EarliestActivityDate: Timestamp
  EmailPattern: String
  Facebook: String
  ISOCountryCode: String
  IndustryID: Int
  LastEnrichedAt: Timestamp
  LastReviewedDate: Timestamp
  LatestActivityDate: Timestamp
  LeadershipPageURL: String
  LinkedIn: String
  Logo: String
  LogoURL: String
  Name: String!
  OperatingName: String
  PhoneNumber: String
  PostalCode: String
  RecordSource: String
  StateProvince: String
  TaxID: String
  Website: String
}

input CreateActivityAttachmentInput {
  Attachments: String
}

input CreateActivityInput {
  AccountID: Int
  ActivityDate: Timestamp
  Attachment: String
  AttachmentID: Int
  CompanyIntegrationID: Int!
  ContactID: Int
  DealID: Int
  Description: String
  EmployeeID: Int
  ExternalSystemRecordID: String
  IsActive: Boolean
  IsBounced: Boolean
  IsOpened: Boolean
  IsReplied: Boolean
  Summary: String
  Title: String
  Type: String
}

input CreateApplicationEntityInput {
  ApplicationName: String
  DefaultForNewUser: Boolean!
  EntityID: Int!
  Sequence: Int!
}

input CreateApplicationInput {
  Description: String
  Name: String!
}

input CreateAuditLogInput {
  AuditLogTypeName: String
  AuthorizationName: String
  Description: String
  Details: String
  EntityID: Int
  RecordID: String
  Status: String!
  UserID: Int!
}

input CreateCompanyInput {
  Description: String!
  Domain: String
  LogoURL: String
  Name: String!
  Website: String
}

input CreateCompanyIntegrationRecordMapInput {
  CompanyIntegrationID: Int!
  EntityID: Int!
  EntityRecordID: String!
  ExternalSystemRecordID: String!
}

input CreateContactInput {
  AccountID: Int
  ActivityCount: Int!
  EarliestActivityDate: Timestamp
  Email1: String
  Email2: String
  EmailSource: String
  EmailStatus: String
  Facebook: String
  FirstName: String!
  Instagram: String
  LastEnrichedAt: Timestamp
  LastName: String!
  LastReviewedDate: Timestamp
  LatestActivityDate: Timestamp
  LevelID: Int
  LinkedIn: String
  NickName: String
  PhoneNumber: String
  Prefix: String
  ProfilePictureURL: String
  RecordSource: String
  RoleID: Int
  Status: String
  Suffix: String
  Tags: String
  Title: String
  Twitter: String
}

input CreateContactLevelInput {
  Description: String
  ExcludeKeywords: String
  Keywords: String
  Name: String!
  Rank: Int!
}

input CreateContactRoleInput {
  Description: String
  Keywords: String
  Name: String!
}

input CreateConversationDetailInput {
  ConversationID: Int!
  Error: String
  ExternalID: String
  HiddenToUser: Boolean!
  Message: String!
  Role: String!
}

input CreateConversationInput {
  DataContextID: Int
  Description: String
  ExternalID: String
  IsArchived: Boolean!
  LinkedEntityID: Int
  LinkedRecordID: String
  Name: String
  Type: String!
  UserID: Int!
}

input CreateDashboardCategoryInput {
  Description: String
  Name: String!
  ParentID: Int
  UserID: Int!
}

input CreateDashboardInput {
  CategoryID: Int
  Description: String
  Name: String!
  UIConfigDetails: String!
  UserID: Int
}

input CreateDataContextInput {
  Description: String
  LastRefreshedAt: Timestamp
  Name: String!
  UserID: Int!
}

input CreateDataContextItemInput {
  DataContextID: Int!
  DataJSON: String
  EntityID: Int
  LastRefreshedAt: Timestamp
  QueryID: Int
  RecordID: String
  SQL: String
  Type: String!
  ViewID: Int
}

input CreateDealForecastCategoryInput {
  Description: String!
  DisplayName: String
  Name: String
}

input CreateDealInput {
  AccountID: Int
  CloseDate: Timestamp
  CompanyIntegrationID: Int!
  ContactID: Int
  ContractTermMonths: Int!
  DealForecastCategoryID: Int
  DealStageID: Int
  DealTypeID: Int
  Description: String
  EmployeeID: Int
  ExternalSystemCreatedAt: Timestamp
  ExternalSystemRecordID: String!
  ExternalSystemUpdatedAt: Timestamp
  ForecastNotes: String
  IncludeInForecast: Boolean
  IsDeleted: Boolean!
  LeadSource: String
  LeadSourceDetail: String
  MRR: Float!
  OneTimeFees: Float!
  Pipeline: String
  Probability: Float
  Title: String
  Value: Float
}

input CreateDealStageInput {
  Description: String!
  Name: String!
}

input CreateDealTypeInput {
  Description: String!
  DisplayName: String
  Name: String
}

input CreateDuplicateRunDetailInput {
  DuplicateRunID: Int!
  MatchErrorMessage: String
  MatchStatus: String!
  MergeErrorMessage: String
  MergeStatus: String!
  RecordID: String!
  SkippedReason: String
}

input CreateDuplicateRunDetailMatchInput {
  Action: String!
  ApprovalStatus: String!
  DuplicateRunDetailID: Int!
  MatchProbability: Float!
  MatchRecordID: String!
  MatchSource: String!
  MatchedAt: Timestamp!
  MergeStatus: String!
  MergedAt: Timestamp!
  RecordMergeLogID: Int
}

input CreateDuplicateRunInput {
  ApprovalComments: String
  ApprovalStatus: String!
  ApprovedByUserID: Int
  EndedAt: Timestamp
  EntityID: Int!
  ProcessingErrorMessage: String
  ProcessingStatus: String!
  SourceListID: Int!
  StartedAt: Timestamp!
  StartedByUserID: Int!
}

input CreateEmployeeInput {
  Active: Boolean!
  CompanyID: Int!
  Email: String!
  FirstName: String!
  LastName: String!
  Phone: String
  SupervisorID: Int
  Title: String
}

input CreateEntityDocumentInput {
  AIModelID: Int!
  AbsoluteMatchThreshold: Float!
  EntityID: Int!
  Name: String!
  PotentialMatchThreshold: Float!
  Status: String!
  Template: String
  TypeID: Int!
  VectorDatabaseID: Int!
}

input CreateEntityDocumentRunInput {
  EndedAt: Timestamp
  EntityDocumentID: Int!
  StartedAt: Timestamp
  Status: String!
}

input CreateEntityDocumentSettingInput {
  Comments: String
  EntityDocumentID: Int!
  Name: String!
  Value: String!
}

input CreateEntityDocumentTypeInput {
  Description: String
  Name: String!
}

input CreateEntityFieldInput {
  AllowUpdateAPI: Boolean!
  AllowUpdateInView: Boolean!
  AutoUpdateDescription: Boolean!
  Category: String
  DefaultColumnWidth: Int
  DefaultInView: Boolean!
  Description: String
  DisplayName: String
  ExtendedType: String
  FullTextSearchEnabled: Boolean!
  GeneratedFormSection: String!
  IncludeInGeneratedForm: Boolean!
  IncludeInUserSearchAPI: Boolean!
  IncludeRelatedEntityNameFieldInBaseView: Boolean!
  IsNameField: Boolean!
  IsPrimaryKey: Boolean!
  IsUnique: Boolean!
  RelatedEntityFieldName: String
  RelatedEntityID: Int
  RelatedEntityNameFieldMap: String
  UserSearchParamFormatAPI: String
  ValueListType: String!
  ViewCellTemplate: String
}

input CreateEntityInput {
  AllowAllRowsAPI: Boolean!
  AllowCreateAPI: Boolean!
  AllowDeleteAPI: Boolean!
  AllowUpdateAPI: Boolean!
  AllowUserSearchAPI: Boolean!
  AuditRecordAccess: Boolean!
  AuditViewRuns: Boolean!
  AutoUpdateDescription: Boolean!
  BaseView: String!
  BaseViewGenerated: Boolean!
  CascadeDeletes: Boolean!
  CustomResolverAPI: Boolean!
  Description: String
  EntityObjectSubclassImport: String
  EntityObjectSubclassName: String
  FullTextCatalog: String
  FullTextCatalogGenerated: Boolean!
  FullTextIndex: String
  FullTextIndexGenerated: Boolean!
  FullTextSearchEnabled: Boolean!
  FullTextSearchFunction: String
  FullTextSearchFunctionGenerated: Boolean!
  ID: Int!
  IncludeInAPI: Boolean!
  Name: String!
  NameSuffix: String
  ParentID: Int
  TrackRecordChanges: Boolean!
  UserFormGenerated: Boolean!
  UserViewMaxRows: Int
  VirtualEntity: Boolean!
  spCreate: String
  spCreateGenerated: Boolean!
  spDelete: String
  spDeleteGenerated: Boolean!
  spMatch: String
  spUpdate: String
  spUpdateGenerated: Boolean!
}

input CreateEntityPermissionInput {
  CanCreate: Boolean!
  CanDelete: Boolean!
  CanRead: Boolean!
  CanUpdate: Boolean!
  CreateRLSFilterID: Int
  DeleteRLSFilterID: Int
  EntityID: Int!
  ReadRLSFilterID: Int
  RoleName: String
  UpdateRLSFilterID: Int
}

input CreateEntityRecordDocumentInput {
  DocumentText: String
  EntityDocumentID: Int!
  EntityID: Int!
  EntityRecordUpdatedAt: Timestamp!
  RecordID: String!
  VectorID: String
  VectorIndexID: Int!
  VectorJSON: String
}

input CreateEntityRelationshipInput {
  BundleInAPI: Boolean!
  DisplayInForm: Boolean!
  DisplayName: String
  EntityID: Int!
  EntityKeyField: String
  IncludeInParentAllQuery: Boolean!
  JoinEntityInverseJoinField: String
  JoinEntityJoinField: String
  JoinView: String
  RelatedEntityID: Int!
  RelatedEntityJoinField: String!
  Sequence: Int!
  Type: String!
}

input CreateEntitySettingInput {
  Comments: String
  EntityID: Int!
  Name: String!
  Value: String!
}

input CreateFileCategoryInput {
  Description: String
  Name: String!
  ParentID: Int
}

input CreateFileEntityRecordLinkInput {
  EntityID: Int!
  FileID: Int!
  RecordID: String!
}

input CreateFileInput {
  CategoryID: Int
  ContentType: String
  Description: String
  Name: String!
  ProviderID: Int!
  ProviderKey: String
  Status: String!
}

type CreateFilePayload {
  File: File_!
  UploadUrl: String!
}

input CreateFileStorageProviderInput {
  ClientDriverKey: String!
  Description: String
  IsActive: Boolean!
  Name: String!
  Priority: Int!
  ServerDriverKey: String!
}

input CreateIndustryInput {
  Description: String!
  Keywords: String
  Name: String!
}

input CreateInvoiceInput {
  AccountID: Int!
  CompanyIntegrationID: Int!
  ContactID: Int
  DueDate: Timestamp
  ExternalSystemRecordID: String!
  InvoiceDate: Timestamp!
  InvoiceNumber: String!
  PaymentTermsID: Int
  PostingDate: Timestamp
  StatusID: Int!
  SubTotal: Float!
  Tax: Float!
  Total: Float!
}

input CreateInvoiceStatusTypeInput {
  Description: String!
  Name: String!
}

input CreateListDetailInput {
  ListID: Int!
  RecordID: String!
  Sequence: Int!
}

input CreateListInput {
  CompanyIntegrationID: Int
  Description: String
  EntityID: Int
  ExternalSystemRecordID: String
  Name: String!
  UserID: Int!
}

input CreatePaymentTermsTypeInput {
  Code: String
  CompanyIntegrationID: Int
  Description: String
  DisplayName: String
  DueDateCalculation: String
  ExternalSystemRecordID: String
  Name: String!
}

input CreateQueryCategoryInput {
  Description: String
  Name: String!
  ParentID: Int
  UserID: Int!
}

input CreateQueryFieldInput {
  ComputationDescription: String
  Description: String
  IsComputed: Boolean!
  IsSummary: Boolean!
  Name: String!
  QueryID: Int!
  SQLBaseType: String!
  SQLFullType: String!
  Sequence: Int!
  SourceEntityID: Int
  SourceFieldName: String
  SummaryDescription: String
}

input CreateQueryInput {
  CategoryID: Int
  Description: String
  Feedback: String
  Name: String!
  OriginalSQL: String
  QualityRank: Int
  SQL: String
  Status: String!
}

input CreateQueryPermissionInput {
  QueryID: Int!
  RoleName: String!
}

input CreateQueueInput {
  Description: String
  IsActive: Boolean!
  LastHeartbeat: Timestamp!
  Name: String!
  ProcessCwd: String
  ProcessHostName: String
  ProcessIPAddress: String
  ProcessMacAddress: String
  ProcessOSName: String
  ProcessOSVersion: String
  ProcessPID: Int
  ProcessPlatform: String
  ProcessUserID: String
  ProcessUserName: String
  ProcessVersion: String
  QueueTypeID: Int!
}

input CreateQueueTaskInput {
  Comments: String
  Data: String
  EndedAt: Timestamp
  ErrorMessage: String
  Options: String
  Output: String
  QueueID: Int!
  StartedAt: Timestamp
  Status: String!
}

input CreateRecordChangeInput {
  ChangedAt: Timestamp!
  ChangesDescription: String!
  ChangesJSON: String!
  Comments: String
  EntityID: Int!
  FullRecordJSON: String!
  RecordID: String!
  Status: String!
  UserID: Int!
}

input CreateRecordMergeDeletionLogInput {
  DeletedRecordID: String!
  ProcessingLog: String
  RecordMergeLogID: Int!
  Status: String!
}

input CreateRecordMergeLogInput {
  ApprovalStatus: String!
  ApprovedByUserID: Int
  Comments: String
  EntityID: Int!
  InitiatedByUserID: Int!
  ProcessingEndedAt: Timestamp
  ProcessingLog: String
  ProcessingStartedAt: Timestamp!
  ProcessingStatus: String!
  SurvivingRecordID: String!
}

input CreateReportCategoryInput {
  Description: String
  Name: String!
  ParentID: Int
  UserID: Int!
}

input CreateReportInput {
  CategoryID: Int
  Configuration: String
  ConversationDetailID: Int
  ConversationID: Int
  DataContextID: Int
  Description: String
  Name: String!
  OutputDeliveryTypeID: Int
  OutputEventID: Int
  OutputFormatTypeID: Int
  OutputFrequency: String
  OutputTargetEmail: String
  OutputTriggerTypeID: Int
  OutputWorkflowID: Int
  SharingScope: String!
  UserID: Int!
}

type CreateReportResultType {
  ErrorMessage: String!
  ReportID: Float!
  ReportName: String!
  Success: Boolean!
}

input CreateReportSnapshotInput {
  ReportID: Int!
  ResultSet: String!
  UserID: Int
}

input CreateRoleInput {
  Description: String
  DirectoryID: String
  Name: String!
  SQLName: String
}

input CreateSchemaInfoInput {
  Comments: String
  EntityIDMax: Int!
  EntityIDMin: Int!
  SchemaName: String!
}

input CreateUserApplicationEntityInput {
  EntityID: Int!
  Sequence: Int!
  UserApplicationID: Int!
}

input CreateUserFavoriteInput {
  EntityID: Int!
  RecordID: String!
  UserID: Int!
}

input CreateUserInput {
  Email: String!
  EmployeeID: Int
  FirstName: String
  IsActive: Boolean!
  LastName: String
  LinkedEntityID: Int
  LinkedEntityRecordID: Int
  LinkedRecordType: String!
  Name: String!
  Title: String
  Type: String!
}

input CreateUserNotificationInput {
  Message: String
  ReadAt: Timestamp
  ResourceConfiguration: String
  ResourceRecordID: Int
  ResourceTypeID: Int
  Title: String
  Unread: Boolean!
  UserID: Int!
}

input CreateUserRoleInput {
  RoleName: String!
  UserID: Int!
}

input CreateUserViewCategoryInput {
  Description: String
  EntityID: Int!
  Name: String!
  ParentID: Int
  UserID: Int!
}

input CreateUserViewInput {
  CategoryID: Int
  CustomFilterState: Boolean!
  CustomWhereClause: Boolean!
  Description: String
  EntityID: Int!
  FilterState: String
  GridState: String
  IsDefault: Boolean!
  IsShared: Boolean!
  Name: String!
  SmartFilterEnabled: Boolean!
  SmartFilterExplanation: String
  SmartFilterPrompt: String
  SmartFilterWhereClause: String
  SortState: String
  UserID: Int!
  WhereClause: String
}

input CreateUserViewRunDetailInput {
  RecordID: String!
  UserViewRunID: Int!
}

input CreateUserViewRunInput {
  RunAt: Timestamp!
  RunByUserID: Int!
  UserViewID: Int!
}

input CreateVectorDatabaseInput {
  ClassKey: String
  DefaultURL: String
  Description: String
  Name: String!
}

input CreateVectorIndexInput {
  Description: String
  EmbeddingModelID: Int!
  Name: String!
  VectorDatabaseID: Int!
}

input CreateVersionInstallationInput {
  Comments: String
  InstallLog: String
  InstalledAt: Timestamp!
  MajorVersion: Int!
  MinorVersion: Int!
  PatchVersion: Int!
  Status: String!
  Type: String
}

input CreateWorkspaceInput {
  Description: String
  Name: String!
  UserID: Int!
}

input CreateWorkspaceItemInput {
  Configuration: String
  Description: String
  Name: String!
  ResourceRecordID: String
  ResourceTypeID: Int!
  Sequence: Int!
  WorkSpaceID: Int!
}

type DashboardCategory_ {
  CreatedAt: Timestamp!
  DashboardCategoriesArray: [DashboardCategory_!]!
  DashboardsArray: [Dashboard_!]!
  Description: String
  ID: Int!
  Name: String!
  Parent: String
  ParentID: Int
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

"""
Dashboards are used to group resources into a single display pane for an end-user
"""
type Dashboard_ {
  Category: String
  CategoryID: Int
  Description: String
  ID: Int!
  Name: String!
  UIConfigDetails: String!
  User: String
  UserID: Int
}

"""
Data Context Items store information about each item within a Data Context. Each item stores a link to a view, query, or raw sql statement and can optionally cache the JSON representing the last run of that data object as well.
"""
type DataContextItem_ {
  CreatedAt: Timestamp!
  DataContext: String!

  """Foreign key to the DataContext table"""
  DataContextID: Int!

  """
  Optionally used to cache results of an item. This can be used for performance optimization, and also for having snapshots of data for historical comparisons.
  """
  DataJSON: String
  Entity: String

  """Used if type='full_entity' or type='single_record'"""
  EntityID: Int
  ID: Int!

  """
  If DataJSON is populated, this field will show the date the the data was captured
  """
  LastRefreshedAt: Timestamp
  Query: String

  """Only used if Type='query'"""
  QueryID: Int

  """
  The Primary Key value for the record, only used when Type='single_record'
  """
  RecordID: String

  """Only used when Type=sql"""
  SQL: String

  """
  The type of the item, either "view", "query", "full_entity", "single_record", or "sql"
  """
  Type: String!
  UpdatedAt: Timestamp!
  View: String

  """Only used if Type='view'"""
  ViewID: Int
}

"""
Data Contexts are a primitive within the MemberJunction architecture. They store information about data contexts which are groups of data including views, queries, or raw SQL statements. Data contexts can be used in conversations, reports and more.
"""
type DataContext_ {
  CreatedAt: Timestamp!
  DataContextItemsArray: [DataContextItem_!]!
  Description: String
  ID: Int!
  LastRefreshedAt: Timestamp
  Name: String!
  ReportsArray: [Report_!]!
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

input DatasetItemFilterTypeGQL {
  Filter: String!
  ItemCode: String!
}

"""A single item in a Dataset and can be sourced from multiple methods."""
type DatasetItem_ {
  Code: String!
  CreatedAt: Timestamp!
  DatasetName: String
  DateFieldToCheck: String!
  Description: String
  Entity: String!
  EntityID: Int!
  ID: Int!
  Sequence: Int!
  UpdatedAt: Timestamp!
  WhereClause: String
}

type DatasetResultType {
  DatasetID: Int!
  DatasetName: String!
  LatestUpdateDate: Timestamp!
  Results: String!
  Status: String!
  Success: Boolean!
}

type DatasetStatusResultType {
  DatasetID: Int!
  DatasetName: String!
  EntityUpdateDates: String!
  LatestUpdateDate: Timestamp!
  Status: String!
  Success: Boolean!
}

"""Cacheable sets of data that can span one or more items"""
type Dataset_ {
  CreatedAt: Timestamp!
  DatasetItemsArray: [DatasetItem_!]!
  Description: String
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
}

type DealForecastCategory_ {
  CreatedAt: Timestamp!
  DealsArray: [Deal_!]!
  Description: String!
  DisplayName: String
  ID: Int!
  Name: String
  UpdatedAt: Timestamp!
}

type DealStage_ {
  CreatedAt: Timestamp!
  DealsArray: [Deal_!]!
  Description: String!
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
}

type DealType_ {
  CreatedAt: Timestamp!
  DealsArray: [Deal_!]!
  Description: String!
  DisplayName: String
  ID: Int!
  Name: String
  UpdatedAt: Timestamp!
}

type Deal_ {
  Account: String
  AccountID: Int
  ActivitiesArray: [Activity_!]!
  BCMID: String!
  CloseDate: Timestamp
  CompanyIntegrationID: Int!
  ContactID: Int
  ContractTermMonths: Int!
  CreatedAt: Timestamp!
  DealForecastCategory: String
  DealForecastCategoryID: Int
  DealStage: String
  DealStageID: Int
  DealType: String
  DealTypeID: Int
  Description: String
  EmployeeID: Int
  ExternalSystemCreatedAt: Timestamp
  ExternalSystemRecordID: String!
  ExternalSystemUpdatedAt: Timestamp
  ForecastNotes: String
  ID: Int!
  IncludeInForecast: Boolean
  IsDeleted: Boolean!
  LeadSource: String
  LeadSourceDetail: String
  MRR: Float!
  OneTimeFees: Float!
  Pipeline: String
  Probability: Float
  Title: String
  UpdatedAt: Timestamp!
  Value: Float
}

type DuplicateRunDetailMatch_ {
  Action: String!
  ApprovalStatus: String!
  CreatedAt: Timestamp!
  DuplicateRunDetailID: Int!
  ID: Int!

  """Value between 0 and 1 designating the computed probability of a match"""
  MatchProbability: Float!
  MatchRecordID: String!

  """Either Vector or SP"""
  MatchSource: String!
  MatchedAt: Timestamp!
  MergeStatus: String!
  MergedAt: Timestamp!
  RecordMergeLogID: Int
  UpdatedAt: Timestamp!
}

type DuplicateRunDetail_ {
  CreatedAt: Timestamp!
  DuplicateRunDetailMatchesArray: [DuplicateRunDetailMatch_!]!
  DuplicateRunID: Int!
  ID: Int!

  """
  If MatchStatus='Error' this field can be used to track the error from that phase of the process for logging/diagnostics.
  """
  MatchErrorMessage: String
  MatchStatus: String!
  MergeErrorMessage: String
  MergeStatus: String!
  RecordID: String!

  """
  If MatchStatus=Skipped, this field can be used to store the reason why the record was skipped
  """
  SkippedReason: String
  UpdatedAt: Timestamp!
}

type DuplicateRun_ {
  ApprovalComments: String
  ApprovalStatus: String!
  ApprovedByUser: String
  ApprovedByUserID: Int
  CreatedAt: Timestamp!
  DuplicateRunDetailsArray: [DuplicateRunDetail_!]!
  EndedAt: Timestamp
  Entity: String!
  EntityID: Int!
  ID: Int!
  ProcessingErrorMessage: String
  ProcessingStatus: String!
  SourceList: String!
  SourceListID: Int!
  StartedAt: Timestamp!
  StartedByUser: String!
  StartedByUserID: Int!
  UpdatedAt: Timestamp!
}

type EmployeeCompanyIntegration_ {
  CompanyIntegrationID: Int!
  CreatedAt: Timestamp!
  EmployeeID: Int!
  ExternalSystemRecordID: String!
  ID: Int!
  IsActive: Boolean!
  UpdatedAt: Timestamp!
}

type EmployeeRole_ {
  CreatedAt: Timestamp!
  EmployeeID: Int!
  ID: Int!
  Role: String!
  RoleID: Int!
  UpdatedAt: Timestamp!
}

type EmployeeSkill_ {
  CreatedAt: Timestamp!
  EmployeeID: Int!
  ID: Int!
  Skill: String!
  SkillID: Int!
  UpdatedAt: Timestamp!
}

"""A list of employees across all units of your organization"""
type Employee_ {
  Active: Boolean!
  BCMID: String!
  CompanyID: Int!
  CreatedAt: Timestamp!
  Email: String!
  EmployeeCompanyIntegrationsArray: [EmployeeCompanyIntegration_!]!
  EmployeeRolesArray: [EmployeeRole_!]!
  EmployeeSkillsArray: [EmployeeSkill_!]!
  EmployeesArray: [Employee_!]!
  FirstLast: String
  FirstName: String!
  ID: Int!
  LastName: String!
  Phone: String
  Supervisor: String
  SupervisorEmail: String
  SupervisorFirstName: String
  SupervisorID: Int
  SupervisorLastName: String
  Title: String
  UpdatedAt: Timestamp!
  UsersArray: [User_!]!
}

"""
Tracks the AI actions that should be invoked based on changes to records within a given entity.
"""
type EntityAIAction_ {
  AIAction: String!
  AIActionID: Int!
  AIModel: String
  AIModelID: Int
  Comments: String
  Entity: String!
  EntityID: Int!
  ID: Int!
  Name: String!
  OutputEntity: String
  OutputEntityID: Int
  OutputField: String
  OutputType: String!
  Prompt: String
  SkipIfOutputFieldNotEmpty: Boolean!
  TriggerEvent: String!
  UserMessage: String!
}

type EntityDependencyResult {
  EntityName: String!
  FieldName: String!
  RelatedEntityName: String!
}

type EntityDocumentRun_ {
  CreatedAt: Timestamp!
  EndedAt: Timestamp
  EntityDocument: String!
  EntityDocumentID: Int!
  ID: Int!
  StartedAt: Timestamp

  """Can be Pending, In Progress, Completed, or Failed"""
  Status: String!
  UpdatedAt: Timestamp!
}

type EntityDocumentSetting_ {
  Comments: String
  CreatedAt: Timestamp!
  EntityDocument: String!
  EntityDocumentID: Int!
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
  Value: String!
}

type EntityDocumentType_ {
  CreatedAt: Timestamp!
  Description: String
  EntityDocumentsArray: [EntityDocument_!]!
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
}

type EntityDocument_ {
  AIModelID: Int!

  """
  Value between 0 and 1 that determines what is considered an absolute matching record. Value must be >= PotentialMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.
  """
  AbsoluteMatchThreshold: Float!
  CreatedAt: Timestamp!
  Entity: String!
  EntityDocumentRunsArray: [EntityDocumentRun_!]!
  EntityDocumentSettingsArray: [EntityDocumentSetting_!]!
  EntityID: Int!
  ID: Int!
  Name: String!

  """
  Value between 0 and 1 that determines what is considered a potential matching record. Value must be <= AbsoluteMatchThreshold. This is primarily used for duplicate detection but can be used for other applications as well where matching is relevant.
  """
  PotentialMatchThreshold: Float!
  Status: String!
  Template: String
  Type: String!
  TypeID: Int!
  UpdatedAt: Timestamp!
  VectorDatabaseID: Int!
}

type EntityFieldValue_ {
  Code: String
  CreatedAt: Timestamp!
  Description: String
  Entity: String!
  EntityField: String!
  EntityFieldName: String!
  EntityID: Int!
  ID: Int!
  Sequence: Int!
  UpdatedAt: Timestamp!
  Value: String!
}

"""List of all fields within each entity with metadata about each field"""
type EntityField_ {
  AllowUpdateAPI: Boolean!
  AllowUpdateInView: Boolean!
  AllowsNull: Boolean!
  AutoIncrement: Boolean!

  """
  When set to 1 (default), whenever a description is modified in the column within the underlying view (first choice) or table (second choice), the Description column in the entity field definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity field definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.
  """
  AutoUpdateDescription: Boolean!
  BaseTable: String!
  BaseView: String!
  Category: String
  CreatedAt: Timestamp!
  DefaultColumnWidth: Int
  DefaultInView: Boolean!
  DefaultValue: String
  Description: String
  DisplayName: String
  Entity: String!
  EntityClassName: String
  EntityCodeName: String
  EntityFieldValuesArray: [EntityFieldValue_!]!
  EntityID: Int!
  ExtendedType: String
  FullTextSearchEnabled: Boolean!
  GeneratedFormSection: String!
  ID: Int!
  IncludeInGeneratedForm: Boolean!
  IncludeInUserSearchAPI: Boolean!
  IncludeRelatedEntityNameFieldInBaseView: Boolean!
  IsNameField: Boolean!
  IsPrimaryKey: Boolean!
  IsUnique: Boolean!
  IsVirtual: Boolean!
  Length: Int
  Name: String!
  Precision: Int
  RelatedEntity: String
  RelatedEntityBaseTable: String
  RelatedEntityBaseView: String
  RelatedEntityClassName: String
  RelatedEntityCodeName: String
  RelatedEntityFieldName: String
  RelatedEntityID: Int
  RelatedEntityNameFieldMap: String
  RelatedEntitySchemaName: String
  Scale: Int
  SchemaName: String!
  Sequence: Int!
  Type: String!
  UpdatedAt: Timestamp!
  UserSearchParamFormatAPI: String
  ValueListType: String!
  ViewCellTemplate: String
}

"""Security settings for each entity"""
type EntityPermission_ {
  CanCreate: Boolean!
  CanDelete: Boolean!
  CanRead: Boolean!
  CanUpdate: Boolean!
  CreateRLSFilter: String
  CreateRLSFilterID: Int
  CreatedAt: Timestamp!
  DeleteRLSFilter: String
  DeleteRLSFilterID: Int
  Entity: String!
  EntityID: Int!
  ID: Int!
  ReadRLSFilter: String
  ReadRLSFilterID: Int
  RoleName: String
  RoleSQLName: String
  UpdateRLSFilter: String
  UpdateRLSFilterID: Int
  UpdatedAt: Timestamp!
}

type EntityRecordDocument_ {
  CreatedAt: Timestamp!
  DocumentText: String
  EntityDocumentID: Int!
  EntityID: Int!
  EntityRecordUpdatedAt: Timestamp!
  ID: Int!
  RecordID: String!
  UpdatedAt: Timestamp!
  VectorID: String
  VectorIndexID: Int!
  VectorJSON: String
}

input EntityRecordNameInput {
  EntityName: String!
  PrimaryKeyValues: [PrimaryKeyValueInputType!]!
}

type EntityRecordNameResult {
  EntityName: String!
  PrimaryKeyValues: [PrimaryKeyValueOutputType!]!
  RecordName: String
  Status: String!
  Success: Boolean!
}

"""
Metadata about relationships between entities including display preferences for the UI
"""
type EntityRelationship_ {
  BundleInAPI: Boolean!
  CreatedAt: Timestamp!
  DisplayInForm: Boolean!
  DisplayName: String
  DisplayUserViewGUID: String
  DisplayUserViewID: Int
  DisplayUserViewName: String
  Entity: String!
  EntityBaseTable: String!
  EntityBaseView: String!
  EntityID: Int!
  EntityKeyField: String
  ID: Int!
  IncludeInParentAllQuery: Boolean!
  JoinEntityInverseJoinField: String
  JoinEntityJoinField: String
  JoinView: String
  RelatedEntity: String!
  RelatedEntityBaseTable: String!
  RelatedEntityBaseTableCodeName: String
  RelatedEntityBaseView: String!
  RelatedEntityClassName: String
  RelatedEntityCodeName: String
  RelatedEntityID: Int!
  RelatedEntityJoinField: String!

  """
  Used for display order in generated forms and in other places in the UI where relationships for an entity are shown
  """
  Sequence: Int!
  Type: String!
  UpdatedAt: Timestamp!
}

type EntitySetting_ {
  Comments: String
  CreatedAt: Timestamp!
  Entity: String!
  EntityID: Int!
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
  Value: String!
}

"""Catalog of all entities across all schemas"""
type Entity_ {
  """
  If set to 1, a GraphQL query will be enabled that allows access to all rows in the entity.
  """
  AllowAllRowsAPI: Boolean!

  """
  Global flag controlling if creates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
  """
  AllowCreateAPI: Boolean!

  """
  Global flag controlling if deletes are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
  """
  AllowDeleteAPI: Boolean!

  """
  Global flag controlling if updates are allowed for any user, or not. If set to 1, a GraqhQL mutation and stored procedure are created. Permissions are still required to perform the action but if this flag is set to 0, no user will be able to perform the action.
  """
  AllowUpdateAPI: Boolean!

  """
  Enabling this bit will result in search being possible at the API and UI layers
  """
  AllowUserSearchAPI: Boolean!
  ApplicationEntitiesArray: [ApplicationEntity_!]!
  AuditLogsArray: [AuditLog_!]!

  """
  When set to 1, accessing a record by an end-user will result in an Audit Log record being created
  """
  AuditRecordAccess: Boolean!

  """
  When set to 1, users running a view against this entity will result in an Audit Log record being created.
  """
  AuditViewRuns: Boolean!

  """
  When set to 1 (default), whenever a description is modified in the underlying view (first choice) or table (second choice), the Description column in the entity definition will be automatically updated. If you never set metadata in the database directly, you can leave this alone. However, if you have metadata set in the database level for description, and you want to provide a DIFFERENT description in this entity definition, turn this bit off and then set the Description field and future CodeGen runs will NOT override the Description field here.
  """
  AutoUpdateDescription: Boolean!
  BaseTable: String!
  BaseTableCodeName: String
  BaseView: String!

  """When set to 0, CodeGen no longer generates a base view for the entity."""
  BaseViewGenerated: Boolean!

  """
  When set to 1, the deleted spDelete will pre-process deletion to related entities that have 1:M cardinality with this entity. This does not have effect if spDeleteGenerated = 0
  """
  CascadeDeletes: Boolean!
  ClassName: String
  CodeName: String
  CompanyIntegrationRecordMapsArray: [CompanyIntegrationRecordMap_!]!
  CompanyIntegrationRunDetailsArray: [CompanyIntegrationRunDetail_!]!
  ConversationsArray: [Conversation_!]!
  CreatedAt: Timestamp!

  """Set to 1 if a custom resolver has been created for the entity."""
  CustomResolverAPI: Boolean!
  DataContextItemsArray: [DataContextItem_!]!
  DatasetItemsArray: [DatasetItem_!]!
  Description: String
  DuplicateRunsArray: [DuplicateRun_!]!
  EntitiesArray: [Entity_!]!
  EntityAIActionsArray: [EntityAIAction_!]!
  EntityDocumentsArray: [EntityDocument_!]!
  EntityFieldsArray: [EntityField_!]!
  EntityObjectSubclassImport: String
  EntityObjectSubclassName: String
  EntityPermissionsArray: [EntityPermission_!]!
  EntityRecordDocumentsArray: [EntityRecordDocument_!]!
  EntityRelationshipsArray: [EntityRelationship_!]!
  EntitySettingsArray: [EntitySetting_!]!
  FileEntityRecordLinksArray: [FileEntityRecordLink_!]!
  FullTextCatalog: String
  FullTextCatalogGenerated: Boolean!
  FullTextIndex: String
  FullTextIndexGenerated: Boolean!
  FullTextSearchEnabled: Boolean!
  FullTextSearchFunction: String
  FullTextSearchFunctionGenerated: Boolean!
  ID: Int!

  """
  If set to 0, the entity will not be available at all in the GraphQL API or the object model.
  """
  IncludeInAPI: Boolean!
  IntegrationURLFormatsArray: [IntegrationURLFormat_!]!
  ListsArray: [List_!]!
  Name: String!
  NameSuffix: String
  ParentBaseTable: String
  ParentBaseView: String
  ParentEntity: String
  ParentID: Int
  QueryFieldsArray: [QueryField_!]!
  RecordChangesArray: [RecordChange_!]!
  RecordMergeLogsArray: [RecordMergeLog_!]!
  ResourceTypesArray: [ResourceType_!]!
  SchemaName: String!
  TaggedItemsArray: [TaggedItem_!]!

  """
  When set to 1, changes made via the MemberJunction architecture will result in tracking records being created in the RecordChange table
  """
  TrackRecordChanges: Boolean!
  UpdatedAt: Timestamp!
  UserApplicationEntitiesArray: [UserApplicationEntity_!]!
  UserFavoritesArray: [UserFavorite_!]!
  UserFormGenerated: Boolean!
  UserRecordLogsArray: [UserRecordLog_!]!
  UserViewCategoriesArray: [UserViewCategory_!]!
  UserViewMaxRows: Int
  UserViewsArray: [UserView_!]!
  UsersArray: [User_!]!
  VirtualEntity: Boolean!
  spCreate: String
  spCreateGenerated: Boolean!
  spDelete: String
  spDeleteGenerated: Boolean!

  """
  When specified, this stored procedure is used to find matching records in this particular entity. The convention is to pass in the primary key(s) columns for the given entity to the procedure and the return will be zero to many rows where there is a column for each primary key field(s) and a ProbabilityScore (numeric(1,12)) column that has a 0 to 1 value of the probability of a match.
  """
  spMatch: String
  spUpdate: String
  spUpdateGenerated: Boolean!
}

type ErrorLog_ {
  Category: String
  Code: String
  CompanyIntegrationRunDetailID: Int
  CompanyIntegrationRunID: Int
  CreatedAt: Timestamp!
  CreatedBy: String
  Details: String
  ID: Int!
  Message: String
  Status: String
}

input FieldMapping {
  FieldName: String!
  Value: String!
}

type FieldMappingOutput {
  FieldName: String!
  Value: String!
}

type FileCategory_ {
  CreatedAt: Timestamp!
  Description: String
  FileCategoriesArray: [FileCategory_!]!
  FilesArray: [File_!]!
  ID: Int!
  Name: String!
  Parent: String
  ParentID: Int
  UpdatedAt: Timestamp!
}

type FileEntityRecordLink_ {
  CreatedAt: Timestamp!
  Entity: String!
  EntityID: Int!
  File: String!
  FileID: Int!
  ID: Int!
  RecordID: String!
  UpdatedAt: Timestamp!
}

type FileStorageProvider_ {
  ClientDriverKey: String!
  CreatedAt: Timestamp!
  Description: String
  FilesArray: [File_!]!
  ID: Int!
  IsActive: Boolean!
  Name: String!
  Priority: Int!
  ServerDriverKey: String!
  UpdatedAt: Timestamp!
}

type File_ {
  Category: String
  CategoryID: Int
  ContentType: String
  CreatedAt: Timestamp!
  Description: String
  DownloadUrl: String!
  FileEntityRecordLinksArray: [FileEntityRecordLink_!]!
  ID: Int!
  Name: String!
  Provider: String!
  ProviderID: Int!
  ProviderKey: String

  """Pending, Uploading, Uploaded, Deleting, Deleted"""
  Status: String!
  UpdatedAt: Timestamp!
}

type Industry_ {
  AccountsArray: [Account_!]!
  CreatedAt: Timestamp!
  Description: String!
  ID: Int!
  Keywords: String
  Name: String!
  UpdatedAt: Timestamp!
}

"""
Used to generate web links for end users to easily access resources in a source system. URL Formats support templating to inject various field values at run-time to take a user directly to a resource in a source system.
"""
type IntegrationURLFormat_ {
  EntityID: Int!
  FullURLFormat: String
  ID: Int!
  Integration: String!
  IntegrationID: Int!
  IntegrationName: String
  NavigationBaseURL: String
  URLFormat: String!
}

"""Catalog of all integrations that have been configured in the system."""
type Integration_ {
  BatchMaxRequestCount: Int!
  BatchRequestWaitTime: Int!
  ClassName: String
  CompanyIntegrationsArray: [CompanyIntegration_!]!
  CreatedAt: Timestamp!
  Description: String
  ID: Int!
  ImportPath: String
  IntegrationURLFormatsArray: [IntegrationURLFormat_!]!
  Name: String!
  NavigationBaseURL: String
  UpdatedAt: Timestamp!
}

type InvoiceStatusType_ {
  CreatedAt: Timestamp!
  Description: String!
  ID: Int!
  InvoicesArray: [Invoice_!]!
  Name: String!
  UpdatedAt: Timestamp!
}

type Invoice_ {
  Account: String!
  AccountID: Int!
  BCMID: String!
  CompanyIntegrationID: Int!
  ContactID: Int
  CreatedAt: Timestamp!
  DueDate: Timestamp
  ExternalSystemRecordID: String!
  ID: Int!
  InvoiceDate: Timestamp!
  InvoiceNumber: String!
  PaymentTerms: String
  PaymentTermsID: Int
  PostingDate: Timestamp
  Status: String!
  StatusID: Int!
  SubTotal: Float!
  Tax: Float!
  Total: Float!
  UpdatedAt: Timestamp!
}

"""Tracks the records within each list."""
type ListDetail_ {
  ID: Int!
  List: String!
  ListID: Int!
  RecordID: String!
  Sequence: Int!
}

"""
Static lists are useful for controlling a set of data for a given entity. These can be used programatically for applications like logging and tracking long-running tasks and also by end users for tracking any particular list of records they want to directly control the set.
"""
type List_ {
  CompanyIntegrationID: Int
  CreatedAt: Timestamp!
  Description: String
  DuplicateRunsArray: [DuplicateRun_!]!
  Entity: String
  EntityID: Int
  ExternalSystemRecordID: String
  ID: Int!
  ListDetailsArray: [ListDetail_!]!
  Name: String!
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

type Mutation {
  CreateAccount(input: CreateAccountInput!): Account_!
  CreateActivity(input: CreateActivityInput!): Activity_!
  CreateActivityAttachment(input: CreateActivityAttachmentInput!): ActivityAttachment_!
  CreateApplication(input: CreateApplicationInput!): Application_!
  CreateApplicationEntity(input: CreateApplicationEntityInput!): ApplicationEntity_!
  CreateAuditLog(input: CreateAuditLogInput!): AuditLog_!
  CreateCompany(input: CreateCompanyInput!): Company_!
  CreateCompanyIntegrationRecordMap(input: CreateCompanyIntegrationRecordMapInput!): CompanyIntegrationRecordMap_!
  CreateContact(input: CreateContactInput!): Contact_!
  CreateContactLevel(input: CreateContactLevelInput!): ContactLevel_!
  CreateContactRole(input: CreateContactRoleInput!): ContactRole_!
  CreateConversation(input: CreateConversationInput!): Conversation_!
  CreateConversationDetail(input: CreateConversationDetailInput!): ConversationDetail_!
  CreateDashboard(input: CreateDashboardInput!): Dashboard_!
  CreateDashboardCategory(input: CreateDashboardCategoryInput!): DashboardCategory_!
  CreateDataContext(input: CreateDataContextInput!): DataContext_!
  CreateDataContextItem(input: CreateDataContextItemInput!): DataContextItem_!
  CreateDeal(input: CreateDealInput!): Deal_!
  CreateDealForecastCategory(input: CreateDealForecastCategoryInput!): DealForecastCategory_!
  CreateDealStage(input: CreateDealStageInput!): DealStage_!
  CreateDealType(input: CreateDealTypeInput!): DealType_!
  CreateDuplicateRun(input: CreateDuplicateRunInput!): DuplicateRun_!
  CreateDuplicateRunDetail(input: CreateDuplicateRunDetailInput!): DuplicateRunDetail_!
  CreateDuplicateRunDetailMatch(input: CreateDuplicateRunDetailMatchInput!): DuplicateRunDetailMatch_!
  CreateEmployee(input: CreateEmployeeInput!): Employee_!
  CreateEntity(input: CreateEntityInput!): Entity_!
  CreateEntityDocument(input: CreateEntityDocumentInput!): EntityDocument_!
  CreateEntityDocumentRun(input: CreateEntityDocumentRunInput!): EntityDocumentRun_!
  CreateEntityDocumentSetting(input: CreateEntityDocumentSettingInput!): EntityDocumentSetting_!
  CreateEntityDocumentType(input: CreateEntityDocumentTypeInput!): EntityDocumentType_!
  CreateEntityField(input: CreateEntityFieldInput!): EntityField_!
  CreateEntityPermission(input: CreateEntityPermissionInput!): EntityPermission_!
  CreateEntityRecordDocument(input: CreateEntityRecordDocumentInput!): EntityRecordDocument_!
  CreateEntityRelationship(input: CreateEntityRelationshipInput!): EntityRelationship_!
  CreateEntitySetting(input: CreateEntitySettingInput!): EntitySetting_!
  CreateFile(input: CreateFileInput!): CreateFilePayload!
  CreateFileCategory(input: CreateFileCategoryInput!): FileCategory_!
  CreateFileEntityRecordLink(input: CreateFileEntityRecordLinkInput!): FileEntityRecordLink_!
  CreateFileStorageProvider(input: CreateFileStorageProviderInput!): FileStorageProvider_!
  CreateIndustry(input: CreateIndustryInput!): Industry_!
  CreateInvoice(input: CreateInvoiceInput!): Invoice_!
  CreateInvoiceStatusType(input: CreateInvoiceStatusTypeInput!): InvoiceStatusType_!
  CreateList(input: CreateListInput!): List_!
  CreateListDetail(input: CreateListDetailInput!): ListDetail_!
  CreatePaymentTermsType(input: CreatePaymentTermsTypeInput!): PaymentTermsType_!
  CreateQuery(input: CreateQueryInput!): Query_!
  CreateQueryCategory(input: CreateQueryCategoryInput!): QueryCategory_!
  CreateQueryField(input: CreateQueryFieldInput!): QueryField_!
  CreateQueryPermission(input: CreateQueryPermissionInput!): QueryPermission_!
  CreateQueue(input: CreateQueueInput!): Queue_!
  CreateQueueTask(input: CreateQueueTaskInput!): QueueTask_!
  CreateRecordChange(input: CreateRecordChangeInput!): RecordChange_!
  CreateRecordMergeDeletionLog(input: CreateRecordMergeDeletionLogInput!): RecordMergeDeletionLog_!
  CreateRecordMergeLog(input: CreateRecordMergeLogInput!): RecordMergeLog_!
  CreateReport(input: CreateReportInput!): Report_!
  CreateReportCategory(input: CreateReportCategoryInput!): ReportCategory_!
  CreateReportFromConversationDetailID(ConversationDetailID: Int!): CreateReportResultType!
  CreateReportSnapshot(input: CreateReportSnapshotInput!): ReportSnapshot_!
  CreateRole(input: CreateRoleInput!): Role_!
  CreateSchemaInfo(input: CreateSchemaInfoInput!): SchemaInfo_!
  CreateUser(input: CreateUserInput!): User_!
  CreateUserApplicationEntity(input: CreateUserApplicationEntityInput!): UserApplicationEntity_!
  CreateUserFavorite(input: CreateUserFavoriteInput!): UserFavorite_!
  CreateUserNotification(input: CreateUserNotificationInput!): UserNotification_!
  CreateUserRole(input: CreateUserRoleInput!): UserRole_!
  CreateUserView(input: CreateUserViewInput!): UserView_!
  CreateUserViewCategory(input: CreateUserViewCategoryInput!): UserViewCategory_!
  CreateUserViewRun(input: CreateUserViewRunInput!): UserViewRun_!
  CreateUserViewRunDetail(input: CreateUserViewRunDetailInput!): UserViewRunDetail_!
  CreateVectorDatabase(input: CreateVectorDatabaseInput!): VectorDatabase_!
  CreateVectorIndex(input: CreateVectorIndexInput!): VectorIndex_!
  CreateVersionInstallation(input: CreateVersionInstallationInput!): VersionInstallation_!
  CreateWorkspace(input: CreateWorkspaceInput!): Workspace_!
  CreateWorkspaceItem(input: CreateWorkspaceItemInput!): WorkspaceItem_!
  DeleteAccount(ID: Int!): Account_!
  DeleteApplication(ID: Int!): Application_!
  DeleteApplicationEntity(ID: Int!): ApplicationEntity_!
  DeleteCompany(ID: Int!): Company_!
  DeleteConversation(ID: Int!): Conversation_!
  DeleteConversationDetail(ID: Int!): ConversationDetail_!
  DeleteDashboard(ID: Int!): Dashboard_!
  DeleteDashboardCategory(ID: Int!): DashboardCategory_!
  DeleteDataContext(ID: Int!): DataContext_!
  DeleteDataContextItem(ID: Int!): DataContextItem_!
  DeleteDealForecastCategory(ID: Int!): DealForecastCategory_!
  DeleteEmployee(ID: Int!): Employee_!
  DeleteEntity(ID: Int!): Entity_!
  DeleteEntityField(ID: Int!): EntityField_!
  DeleteEntityPermission(ID: Int!): EntityPermission_!
  DeleteEntityRelationship(ID: Int!): EntityRelationship_!
  DeleteFile(ID: Int!): File_!
  DeleteFileCategory(ID: Int!): FileCategory_!
  DeleteList(ID: Int!): List_!
  DeleteListDetail(ID: Int!): ListDetail_!
  DeleteQueryCategory(ID: Int!): QueryCategory_!
  DeleteReport(ID: Int!): Report_!
  DeleteReportCategory(ID: Int!): ReportCategory_!
  DeleteReportSnapshot(ID: Int!): ReportSnapshot_!
  DeleteRole(ID: Int!): Role_!
  DeleteUser(ID: Int!): User_!
  DeleteUserApplication(ID: Int!): UserApplication_!
  DeleteUserApplicationEntity(ID: Int!): UserApplicationEntity_!
  DeleteUserFavorite(ID: Int!): UserFavorite_!
  DeleteUserNotification(ID: Int!): UserNotification_!
  DeleteUserRole(ID: Int!): UserRole_!
  DeleteUserView(ID: Int!): UserView_!
  DeleteUserViewCategory(ID: Int!): UserViewCategory_!
  DeleteWorkspace(ID: Int!): Workspace_!
  DeleteWorkspaceItem(ID: Int!): WorkspaceItem_!
  MergeRecords(request: RecordMergeRequest!): RecordMergeResult!
  SetRecordFavoriteStatus(params: UserFavoriteSetParams!): UserFavoriteResult!
  UpdateAIAction(input: UpdateAIActionInput!): AIAction_!
  UpdateAIModel(input: UpdateAIModelInput!): AIModel_!
  UpdateAIModelAction(input: UpdateAIModelActionInput!): AIModelAction_!
  UpdateAIModelType(input: UpdateAIModelTypeInput!): AIModelType_!
  UpdateAccount(input: UpdateAccountInput!): Account_!
  UpdateActivity(input: UpdateActivityInput!): Activity_!
  UpdateActivityAttachment(input: UpdateActivityAttachmentInput!): ActivityAttachment_!
  UpdateApplication(input: UpdateApplicationInput!): Application_!
  UpdateApplicationEntity(input: UpdateApplicationEntityInput!): ApplicationEntity_!
  UpdateAuditLog(input: UpdateAuditLogInput!): AuditLog_!
  UpdateCompany(input: UpdateCompanyInput!): Company_!
  UpdateCompanyIntegration(input: UpdateCompanyIntegrationInput!): CompanyIntegration_!
  UpdateCompanyIntegrationRecordMap(input: UpdateCompanyIntegrationRecordMapInput!): CompanyIntegrationRecordMap_!
  UpdateCompanyIntegrationRun(input: UpdateCompanyIntegrationRunInput!): CompanyIntegrationRun_!
  UpdateCompanyIntegrationRunAPILog(input: UpdateCompanyIntegrationRunAPILogInput!): CompanyIntegrationRunAPILog_!
  UpdateCompanyIntegrationRunDetail(input: UpdateCompanyIntegrationRunDetailInput!): CompanyIntegrationRunDetail_!
  UpdateContact(input: UpdateContactInput!): Contact_!
  UpdateContactLevel(input: UpdateContactLevelInput!): ContactLevel_!
  UpdateContactRole(input: UpdateContactRoleInput!): ContactRole_!
  UpdateConversation(input: UpdateConversationInput!): Conversation_!
  UpdateConversationDetail(input: UpdateConversationDetailInput!): ConversationDetail_!
  UpdateDashboard(input: UpdateDashboardInput!): Dashboard_!
  UpdateDashboardCategory(input: UpdateDashboardCategoryInput!): DashboardCategory_!
  UpdateDataContext(input: UpdateDataContextInput!): DataContext_!
  UpdateDataContextItem(input: UpdateDataContextItemInput!): DataContextItem_!
  UpdateDeal(input: UpdateDealInput!): Deal_!
  UpdateDealForecastCategory(input: UpdateDealForecastCategoryInput!): DealForecastCategory_!
  UpdateDealStage(input: UpdateDealStageInput!): DealStage_!
  UpdateDealType(input: UpdateDealTypeInput!): DealType_!
  UpdateDuplicateRun(input: UpdateDuplicateRunInput!): DuplicateRun_!
  UpdateDuplicateRunDetail(input: UpdateDuplicateRunDetailInput!): DuplicateRunDetail_!
  UpdateDuplicateRunDetailMatch(input: UpdateDuplicateRunDetailMatchInput!): DuplicateRunDetailMatch_!
  UpdateEmployee(input: UpdateEmployeeInput!): Employee_!
  UpdateEmployeeCompanyIntegration(input: UpdateEmployeeCompanyIntegrationInput!): EmployeeCompanyIntegration_!
  UpdateEmployeeRole(input: UpdateEmployeeRoleInput!): EmployeeRole_!
  UpdateEmployeeSkill(input: UpdateEmployeeSkillInput!): EmployeeSkill_!
  UpdateEntity(input: UpdateEntityInput!): Entity_!
  UpdateEntityAIAction(input: UpdateEntityAIActionInput!): EntityAIAction_!
  UpdateEntityDocument(input: UpdateEntityDocumentInput!): EntityDocument_!
  UpdateEntityDocumentRun(input: UpdateEntityDocumentRunInput!): EntityDocumentRun_!
  UpdateEntityDocumentSetting(input: UpdateEntityDocumentSettingInput!): EntityDocumentSetting_!
  UpdateEntityDocumentType(input: UpdateEntityDocumentTypeInput!): EntityDocumentType_!
  UpdateEntityField(input: UpdateEntityFieldInput!): EntityField_!
  UpdateEntityPermission(input: UpdateEntityPermissionInput!): EntityPermission_!
  UpdateEntityRecordDocument(input: UpdateEntityRecordDocumentInput!): EntityRecordDocument_!
  UpdateEntityRelationship(input: UpdateEntityRelationshipInput!): EntityRelationship_!
  UpdateEntitySetting(input: UpdateEntitySettingInput!): EntitySetting_!
  UpdateErrorLog(input: UpdateErrorLogInput!): ErrorLog_!
  UpdateFile(input: UpdateFileInput!): File_!
  UpdateFileCategory(input: UpdateFileCategoryInput!): FileCategory_!
  UpdateFileEntityRecordLink(input: UpdateFileEntityRecordLinkInput!): FileEntityRecordLink_!
  UpdateFileStorageProvider(input: UpdateFileStorageProviderInput!): FileStorageProvider_!
  UpdateIndustry(input: UpdateIndustryInput!): Industry_!
  UpdateIntegration(input: UpdateIntegrationInput!): Integration_!
  UpdateIntegrationURLFormat(input: UpdateIntegrationURLFormatInput!): IntegrationURLFormat_!
  UpdateInvoice(input: UpdateInvoiceInput!): Invoice_!
  UpdateInvoiceStatusType(input: UpdateInvoiceStatusTypeInput!): InvoiceStatusType_!
  UpdateList(input: UpdateListInput!): List_!
  UpdateListDetail(input: UpdateListDetailInput!): ListDetail_!
  UpdatePaymentTermsType(input: UpdatePaymentTermsTypeInput!): PaymentTermsType_!
  UpdateQuery(input: UpdateQueryInput!): Query_!
  UpdateQueryCategory(input: UpdateQueryCategoryInput!): QueryCategory_!
  UpdateQueryField(input: UpdateQueryFieldInput!): QueryField_!
  UpdateQueryPermission(input: UpdateQueryPermissionInput!): QueryPermission_!
  UpdateQueue(input: UpdateQueueInput!): Queue_!
  UpdateQueueTask(input: UpdateQueueTaskInput!): QueueTask_!
  UpdateRecordMergeDeletionLog(input: UpdateRecordMergeDeletionLogInput!): RecordMergeDeletionLog_!
  UpdateRecordMergeLog(input: UpdateRecordMergeLogInput!): RecordMergeLog_!
  UpdateReport(input: UpdateReportInput!): Report_!
  UpdateReportCategory(input: UpdateReportCategoryInput!): ReportCategory_!
  UpdateReportSnapshot(input: UpdateReportSnapshotInput!): ReportSnapshot_!
  UpdateRole(input: UpdateRoleInput!): Role_!
  UpdateSchemaInfo(input: UpdateSchemaInfoInput!): SchemaInfo_!
  UpdateUser(input: UpdateUserInput!): User_!
  UpdateUserApplication(input: UpdateUserApplicationInput!): UserApplication_!
  UpdateUserApplicationEntity(input: UpdateUserApplicationEntityInput!): UserApplicationEntity_!
  UpdateUserFavorite(input: UpdateUserFavoriteInput!): UserFavorite_!
  UpdateUserNotification(input: UpdateUserNotificationInput!): UserNotification_!
  UpdateUserRecordLog(input: UpdateUserRecordLogInput!): UserRecordLog_!
  UpdateUserView(input: UpdateUserViewInput!): UserView_!
  UpdateUserViewCategory(input: UpdateUserViewCategoryInput!): UserViewCategory_!
  UpdateUserViewRun(input: UpdateUserViewRunInput!): UserViewRun_!
  UpdateUserViewRunDetail(input: UpdateUserViewRunDetailInput!): UserViewRunDetail_!
  UpdateVectorDatabase(input: UpdateVectorDatabaseInput!): VectorDatabase_!
  UpdateVectorIndex(input: UpdateVectorIndexInput!): VectorIndex_!
  UpdateVersionInstallation(input: UpdateVersionInstallationInput!): VersionInstallation_!
  UpdateWorkflow(input: UpdateWorkflowInput!): Workflow_!
  UpdateWorkflowEngine(input: UpdateWorkflowEngineInput!): WorkflowEngine_!
  UpdateWorkflowRun(input: UpdateWorkflowRunInput!): WorkflowRun_!
  UpdateWorkspace(input: UpdateWorkspaceInput!): Workspace_!
  UpdateWorkspaceItem(input: UpdateWorkspaceItemInput!): WorkspaceItem_!
}

type OutputDeliveryType_ {
  Description: String
  ID: Int!
  Name: String!
  ReportsArray: [Report_!]!
}

type OutputFormatType_ {
  Description: String
  DisplayFormat: String
  ID: Int!
  Name: String!
  ReportsArray: [Report_!]!
}

type OutputTriggerType_ {
  Description: String
  ID: Int!
  Name: String!
  ReportsArray: [Report_!]!
}

type PaymentTermsType_ {
  Code: String
  CompanyIntegrationID: Int
  CreatedAt: Timestamp!
  Description: String
  DisplayName: String
  DueDateCalculation: String
  ExternalSystemRecordID: String
  ID: Int!
  InvoicesArray: [Invoice_!]!
  Name: String!
  UpdatedAt: Timestamp!
}

input PotentialDuplicateRequestType {
  EntitiyID: Int
  EntityDocumentID: Int!
  EntityName: String
  PrimaryKeyValues: [PrimaryKeyValueInputType!]!
  ProbabilityScore: Int
}

type PotentialDuplicateResponseType {
  Duplicates: [PotentialDuplicateType!]!
  EntityID: Int!
}

type PotentialDuplicateType {
  PrimaryKeyValues: [PrimaryKeyValueOutputType!]!
  ProbabilityScore: Float!
}

input PrimaryKeyValueInputType {
  FieldName: String!
  Value: String!
}

type PrimaryKeyValueOutputType {
  FieldName: String!
  Value: String!
}

type PushStatusNotification {
  date: Timestamp!
  message: String
  sessionId: ID!
}

type Query {
  AIAction(ID: Int!): AIAction_
  AIModel(ID: Int!): AIModel_
  AIModelAction(ID: Int!): AIModelAction_
  AIModelType(ID: Int!): AIModelType_
  Account(ID: Int!): Account_
  Activity(ID: Int!): Activity_
  ActivityAttachment(ID: Int!): ActivityAttachment_
  AllAIActions: [AIAction_!]!
  AllAIModelActions: [AIModelAction_!]!
  AllAIModelTypes: [AIModelType_!]!
  AllAIModels: [AIModel_!]!
  AllApplications: [Application_!]!
  AllAuditLogTypes: [AuditLogType_!]!
  AllAuthorizationRoles: [AuthorizationRole_!]!
  AllAuthorizations: [Authorization_!]!
  AllCompanies: [Company_!]!
  AllEmployees: [Employee_!]!
  AllEntities: [Entity_!]!
  AllEntityAIActions: [EntityAIAction_!]!
  AllEntityFieldValues: [EntityFieldValue_!]!
  AllEntityFields: [EntityField_!]!
  AllEntityPermissions: [EntityPermission_!]!
  AllEntityRelationships: [EntityRelationship_!]!
  AllIntegrationURLFormats: [IntegrationURLFormat_!]!
  AllIntegrations: [Integration_!]!
  AllRoles: [Role_!]!
  AllRowLevelSecurityFilters: [RowLevelSecurityFilter_!]!
  AllSkills: [Skill_!]!
  AllUserRoles: [UserRole_!]!
  AllUserViews: [UserView_!]!
  AllUsers: [User_!]!
  Application(ID: Int!): Application_
  ApplicationEntity(ID: Int!): ApplicationEntity_
  AuditLog(ID: Int!): AuditLog_
  AuditLogType(ID: Int!): AuditLogType_
  Authorization(ID: Int!): Authorization_
  AuthorizationRole(ID: Int!): AuthorizationRole_
  Company(ID: Int!): Company_
  CompanyIntegration(ID: Int!): CompanyIntegration_
  CompanyIntegrationRecordMap(ID: Int!): CompanyIntegrationRecordMap_
  CompanyIntegrationRun(ID: Int!): CompanyIntegrationRun_
  CompanyIntegrationRunAPILog(ID: Int!): CompanyIntegrationRunAPILog_
  CompanyIntegrationRunDetail(ID: Int!): CompanyIntegrationRunDetail_
  Contact(ID: Int!): Contact_
  ContactLevel(ID: Int!): ContactLevel_
  ContactRole(ID: Int!): ContactRole_
  Conversation(ID: Int!): Conversation_
  ConversationDetail(ID: Int!): ConversationDetail_
  CurrentUser: User_!
  CurrentUserDefaultViewByEntityID(EntityID: Int!): [UserView_!]!
  CurrentUserUserViewsByEntityID(EntityID: Int!): [UserView_!]!
  Dashboard(ID: Int!): Dashboard_
  DashboardCategory(ID: Int!): DashboardCategory_
  DataContext(ID: Int!): DataContext_
  DataContextItem(ID: Int!): DataContextItem_
  Dataset(ID: Int!): Dataset_
  DatasetItem(ID: Int!): DatasetItem_
  Deal(ID: Int!): Deal_
  DealForecastCategory(ID: Int!): DealForecastCategory_
  DealStage(ID: Int!): DealStage_
  DealType(ID: Int!): DealType_
  DefaultViewByUserAndEntity(EntityID: Int!, UserID: Int!): [UserView_!]!
  DuplicateRun(ID: Int!): DuplicateRun_
  DuplicateRunDetail(ID: Int!): DuplicateRunDetail_
  DuplicateRunDetailMatch(ID: Int!): DuplicateRunDetailMatch_
  Employee(ID: Int!): Employee_
  EmployeeCompanyIntegration(ID: Int!): EmployeeCompanyIntegration_
  EmployeeRole(ID: Int!): EmployeeRole_
  EmployeeSkill(ID: Int!): EmployeeSkill_
  EntitiesBySchemas(ExcludeSchemas: [String!], IncludeSchemas: [String!]): [Entity_!]!
  Entity(ID: Int!): Entity_
  EntityAIAction(ID: Int!): EntityAIAction_
  EntityDocument(ID: Int!): EntityDocument_
  EntityDocumentRun(ID: Int!): EntityDocumentRun_
  EntityDocumentSetting(ID: Int!): EntityDocumentSetting_
  EntityDocumentType(ID: Int!): EntityDocumentType_
  EntityField(ID: Int!): EntityField_
  EntityFieldValue(ID: Int!): EntityFieldValue_
  EntityPermission(ID: Int!): EntityPermission_
  EntityRecordDocument(ID: Int!): EntityRecordDocument_
  EntityRelationship(ID: Int!): EntityRelationship_
  EntitySetting(ID: Int!): EntitySetting_
  ErrorLog(ID: Int!): ErrorLog_
  ExecuteAskSkipAnalysisQuery(ConversationId: Int!, DataContextId: Int, UserQuestion: String!): AskSkipResultType!
  ExecuteAskSkipRecordChat(ConversationId: Int!, EntityName: String!, PrimaryKeys: [PrimaryKeyValueInputType!]!, UserQuestion: String!): AskSkipResultType!
  ExecuteAskSkipRunScript(DataContextId: Int!, ScriptText: String!): AskSkipResultType!
  File(ID: Int!): File_
  FileCategory(ID: Int!): FileCategory_
  FileEntityRecordLink(ID: Int!): FileEntityRecordLink_
  FileStorageProvider(ID: Int!): FileStorageProvider_
  GetDatasetByName(DatasetName: String!, ItemFilters: [DatasetItemFilterTypeGQL]): DatasetResultType!
  GetDatasetStatusByName(DatasetName: String!, ItemFilters: [DatasetItemFilterTypeGQL]): DatasetStatusResultType!
  GetEntityDependencies(entityName: String!): [EntityDependencyResult!]!
  GetEntityRecordName(EntityName: String!, PrimaryKeyValues: [PrimaryKeyValueInputType!]!): EntityRecordNameResult!
  GetEntityRecordNames(info: [EntityRecordNameInput!]!): [EntityRecordNameResult!]!
  GetQueryData(QueryID: Int!): RunQueryResultType!
  GetRecordDependencies(entityName: String!, primaryKeyValues: [PrimaryKeyValueInputType!]!): [RecordDependencyResult!]!
  GetRecordDuplicates(params: PotentialDuplicateRequestType!): PotentialDuplicateResponseType!
  GetRecordFavoriteStatus(params: UserFavoriteSearchParams!): UserFavoriteResult!
  GetReportData(ReportID: Int!): RunReportResultType!
  Industry(ID: Int!): Industry_
  Integration(ID: Int!): Integration_
  IntegrationURLFormat(ID: Int!): IntegrationURLFormat_
  Invoice(ID: Int!): Invoice_
  InvoiceStatusType(ID: Int!): InvoiceStatusType_
  List(ID: Int!): List_
  ListDetail(ID: Int!): ListDetail_
  OutputDeliveryType(ID: Int!): OutputDeliveryType_
  OutputFormatType(ID: Int!): OutputFormatType_
  OutputTriggerType(ID: Int!): OutputTriggerType_
  PaymentTermsType(ID: Int!): PaymentTermsType_
  Query(ID: Int!): Query_
  QueryCategory(ID: Int!): QueryCategory_
  QueryField(ID: Int!): QueryField_
  QueryPermission(ID: Int!): QueryPermission_
  Queue(ID: Int!): Queue_
  QueueTask(ID: Int!): QueueTask_
  QueueType(ID: Int!): QueueType_
  RecordChange(ID: Int!): RecordChange_
  RecordMergeDeletionLog(ID: Int!): RecordMergeDeletionLog_
  RecordMergeLog(ID: Int!): RecordMergeLog_
  Report(ID: Int!): Report_
  ReportCategory(ID: Int!): ReportCategory_
  ReportSnapshot(ID: Int!): ReportSnapshot_
  ResourceType(ID: Int!): ResourceType_
  Role(ID: Int!): Role_
  RowLevelSecurityFilter(ID: Int!): RowLevelSecurityFilter_
  RunAIActionDynamicView(input: RunDynamicViewInput!): RunAIActionViewResult!
  RunAIActionViewByID(input: RunViewByIDInput!): RunAIActionViewResult!
  RunAIActionViewByName(input: RunViewByNameInput!): RunAIActionViewResult!
  RunAIModelActionDynamicView(input: RunDynamicViewInput!): RunAIModelActionViewResult!
  RunAIModelActionViewByID(input: RunViewByIDInput!): RunAIModelActionViewResult!
  RunAIModelActionViewByName(input: RunViewByNameInput!): RunAIModelActionViewResult!
  RunAIModelDynamicView(input: RunDynamicViewInput!): RunAIModelViewResult!
  RunAIModelTypeDynamicView(input: RunDynamicViewInput!): RunAIModelTypeViewResult!
  RunAIModelTypeViewByID(input: RunViewByIDInput!): RunAIModelTypeViewResult!
  RunAIModelTypeViewByName(input: RunViewByNameInput!): RunAIModelTypeViewResult!
  RunAIModelViewByID(input: RunViewByIDInput!): RunAIModelViewResult!
  RunAIModelViewByName(input: RunViewByNameInput!): RunAIModelViewResult!
  RunAccountDynamicView(input: RunDynamicViewInput!): RunAccountViewResult!
  RunAccountViewByID(input: RunViewByIDInput!): RunAccountViewResult!
  RunAccountViewByName(input: RunViewByNameInput!): RunAccountViewResult!
  RunActivityAttachmentDynamicView(input: RunDynamicViewInput!): RunActivityAttachmentViewResult!
  RunActivityAttachmentViewByID(input: RunViewByIDInput!): RunActivityAttachmentViewResult!
  RunActivityAttachmentViewByName(input: RunViewByNameInput!): RunActivityAttachmentViewResult!
  RunActivityDynamicView(input: RunDynamicViewInput!): RunActivityViewResult!
  RunActivityViewByID(input: RunViewByIDInput!): RunActivityViewResult!
  RunActivityViewByName(input: RunViewByNameInput!): RunActivityViewResult!
  RunApplicationDynamicView(input: RunDynamicViewInput!): RunApplicationViewResult!
  RunApplicationEntityDynamicView(input: RunDynamicViewInput!): RunApplicationEntityViewResult!
  RunApplicationEntityViewByID(input: RunViewByIDInput!): RunApplicationEntityViewResult!
  RunApplicationEntityViewByName(input: RunViewByNameInput!): RunApplicationEntityViewResult!
  RunApplicationViewByID(input: RunViewByIDInput!): RunApplicationViewResult!
  RunApplicationViewByName(input: RunViewByNameInput!): RunApplicationViewResult!
  RunAuditLogDynamicView(input: RunDynamicViewInput!): RunAuditLogViewResult!
  RunAuditLogTypeDynamicView(input: RunDynamicViewInput!): RunAuditLogTypeViewResult!
  RunAuditLogTypeViewByID(input: RunViewByIDInput!): RunAuditLogTypeViewResult!
  RunAuditLogTypeViewByName(input: RunViewByNameInput!): RunAuditLogTypeViewResult!
  RunAuditLogViewByID(input: RunViewByIDInput!): RunAuditLogViewResult!
  RunAuditLogViewByName(input: RunViewByNameInput!): RunAuditLogViewResult!
  RunAuthorizationDynamicView(input: RunDynamicViewInput!): RunAuthorizationViewResult!
  RunAuthorizationRoleDynamicView(input: RunDynamicViewInput!): RunAuthorizationRoleViewResult!
  RunAuthorizationRoleViewByID(input: RunViewByIDInput!): RunAuthorizationRoleViewResult!
  RunAuthorizationRoleViewByName(input: RunViewByNameInput!): RunAuthorizationRoleViewResult!
  RunAuthorizationViewByID(input: RunViewByIDInput!): RunAuthorizationViewResult!
  RunAuthorizationViewByName(input: RunViewByNameInput!): RunAuthorizationViewResult!
  RunCompanyDynamicView(input: RunDynamicViewInput!): RunCompanyViewResult!
  RunCompanyIntegrationDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationViewResult!
  RunCompanyIntegrationRecordMapDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationRecordMapViewResult!
  RunCompanyIntegrationRecordMapViewByID(input: RunViewByIDInput!): RunCompanyIntegrationRecordMapViewResult!
  RunCompanyIntegrationRecordMapViewByName(input: RunViewByNameInput!): RunCompanyIntegrationRecordMapViewResult!
  RunCompanyIntegrationRunAPILogDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationRunAPILogViewResult!
  RunCompanyIntegrationRunAPILogViewByID(input: RunViewByIDInput!): RunCompanyIntegrationRunAPILogViewResult!
  RunCompanyIntegrationRunAPILogViewByName(input: RunViewByNameInput!): RunCompanyIntegrationRunAPILogViewResult!
  RunCompanyIntegrationRunDetailDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationRunDetailViewResult!
  RunCompanyIntegrationRunDetailViewByID(input: RunViewByIDInput!): RunCompanyIntegrationRunDetailViewResult!
  RunCompanyIntegrationRunDetailViewByName(input: RunViewByNameInput!): RunCompanyIntegrationRunDetailViewResult!
  RunCompanyIntegrationRunDynamicView(input: RunDynamicViewInput!): RunCompanyIntegrationRunViewResult!
  RunCompanyIntegrationRunViewByID(input: RunViewByIDInput!): RunCompanyIntegrationRunViewResult!
  RunCompanyIntegrationRunViewByName(input: RunViewByNameInput!): RunCompanyIntegrationRunViewResult!
  RunCompanyIntegrationViewByID(input: RunViewByIDInput!): RunCompanyIntegrationViewResult!
  RunCompanyIntegrationViewByName(input: RunViewByNameInput!): RunCompanyIntegrationViewResult!
  RunCompanyViewByID(input: RunViewByIDInput!): RunCompanyViewResult!
  RunCompanyViewByName(input: RunViewByNameInput!): RunCompanyViewResult!
  RunContactDynamicView(input: RunDynamicViewInput!): RunContactViewResult!
  RunContactLevelDynamicView(input: RunDynamicViewInput!): RunContactLevelViewResult!
  RunContactLevelViewByID(input: RunViewByIDInput!): RunContactLevelViewResult!
  RunContactLevelViewByName(input: RunViewByNameInput!): RunContactLevelViewResult!
  RunContactRoleDynamicView(input: RunDynamicViewInput!): RunContactRoleViewResult!
  RunContactRoleViewByID(input: RunViewByIDInput!): RunContactRoleViewResult!
  RunContactRoleViewByName(input: RunViewByNameInput!): RunContactRoleViewResult!
  RunContactViewByID(input: RunViewByIDInput!): RunContactViewResult!
  RunContactViewByName(input: RunViewByNameInput!): RunContactViewResult!
  RunConversationDetailDynamicView(input: RunDynamicViewInput!): RunConversationDetailViewResult!
  RunConversationDetailViewByID(input: RunViewByIDInput!): RunConversationDetailViewResult!
  RunConversationDetailViewByName(input: RunViewByNameInput!): RunConversationDetailViewResult!
  RunConversationDynamicView(input: RunDynamicViewInput!): RunConversationViewResult!
  RunConversationViewByID(input: RunViewByIDInput!): RunConversationViewResult!
  RunConversationViewByName(input: RunViewByNameInput!): RunConversationViewResult!
  RunDashboardCategoryDynamicView(input: RunDynamicViewInput!): RunDashboardCategoryViewResult!
  RunDashboardCategoryViewByID(input: RunViewByIDInput!): RunDashboardCategoryViewResult!
  RunDashboardCategoryViewByName(input: RunViewByNameInput!): RunDashboardCategoryViewResult!
  RunDashboardDynamicView(input: RunDynamicViewInput!): RunDashboardViewResult!
  RunDashboardViewByID(input: RunViewByIDInput!): RunDashboardViewResult!
  RunDashboardViewByName(input: RunViewByNameInput!): RunDashboardViewResult!
  RunDataContextDynamicView(input: RunDynamicViewInput!): RunDataContextViewResult!
  RunDataContextItemDynamicView(input: RunDynamicViewInput!): RunDataContextItemViewResult!
  RunDataContextItemViewByID(input: RunViewByIDInput!): RunDataContextItemViewResult!
  RunDataContextItemViewByName(input: RunViewByNameInput!): RunDataContextItemViewResult!
  RunDataContextViewByID(input: RunViewByIDInput!): RunDataContextViewResult!
  RunDataContextViewByName(input: RunViewByNameInput!): RunDataContextViewResult!
  RunDatasetDynamicView(input: RunDynamicViewInput!): RunDatasetViewResult!
  RunDatasetItemDynamicView(input: RunDynamicViewInput!): RunDatasetItemViewResult!
  RunDatasetItemViewByID(input: RunViewByIDInput!): RunDatasetItemViewResult!
  RunDatasetItemViewByName(input: RunViewByNameInput!): RunDatasetItemViewResult!
  RunDatasetViewByID(input: RunViewByIDInput!): RunDatasetViewResult!
  RunDatasetViewByName(input: RunViewByNameInput!): RunDatasetViewResult!
  RunDealDynamicView(input: RunDynamicViewInput!): RunDealViewResult!
  RunDealForecastCategoryDynamicView(input: RunDynamicViewInput!): RunDealForecastCategoryViewResult!
  RunDealForecastCategoryViewByID(input: RunViewByIDInput!): RunDealForecastCategoryViewResult!
  RunDealForecastCategoryViewByName(input: RunViewByNameInput!): RunDealForecastCategoryViewResult!
  RunDealStageDynamicView(input: RunDynamicViewInput!): RunDealStageViewResult!
  RunDealStageViewByID(input: RunViewByIDInput!): RunDealStageViewResult!
  RunDealStageViewByName(input: RunViewByNameInput!): RunDealStageViewResult!
  RunDealTypeDynamicView(input: RunDynamicViewInput!): RunDealTypeViewResult!
  RunDealTypeViewByID(input: RunViewByIDInput!): RunDealTypeViewResult!
  RunDealTypeViewByName(input: RunViewByNameInput!): RunDealTypeViewResult!
  RunDealViewByID(input: RunViewByIDInput!): RunDealViewResult!
  RunDealViewByName(input: RunViewByNameInput!): RunDealViewResult!
  RunDuplicateRunDetailDynamicView(input: RunDynamicViewInput!): RunDuplicateRunDetailViewResult!
  RunDuplicateRunDetailMatchDynamicView(input: RunDynamicViewInput!): RunDuplicateRunDetailMatchViewResult!
  RunDuplicateRunDetailMatchViewByID(input: RunViewByIDInput!): RunDuplicateRunDetailMatchViewResult!
  RunDuplicateRunDetailMatchViewByName(input: RunViewByNameInput!): RunDuplicateRunDetailMatchViewResult!
  RunDuplicateRunDetailViewByID(input: RunViewByIDInput!): RunDuplicateRunDetailViewResult!
  RunDuplicateRunDetailViewByName(input: RunViewByNameInput!): RunDuplicateRunDetailViewResult!
  RunDuplicateRunDynamicView(input: RunDynamicViewInput!): RunDuplicateRunViewResult!
  RunDuplicateRunViewByID(input: RunViewByIDInput!): RunDuplicateRunViewResult!
  RunDuplicateRunViewByName(input: RunViewByNameInput!): RunDuplicateRunViewResult!
  RunDynamicView(input: RunDynamicViewInput!): RunViewResult!
  RunEmployeeCompanyIntegrationDynamicView(input: RunDynamicViewInput!): RunEmployeeCompanyIntegrationViewResult!
  RunEmployeeCompanyIntegrationViewByID(input: RunViewByIDInput!): RunEmployeeCompanyIntegrationViewResult!
  RunEmployeeCompanyIntegrationViewByName(input: RunViewByNameInput!): RunEmployeeCompanyIntegrationViewResult!
  RunEmployeeDynamicView(input: RunDynamicViewInput!): RunEmployeeViewResult!
  RunEmployeeRoleDynamicView(input: RunDynamicViewInput!): RunEmployeeRoleViewResult!
  RunEmployeeRoleViewByID(input: RunViewByIDInput!): RunEmployeeRoleViewResult!
  RunEmployeeRoleViewByName(input: RunViewByNameInput!): RunEmployeeRoleViewResult!
  RunEmployeeSkillDynamicView(input: RunDynamicViewInput!): RunEmployeeSkillViewResult!
  RunEmployeeSkillViewByID(input: RunViewByIDInput!): RunEmployeeSkillViewResult!
  RunEmployeeSkillViewByName(input: RunViewByNameInput!): RunEmployeeSkillViewResult!
  RunEmployeeViewByID(input: RunViewByIDInput!): RunEmployeeViewResult!
  RunEmployeeViewByName(input: RunViewByNameInput!): RunEmployeeViewResult!
  RunEntityAIActionDynamicView(input: RunDynamicViewInput!): RunEntityAIActionViewResult!
  RunEntityAIActionViewByID(input: RunViewByIDInput!): RunEntityAIActionViewResult!
  RunEntityAIActionViewByName(input: RunViewByNameInput!): RunEntityAIActionViewResult!
  RunEntityDocumentDynamicView(input: RunDynamicViewInput!): RunEntityDocumentViewResult!
  RunEntityDocumentRunDynamicView(input: RunDynamicViewInput!): RunEntityDocumentRunViewResult!
  RunEntityDocumentRunViewByID(input: RunViewByIDInput!): RunEntityDocumentRunViewResult!
  RunEntityDocumentRunViewByName(input: RunViewByNameInput!): RunEntityDocumentRunViewResult!
  RunEntityDocumentSettingDynamicView(input: RunDynamicViewInput!): RunEntityDocumentSettingViewResult!
  RunEntityDocumentSettingViewByID(input: RunViewByIDInput!): RunEntityDocumentSettingViewResult!
  RunEntityDocumentSettingViewByName(input: RunViewByNameInput!): RunEntityDocumentSettingViewResult!
  RunEntityDocumentTypeDynamicView(input: RunDynamicViewInput!): RunEntityDocumentTypeViewResult!
  RunEntityDocumentTypeViewByID(input: RunViewByIDInput!): RunEntityDocumentTypeViewResult!
  RunEntityDocumentTypeViewByName(input: RunViewByNameInput!): RunEntityDocumentTypeViewResult!
  RunEntityDocumentViewByID(input: RunViewByIDInput!): RunEntityDocumentViewResult!
  RunEntityDocumentViewByName(input: RunViewByNameInput!): RunEntityDocumentViewResult!
  RunEntityDynamicView(input: RunDynamicViewInput!): RunEntityViewResult!
  RunEntityFieldDynamicView(input: RunDynamicViewInput!): RunEntityFieldViewResult!
  RunEntityFieldValueDynamicView(input: RunDynamicViewInput!): RunEntityFieldValueViewResult!
  RunEntityFieldValueViewByID(input: RunViewByIDInput!): RunEntityFieldValueViewResult!
  RunEntityFieldValueViewByName(input: RunViewByNameInput!): RunEntityFieldValueViewResult!
  RunEntityFieldViewByID(input: RunViewByIDInput!): RunEntityFieldViewResult!
  RunEntityFieldViewByName(input: RunViewByNameInput!): RunEntityFieldViewResult!
  RunEntityPermissionDynamicView(input: RunDynamicViewInput!): RunEntityPermissionViewResult!
  RunEntityPermissionViewByID(input: RunViewByIDInput!): RunEntityPermissionViewResult!
  RunEntityPermissionViewByName(input: RunViewByNameInput!): RunEntityPermissionViewResult!
  RunEntityRecordDocumentDynamicView(input: RunDynamicViewInput!): RunEntityRecordDocumentViewResult!
  RunEntityRecordDocumentViewByID(input: RunViewByIDInput!): RunEntityRecordDocumentViewResult!
  RunEntityRecordDocumentViewByName(input: RunViewByNameInput!): RunEntityRecordDocumentViewResult!
  RunEntityRelationshipDynamicView(input: RunDynamicViewInput!): RunEntityRelationshipViewResult!
  RunEntityRelationshipViewByID(input: RunViewByIDInput!): RunEntityRelationshipViewResult!
  RunEntityRelationshipViewByName(input: RunViewByNameInput!): RunEntityRelationshipViewResult!
  RunEntitySettingDynamicView(input: RunDynamicViewInput!): RunEntitySettingViewResult!
  RunEntitySettingViewByID(input: RunViewByIDInput!): RunEntitySettingViewResult!
  RunEntitySettingViewByName(input: RunViewByNameInput!): RunEntitySettingViewResult!
  RunEntityViewByID(input: RunViewByIDInput!): RunEntityViewResult!
  RunEntityViewByName(input: RunViewByNameInput!): RunEntityViewResult!
  RunErrorLogDynamicView(input: RunDynamicViewInput!): RunErrorLogViewResult!
  RunErrorLogViewByID(input: RunViewByIDInput!): RunErrorLogViewResult!
  RunErrorLogViewByName(input: RunViewByNameInput!): RunErrorLogViewResult!
  RunFileCategoryDynamicView(input: RunDynamicViewInput!): RunFileCategoryViewResult!
  RunFileCategoryViewByID(input: RunViewByIDInput!): RunFileCategoryViewResult!
  RunFileCategoryViewByName(input: RunViewByNameInput!): RunFileCategoryViewResult!
  RunFileDynamicView(input: RunDynamicViewInput!): RunFileViewResult!
  RunFileEntityRecordLinkDynamicView(input: RunDynamicViewInput!): RunFileEntityRecordLinkViewResult!
  RunFileEntityRecordLinkViewByID(input: RunViewByIDInput!): RunFileEntityRecordLinkViewResult!
  RunFileEntityRecordLinkViewByName(input: RunViewByNameInput!): RunFileEntityRecordLinkViewResult!
  RunFileStorageProviderDynamicView(input: RunDynamicViewInput!): RunFileStorageProviderViewResult!
  RunFileStorageProviderViewByID(input: RunViewByIDInput!): RunFileStorageProviderViewResult!
  RunFileStorageProviderViewByName(input: RunViewByNameInput!): RunFileStorageProviderViewResult!
  RunFileViewByID(input: RunViewByIDInput!): RunFileViewResult!
  RunFileViewByName(input: RunViewByNameInput!): RunFileViewResult!
  RunIndustryDynamicView(input: RunDynamicViewInput!): RunIndustryViewResult!
  RunIndustryViewByID(input: RunViewByIDInput!): RunIndustryViewResult!
  RunIndustryViewByName(input: RunViewByNameInput!): RunIndustryViewResult!
  RunIntegrationDynamicView(input: RunDynamicViewInput!): RunIntegrationViewResult!
  RunIntegrationURLFormatDynamicView(input: RunDynamicViewInput!): RunIntegrationURLFormatViewResult!
  RunIntegrationURLFormatViewByID(input: RunViewByIDInput!): RunIntegrationURLFormatViewResult!
  RunIntegrationURLFormatViewByName(input: RunViewByNameInput!): RunIntegrationURLFormatViewResult!
  RunIntegrationViewByID(input: RunViewByIDInput!): RunIntegrationViewResult!
  RunIntegrationViewByName(input: RunViewByNameInput!): RunIntegrationViewResult!
  RunInvoiceDynamicView(input: RunDynamicViewInput!): RunInvoiceViewResult!
  RunInvoiceStatusTypeDynamicView(input: RunDynamicViewInput!): RunInvoiceStatusTypeViewResult!
  RunInvoiceStatusTypeViewByID(input: RunViewByIDInput!): RunInvoiceStatusTypeViewResult!
  RunInvoiceStatusTypeViewByName(input: RunViewByNameInput!): RunInvoiceStatusTypeViewResult!
  RunInvoiceViewByID(input: RunViewByIDInput!): RunInvoiceViewResult!
  RunInvoiceViewByName(input: RunViewByNameInput!): RunInvoiceViewResult!
  RunListDetailDynamicView(input: RunDynamicViewInput!): RunListDetailViewResult!
  RunListDetailViewByID(input: RunViewByIDInput!): RunListDetailViewResult!
  RunListDetailViewByName(input: RunViewByNameInput!): RunListDetailViewResult!
  RunListDynamicView(input: RunDynamicViewInput!): RunListViewResult!
  RunListViewByID(input: RunViewByIDInput!): RunListViewResult!
  RunListViewByName(input: RunViewByNameInput!): RunListViewResult!
  RunOutputDeliveryTypeDynamicView(input: RunDynamicViewInput!): RunOutputDeliveryTypeViewResult!
  RunOutputDeliveryTypeViewByID(input: RunViewByIDInput!): RunOutputDeliveryTypeViewResult!
  RunOutputDeliveryTypeViewByName(input: RunViewByNameInput!): RunOutputDeliveryTypeViewResult!
  RunOutputFormatTypeDynamicView(input: RunDynamicViewInput!): RunOutputFormatTypeViewResult!
  RunOutputFormatTypeViewByID(input: RunViewByIDInput!): RunOutputFormatTypeViewResult!
  RunOutputFormatTypeViewByName(input: RunViewByNameInput!): RunOutputFormatTypeViewResult!
  RunOutputTriggerTypeDynamicView(input: RunDynamicViewInput!): RunOutputTriggerTypeViewResult!
  RunOutputTriggerTypeViewByID(input: RunViewByIDInput!): RunOutputTriggerTypeViewResult!
  RunOutputTriggerTypeViewByName(input: RunViewByNameInput!): RunOutputTriggerTypeViewResult!
  RunPaymentTermsTypeDynamicView(input: RunDynamicViewInput!): RunPaymentTermsTypeViewResult!
  RunPaymentTermsTypeViewByID(input: RunViewByIDInput!): RunPaymentTermsTypeViewResult!
  RunPaymentTermsTypeViewByName(input: RunViewByNameInput!): RunPaymentTermsTypeViewResult!
  RunQueryCategoryDynamicView(input: RunDynamicViewInput!): RunQueryCategoryViewResult!
  RunQueryCategoryViewByID(input: RunViewByIDInput!): RunQueryCategoryViewResult!
  RunQueryCategoryViewByName(input: RunViewByNameInput!): RunQueryCategoryViewResult!
  RunQueryDynamicView(input: RunDynamicViewInput!): RunQueryViewResult!
  RunQueryFieldDynamicView(input: RunDynamicViewInput!): RunQueryFieldViewResult!
  RunQueryFieldViewByID(input: RunViewByIDInput!): RunQueryFieldViewResult!
  RunQueryFieldViewByName(input: RunViewByNameInput!): RunQueryFieldViewResult!
  RunQueryPermissionDynamicView(input: RunDynamicViewInput!): RunQueryPermissionViewResult!
  RunQueryPermissionViewByID(input: RunViewByIDInput!): RunQueryPermissionViewResult!
  RunQueryPermissionViewByName(input: RunViewByNameInput!): RunQueryPermissionViewResult!
  RunQueryViewByID(input: RunViewByIDInput!): RunQueryViewResult!
  RunQueryViewByName(input: RunViewByNameInput!): RunQueryViewResult!
  RunQueueDynamicView(input: RunDynamicViewInput!): RunQueueViewResult!
  RunQueueTaskDynamicView(input: RunDynamicViewInput!): RunQueueTaskViewResult!
  RunQueueTaskViewByID(input: RunViewByIDInput!): RunQueueTaskViewResult!
  RunQueueTaskViewByName(input: RunViewByNameInput!): RunQueueTaskViewResult!
  RunQueueTypeDynamicView(input: RunDynamicViewInput!): RunQueueTypeViewResult!
  RunQueueTypeViewByID(input: RunViewByIDInput!): RunQueueTypeViewResult!
  RunQueueTypeViewByName(input: RunViewByNameInput!): RunQueueTypeViewResult!
  RunQueueViewByID(input: RunViewByIDInput!): RunQueueViewResult!
  RunQueueViewByName(input: RunViewByNameInput!): RunQueueViewResult!
  RunRecordChangeDynamicView(input: RunDynamicViewInput!): RunRecordChangeViewResult!
  RunRecordChangeViewByID(input: RunViewByIDInput!): RunRecordChangeViewResult!
  RunRecordChangeViewByName(input: RunViewByNameInput!): RunRecordChangeViewResult!
  RunRecordMergeDeletionLogDynamicView(input: RunDynamicViewInput!): RunRecordMergeDeletionLogViewResult!
  RunRecordMergeDeletionLogViewByID(input: RunViewByIDInput!): RunRecordMergeDeletionLogViewResult!
  RunRecordMergeDeletionLogViewByName(input: RunViewByNameInput!): RunRecordMergeDeletionLogViewResult!
  RunRecordMergeLogDynamicView(input: RunDynamicViewInput!): RunRecordMergeLogViewResult!
  RunRecordMergeLogViewByID(input: RunViewByIDInput!): RunRecordMergeLogViewResult!
  RunRecordMergeLogViewByName(input: RunViewByNameInput!): RunRecordMergeLogViewResult!
  RunReportCategoryDynamicView(input: RunDynamicViewInput!): RunReportCategoryViewResult!
  RunReportCategoryViewByID(input: RunViewByIDInput!): RunReportCategoryViewResult!
  RunReportCategoryViewByName(input: RunViewByNameInput!): RunReportCategoryViewResult!
  RunReportDynamicView(input: RunDynamicViewInput!): RunReportViewResult!
  RunReportSnapshotDynamicView(input: RunDynamicViewInput!): RunReportSnapshotViewResult!
  RunReportSnapshotViewByID(input: RunViewByIDInput!): RunReportSnapshotViewResult!
  RunReportSnapshotViewByName(input: RunViewByNameInput!): RunReportSnapshotViewResult!
  RunReportViewByID(input: RunViewByIDInput!): RunReportViewResult!
  RunReportViewByName(input: RunViewByNameInput!): RunReportViewResult!
  RunResourceTypeDynamicView(input: RunDynamicViewInput!): RunResourceTypeViewResult!
  RunResourceTypeViewByID(input: RunViewByIDInput!): RunResourceTypeViewResult!
  RunResourceTypeViewByName(input: RunViewByNameInput!): RunResourceTypeViewResult!
  RunRoleDynamicView(input: RunDynamicViewInput!): RunRoleViewResult!
  RunRoleViewByID(input: RunViewByIDInput!): RunRoleViewResult!
  RunRoleViewByName(input: RunViewByNameInput!): RunRoleViewResult!
  RunRowLevelSecurityFilterDynamicView(input: RunDynamicViewInput!): RunRowLevelSecurityFilterViewResult!
  RunRowLevelSecurityFilterViewByID(input: RunViewByIDInput!): RunRowLevelSecurityFilterViewResult!
  RunRowLevelSecurityFilterViewByName(input: RunViewByNameInput!): RunRowLevelSecurityFilterViewResult!
  RunSchemaInfoDynamicView(input: RunDynamicViewInput!): RunSchemaInfoViewResult!
  RunSchemaInfoViewByID(input: RunViewByIDInput!): RunSchemaInfoViewResult!
  RunSchemaInfoViewByName(input: RunViewByNameInput!): RunSchemaInfoViewResult!
  RunSkillDynamicView(input: RunDynamicViewInput!): RunSkillViewResult!
  RunSkillViewByID(input: RunViewByIDInput!): RunSkillViewResult!
  RunSkillViewByName(input: RunViewByNameInput!): RunSkillViewResult!
  RunTagDynamicView(input: RunDynamicViewInput!): RunTagViewResult!
  RunTagViewByID(input: RunViewByIDInput!): RunTagViewResult!
  RunTagViewByName(input: RunViewByNameInput!): RunTagViewResult!
  RunTaggedItemDynamicView(input: RunDynamicViewInput!): RunTaggedItemViewResult!
  RunTaggedItemViewByID(input: RunViewByIDInput!): RunTaggedItemViewResult!
  RunTaggedItemViewByName(input: RunViewByNameInput!): RunTaggedItemViewResult!
  RunUserApplicationDynamicView(input: RunDynamicViewInput!): RunUserApplicationViewResult!
  RunUserApplicationEntityDynamicView(input: RunDynamicViewInput!): RunUserApplicationEntityViewResult!
  RunUserApplicationEntityViewByID(input: RunViewByIDInput!): RunUserApplicationEntityViewResult!
  RunUserApplicationEntityViewByName(input: RunViewByNameInput!): RunUserApplicationEntityViewResult!
  RunUserApplicationViewByID(input: RunViewByIDInput!): RunUserApplicationViewResult!
  RunUserApplicationViewByName(input: RunViewByNameInput!): RunUserApplicationViewResult!
  RunUserDynamicView(input: RunDynamicViewInput!): RunUserViewResult!
  RunUserFavoriteDynamicView(input: RunDynamicViewInput!): RunUserFavoriteViewResult!
  RunUserFavoriteViewByID(input: RunViewByIDInput!): RunUserFavoriteViewResult!
  RunUserFavoriteViewByName(input: RunViewByNameInput!): RunUserFavoriteViewResult!
  RunUserNotificationDynamicView(input: RunDynamicViewInput!): RunUserNotificationViewResult!
  RunUserNotificationViewByID(input: RunViewByIDInput!): RunUserNotificationViewResult!
  RunUserNotificationViewByName(input: RunViewByNameInput!): RunUserNotificationViewResult!
  RunUserRecordLogDynamicView(input: RunDynamicViewInput!): RunUserRecordLogViewResult!
  RunUserRecordLogViewByID(input: RunViewByIDInput!): RunUserRecordLogViewResult!
  RunUserRecordLogViewByName(input: RunViewByNameInput!): RunUserRecordLogViewResult!
  RunUserRoleDynamicView(input: RunDynamicViewInput!): RunUserRoleViewResult!
  RunUserRoleViewByID(input: RunViewByIDInput!): RunUserRoleViewResult!
  RunUserRoleViewByName(input: RunViewByNameInput!): RunUserRoleViewResult!
  RunUserViewByID(input: RunViewByIDInput!): RunUserViewResult!
  RunUserViewByName(input: RunViewByNameInput!): RunUserViewResult!
  RunUserViewCategoryDynamicView(input: RunDynamicViewInput!): RunUserViewCategoryViewResult!
  RunUserViewCategoryViewByID(input: RunViewByIDInput!): RunUserViewCategoryViewResult!
  RunUserViewCategoryViewByName(input: RunViewByNameInput!): RunUserViewCategoryViewResult!
  RunUserViewDynamicView(input: RunDynamicViewInput!): RunUserViewViewResult!
  RunUserViewRunDetailDynamicView(input: RunDynamicViewInput!): RunUserViewRunDetailViewResult!
  RunUserViewRunDetailViewByID(input: RunViewByIDInput!): RunUserViewRunDetailViewResult!
  RunUserViewRunDetailViewByName(input: RunViewByNameInput!): RunUserViewRunDetailViewResult!
  RunUserViewRunDynamicView(input: RunDynamicViewInput!): RunUserViewRunViewResult!
  RunUserViewRunViewByID(input: RunViewByIDInput!): RunUserViewRunViewResult!
  RunUserViewRunViewByName(input: RunViewByNameInput!): RunUserViewRunViewResult!
  RunUserViewViewByID(input: RunViewByIDInput!): RunUserViewViewResult!
  RunUserViewViewByName(input: RunViewByNameInput!): RunUserViewViewResult!
  RunVectorDatabaseDynamicView(input: RunDynamicViewInput!): RunVectorDatabaseViewResult!
  RunVectorDatabaseViewByID(input: RunViewByIDInput!): RunVectorDatabaseViewResult!
  RunVectorDatabaseViewByName(input: RunViewByNameInput!): RunVectorDatabaseViewResult!
  RunVectorIndexDynamicView(input: RunDynamicViewInput!): RunVectorIndexViewResult!
  RunVectorIndexViewByID(input: RunViewByIDInput!): RunVectorIndexViewResult!
  RunVectorIndexViewByName(input: RunViewByNameInput!): RunVectorIndexViewResult!
  RunVersionInstallationDynamicView(input: RunDynamicViewInput!): RunVersionInstallationViewResult!
  RunVersionInstallationViewByID(input: RunViewByIDInput!): RunVersionInstallationViewResult!
  RunVersionInstallationViewByName(input: RunViewByNameInput!): RunVersionInstallationViewResult!
  RunViewByID(input: RunViewByIDInput!): RunViewResult!
  RunViewByName(input: RunViewByNameInput!): RunViewResult!
  RunWorkflowDynamicView(input: RunDynamicViewInput!): RunWorkflowViewResult!
  RunWorkflowEngineDynamicView(input: RunDynamicViewInput!): RunWorkflowEngineViewResult!
  RunWorkflowEngineViewByID(input: RunViewByIDInput!): RunWorkflowEngineViewResult!
  RunWorkflowEngineViewByName(input: RunViewByNameInput!): RunWorkflowEngineViewResult!
  RunWorkflowRunDynamicView(input: RunDynamicViewInput!): RunWorkflowRunViewResult!
  RunWorkflowRunViewByID(input: RunViewByIDInput!): RunWorkflowRunViewResult!
  RunWorkflowRunViewByName(input: RunViewByNameInput!): RunWorkflowRunViewResult!
  RunWorkflowViewByID(input: RunViewByIDInput!): RunWorkflowViewResult!
  RunWorkflowViewByName(input: RunViewByNameInput!): RunWorkflowViewResult!
  RunWorkspaceDynamicView(input: RunDynamicViewInput!): RunWorkspaceViewResult!
  RunWorkspaceItemDynamicView(input: RunDynamicViewInput!): RunWorkspaceItemViewResult!
  RunWorkspaceItemViewByID(input: RunViewByIDInput!): RunWorkspaceItemViewResult!
  RunWorkspaceItemViewByName(input: RunViewByNameInput!): RunWorkspaceItemViewResult!
  RunWorkspaceViewByID(input: RunViewByIDInput!): RunWorkspaceViewResult!
  RunWorkspaceViewByName(input: RunViewByNameInput!): RunWorkspaceViewResult!
  SchemaInfo(ID: Int!): SchemaInfo_
  Skill(ID: Int!): Skill_
  Tag(ID: Int!): Tag_
  TaggedItem(ID: Int!): TaggedItem_
  UpdateWhereClause(ID: Int!): [UserView_!]!
  User(ID: Int!): User_
  UserApplication(ID: Int!): UserApplication_
  UserApplicationEntity(ID: Int!): UserApplicationEntity_
  UserByEmail(Email: String!): User_!
  UserByEmployeeID(EmployeeID: Int!): User_!
  UserByID(ID: Int!): User_!
  UserFavorite(ID: Int!): UserFavorite_
  UserFavoriteSearchByParams(params: Int!): [UserFavorite_!]!
  UserFavoritesByUserID(UserID: Int!): [UserFavorite_!]!
  UserNotification(ID: Int!): UserNotification_
  UserRecordLog(ID: Int!): UserRecordLog_
  UserRole(ID: Int!): UserRole_
  UserView(ID: Int!): UserView_
  UserViewCategory(ID: Int!): UserViewCategory_
  UserViewRun(ID: Int!): UserViewRun_
  UserViewRunDetail(ID: Int!): UserViewRunDetail_
  UserViewsByUserID(UserID: Int!): [UserView_!]!
  VectorDatabase(ID: Int!): VectorDatabase_
  VectorIndex(ID: Int!): VectorIndex_
  VersionInstallation(ID: Int!): VersionInstallation_
  Workflow(ID: Int!): Workflow_
  WorkflowEngine(ID: Int!): WorkflowEngine_
  WorkflowRun(ID: Int!): WorkflowRun_
  Workspace(ID: Int!): Workspace_
  WorkspaceItem(ID: Int!): WorkspaceItem_
  colors: [Color!]!
}

type QueryCategory_ {
  CreatedAt: Timestamp!
  Description: String
  ID: Int!
  Name: String!
  Parent: String
  ParentID: Int
  QueriesArray: [Query_!]!
  QueryCategoriesArray: [QueryCategory_!]!
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

type QueryField_ {
  ComputationDescription: String
  CreatedAt: Timestamp!
  Description: String
  ID: Int!
  IsComputed: Boolean!
  IsSummary: Boolean!
  Name: String!
  Query: String!
  QueryID: Int!

  """
  The base type, not including parameters, in SQL. For example this field would be nvarchar or decimal, and wouldn't include type parameters. The SQLFullType field provides that information.
  """
  SQLBaseType: String!

  """
  The full SQL type for the field, for example datetime or nvarchar(10) etc.
  """
  SQLFullType: String!
  Sequence: Int!
  SourceEntity: String
  SourceEntityID: Int
  SourceFieldName: String
  SummaryDescription: String
  UpdatedAt: Timestamp!
}

type QueryPermission_ {
  CreatedAt: Timestamp!
  ID: Int!
  QueryID: Int!
  RoleName: String!
  UpdatedAt: Timestamp!
}

"""
Catalog of stored queries. This is useful for any arbitrary query that is known to be performant and correct and can be reused. Queries can be viewed/run by a user, used programatically via RunQuery, and also used by AI systems for improved reliability instead of dynamically generated SQL. Queries can also improve security since they store the SQL instead of using dynamic SQL.
"""
type Query_ {
  Category: String
  CategoryID: Int
  CreatedAt: Timestamp!
  DataContextItemsArray: [DataContextItem_!]!
  Description: String
  Feedback: String
  ID: Int!
  Name: String!
  OriginalSQL: String
  QualityRank: Int
  QueryFieldsArray: [QueryField_!]!
  QueryPermissionsArray: [QueryPermission_!]!
  SQL: String
  Status: String!
  UpdatedAt: Timestamp!
}

type QueueTask_ {
  Comments: String
  Data: String
  EndedAt: Timestamp
  ErrorMessage: String
  ID: Int!
  Options: String
  Output: String
  Queue: String!
  QueueID: Int!
  StartedAt: Timestamp
  Status: String!
}

type QueueType_ {
  Description: String
  DriverClass: String!
  DriverImportPath: String
  ID: Int!
  IsActive: Boolean!
  Name: String!
  QueuesArray: [Queue_!]!
}

"""Queues can be used to async execute long running tasks"""
type Queue_ {
  CreatedAt: Timestamp!
  Description: String
  ID: Int!
  IsActive: Boolean!
  LastHeartbeat: Timestamp!
  Name: String!
  ProcessCwd: String
  ProcessHostName: String
  ProcessIPAddress: String
  ProcessMacAddress: String
  ProcessOSName: String
  ProcessOSVersion: String
  ProcessPID: Int
  ProcessPlatform: String
  ProcessUserID: String
  ProcessUserName: String
  ProcessVersion: String
  QueueTasksArray: [QueueTask_!]!
  QueueType: String!
  QueueTypeID: Int!
  UpdatedAt: Timestamp!
}

"""
For entities that have TrackRecordChanges=1, Record Changes will store the history of all changes made within the system. For integrations you can directly add values here if you have inbound signals indicating records were changed in a source system. This entity only automatically captures Record Changes if they were made within the system.
"""
type RecordChange_ {
  ChangedAt: Timestamp!
  ChangesDescription: String!
  ChangesJSON: String!
  Comments: String
  Entity: String!
  EntityID: Int!
  FullRecordJSON: String!
  ID: Int!
  RecordID: String!
  Status: String!
  User: String!
  UserID: Int!
}

type RecordDependencyResult {
  EntityName: String!
  FieldName: String!
  PrimaryKeyValue: String!
  RelatedEntityName: String!
}

type RecordMergeDeletionLog_ {
  CreatedAt: Timestamp!
  DeletedRecordID: String!
  ID: Int!
  ProcessingLog: String
  RecordMergeLogID: Int!
  Status: String!
  UpdatedAt: Timestamp!
}

type RecordMergeDetailResult {
  Message: String
  PrimaryKeyValues: [PrimaryKeyValueOutputType!]!
  RecordMergeDeletionLogID: Int
  Success: Boolean!
}

type RecordMergeLog_ {
  ApprovalStatus: String!
  ApprovedByUserID: Int
  Comments: String
  CreatedAt: Timestamp!
  DuplicateRunDetailMatchesArray: [DuplicateRunDetailMatch_!]!
  Entity: String!
  EntityID: Int!
  ID: Int!
  InitiatedByUser: String!
  InitiatedByUserID: Int!
  ProcessingEndedAt: Timestamp
  ProcessingLog: String
  ProcessingStartedAt: Timestamp!
  ProcessingStatus: String!
  RecordMergeDeletionLogsArray: [RecordMergeDeletionLog_!]!
  SurvivingRecordID: String!
  UpdatedAt: Timestamp
}

input RecordMergeRequest {
  EntityName: String!
  FieldMap: [FieldMapping!]
  RecordsToMerge: [[PrimaryKeyValueInputType!]!]!
  SurvivingRecordPrimaryKeyValues: [PrimaryKeyValueInputType!]!
}

type RecordMergeRequestOutput {
  EntityName: String!
  FieldMap: [FieldMappingOutput!]
  RecordsToMerge: [Int!]!
  SurvivingRecordID: Int!
}

type RecordMergeResult {
  OverallStatus: String
  RecordMergeLogID: Int
  RecordStatus: [RecordMergeDetailResult!]!
  Request: RecordMergeRequestOutput!
  Success: Boolean!
}

type ReportCategory_ {
  CreatedAt: Timestamp!
  Description: String
  ID: Int!
  Name: String!
  Parent: String
  ParentID: Int
  ReportCategoriesArray: [ReportCategory_!]!
  ReportsArray: [Report_!]!
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

type ReportSnapshot_ {
  CreatedAt: Timestamp!
  ID: Int!
  Report: String!
  ReportID: Int!
  ResultSet: String!
  User: String
  UserID: Int
}

type Report_ {
  Category: String
  CategoryID: Int
  Configuration: String
  Conversation: String
  ConversationDetailID: Int
  ConversationID: Int
  CreatedAt: Timestamp!
  DataContext: String
  DataContextID: Int
  Description: String
  ID: Int!
  Name: String!
  OutputDeliveryType: String
  OutputDeliveryTypeID: Int
  OutputEvent: String
  OutputEventID: Int
  OutputFormatType: String
  OutputFormatTypeID: Int
  OutputFrequency: String
  OutputTargetEmail: String
  OutputTriggerType: String
  OutputTriggerTypeID: Int
  OutputWorkflow: String
  OutputWorkflowID: Int
  ReportSnapshotsArray: [ReportSnapshot_!]!
  SharingScope: String!
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

type ResourceType_ {
  CreatedAt: Timestamp!
  Description: String
  DisplayName: String!
  Entity: String
  EntityID: Int
  ID: Int!
  Icon: String
  Name: String!
  UpdatedAt: Timestamp!
  WorkspaceItemsArray: [WorkspaceItem_!]!
}

"""
Roles are used for security administration and can have zero to many Users as members
"""
type Role_ {
  AuthorizationRolesArray: [AuthorizationRole_!]!
  CreatedAt: Timestamp!

  """Description of the role"""
  Description: String

  """
  The unique ID of the role in the directory being used for authentication, for example an ID in Azure.
  """
  DirectoryID: String
  EmployeeRolesArray: [EmployeeRole_!]!
  EntityPermissionsArray: [EntityPermission_!]!
  ID: Int!
  Name: String!
  QueryPermissionsArray: [QueryPermission_!]!

  """
  The name of the role in the database, this is used for auto-generating permission statements by CodeGen
  """
  SQLName: String
  UpdatedAt: Timestamp!
  UserRolesArray: [UserRole_!]!
}

type RowLevelSecurityFilter_ {
  CreatedAt: Timestamp!
  Description: String
  EntityPermissionsArray: [EntityPermission_!]!
  FilterText: String
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
}

type RunAIActionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AIAction_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunAIModelActionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AIModelAction_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunAIModelTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AIModelType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunAIModelViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AIModel_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunAccountViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Account_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunActivityAttachmentViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ActivityAttachment_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunActivityViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Activity_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunApplicationEntityViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ApplicationEntity_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunApplicationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Application_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunAuditLogTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AuditLogType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunAuditLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AuditLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunAuthorizationRoleViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [AuthorizationRole_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunAuthorizationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Authorization_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunCompanyIntegrationRecordMapViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegrationRecordMap_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunCompanyIntegrationRunAPILogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegrationRunAPILog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunCompanyIntegrationRunDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegrationRunDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunCompanyIntegrationRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegrationRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunCompanyIntegrationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [CompanyIntegration_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunCompanyViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Company_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunContactLevelViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ContactLevel_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunContactRoleViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ContactRole_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunContactViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Contact_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunConversationDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ConversationDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunConversationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Conversation_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDashboardCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DashboardCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDashboardViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Dashboard_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDataContextItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DataContextItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDataContextViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DataContext_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDatasetItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DatasetItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDatasetViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Dataset_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDealForecastCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DealForecastCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDealStageViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DealStage_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDealTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DealType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDealViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Deal_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDuplicateRunDetailMatchViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DuplicateRunDetailMatch_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDuplicateRunDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DuplicateRunDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunDuplicateRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [DuplicateRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

input RunDynamicViewInput {
  """
  if provided and either ForceAuditLog is set, or the entity's property settings for logging view runs are set to true, this will be used as the Audit Log Description.
  """
  AuditLogDescription: String
  EntityName: String!

  """
  Pass in a UserViewRun ID value to exclude all records from that run from results
  """
  ExcludeUserViewRunID: Int

  """
  Optional, pass in a valid condition to use as the view WHERE clause. For example, UpdatedAt >= Some Date - if not provided, no filter is applied
  """
  ExtraFilter: String

  """
  Optional, array of entity field names, if not provided, all columns are returned. If provided, only the fields in the array are returned.
  """
  Fields: [String!]

  """
  If set to true, an Audit Log record will be created for the view run, regardless of the property settings in the entity for auditing view runs
  """
  ForceAuditLog: Boolean

  """
  if set to true, if there IS any UserViewMaxRows property set for the entity in question, it will be IGNORED. This is useful in scenarios where you want to programmatically run a view and get ALL the data back, regardless of the MaxRows setting on the entity.
  """
  IgnoreMaxRows: Boolean

  """
  if a value > 0 is provided, and IgnoreMaxRows is set to false, this value is used for the max rows to be returned by the view.
  """
  MaxRows: Int

  """
  Optional, pass in a valid order by clause sort the results on the server. For example, CreatedAt DESC to order by row creation date in reverse order. Any Valid SQL Order By clause is okay - if not provided, no server-side sorting is applied
  """
  OrderBy: String

  """
  Pass in a valid condition to append to the view WHERE clause to override the Exclude List. For example, UpdatedAt >= Some Date
  """
  OverrideExcludeFilter: String
  UserSearchString: String
}

type RunEmployeeCompanyIntegrationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EmployeeCompanyIntegration_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEmployeeRoleViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EmployeeRole_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEmployeeSkillViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EmployeeSkill_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEmployeeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Employee_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityAIActionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityAIAction_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityDocumentRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityDocumentRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityDocumentSettingViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityDocumentSetting_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityDocumentTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityDocumentType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityDocumentViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityDocument_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityFieldValueViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityFieldValue_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityFieldViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityField_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityPermissionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityPermission_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityRecordDocumentViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityRecordDocument_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityRelationshipViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntityRelationship_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntitySettingViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [EntitySetting_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunEntityViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Entity_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunErrorLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ErrorLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunFileCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [FileCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunFileEntityRecordLinkViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [FileEntityRecordLink_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunFileStorageProviderViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [FileStorageProvider_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunFileViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [File_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunIndustryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Industry_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunIntegrationURLFormatViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [IntegrationURLFormat_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunIntegrationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Integration_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunInvoiceStatusTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [InvoiceStatusType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunInvoiceViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Invoice_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunListDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ListDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunListViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [List_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunOutputDeliveryTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [OutputDeliveryType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunOutputFormatTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [OutputFormatType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunOutputTriggerTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [OutputTriggerType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunPaymentTermsTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [PaymentTermsType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunQueryCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueryCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunQueryFieldViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueryField_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunQueryPermissionViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueryPermission_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunQueryResultType {
  ErrorMessage: String!
  ExecutionTime: Float!
  QueryID: Float!
  Results: String!
  RowCount: Float!
  Success: Boolean!
}

type RunQueryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Query_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunQueueTaskViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueueTask_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunQueueTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [QueueType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunQueueViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Queue_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunRecordChangeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecordChange_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunRecordMergeDeletionLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecordMergeDeletionLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunRecordMergeLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RecordMergeLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunReportCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ReportCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunReportResultType {
  ErrorMessage: String!
  ExecutionTime: Float!
  ReportID: Float!
  Results: String!
  RowCount: Float!
  Success: Boolean!
}

type RunReportSnapshotViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ReportSnapshot_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunReportViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Report_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunResourceTypeViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [ResourceType_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunRoleViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Role_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunRowLevelSecurityFilterViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RowLevelSecurityFilter_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunSchemaInfoViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [SchemaInfo_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunSkillViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Skill_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunTagViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Tag_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunTaggedItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [TaggedItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserApplicationEntityViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserApplicationEntity_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserApplicationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserApplication_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserFavoriteViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserFavorite_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserNotificationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserNotification_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserRecordLogViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserRecordLog_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserRoleViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserRole_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserViewCategoryViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserViewCategory_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [User_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserViewRunDetailViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserViewRunDetail_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserViewRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserViewRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunUserViewViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [UserView_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunVectorDatabaseViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [VectorDatabase_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunVectorIndexViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [VectorIndex_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunVersionInstallationViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [VersionInstallation_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

input RunViewByIDInput {
  """
  if provided and either ForceAuditLog is set, or the entity's property settings for logging view runs are set to true, this will be used as the Audit Log Description.
  """
  AuditLogDescription: String

  """
  if set to true, the resulting data will filter out ANY records that were ever returned by this view, when the SaveViewResults property was set to true. This is useful if you want to run a particular view over time and make sure the results returned each time are new to the view.
  """
  ExcludeDataFromAllPriorViewRuns: Boolean

  """
  Pass in a UserViewRun ID value to exclude all records from that run from results
  """
  ExcludeUserViewRunID: Int

  """
  Optional, pass in a valid condition to append to the view WHERE clause. For example, UpdatedAt >= Some Date - if not provided, no filter is applied
  """
  ExtraFilter: String

  """
  Optional, array of entity field names, if not provided, ID and all other columns used in the view columns are returned. If provided, only the fields in the array are returned.
  """
  Fields: [String!]

  """
  If set to true, an Audit Log record will be created for the view run, regardless of the property settings in the entity for auditing view runs
  """
  ForceAuditLog: Boolean

  """
  if set to true, if there IS any UserViewMaxRows property set for the entity in question, it will be IGNORED. This is useful in scenarios where you want to programmatically run a view and get ALL the data back, regardless of the MaxRows setting on the entity.
  """
  IgnoreMaxRows: Boolean

  """
  if a value > 0 is provided, and IgnoreMaxRows is set to false, this value is used for the max rows to be returned by the view.
  """
  MaxRows: Int

  """
  Optional, pass in a valid order by clause sort the results on the server. For example, CreatedAt DESC to order by row creation date in reverse order. Any Valid SQL Order By clause is okay - if not provided, no server-side sorting is applied
  """
  OrderBy: String

  """
  Pass in a valid condition to append to the view WHERE clause to override the Exclude List. For example, UpdatedAt >= Some Date
  """
  OverrideExcludeFilter: String

  """
  If set to True, the results of this view are saved into a new UserViewRun record and the UserViewRun.ID is passed back in the results.
  """
  SaveViewResults: Boolean
  UserSearchString: String
  ViewID: Int!
}

input RunViewByNameInput {
  """
  if provided and either ForceAuditLog is set, or the entity's property settings for logging view runs are set to true, this will be used as the Audit Log Description.
  """
  AuditLogDescription: String

  """
  if set to true, the resulting data will filter out ANY records that were ever returned by this view, when the SaveViewResults property was set to true. This is useful if you want to run a particular view over time and make sure the results returned each time are new to the view.
  """
  ExcludeDataFromAllPriorViewRuns: Boolean

  """
  Pass in a UserViewRun ID value to exclude all records from that run from results
  """
  ExcludeUserViewRunID: Int

  """
  Optional, pass in a valid condition to append to the view WHERE clause. For example, UpdatedAt >= Some Date - if not provided, no filter is applied
  """
  ExtraFilter: String

  """
  Optional, array of entity field names, if not provided, ID and all other columns used in the view are returned. If provided, only the fields in the array are returned.
  """
  Fields: [String!]

  """
  If set to true, an Audit Log record will be created for the view run, regardless of the property settings in the entity for auditing view runs
  """
  ForceAuditLog: Boolean

  """
  if set to true, if there IS any UserViewMaxRows property set for the entity in question, it will be IGNORED. This is useful in scenarios where you want to programmatically run a view and get ALL the data back, regardless of the MaxRows setting on the entity.
  """
  IgnoreMaxRows: Boolean

  """
  if a value > 0 is provided, and IgnoreMaxRows is set to false, this value is used for the max rows to be returned by the view.
  """
  MaxRows: Int

  """
  Optional, pass in a valid order by clause sort the results on the server. For example, CreatedAt DESC to order by row creation date in reverse order. Any Valid SQL Order By clause is okay - if not provided, no server-side sorting is applied
  """
  OrderBy: String

  """
  Pass in a valid condition to append to the view WHERE clause to override the Exclude List. For example, UpdatedAt >= Some Date
  """
  OverrideExcludeFilter: String

  """
  If set to True, the results of this view are saved into a new UserViewRun record and the UserViewRun.ID is passed back in the results.
  """
  SaveViewResults: Boolean
  UserSearchString: String
  ViewName: String!
}

type RunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [RunViewResultRow!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunViewResultRow {
  Data: String!
  EntityID: Int!
  ID: Int!
}

type RunWorkflowEngineViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [WorkflowEngine_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunWorkflowRunViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [WorkflowRun_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunWorkflowViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Workflow_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunWorkspaceItemViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [WorkspaceItem_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

type RunWorkspaceViewResult {
  ErrorMessage: String
  ExecutionTime: Int
  Results: [Workspace_!]!
  RowCount: Int
  Success: Boolean!
  TotalRowCount: Int
  UserViewRunID: Int
}

"""
Tracks the schemas in the system and the ID ranges that are valid for entities within each schema.
"""
type SchemaInfo_ {
  Comments: String
  CreatedAt: Timestamp!
  EntityIDMax: Int!
  EntityIDMin: Int!
  ID: Int!
  SchemaName: String!
  UpdatedAt: Timestamp!
}

"""
A hierarchical list of possible skills that are linked to Employees and can also be linked to any other entity
"""
type Skill_ {
  CreatedAt: Timestamp!
  EmployeeSkillsArray: [EmployeeSkill_!]!
  ID: Int!
  Name: String!
  Parent: String
  ParentID: Int
  SkillsArray: [Skill_!]!
  UpdatedAt: Timestamp!
}

"""
The phase of the respons: clarifying_question, data_request, or analysis_complete
"""
enum SkipResponsePhase {
  AnalysisComplete
  ClarifyingQuestion
  DataRequest
}

type Subscription {
  colorSubscription: ColorNotification!
  statusUpdates(sessionId: String!): PushStatusNotification!
}

"""
Tags are used to arbitrarily associate any record in any entity with addtional information.
"""
type Tag_ {
  Description: String
  DisplayName: String!
  ID: Int!
  Name: String!
  Parent: String
  ParentID: Int
  TaggedItemsArray: [TaggedItem_!]!
  TagsArray: [Tag_!]!
}

"""Tracks the links between any record in any entity with Tags"""
type TaggedItem_ {
  Entity: String!
  EntityID: Int!
  ID: Int!
  RecordID: String!
  Tag: String!
  TagID: Int!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateAIActionInput {
  DefaultModelID: Int
  DefaultPrompt: String
  Description: String
  ID: Int!
  IsActive: Boolean!
  Name: String!
}

input UpdateAIModelActionInput {
  AIActionID: Int!
  AIModelID: Int!
  ID: Int!
  IsActive: Boolean!
}

input UpdateAIModelInput {
  AIModelTypeID: Int!
  APIName: String
  Description: String
  DriverClass: String
  DriverImportPath: String
  ID: Int!
  IsActive: Boolean!
  Name: String!
  PowerRank: Int
  Vendor: String
}

input UpdateAIModelTypeInput {
  Description: String
  ID: Int!
  Name: String!
}

input UpdateAccountInput {
  Acronym: String
  ActivityCount: Int!
  AddressLine1: String
  AddressLine2: String
  AddressLine3: String
  City: String
  Country: String
  Description: String
  DisplayName: String
  Domain: String
  EarliestActivityDate: Timestamp
  EmailPattern: String
  Facebook: String
  ID: Int!
  ISOCountryCode: String
  IndustryID: Int
  LastEnrichedAt: Timestamp
  LastReviewedDate: Timestamp
  LatestActivityDate: Timestamp
  LeadershipPageURL: String
  LinkedIn: String
  Logo: String
  LogoURL: String
  Name: String!
  OperatingName: String
  PhoneNumber: String
  PostalCode: String
  RecordSource: String
  StateProvince: String
  TaxID: String
  Website: String
}

input UpdateActivityAttachmentInput {
  Attachments: String
  ID: Int!
}

input UpdateActivityInput {
  AccountID: Int
  ActivityDate: Timestamp
  Attachment: String
  AttachmentID: Int
  CompanyIntegrationID: Int!
  ContactID: Int
  DealID: Int
  Description: String
  EmployeeID: Int
  ExternalSystemRecordID: String
  ID: Int!
  IsActive: Boolean
  IsBounced: Boolean
  IsOpened: Boolean
  IsReplied: Boolean
  Summary: String
  Title: String
  Type: String
}

input UpdateApplicationEntityInput {
  ApplicationName: String
  DefaultForNewUser: Boolean!
  EntityID: Int!
  ID: Int!
  Sequence: Int!
}

input UpdateApplicationInput {
  Description: String
  ID: Int!
  Name: String!
}

input UpdateAuditLogInput {
  AuditLogTypeName: String
  AuthorizationName: String
  Description: String
  Details: String
  EntityID: Int
  ID: Int!
  RecordID: String
  Status: String!
  UserID: Int!
}

input UpdateCompanyInput {
  Description: String!
  Domain: String
  ID: Int!
  LogoURL: String
  Name: String!
  Website: String
}

input UpdateCompanyIntegrationInput {
  APIKey: String
  AccessToken: String
  ClientID: String
  ClientSecret: String
  CompanyName: String!
  CustomAttribute1: String
  ExternalSystemID: String
  ID: Int!
  IntegrationName: String!
  IsActive: Boolean
  IsExternalSystemReadOnly: Boolean!
  RefreshToken: String
  TokenExpirationDate: Timestamp
}

input UpdateCompanyIntegrationRecordMapInput {
  CompanyIntegrationID: Int!
  EntityID: Int!
  EntityRecordID: String!
  ExternalSystemRecordID: String!
  ID: Int!
}

input UpdateCompanyIntegrationRunAPILogInput {
  CompanyIntegrationRunID: Int!
  ExecutedAt: Timestamp!
  ID: Int!
  IsSuccess: Boolean!
  Parameters: String
  RequestMethod: String
  URL: String
}

input UpdateCompanyIntegrationRunDetailInput {
  Action: String!
  CompanyIntegrationRunID: Int!
  EntityID: Int!
  ExecutedAt: Timestamp!
  ID: Int!
  IsSuccess: Boolean!
  RecordID: String!
}

input UpdateCompanyIntegrationRunInput {
  Comments: String
  CompanyIntegrationID: Int!
  EndedAt: Timestamp
  ID: Int!
  RunByUserID: Int!
  StartedAt: Timestamp
  TotalRecords: Int!
}

input UpdateContactInput {
  AccountID: Int
  ActivityCount: Int!
  EarliestActivityDate: Timestamp
  Email1: String
  Email2: String
  EmailSource: String
  EmailStatus: String
  Facebook: String
  FirstName: String!
  ID: Int!
  Instagram: String
  LastEnrichedAt: Timestamp
  LastName: String!
  LastReviewedDate: Timestamp
  LatestActivityDate: Timestamp
  LevelID: Int
  LinkedIn: String
  NickName: String
  PhoneNumber: String
  Prefix: String
  ProfilePictureURL: String
  RecordSource: String
  RoleID: Int
  Status: String
  Suffix: String
  Tags: String
  Title: String
  Twitter: String
}

input UpdateContactLevelInput {
  Description: String
  ExcludeKeywords: String
  ID: Int!
  Keywords: String
  Name: String!
  Rank: Int!
}

input UpdateContactRoleInput {
  Description: String
  ID: Int!
  Keywords: String
  Name: String!
}

input UpdateConversationDetailInput {
  ConversationID: Int!
  Error: String
  ExternalID: String
  HiddenToUser: Boolean!
  ID: Int!
  Message: String!
  Role: String!
}

input UpdateConversationInput {
  DataContextID: Int
  Description: String
  ExternalID: String
  ID: Int!
  IsArchived: Boolean!
  LinkedEntityID: Int
  LinkedRecordID: String
  Name: String
  Type: String!
  UserID: Int!
}

input UpdateDashboardCategoryInput {
  Description: String
  ID: Int!
  Name: String!
  ParentID: Int
  UserID: Int!
}

input UpdateDashboardInput {
  CategoryID: Int
  Description: String
  ID: Int!
  Name: String!
  UIConfigDetails: String!
  UserID: Int
}

input UpdateDataContextInput {
  Description: String
  ID: Int!
  LastRefreshedAt: Timestamp
  Name: String!
  UserID: Int!
}

input UpdateDataContextItemInput {
  DataContextID: Int!
  DataJSON: String
  EntityID: Int
  ID: Int!
  LastRefreshedAt: Timestamp
  QueryID: Int
  RecordID: String
  SQL: String
  Type: String!
  ViewID: Int
}

input UpdateDealForecastCategoryInput {
  Description: String!
  DisplayName: String
  ID: Int!
  Name: String
}

input UpdateDealInput {
  AccountID: Int
  CloseDate: Timestamp
  CompanyIntegrationID: Int!
  ContactID: Int
  ContractTermMonths: Int!
  DealForecastCategoryID: Int
  DealStageID: Int
  DealTypeID: Int
  Description: String
  EmployeeID: Int
  ExternalSystemCreatedAt: Timestamp
  ExternalSystemRecordID: String!
  ExternalSystemUpdatedAt: Timestamp
  ForecastNotes: String
  ID: Int!
  IncludeInForecast: Boolean
  IsDeleted: Boolean!
  LeadSource: String
  LeadSourceDetail: String
  MRR: Float!
  OneTimeFees: Float!
  Pipeline: String
  Probability: Float
  Title: String
  Value: Float
}

input UpdateDealStageInput {
  Description: String!
  ID: Int!
  Name: String!
}

input UpdateDealTypeInput {
  Description: String!
  DisplayName: String
  ID: Int!
  Name: String
}

input UpdateDuplicateRunDetailInput {
  DuplicateRunID: Int!
  ID: Int!
  MatchErrorMessage: String
  MatchStatus: String!
  MergeErrorMessage: String
  MergeStatus: String!
  RecordID: String!
  SkippedReason: String
}

input UpdateDuplicateRunDetailMatchInput {
  Action: String!
  ApprovalStatus: String!
  DuplicateRunDetailID: Int!
  ID: Int!
  MatchProbability: Float!
  MatchRecordID: String!
  MatchSource: String!
  MatchedAt: Timestamp!
  MergeStatus: String!
  MergedAt: Timestamp!
  RecordMergeLogID: Int
}

input UpdateDuplicateRunInput {
  ApprovalComments: String
  ApprovalStatus: String!
  ApprovedByUserID: Int
  EndedAt: Timestamp
  EntityID: Int!
  ID: Int!
  ProcessingErrorMessage: String
  ProcessingStatus: String!
  SourceListID: Int!
  StartedAt: Timestamp!
  StartedByUserID: Int!
}

input UpdateEmployeeCompanyIntegrationInput {
  CompanyIntegrationID: Int!
  EmployeeID: Int!
  ExternalSystemRecordID: String!
  ID: Int!
  IsActive: Boolean!
}

input UpdateEmployeeInput {
  Active: Boolean!
  CompanyID: Int!
  Email: String!
  FirstName: String!
  ID: Int!
  LastName: String!
  Phone: String
  SupervisorID: Int
  Title: String
}

input UpdateEmployeeRoleInput {
  EmployeeID: Int!
  ID: Int!
  RoleID: Int!
}

input UpdateEmployeeSkillInput {
  EmployeeID: Int!
  ID: Int!
  SkillID: Int!
}

input UpdateEntityAIActionInput {
  AIActionID: Int!
  AIModelID: Int
  Comments: String
  EntityID: Int!
  ID: Int!
  Name: String!
  OutputEntityID: Int
  OutputField: String
  OutputType: String!
  Prompt: String
  SkipIfOutputFieldNotEmpty: Boolean!
  TriggerEvent: String!
  UserMessage: String!
}

input UpdateEntityDocumentInput {
  AIModelID: Int!
  AbsoluteMatchThreshold: Float!
  EntityID: Int!
  ID: Int!
  Name: String!
  PotentialMatchThreshold: Float!
  Status: String!
  Template: String
  TypeID: Int!
  VectorDatabaseID: Int!
}

input UpdateEntityDocumentRunInput {
  EndedAt: Timestamp
  EntityDocumentID: Int!
  ID: Int!
  StartedAt: Timestamp
  Status: String!
}

input UpdateEntityDocumentSettingInput {
  Comments: String
  EntityDocumentID: Int!
  ID: Int!
  Name: String!
  Value: String!
}

input UpdateEntityDocumentTypeInput {
  Description: String
  ID: Int!
  Name: String!
}

input UpdateEntityFieldInput {
  AllowUpdateAPI: Boolean!
  AllowUpdateInView: Boolean!
  AutoUpdateDescription: Boolean!
  Category: String
  DefaultColumnWidth: Int
  DefaultInView: Boolean!
  Description: String
  DisplayName: String
  ExtendedType: String
  FullTextSearchEnabled: Boolean!
  GeneratedFormSection: String!
  ID: Int!
  IncludeInGeneratedForm: Boolean!
  IncludeInUserSearchAPI: Boolean!
  IncludeRelatedEntityNameFieldInBaseView: Boolean!
  IsNameField: Boolean!
  IsPrimaryKey: Boolean!
  IsUnique: Boolean!
  RelatedEntityFieldName: String
  RelatedEntityID: Int
  RelatedEntityNameFieldMap: String
  UserSearchParamFormatAPI: String
  ValueListType: String!
  ViewCellTemplate: String
}

input UpdateEntityInput {
  AllowAllRowsAPI: Boolean!
  AllowCreateAPI: Boolean!
  AllowDeleteAPI: Boolean!
  AllowUpdateAPI: Boolean!
  AllowUserSearchAPI: Boolean!
  AuditRecordAccess: Boolean!
  AuditViewRuns: Boolean!
  AutoUpdateDescription: Boolean!
  BaseView: String!
  BaseViewGenerated: Boolean!
  CascadeDeletes: Boolean!
  CustomResolverAPI: Boolean!
  Description: String
  EntityObjectSubclassImport: String
  EntityObjectSubclassName: String
  FullTextCatalog: String
  FullTextCatalogGenerated: Boolean!
  FullTextIndex: String
  FullTextIndexGenerated: Boolean!
  FullTextSearchEnabled: Boolean!
  FullTextSearchFunction: String
  FullTextSearchFunctionGenerated: Boolean!
  ID: Int!
  IncludeInAPI: Boolean!
  Name: String!
  NameSuffix: String
  ParentID: Int
  TrackRecordChanges: Boolean!
  UserFormGenerated: Boolean!
  UserViewMaxRows: Int
  VirtualEntity: Boolean!
  spCreate: String
  spCreateGenerated: Boolean!
  spDelete: String
  spDeleteGenerated: Boolean!
  spMatch: String
  spUpdate: String
  spUpdateGenerated: Boolean!
}

input UpdateEntityPermissionInput {
  CanCreate: Boolean!
  CanDelete: Boolean!
  CanRead: Boolean!
  CanUpdate: Boolean!
  CreateRLSFilterID: Int
  DeleteRLSFilterID: Int
  EntityID: Int!
  ID: Int!
  ReadRLSFilterID: Int
  RoleName: String
  UpdateRLSFilterID: Int
}

input UpdateEntityRecordDocumentInput {
  DocumentText: String
  EntityDocumentID: Int!
  EntityID: Int!
  EntityRecordUpdatedAt: Timestamp!
  ID: Int!
  RecordID: String!
  VectorID: String
  VectorIndexID: Int!
  VectorJSON: String
}

input UpdateEntityRelationshipInput {
  BundleInAPI: Boolean!
  DisplayInForm: Boolean!
  DisplayName: String
  EntityID: Int!
  EntityKeyField: String
  ID: Int!
  IncludeInParentAllQuery: Boolean!
  JoinEntityInverseJoinField: String
  JoinEntityJoinField: String
  JoinView: String
  RelatedEntityID: Int!
  RelatedEntityJoinField: String!
  Sequence: Int!
  Type: String!
}

input UpdateEntitySettingInput {
  Comments: String
  EntityID: Int!
  ID: Int!
  Name: String!
  Value: String!
}

input UpdateErrorLogInput {
  Category: String
  Code: String
  CompanyIntegrationRunDetailID: Int
  CompanyIntegrationRunID: Int
  CreatedBy: String
  Details: String
  ID: Int!
  Message: String
  Status: String
}

input UpdateFileCategoryInput {
  Description: String
  ID: Int!
  Name: String!
  ParentID: Int
}

input UpdateFileEntityRecordLinkInput {
  EntityID: Int!
  FileID: Int!
  ID: Int!
  RecordID: String!
}

input UpdateFileInput {
  CategoryID: Int
  ContentType: String
  Description: String
  ID: Int!
  Name: String!
  ProviderID: Int!
  ProviderKey: String
  Status: String!
}

input UpdateFileStorageProviderInput {
  ClientDriverKey: String!
  Description: String
  ID: Int!
  IsActive: Boolean!
  Name: String!
  Priority: Int!
  ServerDriverKey: String!
}

input UpdateIndustryInput {
  Description: String!
  ID: Int!
  Keywords: String
  Name: String!
}

input UpdateIntegrationInput {
  BatchMaxRequestCount: Int!
  BatchRequestWaitTime: Int!
  ClassName: String
  Description: String
  ID: Int!
  ImportPath: String
  Name: String!
  NavigationBaseURL: String
}

input UpdateIntegrationURLFormatInput {
  EntityID: Int!
  ID: Int!
  IntegrationName: String
  URLFormat: String!
}

input UpdateInvoiceInput {
  AccountID: Int!
  CompanyIntegrationID: Int!
  ContactID: Int
  DueDate: Timestamp
  ExternalSystemRecordID: String!
  ID: Int!
  InvoiceDate: Timestamp!
  InvoiceNumber: String!
  PaymentTermsID: Int
  PostingDate: Timestamp
  StatusID: Int!
  SubTotal: Float!
  Tax: Float!
  Total: Float!
}

input UpdateInvoiceStatusTypeInput {
  Description: String!
  ID: Int!
  Name: String!
}

input UpdateListDetailInput {
  ID: Int!
  ListID: Int!
  RecordID: String!
  Sequence: Int!
}

input UpdateListInput {
  CompanyIntegrationID: Int
  Description: String
  EntityID: Int
  ExternalSystemRecordID: String
  ID: Int!
  Name: String!
  UserID: Int!
}

input UpdatePaymentTermsTypeInput {
  Code: String
  CompanyIntegrationID: Int
  Description: String
  DisplayName: String
  DueDateCalculation: String
  ExternalSystemRecordID: String
  ID: Int!
  Name: String!
}

input UpdateQueryCategoryInput {
  Description: String
  ID: Int!
  Name: String!
  ParentID: Int
  UserID: Int!
}

input UpdateQueryFieldInput {
  ComputationDescription: String
  Description: String
  ID: Int!
  IsComputed: Boolean!
  IsSummary: Boolean!
  Name: String!
  QueryID: Int!
  SQLBaseType: String!
  SQLFullType: String!
  Sequence: Int!
  SourceEntityID: Int
  SourceFieldName: String
  SummaryDescription: String
}

input UpdateQueryInput {
  CategoryID: Int
  Description: String
  Feedback: String
  ID: Int!
  Name: String!
  OriginalSQL: String
  QualityRank: Int
  SQL: String
  Status: String!
}

input UpdateQueryPermissionInput {
  ID: Int!
  QueryID: Int!
  RoleName: String!
}

input UpdateQueueInput {
  Description: String
  ID: Int!
  IsActive: Boolean!
  LastHeartbeat: Timestamp!
  Name: String!
  ProcessCwd: String
  ProcessHostName: String
  ProcessIPAddress: String
  ProcessMacAddress: String
  ProcessOSName: String
  ProcessOSVersion: String
  ProcessPID: Int
  ProcessPlatform: String
  ProcessUserID: String
  ProcessUserName: String
  ProcessVersion: String
  QueueTypeID: Int!
}

input UpdateQueueTaskInput {
  Comments: String
  Data: String
  EndedAt: Timestamp
  ErrorMessage: String
  ID: Int!
  Options: String
  Output: String
  QueueID: Int!
  StartedAt: Timestamp
  Status: String!
}

input UpdateRecordMergeDeletionLogInput {
  DeletedRecordID: String!
  ID: Int!
  ProcessingLog: String
  RecordMergeLogID: Int!
  Status: String!
}

input UpdateRecordMergeLogInput {
  ApprovalStatus: String!
  ApprovedByUserID: Int
  Comments: String
  EntityID: Int!
  ID: Int!
  InitiatedByUserID: Int!
  ProcessingEndedAt: Timestamp
  ProcessingLog: String
  ProcessingStartedAt: Timestamp!
  ProcessingStatus: String!
  SurvivingRecordID: String!
}

input UpdateReportCategoryInput {
  Description: String
  ID: Int!
  Name: String!
  ParentID: Int
  UserID: Int!
}

input UpdateReportInput {
  CategoryID: Int
  Configuration: String
  ConversationDetailID: Int
  ConversationID: Int
  DataContextID: Int
  Description: String
  ID: Int!
  Name: String!
  OutputDeliveryTypeID: Int
  OutputEventID: Int
  OutputFormatTypeID: Int
  OutputFrequency: String
  OutputTargetEmail: String
  OutputTriggerTypeID: Int
  OutputWorkflowID: Int
  SharingScope: String!
  UserID: Int!
}

input UpdateReportSnapshotInput {
  ID: Int!
  ReportID: Int!
  ResultSet: String!
  UserID: Int
}

input UpdateRoleInput {
  Description: String
  DirectoryID: String
  ID: Int!
  Name: String!
  SQLName: String
}

input UpdateSchemaInfoInput {
  Comments: String
  EntityIDMax: Int!
  EntityIDMin: Int!
  ID: Int!
  SchemaName: String!
}

input UpdateUserApplicationEntityInput {
  EntityID: Int!
  ID: Int!
  Sequence: Int!
  UserApplicationID: Int!
}

input UpdateUserApplicationInput {
  ApplicationID: Int!
  ID: Int!
  IsActive: Boolean!
  Sequence: Int!
  UserID: Int!
}

input UpdateUserFavoriteInput {
  EntityID: Int!
  ID: Int!
  RecordID: String!
  UserID: Int!
}

input UpdateUserInput {
  Email: String!
  EmployeeID: Int
  FirstName: String
  ID: Int!
  IsActive: Boolean!
  LastName: String
  LinkedEntityID: Int
  LinkedEntityRecordID: Int
  LinkedRecordType: String!
  Name: String!
  Title: String
  Type: String!
}

input UpdateUserNotificationInput {
  ID: Int!
  Message: String
  ReadAt: Timestamp
  ResourceConfiguration: String
  ResourceRecordID: Int
  ResourceTypeID: Int
  Title: String
  Unread: Boolean!
  UserID: Int!
}

input UpdateUserRecordLogInput {
  EarliestAt: Timestamp!
  EntityID: Int!
  ID: Int!
  LatestAt: Timestamp!
  RecordID: String!
  TotalCount: Int!
  UserID: Int!
}

input UpdateUserViewCategoryInput {
  Description: String
  EntityID: Int!
  ID: Int!
  Name: String!
  ParentID: Int
  UserID: Int!
}

input UpdateUserViewInput {
  CategoryID: Int
  CustomFilterState: Boolean!
  CustomWhereClause: Boolean!
  Description: String
  EntityID: Int!
  FilterState: String
  GridState: String
  ID: Int!
  IsDefault: Boolean!
  IsShared: Boolean!
  Name: String!
  SmartFilterEnabled: Boolean!
  SmartFilterExplanation: String
  SmartFilterPrompt: String
  SmartFilterWhereClause: String
  SortState: String
  UserID: Int!
  WhereClause: String
}

input UpdateUserViewRunDetailInput {
  ID: Int!
  RecordID: String!
  UserViewRunID: Int!
}

input UpdateUserViewRunInput {
  ID: Int!
  RunAt: Timestamp!
  RunByUserID: Int!
  UserViewID: Int!
}

input UpdateVectorDatabaseInput {
  ClassKey: String
  DefaultURL: String
  Description: String
  ID: Int!
  Name: String!
}

input UpdateVectorIndexInput {
  Description: String
  EmbeddingModelID: Int!
  ID: Int!
  Name: String!
  VectorDatabaseID: Int!
}

input UpdateVersionInstallationInput {
  Comments: String
  ID: Int!
  InstallLog: String
  InstalledAt: Timestamp!
  MajorVersion: Int!
  MinorVersion: Int!
  PatchVersion: Int!
  Status: String!
  Type: String
}

input UpdateWorkflowEngineInput {
  Description: String
  DriverClass: String!
  DriverPath: String!
  ID: Int!
  Name: String!
}

input UpdateWorkflowInput {
  AutoRunEnabled: Boolean!
  AutoRunInterval: Int
  AutoRunIntervalUnits: String
  CompanyName: String!
  Description: String
  ExternalSystemRecordID: String!
  ID: Int!
  Name: String!
  SubclassName: String
  WorkflowEngineName: String!
}

input UpdateWorkflowRunInput {
  EndedAt: Timestamp
  ExternalSystemRecordID: String!
  ID: Int!
  Results: String
  StartedAt: Timestamp!
  Status: String!
  WorkflowName: String!
}

input UpdateWorkspaceInput {
  Description: String
  ID: Int!
  Name: String!
  UserID: Int!
}

input UpdateWorkspaceItemInput {
  Configuration: String
  Description: String
  ID: Int!
  Name: String!
  ResourceRecordID: String
  ResourceTypeID: Int!
  Sequence: Int!
  WorkSpaceID: Int!
}

type UserApplicationEntity_ {
  Application: String!
  Entity: String!
  EntityID: Int!
  ID: Int!
  Sequence: Int!
  User: String!
  UserApplicationID: Int!
}

type UserApplication_ {
  Application: String!
  ApplicationID: Int!
  ID: Int!
  IsActive: Boolean!
  Sequence: Int!
  User: String!
  UserApplicationEntitiesArray: [UserApplicationEntity_!]!
  UserID: Int!
}

type UserFavoriteResult {
  EntityID: Int!
  IsFavorite: Boolean!
  PrimaryKeyValues: [PrimaryKeyValueOutputType!]!
  Success: Boolean!
  UserID: Int!
}

input UserFavoriteSearchParams {
  EntityID: Int!
  PrimaryKeyValues: [PrimaryKeyValueInputType!]!
  UserID: Int!
}

input UserFavoriteSetParams {
  EntityID: Int!
  IsFavorite: Boolean!
  PrimaryKeyValues: [PrimaryKeyValueInputType!]!
  UserID: Int!
}

"""Records that each user can mark as a favorite for easy access"""
type UserFavorite_ {
  CreatedAt: Timestamp!
  Entity: String!
  EntityBaseTable: String!
  EntityBaseView: String!
  EntityID: Int!
  ID: Int!
  RecordID: String!
  UpdatedAt: Timestamp!
  UserID: Int!
}

type UserNotification_ {
  CreatedAt: Timestamp!
  ID: Int!
  Message: String
  ReadAt: Timestamp
  ResourceConfiguration: String
  ResourceRecordID: Int
  ResourceTypeID: Int
  Title: String
  Unread: Boolean!
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

type UserRecordLog_ {
  EarliestAt: Timestamp!
  Entity: String!
  EntityID: Int!
  ID: Int!
  LatestAt: Timestamp!
  RecordID: String!
  TotalCount: Int!
  UserEmail: String!
  UserFirstLast: String
  UserID: Int!
  UserName: String!
  UserSupervisor: String
  UserSupervisorEmail: String
}

type UserRole_ {
  CreatedAt: Timestamp!
  ID: Int!
  RoleName: String!
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
}

type UserViewCategory_ {
  CreatedAt: Timestamp!
  Description: String
  EntityID: Int!
  ID: Int!
  Name: String!
  Parent: String
  ParentID: Int
  UpdatedAt: Timestamp!
  User: String!
  UserID: Int!
  UserViewCategoriesArray: [UserViewCategory_!]!
  UserViewsArray: [UserView_!]!
}

"""
Tracks the set of records that were included in each run of a given user view.
"""
type UserViewRunDetail_ {
  EntityID: Int!
  ID: Int!
  RecordID: String!
  UserViewID: Int!
  UserViewRunID: Int!
}

"""
User Views can be logged when run to capture the date and user that ran the view as well as the output results.
"""
type UserViewRun_ {
  ID: Int!
  RunAt: Timestamp!
  RunByUser: String!
  RunByUserID: Int!
  UserView: String!
  UserViewID: Int!
  UserViewRunDetailsArray: [UserViewRunDetail_!]!
}

"""
Views are sets of records within a given entity defined by filtering rules. Views can be used programatically to retrieve dynamic sets of data and in user interfaces like MJ Explorer for end-user consumption.
"""
type UserView_ {
  CategoryID: Int
  CreatedAt: Timestamp
  CustomFilterState: Boolean!
  CustomWhereClause: Boolean!
  DataContextItemsArray: [DataContextItem_!]!
  Description: String
  Entity: String!
  EntityBaseView: String!
  EntityID: Int!
  EntityRelationshipsArray: [EntityRelationship_!]!
  FilterState: String
  GUID: String!
  GridState: String
  ID: Int!
  IsDefault: Boolean!
  IsShared: Boolean!
  Name: String!
  SmartFilterEnabled: Boolean!
  SmartFilterExplanation: String
  SmartFilterPrompt: String
  SmartFilterWhereClause: String
  SortState: String
  UpdatedAt: Timestamp
  UserEmail: String!
  UserFirstLast: String
  UserID: Int!
  UserName: String!
  UserType: String!
  UserViewRunsArray: [UserViewRun_!]!
  WhereClause: String
}

"""A list of all users who have or had access to the system"""
type User_ {
  AuditLogsArray: [AuditLog_!]!
  CompanyIntegrationRunsArray: [CompanyIntegrationRun_!]!
  ConversationsArray: [Conversation_!]!
  CreatedAt: Timestamp!
  DashboardCategoriesArray: [DashboardCategory_!]!
  DashboardsArray: [Dashboard_!]!
  DataContextsArray: [DataContext_!]!
  DuplicateRunsArray: [DuplicateRun_!]!
  Email: String!
  EmployeeEmail: String
  EmployeeFirstLast: String
  EmployeeID: Int
  EmployeeSupervisor: String
  EmployeeSupervisorEmail: String
  EmployeeTitle: String
  FirstLast: String
  FirstName: String
  ID: Int!
  IsActive: Boolean!
  LastName: String
  LinkedEntityID: Int
  LinkedEntityRecordID: Int
  LinkedRecordType: String!
  ListsArray: [List_!]!
  Name: String!
  QueryCategoriesArray: [QueryCategory_!]!
  RecordChangesArray: [RecordChange_!]!
  RecordMergeLogsArray: [RecordMergeLog_!]!
  ReportCategoriesArray: [ReportCategory_!]!
  ReportSnapshotsArray: [ReportSnapshot_!]!
  ReportsArray: [Report_!]!
  Title: String
  Type: String!
  UpdatedAt: Timestamp!
  UserApplicationsArray: [UserApplication_!]!
  UserFavoritesArray: [UserFavorite_!]!
  UserNotificationsArray: [UserNotification_!]!
  UserRecordLogsArray: [UserRecordLog_!]!
  UserRolesArray: [UserRole_!]!
  UserViewCategoriesArray: [UserViewCategory_!]!
  UserViewRunsArray: [UserViewRun_!]!
  UserViewsArray: [UserView_!]!
  WorkspacesArray: [Workspace_!]!
}

type VectorDatabase_ {
  ClassKey: String
  CreatedAt: Timestamp!
  DefaultURL: String
  Description: String
  EntityDocumentsArray: [EntityDocument_!]!
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
  VectorIndexesArray: [VectorIndex_!]!
}

type VectorIndex_ {
  CreatedAt: Timestamp!
  Description: String
  EmbeddingModel: String!
  EmbeddingModelID: Int!
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
  VectorDatabase: String!
  VectorDatabaseID: Int!
}

type VersionInstallation_ {
  """
  Optional, comments the administrator wants to save for each installed version
  """
  Comments: String
  CompleteVersion: String
  CreatedAt: Timestamp!
  ID: Int!

  """Any logging that was saved from the installation process"""
  InstallLog: String
  InstalledAt: Timestamp!
  MajorVersion: Int!
  MinorVersion: Int!
  PatchVersion: Int!

  """Pending, Complete, Failed"""
  Status: String!

  """What type of installation was applied"""
  Type: String
  UpdatedAt: Timestamp!
}

type WorkflowEngine_ {
  CreatedAt: Timestamp!
  Description: String
  DriverClass: String!
  DriverPath: String!
  ID: Int!
  Name: String!
  UpdatedAt: Timestamp!
  WorkflowsArray: [Workflow_!]!
}

type WorkflowRun_ {
  EndedAt: Timestamp
  ExternalSystemRecordID: String!
  ID: Int!
  Results: String
  StartedAt: Timestamp!
  Status: String!
  Workflow: String!
  WorkflowEngineName: String!
  WorkflowName: String!
}

type Workflow_ {
  """
  If set to 1, the workflow will be run automatically on the interval specified by the AutoRunIntervalType and AutoRunInterval fields
  """
  AutoRunEnabled: Boolean!

  """
  The interval, denominated in the units specified in the AutoRunIntervalUnits column, between auto runs of this workflow.
  """
  AutoRunInterval: Int
  AutoRunIntervalMinutes: Int

  """Minutes, Hours, Days, Weeks, Months, Years"""
  AutoRunIntervalUnits: String
  CompanyName: String!
  CreatedAt: Timestamp!
  Description: String
  ExternalSystemRecordID: String!
  ID: Int!
  Name: String!
  ReportsArray: [Report_!]!

  """
  If specified, this subclass key, via the ClassFactory, will be instantiated, to execute this workflow. If not specified the WorkflowBase class will be used by default.
  """
  SubclassName: String
  UpdatedAt: Timestamp!
  WorkflowEngineName: String!
  WorkflowRunsArray: [WorkflowRun_!]!
}

"""Tracks the resources that are active within a given worksapce"""
type WorkspaceItem_ {
  Configuration: String
  Description: String
  ID: Int!
  Name: String!
  ResourceRecordID: String
  ResourceType: String!
  ResourceTypeID: Int!
  Sequence: Int!
  WorkSpace: String!
  WorkSpaceID: Int!
}

"""A user can have one or more workspaces"""
type Workspace_ {
  Description: String
  ID: Int!
  Name: String!
  User: String!
  UserID: Int!
  WorkspaceItemsArray: [WorkspaceItem_!]!
}