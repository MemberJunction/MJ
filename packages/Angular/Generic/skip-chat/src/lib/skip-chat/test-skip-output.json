{
  "functionalRequirements": "### Business Objectives\n1. Provide comprehensive entity management visibility\n2. Facilitate metadata exploration for developers and business analysts\n3. Enable efficient system navigation through hierarchical visualization\n\n### User Needs\n- Developers need technical metadata (data types, relationships, constraints)\n- Business users need contextual explanations and operational impact information\n- System administrators require permission visibility and schema overview\n\n### Data Requirements\nDynamic data access required for:\n- Entity metadata (name, description, creation date)\n- Field metadata (data type, format, relationships)\n- Permission settings per entity/field\n\n### Functional Requirements\n**Entity Hierarchy Display**\n- Tree structure with expand/collapse icons\n- Visual indicators for child entity counts\n- Context-sensitive tooltips showing entity summaries\n\n**Drill-Down Functionality**\n- Click-to-navigate between entities\n- Breadcrumb trail for navigation path\n- Modal/pane toggle for field details\n\n**Metadata Display**\n- Field grids with columns: Name, Type, Description, Relationship, Permission\n- Technical vs Business explanation tabs\n- Schema diagram visualization (ERD-style)\n\n**Search & Filter**\n- Global search bar with fuzzy matching\n- Filter by: entity type, data class, modification date\n- Tag-based categorization (e.g., 'PII', 'Financial')\n\n**Contextual Information**\n- Business impact ratings per field\n- Usage statistics (how often accessed)\n- Version history of schema changes\n\n**Accessibility**\n- Keyboard navigation\n- Screen reader compatibility\n- High-contrast mode\n\n### Success Metrics\n- 90% reduction in entity lookup time\n- 75% increase in metadata utilization\n- 95% user satisfaction in usability surveys",
  "dataRequirements": {
    "mode": "dynamic",
    "dynamicData": {
      "requiredEntities": [
        {
          "entityName": "Entities",
          "entityDescription": "Catalog of all entities across schemas",
          "displayFields": [
            "ID",
            "Name",
            "Description",
            "ParentID"
          ],
          "filterFields": [
            "SchemaName",
            "TrackRecordChanges",
            "IncludeInGeneratedForm"
          ],
          "sortFields": [
            "ID",
            "Name"
          ]
        },
        {
          "entityName": "Entity Fields",
          "entityDescription": "Metadata for entity fields including permissions",
          "displayFields": [
            "ID",
            "Name",
            "Description",
            "RelatedEntityID",
            "AllowUpdateAPI",
            "IncludeInGeneratedForm"
          ],
          "filterFields": [
            "EntityID",
            "IsPrimaryKey",
            "IsUnique",
            "AllowUpdateInView"
          ],
          "sortFields": [
            "Sequence",
            "Name"
          ]
        },
        {
          "entityName": "Entity Relationships",
          "entityDescription": "Relationship definitions between entities",
          "displayFields": [
            "ID",
            "EntityID",
            "RelatedEntityID",
            "Type",
            "DisplayName"
          ],
          "filterFields": [
            "EntityID",
            "RelatedEntityID",
            "Type"
          ],
          "sortFields": [
            "EntityID",
            "Sequence"
          ]
        }
      ],
      "description": "Data strategy leverages metadata entities to enable hierarchical navigation (ParentID in Entities), field-level permissions (AllowUpdateAPI in Entity Fields), and relationship visualization (Entity Relationships)"
    },
    "securityNotes": "Entity permissions should be enforced through Entity Fields' AllowUpdateAPI and Entities' security attributes"
  },
  "techExplanation": "The EntityViewer leverages a modular, compositional architecture. The root maintains navigation, search/filter, display mode and accessibility state. Data is fetched dynamically on-demand per user action, scoped by permission. Child components are responsible for rendering specific UI sub-tasks and communicate state/control changes to the parent for coordinated updates. Accessible navigation and ARIA support is prioritized throughout, with business and technical views surfaced at multiple levels. Components are designed for virtualization and efficient updates. Errors or permission blocks are handled gracefully via feedback and ARIA live regions.",
  "childComponents": [
    {
      "componentName": "EntityTree",
      "exampleUsage": "<EntityTree entities={entities} expandedIds={expandedEntityIds} onExpand={handleExpand} onSelect={handleSelect} filter={entityFilter} childCounts={childCounts} selectedId={activeEntityId} />",
      "description": "Displays a hierarchical, expandable tree of entities with child count badges, permission/visibility indicators, and integrated search/filtering.",
      "functionalRequirements": "• Renders entity hierarchy based on ParentID and childCounts.\n• Supports expand/collapse nodes with keyboard and mouse events.\n• Displays child entity counts as badges.\n• Highlights selected node.\n• Filters entities by search, type, or permission.\n• Shows permission/visibility status.\n• Triggers selection callbacks on click/keyboard.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entities",
              "displayFields": [
                "ID",
                "Name",
                "Description",
                "ParentID"
              ],
              "filterFields": [
                "SchemaName",
                "TrackRecordChanges",
                "IncludeInGeneratedForm"
              ],
              "sortFields": [
                "ID",
                "Name"
              ],
              "usageContext": "Hierarchy construction, search/filtering, permission display"
            }
          ],
          "description": "Builds and renders hierarchical tree with expand/collapse, including real-time filters."
        }
      },
      "technicalDesign": "Uses a virtualized tree renderer for large sets. Node expansion controlled via expandedIds prop. Filters/search pre-process data. ARIA attributes, rolenames, and keyboard nav (arrow, enter, space) for accessibility. Permission filtering handled at data transform.",
      "statePath": "EntityTree",
      "componentCode": "function EntityTree({ data, styles, config, userState, statePath, onEvent, callbacks, utilities }) {\n    const { entities = [], expandedIds = [], selectedId, childCounts = {}, filter = {} } = data || {};\n    const [localState, setLocalState] = React.useState({\n        expandedIds: expandedIds || [],\n        filterText: '',\n        selectedId: selectedId || null,\n        ...userState\n    });\n\n    // Helper to emit stateChanged events\n    const updateState = (newState) => {\n        setLocalState(newState);\n        onEvent && onEvent({\n            type: 'stateChanged',\n            source: 'EntityTree',\n            payload: { statePath, newState },\n            bubbles: true\n        });\n    };\n\n    // Handle expand/collapse\n    const handleExpand = (id) => {\n        const expanded = localState.expandedIds.includes(id)\n            ? localState.expandedIds.filter(eid => eid !== id)\n            : [...localState.expandedIds, id];\n        updateState({ ...localState, expandedIds: expanded });\n    };\n\n    // Node selection\n    const handleSelect = (id) => {\n        updateState({ ...localState, selectedId: id });\n        onEvent && onEvent({\n            type: 'entitySelected',\n            source: 'EntityTree',\n            payload: { entityId: id },\n            bubbles: true\n        });\n    };\n\n    // Search/filtering\n    const handleFilterChange = (e) => {\n        const value = e.target.value;\n        updateState({ ...localState, filterText: value });\n    };\n\n    // Filtering logic\n    const filterText = (localState.filterText || '').toLowerCase();\n    const passFilter = (e) => {\n        if (!filterText) return true;\n        return (\n            (e.Name && e.Name.toLowerCase().includes(filterText)) ||\n            (e.Description && e.Description.toLowerCase().includes(filterText))\n        );\n    };\n\n    // Build hierarchical data\n    const buildTree = (entities) => {\n        const byParent = {};\n        entities.forEach(e => {\n            byParent[e.ParentID] = byParent[e.ParentID] || [];\n            byParent[e.ParentID].push(e);\n        });\n        const build = (parentId) => {\n            (byParent[parentId] || []).sort((a,b) => a.Name.localeCompare(b.Name));\n            return (byParent[parentId] || []).map(e => ({\n                ...e,\n                children: build(e.ID)\n            }));\n        };\n        return build(null);\n    };\n\n    // After filtering apply hierarchy\n    const filteredEntities = entities.filter(passFilter);\n    // We want to only show nodes that match filter or whose descendants match filter\n    function pruneTree(nodes) {\n        return nodes.map(node => {\n            const children = pruneTree(node.children || []);\n            const matches = passFilter(node) || children.length > 0;\n            return matches ? { ...node, children } : null;\n        }).filter(Boolean);\n    }\n\n    const fullTree = buildTree(entities);\n    const displayTree = filterText ? pruneTree(fullTree) : fullTree;\n\n    // Render tree node\n    const renderNode = (node, level = 0) => {\n        const isExpanded = localState.expandedIds.includes(node.ID);\n        const hasChildren = (node.children && node.children.length > 0);\n        const isSelected = localState.selectedId === node.ID;\n        // Permission/visibility status\n        const badgeCount = childCounts && childCounts[node.ID] ? childCounts[node.ID] : 0;\n        let visibilityIcon = '';\n        if (typeof node.Permission !== 'undefined') {\n            visibilityIcon = node.Permission === 'readonly' ? '👁️' : (node.Permission === 'edit' ? '✏️' : '');\n        }\n        return (\n            <div\n                key={node.ID}\n                role=\"treeitem\"\n                aria-expanded={hasChildren ? isExpanded : undefined}\n                aria-selected={isSelected}\n                tabIndex={0}\n                style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    marginLeft: level * 18,\n                    background: isSelected ? styles.colors.primaryLight : 'none',\n                    color: isSelected ? styles.colors.primary : styles.colors.text,\n                    padding: styles.spacing.xs + ' ' + styles.spacing.sm,\n                    borderRadius: styles.borders.radius,\n                    outline: 'none',\n                    cursor: 'pointer',\n                    fontWeight: isSelected ? 600 : 400\n                }}\n                onClick={() => handleSelect(node.ID)}\n                onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        handleSelect(node.ID);\n                        e.preventDefault();\n                    } else if ((e.key === 'ArrowRight' || e.key === '+') && hasChildren && !isExpanded) {\n                        handleExpand(node.ID);\n                        e.preventDefault();\n                    } else if ((e.key === 'ArrowLeft' || e.key === '-') && hasChildren && isExpanded) {\n                        handleExpand(node.ID);\n                        e.preventDefault();\n                    }\n                }}\n            >\n                {hasChildren && (\n                    <span\n                        role=\"button\"\n                        aria-label={isExpanded ? 'Collapse' : 'Expand'}\n                        onClick={e => { e.stopPropagation(); handleExpand(node.ID); }}\n                        style={{\n                            marginRight: 6,\n                            fontSize: styles.typography.fontSize.sm,\n                            userSelect: 'none',\n                            cursor: 'pointer',\n                            color: styles.colors.textSecondary\n                        }}\n                    >\n                        {isExpanded ? '▼' : '▶'}\n                    </span>\n                )}\n                <span style={{ flex: 1, minWidth: 0, textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap' }}>{node.Name}</span>\n                {badgeCount > 0 && (\n                    <span\n                        style={{\n                            background: styles.colors.primary,\n                            color: '#fff',\n                            borderRadius: '12px',\n                            padding: '0 7px',\n                            marginLeft: 8,\n                            fontSize: styles.typography.fontSize.sm,\n                            minWidth: '20px',\n                            textAlign: 'center'\n                        }}\n                        aria-label={badgeCount + ' child entities'}\n                    >{badgeCount}</span>\n                )}\n                {visibilityIcon && (\n                    <span\n                        title={node.Permission}\n                        aria-label={node.Permission}\n                        style={{ marginLeft: 8, fontSize: styles.typography.fontSize.md }}\n                    >{visibilityIcon}</span>\n                )}\n            </div>\n        );\n    };\n\n    // Render tree recursively\n    const renderTree = (nodes, level = 0) => {\n        if (!nodes || nodes.length === 0) return null;\n        return nodes.map(node => (\n            <React.Fragment key={node.ID}>\n                {renderNode(node, level)}\n                {node.children && node.children.length > 0 && localState.expandedIds.includes(node.ID) && (\n                    renderTree(node.children, level + 1)\n                )}\n            </React.Fragment>\n        ));\n    };\n\n    return (\n        <div\n            style={{\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n                fontFamily: styles.typography.fontFamily\n            }}\n        >\n            <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                padding: styles.spacing.sm,\n                borderBottom: `1px solid ${styles.colors.border}`,\n                background: styles.colors.surface,\n                gap: styles.spacing.sm\n            }}>\n                <input\n                    type=\"search\"\n                    aria-label=\"Filter entities\"\n                    placeholder=\"Search entities...\"\n                    value={localState.filterText || ''}\n                    onChange={handleFilterChange}\n                    style={{\n                        flex: 1,\n                        padding: styles.spacing.xs + ' ' + styles.spacing.sm,\n                        border: `1px solid ${styles.colors.border}`,\n                        borderRadius: styles.borders.radius,\n                        background: styles.colors.surface,\n                        fontSize: styles.typography.fontSize.md,\n                        color: styles.colors.text\n                    }}\n                />\n            </div>\n            <div\n                role=\"tree\"\n                aria-label=\"Entity tree\"\n                style={{ flex: 1, overflow: 'auto', padding: styles.spacing.md }}\n            >\n                {displayTree && displayTree.length > 0 ? (\n                    renderTree(displayTree)\n                ) : (\n                    <div style={{\n                        padding: styles.spacing.xl,\n                        textAlign: 'center',\n                        color: styles.colors.textSecondary\n                    }}>\n                        No matching entities\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n"
    },
    {
      "componentName": "EntityBreadcrumbs",
      "exampleUsage": "<EntityBreadcrumbs path={breadcrumbTrail} onNavigate={handleBreadcrumbNavigate} />",
      "description": "Shows the navigation path from the root to the current entity, enabling click-to-navigate back to ancestors.",
      "functionalRequirements": "• Displays clickable list of entities in the selection ancestry (breadcrumb).\n• Updates as tree selection changes.\n• Allows keyboard navigation between crumbs.\n• Supports ARIA labeling.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entities",
              "displayFields": [
                "ID",
                "Name"
              ],
              "usageContext": "Fetch name for each ID in breadcrumbTrail"
            }
          ]
        }
      },
      "technicalDesign": "Maps breadcrumbTrail state to display names, renders as accessible list. Click/keyboard event triggers navigation event.",
      "statePath": "EntityBreadcrumbs",
      "componentCode": "function EntityBreadcrumbs({ data, styles, config, userState, statePath, onEvent, callbacks, utilities }) {\n    const [localState, setLocalState] = React.useState({\n        focusedCrumbIdx: null,\n        ...userState\n    });\n\n    // Helper to emit state change events\n    const updateState = (updates) => {\n        const newState = { ...localState, ...updates };\n        setLocalState(newState);\n        onEvent && onEvent({\n            type: 'stateChanged',\n            source: 'EntityBreadcrumbs',\n            payload: {\n                statePath: statePath,\n                newState\n            },\n            bubbles: true\n        });\n    };\n\n    // Defensive missing data boundary\n    if (!data || !data.path || !Array.isArray(data.path) || data.path.length === 0) {\n        return (\n            <div style={{\n                padding: styles.spacing.md,\n                color: styles.colors.textSecondary\n            }}>\n                No navigation path available\n            </div>\n        );\n    }\n\n    // BreadcrumbTrail is an array of entity IDs\n    const breadcrumbIds = data.path;\n    // data.entities: [{ID, Name}, ...]\n    const entitiesById = (data.entities || []).reduce((acc, entity) => {\n        acc[entity.ID] = entity;\n        return acc;\n    }, {});\n    // Map path IDs to display names\n    const crumbs = breadcrumbIds.map(id => ({\n        id,\n        name: entitiesById[id]?.Name || id // fallback to ID\n    }));\n\n    // Navigation Event Handler\n    const handleCrumbClick = (idx) => {\n        // Only allow navigating to ancestors (not current entity)\n        if (idx < crumbs.length - 1) {\n            onEvent && onEvent({\n                type: 'itemSelected',\n                source: 'EntityBreadcrumbs',\n                payload: {\n                    itemId: crumbs[idx].id,\n                    item: entitiesById[crumbs[idx].id],\n                    selectedCrumbIdx: idx,\n                    statePath\n                },\n                bubbles: true\n            });\n        }\n    };\n\n    // Keyboard navigation: left/right arrows to move, enter/space to activate\n    const crumbListRef = React.useRef();\n    React.useEffect(() => {\n        // Restore focus to current crumb if needed (for keyboard navigation)\n        if (\n            localState.focusedCrumbIdx != null &&\n            crumbListRef.current &&\n            crumbListRef.current.children[localState.focusedCrumbIdx]\n        ) {\n            crumbListRef.current.children[localState.focusedCrumbIdx].focus();\n        }\n    }, [localState.focusedCrumbIdx]);\n\n    const handleCrumbKeyDown = (e, idx) => {\n        // Only allow arrow navigation for actual crumb button (not separator)\n        if (e.key === 'ArrowLeft' && idx > 0) {\n            e.preventDefault();\n            updateState({ focusedCrumbIdx: idx - 1 });\n        } else if (e.key === 'ArrowRight' && idx < crumbs.length - 1) {\n            e.preventDefault();\n            updateState({ focusedCrumbIdx: idx + 1 });\n        } else if ((e.key === 'Enter' || e.key === ' ') && idx < crumbs.length - 1) {\n            // Only permit navigation for ancestors\n            handleCrumbClick(idx);\n        }\n    };\n\n    // Styles\n    const rootStyle = {\n        display: 'flex',\n        alignItems: 'center',\n        gap: styles.spacing.xs,\n        padding: styles.spacing.sm,\n        background: styles.colors.surface,\n        borderRadius: styles.borders.radius,\n        fontSize: styles.typography.fontSize.md,\n        overflowX: 'auto',\n        height: '100%',\n        width: '100%'\n    };\n    const crumbBtnStyle = (isActive, isFocusable) => ({\n        cursor: isActive ? 'pointer' : 'default',\n        background: isActive\n            ? styles.colors.primaryLight || styles.colors.primary\n            : 'transparent',\n        color: isActive\n            ? styles.colors.primary\n            : styles.colors.text,\n        border: 'none',\n        padding: styles.spacing.xs,\n        borderRadius: styles.borders.radius,\n        outline: isFocusable ? `2px solid ${styles.colors.primary}` : 'none',\n        fontWeight: isActive ? 600 : 400,\n        transition: styles.transitions?.normal,\n        minWidth: 0\n    });\n\n    return (\n        <nav\n            aria-label=\"Breadcrumb\"\n            style={rootStyle}\n        >\n            <ol\n                ref={crumbListRef}\n                style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    listStyle: 'none',\n                    margin: 0,\n                    padding: 0,\n                    gap: styles.spacing.xs,\n                    width: '100%'\n                }}\n            >\n                {crumbs.map((crumb, idx) => (\n                    <React.Fragment key={crumb.id}>\n                        <li style={{display: 'flex', alignItems: 'center'}}>\n                            <button\n                                aria-current={idx === crumbs.length - 1 ? 'page' : undefined}\n                                aria-label={\n                                    idx === crumbs.length - 1\n                                        ? `Current: ${crumb.name}`\n                                        : `Go to ${crumb.name}`\n                                }\n                                tabIndex={\n                                    localState.focusedCrumbIdx === idx ? 0 : -1\n                                }\n                                style={crumbBtnStyle(\n                                    idx < crumbs.length - 1, // clickable ancestor\n                                    localState.focusedCrumbIdx === idx\n                                )}\n                                onClick={() => handleCrumbClick(idx)}\n                                onFocus={() => updateState({ focusedCrumbIdx: idx })}\n                                onKeyDown={(e) => handleCrumbKeyDown(e, idx)}\n                                disabled={idx === crumbs.length - 1}\n                                type=\"button\"\n                            >\n                                {crumb.name}\n                            </button>\n                        </li>\n                        {idx < crumbs.length - 1 && (\n                            <li aria-hidden=\"true\" style={{ color: styles.colors.textSecondary, userSelect: 'none', margin: `0 ${styles.spacing.xs}` }}>\n                                /\n                            </li>\n                        )}\n                    </React.Fragment>\n                ))}\n            </ol>\n        </nav>\n    );\n}"
    },
    {
      "componentName": "EntityMetadataPanel",
      "exampleUsage": "<EntityMetadataPanel entity={currentEntity} fields={entityFields} viewMode={viewMode} onFieldSelect={handleFieldSelect} />",
      "description": "Displays detailed entity and field metadata in selectable grids, with dual technical/business tabbed views and permission/impact info.",
      "functionalRequirements": "• Presents entity summary (description, created/modified dates).\n• Field grid: Name, Type, Description, Relationship, Permission, and Business Impact.\n• Dual tab interface ('Technical', 'Business') for view modes.\n• Clicking a field triggers drill-down/detail.\n• Shows permission icons/labels.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entity Fields",
              "displayFields": [
                "ID",
                "Name",
                "Description",
                "RelatedEntityID",
                "AllowUpdateAPI",
                "IncludeInGeneratedForm"
              ],
              "filterFields": [
                "EntityID",
                "IsPrimaryKey",
                "IsUnique",
                "AllowUpdateInView"
              ],
              "sortFields": [
                "Sequence",
                "Name"
              ]
            }
          ]
        }
      },
      "technicalDesign": "Uses tabbed interface for view mode switching. Accessible table includes ARIA, focus, and keyboard nav. Field selection updates global/focused state. Business/Technical explanatory content separated by tab.",
      "statePath": "EntityMetadataPanel",
      "componentCode": "function EntityMetadataPanel({ data, styles, config, userState, statePath, onEvent, callbacks, utilities }) {\n    const { Tabs, Table, Tooltip, Tag } = window.antd || {};\n    const React = window.React;\n    if (!Tabs || !Table || !Tooltip || !Tag || !React) {\n        return React.createElement('div', { style: { padding: styles?.spacing?.xl || 24, textAlign: 'center', color: styles?.colors?.textSecondary || '#888' } },\n            'Ant Design and React libraries are required for this component');\n    }\n    const [localState, setLocalState] = React.useState({\n        tabKey: userState?.tabKey || 'technical',\n        selectedFieldID: userState?.selectedFieldID || null,\n        ...userState\n    });\n    const updateUserState = (patch) => {\n        const newState = { ...localState, ...patch };\n        setLocalState(newState);\n        onEvent({\n            type: 'stateChanged',\n            source: 'EntityMetadataPanel',\n            payload: { statePath, newState },\n            bubbles: true\n        });\n    };\n    // Entity context from props\n    const entity = data?.entity;\n    const entityFields = data?.fields || [];\n    // For tab rendering\n    const viewMode = localState.tabKey;\n    // Field table columns config\n    const technicalColumns = [\n        {\n            title: 'Name',\n            dataIndex: 'Name',\n            key: 'Name',\n            render: (text, record) =>\n                React.createElement('span', {\n                    style: { cursor: 'pointer', color: styles.colors.primary, textDecoration: record.ID === localState.selectedFieldID ? 'underline' : undefined },\n                    tabIndex: 0,\n                    role: 'button',\n                    'aria-label': `Select field ${text}`,\n                    onClick: () => handleSelectField(record),\n                    onKeyDown: (e) => {\n                        if (e.key === 'Enter' || e.key === ' ') handleSelectField(record);\n                    }\n                }, text)\n        },\n        {\n            title: 'Type',\n            dataIndex: 'Type',\n            key: 'Type',\n        },\n        {\n            title: 'Description',\n            dataIndex: 'Description',\n            key: 'Description',\n            ellipsis: true,\n            render: (text) => React.createElement(Tooltip, { title: text }, text)\n        },\n        {\n            title: 'Relationship',\n            dataIndex: 'RelatedEntityID',\n            key: 'RelatedEntityID',\n            render: (rel, record) => rel ?\n                React.createElement(Tag, { color: styles.colors.info || '#1890ff' }, rel) : null\n        },\n        {\n            title: 'Permission',\n            dataIndex: 'AllowUpdateAPI',\n            key: 'AllowUpdateAPI',\n            render: (val) => val ?\n                React.createElement(Tag, { color: styles.colors.success || 'green' }, 'Updatable') :\n                React.createElement(Tag, { color: styles.colors.error || 'red' }, 'Read Only')\n        },\n        {\n            title: 'Business Impact',\n            dataIndex: 'IncludeInGeneratedForm',\n            key: 'IncludeInGeneratedForm',\n            render: (inc) => inc ?\n                React.createElement(Tag, { color: styles.colors.primary || '#1890ff' }, 'In Forms') : null\n        }\n    ];\n    const businessColumns = [\n        {\n            title: 'Field',\n            dataIndex: 'Name',\n            key: 'Name',\n            render: (text, record) =>\n                React.createElement('span', {\n                    style: { cursor: 'pointer', color: styles.colors.primary, textDecoration: record.ID === localState.selectedFieldID ? 'underline' : undefined },\n                    tabIndex: 0,\n                    role: 'button',\n                    'aria-label': `Select field ${text}`,\n                    onClick: () => handleSelectField(record),\n                    onKeyDown: (e) => {\n                        if (e.key === 'Enter' || e.key === ' ') handleSelectField(record);\n                    }\n                }, text)\n        },\n        {\n            title: 'Role in Business',\n            dataIndex: 'Description',\n            key: 'Description',\n            ellipsis: true,\n            render: (text) => React.createElement(Tooltip, { title: text }, text)\n        },\n        {\n            title: 'Included In',\n            dataIndex: 'IncludeInGeneratedForm',\n            key: 'IncludeInGeneratedForm',\n            render: (inc) => inc ?\n                React.createElement(Tag, { color: styles.colors.success || 'green' }, 'Forms & UI') :\n                React.createElement(Tag, { color: styles.colors.textSecondary || 'grey' }, 'Hidden')\n        },\n        {\n            title: 'Editable',\n            dataIndex: 'AllowUpdateAPI',\n            key: 'AllowUpdateAPI',\n            render: (val) => val ? 'Yes' : 'No'\n        },\n        {\n            title: 'Key/Unique',\n            dataIndex: 'IsPrimaryKey',\n            key: 'IsPrimaryKey',\n            render: (pk, rec) => pk ?\n                React.createElement(Tag, { color: styles.colors.warning || 'gold' }, 'Primary Key') :\n                rec.IsUnique ? React.createElement(Tag, { color: styles.colors.info || '#1890ff' }, 'Unique') : null\n        }\n    ];\n    function handleSelectField(record) {\n        updateUserState({ selectedFieldID: record.ID });\n        onEvent({\n            type: 'itemSelected',\n            source: 'EntityMetadataPanel',\n            payload: { itemId: record.ID, item: record },\n            bubbles: true\n        });\n    }\n    // Entity summary panel (top)\n    function renderEntitySummary() {\n        return React.createElement('div', {\n            style: {\n                background: styles.colors.surface,\n                border: `1px solid ${styles.colors.border}`,\n                borderRadius: styles.borders.radius,\n                marginBottom: styles.spacing.md,\n                padding: styles.spacing.md,\n                boxShadow: styles.shadows?.sm,\n                display: 'flex',\n                flexDirection: 'column',\n                gap: styles.spacing.sm\n            }\n        },\n            React.createElement('div', { style: { fontSize: styles.typography.fontSize.lg, fontWeight: 500 } }, entity?.Name),\n            React.createElement('div', { style: { color: styles.colors.textSecondary, fontSize: styles.typography.fontSize.sm } }, entity?.Description),\n            React.createElement('div', { style: { fontSize: styles.typography.fontSize.sm } },\n                React.createElement('span', { style: { marginRight: styles.spacing.md } },\n                    'Created: ', React.createElement('strong', null, entity?.CreatedDate || 'n/a')\n                ),\n                React.createElement('span', null,\n                    'Modified: ', React.createElement('strong', null, entity?.ModifiedDate || 'n/a')\n                )\n            )\n        );\n    }\n    // Main layout\n    return React.createElement('div', {\n        style: { height: '100%', display: 'flex', flexDirection: 'column', overflow: 'hidden' }\n    },\n        renderEntitySummary(),\n        React.createElement(Tabs, {\n            activeKey: viewMode,\n            onChange: (k) => updateUserState({ tabKey: k }),\n            style: { flex: 1, overflow: 'hidden' },\n            items: [\n                {\n                    key: 'technical',\n                    label: 'Technical',\n                    children: React.createElement('div', { style: { height: '100%', overflow: 'auto', padding: styles.spacing.md } },\n                        React.createElement(Table, {\n                            columns: technicalColumns,\n                            dataSource: entityFields,\n                            rowKey: 'ID',\n                            pagination: false,\n                            size: 'small',\n                            rowClassName: (r) => r.ID === localState.selectedFieldID ? 'ant-table-row-selected' : '',\n                            style: { minHeight: 240 },\n                            onRow: (rec) => ({\n                                onClick: () => handleSelectField(rec),\n                                tabIndex: 0,\n                                onKeyDown: (e) => {\n                                    if (e.key === 'Enter' || e.key === ' ') handleSelectField(rec);\n                                },\n                                'aria-label': `Select field ${rec.Name}`\n                            })\n                        })\n                    )\n                },\n                {\n                    key: 'business',\n                    label: 'Business',\n                    children: React.createElement('div', { style: { height: '100%', overflow: 'auto', padding: styles.spacing.md } },\n                        React.createElement(Table, {\n                            columns: businessColumns,\n                            dataSource: entityFields,\n                            rowKey: 'ID',\n                            pagination: false,\n                            size: 'small',\n                            rowClassName: (r) => r.ID === localState.selectedFieldID ? 'ant-table-row-selected' : '',\n                            style: { minHeight: 240 },\n                            onRow: (rec) => ({\n                                onClick: () => handleSelectField(rec),\n                                tabIndex: 0,\n                                onKeyDown: (e) => {\n                                    if (e.key === 'Enter' || e.key === ' ') handleSelectField(rec);\n                                },\n                                'aria-label': `Select field ${rec.Name}`\n                            })\n                        })\n                    )\n                }\n            ]\n        })\n    );\n}"
    },
    {
      "componentName": "SchemaDiagram",
      "exampleUsage": "<SchemaDiagram entity={currentEntity} relationships={entityRelationships} display={schemaDiagramVisible} />",
      "description": "Visualizes the currently selected entity’s structure and relationships to other entities in an ERD-style diagram.",
      "functionalRequirements": "• Renders nodes for entities, edges for relationships (parent, references).\n• Supports zoom/pan and focus on active entity.\n• Displays tooltip/summary on hover.\n• Honors show/hide flag for panel/modal toggle.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entity Relationships",
              "displayFields": [
                "ID",
                "EntityID",
                "RelatedEntityID",
                "Type",
                "DisplayName"
              ],
              "filterFields": [
                "EntityID",
                "RelatedEntityID",
                "Type"
              ],
              "sortFields": [
                "EntityID",
                "Sequence"
              ]
            },
            {
              "entityName": "Entities",
              "displayFields": [
                "ID",
                "Name"
              ]
            }
          ],
          "description": "Pulls relationships for currently viewed entity and related entities for schema visualization."
        }
      },
      "technicalDesign": "Uses SVG or canvas-based rendering (d3 or light custom renderer). Focus/selection state managed via props. Diagram panning/zooming controlled by mouse/touch/keyboard. Accessibility via labels and ARIA for nodes.",
      "statePath": "SchemaDiagram",
      "componentCode": "function SchemaDiagram({ data, styles, config, userState, statePath, onEvent, callbacks, utilities }) {\n  const [localState, setLocalState] = React.useState({\n    pan: { x: 0, y: 0 },\n    zoom: 1,\n    focusedEntityID: (userState && userState.focusedEntityID) || null,\n    hoveredNodeID: null,\n    ...userState\n  });\n\n  // Helpers\n  const svgRef = React.useRef();\n  const [isPanning, setIsPanning] = React.useState(false);\n  const [panStart, setPanStart] = React.useState(null);\n\n  // Get Entities and Relationships from data - trusted directly\n  const entityList = data?.Entities || [];\n  const relationshipList = data?.['Entity Relationships'] || [];\n\n  // Find focused entity (from userState, or default to first)\n  const focusedID = localState.focusedEntityID || (entityList.length ? entityList[0].ID : null);\n  const focusedEntity = entityList.find(e => e.ID === focusedID);\n\n  // Compute nodes: include focused, direct parents/children, and referenced entities\n  let nodes = [];\n  if (focusedEntity) {\n    // Add focused for sure\n    nodes.push({ ...focusedEntity, isFocused: true });\n\n    // Relationships where focused is parent or child\n    relationshipList.forEach(r => {\n      if (r.EntityID === focusedEntity.ID) {\n        // focused is parent/source, add child if not present\n        if (!nodes.find(n => n.ID === r.RelatedEntityID)) {\n          const related = entityList.find(e => e.ID === r.RelatedEntityID);\n          if (related) nodes.push({ ...related, isDirect: true });\n        }\n      }\n      if (r.RelatedEntityID === focusedEntity.ID) {\n        // focused is child/target, add parent if not present\n        if (!nodes.find(n => n.ID === r.EntityID)) {\n          const related = entityList.find(e => e.ID === r.EntityID);\n          if (related) nodes.push({ ...related, isDirect: true });\n        }\n      }\n    });\n  }\n\n  // Compute edges: only those between present nodes\n  const nodeIDs = nodes.map(n => n.ID);\n  const edges = relationshipList.filter(r => nodeIDs.includes(r.EntityID) && nodeIDs.includes(r.RelatedEntityID));\n\n  // Basic force-directed layout\n  // Position focused center, rest around circle\n  const centerX = 400, centerY = 300;\n  const nodeRadius = 38; // px\n  let nodePositions = {};\n  if (nodes.length) {\n    const angleStep = (2 * Math.PI) / Math.max(1, nodes.length - 1);\n    nodes.forEach((n, idx) => {\n      if (n.isFocused) {\n        nodePositions[n.ID] = { x: centerX, y: centerY };\n      } else {\n        const angle = angleStep * (idx - (n.isFocused ? 0 : (focusedEntity ? 1 : 0)));\n        nodePositions[n.ID] = {\n          x: centerX + Math.cos(angle) * 170,\n          y: centerY + Math.sin(angle) * 140\n        };\n      }\n    });\n  }\n\n  // Pan/zoom Events\n  const onWheel = e => {\n    e.preventDefault();\n    let zoom = Math.max(0.5, Math.min(2.5, localState.zoom + (e.deltaY ? -e.deltaY * 0.001 : 0)));\n    setLocalState({ ...localState, zoom });\n    onEvent && onEvent({\n      type: 'stateChanged',\n      source: 'SchemaDiagram',\n      payload: { statePath, newState: { ...localState, zoom } },\n      bubbles: true\n    });\n  };\n\n  const onMouseDown = e => {\n    if (e.button !== 0) return;\n    setIsPanning(true);\n    setPanStart({ x: e.clientX, y: e.clientY, ...localState.pan });\n  };\n  const onMouseMove = e => {\n    if (!isPanning || !panStart) return;\n    const dx = e.clientX - panStart.x;\n    const dy = e.clientY - panStart.y;\n    const pan = { x: panStart.x + dx - panStart.x + panStart.x, y: panStart.y + dy - panStart.y + panStart.y };\n    const newPan = { x: panStart.x + dx - panStart.x, y: panStart.y + dy - panStart.y };\n    setLocalState(ls => ({ ...ls, pan: { x: panStart.x + dx - panStart.x, y: panStart.y + dy - panStart.y } }));\n    onEvent && onEvent({\n      type: 'stateChanged',\n      source: 'SchemaDiagram',\n      payload: { statePath, newState: { ...localState, pan: { x: panStart.x + dx - panStart.x, y: panStart.y + dy - panStart.y } } },\n      bubbles: true\n    });\n  };\n  const onMouseUp = () => {\n    setIsPanning(false);\n    setPanStart(null);\n  };\n\n  React.useEffect(() => {\n    if (!isPanning) return;\n    const move = e => onMouseMove(e);\n    const up = () => onMouseUp();\n    window.addEventListener('mousemove', move);\n    window.addEventListener('mouseup', up);\n    return () => {\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', up);\n    };\n  });\n\n  // Show/hide\n  const visible = (typeof config?.display !== 'undefined') ? !!config.display : true;\n  if (!visible) return null;\n  // Accessible colors\n  const theme = styles || {};\n\n  // Tooltip\n  const [tooltip, setTooltip] = React.useState(null);\n\n  // Tooltip timer\n  const tooltipRef = React.useRef();\n\n  // Handlers\n  const nodeMouseEnter = (n, evt) => {\n    setLocalState(ls => ({ ...ls, hoveredNodeID: n.ID }));\n    setTooltip({\n      x: evt.clientX,\n      y: evt.clientY,\n      name: n.Name,\n      summary: n.isFocused ? 'Focused entity' : n.isDirect ? 'Directly related' : 'Related',\n      entity: n\n    });\n  };\n  const nodeMouseLeave = () => {\n    setLocalState(ls => ({ ...ls, hoveredNodeID: null }));\n    setTooltip(null);\n  };\n  const nodeClick = n => {\n    setLocalState(ls => ({ ...ls, focusedEntityID: n.ID }));\n    onEvent && onEvent({\n      type: 'itemSelected',\n      source: 'SchemaDiagram',\n      payload: { itemId: n.ID, item: n, statePath, newState: { ...localState, focusedEntityID: n.ID } },\n      bubbles: true\n    });\n  };\n\n  // Keyboard pan/zoom\n  const onKeyDown = e => {\n    let handled = false;\n    let { pan, zoom } = localState;\n    if (e.key === 'ArrowUp') { pan = { x: pan.x, y: pan.y - 24 }; handled = true; }\n    if (e.key === 'ArrowDown') { pan = { x: pan.x, y: pan.y + 24 }; handled = true; }\n    if (e.key === 'ArrowLeft') { pan = { x: pan.x - 24, y: pan.y }; handled = true; }\n    if (e.key === 'ArrowRight') { pan = { x: pan.x + 24, y: pan.y }; handled = true; }\n    if (e.key === '+') { zoom = Math.min(2.5, zoom + 0.1); handled = true; }\n    if (e.key === '-') { zoom = Math.max(0.5, zoom - 0.1); handled = true; }\n    if (handled) {\n      setLocalState(ls => ({ ...ls, pan, zoom }));\n      onEvent && onEvent({\n        type: 'stateChanged',\n        source: 'SchemaDiagram',\n        payload: { statePath, newState: { ...localState, pan, zoom } },\n        bubbles: true\n      });\n      e.preventDefault();\n    }\n  };\n\n  // Layout\n  return (\n    <div\n      tabIndex={0}\n      onKeyDown={onKeyDown}\n      style={{\n        height: '100%',\n        width: '100%',\n        position: 'relative',\n        outline: 'none',\n        background: styles.colors.surface,\n        border: `${styles.borders.width} solid ${styles.colors.border}`,\n        borderRadius: styles.borders.radius,\n        userSelect: 'none',\n        overflow: 'hidden',\n        touchAction: 'none'\n      }}\n      aria-label=\"Entity schema diagram\"\n    >\n      {/* SVG Graph */}\n      <svg\n        ref={svgRef}\n        width=\"100%\" height=\"100%\" \n        viewBox={`0 0 800 600`}\n        style={{ display: 'block', width: '100%', height: '100%', cursor: isPanning ? 'grabbing' : 'grab'}}\n        onPointerDown={onMouseDown}\n        onWheel={onWheel}\n      >\n        <g transform={`translate(${localState.pan.x},${localState.pan.y}) scale(${localState.zoom})`}>\n          {/* Edges */}\n          {edges.map((e, i) => {\n            const src = nodePositions[e.EntityID];\n            const tgt = nodePositions[e.RelatedEntityID];\n            if (!src || !tgt) return null;\n            // Arrow tip\n            const dx = tgt.x - src.x, dy = tgt.y - src.y, L = Math.sqrt(dx*dx+dy*dy);\n            const tx = tgt.x - nodeRadius * dx / L, ty = tgt.y - nodeRadius * dy / L;\n            const sx = src.x + nodeRadius * dx / L, sy = src.y + nodeRadius * dy / L;\n            return (\n              <g key={i}>\n                <line \n                  x1={sx} y1={sy} x2={tx} y2={ty}\n                  stroke={styles.colors.primary}\n                  strokeWidth={3}\n                  markerEnd=\"url(#arrowhead)\"\n                  opacity={0.88}\n                />\n                {/* Relationship label */}\n                <text\n                  x={(sx+tx)/2 + 10}\n                  y={(sy+ty)/2 - 12}\n                  style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    fill: styles.colors.textSecondary,\n                    pointerEvents: 'none',\n                    textAnchor: 'middle',\n                    fontFamily: styles.typography.fontFamily\n                  }}\n                >\n                  {e.DisplayName || e.Type}\n                </text>\n              </g>\n            );\n          })}\n          {/* Arrow marker */}\n          <defs>\n            <marker id=\"arrowhead\" markerWidth=\"9\" markerHeight=\"7\" refX=\"7\" refY=\"3.5\" orient=\"auto\" markerUnits=\"strokeWidth\">\n              <polygon points=\"0 0, 9 3.5, 0 7\" fill={styles.colors.primary}/>\n            </marker>\n          </defs>\n          {/* Nodes */}\n          {nodes.map((n,i) => {\n            const pos = nodePositions[n.ID];\n            const focused = !!n.isFocused;\n            const hovered = localState.hoveredNodeID === n.ID;\n            return (\n              <g\n                key={n.ID}\n                tabIndex={0}\n                aria-label={n.Name}\n                role=\"button\"\n                onMouseEnter={e=>nodeMouseEnter(n,e)}\n                onMouseLeave={nodeMouseLeave}\n                onClick={()=>nodeClick(n)}\n                onFocus={e=>nodeMouseEnter(n,{clientX:pos.x,clientY:pos.y})}\n                onBlur={nodeMouseLeave}\n                style={{ cursor:'pointer' }}\n              >\n                <circle\n                  cx={pos.x}\n                  cy={pos.y}\n                  r={nodeRadius}\n                  fill={focused ? styles.colors.primary : hovered ? styles.colors.primaryLight : styles.colors.surface}\n                  stroke={focused ? styles.colors.primary : styles.colors.border}\n                  strokeWidth={focused ? 6 : 3}\n                  aria-label={n.Name}\n                />\n                <text\n                  x={pos.x}\n                  y={pos.y+4}\n                  textAnchor=\"middle\"\n                  style={{\n                    fontSize: focused ? styles.typography.fontSize.lg : styles.typography.fontSize.md,\n                    fill: focused ? '#fff' : styles.colors.text,\n                    fontWeight: 500,\n                    fontFamily: styles.typography.fontFamily,\n                    pointerEvents: 'none',\n                    userSelect: 'none'\n                  }}\n                >\n                  {n.Name}\n                </text>\n                {focused && (\n                  <text\n                    x={pos.x}\n                    y={pos.y+nodeRadius+20}\n                    textAnchor=\"middle\"\n                    style={{ fontSize: styles.typography.fontSize.sm, fill: styles.colors.textSecondary, fontFamily: styles.typography.fontFamily }}\n                  >\n                    (active)\n                  </text>\n                )}\n              </g>\n            );\n          })}\n        </g>\n      </svg>\n      {/* Tooltip */}\n      {tooltip && (\n        <div\n          style={{\n            position: 'fixed',\n            top: tooltip.y+10,\n            left: tooltip.x+10,\n            background: styles.colors.surface,\n            color: styles.colors.text,\n            border: `1px solid ${styles.colors.border}`,\n            borderRadius: styles.borders.radius,\n            padding: styles.spacing.sm,\n            pointerEvents: 'none',\n            boxShadow: styles.shadows?.md || '0 1px 12px rgba(0,0,0,0.09)',\n            zIndex: 2,\n            minWidth: 160,\n            fontFamily: styles.typography.fontFamily,\n            fontSize: styles.typography.fontSize.sm\n          }}\n          aria-live=\"polite\"\n        >\n          <strong>{tooltip.name}</strong>\n          <div>{tooltip.summary}</div>\n          {tooltip.entity && (\n            <div style={{ marginTop: 4 }}>\n              <span style={{ color: styles.colors.textSecondary }}>ID:</span> {tooltip.entity.ID}\n            </div>\n          )}\n        </div>\n      )}\n      {/* Controls */}\n      <div style={{\n        position: 'absolute',\n        bottom: styles.spacing.md,\n        left: styles.spacing.md,\n        background: 'rgba(0,0,0,0.02)',\n        borderRadius: styles.borders.radius,\n        padding: styles.spacing.sm,\n        boxShadow: styles.shadows?.sm,\n        display: 'flex',\n        gap: styles.spacing.sm,\n        alignItems: 'center',\n        zIndex: 1\n      }}>\n        <label htmlFor=\"focus-entity\" style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.textSecondary }}>Focus:</label>\n        <select\n          id=\"focus-entity\"\n          value={focusedID || ''}\n          style={{\n            fontSize: styles.typography.fontSize.sm,\n            padding: styles.spacing.xs,\n            borderRadius: styles.borders.radius,\n            border: `1px solid ${styles.colors.border}`,\n          }}\n          onChange={e => nodeClick(entityList.find(ent => ent.ID === e.target.value))}\n          aria-label=\"Select entity focus\"\n        >\n          {entityList.map(e => (\n            <option value={e.ID} key={e.ID}>{e.Name}</option>\n          ))}\n        </select>\n        <button\n          style={{\n            background: styles.colors.primary,\n            color: '#fff',\n            border: 'none',\n            borderRadius: styles.borders.radius,\n            padding: `0 ${styles.spacing.sm}`,\n            marginLeft: styles.spacing.sm,\n            height: 30,\n            cursor: 'pointer',\n            fontSize: styles.typography.fontSize.sm,\n            transition: styles.transitions?.fast\n          }}\n          aria-label=\"Reset pan and zoom\"\n          onClick={()=>{\n            setLocalState(ls => ({ ...ls, pan: {x:0, y:0}, zoom:1 }));\n            onEvent && onEvent({\n              type: 'stateChanged',\n              source: 'SchemaDiagram',\n              payload: { statePath, newState: { ...localState, pan: {x:0,y:0}, zoom:1 } },\n              bubbles: true\n            });\n          }}\n        >Reset view\n        </button>\n      </div>\n      {/* Empty state */}\n      {entityList.length === 0 && (\n        <div style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', display: 'flex', alignItems:'center', justifyContent:'center', color: styles.colors.textSecondary, fontSize: styles.typography.fontSize.lg }}>\n          No entities available to visualize\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "componentName": "EntitySearchFilterBar",
      "exampleUsage": "<EntitySearchFilterBar query={searchQuery} onSearchChange={handleSearchChange} filter={entityFilter} onFilterChange={handleFilterChange} />",
      "description": "Provides global search input and filter controls for entity type and permission filtering.",
      "functionalRequirements": "• Fuzzy search as-you-type support.\n• Filter pills/checkboxes for entity type and field permissions.\n• Accessible input and filter controls.\n• Triggers results update callbacks.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entities",
              "displayFields": [
                "ID",
                "Name",
                "SchemaName"
              ]
            }
          ],
          "description": "Used to implement live global search and filtering."
        }
      },
      "technicalDesign": "Controlled input and checkboxes. Handles debounce for search. Exposes ARIA attributes on controls. Triggers update callbacks on change.",
      "statePath": "EntitySearchFilterBar",
      "componentCode": "function EntitySearchFilterBar({ data, styles, config, userState, statePath, onEvent, callbacks, utilities }) {\n    const [localState, setLocalState] = React.useState({\n        searchQuery: '',\n        selectedTypes: [],\n        selectedPermissions: [],\n        ...userState\n    });\n\n    const debounceMs = 300;\n    const debounceTimer = React.useRef();\n\n    // Get dynamic metadata from MemberJunction\n    const entityMetadata = utilities?.md?.entities || [];\n    // Fallback: if dynamic not available, try data.data_item_0\n    // (Parent will provide correctly)\n    const entities = entityMetadata.length > 0 ? entityMetadata : (Array.isArray(data) ? data : data?.Entities || []);\n\n    const allEntityTypes = React.useMemo(() => {\n        // Use unique SchemaName for filter chips\n        const types = entities.map(e => e.SchemaName).filter(Boolean);\n        return Array.from(new Set(types));\n    }, [entities]);\n\n    const allPermissions = React.useMemo(() => {\n        // Look for field-level permission hints (simulate as needed)\n        // For demo, show just: ['Read', 'Write', 'Delete']\n        return ['Read', 'Write', 'Delete'];\n    }, []);\n\n    const updateStateAndNotify = (newPartialState) => {\n        const newState = { ...localState, ...newPartialState };\n        setLocalState(newState);\n        if (onEvent) {\n            onEvent({\n                type: 'stateChanged',\n                source: 'EntitySearchFilterBar',\n                payload: { statePath, newState },\n                bubbles: true\n            });\n        }\n        // If a parent wants a callback for query/filter change\n        if (config?.onSearchChange && typeof config.onSearchChange === 'function') {\n            config.onSearchChange(newState.searchQuery);\n        }\n        if (config?.onFilterChange && typeof config.onFilterChange === 'function') {\n            config.onFilterChange({\n                types: newState.selectedTypes,\n                permissions: newState.selectedPermissions\n            });\n        }\n    };\n\n    const handleQueryChange = (e) => {\n        const query = e.target.value;\n        setLocalState(prev => ({ ...prev, searchQuery: query }));\n        if (debounceTimer.current) clearTimeout(debounceTimer.current);\n        debounceTimer.current = setTimeout(() => {\n            updateStateAndNotify({ searchQuery: query });\n        }, debounceMs);\n    };\n\n    // For a11y: input refs\n    const searchBoxRef = React.useRef(null);\n\n    // Filter handers (no debounce, instant update)\n    const handleTypeToggle = (type) => {\n        let newSelected;\n        if (localState.selectedTypes.includes(type)) {\n            newSelected = localState.selectedTypes.filter(t => t !== type);\n        } else {\n            newSelected = [...localState.selectedTypes, type];\n        }\n        updateStateAndNotify({ selectedTypes: newSelected });\n    };\n\n    const handlePermissionToggle = (permission) => {\n        let newSelected;\n        if (localState.selectedPermissions.includes(permission)) {\n            newSelected = localState.selectedPermissions.filter(p => p !== permission);\n        } else {\n            newSelected = [...localState.selectedPermissions, permission];\n        }\n        updateStateAndNotify({ selectedPermissions: newSelected });\n    };\n\n    // ARIA labels for accessibility\n    const typeAriaLabel = 'Filter by entity type';\n    const permAriaLabel = 'Filter by permission';\n\n    return (\n        <div style={{\n            background: styles.colors.surface,\n            padding: styles.spacing.sm,\n            borderRadius: styles.borders.radius,\n            boxShadow: styles.shadows?.sm,\n            display: 'flex',\n            flexDirection: 'column',\n            gap: styles.spacing.sm\n        }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.sm }}>\n                <input\n                    ref={searchBoxRef}\n                    type=\"search\"\n                    aria-label=\"Global entity search\"\n                    placeholder=\"Search entities...\"\n                    value={localState.searchQuery}\n                    onChange={handleQueryChange}\n                    style={{\n                        flex: 1,\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.md,\n                        borderRadius: styles.borders.radius,\n                        border: `1px solid ${styles.colors.border}`,\n                        outline: 'none',\n                        background: styles.colors.background\n                    }}\n                />\n            </div>\n            <div style={{ display: 'flex', gap: styles.spacing.md, alignItems: 'center' }}>\n                <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.xs }} aria-label={typeAriaLabel}>\n                    {allEntityTypes.map(type => (\n                        <button\n                            key={type}\n                            type=\"button\"\n                            aria-pressed={localState.selectedTypes.includes(type)}\n                            tabIndex={0}\n                            onClick={() => handleTypeToggle(type)}\n                            style={{\n                                padding: `${styles.spacing.xs} ${styles.spacing.sm}`,\n                                background: localState.selectedTypes.includes(type) ? styles.colors.primary : styles.colors.surface,\n                                color: localState.selectedTypes.includes(type) ? '#fff' : styles.colors.text,\n                                border: `1px solid ${styles.colors.border}`,\n                                borderRadius: styles.borders.radius,\n                                fontSize: styles.typography.fontSize.sm,\n                                cursor: 'pointer',\n                                outline: 'none',\n                                transition: 'background 0.15s',\n                                boxShadow: styles.shadows?.xs\n                            }}\n                            aria-label={`Toggle filter for ${type}`}\n                        >\n                            {type}\n                        </button>\n                    ))}\n                </div>\n                <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.xs }} aria-label={permAriaLabel}>\n                    {allPermissions.map(permission => (\n                        <button\n                            key={permission}\n                            type=\"button\"\n                            aria-pressed={localState.selectedPermissions.includes(permission)}\n                            tabIndex={0}\n                            onClick={() => handlePermissionToggle(permission)}\n                            style={{\n                                padding: `${styles.spacing.xs} ${styles.spacing.sm}`,\n                                background: localState.selectedPermissions.includes(permission) ? styles.colors.secondary : styles.colors.surface,\n                                color: localState.selectedPermissions.includes(permission) ? '#fff' : styles.colors.text,\n                                border: `1px solid ${styles.colors.border}`,\n                                borderRadius: styles.borders.radius,\n                                fontSize: styles.typography.fontSize.sm,\n                                cursor: 'pointer',\n                                outline: 'none',\n                                transition: 'background 0.15s',\n                                boxShadow: styles.shadows?.xs\n                            }}\n                            aria-label={`Toggle filter for ${permission} permission`}\n                        >\n                            {permission}\n                        </button>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n"
    },
    {
      "componentName": "FieldDetailDrawer",
      "exampleUsage": "<FieldDetailDrawer field={focusedField} visible={!!focusedFieldId} onClose={handleCloseDrawer} />",
      "description": "Shows an in-depth detail view of a field, including contextual explanation, usage stats, version/change history.",
      "functionalRequirements": "• Slides out as modal/drawer when field is selected.\n• Presents technical/business detail, usage stats, and version history.\n• Supports keyboard trap and close-on-Escape.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entity Fields",
              "displayFields": [
                "ID",
                "Name",
                "Description",
                "RelatedEntityID",
                "AllowUpdateAPI",
                "IncludeInGeneratedForm"
              ]
            }
          ],
          "description": "Detailed field drill-down on click."
        }
      },
      "technicalDesign": "Modal drawer with ARIA modal semantics, keyboard trap. Receives field ID/props, fetches details if not present. Esc/close icon closes drawer.",
      "statePath": "FieldDetailDrawer",
      "componentCode": "function FieldDetailDrawer({ data, styles, config, userState, statePath, onEvent, callbacks, utilities }) {\n    const [localState, setLocalState] = React.useState({ ...userState });\n    const [loading, setLoading] = React.useState(false);\n    const [fieldDetail, setFieldDetail] = React.useState(null);\n\n    // Expect parent to pass focusedField; if not, try to fetch via dynamic data\n    const field = data?.field || null;\n    const visible = Boolean(data?.visible);\n    const AntdDrawer = window.antd ? window.antd.Drawer : null;\n    const AntdTabs = window.antd ? window.antd.Tabs : null;\n    const AntdTable = window.antd ? window.antd.Table : null;\n    const AntdSpin = window.antd ? window.antd.Spin : null;\n    const AntdTag = window.antd ? window.antd.Tag : null;\n    const AntdButton = window.antd ? window.antd.Button : null;\n    const TabPane = AntdTabs ? AntdTabs.TabPane : null;\n\n    React.useEffect(() => {\n        if (!utilities || !utilities.rv || !field || fieldDetail?.ID === field.ID) return;\n        setLoading(true);\n        utilities.rv\n            .runView({\n                EntityName: 'Entity Fields',\n                ExtraFilter: `ID = '${field.ID}'`,\n                ResultType: 'simple',\n                MaxRows: 1\n            })\n            .then(result => {\n                if (result && result.Success && result.Results && result.Results.length > 0) {\n                    setFieldDetail(result.Results[0]);\n                } else {\n                    setFieldDetail(null);\n                }\n            })\n            .finally(() => setLoading(false));\n    }, [field && field.ID]);\n\n    const mergedField = fieldDetail || field;\n    const handleClose = () => {\n        if (onEvent) onEvent({\n            type: 'actionTriggered',\n            source: 'FieldDetailDrawer',\n            payload: { action: 'close' },\n            bubbles: true\n        });\n    };\n\n    // Accessibility - keyboard trap & Escape\n    React.useEffect(() => {\n        if (!visible) return;\n        function onKeyDown(e) {\n            if (e.key === 'Escape') handleClose();\n        }\n        window.addEventListener('keydown', onKeyDown);\n        return () => window.removeEventListener('keydown', onKeyDown);\n    }, [visible]);\n\n    if (!AntdDrawer || !AntdTabs || !AntdTable) {\n        return <div style={{ padding: styles?.spacing?.xl, textAlign: 'center', color: styles?.colors?.textSecondary }}>Ant Design library is required for this component</div>;\n    }\n    if (!visible || !mergedField) return null;\n\n    // Simulate usage stats and version history (as fetching is not detailed in dataRequirements)\n    const dummyUsage = [\n        { label: 'Form Uses', value: 4 },\n        { label: 'Used in APIs', value: mergedField.AllowUpdateAPI ? 'Yes' : 'No' },\n        { label: 'Default on Forms', value: mergedField.IncludeInGeneratedForm ? 'Yes' : 'No' }\n    ];\n    const dummyHistory = [\n        { version: 'v2', changedBy: 'Alice', date: '2024-06-08', change: 'Allow update via API enabled.' },\n        { version: 'v1', changedBy: 'Bob', date: '2024-05-29', change: 'Field created.' }\n    ];\n\n    const mainInfoRows = [\n        { key: 'Name', value: mergedField.Name },\n        { key: 'Description', value: mergedField.Description },\n        { key: 'Type', value: mergedField.Type || mergedField.type },\n        { key: 'Related Entity', value: mergedField.RelatedEntityID || '—' },\n        { key: 'Allow Update API', value: mergedField.AllowUpdateAPI ? 'Yes' : 'No' },\n        { key: 'Include In Gen Form', value: mergedField.IncludeInGeneratedForm ? 'Yes' : 'No' },\n        { key: 'ID', value: mergedField.ID }\n    ];\n\n    const InfoTable = () => (\n        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: styles.typography.fontSize.md }}>\n            <tbody>\n                {mainInfoRows.map(row => (\n                    <tr key={row.key}>\n                        <td style={{ fontWeight: 500, padding: styles.spacing.xs }}>{row.key}</td>\n                        <td style={{ padding: styles.spacing.xs }}>{row.value}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n    const UsageTable = () => (\n        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: styles.typography.fontSize.md }}>\n            <tbody>\n                {dummyUsage.map((row, i) => (\n                    <tr key={i}>\n                        <td style={{ fontWeight: 500, padding: styles.spacing.xs }}>{row.label}</td>\n                        <td style={{ padding: styles.spacing.xs }}>{row.value}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n    const VersionTable = () => (\n        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: styles.typography.fontSize.md }}>\n            <thead>\n                <tr>\n                    <th style={{ padding: styles.spacing.xs, fontWeight: 500 }}>Version</th>\n                    <th style={{ padding: styles.spacing.xs, fontWeight: 500 }}>Changed By</th>\n                    <th style={{ padding: styles.spacing.xs, fontWeight: 500 }}>Date</th>\n                    <th style={{ padding: styles.spacing.xs, fontWeight: 500 }}>Change</th>\n                </tr>\n            </thead>\n            <tbody>\n                {dummyHistory.map((row, i) => (\n                    <tr key={i}>\n                        <td style={{ padding: styles.spacing.xs }}>{row.version}</td>\n                        <td style={{ padding: styles.spacing.xs }}>{row.changedBy}</td>\n                        <td style={{ padding: styles.spacing.xs }}>{row.date}</td>\n                        <td style={{ padding: styles.spacing.xs }}>{row.change}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n\n    return React.createElement(AntdDrawer, {\n        title: (\n            <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.sm }}>\n                <span style={{ fontWeight: 600, fontSize: styles.typography.fontSize.lg }}>Field Detail</span>\n                {mergedField.Name && <span style={{ color: styles.colors.textSecondary }}>({mergedField.Name})</span>}\n            </div>\n        ),\n        width: 420,\n        open: visible,\n        placement: 'right',\n        closable: true,\n        keyboard: true,\n        maskClosable: true,\n        bodyStyle: {\n            padding: styles.spacing.lg,\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            background: styles.colors.surface\n        },\n        onClose: handleClose,\n        style: { zIndex: 1099, fontFamily: styles.typography.fontFamily }\n    },\n        loading ? (<AntdSpin size=\"large\" style={{ width: '100%', marginTop: styles.spacing.xl }} />)\n        : (\n            React.createElement(AntdTabs, { defaultActiveKey: '1', style: { height: '100%' } },\n                React.createElement(TabPane, { tab: 'Details', key: '1' },\n                    <div style={{ paddingTop: styles.spacing.md }}><InfoTable /></div>\n                ),\n                React.createElement(TabPane, { tab: 'Usage', key: '2' },\n                    <div style={{ paddingTop: styles.spacing.md }}><UsageTable /></div>\n                ),\n                React.createElement(TabPane, { tab: 'Version History', key: '3' },\n                    <div style={{ paddingTop: styles.spacing.md }}><VersionTable /></div>\n                )\n            )\n        )\n    );\n}\n"
    }
  ],
  "componentCode": "function EntityViewer({ data, utilities, userState, callbacks, styles, components }) {\n  const {\n    EntityTree,\n    EntityBreadcrumbs,\n    EntityMetadataPanel,\n    SchemaDiagram,\n    EntitySearchFilterBar,\n    FieldDetailDrawer\n  } = components;\n  const React = window.React;\n  const { useState, useEffect, useRef } = React;\n\n  // ---- State Management ----\n  const defaultState = {\n    expandedEntityIds: [],         // IDs of expanded entities in the tree\n    activeEntityId: null,          // Currently selected entity\n    breadcrumbTrail: [],           // Array of IDs for breadcrumbs\n    searchQuery: '',               // Current search string\n    entityFilter: {},              // { type, dataClass, tags, date, permission }\n    viewMode: 'Technical',         // 'Technical' | 'Business'\n    schemaDiagramVisible: false,   // Show/hide ERD diagram\n    childCounts: {},               // { entityId: childCount }\n    metadataPanel: {},             // Child state: EntityMetadataPanel\n    fieldDetail: null,             // Field ID for FieldDetailDrawer\n    searchFilterBar: {},           // Child state: EntitySearchFilterBar\n    tree: {},                      // Child state: EntityTree\n    breadcrumbs: {},               // Child: EntityBreadcrumbs\n    diagram: {},                   // Child: SchemaDiagram\n    drawer: {},                    // Child: FieldDetailDrawer\n    loading: false,                // Loading dynamic data\n    error: null                    // Top-level error\n  };\n  // Merge incoming userState (from persistence)\n  const [fullUserState, setFullUserState] = useState({ ...defaultState, ...userState });\n\n  // ---- State Updater ----\n  const updateUserState = (stateUpdate) => {\n    const newState = { ...fullUserState, ...stateUpdate };\n    setFullUserState(newState);\n    if (callbacks?.UpdateUserState) callbacks.UpdateUserState(newState);\n  };\n\n  // ---- Child Event Handler ----\n  const handleComponentEvent = (event) => {\n    // Accessibility live region feedback\n    if (event.type === 'error') {\n      updateUserState({ error: event.payload.error });\n      return;\n    }\n    // Tree selection: Navigates (updates breadcrumbs, resets details)\n    if (event.type === 'entitySelected') {\n      const entityId = event.payload.itemId;\n      updateUserState({\n        activeEntityId: entityId,\n        fieldDetail: null,\n        schemaDiagramVisible: false\n      });\n      // Compute breadcrumbs (root-to-active)\n      const entityList = entityArray;\n      let trail = [];\n      let currId = entityId;\n      while (currId) {\n        const ent = entityList.find(e => e.ID === currId);\n        if (ent) {\n          trail.unshift({ ID: ent.ID, Name: ent.Name });\n          currId = ent.ParentID;\n        } else break;\n      }\n      updateUserState({ breadcrumbTrail: trail });\n      return;\n    }\n    // Breadcrumb nav: Jump to ancestor entity\n    if (event.type === 'breadcrumbNavigate') {\n      const { itemId } = event.payload;\n      updateUserState({ activeEntityId: itemId, fieldDetail: null, schemaDiagramVisible: false });\n      // Update breadcrumbs accordingly (handled above)\n      return;\n    }\n    // Drill into field (open drawer)\n    if (event.type === 'fieldSelected') {\n      updateUserState({ fieldDetail: event.payload.itemId });\n      return;\n    }\n    // Search/filter change\n    if (event.type === 'searchChanged') {\n      updateUserState({ searchQuery: event.payload.value });\n      return;\n    }\n    if (event.type === 'filterChanged') {\n      updateUserState({ entityFilter: event.payload.filter });\n      return;\n    }\n    // Toggle schema diagram\n    if (event.type === 'toggleSchemaDiagram') {\n      updateUserState({ schemaDiagramVisible: !fullUserState.schemaDiagramVisible });\n      return;\n    }\n    // Close field drawer\n    if (event.type === 'drawerClosed') {\n      updateUserState({ fieldDetail: null });\n      return;\n    }\n    // Default: delegate to standard handler\n    const standardHandler = createStandardEventHandler(updateUserState, callbacks);\n    standardHandler(event);\n  };\n\n  // ---- Dynamic DATA: Entities/Fields/Relationships via utilities.rv.runView ----\n  const [entityArray, setEntityArray] = useState([]);\n  const [fullFieldMap, setFullFieldMap] = useState({}); // { entityId: [fields] }\n  const [relationshipMap, setRelationshipMap] = useState({}); // { entityId: [relationships] }\n  const [childCounts, setChildCounts] = useState({}); // { entityId: childCount }\n\n  // Helper: load all entities/fields/relationships as needed for tree and detail panels\n  useEffect(() => {\n    let isMounted = true;\n    async function loadEntitiesAndRelated() {\n      updateUserState({ loading: true, error: null });\n      try {\n        // Entities - always load\n        const entResult = await utilities.rv.runView({\n          EntityName: 'Entities',\n          Fields: ['ID','Name','Description','ParentID'],\n          OrderBy: 'Name',\n          ResultType: 'simple'\n        });\n        if (!entResult.Success) throw new Error(entResult.Message || 'Entities fetch failed');\n        const entities = entResult.Results;\n        // Map: {ID: entity, ...}\n        // Compute child counts\n        const childCountMap = {};\n        entities.forEach(e => { childCountMap[e.ID] = 0; });\n        entities.forEach(e => { if (e.ParentID && childCountMap[e.ParentID] != null) childCountMap[e.ParentID]++; });\n        // (Optional: Compute hierarchy tree if needed for performance)\n\n        // Fields for all entities\n        const fieldsResult = await utilities.rv.runView({\n          EntityName: 'Entity Fields',\n          Fields: ['ID','Name','Description','RelatedEntityID','AllowUpdateAPI','IncludeInGeneratedForm','EntityID'],\n          ResultType: 'simple',\n          MaxRows: 10000\n        });\n        if (!fieldsResult.Success) throw new Error(fieldsResult.Message || 'Entity Fields fetch failed');\n        const allFields = fieldsResult.Results;\n        const fieldsByEntity = entities.reduce((acc,e) => {\n          acc[e.ID] = allFields.filter(f => f.EntityID === e.ID);\n          return acc;\n        }, {});\n        // Relationships\n        const relResult = await utilities.rv.runView({\n          EntityName: 'Entity Relationships',\n          Fields: ['ID','EntityID','RelatedEntityID','Type','DisplayName'],\n          ResultType: 'simple',\n          MaxRows: 10000\n        });\n        if (!relResult.Success) throw new Error(relResult.Message || 'Relationships fetch failed');\n        const allRels = relResult.Results;\n        const relsByEntity = entities.reduce((acc,e) => {\n          acc[e.ID] = allRels.filter(r => r.EntityID === e.ID);\n          return acc;\n        }, {});\n\n        if (isMounted) {\n          setEntityArray(entities);\n          setFullFieldMap(fieldsByEntity);\n          setRelationshipMap(relsByEntity);\n          setChildCounts(childCountMap);\n          updateUserState({ loading: false, error: null });\n        }\n      } catch (err) {\n        if (isMounted) {\n          setEntityArray([]);\n          setFullFieldMap({});\n          setRelationshipMap({});\n          setChildCounts({});\n          updateUserState({ loading: false, error: err.message || 'Data Load Error', error: err.message });\n        }\n      }\n    }\n    loadEntitiesAndRelated();\n    return () => { isMounted = false; };\n    // Only on initial mount or RefreshData\n    // eslint-disable-next-line\n  }, []);\n  // Allow explicit refresh\n  useEffect(() => {\n    if (fullUserState._requireRefresh) {\n      // Trigger reload on demand\n      setFullUserState(s => ({ ...s, _requireRefresh: false }));\n      callbacks?.RefreshData && callbacks.RefreshData();\n    }\n    // eslint-disable-next-line\n  }, [fullUserState._requireRefresh]);\n\n  // ---- FILTER entities for search/filter bar ----\n  let filteredEntities = entityArray;\n  if (fullUserState.searchQuery) {\n    const q = fullUserState.searchQuery.toLowerCase();\n    filteredEntities = filteredEntities.filter(e => (e.Name||'').toLowerCase().includes(q) || (e.Description||'').toLowerCase().includes(q));\n  }\n  // Add future filter logic by entityFilter\n\n  // Active entity\n  const activeEntity = entityArray.find(e => e.ID === fullUserState.activeEntityId) || null;\n  const activeFields = activeEntity ? (fullFieldMap[activeEntity.ID]||[]) : [];\n  const activeRelationships = activeEntity ? (relationshipMap[activeEntity.ID]||[]) : [];\n  const breadCrumbTrail = fullUserState.breadcrumbTrail.length > 0\n    ? fullUserState.breadcrumbTrail\n    : (activeEntity ? (() => { // Compute trail on first load if none\n        let trail = [];\n        let currId = activeEntity.ID;\n        while (currId) {\n          const ent = entityArray.find(e => e.ID === currId);\n          if (!ent) break;\n          trail.unshift({ ID: ent.ID, Name: ent.Name });\n          currId = ent.ParentID;\n        }\n        return trail;\n      })() : []);\n\n  // ---- Accessibility: ARIA live region for errors ----\n  const ariaLiveRef = useRef(null);\n  useEffect(() => {\n    if (ariaLiveRef.current && fullUserState.error) {\n      ariaLiveRef.current.textContent = fullUserState.error;\n    }\n  }, [fullUserState.error]);\n\n  // ---- Layout ----\n  return (\n    React.createElement('div', {\n      role: 'main',\n      'aria-label': 'Entity Metadata Explorer',\n      style: {\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        background: styles.colors.background,\n        color: styles.colors.text\n      }\n    },\n      // Toolbar (search + filters)\n      React.createElement('div', {\n        style: {\n          borderBottom: `1px solid ${styles.colors.border}`,\n          background: styles.colors.surface,\n          padding: styles.spacing.sm,\n          display: 'flex',\n          alignItems: 'center',\n          gap: styles.spacing.sm,\n          minHeight: 56\n        }\n      },\n        React.createElement(EntitySearchFilterBar, {\n          data: { entities: entityArray },\n          userState: fullUserState.searchFilterBar,\n          onEvent: handleComponentEvent,\n          styles,\n          callbacks,\n          utilities,\n          statePath: 'searchFilterBar',\n          query: fullUserState.searchQuery,\n          filter: fullUserState.entityFilter\n        })\n      ),\n      // Accessibility live feedback\n      React.createElement('div', {\n        ref: ariaLiveRef,\n        'aria-live': 'polite',\n        style: { position: 'absolute', left: -9999, top: 'auto', width: 1, height: 1, overflow: 'hidden' }\n      }, (fullUserState.error ? fullUserState.error : '')),\n      // MAIN window split\n      React.createElement('div', {\n        style: {\n          display: 'flex',\n          flex: 1,\n          height: '100%',\n          minHeight: 0,\n          minWidth: 0,\n          gap: styles.spacing.md\n        }\n      },\n        // Left panel: Entity Tree\n        React.createElement('div', {\n          style: {\n            width: 340,\n            minWidth: 240,\n            maxWidth: 400,\n            background: styles.colors.surface,\n            borderRight: `1px solid ${styles.colors.border}`,\n            overflow: 'auto',\n            display: 'flex',\n            flexDirection: 'column'\n          },\n          role: 'region',\n          'aria-label': 'Entity Hierarchy'\n        },\n          React.createElement('div', {\n            style: { flex: 1, minHeight: 0 }\n          },\n            React.createElement(EntityTree, {\n              data: filteredEntities,\n              userState: fullUserState.tree,\n              onEvent: handleComponentEvent,\n              statePath: 'tree',\n              styles,\n              callbacks,\n              utilities,\n              expandedIds: fullUserState.expandedEntityIds,\n              childCounts: childCounts,\n              selectedId: fullUserState.activeEntityId,\n              filter: fullUserState.entityFilter\n            })\n          )\n        ),\n        // Central panel: Breadcrumbs + Metadata\n        React.createElement('div', {\n          style: {\n            flex: 1,\n            minWidth: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            background: styles.colors.surface\n          }\n        },\n          // Breadcrumbs\n          React.createElement('div', {\n            style: {\n              padding: styles.spacing.sm,\n              borderBottom: `1px solid ${styles.colors.border}`,\n              background: styles.colors.surface,\n              minHeight: 44\n            },\n            role: 'navigation',\n            'aria-label': 'Breadcrumb Navigation'\n          },\n            React.createElement(EntityBreadcrumbs, {\n              path: breadCrumbTrail,\n              userState: fullUserState.breadcrumbs,\n              onEvent: handleComponentEvent,\n              statePath: 'breadcrumbs',\n              styles,\n              callbacks,\n              utilities\n            })\n          ),\n          // Entity Metadata\n          React.createElement('div', {\n            style: { flex: 1, minHeight: 0, overflow: 'auto', background: styles.colors.surface }\n          },\n            activeEntity && React.createElement(EntityMetadataPanel, {\n              entity: activeEntity,\n              fields: activeFields,\n              userState: fullUserState.metadataPanel,\n              onEvent: handleComponentEvent,\n              statePath: 'metadataPanel',\n              styles,\n              callbacks,\n              utilities,\n              viewMode: fullUserState.viewMode,\n              relationships: activeRelationships\n            }),\n            !activeEntity && React.createElement('div', {\n              style: { padding: styles.spacing.xl, color: styles.colors.textSecondary, textAlign: 'center' }\n            }, 'Select an entity from the left to view details.')\n          ),\n          // Toggle ERD button (only if selection)\n          activeEntity && React.createElement('div', {\n            style: {\n              textAlign: 'right',\n              borderTop: `1px solid ${styles.colors.border}`,\n              padding: styles.spacing.sm,\n              background: styles.colors.surface,\n              minHeight: 44\n            }\n          },\n            React.createElement('button', {\n              onClick: () => handleComponentEvent({ type: 'toggleSchemaDiagram', source: 'EntityViewer', payload: {}, bubbles: true }),\n              style: {\n                background: styles.colors.primary,\n                color: '#fff',\n                border: 'none',\n                borderRadius: styles.borders.radius,\n                padding: `${styles.spacing.xs} ${styles.spacing.lg}`,\n                minHeight: 36,\n                cursor: 'pointer',\n                fontSize: styles.typography.fontSize.md,\n                marginLeft: styles.spacing.sm\n              },\n              'aria-label': (fullUserState.schemaDiagramVisible ? 'Hide schema diagram' : 'Show schema diagram')\n            },\n              (fullUserState.schemaDiagramVisible ? 'Hide' : 'Show') + ' Schema Diagram'\n            )\n          ),\n          // ERD diagram, floating panel or inline\n          (activeEntity && fullUserState.schemaDiagramVisible) && React.createElement('div', {\n            style: {\n              height: 300,\n              borderTop: `1px solid ${styles.colors.border}`,\n              background: styles.colors.surface,\n              padding: styles.spacing.md,\n              overflow: 'auto',\n              position: 'relative'\n            }\n          },\n            React.createElement(SchemaDiagram, {\n              entity: activeEntity,\n              relationships: activeRelationships,\n              userState: fullUserState.diagram,\n              onEvent: handleComponentEvent,\n              statePath: 'diagram',\n              styles,\n              callbacks,\n              utilities,\n              display: true\n            })\n          )\n        )\n      ),\n      // Field detail drawer\n      (fullUserState.fieldDetail && activeFields.length > 0) && React.createElement(FieldDetailDrawer, {\n        field: activeFields.find(f => f.ID === fullUserState.fieldDetail),\n        userState: fullUserState.drawer,\n        onEvent: handleComponentEvent,\n        statePath: 'drawer',\n        styles,\n        callbacks,\n        utilities,\n        visible: !!fullUserState.fieldDetail,\n        onClose: () => handleComponentEvent({ type: 'drawerClosed', source: 'EntityViewer', payload: {}, bubbles: true })\n      }),\n      // Loading & error\n      (fullUserState.loading) && React.createElement('div', {\n        role: 'status',\n        'aria-live': 'polite',\n        style: { position: 'fixed', left: 0, top: 0, right: 0, textAlign: 'center', padding: styles.spacing.md, background: styles.colors.info, color: '#fff', zIndex: 90, fontSize: styles.typography.fontSize.lg }\n      }, 'Loading, please wait...'),\n      (fullUserState.error && !fullUserState.loading) && React.createElement('div', {\n        role: 'alert',\n        style: { position: 'fixed', left: 0, top: 0, right: 0, textAlign: 'center', padding: styles.spacing.md, background: styles.colors.error, color: '#fff', zIndex: 100, fontSize: styles.typography.fontSize.lg }\n      }, fullUserState.error)\n    )\n  );\n}",
  "componentName": "EntityViewer",
  "componentType": "dashboard",
  "title": "Entity Metadata Explorer"
}