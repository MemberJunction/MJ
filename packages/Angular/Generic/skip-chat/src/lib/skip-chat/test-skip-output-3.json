{
  "functionalRequirements": "### Functional Requirements for Entity List Viewer\n\n**1. Entity Browser Interface**\n- Presents alphabetically sorted list of business-critical entities (e.g., 'Customer', 'Order', 'Product')\n- Shows icon badges for entity categories (Master Data, Operational, Reference)\n- Includes filters by data source (CRM, ERP), last modified date (7d, 1m, 3m), and user access status\n\n**2. Interactive Entity Records**\n- Clickable entity cards expand/collapse for nested relationships\n- Right-click context menu enables quick actions: Add New Item, Export Definition, Compare Versions, Clone Entity\n- Drag-and-drop reordering of fields in detail view\n\n**3. Field-Level Analysis**\n- Shows field name, data type, and description in a fixed-width grid\n- Visual indicators for: Required fields, Privacy level (Public, Internal, Confidential), Data Source\n- Hover tooltips for: Business rules, Example values, Cross-references to other entities\n\n**4. Metadata Dashboard**\n- Summary panel with: Record count, Last modified timestamp, Data Quality score \n- Historical versioning with comparison capability\n- Lineage map showing connections to upstream systems\n\n**Accessibility Requirements**\n- Keyboard navigation via [Table Key] for entity selection\n- Screen reader support with ARIA labels\n- High-contrast mode for color-vision deficient users",
  "componentName": "EntityBrowser",
  "componentType": "other",
  "title": "Entity Structure Explorer",
  "userExplanation": "This tool helps you discover, understand, and analyze your system's business entities. Browse available entities to see their field definitions, metadata, and relationships. Drill down to examine technical details and business rules.",
  "dataRequirements": {
    "dynamic": {
      "sources": {
        "entities": {
          "entity": "Entities",
          "fieldsToFetch": [
            "ID",
            "Name",
            "Description",
            "Category",
            "DataSource",
            "RecordCount",
            "DataQualityScore",
            "LastModifiedTimestamp"
          ]
        },
        "fields": {
          "entity": "Entity Fields",
          "fieldsToFetch": [
            "ID",
            "EntityID",
            "Name",
            "DataType",
            "Description",
            "Required",
            "PrivacyLevel",
            "DataSource",
            "IsPrimaryKey",
            "IsUnique"
          ]
        },
        "relationships": {
          "entity": "Entity Relationships",
          "fieldsToFetch": [
            "ID",
            "EntityID",
            "RelatedEntityID",
            "Type",
            "EntityKeyField",
            "RelatedEntityJoinField"
          ]
        },
        "metadata": {
          "entity": "Entity Field Values",
          "fieldsToFetch": [
            "EntityName",
            "FieldName",
            "BusinessRules",
            "CrossReferences"
          ]
        },
        "history": {
          "entity": "Entity Document Runs",
          "fieldsToFetch": [
            "EntityName",
            "VersionNumber",
            "ModifiedBy",
            "ModifiedDate"
          ]
        }
      },
      "filters": {
        "categoryFilter": "Entities.Category IN ('Master Data', 'Operational', 'Reference')",
        "dataSourceFilter": "Entities.DataSource IN ('CRM', 'ERP')",
        "privacyFilter": "Entity Fields.PrivacyLevel IN ('Public', 'Internal', 'Confidential')"
      },
      "views": {
        "entitiesList": {
          "entity": "Entities",
          "orderBy": "Name ASC"
        },
        "fieldGrid": {
          "entity": "Entity Fields",
          "fields": [
            "EntityID",
            "Name",
            "DataType",
            "Description",
            "Required",
            "PrivacyLevel",
            "DataSource"
          ]
        },
        "lineageMap": {
          "entity": "Entity Relationships",
          "fields": [
            "EntityID",
            "RelatedEntityID",
            "Type"
          ]
        }
      }
    }
  },
  "technicalDesign": "# Technical Design for Entity Browser\n\n## State Management\n- Uses React Context API with useReducer\n- Entity data stored in normalized format\n- Filter state: { dataSource, category, privacyFilter: 'Public|Internal|Confidential' }\n- Selected entity state: { entityId, expandedFields: [], collapsedRelationships: [] }\n\n## Component Hierarchy\n1. EntityBrowser (Container)\n   - EntityList\n     - EntityListItem\n     - FilterPanel\n   - EntityDetail\n     - FieldGrid\n     - RelationshipMap\n   - MetaDataDashboard\n     - VersionHistory\n     - DataQualityChart\n\n## Data Flow\n- Top-level data loader using runView\n- Child components request specific field subsets\n- Version diffs use runQuery for historical data\n- Filter changes trigger new runView executions\n\n## Performance Optimizations\n- Use React.memo on list items\n- Lazy load relationship data\n- Debound filter updates\n- Use shouldComponentUpdate in nested components",
  "techExplanation": "The component uses a multi-layer state system with React Context for global state. Filter changes trigger fresh data loading through runView, with results stored in normalized form. EntityDetail components use direct field lookups for fast rendering. Relationship visualization uses graph traversal on demand. All data access is wrapped in loading states and error boundaries. Accessibility is handled via WAI-ARIA patterns with tabIndex management.",
  "childComponents": [
    {
      "componentName": "EntityList",
      "description": "Rendered as vertical list of entities with filtering capabilities",
      "functionalRequirements": "### EntityList Functional Requirements\n\n1. Display entities with\n   - Name\n   - Category badge\n   - Record count\n2. Support filtering by\n   - Data source\n   - Privacy level\n   - Last modified date\n3. Context menu actions\n   - Export definition\n   - Clone entity\n4. Drag-and-drop reordering for column sort\n5. Keyboard navigation via [Table Key]",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entities",
              "displayFields": [
                "ID",
                "Name",
                "Category",
                "RecordCount",
                "DataSource"
              ],
              "filterFields": [
                "DataSource",
                "PrivacyLevel",
                "LastModifiedTimestamp"
              ]
            }
          ]
        }
      },
      "technicalDesign": "Implements virtual scrolling for large entity lists. Filter state is managed as a separate slice with debound updates. Uses runView with pagination support for dataset larger than 1000 entities.",
      "statePath": "entityBrowser.entities",
      "componentCode": "function EntityList({ data, utilities, userState, callbacks, onEvent, styles, statePath }) {\n  const [entities, setEntities] = useState([]);\n  const [filters, setFilters] = useState({\n    dataSource: '',\n    privacyLevel: '',\n    lastModified: ''\n  });\n\n  useEffect(() => {\n    const fetchEntities = async () => {\n      const result = await utilities.rv.runView({\n        EntityName: 'Entities',\n        Fields: 'ID,Name,Category,RecordCount,DataSource,PrivacyLevel,LastModifiedTimestamp',\n        MaxRows: 1000\n      });\n      \n      if (result.Success) {\n        setEntities(result.Results);\n      }\n    };\n    \n    fetchEntities();\n  }, []);\n\n  \n  const applyFilters = useCallback(() => {\n    // Debounced filter application\n    const filtered = entities.filter(entity => {\n      return (\n        (filters.dataSource === '' || entity.DataSource === filters.dataSource) &&\n        (filters.privacyLevel === '' || entity.PrivacyLevel === filters.privacyLevel) &&\n        (filters.lastModified === '' || entity.LastModifiedTimestamp >= filters.lastModified)\n      );\n    });\n    \n    return filtered;\n  }, [filters, entities]);\n\n  const handleExport = (entityId) => {\n    onEvent({\n      type: 'actionTriggered',\n      source: 'EntityList',\n      payload: {\n        action: 'ExportDefinition',\n        entityId\n      }\n    });\n  };\n\n  const handleClone = (entityId) => {\n    onEvent({\n      type: 'actionTriggered',\n      source: 'EntityList',\n      payload: {\n        action: 'CloneEntity',\n        entityId\n      }\n    });\n  };\n\n  const handleFilterChange = (field, value) => {\n    setFilters(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Virtual scrolling implementation here\n  // Drag-and-drop implementation here\n  // Keyboard navigation implementation here\n\n  return (\n    <div style={{ height: '100%' }}>\n      <div style={{ padding: styles.spacing.md }}>\n        <div style={{ display: 'flex', gap: styles.spacing.md, marginBottom: styles.spacing.md }}>\n          <select\n            onChange={(e) => handleFilterChange('dataSource', e.target.value)}\n            style={{ padding: styles.spacing.xs }}\n          >\n            <option value=\"\">All Data Sources</option>\n            {/* Render data source options */}\n          </select>\n          \n          <select\n            onChange={(e) => handleFilterChange('privacyLevel', e.target.value)}\n            style={{ padding: styles.spacing.xs }}\n          >\n            <option value=\"\">All Privacy Levels</option>\n            {/* Render privacy level options */}\n          </select>\n        </div>\n      </div>\n      \n      <div style={{ overflow: 'auto', flex: 1 }}>\n        <table style={{ width: '100%' }}>\n          <thead>\n            <tr>\n              <th style={{ padding: styles.spacing.sm, borderBottom: `1px solid ${styles.colors.border}` }}>Name</th>\n              <th style={{ padding: styles.spacing.sm, borderBottom: `1px solid ${styles.colors.border}` }}>Category</th>\n              <th style={{ padding: styles.spacing.sm, borderBottom: `1px solid ${styles.colors.border}` }}>Record Count</th>\n            </tr>\n          </thead>\n          <tbody>\n            {applyFilters().map(entity => (\n              <tr key={entity.ID}>\n                <td style={{ padding: styles.spacing.sm, borderBottom: `1px solid ${styles.colors.border}` }}>{entity.Name}</td>\n                <td style={{ padding: styles.spacing.sm, borderBottom: `1px solid ${styles.colors.border}` }}>{entity.Category}</td>\n                <td style={{ padding: styles.spacing.sm, borderBottom: `1px solid ${styles.colors.border}` }}>{entity.RecordCount}</td>\n                <td style={{ padding: styles.spacing.sm, borderBottom: `1px solid ${styles.colors.border}` }}>\n                  <button onClick={() => handleExport(entity.ID)}>Export</button>\n                  <button onClick={() => handleClone(entity.ID)}>Clone</button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}"
    },
    {
      "componentName": "EntityDetail",
      "description": "Displays fields and relationships for selected entity",
      "functionalRequirements": "1. Show grid of fields with\n   - Data type\n   - Privacy level badges\n   - Required status\n2. Expandable relationship map\n3. Context menu:\n   - Add new field\n   - Clone field\n   - Compare versions\n4. Drag reordering of fields",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "EntityFields",
              "displayFields": [
                "Name",
                "DataType",
                "Required",
                "PrivacyLevel"
              ],
              "filterFields": [
                "EntityID"
              ]
            },
            {
              "entityName": "EntityRelationships",
              "displayFields": [
                "RelatedEntityID",
                "Type"
              ],
              "filterFields": [
                "EntityID"
              ]
            }
          ]
        }
      },
      "technicalDesign": "Uses nested fetches - initial entity load triggers field/relationship loading. Implements undo/redo stack for field changes using local state. Relationship visualization is demand-loaded only when expanded.",
      "statePath": "entityBrowser.selectedEntity",
      "componentCode": "function EntityDetail({ data, utilities, userState, callbacks, styles, onEvent, statePath }) {\n  const [fields, setFields] = useState([]);\n  const [relationships, setRelationships] = useState([]);\n  const [expanded, setExpanded] = useState(false);\n\n  // Initialize with dynamic data\n  useEffect(() => {\n    if (utilities?.rv) {\n      Promise.all([\n        utilities.rv.runView({\n          EntityName: 'EntityFields',\n          FilterFields: { EntityID: data.selectedEntityID },\n          Fields: 'Name,DataType,Required,PrivacyLevel'\n        }),\n        utilities.rv.runView({\n          EntityName: 'EntityRelationships',\n          FilterFields: { EntityID: data.selectedEntityID },\n          Fields: 'RelatedEntityID,Type'\n        })\n      ]).then(([fieldsRes, relsRes]) => {\n        if (fieldsRes.Success) setFields(fieldsRes.Results);\n        if (relsRes.Success) setRelationships(relsRes.Results);\n      });\n    }\n  }, []);\n\n  const handleContextMenu = (action, field) => {\n    onEvent({\n      type: 'fieldAction',\n      source: 'EntityDetail',\n      payload: { action, field }\n    });\n  };\n\n  return (\n    <div style={{ padding: styles.spacing.md }}>\n      <h3 style={{ marginBottom: styles.spacing.sm }}>Fields</h3>\n      <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n        <thead>\n          <tr>\n            <th style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>Name</th>\n            <th style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>Type</th>\n            <th style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>Privacy</th>\n            <th style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>Required</th>\n            <th style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {fields.map(field => (\n            <tr key={field.ID}>\n              <td style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>{field.Name}</td>\n              <td style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>{field.DataType}</td>\n              <td style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>\n                <span style={{ background: field.PrivacyLevel === 'High' ? styles.colors.error : styles.colors.info, color: '#fff', padding: '2px 6px', borderRadius: '4px', fontSize: styles.typography.fontSize.sm }}>\n                  {field.PrivacyLevel}\n                </span>\n              </td>\n              <td style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>\n                {field.Required ? 'Yes' : 'No'}\n              </td>\n              <td style={{ padding: styles.spacing.xs, border: `1px solid ${styles.colors.border}` }}>\n                <button onClick={() => handleContextMenu('Add', field)} style={{ marginRight: styles.spacing.xs, padding: '2px 6px', background: styles.colors.primary, color: '#fff', border: 'none', borderRadius: '4px' }}>Add</button>\n                <button onClick={() => handleContextMenu('Clone', field)} style={{ marginRight: styles.spacing.xs, padding: '2px 6px', background: styles.colors.secondary, color: '#fff', border: 'none', borderRadius: '4px' }}>Clone</button>\n                <button onClick={() => handleContextMenu('Compare', field)} style={{ padding: '2px 6px', background: styles.colors.textSecondary, color: '#fff', border: 'none', borderRadius: '4px' }}>Compare</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <button onClick={() => setExpanded(!expanded)} style={{ marginTop: styles.spacing.md, padding: styles.spacing.sm, background: styles.colors.secondary, color: '#fff', border: 'none', borderRadius: styles.borders.radius }}>\n        {expanded ? 'Hide Relationships' : 'Show Relationships'}\n      </button>\n\n      {expanded && (\n        <div style={{ marginTop: styles.spacing.sm }}>\n          <h4 style={{ marginBottom: styles.spacing.sm }}>Relationships</h4>\n          <ul style={{ paddingLeft: '20px' }}>\n            {relationships.map((rel, index) => (\n              <li key={index} style={{ marginBottom: styles.spacing.xs }}>\n                <a href=\"#\" style={{ color: styles.colors.primary }}>{rel.Type} to {rel.RelatedEntityID}</a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}"
    }
  ],
  "componentCode": "function EntityBrowser({ data, utilities, userState, callbacks, styles, components }) {\n  const [state, setState] = useState({\n    filters: { dataSource: 'All', category: 'All', privacy: 'All' },\n    selectedEntity: null,\n    entities: [],\n    loading: false,\n    error: null,\n    ...userState\n  });\n\n  const updateState = (updates) => {\n    const newState = { ...state, ...updates };\n    setState(newState);\n    if (callbacks?.UpdateUserState) {\n      callbacks.UpdateUserState(newState);\n    }\n  };\n\n  // Load data on init/filter change\n  useEffect(() => {\n    const loadEntities = async () => {\n      try {\n        updateState({ loading: true, error: null });\n\n        const entitiesResult = await utilities.rv.runView({\n          EntityName: 'Entities',\n          ExtraFilter: buildEntityFilter(state.filters),\n          Fields: 'ID,Name,Category,DataSource,RecordCount,DataQualityScore,LastModifiedTimestamp',\n          OrderBy: 'Name ASC'\n        });\n\n        if (!entitiesResult.Success) {\n          throw new Error('Failed to load entities');\n        }\n\n        const fieldsResult = await utilities.rv.runView({\n          EntityName: 'Entity Fields',\n          ExtraFilter: state.selectedEntity ? `EntityID = '${state.selectedEntity}'` : null\n        });\n\n        const relationshipsResult = await utilities.rv.runView({\n          EntityName: 'Entity Relationships',\n          ExtraFilter: state.selectedEntity ? `EntityID = '${state.selectedEntity}'` : null\n        });\n\n        updateState({\n          entities: entitiesResult.Results || [],\n          entityFields: fieldsResult?.Results || [],\n          relationships: relationshipsResult?.Results || [],\n          loading: false\n        });\n      } catch (err) {\n        updateState({\n          error: err.message,\n          loading: false\n        });\n      }\n    };\n\n    loadEntities();\n  }, [state.filters, state.selectedEntity]);\n\n  const buildEntityFilter = (filters) => {\n    const conditions = [];\n    \n    if (filters.dataSource !== 'All') {\n      conditions.push(`DataSource = '${filters.dataSource}'`);\n    }\n    if (filters.category !== 'All') {\n      conditions.push(`Category = '${filters.category}'`);\n    }\n    return conditions.length ? conditions.join(' AND ') : null;\n  };\n\n  const handleEntitySelect = (entityId) => {\n    updateState({ selectedEntity: entityId });\n  };\n\n  const handleFilterChange = (filterType, value) => {\n    updateState({\n      filters: { ...state.filters, [filterType]: value }\n    });\n  };\n\n  if (state.loading) {\n    return (\n      <div style={{ padding: styles.spacing.lg, textAlign: 'center' }}>\n        <div>Loading entity data...</div>\n      </div>\n    );\n  }\n\n  if (state.error) {\n    return (\n      <div style={{ padding: styles.spacing.lg, color: styles.colors.error }}>\n        <div>Error loading data: {state.error}</div>\n      </div>\n    );\n  }\n\n  const { EntityList, EntityDetail, MetaDataDashboard } = components;\n\n  return (\n    <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/*** TOOLBAR ***/}\n      <div style={{\n        padding: styles.spacing.md,\n        borderBottom: `1px solid ${styles.colors.border}`\n      }}>\n        <div tabIndex={0} role=\"navigation\" aria-label=\"Entity filter controls\">\n          <div style={{ display: 'flex', gap: styles.spacing.md, marginBottom: styles.spacing.sm }}>\n            <select\n              value={state.filters.dataSource}\n              onChange={(e) => handleFilterChange('dataSource', e.target.value)}\n              style={{ padding: styles.spacing.xs }}\n              aria-label=\"Filter by data source\"\n            >\n              <option value=\"All\">All Data Sources</option>\n              <option value=\"CRM\">CRM</option>\n              <option value=\"ERP\">ERP</option>\n            </select>\n\n            <select\n              value={state.filters.category}\n              onChange={(e) => handleFilterChange('category', e.target.value)}\n              style={{ padding: styles.spacing.xs }}\n              aria-label=\"Filter by category\"\n            >\n              <option value=\"All\">All Categories</option>\n              <option value=\"Master Data\">Master Data</option>\n              <option value=\"Operational\">Operational</option>\n              <option value=\"Reference\">Reference</option>\n            </select>\n\n            <select\n              value={state.filters.privacy}\n              onChange={(e) => handleFilterChange('privacy', e.target.value)}\n              style={{ padding: styles.spacing.xs }}\n              aria-label=\"Filter by privacy level\"\n            >\n              <option value=\"All\">All Privacy Levels</option>\n              <option value=\"Public\">Public</option>\n              <option value=\"Internal\">Internal</option>\n              <option value=\"Confidential\">Confidential</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/*** MAIN LAYOUT ***/}\n      <div style={{ display: 'flex', flex: 1, height: '100%' }}>\n        <div style={{ width: '30%', minWidth: '300px', overflow: 'auto' }}>\n          <EntityList\n            data={state.entities}\n            selectedEntity={state.selectedEntity}\n            onEntitySelect={handleEntitySelect}\n            styles={styles}\n            state={state.filters}\n          />\n        </div>\n        <div style={{ flex: 1, display: 'flex', flexDirection: 'column' }}>\n          <div style={{ flex: 1, overflow: 'auto' }}>\n            <EntityDetail\n              data={state.entityFields}\n              relationships={state.relationships}\n              entityId={state.selectedEntity}\n              styles={styles}\n            />\n          </div>\n          <div style={{ height: '30%' }}>\n            <MetaDataDashboard\n              data={state.entities}\n              selectedEntity={state.selectedEntity}\n              styles={styles}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/*** ACCESSIBILITY ***/}\n      <div role=\"status\" aria-live=\"polite\" style={{ position: 'absolute', left: -9999 }}>\n        {state.selectedEntity ? `Viewing ${state.selectedEntity}` : 'Browse available entities'}\n      </div>\n    </div>\n  );\n}"
}