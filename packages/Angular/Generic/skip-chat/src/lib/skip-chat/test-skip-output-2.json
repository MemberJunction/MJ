{
  "functionalRequirements": "# Entity Explorer Requirements\n\n## Purpose\nProvide interactive visibility into system data structure with hierarchical entity-field navigation\n\n## Core User Interactions\n\n1. **Expand/Collapse Hierarchy**\n   - Click entity nodes to toggle field visibility\n   - Auto-expand on field search matches (highlight matches)\n\n2. **Global Search**\n   - Real-time filtering of:\n     - Entity names/descriptions\n     - Field names/descriptions\n   - Wildcard search support\n   - Case-insensitive matching\n\n3. **Attribute Filtering**\n   - Filter by:\n     - Entity type (custom/system)\n     - Field data type\n     - Business criticality\n     - Security classification\n   - Multi-select filtering interface\n\n## Data Display Requirements\n\n- **Entity Hierarchy View**\n  - Tree structure showing:\n    - Entity name (bold) with row count indicator\n    - Last modified timestamp (click for history)\n    - Relationship arrows (FK associations)\n\n- **Field Details Panel**\n  - On-click detail drawer showing:\n    - Data type / format\n    - Business definition\n    - Valid values (for picklists)\n    - Constraint definitions\n    - Security permissions\n\n## Business Rules\n\n1. **Access Control**\n   - Entity-level access based on user role/permissions\n   - Field-level visibility masking for sensitive fields\n   - Audit logging of field access\n\n2. **Governance**\n   - Read-only view for business users\n   - Admin controls for:\n     - Entity locking\n     - Field metadata updates\n\n## UX Patterns\n\n- **Responsive Design**\n  - Tree view => tablet/desktop\n  - List view => mobile\n\n- **Accessibility**\n  - Keyboard navigation (ARIA roles)\n  - High contrast mode\n  - Screen reader labeling\n\n- **Performance**\n  - Lazy loading of child entities\n  - 5000+ entity threshold => loading indicators\n  - Pagination for large field counts\n\n- **Visual Hierarchy**\n  - Entity categories (color-coded) => primary\n  - Field data types => secondary text\n  - Security classification => status icons\n\n- **History Tracking**\n  - Recently viewed entities panel\n  - Comparison view between entity versions\n\n- **Export Options**\n  - Full schema export (PDF/CSV)\n  - Selected entity metadata export\n\n- **Tooltips & Guidance**\n  - Hover definitions for technical terms\n  - Field usage examples (business context)\n\n- **Notifications**\n  - Data steward contact badges\n  - Stale metadata indicators",
  "componentName": "EntityExplorer",
  "componentType": "other",
  "dataRequirements": {
    "mode": "dynamic",
    "dynamicData": {
      "requiredEntities": [
        {
          "entityName": "Entities",
          "entityDescription": "Catalog of all entities across all schemas",
          "displayFields": [
            "Name",
            "Description",
            "RowCount",
            "LastModified"
          ],
          "filterFields": [
            "EntityID",
            "SchemaName",
            "IsSystemEntity"
          ],
          "sortFields": [
            "Name",
            "RowCount"
          ],
          "usageContext": "Base entity catalog for hierarchical navigation"
        },
        {
          "entityName": "Entity Fields",
          "entityDescription": "List of all fields definitions across all entities",
          "displayFields": [
            "Name",
            "DataType",
            "Description",
            "SecurityClassification",
            "IsRequired"
          ],
          "filterFields": [
            "DataType",
            "SecurityClassification",
            "IsCritical",
            "EntityID"
          ],
          "sortFields": [
            "Name"
          ],
          "usageContext": "Field metadata display and filtering"
        },
        {
          "entityName": "Entity Relationships",
          "entityDescription": "Metadata about relationships between entities",
          "displayFields": [
            "ParentEntity",
            "ChildEntity",
            "RelationshipType",
            "FKField"
          ],
          "filterFields": [
            "RelationshipType",
            "ParentEntity",
            "ChildEntity"
          ],
          "sortFields": [
            "ParentEntity"
          ],
          "usageContext": "Relationship mapping visualization"
        }
      ],
      "description": "Dynamic data strategy for entity hierarchy, metadata, and relationships"
    },
    "securityNotes": "Entity access controlled via Entity Permissions and Row Level Security Filters"
  },
  "techExplanation": "The EntityExplorer architecture strictly separates container/data, UX, and reusable subcomponents for clarity and scalability. State is centrally managed, with child components receiving relevant slices and event callbacks for interaction. Tree navigation implements lazy loading and virtualization for large datasets, with loading indicators at granular levels. Attribute filters and search update the entity hierarchy in real time. The metadata panel and relationship view sync with selection changes, respect role-based access, and trigger audit events on sensitive-field exposures. Accessibility features include programmatic keyboard navigation, ARIA structure, and user-toggled high-contrast mode. Event/callback design ensures audit, state updates, and secure, bidirectional data flow. Dynamic data requirements are fully defined per the data model and functional spec.",
  "childComponents": [
    {
      "componentName": "EntityTreeNavigation",
      "exampleUsage": "<EntityTreeNavigation\n  entities={data.entities}\n  expandedEntities={userState.treeState.expandedEntities}\n  selectedEntityId={userState.treeState.selectedEntityId}\n  selectedFieldId={userState.treeState.selectedFieldId}\n  searchTerm={userState.searchFilter.text}\n  attributeFilters={userState.searchFilter.attributeFilters}\n  onExpandCollapse={callbacks.onExpandCollapse}\n  onSelectEntity={callbacks.onSelectEntity}\n  onSelectField={callbacks.onSelectField}\n  onLazyLoad={callbacks.onLazyLoad}\n  loadingStates={userState.ui.loading}\n  highContrast={userState.ui.isHighContrast}\n  ariaTreeId=\"entity-explorer-tree\"\n/>",
      "description": "Displays the hierarchical entity/field structure as an accessible, expandable virtualized tree with search highlights, relationship arrows, and lazy children loading.",
      "functionalRequirements": "Shows entities in a tree with expandable/collapsible nodes. Highlights search and filter matches. Supports 5,000+ entities efficiently via virtualization and lazy loading. Node selection triggers detail views and event logging. Visualizes FK relationships via in-line icons or overlay arrows. Fully ARIA tree compliant for keyboard/screen readers.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entities",
              "displayFields": [
                "Name",
                "Description",
                "RowCount",
                "LastModified",
                "EntityID",
                "SchemaName",
                "IsSystemEntity"
              ]
            },
            {
              "entityName": "Entity Fields",
              "displayFields": [
                "Name",
                "DataType",
                "Description",
                "SecurityClassification",
                "IsRequired",
                "EntityID"
              ]
            },
            {
              "entityName": "Entity Relationships",
              "displayFields": [
                "ParentEntity",
                "ChildEntity",
                "RelationshipType",
                "FKField"
              ]
            }
          ],
          "description": "Fetches hierarchical entity and field lists, child nodes are loaded dynamically upon request or expansion."
        }
      },
      "technicalDesign": "Implements a virtualized ARIA tree (using role='tree' and role='treeitem'), with keyboard navigation (up/down/left/right/space/enter), lazy fetch for subnodes, and efficient rendering for high-entity volumes. Manages local per-node loading spinners. Highlights entities/fields matching search/filter state. Emits onExpandCollapse, onSelectEntity, onSelectField events with IDs for container state update and audit logging. Relationship icons/arrows are woven in per node as overlays or inline icons.",
      "statePath": "treeState",
      "componentCode": "function EntityTreeNavigation({\n  entities,\n  expandedEntities,\n  selectedEntityId,\n  selectedFieldId,\n  searchTerm,\n  attributeFilters,\n  onExpandCollapse,\n  onSelectEntity,\n  onSelectField,\n  onLazyLoad,\n  loadingStates,\n  highContrast,\n  ariaTreeId,\n  userState,\n  statePath,\n  onEvent,\n  styles,\n  callbacks,\n  utilities\n}) {\n  const [localState, setLocalState] = React.useState({\n    ...userState\n  });\n\n  // Internal state helpers\n  const updateState = (newState) => {\n    setLocalState(newState);\n    onEvent && onEvent({\n      type: 'stateChanged',\n      source: 'EntityTreeNavigation',\n      payload: { statePath, newState },\n      bubbles: true\n    });\n  };\n\n  // Accessibility helpers\n  const treeRef = React.useRef();\n  const [focusId, setFocusId] = React.useState(selectedEntityId || selectedFieldId || null);\n\n  // Virtualization state\n  const [scrollTop, setScrollTop] = React.useState(0);\n  const itemHeight = 36;\n  const maxVisible = 20; // Render window + buffer\n  let flatTree = [];\n\n  // Flat tree-building for virtualization\n  function buildFlatTree(nodes, depth = 0, parent = null) {\n    nodes.forEach((entity) => {\n      flatTree.push({\n        key: entity.EntityID,\n        type: 'entity',\n        entity,\n        depth,\n        parent\n      });\n      if (\n        expandedEntities && expandedEntities.includes(entity.EntityID) &&\n        entity.Fields && entity.Fields.length > 0\n      ) {\n        entity.Fields.forEach((field) => {\n          flatTree.push({\n            key: entity.EntityID + '-' + field.Name,\n            type: 'field',\n            field,\n            entity,\n            depth: depth + 1,\n            parent: entity\n          });\n        });\n      }\n      // Lazy children: For dynamic loading\n      if (\n        expandedEntities && expandedEntities.includes(entity.EntityID) &&\n        entity.Children && entity.Children.length > 0\n      ) {\n        buildFlatTree(entity.Children, depth + 1, entity);\n      }\n    });\n    return flatTree;\n  }\n\n  // Filtering (search + attributeFilters) on entities and fields\n  function passTextAndAttributeFilters(entity, fields) {\n    // Text search (entity or any field name/desc matches)\n    let match = true;\n    if (searchTerm && searchTerm.trim()) {\n      const lc = searchTerm.toLowerCase();\n      match = (\n        entity.Name.toLowerCase().includes(lc) ||\n        (entity.Description || '').toLowerCase().includes(lc) ||\n        (fields && fields.some(f => f.Name.toLowerCase().includes(lc) || (f.Description || '').toLowerCase().includes(lc)))\n      );\n    }\n    // Attribute filters (array of { field, op, value }) - must match all\n    if (attributeFilters && Array.isArray(attributeFilters) && attributeFilters.length > 0) {\n      for (let filter of attributeFilters) {\n        if (entity[filter.field] === undefined || String(entity[filter.field]) !== String(filter.value)) {\n          match = false;\n          break;\n        }\n      }\n    }\n    return match;\n  }\n\n  // Add highlight spans to matched text\n  function highlight(text, match) {\n    if (!match || !text) return text;\n    const lcMatch = match.toLowerCase();\n    const lcText = text.toLowerCase();\n    let idx = lcText.indexOf(lcMatch);\n    if (idx < 0) return text;\n    return (\n      <span>\n        {text.substring(0, idx)}\n        <span style={{ background: styles.colors.primaryLight, fontWeight: 600 }}>{text.substring(idx, idx + lcMatch.length)}</span>\n        {text.substring(idx + lcMatch.length)}\n      </span>\n    );\n  }\n\n  // Build tree structure with search/filter\n  const filteredEntities = React.useMemo(() => {\n    if (!entities) return [];\n    return entities\n      .filter(e => passTextAndAttributeFilters(e, e.Fields))\n      .map(e => ({\n        ...e,\n        Fields: e.Fields || []\n      }));\n  }, [entities, searchTerm, attributeFilters]);\n\n  // Build flatTree for virtualization\n  flatTree = [];\n  buildFlatTree(filteredEntities);\n  const totalCount = flatTree.length;\n  const containerHeight = Math.min(maxVisible, totalCount) * itemHeight;\n  const start = Math.max(0, Math.floor(scrollTop / itemHeight) - 2);\n  const end = Math.min(totalCount, start + maxVisible + 4);\n  const visibleItems = flatTree.slice(start, end);\n\n  // Keyboard nav - Move focus and selection\n  const moveFocus = (delta) => {\n    if (!flatTree.length) return;\n    let idx = flatTree.findIndex(i => i.key === focusId);\n    if (idx < 0) idx = 0;\n    let next = idx + delta;\n    if (next < 0) next = 0;\n    if (next >= flatTree.length) next = flatTree.length - 1;\n    setFocusId(flatTree[next].key);\n    const el = document.querySelector(`[data-treeitem-key=\"${flatTree[next].key}\"]`);\n    if (el) el.focus();\n  };\n\n  // Handle entity expand/collapse\n  const handleExpandCollapse = (entityId) => {\n    onExpandCollapse && onExpandCollapse(entityId);\n    // Bubble up via standard event\n    onEvent && onEvent({\n      type: 'treeExpandCollapse',\n      source: 'EntityTreeNavigation',\n      payload: { entityId },\n      bubbles: true\n    });\n  };\n\n  // Handle lazy load of child nodes\n  const handleLazyLoad = (entityId) => {\n    onLazyLoad && onLazyLoad(entityId);\n    onEvent && onEvent({\n      type: 'treeLazyLoad',\n      source: 'EntityTreeNavigation',\n      payload: { entityId },\n      bubbles: true\n    });\n  };\n\n  // Handle entity selection\n  const handleSelectEntity = (entityId, entity) => {\n    onSelectEntity && onSelectEntity(entityId);\n    onEvent && onEvent({\n      type: 'itemSelected',\n      source: 'EntityTreeNavigation',\n      payload: { itemId: entityId, entity },\n      bubbles: true\n    });\n  };\n\n  // Handle field selection\n  const handleSelectField = (entity, field) => {\n    onSelectField && onSelectField(field.Name);\n    onEvent && onEvent({\n      type: 'fieldSelected',\n      source: 'EntityTreeNavigation',\n      payload: { entityId: entity.EntityID, fieldId: field.Name, field },\n      bubbles: true\n    });\n  };\n\n  // ARIA active descendant IDs\n  const getAriaSelected = (item) => {\n    if (item.type === 'entity') return (item.entity.EntityID === selectedEntityId);\n    if (item.type === 'field') return (item.field.Name === selectedFieldId);\n    return false;\n  };\n\n  // ** Relationship/fk icons **\n  function fkIcon(entity, field) {\n    const hasFK = field && field.RelationshipType === 'FK';\n    if (!hasFK) return null;\n    return (\n      <span\n        aria-label=\"Foreign Key\"\n        title=\"Foreign Key\"\n        style={{ marginLeft: 4, color: styles.colors.info }}>\n        <svg width=\"14\" height=\"14\" aria-hidden=\"true\">\n          <circle cx=\"7\" cy=\"7\" r=\"6\" stroke={styles.colors.info} strokeWidth=\"2\" fill=\"none\" />\n          <text x=\"7\" y=\"10\" textAnchor=\"middle\" fontSize=\"8\" fill={styles.colors.info}>FK</text>\n        </svg>\n      </span>\n    );\n  }\n\n  // EFFECT: Scroll to focused item if needed\n  React.useEffect(() => {\n    if (!treeRef.current) return;\n    const el = treeRef.current.querySelector('[aria-selected=\"true\"]');\n    if (el) {\n      el.scrollIntoView({ block: 'nearest' });\n    }\n  }, [selectedEntityId, selectedFieldId]);\n\n  // Container scroll handler\n  const handleScroll = (e) => setScrollTop(e.target.scrollTop);\n\n  // Overlay spinner for node loading\n  const renderSpinner = () => (\n    <span\n      style={{\n        marginLeft: 8,\n        display: 'inline-block',\n        width: 16,\n        height: 16,\n        verticalAlign: 'middle',\n        border: `2px solid ${styles.colors.border}`,\n        borderTop: `2px solid ${styles.colors.primary}`,\n        borderRadius: '50%',\n        animation: 'spin 1s linear infinite'\n      }}\n    />\n  );\n\n  // Main render\n  return (\n    <div\n      role=\"tree\"\n      aria-label=\"Entities Tree\"\n      aria-multiselectable=\"false\"\n      id={ariaTreeId || \"entity-explorer-tree\"}\n      style={{\n        height: '100%',\n        background: highContrast ? styles.colors.surface : styles.colors.background,\n        color: highContrast ? styles.colors.textInverse || styles.colors.text : styles.colors.text,\n        display: 'flex', flexDirection: 'column', border: `1px solid ${styles.colors.border}`,\n        borderRadius: styles.borders.radius\n      }}\n    >\n      {/* SCROLLABLE TREE CONTENT */}\n      <div\n        ref={treeRef}\n        onScroll={handleScroll}\n        tabIndex={0}\n        style={{\n          flex: 1,\n          minHeight: 0,\n          maxHeight: '100%',\n          outline: 'none',\n          overflow: 'auto',\n          fontFamily: styles.typography.fontFamily,\n          fontSize: styles.typography.fontSize.md\n        }}\n        onKeyDown={e => {\n          if (e.key === 'ArrowDown') { moveFocus(1); e.preventDefault(); }\n          if (e.key === 'ArrowUp') { moveFocus(-1); e.preventDefault(); }\n          if (e.key === 'ArrowRight') {\n            // Expand node if possible\n            const item = flatTree.find(i => i.key === focusId);\n            if (item && item.type === 'entity' && !expandedEntities.includes(item.entity.EntityID)) {\n              handleExpandCollapse(item.entity.EntityID);\n            }\n          }\n          if (e.key === 'ArrowLeft') {\n            // Collapse\n            const item = flatTree.find(i => i.key === focusId);\n            if (item && item.type === 'entity' && expandedEntities.includes(item.entity.EntityID)) {\n              handleExpandCollapse(item.entity.EntityID);\n            }\n          }\n          if (e.key === 'Enter' || e.key === ' ') {\n            // Select\n            const item = flatTree.find(i => i.key === focusId);\n            if (item) {\n              if (item.type === 'entity') {\n                handleSelectEntity(item.entity.EntityID, item.entity);\n              } else if (item.type === 'field') {\n                handleSelectField(item.entity, item.field);\n              }\n            }\n          }\n        }}\n      >\n        {/* Spacer for virtualization */}\n        <div style={{height: start * itemHeight}}/>\n        {visibleItems.map((item, idx) => {\n          const isEntity = item.type === 'entity';\n          const isField = item.type === 'field';\n          const isSelected = isEntity\n            ? item.entity.EntityID === selectedEntityId\n            : (isField && item.field.Name === selectedFieldId);\n          const isFocused = item.key === focusId;\n          let loading = false;\n          if (isEntity && loadingStates && loadingStates[item.entity.EntityID]) loading = true;\n          const nodeStyle = {\n            display: 'flex', alignItems: 'center',\n            cursor: 'pointer',\n            paddingLeft: styles.spacing.lg * item.depth,\n            height: itemHeight,\n            background: isSelected ? styles.colors.primary : 'none',\n            color: isSelected ? (styles.colors.textInverse || '#fff') : undefined,\n            outline: isFocused ? `2px solid ${styles.colors.primary}` : 'none',\n            borderBottom: `1px solid ${styles.colors.borderLight || '#eee'}`\n          };\n          return (\n            <div\n              tabIndex={-1}\n              data-treeitem-key={item.key}\n              role=\"treeitem\"\n              aria-selected={isSelected}\n              aria-level={item.depth + 1}\n              aria-expanded={isEntity ? expandedEntities.includes(item.entity.EntityID) : undefined}\n              key={item.key}\n              style={nodeStyle}\n              onClick={e => {\n                setFocusId(item.key);\n                if (isEntity) handleSelectEntity(item.entity.EntityID, item.entity);\n                else if (isField) handleSelectField(item.entity, item.field);\n              }}\n              onDoubleClick={isEntity ? () => handleExpandCollapse(item.entity.EntityID) : undefined}\n              onKeyDown={e => {\n                if (e.key === 'ArrowRight' && isEntity && !expandedEntities.includes(item.entity.EntityID)) handleExpandCollapse(item.entity.EntityID);\n                if (e.key === 'ArrowLeft' && isEntity && expandedEntities.includes(item.entity.EntityID)) handleExpandCollapse(item.entity.EntityID);\n              }}\n            >\n              {/* Expand/Collapse toggler for entity nodes */}\n              {isEntity && (\n                <span\n                  style={{ display: 'inline-flex', alignItems: 'center', marginRight: styles.spacing.sm, width: 20, justifyContent: 'center' }}\n                  onClick={e => { e.stopPropagation(); handleExpandCollapse(item.entity.EntityID); }}\n                  tabIndex={-1}\n                  aria-label={expandedEntities.includes(item.entity.EntityID) ? 'Collapse' : 'Expand'}\n                >\n                  {expandedEntities.includes(item.entity.EntityID)\n                    ? <span style={{ fontWeight: 700 }}>&#9660;</span>\n                    : <span style={{ fontWeight: 700 }}>&#9654;</span>\n                  }\n                </span>\n              )}\n              {/* Field indentation spacer */}\n              {isField && <span style={{ width: 44, display: 'inline-block' }} />}\n\n              <span style={{ flex: 1, whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n                {/* Node label + highlights */}\n                {isEntity\n                  ? highlight(item.entity.Name, searchTerm)\n                  : highlight(item.field.Name, searchTerm)\n                }\n                {/* FK icon */}\n                {isField && fkIcon(item.entity, item.field)}\n              </span>\n              {/* Row count + system entity icon for entity nodes */}\n              {isEntity && (\n                <span style={{ marginLeft: styles.spacing.sm, color: styles.colors.textSecondary }}>\n                  {item.entity.RowCount !== undefined && (\n                    <span style={{ marginRight: 10 }} title=\"Row Count\">{item.entity.RowCount}</span>\n                  )}\n                  {item.entity.IsSystemEntity && (\n                    <span aria-label=\"System Entity\" title=\"System Entity\" style={{ marginLeft: 4, fontWeight: 700 }}>[SYS]</span>\n                  )}\n                  {/* Lazy loading spinner */}\n                  {loading && renderSpinner()}\n                </span>\n              )}\n            </div>\n          );\n        })}\n        {/* End spacer */}\n        <div style={{height: (totalCount - end) * itemHeight}}/>\n      </div>\n      {/* Empty state */}\n      {(!entities || entities.length === 0) && (\n        <div style={{ padding: styles.spacing.xl, textAlign: 'center', color: styles.colors.textSecondary }}>\n          No entities found\n        </div>\n      )}\n      {/* Virtualization note (for very large data) */}\n      {flatTree.length > 5000 && (\n        <div style={{ padding: styles.spacing.xs, textAlign: 'center', fontSize: styles.typography.fontSize.sm, color: styles.colors.textSecondary }}>\n          Efficient scroll enabled for large datasets\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "componentName": "EntityFilterBar",
      "exampleUsage": "<EntityFilterBar\n  attributeFilters={userState.searchFilter.attributeFilters}\n  searchTerm={userState.searchFilter.text}\n  onAttributeFilterChange={callbacks.onAttributeFilterChange}\n  onSearchInput={callbacks.onSearchInput}\n  fieldTypes={data.entitiesFieldTypes}\n  entityTypes={data.entityTypes}\n  securityClasses={data.securityClasses}\n  highContrast={userState.ui.isHighContrast}\n/>",
      "description": "Provides multi-select attribute filtering and global search for entities/fields with instant feedback.",
      "functionalRequirements": "Lets users refine visible entities/fields by type, data type, business criticality, security class, with real-time search (supports wildcards, case insensitivity). Typing or selecting immediately updates filtered tree. All controls ARIA-compliant, keyboard-accessible, and scalable to hundreds of filter values.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entities",
              "displayFields": [
                "EntityID",
                "IsSystemEntity"
              ]
            },
            {
              "entityName": "Entity Fields",
              "displayFields": [
                "DataType",
                "SecurityClassification",
                "IsCritical"
              ]
            }
          ],
          "description": "Populates filter dropdowns and runs local/global search."
        }
      },
      "technicalDesign": "Uses multi-select dropdowns and a global search box; validates filter combinations on change and updates parent filter state. ARIA roles for all controls. Monitoring debounced keystrokes; no unnecessary re-rendering. Filter and search state are hoisted to root; every change triggers visible, incremental update in EntityTreeNavigation.",
      "statePath": "searchFilter",
      "componentCode": "function EntityFilterBar({\n  attributeFilters,\n  searchTerm,\n  onAttributeFilterChange,\n  onSearchInput,\n  fieldTypes,\n  entityTypes,\n  securityClasses,\n  highContrast,\n  userState,\n  onEvent,\n  styles,\n  callbacks,\n  utilities,\n  statePath\n}) {\n  const { useState, useEffect, useRef } = React;\n\n  // Supported UI libraries\n  const Select = (window.antd && window.antd.Select) || null;\n  const Input = (window.antd && window.antd.Input) || null;\n  const Tag = (window.antd && window.antd.Tag) || null;\n  const Option = Select ? Select.Option : null;\n\n  if (!Select || !Input || !Tag) {\n    return (\n      <div\n        style={{\n          padding: styles?.spacing?.xl || 24,\n          textAlign: 'center',\n          color: styles?.colors?.textSecondary || '#888',\n          fontSize: styles?.typography?.fontSize?.md || 16\n        }}\n      >\n        Ant Design library is required for filters and search.\n      </div>\n    );\n  }\n\n  // Default local state merge\n  const [localState, setLocalState] = useState({\n    tempSearchText: searchTerm || '',\n    ...userState\n  });\n\n  // For controlled input debounce\n  const debounceTimer = useRef();\n\n  // All filter options, for performance, they should come from data prop\n  // entityTypes: list of { value, label }\n  // fieldTypes: list of { value, label }\n  // securityClasses: list of { value, label }\n\n  // Handle value change for attribute filters\n  const handleAttributeFilterChange = (filterKey, values) => {\n    const newFilters = {\n      ...attributeFilters,\n      [filterKey]: values\n    };\n    // Optimistically fire external event\n    if (onAttributeFilterChange) onAttributeFilterChange(newFilters);\n    onEvent &&\n      onEvent({\n        type: 'stateChanged',\n        source: 'EntityFilterBar',\n        payload: {\n          statePath: statePath,\n          newState: {\n            ...localState,\n            attributeFilters: newFilters\n          }\n        },\n        bubbles: true\n      });\n    setLocalState(prev => ({ ...prev, attributeFilters: newFilters }));\n  };\n\n  // Handle text input change with debounce\n  const handleSearchInputChange = e => {\n    const value = e.target.value;\n    setLocalState(prev => ({ ...prev, tempSearchText: value }));\n\n    if (debounceTimer.current) clearTimeout(debounceTimer.current);\n    debounceTimer.current = setTimeout(() => {\n      // Fire change event!\n      if (onSearchInput) onSearchInput(value);\n      onEvent &&\n        onEvent({\n          type: 'stateChanged',\n          source: 'EntityFilterBar',\n          payload: {\n            statePath,\n            newState: { ...localState, tempSearchText: value }\n          },\n          bubbles: true\n        });\n    }, 250);\n  };\n\n  // Accessibility: ARIA label construction\n  const ariaGroupStyle = {\n    display: 'flex',\n    gap: styles?.spacing?.md || 16,\n    marginBottom: styles?.spacing?.md || 16,\n    alignItems: 'center',\n    flexWrap: 'wrap',\n  };\n  const labelStyle = {\n    fontWeight: 500,\n    fontSize: styles?.typography?.fontSize?.sm || 14,\n    color: styles?.colors?.textSecondary || '#555',\n    marginRight: styles?.spacing?.xs || 6\n  };\n  const fieldStyle = {\n    minWidth: 160,\n    maxWidth: 260\n  };\n  const rootStyle = {\n    width: '100%',\n    background: styles?.colors?.surface || '#fff',\n    padding: styles?.spacing?.md || 16,\n    border: `1px solid ${styles?.colors?.border || '#eee'}`,\n    borderRadius: styles?.borders?.radius || 6,\n    boxSizing: 'border-box',\n  };\n\n  return (\n    <form\n      style={rootStyle}\n      aria-label='Entity and Field Filter'\n      autoComplete='off'\n      onSubmit={e => e.preventDefault()}\n    >\n      {/* Attribute Filters */}\n      <div style={ariaGroupStyle} role='group' aria-label='Filter by attributes'>\n        {/* Entity Type Filter */}\n        <label htmlFor={`${statePath}-entityType`} style={labelStyle}>\n          Entity Type\n        </label>\n        <Select\n          id={`${statePath}-entityType`}\n          mode='multiple'\n          allowClear\n          aria-label='Entity Type filter, multi-select'\n          placeholder='Any'\n          size='small'\n          style={fieldStyle}\n          value={attributeFilters.entityType || []}\n          onChange={values => handleAttributeFilterChange('entityType', values)}\n          optionLabelProp='label'\n        >\n          {entityTypes?.map(opt => (\n            <Option key={opt.value} value={opt.value} label={opt.label}>\n              {opt.label}\n            </Option>\n          ))}\n        </Select>\n\n        {/* Field Type Filter */}\n        <label htmlFor={`${statePath}-fieldType`} style={labelStyle}>\n          Data Type\n        </label>\n        <Select\n          id={`${statePath}-fieldType`}\n          mode='multiple'\n          allowClear\n          aria-label='Data Type filter, multi-select'\n          placeholder='Any'\n          size='small'\n          style={fieldStyle}\n          value={attributeFilters.fieldType || []}\n          onChange={values => handleAttributeFilterChange('fieldType', values)}\n          optionLabelProp='label'\n        >\n          {fieldTypes?.map(opt => (\n            <Option key={opt.value} value={opt.value} label={opt.label}>\n              {opt.label}\n            </Option>\n          ))}\n        </Select>\n\n        {/* Business Criticality Filter */}\n        <label htmlFor={`${statePath}-criticality`} style={labelStyle}>\n          Criticality\n        </label>\n        <Select\n          id={`${statePath}-criticality`}\n          mode='multiple'\n          allowClear\n          aria-label='Business Criticality filter, multi-select'\n          placeholder='Any'\n          size='small'\n          style={fieldStyle}\n          value={attributeFilters.criticality || []}\n          onChange={values => handleAttributeFilterChange('criticality', values)}\n        >\n          <Option value='critical' label='Critical'>Critical</Option>\n          <Option value='non-critical' label='Non-Critical'>Non-Critical</Option>\n        </Select>\n\n        {/* Security Class Filter */}\n        <label htmlFor={`${statePath}-security`} style={labelStyle}>\n          Security Class\n        </label>\n        <Select\n          id={`${statePath}-security`}\n          mode='multiple'\n          allowClear\n          aria-label='Security Classification filter, multi-select'\n          placeholder='Any'\n          size='small'\n          style={fieldStyle}\n          value={attributeFilters.securityClass || []}\n          onChange={values => handleAttributeFilterChange('securityClass', values)}\n          optionLabelProp='label'\n        >\n          {securityClasses?.map(opt => (\n            <Option key={opt.value} value={opt.value} label={opt.label}>\n              {opt.label}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      {/* Global Search Box */}\n      <div style={{ display: 'flex', alignItems: 'center', marginTop: 8 }}>\n        <Input\n          style={{ width: 320, fontSize: styles?.typography?.fontSize?.md || 16 }}\n          prefix={<span role='img' aria-label='search'>🔍</span>}\n          type='search'\n          aria-label='Entity or field global search'\n          placeholder='Search entities/fields (supports * ~ case-insensitive) ...'\n          value={localState.tempSearchText}\n          onChange={handleSearchInputChange}\n          size='middle'\n          allowClear\n        />\n        {highContrast && (\n          <Tag color='red' style={{ marginLeft: 8, fontWeight: 600 }}>\n            High Contrast Mode\n          </Tag>\n        )}\n      </div>\n    </form>\n  );\n}\n"
    },
    {
      "componentName": "EntityDetailsPanel",
      "exampleUsage": "<EntityDetailsPanel\n  entity={data.selectedEntity}\n  field={data.selectedField}\n  open={userState.detailsPanel.isOpen}\n  tab={userState.detailsPanel.tab}\n  onClose={callbacks.onCloseDetails}\n  onTabChange={callbacks.onDetailsTabChange}\n  onViewHistory={callbacks.onViewHistory}\n  onViewComparison={callbacks.onViewComparison}\n  highContrast={userState.ui.isHighContrast}\n/>",
      "description": "A slide-in, tabbed drawer showing entity and field metadata, relationships, security info, and audit functionality.",
      "functionalRequirements": "When an entity/field is selected, displays full metadata (data type, constraints, criticality, security class, permissions, permitted actions, audit log access), with tabs for summary, history, and version comparison. Sensitive fields display masking and security badge. Hover definitions and tooltips provided for technical terms.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entities",
              "displayFields": [
                "Name",
                "Description",
                "RowCount",
                "LastModified",
                "EntityID",
                "SchemaName"
              ]
            },
            {
              "entityName": "Entity Fields",
              "displayFields": [
                "Name",
                "DataType",
                "Description",
                "SecurityClassification",
                "IsRequired"
              ]
            }
          ],
          "description": "Loads selected entity/field details, optionally loads comparison and history data on tab activation."
        }
      },
      "technicalDesign": "Drawer panel appears on selection event, focus is managed for accessibility. Respects security masking (fields show as masked unless permitted). Tab navigation is keyboard-accessible. Triggers audit callback on sensitive data reveal. Provides high-contrast mode styling. Emits tab, close, and audit events to parent.",
      "statePath": "detailsPanel",
      "componentCode": "function EntityDetailsPanel({ entity, field, open, tab, onClose, onTabChange, onViewHistory, onViewComparison, highContrast, userState, statePath, onEvent, styles, callbacks, utilities }) {\n  const { useState, useEffect, useCallback, Fragment } = React;\n\n  // State Initialization: use local state for tab, data loads, sensitive field reveal\n  const [localState, setLocalState] = useState({\n    tab: tab || 'summary',\n    historyData: null,\n    comparisonData: null,\n    revealSensitive: false,\n    loading: false,\n    ...userState\n  });\n\n  // Update parent state on local changes (e.g., tab switch, sensitive reveal)\n  const updateState = (updates) => {\n    const newState = { ...localState, ...updates };\n    setLocalState(newState);\n    onEvent && onEvent({\n      type: 'stateChanged',\n      source: 'EntityDetailsPanel',\n      payload: { statePath, newState },\n      bubbles: true\n    });\n  };\n\n  // Tab Handling\n  const handleTabChange = (key) => {\n    updateState({ tab: key });\n    onTabChange && onTabChange(key);\n    // Fetch data dynamically as required\n    if (key === 'history' && !localState.historyData) {\n      fetchHistory();\n    }\n    if (key === 'comparison' && !localState.comparisonData) {\n      fetchComparison();\n    }\n  };\n\n  // Dynamic Data Fetch\n  const fetchHistory = useCallback(async () => {\n    if (!entity || !entity.ID) return;\n    updateState({ loading: true });\n    try {\n      const res = await utilities.rv.runView({\n        EntityName: entity.Name,\n        OrderBy: 'LastModified DESC',\n        MaxRows: 50\n      });\n      if (res.Success) {\n        updateState({ historyData: res.Results, loading: false });\n      } else {\n        updateState({ loading: false });\n      }\n    } catch {\n      updateState({ loading: false });\n    }\n  }, [entity, utilities]);\n\n  const fetchComparison = useCallback(async () => {\n    if (!entity || !entity.ID) return;\n    updateState({ loading: true });\n    try {\n      // Simulate comparison fetch (in real impl, a comparison view/query is needed)\n      const res = await utilities.rv.runView({\n        EntityName: entity.Name,\n        OrderBy: 'LastModified DESC',\n        MaxRows: 2\n      });\n      if (res.Success) {\n        updateState({ comparisonData: res.Results, loading: false });\n      } else {\n        updateState({ loading: false });\n      }\n    } catch {\n      updateState({ loading: false });\n    }\n  }, [entity, utilities]);\n\n  // Security reveal handler\n  const revealSensitive = () => {\n    updateState({ revealSensitive: true });\n    if (callbacks && callbacks.NotifyEvent) {\n      callbacks.NotifyEvent('AuditSensitiveReveal', {\n        entity: entity?.Name,\n        field: field?.Name || undefined\n      });\n    }\n  };\n\n  // UI helpers for badging and masking\n  function getSecurityBadge(securityClass) {\n    const color = securityClass === 'Restricted' ? styles.colors.error : styles.colors.warning;\n    return (\n      <span style={{\n        background: color,\n        color: '#fff',\n        padding: `0 ${styles.spacing.xs}`,\n        borderRadius: styles.borders.radius,\n        marginLeft: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.sm\n      }}\n        title={`Security Classification: ${securityClass}`}\n      >\n        {securityClass}\n      </span>\n    );\n  }\n\n  function maskSensitive(value) {\n    return localState.revealSensitive ? value : '••••••••';\n  }\n\n  if (!open) return null;\n\n  // High-contrast concat styles if enabled\n  const panelBg = highContrast ? styles.colors.text : styles.colors.surface;\n  const panelColor = highContrast ? styles.colors.surface : styles.colors.text;\n  const borderColor = highContrast ? styles.colors.primary : styles.colors.border;\n\n  // --- TAB PANELS ---\n  function renderSummary() {\n    if (!entity && !field) {\n      return <div style={{ padding: styles.spacing.xl, color: styles.colors.textSecondary }}>No details selected</div>;\n    }\n\n    return (\n      <div>\n        {entity && (\n          <div style={{ marginBottom: styles.spacing.lg }}>\n            <div style={{ display: 'flex', alignItems: 'center', marginBottom: styles.spacing.sm }}>\n              <span style={{ fontSize: styles.typography.fontSize.xl, fontWeight: 600 }}>{entity.Name}</span>\n              <span style={{ marginLeft: styles.spacing.md, color: styles.colors.textSecondary, fontSize: styles.typography.fontSize.sm }} title=\"Schema: Entity\">\n                ({entity.SchemaName})\n              </span>\n            </div>\n            <div style={{ fontSize: styles.typography.fontSize.md, marginBottom: styles.spacing.sm }}>{entity.Description}</div>\n            <div style={{ display: 'flex', gap: styles.spacing.md, fontSize: styles.typography.fontSize.sm, color: styles.colors.textSecondary }}>\n              <span>Rows: {entity.RowCount}</span>\n              <span>Last Modified: {entity.LastModified}</span>\n              <span>EntityID: {entity.EntityID}</span>\n            </div>\n          </div>\n        )}\n        {field && (\n          <div style={{ marginTop: styles.spacing.md }}>\n            <div style={{ fontWeight: 600, fontSize: styles.typography.fontSize.lg, display: 'flex', alignItems: 'center' }}>\n              {field.Name}\n              {field.SecurityClassification && getSecurityBadge(field.SecurityClassification)}\n            </div>\n            <div style={{ color: styles.colors.textSecondary }}>{field.Description}</div>\n            <div style={{ display: 'flex', gap: styles.spacing.md, marginTop: styles.spacing.sm }}>\n              <span title=\"Data Type\">Type: {field.DataType}</span>\n              <span title=\"Required field\">{field.IsRequired ? 'Required' : 'Optional'}</span>\n              {field.SecurityClassification && (\n                <Fragment>\n                  <span title=\"Sensitive data\">Value: <span style={{ letterSpacing: 2 }}>{maskSensitive('Sensitive Content')}</span></span>\n                  {!localState.revealSensitive && (\n                    <button\n                      onClick={revealSensitive}\n                      style={{\n                        marginLeft: styles.spacing.sm,\n                        background: styles.colors.warning,\n                        color: styles.colors.textInverse,\n                        border: 'none',\n                        borderRadius: styles.borders.radius,\n                        padding: `${styles.spacing.xs} ${styles.spacing.sm}`,\n                        cursor: 'pointer',\n                        fontSize: styles.typography.fontSize.sm\n                      }}\n                      tabIndex={0}\n                    >\n                      Reveal\n                    </button>\n                  )}\n                </Fragment>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderHistory() {\n    if (localState.loading) {\n      return <div style={{ padding: styles.spacing.xl, textAlign: 'center' }}>Loading history...</div>;\n    }\n    if (!localState.historyData) {\n      return <div style={{ padding: styles.spacing.xl, color: styles.colors.textSecondary }}>No history available.</div>;\n    }\n    if (!antd) return <div style={{ color: styles.colors.textSecondary }}>Ant Design (antd) library is required for tables</div>;\n    return React.createElement(antd.Table, {\n      rowKey: 'ID',\n      pagination: { pageSize: 10 },\n      columns: [\n        { title: 'Modified By', dataIndex: 'ModifiedBy', key: 'ModifiedBy' },\n        { title: 'Timestamp', dataIndex: 'LastModified', key: 'LastModified' },\n        { title: 'Summary', dataIndex: 'ChangeSummary', key: 'ChangeSummary', ellipsis: true }\n      ],\n      dataSource: localState.historyData,\n      style: { maxHeight: 320, overflow: 'auto' }\n    });\n  }\n\n  function renderComparison() {\n    if (localState.loading) {\n      return <div style={{ padding: styles.spacing.xl, textAlign: 'center' }}>Loading comparison...</div>;\n    }\n    if (!localState.comparisonData) {\n      return <div style={{ padding: styles.spacing.xl, color: styles.colors.textSecondary }}>No comparison data.</div>;\n    }\n    if (!antd) return <div style={{ color: styles.colors.textSecondary }}>Ant Design (antd) library is required for tables</div>;\n    // Render side-by-side comparison of the two most recent versions (diff, simple view)\n    const [v1, v2] = localState.comparisonData;\n    const fields = v1 ? Object.keys(v1) : [];\n    return (\n      <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n        <thead>\n          <tr>\n            <th style={{ ...thStyle(), width: '35%' }}>Field</th>\n            <th style={thStyle()}>Version 1</th>\n            <th style={thStyle()}>Version 2</th>\n          </tr>\n        </thead>\n        <tbody>\n          {fields.map(fieldName => (\n            <tr key={fieldName}>\n              <td style={tdStyle(true)}>{fieldName}</td>\n              <td style={tdStyle()}> {String(v1[fieldName])} </td>\n              <td style={tdStyle()}> {String(v2 && v2[fieldName] !== undefined ? v2[fieldName] : '')} </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  function thStyle() {\n    return {\n      background: styles.colors.secondary,\n      color: styles.colors.textInverse || '#fff',\n      fontWeight: 600,\n      padding: styles.spacing.sm,\n      border: `1px solid ${borderColor}`\n    };\n  }\n  function tdStyle(isKey) {\n    return {\n      fontWeight: isKey ? 600 : 'normal',\n      padding: styles.spacing.sm,\n      border: `1px solid ${borderColor}`,\n      background: styles.colors.surface\n    };\n  }\n\n  // --- DRAWER PANEL ---\n  // Ant Design Drawer and Tabs: Use as global if available\n  if (!antd) return <div style={{ padding: styles.spacing.xl, color: styles.colors.textSecondary }}>Ant Design (antd) library is required for this panel</div>;\n\n  const tabItems = [\n    { key: 'summary', label: 'Summary', children: renderSummary() },\n    { key: 'history', label: 'History', children: renderHistory() },\n    { key: 'comparison', label: 'Compare', children: renderComparison() }\n  ];\n\n  return (\n    React.createElement(antd.Drawer, {\n      open: open,\n      placement: 'right',\n      width: 480,\n      onClose: onClose,\n      closable: true,\n      forceRender: true,\n      style: {\n        background: panelBg,\n        color: panelColor,\n        boxShadow: styles.shadows?.lg || styles.colors.shadow,\n        borderLeft: `2px solid ${borderColor}`,\n        transition: styles.transitions?.normal,\n        height: '100%',\n        overflow: 'auto',\n        outline: 'none',\n        zIndex: 1200\n      },\n      bodyStyle: {\n        padding: styles.spacing.xl,\n        background: panelBg,\n        color: panelColor,\n        minHeight: '100%',\n        fontFamily: styles.typography.fontFamily,\n        fontSize: styles.typography.fontSize.md\n      },\n      afterOpenChange: (visible) => { if (!visible) onClose && onClose(); }\n    },\n      React.createElement(antd.Tabs, {\n        tabBarGutter: 18,\n        size: 'large',\n        items: tabItems,\n        activeKey: localState.tab,\n        onChange: handleTabChange,\n        tabBarStyle: {\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: 600,\n          borderBottom: `1px solid ${borderColor}`,\n          background: panelBg\n        },\n        moreIcon: <span style={{ fontSize: styles.typography.fontSize.md }}>...</span>,\n        tabPosition: 'top',\n        renderTabBar: (tabBarProps, Default) => Default(tabBarProps)\n      })\n    )\n  );\n}\n"
    },
    {
      "componentName": "EntityRelationshipGraph",
      "exampleUsage": "<EntityRelationshipGraph\n  relationships={data.entityRelationships}\n  currentEntityId={userState.treeState.selectedEntityId}\n  highlightedEntities={userState.relationshipState.highlightedEntities}\n  showType={userState.relationshipState.showType}\n  onEntityHover={callbacks.onEntityHover}\n  onEntityClick={callbacks.onEntityClick}\n  loading={userState.ui.loading}\n  highContrast={userState.ui.isHighContrast}\n/>",
      "description": "Visual map of entity foreign key/association relationships, synchronized with tree/context selection.",
      "functionalRequirements": "Displays current/related entities as a network or flowchart, highlighting FK and association edges. Entity selection in tree or graph stays in sync; supports click, hover, and zoom interactions. Lazy loads additional nodes for deep graphs. Supports keyboard navigation and screen readers. Loading/refresh indicators for large graphs.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entity Relationships",
              "displayFields": [
                "ParentEntity",
                "ChildEntity",
                "RelationshipType",
                "FKField"
              ]
            }
          ],
          "description": "Loads and visualizes relationship network, fetches additional edges/nodes for deep entity hierarchies."
        }
      },
      "technicalDesign": "Implements a virtualized or canvas/SVG-based relationship map, with focus/selection states linked to main tree. On hover/click events, emits IDs for sync highlight in tree/details. Graph is optimally updated only on data/selection change. Accessibility via aria-labels, keyboard shortcuts, descriptive titles. Visual performance prioritized for networks exceeding 100+ nodes.",
      "statePath": "relationshipState",
      "componentCode": "function EntityRelationshipGraph({\n  relationships,\n  currentEntityId,\n  highlightedEntities = [],\n  showType,\n  onEntityHover,\n  onEntityClick,\n  loading,\n  highContrast,\n  userState,\n  styles,\n  callbacks,\n  utilities,\n  statePath,\n  onEvent\n}) {\n  // Error handling for required external library\n  if (!window.d3) {\n    return (\n      <div\n        style={{\n          padding: styles?.spacing?.xl || 24,\n          color: styles?.colors?.textSecondary || '#888',\n          textAlign: 'center'\n        }}\n      >\n        D3 library is required for relationship graph visualization\n      </div>\n    );\n  }\n  const d3 = window.d3;\n\n  // State initialization (Zoom, Pan, Selection)\n  const [localState, setLocalState] = React.useState({\n    zoom: 1,\n    pan: { x: 0, y: 0 },\n    ...userState\n  });\n  const svgRef = React.useRef();\n  const containerRef = React.useRef();\n\n  // Event handler helper\n  const updateState = (nextState) => {\n    setLocalState(nextState);\n    onEvent && onEvent({\n      type: 'stateChanged',\n      source: 'EntityRelationshipGraph',\n      payload: { statePath, newState: nextState },\n      bubbles: true\n    });\n  };\n\n  // Build nodes/edges from relationships prop\n  // Nodes: all unique Parent and Child entities\n  // Edges: relationships array\n  const nodesMap = {};\n  const edges = [];\n  relationships.forEach(rel => {\n    nodesMap[rel.ParentEntity] = { id: rel.ParentEntity };\n    nodesMap[rel.ChildEntity] = { id: rel.ChildEntity };\n    edges.push({\n      source: rel.ParentEntity,\n      target: rel.ChildEntity,\n      type: rel.RelationshipType,\n      fkField: rel.FKField\n    });\n  });\n  const nodes = Object.values(nodesMap);\n\n  // Highlight: selected and hover effects\n  const isNodeHighlighted = (id) => highlightedEntities && highlightedEntities.includes(id);\n\n  // D3 simulation setup\n  React.useEffect(() => {\n    if (loading || !svgRef.current) return;\n\n    // Remove previous SVG content\n    while (svgRef.current.firstChild) svgRef.current.removeChild(svgRef.current.firstChild);\n\n    const width = containerRef.current ? containerRef.current.clientWidth : 800;\n    const height = containerRef.current ? containerRef.current.clientHeight : 600;\n    const svg = d3.select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('tabIndex', 0)\n      .attr('role', 'img')\n      .attr('aria-label', 'Entity Relationship Graph');\n\n    // Zoom/pan\n    const zoomed = (event) => {\n      svgGroup.attr('transform', event.transform);\n      const { x, y, k } = event.transform;\n      updateState({ ...localState, zoom: k, pan: { x, y } });\n    };\n    const zoom = d3.zoom()\n      .scaleExtent([0.2, 2])\n      .on('zoom', zoomed);\n    svg.call(zoom);\n    // Restore previous zoom/pan\n    svg.call(zoom.transform, d3.zoomIdentity.translate(localState.pan.x, localState.pan.y).scale(localState.zoom));\n\n    const svgGroup = svg.append('g');\n\n    // D3 force simulation\n    const sim = d3.forceSimulation(nodes)\n      .force('link', d3.forceLink(edges).id(d => d.id).distance(100))\n      .force('charge', d3.forceManyBody().strength(-300))\n      .force('center', d3.forceCenter(width / 2, height / 2));\n    // Edge rendering\n    const edgeGroup = svgGroup.append('g')\n      .attr('stroke', highContrast ? styles.colors.primary : styles.colors.border)\n      .attr('stroke-width', 2)\n      .selectAll('line')\n      .data(edges)\n      .enter()\n      .append('line')\n      .attr('marker-end', d => d.type === 'FK' || d.type === 'foreign key' ? 'url(#arrowhead)' : null);\n\n    // Arrowhead marker\n    svgGroup.append('defs').append('marker')\n      .attr('id', 'arrowhead')\n      .attr('viewBox', '0 -5 10 10')\n      .attr('refX', 16)\n      .attr('refY', 0)\n      .attr('markerWidth', 8)\n      .attr('markerHeight', 8)\n      .attr('orient', 'auto')\n      .append('path')\n      .attr('d', 'M0,-5L10,0L0,5')\n      .attr('fill', highContrast ? styles.colors.primary : styles.colors.border);\n\n    // Node rendering\n    const nodeGroup = svgGroup.append('g')\n      .selectAll('g')\n      .data(nodes)\n      .enter()\n      .append('g')\n      .attr('tabIndex', 0)\n      .attr('role', 'button')\n      .attr('aria-label', d => `Entity ${d.id}`);\n    // Draw circles\n    nodeGroup.append('circle')\n      .attr('r', 20)\n      .attr('fill', d => {\n        if (d.id === currentEntityId) return styles.colors.primary;\n        if (isNodeHighlighted(d.id)) return styles.colors.secondary;\n        return highContrast ? styles.colors.surface : styles.colors.background;\n      })\n      .attr('stroke', d => d.id === currentEntityId ? styles.colors.primaryHover : styles.colors.border)\n      .attr('stroke-width', 2)\n      .on('click', (e, d) => {\n        if (onEntityClick) onEntityClick(d.id);\n        onEvent && onEvent({\n          type: 'entitySelected',\n          source: 'EntityRelationshipGraph',\n          payload: { entityId: d.id },\n          bubbles: true\n        });\n      })\n      .on('mouseenter', (e, d) => {\n        if (onEntityHover) onEntityHover(d.id, true);\n        onEvent && onEvent({\n          type: 'entityHovered',\n          source: 'EntityRelationshipGraph',\n          payload: { entityId: d.id },\n          bubbles: true\n        });\n      })\n      .on('mouseleave', (e, d) => {\n        if (onEntityHover) onEntityHover(d.id, false);\n        onEvent && onEvent({\n          type: 'entityHoverLeft',\n          source: 'EntityRelationshipGraph',\n          payload: { entityId: d.id },\n          bubbles: true\n        });\n      });\n    // Draw labels\n    nodeGroup.append('text')\n      .attr('y', 35)\n      .attr('text-anchor', 'middle')\n      .attr('font-size', styles.typography.fontSize.sm)\n      .attr('fill', styles.colors.text)\n      .attr('pointer-events', 'none')\n      .text(d => d.id);\n\n    // Edge labels for FK fields & relationship type\n    if (showType) {\n      svgGroup.append('g')\n        .selectAll('text')\n        .data(edges)\n        .enter()\n        .append('text')\n        .attr('font-size', styles.typography.fontSize.xs)\n        .attr('fill', styles.colors.textSecondary)\n        .text(d => d.fkField ? `${d.type}: ${d.fkField}` : d.type)\n        .attr('pointer-events', 'none')\n        .attr('id', (d, i) => `edge-label-${i}`);\n    }\n    // Ticking\n    sim.on('tick', () => {\n      edgeGroup\n        .attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y);\n      nodeGroup\n        .attr('transform', d => `translate(${d.x},${d.y})`);\n      if (showType) {\n        svgGroup.selectAll('text[id^=\"edge-label-\"]')\n          .attr('x', d => (d.source.x + d.target.x) / 2)\n          .attr('y', d => (d.source.y + d.target.y) / 2 - 5);\n      }\n    });\n    // Handle clean-up\n    return () => {\n      sim.stop();\n    };\n  }, [loading, relationships, currentEntityId, highlightedEntities, highContrast, showType, localState.zoom, localState.pan]);\n\n  // Keyboard navigation: Arrow keys to pan, +/- for zoom\n  React.useEffect(() => {\n    const svgEl = svgRef.current;\n    if (!svgEl) return;\n    const handleKey = (e) => {\n      let { x, y } = localState.pan;\n      let zoom = localState.zoom;\n      if (e.key === 'ArrowLeft') x += 40;\n      if (e.key === 'ArrowRight') x -= 40;\n      if (e.key === 'ArrowUp') y += 40;\n      if (e.key === 'ArrowDown') y -= 40;\n      if (e.key === '+') zoom = Math.min(2, zoom + 0.1);\n      if (e.key === '-') zoom = Math.max(0.2, zoom - 0.1);\n      updateState({ ...localState, pan: { x, y }, zoom });\n    };\n    svgEl.addEventListener('keydown', handleKey);\n    return () => svgEl.removeEventListener('keydown', handleKey);\n  }, [localState]);\n\n  // Loading/refresh indicator\n  if (loading) {\n    return (\n      <div style={{ padding: styles.spacing.xl, textAlign: 'center', color: styles.colors.textSecondary }}>\n        Loading relationship network...\n      </div>\n    );\n  }\n  // Empty state\n  if (!nodes.length || !edges.length) {\n    return (\n      <div style={{ padding: styles.spacing.xl, textAlign: 'center', color: styles.colors.textSecondary }}>\n        No entity relationships found\n      </div>\n    );\n  }\n  // Main layout, handles height/overflow\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        height: '100%',\n        width: '100%',\n        position: 'relative',\n        background: styles.colors.surface,\n        border: `1px solid ${styles.colors.border}`,\n        borderRadius: styles.borders.radius,\n        overflow: 'hidden',\n        outline: 0\n      }}\n    >\n      <svg\n        ref={svgRef}\n        style={{ width: '100%', height: '100%', display: 'block', background: 'none' }}\n        tabIndex={0}\n        aria-label=\"Entity Relationship Graph\"\n      />\n    </div>\n  );\n}\n"
    },
    {
      "componentName": "PerformanceStatusBar",
      "exampleUsage": "<PerformanceStatusBar\n  isLoading={userState.ui.loading}\n  entityCount={data.entities.length}\n  fieldCount={data.entityFields.length}\n  paginatedEntities={userState.ui.pagination}\n  highContrast={userState.ui.isHighContrast}\n/>",
      "description": "Displays live performance metrics, loading indicators, and warnings for large data operations.",
      "functionalRequirements": "Notifies users of loading and wait times, provides active entity/field counts, pagination status, and warns if entity/field thresholds that may impact UX are hit. Accessible alert roles; adapts for high-contrast.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entities",
              "displayFields": [
                "EntityID"
              ]
            },
            {
              "entityName": "Entity Fields",
              "displayFields": [
                "EntityID"
              ]
            }
          ],
          "description": "Monitors visible and total entity/field counts, tracks loading/pagination states."
        }
      },
      "technicalDesign": "Receives loading/entity count and pagination from parent UI state and props, renders compact progress bar/spinner and stats. If threshold exceeded, displays warning with ARIA alert. Minimal re-render impact for scale.",
      "statePath": "ui",
      "componentCode": "function PerformanceStatusBar({ isLoading, entityCount, fieldCount, paginatedEntities, highContrast, userState, statePath, onEvent, styles, callbacks, utilities }) {\n    const [localState, setLocalState] = React.useState({ ...userState });\n    const thresholds = {\n        entity: 1000,\n        field: 60\n    };\n    // Compose warning messages if thresholds exceeded\n    const entityWarn = typeof entityCount === 'number' && entityCount > thresholds.entity;\n    const fieldWarn = typeof fieldCount === 'number' && fieldCount > thresholds.field;\n    const showWarning = entityWarn || fieldWarn;\n    const warningMsg = [\n        entityWarn ? `Entity count (${entityCount}) exceeds recommended threshold (${thresholds.entity})` : null,\n        fieldWarn ? `Field count (${fieldCount}) exceeds recommended threshold (${thresholds.field})` : null\n    ].filter(Boolean).join(' and ');\n    // Accessible color/theme\n    const containerStyle = {\n        display: 'flex',\n        alignItems: 'center',\n        gap: styles.spacing.md,\n        padding: styles.spacing.sm,\n        width: '100%',\n        boxSizing: 'border-box',\n        background: highContrast ? styles.colors.surface : styles.colors.background, \n        borderBottom: `1px solid ${styles.colors.border}`,\n        fontSize: styles.typography.fontSize.sm,\n        color: styles.colors.text,\n        minHeight: '40px'\n    };\n    const statStyle = {\n        display: 'flex',\n        alignItems: 'center',\n        gap: styles.spacing.xs,\n        background: styles.colors.surface,\n        borderRadius: styles.borders.radius,\n        padding: `0 ${styles.spacing.sm}`,\n        height: '28px',\n        color: styles.colors.textSecondary\n    };\n    // Spinner (use Ant Design if available, else fallback to Unicode)\n    const Spinner = () => {\n        if (window.antd?.Spin) {\n            return React.createElement(window.antd.Spin, { size: 'small' });\n        }\n        return <span style={{ fontSize: '18px', marginRight: styles.spacing.xs }} aria-label=\"loading\" role=\"status\">⏳</span>;\n    };\n    // Progress bar (for loading/pagination)\n    function ProgressBar({ percent }) {\n        return (\n            <div style={{\n                width: '60px',\n                height: '6px',\n                borderRadius: styles.borders.radius,\n                background: styles.colors.borderLight || '#eee',\n                marginLeft: styles.spacing.xs,\n                marginRight: styles.spacing.sm,\n                overflow: 'hidden',\n                position: 'relative'\n            }}>\n                <div style={{\n                    width: `${Math.min(100, Math.max(0, percent))}%`,\n                    height: '100%',\n                    background: styles.colors.primary,\n                    transition: 'width 0.2s',\n                    borderRadius: styles.borders.radius,\n                    position: 'absolute',\n                    top: 0, left: 0\n                }}/>\n            </div>\n        );\n    }\n    // Pagination status display\n    let pageStats = null;\n    if (paginatedEntities && typeof paginatedEntities.total === 'number') {\n        const { page = 1, pageSize = 50, total = 0 } = paginatedEntities;\n        const shown = Math.min(total, page * pageSize);\n        const percent = total > 0 ? (shown / total) * 100 : 0;\n        pageStats = (\n            <div style={statStyle} title={`Page ${page}, Showing ${shown} of ${total}`}>\n                <span>{`Page ${page}`}</span>\n                <ProgressBar percent={percent} />\n                <span style={{color: styles.colors.textTertiary}}>{`${shown} / ${total}`}</span>\n            </div>\n        );\n    }\n    // Compose status display\n    return (\n        <div style={containerStyle} role=\"status\" aria-live=\"polite\" aria-busy={!!isLoading}>\n            {isLoading && <Spinner />}\n            <div style={statStyle} title=\"Entity Count\" aria-label={`Entity count: ${entityCount}`}>🗂 <span>{entityCount}</span> Entities</div>\n            <div style={statStyle} title=\"Field Count\" aria-label={`Field count: ${fieldCount}`}>🏷 <span>{fieldCount}</span> Fields</div>\n            {pageStats}\n            {showWarning && (\n                <div\n                    style={{\n                        ...statStyle,\n                        background: styles.colors.warningLight || '#fffbe6',\n                        color: styles.colors.warning || '#ad8b00',\n                        fontWeight: 600,\n                        marginLeft: styles.spacing.lg, \n                        padding: `${styles.spacing.xs} ${styles.spacing.md}`,\n                        border: `1px solid ${styles.colors.warning || '#faad14'}`,\n                        boxShadow: styles.shadows?.sm || '0 1px 3px #faad1444'\n                    }}\n                    role=\"alert\"\n                    aria-live=\"assertive\"\n                >\n                    ⚠️ {warningMsg}\n                </div>\n            )}\n        </div>\n    );\n}\n"
    },
    {
      "componentName": "RecentEntitiesPanel",
      "exampleUsage": "<RecentEntitiesPanel\n  recentEntities={userState.ui.recentEntities}\n  onSelectEntity={callbacks.onSelectEntity}\n  highContrast={userState.ui.isHighContrast}\n/>",
      "description": "Shortcut panel for quick access to the most recently explored entities, boosting productivity.",
      "functionalRequirements": "Shows a scrollable, persistently accessible list of recently viewed entities. Allows keyboard/mouse selection. Supports high-contrast. Clear labelling and ARIA controls for focus management.",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entities",
              "displayFields": [
                "Name",
                "EntityID"
              ]
            }
          ],
          "description": "Uses previously viewed entities from local user state, ensures metadata and permission alignment."
        }
      },
      "technicalDesign": "Binds recentEntities from parent UI state to a list/grid, clicking/enter selects and opens details in tree and panel. Efficient updates to prevent state explosions. Accessible for screen readers, with clear focus return rules.",
      "statePath": "ui.recentEntities",
      "componentCode": "function RecentEntitiesPanel({ recentEntities, onSelectEntity, highContrast, userState, statePath, onEvent, styles, callbacks, utilities }) {\n    const [localState, setLocalState] = React.useState({ ...userState });\n    \n    // Key handler state\n    const listRef = React.useRef();\n    const [focusedIndex, setFocusedIndex] = React.useState(-1);\n\n    // State update utility\n    const updateState = (next) => {\n        setLocalState(next);\n        if (onEvent) {\n            onEvent({\n                type: 'stateChanged',\n                source: 'RecentEntitiesPanel',\n                payload: {\n                    statePath,\n                    newState: next\n                },\n                bubbles: true\n            });\n        }\n    };\n\n    // Accessibility and ARIA helpers\n    const getAriaActiveDescendant = () => {\n        if (focusedIndex >= 0 && recentEntities && recentEntities.length > focusedIndex) {\n            return `recent-entity-${recentEntities[focusedIndex]?.EntityID}`;\n        }\n        return undefined;\n    };\n\n    // Keyboard navigation (up/down/enter)\n    const handleKeyDown = (e) => {\n        if (!recentEntities || recentEntities.length === 0) return;\n        if (e.key === 'ArrowDown') {\n            e.preventDefault();\n            setFocusedIndex((prev) => Math.min((prev < 0 ? 0 : prev + 1), recentEntities.length - 1));\n        } else if (e.key === 'ArrowUp') {\n            e.preventDefault();\n            setFocusedIndex((prev) => Math.max((prev <= 0 ? 0 : prev - 1), 0));\n        } else if (e.key === 'Enter' && focusedIndex >= 0) {\n            e.preventDefault();\n            const selected = recentEntities[focusedIndex];\n            if (selected) {\n                handleItemSelect(selected, focusedIndex, true);\n            }\n        }\n    };\n\n    // Focus & ARIA management\n    React.useEffect(() => {\n        // If focusedIndex changes, scroll selected into view\n        if (listRef.current && focusedIndex >= 0) {\n            const el = listRef.current.querySelector(`#recent-entity-${recentEntities[focusedIndex].EntityID}`);\n            if (el && el.scrollIntoView) {\n                el.scrollIntoView({ block: 'nearest' });\n            }\n        }\n    }, [focusedIndex, recentEntities]);\n\n    // Handle selection\n    const handleItemSelect = (item, idx, viaKeyboard = false) => {\n        if (onSelectEntity) {\n            onSelectEntity(item);\n        } else if (callbacks && callbacks.OpenEntityRecord) {\n            callbacks.OpenEntityRecord('Entities', [ { FieldName: 'EntityID', Value: item.EntityID } ]);\n        }\n        setFocusedIndex(idx);\n        // Fire coordinated event\n        if (onEvent) {\n            onEvent({\n                type: 'itemSelected',\n                source: 'RecentEntitiesPanel',\n                payload: {\n                    itemId: item.EntityID,\n                    item\n                },\n                bubbles: true\n            });\n        }\n        // Optionally persist focus on keyboard selection\n        if (!viaKeyboard && listRef.current) {\n            listRef.current.focus();\n        }\n    };\n\n    // Rendering logic\n    if (!recentEntities || recentEntities.length === 0) {\n        return (\n            <div style={{\n                padding: styles.spacing.xl,\n                textAlign: 'center',\n                color: styles.colors.textSecondary,\n                background: styles.colors.surface\n            }}>\n                No recent entities\n            </div>\n        );\n    }\n\n    // Accessibility styling helpers\n    const mainColor = highContrast ? styles.colors.textInverse || '#fff' : styles.colors.text;\n    const panelBg = highContrast ? styles.colors.primary : styles.colors.surface;\n    const highlightBg = highContrast ? styles.colors.primaryHover : styles.colors.primaryLight || styles.colors.primary;\n    const selectedColor = highContrast ? styles.colors.textInverse || '#fff' : '#fff';\n\n    return (\n        <div\n            role=\"region\"\n            aria-label=\"Recent Entities Panel\"\n            tabIndex={0}\n            ref={listRef}\n            onKeyDown={handleKeyDown}\n            style={{\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n                background: panelBg,\n                border: `1px solid ${styles.colors.border}`,\n                borderRadius: styles.borders.radius,\n                outline: 'none',\n                minWidth: '220px',\n                maxWidth: '350px',\n                overflow: 'hidden',\n            }}\n        >\n            <div style={{\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.lg,\n                fontWeight: 600,\n                borderBottom: `1px solid ${styles.colors.border}`,\n                background: panelBg,\n                color: mainColor\n            }}>\n                Recent Entities\n            </div>\n            <ul\n                ref={listRef}\n                tabIndex={0}\n                style={{\n                    flex: 1,\n                    listStyle: 'none',\n                    margin: 0,\n                    padding: 0,\n                    overflowY: 'auto',\n                    background: panelBg\n                }}\n                role=\"listbox\"\n                aria-activedescendant={getAriaActiveDescendant()} \n            >\n                {recentEntities.map((entity, idx) => {\n                    const isSelected = idx === focusedIndex;\n                    return (\n                        <li\n                            id={`recent-entity-${entity.EntityID}`}\n                            key={entity.EntityID}\n                            tabIndex={-1}\n                            role=\"option\"\n                            aria-selected={isSelected}\n                            style={{\n                                display: 'flex',\n                                alignItems: 'center',\n                                padding: styles.spacing.sm,\n                                cursor: 'pointer',\n                                background: isSelected ? highlightBg : panelBg,\n                                color: isSelected ? selectedColor : mainColor,\n                                fontWeight: isSelected ? 600 : 400,\n                                outline: isSelected ? `2px solid ${styles.colors.primary}` : 'none',\n                                borderBottom: `1px solid ${styles.colors.borderLight || styles.colors.border}`\n                            }}\n                            onClick={() => handleItemSelect(entity, idx, false)}\n                            onFocus={() => setFocusedIndex(idx)}\n                            onMouseEnter={() => setFocusedIndex(idx)}\n                        >\n                            <span style={{ flex: 1, minWidth: 0, whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n                                {entity.Name}\n                            </span>\n                            <span style={{\n                                fontSize: styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                marginLeft: styles.spacing.md\n                            }}>\n                                {entity.EntityID}\n                            </span>\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n}\n"
    }
  ],
  "componentCode": "function EntityExplorer({ data, utilities, userState, callbacks, styles, components }) {\n  \n console.log('React available:', typeof React);\n  console.log('useState available:', typeof useState);\n  console.log('useEffect available:', typeof useEffect); \n const {\n    EntityTreeNavigation,\n    EntityFilterBar,\n    EntityDetailsPanel,\n    EntityRelationshipGraph,\n    PerformanceStatusBar,\n    RecentEntitiesPanel\n  } = components;\n  const [fullUserState, setFullUserState] = React.useState({\n    treeState: {\n      expandedEntities: [],\n      selectedEntityId: null,\n      selectedFieldId: null,\n      ...((userState && userState.treeState) || {})\n    },\n    searchFilter: {\n      text: '',\n      attributeFilters: {},\n      ...((userState && userState.searchFilter) || {})\n    },\n    detailsPanel: {\n      isOpen: false,\n      tab: 'summary',\n      ...((userState && userState.detailsPanel) || {})\n    },\n    relationshipState: {\n      highlightedEntities: [],\n      showType: 'all',\n      ...((userState && userState.relationshipState) || {})\n    },\n    ui: {\n      loading: false,\n      pagination: {},\n      isHighContrast: false,\n      recentEntities: [],\n      ...((userState && userState.ui) || {})\n    },\n    ...userState // In case new fields are added in userState\n  });\n\n  // Helper for persisting state upwards\n  const updateUserState = React.useCallback((stateUpdate) => {\n    const newState = typeof stateUpdate === 'function'\n      ? stateUpdate(fullUserState)\n      : { ...fullUserState, ...stateUpdate };\n    setFullUserState(newState);\n    if (callbacks && callbacks.UpdateUserState) {\n      callbacks.UpdateUserState(newState);\n    }\n  }, [fullUserState, callbacks]);\n\n  // Event Handler per Skip's event system\n  const handleComponentEvent = React.useMemo(() => {\n    return (event) => {\n      // Enhanced logic for business event forwarding & state\n      if (!event || !event.type) return;\n      // Tree selection events\n      if ((event.type === 'entitySelected' || event.type === 'itemSelected') && event.source === 'EntityTreeNavigation') {\n        const selectedEntityId = event.payload?.itemId || event.payload?.entityId;\n        updateUserState({\n          treeState: {\n            ...fullUserState.treeState,\n            selectedEntityId: selectedEntityId,\n            selectedFieldId: null, // reset field selection on new entity\n            expandedEntities: fullUserState.treeState.expandedEntities\n          },\n          detailsPanel: {\n            ...fullUserState.detailsPanel,\n            isOpen: !!selectedEntityId,\n            tab: 'summary'\n          },\n          ui: {\n            ...fullUserState.ui,\n            recentEntities: selectedEntityId\n              ? [\n                  ...fullUserState.ui.recentEntities.filter(id => id !== selectedEntityId),\n                  selectedEntityId\n                ].slice(-20) // keep up to 20\n              : fullUserState.ui.recentEntities\n          }\n        });\n        return;\n      }\n      // Field selection (open detail for field)\n      if (event.type === 'fieldSelected' && event.source === 'EntityTreeNavigation') {\n        const selectedFieldId = event.payload?.fieldId;\n        updateUserState({\n          treeState: {\n            ...fullUserState.treeState,\n            selectedFieldId: selectedFieldId\n          },\n          detailsPanel: {\n            ...fullUserState.detailsPanel,\n            isOpen: !!selectedFieldId,\n            tab: 'summary'\n          }\n        });\n        return;\n      }\n      // Expand/collapse and lazy load propagate to treeState\n      if (event.type === 'expandToggled' && event.source === 'EntityTreeNavigation') {\n        updateUserState({\n          treeState: {\n            ...fullUserState.treeState,\n            expandedEntities: event.payload.expandedEntities\n          }\n        });\n        return;\n      }\n      if (event.type === 'lazyLoadRequested' && event.source === 'EntityTreeNavigation') {\n        updateUserState({\n          ui: { ...fullUserState.ui, loading: true }\n        });\n        // Data reload triggers handled in child\n        return;\n      }\n      // Filter/search\n      if ((event.type === 'searchChanged' || event.type === 'filterChanged') && event.source === 'EntityFilterBar') {\n        updateUserState({\n          searchFilter: {\n            ...fullUserState.searchFilter,\n            ...(event.type === 'searchChanged' ? { text: event.payload.value } : {}),\n            ...(event.type === 'filterChanged' ? { attributeFilters: event.payload.value } : {})\n          },\n          treeState: {\n            ...fullUserState.treeState,\n            // Auto-expand or highlight handled by child on filters\n          }\n        });\n        return;\n      }\n      // Details panel\n      if (event.type === 'closeDetails' && event.source === 'EntityDetailsPanel') {\n        updateUserState({\n          detailsPanel: { ...fullUserState.detailsPanel, isOpen: false }\n        });\n        return;\n      }\n      // Details tab change\n      if (event.type === 'tabChanged' && event.source === 'EntityDetailsPanel') {\n        updateUserState({\n          detailsPanel: { ...fullUserState.detailsPanel, tab: event.payload.tab }\n        });\n        return;\n      }\n      // Recently viewed selection\n      if (event.type === 'entitySelected' && event.source === 'RecentEntitiesPanel') {\n        const selectedEntityId = event.payload?.itemId || event.payload?.entityId;\n        updateUserState({\n          treeState: {\n            ...fullUserState.treeState,\n            selectedEntityId: selectedEntityId,\n            selectedFieldId: null\n          },\n          detailsPanel: {\n            ...fullUserState.detailsPanel,\n            isOpen: !!selectedEntityId,\n            tab: 'summary'\n          }\n        });\n        return;\n      }\n      // Relationship graph interactions\n      if ((event.type === 'entityHovered' || event.type === 'entityClicked') && event.source === 'EntityRelationshipGraph') {\n        updateUserState({\n          relationshipState: {\n            ...fullUserState.relationshipState,\n            highlightedEntities: event.payload?.highlightedEntities || []\n          }\n        });\n        if (event.type === 'entityClicked' && event.payload?.entityId) {\n          updateUserState({\n            treeState: { ...fullUserState.treeState, selectedEntityId: event.payload.entityId },\n            detailsPanel: { ...fullUserState.detailsPanel, isOpen: true, tab: 'summary' }\n          });\n        }\n        return;\n      }\n      // High contrast mode toggle (could be wired to user settings elsewhere)\n      if (event.type === 'toggleHighContrast') {\n        updateUserState({\n          ui: { ...fullUserState.ui, isHighContrast: !fullUserState.ui.isHighContrast }\n        });\n        return;\n      }\n      // Fallback: handle stateChanged and all others w/ standard handler\n      const stdHandler = createStandardEventHandler(updateUserState, callbacks);\n      stdHandler(event);\n    };\n  }, [fullUserState, updateUserState, callbacks]);\n\n  // Compose next/selected entity & field objects for details panel\n  const selectedEntity = React.useMemo(() => {\n    const eid = fullUserState.treeState.selectedEntityId;\n    return eid ? (data?.entities || []).find(e => e.EntityID === eid) : null;\n  }, [data, fullUserState.treeState.selectedEntityId]);\n  const selectedField = React.useMemo(() => {\n    const fid = fullUserState.treeState.selectedFieldId;\n    return fid ? (data?.entityFields || []).find(f => f.ID === fid) : null;\n  }, [data, fullUserState.treeState.selectedFieldId]);\n\n  // Provide entity relationships data\n  const entityRelationships = data?.entityRelationships || [];\n\n  // Responsive: master-detail split for desktop/tablet, switch to stacked (list/detail) for mobile\n  const [isMobile, setIsMobile] = React.useState(false);\n  React.useEffect(() => {\n    const checkMobile = () => setIsMobile(window.innerWidth < 768);\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  // Optionally apply high contrast overrides to styles\n  const effectiveStyles = React.useMemo(() => {\n    if (fullUserState.ui && fullUserState.ui.isHighContrast && styles) {\n      // Override some palette for high contrast needs\n      return {\n        ...styles,\n        colors: {\n          ...styles.colors,\n          background: '#000',\n          surface: '#000',\n          border: '#fff',\n          text: '#fff',\n          textSecondary: '#fff',\n          primary: '#FFD600',\n          primaryHover: '#FFEA00',\n          shadow: '0 0 0 2px #FFD600'\n        }\n      };\n    }\n    return styles;\n  }, [styles, fullUserState.ui && fullUserState.ui.isHighContrast]);\n\n  // Layout: Split flex for wide, column for mobile\n  return (\n    <div\n      style={{\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        background: effectiveStyles.colors.background\n      }}\n      aria-label=\"Entity Explorer Root\"\n    >\n      {/* Toolbar: Filter Bar & Status */}\n      <div style={{\n        flexShrink: 0,\n        borderBottom: `1px solid ${effectiveStyles.colors.border}`,\n        background: effectiveStyles.colors.surface,\n        padding: effectiveStyles.spacing.sm,\n        display: 'flex',\n        flexDirection: isMobile ? 'column' : 'row',\n        alignItems: 'center',\n        gap: effectiveStyles.spacing.md\n      }}>\n        <EntityFilterBar\n          attributeFilters={fullUserState.searchFilter.attributeFilters}\n          searchTerm={fullUserState.searchFilter.text}\n          onAttributeFilterChange={handleComponentEvent}\n          onSearchInput={handleComponentEvent}\n          fieldTypes={data.entitiesFieldTypes} \n          entityTypes={data.entityTypes} \n          securityClasses={data.securityClasses} \n          highContrast={fullUserState.ui.isHighContrast}\n          styles={effectiveStyles}\n          userState={fullUserState.searchFilter}\n          onEvent={handleComponentEvent}\n          statePath=\"searchFilter\"\n          callbacks={callbacks}\n          utilities={utilities}\n        />\n        <div style={{ flex: 1 }} />\n        <PerformanceStatusBar\n          isLoading={fullUserState.ui.loading}\n          entityCount={data.entities ? data.entities.length : 0}\n          fieldCount={data.entityFields ? data.entityFields.length : 0}\n          paginatedEntities={fullUserState.ui.pagination}\n          highContrast={fullUserState.ui.isHighContrast}\n          userState={fullUserState.ui}\n          onEvent={handleComponentEvent}\n          styles={effectiveStyles}\n          statePath=\"ui\"\n          callbacks={callbacks}\n          utilities={utilities}\n        />\n      </div>\n\n      {/* Main explorer body */}\n      <div\n        style={{\n          flex: 1,\n          display: 'flex',\n          flexDirection: isMobile ? 'column' : 'row',\n          height: 0,\n          minHeight: 0,\n          overflow: 'hidden',\n          gap: effectiveStyles.spacing.md,\n          background: effectiveStyles.colors.background\n        }}\n      >\n        {/* LEFT COLUMN: Tree and recents */}\n        <div\n          style={{\n            width: isMobile ? '100%' : 320,\n            minWidth: isMobile ? undefined : 220,\n            maxWidth: isMobile ? undefined : 380,\n            flex: isMobile ? 'none' : '0 0 320px',\n            display: 'flex',\n            flexDirection: 'column',\n            borderRight: isMobile ? 'none' : `1px solid ${effectiveStyles.colors.border}`,\n            background: effectiveStyles.colors.surface,\n            height: '100%',\n            overflow: 'hidden'\n          }}\n        >\n          <div style={{ flex: 1, minHeight: 0, overflow: 'auto' }}>\n            <EntityTreeNavigation\n              entities={data.entities}\n              expandedEntities={fullUserState.treeState.expandedEntities}\n              selectedEntityId={fullUserState.treeState.selectedEntityId}\n              selectedFieldId={fullUserState.treeState.selectedFieldId}\n              searchTerm={fullUserState.searchFilter.text}\n              attributeFilters={fullUserState.searchFilter.attributeFilters}\n              onExpandCollapse={handleComponentEvent}\n              onSelectEntity={handleComponentEvent}\n              onSelectField={handleComponentEvent}\n              onLazyLoad={handleComponentEvent}\n              loadingStates={fullUserState.ui.loading}\n              highContrast={fullUserState.ui.isHighContrast}\n              ariaTreeId=\"entity-explorer-tree\"\n              styles={effectiveStyles}\n              userState={fullUserState.treeState}\n              onEvent={handleComponentEvent}\n              statePath=\"treeState\"\n              callbacks={callbacks}\n              utilities={utilities}\n            />\n          </div>\n          <div style={{\n            borderTop: `1px solid ${effectiveStyles.colors.border}`,\n            background: effectiveStyles.colors.surface,\n            padding: effectiveStyles.spacing.sm,\n            minHeight: 40\n          }}>\n            <RecentEntitiesPanel\n              recentEntities={fullUserState.ui.recentEntities}\n              onSelectEntity={handleComponentEvent}\n              highContrast={fullUserState.ui.isHighContrast}\n              userState={fullUserState.ui.recentEntities}\n              onEvent={handleComponentEvent}\n              styles={effectiveStyles}\n              statePath=\"ui.recentEntities\"\n              callbacks={callbacks}\n              utilities={utilities}\n            />\n          </div>\n        </div>\n        {/* CENTER COLUMN: Entity Relationships Graph */}\n        {!isMobile && (\n          <div\n            style={{\n              minWidth: 0,\n              width: 360,\n              maxWidth: 540,\n              borderRight: `1px solid ${effectiveStyles.colors.border}`,\n              background: effectiveStyles.colors.surface,\n              display: 'flex',\n              flexDirection: 'column',\n              height: '100%'\n            }}\n          >\n            <EntityRelationshipGraph\n              relationships={entityRelationships}\n              currentEntityId={fullUserState.treeState.selectedEntityId}\n              highlightedEntities={fullUserState.relationshipState.highlightedEntities}\n              showType={fullUserState.relationshipState.showType}\n              onEntityHover={handleComponentEvent}\n              onEntityClick={handleComponentEvent}\n              loading={fullUserState.ui.loading}\n              highContrast={fullUserState.ui.isHighContrast}\n              userState={fullUserState.relationshipState}\n              onEvent={handleComponentEvent}\n              styles={effectiveStyles}\n              statePath=\"relationshipState\"\n              callbacks={callbacks}\n              utilities={utilities}\n            />\n          </div>\n        )}\n        {/* RIGHT COLUMN: Details Panel (as drawer over content if open) */}\n        <div style={{\n          flex: 1,\n          minWidth: 0,\n          position: 'relative',\n          height: '100%',\n          overflow: 'auto',\n          background: effectiveStyles.colors.background\n        }}>\n          <EntityDetailsPanel\n            entity={selectedEntity}\n            field={selectedField}\n            open={fullUserState.detailsPanel.isOpen}\n            tab={fullUserState.detailsPanel.tab}\n            onClose={handleComponentEvent}\n            onTabChange={handleComponentEvent}\n            onViewHistory={handleComponentEvent}\n            onViewComparison={handleComponentEvent}\n            highContrast={fullUserState.ui.isHighContrast}\n            userState={fullUserState.detailsPanel}\n            onEvent={handleComponentEvent}\n            styles={effectiveStyles}\n            statePath=\"detailsPanel\"\n            callbacks={callbacks}\n            utilities={utilities}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}"
}