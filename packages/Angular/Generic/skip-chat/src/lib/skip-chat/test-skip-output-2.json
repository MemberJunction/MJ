{
  "techExplanation": "Combines centralized state via useReducer/context at the root, handing state slices and specific callbacks down to each child. Data loads initially via static props but supports runtime fetch for deep entity trees and field tables as users interact beyond initial load. State is decomposed for performance and scalability.",
  "childComponents": [
    {
      "componentName": "EntityListPanel",
      "exampleUsage": "<EntityListPanel\n  entities={entities}\n  selectedEntityId={selectedEntityId}\n  expandedIds={entityListExpandedIds}\n  onSelect={handleEntitySelect}\n  onToggleExpand={handleEntityToggleExpand}\n  loading={entityListLoading}\n  error={entityListError}\n/>",
      "description": "Sidebar with collapsible list of all entities. Each entity can expand to show child entities or info.",
      "functionalRequirements": "- Collapsible/expandable entity list, with animated transitions\n- User selects or expands/collapses entities\n- Calls back on selection or expansion\n- Syncs with root selection and UI transition state\n- Accessible list with ARIA roles for collapsible sections\n- Shows loading or error state as needed",
      "dataRequirements": {
        "mode": "static",
        "staticData": {
          "description": "Receives current entity list plus their child relationships"
        },
        "description": "Always works off in-memory or pre-loaded data, updates only on rehydration or filter."
      },
      "technicalDesign": "- Receives entities, current selection, list of expanded IDs, and callbacks\n- Renders each entity as a row with expand/collapse icon and transition\n- Clicking entity row updates selection; clicking expand toggles expandedIds\n- State path: entityList and entityListExpandedIds\n- Uses CSS transitions/JS animation library for smooth collapse\n- ARIA attributes for expand/collapse trees",
      "statePath": "entityList",
      "componentCode": "function EntityListPanel({ data, userState, statePath, onEvent, styles, callbacks, utilities }) {\n    const entities = data.entities || [];\n    const selectedEntityId = data.selectedEntityId;\n    const expandedIds = data.expandedIds || [];\n    const loading = data.loading;\n    const error = data.error;\n    const [localState, setLocalState] = React.useState({ ...userState });\n    \n    const handleSelect = React.useCallback((entityId, entity) => {\n        onEvent({\n            type: 'entitySelected',\n            source: 'EntityListPanel',\n            payload: { entityId: entityId, item: entity, statePath },\n            bubbles: true\n        });\n        // Update selectedEntityId in parent state for sync\n        onEvent({\n            type: 'stateChanged',\n            source: 'EntityListPanel',\n            payload: {\n                statePath: statePath,\n                newState: { ...localState, lastSelectedId: entityId }\n            },\n            bubbles: true\n        });\n    }, [onEvent, localState, statePath]);\n  \n    const handleToggleExpand = React.useCallback((entityId) => {\n        onEvent({\n            type: 'entityExpandToggle',\n            source: 'EntityListPanel',\n            payload: { entityId, isExpanded: !expandedIds.includes(entityId), statePath },\n            bubbles: true\n        });\n        // Update expandedIds in parent state for sync\n        let nextExpanded;\n        if (expandedIds.includes(entityId)) {\n            nextExpanded = expandedIds.filter(eid => eid !== entityId);\n        } else {\n            nextExpanded = [...expandedIds, entityId];\n        }\n        onEvent({\n            type: 'stateChanged',\n            source: 'EntityListPanel',\n            payload: {\n                statePath: statePath,\n                newState: { ...localState, expandedIds: nextExpanded }\n            },\n            bubbles: true\n        });\n    }, [onEvent, expandedIds, statePath, localState]);\n    \n    // Tree utilities\n    function buildTree(flatList) {\n        // Assumed entity shape: ID, Name, ParentID/Children (one or the other required)\n        // Flatten -> tree\n        const idMap = {};\n        flatList.forEach(e => { idMap[e.ID] = { ...e, children: [] }; });\n        let tree = [];\n        flatList.forEach(e => {\n            if (e.ParentID && idMap[e.ParentID]) {\n                idMap[e.ParentID].children.push(idMap[e.ID]);\n            } else {\n                tree.push(idMap[e.ID]);\n            }\n        });\n        return tree;\n    }\n    const entityTree = React.useMemo(() => buildTree(entities), [entities]);\n    \n    // Expand/collapse animation helpers using antd's Collapse if present, otherwise custom\n    const useAntd = !!window.antd;\n    const Collapse = window.antd ? window.antd.Collapse : null;\n\n    // Helper for rendering entity rows recursively\n    function EntityRow({ entity, level }) {\n        const hasChildren = entity.children && entity.children.length > 0;\n        const isExpanded = expandedIds.includes(entity.ID);\n        const isSelected = selectedEntityId === entity.ID;\n        return (\n            <div\n                key={entity.ID}\n                aria-level={level}\n                role=\"treeitem\"\n                aria-expanded={hasChildren ? isExpanded : undefined}\n                aria-selected={isSelected}\n                style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    paddingLeft: `calc(${styles.spacing.md} * ${level})`,\n                    userSelect: 'none',\n                    background: isSelected ? styles.colors.primary : styles.colors.surface,\n                    color: isSelected ? '#fff' : styles.colors.text,\n                    cursor: 'pointer',\n                    minHeight: '36px',\n                    borderRadius: styles.borders.radius,\n                    marginBottom: styles.spacing.xs,\n                    transition: 'background 0.2s'\n                }}\n                tabIndex={0}\n                onClick={e => handleSelect(entity.ID, entity)}\n                onKeyDown={e => {\n                  if (e.key === 'Enter' || e.key === ' ') handleSelect(entity.ID, entity)\n                }}\n            >\n                {hasChildren && (\n                    <button\n                        aria-label={isExpanded ? 'Collapse entity' : 'Expand entity'}\n                        aria-expanded={isExpanded}\n                        onClick={event => {\n                            event.stopPropagation();\n                            handleToggleExpand(entity.ID);\n                        }}\n                        style={{\n                            marginRight: styles.spacing.xs,\n                            background: 'none',\n                            border: 'none',\n                            color: styles.colors.textSecondary,\n                            cursor: 'pointer',\n                            minWidth: 24,\n                            minHeight: 24,\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            outline: 'none',\n                            fontSize: styles.typography.fontSize.md\n                        }}\n                    >\n                        {isExpanded ? '\\u25BC' : '\\u25B6'} {/*▼▶*/}\n                    </button>\n                )}\n                <span\n                  style={{\n                    flex: 1,\n                    fontWeight: isSelected ? 600 : 400,\n                    fontSize: styles.typography.fontSize.md\n                  }}\n                >\n                  {entity.Name}\n                </span>\n            </div>\n        );\n    }\n    function renderTree(tree, level) {\n        return tree.map(entity => (\n            <React.Fragment key={entity.ID}>\n                <EntityRow entity={entity} level={level} />\n                {/* Children with collapse/expand */}\n                {entity.children && entity.children.length > 0 && expandedIds.includes(entity.ID) && (\n                    <div role=\"group\" style={{ marginLeft: styles.spacing.md, borderLeft: `2px solid ${styles.colors.borderLight||styles.colors.border}` }}>\n                        {renderTree(entity.children, level + 1)}\n                    </div>\n                )}\n            </React.Fragment>\n        ));\n    }\n    \n    // ARIA element IDs\n    const ariaRootId = 'entity-list-tree';\n    \n    // Loading/Error handling (only one boundary)\n    if (loading) {\n        return <div style={{ padding: styles.spacing.lg, textAlign: 'center', color: styles.colors.textSecondary }}>Loading...</div>;\n    }\n    if (error) {\n        return <div style={{ padding: styles.spacing.lg, textAlign: 'center', color: styles.colors.error }}>Error: {error}</div>;\n    }\n    if (!entities || entities.length === 0) {\n        return <div style={{ padding: styles.spacing.lg, textAlign: 'center', color: styles.colors.textSecondary }}>No entities available</div>;\n    }\n    return (\n        <div\n            style={{\n                width: '100%',\n                height: '100%',\n                overflow: 'auto',\n                background: styles.colors.surface,\n                borderRight: `1px solid ${styles.colors.border}`,\n                padding: styles.spacing.md,\n                boxSizing: 'border-box',\n                fontFamily: styles.typography.fontFamily,\n                fontSize: styles.typography.fontSize.md\n            }}\n            role=\"tree\"\n            aria-label=\"Entities\"\n            id={ariaRootId}\n        >\n            {renderTree(entityTree, 1)}\n        </div>\n    );\n}\n"
    },
    {
      "componentName": "EntityTreeView",
      "exampleUsage": "<EntityTreeView\n  rootEntityId={selectedEntityId}\n  relationships={relationshipData}\n  treeState={entityTreeState}\n  onNodeToggle={handleTreeToggle}\n  onSelect={handleTreeSelect}\n  loading={treeLoading}\n  error={treeError}\n/>",
      "description": "Displays selected entity as the root node and shows direct and indirect relationships in an expandable/collapsible tree format.",
      "functionalRequirements": "- Given selectedEntityId, renders parent/child/sibling relationships recursively\n- Expand/collapse of tree branches per node\n- Selection highlights in synch with root\n- Accessible via ARIA roles for tree and branch nodes\n- Handles large/deep trees via on-demand fetching if needed\n- Keyboard navigation for expansion and jumping between nodes",
      "dataRequirements": {
        "mode": "hybrid",
        "staticData": {
          "description": "Loads immediate neighbors from static metadata"
        },
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Entity",
              "displayFields": [
                "id",
                "name",
                "parentId"
              ],
              "filterFields": [
                "parentId"
              ]
            }
          ],
          "description": "If branch not pre-fetched, dynamically loads children/parents as opened"
        },
        "hybridStrategy": {
          "description": "Starts with static snapshot, drills down dynamically if branches are expanded past initial level"
        },
        "description": "Uses both static and dynamic data for deep or unloaded relationship trees"
      },
      "technicalDesign": "- Remembers tree expansion in entityTreeState\n- Calls parent on node toggle/select\n- Renders each relationship as a branch node; lazy-loads if not in state\n- Virtualizes rendering of deep/large trees\n- ARIA tree roles and keyboard expansion support\n- State: entityTreeState",
      "statePath": "entityTreeState",
      "componentCode": "function EntityTreeView({\n  rootEntityId,\n  relationships,\n  treeState,\n  onNodeToggle,\n  onSelect,\n  loading,\n  error,\n  userState,\n  statePath,\n  onEvent,\n  styles,\n  callbacks,\n  utilities\n}) {\n  const [localState, setLocalState] = React.useState({\n    expanded: (treeState && treeState.expanded) || [],\n    loadedNodes: (treeState && treeState.loadedNodes) || {},\n    selectedId: (treeState && treeState.selectedId) || rootEntityId,\n    loading: loading || false,\n    error: error || null,\n    ...userState\n  });\n\n  // Generic state update helper with event emission\n  const updateState = React.useCallback((updates) => {\n    const newState = { ...localState, ...updates };\n    setLocalState(newState);\n    onEvent && onEvent({\n      type: 'stateChanged',\n      source: 'EntityTreeView',\n      payload: {\n        statePath: statePath,\n        newState: newState\n      },\n      bubbles: true\n    });\n  }, [localState, onEvent, statePath]);\n\n  // Track loading status for async loads\n  const [dynamicLoadingIds, setDynamicLoadingIds] = React.useState([]);\n\n  // Helper for ARIA tree id attribute\n  const treeId = `entity-tree-${rootEntityId || 'none'}`;\n\n  // Expand/collapse logic\n  const handleToggle = async (nodeId, node) => {\n    let expanded = localState.expanded.includes(nodeId)\n      ? localState.expanded.filter((id) => id !== nodeId)\n      : [...localState.expanded, nodeId];\n    updateState({ expanded });\n    onNodeToggle && onNodeToggle(nodeId, expanded);\n    // If children for this node haven't been loaded and dynamic required, load them\n    if (!localState.loadedNodes[nodeId] && utilities && utilities.rv && node.hasDynamicChildren) {\n      setDynamicLoadingIds((prev) => [...prev, nodeId]);\n      const result = await utilities.rv.runView({\n        EntityName: 'Entity',\n        ExtraFilter: `parentId = '${nodeId}'`\n      });\n      setDynamicLoadingIds((prev) => prev.filter((id) => id !== nodeId));\n      if (result.Success) {\n        updateState({\n          loadedNodes: {\n            ...localState.loadedNodes,\n            [nodeId]: result.Results\n          }\n        });\n      } else {\n        updateState({ error: 'Failed to load children for this node.' });\n      }\n    }\n  };\n\n  // Selection logic\n  const handleSelect = (nodeId, node) => {\n    updateState({ selectedId: nodeId });\n    onSelect && onSelect(nodeId);\n    onEvent && onEvent({\n      type: 'itemSelected',\n      source: 'EntityTreeView',\n      payload: { itemId: nodeId, item: node },\n      bubbles: true\n    });\n  };\n\n  // Determine if a node has dynamic loader\n  const nodeHasDynamicChildren = (nodeId) => !localState.loadedNodes[nodeId] && relationships && relationships.some(r => r.parentId === nodeId);\n\n  // Tree node rendering\n  const renderTreeNodes = (nodes, parentId = null, depth = 0) => {\n    if (!nodes) return null;\n    return nodes.map((node) => {\n      // Expand/collapse, selected, loading states\n      const isExpanded = localState.expanded.includes(node.id);\n      const isSelected = localState.selectedId === node.id;\n      const isLoading = dynamicLoadingIds.includes(node.id);\n      const ariaLevel = depth + 1;\n\n      // Immediate children for static rendering\n      let childItems = (relationships || []).filter(r => r.parentId === node.id);\n      // Dynamically loaded children override static\n      if (localState.loadedNodes[node.id]) {\n        childItems = localState.loadedNodes[node.id];\n      }\n\n      // Detect if this node might have more children to load\n      const hasDynamic = nodeHasDynamicChildren(node.id);\n      const hasChildren = (childItems && childItems.length > 0) || hasDynamic;\n      return (\n        React.createElement('li', {\n          key: node.id,\n          'aria-expanded': hasChildren ? isExpanded : undefined,\n          'aria-selected': isSelected,\n          'aria-level': ariaLevel,\n          role: 'treeitem',\n          tabIndex: isSelected ? 0 : -1,\n          style: {\n            paddingLeft: `${styles.spacing.md * depth}px`,\n            background: isSelected ? styles.colors.primary : undefined,\n            color: isSelected ? '#fff' : styles.colors.text,\n            cursor: 'pointer',\n            userSelect: 'none',\n            borderRadius: styles.borders.radius,\n            outline: isSelected ? `2px solid ${styles.colors.primary}` : 'none',\n            marginBottom: styles.spacing.xs\n          },\n          onClick: (e) => { e.stopPropagation(); handleSelect(node.id, node); },\n          onKeyDown: (e) => {\n            if (e.key === 'ArrowRight' && hasChildren && !isExpanded) {\n              handleToggle(node.id, node);\n            } else if (e.key === 'ArrowLeft' && hasChildren && isExpanded) {\n              handleToggle(node.id, node);\n            } else if ((e.key === 'Enter' || e.key === ' ') && !isSelected) {\n              handleSelect(node.id, node);\n            }\n          }\n        },\n        React.createElement('span', {\n          onClick: (e) => { e.stopPropagation(); hasChildren && handleToggle(node.id, node); },\n          style: {\n            marginRight: styles.spacing.sm,\n            display: 'inline-block',\n            width: '1.2em',\n            textAlign: 'center',\n            cursor: hasChildren ? 'pointer' : 'default',\n            fontWeight: 600\n          },\n          'aria-label': hasChildren ? (isExpanded ? 'Collapse' : 'Expand') : undefined\n        },\n        hasChildren ? (isExpanded ? '▼' : '▶') : '•'\n        ),\n        React.createElement('span', {\n          style: {\n            verticalAlign: 'middle'\n          }\n        }, node.name),\n        isLoading && React.createElement('span', {\n          style: {\n            color: styles.colors.info,\n            marginLeft: styles.spacing.xs,\n            fontSize: styles.typography.fontSize.sm\n          }\n        }, 'Loading...'),\n        // Recursive children\n        (hasChildren && isExpanded && childItems && childItems.length > 0) && (\n          React.createElement('ul', {\n            role: 'group',\n            style: {\n              margin: 0,\n              padding: 0,\n              listStyle: 'none'\n            }\n          }, renderTreeNodes(childItems, node.id, depth + 1))\n        )\n      ));\n    });\n  };\n\n  // Find the root node based on rootEntityId\n  const findRootNode = () => {\n    if (!relationships || !rootEntityId) return null;\n    const root = relationships.find(r => r.id === rootEntityId);\n    if (root) return root;\n    // Fallback: Treat the rootEntityId as a node if not in relationships, minimal node\n    return { id: rootEntityId, name: rootEntityId, parentId: null };\n  };\n\n  // Keystroke navigation for top-level tree\n  const treeRef = React.useRef(null);\n  React.useEffect(() => {\n    if (!treeRef.current) return;\n    // Simple focus to selected node for keyboard nav\n    const items = treeRef.current.querySelectorAll('[aria-selected=\"true\"]');\n    if (items.length > 0) items[0].focus();\n  }, [localState.selectedId]);\n\n  // Error state\n  if (localState.error) {\n    return React.createElement('div', {\n      style: {\n        padding: styles.spacing.xl,\n        textAlign: 'center',\n        color: styles.colors.error\n      }\n    }, localState.error);\n  }\n\n  // Loading state\n  if (localState.loading) {\n    return React.createElement('div', {\n      style: {\n        padding: styles.spacing.xl,\n        textAlign: 'center',\n        color: styles.colors.info\n      }\n    }, 'Loading...');\n  }\n\n  const rootNode = findRootNode();\n  if (!rootNode) {\n    return React.createElement('div', {\n      style: {\n        padding: styles.spacing.xl,\n        textAlign: 'center',\n        color: styles.colors.textSecondary\n      }\n    }, 'No entity selected');\n  }\n\n  // Root layout with scroll and sizing\n  return (\n    React.createElement('div', {\n      style: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        background: styles.colors.surface\n      }\n    },\n      React.createElement('div', {\n        style: {\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: 600,\n          padding: styles.spacing.md,\n          borderBottom: `1px solid ${styles.colors.border}`,\n          color: styles.colors.primary\n        }\n      }, rootNode.name),\n      React.createElement('div', {\n        ref: treeRef,\n        role: 'tree',\n        'aria-labelledby': treeId,\n        style: { flex: 1, overflow: 'auto', padding: styles.spacing.md }\n      },\n        React.createElement('ul', {\n          style: { margin: 0, padding: 0, listStyle: 'none' }\n        }, renderTreeNodes([rootNode]))\n      )\n    )\n  );\n}\n"
    },
    {
      "componentName": "FieldMetadataTable",
      "exampleUsage": "<FieldMetadataTable\n  fields={fieldList}\n  sort={fieldSort}\n  filters={fieldFilters}\n  onSortChange={handleFieldSort}\n  onFilterChange={handleFieldFilter}\n  onBusinessRuleHover={handleRuleTooltip}\n  loading={fieldTableLoading}\n  error={fieldTableError}\n/>",
      "description": "Tabular view of all fields associated with the selected entity, including attributes, sorting/filtering, and rule tooltips.",
      "functionalRequirements": "- Renders fields as rows; sortable and filterable on all visible columns\n- Each field row can show info icon for attached business rule\n- Hover/click on rule icon shows business rule tooltip above field\n- Supports multi-column filter, text search, and advanced predicates\n- Virtual scrolling for large fieldsets\n- Keyboard-friendly navigation for sort/filter and tooltips",
      "dataRequirements": {
        "mode": "dynamic",
        "dynamicData": {
          "requiredEntities": [
            {
              "entityName": "Field",
              "displayFields": [
                "id",
                "name",
                "type",
                "description",
                "entityId"
              ],
              "filterFields": [
                "name",
                "type",
                "isKey"
              ],
              "sortFields": [
                "name",
                "type"
              ]
            },
            {
              "entityName": "BusinessRule",
              "displayFields": [
                "targetId",
                "description",
                "severity"
              ]
            }
          ],
          "description": "Fetches up-to-date field set whenever entity/filter changes"
        },
        "description": "Dynamically loads field sets and associated rules on selection and filter/sort changes"
      },
      "technicalDesign": "- Defines columns, user-driven filters/sorts\n- Emits field-level changes up through table\n- Memoizes display for performance; uses virtual table component\n- Tooltips managed via businessRuleTooltips state and callback\n- Accessibility: table ARIA with role/description\n- State: fieldTable, businessRuleTooltips",
      "statePath": "fieldTable",
      "componentCode": "function FieldMetadataTable({ fields = [], sort = [], filters = {}, onSortChange, onFilterChange, onBusinessRuleHover, loading = false, error = null, userState, statePath, onEvent, styles, callbacks, utilities }) {\n    const { useState, useEffect, useRef, useCallback } = React;\n    const [localState, setLocalState] = useState({\n        scrollTop: 0,\n        tooltip: null,\n        ...userState\n    });\n    const tableContainerRef = useRef();\n    const rowHeight = 44;\n    const visibleRows = 18; // Approximate to fit default 800px\n    const debounceTimeout = useRef();\n\n    // Compose a memoized row set with current filters and sort\n    const processedRows = React.useMemo(() => {\n        let filtered = fields;\n        // Apply text search if present\n        if (filters && filters.textSearch && filters.textSearch.trim()) {\n            const s = filters.textSearch.trim().toLowerCase();\n            filtered = filtered.filter(f =>\n                (f.name && f.name.toLowerCase().includes(s)) ||\n                (f.type && f.type.toLowerCase().includes(s)) ||\n                (f.description && f.description.toLowerCase().includes(s))\n            );\n        }\n        // Apply per-column filters\n        Object.keys(filters || {}).forEach(k => {\n            if (k !== 'textSearch' && filters[k]) {\n                filtered = filtered.filter(f => {\n                    if (typeof filters[k] === 'function') {\n                        return filters[k](f[k]);\n                    } else {\n                        return f[k] === filters[k];\n                    }\n                });\n            }\n        });\n        // Sort\n        if (sort && sort.length) {\n            filtered = _.orderBy(filtered, sort.map(s => s.column), sort.map(s => s.order));\n        }\n        return filtered;\n    }, [fields, filters, sort]);\n    // Virtual scrolling calculation\n    const [scrollIdx, setScrollIdx] = useState(0);\n    const totalRows = processedRows.length;\n    const handleScroll = e => {\n        const idx = Math.floor(e.target.scrollTop / rowHeight);\n        setScrollIdx(idx);\n    };\n    // Update tooltip position\n    const showRuleTooltip = (rowIdx, fieldId, e) => {\n        if (!onBusinessRuleHover) return;\n        const rect = e.target.getBoundingClientRect();\n        setLocalState(s => ({\n            ...s,\n            tooltip: {\n                rowIdx,\n                fieldId,\n                x: rect.left + window.scrollX,\n                y: rect.top + rect.height + 8 + window.scrollY\n            }\n        }));\n        onBusinessRuleHover(fieldId);\n    };\n    const hideRuleTooltip = () => {\n        setLocalState(s => ({ ...s, tooltip: null }));\n    };\n    // Fire events for sort/filter changes\n    const updateSort = newSortArr => {\n        onSortChange && onSortChange(newSortArr);\n        onEvent && onEvent({\n            type: 'stateChanged',\n            source: 'FieldMetadataTable',\n            payload: { statePath, newState: { ...localState, userSort: newSortArr } },\n            bubbles: true\n        });\n    };\n    const updateFilter = (col, value) => {\n        const newFilters = { ...filters, [col]: value };\n        onFilterChange && onFilterChange(newFilters);\n        onEvent && onEvent({\n            type: 'stateChanged',\n            source: 'FieldMetadataTable',\n            payload: { statePath, newState: { ...localState, userFilters: newFilters } },\n            bubbles: true\n        });\n    };\n    // Columns definition\n    const columns = [\n        { title: 'Name', dataIndex: 'name', key: 'name', width: 180, sortable: true, filterable: true },\n        { title: 'Type', dataIndex: 'type', key: 'type', width: 110, sortable: true, filterable: true },\n        { title: 'Description', dataIndex: 'description', key: 'description', width: 230 },\n        { title: 'Entity', dataIndex: 'entityId', key: 'entityId', width: 120 },\n        { title: '', dataIndex: 'rule', key: 'rule', width: 44 }\n    ];\n    // Compose rows for visible window\n    const start = Math.max(0, scrollIdx);\n    const end = Math.min(totalRows, start + visibleRows);\n    const visibleRowsData = processedRows.slice(start, end);\n\n    // Advanced filters (dropdowns/text etc)\n    const renderFilter = col => {\n        if (col === 'type') {\n            const types = _.uniq(fields.map(f => f.type)).sort();\n            return (\n                <select\n                    style={{ minWidth: 70, ...filterInputStyle }}\n                    value={filters.type || ''}\n                    onChange={e => updateFilter('type', e.target.value || undefined)}\n                    aria-label=\"Filter by type\"\n                >\n                    <option value=''>All</option>\n                    {types.map(t => <option key={t} value={t}>{t}</option>)}\n                </select>\n            );\n        } else if (col === 'name') {\n            return (\n                <input\n                    style={filterInputStyle}\n                    value={filters.name || ''}\n                    onChange={e => updateFilter('name', e.target.value || undefined)}\n                    placeholder=\"Filter...\"\n                    aria-label=\"Filter by name\"\n                />\n            );\n        }\n        return null;\n    };\n    // Search\n    const [search, setSearch] = useState(filters.textSearch || '');\n    useEffect(() => {\n        // Debounce\n        if (debounceTimeout.current) clearTimeout(debounceTimeout.current);\n        debounceTimeout.current = setTimeout(() => {\n            if (search !== filters.textSearch) updateFilter('textSearch', search);\n        }, 230);\n        return () => clearTimeout(debounceTimeout.current);\n    }, [search]);\n\n    // Accessibility: ARIA role/description\n    if (error) return <div style={{ padding: styles.spacing.xl, textAlign: 'center', color: styles.colors.error }}>{error}</div>;\n    if (!window.antd) return <div style={{ padding: styles.spacing.xl, textAlign: 'center', color: styles.colors.textSecondary }}>Ant Design (antd) is required for FieldMetadataTable</div>;\n\n    // Minimal styling\n    const filterInputStyle = {\n        fontSize: styles.typography.fontSize.sm,\n        border: `1px solid ${styles.colors.border}`,\n        borderRadius: styles.borders.radius,\n        padding: styles.spacing.xs\n    };\n    const antd = window.antd, { Tooltip, Icon } = antd;\n    return (\n        <div style={{ height: '100%', display: 'flex', flexDirection: 'column', background: styles.colors.surface }}>\n            <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                borderBottom: `1px solid ${styles.colors.border}`,\n                background: styles.colors.surface,\n                padding: styles.spacing.sm\n            }}>\n                <span style={{ fontWeight: 600, fontSize: styles.typography.fontSize.lg }}>Fields</span>\n                <input\n                    style={{ ...filterInputStyle, marginLeft: styles.spacing.md, flex: '0 1 200px' }}\n                    value={search}\n                    onChange={e => setSearch(e.target.value)}\n                    placeholder=\"Search...\"\n                    aria-label=\"Search fields\"\n                />\n                <span style={{ flex: 1 }}></span>\n                <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.textSecondary }}>{processedRows.length} found</span>\n            </div>\n            <div\n                ref={tableContainerRef}\n                onScroll={handleScroll}\n                style={{ flex: 1, overflow: 'auto', background: styles.colors.surface }}\n            >\n                <table\n                    style={{\n                        width: '100%',\n                        borderCollapse: 'separate',\n                        borderSpacing: 0,\n                        fontSize: styles.typography.fontSize.md\n                    }}\n                    role=\"table\"\n                    aria-label=\"Field metadata table\"\n                    aria-rowcount={processedRows.length}\n                >\n                    <thead>\n                        <tr>\n                            {columns.map(col => <th key={col.key} style={{\n                                position: 'sticky',\n                                top: 0,\n                                background: styles.colors.surface,\n                                zIndex: 10,\n                                textAlign: 'left',\n                                padding: styles.spacing.xs,\n                                borderBottom: `1px solid ${styles.colors.border}`,\n                                fontWeight: 600\n                            }}>{col.title || ''}{col.sortable && (\n                                <button\n                                    type=\"button\"\n                                    onClick={() => {\n                                        let newSort;\n                                        const existing = (sort || []).find(s => s.column === col.dataIndex);\n                                        if (!existing) newSort = [{ column: col.dataIndex, order: 'asc' }];\n                                        else if (existing.order === 'asc') newSort = [{ column: col.dataIndex, order: 'desc' }];\n                                        else newSort = [];\n                                        updateSort(newSort);\n                                    }}\n                                    aria-label={`Sort by ${col.dataIndex}`}\n                                    style={{ marginLeft: 3, background: 'none', border: 'none', color: styles.colors.textSecondary, cursor: 'pointer', fontSize: '1em' }}\n                                >\n                                    {(sort && sort.length && sort[0].column === col.dataIndex) ? (sort[0].order === 'asc' ? '\\u25B2' : '\\u25BC') : '\\u25B4'}\n                                </button>\n                            )}\n                                {col.filterable && renderFilter(col.dataIndex)}\n                            </th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr style={{ height: start * rowHeight }}></tr>\n                        {(loading ? Array(visibleRows).fill(null) : visibleRowsData).map((row, i) => (\n                            <tr key={loading ? i : row.id} style={{\n                                borderBottom: `1px solid ${styles.colors.border}`,\n                                background: i % 2 === 0 ? styles.colors.surface : styles.colors.surfaceHover\n                            }}>\n                                <td style={{ padding: styles.spacing.xs }}>{!loading && row.name}</td>\n                                <td style={{ padding: styles.spacing.xs }}>{!loading && row.type}</td>\n                                <td style={{ padding: styles.spacing.xs, color: styles.colors.textSecondary, fontSize: styles.typography.fontSize.sm }}>{!loading && row.description}</td>\n                                <td style={{ padding: styles.spacing.xs }}>{!loading && row.entityId}</td>\n                                <td style={{ padding: styles.spacing.xs, textAlign: 'center' }}>\n                                    {!loading && row.hasBusinessRule && (\n                                        <div style={{ display: 'inline-block', cursor: 'pointer' }}\n                                            onMouseEnter={e => showRuleTooltip(start + i, row.id, e)}\n                                            onMouseLeave={hideRuleTooltip}\n                                            tabIndex={0}\n                                            aria-label=\"Show business rule\"\n                                        >\n                                            <span style={{ color: styles.colors.info, fontSize: '18px' }}>\\u2139;</span>\n                                        </div>\n                                    )}\n                                </td>\n                            </tr>\n                        ))}\n                        <tr style={{ height: (totalRows - end) * rowHeight }}></tr>\n                    </tbody>\n                </table>\n                {loading && (\n                    <div style={{\n                        position: 'absolute',\n                        left: 0, right: 0, top: 100, textAlign: 'center', color: styles.colors.textSecondary\n                    }}>Loading fields...</div>\n                )}\n            </div>\n            {localState.tooltip && typeof onBusinessRuleHover === 'function' && (\n                <div\n                    role=\"tooltip\"\n                    style={{\n                        position: 'absolute',\n                        left: localState.tooltip.x,\n                        top: localState.tooltip.y,\n                        zIndex: 1100,\n                        background: styles.colors.surface,\n                        color: styles.colors.text,\n                        padding: styles.spacing.sm,\n                        border: `1px solid ${styles.colors.border}`,\n                        borderRadius: styles.borders.radius,\n                        boxShadow: styles.shadows.md,\n                        minWidth: 180,\n                        maxWidth: 340,\n                        pointerEvents: 'none'\n                    }}\n                >\n                    {typeof onBusinessRuleHover === 'function' && onBusinessRuleHover(localState.tooltip.fieldId)}\n                </div>\n            )}\n        </div>\n    );\n}\n"
    },
    {
      "componentName": "BusinessRuleTooltip",
      "exampleUsage": "<BusinessRuleTooltip\n  rule={activeRule}\n  anchorId={fieldId}\n  open={tooltipOpen}\n  onClose={handleTooltipClose}\n/>",
      "description": "Tooltip surface for showing business rule description and severity icon when hovering/clicking rule indicators.",
      "functionalRequirements": "- Receives an active business rule and show anchor\n- Displays popup on hover or click, or via keyboard trigger\n- Dismisses on close or focus loss\n- ARIA-compliant and accessible for screen readers",
      "dataRequirements": {
        "mode": "static",
        "staticData": {
          "description": "Tooltip only needs to read rule data, never fetches itself"
        },
        "description": "Receives rule object from owner, always static"
      },
      "technicalDesign": "- Stateless component, renders tooltip only if open flag true\n- ARIA tooltip semantics, keyboard-dismissable\n- Placement adjusts to viewport when needed\n- State: N/A (stateless, managed from parent)",
      "statePath": "businessRuleTooltips",
      "componentCode": "function BusinessRuleTooltip({ rule, anchorId, open, onClose, styles, userState, statePath, onEvent, callbacks, utilities }) {\n    const [isHovered, setIsHovered] = React.useState(false);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const tooltipId = `business-rule-tooltip-${anchorId}`;\n    const anchorRef = React.useRef(null);\n    const tooltipRef = React.useRef(null);\n    // Keyboard accessibility: Escape closes\n    React.useEffect(() => {\n        if (!open) return;\n        function handleKeyDown(evt) {\n            if (evt.key === 'Escape') {\n                evt.stopPropagation();\n                if (onClose) onClose();\n            }\n        }\n        window.addEventListener('keydown', handleKeyDown);\n        return () => window.removeEventListener('keydown', handleKeyDown);\n    }, [open, onClose]);\n    // Dismiss on click outside\n    React.useEffect(() => {\n        if (!open) return;\n        function handleClick(e) {\n            if (\n                tooltipRef.current && !tooltipRef.current.contains(e.target) &&\n                anchorRef.current && !anchorRef.current.contains(e.target)\n            ) {\n                if (onClose) onClose();\n            }\n        }\n        document.addEventListener('mousedown', handleClick);\n        return () => document.removeEventListener('mousedown', handleClick);\n    }, [open, onClose]);\n    // Tooltip position: attach under/over the anchor, adjust if overflowing\n    const [tooltipStyle, setTooltipStyle] = React.useState({ top: 0, left: 0, visibility: 'hidden' });\n    React.useEffect(() => {\n        if (open && anchorRef.current && tooltipRef.current) {\n            const anchorRect = anchorRef.current.getBoundingClientRect();\n            const tooltipRect = tooltipRef.current.getBoundingClientRect();\n            let top = anchorRect.bottom + 8;\n            let left = anchorRect.left;\n            // Adjust to keep within viewport\n            if (top + tooltipRect.height > window.innerHeight) {\n                top = anchorRect.top - tooltipRect.height - 8;\n            }\n            if (left + tooltipRect.width > window.innerWidth) {\n                left = window.innerWidth - tooltipRect.width - 8;\n            }\n            left = Math.max(left, 8);\n            setTooltipStyle({\n                top: top + window.scrollY,\n                left: left + window.scrollX,\n                visibility: 'visible',\n                zIndex: 1002\n            });\n        }\n    }, [open]);\n    // Severity icons\n    const severityIcon = {\n        info: { icon: 'ℹ️', color: styles.colors.info || '#1890ff', label: 'Info' },\n        warning: { icon: '⚠️', color: styles.colors.warning || '#faad14', label: 'Warning' },\n        error: { icon: '❌', color: styles.colors.error || '#f5222d', label: 'Error' },\n        success: { icon: '✅', color: styles.colors.success || '#52c41a', label: 'Success' }\n    }[rule?.severity || 'info'];\n    // Accessibility: aria-describedby for anchor\n    return (\n        <React.Fragment>\n            <span\n                id={anchorId}\n                ref={anchorRef}\n                tabIndex={0}\n                role=\"button\"\n                aria-describedby={open ? tooltipId : undefined}\n                aria-label={rule?.description || 'Business rule info'}\n                onMouseEnter={() => setIsHovered(true)}\n                onMouseLeave={() => setIsHovered(false)}\n                onFocus={() => setIsFocused(true)}\n                onBlur={() => setIsFocused(false)}\n                onClick={open ? onClose : undefined}\n                style={{\n                    cursor: 'pointer',\n                    display: 'inline-flex',\n                    alignItems: 'center',\n                    outline: isFocused ? `2px solid ${styles.colors.primary}` : 'none',\n                    transition: 'outline 0.2s',\n                    color: severityIcon.color,\n                    fontSize: styles.typography.fontSize.md,\n                    padding: styles.spacing.xs,\n                    borderRadius: styles.borders.radius\n                }}\n            >\n                <span aria-hidden=\"true\" style={{ marginRight: 4 }}>{severityIcon.icon}</span>\n            </span>\n            {open && (\n                <div\n                    id={tooltipId}\n                    ref={tooltipRef}\n                    role=\"tooltip\"\n                    aria-live=\"polite\"\n                    tabIndex={-1}\n                    style={{\n                        position: 'absolute',\n                        minWidth: 220,\n                        maxWidth: 320,\n                        background: styles.colors.surface,\n                        color: styles.colors.text,\n                        border: `1px solid ${styles.colors.border}`,\n                        boxShadow: styles.shadows?.md || '0 2px 16px rgba(0,0,0,0.08)',\n                        borderRadius: styles.borders.radius,\n                        padding: styles.spacing.md,\n                        fontSize: styles.typography.fontSize.sm,\n                        lineHeight: 1.4,\n                        ...tooltipStyle\n                    }}\n                >\n                    <div style={{ display: 'flex', alignItems: 'center', marginBottom: 4 }}>\n                        <span aria-hidden=\"true\" style={{ marginRight: 8, fontSize: styles.typography.fontSize.lg, color: severityIcon.color }}>{severityIcon.icon}</span>\n                        <span style={{ fontWeight: 600, color: severityIcon.color }}>{severityIcon.label}</span>\n                    </div>\n                    <div style={{ color: styles.colors.text, marginBottom: styles.spacing.xs }}>\n                        {rule?.description}\n                    </div>\n                    <button\n                        type=\"button\"\n                        aria-label=\"Close tooltip\"\n                        onClick={onClose}\n                        style={{\n                            position: 'absolute',\n                            right: 8,\n                            top: 8,\n                            background: 'none',\n                            border: 'none',\n                            cursor: 'pointer',\n                            color: styles.colors.textSecondary,\n                            fontSize: styles.typography.fontSize.md\n                        }}\n                        tabIndex={0}\n                    >\n                        ×\n                    </button>\n                </div>\n            )}\n        </React.Fragment>\n    );\n}"
    },
    {
      "componentName": "AdvancedFilterPanel",
      "exampleUsage": "<AdvancedFilterPanel\n  availableFields={filterableFields}\n  activeFilters={activeFilters}\n  onApplyFilters={handleApplyFilters}\n  onReset={handleResetFilters}\n  loading={filterPanelLoading}\n/>",
      "description": "User interface for defining complex entity/field filters with AND/OR rules, ranges, and property matches.",
      "functionalRequirements": "- Shows available fields and properties to filter on\n- Lets user build simple or compound predicate filters\n- Applies filters to entity/field views synchronously\n- Option to reset or save filter configurations\n- Accessible form fields and labels",
      "dataRequirements": {
        "mode": "static",
        "staticData": {
          "description": "Field and entity metadata available to determine filterable dimensions"
        },
        "description": "Uses root dataContext, never fetches itself"
      },
      "technicalDesign": "- Controlled form pattern for filter state\n- Emits filter object to parent on change\n- Real-time validation for filter syntax and completeness\n- Renders compound rule logic with grouping and preview\n- ARIA form controls, keyboard accessible",
      "statePath": "activeFilters",
      "componentCode": "function AdvancedFilterPanel({ availableFields, activeFilters, onApplyFilters, onReset, loading, userState, statePath, onEvent, styles, callbacks, utilities }) {\n    const [localState, setLocalState] = React.useState({\n        filterGroups: userState.filterGroups || [\n            {\n                logic: 'AND',\n                filters: [\n                    {\n                        field: '',\n                        operator: '',\n                        value: ''\n                    }\n                ]\n            }\n        ],\n        ...userState\n    });\n\n    const updateState = (newState) => {\n        setLocalState(newState);\n        onEvent && onEvent({\n            type: 'stateChanged',\n            source: 'AdvancedFilterPanel',\n            payload: { statePath, newState },\n            bubbles: true\n        });\n    };\n\n    // Accessible real-time validation\n    function validateFilters(groups) {\n        for (const group of groups) {\n            for (const filter of group.filters) {\n                if (!filter.field || !filter.operator || filter.value === '') return false;\n            }\n        }\n        return true;\n    }\n\n    const handleGroupLogicChange = (idx, value) => {\n        const filterGroups = localState.filterGroups.map((g, i) => i === idx ? { ...g, logic: value } : g);\n        updateState({ ...localState, filterGroups });\n    };\n\n    const handleFieldChange = (groupIdx, filterIdx, val) => {\n        const filterGroups = localState.filterGroups.map((g, gi) => {\n            if (gi !== groupIdx) return g;\n            const filters = g.filters.map((f, fi) =>\n                fi === filterIdx ? { ...f, field: val, operator: '', value: '' } : f\n            );\n            return { ...g, filters };\n        });\n        updateState({ ...localState, filterGroups });\n    };\n\n    const handleOperatorChange = (groupIdx, filterIdx, val) => {\n        const filterGroups = localState.filterGroups.map((g, gi) => {\n            if (gi !== groupIdx) return g;\n            const filters = g.filters.map((f, fi) =>\n                fi === filterIdx ? { ...f, operator: val } : f\n            );\n            return { ...g, filters };\n        });\n        updateState({ ...localState, filterGroups });\n    };\n\n    const handleValueChange = (groupIdx, filterIdx, val) => {\n        const filterGroups = localState.filterGroups.map((g, gi) => {\n            if (gi !== groupIdx) return g;\n            const filters = g.filters.map((f, fi) =>\n                fi === filterIdx ? { ...f, value: val } : f\n            );\n            return { ...g, filters };\n        });\n        updateState({ ...localState, filterGroups });\n    };\n\n    const handleAddFilter = (groupIdx) => {\n        const filterGroups = localState.filterGroups.map((g, gi) => {\n            if (gi !== groupIdx) return g;\n            return {\n                ...g,\n                filters: g.filters.concat([{ field: '', operator: '', value: '' }])\n            };\n        });\n        updateState({ ...localState, filterGroups });\n    };\n\n    const handleRemoveFilter = (groupIdx, filterIdx) => {\n        const filterGroups = localState.filterGroups.map((g, gi) => {\n            if (gi !== groupIdx) return g;\n            const filters = g.filters.length > 1 ? g.filters.filter((_, fi) => fi !== filterIdx) : g.filters;\n            return { ...g, filters };\n        });\n        updateState({ ...localState, filterGroups });\n    };\n\n    const handleAddGroup = () => {\n        updateState({\n            ...localState,\n            filterGroups: localState.filterGroups.concat([\n                {\n                    logic: 'AND',\n                    filters: [\n                        { field: '', operator: '', value: '' }\n                    ]\n                }\n            ])\n        });\n    };\n\n    const handleRemoveGroup = (groupIdx) => {\n        if (localState.filterGroups.length === 1) return;\n        updateState({\n            ...localState,\n            filterGroups: localState.filterGroups.filter((_, i) => i !== groupIdx)\n        });\n    };\n\n    const handleApply = () => {\n        // Compose filters and emit\n        const filters = localState.filterGroups;\n        if (validateFilters(filters)) {\n            onApplyFilters && onApplyFilters(filters);\n        } else {\n            // Optionally show error\n            updateState({ ...localState, showError: true });\n        }\n    };\n\n    const handleReset = () => {\n        updateState({\n            ...localState,\n            filterGroups: [\n                {\n                    logic: 'AND',\n                    filters: [\n                        {\n                            field: '',\n                            operator: '',\n                            value: ''\n                        }\n                    ]\n                }\n            ],\n            showError: false\n        });\n        onReset && onReset();\n    };\n\n    // Operator choices per type\n    function getOperators(type) {\n        switch (type) {\n            case 'number':\n            case 'date':\n                return ['=', '!=', '>', '>=', '<', '<='];\n            case 'boolean':\n                return ['='];\n            default:\n                return ['=', '!=', 'contains', 'not contains', 'starts with', 'ends with'];\n        }\n    }\n\n    function getFieldInfo(fieldName) {\n        return availableFields.find(f => f.name === fieldName);\n    }\n\n    const renderValueInput = (type, value, onChange, field) => {\n        if (type === 'boolean') {\n            return (\n                React.createElement('select', {\n                    'aria-label': 'Value',\n                    style: { width: '100%', ...styles?.typography },\n                    value: value,\n                    onChange: e => onChange(e.target.value === 'true'),\n                },\n                    React.createElement('option', { value: '' }, '—'),\n                    React.createElement('option', { value: 'true' }, 'True'),\n                    React.createElement('option', { value: 'false' }, 'False')\n                )\n            );\n        }\n        if (type === 'number') {\n            return (\n                React.createElement('input', {\n                    type: 'number',\n                    style: { width: '100%' },\n                    value: value,\n                    ariaLabel: 'Value',\n                    onChange: e => onChange(e.target.value)\n                })\n            );\n        }\n        if (type === 'date') {\n            return (\n                React.createElement('input', {\n                    type: 'date',\n                    style: { width: '100%' },\n                    value: value,\n                    ariaLabel: 'Value',\n                    onChange: e => onChange(e.target.value)\n                })\n            );\n        }\n        // string or default\n        if (field?.possibleValues && Array.isArray(field.possibleValues) && field.possibleValues.length > 0) {\n            return (\n                React.createElement('select', {\n                    'aria-label': 'Value',\n                    style: { width: '100%' },\n                    value: value,\n                    onChange: e => onChange(e.target.value)\n                },\n                    React.createElement('option', { value: '' }, '—'),\n                    field.possibleValues.map(v => React.createElement('option', { value: v.value, key: v.value }, v.displayValue || v.value))\n                )\n            );\n        }\n        return (\n            React.createElement('input', {\n                type: 'text',\n                style: { width: '100%' },\n                value: value,\n                ariaLabel: 'Value',\n                onChange: e => onChange(e.target.value)\n            })\n        );\n    };\n\n    const isValid = validateFilters(localState.filterGroups);\n\n    // Compose a preview string for the filter\n    function getPreview() {\n        if (!isValid) return 'Incomplete filter configuration';\n        return localState.filterGroups.map((group, gi) => {\n            const filters = group.filters.map((filter, fi) => {\n                const info = getFieldInfo(filter.field);\n                return info && filter.operator ? `${info.displayName || info.name} ${filter.operator} \"${filter.value}\"` : '(incomplete)';\n            }).join(` ${group.logic} `);\n            return group.filters.length > 1 ? `(${filters})` : filters;\n        }).join(' OR ');\n    }\n\n    return React.createElement('div', {\n        style: {\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            background: styles?.colors.surface,\n            padding: styles?.spacing.md,\n            fontFamily: styles?.typography.fontFamily\n        }\n    },\n        React.createElement('form', {\n            style: { flex: 1, overflow: 'auto' },\n            autoComplete: 'off',\n            onSubmit: e => { e.preventDefault(); handleApply(); },\n            tabIndex: 0,\n            'aria-label': 'Advanced filter panel',\n        },\n            localState.filterGroups.map((group, groupIdx) => (\n                React.createElement('fieldset', {\n                    key: groupIdx,\n                    style: {\n                        marginBottom: styles?.spacing.md,\n                        padding: styles?.spacing.sm,\n                        border: `1px solid ${styles?.colors.border}`,\n                        borderRadius: styles?.borders.radius\n                    }\n                },\n                    React.createElement('legend', {\n                        style: { fontWeight: 600, fontSize: styles?.typography.fontSize.md, marginBottom: styles?.spacing.sm }\n                    }, `Group #${groupIdx + 1}`),\n                    React.createElement('div', { style: { display: 'flex', gap: styles?.spacing.sm, alignItems: 'center', marginBottom: styles?.spacing.sm } },\n                        React.createElement('label', { htmlFor: `logic-${groupIdx}` }, 'Group Logic'),\n                        React.createElement('select', {\n                            id: `logic-${groupIdx}`,\n                            value: group.logic,\n                            style: { minWidth: 80, marginRight: styles?.spacing.md },\n                            onChange: e => handleGroupLogicChange(groupIdx, e.target.value),\n                            'aria-label': 'Logic',\n                        },\n                            React.createElement('option', { value: 'AND' }, 'AND'),\n                            React.createElement('option', { value: 'OR' }, 'OR')\n                        ),\n                        localState.filterGroups.length > 1 && React.createElement('button', {\n                            type: 'button',\n                            style: {\n                                marginLeft: styles?.spacing.md,\n                                color: styles.colors.error,\n                                background: 'transparent',\n                                border: 'none',\n                                cursor: 'pointer',\n                                fontSize: styles.typography.fontSize.lg\n                            },\n                            'aria-label': `Remove Filter Group ${groupIdx + 1}`,\n                            onClick: () => handleRemoveGroup(groupIdx)\n                        }, '✕')\n                    ),\n                    group.filters.map((filter, filterIdx) => {\n                        const fieldInfo = getFieldInfo(filter.field) || {};\n                        return React.createElement('div', {\n                            key: filterIdx,\n                            style: {\n                                display: 'flex',\n                                gap: styles?.spacing.sm,\n                                alignItems: 'center',\n                                marginBottom: styles?.spacing.xs\n                            }\n                        },\n                            React.createElement('select', {\n                                value: filter.field,\n                                style: { minWidth: 135 },\n                                'aria-label': 'Field',\n                                onChange: e => handleFieldChange(groupIdx, filterIdx, e.target.value)\n                            },\n                                React.createElement('option', { value: '' }, 'Choose field'),\n                                availableFields.map(f => React.createElement('option', { key: f.name, value: f.name }, f.displayName || f.name))\n                            ),\n                            React.createElement('select', {\n                                value: filter.operator,\n                                style: { minWidth: 100 },\n                                'aria-label': 'Operator',\n                                onChange: e => handleOperatorChange(groupIdx, filterIdx, e.target.value),\n                                disabled: !filter.field\n                            },\n                                React.createElement('option', { value: '' }, 'Operator'),\n                                filter.field && fieldInfo ? getOperators(fieldInfo.type).map(op =>\n                                    React.createElement('option', { key: op, value: op }, op)\n                                ) : null\n                            ),\n                            renderValueInput(fieldInfo.type, filter.value, v => handleValueChange(groupIdx, filterIdx, v), fieldInfo),\n                            React.createElement('button', {\n                                type: 'button',\n                                onClick: () => handleRemoveFilter(groupIdx, filterIdx),\n                                style: {\n                                    color: styles.colors.error,\n                                    background: 'transparent',\n                                    border: 'none',\n                                    cursor: 'pointer',\n                                    fontSize: styles.typography.fontSize.lg\n                                },\n                                'aria-label': `Remove Filter ${filterIdx + 1}`,\n                                tabIndex: 0\n                            }, '✕')\n                        );\n                    }),\n                    React.createElement('button', {\n                        type: 'button',\n                        onClick: () => handleAddFilter(groupIdx),\n                        style: {\n                            marginTop: styles?.spacing.xs,\n                            marginBottom: styles?.spacing.xs,\n                            padding: `0 ${styles?.spacing.sm}`,\n                            borderRadius: styles?.borders.radius,\n                            border: `1px solid ${styles?.colors.border}`,\n                            background: styles?.colors.secondary,\n                            color: styles?.colors.text,\n                            fontWeight: 500,\n                            cursor: 'pointer',\n                        },\n                        'aria-label': `Add Filter to Group ${groupIdx + 1}`\n                    }, '+ Add Filter')\n                )\n            )),\n            React.createElement('button', {\n                type: 'button',\n                onClick: handleAddGroup,\n                style: {\n                    margin: styles?.spacing.md + ' 0',\n                    padding: `0 ${styles?.spacing.sm}`,\n                    borderRadius: styles?.borders.radius,\n                    border: `1px solid ${styles?.colors.primary}`,\n                    background: styles?.colors.surfaceHover || styles.colors.background,\n                    color: styles?.colors.primary,\n                    fontWeight: 500,\n                    cursor: 'pointer',\n                },\n                'aria-label': 'Add Filter Group'\n            }, '+ Add Group'),\n            React.createElement('div', {\n                style: {\n                    margin: styles?.spacing.md + ' 0',\n                    padding: styles?.spacing.sm,\n                    border: `1px dashed ${styles?.colors.borderLight}`,\n                    color: styles?.colors.textSecondary,\n                    background: styles?.colors.background\n                },\n                tabIndex: 0,\n                'aria-label': 'Filter Preview'\n            }, getPreview()),\n            localState.showError && !isValid && React.createElement('div', {\n                style: { color: styles.colors.error, marginTop: styles.spacing.sm },\n                role: 'alert'\n            }, 'Complete all filter fields before applying.')\n        ),\n        React.createElement('div', {\n            style: {\n                display: 'flex',\n                gap: styles.spacing.md,\n                alignItems: 'center',\n                marginTop: styles.spacing.sm\n            }\n        },\n            React.createElement('button', {\n                type: 'submit',\n                disabled: !isValid || loading,\n                style: {\n                    background: styles.colors.primary,\n                    color: '#fff',\n                    border: 'none',\n                    borderRadius: styles.borders.radius,\n                    padding: `${styles.spacing.xs} ${styles.spacing.lg}`,\n                    cursor: isValid && !loading ? 'pointer' : 'not-allowed',\n                    fontWeight: 600,\n                    fontSize: styles.typography.fontSize.md\n                },\n                'aria-label': 'Apply Filters'\n            }, loading ? 'Applying...' : 'Apply'),\n            React.createElement('button', {\n                type: 'button',\n                onClick: handleReset,\n                disabled: loading,\n                style: {\n                    color: styles.colors.textSecondary,\n                    background: styles.colors.surfaceHover || styles.colors.background,\n                    border: 'none',\n                    borderRadius: styles.borders.radius,\n                    padding: `${styles.spacing.xs} ${styles.spacing.md}`,\n                    marginLeft: styles.spacing.sm,\n                    cursor: !loading ? 'pointer' : 'not-allowed',\n                    fontSize: styles.typography.fontSize.md\n                },\n                'aria-label': 'Reset Filters'\n            }, 'Reset')\n        )\n    );\n}\n"
    }
  ],
  "componentName": "EntityExplorer",
  "description": "EntityExplorer component provides a comprehensive interface for exploring and managing entities, fields, and business rules in a structured manner. It includes panels for listing entities, viewing fields",
  "componentCode": "function EntityExplorer({ data, utilities, userState, callbacks, styles, components }) {\n  const {\n    EntityListPanel,\n    EntityTreeView,\n    FieldMetadataTable,\n    BusinessRuleTooltip,\n    AdvancedFilterPanel\n  } = components;\n\n  // ----- State Management -----\n  const [fullUserState, setFullUserState] = React.useState({\n    entityList: {\n      selectedEntityId: undefined, // selected entity in list\n      expandedIds: [],            // expanded in EntityListPanel\n    },\n    entityTreeState: {           // expansion state for tree view\n      expandedNodeIds: [],\n      loadedNodeIds: [],\n      loadingNodeIds: [],\n      lastSelectedNodeId: undefined\n    },\n    fieldTable: {\n      sort: null,\n      filters: [],\n      loading: false,\n      error: null\n    },\n    businessRuleTooltips: {\n      open: false,\n      anchorId: null,\n      activeRule: null\n    },\n    activeFilters: [],\n    ...userState\n  });\n\n  // Update parent & persist userState\n  const updateUserState = React.useCallback(\n    (stateUpdate) => {\n      const newState = { ...fullUserState, ...stateUpdate };\n      setFullUserState(newState);\n      if (callbacks?.UpdateUserState) {\n        callbacks.UpdateUserState(newState);\n      }\n    },\n    [fullUserState, callbacks]\n  );\n\n  // ---- Enhanced Composite Event Handler ----\n  const handleComponentEvent = React.useCallback(\n    (event) => {\n      // Selection from EntityListPanel\n      if (\n        event.type === 'itemSelected' &&\n        event.source === 'EntityListPanel'\n      ) {\n        // When entity selected, update selection everywhere\n        updateUserState({\n          entityList: {\n            ...fullUserState.entityList,\n            selectedEntityId: event.payload.itemId\n          },\n          entityTreeState: {\n            ...fullUserState.entityTreeState,\n            lastSelectedNodeId: event.payload.itemId\n          },\n          // Reset field table state when entity changes\n          fieldTable: {\n            ...fullUserState.fieldTable,\n            sort: null,\n            filters: []\n          }\n        });\n        return;\n      }\n      // Expand/collapse from EntityListPanel\n      if (\n        event.type === 'expandToggled' &&\n        event.source === 'EntityListPanel'\n      ) {\n        updateUserState({\n          entityList: {\n            ...fullUserState.entityList,\n            expandedIds: event.payload.expandedIds\n          }\n        });\n        return;\n      }\n      // From EntityTreeView: tree node expand/collapse/selection\n      if (\n        (event.type === 'treeNodeToggled' || event.type === 'treeNodeExpanded' || event.type === 'treeNodeCollapsed') &&\n        event.source === 'EntityTreeView'\n      ) {\n        updateUserState({\n          entityTreeState: {\n            ...fullUserState.entityTreeState,\n            expandedNodeIds: event.payload.expandedNodeIds\n          }\n        });\n        return;\n      }\n      if (\n        event.type === 'itemSelected' &&\n        event.source === 'EntityTreeView'\n      ) {\n        // Selecting node in tree view updates both root list and tree\n        updateUserState({\n          entityList: {\n            ...fullUserState.entityList,\n            selectedEntityId: event.payload.itemId\n          },\n          entityTreeState: {\n            ...fullUserState.entityTreeState,\n            lastSelectedNodeId: event.payload.itemId\n          },\n          fieldTable: {\n            ...fullUserState.fieldTable,\n            sort: null,\n            filters: []\n          }\n        });\n        return;\n      }\n      // Field table sort & filter\n      if (\n        (event.type === 'sortChanged' || event.type === 'filtersChanged') &&\n        event.source === 'FieldMetadataTable'\n      ) {\n        updateUserState({\n          fieldTable: {\n            ...fullUserState.fieldTable,\n            ...(event.type === 'sortChanged' ? { sort: event.payload.sort } : {}),\n            ...(event.type === 'filtersChanged' ? { filters: event.payload.filters } : {})\n          }\n        });\n        return;\n      }\n      // Handle business rule tooltip open/close from FieldMetadataTable\n      if (\n        event.type === 'ruleTooltip' &&\n        event.source === 'FieldMetadataTable'\n      ) {\n        updateUserState({\n          businessRuleTooltips: {\n            ...fullUserState.businessRuleTooltips,\n            open: event.payload.open,\n            anchorId: event.payload.anchorId,\n            activeRule: event.payload.activeRule\n          }\n        });\n        return;\n      }\n      // Apply/reset filters from AdvancedFilterPanel\n      if (event.type === 'filtersApplied' && event.source === 'AdvancedFilterPanel') {\n        updateUserState({\n          activeFilters: event.payload.activeFilters\n        });\n        return;\n      }\n      if (event.type === 'filtersReset' && event.source === 'AdvancedFilterPanel') {\n        updateUserState({\n          activeFilters: []\n        });\n        return;\n      }\n      // Handle refresh from any child\n      if (event.type === 'actionRequested' && event.payload && event.payload.action === 'refresh') {\n        if (callbacks?.RefreshData) callbacks.RefreshData();\n        return;\n      }\n      // All other events: use the standard handler\n      const standardHandler = createStandardEventHandler(updateUserState, callbacks);\n      standardHandler(event);\n    },\n    [fullUserState, updateUserState, callbacks]\n  );\n\n  // ---- Data deconstruction and filtering ----\n  // Entities are static, but expanded trees & tables pull dynamically as needed\n  const allEntities = data?.entityList || [];\n  const selectedEntityId = fullUserState.entityList?.selectedEntityId;\n\n  // Get relationship data for tree (may use static & dynamic fetching in EntityTreeView)\n  const relationshipData = data?.relationshipData || [];\n\n  // Fields for the selected entity will be fetched dynamically in FieldMetadataTable\n  // AdvancedFilterPanel works off field metadata (static), entity/field sorts/filters\n  // Pass only relevant slices of userState to children, keyed by their statePath\n\n  // ----- Layout: Sidebar (List), Main (Tree), Details (Table, Filters, Tooltips) -----\n  return (\n    <div style={{\n      display: 'flex',\n      height: '100%',\n      background: styles.colors.background,\n      color: styles.colors.text\n    }}>\n      {/* Sidebar: Entity List */}\n      <div style={{\n        width: 320,\n        minWidth: 240,\n        maxWidth: 400,\n        borderRight: `1px solid ${styles.colors.border}`,\n        background: styles.colors.surface,\n        overflow: 'auto',\n        display: 'flex',\n        flexDirection: 'column'\n      }}>\n        <EntityListPanel\n          entities={allEntities}\n          selectedEntityId={selectedEntityId}\n          expandedIds={fullUserState.entityList.expandedIds}\n          onEvent={handleComponentEvent}\n          statePath=\"entityList\"\n          loading={data?.entityListLoading}\n          error={data?.entityListError}\n          styles={styles}\n          callbacks={callbacks}\n          utilities={utilities}\n        />\n      </div>\n      {/* Main: Tree + Details/Table in vertical stack */}\n      <div style={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        overflow: 'hidden'\n      }}>\n        {/* Relationship Tree */}\n        <div style={{\n          borderBottom: `1px solid ${styles.colors.border}`,\n          flexShrink: 0\n        }}>\n          <EntityTreeView\n            rootEntityId={selectedEntityId}\n            relationships={relationshipData}\n            treeState={fullUserState.entityTreeState}\n            onEvent={handleComponentEvent}\n            statePath=\"entityTreeState\"\n            loading={data?.treeLoading}\n            error={data?.treeError}\n            styles={styles}\n            callbacks={callbacks}\n            utilities={utilities}\n          />\n        </div>\n        {/* Advanced Filters, Field Table, BusinessRuleTooltip */}\n        <div style={{ flex: 1, minHeight: 0, display: 'flex', flexDirection: 'column', position: 'relative' }}>\n          {/* Advanced Filters toolbar */}\n          <AdvancedFilterPanel\n            availableFields={data?.filterableFields || []}\n            activeFilters={fullUserState.activeFilters}\n            onEvent={handleComponentEvent}\n            statePath=\"activeFilters\"\n            loading={data?.filterPanelLoading}\n            styles={styles}\n            callbacks={callbacks}\n            utilities={utilities}\n          />\n          {/* Field Table & BusinessRuleTooltip (overlays table if open) */}\n          <div style={{ flex: 1, minHeight: 0, overflow: 'auto', position: 'relative' }}>\n            <FieldMetadataTable\n              fields={data?.fieldList || []}\n              sort={fullUserState.fieldTable.sort}\n              filters={fullUserState.fieldTable.filters}\n              onEvent={handleComponentEvent}\n              statePath=\"fieldTable\"\n              loading={data?.fieldTableLoading}\n              error={data?.fieldTableError}\n              styles={styles}\n              callbacks={callbacks}\n              utilities={utilities}\n            />\n            {/* BusinessRuleTooltip floats over FieldMetadataTable when open */}\n            <BusinessRuleTooltip\n              rule={fullUserState.businessRuleTooltips.activeRule}\n              anchorId={fullUserState.businessRuleTooltips.anchorId}\n              open={fullUserState.businessRuleTooltips.open}\n              onEvent={handleComponentEvent}\n              statePath=\"businessRuleTooltips\"\n              styles={styles}\n              callbacks={callbacks}\n              utilities={utilities}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"
}