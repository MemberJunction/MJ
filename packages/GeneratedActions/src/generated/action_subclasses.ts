/*************************************************
* GENERATED CODE - DO NOT MODIFY
* Generated by MemberJunction CodeGen at 5/31/2024, 3:19:33 PM
**************************************************/
import { ActionResultSimple, BaseAction, RunActionParams } from "@memberjunction/actions";
import { RegisterClass } from "@memberjunction/global";
import { RunView, UserInfo, BaseEntity, Metadata } from "@memberjunction/core";

            
/**
 * Validate Accounts
 * Generated Class
 * User Prompt: For the provided entity object, check to see if the Name property has a length of > 10. If it does, then make sure that it has a first letter of A, C, X, or Y. If the name is <= 10 in length then it can start only with O, P, or a number. 
 */
@RegisterClass(BaseAction, "Validate Accounts")
export class Validate_Accounts_Action extends BaseAction {
    /*
		The provided code accomplishes the following steps:
		
		* Extracts the 'EntityObject' from the input parameters.
		* Checks if 'EntityObject' is provided, if not, returns a failure message.
		* Retrieves the 'Name' property from the 'EntityObject'.
		* Checks if the 'Name' property is present, if not, returns a failure message.
		* Evaluates the length of the 'Name'.
		    * If the 'Name' length is greater than 10 characters:
		        * Verifies that the first letter is one of 'A', 'C', 'X', or 'Y'.
		        * If not, returns a failure message.
		    * If the 'Name' length is 10 characters or fewer:
		        * Verifies that the first character is one of 'O', 'P', or a number ('0'-'9').
		        * If not, returns a failure message.
		* If all checks are passed, returns a success message indicating the name is valid.
	*/
    protected override async InternalRunAction(params: RunActionParams): Promise<ActionResultSimple> {
        const entityObject = params.Params.find(p => p.Name === 'EntityObject')?.Value;
		if (!entityObject) {
		    return {
		        Success: false,
		        ResultCode: 'EntityObjectNotFound',
		        Message: 'The entity object was not provided.'
		    };
		}
		
		const name = entityObject.Name;
		if (!name) {
		    return {
		        Success: false,
		        ResultCode: 'NameNotFound',
		        Message: 'The Name property is missing in the entity object.'
		    };
		}
		
		const nameLength = name.length;
		if (nameLength > 10) {
		    const initialChar = name.charAt(0).toUpperCase();
		    if (!['A', 'C', 'X', 'Y'].includes(initialChar)) {
		        return {
		            Success: false,
		            ResultCode: 'InvalidNameCharacter',
		            Message: 'For names longer than 10 characters, the first letter must be A, C, X, or Y.'
		        };
		    }
		} else {
		    const initialChar = name.charAt(0).toUpperCase();
		    if (!['O', 'P', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(initialChar)) {
		        return {
		            Success: false,
		            ResultCode: 'InvalidNameCharacterForShortName',
		            Message: 'For names 10 characters or shorter, the first letter must be O, P, or a number.'
		        };
		    }
		}
		
		return {
		    Success: true,
		    ResultCode: 'ValidationPassed',
		    Message: 'The entity object name is valid.'
		};
    }
}        
            
            
/**
 * Create New Action Category
 * Generated Class
 * User Prompt: When this action executes I want to create a new Action Category with a randomly selected name that is a combination of a color, an animal and a Canadian province
 */
@RegisterClass(BaseAction, "Create New Action Category")
export class Create_New_Action_Category_Action extends BaseAction {
    /*
		The code provided creates a new Action Category with a randomly generated name composed of a color, an animal, and a Canadian province.
		
		The steps are as follows:
		
		1. Initialize Metadata object and get a new entity object for 'Action Categories'.
		2. Define a helper function `getRandomElement` that returns a random element from an array.
		3. Define arrays for colors, animals, and Canadian provinces.
		4. Generate the random name by concatenating a random color, animal, and Canadian province.
		5. Set the `Name` and `Description` fields of the new action category entity.
		6. Save the new action category to the database.
		7. Return an ActionResultSimple object indicating success, the result code, and a message showing the generated name.
	*/
    protected override async InternalRunAction(params: RunActionParams): Promise<ActionResultSimple> {
        const md = new Metadata();
		const newActionCategory = await md.GetEntityObject('Action Categories', params.ContextUser);
		
		// Helper function to get a random element from an array
		const getRandomElement = (arr: string[]): string => arr[Math.floor(Math.random() * arr.length)];
		
		// Arrays of colors, animals, and Canadian provinces
		const colors = ['Red', 'Blue', 'Green', 'Yellow', 'Orange', 'Purple', 'Pink', 'Brown', 'Grey', 'Black', 'White'];
		const animals = ['Bear', 'Moose', 'Beaver', 'Goose', 'Whale', 'Wolf', 'Cougar', 'Eagle', 'Lynx', 'Elk', 'Caribou'];
		const provinces = ['Ontario', 'Quebec', 'Nova Scotia', 'New Brunswick', 'Manitoba', 'British Columbia', 'Prince Edward Island', 'Saskatchewan', 'Alberta', 'Newfoundland and Labrador'];
		
		// Generating a random name
		const name = `${getRandomElement(colors)} ${getRandomElement(animals)} of ${getRandomElement(provinces)}`;
		
		// Setting the fields of the new action category
		newActionCategory.Name = name;
		newActionCategory.Description = `An auto-generated action category named ${name}`;
		
		// Save the new action category to the database
		await newActionCategory.Save();
		
		// Return the result
		return new ActionResultSimple({
		    Success: true,
		    ResultCode: 'ActionCategoryCreated',
		    Message: `Successfully created a new action category with the name: ${name}`
		});
    }
}        
            
            
export function LoadGeneratedActions() {
    // this function is a stub that is used to force the bundler to include the generated action classes in the final bundle and not tree shake them out
}
