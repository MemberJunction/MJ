{
  "name": "SingleRecordView",
  "title": "Single Record View",
  "description": "Read-only component that displays a SINGLE entity record's fields in formatted, human-readable layout with metadata-driven field type formatting. Four layout modes: list (vertical label-value pairs), table (2-column), inline (horizontal compact), card (styled with border/shadow). Formats dates (short/long/relative), numbers (commas), currency ($ for Amount/Price/Cost or money type), booleans (✓ Yes / ✗ No). Supports field selection/ordering, text truncation (maxTextLength default 200), empty value handling, field highlighting. Optional OpenRecordButton integration with cancelable openRecord event. USE for: detail panels, drill-down destinations showing one record, master-detail detail views, record previews, profile pages. DO NOT USE for: multiple records/lists (use DataGrid), editable forms (read-only only), aggregated data (use charts).",
  "type": "form",
  "location": "embedded",
  "functionalRequirements": "WHEN TO USE: Displaying details of a single specific record; Master-detail detail panel showing one record; Drill-down destination for individual record inspection; Record preview or tooltip; Profile pages or detail views; Summary cards; Read-only record display. WHEN NOT TO USE: Multiple records or lists (use DataGrid instead); Editable forms (this is read-only display only); Aggregated or summary data across multiple records (use charts); Any scenario requiring more than one record. CORE FEATURES: Displays single record's fields in clean, readable format; Metadata-driven formatting based on field SQL types from entity metadata; Selective field display in specified order via fields prop (auto-detects if omitted: filters Object.keys(record) for !startsWith('__mj'), !== 'ID', typeof !== 'object'); Four layout modes: list (vertical with uppercase labels, 12px margins), table (2-column table with labelWidth prop default 150px), inline (horizontal spans with colons, 20px margins), card (wrapper with border/shadow/padding); Auto-formats by field type: dates (short: month short/day/year, long: weekday long/month long/day/year, relative: Today/Yesterday/X days-weeks-months-years ago), booleans (✓ Yes / ✗ No symbols), numbers (int/bigint → parseInt().toLocaleString()), decimals (decimal/float/money → parseFloat with 2 decimals and commas), currency (money type OR field name includes Amount/Price/Cost → Intl.NumberFormat $USD), null/empty (returns '-' or styled 'Empty' italic gray based on showEmptyFields prop); Text truncation: Strings > maxTextLength (default 200) → substring with '...' and full text in title attribute for hover; Field highlighting: Fields in highlightFields array get yellow background (#fffbe6), border (#ffe58f), padding, borderRadius; Optional OpenRecordButton integration: When allowOpenRecord=true, loads OpenRecordButton from components registry, renders button with variant/size based on layout (primary/medium for card, default/medium for table/list, link/small for inline), wires up click handler; Field click events: If onFieldClicked provided, each field gets cursor:pointer and onClick handler, fires event with {fieldName, value, fieldType, record}; Cancelable openRecord event: Creates eventData object {record, entityName, cancel: false, primaryKeys: Array<{FieldName, Value}>}, fires onOpenRecord if provided, checks eventData.cancel flag, if false calls callbacks.OpenEntityRecord(entityName, primaryKeys); Primary key extraction: Handles entityInfo.PrimaryKey as Columns array, Name property, or string, fallback to 'ID' field; Special __mj field handling: __mj_CreatedAt/UpdatedAt/DeletedAt get proper DisplayName ('Created At', 'Updated At', 'Deleted At'). LAYOUT MODES: list (vertical divs with label div and value div stacked), table (table/tbody with tr per field, td for label with labelWidth, td for value), inline (horizontal span elements with label: and value separated), card (container div with border: 1px solid #d9d9d9, borderRadius: 8px, padding: 16px, backgroundColor: #fff, boxShadow: 0 2px 4px rgba(0,0,0,0.05), renders fields inside then optional button with top border separator). Empty state: If !record, returns centered div with 'No record to display' gray text.",
  "technicalDesign": "Read-only display for single record only. React hooks: useState for entityInfo; useCallback for handleOpenRecordClick (extracts primary keys, creates cancelable eventData, fires onOpenRecord, checks cancel flag, calls OpenEntityRecord callback); useMemo for WrappedOpenRecordButton (wraps OpenRecordButton with custom click handler). Loads entity metadata from utilities.md.Entities on mount (useEffect), finds entity by Name, stores in entityInfo for field info access (Type, DisplayName). Field selection: Uses fields prop if provided; Else calls getDisplayFields: Object.keys(record).filter(key => !key.startsWith('__mj') && key !== 'ID' && typeof record[key] !== 'object') - auto-filters system fields, ID, and nested objects. Field info lookup: getFieldInfo function finds field in entityInfo.Fields array by Name, returns field object with Type/DisplayName/etc or null. Format value function (formatValue): Takes value and fieldInfo; Returns null if value null/empty AND !showEmptyFields, else returns styled 'Empty' span (color: #999, fontStyle: italic); Bit fields → value ? '✓ Yes' : '✗ No'; Datetime/date fields → try/catch Date parsing, format based on dateFormat prop: short (toLocaleDateString month: short, day: numeric, year: numeric), long (weekday: long, month: long, day: numeric, year: numeric), relative (calculates diff: 0 days→Today, 1→Yesterday, <7→X days ago, <30→X weeks ago, <365→X months ago, else→X years ago); Int/bigint → parseInt(value).toLocaleString(); Decimal/float/money → parseFloat, check if fieldInfo.Name.toLowerCase() includes 'amount'/'price'/'cost' OR Type === 'money', if yes Intl.NumberFormat USD currency style 2 decimal places, else toLocaleString 2 min/max decimals; Strings > maxTextLength → span with title={value} (full text hover), displays substring(0, maxTextLength) + '...'. Render field function (renderField): Gets fieldInfo from getFieldInfo; Gets value from record[fieldName]; Calls formatValue; Returns null if !showEmptyFields and !formattedValue; Checks if field in highlightFields array, creates highlightStyle object (backgroundColor: #fffbe6, padding: 4px 8px, borderRadius: 4px, border: 1px solid #ffe58f); Creates fieldStyle with cursor (pointer if onFieldClicked else default); Adds onClick handler if onFieldClicked (calls with fieldName, value); Layout-specific rendering: list (div with marginBottom: 12px, highlightStyle, label div with fontWeight: 500, color: #666, fontSize: 12px, marginBottom: 4px, textTransform: uppercase, value div with fontSize: 14px, color: #333), table (tr with highlightStyle, label td with fontWeight: 500, color: #666, fontSize: 14px, padding: 8px, width: labelWidth, verticalAlign: top, value td with fontSize: 14px, color: #333, padding: 8px), inline (span with marginRight: 20px, display: inline-block, highlightStyle, label span with fontWeight: 500, color: #666, fontSize: 12px, marginRight: 4px, colon separator, value span with fontSize: 14px, color: #333), card (same as list but wrapped in card container). OpenRecordButton integration: When allowOpenRecord=true, checks if OpenRecordButton exists in components registry; Creates WrappedOpenRecordButton using useMemo: Returns wrapper function (props) => div onClick handler; handleWrapperClick: e.preventDefault(), e.stopPropagation(), calls handleOpenRecordClick(props.record, props.entityName); Renders button manually (not actual OpenRecordButton to avoid its onClick): padding: 8px 16px, backgroundColor: #3B82F6, color: #fff, border: none, borderRadius: 6px, cursor: pointer, fontSize: 14px, fontWeight: 500, display: inline-flex, alignItems: center, gap: 6px, pointerEvents: none (prevents button from handling clicks), shows props.text or 'Open Record', arrow icon →; handleOpenRecordClick: Extracts primary keys from entityInfo.PrimaryKey (handles different structures: Columns array, Name property, string, fallback to ['ID']), maps to primaryKeys array [{FieldName, Value}], creates eventData {record, entityName, cancel: false, primaryKeys}, fires onOpenRecord if exists, checks eventData.cancel, if !cancel calls callbacks.OpenEntityRecord(entityName, primaryKeys); Button rendered after fields with margin/padding/border based on layout mode. Four layout render paths: card (container div with border/shadow styles, maps displayFields calling renderField, if allowOpenRecord && WrappedOpenRecordButton renders button with marginTop, paddingTop, borderTop separator), table (table with width: 100%, borderCollapse: collapse, tbody maps displayFields calling renderField, if allowOpenRecord renders button div with marginTop: 12px), inline (div with padding: 8px, lineHeight: 1.8, maps displayFields calling renderField, if allowOpenRecord renders button span with marginLeft: 20px inline-block), list default (div with padding: 8px, maps displayFields calling renderField, if allowOpenRecord renders button div with marginTop: 12px). Empty state: If !record, returns div with padding: 20px, textAlign: center, color: #999, 'No record to display' text.",
  "dataRequirements": {
    "mode": "props",
    "description": "Receives record data through props"
  },
  "properties": [
    {
      "name": "record",
      "type": "Record<string, any>",
      "description": "The entity record to display",
      "required": true
    },
    {
      "name": "entityName",
      "type": "string",
      "description": "Name of the entity for metadata lookup",
      "required": true
    },
    {
      "name": "fields",
      "type": "Array<string>",
      "description": "Fields to display in order. If not provided, shows all non-system fields",
      "required": false
    },
    {
      "name": "layout",
      "type": "'list' | 'table' | 'inline' | 'card'",
      "description": "Display layout style",
      "required": false,
      "defaultValue": "list",
      "possibleValues": ["list", "table", "inline", "card"]
    },
    {
      "name": "showLabels",
      "type": "boolean",
      "description": "Whether to show field labels",
      "required": false,
      "defaultValue": true
    },
    {
      "name": "labelWidth",
      "type": "number",
      "description": "Width of label column in pixels (table layout)",
      "required": false,
      "defaultValue": 150
    },
    {
      "name": "dateFormat",
      "type": "'short' | 'long' | 'relative'",
      "description": "Date formatting style",
      "required": false,
      "defaultValue": "short",
      "possibleValues": ["short", "long", "relative"]
    },
    {
      "name": "showEmptyFields",
      "type": "boolean",
      "description": "Whether to show fields with no value",
      "required": false,
      "defaultValue": false
    },
    {
      "name": "maxTextLength",
      "type": "number",
      "description": "Maximum characters for text fields before truncation",
      "required": false,
      "defaultValue": 200
    },
    {
      "name": "highlightFields",
      "type": "Array<string>",
      "description": "Fields to highlight visually",
      "required": false
    },
    {
      "name": "allowOpenRecord",
      "type": "boolean",
      "description": "Whether to show an Open Record button for the record",
      "required": false,
      "defaultValue": false
    }
  ],
  "events": [
    {
      "name": "fieldClicked",
      "description": "Fired when a field value is clicked",
      "parameters": [
        {
          "name": "eventData",
          "type": "{ fieldName: string; value: any; fieldType?: string; record: Record<string, any> }",
          "description": "Object containing field name, value, optional field type, and the full record"
        }
      ]
    },
    {
      "name": "openRecord",
      "description": "Cancelable event fired before opening a record. Set eventData.cancel = true to prevent default behavior",
      "cancelable": true,
      "parameters": [
        {
          "name": "eventData",
          "type": "{ record: Record<string, any>; entityName: string; cancel: boolean; primaryKeys: Array<{ FieldName: string; Value: any }> }",
          "description": "Cancelable event object. Set cancel to true to prevent the record from opening"
        }
      ]
    }
  ],
  "dependencies": [
    {
      "name": "OpenRecordButton",
      "namespace": "Generic/Navigation",
      "location": "registry",
      "description": "Button to open entity records"
    }
  ],
  "code": "@file:../code/single-record-view.js",
  "exampleUsage": "<SingleRecordView\n  record={selectedDeal}\n  entityName=\"Deals\"\n  fields={['DealName', 'Stage', 'Amount', 'CloseDate', 'OwnerID']}\n  layout=\"card\"\n  highlightFields={['Amount', 'Stage']}\n  allowOpenRecord={true}\n  onOpenRecord={(eventData) => {\n    // Example: Cancel if deal is in certain stage\n    if (selectedDeal.Stage === 'Lost') {\n      eventData.cancel = true;\n      alert('Cannot open lost deals');\n    }\n  }}\n/>"
}