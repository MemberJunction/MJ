{
  "name": "SimpleDrilldownChart",
  "title": "Simple Drilldown Chart",
  "description": "FIXED TWO-LEVEL DRILL-DOWN ONLY: Chart-to-table component with HARDCODED vertical layout. Shows chart at top, data grid at bottom when clicking segments. ONLY USE for simple 'click chart to see matching records in table' scenarios. DO NOT USE for: multi-level drill-downs (chart→chart→table or 3+ levels), nested visualizations, progressive dimension drill-downs (Industry→Region→Accounts), or when user asks for 'sub-charts'. This component CANNOT support custom drill hierarchies - must create custom component for complex multi-level patterns. Example that requires custom component: 'Accounts by Industry, click to see chart by Region, click to see table of accounts' (3 levels).",
  "type": "chart",
  "location": "embedded",
  "functionalRequirements": "WHEN TO USE: Two-level 'click-chart-see-table' pattern only; Single aggregation dimension showing detail records; User wants 'show X by Y, click to see records'; Simple drill-down to tabular details; Example: 'Revenue by Product Category - click to see line items'. WHEN NOT TO USE: Multi-level drill-downs with 3+ levels (chart→chart→table or deeper); User requests 'sub-chart' or 'nested chart' or 'drill into another chart'; Progressive multi-dimensional drill-downs like 'by Industry then by Region then table'; Custom visualization at any drill-down level; Any scenario requiring chart-to-chart transitions. CORE FEATURES: Composes SimpleChart + DataGrid + optional SingleRecordView; Click chart segment → shows filtered records in grid below; Split-view vertical layout: chart (top), info bar (middle), grid (bottom); Info bar displays: segment label, aggregated value, record count, percentage of total; Clear selection button returns to chart-only view; Auto-detects grid columns from data or uses gridFields prop to specify columns; Optional 3-column layout with showSingleRecordView=true: chart spans full width at top, grid (60% width) and SingleRecordView (40% width) side-by-side below; Smooth CSS animations for expand/collapse; Blue border highlights chart when segment selected; Inherits all SimpleChart aggregation capabilities (count/sum/average/min/max) and chart types (bar/line/pie/doughnut/area). LAYOUT MODES: 2-column (default, showSingleRecordView=false): vertical stack with chart, info bar, grid; 3-column (showSingleRecordView=true): chart at top full width, then grid 60% left and SingleRecordView 40% right. ARCHITECTURAL LIMITATION: This is a FIXED two-level pattern. It cannot be extended to support dynamic levels, chart-to-chart navigation, or custom hierarchies beyond chart→table.",
  "technicalDesign": "CRITICAL ARCHITECTURAL CONSTRAINT: HARDCODED two-level vertical structure (chart → table). Cannot support: chart-to-chart transitions, dynamic level insertion, custom hierarchy depths, multiple chart children, or any drill pattern beyond the fixed layout. Implementation: React functional component using three useState hooks: selectedSegment (stores {label, value, records: Array<object>, percentage}), showGrid (boolean to control grid visibility), selectedRecord (for optional SingleRecordView panel). Three-component composition: (1) SimpleChart at top receives full data prop for client-side aggregation and rendering, handles onDataPointClick event; (2) DataGrid in middle/left receives segment.records filtered array and displays in table with sorting/filtering/paging; (3) Optional SingleRecordView in right panel (when showSingleRecordView=true) displays selected grid row details. State flow: Initial state (chart only, showGrid=false) → User clicks chart segment → handleChartClick fires → Set selectedSegment with click data + showGrid=true → Grid renders with segment.records filtered data + info bar appears between chart and grid → Optional: user clicks grid row → handleRowClick fires → Set selectedRecord → SingleRecordView renders in side panel (if enabled). Info bar renders between chart and grid when selectedSegment exists, displays segment.label, segment.value (formatted with toLocaleString), segment.records.length, segment.percentage (if available). Clear selection button in info bar calls handleClearSelection → resets selectedSegment=null, showGrid=false, selectedRecord=null. Grid columns: If gridFields prop provided, uses those field names; Else auto-detects from first record in segment.records, filters out __mj system fields and ID field and object types, limits to first 10 fields. Layout styling: Chart wrapped in div with conditional blue 2px border when selectedSegment exists; Info bar has light blue background (#f0f5ff) with 4px left border (#1890ff); Grid wrapped in div with drilldownHeight prop (default 300px), border, overflow:auto; When showSingleRecordView=true, grid and SingleRecordView containers use flex layout (60%/40% split); CSS @keyframes slideDown and slideIn animations for smooth transitions. Data flow: Input data array never mutates, only filtered views (segment.records) passed to DataGrid. Event emission: segmentSelected event fires with {segment} wrapper when segment clicked; selectionCleared fires when clear button clicked; dataPointClick bubbles up from SimpleChart; rowSelected fires with {record, segment} when grid row clicked. Dependency injection: Receives SimpleChart, DataGrid, SingleRecordView from components registry; Shows error message if DataGrid not found; Passes utilities, styles, components, callbacks, savedUserSettings down to all child components. For multi-level drill-downs or custom hierarchies, this component is ARCHITECTURALLY UNSUITABLE - developer must create custom component with multiple SimpleChart instances, custom state management, and navigation logic for chart-to-chart drill flow.",
  "dataRequirements": {
    "mode": "props",
    "description": "Receives data through props, uses it for both chart and drill-down"
  },
  "properties": [
    {
      "name": "entityName",
      "type": "string",
      "description": "Name of the entity being visualized",
      "required": true
    },
    {
      "name": "data",
      "type": "Array<object>",
      "description": "Array of entity objects to visualize",
      "required": true
    },
    {
      "name": "groupBy",
      "type": "string",
      "description": "Field name to group data by",
      "required": true
    },
    {
      "name": "valueField",
      "type": "string",
      "description": "Field to aggregate for values",
      "required": false
    },
    {
      "name": "aggregateMethod",
      "type": "'count' | 'sum' | 'average' | 'min' | 'max'",
      "description": "How to aggregate values",
      "required": false,
      "defaultValue": "count"
    },
    {
      "name": "chartType",
      "type": "'auto' | 'bar' | 'line' | 'pie' | 'doughnut' | 'area'",
      "description": "Chart type to render",
      "required": false,
      "defaultValue": "auto"
    },
    {
      "name": "title",
      "type": "string",
      "description": "Chart title",
      "required": false
    },
    {
      "name": "gridFields",
      "type": "Array<string>",
      "description": "Fields to show in drill-down grid",
      "required": false
    },
    {
      "name": "showDrilldown",
      "type": "boolean",
      "description": "Whether to enable drill-down functionality",
      "required": false,
      "defaultValue": true
    },
    {
      "name": "drilldownHeight",
      "type": "number",
      "description": "Height of drill-down panel in pixels",
      "required": false,
      "defaultValue": 300
    },
    {
      "name": "showSingleRecordView",
      "type": "boolean",
      "description": "Whether to show SingleRecordView when a row is selected in the grid",
      "required": false,
      "defaultValue": false
    },
    {
      "name": "singleRecordViewFields",
      "type": "Array<string>",
      "description": "Fields to display in the SingleRecordView",
      "required": false
    }
  ],
  "events": [
    {
      "name": "segmentSelected",
      "description": "Fired when a chart segment is selected",
      "parameters": [
        {
          "name": "segment",
          "type": "{ segment: { label: string; value: number; records: Array<object>; percentage?: number } }",
          "description": "Selected segment info including label, value, and records"
        }
      ]
    },
    {
      "name": "selectionCleared",
      "description": "Fired when selection is cleared",
      "parameters": []
    },
    {
      "name": "dataPointClick",
      "description": "Bubbled event from chart when any data point is clicked",
      "parameters": [
        {
          "name": "clickData",
          "type": "{ seriesName: string; value: number; label: string; records: Array<object>; chartType: string; percentage?: number }",
          "description": "Click data from the chart including label, value, and records"
        }
      ]
    },
    {
      "name": "rowSelected",
      "description": "Fired when a row is selected in the drill-down grid",
      "parameters": [
        {
          "name": "selectionData",
          "type": "{ record: object; segment: { label: string; value: number; records: Array<object> } }",
          "description": "Object containing selected record and current segment context"
        }
      ]
    }
  ],
  "dependencies": [
    {
      "name": "SimpleChart",
      "namespace": "Generic/UI/Chart",
      "location": "registry",
      "description": "Chart component for visualization"
    },
    {
      "name": "DataGrid",
      "namespace": "Generic/UI/Table",
      "location": "registry",
      "description": "Generic data grid for drill-down display"
    },
    {
      "name": "SingleRecordView",
      "namespace": "Generic/UI/Form",
      "location": "registry",
      "description": "Single record display component for selected row details"
    }
  ],
  "code": "@file:../code/simple-drilldown-chart.js",
  "exampleUsage": "<SimpleDrilldownChart\n  entityName=\"Invoice Line Items\"\n  data={invoiceItems}\n  groupBy=\"ProductCategory\"\n  valueField=\"TotalAmount\"\n  aggregateMethod=\"sum\"\n  chartType=\"bar\"\n  title=\"Revenue by Category - Click to drill down\"\n  gridFields={['ProductName', 'Quantity', 'TotalAmount', 'InvoiceDate']}\n  showSingleRecordView={true}\n  singleRecordViewFields={['ProductName', 'Description', 'Quantity', 'UnitPrice', 'TotalAmount']}\n  onDataPointClick={handleChartClick}\n  onRowSelected={handleRowSelection}\n/>"
}