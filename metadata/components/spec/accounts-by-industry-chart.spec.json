{
  "name": "AccountsByIndustryChart",
  "title": "Accounts by Industry Chart",
  "description": "Interactive pie chart component that visualizes account distribution by industry with click-to-filter functionality.",
  "type": "component",
  "location": "embedded",
  "namespace": "CRM/Analytics",
  "functionalRequirements": "## Pie Chart Component\n\n- Display interactive pie chart using Chart.js\n- Show industry names with counts in legend\n- Calculate and display percentages in tooltips\n- Support click-to-select functionality\n- Animate on hover with visual feedback\n- Configurable color schemes\n- Handle 'Others' grouping for small segments",
  "technicalDesign": "## Technical Design\n\n### Props\n- industryData: Grouped and calculated industry data\n- selectedIndustry: Currently selected slice\n- onSliceClick: Callback for slice selection\n- colorScheme: Color palette selection\n- maxIndustries: Maximum slices to show\n\n### Implementation\n- Uses Chart.js for rendering\n- Ref-based chart instance management\n- Cleanup on unmount to prevent memory leaks",
  "properties": [
    {
      "name": "industryData",
      "type": "object",
      "required": true,
      "description": "Object containing labels, data, percentages, and total count"
    },
    { 
      "name": "selectedIndustry",
      "type": "string",
      "required": false,
      "description": "Currently selected industry slice"
    },
    {
      "name": "onSliceClick",
      "type": "function",
      "required": true,
      "description": "Callback function when a slice is clicked"
    },
    {
      "name": "colorScheme",
      "type": "string",
      "required": false,
      "description": "Color palette: default, vibrant, or pastel",
      "defaultValue": "default"
    }
  ],
  "libraries": [
    {
      "name": "Chart.js",
      "version": "4.4.0",
      "globalVariable": "Chart"
    }
  ],
  "exampleUsage": "<AccountsByIndustryChart\n  industryData={industryData}\n  selectedIndustry={selectedIndustry}\n  onSliceClick={handleSliceClick}\n  colorScheme=\"default\"\n/>",
  "code": "const AccountsByIndustryChart = ({ industryData, selectedIndustry, onSliceClick, colorScheme = 'default' }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  \n  const colorSchemes = {\n    default: [\n      '#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6',\n      '#EC4899', '#14B8A6', '#F97316', '#6366F1', '#84CC16'\n    ],\n    vibrant: [\n      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',\n      '#DDA0DD', '#98D8C8', '#FFD93D', '#6BCB77', '#FF6B9D'\n    ],\n    pastel: [\n      '#FFE5E5', '#E5F3FF', '#E5FFE5', '#FFF5E5', '#F5E5FF',\n      '#FFE5F5', '#E5FFF5', '#FFF0E5', '#F0E5FF', '#E5F0FF'\n    ]\n  };\n  \n  useEffect(() => {\n    if (chartRef.current && industryData.labels.length > 0) {\n      const ctx = chartRef.current.getContext('2d');\n      \n      // If chart exists, update data instead of destroying (prevents flicker)\n      if (chartInstance.current) {\n        // Find selected index to offset that slice\n        const selectedIndex = selectedIndustry \n          ? industryData.labels.indexOf(selectedIndustry)\n          : -1;\n        \n        // Create offset array - 20px for selected slice, 8px for hover\n        const offsets = industryData.labels.map((_, i) => \n          i === selectedIndex ? 20 : 0\n        );\n        \n        // Update chart data and offset without destroying\n        chartInstance.current.data.labels = industryData.labels;\n        chartInstance.current.data.datasets[0].data = industryData.data;\n        chartInstance.current.data.datasets[0].offset = offsets;\n        chartInstance.current.update('none'); // 'none' animation mode prevents flicker\n        return;\n      }\n      \n      // Only create new chart if it doesn't exist\n      const selectedIndex = selectedIndustry \n        ? industryData.labels.indexOf(selectedIndustry)\n        : -1;\n      \n      const offsets = industryData.labels.map((_, i) => \n        i === selectedIndex ? 20 : 0\n      );\n      \n      chartInstance.current = new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: industryData.labels,\n          datasets: [{\n            data: industryData.data,\n            backgroundColor: colorSchemes[colorScheme],\n            borderWidth: 2,\n            borderColor: '#fff',\n            hoverOffset: 8,\n            offset: offsets // Initial offset for selected slice\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          animation: {\n            animateRotate: true,\n            animateScale: false\n          },\n          plugins: {\n            legend: {\n              position: 'right',\n              labels: {\n                padding: 15,\n                font: { size: 12 },\n                generateLabels: (chart) => {\n                  const data = chart.data;\n                  return data.labels.map((label, i) => ({\n                    text: `${label} (${industryData.data[i]})`,\n                    fillStyle: data.datasets[0].backgroundColor[i],\n                    hidden: false,\n                    index: i,\n                    // Add bold font for selected item\n                    font: {\n                      size: 12,\n                      weight: label === selectedIndustry ? 'bold' : 'normal'\n                    }\n                  }));\n                }\n              },\n              onClick: (e, legendItem, legend) => {\n                const index = legendItem.index;\n                const label = industryData.labels[index];\n                onSliceClick(label);\n              }\n            },\n            tooltip: {\n              callbacks: {\n                label: (context) => {\n                  const label = context.label || '';\n                  const value = context.parsed;\n                  const percentage = industryData.percentages[context.dataIndex];\n                  return `${label}: ${value} (${percentage}%)`;\n                }\n              }\n            }\n          },\n          onClick: (event, elements) => {\n            if (elements.length > 0) {\n              const index = elements[0].index;\n              const label = industryData.labels[index];\n              onSliceClick(label);\n            }\n          }\n        }\n      });\n    }\n    \n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [industryData, colorScheme]); // Remove onSliceClick from deps to prevent recreation\n  \n  // Update selection without recreating chart\n  useEffect(() => {\n    if (chartInstance.current) {\n      const selectedIndex = selectedIndustry \n        ? industryData.labels.indexOf(selectedIndustry)\n        : -1;\n      \n      // Update offsets for selected slice\n      const offsets = industryData.labels.map((_, i) => \n        i === selectedIndex ? 20 : 0\n      );\n      \n      chartInstance.current.data.datasets[0].offset = offsets;\n      \n      // Update legend font weights\n      chartInstance.current.options.plugins.legend.labels.generateLabels = (chart) => {\n        const data = chart.data;\n        return data.labels.map((label, i) => ({\n          text: `${label} (${industryData.data[i]})`,\n          fillStyle: data.datasets[0].backgroundColor[i],\n          hidden: false,\n          index: i,\n          font: {\n            size: 12,\n            weight: label === selectedIndustry ? 'bold' : 'normal'\n          }\n        }));\n      };\n      \n      chartInstance.current.update('none'); // No animation to prevent flicker\n    }\n  }, [selectedIndustry, industryData]);\n  \n  return (\n    <div style={{ height: '100%', position: 'relative' }}>\n      <canvas ref={chartRef}></canvas>\n    </div>\n  );\n};"
}