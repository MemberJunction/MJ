{
  "name": "AIModelAnalytics",
  "title": "AI Model Analytics",
  "description": "Analytics panel with charts showing prompt usage distribution, performance metrics, and time series.",
  "type": "chart",
  "functionalRequirements": "Display pie chart for prompt usage, bar chart for performance, time series for usage trends",
  "dataRequirements": null,
  "technicalDesign": "",
  "properties": [
    {"name": "model", "type": "object", "required": false, "description": "The selected AI model for analytics"},
    {"name": "promptRuns", "type": "array", "required": true, "description": "Array of prompt runs to analyze"},
    {"name": "view", "type": "string", "required": true, "description": "Current analytics view - 'prompts', 'performance', or 'timeline'"}
  ],
  "events": [
    {"name": "onViewChange", "description": "Fired when the analytics view changes", "parameters": [{"name": "view", "type": "string", "description": "New view name"}]}
  ],
  "exampleUsage": "<AIModelAnalytics ... />",
  "code": "function AIModelAnalytics({ \n  model,\n  promptRuns,\n  view,\n  onViewChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Calculate prompt usage statistics\n  const promptStats = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    const stats = {};\n    promptRuns.forEach(run => {\n      const promptName = run.PromptName || 'Unknown';\n      if (!stats[promptName]) {\n        stats[promptName] = {\n          name: promptName,\n          runs: 0,\n          successfulRuns: 0,\n          failedRuns: 0,\n          totalTokens: 0,\n          avgExecutionTime: 0,\n          executionTimes: []\n        };\n      }\n      \n      stats[promptName].runs++;\n      if (run.Status === 'Success' || run.Status === 'Completed') {\n        stats[promptName].successfulRuns++;\n      } else if (run.Status === 'Failed' || run.Status === 'Error') {\n        stats[promptName].failedRuns++;\n      }\n      \n      stats[promptName].totalTokens += run.TotalTokens || 0;\n      if (run.TotalExecutionTime) {\n        stats[promptName].executionTimes.push(run.TotalExecutionTime);\n      }\n    });\n    \n    // Calculate averages\n    Object.values(stats).forEach(stat => {\n      if (stat.executionTimes.length > 0) {\n        stat.avgExecutionTime = stat.executionTimes.reduce((a, b) => a + b, 0) / stat.executionTimes.length;\n      }\n    });\n    \n    return Object.values(stats).sort((a, b) => b.runs - a.runs);\n  }, [promptRuns]);\n  \n  // Calculate time series data\n  const timeSeriesData = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    // Group by day\n    const dailyStats = {};\n    promptRuns.forEach(run => {\n      if (run.StartTime) {\n        const date = new Date(run.StartTime).toLocaleDateString();\n        if (!dailyStats[date]) {\n          dailyStats[date] = {\n            date,\n            runs: 0,\n            tokens: 0,\n            errors: 0\n          };\n        }\n        dailyStats[date].runs++;\n        dailyStats[date].tokens += run.TotalTokens || 0;\n        if (run.Status === 'Failed' || run.Status === 'Error') {\n          dailyStats[date].errors++;\n        }\n      }\n    });\n    \n    return Object.values(dailyStats).sort((a, b) => new Date(a.date) - new Date(b.date));\n  }, [promptRuns]);\n  \n  // Render pie chart\n  const renderPieChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '200px',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No prompt data available\n        </div>\n      );\n    }\n    \n    const total = promptStats.reduce((sum, stat) => sum + stat.runs, 0);\n    const colors = [\n      styles.colors.primary,\n      styles.colors.success || '#4CAF50',\n      styles.colors.warning || '#FF9800',\n      styles.colors.error || '#F44336',\n      styles.colors.info || '#2196F3',\n      '#9C27B0', '#00BCD4', '#8BC34A', '#FFC107', '#795548'\n    ];\n    \n    // Create simple pie chart using SVG\n    let currentAngle = 0;\n    const segments = promptStats.slice(0, 5).map((stat, index) => {\n      const percentage = stat.runs / total;\n      const angle = percentage * 360;\n      const largeArcFlag = angle > 180 ? 1 : 0;\n      \n      const startX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      currentAngle += angle;\n      \n      const endX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const endY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      const pathData = [\n        `M 100 100`,\n        `L ${startX} ${startY}`,\n        `A 80 80 0 ${largeArcFlag} 1 ${endX} ${endY}`,\n        'Z'\n      ].join(' ');\n      \n      return {\n        path: pathData,\n        color: colors[index % colors.length],\n        percentage,\n        stat\n      };\n    });\n    \n    return (\n      <div>\n        <svg viewBox=\"0 0 200 200\" style={{ width: '200px', height: '200px', margin: '0 auto', display: 'block' }}>\n          {segments.map((segment, index) => (\n            <g key={index}>\n              <path\n                d={segment.path}\n                fill={segment.color}\n                stroke={styles.colors.background}\n                strokeWidth=\"2\"\n                style={{ cursor: 'pointer' }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.opacity = '0.8';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.opacity = '1';\n                }}\n              />\n            </g>\n          ))}\n        </svg>\n        \n        {/* Legend */}\n        <div style={{\n          marginTop: styles.spacing.md,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: styles.spacing.xs\n        }}>\n          {segments.map((segment, index) => (\n            <div\n              key={index}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              <div style={{\n                width: '12px',\n                height: '12px',\n                backgroundColor: segment.color,\n                borderRadius: '2px'\n              }} />\n              <div style={{\n                flex: 1,\n                color: styles.colors.text,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap'\n              }}>\n                {segment.stat.name}\n              </div>\n              <div style={{\n                color: styles.colors.textSecondary,\n                fontWeight: styles.typography.fontWeight?.medium || '500'\n              }}>\n                {(segment.percentage * 100).toFixed(1)}%\n              </div>\n            </div>\n          ))}\n          {promptStats.length > 5 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              fontStyle: 'italic'\n            }}>\n              +{promptStats.length - 5} more prompts\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render bar chart for performance\n  const renderPerformanceChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '200px',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No performance data available\n        </div>\n      );\n    }\n    \n    const maxTime = Math.max(...promptStats.map(s => s.avgExecutionTime || 0));\n    const displayStats = promptStats.slice(0, 10);\n    \n    return (\n      <div>\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: styles.spacing.sm\n        }}>\n          {displayStats.map((stat, index) => (\n            <div key={index} style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.sm }}>\n              <div style={{\n                width: '100px',\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.text,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap'\n              }}>\n                {stat.name}\n              </div>\n              <div style={{\n                flex: 1,\n                height: '20px',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                overflow: 'hidden',\n                position: 'relative'\n              }}>\n                <div style={{\n                  width: maxTime > 0 ? `${(stat.avgExecutionTime / maxTime) * 100}%` : '0%',\n                  height: '100%',\n                  backgroundColor: styles.colors.primary,\n                  transition: 'width 0.3s'\n                }} />\n                <div style={{\n                  position: 'absolute',\n                  right: styles.spacing.xs,\n                  top: '50%',\n                  transform: 'translateY(-50%)',\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary\n                }}>\n                  {stat.avgExecutionTime ? `${(stat.avgExecutionTime / 1000).toFixed(2)}s` : '-'}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render time series chart\n  const renderTimeSeriesChart = () => {\n    if (timeSeriesData.length === 0) {\n      return (\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '200px',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No time series data available\n        </div>\n      );\n    }\n    \n    const maxRuns = Math.max(...timeSeriesData.map(d => d.runs));\n    const recentData = timeSeriesData.slice(-7);\n    \n    return (\n      <div>\n        <div style={{\n          display: 'flex',\n          alignItems: 'flex-end',\n          height: '150px',\n          gap: styles.spacing.xs,\n          marginBottom: styles.spacing.sm\n        }}>\n          {recentData.map((data, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 1,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                gap: styles.spacing.xs\n              }}\n            >\n              <div style={{\n                width: '100%',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                position: 'relative',\n                flex: 1,\n                display: 'flex',\n                alignItems: 'flex-end'\n              }}>\n                <div style={{\n                  width: '100%',\n                  height: maxRuns > 0 ? `${(data.runs / maxRuns) * 100}%` : '0%',\n                  backgroundColor: data.errors > 0 \n                    ? styles.colors.error \n                    : styles.colors.primary,\n                  borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                  transition: 'height 0.3s'\n                }} />\n              </div>\n              <div style={{\n                fontSize: '10px',\n                color: styles.colors.textSecondary,\n                textAlign: 'center'\n              }}>\n                {new Date(data.date).toLocaleDateString('en', { month: 'short', day: 'numeric' })}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n          color: styles.colors.textSecondary\n        }}>\n          <span>Runs per day (last 7 days)</span>\n          <span>Max: {maxRuns}</span>\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: styles.colors.surface\n    }}>\n      {/* Header with View Selector */}\n      <div style={{\n        padding: styles.spacing.lg,\n        borderBottom: `1px solid ${styles.colors.border}`\n      }}>\n        <h3 style={{\n          margin: 0,\n          marginBottom: styles.spacing.md,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || '600',\n          color: styles.colors.text\n        }}>\n          Analytics\n        </h3>\n        \n        {/* View Tabs */}\n        <div style={{\n          display: 'flex',\n          gap: styles.spacing.xs,\n          borderBottom: `1px solid ${styles.colors.border}`\n        }}>\n          <button\n            onClick={() => onViewChange?.('prompts')}\n            style={{\n              padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n              backgroundColor: 'transparent',\n              color: view === 'prompts' ? styles.colors.primary : styles.colors.textSecondary,\n              border: 'none',\n              borderBottom: view === 'prompts' ? `2px solid ${styles.colors.primary}` : 'none',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || '500',\n              cursor: 'pointer',\n              transition: 'color 0.2s'\n            }}\n          >\n            Prompt Usage\n          </button>\n          <button\n            onClick={() => onViewChange?.('performance')}\n            style={{\n              padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n              backgroundColor: 'transparent',\n              color: view === 'performance' ? styles.colors.primary : styles.colors.textSecondary,\n              border: 'none',\n              borderBottom: view === 'performance' ? `2px solid ${styles.colors.primary}` : 'none',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || '500',\n              cursor: 'pointer',\n              transition: 'color 0.2s'\n            }}\n          >\n            Performance\n          </button>\n          <button\n            onClick={() => onViewChange?.('timeline')}\n            style={{\n              padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n              backgroundColor: 'transparent',\n              color: view === 'timeline' ? styles.colors.primary : styles.colors.textSecondary,\n              border: 'none',\n              borderBottom: view === 'timeline' ? `2px solid ${styles.colors.primary}` : 'none',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || '500',\n              cursor: 'pointer',\n              transition: 'color 0.2s'\n            }}\n          >\n            Timeline\n          </button>\n        </div>\n      </div>\n      \n      {/* Content Area */}\n      <div style={{\n        flex: 1,\n        padding: styles.spacing.lg,\n        overflow: 'auto'\n      }}>\n        {!model ? (\n          <div style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '100%',\n            color: styles.colors.textSecondary,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Select a model to view analytics\n          </div>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <div style={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(2, 1fr)',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.lg\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('sm')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Total Runs\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  {promptRuns.length}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('sm')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Unique Prompts\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  {promptStats.length}\n                </div>\n              </div>\n            </div>\n            \n            {/* Chart Area */}\n            <div>\n              {view === 'prompts' && renderPieChart()}\n              {view === 'performance' && renderPerformanceChart()}\n              {view === 'timeline' && renderTimeSeriesChart()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}