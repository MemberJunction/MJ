{
  "name": "AIModelList",
  "title": "AI Model List",
  "description": "Displays AI models in grid or list view with vendor information and sorting.",
  "type": "table",
  "functionalRequirements": "Display models with vendor counts, support grid and list views, handle sorting and selection",
  "dataRequirements": null,
  "technicalDesign": "",
  "properties": [
    {"name": "models", "type": "array", "required": true, "description": "Array of AI model objects to display"},
    {"name": "modelVendors", "type": "array", "required": true, "description": "Array of model vendor associations"},
    {"name": "viewMode", "type": "string", "required": true, "description": "Display mode - 'grid' or 'list'"},
    {"name": "selectedModelId", "type": "string", "required": false, "description": "ID of the currently selected model"},
    {"name": "sortBy", "type": "string", "required": false, "description": "Field to sort by"},
    {"name": "sortDirection", "type": "string", "required": false, "description": "Sort direction - 'asc' or 'desc'"}
  ],
  "events": [
    {"name": "onSelectModel", "description": "Fired when a model is selected", "parameters": [{"name": "modelId", "type": "string", "description": "ID of the selected model"}]},
    {"name": "onSortChange", "description": "Fired when sort criteria changes", "parameters": [{"name": "sortBy", "type": "string", "description": "Field to sort by"}, {"name": "sortDirection", "type": "string", "description": "Sort direction"}]}
  ],
  "exampleUsage": "<AIModelList ... />",
  "code": "function AIModelList({ \n  models, \n  modelVendors,\n  viewMode, \n  selectedModelId, \n  onSelectModel, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Get vendor info for a model\n  const getModelVendorInfo = useCallback((modelId) => {\n    const vendors = modelVendors.filter(v => v.ModelID === modelId);\n    const inferenceProviders = vendors.filter(v => v.Type === 'Inference Provider');\n    const modelDeveloper = vendors.find(v => v.Type === 'Model Developer');\n    \n    return {\n      inferenceProviders,\n      modelDeveloper,\n      vendorCount: vendors.length\n    };\n  }, [modelVendors]);\n  \n  // Handle sort column click\n  const handleSort = useCallback((field) => {\n    if (sortBy === field) {\n      onSortChange?.(field, sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      onSortChange?.(field, 'asc');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{\n        marginLeft: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {sortDirection === 'asc' ? '\u25b2' : '\u25bc'}\n      </span>\n    );\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      'Active': styles.colors.success || styles.colors.primary,\n      'Inactive': styles.colors.warning || styles.colors.secondary,\n      'Deprecated': styles.colors.error || styles.colors.secondary,\n      'Preview': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: 'inline-block',\n        padding: `${styles.spacing.xs} ${styles.spacing.sm}`,\n        backgroundColor: color + '15',\n        color: color,\n        borderRadius: getBorderRadius('sm'),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || '500'\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render cost rank\n  const renderCostRank = (rank) => {\n    if (rank == null) return '-';\n    \n    const maxStars = 5;\n    const filledStars = Math.min(rank, maxStars);\n    \n    return (\n      <span style={{\n        color: styles.colors.warning || styles.colors.secondary,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {'$'.repeat(filledStars)}\n        <span style={{ opacity: 0.3 }}>\n          {'$'.repeat(maxStars - filledStars)}\n        </span>\n      </span>\n    );\n  };\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return '-';\n    if (tokens >= 1000000) return `${(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `${(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Grid view rendering\n  const renderGridView = () => (\n    <div style={{\n      display: 'grid',\n      gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))',\n      gap: styles.spacing.lg\n    }}>\n      {models.map((model) => {\n        const vendorInfo = getModelVendorInfo(model.ID);\n        const isSelected = model.ID === selectedModelId;\n        \n        return (\n          <div\n            key={model.ID}\n            onClick={() => onSelectModel?.(model.ID)}\n            style={{\n              backgroundColor: styles.colors.surface,\n              borderRadius: getBorderRadius('md'),\n              padding: styles.spacing.lg,\n              cursor: 'pointer',\n              transition: 'all 0.2s',\n              border: isSelected \n                ? `2px solid ${styles.colors.primary}`\n                : `1px solid ${styles.colors.border}`,\n              boxShadow: isSelected \n                ? `0 4px 12px ${styles.colors.shadow || 'rgba(0, 0, 0, 0.1)'}`\n                : 'none'\n            }}\n            onMouseEnter={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.primary;\n                e.currentTarget.style.boxShadow = `0 2px 8px ${styles.colors.shadow || 'rgba(0, 0, 0, 0.05)'}`;\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.border;\n                e.currentTarget.style.boxShadow = 'none';\n              }\n            }}\n          >\n            {/* Model Header */}\n            <div style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'flex-start',\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{ flex: 1 }}>\n                <h3 style={{\n                  margin: 0,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {model.Name}\n                </h3>\n                {model.APIName && (\n                  <div style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    fontFamily: 'monospace'\n                  }}>\n                    {model.APIName}\n                  </div>\n                )}\n              </div>\n              {renderStatusBadge(model.IsActive ? 'Active' : 'Inactive')}\n            </div>\n            \n            {/* Model Description */}\n            {model.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                marginBottom: styles.spacing.md,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                display: '-webkit-box',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: 'vertical'\n              }}>\n                {model.Description}\n              </div>\n            )}\n            \n            {/* Model Specs */}\n            <div style={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(2, 1fr)',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('sm')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Input Token Limit\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || '500',\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('sm')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Cost Rank\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || '500'\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </div>\n              </div>\n            </div>\n            \n            {/* Vendor Info */}\n            <div style={{\n              paddingTop: styles.spacing.md,\n              borderTop: `1px solid ${styles.colors.border}`,\n              display: 'flex',\n              gap: styles.spacing.md,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              {vendorInfo.modelDeveloper && (\n                <div style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Dev:</span>\n                  <span style={{ \n                    color: styles.colors.text,\n                    fontWeight: styles.typography.fontWeight?.medium || '500'\n                  }}>\n                    {vendorInfo.modelDeveloper.Vendor}\n                  </span>\n                </div>\n              )}\n              {vendorInfo.inferenceProviders.length > 0 && (\n                <div style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Providers:</span>\n                  <span style={{ \n                    color: styles.colors.primary,\n                    fontWeight: styles.typography.fontWeight?.medium || '500'\n                  }}>\n                    {vendorInfo.inferenceProviders.length}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n  \n  // List view rendering\n  const renderListView = () => (\n    <div style={{\n      backgroundColor: styles.colors.surface,\n      borderRadius: getBorderRadius('md'),\n      overflow: 'hidden'\n    }}>\n      <table style={{\n        width: '100%',\n        borderCollapse: 'collapse'\n      }}>\n        <thead>\n          <tr style={{\n            borderBottom: `2px solid ${styles.colors.border}`\n          }}>\n            <th\n              onClick={() => handleSort('Name')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'left',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary,\n                cursor: 'pointer',\n                userSelect: 'none'\n              }}\n            >\n              Model Name\n              {renderSortIndicator('Name')}\n            </th>\n            <th\n              onClick={() => handleSort('Status')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'left',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary,\n                cursor: 'pointer',\n                userSelect: 'none'\n              }}\n            >\n              Status\n              {renderSortIndicator('Status')}\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'left',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Developer\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'left',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Providers\n            </th>\n            <th\n              onClick={() => handleSort('InputTokenLimit')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'right',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary,\n                cursor: 'pointer',\n                userSelect: 'none'\n              }}\n            >\n              Input Limit\n              {renderSortIndicator('InputTokenLimit')}\n            </th>\n            <th\n              onClick={() => handleSort('CostRank')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'center',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary,\n                cursor: 'pointer',\n                userSelect: 'none'\n              }}\n            >\n              Cost\n              {renderSortIndicator('CostRank')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {models.map((model, index) => {\n            const vendorInfo = getModelVendorInfo(model.ID);\n            const isSelected = model.ID === selectedModelId;\n            \n            return (\n              <tr\n                key={model.ID}\n                onClick={() => onSelectModel?.(model.ID)}\n                style={{\n                  borderBottom: index < models.length - 1 \n                    ? `1px solid ${styles.colors.borderLight || styles.colors.border}` \n                    : 'none',\n                  backgroundColor: isSelected \n                    ? styles.colors.primaryLight || styles.colors.primary + '10'\n                    : 'transparent',\n                  cursor: 'pointer',\n                  transition: 'background-color 0.2s'\n                }}\n                onMouseEnter={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = 'transparent';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  <div>\n                    <div style={{\n                      fontWeight: isSelected \n                        ? (styles.typography.fontWeight?.semibold || '600')\n                        : (styles.typography.fontWeight?.regular || '400'),\n                      color: styles.colors.text\n                    }}>\n                      {model.Name}\n                    </div>\n                    {model.APIName && (\n                      <div style={{\n                        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                        color: styles.colors.textSecondary,\n                        fontFamily: 'monospace'\n                      }}>\n                        {model.APIName}\n                      </div>\n                    )}\n                  </div>\n                </td>\n                <td style={{\n                  padding: styles.spacing.md\n                }}>\n                  {renderStatusBadge(model.IsActive ? 'Active' : 'Inactive')}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {vendorInfo.modelDeveloper?.Vendor || '-'}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {vendorInfo.inferenceProviders.length > 0 ? (\n                    <div style={{\n                      display: 'flex',\n                      gap: styles.spacing.xs,\n                      flexWrap: 'wrap'\n                    }}>\n                      {vendorInfo.inferenceProviders.slice(0, 3).map((provider, idx) => (\n                        <span\n                          key={idx}\n                          style={{\n                            padding: `2px ${styles.spacing.xs}`,\n                            backgroundColor: styles.colors.primary + '15',\n                            color: styles.colors.primary,\n                            borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                          }}\n                        >\n                          {provider.Vendor}\n                        </span>\n                      ))}\n                      {vendorInfo.inferenceProviders.length > 3 && (\n                        <span style={{\n                          color: styles.colors.textSecondary,\n                          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                        }}>\n                          +{vendorInfo.inferenceProviders.length - 3}\n                        </span>\n                      )}\n                    </div>\n                  ) : (\n                    <span style={{ color: styles.colors.textSecondary }}>-</span>\n                  )}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: 'right',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: 'center'\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n  \n  return viewMode === 'grid' ? renderGridView() : renderListView();\n}",
  "dependencies": [],
  "libraries": []
}