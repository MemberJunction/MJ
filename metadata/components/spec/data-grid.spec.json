{
  "name": "DataGrid",
  "title": "Data Grid",
  "description": "Flexible, feature-rich data grid component wrapping Ant Design Table 5.12.0 for displaying tabular data with sorting, filtering, paging, and row selection. Perfect for drill-down targets (final level showing detail records), master-detail patterns, search results, or standalone tables. Supports custom column rendering with two modes: simple (string array) or advanced (ColumnDef objects with {field, header, render, width, sortable}). Metadata-aware formatting: dates (locale with time), booleans (Yes/No), value lists (colored tags with 50+ status colors + 50 fallback colors), money ($USD), decimals (2 places), integers (commas). Long text handling modes: truncate (ellipsis), expand (click 'show more/less'), tooltip (hover), wrap (word-break), none. USE for lists/tables of records. DO NOT USE for single record (use SingleRecordView) or charts (use SimpleChart/SimpleDrilldownChart).",
  "type": "table",
  "location": "embedded",
  "functionalRequirements": "WHEN TO USE: Displaying lists or tables of records; Drill-down destination (bottom level of hierarchy showing detail records); Master-detail detail panel; Search results or filtered record lists; Data exploration with sorting/filtering/paging; Bulk operations requiring multi-select; Report tables; Any tabular data display. WHEN NOT TO USE: Single record display (use SingleRecordView instead); Chart/graph visualizations (use SimpleChart or SimpleDrilldownChart); Need built-in chart-to-table drill-down (use SimpleDrilldownChart). CORE FEATURES: Universal table component for any entity type or data structure; Configurable columns with two modes: (1) Simple mode - string array of field names ['Name', 'SKU', 'Price'] uses smart defaults, (2) Advanced mode - ColumnDef objects [{field: 'Price', header: 'Unit Price', render: (value, record, fieldInfo) => `$${value}`, width: '120px', sortable: true}] for full control; Auto-detects columns from data if columns prop omitted; Smart type detection from entity metadata for alignment (numbers right-aligned) and formatting; Column-level and global text filtering with configurable debounce (default 300ms); Search highlighting with match count display ('Found N matching records'); Pagination with configurable page sizes and range display; Row selection modes: none (default), checkbox (multi-select), radio (single-select), row (click anywhere to select); Row click events with full record data for drill-down or navigation; Metadata-aware field formatting: dates (formatDate to locale with hour/minute), booleans (Yes/No text), value lists (colored Tag components), money fields (Intl.NumberFormat $USD), decimals/floats (2 decimal places with commas), integers (commas); Value list coloring system: statusColorMap with 50+ predefined colors for active/pending/complete/failed/error states, 50 fallback colors for other values, consistent color assignment per value; Long text field handling with 5 modes: truncate (substring+'...'), expand (click to toggle 'show more/less' with expandedCells state tracking), tooltip (Ant Tooltip on hover), wrap (word-break normal), none (default); Auto-fit columns to container width OR fixed widths with horizontal scroll (autoFitColumns prop); Column widths intelligently set based on SQL type and field length: GUIDs (280px), long text varchar(max) or >200 chars (400px), dates (160px), bit (80px), int (100px), money (130px); Loading state (spinner) when data===null; Empty state with contextual message 'No {entityName} records found'; Filter match highlighting using Typography.Text mark prop; Debounced filter input prevents thrashing on large datasets; CSS overrides disable Ant Design animations to prevent render loop detection; Responsive design adapts to any container. COLUMN SYSTEM: Accepts Array<string | ColumnDef>; ColumnDef structure: {field: string (required), header: string (optional, uses DisplayName from metadata or field name), render: function(value, record, fieldInfo) => ReactNode (optional custom renderer), width: string|number (optional like '200px' or 200), sortable: boolean (optional, overrides global sorting prop)}; Backward compatible - existing code using string arrays continues to work; If columns omitted, auto-discovers from first data record filtering out 'key' field. ROW SELECTION: selectionMode='none'|'checkbox'|'radio'|'row'; Manages selectedRowKeys state; Fires selectionChanged event with full selected record objects. EVENTS: rowClick(record: object) - fired on row click; selectionChanged(selectedRows: Array<object>) - fired when selection changes; pageChanged(pageNumber: number 0-based, visibleRows: Array<object>) - fired on page change; sortChanged(sortState: {column: string, direction: 'asc'|'desc'}) - fired when sort changes; filterChanged(filterValue: string, matchingData: Array<object>) - fired when filter text changes with all matching records. FILTERING: Searches specified filterFields array or all display fields if not provided; Debounces input by filterDebounceTime (default 300ms); Highlights matching text across all visible cells; Shows 'Found N matching records' count below search box.",
  "technicalDesign": "Wraps Ant Design Table component with MJ-aware enhancements. React hooks: useState for filterText (raw input), debouncedFilter (processed search term), selectedRowKeys (selection state), currentPage (pagination), sortConfig (sort state), entityInfo (entity metadata), expandedCells (object tracking which long text cells are expanded with keys like ${recordKey}_${fieldName}). Loads entity metadata from utilities.md.Entities on mount for field type detection (Type, Length, DisplayName, ValueListType, EntityFieldValues). Library unwrapping: Uses unwrapLibraryComponents(antd, 'Table', 'Input', 'Space', 'Typography', 'Tag', 'Tooltip') to handle various Ant Design package formats (ESM/CJS/UMD). Column normalization (useMemo): Accepts columns as strings OR ColumnDef objects; If not provided, auto-discovers from Object.keys(data[0]) excluding 'key' field; Normalizes all to standard format {field, header, render, width, sortable}; Handles invalid configs gracefully with console.warn. Column building (useMemo): Maps normalized columns to Ant Design column configs; Determines alignment based on SQL type (int/decimal/float/numeric/money/bit → right-aligned, others left); Sets column widths based on SQL type and field length (only when autoFitColumns=false): uniqueidentifier→280px, long text (text type OR varchar(max) with length=-1 OR varchar with length>200)→400px, varchar/char based on length (≤50→100-200px, ≤100→250px, ≤200→300px, else→350px), date/time→160px, bit→80px, int→100px, decimal/numeric→120px, money→130px; When autoFitColumns=true, no widths set so table auto-sizes; Uses colDef.width if provided to override calculated width; Sets ellipsis=false (handle manually for click expansion); Creates sorter function if sortable (string localeCompare, number subtraction, null handling); render function priority: (1) Custom colDef.render if provided, (2) Metadata-driven default formatting. Field rendering logic: If custom render, call it with (value, record, fieldInfo); If value is null, return '-'; Create unique cellKey ${record.key/ID/id}_${fieldName} for expandedCells tracking; Format based on field type: date/time (formatDate with locale, hour/minute), bit (Yes/No), value lists (Tag component with getValueColor), money (Intl.NumberFormat USD currency), decimal/float (toLocaleString 2 decimals), int (toLocaleString); Long text handling: Check if field is long text (SQL types: text, varchar/char with length=-1 for (max), varchar/char with length>200); If length > longTextThreshold AND not value list: truncate mode (substring+'...'), expand mode (click toggles expandedCells[cellKey], shows 'show more/less' links), tooltip mode (Ant Tooltip wrapper), wrap mode (whiteSpace:normal, wordBreak:break-word), none (default); Apply filter highlighting: If filtering enabled and debouncedFilter exists, find match index in string, split and wrap match in Typography.Text mark component. Value list coloring: statusColorMap object with 50+ colors (active→#389e0d green, pending→#d48806 orange, failed→#a8071a red, processing→#096dd9 blue, etc.); fallbackColors array with 50 distinct colors (purple #722ed1, magenta #c41d7f, teal #08979c, indigo #1d39c4, vermillion #fa541c, brown #614700, etc.); getValueColor function: Build colorAssignments Map, iterate possibleValues from entity metadata, assign statusColorMap color if exists else next fallbackColor, ensures consistent colors for all values; For unknown values, check statusColorMap first then use hash-based fallback index. Filter debouncing (useEffect): setTimeout with filterDebounceTime (300ms), updates debouncedFilter; Cleanup clears timer. Filtered data (useMemo): If !filtering or !debouncedFilter, return original data; Determine searchFields (filterFields prop or all displayFields); Filter rows where any searchField value includes searchTerm (case-insensitive); Handle null/undefined rows gracefully. Filter change effect (useEffect): Fires onFilterChanged event with {filterValue: debouncedFilter, matchingData: filteredData}. Row selection config: If selectionMode !== 'none', create rowSelection object with type ('radio' or 'checkbox'), selectedRowKeys state, onChange handler (updates state, fires onSelectionChanged); For 'row' mode, adds onSelect handler. Pagination config: If paging=true, create pagination object with current (currentPage), pageSize, total (filteredData.length), showSizeChanger=false, showTotal formatter, onChange handler (updates currentPage, fires onPageChanged with 0-based page number and visible rows slice). Sort change handler: handleTableChange extracts sorter from Ant Table onChange, updates sortConfig state, fires onSortChanged with {sortState: {column: sorter.field, direction: sorter.order === 'ascend' ? 'asc' : 'desc'}}. Data with keys (useMemo): Maps filteredData to add unique key prop (uses existing key/ID/id or falls back to index); Required for Ant Design Table row selection. CSS style injection: Disables all Ant Design animations (animation: none, transition: none, animation-duration: 0s, transition-duration: 0s) on .data-grid-component and descendants to prevent render loop detection. Render output: Wrapper div with .data-grid-component class; If filtering=true: Search input (Ant Input.Search) with value/onChange/allowClear/onClear, placeholder shows filterFields or 'all fields', full width style, fix for search button alignment; Text showing 'Found N matching records' if debouncedFilter exists; Ant Table component with columns (tableColumns), dataSource (dataWithKeys), rowSelection (if enabled), pagination (if enabled), onChange (handleTableChange for sort), scroll (x: 'max-content' only if autoFitColumns=false for horizontal scrolling), loading (true only when data===null), locale with emptyText, size='middle', onRow returns object with onClick handler (fires onRowClick) and cursor style (pointer if onRowClick exists).",
  "dataRequirements": {
    "mode": "views",
    "description": "Component is data-agnostic and works with any entity data passed via props"
  },
  "properties": [
    {
      "name": "entityName",
      "type": "string",
      "description": "Name of the entity being displayed",
      "required": true
    },
    {
      "name": "data",
      "type": "Array<object>",
      "description": "Array of entity objects to display",
      "required": true
    },
    {
      "name": "columns",
      "type": "Array<string | object>",
      "description": "Array of column definitions. Can be simple strings (field names) for default behavior, or column definition objects with properties: field (required), header, render, width, sortable. If not provided, all fields will be displayed. See technical design section for complete ColumnDef structure.",
      "required": false,
      "exampleValue": "[\"Name\", { field: \"Price\", header: \"Unit Price\", render: (v) => `$${v}`, width: \"120px\", sortable: true }]"
    },
    {
      "name": "sorting",
      "type": "boolean",
      "description": "Enable/disable column sorting",
      "required": false,
      "defaultValue": true
    },
    {
      "name": "paging",
      "type": "boolean",
      "description": "Enable/disable pagination",
      "required": false,
      "defaultValue": true
    },
    {
      "name": "pageSize",
      "type": "number",
      "description": "Number of rows per page when paging is enabled",
      "required": false,
      "defaultValue": 10
    },
    {
      "name": "filtering",
      "type": "boolean",
      "description": "Enable/disable text filtering",
      "required": false,
      "defaultValue": true
    },
    {
      "name": "highlightFilterMatches",
      "type": "boolean",
      "description": "Highlight matching text when filtering",
      "required": false,
      "defaultValue": true
    },
    {
      "name": "filterFields",
      "type": "Array<string>",
      "description": "Fields to search when filtering. If not specified, searches all fields",
      "required": false
    },
    {
      "name": "filterDebounceTime",
      "type": "number",
      "description": "Debounce time in ms for filter input",
      "required": false,
      "defaultValue": 300
    },
    {
      "name": "selectionMode",
      "type": "'none' | 'checkbox' | 'radio' | 'row'",
      "description": "Row selection mode: 'none', 'checkbox', 'radio', or 'row'",
      "required": false,
      "defaultValue": "none",
      "possibleValues": ["none", "checkbox", "radio", "row"]
    },
    {
      "name": "longTextDisplay",
      "type": "'truncate' | 'expand' | 'tooltip' | 'wrap' | 'none'",
      "description": "How to display long text that exceeds the threshold: 'truncate' shows ellipsis, 'expand' allows click to expand/collapse, 'tooltip' shows full text on hover, 'wrap' shows all text with wrapping, 'none' uses default behavior",
      "required": false,
      "defaultValue": "expand",
      "possibleValues": ["truncate", "expand", "tooltip", "wrap", "none"]
    },
    {
      "name": "longTextThreshold",
      "type": "number",
      "description": "Number of characters before long text display behavior is triggered",
      "required": false,
      "defaultValue": 100
    },
    {
      "name": "autoFitColumns",
      "type": "boolean",
      "description": "When true, columns auto-fit to container width. When false, columns use fixed widths with horizontal scrolling",
      "required": false,
      "defaultValue": true
    }
  ],
  "events": [
    {
      "name": "rowClick",
      "description": "Fired when a row is clicked",
      "parameters": [
        {
          "name": "record",
          "type": "object",
          "description": "The entity object of the clicked row"
        }
      ]
    },
    {
      "name": "selectionChanged",
      "description": "Fired when row selection changes",
      "parameters": [
        {
          "name": "selectedRows",
          "type": "Array<object>",
          "description": "Array of selected entity objects"
        }
      ]
    },
    {
      "name": "pageChanged",
      "description": "Fired when page changes",
      "parameters": [
        {
          "name": "pageNumber",
          "type": "number",
          "description": "Current page number (0-based)"
        },
        {
          "name": "visibleRows",
          "type": "Array<object>",
          "description": "Array of entity objects visible on current page"
        }
      ]
    },
    {
      "name": "sortChanged",
      "description": "Fired when sort configuration changes",
      "parameters": [
        {
          "name": "sortState",
          "type": "{column: string, direction: 'asc' | 'desc'}",
          "description": "Object with 'column' and 'direction' properties"
        }
      ]
    },
    {
      "name": "filterChanged",
      "description": "Fired when filter changes",
      "parameters": [
        {
          "name": "filterValue",
          "type": "string",
          "description": "Current filter text"
        },
        {
          "name": "matchingData",
          "type": "Array<object>",
          "description": "Array of all matching entity objects"
        }
      ]
    }
  ],
  "libraries": [
    {
      "name": "antd",
      "version": "5.12.0",
      "globalVariable": "antd"
    }
  ],
  "dependencies": [],
  "code": "@file:../code/data-grid.js",
  "exampleUsage": "// Simple column configuration (backward compatible)\n<DataGrid\n  entityName=\"Products\"\n  data={products}\n  columns={['Name', 'SKU', 'Price', 'Category', 'InStock']}\n  onRowClick={handleRowClick}\n/>\n\n// Advanced column configuration with custom rendering\n<DataGrid\n  entityName=\"Products\"\n  data={products}\n  columns={[\n    { field: 'Name', header: 'Product Name', width: '200px' },\n    { \n      field: 'Price',\n      header: 'Unit Price',\n      render: (value) => (\n        <span style={{ fontWeight: 'bold', color: '#059669' }}>\n          {value >= 1000 ? `$${(value/1000).toFixed(1)}K` : `$${value}`}\n        </span>\n      ),\n      width: '120px',\n      sortable: true\n    },\n    {\n      field: 'InStock',\n      header: 'Availability',\n      render: (value) => (\n        <span style={{ \n          padding: '2px 8px',\n          borderRadius: '12px',\n          backgroundColor: value ? '#D1FAE5' : '#FEE2E2',\n          color: value ? '#065F46' : '#991B1B'\n        }}>\n          {value ? 'In Stock' : 'Out of Stock'}\n        </span>\n      ),\n      width: '130px',\n      sortable: false\n    },\n    'Category'  // Simple string still works\n  ]}\n  sorting={true}\n  paging={true}\n  pageSize={20}\n  filtering={true}\n  filterFields={['Name', 'SKU', 'Category']}\n  selectionMode=\"none\"\n  onRowClick={handleRowClick}\n  onSelectionChanged={handleSelection}\n  onPageChanged={handlePageChange}\n  onSortChanged={handleSortChange}\n  onFilterChanged={handleFilterChange}\n/>"
}