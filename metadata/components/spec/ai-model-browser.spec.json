{
  "name": "AIModelBrowser",
  "title": "AI Model Browser",
  "description": "A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications.",
  "type": "dashboard",
  "functionalRequirements": "## AI Model Browser Requirements\n\n### Core Functionality\n- Display AI models in grid or list view with comprehensive information\n- Filter models by Model Type, Status, Model Developer, and Inference Provider\n- View detailed model specifications including context window, token limits, and cost ranking\n- Display all vendors associated with a model (model developers and inference providers)\n- Show prompt run history and usage statistics for selected models\n- Visualize prompt usage with pie charts showing distribution across different prompts\n- Display performance metrics with bar charts showing average execution times\n- Show time series data for model usage over time\n- Support sorting by multiple fields with visual indicators\n- Include search functionality for quick model filtering\n- Provide 'Open' button to trigger OpenEntityRecord callback for detailed editing\n\n### Analytics Features\n- Pie chart visualization of prompt usage distribution\n- Performance bar charts showing average execution times per prompt\n- Time series chart showing model usage trends over last 7 days\n- Summary statistics including total runs, success rates, and token usage\n- Grouped vendor display by type (Model Developer vs Inference Provider)\n\n### UX Considerations\n- Collapsible filter panel with active filter count indicator\n- Sliding details panel for comprehensive model information\n- Inline analytics panel with tabbed views for different visualizations\n- Smooth animations for panel transitions and chart rendering\n- Responsive design adapting to different screen sizes\n- Loading states while fetching data\n- Empty states with helpful messages\n- Visual feedback for hover and selection states\n- Maintain user preferences for view mode and filter state",
  "dataRequirements": {
    "mode": "views",
    "entities": [
      {
        "name": "AI Models",
        "description": "Core AI model definitions and specifications",
        "displayFields": [
          "ID",
          "Name", 
          "APIName",
          "Description",
          "AIModelTypeID",
          "InputTokenLimit",
          "PowerRank",
          "SpeedRank",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt",
          "__mj_UpdatedAt"
        ],
        "filterFields": [
          "AIModelTypeID",
          "IsActive"
        ],
        "sortFields": [
          "Name",
          "InputTokenLimit",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": true,
            "description": "Unique identifier for the AI model"
          },
          {
            "name": "Name",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "System name of the AI model"
          },
          {
            "name": "APIName",
            "sequence": 4,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "API identifier for the model"
          },
          {
            "name": "InputTokenLimit",
            "sequence": 5,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Maximum input token limit"
          },
          {
            "name": "CostRank",
            "sequence": 6,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Relative cost ranking (1-5)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Main list of AI models"
      },
      {
        "name": "MJ: AI Model Vendors",
        "description": "Vendor associations for AI models",
        "displayFields": [
          "ID",
          "ModelID",
          "VendorID",
          "TypeID",
          "Model",
          "Vendor",
          "Type",
          "Status",
          "Priority",
          "APIName",
          "MaxInputTokens",
          "MaxOutputTokens",
          "SupportsStreaming",
          "SupportsEffortLevel"
        ],
        "filterFields": [
          "ModelID",
          "Type",
          "Status"
        ],
        "sortFields": [
          "Vendor",
          "Priority",
          "Type"
        ],
        "fieldMetadata": [
          {
            "name": "ModelID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Reference to AI Model"
          },
          {
            "name": "Vendor",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor name"
          },
          {
            "name": "Type",
            "sequence": 3,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor type (Model Developer or Inference Provider)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Vendor associations for models"
      },
      {
        "name": "AI Model Types",
        "description": "Types/categories of AI models",
        "displayFields": [
          "ID",
          "Name",
          "Description"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Filter dropdown for model types"
      },
      {
        "name": "MJ: AI Prompt Runs",
        "description": "Execution history for AI prompts",
        "displayFields": [
          "ID",
          "PromptID",
          "ModelID",
          "StartTime",
          "EndTime",
          "TotalExecutionTime",
          "InputTokens",
          "OutputTokens",
          "TotalTokens",
          "Status",
          "Error"
        ],
        "filterFields": [
          "ModelID",
          "PromptID",
          "Status"
        ],
        "sortFields": [
          "StartTime",
          "TotalExecutionTime"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Analytics and usage history"
      },
      {
        "name": "AI Prompts",
        "description": "AI prompt definitions",
        "displayFields": [
          "ID",
          "Name",
          "Description",
          "CategoryID"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Enrich prompt runs with names"
      }
    ]
  },
  "technicalDesign": "## Component Architecture\n\n### Root Component (AIModelBrowser)\n- Manages overall state and data loading\n- Coordinates between filter, list, details, and analytics components\n- Handles user preferences and saved settings\n- Manages search and sort state\n\n### Child Components\n1. **AIModelList**: Displays models in grid or list view with vendor information\n2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors\n3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering\n4. **AIModelAnalytics**: Inline analytics panel with charts and statistics\n\n### Data Flow\n- Root component loads all models and vendor associations\n- Filters are applied at the root level and filtered data passed to list\n- Selection in list triggers detail loading and analytics calculation\n- Analytics component processes prompt runs to generate visualizations\n\n### Chart Implementation\n- Pie charts using SVG for prompt usage distribution\n- Bar charts for performance metrics\n- Time series charts for usage trends\n- All charts are responsive and interactive",
  "properties": [],
  "events": [],
  "exampleUsage": "<AIModelBrowser\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>",
  "dependencies": [
    "@include:ai-model-list.spec.json",
    "@include:ai-model-details.spec.json",
    "@include:ai-model-filter.spec.json",
    "@include:ai-model-analytics.spec.json"
  ],
  "libraries": [],
  "code": "function AIModelBrowser({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { AIModelList, AIModelDetails, AIModelFilter, AIModelAnalytics } = components;\n  console.log('=== AIModelBrowser initialized with callbacks:', callbacks);\n  \n  // Initialize state from saved settings where appropriate\n  const [selectedModelId, setSelectedModelId] = useState(savedUserSettings?.selectedModelId);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || 'grid');\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [sortBy, setSortBy] = useState(savedUserSettings?.sortBy || 'Name');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || 'asc');\n  const [filterPanelCollapsed, setFilterPanelCollapsed] = useState(savedUserSettings?.filterPanelCollapsed || false);\n  const [analyticsView, setAnalyticsView] = useState(savedUserSettings?.analyticsView || 'prompts');\n  \n  // Runtime UI state (not persisted)\n  const [models, setModels] = useState([]);\n  const [modelVendors, setModelVendors] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [modelTypes, setModelTypes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [detailsPanelOpen, setDetailsPanelOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Load models on mount and when filters/sort change\n  useEffect(() => {\n    const loadModels = async () => {\n      console.log('=== Loading models with filters:', filters, 'search:', searchQuery);\n      setLoading(true);\n      try {\n        // Build filter string for models\n        let filterParts = [];\n        if (searchQuery) {\n          filterParts.push(`(Name LIKE '%${searchQuery}%' OR APIName LIKE '%${searchQuery}%' OR Description LIKE '%${searchQuery}%')`);\n        }\n        if (filters.modelType) {\n          filterParts.push(`AIModelTypeID = '${filters.modelType}'`);\n        }\n        if (filters.isActive !== undefined) {\n          filterParts.push(`IsActive = '${filters.isActive}'`);\n        }\n        \n        // Load AI Models\n        const modelsResult = await utilities.rv.RunView({\n          EntityName: 'AI Models',\n          Fields: ['ID', 'Name', 'APIName', 'Description', 'AIModelTypeID', 'InputTokenLimit', \n                   'CostRank', 'IsActive', '__mj_CreatedAt', '__mj_UpdatedAt'],\n          OrderBy: `${sortBy} ${sortDirection.toUpperCase()}`,\n          ExtraFilter: filterParts.length > 0 ? filterParts.join(' AND ') : undefined\n        });\n        \n        if (modelsResult?.Success && modelsResult?.Results) {\n          console.log(`Loaded ${modelsResult.Results.length} models`);\n          setModels(modelsResult.Results);\n        } else {\n          console.error('Failed to load models:', modelsResult?.ErrorMessage);\n          setModels([]);\n        }\n        \n        // Load Model Types for filter\n        const typesResult = await utilities.rv.RunView({\n          EntityName: 'AI Model Types',\n          Fields: ['ID', 'Name', 'Description'],\n          OrderBy: 'Name ASC'\n        });\n        \n        if (typesResult?.Success && typesResult?.Results) {\n          setModelTypes(typesResult.Results);\n        }\n        \n        // Load Vendors (from AI Model Vendors)\n        const vendorsResult = await utilities.rv.RunView({\n          EntityName: 'MJ: AI Model Vendors',\n          Fields: ['ID', 'ModelID', 'VendorID', 'TypeID', 'Model', 'Vendor', 'Type', 'Status', 'Priority'],\n          OrderBy: 'Vendor ASC, Model ASC'\n        });\n        \n        if (vendorsResult?.Success && vendorsResult?.Results) {\n          const vendorData = vendorsResult.Results;\n          console.log(`Loaded ${vendorData.length} vendor associations`);\n          setModelVendors(vendorData);\n          \n          // Extract unique vendors\n          const uniqueVendors = [...new Set(vendorData.map(v => v.Vendor))].filter(Boolean);\n          setVendors(uniqueVendors.map(name => ({ Name: name })));\n          console.log(`Found ${uniqueVendors.length} unique vendors`);\n          \n          // Apply vendor-based filters\n          if ((filters.developer || filters.provider) && modelsResult?.Results) {\n            console.log('Applying vendor filters - developer:', filters.developer, 'provider:', filters.provider);\n            let vendorFilteredModels = modelsResult.Results;\n            \n            if (filters.developer) {\n              const developerModelIds = vendorData\n                .filter(v => v.Vendor === filters.developer && v.Type?.includes('Developer'))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => developerModelIds.includes(m.ID));\n              console.log(`After developer filter: ${vendorFilteredModels.length} models`);\n            }\n            \n            if (filters.provider) {\n              const providerModelIds = vendorData\n                .filter(v => v.Vendor === filters.provider && v.Type?.includes('Provider'))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => providerModelIds.includes(m.ID));\n              console.log(`After provider filter: ${vendorFilteredModels.length} models`);\n            }\n            \n            setModels(vendorFilteredModels);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading models:', error);\n        setModels([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadModels();\n  }, [filters, sortBy, sortDirection, searchQuery, utilities.rv]);\n  \n  // Load model details and analytics when selection changes\n  useEffect(() => {\n    const loadModelDetails = async () => {\n      if (!selectedModelId) {\n        setPromptRuns([]);\n        return;\n      }\n      \n      console.log('=== Loading prompt runs for model:', selectedModelId);\n      \n      try {\n        // Use the correct entity name for prompt runs: MJ: AI Prompt Runs\n        console.log('Loading prompt runs with entity: MJ: AI Prompt Runs');\n        \n        const promptRunsResult = await utilities.rv.RunView({\n          EntityName: 'MJ: AI Prompt Runs',\n          Fields: ['ID', 'PromptID', 'ModelID', 'RunAt', 'CompletedAt', 'ExecutionTimeMS', \n                   'TokensPrompt', 'TokensCompletion', 'TokensUsed', 'Success', 'ErrorMessage'],\n          OrderBy: 'RunAt DESC',\n            ExtraFilter: `ModelID = '${selectedModelId}'`,\n            MaxRows: 1000\n        });\n        \n        if (promptRunsResult?.Success && promptRunsResult?.Results) {\n          console.log(`Found ${promptRunsResult.Results.length} prompt runs`);\n          // Enrich with prompt names\n          const promptIds = [...new Set(promptRunsResult.Results.map(r => r.PromptID))].filter(Boolean);\n          \n          if (promptIds.length > 0) {\n            const promptsResult = await utilities.rv.RunView({\n              EntityName: 'AI Prompts',\n              Fields: ['ID', 'Name', 'Description', 'CategoryID'],\n              ExtraFilter: `ID IN ('${promptIds.join(\"','\")}')`\n            });\n            \n            const promptMap = {};\n            if (promptsResult?.Success && promptsResult?.Results) {\n              promptsResult.Results.forEach(p => {\n                promptMap[p.ID] = p;\n              });\n            }\n            \n            // Enrich prompt runs with prompt names and convert fields for compatibility\n            const enrichedRuns = promptRunsResult.Results.map(run => ({\n              ...run,\n              PromptName: promptMap[run.PromptID]?.Name || 'Unknown Prompt',\n              PromptDescription: promptMap[run.PromptID]?.Description,\n              // Map fields for analytics component compatibility\n              StartTime: run.RunAt,\n              EndTime: run.CompletedAt,\n              TotalExecutionTime: run.ExecutionTimeMS,\n              Status: run.Success ? 'Success' : 'Failed',\n              Error: run.ErrorMessage,\n              TotalTokens: run.TokensUsed\n            }));\n            \n            console.log(`Enriched ${enrichedRuns.length} runs with prompt names`);\n            setPromptRuns(enrichedRuns);\n          } else {\n            setPromptRuns(promptRunsResult.Results);\n          }\n        } else {\n          console.log('No prompt runs found:', promptRunsResult?.ErrorMessage);\n          setPromptRuns([]);\n        }\n      } catch (error) {\n        console.error('Error loading model details:', error);\n        setPromptRuns([]);\n      }\n    };\n    \n    loadModelDetails();\n  }, [selectedModelId, utilities.rv]);\n  \n  // Handle model selection\n  const handleSelectModel = useCallback((modelId) => {\n    setSelectedModelId(modelId);\n    setDetailsPanelOpen(true);\n    \n    // Save user preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedModelId: modelId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode) => {\n    setViewMode(mode);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      viewMode: mode\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    \n    // Save filter preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle sort changes\n  const handleSortChange = useCallback((newSortBy, newSortDirection) => {\n    setSortBy(newSortBy);\n    setSortDirection(newSortDirection);\n    \n    // Save sort preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortBy: newSortBy,\n      sortDirection: newSortDirection\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter panel toggle\n  const handleToggleFilter = useCallback(() => {\n    const newCollapsed = !filterPanelCollapsed;\n    setFilterPanelCollapsed(newCollapsed);\n    \n    // Save collapsed state\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterPanelCollapsed: newCollapsed\n    });\n  }, [filterPanelCollapsed, savedUserSettings, onSaveUserSettings]);\n  \n  // Handle analytics view change\n  const handleAnalyticsViewChange = useCallback((view) => {\n    setAnalyticsView(view);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      analyticsView: view\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle opening model record\n  const handleOpenRecord = useCallback((modelName) => {\n    console.log('Opening AI Model record:', modelName);\n    if (callbacks?.OpenEntityRecord && modelName) {\n      callbacks.OpenEntityRecord('AI Models', [{ FieldName: 'Name', Value: modelName }]);\n    }\n  }, [callbacks]);\n  \n  // Handle closing details panel\n  const handleCloseDetails = useCallback(() => {\n    setDetailsPanelOpen(false);\n  }, []);\n  \n  // Handle search\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n  }, []);\n  \n  // Get selected model object\n  const selectedModel = models.find(m => m.ID === selectedModelId);\n  \n  // Get vendors for selected model\n  const selectedModelVendors = modelVendors.filter(v => v.ModelID === selectedModelId);\n  \n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Loading state\n  if (loading && models.length === 0) {\n    return (\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading AI models...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      display: 'flex',\n      height: '100vh',\n      backgroundColor: styles.colors.background,\n      overflow: 'hidden'\n    }}>\n      {/* Filter Panel */}\n      {AIModelFilter && (\n        <AIModelFilter\n          filters={filters}\n          onFilterChange={handleFilterChange}\n          modelTypes={modelTypes}\n          vendors={vendors}\n          isCollapsed={filterPanelCollapsed}\n          onToggleCollapse={handleToggleFilter}\n          savedUserSettings={savedUserSettings?.filterPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            filterPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid ${styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: styles.spacing.md\n          }}>\n            <h1 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.text\n            }}>\n              AI Model Browser\n            </h1>\n            \n            {/* View Mode Toggle */}\n            <div style={{\n              display: 'flex',\n              gap: styles.spacing.sm,\n              alignItems: 'center'\n            }}>\n              <span style={{\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.textSecondary\n              }}>\n                View:\n              </span>\n              <button\n                onClick={() => handleViewModeChange('grid')}\n                style={{\n                  padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n                  backgroundColor: viewMode === 'grid' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === 'grid' ? 'white' : styles.colors.text,\n                  border: `1px solid ${styles.colors.border}`,\n                  borderRadius: getBorderRadius('sm'),\n                  cursor: 'pointer',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Grid\n              </button>\n              <button\n                onClick={() => handleViewModeChange('list')}\n                style={{\n                  padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n                  backgroundColor: viewMode === 'list' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === 'list' ? 'white' : styles.colors.text,\n                  border: `1px solid ${styles.colors.border}`,\n                  borderRadius: getBorderRadius('sm'),\n                  cursor: 'pointer',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                List\n              </button>\n            </div>\n          </div>\n          \n          {/* Search Bar */}\n          <div style={{\n            display: 'flex',\n            gap: styles.spacing.md\n          }}>\n            <input\n              type=\"text\"\n              placeholder=\"Search AI models...\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              style={{\n                flex: 1,\n                padding: styles.spacing.md,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid ${styles.colors.border}`,\n                borderRadius: getBorderRadius('sm'),\n                backgroundColor: styles.colors.background\n              }}\n            />\n            {searchQuery && (\n              <button\n                onClick={() => handleSearch('')}\n                style={{\n                  padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n                  backgroundColor: styles.colors.surfaceHover || styles.colors.surface,\n                  color: styles.colors.text,\n                  border: `1px solid ${styles.colors.border}`,\n                  borderRadius: getBorderRadius('sm'),\n                  cursor: 'pointer',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Model List and Analytics Split View */}\n        <div style={{\n          flex: 1,\n          display: 'flex',\n          overflow: 'hidden'\n        }}>\n          {/* Model List */}\n          <div style={{\n            flex: 1,\n            overflow: 'auto',\n            padding: styles.spacing.lg\n          }}>\n            {AIModelList && (\n              <AIModelList\n                models={models}\n                modelVendors={modelVendors}\n                viewMode={viewMode}\n                selectedModelId={selectedModelId}\n                onSelectModel={handleSelectModel}\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n                onSortChange={handleSortChange}\n                savedUserSettings={savedUserSettings?.modelList}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  modelList: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            )}\n            \n            {/* Empty State */}\n            {models.length === 0 && !loading && (\n              <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n                padding: styles.spacing.xxl || styles.spacing.xl,\n                color: styles.colors.textSecondary\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xl,\n                  marginBottom: styles.spacing.md\n                }}>\n                  No AI models found\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {searchQuery || Object.keys(filters).length > 0\n                    ? 'Try adjusting your filters or search query'\n                    : 'No AI models are available'}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Analytics Panel */}\n          {selectedModel && AIModelAnalytics && (\n            <div style={{\n              width: '400px',\n              borderLeft: `1px solid ${styles.colors.border}`,\n              overflow: 'hidden',\n              display: 'flex',\n              flexDirection: 'column'\n            }}>\n              <AIModelAnalytics\n                model={selectedModel}\n                promptRuns={promptRuns}\n                view={analyticsView}\n                onViewChange={handleAnalyticsViewChange}\n                savedUserSettings={savedUserSettings?.analytics}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  analytics: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Details Panel */}\n      {AIModelDetails && (\n        <AIModelDetails\n          model={selectedModel}\n          vendors={selectedModelVendors}\n          promptRuns={promptRuns}\n          isOpen={detailsPanelOpen}\n          onClose={handleCloseDetails}\n          onOpenRecord={() => handleOpenRecord(selectedModel?.Name)}\n          savedUserSettings={savedUserSettings?.detailsPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            detailsPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n    </div>\n  );\n}"
}