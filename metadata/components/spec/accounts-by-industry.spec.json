{
  "name": "AccountsByIndustry",
  "title": "Accounts by Industry",
  "description": "Interactive pie chart showing distribution of CRM accounts by industry with drill-down capability to view detailed account lists and individual account information.",
  "type": "dashboard",
  "location": "embedded",
  "functionalRequirements": "## Accounts by Industry Dashboard\n\n### Core Functionality\n- Display an interactive pie chart showing account distribution across industries\n- Calculate and show percentages for each industry segment\n- Support click-to-filter: clicking a pie slice filters the account list below\n- Display filtered account list with key information (name, revenue, status)\n- Enable row selection to view detailed account information in a slide-in panel\n- Provide sorting capabilities on all columns (client-side)\n- Implement pagination for large datasets (server-side via RunView)\n- Include an 'Open' button on account details to trigger OpenEntityRecord callback\n- Remember user's last selected industry and sort preferences\n\n### Visual Features\n- Smooth hover animations on pie slices with tooltips\n- Highlighted state for selected pie slice\n- Color-coded legend with industry names and counts\n- Responsive layout adapting to different screen sizes\n- Loading states during data fetching\n- Empty states with helpful messages\n- Smooth slide-in animation for detail panel\n\n### Interactive Elements\n- Click pie slice to select/deselect and filter accounts\n- Click legend items to toggle slice visibility\n- Sort columns by clicking headers\n- Select account rows to view details\n- Close detail panel via X button or clicking outside\n- Pagination controls for navigating large datasets",
  "@include.data": "../shared/crm-accounts-data.json",
  "technicalDesign": "## Technical Architecture\n\n### Component Structure\n- **Root Component (AccountsByIndustry)**: Manages overall state and data loading\n- **PieChart (inline)**: Chart.js-based interactive pie visualization\n- **AccountList (inline)**: Filtered, sortable table with pagination\n- **AccountDetails (inline)**: Sliding panel with comprehensive account info\n\n### State Management\n- Selected industry (persisted in savedUserSettings)\n- Sort configuration (field, direction) (persisted)\n- Current page number\n- Selected account ID\n- Detail panel visibility\n- Loading states for async operations\n\n### Data Flow\n1. Load all accounts via RunView on mount\n2. Group accounts by Industry field client-side\n3. Calculate percentages and prepare chart data\n4. Render pie chart with Chart.js\n5. Filter account list based on selected slice\n6. Load account details when row selected\n7. Persist user preferences via onSaveUserSettings\n\n### Performance Optimizations\n- Use React.memo for chart component\n- Implement useMemo for data grouping\n- Client-side filtering/sorting to reduce server calls\n- Virtual scrolling for very large lists (future)",
  "properties": [
    {
      "name": "maxIndustries",
      "type": "number",
      "required": false,
      "description": "Maximum number of industries to show in pie chart (others grouped)",
      "defaultValue": 10
    },
    {
      "name": "showOthers",
      "type": "boolean",
      "required": false,
      "description": "Whether to group small segments into 'Others' category",
      "defaultValue": true
    },
    {
      "name": "pageSize",
      "type": "number",
      "required": false,
      "description": "Number of accounts to show per page in the list",
      "defaultValue": 10
    },
    {
      "name": "colorScheme",
      "type": "string",
      "required": false,
      "description": "Color palette for the pie chart (default, vibrant, pastel)",
      "defaultValue": "default"
    }
  ],
  "dependencies": [
    "@include:accounts-by-industry-chart.spec.json",
    "@include:accounts-by-industry-list.spec.json",
    "@include:accounts-by-industry-details.spec.json"
  ],
  "exampleUsage": "<AccountsByIndustry \n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n  maxIndustries={8}\n  pageSize={15}\n  colorScheme=\"vibrant\"\n/>",
  "code": "@file:../code/accounts-by-industry.js"
}
