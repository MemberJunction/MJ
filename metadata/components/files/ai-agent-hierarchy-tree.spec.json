{
  "name": "AIAgentHierarchyTree",
  "title": "AI Agent Hierarchy Tree",
  "description": "Interactive tree visualization showing agent parent-child relationships, sub-agent orchestration patterns, and execution flow with real-time status indicators",
  "type": "chart",
  "functionalRequirements": "Display hierarchical agent relationships as an interactive tree with expandable nodes, execution counts, success rates per node, and real-time status indicators for active runs",
  "dataRequirements": null,
  "technicalDesign": "SVG-based tree visualization with D3-style layouts, interactive node expansion, color-coded status indicators, and drill-down navigation to agent details",
  "properties": [
    {"name": "agents", "type": "array", "required": true, "description": "Array of agent objects with ParentID relationships"},
    {"name": "agentRuns", "type": "array", "required": true, "description": "Array of agent run objects for status and metrics"},
    {"name": "agentRelationships", "type": "array", "required": false, "description": "Array of explicit agent relationships"},
    {"name": "selectedAgentId", "type": "string", "required": false, "description": "Currently selected agent for highlighting"},
    {"name": "onSelectAgent", "type": "function", "required": true, "description": "Callback when agent node is selected"}
  ],
  "events": [],
  "exampleUsage": "<AIAgentHierarchyTree ... />",
  "code": "function AIAgentHierarchyTree({ \n  agents,\n  agentRuns,\n  agentRelationships,\n  selectedAgentId,\n  onSelectAgent,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  const [expandedNodes, setExpandedNodes] = useState(savedUserSettings?.expandedNodes || new Set());\n  const [hoveredNode, setHoveredNode] = useState(null);\n  \n  // Helper function to get border radius\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Build tree structure from agents\n  const buildTree = useMemo(() => {\n    const agentMap = new Map();\n    const rootNodes = [];\n    \n    // Create map of agents\n    agents.forEach(agent => {\n      agentMap.set(agent.ID, {\n        ...agent,\n        children: [],\n        metrics: {\n          totalRuns: 0,\n          successfulRuns: 0,\n          activeRuns: 0,\n          avgExecutionTime: 0\n        }\n      });\n    });\n    \n    // Calculate metrics for each agent\n    agentRuns.forEach(run => {\n      const agent = agentMap.get(run.AgentID);\n      if (agent) {\n        agent.metrics.totalRuns++;\n        if (run.Success) agent.metrics.successfulRuns++;\n        if (run.Status === 'Running') agent.metrics.activeRuns++;\n        agent.metrics.avgExecutionTime += (run.ExecutionTimeMS || 0);\n      }\n    });\n    \n    // Finalize average execution times\n    agentMap.forEach(agent => {\n      if (agent.metrics.totalRuns > 0) {\n        agent.metrics.avgExecutionTime = agent.metrics.avgExecutionTime / agent.metrics.totalRuns;\n      }\n    });\n    \n    // Build parent-child relationships\n    agents.forEach(agent => {\n      const node = agentMap.get(agent.ID);\n      if (agent.ParentID) {\n        const parent = agentMap.get(agent.ParentID);\n        if (parent) {\n          parent.children.push(node);\n        } else {\n          rootNodes.push(node);\n        }\n      } else {\n        rootNodes.push(node);\n      }\n    });\n    \n    // Add relationships from explicit table\n    if (agentRelationships) {\n      agentRelationships.forEach(rel => {\n        const parent = agentMap.get(rel.AgentID);\n        const child = agentMap.get(rel.SubAgentID);\n        if (parent && child && !parent.children.includes(child)) {\n          parent.children.push(child);\n        }\n      });\n    }\n    \n    // Sort children by execution order or name\n    agentMap.forEach(agent => {\n      agent.children.sort((a, b) => {\n        const relA = agentRelationships?.find(r => r.AgentID === agent.ID && r.SubAgentID === a.ID);\n        const relB = agentRelationships?.find(r => r.AgentID === agent.ID && r.SubAgentID === b.ID);\n        if (relA?.ExecutionOrder && relB?.ExecutionOrder) {\n          return relA.ExecutionOrder - relB.ExecutionOrder;\n        }\n        return (a.Name || '').localeCompare(b.Name || '');\n      });\n    });\n    \n    return rootNodes;\n  }, [agents, agentRuns, agentRelationships]);\n  \n  // Toggle node expansion\n  const toggleExpanded = useCallback((nodeId) => {\n    const newExpanded = new Set(expandedNodes);\n    if (newExpanded.has(nodeId)) {\n      newExpanded.delete(nodeId);\n    } else {\n      newExpanded.add(nodeId);\n    }\n    setExpandedNodes(newExpanded);\n    onSaveUserSettings?.({ ...savedUserSettings, expandedNodes: Array.from(newExpanded) });\n  }, [expandedNodes, savedUserSettings, onSaveUserSettings]);\n  \n  // Get node color based on metrics\n  const getNodeColor = (node) => {\n    if (node.metrics.activeRuns > 0) return styles.colors.success || styles.colors.primary;\n    if (node.metrics.totalRuns === 0) return styles.colors.textSecondary;\n    const successRate = node.metrics.successfulRuns / node.metrics.totalRuns;\n    if (successRate >= 0.9) return styles.colors.success || styles.colors.primary;\n    if (successRate >= 0.7) return styles.colors.warning || styles.colors.secondary;\n    return styles.colors.error || styles.colors.secondary;\n  };\n  \n  // Render tree node\n  const renderNode = (node, level = 0) => {\n    const isExpanded = expandedNodes.has(node.ID);\n    const isSelected = node.ID === selectedAgentId;\n    const isHovered = node.ID === hoveredNode;\n    const hasChildren = node.children && node.children.length > 0;\n    const nodeColor = getNodeColor(node);\n    const successRate = node.metrics.totalRuns > 0 \n      ? (node.metrics.successfulRuns / node.metrics.totalRuns * 100).toFixed(0)\n      : 0;\n    \n    return (\n      <div key={node.ID} style={{ marginLeft: level > 0 ? '24px' : 0 }}>\n        <div\n          onClick={() => onSelectAgent(node.ID)}\n          onMouseEnter={() => setHoveredNode(node.ID)}\n          onMouseLeave={() => setHoveredNode(null)}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n            marginBottom: styles.spacing.xs,\n            backgroundColor: isSelected ? styles.colors.primary + '20' : \n                           isHovered ? styles.colors.surface : 'transparent',\n            borderRadius: getBorderRadius('sm'),\n            cursor: 'pointer',\n            transition: 'all 0.2s',\n            border: isSelected ? `2px solid ${styles.colors.primary}` : '2px solid transparent'\n          }}\n        >\n          {/* Expand/Collapse Icon */}\n          {hasChildren && (\n            <div\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleExpanded(node.ID);\n              }}\n              style={{\n                marginRight: styles.spacing.sm,\n                cursor: 'pointer',\n                width: '16px',\n                height: '16px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\">\n                <path\n                  d={isExpanded ? 'M2 4l4 4 4-4' : 'M4 2l4 4-4 4'}\n                  stroke={styles.colors.text}\n                  strokeWidth=\"2\"\n                  fill=\"none\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                />\n              </svg>\n            </div>\n          )}\n          \n          {/* Connection Line */}\n          {level > 0 && (\n            <div style={{\n              position: 'absolute',\n              left: level * 24 - 12,\n              top: '50%',\n              width: '12px',\n              height: '1px',\n              backgroundColor: styles.colors.border\n            }} />\n          )}\n          \n          {/* Status Indicator */}\n          <div style={{\n            width: '8px',\n            height: '8px',\n            borderRadius: '50%',\n            backgroundColor: nodeColor,\n            marginRight: styles.spacing.sm,\n            flexShrink: 0,\n            animation: node.metrics.activeRuns > 0 ? 'pulse 2s infinite' : 'none'\n          }} />\n          \n          {/* Agent Name */}\n          <div style={{ flex: 1, minWidth: 0 }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: isSelected ? styles.typography.fontWeight?.semibold : styles.typography.fontWeight?.medium || '500',\n              color: styles.colors.text,\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap'\n            }}>\n              {node.Name}\n            </div>\n            {node.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n                marginTop: '2px'\n              }}>\n                {node.Description}\n              </div>\n            )}\n          </div>\n          \n          {/* Metrics Badge */}\n          <div style={{\n            display: 'flex',\n            gap: styles.spacing.xs,\n            alignItems: 'center',\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n          }}>\n            {node.metrics.activeRuns > 0 && (\n              <div style={{\n                padding: `2px ${styles.spacing.sm}`,\n                backgroundColor: styles.colors.success || styles.colors.primary,\n                color: 'white',\n                borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                fontWeight: styles.typography.fontWeight?.semibold || '600'\n              }}>\n                {node.metrics.activeRuns} active\n              </div>\n            )}\n            \n            {node.metrics.totalRuns > 0 && (\n              <>\n                <div style={{\n                  padding: `2px ${styles.spacing.sm}`,\n                  backgroundColor: styles.colors.surface,\n                  color: styles.colors.text,\n                  borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                  border: `1px solid ${styles.colors.border}`\n                }}>\n                  {node.metrics.totalRuns} runs\n                </div>\n                \n                <div style={{\n                  padding: `2px ${styles.spacing.sm}`,\n                  backgroundColor: successRate >= 90 ? styles.colors.success + '20' :\n                                 successRate >= 70 ? styles.colors.warning + '20' :\n                                 styles.colors.error + '20',\n                  color: successRate >= 90 ? styles.colors.success :\n                        successRate >= 70 ? styles.colors.warning :\n                        styles.colors.error,\n                  borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                  fontWeight: styles.typography.fontWeight?.medium || '500'\n                }}>\n                  {successRate}%\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        \n        {/* Render Children */}\n        {hasChildren && isExpanded && (\n          <div style={{\n            borderLeft: `1px solid ${styles.colors.border}`,\n            marginLeft: '8px',\n            paddingLeft: '0'\n          }}>\n            {node.children.map(child => renderNode(child, level + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: '100%',\n      padding: styles.spacing.lg,\n      backgroundColor: styles.colors.background,\n      overflow: 'auto'\n    }}>\n      <h3 style={{\n        margin: 0,\n        marginBottom: styles.spacing.md,\n        fontSize: styles.typography.fontSize.lg,\n        fontWeight: styles.typography.fontWeight?.semibold || '600',\n        color: styles.colors.text\n      }}>\n        Agent Hierarchy\n      </h3>\n      \n      {/* Legend */}\n      <div style={{\n        display: 'flex',\n        gap: styles.spacing.md,\n        marginBottom: styles.spacing.lg,\n        padding: styles.spacing.sm,\n        backgroundColor: styles.colors.surface,\n        borderRadius: getBorderRadius('sm'),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        color: styles.colors.textSecondary\n      }}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.xs }}>\n          <div style={{\n            width: '8px',\n            height: '8px',\n            borderRadius: '50%',\n            backgroundColor: styles.colors.success || styles.colors.primary\n          }} />\n          <span>Active/High Success</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.xs }}>\n          <div style={{\n            width: '8px',\n            height: '8px',\n            borderRadius: '50%',\n            backgroundColor: styles.colors.warning || styles.colors.secondary\n          }} />\n          <span>Medium Success</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.xs }}>\n          <div style={{\n            width: '8px',\n            height: '8px',\n            borderRadius: '50%',\n            backgroundColor: styles.colors.error || styles.colors.secondary\n          }} />\n          <span>Low Success</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.xs }}>\n          <div style={{\n            width: '8px',\n            height: '8px',\n            borderRadius: '50%',\n            backgroundColor: styles.colors.textSecondary\n          }} />\n          <span>No Runs</span>\n        </div>\n      </div>\n      \n      {/* Tree */}\n      <div>\n        {buildTree.map(node => renderNode(node))}\n      </div>\n      \n      {buildTree.length === 0 && (\n        <div style={{\n          padding: styles.spacing.xl,\n          textAlign: 'center',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No agents found\n        </div>\n      )}\n      \n      {/* CSS for pulse animation */}\n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}