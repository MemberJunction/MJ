{
  "name": "AIModelBrowser",
  "title": "AI Model Browser",
  "description": "A comprehensive AI model browser with filtering by developers and inference providers, prompt usage analytics with pie charts, and detailed model specifications",
  "type": "dashboard",
  "functionalRequirements": "## AI Model Browser Requirements\n\n### Core Functionality\n- Display AI models in grid or list view with comprehensive information\n- Filter models by Model Type, Status, Model Developer, and Inference Provider\n- View detailed model specifications including context window, token limits, and cost ranking\n- Display all vendors associated with a model (model developers and inference providers)\n- Show prompt run history and usage statistics for selected models\n- Visualize prompt usage with pie charts showing distribution across different prompts\n- Display performance metrics with bar charts showing average execution times\n- Show time series data for model usage over time\n- Support sorting by multiple fields with visual indicators\n- Include search functionality for quick model filtering\n- Provide 'Open' button to trigger OpenEntityRecord callback for detailed editing\n\n### Analytics Features\n- Pie chart visualization of prompt usage distribution\n- Performance bar charts showing average execution times per prompt\n- Time series chart showing model usage trends over last 7 days\n- Summary statistics including total runs, success rates, and token usage\n- Grouped vendor display by type (Model Developer vs Inference Provider)\n\n### UX Considerations\n- Collapsible filter panel with active filter count indicator\n- Sliding details panel for comprehensive model information\n- Inline analytics panel with tabbed views for different visualizations\n- Smooth animations for panel transitions and chart rendering\n- Responsive design adapting to different screen sizes\n- Loading states while fetching data\n- Empty states with helpful messages\n- Visual feedback for hover and selection states\n- Maintain user preferences for view mode and filter state",
  "dataRequirements": {
    "mode": "views",
    "entities": [
      {
        "name": "AI Models",
        "description": "Core AI model definitions and specifications",
        "displayFields": [
          "ID",
          "Name",
          "APIName",
          "Description",
          "AIModelTypeID",
          "InputTokenLimit",
          "PowerRank",
          "SpeedRank",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt",
          "__mj_UpdatedAt"
        ],
        "filterFields": [
          "AIModelTypeID",
          "IsActive"
        ],
        "sortFields": [
          "Name",
          "InputTokenLimit",
          "CostRank",
          "IsActive",
          "__mj_CreatedAt"
        ],
        "fieldMetadata": [
          {
            "name": "ID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": true,
            "description": "Unique identifier for the AI model"
          },
          {
            "name": "Name",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "System name of the AI model"
          },
          {
            "name": "APIName",
            "sequence": 4,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "API identifier for the model"
          },
          {
            "name": "InputTokenLimit",
            "sequence": 5,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Maximum input token limit"
          },
          {
            "name": "CostRank",
            "sequence": 6,
            "defaultInView": true,
            "type": "int",
            "allowsNull": true,
            "isPrimaryKey": false,
            "description": "Relative cost ranking (1-5)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Main list of AI models"
      },
      {
        "name": "MJ: AI Model Vendors",
        "description": "Vendor associations for AI models",
        "displayFields": [
          "ID",
          "ModelID",
          "VendorID",
          "TypeID",
          "Model",
          "Vendor",
          "Type",
          "Status",
          "Priority",
          "APIName",
          "MaxInputTokens",
          "MaxOutputTokens",
          "SupportsStreaming",
          "SupportsEffortLevel"
        ],
        "filterFields": [
          "ModelID",
          "Type",
          "Status"
        ],
        "sortFields": [
          "Vendor",
          "Priority",
          "Type"
        ],
        "fieldMetadata": [
          {
            "name": "ModelID",
            "sequence": 1,
            "defaultInView": false,
            "type": "uniqueidentifier",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Reference to AI Model"
          },
          {
            "name": "Vendor",
            "sequence": 2,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor name"
          },
          {
            "name": "Type",
            "sequence": 3,
            "defaultInView": true,
            "type": "nvarchar",
            "allowsNull": false,
            "isPrimaryKey": false,
            "description": "Vendor type (Model Developer or Inference Provider)"
          }
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Vendor associations for models"
      },
      {
        "name": "AI Model Types",
        "description": "Types/categories of AI models",
        "displayFields": [
          "ID",
          "Name",
          "Description"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Filter dropdown for model types"
      },
      {
        "name": "MJ: AI Prompt Runs",
        "description": "Execution history for AI prompts",
        "displayFields": [
          "ID",
          "PromptID",
          "ModelID",
          "StartTime",
          "EndTime",
          "TotalExecutionTime",
          "InputTokens",
          "OutputTokens",
          "TotalTokens",
          "Status",
          "Error"
        ],
        "filterFields": [
          "ModelID",
          "PromptID",
          "Status"
        ],
        "sortFields": [
          "StartTime",
          "TotalExecutionTime"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Analytics and usage history"
      },
      {
        "name": "AI Prompts",
        "description": "AI prompt definitions",
        "displayFields": [
          "ID",
          "Name",
          "Description",
          "CategoryID"
        ],
        "filterFields": [],
        "sortFields": [
          "Name"
        ],
        "permissions": [
          "read"
        ],
        "usageContext": "Enrich prompt runs with names"
      }
    ]
  },
  "technicalDesign": "## Component Architecture\n\n### Root Component (AIModelBrowser)\n- Manages overall state and data loading\n- Coordinates between filter, list, details, and analytics components\n- Handles user preferences and saved settings\n- Manages search and sort state\n\n### Child Components\n1. **AIModelList**: Displays models in grid or list view with vendor information\n2. **AIModelDetails**: Sliding panel showing comprehensive model information and vendors\n3. **AIModelFilter**: Collapsible filter panel for model type, status, and vendor filtering\n4. **AIModelAnalytics**: Inline analytics panel with charts and statistics\n\n### Data Flow\n- Root component loads all models and vendor associations\n- Filters are applied at the root level and filtered data passed to list\n- Selection in list triggers detail loading and analytics calculation\n- Analytics component processes prompt runs to generate visualizations\n\n### Chart Implementation\n- Pie charts using SVG for prompt usage distribution\n- Bar charts for performance metrics\n- Time series charts for usage trends\n- All charts are responsive and interactive",
  "properties": [],
  "events": [],
  "exampleUsage": "<AIModelBrowser\n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n/>",
  "dependencies": [
    {
      "name": "AIModelList",
      "title": "AI Model List",
      "description": "Displays AI models in grid or list view with vendor information and sorting",
      "type": "table",
      "functionalRequirements": "Display models with vendor counts, support grid and list views, handle sorting and selection",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "models", "type": "array", "required": true, "description": "Array of AI model objects to display"},
        {"name": "modelVendors", "type": "array", "required": true, "description": "Array of model vendor associations"},
        {"name": "viewMode", "type": "string", "required": true, "description": "Display mode - 'grid' or 'list'"},
        {"name": "selectedModelId", "type": "string", "required": false, "description": "ID of the currently selected model"},
        {"name": "sortBy", "type": "string", "required": false, "description": "Field to sort by"},
        {"name": "sortDirection", "type": "string", "required": false, "description": "Sort direction - 'asc' or 'desc'"}
      ],
      "events": [
        {"name": "onSelectModel", "description": "Fired when a model is selected", "parameters": [{"name": "modelId", "type": "string", "description": "ID of the selected model"}]},
        {"name": "onSortChange", "description": "Fired when sort criteria changes", "parameters": [{"name": "sortBy", "type": "string", "description": "Field to sort by"}, {"name": "sortDirection", "type": "string", "description": "Sort direction"}]}
      ],
      "exampleUsage": "<AIModelList ... />",
      "code": "function AIModelList({ \n  models, \n  modelVendors,\n  viewMode, \n  selectedModelId, \n  onSelectModel, \n  sortBy, \n  sortDirection, \n  onSortChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Get vendor info for a model\n  const getModelVendorInfo = useCallback((modelId) => {\n    const vendors = modelVendors.filter(v => v.ModelID === modelId);\n    const inferenceProviders = vendors.filter(v => v.Type === 'Inference Provider');\n    const modelDeveloper = vendors.find(v => v.Type === 'Model Developer');\n    \n    return {\n      inferenceProviders,\n      modelDeveloper,\n      vendorCount: vendors.length\n    };\n  }, [modelVendors]);\n  \n  // Handle sort column click\n  const handleSort = useCallback((field) => {\n    if (sortBy === field) {\n      onSortChange?.(field, sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      onSortChange?.(field, 'asc');\n    }\n  }, [sortBy, sortDirection, onSortChange]);\n  \n  // Render sort indicator\n  const renderSortIndicator = (field) => {\n    if (sortBy !== field) return null;\n    \n    return (\n      <span style={{\n        marginLeft: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {sortDirection === 'asc' ? '\u25b2' : '\u25bc'}\n      </span>\n    );\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      'Active': styles.colors.success || styles.colors.primary,\n      'Inactive': styles.colors.warning || styles.colors.secondary,\n      'Deprecated': styles.colors.error || styles.colors.secondary,\n      'Preview': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: 'inline-block',\n        padding: `${styles.spacing.xs} ${styles.spacing.sm}`,\n        backgroundColor: color + '15',\n        color: color,\n        borderRadius: getBorderRadius('sm'),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || '500'\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render cost rank\n  const renderCostRank = (rank) => {\n    if (rank == null) return '-';\n    \n    const maxStars = 5;\n    const filledStars = Math.min(rank, maxStars);\n    \n    return (\n      <span style={{\n        color: styles.colors.warning || styles.colors.secondary,\n        fontSize: styles.typography.fontSize.sm\n      }}>\n        {'$'.repeat(filledStars)}\n        <span style={{ opacity: 0.3 }}>\n          {'$'.repeat(maxStars - filledStars)}\n        </span>\n      </span>\n    );\n  };\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return '-';\n    if (tokens >= 1000000) return `${(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `${(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Grid view rendering\n  const renderGridView = () => (\n    <div style={{\n      display: 'grid',\n      gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))',\n      gap: styles.spacing.lg\n    }}>\n      {models.map((model) => {\n        const vendorInfo = getModelVendorInfo(model.ID);\n        const isSelected = model.ID === selectedModelId;\n        \n        return (\n          <div\n            key={model.ID}\n            onClick={() => onSelectModel?.(model.ID)}\n            style={{\n              backgroundColor: styles.colors.surface,\n              borderRadius: getBorderRadius('md'),\n              padding: styles.spacing.lg,\n              cursor: 'pointer',\n              transition: 'all 0.2s',\n              border: isSelected \n                ? `2px solid ${styles.colors.primary}`\n                : `1px solid ${styles.colors.border}`,\n              boxShadow: isSelected \n                ? `0 4px 12px ${styles.colors.shadow || 'rgba(0, 0, 0, 0.1)'}`\n                : 'none'\n            }}\n            onMouseEnter={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.primary;\n                e.currentTarget.style.boxShadow = `0 2px 8px ${styles.colors.shadow || 'rgba(0, 0, 0, 0.05)'}`;\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (!isSelected) {\n                e.currentTarget.style.borderColor = styles.colors.border;\n                e.currentTarget.style.boxShadow = 'none';\n              }\n            }}\n          >\n            {/* Model Header */}\n            <div style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'flex-start',\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{ flex: 1 }}>\n                <h3 style={{\n                  margin: 0,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {model.Name}\n                </h3>\n                {model.APIName && (\n                  <div style={{\n                    fontSize: styles.typography.fontSize.sm,\n                    color: styles.colors.textSecondary,\n                    fontFamily: 'monospace'\n                  }}>\n                    {model.APIName}\n                  </div>\n                )}\n              </div>\n              {renderStatusBadge(model.IsActive ? 'Active' : 'Inactive')}\n            </div>\n            \n            {/* Model Description */}\n            {model.Description && (\n              <div style={{\n                fontSize: styles.typography.fontSize.sm,\n                color: styles.colors.textSecondary,\n                marginBottom: styles.spacing.md,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                display: '-webkit-box',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: 'vertical'\n              }}>\n                {model.Description}\n              </div>\n            )}\n            \n            {/* Model Specs */}\n            <div style={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(2, 1fr)',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.md\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('sm')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Input Token Limit\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || '500',\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('sm')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Cost Rank\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  fontWeight: styles.typography.fontWeight?.medium || '500'\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </div>\n              </div>\n            </div>\n            \n            {/* Vendor Info */}\n            <div style={{\n              paddingTop: styles.spacing.md,\n              borderTop: `1px solid ${styles.colors.border}`,\n              display: 'flex',\n              gap: styles.spacing.md,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              {vendorInfo.modelDeveloper && (\n                <div style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Dev:</span>\n                  <span style={{ \n                    color: styles.colors.text,\n                    fontWeight: styles.typography.fontWeight?.medium || '500'\n                  }}>\n                    {vendorInfo.modelDeveloper.Vendor}\n                  </span>\n                </div>\n              )}\n              {vendorInfo.inferenceProviders.length > 0 && (\n                <div style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  gap: styles.spacing.xs\n                }}>\n                  <span style={{ color: styles.colors.textSecondary }}>Providers:</span>\n                  <span style={{ \n                    color: styles.colors.primary,\n                    fontWeight: styles.typography.fontWeight?.medium || '500'\n                  }}>\n                    {vendorInfo.inferenceProviders.length}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n  \n  // List view rendering\n  const renderListView = () => (\n    <div style={{\n      backgroundColor: styles.colors.surface,\n      borderRadius: getBorderRadius('md'),\n      overflow: 'hidden'\n    }}>\n      <table style={{\n        width: '100%',\n        borderCollapse: 'collapse'\n      }}>\n        <thead>\n          <tr style={{\n            borderBottom: `2px solid ${styles.colors.border}`\n          }}>\n            <th\n              onClick={() => handleSort('Name')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'left',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary,\n                cursor: 'pointer',\n                userSelect: 'none'\n              }}\n            >\n              Model Name\n              {renderSortIndicator('Name')}\n            </th>\n            <th\n              onClick={() => handleSort('Status')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'left',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary,\n                cursor: 'pointer',\n                userSelect: 'none'\n              }}\n            >\n              Status\n              {renderSortIndicator('Status')}\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'left',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Developer\n            </th>\n            <th\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'left',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary\n              }}\n            >\n              Providers\n            </th>\n            <th\n              onClick={() => handleSort('InputTokenLimit')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'right',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary,\n                cursor: 'pointer',\n                userSelect: 'none'\n              }}\n            >\n              Input Limit\n              {renderSortIndicator('InputTokenLimit')}\n            </th>\n            <th\n              onClick={() => handleSort('CostRank')}\n              style={{\n                padding: styles.spacing.md,\n                textAlign: 'center',\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                color: styles.colors.textSecondary,\n                cursor: 'pointer',\n                userSelect: 'none'\n              }}\n            >\n              Cost\n              {renderSortIndicator('CostRank')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {models.map((model, index) => {\n            const vendorInfo = getModelVendorInfo(model.ID);\n            const isSelected = model.ID === selectedModelId;\n            \n            return (\n              <tr\n                key={model.ID}\n                onClick={() => onSelectModel?.(model.ID)}\n                style={{\n                  borderBottom: index < models.length - 1 \n                    ? `1px solid ${styles.colors.borderLight || styles.colors.border}` \n                    : 'none',\n                  backgroundColor: isSelected \n                    ? styles.colors.primaryLight || styles.colors.primary + '10'\n                    : 'transparent',\n                  cursor: 'pointer',\n                  transition: 'background-color 0.2s'\n                }}\n                onMouseEnter={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (!isSelected) {\n                    e.currentTarget.style.backgroundColor = 'transparent';\n                  }\n                }}\n              >\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  <div>\n                    <div style={{\n                      fontWeight: isSelected \n                        ? (styles.typography.fontWeight?.semibold || '600')\n                        : (styles.typography.fontWeight?.regular || '400'),\n                      color: styles.colors.text\n                    }}>\n                      {model.Name}\n                    </div>\n                    {model.APIName && (\n                      <div style={{\n                        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                        color: styles.colors.textSecondary,\n                        fontFamily: 'monospace'\n                      }}>\n                        {model.APIName}\n                      </div>\n                    )}\n                  </div>\n                </td>\n                <td style={{\n                  padding: styles.spacing.md\n                }}>\n                  {renderStatusBadge(model.IsActive ? 'Active' : 'Inactive')}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {vendorInfo.modelDeveloper?.Vendor || '-'}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {vendorInfo.inferenceProviders.length > 0 ? (\n                    <div style={{\n                      display: 'flex',\n                      gap: styles.spacing.xs,\n                      flexWrap: 'wrap'\n                    }}>\n                      {vendorInfo.inferenceProviders.slice(0, 3).map((provider, idx) => (\n                        <span\n                          key={idx}\n                          style={{\n                            padding: `2px ${styles.spacing.xs}`,\n                            backgroundColor: styles.colors.primary + '15',\n                            color: styles.colors.primary,\n                            borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                          }}\n                        >\n                          {provider.Vendor}\n                        </span>\n                      ))}\n                      {vendorInfo.inferenceProviders.length > 3 && (\n                        <span style={{\n                          color: styles.colors.textSecondary,\n                          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                        }}>\n                          +{vendorInfo.inferenceProviders.length - 3}\n                        </span>\n                      )}\n                    </div>\n                  ) : (\n                    <span style={{ color: styles.colors.textSecondary }}>-</span>\n                  )}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: 'right',\n                  fontSize: styles.typography.fontSize.md,\n                  color: styles.colors.text\n                }}>\n                  {formatTokens(model.InputTokenLimit)}\n                </td>\n                <td style={{\n                  padding: styles.spacing.md,\n                  textAlign: 'center'\n                }}>\n                  {renderCostRank(model.CostRank)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n  \n  return viewMode === 'grid' ? renderGridView() : renderListView();\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelDetails",
      "title": "AI Model Details",
      "description": "Sliding details panel showing comprehensive model information, vendors, and usage statistics",
      "type": "detail",
      "functionalRequirements": "Show model specs, vendor associations grouped by type, usage statistics, and open record button",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "model", "type": "object", "required": false, "description": "The selected AI model object"},
        {"name": "vendors", "type": "array", "required": true, "description": "Array of vendors associated with the model"},
        {"name": "promptRuns", "type": "array", "required": true, "description": "Array of prompt runs for this model"},
        {"name": "isOpen", "type": "boolean", "required": true, "description": "Whether the details panel is open"}
      ],
      "events": [
        {"name": "onClose", "description": "Fired when the details panel should close", "parameters": []},
        {"name": "onOpenRecord", "description": "Fired when the open record button is clicked", "parameters": [{"name": "modelName", "type": "string", "description": "Name of the model to open"}]}
      ],
      "exampleUsage": "<AIModelDetails ... />",
      "code": "function AIModelDetails({ \n  model, \n  vendors,\n  promptRuns,\n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log('AIModelDetails handleOpenRecord called', { model, onOpenRecord });\n    if (model?.Name) {\n      console.log('Calling onOpenRecord with model name:', model.Name);\n      if (onOpenRecord) {\n        onOpenRecord(model.Name);\n      } else {\n        console.error('onOpenRecord callback is not defined');\n      }\n    } else {\n      console.error('No model or model name available');\n    }\n  }, [model, onOpenRecord]);\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return '-';\n    if (tokens >= 1000000) return `${(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `${(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      'Active': styles.colors.success || styles.colors.primary,\n      'Inactive': styles.colors.warning || styles.colors.secondary,\n      'Deprecated': styles.colors.error || styles.colors.secondary,\n      'Preview': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: 'inline-block',\n        padding: `${styles.spacing.xs} ${styles.spacing.sm}`,\n        backgroundColor: color + '15',\n        color: color,\n        borderRadius: getBorderRadius('sm'),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || '500'\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render vendor type icon\n  const renderVendorTypeIcon = (type) => {\n    const icons = {\n      'Model Developer': '\ud83c\udfe2',\n      'Inference Provider': '\ud83d\ude80'\n    };\n    \n    return (\n      <span style={{\n        display: 'inline-block',\n        marginRight: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.md\n      }}>\n        {icons[type] || '\ud83d\udce6'}\n      </span>\n    );\n  };\n  \n  // Calculate prompt statistics\n  const calculatePromptStats = useCallback(() => {\n    if (!promptRuns || promptRuns.length === 0) {\n      return {\n        totalRuns: 0,\n        successfulRuns: 0,\n        failedRuns: 0,\n        avgExecutionTime: 0,\n        totalTokens: 0,\n        uniquePrompts: 0\n      };\n    }\n    \n    const stats = {\n      totalRuns: promptRuns.length,\n      successfulRuns: promptRuns.filter(r => r.Status === 'Success' || r.Status === 'Completed').length,\n      failedRuns: promptRuns.filter(r => r.Status === 'Failed' || r.Status === 'Error').length,\n      avgExecutionTime: 0,\n      totalTokens: 0,\n      uniquePrompts: new Set(promptRuns.map(r => r.PromptID)).size\n    };\n    \n    const validTimes = promptRuns\n      .filter(r => r.TotalExecutionTime)\n      .map(r => r.TotalExecutionTime);\n    \n    if (validTimes.length > 0) {\n      stats.avgExecutionTime = validTimes.reduce((a, b) => a + b, 0) / validTimes.length;\n    }\n    \n    stats.totalTokens = promptRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return stats;\n  }, [promptRuns]);\n  \n  const stats = calculatePromptStats();\n  \n  // Group vendors by type\n  const vendorsByType = useMemo(() => {\n    const grouped = {\n      'Model Developer': [],\n      'Inference Provider': []\n    };\n    \n    vendors.forEach(v => {\n      if (grouped[v.Type]) {\n        grouped[v.Type].push(v);\n      }\n    });\n    \n    return grouped;\n  }, [vendors]);\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(0, 0, 0, 0.3)',\n            zIndex: 99999,\n            opacity: isOpen ? 1 : 0,\n            transition: 'opacity 0.3s',\n            pointerEvents: isOpen ? 'auto' : 'none'\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: 'fixed',\n        top: '75px',\n        right: 0,\n        bottom: 0,\n        width: '520px',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px ${styles.colors.shadow || 'rgba(0, 0, 0, 0.1)'}` : 'none',\n        transform: isOpen ? 'translateX(0)' : 'translateX(100%)',\n        transition: 'transform 0.3s ease-out',\n        zIndex: 100000,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid ${styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'flex-start'\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || '700',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {model?.Name || 'No Model Selected'}\n              </h2>\n              {model?.APIName && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: 'monospace'\n                }}>\n                  {model.APIName}\n                </div>\n              )}\n              {model?.IsActive !== undefined && (\n                <div style={{ marginTop: styles.spacing.sm }}>\n                  {renderStatusBadge(model.IsActive ? 'Active' : 'Inactive')}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: '32px',\n                height: '32px',\n                borderRadius: getBorderRadius('sm'),\n                border: 'none',\n                backgroundColor: 'transparent',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'background-color 0.2s'\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = 'transparent';\n              }}\n            >\n              \u2715\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: 'auto',\n          padding: styles.spacing.lg\n        }}>\n          {model ? (\n            <>\n              {/* Model Description */}\n              {model.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius('md'),\n                  borderLeft: `3px solid ${styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {model.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Model Specifications */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  Specifications\n                </h3>\n                <div style={{\n                  display: 'grid',\n                  gridTemplateColumns: 'repeat(2, 1fr)',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Token Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Output Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.OutputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Cost Rank\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.warning || styles.colors.secondary\n                    }}>\n                      {'$'.repeat(Math.min(model.CostRank || 0, 5))}\n                      <span style={{ opacity: 0.3 }}>\n                        {'$'.repeat(Math.max(0, 5 - (model.CostRank || 0)))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vendors Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  Vendors ({vendors.length})\n                </h3>\n                \n                {/* Model Developer */}\n                {vendorsByType['Model Developer'].length > 0 && (\n                  <div style={{ marginBottom: styles.spacing.md }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || '500',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon('Model Developer')}\n                      Model Developer\n                    </div>\n                    {vendorsByType['Model Developer'].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius('sm'),\n                          marginBottom: styles.spacing.sm,\n                          display: 'flex',\n                          justifyContent: 'space-between',\n                          alignItems: 'center'\n                        }}\n                      >\n                        <div>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || '500',\n                            color: styles.colors.text\n                          }}>\n                            {vendor.Vendor}\n                          </div>\n                          {vendor.APIName && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: 'monospace'\n                            }}>\n                              API: {vendor.APIName}\n                            </div>\n                          )}\n                        </div>\n                        {renderStatusBadge(vendor.Status)}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Inference Providers */}\n                {vendorsByType['Inference Provider'].length > 0 && (\n                  <div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || '500',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon('Inference Provider')}\n                      Inference Providers\n                    </div>\n                    {vendorsByType['Inference Provider'].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius('sm'),\n                          marginBottom: styles.spacing.sm\n                        }}\n                      >\n                        <div style={{\n                          display: 'flex',\n                          justifyContent: 'space-between',\n                          alignItems: 'flex-start',\n                          marginBottom: styles.spacing.sm\n                        }}>\n                          <div>\n                            <div style={{\n                              fontSize: styles.typography.fontSize.md,\n                              fontWeight: styles.typography.fontWeight?.medium || '500',\n                              color: styles.colors.text\n                            }}>\n                              {vendor.Vendor}\n                            </div>\n                            {vendor.APIName && (\n                              <div style={{\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                fontFamily: 'monospace'\n                              }}>\n                                API: {vendor.APIName}\n                              </div>\n                            )}\n                          </div>\n                          <div style={{\n                            display: 'flex',\n                            gap: styles.spacing.xs,\n                            alignItems: 'center'\n                          }}>\n                            {vendor.Priority && (\n                              <span style={{\n                                padding: `2px ${styles.spacing.xs}`,\n                                backgroundColor: styles.colors.info + '15',\n                                color: styles.colors.info || styles.colors.primary,\n                                borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                              }}>\n                                Priority: {vendor.Priority}\n                              </span>\n                            )}\n                            {renderStatusBadge(vendor.Status)}\n                          </div>\n                        </div>\n                        \n                        {/* Vendor Capabilities */}\n                        <div style={{\n                          display: 'flex',\n                          gap: styles.spacing.xs,\n                          flexWrap: 'wrap'\n                        }}>\n                          {vendor.SupportsStreaming && (\n                            <span style={{\n                              padding: `2px ${styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + '15',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Streaming\n                            </span>\n                          )}\n                          {vendor.SupportsEffortLevel && (\n                            <span style={{\n                              padding: `2px ${styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + '15',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Effort Level\n                            </span>\n                          )}\n                          {vendor.MaxInputTokens && (\n                            <span style={{\n                              padding: `2px ${styles.spacing.xs}`,\n                              backgroundColor: styles.colors.background,\n                              color: styles.colors.textSecondary,\n                              borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              Max: {formatTokens(vendor.MaxInputTokens)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Usage Statistics */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  Usage Statistics\n                </h3>\n                <div style={{\n                  display: 'grid',\n                  gridTemplateColumns: 'repeat(2, 1fr)',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Runs\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {stats.totalRuns.toLocaleString()}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Success Rate\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: stats.totalRuns > 0 \n                        ? (stats.successfulRuns / stats.totalRuns >= 0.9 ? styles.colors.success : styles.colors.warning)\n                        : styles.colors.text\n                    }}>\n                      {stats.totalRuns > 0 \n                        ? `${((stats.successfulRuns / stats.totalRuns) * 100).toFixed(1)}%`\n                        : '-'}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Unique Prompts\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {stats.uniquePrompts}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Tokens\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(stats.totalTokens)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Model Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select a model from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {model && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid ${styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: '100%',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: 'white',\n                border: 'none',\n                borderRadius: getBorderRadius('md'),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                cursor: 'pointer',\n                transition: 'background-color 0.2s'\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Model Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelFilter",
      "title": "AI Model Filter",
      "description": "Collapsible filter panel for filtering models by type, status, developer, and provider",
      "type": "form",
      "functionalRequirements": "Provide filters for model type, status, developer, and provider with active filter indicators",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "filters", "type": "object", "required": true, "description": "Current filter state object"},
        {"name": "modelTypes", "type": "array", "required": true, "description": "Array of available model types for filtering"},
        {"name": "vendors", "type": "array", "required": true, "description": "Array of available vendors for filtering"},
        {"name": "isCollapsed", "type": "boolean", "required": true, "description": "Whether the filter panel is collapsed"}
      ],
      "events": [
        {"name": "onFilterChange", "description": "Fired when filters are changed", "parameters": [{"name": "filters", "type": "object", "description": "New filter state"}]},
        {"name": "onToggleCollapse", "description": "Fired when the collapse state should toggle", "parameters": []}
      ],
      "exampleUsage": "<AIModelFilter ... />",
      "code": "function AIModelFilter({ \n  filters, \n  onFilterChange, \n  modelTypes,\n  vendors,\n  isCollapsed, \n  onToggleCollapse,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Calculate active filter count\n  const activeFilterCount = Object.values(filters || {}).filter(Boolean).length;\n  \n  // Handle model type filter change\n  const handleModelTypeChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      modelType: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle developer filter change\n  const handleDeveloperChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      developer: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle inference provider filter change\n  const handleProviderChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      provider: e.target.value || undefined\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle status filter change\n  const handleStatusChange = useCallback((e) => {\n    const newFilters = {\n      ...filters,\n      isActive: e.target.value === '' ? undefined : e.target.value === 'true'\n    };\n    onFilterChange?.(newFilters);\n  }, [filters, onFilterChange]);\n  \n  // Handle clear all filters\n  const handleClearFilters = useCallback(() => {\n    onFilterChange?.({});\n  }, [onFilterChange]);\n  \n  // Handle toggle collapse\n  const handleToggle = useCallback(() => {\n    onToggleCollapse?.();\n  }, [onToggleCollapse]);\n  \n  // Get unique developers and providers\n  const developers = useMemo(() => {\n    return vendors.filter(v => v.Name && v.Name.includes('Developer')).map(v => v.Name);\n  }, [vendors]);\n  \n  const providers = useMemo(() => {\n    return vendors.filter(v => v.Name && !v.Name.includes('Developer')).map(v => v.Name);\n  }, [vendors]);\n  \n  return (\n    <div style={{\n      width: isCollapsed ? '48px' : '280px',\n      minWidth: isCollapsed ? '48px' : '280px',\n      backgroundColor: styles.colors.surface,\n      borderRight: `1px solid ${styles.colors.border}`,\n      transition: 'width 0.3s ease-out',\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'relative',\n      overflow: 'hidden'\n    }}>\n      {/* Toggle Button */}\n      <button\n        onClick={handleToggle}\n        style={{\n          position: 'absolute',\n          top: styles.spacing.md,\n          right: styles.spacing.md,\n          width: '32px',\n          height: '32px',\n          borderRadius: getBorderRadius('sm'),\n          border: `1px solid ${styles.colors.border}`,\n          backgroundColor: styles.colors.background,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.md,\n          cursor: 'pointer',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          zIndex: 1,\n          transition: 'all 0.2s'\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.backgroundColor = styles.colors.background;\n        }}\n      >\n        {isCollapsed ? '\u2192' : '\u2190'}\n      </button>\n      \n      {/* Filter Icon when collapsed */}\n      {isCollapsed && (\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flex: 1,\n          opacity: 1,\n          transition: 'opacity 0.3s'\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.sm\n          }}>\n            \ud83d\udd0d\n          </div>\n          {activeFilterCount > 0 && (\n            <div style={{\n              width: '24px',\n              height: '24px',\n              borderRadius: '50%',\n              backgroundColor: styles.colors.primary,\n              color: 'white',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              fontSize: styles.typography.fontSize.xs,\n              fontWeight: styles.typography.fontWeight?.bold || '700'\n            }}>\n              {activeFilterCount}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Filter Content */}\n      <div style={{\n        padding: styles.spacing.lg,\n        opacity: isCollapsed ? 0 : 1,\n        transition: 'opacity 0.3s',\n        pointerEvents: isCollapsed ? 'none' : 'auto',\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column'\n      }}>\n        {/* Header */}\n        <div style={{\n          marginBottom: styles.spacing.xl,\n          paddingRight: '40px'\n        }}>\n          <h2 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.lg,\n            fontWeight: styles.typography.fontWeight?.semibold || '600',\n            color: styles.colors.text,\n            marginBottom: styles.spacing.xs\n          }}>\n            Filters\n          </h2>\n          {activeFilterCount > 0 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              {activeFilterCount} active filter{activeFilterCount !== 1 ? 's' : ''}\n            </div>\n          )}\n        </div>\n        \n        {/* Filter Controls */}\n        <div style={{\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: styles.spacing.lg\n        }}>\n          {/* Model Type Filter */}\n          <div>\n            <label style={{\n              display: 'block',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || '500',\n              color: styles.colors.textSecondary\n            }}>\n              Model Type\n            </label>\n            <select\n              value={filters?.modelType || ''}\n              onChange={handleModelTypeChange}\n              style={{\n                width: '100%',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid ${styles.colors.border}`,\n                borderRadius: getBorderRadius('sm'),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: 'pointer'\n              }}\n            >\n              <option value=\"\">All Types</option>\n              {modelTypes.map((type) => (\n                <option key={type.ID} value={type.ID}>\n                  {type.Name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Status Filter */}\n          <div>\n            <label style={{\n              display: 'block',\n              marginBottom: styles.spacing.sm,\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || '500',\n              color: styles.colors.textSecondary\n            }}>\n              Status\n            </label>\n            <select\n              value={filters?.isActive || ''}\n              onChange={handleStatusChange}\n              style={{\n                width: '100%',\n                padding: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid ${styles.colors.border}`,\n                borderRadius: getBorderRadius('sm'),\n                backgroundColor: styles.colors.background,\n                color: styles.colors.text,\n                cursor: 'pointer'\n              }}\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"Active\">Active</option>\n              <option value=\"Inactive\">Inactive</option>\n              <option value=\"Deprecated\">Deprecated</option>\n              <option value=\"Preview\">Preview</option>\n            </select>\n          </div>\n          \n          {/* Model Developer Filter */}\n          {developers.length > 0 && (\n            <div>\n              <label style={{\n                display: 'block',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || '500',\n                color: styles.colors.textSecondary\n              }}>\n                Model Developer\n              </label>\n              <select\n                value={filters?.developer || ''}\n                onChange={handleDeveloperChange}\n                style={{\n                  width: '100%',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid ${styles.colors.border}`,\n                  borderRadius: getBorderRadius('sm'),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: 'pointer'\n                }}\n              >\n                <option value=\"\">All Developers</option>\n                {developers.map((dev) => (\n                  <option key={dev} value={dev}>\n                    {dev}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Inference Provider Filter */}\n          {providers.length > 0 && (\n            <div>\n              <label style={{\n                display: 'block',\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || '500',\n                color: styles.colors.textSecondary\n              }}>\n                Inference Provider\n              </label>\n              <select\n                value={filters?.provider || ''}\n                onChange={handleProviderChange}\n                style={{\n                  width: '100%',\n                  padding: styles.spacing.sm,\n                  fontSize: styles.typography.fontSize.md,\n                  border: `1px solid ${styles.colors.border}`,\n                  borderRadius: getBorderRadius('sm'),\n                  backgroundColor: styles.colors.background,\n                  color: styles.colors.text,\n                  cursor: 'pointer'\n                }}\n              >\n                <option value=\"\">All Providers</option>\n                {providers.map((provider) => (\n                  <option key={provider} value={provider}>\n                    {provider}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n          \n          {/* Active Filters Display */}\n          {activeFilterCount > 0 && (\n            <div>\n              <div style={{\n                marginBottom: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm,\n                fontWeight: styles.typography.fontWeight?.medium || '500',\n                color: styles.colors.textSecondary\n              }}>\n                Active Filters\n              </div>\n              <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                gap: styles.spacing.xs\n              }}>\n                {filters?.modelType && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + '15',\n                    borderRadius: getBorderRadius('sm'),\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center'\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Type:\n                      </span>\n                      <strong>{modelTypes.find(t => t.ID === filters.modelType)?.Name || filters.modelType}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleModelTypeChange({ target: { value: '' } })}\n                      style={{\n                        width: '20px',\n                        height: '20px',\n                        borderRadius: '50%',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: 'pointer',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = 'transparent';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.isActive && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + '15',\n                    borderRadius: getBorderRadius('sm'),\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center'\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Status:\n                      </span>\n                      <strong>{filters.isActive}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleStatusChange({ target: { value: '' } })}\n                      style={{\n                        width: '20px',\n                        height: '20px',\n                        borderRadius: '50%',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: 'pointer',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = 'transparent';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.developer && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + '15',\n                    borderRadius: getBorderRadius('sm'),\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center'\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Developer:\n                      </span>\n                      <strong>{filters.developer}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleDeveloperChange({ target: { value: '' } })}\n                      style={{\n                        width: '20px',\n                        height: '20px',\n                        borderRadius: '50%',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: 'pointer',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = 'transparent';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n                {filters?.provider && (\n                  <div style={{\n                    padding: styles.spacing.sm,\n                    backgroundColor: styles.colors.primary + '15',\n                    borderRadius: getBorderRadius('sm'),\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center'\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      color: styles.colors.text\n                    }}>\n                      <span style={{\n                        color: styles.colors.textSecondary,\n                        marginRight: styles.spacing.xs\n                      }}>\n                        Provider:\n                      </span>\n                      <strong>{filters.provider}</strong>\n                    </div>\n                    <button\n                      onClick={() => handleProviderChange({ target: { value: '' } })}\n                      style={{\n                        width: '20px',\n                        height: '20px',\n                        borderRadius: '50%',\n                        border: 'none',\n                        backgroundColor: 'transparent',\n                        color: styles.colors.textSecondary,\n                        fontSize: styles.typography.fontSize.sm,\n                        cursor: 'pointer',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        padding: 0\n                      }}\n                      onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n                      }}\n                      onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = 'transparent';\n                      }}\n                    >\n                      \u2715\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Clear All Button */}\n        {activeFilterCount > 0 && (\n          <div style={{\n            marginTop: styles.spacing.xl,\n            paddingTop: styles.spacing.lg,\n            borderTop: `1px solid ${styles.colors.borderLight || styles.colors.border}`\n          }}>\n            <button\n              onClick={handleClearFilters}\n              style={{\n                width: '100%',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.surface,\n                color: styles.colors.text,\n                border: `1px solid ${styles.colors.border}`,\n                borderRadius: getBorderRadius('md'),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.medium || '500',\n                cursor: 'pointer',\n                transition: 'background-color 0.2s'\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.error + '15';\n                e.currentTarget.style.color = styles.colors.error;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surface;\n                e.currentTarget.style.color = styles.colors.text;\n              }}\n            >\n              Clear All Filters\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    },
    {
      "name": "AIModelAnalytics",
      "title": "AI Model Analytics",
      "description": "Analytics panel with charts showing prompt usage distribution, performance metrics, and time series",
      "type": "chart",
      "functionalRequirements": "Display pie chart for prompt usage, bar chart for performance, time series for usage trends",
      "dataRequirements": null,
      "technicalDesign": "",
      "properties": [
        {"name": "model", "type": "object", "required": false, "description": "The selected AI model for analytics"},
        {"name": "promptRuns", "type": "array", "required": true, "description": "Array of prompt runs to analyze"},
        {"name": "view", "type": "string", "required": true, "description": "Current analytics view - 'prompts', 'performance', or 'timeline'"}
      ],
      "events": [
        {"name": "onViewChange", "description": "Fired when the analytics view changes", "parameters": [{"name": "view", "type": "string", "description": "New view name"}]}
      ],
      "exampleUsage": "<AIModelAnalytics ... />",
      "code": "function AIModelAnalytics({ \n  model,\n  promptRuns,\n  view,\n  onViewChange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Calculate prompt usage statistics\n  const promptStats = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    const stats = {};\n    promptRuns.forEach(run => {\n      const promptName = run.PromptName || 'Unknown';\n      if (!stats[promptName]) {\n        stats[promptName] = {\n          name: promptName,\n          runs: 0,\n          successfulRuns: 0,\n          failedRuns: 0,\n          totalTokens: 0,\n          avgExecutionTime: 0,\n          executionTimes: []\n        };\n      }\n      \n      stats[promptName].runs++;\n      if (run.Status === 'Success' || run.Status === 'Completed') {\n        stats[promptName].successfulRuns++;\n      } else if (run.Status === 'Failed' || run.Status === 'Error') {\n        stats[promptName].failedRuns++;\n      }\n      \n      stats[promptName].totalTokens += run.TotalTokens || 0;\n      if (run.TotalExecutionTime) {\n        stats[promptName].executionTimes.push(run.TotalExecutionTime);\n      }\n    });\n    \n    // Calculate averages\n    Object.values(stats).forEach(stat => {\n      if (stat.executionTimes.length > 0) {\n        stat.avgExecutionTime = stat.executionTimes.reduce((a, b) => a + b, 0) / stat.executionTimes.length;\n      }\n    });\n    \n    return Object.values(stats).sort((a, b) => b.runs - a.runs);\n  }, [promptRuns]);\n  \n  // Calculate time series data\n  const timeSeriesData = useMemo(() => {\n    if (!promptRuns || promptRuns.length === 0) return [];\n    \n    // Group by day\n    const dailyStats = {};\n    promptRuns.forEach(run => {\n      if (run.StartTime) {\n        const date = new Date(run.StartTime).toLocaleDateString();\n        if (!dailyStats[date]) {\n          dailyStats[date] = {\n            date,\n            runs: 0,\n            tokens: 0,\n            errors: 0\n          };\n        }\n        dailyStats[date].runs++;\n        dailyStats[date].tokens += run.TotalTokens || 0;\n        if (run.Status === 'Failed' || run.Status === 'Error') {\n          dailyStats[date].errors++;\n        }\n      }\n    });\n    \n    return Object.values(dailyStats).sort((a, b) => new Date(a.date) - new Date(b.date));\n  }, [promptRuns]);\n  \n  // Render pie chart\n  const renderPieChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '200px',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No prompt data available\n        </div>\n      );\n    }\n    \n    const total = promptStats.reduce((sum, stat) => sum + stat.runs, 0);\n    const colors = [\n      styles.colors.primary,\n      styles.colors.success || '#4CAF50',\n      styles.colors.warning || '#FF9800',\n      styles.colors.error || '#F44336',\n      styles.colors.info || '#2196F3',\n      '#9C27B0', '#00BCD4', '#8BC34A', '#FFC107', '#795548'\n    ];\n    \n    // Create simple pie chart using SVG\n    let currentAngle = 0;\n    const segments = promptStats.slice(0, 5).map((stat, index) => {\n      const percentage = stat.runs / total;\n      const angle = percentage * 360;\n      const largeArcFlag = angle > 180 ? 1 : 0;\n      \n      const startX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const startY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      currentAngle += angle;\n      \n      const endX = 100 + 80 * Math.cos((currentAngle - 90) * Math.PI / 180);\n      const endY = 100 + 80 * Math.sin((currentAngle - 90) * Math.PI / 180);\n      \n      const pathData = [\n        `M 100 100`,\n        `L ${startX} ${startY}`,\n        `A 80 80 0 ${largeArcFlag} 1 ${endX} ${endY}`,\n        'Z'\n      ].join(' ');\n      \n      return {\n        path: pathData,\n        color: colors[index % colors.length],\n        percentage,\n        stat\n      };\n    });\n    \n    return (\n      <div>\n        <svg viewBox=\"0 0 200 200\" style={{ width: '200px', height: '200px', margin: '0 auto', display: 'block' }}>\n          {segments.map((segment, index) => (\n            <g key={index}>\n              <path\n                d={segment.path}\n                fill={segment.color}\n                stroke={styles.colors.background}\n                strokeWidth=\"2\"\n                style={{ cursor: 'pointer' }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.opacity = '0.8';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.opacity = '1';\n                }}\n              />\n            </g>\n          ))}\n        </svg>\n        \n        {/* Legend */}\n        <div style={{\n          marginTop: styles.spacing.md,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: styles.spacing.xs\n        }}>\n          {segments.map((segment, index) => (\n            <div\n              key={index}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: styles.spacing.sm,\n                fontSize: styles.typography.fontSize.sm\n              }}\n            >\n              <div style={{\n                width: '12px',\n                height: '12px',\n                backgroundColor: segment.color,\n                borderRadius: '2px'\n              }} />\n              <div style={{\n                flex: 1,\n                color: styles.colors.text,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap'\n              }}>\n                {segment.stat.name}\n              </div>\n              <div style={{\n                color: styles.colors.textSecondary,\n                fontWeight: styles.typography.fontWeight?.medium || '500'\n              }}>\n                {(segment.percentage * 100).toFixed(1)}%\n              </div>\n            </div>\n          ))}\n          {promptStats.length > 5 && (\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              fontStyle: 'italic'\n            }}>\n              +{promptStats.length - 5} more prompts\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render bar chart for performance\n  const renderPerformanceChart = () => {\n    if (promptStats.length === 0) {\n      return (\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '200px',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No performance data available\n        </div>\n      );\n    }\n    \n    const maxTime = Math.max(...promptStats.map(s => s.avgExecutionTime || 0));\n    const displayStats = promptStats.slice(0, 10);\n    \n    return (\n      <div>\n        <div style={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: styles.spacing.sm\n        }}>\n          {displayStats.map((stat, index) => (\n            <div key={index} style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.sm }}>\n              <div style={{\n                width: '100px',\n                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                color: styles.colors.text,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap'\n              }}>\n                {stat.name}\n              </div>\n              <div style={{\n                flex: 1,\n                height: '20px',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                overflow: 'hidden',\n                position: 'relative'\n              }}>\n                <div style={{\n                  width: maxTime > 0 ? `${(stat.avgExecutionTime / maxTime) * 100}%` : '0%',\n                  height: '100%',\n                  backgroundColor: styles.colors.primary,\n                  transition: 'width 0.3s'\n                }} />\n                <div style={{\n                  position: 'absolute',\n                  right: styles.spacing.xs,\n                  top: '50%',\n                  transform: 'translateY(-50%)',\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary\n                }}>\n                  {stat.avgExecutionTime ? `${(stat.avgExecutionTime / 1000).toFixed(2)}s` : '-'}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render time series chart\n  const renderTimeSeriesChart = () => {\n    if (timeSeriesData.length === 0) {\n      return (\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '200px',\n          color: styles.colors.textSecondary,\n          fontSize: styles.typography.fontSize.sm\n        }}>\n          No time series data available\n        </div>\n      );\n    }\n    \n    const maxRuns = Math.max(...timeSeriesData.map(d => d.runs));\n    const recentData = timeSeriesData.slice(-7);\n    \n    return (\n      <div>\n        <div style={{\n          display: 'flex',\n          alignItems: 'flex-end',\n          height: '150px',\n          gap: styles.spacing.xs,\n          marginBottom: styles.spacing.sm\n        }}>\n          {recentData.map((data, index) => (\n            <div\n              key={index}\n              style={{\n                flex: 1,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                gap: styles.spacing.xs\n              }}\n            >\n              <div style={{\n                width: '100%',\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                position: 'relative',\n                flex: 1,\n                display: 'flex',\n                alignItems: 'flex-end'\n              }}>\n                <div style={{\n                  width: '100%',\n                  height: maxRuns > 0 ? `${(data.runs / maxRuns) * 100}%` : '0%',\n                  backgroundColor: data.errors > 0 \n                    ? styles.colors.error \n                    : styles.colors.primary,\n                  borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                  transition: 'height 0.3s'\n                }} />\n              </div>\n              <div style={{\n                fontSize: '10px',\n                color: styles.colors.textSecondary,\n                textAlign: 'center'\n              }}>\n                {new Date(data.date).toLocaleDateString('en', { month: 'short', day: 'numeric' })}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n          color: styles.colors.textSecondary\n        }}>\n          <span>Runs per day (last 7 days)</span>\n          <span>Max: {maxRuns}</span>\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: styles.colors.surface\n    }}>\n      {/* Header with View Selector */}\n      <div style={{\n        padding: styles.spacing.lg,\n        borderBottom: `1px solid ${styles.colors.border}`\n      }}>\n        <h3 style={{\n          margin: 0,\n          marginBottom: styles.spacing.md,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || '600',\n          color: styles.colors.text\n        }}>\n          Analytics\n        </h3>\n        \n        {/* View Tabs */}\n        <div style={{\n          display: 'flex',\n          gap: styles.spacing.xs,\n          borderBottom: `1px solid ${styles.colors.border}`\n        }}>\n          <button\n            onClick={() => onViewChange?.('prompts')}\n            style={{\n              padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n              backgroundColor: 'transparent',\n              color: view === 'prompts' ? styles.colors.primary : styles.colors.textSecondary,\n              border: 'none',\n              borderBottom: view === 'prompts' ? `2px solid ${styles.colors.primary}` : 'none',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || '500',\n              cursor: 'pointer',\n              transition: 'color 0.2s'\n            }}\n          >\n            Prompt Usage\n          </button>\n          <button\n            onClick={() => onViewChange?.('performance')}\n            style={{\n              padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n              backgroundColor: 'transparent',\n              color: view === 'performance' ? styles.colors.primary : styles.colors.textSecondary,\n              border: 'none',\n              borderBottom: view === 'performance' ? `2px solid ${styles.colors.primary}` : 'none',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || '500',\n              cursor: 'pointer',\n              transition: 'color 0.2s'\n            }}\n          >\n            Performance\n          </button>\n          <button\n            onClick={() => onViewChange?.('timeline')}\n            style={{\n              padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n              backgroundColor: 'transparent',\n              color: view === 'timeline' ? styles.colors.primary : styles.colors.textSecondary,\n              border: 'none',\n              borderBottom: view === 'timeline' ? `2px solid ${styles.colors.primary}` : 'none',\n              fontSize: styles.typography.fontSize.sm,\n              fontWeight: styles.typography.fontWeight?.medium || '500',\n              cursor: 'pointer',\n              transition: 'color 0.2s'\n            }}\n          >\n            Timeline\n          </button>\n        </div>\n      </div>\n      \n      {/* Content Area */}\n      <div style={{\n        flex: 1,\n        padding: styles.spacing.lg,\n        overflow: 'auto'\n      }}>\n        {!model ? (\n          <div style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '100%',\n            color: styles.colors.textSecondary,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Select a model to view analytics\n          </div>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <div style={{\n              display: 'grid',\n              gridTemplateColumns: 'repeat(2, 1fr)',\n              gap: styles.spacing.sm,\n              marginBottom: styles.spacing.lg\n            }}>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('sm')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Total Runs\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  {promptRuns.length}\n                </div>\n              </div>\n              <div style={{\n                padding: styles.spacing.sm,\n                backgroundColor: styles.colors.background,\n                borderRadius: getBorderRadius('sm')\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  Unique Prompts\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  {promptStats.length}\n                </div>\n              </div>\n            </div>\n            \n            {/* Chart Area */}\n            <div>\n              {view === 'prompts' && renderPieChart()}\n              {view === 'performance' && renderPerformanceChart()}\n              {view === 'timeline' && renderTimeSeriesChart()}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}",
      "dependencies": [],
      "libraries": []
    }
  ],
  "libraries": [],
  "code": "function AIModelBrowser({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { AIModelList, AIModelDetails, AIModelFilter, AIModelAnalytics } = components;\n  console.log('=== AIModelBrowser initialized with callbacks:', callbacks);\n  \n  // Initialize state from saved settings where appropriate\n  const [selectedModelId, setSelectedModelId] = useState(savedUserSettings?.selectedModelId);\n  const [viewMode, setViewMode] = useState(savedUserSettings?.viewMode || 'grid');\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [sortBy, setSortBy] = useState(savedUserSettings?.sortBy || 'Name');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || 'asc');\n  const [filterPanelCollapsed, setFilterPanelCollapsed] = useState(savedUserSettings?.filterPanelCollapsed || false);\n  const [analyticsView, setAnalyticsView] = useState(savedUserSettings?.analyticsView || 'prompts');\n  \n  // Runtime UI state (not persisted)\n  const [models, setModels] = useState([]);\n  const [modelVendors, setModelVendors] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [modelTypes, setModelTypes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [detailsPanelOpen, setDetailsPanelOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Load models on mount and when filters/sort change\n  useEffect(() => {\n    const loadModels = async () => {\n      console.log('=== Loading models with filters:', filters, 'search:', searchQuery);\n      setLoading(true);\n      try {\n        // Build filter string for models\n        let filterParts = [];\n        if (searchQuery) {\n          filterParts.push(`(Name LIKE '%${searchQuery}%' OR APIName LIKE '%${searchQuery}%' OR Description LIKE '%${searchQuery}%')`);\n        }\n        if (filters.modelType) {\n          filterParts.push(`AIModelTypeID = '${filters.modelType}'`);\n        }\n        if (filters.isActive !== undefined) {\n          filterParts.push(`IsActive = '${filters.isActive}'`);\n        }\n        \n        // Load AI Models\n        const modelsResult = await utilities.rv.RunView({\n          EntityName: 'AI Models',\n          Fields: ['ID', 'Name', 'APIName', 'Description', 'AIModelTypeID', 'InputTokenLimit', \n                   'CostRank', 'IsActive', '__mj_CreatedAt', '__mj_UpdatedAt'],\n          OrderBy: `${sortBy} ${sortDirection.toUpperCase()}`,\n          ExtraFilter: filterParts.length > 0 ? filterParts.join(' AND ') : undefined\n        });\n        \n        if (modelsResult?.Success && modelsResult?.Results) {\n          console.log(`Loaded ${modelsResult.Results.length} models`);\n          setModels(modelsResult.Results);\n        } else {\n          console.error('Failed to load models:', modelsResult?.ErrorMessage);\n          setModels([]);\n        }\n        \n        // Load Model Types for filter\n        const typesResult = await utilities.rv.RunView({\n          EntityName: 'AI Model Types',\n          Fields: ['ID', 'Name', 'Description'],\n          OrderBy: 'Name ASC'\n        });\n        \n        if (typesResult?.Success && typesResult?.Results) {\n          setModelTypes(typesResult.Results);\n        }\n        \n        // Load Vendors (from AI Model Vendors)\n        const vendorsResult = await utilities.rv.RunView({\n          EntityName: 'MJ: AI Model Vendors',\n          Fields: ['ID', 'ModelID', 'VendorID', 'TypeID', 'Model', 'Vendor', 'Type', 'Status', 'Priority'],\n          OrderBy: 'Vendor ASC, Model ASC'\n        });\n        \n        if (vendorsResult?.Success && vendorsResult?.Results) {\n          const vendorData = vendorsResult.Results;\n          console.log(`Loaded ${vendorData.length} vendor associations`);\n          setModelVendors(vendorData);\n          \n          // Extract unique vendors\n          const uniqueVendors = [...new Set(vendorData.map(v => v.Vendor))].filter(Boolean);\n          setVendors(uniqueVendors.map(name => ({ Name: name })));\n          console.log(`Found ${uniqueVendors.length} unique vendors`);\n          \n          // Apply vendor-based filters\n          if ((filters.developer || filters.provider) && modelsResult?.Results) {\n            console.log('Applying vendor filters - developer:', filters.developer, 'provider:', filters.provider);\n            let vendorFilteredModels = modelsResult.Results;\n            \n            if (filters.developer) {\n              const developerModelIds = vendorData\n                .filter(v => v.Vendor === filters.developer && v.Type?.includes('Developer'))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => developerModelIds.includes(m.ID));\n              console.log(`After developer filter: ${vendorFilteredModels.length} models`);\n            }\n            \n            if (filters.provider) {\n              const providerModelIds = vendorData\n                .filter(v => v.Vendor === filters.provider && v.Type?.includes('Provider'))\n                .map(v => v.ModelID);\n              vendorFilteredModels = vendorFilteredModels.filter(m => providerModelIds.includes(m.ID));\n              console.log(`After provider filter: ${vendorFilteredModels.length} models`);\n            }\n            \n            setModels(vendorFilteredModels);\n          }\n        }\n      } catch (error) {\n        console.error('Error loading models:', error);\n        setModels([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadModels();\n  }, [filters, sortBy, sortDirection, searchQuery, utilities.rv]);\n  \n  // Load model details and analytics when selection changes\n  useEffect(() => {\n    const loadModelDetails = async () => {\n      if (!selectedModelId) {\n        setPromptRuns([]);\n        return;\n      }\n      \n      console.log('=== Loading prompt runs for model:', selectedModelId);\n      \n      try {\n        // Use the correct entity name for prompt runs: MJ: AI Prompt Runs\n        console.log('Loading prompt runs with entity: MJ: AI Prompt Runs');\n        \n        const promptRunsResult = await utilities.rv.RunView({\n          EntityName: 'MJ: AI Prompt Runs',\n          Fields: ['ID', 'PromptID', 'ModelID', 'RunAt', 'CompletedAt', 'ExecutionTimeMS', \n                   'TokensPrompt', 'TokensCompletion', 'TokensUsed', 'Success', 'ErrorMessage'],\n          OrderBy: 'RunAt DESC',\n            ExtraFilter: `ModelID = '${selectedModelId}'`,\n            MaxRows: 1000\n        });\n        \n        if (promptRunsResult?.Success && promptRunsResult?.Results) {\n          console.log(`Found ${promptRunsResult.Results.length} prompt runs`);\n          // Enrich with prompt names\n          const promptIds = [...new Set(promptRunsResult.Results.map(r => r.PromptID))].filter(Boolean);\n          \n          if (promptIds.length > 0) {\n            const promptsResult = await utilities.rv.RunView({\n              EntityName: 'AI Prompts',\n              Fields: ['ID', 'Name', 'Description', 'CategoryID'],\n              ExtraFilter: `ID IN ('${promptIds.join(\"','\")}')`\n            });\n            \n            const promptMap = {};\n            if (promptsResult?.Success && promptsResult?.Results) {\n              promptsResult.Results.forEach(p => {\n                promptMap[p.ID] = p;\n              });\n            }\n            \n            // Enrich prompt runs with prompt names and convert fields for compatibility\n            const enrichedRuns = promptRunsResult.Results.map(run => ({\n              ...run,\n              PromptName: promptMap[run.PromptID]?.Name || 'Unknown Prompt',\n              PromptDescription: promptMap[run.PromptID]?.Description,\n              // Map fields for analytics component compatibility\n              StartTime: run.RunAt,\n              EndTime: run.CompletedAt,\n              TotalExecutionTime: run.ExecutionTimeMS,\n              Status: run.Success ? 'Success' : 'Failed',\n              Error: run.ErrorMessage,\n              TotalTokens: run.TokensUsed\n            }));\n            \n            console.log(`Enriched ${enrichedRuns.length} runs with prompt names`);\n            setPromptRuns(enrichedRuns);\n          } else {\n            setPromptRuns(promptRunsResult.Results);\n          }\n        } else {\n          console.log('No prompt runs found:', promptRunsResult?.ErrorMessage);\n          setPromptRuns([]);\n        }\n      } catch (error) {\n        console.error('Error loading model details:', error);\n        setPromptRuns([]);\n      }\n    };\n    \n    loadModelDetails();\n  }, [selectedModelId, utilities.rv]);\n  \n  // Handle model selection\n  const handleSelectModel = useCallback((modelId) => {\n    setSelectedModelId(modelId);\n    setDetailsPanelOpen(true);\n    \n    // Save user preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedModelId: modelId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view mode change\n  const handleViewModeChange = useCallback((mode) => {\n    setViewMode(mode);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      viewMode: mode\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    \n    // Save filter preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle sort changes\n  const handleSortChange = useCallback((newSortBy, newSortDirection) => {\n    setSortBy(newSortBy);\n    setSortDirection(newSortDirection);\n    \n    // Save sort preferences\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      sortBy: newSortBy,\n      sortDirection: newSortDirection\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter panel toggle\n  const handleToggleFilter = useCallback(() => {\n    const newCollapsed = !filterPanelCollapsed;\n    setFilterPanelCollapsed(newCollapsed);\n    \n    // Save collapsed state\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filterPanelCollapsed: newCollapsed\n    });\n  }, [filterPanelCollapsed, savedUserSettings, onSaveUserSettings]);\n  \n  // Handle analytics view change\n  const handleAnalyticsViewChange = useCallback((view) => {\n    setAnalyticsView(view);\n    \n    // Save preference\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      analyticsView: view\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle opening model record\n  const handleOpenRecord = useCallback((modelName) => {\n    console.log('Opening AI Model record:', modelName);\n    if (callbacks?.OpenEntityRecord && modelName) {\n      callbacks.OpenEntityRecord('AI Models', [{ FieldName: 'Name', Value: modelName }]);\n    }\n  }, [callbacks]);\n  \n  // Handle closing details panel\n  const handleCloseDetails = useCallback(() => {\n    setDetailsPanelOpen(false);\n  }, []);\n  \n  // Handle search\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n  }, []);\n  \n  // Get selected model object\n  const selectedModel = models.find(m => m.ID === selectedModelId);\n  \n  // Get vendors for selected model\n  const selectedModelVendors = modelVendors.filter(v => v.ModelID === selectedModelId);\n  \n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Loading state\n  if (loading && models.length === 0) {\n    return (\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading AI models...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      display: 'flex',\n      height: '100vh',\n      backgroundColor: styles.colors.background,\n      overflow: 'hidden'\n    }}>\n      {/* Filter Panel */}\n      {AIModelFilter && (\n        <AIModelFilter\n          filters={filters}\n          onFilterChange={handleFilterChange}\n          modelTypes={modelTypes}\n          vendors={vendors}\n          isCollapsed={filterPanelCollapsed}\n          onToggleCollapse={handleToggleFilter}\n          savedUserSettings={savedUserSettings?.filterPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            filterPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid ${styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: styles.spacing.md\n          }}>\n            <h1 style={{\n              margin: 0,\n              fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.text\n            }}>\n              AI Model Browser\n            </h1>\n            \n            {/* View Mode Toggle */}\n            <div style={{\n              display: 'flex',\n              gap: styles.spacing.sm,\n              alignItems: 'center'\n            }}>\n              <span style={{\n                fontSize: styles.typography.fontSize.md,\n                color: styles.colors.textSecondary\n              }}>\n                View:\n              </span>\n              <button\n                onClick={() => handleViewModeChange('grid')}\n                style={{\n                  padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n                  backgroundColor: viewMode === 'grid' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === 'grid' ? 'white' : styles.colors.text,\n                  border: `1px solid ${styles.colors.border}`,\n                  borderRadius: getBorderRadius('sm'),\n                  cursor: 'pointer',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Grid\n              </button>\n              <button\n                onClick={() => handleViewModeChange('list')}\n                style={{\n                  padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n                  backgroundColor: viewMode === 'list' ? styles.colors.primary : styles.colors.background,\n                  color: viewMode === 'list' ? 'white' : styles.colors.text,\n                  border: `1px solid ${styles.colors.border}`,\n                  borderRadius: getBorderRadius('sm'),\n                  cursor: 'pointer',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                List\n              </button>\n            </div>\n          </div>\n          \n          {/* Search Bar */}\n          <div style={{\n            display: 'flex',\n            gap: styles.spacing.md\n          }}>\n            <input\n              type=\"text\"\n              placeholder=\"Search AI models...\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              style={{\n                flex: 1,\n                padding: styles.spacing.md,\n                fontSize: styles.typography.fontSize.md,\n                border: `1px solid ${styles.colors.border}`,\n                borderRadius: getBorderRadius('sm'),\n                backgroundColor: styles.colors.background\n              }}\n            />\n            {searchQuery && (\n              <button\n                onClick={() => handleSearch('')}\n                style={{\n                  padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n                  backgroundColor: styles.colors.surfaceHover || styles.colors.surface,\n                  color: styles.colors.text,\n                  border: `1px solid ${styles.colors.border}`,\n                  borderRadius: getBorderRadius('sm'),\n                  cursor: 'pointer',\n                  fontSize: styles.typography.fontSize.md\n                }}\n              >\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Model List and Analytics Split View */}\n        <div style={{\n          flex: 1,\n          display: 'flex',\n          overflow: 'hidden'\n        }}>\n          {/* Model List */}\n          <div style={{\n            flex: 1,\n            overflow: 'auto',\n            padding: styles.spacing.lg\n          }}>\n            {AIModelList && (\n              <AIModelList\n                models={models}\n                modelVendors={modelVendors}\n                viewMode={viewMode}\n                selectedModelId={selectedModelId}\n                onSelectModel={handleSelectModel}\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n                onSortChange={handleSortChange}\n                savedUserSettings={savedUserSettings?.modelList}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  modelList: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            )}\n            \n            {/* Empty State */}\n            {models.length === 0 && !loading && (\n              <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n                padding: styles.spacing.xxl || styles.spacing.xl,\n                color: styles.colors.textSecondary\n              }}>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xl,\n                  marginBottom: styles.spacing.md\n                }}>\n                  No AI models found\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.md\n                }}>\n                  {searchQuery || Object.keys(filters).length > 0\n                    ? 'Try adjusting your filters or search query'\n                    : 'No AI models are available'}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Analytics Panel */}\n          {selectedModel && AIModelAnalytics && (\n            <div style={{\n              width: '400px',\n              borderLeft: `1px solid ${styles.colors.border}`,\n              overflow: 'hidden',\n              display: 'flex',\n              flexDirection: 'column'\n            }}>\n              <AIModelAnalytics\n                model={selectedModel}\n                promptRuns={promptRuns}\n                view={analyticsView}\n                onViewChange={handleAnalyticsViewChange}\n                savedUserSettings={savedUserSettings?.analytics}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  analytics: settings\n                })}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Details Panel */}\n      {AIModelDetails && (\n        <AIModelDetails\n          model={selectedModel}\n          vendors={selectedModelVendors}\n          promptRuns={promptRuns}\n          isOpen={detailsPanelOpen}\n          onClose={handleCloseDetails}\n          onOpenRecord={() => handleOpenRecord(selectedModel?.Name)}\n          savedUserSettings={savedUserSettings?.detailsPanel}\n          onSaveUserSettings={(settings) => onSaveUserSettings?.({\n            ...savedUserSettings,\n            detailsPanel: settings\n          })}\n          utilities={utilities}\n          styles={styles}\n          components={components}\n          callbacks={callbacks}\n        />\n      )}\n    </div>\n  );\n}"
}