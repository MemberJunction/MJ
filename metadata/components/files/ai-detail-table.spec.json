{
  "name": "AIDetailTable",
  "location": "embedded",
  "title": "AI Detail Table",
  "description": "Detailed table view showing individual runs for drill-down analysis with sorting and filtering",
  "type": "table",
  "functionalRequirements": "## Detail Table Requirements\n\n### Core Functionality\n- Display individual run records in a sortable table\n- Show key fields: timestamp, name, success status, tokens, cost, execution time\n- Color-coded success/failure indicators\n- Sortable columns with visual indicators\n- Paginated results for large datasets\n- Export to CSV functionality\n- Expandable rows for additional details\n\n### Table Features\n- Responsive column widths\n- Hover row highlighting\n- Sticky header during scroll\n- Loading state for data updates\n- Empty state message",
  "dataRequirements": {
    "mode": "views",
    "description": "Receives detailed run data from parent component",
    "entities": [],
    "queries": []
  },
  "technicalDesign": "## Technical Design\n\n### Props\n- data: Array of run records\n- activeTab: Current view context (agents/prompts)\n\n### Table Management\n- Client-side sorting\n- Pagination with 25 rows per page\n- Column sorting state management\n- Row expansion for details",
  "properties": [
    {
      "name": "data",
      "type": "array",
      "required": true,
      "description": "Array of run records to display"
    },
    {
      "name": "activeTab",
      "type": "string",
      "required": true,
      "description": "Current tab: agents or prompts"
    }
  ],
  "events": [],
  "exampleUsage": "<AIDetailTable data={selectedPoint.items} activeTab=\"agents\" />",
  "code": "function AIDetailTable({ data, activeTab, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log('[AIDetailTable] Rendering with', data?.length || 0, 'items');\n  \n  const [sortField, setSortField] = useState(savedUserSettings?.sortField || 'timestamp');\n  const [sortDirection, setSortDirection] = useState(savedUserSettings?.sortDirection || 'desc');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [expandedRows, setExpandedRows] = useState(new Set());\n  \n  const rowsPerPage = 25;\n  \n  // Get the correct timestamp field\n  const timestampField = activeTab === 'agents' ? 'StartedAt' : 'RunAt';\n  const nameField = activeTab === 'agents' ? 'Agent' : 'Prompt';\n  const idField = activeTab === 'agents' ? 'AgentID' : 'PromptID';\n  \n  // Sort data\n  const sortedData = useMemo(() => {\n    if (!data || data.length === 0) return [];\n    \n    const sorted = [...data].sort((a, b) => {\n      let aVal = a[sortField];\n      let bVal = b[sortField];\n      \n      // Handle null/undefined\n      if (aVal == null) return sortDirection === 'asc' ? 1 : -1;\n      if (bVal == null) return sortDirection === 'asc' ? -1 : 1;\n      \n      // Compare values\n      if (typeof aVal === 'string') {\n        aVal = aVal.toLowerCase();\n        bVal = bVal.toLowerCase();\n      }\n      \n      if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;\n      if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    \n    return sorted;\n  }, [data, sortField, sortDirection]);\n  \n  // Paginate data\n  const paginatedData = useMemo(() => {\n    const start = currentPage * rowsPerPage;\n    const end = start + rowsPerPage;\n    return sortedData.slice(start, end);\n  }, [sortedData, currentPage, rowsPerPage]);\n  \n  const totalPages = Math.ceil(sortedData.length / rowsPerPage);\n  \n  const handleSort = (field) => {\n    if (sortField === field) {\n      const newDirection = sortDirection === 'asc' ? 'desc' : 'asc';\n      setSortDirection(newDirection);\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: newDirection\n      });\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n      onSaveUserSettings?.({\n        ...savedUserSettings,\n        sortField: field,\n        sortDirection: 'asc'\n      });\n    }\n    setCurrentPage(0);\n  };\n  \n  const toggleRowExpansion = (id) => {\n    const newExpanded = new Set(expandedRows);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedRows(newExpanded);\n  };\n  \n  const formatTimestamp = (timestamp) => {\n    if (!timestamp) return '-';\n    const date = new Date(timestamp);\n    return date.toLocaleString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  \n  const formatDuration = (ms) => {\n    if (!ms) return '-';\n    if (ms < 1000) return `${ms}ms`;\n    if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;\n    return `${(ms / 60000).toFixed(1)}m`;\n  };\n  \n  const exportToCSV = () => {\n    console.log('[AIDetailTable] Exporting to CSV');\n    \n    const headers = [\n      'Timestamp',\n      activeTab === 'agents' ? 'Agent' : 'Prompt',\n      'Success',\n      'Tokens',\n      'Cost'\n    ];\n    \n    // Add Duration header only for prompts\n    if (activeTab === 'prompts') {\n      headers.push('Duration');\n    }\n    \n    const rows = sortedData.map(item => {\n      const row = [\n        item[timestampField],\n        item[nameField] || item[idField],\n        item.Success ? 'Yes' : 'No',\n        (item.TotalTokensUsed || item.TokensUsed) || 0,\n        item.TotalCost || 0\n      ];\n      \n      // Add Duration value only for prompts\n      if (activeTab === 'prompts') {\n        row.push(item.ExecutionTimeMS || 0);\n      }\n      \n      return row;\n    });\n    \n    const csv = [\n      headers.join(','),\n      ...rows.map(row => row.join(','))\n    ].join('\\n');\n    \n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `ai-${activeTab}-details-${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  const columns = [\n    { field: timestampField, label: 'Timestamp', width: '150px' },\n    { field: nameField, label: activeTab === 'agents' ? 'Agent' : 'Prompt', width: 'auto' },\n    { field: 'Success', label: 'Status', width: '80px' },\n    { field: 'TotalTokens', label: 'Tokens', width: '100px' },\n    { field: 'TotalCost', label: 'Cost', width: '100px' }\n  ];\n  \n  // Add Duration column only for Prompt Runs (Agent Runs don't have ExecutionTimeMS)\n  if (activeTab === 'prompts') {\n    columns.push({ field: 'ExecutionTimeMS', label: 'Duration', width: '100px' });\n  }\n  \n  return (\n    <div style={{\n      width: '100%',\n      height: '100%',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || '4px',\n      display: 'flex',\n      flexDirection: 'column'\n    }}>\n      {/* Header */}\n      <div style={{\n        padding: styles.spacing.md,\n        borderBottom: `1px solid ${styles.colors.border}`,\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      }}>\n        <h3 style={{\n          margin: 0,\n          color: styles.colors.text,\n          fontSize: styles.typography.fontSize.lg\n        }}>\n          Detailed Records ({sortedData.length})\n        </h3>\n        \n        <button\n          onClick={exportToCSV}\n          style={{\n            padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n            backgroundColor: styles.colors.primary,\n            color: 'white',\n            border: 'none',\n            borderRadius: styles.borders?.radius || '4px',\n            cursor: 'pointer',\n            fontSize: styles.typography.fontSize.sm\n          }}\n        >\n          Export CSV\n        </button>\n      </div>\n      \n      {/* Table */}\n      <div style={{ flex: 1, overflow: 'auto' }}>\n        {paginatedData.length === 0 ? (\n          <div style={{\n            padding: styles.spacing.xl,\n            textAlign: 'center',\n            color: styles.colors.textSecondary\n          }}>\n            No records to display\n          </div>\n        ) : (\n          <table style={{\n            width: '100%',\n            borderCollapse: 'collapse'\n          }}>\n            <thead style={{\n              position: 'sticky',\n              top: 0,\n              backgroundColor: styles.colors.surface,\n              borderBottom: `2px solid ${styles.colors.border}`\n            }}>\n              <tr>\n                <th style={{ width: '30px', padding: styles.spacing.sm }} />\n                {columns.map(col => (\n                  <th\n                    key={col.field}\n                    onClick={() => handleSort(col.field)}\n                    style={{\n                      padding: styles.spacing.sm,\n                      textAlign: 'left',\n                      color: styles.colors.text,\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: '600',\n                      cursor: 'pointer',\n                      userSelect: 'none',\n                      width: col.width\n                    }}\n                  >\n                    <div style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      gap: styles.spacing.xs\n                    }}>\n                      {col.label}\n                      {sortField === col.field && (\n                        <span style={{ fontSize: '10px' }}>\n                          {sortDirection === 'asc' ? '▲' : '▼'}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {paginatedData.map((row, index) => {\n                const isExpanded = expandedRows.has(row.ID);\n                return (\n                  <React.Fragment key={row.ID || index}>\n                    <tr style={{\n                      borderBottom: `1px solid ${styles.colors.border}`,\n                      transition: 'background-color 0.2s',\n                      backgroundColor: index % 2 === 0 ? 'transparent' : styles.colors.background\n                    }}>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        textAlign: 'center'\n                      }}>\n                        <button\n                          onClick={() => toggleRowExpansion(row.ID)}\n                          style={{\n                            background: 'none',\n                            border: 'none',\n                            cursor: 'pointer',\n                            color: styles.colors.textSecondary,\n                            padding: 0,\n                            fontSize: '12px'\n                          }}\n                        >\n                          {isExpanded ? '▼' : '▶'}\n                        </button>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text\n                      }}>\n                        {formatTimestamp(row[timestampField])}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        maxWidth: '200px'\n                      }}>\n                        {row[nameField] || row[idField] || '-'}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm\n                      }}>\n                        <span style={{\n                          display: 'inline-block',\n                          padding: `2px 8px`,\n                          borderRadius: '12px',\n                          backgroundColor: row.Success ? styles.colors.success + '20' : styles.colors.error + '20',\n                          color: row.Success ? styles.colors.success : styles.colors.error,\n                          fontSize: '11px',\n                          fontWeight: '600'\n                        }}>\n                          {row.Success ? 'Success' : 'Failed'}\n                        </span>\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: 'right'\n                      }}>\n                        {(row.TotalTokensUsed || row.TokensUsed) ? (row.TotalTokensUsed || row.TokensUsed).toLocaleString() : '-'}\n                      </td>\n                      <td style={{\n                        padding: styles.spacing.sm,\n                        fontSize: styles.typography.fontSize.sm,\n                        color: styles.colors.text,\n                        textAlign: 'right'\n                      }}>\n                        {row.TotalCost ? `$${row.TotalCost.toFixed(4)}` : '-'}\n                      </td>\n                      {activeTab === 'prompts' && (\n                        <td style={{\n                          padding: styles.spacing.sm,\n                          fontSize: styles.typography.fontSize.sm,\n                          color: styles.colors.text,\n                          textAlign: 'right'\n                        }}>\n                          {formatDuration(row.ExecutionTimeMS)}\n                        </td>\n                      )}\n                    </tr>\n                    {isExpanded && (\n                      <tr>\n                        <td colSpan={columns.length + 1} style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.background,\n                          borderBottom: `1px solid ${styles.colors.border}`\n                        }}>\n                          <div style={{\n                            display: 'grid',\n                            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\n                            gap: styles.spacing.md,\n                            fontSize: styles.typography.fontSize.sm\n                          }}>\n                            <div>\n                              <strong style={{ color: styles.colors.textSecondary }}>ID:</strong>\n                              <div style={{ color: styles.colors.text, fontFamily: 'monospace' }}>\n                                {row.ID}\n                              </div>\n                            </div>\n                            {row.ErrorMessage && (\n                              <div style={{ gridColumn: '1 / -1' }}>\n                                <strong style={{ color: styles.colors.textSecondary }}>Error:</strong>\n                                <div style={{ color: styles.colors.error }}>\n                                  {row.ErrorMessage}\n                                </div>\n                              </div>\n                            )}\n                            {row.Model && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Model:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {row.Model}\n                                </div>\n                              </div>\n                            )}\n                            {row.CompletedAt && (\n                              <div>\n                                <strong style={{ color: styles.colors.textSecondary }}>Completed:</strong>\n                                <div style={{ color: styles.colors.text }}>\n                                  {formatTimestamp(row.CompletedAt)}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </React.Fragment>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n      </div>\n      \n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div style={{\n          padding: styles.spacing.md,\n          borderTop: `1px solid ${styles.colors.border}`,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          gap: styles.spacing.sm\n        }}>\n          <button\n            onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}\n            disabled={currentPage === 0}\n            style={{\n              padding: `${styles.spacing.xs} ${styles.spacing.sm}`,\n              backgroundColor: currentPage === 0 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === 0 ? styles.colors.textSecondary : 'white',\n              border: `1px solid ${styles.colors.border}`,\n              borderRadius: styles.borders?.radius || '4px',\n              cursor: currentPage === 0 ? 'not-allowed' : 'pointer',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Previous\n          </button>\n          \n          <span style={{\n            color: styles.colors.text,\n            fontSize: styles.typography.fontSize.sm\n          }}>\n            Page {currentPage + 1} of {totalPages}\n          </span>\n          \n          <button\n            onClick={() => setCurrentPage(Math.min(totalPages - 1, currentPage + 1))}\n            disabled={currentPage === totalPages - 1}\n            style={{\n              padding: `${styles.spacing.xs} ${styles.spacing.sm}`,\n              backgroundColor: currentPage === totalPages - 1 ? styles.colors.background : styles.colors.primary,\n              color: currentPage === totalPages - 1 ? styles.colors.textSecondary : 'white',\n              border: `1px solid ${styles.colors.border}`,\n              borderRadius: styles.borders?.radius || '4px',\n              cursor: currentPage === totalPages - 1 ? 'not-allowed' : 'pointer',\n              fontSize: styles.typography.fontSize.sm\n            }}\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}