{
  "name": "AIAgentExecutionOverview",
  "title": "AI Agent Execution Overview",
  "description": "Real-time execution monitor with live status indicators, success rate gauges, and execution velocity metrics",
  "type": "chart",
  "functionalRequirements": "Display real-time agent execution status with animated indicators, success rate circular gauges, execution velocity sparklines, and throughput metrics",
  "dataRequirements": null,
  "technicalDesign": "Live monitoring panel with WebSocket updates, circular progress indicators, sparkline charts, and animated status badges",
  "properties": [
    {"name": "agentRuns", "type": "array", "required": true, "description": "Array of agent run objects"},
    {"name": "agentRunSteps", "type": "array", "required": true, "description": "Array of agent run step objects"},
    {"name": "realTimeData", "type": "object", "required": false, "description": "Real-time updates from WebSocket"},
    {"name": "selectedAgentId", "type": "string", "required": false, "description": "Currently selected agent ID for filtering"},
    {"name": "timeRange", "type": "string", "required": true, "description": "Selected time range for data"}
  ],
  "events": [],
  "exampleUsage": "<AIAgentExecutionOverview ... />",
  "code": "function AIAgentExecutionOverview({ \n  agentRuns,\n  agentRunSteps,\n  realTimeData,\n  selectedAgentId,\n  timeRange,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Filter runs if agent selected\n  const filteredRuns = useMemo(() => {\n    if (!selectedAgentId) return agentRuns;\n    return agentRuns.filter(r => r.AgentID === selectedAgentId);\n  }, [agentRuns, selectedAgentId]);\n  \n  // Calculate metrics by status\n  const statusMetrics = useMemo(() => {\n    const running = filteredRuns.filter(r => r.Status === 'Running').length;\n    const completed = filteredRuns.filter(r => r.Status === 'Completed').length;\n    const failed = filteredRuns.filter(r => r.Status === 'Failed').length;\n    const paused = filteredRuns.filter(r => r.Status === 'Paused').length;\n    const cancelled = filteredRuns.filter(r => r.Status === 'Cancelled').length;\n    \n    return { running, completed, failed, paused, cancelled };\n  }, [filteredRuns]);\n  \n  // Calculate success rates by agent\n  const agentSuccessRates = useMemo(() => {\n    const agentStats = {};\n    \n    filteredRuns.forEach(run => {\n      if (!agentStats[run.AgentID]) {\n        agentStats[run.AgentID] = { total: 0, successful: 0, name: run.Agent || 'Unknown' };\n      }\n      agentStats[run.AgentID].total++;\n      if (run.Success) {\n        agentStats[run.AgentID].successful++;\n      }\n    });\n    \n    return Object.entries(agentStats).map(([agentId, stats]) => ({\n      agentId,\n      name: stats.name,\n      successRate: stats.total > 0 ? (stats.successful / stats.total) * 100 : 0,\n      total: stats.total\n    })).sort((a, b) => b.total - a.total).slice(0, 5);\n  }, [filteredRuns]);\n  \n  // Calculate velocity metrics (runs per hour)\n  const velocityData = useMemo(() => {\n    const now = new Date();\n    const hourlyBuckets = [];\n    \n    // Create 24 hour buckets\n    for (let i = 23; i >= 0; i--) {\n      const bucketStart = new Date(now);\n      bucketStart.setHours(now.getHours() - i);\n      bucketStart.setMinutes(0);\n      bucketStart.setSeconds(0);\n      \n      const bucketEnd = new Date(bucketStart);\n      bucketEnd.setHours(bucketStart.getHours() + 1);\n      \n      const runsInBucket = filteredRuns.filter(r => {\n        const runTime = new Date(r.StartedAt);\n        return runTime >= bucketStart && runTime < bucketEnd;\n      }).length;\n      \n      hourlyBuckets.push({\n        hour: bucketStart.getHours(),\n        count: runsInBucket\n      });\n    }\n    \n    return hourlyBuckets;\n  }, [filteredRuns]);\n  \n  // Render circular progress gauge\n  const renderGauge = (value, label, color) => {\n    const radius = 40;\n    const circumference = 2 * Math.PI * radius;\n    const strokeDashoffset = circumference - (value / 100) * circumference;\n    \n    return (\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: styles.spacing.sm\n      }}>\n        <svg width=\"100\" height=\"100\" style={{ transform: 'rotate(-90deg)' }}>\n          <circle\n            cx=\"50\"\n            cy=\"50\"\n            r={radius}\n            stroke={styles.colors.borderLight || styles.colors.border}\n            strokeWidth=\"8\"\n            fill=\"none\"\n          />\n          <circle\n            cx=\"50\"\n            cy=\"50\"\n            r={radius}\n            stroke={color}\n            strokeWidth=\"8\"\n            fill=\"none\"\n            strokeDasharray={circumference}\n            strokeDashoffset={strokeDashoffset}\n            style={{\n              transition: 'stroke-dashoffset 0.5s ease-in-out',\n              strokeLinecap: 'round'\n            }}\n          />\n        </svg>\n        <div style={{\n          position: 'absolute',\n          width: '100px',\n          height: '100px',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            fontWeight: styles.typography.fontWeight?.bold || '700',\n            color: styles.colors.text\n          }}>\n            {value.toFixed(0)}%\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary\n          }}>\n            {label}\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  // Render sparkline\n  const renderSparkline = (data) => {\n    const max = Math.max(...data.map(d => d.count));\n    const width = 200;\n    const height = 40;\n    const barWidth = width / data.length;\n    \n    return (\n      <svg width={width} height={height}>\n        {data.map((d, i) => {\n          const barHeight = max > 0 ? (d.count / max) * height : 0;\n          return (\n            <rect\n              key={i}\n              x={i * barWidth}\n              y={height - barHeight}\n              width={barWidth - 1}\n              height={barHeight}\n              fill={styles.colors.primary}\n              opacity={0.3 + (i / data.length) * 0.7}\n            />\n          );\n        })}\n      </svg>\n    );\n  };\n  \n  return (\n    <div style={{\n      height: '100%',\n      padding: styles.spacing.lg,\n      backgroundColor: styles.colors.background,\n      display: 'flex',\n      gap: styles.spacing.xl\n    }}>\n      {/* Live Status Monitor */}\n      <div style={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: styles.spacing.md\n      }}>\n        <h3 style={{\n          margin: 0,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || '600',\n          color: styles.colors.text\n        }}>\n          Live Status\n        </h3>\n        \n        <div style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))',\n          gap: styles.spacing.sm\n        }}>\n          <div style={{\n            padding: styles.spacing.sm,\n            backgroundColor: styles.colors.surface,\n            borderRadius: getBorderRadius('sm'),\n            borderLeft: `3px solid ${styles.colors.success || styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Running\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.success || styles.colors.primary,\n              display: 'flex',\n              alignItems: 'center',\n              gap: styles.spacing.xs\n            }}>\n              {realTimeData?.activeRuns || statusMetrics.running}\n              {statusMetrics.running > 0 && (\n                <span style={{\n                  display: 'inline-block',\n                  width: '6px',\n                  height: '6px',\n                  backgroundColor: styles.colors.success || styles.colors.primary,\n                  borderRadius: '50%',\n                  animation: 'pulse 1.5s infinite'\n                }} />\n              )}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.sm,\n            backgroundColor: styles.colors.surface,\n            borderRadius: getBorderRadius('sm'),\n            borderLeft: `3px solid ${styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Completed\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.text\n            }}>\n              {statusMetrics.completed}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.sm,\n            backgroundColor: styles.colors.surface,\n            borderRadius: getBorderRadius('sm'),\n            borderLeft: `3px solid ${styles.colors.error || styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Failed\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.error || styles.colors.secondary\n            }}>\n              {statusMetrics.failed}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.sm,\n            backgroundColor: styles.colors.surface,\n            borderRadius: getBorderRadius('sm'),\n            borderLeft: `3px solid ${styles.colors.warning || styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Paused\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.warning || styles.colors.secondary\n            }}>\n              {statusMetrics.paused}\n            </div>\n          </div>\n        </div>\n        \n        {/* Velocity Sparkline */}\n        <div style={{\n          marginTop: 'auto'\n        }}>\n          <div style={{\n            fontSize: styles.typography.fontSize.sm,\n            color: styles.colors.textSecondary,\n            marginBottom: styles.spacing.xs\n          }}>\n            Execution Velocity (24h)\n          </div>\n          {renderSparkline(velocityData)}\n        </div>\n      </div>\n      \n      {/* Success Rate Gauges */}\n      <div style={{\n        display: 'flex',\n        gap: styles.spacing.lg,\n        alignItems: 'center'\n      }}>\n        {agentSuccessRates.slice(0, 3).map((agent, index) => (\n          <div key={agent.agentId} style={{ position: 'relative' }}>\n            {renderGauge(\n              agent.successRate,\n              agent.name.length > 10 ? agent.name.substring(0, 10) + '...' : agent.name,\n              agent.successRate >= 90 ? styles.colors.success : \n              agent.successRate >= 70 ? styles.colors.warning : \n              styles.colors.error\n            )}\n          </div>\n        ))}\n      </div>\n      \n      {/* Current Step Indicators */}\n      <div style={{\n        minWidth: '200px',\n        display: 'flex',\n        flexDirection: 'column',\n        gap: styles.spacing.md\n      }}>\n        <h3 style={{\n          margin: 0,\n          fontSize: styles.typography.fontSize.lg,\n          fontWeight: styles.typography.fontWeight?.semibold || '600',\n          color: styles.colors.text\n        }}>\n          Active Steps\n        </h3>\n        \n        <div style={{\n          flex: 1,\n          overflow: 'auto'\n        }}>\n          {agentRunSteps\n            .filter(step => step.Status === 'Running')\n            .slice(0, 5)\n            .map((step, index) => (\n              <div\n                key={step.ID}\n                style={{\n                  padding: styles.spacing.sm,\n                  marginBottom: styles.spacing.xs,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius('sm'),\n                  borderLeft: `2px solid ${styles.colors.primary}`,\n                  fontSize: styles.typography.fontSize.sm\n                }}\n              >\n                <div style={{\n                  fontWeight: styles.typography.fontWeight?.medium || '500',\n                  color: styles.colors.text,\n                  marginBottom: styles.spacing.xs\n                }}>\n                  {step.StepName}\n                </div>\n                <div style={{\n                  fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  display: 'flex',\n                  justifyContent: 'space-between'\n                }}>\n                  <span>{step.StepType}</span>\n                  <span>Step #{step.StepNumber}</span>\n                </div>\n              </div>\n            ))}\n          {agentRunSteps.filter(step => step.Status === 'Running').length === 0 && (\n            <div style={{\n              padding: styles.spacing.md,\n              textAlign: 'center',\n              color: styles.colors.textSecondary,\n              fontSize: styles.typography.fontSize.sm\n            }}>\n              No active steps\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}