{
  "name": "AITimeSeriesChart",
  "location": "embedded",
  "title": "AI Time Series Chart",
  "description": "Multi-line time series chart with dual Y-axes showing AI runs, token usage, and costs over time",
  "type": "chart",
  "functionalRequirements": "## Time Series Chart Requirements\n\n### Core Functionality\n- Display three data series: total runs, total tokens, total cost\n- Dual Y-axis configuration (left: tokens, right: runs and cost)\n- Interactive tooltips showing all values on hover\n- Click on data points to trigger drill-down\n- Smooth line interpolation with data point markers\n- Legend with series toggle capability\n- Responsive to container size changes\n\n### Visual Features\n- Consistent color coding (runs: blue, tokens: green, cost: orange)\n- Grid lines for better readability\n- Axis labels with appropriate formatting\n- Highlighted selection state for clicked points\n- Animated transitions on data updates\n- Zero-baseline for better comparison",
  "dataRequirements": {
    "mode": "views",
    "description": "Receives aggregated time series data from parent component",
    "entities": [],
    "queries": []
  },
  "technicalDesign": "## Technical Design\n\n### Props\n- data: Array of aggregated data points with date, runs, tokens, cost\n- groupBy: Current grouping (day/week/month/quarter)\n- activeTab: Current view (agents/prompts)\n- selectedPoint: Currently selected data point\n- onPointClick: Callback when point is clicked\n\n### Chart Configuration\n- Uses recharts library for rendering\n- Dual Y-axis setup with synchronized tooltips\n- Custom tick formatters for large numbers\n- Responsive container with aspect ratio preservation",
  "properties": [
    {
      "name": "data",
      "type": "array",
      "required": true,
      "description": "Array of time series data points"
    },
    {
      "name": "groupBy",
      "type": "string",
      "required": true,
      "description": "Time grouping: day, week, month, or quarter"
    },
    {
      "name": "activeTab",
      "type": "string",
      "required": true,
      "description": "Current tab: agents or prompts"
    },
    {
      "name": "selectedPoint",
      "type": "object",
      "required": false,
      "description": "Currently selected data point"
    },
    {
      "name": "onPointClick",
      "type": "function",
      "required": true,
      "description": "Callback when a data point is clicked"
    }
  ],
  "events": [
    {
      "name": "onPointClick",
      "description": "Fired when user clicks on a data point",
      "payload": "Data point object with date and values"
    }
  ],
  "exampleUsage": "<AITimeSeriesChart data={chartData} groupBy=\"day\" activeTab=\"agents\" onPointClick={handleChartClick} />",
  "code": "function AITimeSeriesChart({ data, groupBy, activeTab, selectedPoint, onPointClick, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log('[AITimeSeriesChart] Rendering with', data.length, 'data points');\n  \n  // Format large numbers\n  const formatNumber = (value) => {\n    if (value >= 1000000) {\n      return `${(value / 1000000).toFixed(1)}M`;\n    } else if (value >= 1000) {\n      return `${(value / 1000).toFixed(1)}K`;\n    }\n    return value.toFixed(0);\n  };\n  \n  // Format currency\n  const formatCurrency = (value) => {\n    if (value >= 1000) {\n      return `$${(value / 1000).toFixed(1)}K`;\n    }\n    return `$${value.toFixed(2)}`;\n  };\n  \n  // Format date based on grouping\n  const formatDate = (date) => {\n    const d = new Date(date);\n    switch(groupBy) {\n      case 'day':\n        return d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n      case 'week':\n        return `Week of ${d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`;\n      case 'month':\n        return d.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n      case 'quarter':\n        return date; // Already formatted as YYYY-Q#\n      default:\n        return date;\n    }\n  };\n  \n  // Prepare chart data\n  const chartData = useMemo(() => {\n    return data.map(point => ({\n      ...point,\n      displayDate: formatDate(point.date),\n      isSelected: selectedPoint?.date === point.date\n    }));\n  }, [data, selectedPoint, groupBy]);\n  \n  // Calculate max values for axis domains\n  const maxTokens = useMemo(() => Math.max(...data.map(d => d.tokens || 0)), [data]);\n  const maxRuns = useMemo(() => Math.max(...data.map(d => d.runs || 0)), [data]);\n  const maxCost = useMemo(() => Math.max(...data.map(d => d.cost || 0)), [data]);\n  \n  // Use a simple SVG chart since we can't use external libraries\n  const width = 800;\n  const height = 400;\n  const margin = { top: 20, right: 80, bottom: 60, left: 80 };\n  const innerWidth = width - margin.left - margin.right;\n  const innerHeight = height - margin.top - margin.bottom;\n  \n  // Create scales\n  const xScale = (index) => (index / (chartData.length - 1)) * innerWidth;\n  const yScaleTokens = (value) => innerHeight - (value / maxTokens) * innerHeight;\n  const yScaleRight = (value, max) => innerHeight - (value / max) * innerHeight;\n  \n  // Create path data for lines\n  const createPath = (data, valueKey, scale, max) => {\n    return data.map((d, i) => {\n      const x = xScale(i);\n      const y = scale(d[valueKey] || 0, max);\n      return `${i === 0 ? 'M' : 'L'} ${x} ${y}`;\n    }).join(' ');\n  };\n  \n  const handlePointClick = (point) => {\n    console.log('[AITimeSeriesChart] Point clicked:', point);\n    onPointClick(point);\n  };\n  \n  return (\n    <div style={{\n      width: '100%',\n      height: '100%',\n      backgroundColor: styles.colors.surface,\n      borderRadius: styles.borders?.radius || '4px',\n      padding: styles.spacing.md,\n      display: 'flex',\n      flexDirection: 'column'\n    }}>\n      <h3 style={{\n        margin: `0 0 ${styles.spacing.md} 0`,\n        color: styles.colors.text,\n        fontSize: styles.typography.fontSize.lg\n      }}>\n        Performance Trends - {activeTab === 'agents' ? 'Agent Runs' : 'Prompt Runs'}\n      </h3>\n      \n      {/* Chart Container */}\n      <div style={{ flex: 1, position: 'relative', minHeight: '300px' }}>\n        {chartData.length === 0 ? (\n          <div style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            height: '100%',\n            color: styles.colors.textSecondary\n          }}>\n            No data available for the selected period\n          </div>\n        ) : (\n          <svg\n            viewBox={`0 0 ${width} ${height}`}\n            style={{ width: '100%', height: '100%' }}\n            preserveAspectRatio=\"xMidYMid meet\"\n          >\n            <g transform={`translate(${margin.left}, ${margin.top})`}>\n              {/* Grid lines */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <line\n                  key={tick}\n                  x1={0}\n                  x2={innerWidth}\n                  y1={innerHeight * (1 - tick)}\n                  y2={innerHeight * (1 - tick)}\n                  stroke={styles.colors.border}\n                  strokeOpacity={0.3}\n                  strokeDasharray=\"2,2\"\n                />\n              ))}\n              \n              {/* X-axis labels */}\n              {chartData.map((point, i) => {\n                if (chartData.length > 20 && i % Math.ceil(chartData.length / 10) !== 0) {\n                  return null;\n                }\n                return (\n                  <text\n                    key={i}\n                    x={xScale(i)}\n                    y={innerHeight + 20}\n                    textAnchor=\"middle\"\n                    fill={styles.colors.textSecondary}\n                    fontSize=\"12\"\n                  >\n                    {point.displayDate}\n                  </text>\n                );\n              })}\n              \n              {/* Y-axis labels (left - tokens) */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <text\n                  key={tick}\n                  x={-10}\n                  y={innerHeight * (1 - tick) + 5}\n                  textAnchor=\"end\"\n                  fill={styles.colors.textSecondary}\n                  fontSize=\"12\"\n                >\n                  {formatNumber(maxTokens * tick)}\n                </text>\n              ))}\n              \n              {/* Y-axis labels (right - cost) */}\n              {[0, 0.25, 0.5, 0.75, 1].map(tick => (\n                <text\n                  key={tick}\n                  x={innerWidth + 10}\n                  y={innerHeight * (1 - tick) + 5}\n                  textAnchor=\"start\"\n                  fill={styles.colors.textSecondary}\n                  fontSize=\"12\"\n                >\n                  {formatCurrency(maxCost * tick)}\n                </text>\n              ))}\n              \n              {/* Lines */}\n              <path\n                d={createPath(chartData, 'tokens', yScaleTokens, maxTokens)}\n                fill=\"none\"\n                stroke={styles.colors.success || '#10b981'}\n                strokeWidth=\"2\"\n              />\n              <path\n                d={createPath(chartData, 'runs', yScaleRight, maxRuns)}\n                fill=\"none\"\n                stroke={styles.colors.primary || '#3b82f6'}\n                strokeWidth=\"2\"\n              />\n              <path\n                d={createPath(chartData, 'cost', yScaleRight, maxCost)}\n                fill=\"none\"\n                stroke={styles.colors.warning || '#f59e0b'}\n                strokeWidth=\"2\"\n              />\n              \n              {/* Data points */}\n              {chartData.map((point, i) => (\n                <g key={i}>\n                  {/* Tokens */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleTokens(point.tokens || 0)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.success || '#10b981'}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: 'pointer' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                  {/* Runs */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleRight(point.runs || 0, maxRuns)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.primary || '#3b82f6'}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: 'pointer' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                  {/* Cost */}\n                  <circle\n                    cx={xScale(i)}\n                    cy={yScaleRight(point.cost || 0, maxCost)}\n                    r={point.isSelected ? 6 : 4}\n                    fill={styles.colors.warning || '#f59e0b'}\n                    stroke=\"white\"\n                    strokeWidth=\"2\"\n                    style={{ cursor: 'pointer' }}\n                    onClick={() => handlePointClick(point)}\n                  />\n                </g>\n              ))}\n            </g>\n            \n            {/* Axis labels */}\n            <text\n              x={margin.left - 40}\n              y={height / 2}\n              transform={`rotate(-90, ${margin.left - 40}, ${height / 2})`}\n              textAnchor=\"middle\"\n              fill={styles.colors.textSecondary}\n              fontSize=\"14\"\n            >\n              Tokens\n            </text>\n            <text\n              x={width - margin.right + 40}\n              y={height / 2}\n              transform={`rotate(90, ${width - margin.right + 40}, ${height / 2})`}\n              textAnchor=\"middle\"\n              fill={styles.colors.textSecondary}\n              fontSize=\"14\"\n            >\n              Runs / Cost ($)\n            </text>\n          </svg>\n        )}\n      </div>\n      \n      {/* Legend */}\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        gap: styles.spacing.lg,\n        marginTop: styles.spacing.md\n      }}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.xs }}>\n          <div style={{\n            width: '12px',\n            height: '12px',\n            backgroundColor: styles.colors.primary || '#3b82f6',\n            borderRadius: '2px'\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Runs</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.xs }}>\n          <div style={{\n            width: '12px',\n            height: '12px',\n            backgroundColor: styles.colors.success || '#10b981',\n            borderRadius: '2px'\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Tokens</span>\n        </div>\n        <div style={{ display: 'flex', alignItems: 'center', gap: styles.spacing.xs }}>\n          <div style={{\n            width: '12px',\n            height: '12px',\n            backgroundColor: styles.colors.warning || '#f59e0b',\n            borderRadius: '2px'\n          }} />\n          <span style={{ fontSize: styles.typography.fontSize.sm, color: styles.colors.text }}>Cost</span>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}