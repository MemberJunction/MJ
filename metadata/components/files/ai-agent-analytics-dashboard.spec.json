{
  "name": "AIAgentAnalyticsDashboard",
  "title": "AI Agent Analytics Dashboard",
  "description": "A comprehensive analytics dashboard for monitoring AI agent executions, performance metrics, hierarchical relationships, and step-by-step analysis with real-time updates and interactive visualizations",
  "type": "dashboard",
  "functionalRequirements": "## AI Agent Analytics Dashboard Requirements\n\n### Core Functionality\n- Display real-time agent execution status with live updates\n- Show hierarchical agent relationships and sub-agent orchestration\n- Provide step-by-step execution analysis with timing and success metrics\n- Visualize performance metrics including execution time, token usage, and costs\n- Track agent learning cycles and improvement over time\n- Monitor conversation flows and context compression effectiveness\n- Display error patterns and anomaly detection\n- Support drill-down from high-level metrics to detailed execution logs\n\n### Analytics Features\n- Live execution monitor with WebSocket updates\n- Agent hierarchy tree visualization with execution flow\n- Step type distribution and execution waterfall charts\n- Performance distribution plots and token usage analytics\n- Learning cycle progress tracking\n- Conversation flow network graph\n- Sub-agent orchestration timeline\n- Real-time alerts and SLA monitoring\n\n### UX Considerations\n- Multi-panel layout with coordinated views\n- Interactive filtering across all visualizations\n- Time range selection with comparison capabilities\n- Drill-down navigation to execution details\n- Export functionality for reports and data\n- Responsive design for different screen sizes\n- Dark/light theme support\n- Smooth animations and transitions",
  "dataRequirements": {
    "mode": "dynamic",
    "entities": [
      {
        "name": "AI Agents",
        "description": "Agent definitions and configurations",
        "fields": ["ID", "Name", "Description", "AgentTypeID", "IsActive", "DefaultPromptEffortLevel", "ExposeAsAction", "ParentID"]
      },
      {
        "name": "MJ: AI Agent Runs",
        "description": "Agent execution instances with hierarchical tracking",
        "fields": ["ID", "AgentID", "ParentRunID", "Status", "StartedAt", "CompletedAt", "Success", "ErrorMessage", "ConversationID", "UserID", "Result", "AgentState", "ExecutionTimeMS", "TotalCost", "TotalTokens", "EffortLevel"]
      },
      {
        "name": "MJ: AI Agent Run Steps",
        "description": "Detailed step-by-step execution tracking",
        "fields": ["ID", "AgentRunID", "StepNumber", "StepType", "StepName", "TargetID", "Status", "StartedAt", "CompletedAt", "Success", "ErrorMessage", "Input", "Output", "ExecutionTimeMS", "TokensUsed", "Cost"]
      },
      {
        "name": "AI Agent Relationships",
        "description": "Parent-child agent relationships",
        "fields": ["ID", "AgentID", "SubAgentID", "RelationshipType", "ExecutionOrder", "IsActive"]
      },
      {
        "name": "MJ: AI Prompt Runs",
        "description": "Prompt executions linked to agent runs",
        "fields": ["ID", "AgentRunID", "PromptID", "ModelID", "RunAt", "CompletedAt", "Success", "TokensUsed", "Cost"]
      }
    ]
  },
  "technicalDesign": "## Component Architecture\n\n### Root Component (AIAgentAnalyticsDashboard)\n- Manages overall dashboard state and data loading\n- Coordinates between multiple visualization panels\n- Handles real-time WebSocket connections for live updates\n- Manages time range and filtering state\n\n### Child Components\n1. **AIAgentExecutionOverview**: Top panel with live monitors, success gauges, and velocity metrics\n2. **AIAgentHierarchyTree**: Interactive tree visualization of agent relationships\n3. **AIAgentStepAnalysis**: Step-by-step execution waterfall and distribution charts\n4. **AIAgentPerformanceMetrics**: Performance plots, token usage, and error analysis\n\n### Data Flow\n- Root component establishes WebSocket connection for real-time updates\n- Historical data loaded based on selected time range\n- Filter changes propagate to all child components\n- Selection in one component updates others (coordinated views)\n\n### State Management\n- Selected agent IDs (for filtering)\n- Time range (with comparison period)\n- Active view tab\n- Real-time data buffer\n- User preferences (saved via onSaveUserSettings)",
  "properties": [],
  "events": [],
  "childComponents": [
    {
      "name": "AIAgentExecutionOverview",
      "description": "Live execution monitors and high-level metrics",
      "required": true
    },
    {
      "name": "AIAgentHierarchyTree",
      "description": "Interactive agent relationship visualization",
      "required": true
    },
    {
      "name": "AIAgentStepAnalysis",
      "description": "Step-by-step execution analysis",
      "required": true
    },
    {
      "name": "AIAgentPerformanceMetrics",
      "description": "Performance and cost analytics",
      "required": true
    }
  ],
  "exampleUsage": "<AIAgentAnalyticsDashboard />",
  "code": "function AIAgentAnalyticsDashboard({ utilities, styles, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  // Extract child components\n  const { AIAgentExecutionOverview, AIAgentHierarchyTree, AIAgentStepAnalysis, AIAgentPerformanceMetrics } = components;\n  \n  // Initialize state from saved settings\n  const [selectedAgentId, setSelectedAgentId] = useState(savedUserSettings?.selectedAgentId);\n  const [timeRange, setTimeRange] = useState(savedUserSettings?.timeRange || '24h');\n  const [comparisonPeriod, setComparisonPeriod] = useState(savedUserSettings?.comparisonPeriod || null);\n  const [filters, setFilters] = useState(savedUserSettings?.filters || {});\n  const [activeView, setActiveView] = useState(savedUserSettings?.activeView || 'overview');\n  \n  // Runtime state\n  const [agents, setAgents] = useState([]);\n  const [agentRuns, setAgentRuns] = useState([]);\n  const [agentRunSteps, setAgentRunSteps] = useState([]);\n  const [agentRelationships, setAgentRelationships] = useState([]);\n  const [promptRuns, setPromptRuns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [realTimeData, setRealTimeData] = useState({});\n  const [wsConnection, setWsConnection] = useState(null);\n  \n  // Helper function to get border radius\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Calculate time range dates\n  const getTimeRangeDates = useCallback((range) => {\n    const now = new Date();\n    const start = new Date();\n    \n    switch(range) {\n      case '1h':\n        start.setHours(now.getHours() - 1);\n        break;\n      case '24h':\n        start.setDate(now.getDate() - 1);\n        break;\n      case '7d':\n        start.setDate(now.getDate() - 7);\n        break;\n      case '30d':\n        start.setDate(now.getDate() - 30);\n        break;\n      default:\n        start.setDate(now.getDate() - 1);\n    }\n    \n    return { start, end: now };\n  }, []);\n  \n  // Load dashboard data\n  useEffect(() => {\n    const loadDashboardData = async () => {\n      setLoading(true);\n      const { start, end } = getTimeRangeDates(timeRange);\n      \n      try {\n        // Load agents\n        const agentsResult = await utilities.rv.RunView({\n          EntityName: 'AI Agents',\n          Fields: ['ID', 'Name', 'Description', 'AgentTypeID', 'IsActive', 'DefaultPromptEffortLevel', 'ExposeAsAction', 'ParentID'],\n          OrderBy: 'Name ASC'\n        });\n        \n        if (agentsResult?.Success) {\n          setAgents(agentsResult.Results || []);\n        }\n        \n        // Load agent runs for time period\n        const runsFilter = `StartedAt >= '${start.toISOString()}' AND StartedAt <= '${end.toISOString()}'`;\n        const runsResult = await utilities.rv.RunView({\n          EntityName: 'MJ: AI Agent Runs',\n          Fields: ['ID', 'AgentID', 'ParentRunID', 'Status', 'StartedAt', 'CompletedAt', 'Success', \n                   'ErrorMessage', 'ConversationID', 'UserID', 'Result', 'AgentState', \n                   'ExecutionTimeMS', 'TotalCost', 'TotalTokens', 'EffortLevel'],\n          ExtraFilter: runsFilter,\n          OrderBy: 'StartedAt DESC',\n          MaxRows: 5000\n        });\n        \n        if (runsResult?.Success) {\n          setAgentRuns(runsResult.Results || []);\n          \n          // Load steps for these runs\n          if (runsResult.Results?.length > 0) {\n            const runIds = runsResult.Results.map(r => r.ID);\n            const stepsFilter = `AgentRunID IN ('${runIds.join(\"','\")}')`;\n            \n            const stepsResult = await utilities.rv.RunView({\n              EntityName: 'MJ: AI Agent Run Steps',\n              Fields: ['ID', 'AgentRunID', 'StepNumber', 'StepType', 'StepName', 'TargetID', \n                       'Status', 'StartedAt', 'CompletedAt', 'Success', 'ErrorMessage', \n                       'Input', 'Output', 'ExecutionTimeMS', 'TokensUsed', 'Cost'],\n              ExtraFilter: stepsFilter,\n              OrderBy: 'AgentRunID, StepNumber',\n              MaxRows: 10000\n            });\n            \n            if (stepsResult?.Success) {\n              setAgentRunSteps(stepsResult.Results || []);\n            }\n          }\n        }\n        \n        // Load agent relationships\n        const relationshipsResult = await utilities.rv.RunView({\n          EntityName: 'AI Agent Relationships',\n          Fields: ['ID', 'AgentID', 'SubAgentID', 'RelationshipType', 'ExecutionOrder', 'IsActive'],\n          OrderBy: 'ExecutionOrder ASC'\n        });\n        \n        if (relationshipsResult?.Success) {\n          setAgentRelationships(relationshipsResult.Results || []);\n        }\n        \n        // Load prompt runs\n        const promptRunsFilter = `RunAt >= '${start.toISOString()}' AND RunAt <= '${end.toISOString()}'`;\n        const promptRunsResult = await utilities.rv.RunView({\n          EntityName: 'MJ: AI Prompt Runs',\n          Fields: ['ID', 'AgentRunID', 'PromptID', 'ModelID', 'RunAt', 'CompletedAt', \n                   'Success', 'TokensUsed', 'Cost'],\n          ExtraFilter: promptRunsFilter,\n          OrderBy: 'RunAt DESC',\n          MaxRows: 5000\n        });\n        \n        if (promptRunsResult?.Success) {\n          setPromptRuns(promptRunsResult.Results || []);\n        }\n      } catch (error) {\n        console.error('Error loading dashboard data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadDashboardData();\n  }, [timeRange, filters, utilities.rv, getTimeRangeDates]);\n  \n  // Set up WebSocket for real-time updates\n  useEffect(() => {\n    // This would connect to a real-time data source\n    // For now, we'll simulate with periodic updates\n    const interval = setInterval(() => {\n      // Simulate real-time updates\n      setRealTimeData(prev => ({\n        ...prev,\n        lastUpdate: new Date(),\n        activeRuns: Math.floor(Math.random() * 20)\n      }));\n    }, 5000);\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  // Handle agent selection\n  const handleSelectAgent = useCallback((agentId) => {\n    setSelectedAgentId(agentId);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      selectedAgentId: agentId\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle time range change\n  const handleTimeRangeChange = useCallback((range) => {\n    setTimeRange(range);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      timeRange: range\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters) => {\n    setFilters(newFilters);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      filters: newFilters\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Handle view change\n  const handleViewChange = useCallback((view) => {\n    setActiveView(view);\n    onSaveUserSettings?.({\n      ...savedUserSettings,\n      activeView: view\n    });\n  }, [savedUserSettings, onSaveUserSettings]);\n  \n  // Calculate aggregate metrics\n  const metrics = useMemo(() => {\n    const totalRuns = agentRuns.length;\n    const successfulRuns = agentRuns.filter(r => r.Success).length;\n    const failedRuns = agentRuns.filter(r => r.Success === false).length;\n    const runningRuns = agentRuns.filter(r => r.Status === 'Running').length;\n    const avgExecutionTime = agentRuns.reduce((sum, r) => sum + (r.ExecutionTimeMS || 0), 0) / (totalRuns || 1);\n    const totalCost = agentRuns.reduce((sum, r) => sum + (r.TotalCost || 0), 0);\n    const totalTokens = agentRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return {\n      totalRuns,\n      successfulRuns,\n      failedRuns,\n      runningRuns,\n      successRate: totalRuns > 0 ? (successfulRuns / totalRuns) * 100 : 0,\n      avgExecutionTime,\n      totalCost,\n      totalTokens\n    };\n  }, [agentRuns]);\n  \n  if (loading && agentRuns.length === 0) {\n    return (\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        fontSize: styles.typography.fontSize.lg,\n        color: styles.colors.textSecondary\n      }}>\n        Loading AI Agent Analytics...\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{\n      height: '100vh',\n      backgroundColor: styles.colors.background,\n      display: 'flex',\n      flexDirection: 'column',\n      overflow: 'hidden'\n    }}>\n      {/* Header */}\n      <div style={{\n        padding: styles.spacing.lg,\n        backgroundColor: styles.colors.surface,\n        borderBottom: `1px solid ${styles.colors.border}`,\n        flexShrink: 0\n      }}>\n        <div style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: styles.spacing.md\n        }}>\n          <h1 style={{\n            margin: 0,\n            fontSize: styles.typography.fontSize.xxl || styles.typography.fontSize.xl,\n            fontWeight: styles.typography.fontWeight?.bold || '700',\n            color: styles.colors.text\n          }}>\n            AI Agent Analytics Dashboard\n          </h1>\n          \n          {/* Time Range Selector */}\n          <div style={{\n            display: 'flex',\n            gap: styles.spacing.sm,\n            alignItems: 'center'\n          }}>\n            <span style={{\n              fontSize: styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary\n            }}>\n              Time Range:\n            </span>\n            {['1h', '24h', '7d', '30d'].map(range => (\n              <button\n                key={range}\n                onClick={() => handleTimeRangeChange(range)}\n                style={{\n                  padding: `${styles.spacing.sm} ${styles.spacing.md}`,\n                  backgroundColor: timeRange === range ? styles.colors.primary : styles.colors.background,\n                  color: timeRange === range ? 'white' : styles.colors.text,\n                  border: `1px solid ${styles.colors.border}`,\n                  borderRadius: getBorderRadius('sm'),\n                  cursor: 'pointer',\n                  fontSize: styles.typography.fontSize.sm,\n                  transition: 'all 0.2s'\n                }}\n              >\n                {range === '1h' ? 'Last Hour' : range === '24h' ? 'Last 24 Hours' : range === '7d' ? 'Last 7 Days' : 'Last 30 Days'}\n              </button>\n            ))}\n          </div>\n        </div>\n        \n        {/* Quick Stats */}\n        <div style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',\n          gap: styles.spacing.md\n        }}>\n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius('sm'),\n            borderLeft: `3px solid ${styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Total Runs\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.text\n            }}>\n              {metrics.totalRuns.toLocaleString()}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius('sm'),\n            borderLeft: `3px solid ${styles.colors.success || styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Success Rate\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: metrics.successRate >= 90 ? styles.colors.success : metrics.successRate >= 70 ? styles.colors.warning : styles.colors.error\n            }}>\n              {metrics.successRate.toFixed(1)}%\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius('sm'),\n            borderLeft: `3px solid ${styles.colors.info || styles.colors.primary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Avg Time\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.text\n            }}>\n              {(metrics.avgExecutionTime / 1000).toFixed(2)}s\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius('sm'),\n            borderLeft: `3px solid ${styles.colors.warning || styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Total Cost\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.text\n            }}>\n              ${metrics.totalCost.toFixed(2)}\n            </div>\n          </div>\n          \n          <div style={{\n            padding: styles.spacing.md,\n            backgroundColor: styles.colors.background,\n            borderRadius: getBorderRadius('sm'),\n            borderLeft: `3px solid ${styles.colors.secondary}`\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n              color: styles.colors.textSecondary,\n              marginBottom: styles.spacing.xs\n            }}>\n              Active Now\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.xl,\n              fontWeight: styles.typography.fontWeight?.bold || '700',\n              color: styles.colors.primary,\n              display: 'flex',\n              alignItems: 'center',\n              gap: styles.spacing.xs\n            }}>\n              {realTimeData.activeRuns || metrics.runningRuns}\n              <span style={{\n                display: 'inline-block',\n                width: '8px',\n                height: '8px',\n                backgroundColor: styles.colors.success || styles.colors.primary,\n                borderRadius: '50%',\n                animation: 'pulse 2s infinite'\n              }} />\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Main Content Area */}\n      <div style={{\n        flex: 1,\n        display: 'flex',\n        overflow: 'hidden'\n      }}>\n        {/* Left Panel - Hierarchy Tree */}\n        <div style={{\n          width: '300px',\n          borderRight: `1px solid ${styles.colors.border}`,\n          overflow: 'auto',\n          backgroundColor: styles.colors.surface\n        }}>\n          {AIAgentHierarchyTree && (\n            <AIAgentHierarchyTree\n              agents={agents}\n              agentRuns={agentRuns}\n              agentRelationships={agentRelationships}\n              selectedAgentId={selectedAgentId}\n              onSelectAgent={handleSelectAgent}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings?.hierarchyTree}\n              onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                ...savedUserSettings,\n                hierarchyTree: settings\n              })}\n            />\n          )}\n        </div>\n        \n        {/* Center Panel - Main Visualizations */}\n        <div style={{\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden'\n        }}>\n          {/* Execution Overview */}\n          <div style={{\n            height: '200px',\n            borderBottom: `1px solid ${styles.colors.border}`,\n            overflow: 'hidden'\n          }}>\n            {AIAgentExecutionOverview && (\n              <AIAgentExecutionOverview\n                agentRuns={agentRuns}\n                agentRunSteps={agentRunSteps}\n                realTimeData={realTimeData}\n                selectedAgentId={selectedAgentId}\n                timeRange={timeRange}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.executionOverview}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  executionOverview: settings\n                })}\n              />\n            )}\n          </div>\n          \n          {/* Step Analysis */}\n          <div style={{\n            flex: 1,\n            overflow: 'auto'\n          }}>\n            {AIAgentStepAnalysis && (\n              <AIAgentStepAnalysis\n                agentRunSteps={agentRunSteps}\n                agentRuns={agentRuns}\n                selectedAgentId={selectedAgentId}\n                utilities={utilities}\n                styles={styles}\n                components={components}\n                callbacks={callbacks}\n                savedUserSettings={savedUserSettings?.stepAnalysis}\n                onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                  ...savedUserSettings,\n                  stepAnalysis: settings\n                })}\n              />\n            )}\n          </div>\n        </div>\n        \n        {/* Right Panel - Performance Metrics */}\n        <div style={{\n          width: '350px',\n          borderLeft: `1px solid ${styles.colors.border}`,\n          overflow: 'auto',\n          backgroundColor: styles.colors.surface\n        }}>\n          {AIAgentPerformanceMetrics && (\n            <AIAgentPerformanceMetrics\n              agentRuns={agentRuns}\n              agentRunSteps={agentRunSteps}\n              promptRuns={promptRuns}\n              selectedAgentId={selectedAgentId}\n              timeRange={timeRange}\n              utilities={utilities}\n              styles={styles}\n              components={components}\n              callbacks={callbacks}\n              savedUserSettings={savedUserSettings?.performanceMetrics}\n              onSaveUserSettings={(settings) => onSaveUserSettings?.({\n                ...savedUserSettings,\n                performanceMetrics: settings\n              })}\n            />\n          )}\n        </div>\n      </div>\n      \n      {/* CSS for pulse animation */}\n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      `}</style>\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}