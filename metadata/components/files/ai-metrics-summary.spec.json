{
  "name": "AIMetricsSummary",
  "location": "embedded", 
  "title": "AI Metrics Summary",
  "description": "Summary cards displaying key performance metrics for the selected time period",
  "type": "other",
  "functionalRequirements": "## Metrics Summary Requirements\n\n### Core Functionality\n- Display key metrics in card format\n- Show total runs, tokens, and costs\n- Calculate averages per run\n- Display success rate percentage\n- Show trend indicators (up/down from previous period)\n- Responsive card layout\n\n### Visual Features\n- Color-coded metric cards\n- Icon indicators for each metric\n- Animated number transitions\n- Hover effects for additional info",
  "dataRequirements": {
    "mode": "views",
    "description": "Receives calculated metrics from parent component",
    "entities": [],
    "queries": []
  },
  "technicalDesign": "## Technical Design\n\n### Props\n- metrics: Object with calculated metric values\n\n### Card Layout\n- Responsive grid of metric cards\n- Each card shows metric name, value, and trend\n- Consistent styling with theme",
  "properties": [
    {
      "name": "metrics",
      "type": "object",
      "required": true,
      "description": "Calculated metrics object with totalRuns, totalTokens, totalCost, etc."
    }
  ],
  "events": [],
  "exampleUsage": "<AIMetricsSummary metrics={metrics} />",
  "code": "function AIMetricsSummary({ metrics, styles, utilities, components, callbacks, savedUserSettings, onSaveUserSettings }) {\n  console.log('[AIMetricsSummary] Rendering metrics:', metrics);\n  \n  const formatNumber = (value) => {\n    if (value >= 1000000) {\n      return `${(value / 1000000).toFixed(2)}M`;\n    } else if (value >= 1000) {\n      return `${(value / 1000).toFixed(1)}K`;\n    }\n    return value.toLocaleString();\n  };\n  \n  const formatCurrency = (value) => {\n    if (value >= 1000) {\n      return `$${(value / 1000).toFixed(2)}K`;\n    }\n    return `$${value.toFixed(2)}`;\n  };\n  \n  const metricCards = [\n    {\n      label: 'Total Runs',\n      value: formatNumber(metrics.totalRuns || 0),\n      color: styles.colors.primary,\n      icon: '▶',\n      description: 'Total execution count'\n    },\n    {\n      label: 'Total Tokens',\n      value: formatNumber(metrics.totalTokens || 0),\n      color: styles.colors.success,\n      icon: '◆',\n      description: 'Tokens consumed'\n    },\n    {\n      label: 'Total Cost',\n      value: formatCurrency(metrics.totalCost || 0),\n      color: styles.colors.warning,\n      icon: '$',\n      description: 'Total spend'\n    },\n    {\n      label: 'Avg Tokens/Run',\n      value: formatNumber(metrics.avgTokensPerRun || 0),\n      color: styles.colors.info || styles.colors.primary,\n      icon: '⊙',\n      description: 'Average token usage'\n    },\n    {\n      label: 'Avg Cost/Run',\n      value: formatCurrency(metrics.avgCostPerRun || 0),\n      color: styles.colors.secondary,\n      icon: '¢',\n      description: 'Average cost per execution'\n    }\n  ];\n  \n  return (\n    <div style={{\n      display: 'grid',\n      gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',\n      gap: styles.spacing.md,\n      marginBottom: styles.spacing.lg\n    }}>\n      {metricCards.map((card, index) => (\n        <div\n          key={index}\n          style={{\n            backgroundColor: styles.colors.surface,\n            borderRadius: styles.borders?.radius || '4px',\n            padding: styles.spacing.md,\n            borderLeft: `3px solid ${card.color}`,\n            transition: 'transform 0.2s, box-shadow 0.2s',\n            cursor: 'default',\n            position: 'relative'\n          }}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = 'translateY(-2px)';\n            e.currentTarget.style.boxShadow = `0 4px 12px ${styles.colors.border}40`;\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = 'translateY(0)';\n            e.currentTarget.style.boxShadow = 'none';\n          }}\n          title={card.description}\n        >\n          <div style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            marginBottom: styles.spacing.xs\n          }}>\n            <div style={{\n              fontSize: styles.typography.fontSize.xs,\n              color: styles.colors.textSecondary,\n              fontWeight: '500'\n            }}>\n              {card.label}\n            </div>\n            <div style={{\n              fontSize: styles.typography.fontSize.lg,\n              color: card.color,\n              opacity: 0.3\n            }}>\n              {card.icon}\n            </div>\n          </div>\n          <div style={{\n            fontSize: styles.typography.fontSize.xl,\n            color: styles.colors.text,\n            fontWeight: '700'\n          }}>\n            {card.value}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}",
  "dependencies": [],
  "libraries": []
}