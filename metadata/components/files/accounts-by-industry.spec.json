{
  "name": "AccountsByIndustry",
  "title": "Accounts by Industry",
  "description": "Interactive pie chart showing distribution of CRM accounts by industry with drill-down capability to view detailed account lists and individual account information",
  "type": "dashboard",
  "location": "embedded",
  "functionalRequirements": "## Accounts by Industry Dashboard\n\n### Core Functionality\n- Display an interactive pie chart showing account distribution across industries\n- Calculate and show percentages for each industry segment\n- Support click-to-filter: clicking a pie slice filters the account list below\n- Display filtered account list with key information (name, revenue, status)\n- Enable row selection to view detailed account information in a slide-in panel\n- Provide sorting capabilities on all columns (client-side)\n- Implement pagination for large datasets (server-side via RunView)\n- Include an 'Open' button on account details to trigger OpenEntityRecord callback\n- Remember user's last selected industry and sort preferences\n\n### Visual Features\n- Smooth hover animations on pie slices with tooltips\n- Highlighted state for selected pie slice\n- Color-coded legend with industry names and counts\n- Responsive layout adapting to different screen sizes\n- Loading states during data fetching\n- Empty states with helpful messages\n- Smooth slide-in animation for detail panel\n\n### Interactive Elements\n- Click pie slice to select/deselect and filter accounts\n- Click legend items to toggle slice visibility\n- Sort columns by clicking headers\n- Select account rows to view details\n- Close detail panel via X button or clicking outside\n- Pagination controls for navigating large datasets",
  "@include.data": "../shared/crm-accounts-data.json",
  "technicalDesign": "## Technical Architecture\n\n### Component Structure\n- **Root Component (AccountsByIndustry)**: Manages overall state and data loading\n- **PieChart (inline)**: Chart.js-based interactive pie visualization\n- **AccountList (inline)**: Filtered, sortable table with pagination\n- **AccountDetails (inline)**: Sliding panel with comprehensive account info\n\n### State Management\n- Selected industry (persisted in savedUserSettings)\n- Sort configuration (field, direction) (persisted)\n- Current page number\n- Selected account ID\n- Detail panel visibility\n- Loading states for async operations\n\n### Data Flow\n1. Load all accounts via RunView on mount\n2. Group accounts by Industry field client-side\n3. Calculate percentages and prepare chart data\n4. Render pie chart with Chart.js\n5. Filter account list based on selected slice\n6. Load account details when row selected\n7. Persist user preferences via onSaveUserSettings\n\n### Performance Optimizations\n- Use React.memo for chart component\n- Implement useMemo for data grouping\n- Client-side filtering/sorting to reduce server calls\n- Virtual scrolling for very large lists (future)",
  "properties": [
    { 
      "name": "maxIndustries",
      "type": "number",
      "required": false,
      "description": "Maximum number of industries to show in pie chart (others grouped)",
      "defaultValue": 10
    },
    {
      "name": "showOthers",
      "type": "boolean",
      "required": false,
      "description": "Whether to group small segments into 'Others' category",
      "defaultValue": true
    },
    {
      "name": "pageSize",
      "type": "number",
      "required": false,
      "description": "Number of accounts to show per page in the list",
      "defaultValue": 10
    },
    {
      "name": "colorScheme",
      "type": "string",
      "required": false,
      "description": "Color palette for the pie chart (default, vibrant, pastel)",
      "defaultValue": "default"
    }
  ],
  "@include.libraries": "../shared/chart-libraries.json",
  "dependencies": [
    "@include:accounts-by-industry-chart.spec.json",
    "@include:accounts-by-industry-list.spec.json",
    "@include:accounts-by-industry-details.spec.json"
  ],
  "exampleUsage": "<AccountsByIndustry \n  utilities={utilities}\n  styles={styles}\n  components={components}\n  callbacks={callbacks}\n  savedUserSettings={savedUserSettings}\n  onSaveUserSettings={onSaveUserSettings}\n  maxIndustries={8}\n  pageSize={15}\n  colorScheme=\"vibrant\"\n/>",
  "code": "const AccountsByIndustry = (props) => {\n  const { utilities, styles, callbacks, savedUserSettings, onSaveUserSettings, components } = props;\n  \n  // Get child components from registry\n  const AccountsByIndustryChart = components?.AccountsByIndustryChart;\n  const AccountsByIndustryList = components?.AccountsByIndustryList;\n  const AccountsByIndustryDetails = components?.AccountsByIndustryDetails;\n  \n  // Optional custom props with defaults\n  const maxIndustries = props.maxIndustries || 10;\n  const showOthers = props.showOthers !== false;\n  const pageSize = props.pageSize || 10;\n  const colorScheme = props.colorScheme || 'default';\n  \n  // State management\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedIndustry, setSelectedIndustry] = useState(\n    savedUserSettings?.selectedIndustry || null\n  );\n  const [sortConfig, setSortConfig] = useState(\n    savedUserSettings?.sortConfig || { field: 'AccountName', direction: 'asc' }\n  );\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [showDetails, setShowDetails] = useState(false);\n  \n  // Load accounts data\n  useEffect(() => {\n    loadAccounts();\n  }, []);\n  \n  const loadAccounts = async () => {\n    setLoading(true);\n    try {\n      console.log('[AccountsByIndustry] Loading accounts...');\n      const result = await utilities.rv.RunView({\n        EntityName: 'Accounts',\n        ExtraFilter: 'IsActive = 1',\n        OrderBy: 'AccountName',\n        ResultType: 'entity_object'\n      });\n      \n      if (result.Success && result.Results) {\n        console.log('[AccountsByIndustry] Loaded', result.Results.length, 'accounts');\n        setAccounts(result.Results);\n      } else {\n        console.error('[AccountsByIndustry] Failed to load accounts:', result.ErrorMessage);\n      }\n    } catch (error) {\n      console.error('[AccountsByIndustry] Error loading accounts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Group accounts by industry\n  const industryData = useMemo(() => {\n    const grouped = {};\n    accounts.forEach(account => {\n      const industry = account.Industry || 'Unknown';\n      grouped[industry] = (grouped[industry] || 0) + 1;\n    });\n    \n    // Sort by count and apply max industries limit\n    const sorted = Object.entries(grouped)\n      .sort((a, b) => b[1] - a[1]);\n    \n    let industries = sorted;\n    let othersCount = 0;\n    \n    if (showOthers && sorted.length > maxIndustries) {\n      industries = sorted.slice(0, maxIndustries - 1);\n      othersCount = sorted.slice(maxIndustries - 1).reduce((sum, [_, count]) => sum + count, 0);\n      if (othersCount > 0) {\n        industries.push(['Others', othersCount]);\n      }\n    }\n    \n    return {\n      labels: industries.map(([industry]) => industry),\n      data: industries.map(([_, count]) => count),\n      percentages: industries.map(([_, count]) => \n        ((count / accounts.length) * 100).toFixed(1)\n      ),\n      total: accounts.length\n    };\n  }, [accounts, maxIndustries, showOthers]);\n  \n  // Handle pie slice click\n  const handleSliceClick = (industry) => {\n    const newSelection = selectedIndustry === industry ? null : industry;\n    setSelectedIndustry(newSelection);\n    setCurrentPage(1);\n    \n    if (onSaveUserSettings) {\n      onSaveUserSettings({ \n        ...savedUserSettings, \n        selectedIndustry: newSelection \n      });\n    }\n  };\n  \n  // Filter and sort accounts\n  const displayAccounts = useMemo(() => {\n    let filtered = selectedIndustry\n      ? accounts.filter(a => (a.Industry || 'Unknown') === selectedIndustry)\n      : [];\n    \n    // Apply sorting\n    if (filtered.length > 0 && sortConfig.field) {\n      filtered.sort((a, b) => {\n        const aVal = a[sortConfig.field];\n        const bVal = b[sortConfig.field];\n        \n        if (aVal === null || aVal === undefined) return 1;\n        if (bVal === null || bVal === undefined) return -1;\n        \n        const comparison = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n        return sortConfig.direction === 'asc' ? comparison : -comparison;\n      });\n    }\n    \n    return filtered;\n  }, [accounts, selectedIndustry, sortConfig]);\n  \n  // Handle sort\n  const handleSort = (field) => {\n    const newDirection = \n      sortConfig.field === field && sortConfig.direction === 'asc' ? 'desc' : 'asc';\n    const newConfig = { field, direction: newDirection };\n    setSortConfig(newConfig);\n    \n    if (onSaveUserSettings) {\n      onSaveUserSettings({ \n        ...savedUserSettings, \n        sortConfig: newConfig \n      });\n    }\n  };\n  \n  // Handle account selection\n  const handleAccountClick = (account) => {\n    setSelectedAccount(account);\n    setShowDetails(true);\n  };\n  \n  // Handle open record\n  const handleOpenRecord = () => {\n    if (callbacks?.OpenEntityRecord && selectedAccount) {\n      callbacks.OpenEntityRecord({\n        entityName: 'Accounts',\n        recordId: selectedAccount.ID\n      });\n    }\n  };\n  \n  // Handle clear filter\n  const handleClearFilter = () => {\n    handleSliceClick(selectedIndustry);\n  };\n  \n  // Render loading state\n  if (loading) {\n    return (\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '400px',\n        fontSize: '16px',\n        color: '#6B7280'\n      }}>\n        Loading accounts data...\n      </div>\n    );\n  }\n  \n  // Render empty state\n  if (accounts.length === 0) {\n    return (\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '400px',\n        color: '#6B7280'\n      }}>\n        <div style={{ fontSize: '48px', marginBottom: '16px' }}>📊</div>\n        <div style={{ fontSize: '18px', fontWeight: '600' }}>No Accounts Found</div>\n        <div style={{ fontSize: '14px', marginTop: '8px' }}>No active accounts available to display</div>\n      </div>\n    );\n  }\n  \n  return (\n    <div style={{ padding: '24px', backgroundColor: '#fff', borderRadius: '8px' }}>\n      {/* Header */}\n      <div style={{ marginBottom: '24px' }}>\n        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#111827', marginBottom: '8px' }}>\n          📊 Accounts by Industry\n        </h2>\n        <div style={{ fontSize: '14px', color: '#6B7280' }}>\n          Total: {accounts.length} accounts across {industryData.labels.length} industries\n        </div>\n      </div>\n      \n      {/* Chart Container */}\n      <div style={{ height: '400px', marginBottom: '32px', position: 'relative' }}>\n        {AccountsByIndustryChart && (\n          <AccountsByIndustryChart\n            industryData={industryData}\n            selectedIndustry={selectedIndustry}\n            onSliceClick={handleSliceClick}\n            colorScheme={colorScheme}\n          />\n        )}\n      </div>\n      \n      {/* Account List */}\n      {AccountsByIndustryList && (\n        <AccountsByIndustryList\n          accounts={displayAccounts}\n          selectedIndustry={selectedIndustry}\n          sortConfig={sortConfig}\n          onSort={handleSort}\n          onAccountClick={handleAccountClick}\n          currentPage={currentPage}\n          pageSize={pageSize}\n          onPageChange={setCurrentPage}\n          onClearFilter={handleClearFilter}\n        />\n      )}\n      \n      {/* Detail Panel */}\n      {AccountsByIndustryDetails && (\n        <AccountsByIndustryDetails\n          account={selectedAccount}\n          isOpen={showDetails}\n          onClose={() => setShowDetails(false)}\n          onOpenRecord={handleOpenRecord}\n        />\n      )}\n    </div>\n  );\n};"
}