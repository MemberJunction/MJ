{
  "name": "AIModelDetails",
  "title": "AI Model Details",
  "description": "Sliding details panel showing comprehensive model information, vendors, and usage statistics",
  "type": "detail",
  "functionalRequirements": "Show model specs, vendor associations grouped by type, usage statistics, and open record button",
  "dataRequirements": null,
  "technicalDesign": "",
  "properties": [
    {"name": "model", "type": "object", "required": false, "description": "The selected AI model object"},
    {"name": "vendors", "type": "array", "required": true, "description": "Array of vendors associated with the model"},
    {"name": "promptRuns", "type": "array", "required": true, "description": "Array of prompt runs for this model"},
    {"name": "isOpen", "type": "boolean", "required": true, "description": "Whether the details panel is open"}
  ],
  "events": [ 
    {"name": "onClose", "description": "Fired when the details panel should close", "parameters": []},
    {"name": "onOpenRecord", "description": "Fired when the open record button is clicked", "parameters": [{"name": "modelName", "type": "string", "description": "Name of the model to open"}]}
  ],
  "exampleUsage": "<AIModelDetails ... />",
  "code": "function AIModelDetails({ \n  model, \n  vendors,\n  promptRuns,\n  isOpen, \n  onClose, \n  onOpenRecord,\n  utilities, \n  styles, \n  components, \n  callbacks, \n  savedUserSettings, \n  onSaveUserSettings \n}) {\n  // Helper function to get border radius value\n  const getBorderRadius = (size) => {\n    return typeof styles.borders?.radius === 'object' ? styles.borders.radius[size] : styles.borders?.radius || '4px';\n  };\n  \n  // Handle escape key to close panel\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose?.();\n      }\n    };\n    \n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen, onClose]);\n  \n  // Handle open record button\n  const handleOpenRecord = useCallback(() => {\n    console.log('AIModelDetails handleOpenRecord called', { model, onOpenRecord });\n    if (model?.Name) {\n      console.log('Calling onOpenRecord with model name:', model.Name);\n      if (onOpenRecord) {\n        onOpenRecord(model.Name);\n      } else {\n        console.error('onOpenRecord callback is not defined');\n      }\n    } else {\n      console.error('No model or model name available');\n    }\n  }, [model, onOpenRecord]);\n  \n  // Format token limit\n  const formatTokens = (tokens) => {\n    if (!tokens) return '-';\n    if (tokens >= 1000000) return `${(tokens / 1000000).toFixed(1)}M`;\n    if (tokens >= 1000) return `${(tokens / 1000).toFixed(0)}K`;\n    return tokens.toString();\n  };\n  \n  // Render status badge\n  const renderStatusBadge = (status) => {\n    const statusColors = {\n      'Active': styles.colors.success || styles.colors.primary,\n      'Inactive': styles.colors.warning || styles.colors.secondary,\n      'Deprecated': styles.colors.error || styles.colors.secondary,\n      'Preview': styles.colors.info || styles.colors.primary\n    };\n    \n    const color = statusColors[status] || styles.colors.textSecondary;\n    \n    return (\n      <span style={{\n        display: 'inline-block',\n        padding: `${styles.spacing.xs} ${styles.spacing.sm}`,\n        backgroundColor: color + '15',\n        color: color,\n        borderRadius: getBorderRadius('sm'),\n        fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n        fontWeight: styles.typography.fontWeight?.medium || '500'\n      }}>\n        {status}\n      </span>\n    );\n  };\n  \n  // Render vendor type icon\n  const renderVendorTypeIcon = (type) => {\n    const icons = {\n      'Model Developer': '\ud83c\udfe2',\n      'Inference Provider': '\ud83d\ude80'\n    };\n    \n    return (\n      <span style={{\n        display: 'inline-block',\n        marginRight: styles.spacing.xs,\n        fontSize: styles.typography.fontSize.md\n      }}>\n        {icons[type] || '\ud83d\udce6'}\n      </span>\n    );\n  };\n  \n  // Calculate prompt statistics\n  const calculatePromptStats = useCallback(() => {\n    if (!promptRuns || promptRuns.length === 0) {\n      return {\n        totalRuns: 0,\n        successfulRuns: 0,\n        failedRuns: 0,\n        avgExecutionTime: 0,\n        totalTokens: 0,\n        uniquePrompts: 0\n      };\n    }\n    \n    const stats = {\n      totalRuns: promptRuns.length,\n      successfulRuns: promptRuns.filter(r => r.Status === 'Success' || r.Status === 'Completed').length,\n      failedRuns: promptRuns.filter(r => r.Status === 'Failed' || r.Status === 'Error').length,\n      avgExecutionTime: 0,\n      totalTokens: 0,\n      uniquePrompts: new Set(promptRuns.map(r => r.PromptID)).size\n    };\n    \n    const validTimes = promptRuns\n      .filter(r => r.TotalExecutionTime)\n      .map(r => r.TotalExecutionTime);\n    \n    if (validTimes.length > 0) {\n      stats.avgExecutionTime = validTimes.reduce((a, b) => a + b, 0) / validTimes.length;\n    }\n    \n    stats.totalTokens = promptRuns.reduce((sum, r) => sum + (r.TotalTokens || 0), 0);\n    \n    return stats;\n  }, [promptRuns]);\n  \n  const stats = calculatePromptStats();\n  \n  // Group vendors by type\n  const vendorsByType = useMemo(() => {\n    const grouped = {\n      'Model Developer': [],\n      'Inference Provider': []\n    };\n    \n    vendors.forEach(v => {\n      if (grouped[v.Type]) {\n        grouped[v.Type].push(v);\n      }\n    });\n    \n    return grouped;\n  }, [vendors]);\n  \n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          onClick={onClose}\n          style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(0, 0, 0, 0.3)',\n            zIndex: 99999,\n            opacity: isOpen ? 1 : 0,\n            transition: 'opacity 0.3s',\n            pointerEvents: isOpen ? 'auto' : 'none'\n          }}\n        />\n      )}\n      \n      {/* Panel */}\n      <div style={{\n        position: 'fixed',\n        top: '75px',\n        right: 0,\n        bottom: 0,\n        width: '520px',\n        backgroundColor: styles.colors.background,\n        boxShadow: isOpen ? `-4px 0 24px ${styles.colors.shadow || 'rgba(0, 0, 0, 0.1)'}` : 'none',\n        transform: isOpen ? 'translateX(0)' : 'translateX(100%)',\n        transition: 'transform 0.3s ease-out',\n        zIndex: 100000,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden'\n      }}>\n        {/* Header */}\n        <div style={{\n          padding: styles.spacing.lg,\n          borderBottom: `1px solid ${styles.colors.border}`,\n          backgroundColor: styles.colors.surface\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'flex-start'\n          }}>\n            <div style={{ flex: 1 }}>\n              <h2 style={{\n                margin: 0,\n                fontSize: styles.typography.fontSize.xl,\n                fontWeight: styles.typography.fontWeight?.bold || '700',\n                color: styles.colors.text,\n                marginBottom: styles.spacing.xs\n              }}>\n                {model?.Name || 'No Model Selected'}\n              </h2>\n              {model?.APIName && (\n                <div style={{\n                  fontSize: styles.typography.fontSize.sm,\n                  color: styles.colors.textSecondary,\n                  fontFamily: 'monospace'\n                }}>\n                  {model.APIName}\n                </div>\n              )}\n              {model?.IsActive !== undefined && (\n                <div style={{ marginTop: styles.spacing.sm }}>\n                  {renderStatusBadge(model.IsActive ? 'Active' : 'Inactive')}\n                </div>\n              )}\n            </div>\n            <button\n              onClick={onClose}\n              style={{\n                width: '32px',\n                height: '32px',\n                borderRadius: getBorderRadius('sm'),\n                border: 'none',\n                backgroundColor: 'transparent',\n                color: styles.colors.textSecondary,\n                fontSize: styles.typography.fontSize.lg,\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'background-color 0.2s'\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.surfaceHover || styles.colors.surface;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = 'transparent';\n              }}\n            >\n              \u2715\n            </button>\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div style={{\n          flex: 1,\n          overflow: 'auto',\n          padding: styles.spacing.lg\n        }}>\n          {model ? (\n            <>\n              {/* Model Description */}\n              {model.Description && (\n                <div style={{\n                  marginBottom: styles.spacing.xl,\n                  padding: styles.spacing.md,\n                  backgroundColor: styles.colors.surface,\n                  borderRadius: getBorderRadius('md'),\n                  borderLeft: `3px solid ${styles.colors.primary}`\n                }}>\n                  <div style={{\n                    fontSize: styles.typography.fontSize.md,\n                    color: styles.colors.textSecondary,\n                    lineHeight: 1.6\n                  }}>\n                    {model.Description}\n                  </div>\n                </div>\n              )}\n              \n              {/* Model Specifications */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  Specifications\n                </h3>\n                <div style={{\n                  display: 'grid',\n                  gridTemplateColumns: 'repeat(2, 1fr)',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Input Token Limit\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(model.InputTokenLimit)}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Cost Rank\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.warning || styles.colors.secondary\n                    }}>\n                      {'$'.repeat(Math.min(model.CostRank || 0, 5))}\n                      <span style={{ opacity: 0.3 }}>\n                        {'$'.repeat(Math.max(0, 5 - (model.CostRank || 0)))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Vendors Section */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  Vendors ({vendors.length})\n                </h3>\n                \n                {/* Model Developer */}\n                {vendorsByType['Model Developer'].length > 0 && (\n                  <div style={{ marginBottom: styles.spacing.md }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || '500',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon('Model Developer')}\n                      Model Developer\n                    </div>\n                    {vendorsByType['Model Developer'].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius('sm'),\n                          marginBottom: styles.spacing.sm,\n                          display: 'flex',\n                          justifyContent: 'space-between',\n                          alignItems: 'center'\n                        }}\n                      >\n                        <div>\n                          <div style={{\n                            fontSize: styles.typography.fontSize.md,\n                            fontWeight: styles.typography.fontWeight?.medium || '500',\n                            color: styles.colors.text\n                          }}>\n                            {vendor.Vendor}\n                          </div>\n                          {vendor.APIName && (\n                            <div style={{\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                              color: styles.colors.textSecondary,\n                              fontFamily: 'monospace'\n                            }}>\n                              API: {vendor.APIName}\n                            </div>\n                          )}\n                        </div>\n                        {renderStatusBadge(vendor.Status)}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Inference Providers */}\n                {vendorsByType['Inference Provider'].length > 0 && (\n                  <div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.sm,\n                      fontWeight: styles.typography.fontWeight?.medium || '500',\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.sm\n                    }}>\n                      {renderVendorTypeIcon('Inference Provider')}\n                      Inference Providers\n                    </div>\n                    {vendorsByType['Inference Provider'].map((vendor, index) => (\n                      <div\n                        key={index}\n                        style={{\n                          padding: styles.spacing.md,\n                          backgroundColor: styles.colors.surface,\n                          borderRadius: getBorderRadius('sm'),\n                          marginBottom: styles.spacing.sm\n                        }}\n                      >\n                        <div style={{\n                          display: 'flex',\n                          justifyContent: 'space-between',\n                          alignItems: 'flex-start',\n                          marginBottom: styles.spacing.sm\n                        }}>\n                          <div>\n                            <div style={{\n                              fontSize: styles.typography.fontSize.md,\n                              fontWeight: styles.typography.fontWeight?.medium || '500',\n                              color: styles.colors.text\n                            }}>\n                              {vendor.Vendor}\n                            </div>\n                            {vendor.APIName && (\n                              <div style={{\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                                color: styles.colors.textSecondary,\n                                fontFamily: 'monospace'\n                              }}>\n                                API: {vendor.APIName}\n                              </div>\n                            )}\n                          </div>\n                          <div style={{\n                            display: 'flex',\n                            gap: styles.spacing.xs,\n                            alignItems: 'center'\n                          }}>\n                            {vendor.Priority && (\n                              <span style={{\n                                padding: `2px ${styles.spacing.xs}`,\n                                backgroundColor: styles.colors.info + '15',\n                                color: styles.colors.info || styles.colors.primary,\n                                borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                                fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                              }}>\n                                Priority: {vendor.Priority}\n                              </span>\n                            )}\n                            {renderStatusBadge(vendor.Status)}\n                          </div>\n                        </div>\n                        \n                        {/* Vendor Capabilities */}\n                        <div style={{\n                          display: 'flex',\n                          gap: styles.spacing.xs,\n                          flexWrap: 'wrap'\n                        }}>\n                          {vendor.SupportsStreaming && (\n                            <span style={{\n                              padding: `2px ${styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + '15',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Streaming\n                            </span>\n                          )}\n                          {vendor.SupportsEffortLevel && (\n                            <span style={{\n                              padding: `2px ${styles.spacing.xs}`,\n                              backgroundColor: styles.colors.success + '15',\n                              color: styles.colors.success || styles.colors.primary,\n                              borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              \u2713 Effort Level\n                            </span>\n                          )}\n                          {vendor.MaxInputTokens && (\n                            <span style={{\n                              padding: `2px ${styles.spacing.xs}`,\n                              backgroundColor: styles.colors.background,\n                              color: styles.colors.textSecondary,\n                              borderRadius: getBorderRadius('xs') || getBorderRadius('sm'),\n                              fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm\n                            }}>\n                              Max: {formatTokens(vendor.MaxInputTokens)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Usage Statistics */}\n              <div style={{ marginBottom: styles.spacing.xl }}>\n                <h3 style={{\n                  margin: 0,\n                  marginBottom: styles.spacing.md,\n                  fontSize: styles.typography.fontSize.lg,\n                  fontWeight: styles.typography.fontWeight?.semibold || '600',\n                  color: styles.colors.text\n                }}>\n                  Usage Statistics\n                </h3>\n                <div style={{\n                  display: 'grid',\n                  gridTemplateColumns: 'repeat(2, 1fr)',\n                  gap: styles.spacing.md\n                }}>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Runs\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {stats.totalRuns.toLocaleString()}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Success Rate\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: stats.totalRuns > 0 \n                        ? (stats.successfulRuns / stats.totalRuns >= 0.9 ? styles.colors.success : styles.colors.warning)\n                        : styles.colors.text\n                    }}>\n                      {stats.totalRuns > 0 \n                        ? `${((stats.successfulRuns / stats.totalRuns) * 100).toFixed(1)}%`\n                        : '-'}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Unique Prompts\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {stats.uniquePrompts}\n                    </div>\n                  </div>\n                  <div style={{\n                    padding: styles.spacing.md,\n                    backgroundColor: styles.colors.surface,\n                    borderRadius: getBorderRadius('sm')\n                  }}>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.xs || styles.typography.fontSize.sm,\n                      color: styles.colors.textSecondary,\n                      marginBottom: styles.spacing.xs\n                    }}>\n                      Total Tokens\n                    </div>\n                    <div style={{\n                      fontSize: styles.typography.fontSize.lg,\n                      fontWeight: styles.typography.fontWeight?.semibold || '600',\n                      color: styles.colors.text\n                    }}>\n                      {formatTokens(stats.totalTokens)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: '100%',\n              color: styles.colors.textSecondary\n            }}>\n              <div style={{\n                fontSize: styles.typography.fontSize.lg,\n                marginBottom: styles.spacing.md\n              }}>\n                No Model Selected\n              </div>\n              <div style={{\n                fontSize: styles.typography.fontSize.md\n              }}>\n                Select a model from the list to view its details\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Footer with Open Record Button */}\n        {model && (\n          <div style={{\n            padding: styles.spacing.lg,\n            borderTop: `1px solid ${styles.colors.border}`,\n            backgroundColor: styles.colors.surface\n          }}>\n            <button\n              onClick={handleOpenRecord}\n              style={{\n                width: '100%',\n                padding: styles.spacing.md,\n                backgroundColor: styles.colors.primary,\n                color: 'white',\n                border: 'none',\n                borderRadius: getBorderRadius('md'),\n                fontSize: styles.typography.fontSize.md,\n                fontWeight: styles.typography.fontWeight?.semibold || '600',\n                cursor: 'pointer',\n                transition: 'background-color 0.2s'\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primaryHover || styles.colors.primary;\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = styles.colors.primary;\n              }}\n            >\n              Open Model Record\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}",
  "dependencies": [],
  "libraries": []
}